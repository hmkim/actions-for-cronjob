<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[lastrites2018]]></title><description><![CDATA[Blog posted about ...]]></description><link>https://gatsby-starter-bee.netlify.com</link><generator>RSS for Node</generator><lastBuildDate>Wed, 17 Apr 2019 12:56:51 GMT</lastBuildDate><item><title><![CDATA[Mobx]]></title><description><![CDATA[Mobx Observable State
Mobx를 사용하게 되면 앱의 상태는 관찰할 수 있는 상태가 된다. Computed Value
연산에 기반되는 값이 바뀔때만 새로 연산한다. Reactions
값이 바뀌면 해야 할 일을 정해준다. Actions…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20190410 Mobx/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20190410 Mobx/</guid><pubDate>Wed, 10 Apr 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Mobx&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observable State
Mobx를 사용하게 되면 앱의 상태는 관찰할 수 있는 상태가 된다.&lt;/li&gt;
&lt;li&gt;Computed Value
연산에 기반되는 값이 바뀔때만 새로 연산한다.&lt;/li&gt;
&lt;li&gt;Reactions
값이 바뀌면 해야 할 일을 정해준다.&lt;/li&gt;
&lt;li&gt;Actions
State에 변화를 일으키는 것을 말함.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;autorun&quot;&gt;&lt;a href=&quot;#autorun&quot; aria-label=&quot;autorun permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;autorun&lt;/h3&gt;
&lt;p&gt;computed 로 만든 값의 .get() 함수를 호출해주면, 하나하나 observe 해주지 않아도 됨.&lt;/p&gt;
&lt;h3 id=&quot;action&quot;&gt;&lt;a href=&quot;#action&quot; aria-label=&quot;action permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;action&lt;/h3&gt;
&lt;p&gt;action을 사용하면, 모든 action이 끝나면 reaction이 일어나게 할 수 있음.&lt;/p&gt;
&lt;h3 id=&quot;transaction&quot;&gt;&lt;a href=&quot;#transaction&quot; aria-label=&quot;transaction permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;transaction&lt;/h3&gt;
&lt;p&gt;action을 한번에 일으킬 수 있음.&lt;/p&gt;
&lt;h3 id=&quot;decorator&quot;&gt;&lt;a href=&quot;#decorator&quot; aria-label=&quot;decorator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;decorator&lt;/h3&gt;
&lt;p&gt;정규 문법은 아니지만, babel로 변환 가능. decorator 함수가 필요 없어짐.&lt;/p&gt;
&lt;h3 id=&quot;store&quot;&gt;&lt;a href=&quot;#store&quot; aria-label=&quot;store permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Store?&lt;/h3&gt;
&lt;p&gt;Mobx에서는 State와 비지니스 로직을 포함하는 Class만을 Store라고 부름.&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://velog.io/@velopert/MobX-1-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-9sjltans3p&quot;&gt;MobX (1) 시작하기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://woowabros.github.io/experience/2019/01/02/kimcj-react-mobx.html&quot;&gt;React에서 Mobx 경험기 (Redux와 비교기) - 우아한형제들 기술 블로그&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[웹 개발을 막 시작하는 당신에게 권하는 도구들]]></title><description><![CDATA[…]]></description><link>https://gatsby-starter-bee.netlify.com/development/tools/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/development/tools/</guid><pubDate>Wed, 20 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;프로그래밍이라는 영역에 막 던져졌습니다. 불편한 것은 너무 많고, 검색해보면 그 불편함을 해결해준다고 권하는 도구가 너무 많습니다. 괜히 잘못 무언가를 설치하면 돌이킬 수 없거나 나쁜 버릇이 들지도 모른다는 걱정이 듭니다. 비법까진 아니더라도 좀 편하게 프로그래밍에만 집중할 수 있게 길을 제시해줬으면 좋겠습니다.&lt;/p&gt;
&lt;p&gt;아무것도 없이 ‘안녕, 세상’부터 외쳐볼 수도 있지만, 여러 툴을 가진 상태로 시작한다면 핵심적인 목적인 코딩에 더 집중할 수 있지 않을까요? 개발하기 전의 내게 누군가 좀 알려줬으면 좋았을 텐데 싶은 도구들만 싹싹 긁어서 모았습니다. 사용하신다면, 아마 이 글을 읽는 시간보다 많은 시간을 벌게 되실 겁니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g1m8m3enizj31de0rsnpf.jpg&quot;&gt;&lt;/p&gt;
&lt;h6 id=&quot;대체-무엇을-써야-하는-걸까&quot;&gt;&lt;a href=&quot;#%EB%8C%80%EC%B2%B4-%EB%AC%B4%EC%97%87%EC%9D%84-%EC%8D%A8%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B1%B8%EA%B9%8C&quot; aria-label=&quot;대체 무엇을 써야 하는 걸까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;대체 무엇을 써야 하는 걸까?&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;아래 내용은 웹 개발자를 위한 도구이며, Mac을 기준으로 작성되어 있습니다. 제가 경험했거나, 사용하고 있는 도구만 담았습니다. 이제 막 개발을 시작한 분들을 대상으로 하지만, 개발에 능숙하신 분이라도 하나 정도는 건지실 수 있을 것 같습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLI Program&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paulirish/git-open&quot;&gt;Git-Open&lt;/a&gt; CLI에서 &lt;code class=&quot;language-text&quot;&gt;git open&lt;/code&gt; 이라고 치면 해당하는 레포지토리를 웹사이트 브라우저에 띄워줍니다. branch를 판 경우에도 branch 경로로 띄워줍니다.(Github, GitLab, BitBucket)&lt;/li&gt;
&lt;li&gt;설치 할 필요 없는 팁 : &lt;a href=&quot;http://blog.giftbot.kr/mac/open-terminal-in-finder/&quot;&gt;맥 현재 파인더 경로에서 터미널 바로 여는 방법&lt;/a&gt; 잠깐 배우면 내내 편합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mac Utility&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/magnet/id441258766?mt=12&quot;&gt;Magnet&lt;/a&gt; 유료, 화면에 여러 앱을 빠르게 배치할 수 있습니다. 듀얼 모니터를 사용한다면 필수품.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt; 하루에 가장 자주 쓰게되는 앱. 워크플로우 제외하고 무료. Spotlight의 강화 버전. 맥에 설치된 각종 응용 프로그램들을 실행하는 것은 물론이고, 다양한 검색을 키보드로만 수행할 수 있습니다. Custom Search를 만들어놓으면, 공식 문서와 친해질 수 있습니다. 추천하는 알프레드 호출 단축키는 오른쪽 command 두번 입력입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chrome Extension&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm&quot;&gt;Web Developer&lt;/a&gt; 웹 개발을 하게 되면 필요하다고 느끼는 대부분의 작업을 해줍니다. 사이트에 적용된 CSS를 일시적으로 비활성화하거나, 쿠키 관련 작업, Image를 숨기고, Color Picker 역할 등등.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg/related?hl=en&quot;&gt;Wappalyzer&lt;/a&gt; 방문한 사이트에서 무슨 기술을 썼는지 궁금하다면 클릭 한번으로 간편하게 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc&quot;&gt;Json-Viewer&lt;/a&gt; JSON 보기 편해집니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc&quot;&gt;Surfingkeys&lt;/a&gt; 브라우저에서 할 수 있는 모든 행동을 단축키화 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf&quot;&gt;Check My Link&lt;/a&gt; 현재 웹 페이지에 깨진 링크가 있는지 빠르게 확인하고, 잘못된 링크가 있다면 클립보드에 복사해줍니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimeo-repeat-speed/noonakfaafcdaagngpjehilgegefdima&quot;&gt;Vimeo repeat &amp;#x26; speed&lt;/a&gt; Vimeo에서 배속, 반복 재생 기능을 사용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSCODE Extension&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&quot;&gt;Bracket Pair Colorizer&lt;/a&gt; 괄호의 단계별로 다른 색을 적용해주는 확장. 괄호를 잘못 닫는 문제를 예방해주고, 작성 중인 코드 영역이 어디인지 분명하게 표시해줍니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&quot;&gt;Prettier&lt;/a&gt; 코드 스타일은 Prettier에게 맡기고 더 심각한 문제, 변수 이름 작명 같은 걸 더 고민해봅시다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=whtouche.vscode-js-console-utils&quot;&gt;javascript console utils&lt;/a&gt; 자바스크립트 코딩하며 지겨울 정도로 쳐야 하는 console.log를 단축키로 해결해줍니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight&quot;&gt;Color Highlight&lt;/a&gt; CSS에서 RGB나 hex코드가 무슨 색인지 바로 표시해줍니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight&quot;&gt;Todo-Highlight&lt;/a&gt; 미래의 나에게 퀘스트를 보내봅시다. 주석에도 HightLight이 됩니다. 커스텀 키워드를 설정할 수도 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=adammaras.overtype&quot;&gt;OverType&lt;/a&gt; 코드 작성시에 삽입 모드 대신 가끔 수정 모드가 필요하다고 느끼신다면.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rid9.datetime&quot;&gt;Date &amp;#x26; Time&lt;/a&gt; 스테이터스 바에 시간을 표시해줍니다. 시간을 확인하기 위해 마우스를 움직일 필요가 없습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learngitbranching.js.org/&quot;&gt;Learn Git Branching&lt;/a&gt; (웹사이트) 코드를 날려먹을 걱정 없는 안전한 환경에서, Git master가 되어보세요. Git에 어느정도 익숙하다면 원격 퀘스트부터 클리어 하는 것이 도움이 될 수도 있습니다. 한글판 지원!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/k88hudson/git-flight-rules/blob/master/README_kr.md&quot;&gt;깃을 위한 flight rules&lt;/a&gt; (웹사이트) 우주비행선 조종하는 것마냥 깃이 어렵게 느껴질 때가 있습니다. 깃 문제에 부딪히면 바로 찾아볼 수 있는 가이드.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dbdiagram.io/&quot;&gt;Database&lt;/a&gt; 코드 입력만으로 DB 구조를 그릴 수 있습니다. 정성껏 선을 긋는데 시간을 버리지 맙시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 툴을 시도하는 걸 두려워하지 마세요. ‘설치만 하고 나중에 써봐야지.’ 안 됩니다. 설치하셨다면, 단 1분이라도 사용해보세요. 사용하지 않은 도구는 기억에서 잊혀집니다. 최소한 당신의 도구가 어떻게 생겼는지는 알아야 나중에라도 꺼내들 수 있습니다. 혹시 여기에 언급되진 않았지만, 개발을 이제 막 시작하는 친구에게 꼭 알려주고 싶은 도구가 있다면 코멘트를 남겨주시면 좋겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Airbnb 합격한 김선영 개발자 이야기]]></title><description><![CDATA[김선영 - 3년 차 개발자, 리액트, 리액트 네이티브, Airbnb…]]></description><link>https://gatsby-starter-bee.netlify.com/session/김선영 - 3년차 개발자, 리액트, 리액트 네이티브, airbnb/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/session/김선영 - 3년차 개발자, 리액트, 리액트 네이티브, airbnb/</guid><pubDate>Tue, 26 Feb 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;김선영 - 3년 차 개발자, 리액트, 리액트 네이티브, Airbnb&lt;/p&gt;
&lt;p&gt;첫 회사를 거의 리모트로 일함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장점 : 전혀 피곤하지 않음.&lt;/li&gt;
&lt;li&gt;안 좋은 점 : 누가 옆에서 서포트해 줄 사람이 없기 때문에 슬럼프가 오면 크게 옴. 여러분 회사에 가세요…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;처음부터 풀스택. 어쩌다 보니 시니어 포지션으로 가게 됐는데 2주 만에 실력이 밝혀져서, 새벽까지 일하고 그랬음.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cracking coding interview 4회독 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com&quot;&gt;leetcode.com&lt;/a&gt; - 실제로 많이 도움이 됨. 한국도 요새 알고리즘 중요하게 여기는 것 같다. 여기 진짜 도움 되었음. 진지하게 알고리즘 공부를 하고 싶다면 leet code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pramp.com&quot;&gt;pramp&lt;/a&gt; coding interview&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;오후 5시부터 11시까지 코딩 문제만 4개월 정도. project를 할 때, 자신이 어필할 수 있는 부분을 적어놓아야 함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1, 2년은 좋은 tech stack을 가진 회사에서 시간을 쌓는 게 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;처음부터 영주권을 물어보지 않는다(처음부터 그런 질문을 받아본 적은 없다.)&lt;/p&gt;
&lt;p&gt;드롭박스, 트위치, Airbnb(추천서가 있었음)&lt;/p&gt;
&lt;p&gt;회사의 프로젝트와 일치하고, 테크 스택이 맞는다면 가능성이 있다.&lt;/p&gt;
&lt;p&gt;선영 님이 생각하는 좋은 회사 : 테크 스택(오래되거나 낡은 프레임워크를 사용하지 않음)이 최신이고, 자신이 할 일이 많은 회사.&lt;/p&gt;
&lt;p&gt;시스템은 화이트 보딩.&lt;/p&gt;
&lt;p&gt;쓴 코드를 사진으로 찍어 감.&lt;/p&gt;
&lt;p&gt;big o notation으로 time complexity&lt;/p&gt;
&lt;p&gt;나는 코드를 어떤 식으로 할 것이라고 비쥬얼라이제이션 한 후에 화이트 보딩.&lt;/p&gt;
&lt;p&gt;회사에서 많이 뽑아먹기 위해 항상 좋은 프로젝트에 배정되려고 노력함. 적극적으로 리딩하는 포지션을 맡음. 일하면서는 풀 스택을 더 많이 함. 큰 회사 가면 자기만의 전문분야가 필요. 풀 스택을 하는 건 장단이 있다고 생각. Facebook은 그 사람이 이 정도 인터뷰를 했으면 어느 팀으로도 갈 수 있다고 믿음. 코드 외적인 시간을 낭비하지 않도록 카바를 많이 쳐줌. 직급이 많이 올라갈수록 미팅이 많은데, 본인은 미팅을 별로 하지 않음.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.educative.io&quot;&gt;www.educative.io&lt;/a&gt; -&gt; 도표를 그릴 줄 알아야 함. 처음엔 어려웠지만, 5번째 읽었을 정도에는 괜찮아졌음.&lt;/p&gt;
&lt;p&gt;1년 차엔 새벽까지 공부하곤 했었는데, 가장 많이 성장함. 재택근무의 장점은 충분히 자기 시간을 가질 수 있다는 거. 그래서 3년 차에 이직을 준비할 수 있었음. (educative) 시스템 디자인의 요지는 큰 그림을 볼 수 있느냐고, 이건 2년 차 이후부터 볼 수 있음. 작은 회사였기 때문에 큰 권한을 받을 수 있었다고 생각. 3개월 차에는 번아웃 상태로 200개씩 이력서 넣어서 두 회사에서 연락이 옴. 처음에 선택지가 없었음. 엔트리 레벨에는 초이스가 없음. 그럼에도 불구하고, 테크 스택은 버리지 않아야 한다. 차라리 사이드 프로젝트라도 해라. 동기부여가 안 되면 힘드니까, 너무 큰 프로젝트를 하려는 마음을 버리고, 짧게 짧게 플랜을 짜서, 소규모의 프로젝트를 해라. 짧게 짧게 단타로 끊어갈 수 있게. 레포를 만들면, 스크린샷 잘 기록하고, 어떤 테크 스택을 썼는지 한 줄이라도 기록해라. 해외에서는 블로깅 많이 보지만 본인은 하진 않음. 회사의 테크 스택 중요.&lt;/p&gt;
&lt;p&gt;1년 차에는 회사일만 하느라, 제정신이 아니었음. (1년 지나고 부턴)까페 가서 무조건 11시까지 하는 방식으로 준비함.&lt;/p&gt;
&lt;p&gt;리크루터들이 search로 들어온다. 사용한 API, 기술 스택을 작성하고, 어떤 스킬을 잘하는지 적어주기.&lt;/p&gt;
&lt;p&gt;번아웃에도 불구하고, 스케줄이 억지로 자신을 움직이게 만들어서, 오히려 번아웃을 이겨낼 수 있었음. 땅굴 파기보다 뭔가 계속해야 하는 스케줄을 만들기.&lt;/p&gt;
&lt;p&gt;취업하는데 2~3달 걸림. 왜 떨어졌는지 큰 회사에서도 피드백 주지 않음. 9시 - 5시. 엔지니어 파워가 센 회사에 다녔음. airbnb는 다이버시티가 있다고 생각해서 선택함.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Notion Resume about…]]></description><link>https://gatsby-starter-bee.netlify.com/resume-en/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/jaewankim/7bb29f5ad5654dd4aa36f00f88f07e34&quot; about=&quot;_blank&quot;&gt;Notion Resume&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;about 버튼을 눌러주셔서 감사합니다. 🙏 위의 노션 링크로 제 이력서를 읽으실 수 있습니다. 제게 연락하고 싶으시다면 이메일 혹은 문자도 괜찮습니다.&lt;/p&gt;
&lt;p&gt;이력서에서는 생략 혹은 축약된 제 장점 어필을 해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정식으로 웹 개발 공부를 시작하기 이전에 글을 쓰는 직업을 갖고 있었고, 비록 글로 먹고사는 삶에는 실패했지만, 글에 민감합니다. 자료와 메뉴얼을 읽는 것을 좋아하고, 새로운 것을 알게 되면 그 즉시 알리고 싶어 합니다. 좀 더 나은 문서를 작성하는데 관심이 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;버그를 잘 잡아 왔고, 앞으로도 잘 잡을 겁니다. 유저에게 불편을 주는 버그라면 빠르게 해결하고 싶습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발 재밌습니다. 소모하는 일이 아니라, 무언가를 만들고 개선하는 일이기에 즐겁게 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[LocalStorage use cost]]></title><description><![CDATA[1st test to call 1 million times localStorage to get item which does exist. 2nd test to call 1 million times localStorage to get item which…]]></description><link>https://gatsby-starter-bee.netlify.com/development/LocalStorage use cost/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/development/LocalStorage use cost/</guid><pubDate>Thu, 17 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;!-- ## **LocalStorage use cost** --&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1st test to call 1 million times localStorage to get item which does exist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2nd test to call 1 million times localStorage to get item which does NOT exist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Results:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Item found: 0.0007991071428571318ms per call&quot;&quot;Item not found: 0.0006365004639793477ms per call”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;In short - just use it. It takes no time. 0.0007 of 1 millisecond.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;결론&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%EB%A1%A0&quot; aria-label=&quot;결론 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결론&lt;/h2&gt;
&lt;p&gt;로컬 스토리지 액세스 시간은 쿠키보다 빠릅니다. 로컬 스토리지를 읽는 방식은 동기 방식이지만, 속도가 워낙 빠르기 때문에 blocking의 위험은 없습니다.&lt;/p&gt;
&lt;p&gt;다만, 개인정보 같은 예민한 데이터는 가급적 로컬 스토리지에 저장하지 않는게 좋음. 암호화 해서 저장하는 방법도 있지만, 자바스크립트 암호 모듈이 썩 쓸만한게 아직 없는 모양.&lt;/p&gt;
&lt;p&gt;IE 8에서도 사용 가능.&lt;/p&gt;
&lt;p&gt;localStorage 사용법&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.teamtreehouse.com/storing-data-on-the-client-with-localstorage&quot;&gt;https://blog.teamtreehouse.com/storing-data-on-the-client-with-localstorage&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;참조&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0&quot; aria-label=&quot;참조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;참조&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jsperf.com/localstorage-vs-objects/47&quot;&gt;https://jsperf.com/localstorage-vs-objects/47&lt;/a&gt; (브라우저 별 벤치마크)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/8074218/speed-cost-of-localstorage&quot;&gt;https://stackoverflow.com/questions/8074218/speed-cost-of-localstorage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17246175/local-storage-vs-cookie-performance&quot;&gt;https://stackoverflow.com/questions/17246175/local-storage-vs-cookie-performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/17280390/can-local-storage-ever-be-considered-secure&quot;&gt;https://stackoverflow.com/questions/17280390/can-local-storage-ever-be-considered-secure&lt;/a&gt; 로컬스토리지 보안&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.peterbe.com/plog/localstorage-is-fast&quot;&gt;https://www.peterbe.com/plog/localstorage-is-fast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stevesouders.com/blog/2014/02/11/measuring-localstorage-performance/&quot;&gt;https://www.stevesouders.com/blog/2014/02/11/measuring-localstorage-performance/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://crocodillon.com/blog/always-catch-localstorage-security-and-quota-exceeded-errors&quot;&gt;http://crocodillon.com/blog/always-catch-localstorage-security-and-quota-exceeded-errors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.taniarascia.com/how-to-use-local-storage-with-javascript&quot;&gt;https://www.taniarascia.com/how-to-use-local-storage-with-javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/javascript/comments/52jxnc/using_localstorage_extensively_any_risks_or/&quot;&gt;https://www.reddit.com/r/javascript/comments/52jxnc/using&lt;em&gt;localstorage&lt;/em&gt;extensively&lt;em&gt;any&lt;/em&gt;risks_or/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[개발자가 되기 전 알았더라면 좋았을 3가지]]></title><description><![CDATA[Adobe in San Francisco 프론트엔드 엔지니어로 리모트로 일하는 김민서, Alex Kim님 세션 정리 비전공자, 2015년에 코딩을 시작했고, Hack Reactor에서 공부했다. 2015년의 내게 말해주고 싶은 것들…]]></description><link>https://gatsby-starter-bee.netlify.com/session/개발자가 되기 전 알았더라면 좋았을 3가지/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/session/개발자가 되기 전 알았더라면 좋았을 3가지/</guid><pubDate>Wed, 16 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Adobe in San Francisco 프론트엔드 엔지니어로 리모트로 일하는 김민서, Alex Kim님 세션 정리&lt;/p&gt;
&lt;p&gt;비전공자, 2015년에 코딩을 시작했고, Hack Reactor에서 공부했다.&lt;/p&gt;
&lt;h1 id=&quot;2015년의-내게-말해주고-싶은-것들&quot;&gt;&lt;a href=&quot;#2015%EB%85%84%EC%9D%98-%EB%82%B4%EA%B2%8C-%EB%A7%90%ED%95%B4%EC%A3%BC%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EA%B2%83%EB%93%A4&quot; aria-label=&quot;2015년의 내게 말해주고 싶은 것들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2015년의 내게 말해주고 싶은 것들&lt;/h1&gt;
&lt;h2 id=&quot;1-목표-덜-세우고-시스템-구축하기-goals--systems&quot;&gt;&lt;a href=&quot;#1-%EB%AA%A9%ED%91%9C-%EB%8D%9C-%EC%84%B8%EC%9A%B0%EA%B3%A0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-goals--systems&quot; aria-label=&quot;1 목표 덜 세우고 시스템 구축하기 goals  systems permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 목표 덜 세우고 시스템 구축하기 (Goals &amp;#x3C; Systems)&lt;/h2&gt;
&lt;p&gt;개인적인 경험. 목표 위주가 오히려 정신 건강에 안 좋았다.
일반적으로 스마트하다고 여겨지는 목표 세우기 : 구체적이고, 측정가능하고, 실행가능하고, 시간기한이 있는 목표… 과연 얼마나 효과적일까?&lt;/p&gt;
&lt;p&gt;목표를 세우는 것보다는 시스템을 구축하는 것이 더 도움이 된다.&lt;/p&gt;
&lt;p&gt;성공적인 개발자로 취업하는 것(목표) vs 내가 코드를 짤 때 고려하는 것들, 새로운 JS 프레임워크를 배우는 방법, 블로그에 배웠던 걸 기록하는 것, 팀원들에게 코드 리뷰 받는 것, etc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller Example : 매일 Algorithm 하나 풀기, 관련 자료구조 처음부터 구현하기, 공간 복잡도 그려보기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제를 푸는 것은 목표일뿐, 어떻게 푸느냐가 시스템이다. 목표를 무시하고 과정에만 시간을 쏟으면 어떨까? 목표를 아예 무시하더라도, 시스템 자체가 탄탄하고, 체계적이라면 괜찮다.&lt;/p&gt;
&lt;p&gt;목표지향적인 접근의 문제점들&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;목표 자체가 결과의 차이를 만들어내지는 않는다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;태릉 선수촌 선수들의 목표는 동일함(올림픽 메달)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목표 이루는 것 === 일시적인 변화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자 취업에 성공해도, 공부 학습 시스템이 구축되지 않았다면 원하는 퍼포먼스를 내지 못한다.&lt;/li&gt;
&lt;li&gt;즉, 목표를 이루는 것 자체로는 지속적인 변화를 가져오지 못한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목표가 가져오는 불안감과 걱정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deferred Happiness Promise : 미래의 나만이 누릴 수 있는 행복, 목표를 이루면 행복해지겠지, 괜찮아지겠지…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목표를 못 이름 === 불행&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;계획 및 방향성을 위해 목표를 활용하는 것은 좋지만, 과정 자체를 이뤄내기 위해서는 시스템에 대한 투자가 더 필요&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;세션 듣다가 든 생각 : 갑자기 로또에 당첨되서 부자가 되었다고 한들, 그 부를 지킬 수 있을까? 삶을 어떻게 살지에 대한 철학이 없다면 갑자기 얻은 부가 그 사람에게 어떤 긍정적인 영향을 미칠 수 있을까? 지속적인 변화를 이루려면 시스템이 필요한 것이 아닌가? 아예 목표를 무시하라는 Alex kim님의 흥미로운 제안. 목표만이 위주인 삶이라면 그 목표가 좌절되었을 때의 삶은? 과정 자체가 즐거울 수는 없을까?&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-행동-변화의-3가지-레이어-이해&quot;&gt;&lt;a href=&quot;#2-%ED%96%89%EB%8F%99-%EB%B3%80%ED%99%94%EC%9D%98-3%EA%B0%80%EC%A7%80-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%9D%B4%ED%95%B4&quot; aria-label=&quot;2 행동 변화의 3가지 레이어 이해 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 행동 변화의 3가지 레이어 이해&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz8eqijqi9j30e007sgnb.jpg&quot; alt=&quot;스크린샷 2019-01-16 오후 3.24.49&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결과(Outcome) : 목표 / 어떤 결과물을 얻는가&lt;/li&gt;
&lt;li&gt;과정(Processes) : 습관 / 시스템&lt;/li&gt;
&lt;li&gt;자아(Identity) : 내가 보는 나의 모습, 신념&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나도 시작할 땐 나를 개발자로 여기지 않았었다. 대부분의 사람들은 결과부터 시작한다. 추천하는 방법 : 자아부터 시작하면 어떨까? 바깥부터 시작하기보다 안에서부터 시작하면 어떨까? 이미 난 유능한 개발자라고 생각하면 어떨까? (리버스 엔지니어링으로 접근해보기)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;벨로퍼트님의 스스로 짱짱 개발자라고 생각하기와 맞닿아있는 느낌&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아이덴티티 베이스드 어프로치Identity based Apporach&lt;/p&gt;
&lt;p&gt;지속적인 변화를 위한 알고리즘&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;어떤 개발자가 될지 결정하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전공자보다 뛰어난 비전공자 출신 개발자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Technical : HTML/CSS/Javascript 기본기, React 설계 &amp;#x26; 컴포넌트 디자인, 탄탄한 컴퓨터공학 기본기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-Technical : 커뮤니케이션 능력, 새로운 업무를 배우고자 하는 의지 &amp;#x26; 능력, 같이 일하고 싶은 개발자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소소한 습관들로 스스로에게 증명하자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;깔끔한 Arrow Fuction을 한 블록 씀 -&gt; 나는 유능한 웹 개발자다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;막힌 팀원을 페어 프로그래밍으로 도와줌 -&gt; 나는 같이 일하고 싶은 개발자다. (나의 아이덴티티에 증명 됨)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;큰 이벤트 대신 매일 할 수 있는 소소한 것들을 해나가기&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;새로운 Identity는 새로운 증거가 필요함 -&gt; 증거 : 나의 Micro-habit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;작은 벽돌 쌓기 같은 느낌? 큰 이벤트보다 소소한 습관들에 투자하면 어떨까? 내가 어떤 모습이 되고 나서 그렇게 행동하는게 아니라 이미 그런 사람이라고 생각하고 행동하면 어떨까?&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identity based Apporach의 장점&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;내가 되고 싶은 개발자의 모습을 역으로 생각하면서 맞춰나가니까 좀 더 당연한 습관으로 받아들이게 됐다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;내 자아와 일관된 행동을 하는게 더 쉬워져서 의지력에 덜 의존하게 됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small Win(작은 성공들)을 이루기 쉽다. 과정 자체가 더 재밌어진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나는 이런 사람이니 이렇게 행동해야 해.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;큰 성공에 집착하면 하루하루가 너무 힘들다. 난 일상 자체가 즐겁고 재밌어지길 원한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소소한 습관 기반 -&gt; 자연스럽게 시스템에 더 투자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-programming yourself through stories&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본인에게 하는 혼잣말 &amp;#x26; 셀프 스토리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예전에는 “나는 비전공자 출신어어서 수학적 사고가 떨어져.” 이런 식으로 계속 말해왔었는데, 실제로는 무수한 노력을 했음에도 불구하고 자신에게 반복적인 말을 들려줘서 스스로 그런 모습을 만들게 됨.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다시 스스로의 모습을 재점검하고, 내가 결정한 개발자의 모습 : 비전공자 출신이지만 전혀 기본기에 약점이 없음, 오히려 비전공 출신인게 강점&lt;/li&gt;
&lt;li&gt;알고리즘 &amp;#x26; 컴퓨터 공학에 약한 개발자가 아님&lt;/li&gt;
&lt;li&gt;알고리즘과 컴퓨터 공학을 배우는 시스템에 다시 투자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-소프트-스킬에-투자하기&quot;&gt;&lt;a href=&quot;#3-%EC%86%8C%ED%94%84%ED%8A%B8-%EC%8A%A4%ED%82%AC%EC%97%90-%ED%88%AC%EC%9E%90%ED%95%98%EA%B8%B0&quot; aria-label=&quot;3 소프트 스킬에 투자하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 소프트 스킬에 투자하기&lt;/h2&gt;
&lt;p&gt;인터뷰는 해답을 찾는 문제 풀이가 아니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스토리텔링&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터뷰는 문제 풀이가 아니다! 인터뷰는 스토리 텔링&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;우리가 쓰는 건 코드지만, 우리가 같이 일하는 건 사람이다. 사람을 움직이는 것이 베이스다. 사람을 움직이는 스토리 텔링이 필요하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;“어떻게 개발자로 전향하게 되셨어요?”&lt;/li&gt;
&lt;li&gt;어떻게 개발자로 전향하게 되었는지 궁금하게 만들기, 이런 스토리 텔링을 잘하는 사람은 흔하지 않다.&lt;/li&gt;
&lt;li&gt;이 부분이 굉장히 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세일즈 (영업)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 개발자는 영업직원&lt;/li&gt;
&lt;li&gt;유능한 개발능력을 드러내는 것도 능력 -&gt; 취업/이직 및 커리어 관리에 중요&lt;/li&gt;
&lt;li&gt;팀원들과의 협업 &amp;#x26; 커뮤니케이션 능력 -&gt; 업무에 중요&lt;/li&gt;
&lt;li&gt;협상능력 =&gt; 연봉/업무에 중요&lt;/li&gt;
&lt;li&gt;모든 것은 협상의 개념으로 생각해볼 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blog : &lt;a href=&quot;https://minseoalex.kim&quot;&gt;https://minseoalex.kim&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/minseokim&quot;&gt;https://github.com/minseokim&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;새로운 기술이 hot하다고 뜨면 드는 생각 : 또 튜토리얼 하면서 배워야 해? 이 짓 거리 언제까지 해야 해? -&gt; 다 알 수 없다. 꼭 알아야 하는 것만 잘 알아야 한다. 자신의 장점, 강점이 뭔지 알면 충분하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;막상 혼자 일하니까 게을러진다. 집에서 일할 때가 많다. 게을러지기 쉽다. 자유로움을 얻는 대신 외로움을 얻는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(리모트 일하다보니) 오버 커뮤니케이션을 한다. 상대방이 어떻게 하면 충분히 이해할 수 있을지 생각.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[jasmine to mocha(chai)]]></title><description><![CDATA[toEqual -> to.be.equal toBe -> to.be.equal toBeUndefined() -> to.be.undefined beforeAll -> before or beforeEach afterAll -> after or…]]></description><link>https://gatsby-starter-bee.netlify.com/til/jasmine to mocha/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/jasmine to mocha/</guid><pubDate>Mon, 07 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// jasmine&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Mars&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Wayne&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Mary&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; copy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// mocha + chai&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// TypeError: expect(…).to.be is not a function&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// jasmine처럼 to.be 로 할 수 없음. 함수인 경우엔 equal를 써줘야 함.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Boolean으로 결과가 나와야 할 테스트인 경우 to.be.true,to.be.false 이런 식으로 변환해줄 수 있음. 다만, &apos;be&apos;가 소문자인 것에 유의할 것.&lt;/span&gt;

the be is an object that affects the meaning &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; the tests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Therefor you can&apos;t call it &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; it was a &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; but you need to access its properties or methods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; chaijs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;api&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bdd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;toEqual -&gt; to.be.equal&lt;/li&gt;
&lt;li&gt;toBe -&gt; to.be.equal&lt;/li&gt;
&lt;li&gt;toBeUndefined() -&gt; to.be.undefined&lt;/li&gt;
&lt;li&gt;beforeAll -&gt; before or beforeEach&lt;/li&gt;
&lt;li&gt;afterAll -&gt; after or afterEach&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;참조&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0&quot; aria-label=&quot;참조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참조&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://raygun.com/blog/mocha-vs-jasmine-chai-sinon-cucumber/&quot;&gt;https://raygun.com/blog/mocha-vs-jasmine-chai-sinon-cucumber/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[제로초님 세션 - 개발자라면 블로그를 해라]]></title><description><![CDATA[아래는 라이브로 세션 들으면서 대강 정리한 겁니다. 영상 원본은  유튜브 세션 영상  에서 보실 수 있습니다. 2016년 제로초 블로그 시작 :
자바스크립트 웹 공부용으로 제작. 모든 걸 다 직접 만들기로 결정.
디자인, 프론트부터 서버, DB…]]></description><link>https://gatsby-starter-bee.netlify.com/session/20181212 제로초님 블로그 관련 세션/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/session/20181212 제로초님 블로그 관련 세션/</guid><pubDate>Wed, 12 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;아래는 라이브로 세션 들으면서 대강 정리한 겁니다. 영상 원본은 &lt;a href=&quot;https://www.youtube.com/watch?v=FO98N3DzfMs&quot;&gt;유튜브 세션 영상&lt;/a&gt; 에서 보실 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2016년 제로초 블로그 시작 :
자바스크립트 웹 공부용으로 제작.&lt;/p&gt;
&lt;p&gt;모든 걸 다 직접 만들기로 결정.
디자인, 프론트부터 서버, DB까지.&lt;/p&gt;
&lt;p&gt;초보몽키님 블로그 언급. 매주 하나씩 하려고 함.&lt;/p&gt;
&lt;p&gt;전문성이 떨어져도 괜찮다. 꾸준함이 중요.&lt;/p&gt;
&lt;p&gt;시리즈 연재나 강좌식으로 하면 (블로그를) 꾸준히 쓸 수밖에 없다.&lt;/p&gt;
&lt;p&gt;강좌라도 꼭 전문적이지 않아도 시작할 수 있다.&lt;/p&gt;
&lt;p&gt;지적을 감수할 줄 알아야 한다. 블로그랑 자신이 같이 발전해 나가는 것.&lt;/p&gt;
&lt;p&gt;블로그 직접 만들면서 신기술들을 느껴볼 수 있다.&lt;/p&gt;
&lt;p&gt;애드센스로 광고비 년당 백만원 정도.&lt;/p&gt;
&lt;p&gt;대신 블로그를 하다 보니 책 집필 제안, 동영상 강좌 제안 등을 받았다.&lt;/p&gt;
&lt;p&gt;하루 두세시간을 블로깅에 투자한다.&lt;/p&gt;
&lt;p&gt;heroku에서 호스팅 받고 있다.&lt;/p&gt;
&lt;p&gt;페이스북 프론트엔드 개발 페이지&lt;/p&gt;
&lt;p&gt;거기에 일주일에 한 번씩 도배처럼 글을 쓰고 피드백도 남겨달라고 홍보를 했다.&lt;/p&gt;
&lt;h1 id=&quot;qa&quot;&gt;&lt;a href=&quot;#qa&quot; aria-label=&quot;qa permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Q&amp;#x26;A&lt;/h1&gt;
&lt;p&gt;남을 잘 챙기거나 관심 있는 성격은 아니지만, 코드 리뷰를 꼭 한다. 지금 회사에서는 코드 리뷰를 함. 서로 봐주고, 직급 상관없이 지적, 서로 지적, 개선점 찾기, 코드 리뷰 문화를 중요시함. 머지가 늦어질 수도 있다. 실제 비지니스에서는 어느 정도 타협하는 수밖에 없다.&lt;/p&gt;
&lt;p&gt;길벗의 내용은 다 온라인에 공개하는 정책이 있다. 그게 오히려 책(Node.js 교과서) 매출을 늘려준다고 한다.&lt;/p&gt;
&lt;p&gt;자바스크립트 기본 문법을 알아야 함.&lt;/p&gt;
&lt;p&gt;책과 블로깅의 차이 : 660, 책 쓰는데 일 년 씀.&lt;/p&gt;
&lt;p&gt;벨로퍼트님은 660쪽 2년 걸렸다고 함.&lt;/p&gt;
&lt;p&gt;시급으로 따지면 밑지는 장사. 블로그는 문맥의 일관성이 떨어져도 되는데, 출판사가 문단 길이랑 문단, 문장 하나까지 관여해서, 통제된 환경에서 글을 쓰는 점이 달랐다.&lt;/p&gt;
&lt;p&gt;10분 볼 글을 3분으로 나눠서 에드센스 페이지를 위해 짧게 짧게 씀. 짧게 짧게 써야 부담이 없음. 쓰는 사람은 최소 1시간 넘게 걸리니까. 고칠 때도 편하고.&lt;/p&gt;
&lt;p&gt;책의 내용은 흐름 자체가 에러가 없지만, 실무에서는 모든 게 에러고, 에러 터지는 다반사.&lt;/p&gt;
&lt;p&gt;직접 타이핑 해보면서 타이핑에서 나오는 에러, 버전에서 나오는 에러 등을 느껴보면 좋겠음. 챕터 끝에 스스로 해보기는 답이 없이 해봐서 꼭 해보길 바람. 일단 에러를 해결하는 부분에 집중해서. 직접 해보는 게 중요.&lt;/p&gt;
&lt;p&gt;생활 코딩 첫 강좌 내가 뭘 모르고, 내가 뭘 더 배워야 하는지는 알아야겠다 싶을 때 생활코딩 강좌가 가이드가 됨.&lt;/p&gt;
&lt;p&gt;온라인에서 이야기하는 게 전파력이 있음.&lt;/p&gt;
&lt;p&gt;구글링의 팁은 -&gt; 영어를 잘하는 수밖에 없음. 영어로 치면 답이 나옴.&lt;/p&gt;
&lt;p&gt;솔직히 말하면 내 블로그는 컨텐츠가 도움이 안 됨.&lt;/p&gt;
&lt;p&gt;흔히 에러를 해결하기 위해 검색하게 되는데, (내 블로그엔) 잘되는 거밖에 없음.&lt;/p&gt;
&lt;p&gt;에러를 해결하려면 문장 대신 짧게 짧게 넣어보기.&lt;/p&gt;
&lt;p&gt;타입스크립트 기본 린트가 있음&lt;/p&gt;
&lt;h2 id=&quot;db-질문&quot;&gt;&lt;a href=&quot;#db-%EC%A7%88%EB%AC%B8&quot; aria-label=&quot;db 질문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;db 질문&lt;/h2&gt;
&lt;p&gt;SQL -&gt; 관계끼리 쓰는 데 편함&lt;/p&gt;
&lt;p&gt;NO SQL -&gt; 역정규화 -&gt; 데이터가 많으면 NOSQL 쓸 수밖에 없음&lt;/p&gt;
&lt;p&gt;결국 (SQL NO SQL) 둘 다 쓰게 됨.&lt;/p&gt;
&lt;p&gt;블로그 DB는 몽고 DB로 되어 있음.&lt;/p&gt;
&lt;p&gt;Mongo DB React Stack 딱히 생각하고 고른 것은 아님.&lt;/p&gt;
&lt;p&gt;진짜 돈 되는 개발을 처음 한 게 친구랑 웹사이트 만드는 걸 6개월 정도 하고, 돈을 버니까 프로 개발자라는 자각을 느낌. 내 프로그램을 돈 주고 사는 사람이 있다는 걸 알았을 때.&lt;/p&gt;
&lt;p&gt;나는 CSS 잘 하진 않는데, CSS 도 규칙이 있음. CSS도 블럭 포매팅 컨텍스트를 알면 동작 원리를 알 수 있다. (나도 깊게 공부하지 않아서 잘 모른다.)&lt;/p&gt;
&lt;p&gt;JS 실행 컨텍스트, 이벤트 루프를 알면 다 안다고 할 수 있다.&lt;/p&gt;
&lt;p&gt;취업에 도움이 되려면 깃허브에 자신이 했던 걸 다 기록해두세요. 뭐가 되었건. 그게 확실함.&lt;/p&gt;
&lt;p&gt;스크린 샷도 찍어두고, 면접관이 블로그 볼 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[첫 프로젝트 2주간의 로그 & TIL]]></title><description><![CDATA[2018-10-29 ~ 2018-11-10 진행된 2주 프로젝트 로그 프로젝트 1일차 ~ 프로젝트 3일차 프로젝트 각 페이지 구성 회의 구조도 작성 및 제출 JSON 서버 데이터 포맷 확정 및 가동 테스트 & github 업로드(완료) 후 JSON…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181110 2Weeks First Project Log/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181110 2Weeks First Project Log/</guid><pubDate>Sat, 10 Nov 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2018-10-29 ~ 2018-11-10 진행된 2주 프로젝트 로그&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-1일차--프로젝트-3일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-1%EC%9D%BC%EC%B0%A8--%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-3%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 1일차  프로젝트 3일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 1일차 ~ 프로젝트 3일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 각 페이지 구성 회의&lt;/li&gt;
&lt;li&gt;구조도 작성 및 제출&lt;/li&gt;
&lt;li&gt;JSON 서버 데이터 포맷 확정 및 가동 테스트 &amp;#x26; github 업로드(완료) 후 JSON 서버에서 로그인 TOKEN 쓸 수 있게 하는 방법 공부&lt;/li&gt;
&lt;li&gt;카카오 auth failed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로젝트-4일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-4%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 4일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 4일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;로그인 페이지 대강 만들기 &amp;#x26; json server fake data 만든거 외엔 못 했다.
알아낸 사실 : 개 사진 api만 제공하는 곳이 여러 곳 있다!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://dog.ceo/api/breeds/image/random&quot;&gt;https://dog.ceo/api/breeds/image/random&lt;/a&gt;
&lt;a href=&quot;https://api.thedogapi.com/v1/images/search?size=med&amp;#x26;mime_types=jpg&amp;#x26;format=json&amp;#x26;has_breeds=true&amp;#x26;order=RANDOM&amp;#x26;page=0&amp;#x26;limit=1/url&quot;&gt;https://api.thedogapi.com/v1/images/search?size=med&amp;#x26;mime&lt;em&gt;types=jpg&amp;#x26;format=json&amp;#x26;has&lt;/em&gt;breeds=true&amp;#x26;order=RANDOM&amp;#x26;page=0&amp;#x26;limit=1/url&lt;/a&gt;
&lt;a href=&quot;https://thatapiguy.com/&quot;&gt;https://thatapiguy.com/&lt;/a&gt;
&lt;a href=&quot;https://thecatapi.com/&quot;&gt;https://thecatapi.com/&lt;/a&gt;
&lt;a href=&quot;https://documenter.getpostman.com/view/4016432/the-dog-api/RW81vZ4Z&quot;&gt;https://documenter.getpostman.com/view/4016432/the-dog-api/RW81vZ4Z&lt;/a&gt;
&lt;a href=&quot;https://thedogapi.com/?image_id=B1uW7l5VX&quot;&gt;https://thedogapi.com/?image_id=B1uW7l5VX&lt;/a&gt;
&lt;a href=&quot;http://debuglog.tistory.com/16&quot;&gt;http://debuglog.tistory.com/16&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;react&quot;&gt;&lt;pre class=&quot;language-react&quot;&gt;&lt;code class=&quot;language-react&quot;&gt;const element = &amp;lt;h1&amp;gt;4 곱하기 6 = {4*6}&amp;lt;/h1&amp;gt;
const element2 = &amp;lt;h1&amp;gt; 이름 : {devpools.name}&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;16 버전부터 여러 개의 컴포넌트를 동시에 리턴할 수 있게 되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;react&quot;&gt;&lt;pre class=&quot;language-react&quot;&gt;&lt;code class=&quot;language-react&quot;&gt;// 15버전까지 실패
function renderLogin() {
    return &amp;lt;label&amp;gt;ID&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;;
    	   &amp;lt;label&amp;gt;pW&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; /&amp;gt;;
}

//16 버전부터 div로 묶어서 하나의 컴포넌트로 표현할 수 있고 위 아래 두 예제 둘 다 적용가능
function renderLogin() {

    return &amp;lt;div&amp;gt;
    &amp;lt;label&amp;gt;ID&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; /&amp;gt; &amp;lt;br /&amp;gt;;
    	   &amp;lt;label&amp;gt;pW&amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;password&amp;quot; /&amp;gt;;
        &amp;lt;/div&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;** JSX에서 HTML 태그를 사용할 땐 항상 소문자를 사용. 사용자가 직접 만든 리액트 컴포넌트와 구별하기 위함.&lt;/p&gt;
&lt;h2 id=&quot;마운트-생명주기&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%9A%B4%ED%8A%B8-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;마운트 생명주기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마운트 생명주기&lt;/h2&gt;
&lt;p&gt;Mounting&lt;/p&gt;
&lt;p&gt;getDefaultProps() -&gt;이 단계에서는 this.state 값 참조 할 수 없고 this.setState() 함수 사용 불가&lt;/p&gt;
&lt;p&gt;getInitialState() -&gt; 이 단계에서는 this.state 값 참조 할 수 없고 this.setState() 함수 사용 불가&lt;/p&gt;
&lt;p&gt;render() -&gt; this.setState() 함수 사용 불가&lt;/p&gt;
&lt;p&gt;componentDidmount()&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jgthms.com/web-design-in-4-minutes/&quot;&gt;https://jgthms.com/web-design-in-4-minutes/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-5일차--프로젝트-8일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-5%EC%9D%BC%EC%B0%A8--%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-8%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 5일차  프로젝트 8일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 5일차 ~ 프로젝트 8일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;JWT auth + JSON 서버 준비&lt;/li&gt;
&lt;li&gt;로그인 시에, setState로 테스트 쿠키가 세팅되고, 로그 아웃시 쿠키가 삭제되도록 변경. #day7&lt;/li&gt;
&lt;li&gt;로그인 시에, 로그인 헤더가 로그 아웃 헤더로 변환되도록 수정. 로그아웃 시, 로그인 헤더가 로그아웃 헤더로 변환되도록 수정. #day7&lt;/li&gt;
&lt;li&gt;검색과 post를 위해 양식에 맞게 db.json 에 시, 구, 상세주소 더미 데이터 추가 #day7&lt;/li&gt;
&lt;li&gt;로그인 시에, 서버로 접속해서 아이디 비밀 번호 일치 여부 확인 후에 JWT 토큰 받아와서 쿠키에 저장. #day8&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로젝트-9일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-9%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 9일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 9일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;deploy 1st&lt;/li&gt;
&lt;li&gt;Mypage에서 클라이언트가 보유한 JWT 토큰을 헤더에 포함하여 EC2 서버에 만든 auth/check api로 보내서 인증 후 기본적인 유저 정보를 받아와서 화면에 뿌려주는 리액트 작업 + JSON 서버 수정 작업.&lt;/li&gt;
&lt;li&gt;Mypage 서버와 연동완료&lt;/li&gt;
&lt;li&gt;JWT with JSON 서버 로컬이 아닌 AWS 서버에 올려서 가동시키기&lt;/li&gt;
&lt;li&gt;EC2 nginx 설치하여 5000으로 프록시 설정.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ec2-접속&quot;&gt;&lt;a href=&quot;#ec2-%EC%A0%91%EC%86%8D&quot; aria-label=&quot;ec2 접속 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EC2 접속&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/getting-started/tutorials/launch-a-virtual-machine/?trk=gs_card&quot;&gt;https://aws.amazon.com/ko/getting-started/tutorials/launch-a-virtual-machine/?trk=gs_card&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; aria-label=&quot;nginx permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nginx&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hue9010.github.io/aws/nginx%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%9E%90/&quot;&gt;https://hue9010.github.io/aws/nginx%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%9E%90/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;배포시 서버 무중단하기 아래 참조할 것&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/267?category=635883&quot;&gt;https://jojoldu.tistory.com/267?category=635883&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@taeyeolkim/aws-ec2%EC%97%90-%EC%9B%B9%EC%84%9C%EB%B2%84-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B3%A0-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0-a46a6e9484a8&quot;&gt;https://medium.com/@taeyeolkim/aws-ec2%EC%97%90-%EC%9B%B9%EC%84%9C%EB%B2%84-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B3%A0-%EA%B5%AC%EB%8F%99%ED%95%98%EA%B8%B0-a46a6e9484a8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://wingsnote.com/55&quot;&gt;http://wingsnote.com/55&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sudo vi /etc/nginx/nginx.conf
수정이 끝나셨으면 :wq로 저장 &amp;amp; 종료 하시고, Nginx를 재시작하겠습니다.

sudo service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;aws-의-ec2-로-우분투-서버-구축하였습니다-포트-포워딩에-대해서&quot;&gt;&lt;a href=&quot;#aws-%EC%9D%98-ec2-%EB%A1%9C-%EC%9A%B0%EB%B6%84%ED%88%AC-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4-%ED%8F%AC%ED%8A%B8-%ED%8F%AC%EC%9B%8C%EB%94%A9%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C&quot; aria-label=&quot;aws 의 ec2 로 우분투 서버 구축하였습니다 포트 포워딩에 대해서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://hashcode.co.kr/questions/1795/aws-%EC%9D%98-ec2-%EB%A1%9C-%EC%9A%B0%EB%B6%84%ED%88%AC-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4-%ED%8F%AC%ED%8A%B8-%ED%8F%AC%EC%9B%8C%EB%94%A9%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C&quot;&gt;AWS 의 EC2 로 우분투 서버 구축하였습니다. 포트 포워딩에 대해서.&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;터미널에서-줄-시작-위치로-이동하기&quot;&gt;&lt;a href=&quot;#%ED%84%B0%EB%AF%B8%EB%84%90%EC%97%90%EC%84%9C-%EC%A4%84-%EC%8B%9C%EC%9E%91-%EC%9C%84%EC%B9%98%EB%A1%9C-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0&quot; aria-label=&quot;터미널에서 줄 시작 위치로 이동하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;터미널에서 줄 시작 위치로 이동하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://code.i-harness.com/ko-kr/q/13d78&quot;&gt;https://code.i-harness.com/ko-kr/q/13d78&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl + A 는 줄의 시작으로 점프합니다.&lt;/li&gt;
&lt;li&gt;Ctrl + E 를 누르면 줄 끝으로 이동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그외&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alt (⌥) + D 현재 커서 위치에서 단어를 삭제하려면&lt;/li&gt;
&lt;li&gt;ctrl + A 는 줄의 시작으로 점프합니다.&lt;/li&gt;
&lt;li&gt;Ctrl + E 를 누르면 줄 끝으로 이동합니다.&lt;/li&gt;
&lt;li&gt;ctrl + K 커서 위치에서 시작하는 줄을 죽입니다.&lt;/li&gt;
&lt;li&gt;죽이기 버퍼에서 텍스트를 붙여 넣기위한 ctrl + Y&lt;/li&gt;
&lt;li&gt;Ctrl + R 을 누르면 과거 기록에서 입력 한 명령의 역 검색이 가능합니다.&lt;/li&gt;
&lt;li&gt;ctrl + S 는 검색을 전달합니다 (zsh에서는 작동하지만 bash에서는 작동하지 않습니다).&lt;/li&gt;
&lt;li&gt;Ctrl + F 를 누르면 char으로 앞으로 이동합니다.&lt;/li&gt;
&lt;li&gt;Ctrl + B 를 사용하여 문자로 뒤로 이동&lt;/li&gt;
&lt;li&gt;ctrl + W 커서 위치에서 단어를 뒤로 이동시킵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;vi-에디터&quot;&gt;&lt;a href=&quot;#vi-%EC%97%90%EB%94%94%ED%84%B0&quot; aria-label=&quot;vi 에디터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vi 에디터&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.leafcats.com/115&quot;&gt;http://www.leafcats.com/115&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;: set number 라인 넘버 표시&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;gg&lt;/strong&gt; : 첫 행으로 이동.&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;G (Shift + g)&lt;/strong&gt; : 마지막 행으로 이동.&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;^ / Home / Shift + 6&lt;/strong&gt; : 현재 행의 첫 문자로 이동.&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;$ / End / Shift + 4&lt;/strong&gt; : 현재 행의 마지막 문자로 이동.&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;숫자 타이핑하고 Shift + G&lt;/strong&gt; : 타이핑한 숫자에 해당하는 행으로 이동.&lt;/p&gt;
&lt;h3 id=&quot;아마존-포트-열기&quot;&gt;&lt;a href=&quot;#%EC%95%84%EB%A7%88%EC%A1%B4-%ED%8F%AC%ED%8A%B8-%EC%97%B4%EA%B8%B0&quot; aria-label=&quot;아마존 포트 열기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아마존 포트 열기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://limkydev.tistory.com/20&quot;&gt;http://limkydev.tistory.com/20&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;\1. 자신의 아마존 인스턴스 Security Groups에서 원하는 포트번호 설정한다.&lt;/p&gt;
&lt;p&gt;\2. iptable 명령어를 이용 톰캣 포트를 포트포워딩을 해주면 끝.&lt;/p&gt;
&lt;p&gt;리눅스 기반의 아마존 인스턴스 경우는 리눅스 자체적으로 보안상 포트번호를 바꿀수 있는 권한을 일반유저에게 주지않는다. 따라서 아무리 일반 유저가 톰캣 server.xml을 바꾸고 난리쳐도 안바뀐다. 이때 사용하는 것이 iptable이라는 녀석인데 이거 명령어 하나만 쳐주면 80 포트를 자동으로 8080포트로 포트포워딩이 된다!!
(# iptables -t nat -A PREROUTING -p tcp —dport 80 -j REDIRECT —to-port 8080)&lt;/p&gt;
&lt;h3 id=&quot;how-to-kill-nodemon&quot;&gt;&lt;a href=&quot;#how-to-kill-nodemon&quot; aria-label=&quot;how to kill nodemon permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;how to kill nodemon&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/45520706/how-to-kill-nodemon-process-on-mac&quot;&gt;https://stackoverflow.com/questions/45520706/how-to-kill-nodemon-process-on-mac&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;# 실행중인 프로세스 보기
ps -ef | grep node
# 프로세스 아이디로 죽이기
sudo kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PID is the process ID. Try the following command in terminal to list and search for process using a regex:-&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ps gx | grep &amp;#39;Symantec&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above example is to list all the ‘Symantec’ related processes. Replace ‘Symantec’ with your own phrase. Next use variations of ‘kill’ command. You can either use:-&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;kill pid&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace ‘pid’ with actual process id. Or use,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;killall&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as suggested before. To reiterate another useful suggestion, use&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;man kill&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;pm2-노드-관리&quot;&gt;&lt;a href=&quot;#pm2-%EB%85%B8%EB%93%9C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;pm2 노드 관리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;pm2 노드 관리&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1197&quot;&gt;https://blog.outsider.ne.kr/1197&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/terminating-instances.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/terminating-instances.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.env&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://webinformation.tistory.com/106&quot;&gt;http://webinformation.tistory.com/106&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;다음-프로젝트시-개선점&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%9D%8C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%8B%9C-%EA%B0%9C%EC%84%A0%EC%A0%90&quot; aria-label=&quot;다음 프로젝트시 개선점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다음 프로젝트시 개선점&lt;/h3&gt;
&lt;p&gt;json을 사용하더라도 db 기초 명세서를 철저하게 배부해서, 각자 새로운 변수를 만드는 일이 없도록 하기&lt;/p&gt;
&lt;h3 id=&quot;remove-gh-pages&quot;&gt;&lt;a href=&quot;#remove-gh-pages&quot; aria-label=&quot;remove gh pages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;remove gh-pages&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin --delete gh-pages
https://coderwall.com/p/8hwbaa/remove-a-github-page&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;프로젝트-10일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-10%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 10일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 10일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;회원 가입시에 뜨던 CORS + Bad gate way 문제 수정 완료.&lt;/li&gt;
&lt;li&gt;Sign up 후에 axios.post로 데이터 입력 후에 로그인 처리.&lt;/li&gt;
&lt;li&gt;S3 파일 업로드 API를 EC2에 올려서 사용할 수 있도록 코드 마무리 수정하고, 기존 JSON(+JWT) 서버에 포함시켜서 테스트 완료 후 서버 가동.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;filezilla-써서-ec2-서버-접속해서-데이터-옮기기&quot;&gt;&lt;a href=&quot;#filezilla-%EC%8D%A8%EC%84%9C-ec2-%EC%84%9C%EB%B2%84-%EC%A0%91%EC%86%8D%ED%95%B4%EC%84%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%AE%EA%B8%B0%EA%B8%B0&quot; aria-label=&quot;filezilla 써서 ec2 서버 접속해서 데이터 옮기기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FileZilla 써서 EC2 서버 접속해서 데이터 옮기기&lt;/h3&gt;
&lt;p&gt;시크릿 키는 보안상 git 에 올려서 git clone으로 옮기는 식으로 할 수는 없기 때문에 결국&lt;/p&gt;
&lt;p&gt;파일질라 사용. 일모님은 scp를 추천해주셨지만 시간 관계상 scp를 배울 상황이 아니었기 때문에 그나마 빠른 방법으로 해결.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ithub.tistory.com/48&quot;&gt;http://ithub.tistory.com/48&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;대체적으로 위 링크대로 따라하면 됐으나 안 된 부분들.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cyberciti.biz/faq/howto-restart-ssh/&quot;&gt;https://www.cyberciti.biz/faq/howto-restart-ssh/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://www.cyberciti.biz/faq/howto-restart-ssh/

맥 os에서는
$ sudo systemctl restart sshd로 재시작해야 함.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추후 과제 : SCP 사용법 배울 것&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.co.kr/search?ei=sVPkW4zcMcul8AXdv6WIAQ&amp;#x26;q=scp+%EC%82%AC%EC%9A%A9%EB%B2%95&quot;&gt;https://www.google.co.kr/search?ei=sVPkW4zcMcul8AXdv6WIAQ&amp;#x26;q=scp+%EC%82%AC%EC%9A%A9%EB%B2%95&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;scp&quot;&gt;&lt;a href=&quot;#scp&quot; aria-label=&quot;scp permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SCP?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://ict-nroo.tistory.com/40&quot;&gt;http://ict-nroo.tistory.com/40&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;aws-cli&quot;&gt;&lt;a href=&quot;#aws-cli&quot; aria-label=&quot;aws cli permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;aws-cli&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.algopie.com/aws/aws-cli%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ec2%EC%97%90%EC%84%9C-s3%EB%A1%9C-%EC%97%85%EB%A1%9C%EB%93%9C%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%ED%95%98%EA%B8%B0-%EC%9A%B0%EB%B6%84%ED%88%AC/&quot;&gt;https://blog.algopie.com/aws/aws-cli%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-ec2%EC%97%90%EC%84%9C-s3%EB%A1%9C-%EC%97%85%EB%A1%9C%EB%93%9C%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%ED%95%98%EA%B8%B0-%EC%9A%B0%EB%B6%84%ED%88%AC/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;환경변수에-설정-정보-저장하기&quot;&gt;&lt;a href=&quot;#%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98%EC%97%90-%EC%84%A4%EC%A0%95-%EC%A0%95%EB%B3%B4-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;환경변수에 설정 정보 저장하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;환경변수에 설정 정보 저장하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ntalbs.github.io/2014/config-vars/&quot;&gt;https://ntalbs.github.io/2014/config-vars/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;git에서-gitignore-설정하기&quot;&gt;&lt;a href=&quot;#git%EC%97%90%EC%84%9C-gitignore-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;git에서 gitignore 설정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GIT에서 .GITIGNORE 설정하기&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://josephkim75.wordpress.com/2012/06/13/git%EC%97%90%EC%84%9C-gitignore-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/&quot;&gt;https://josephkim75.wordpress.com/2012/06/13/git%EC%97%90%EC%84%9C-gitignore-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;아마존-리전-설정&quot;&gt;&lt;a href=&quot;#%EC%95%84%EB%A7%88%EC%A1%B4-%EB%A6%AC%EC%A0%84-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;아마존 리전 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아마존 리전 설정&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/general/latest/gr/rande.html&quot;&gt;https://docs.aws.amazon.com/ko_kr/general/latest/gr/rande.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-11일차&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-11%EC%9D%BC%EC%B0%A8&quot; aria-label=&quot;프로젝트 11일차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 11일차&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;유저 정보와 일치하는 더미 데이터 글 생성해주고, 더미 데이터 125개로 확장, 테스트 계정 고정 설정.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;배포 자동화
IM 유저 생성하기&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://victorydntmd.tistory.com/67&quot;&gt;http://victorydntmd.tistory.com/67&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;AWS Management Console 액세스 권한이 있는 사용자가 https://117336563912.signin.aws.amazon.com/console에 로그인할 수 있습니다.

 .csv 다운로드

Install Code Deploy Agent on EC2 Linux instance

[Raw](https://gist.github.com/rfajarachmad/c45386829fbdd8a7ae6b40cb47fc1111/raw/eb8a82287c6e7c4481aa3d1807f18d68c697e1f2/install_codedeploy_agent_linux.sh)

[**install_codedeploy_agent_linux.sh**](https://gist.github.com/rfajarachmad/c45386829fbdd8a7ae6b40cb47fc1111#file-install_codedeploy_agent_linux-sh)

|     | sudo yum update                                                                       |
| --- | ------------------------------------------------------------------------------------- |
|     | sudo yum install ruby                                                                 |
|     | sudo yum install wget                                                                 |
|     | wget https://{bucket-name}.s3.amazonaws.com/latest/install                            |
|     | chmod +x ./install                                                                    |
|     | sudo ./install auto                                                                   |
|     |                                                                                       |
|     | ## bucket-name represents one of the following:                                       |
|     | ## aws-codedeploy-us-east-1 for instances in the US East (N. Virginia) region         |
|     | ## aws-codedeploy-us-west-1 for instances in the US West (N. California) region       |
|     | ## aws-codedeploy-us-west-2 for instances in the US West (Oregon) region              |
|     | ## aws-codedeploy-eu-west-1 for instances in the EU (Ireland) region                  |
|     | ## aws-codedeploy-eu-central-1 for instances in the EU (Frankfurt) region             |
|     | ## aws-codedeploy-ap-northeast-1 for instances in the Asia Pacific (Tokyo) region     |
|     | ## aws-codedeploy-ap-southeast-1 for instances in the Asia Pacific (Singapore) region |
|     | ## aws-codedeploy-ap-southeast-2 for instances in the Asia Pacific (Sydney) region    |
|     | ## aws-codedeploy-sa-east-1 for instances in the South America (São Paulo) region     |
|     |                                                                                       |
|     | sudo service codedeploy-agent status                                                  |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;프로젝트-12일차-마지막-날&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-12%EC%9D%BC%EC%B0%A8-%EB%A7%88%EC%A7%80%EB%A7%89-%EB%82%A0&quot; aria-label=&quot;프로젝트 12일차 마지막 날 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 12일차 (마지막 날)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프론트는 S3에 배포&lt;/li&gt;
&lt;li&gt;EC2 자동 배포 연구중 -&gt; 실패&lt;/li&gt;
&lt;li&gt;S3 간단 배포 성공&lt;/li&gt;
&lt;li&gt;각자 신경써서 스터디한 내용 팀원끼리 공유(팀 자체 세미나)&lt;/li&gt;
&lt;li&gt;발표&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[First Project Intro]]></title><description><![CDATA[…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181024 IMD08D29 First Project Intro/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181024 IMD08D29 First Project Intro/</guid><pubDate>Wed, 24 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;무엇을 모르는가를 파악해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;작품보다 콜라보레이션이 제일 우선.
경험상 팀 협업이 잘되면 더 성장하고 결과도 잘 나옴.&lt;/p&gt;
&lt;h2 id=&quot;당신에게-문제가-있다는-두-가지-징후&quot;&gt;&lt;a href=&quot;#%EB%8B%B9%EC%8B%A0%EC%97%90%EA%B2%8C-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%8A%94-%EB%91%90-%EA%B0%80%EC%A7%80-%EC%A7%95%ED%9B%84&quot; aria-label=&quot;당신에게 문제가 있다는 두 가지 징후 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;당신에게 문제가 있다는 두 가지 징후&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;누군가 내게 아무 말도 하지 않는다.&lt;/li&gt;
&lt;li&gt;누가 나와 일을 하기 싫어한다. (당신에게 관심이 없다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;커뮤니케이션&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98&quot; aria-label=&quot;커뮤니케이션 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커뮤니케이션&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;분명한 커뮤니케이션 50%&lt;/li&gt;
&lt;li&gt;honest feedback&lt;/li&gt;
&lt;li&gt;constant collaboration&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;줄을 놓는 순간이 있다. 그러기 전까진 협업을 계속 하는 것이 중요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;agile-scrum&quot;&gt;&lt;a href=&quot;#agile-scrum&quot; aria-label=&quot;agile scrum permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Agile Scrum&lt;/h2&gt;
&lt;p&gt;10팀 중 2, 3팀만 성공. 시도해볼만한 가치가 있다.&lt;/p&gt;
&lt;h2 id=&quot;documentation&quot;&gt;&lt;a href=&quot;#documentation&quot; aria-label=&quot;documentation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;큰 회사에 갈수록 중요하다
리드 미 읽고 Documentation
참조 : 리액트 create-app Docs&lt;/p&gt;
&lt;h2 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; aria-label=&quot;git permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;개발자는 코드로 얘기하고 Git으로 커뮤니케이션 한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git을 피하지 말자. Git을 망가뜨리는 걸 두려워하지 말자.&lt;/p&gt;
&lt;h2 id=&quot;deploy&quot;&gt;&lt;a href=&quot;#deploy&quot; aria-label=&quot;deploy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Deploy&lt;/h2&gt;
&lt;p&gt;지속적인 배포. 2,3일마다 배포.
2,3 일째 뭐든 배포해야 한다.
안 되면 빠른 도움 요청.&lt;/p&gt;
&lt;h2 id=&quot;mindset&quot;&gt;&lt;a href=&quot;#mindset&quot; aria-label=&quot;mindset permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mindset&lt;/h2&gt;
&lt;p&gt;긍정적인 마인드가 중요하다. 개발자에게 중요한 덕목.&lt;/p&gt;
&lt;h2 id=&quot;회의&quot;&gt;&lt;a href=&quot;#%ED%9A%8C%EC%9D%98&quot; aria-label=&quot;회의 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;회의&lt;/h2&gt;
&lt;p&gt;회의 시간 제한 두거나,
회의 시간에 딴짓하지 말자. 다른 사람 시간 낭비시키지 말 것. 회의에 집중하거나 아예 빠지거나.&lt;/p&gt;
&lt;p&gt;잘못 이야기 하거나, 틀릴 수 있어도 말을 하자.&lt;/p&gt;
&lt;h2 id=&quot;setting&quot;&gt;&lt;a href=&quot;#setting&quot; aria-label=&quot;setting permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting&lt;/h2&gt;
&lt;p&gt;페어 셋업 세팅을 꼭 같이!
같이 설명하면서, 너무 속도 느려지지 않는 선에서&lt;/p&gt;
&lt;h2 id=&quot;리서치가-필요한-경우&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%84%9C%EC%B9%98%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;리서치가 필요한 경우 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리서치가 필요한 경우&lt;/h2&gt;
&lt;p&gt;시간을 요청하고, 본인이 뭘하는지 알 수 있도록 -&gt; 슬랙에 올려놓든 트렐로에 올려놓든 기록해놓기.&lt;/p&gt;
&lt;p&gt;프로젝트 기간동안 내가 반드시 만들 걸 공부해야 한다! 쓰지도 않을 걸 공부하지 말자.
만들 것만 배운다 각개격파.
새로운 걸 시험해보는 걸 두려워하지 말자.
쓰다가 한계가 있으면 바꾸면 된다.&lt;/p&gt;
&lt;h2 id=&quot;db&quot;&gt;&lt;a href=&quot;#db&quot; aria-label=&quot;db permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB&lt;/h2&gt;
&lt;p&gt;별 생각 없으면 SQL
가능하면 ORM -&gt; GIT DB 클라이언트 쓸 것
Row query 필요하면 쓰고 바꿔가며 써보기
처음부터 DB 클라우드로 하기&lt;/p&gt;
&lt;h2 id=&quot;pwa&quot;&gt;&lt;a href=&quot;#pwa&quot; aria-label=&quot;pwa permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;PWA&lt;/h2&gt;
&lt;p&gt;PWA PWA체크 툴 라이트 하우스?
&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/?hl=ko&quot;&gt;https://developers.google.com/web/tools/lighthouse/?hl=ko&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=spring1a&amp;#x26;logNo=220992087978&amp;#x26;categoryNo=0&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=&amp;#x26;currentPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=spring1a&amp;#x26;logNo=220992087978&amp;#x26;categoryNo=0&amp;#x26;parentCategoryNo=0&amp;#x26;viewDate=¤tPage=1&amp;#x26;postListTopCurrentPage=1&amp;#x26;from=postView&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;서비스-워커&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9B%8C%EC%BB%A4&quot; aria-label=&quot;서비스 워커 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서비스 워커?&lt;/h2&gt;
&lt;p&gt;웹을 앱처럼 사용하기 위한 기술&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint 총 정리]]></title><description><![CDATA[deploy 실질적으로 고객이 사용할 수 있도록 배포해야 함. cloud computing 시스템이 있음으로 시작 cost를 낮출 수 있고, 한정된 개발자원을 효율적으로 쓸 수 있게 됨. EC2(Amazon Elastic Compute Cloud…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181022-23 IM08D27-D28 총 정리 Hiring Assesment/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181022-23 IM08D27-D28 총 정리 Hiring Assesment/</guid><pubDate>Tue, 23 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;deploy&quot;&gt;&lt;a href=&quot;#deploy&quot; aria-label=&quot;deploy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;deploy&lt;/h2&gt;
&lt;p&gt;실질적으로 고객이 사용할 수 있도록 배포해야 함.&lt;/p&gt;
&lt;p&gt;cloud computing 시스템이 있음으로 시작 cost를 낮출 수 있고, 한정된 개발자원을 효율적으로 쓸 수 있게 됨.&lt;/p&gt;
&lt;h3 id=&quot;ec2amazon-elastic-compute-cloud&quot;&gt;&lt;a href=&quot;#ec2amazon-elastic-compute-cloud&quot; aria-label=&quot;ec2amazon elastic compute cloud permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EC2(Amazon Elastic Compute Cloud)&lt;/h3&gt;
&lt;p&gt;VM기반의 컴퓨팅 자원을 제공하는 서비스
일반적인 클라우드 서버 인스턴스를 의미&lt;/p&gt;
&lt;p&gt;EC2는 처리 능력을 사용하여 서버에 응용 프로그램을 배포하기위한 것이고 서버는 각각 S3 및 RDS를 통해 내용을 제공합니다. 따라서 *Amazon EC2는 모든 유형의 *&lt;em&gt;처리** 활동에 유용합니다.&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;ebselastic-block-store&quot;&gt;&lt;a href=&quot;#ebselastic-block-store&quot; aria-label=&quot;ebselastic block store permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;EBS(Elastic Block Store)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EC2&lt;/code&gt; 인스턴스에 사용할 영구 블록 스토리지 볼륨을 제공
&lt;code class=&quot;language-text&quot;&gt;Amazon EBS&lt;/code&gt; 볼륨은 워크로드 실행에 필요한 &lt;strong&gt;지연 시간이 짧고 일관된 성능을 제공&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;-&gt; &lt;em&gt;S3와의 큰 차이점&lt;/em&gt;. 그러나 &lt;strong&gt;S3에 비해 비쌈&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;s3-simple-storage-service&quot;&gt;&lt;a href=&quot;#s3-simple-storage-service&quot; aria-label=&quot;s3 simple storage service permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;S3 (Simple Storage Service)&lt;/h3&gt;
&lt;p&gt;웹 인터페이스를 통해 데이터를 저장 및 검색할 수 있는 스토리지.
&lt;strong&gt;RRS(Reduced Redundancy Storage)&lt;/strong&gt; 옵션으로 데이터 손실 위험도를 더 올리고 가격을 저렴하게 사용가능. 1. 대용량 저장 용기 2. 장기 보관&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.uniqbuild.co.kr/?p=449&quot;&gt;https://blog.uniqbuild.co.kr/?p=449&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.i-harness.com/ko-kr/q/db9acd&quot;&gt;https://code.i-harness.com/ko-kr/q/db9acd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;다대다-관계-juntion-table&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%8C%80%EB%8B%A4-%EA%B4%80%EA%B3%84-juntion-table&quot; aria-label=&quot;다대다 관계 juntion table permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다대다 관계 juntion table&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;CREATE TABLE Users (
    UserLogin varchar(50) PRIMARY KEY,
    UserPassword varchar(50) NOT NULL,
    UserName varchar(50) NOT NULL
);

CREATE TABLE Permissions (
    PermissionKey varchar(50) PRIMARY KEY,
    PermissionDescription varchar(500) NOT NULL
);

-- This is the junction table.
CREATE TABLE UserPermissions (
    UserLogin varchar(50) REFERENCES Users (UserLogin),
    PermissionKey varchar(50) REFERENCES Permissions (PermissionKey),
    PRIMARY KEY (UserLogin, PermissionKey)
);

A SELECT-statement on a junction table usually involves joining the main table with the junction table:

SELECT * FROM Users
JOIN UserPermissions USING (UserLogin);
https://en.wikipedia.org/wiki/Associative_entity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;immersive-sprint-성취-평가시험-끝나고-헷갈렸던-부분-정리&quot;&gt;&lt;a href=&quot;#immersive-sprint-%EC%84%B1%EC%B7%A8-%ED%8F%89%EA%B0%80%EC%8B%9C%ED%97%98-%EB%81%9D%EB%82%98%EA%B3%A0-%ED%97%B7%EA%B0%88%EB%A0%B8%EB%8D%98-%EB%B6%80%EB%B6%84-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;immersive sprint 성취 평가시험 끝나고 헷갈렸던 부분 정리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Immersive Sprint 성취 평가시험 끝나고… 헷갈렸던 부분 정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Time Complexity&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Constant &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이미 알고 있는 인덱스를 가지고 접근하는 것&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 가장 빠른 시간 복잡도&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;
Logarithmic &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;log n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; divide and 퀀커 나누고 정복하고&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 나누고 정복하는 알고리즘을 가장 실현한 것이 바이너리 서치 트리&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; log7은 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;에 근사한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;정도로 생각하면 쉬움&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
Linear &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 모든 엘리먼트 탐색하는 것은 n의 복잡도를 가진다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 즉 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;문 한번의 경우&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
Quadratic &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 중첩 &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;문&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;문 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;개&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;중도 quad&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
Exponential &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;n 즉&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상수 &lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt;의 &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; 제곱&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 기하급수적으로 실행시간이 늘어남
버그이거나 패스워드 추적하기 어렵게 만들 때&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL 쿼리문&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;INSERT INTO 테이블 명 (a,b,c) values (&amp;#39;test&amp;#39;,&amp;#39;16&amp;#39;,&amp;#39;test&amp;#39;)
## 자꾸 value라고 쓰는데 values다! 이번에 확실히 메모.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node js 모듈&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;url&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//!!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react render 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;react&quot;&gt;&lt;pre class=&quot;language-react&quot;&gt;&lt;code class=&quot;language-react&quot;&gt;// class로 선언한 경우엔
class FishTable extends Component {
render () {
    return (

    )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;map의 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sport &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;basketball&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  players&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;LeBron James&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Kevin Durant&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  playerNames&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// YOUR CODE HERE&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;players&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;player&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; player&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; plays basketball&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 특별히 변수를 쓸 필요가 없을때 바로 리턴해주는 처리를 배워야 한다.&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;playerNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;함수 안에 함수를 만들지 않고 바로 리커전 시키기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;printArray&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; copiedArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;copiedArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copiedArr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  copiedArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;printArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;copiedArr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;weakpoint&quot;&gt;&lt;a href=&quot;#weakpoint&quot; aria-label=&quot;weakpoint permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;weakpoint&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jQuery, HTML, CSS 기본적인 걸 좀 더 연습해봐야 함. html, css, jQuery의 경우는 붙여넣기 식으로 코딩했더니 손에 익지 않았음.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML LOG INPUT&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;write text here&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&amp;lt;-- css --&gt;
&lt;span class=&quot;token property&quot;&gt;margin-left&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

// 태그 중복 적용 &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 으로 구분
&amp;lt;h1 style=&lt;span class=&quot;token string&quot;&gt;&quot;color:blue;text-align:center&quot;&lt;/span&gt;&gt;This is a header&amp;lt;/h1&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Dom manipulation&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; inputElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; btnElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

btnElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inputElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
inputElem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;{} 는 JSX에서 사용되는데 뷰 템플릿에서 동적 정보를 포함하기 위해 사용.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    when&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2 minutes ago&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    who&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;jill dupre&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Created new account&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    when&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;4 minutes ago&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    who&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ajill dupre&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dCreated new account&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    when&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;10 minutes ago&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    who&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;cjill dupre&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;eCreated new account&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - deployment]]></title><description><![CDATA[개발과 배포환경 개발 Development - uni test(내가 뭘 올리면 뭐가 올라갔는지 보는 거) 각각은 유니테스트를 할 수 있고, 그래야만 함! Integration…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181019-1020 IM08D25~D26 deployment/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181019-1020 IM08D25~D26 deployment/</guid><pubDate>Sat, 20 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;개발과-배포환경&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EB%B0%B0%ED%8F%AC%ED%99%98%EA%B2%BD&quot; aria-label=&quot;개발과 배포환경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발과 배포환경&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;개발 Development - uni test(내가 뭘 올리면 뭐가 올라갔는지 보는 거)&lt;/p&gt;
&lt;p&gt;각각은 유니테스트를 할 수 있고, 그래야만 함!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration&lt;/p&gt;
&lt;p&gt;만든 것들을 합쳐서 돌려봄. 따로 돌아간다고, 합쳤을 때 돌아간다는 보장은 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Staging&lt;/p&gt;
&lt;p&gt;dev.codestates.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Production&lt;/p&gt;
&lt;p&gt;Ship it! 배달한다(release)&lt;/p&gt;
&lt;p&gt;master upload 할때마다 버전을 release 해놓으면 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​ Latest는 문제가 될 수 있음&lt;/p&gt;
&lt;p&gt;​ LTS 안정된 서비스&lt;/p&gt;
&lt;h2 id=&quot;문제-해결-방법&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;문제 해결 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 해결 방법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a 태그 같은 경우엔 full 주소를 적지 않는거(절대 주소 말고 상대주소)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;process.env.PORT || 4568 a가 없으면 4568 포트로&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기타&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h2&gt;
&lt;p&gt;결정 구조가 늦은 회사는 비추천&lt;/p&gt;
&lt;p&gt;작게 만들어서 성공하고 분사&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yum remove&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;apt -get&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;몽구스 검색해서 db.json 스키마 구조를 예상해보기&lt;/p&gt;
&lt;p&gt;react에서 willmount 필요 없음
didmount만 있으면 됨&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로젝트 전 Immersive 7기의 조언]]></title><description><![CDATA[스프린트는 오늘로 끝났다. 지난 기수인…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181020 IM08D26 IM07의 조언/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181020 IM08D26 IM07의 조언/</guid><pubDate>Sat, 20 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;스프린트는 오늘로 끝났다. 지난 기수인 7기 사람들이 와서 이야기해주는 시간이 있었다. 정리해본다.&lt;/p&gt;
&lt;p&gt;할 수 있는 데까지 하다 보면 프로젝트 가서 깨달음이 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;스타트업에서 중요시하는 게 ‘당신이 원하는 걸 만들어봤나? 적어도 자신이 하고 싶은 것. 아이디어를 계속 생각해보라. 2주는 가볍게 하면서 생각해보기. 아이디어는 좋으나 실제로 쓸 수가 없는 경우도 있다. 내 경우엔 학습의 용도로 프로젝트를 생각했다. 말도 안 되는 걸 가져다 붙였지만, 지금까지 학습한 것을 몽땅 적용해보자는 생각으로 했다.&lt;/p&gt;
&lt;p&gt;리액트 네이티브 앱 비추 -&gt; 오류 메세지 파악하기 너무 힘듦. 디버깅, 테스트 소모 시간 너무 많다. PWA 추천.&lt;/p&gt;
&lt;h2 id=&quot;프로젝트에-관해서&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-%EA%B4%80%ED%95%B4%EC%84%9C&quot; aria-label=&quot;프로젝트에 관해서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트에 관해서&lt;/h2&gt;
&lt;p&gt;불만이 쌓일 경우, 쌓아두지 말고, 대화해서 풀고 넘어가기. 의견은 다를 수 있다.&lt;/p&gt;
&lt;p&gt;기획할 때, 매우 디테일 한 것까지 잘 정하기. 특히 코드 컨벤션.&lt;/p&gt;
&lt;p&gt;아이템보다는 사람을 따라가라.&lt;/p&gt;
&lt;p&gt;프로젝트 하나를 2주 + 4주, 6주 동안 했다. -&gt; 창업 케이스&lt;/p&gt;
&lt;p&gt;설문조사시 같이 하기 싫은 사람 꼭 적어라.&lt;/p&gt;
&lt;p&gt;기업협업 피해자 케이스 : 그분들이 바빠서 care 해줄 게 없었다. 이렇게 빨리할 줄 몰랐다고 하면서 그쪽에서 작업한 걸 넘겨주지 않아서 하염없이 기다려야 했다. 자유도 굉장히 떨어짐. 특히 CTO 없는 팀은 피해라.&lt;/p&gt;
&lt;p&gt;기업협업 성공 케이스 : 우리랑 하는 것과는 다른 시야. 반목했음에도 불구하고 툭툭 던져주는 이야기들이 매우 도움 됨. 디자이너가 붙어주니까 데모데이 때 완성도가 높아짐. CTO가 있어서 좋았음. CTO가 있어서 개발문화가 있는 곳을 추천.&lt;/p&gt;
&lt;h2 id=&quot;7기-근황&quot;&gt;&lt;a href=&quot;#7%EA%B8%B0-%EA%B7%BC%ED%99%A9&quot; aria-label=&quot;7기 근황 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7기 근황&lt;/h2&gt;
&lt;p&gt;내 의지랑 상관없이 코드스테이츠에서 이력서를 돌려줌. 그러다 보니 면접은 보게 되었는데 대우들이 썩 좋진 않았다.&lt;/p&gt;
&lt;p&gt;Paid Project를 해야 열심히 할 수 있다. Project 한 달, 디자이너 의뢰, 프로토타입 나오는데 3주.&lt;/p&gt;
&lt;p&gt;_돌려볼 수 있는 프로토타입을 최대한 빨리 만들어놓고 덧붙이는 식이 좋지 않을까?&lt;/p&gt;
&lt;p&gt;을지로 위워크에서 면접 준비. 10 곳 다 떨어짐. 일희일비하지 말자. 잘하는 사람과 비교하지 말자. 나도 개성 있는 개발자가 될 수 있겠지? 잘못 해도 돼요. 작게 해도 돼요. 완주 하는 게 중요하다.&lt;/p&gt;
&lt;p&gt;대학 창업 동아리 통해서 장소 구함. PROJECT는 큰 형식에서 만들어나가는 것. 평균 1을 한다면 3을 할 수 있다. 너무 걱정 안 해도 된다.&lt;/p&gt;
&lt;p&gt;운동 추천한다. 멘탈 깨지면 멍하니 시간 낭비하지 말고 2시간이라도 운동하고 오면 돌아온다. 제정신이 아니다 싶으면 무리해서 계속하지 말고 리프레쉬 해라.&lt;/p&gt;
&lt;p&gt;취업 성공 : 멘탈 관리 + 취미. 춤이 버킷리스트여서 했다. 빈 시간을 잘 쓰면 윈윈할 수 있다. 가장 우울한 시기였는데 사람들이 있어서 멘탈 관리. 자신의 경우는 유튜브 유데미 보면서 따라함. 코드스테이츠가 좋으면 오래 있게 됨. 자신의 경우 오는게 즐거웠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - checkpoint 13]]></title><description><![CDATA[checkpoint 13 insert into ( ) values () -> value라고 적음 답 : A user_id column in the comments table, 초기에 foreign key…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181017 IM08D23 checkpoint 13/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181017 IM08D23 checkpoint 13/</guid><pubDate>Wed, 17 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;checkpoint-13&quot;&gt;&lt;a href=&quot;#checkpoint-13&quot; aria-label=&quot;checkpoint 13 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;checkpoint 13&lt;/h2&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;insert into ( ) values () -&gt; value라고 적음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;답 : A user_id column in the comments table, 초기에 foreign key 설정을 하면 관리하기 어려워서, 나중에 foreign.key 설정해도 괜찮다. 장단이 있음. 나중에 foreign key 확정이 되고 설정을 해야 함. 개발환경이라고 해도 포린 키 설정하는 게 낫다. (정도님 의견). 초반 넘어서면 바로 포린키 설정.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;select * from users, pets WHERE (pets.owner_id = users.id);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LEFT JOIN, LEFT OUTER JOIN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;food가 user_id 하나만 가질 수 없기 때문에 관계 테이블을 하나 둬서 만들어야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;shortly---express&quot;&gt;&lt;a href=&quot;#shortly---express&quot; aria-label=&quot;shortly   express permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;shortly - Express&lt;/h2&gt;
&lt;h3 id=&quot;auth&quot;&gt;&lt;a href=&quot;#auth&quot; aria-label=&quot;auth permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;auth&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Establishing Identity&lt;/p&gt;
&lt;p&gt;facebook이나 카카오톡에서 신분(social integrity)을 보증해주는 것&lt;/p&gt;
&lt;p&gt;verifying personal Knowledge&lt;/p&gt;
&lt;p&gt;Using biomarkers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트에서는 가급적 인증 시스템이 있었으면 좋겠음. 아주 간단한 구현을 하여, 가볍게 만든 다음 개선해 나가는 것. 아이디와 비밀번호를 입력 받은 그대로 저장한다거나.&lt;/p&gt;
&lt;p&gt;개인적으로는 가입 하지 않아도, 일정 부분은 살펴볼 수 있어야 한다고 생각. 어디까지 공개하고, 어디까지 접근하면 보여줄지도 생각해볼 것.&lt;/p&gt;
&lt;p&gt;secure가 안 된 사이트는 꺼림찍함.&lt;/p&gt;
&lt;p&gt;adding salt! 간단한 단어를 더함으로써 hashing을 더 복잡하게 만들어버림. 그래서 salt와 password 둘 다 알게 해야 함.&lt;/p&gt;
&lt;p&gt;npm 라이브러리 bcrypt 설명 읽고 쓰면 됨&lt;/p&gt;
&lt;p&gt;중간에 미들웨어 집어넣음&lt;/p&gt;
&lt;p&gt;세션을 유지하면서, 사용이 로그인되어 있는지 아닌지 관리. 클라이언트한테 파일(쿠키)를 심어놓고(즉, 일종의 세션정보) 한번 요청 했을 때, 서버가 브라우저를 알 수 있는 방법은 쿠키를 심는 방법밖에 없음. 브라우저가 쿠키를 들고 가면 서버가 분석하고 판단.&lt;/p&gt;
&lt;h3 id=&quot;learn&quot;&gt;&lt;a href=&quot;#learn&quot; aria-label=&quot;learn permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;learn&lt;/h3&gt;
&lt;p&gt;무얼 모르는지를 알고, 미니멀하게 배워서 미니멀하게 만드는 과정을 배우는 것.&lt;/p&gt;
&lt;p&gt;기획하면서 서로 struggle 하면서 싸우는 거.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[콜백과 모듈]]></title><description><![CDATA[callback…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181016 콜백과 모듈/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181016 콜백과 모듈/</guid><pubDate>Tue, 16 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;callback&quot;&gt;&lt;a href=&quot;#callback&quot; aria-label=&quot;callback permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;callback&lt;/h2&gt;
&lt;p&gt;콜백은 단순히 자바스크립트 함수를 사용하기 위한 규칙의 이름일 뿐이다. 자바스크립트 언어엔 ‘콜백’이란 것이 없다. 대부분의 함수처럼 즉시 결과를 반환하는 대신, 콜백을 사용하는 함수는 결과를 산출하는데 약간의 시간이 걸린다. 쉽게 와닿지 않는 ‘비동기’라는 단어는 일종의 ‘시간이 걸린다’ 또는 ‘지금 발생하지는 않지만 미래에 발생한다’를 의미한다. 일반적으로 콜백은 I / O를 할 때만 사용된다. (ex, 다운로드, 파일 읽기, 데이터베이스와 통신)&lt;/p&gt;
&lt;p&gt;콜백은 당장 결과를 낼 수 없을 때, 다른 프로그램의 진행을 &lt;strong&gt;블록&lt;/strong&gt; 시키지 않기 위해, 비동기 영역으로 보내버린다. 콜백을 이해하는 핵심은 비동기 작업이 완료될 때가 언제인지 모르는 경우에 콜백을 사용한다는 점이다.&lt;/p&gt;
&lt;p&gt;콜백 지옥을 어떻게 벗어날 수 있을까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;익명함수 대신 네이밍 함수를 사용한다.&lt;/li&gt;
&lt;li&gt;모듈화&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;submit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formSubmit

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formSubmit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;submitEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
  &lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;http://example.com/upload&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;POST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    postResponse
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;postResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; statusMessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.status&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;statusMessage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  statusMessage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; body
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;모든 에러 처리를 해줄 것&lt;/p&gt;
&lt;p&gt;간단히 Node.js 스타일을 사용해주면 됨. 여기서 콜백에 대한 첫 번째 인수는 항상 오류를 위해 예약되어 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;fs&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/Does/not/exist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Uhoh, there was an error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;// otherwise, continue on and use `file` in your code&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;요점 : 항상 모든 오류를 처리해주고, 코드를 단순하게 유지한다. 중첩하지 않고, 작은 모듈로 나눠준다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// self-assessment 3에서&lt;/span&gt;
fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readfile의 callback은 다른 사람이 콜백을 넣어서 활용하라고 만들어놓은 것&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
getWordCount의 콜백은 다른 사람보고 콜백을 써서 활용하라고 만들어주는 것&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
우리가 fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readFile을 사용할때
fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos; utf-8&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 이 경우에는 다른 사람이 만들어놓은 영역을 내가 사용하는 것&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;모듈&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88&quot; aria-label=&quot;모듈 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈&lt;/h2&gt;
&lt;p&gt;결국 콜백과 모듈은 떨어질 수 없는 관계인듯. 콜백을 이해하려고 하자 모듈을 만나게 되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 이 안에서 있는 애들만이 다른 문서에서 require 됐을때 사용할 수 있다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

혹은

&lt;span class=&quot;token comment&quot;&gt;// formuploader.js&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;submit &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formSubmit &lt;span class=&quot;token comment&quot;&gt;// 이렇게 추출해버릴 수 있다.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;formSubmit&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;submitEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;input&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value
  &lt;span class=&quot;token function&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://example.com/upload&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    body&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; postResponse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;path&quot;&gt;&lt;a href=&quot;#path&quot; aria-label=&quot;path permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;path&lt;/h2&gt;
&lt;p&gt;path.dirname(”)&lt;/p&gt;
&lt;p&gt;path.join(_dirname, ”)&lt;/p&gt;
&lt;p&gt;노드가 어디서 실행될지 모르기 때문에&lt;/p&gt;
&lt;p&gt;현재 위치에서 상대 경로를 지정해야 함.&lt;/p&gt;
&lt;h2 id=&quot;참조&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0&quot; aria-label=&quot;참조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참조&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://callbackhell.com/&quot;&gt;http://callbackhell.com/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - database]]></title><description><![CDATA[node의 mvc 패턴 이해하기 model 서버에서 하나의 자원을 정의할 때 그것을 모델이라고 한다. 모델은 데이터베이스의 테이블과 1:1 매칭 되어야 한다. 순서를 살펴보자. 사용자가 요청을 한다. Controller는 요청에 대한 정보를 Model…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181016 IM08D22 database/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181016 IM08D22 database/</guid><pubDate>Tue, 16 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;node의-mvc-패턴-이해하기&quot;&gt;&lt;a href=&quot;#node%EC%9D%98-mvc-%ED%8C%A8%ED%84%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0&quot; aria-label=&quot;node의 mvc 패턴 이해하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;node의 mvc 패턴 이해하기&lt;/h1&gt;
&lt;h2 id=&quot;model&quot;&gt;&lt;a href=&quot;#model&quot; aria-label=&quot;model permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;model&lt;/h2&gt;
&lt;p&gt;서버에서 하나의 자원을 정의할 때 그것을 모델이라고 한다. 모델은 데이터베이스의 테이블과 1:1 매칭 되어야 한다.&lt;/p&gt;
&lt;p&gt;순서를 살펴보자.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;사용자가 요청을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller는 요청에 대한 정보를 Model에 요청을 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model은 데이터베이스에서 정보를 가져온뒤 Controller에 전달한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller는 정보에 대해 적당한 로직을 거친뒤 View에 전달한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전달받은 인자를 적절한 곳에 배치한 뒤 View는 사용자에게 전달해주며 끝난다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;출처:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://posnopi13.tistory.com/12&quot;&gt;http://posnopi13.tistory.com/12&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;row-query---insert&quot;&gt;&lt;a href=&quot;#row-query---insert&quot; aria-label=&quot;row query   insert permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;row query - insert&lt;/h2&gt;
&lt;p&gt;insert into messages (id,username,text,roomname,date) value (‘1’,‘test’,‘textm’,‘lobby’, now());&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - database]]></title><description><![CDATA[database…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181015 IM08D21 database/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181015 IM08D21 database/</guid><pubDate>Mon, 15 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;database&quot;&gt;&lt;a href=&quot;#database&quot; aria-label=&quot;database permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;database&lt;/h2&gt;
&lt;p&gt;실제로는 파일 시스템에 쓰게 되는 것.&lt;/p&gt;
&lt;p&gt;스키마(뼈대)라는 개념 : 데이타를 저장할 때에는, 아무렇게나 저장하는 것이 아니라 일정한 형식으로 저장하게 된다. 특정한 형태를 갖고 저장해야만 한다. 랜덤한 데이터가 저장되지 않도록. 기본적으로 노트에 써가면서 만들어가면 안 된다. 모델로 데이타를 접근하는 방법. ORM 중에 여러가지가 있는데 시퀄라이즈에서는 가장 유명함. low query로 먼저 작업하게 됨.&lt;/p&gt;
&lt;h2 id=&quot;dbms&quot;&gt;&lt;a href=&quot;#dbms&quot; aria-label=&quot;dbms permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBMS&lt;/h2&gt;
&lt;p&gt;time compexity를 어떻게 줄일 수 있을까? 메세지를 저장하는 구조를 어떻게 바꿀 수 있을까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;time complexity&lt;/li&gt;
&lt;li&gt;영속적&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파일을 전체를 읽는 상황에서 벗어나야 하기 때문에.&lt;/p&gt;
&lt;p&gt;컴퓨터에 삭제는 없다. 포맷이라는 건 0으로 메모리를 채울듯.&lt;/p&gt;
&lt;h2 id=&quot;sql-vs-nosql&quot;&gt;&lt;a href=&quot;#sql-vs-nosql&quot; aria-label=&quot;sql vs nosql permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL vs noSQL&lt;/h2&gt;
&lt;p&gt;ID 값을 가지고 접근할 수 있다&lt;/p&gt;
&lt;p&gt;Fixed Width 사이즈가 정해져있다(공간은 부동산)&lt;/p&gt;
&lt;p&gt;no SQL은 fix할 필요가 없다&lt;/p&gt;
&lt;p&gt;SQL엔 세퍼레이터(구분자)가 없다&lt;/p&gt;
&lt;p&gt;모델은 디비를 데려와서 이야기하고&lt;/p&gt;
&lt;p&gt;컨트롤러는 모델을 불러와서 이야기하고&lt;/p&gt;
&lt;div class=&quot;vp-preview vp-preview-invisible&quot; data-thumb=&quot;https://i.vimeocdn.com/video/712712600.webp?mw=3500&amp;amp;mh=2188&amp;amp;q=70&quot; data-thumb-width=&quot;3500&quot; style=&quot;background-image: url(&amp;quot;https://i.vimeocdn.com/video/712712600.webp?mw=3500&amp;amp;mh=2188&amp;amp;q=70&amp;quot;);&quot;&gt;&lt;/div
&lt;p&gt;classes로 들어오면 라우터를 쓰겠다는 이야기&lt;/p&gt;
&lt;h2 id=&quot;skool&quot;&gt;&lt;a href=&quot;#skool&quot; aria-label=&quot;skool permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;skool&lt;/h2&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Look at the &lt;code class=&quot;language-text&quot;&gt;departments&lt;/code&gt; table in the &lt;code class=&quot;language-text&quot;&gt;school&lt;/code&gt; database provided to you. How many columns does it have and what are the column names?&lt;/p&gt;
&lt;p&gt;A : two columns. column name is &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt; &amp;#x26; &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Which column in the &lt;code class=&quot;language-text&quot;&gt;departments&lt;/code&gt; table is intended to be uniquely identifying?&lt;/p&gt;
&lt;p&gt;A: &lt;code class=&quot;language-text&quot;&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PRIMARY KEY&lt;/code&gt;로 지정하는 경우엔,그 칼럼은 uniquely identifying으로 쓰임. 또한, 다른 테이블에서 참조할 수 있음. 다른 테이블에서 그 칼럼이 참조되는 &lt;code class=&quot;language-text&quot;&gt;FOREIGN KEY&lt;/code&gt;라고 불린다. 외래 키를 사용하여 다른 곳에 있는 데이터를 가리키는 기술은 관계형 데이터의 가장 기본적인 측면. 서로 다른 두 테이블에 데이터를 저장하는 것이 아니라 다른 테이블의 열에 있는 데이터를 참조하면 동일한 데이터를 두 번 이상 저장할 필요가 없어서 메모리가 절약되고, 데이터를 변경하는 작업 또한 한 곳만 변경하면 되서 단순화 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Look at the &lt;code class=&quot;language-text&quot;&gt;teachers&lt;/code&gt; schema. Which column is being used as a foreign key? Why might we be using a foreign key here rather than storing the data directly in this table? Review the last paragraph if you are unclear.&lt;/p&gt;
&lt;p&gt;A: &lt;code class=&quot;language-text&quot;&gt;department&lt;/code&gt; is FOREIGN KEY.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;database Query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; column for every row in the &lt;code class=&quot;language-text&quot;&gt;students&lt;/code&gt; table&lt;/p&gt;
&lt;p&gt;A: select name from students;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display every column for the &lt;code class=&quot;language-text&quot;&gt;teachers&lt;/code&gt; table. The &lt;code class=&quot;language-text&quot;&gt;department&lt;/code&gt; column just contains numbers, what are these numbers referencing? (Look at the &lt;code class=&quot;language-text&quot;&gt;teachers&lt;/code&gt;schema if you need to).&lt;/p&gt;
&lt;p&gt;A:select * from teachers; department column from departments table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display every column for the &lt;code class=&quot;language-text&quot;&gt;teachers&lt;/code&gt; table and then every column for the &lt;code class=&quot;language-text&quot;&gt;departments&lt;/code&gt; table. Just by looking at the tables, what is the name of the department that the teacher &lt;code class=&quot;language-text&quot;&gt;beth&lt;/code&gt; is a part of?&lt;/p&gt;
&lt;p&gt;A:cs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filtering rows with WHERE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display just the name column for all the students whose names are not naomi. (Note, &lt;code class=&quot;language-text&quot;&gt;naomi&lt;/code&gt; being text, should be placed in single quotes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; A :&lt;code class=&quot;language-text&quot;&gt;select * from students where name != &amp;#39;naomi&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Display the name and department id of teachers whose own id is greater than 2 or whose name is ‘fred’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; A:&lt;code class=&quot;language-text&quot;&gt;select name, department from teachers where id &amp;gt; 2 OR name = &amp;#39;fred&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WHERE pattern matching with&lt;/strong&gt; LIKE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the id and name of all the students whose names end in ‘m’&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-select id, name from students where name like &apos;&quot;&gt;m&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display all columns for students whose names do not contain the letter ‘a’. HINT: a more long-winded way to say “includes the letter ‘a’” is “includes 0 or more of any letter followed by an ‘a’ followed by 0 or more of any letter.”&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-select * from students where name not like &apos;&quot;&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Limiting WHERE to a defined set with&lt;/strong&gt; IN&lt;/p&gt;
&lt;p&gt;쿼리를 작성하는 방법은 하나만 이는 것은 아니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display just the names of all the teachers whose id is &lt;code class=&quot;language-text&quot;&gt;NOT&lt;/code&gt; either 1, 2, or 4&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-text&quot;&gt;SELECT name FROM teachers where id != 1 and id !=2 and id !=4;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;select name from teachers where id not IN (1,2,4);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display just the names of all the teachers whose department is either 1 or 4&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-text&quot;&gt;select name from teachers where id IN (1,4);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using IN&lt;/strong&gt; &lt;strong&gt;to compose subqueries&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the name and id of all the teachers in the ‘psy’ department (should be pamela and sunny, with their respective ids)&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-text&quot;&gt;SELECT name, id FROM teachers WHERE department IN (SELECT id FROM departments WHERE name = &amp;#39;psy&amp;#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the name of the department that ‘sunny’ teaches for (should be ‘psy’) &lt;strong&gt;헷갈렸음&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-text&quot;&gt;SELECT name FROM departments WHERE id IN (SELECT department FROM teachers WHERE name = &amp;#39;sunny&amp;#39;);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;7. Selecting from multiple tables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT departments.id, classes.id FROM departments, classes;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A: 2열column 8행row&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT students.*, teachers.name FROM students, teachers;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A: 3열 24행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced filtering with multi-table SELECT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT teachers.name FROM teachers, departments WHERE departments.name = &amp;quot;cs&amp;quot; AND teachers.department = departments.id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You already completed the following with subqueries, now do them without subqueries, using multiple table selection instead.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Display the name and id of all the teachers in the ‘psy’ department (should be pamela and sunny, with their respective ids)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;select teachers.name, teachers.id from teachers, departments WHERE teachers.department = departments.id and departments.name = &amp;#39;psy&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the name of the department that ‘sunny’ teaches for (should be ‘psy’)&lt;/p&gt;
&lt;p&gt;A:&lt;code class=&quot;language-text&quot;&gt;SELECT departments.name from teachers, departments WHERE teachers.department = departments.id and teachers.name = &amp;#39;sunny&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;INNER JOIN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the difference between the return from the following two statements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM students, teachers;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM students INNER JOIN teachers;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A: 차이 없는 것 같다;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the name and id of all the teachers in the ‘psy’ department (should be pamela and sunny, with their respective ids)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT teachers.name, teachers.id FROM teachers INNER JOIN departments ON teachers.department = departments.id and departments.name = &amp;#39;psy&amp;#39;;&lt;/code&gt; // and 대신 where&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display the name of the department that ‘sunny’ teaches for (should be ‘psy’)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT departments.name from departments INNER JOIN teachers ON teachers.department = departments.id and teachers.name = &amp;#39;sunny&amp;#39;;&lt;/code&gt; and 대신 where&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;10. Other joins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;?????????&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11. Join Tables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Which classes is ‘sam’ taking? (confirm your answer below)&lt;/p&gt;
&lt;p&gt;A: communication&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT name FROM classes where ID IN (SELECT classes_id from classes_students where student_id IN (SELECT id from students where name = &amp;#39;sam&amp;#39;));&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are the names of the students in the ‘compromise’ class?&lt;/p&gt;
&lt;p&gt;A:naomi,kim,chris // 쿼리로는 모르겠다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are the names of the students taking any class in the ‘cs’ department?&lt;/p&gt;
&lt;p&gt;A:sam을 제외한 전부 // 쿼리로는 모르겠다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM classes, students;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.mode column&lt;/code&gt;command and turn headers on with &lt;code class=&quot;language-text&quot;&gt;.header on&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;schema&quot;&gt;&lt;a href=&quot;#schema&quot; aria-label=&quot;schema permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;schema&lt;/h2&gt;
&lt;p&gt;schema is blueprint&lt;/p&gt;
&lt;p&gt;entities == tables;&lt;/p&gt;
&lt;p&gt;SQL은 평평한 데이터가 늘어난다. 각 테이블 간의 관계를 정해야 한다.&lt;/p&gt;
&lt;p&gt;SQL ARRAY-like id를 가지면 한번에 접근 가능.&lt;/p&gt;
&lt;p&gt;SQL은 관계를 가지고 있기 때문에, 많은 것을 한번에 바꿔야 하는 상황이 오면?&lt;/p&gt;
&lt;p&gt;SQL은 에러가 잘 나는게 장점. 완전한 관계를 표현해야 하기 때문.&lt;/p&gt;
&lt;p&gt;many to many -&gt; one to many로 바꿈&lt;/p&gt;
&lt;p&gt;my sql &gt; show tables;&lt;/p&gt;
&lt;p&gt;describe(schema) classes;&lt;/p&gt;
&lt;p&gt;mysql은 자체의 포트를 갖고 켜지고 포트를 방해할 수 없음.&lt;/p&gt;
&lt;p&gt;MUL = foreign key&lt;/p&gt;
&lt;p&gt;mysql work bench&lt;/p&gt;
&lt;p&gt;sequal pro? - mac&lt;/p&gt;
&lt;p&gt;JOIN에는 항상 조건이 필요함.&lt;/p&gt;
&lt;p&gt;on 다음에 (조인조건 t.id=c.teacher_id)&lt;/p&gt;
&lt;p&gt;읽기보다 쓰는 비용이 더 큼&lt;/p&gt;
&lt;p&gt;쿼리문을 잘 작성해서 db에서 머무르는 시간을 줄여야 함&lt;/p&gt;
&lt;p&gt;ORM?&lt;/p&gt;
&lt;p&gt;QUERY?&lt;/p&gt;
&lt;p&gt;ORM 이 훨씬 편함.&lt;/p&gt;
&lt;p&gt;쿼리문은 콘솔도 찍을 수 없음. DB 터칭은 늘어날 수 있지만&lt;/p&gt;
&lt;p&gt;유지보수와 관리가 쉬움.&lt;/p&gt;
&lt;p&gt;쿼리는 개발자의 손을 타지만, ORM은 표준화가 가능.&lt;/p&gt;
&lt;p&gt;개발자로 팀에 들어갈때는 ORM을 사용하는 게 좋다.&lt;/p&gt;
&lt;p&gt;mysqladmin -u root password ‘wro3o2i@19$2’;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - web historian]]></title><description><![CDATA[checkpoint 12 1~5 공식 모듈의 작동방식 ()  https://nodejs.org/dist/latest-v8.x/docs/api/modules.html…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181012-20181013 IM08D19-20 web historian/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181012-20181013 IM08D19-20 web historian/</guid><pubDate>Sat, 13 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;checkpoint-12&quot;&gt;&lt;a href=&quot;#checkpoint-12&quot; aria-label=&quot;checkpoint 12 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;checkpoint 12&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;module.exports === exports 가 가리키는 건 같음.
하나의 object가 묶여져있음.

1.
var x = 10
var mod = require(&amp;#39;./lib/my-module.js&amp;#39;) // {X :30}이 담겨있음
var result = mod.x

3. 동일한 모듈을 두 번 부르는 경우,

같은 모듈은 한번만 불러옴.
mod1과 mod2는 같은 메모리를 참조한다
3번과 4번은 같은 맥락이다.

5번도 같은 맥락으로 1번만 불러온다.
require만 해도 글로벌 scope에 있는 애들은 전부
실행이 된다!(exports하지 않아도)
node에서도 experimenatal 주면 import export 실행해볼 수 있음

8. 스택이 다 비워지고 나서야 비동기로 가기 때문에
ACB
console.log(&amp;quot;A&amp;quot;);
setTimeout(function() {
  console.log(&amp;quot;B&amp;quot;);
}, 1000);

superLongComputation();

console.log(&amp;quot;C&amp;quot;);

9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1~5 공식 모듈의 작동방식 () &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/modules.html&quot;&gt;https://nodejs.org/dist/latest-v8.x/docs/api/modules.html&lt;/a&gt; 꼭 한번 읽어봐야 함. 두 번 불리면 한 번 불리고, 상호 참조에 대해서도 찾아볼 칠요가 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://nodejs.sideeffect.kr/docs/v0.8.20/api/modules.html&quot;&gt;http://nodejs.sideeffect.kr/docs/v0.8.20/api/modules.html&lt;/a&gt; 읽기!!&lt;/p&gt;
&lt;p&gt;promise는 코딩 기법&lt;/p&gt;
&lt;p&gt;async await은 promise를 기반으로 만들어짐&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; existingUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;finduserInDataBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; securedUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hashPassword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이미지 파일은 고려하지 않고 html만 저장하기&lt;/p&gt;
&lt;p&gt;날 것을 받아오는 것&lt;/p&gt;
&lt;p&gt;리다이렉트 되는 사이트들은 제대로 작동하지 않음&lt;/p&gt;
&lt;p&gt;html만 저장하면 됨, 리소스는 저장하지 않아도 됨&lt;/p&gt;
&lt;p&gt;https도 고려해야 함&lt;/p&gt;
&lt;p&gt;한 파일에 다 넣지 말고, 분리해서 구현할 것&lt;/p&gt;
&lt;p&gt;worker가 있으면 각각의 역할을 분리해서&lt;/p&gt;
&lt;p&gt;하나는 html만 분리하는 식으로&lt;/p&gt;
&lt;p&gt;cron은 다 하고 해도 됨&lt;/p&gt;
&lt;p&gt;풀어보다가 test가 무의미하다가 작동되게만 해도 상관없음&lt;/p&gt;
&lt;p&gt;서버를 껐다 켜도 데이터를 보존하기 위해서 파일을 씀&lt;/p&gt;
&lt;p&gt;routing 주소를 분기시켜주는 개념&lt;/p&gt;
&lt;p&gt;request.handler에서는 분기시키는 내용을 넣으면 됨&lt;/p&gt;
&lt;p&gt;(지난 레퍼런스 코드 참조하면 될듯)&lt;/p&gt;
&lt;h2 id=&quot;nodejs-콜백의-기본패턴&quot;&gt;&lt;a href=&quot;#nodejs-%EC%BD%9C%EB%B0%B1%EC%9D%98-%EA%B8%B0%EB%B3%B8%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;nodejs 콜백의 기본패턴 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NODE.js 콜백의 기본패턴&lt;/h2&gt;
&lt;p&gt;콜백의 개념을 이해하기가 말처럼 쉽지 않았다. 아래 링크들이 콜백을 이해하는데 큰 도움을 주었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/&quot;&gt;에러 우선 콜백을 이해하기&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/foo.txt&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// If an error occurred, handle it (throw, propagate, etc)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Unknown Error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Otherwise, log the file contents&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;unction strictAddition(x, y, callback) {&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if(typeof x !== ‘number’) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;callback( new Error(‘First argument is not a number’) );&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;return;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if(typeof y !== ‘number’) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;callback( new Error(‘Second argument is not a number’) );&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;return;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;var result = x + y;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;setTimeout(function() {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;callback(null, result);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}, 500);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;// The Callback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;function callback(err, data) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if(err) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;console.log(err);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;return;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;console.log(data);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;// Examples&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;strictAddition(2, 10, callback); // 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;strictAddition(-2, 10, callback); // 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;strictAddition(‘uh oh’, 10, callback); // Error = “First argument is not a number”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;strictAddition(2, ‘10’, callback); // // Error = “Second argument is not a number”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;// Async Example - all calls made in parallel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;async.parallel({&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;twelve: function(callback){ strictAddition(2, 10, callback); },&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;fiftythree: function(callback){ strictAddition(42, 11, callback); },&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;six: function(callback){ strictAddition(23, -17, callback); },&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;},&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;function(err, results) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;if(err) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;console.log(err);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;return;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;console.log(results); // {twelve: 12, fiftythree: 53, six: 6}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;});&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;콜백과 프로미스보다 훨씬 쉬워보이는 async지만 웹 히스토리안에선 아직 다루지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Example taken &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; caolan&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;README&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    one&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    two&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// results is equal to: {one: 1, two: 2}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Immersive Sprint - NODE.js]]></title><description><![CDATA[Server and Node Node 치면 들어갈 수 없음. console.log 가능. ctrl + c 두 번 누르면 나갈 수 있음. import export -> es6 문법 commonJS 문법이라고 하는 commonjs module system…]]></description><link>https://gatsby-starter-bee.netlify.com/til/20181010-20181011 IM08D17-18 NODE JS/</link><guid isPermaLink="false">https://gatsby-starter-bee.netlify.com/til/20181010-20181011 IM08D17-18 NODE JS/</guid><pubDate>Thu, 11 Oct 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;server-and-node&quot;&gt;&lt;a href=&quot;#server-and-node&quot; aria-label=&quot;server and node permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Server and Node&lt;/h2&gt;
&lt;p&gt;Node 치면 들어갈 수 없음. console.log 가능.&lt;/p&gt;
&lt;p&gt;ctrl + c 두 번 누르면 나갈 수 있음.&lt;/p&gt;
&lt;p&gt;import export -&gt; es6 문법&lt;/p&gt;
&lt;p&gt;commonJS 문법이라고 하는 commonjs module system에서 따온 &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;404 - not found( 클라이언트)&lt;/p&gt;
&lt;p&gt;500 대는 서버문제&lt;/p&gt;
&lt;p&gt;127.0.0.1 = localhost 란 뜻(내 컴퓨터를 의미)&lt;/p&gt;
&lt;p&gt;-express 하면 구글검색시 그 내용들은 제외되고 출력&lt;/p&gt;
&lt;p&gt;채터박스 server 먼저 따라해보기&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;require&lt;/code&gt; 노드 모듈을 요청하는 것&lt;/p&gt;
&lt;p&gt;서버가 띄워진 상태에서 새 탭을 열어서 npm test 를 돌려야 함&lt;/p&gt;
&lt;p&gt;포트 닫기, 어떻게 포트를 강제로 열고 닫는지 알아보기.&lt;/p&gt;
&lt;h2 id=&quot;노드-키워드&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%ED%82%A4%EC%9B%8C%EB%93%9C&quot; aria-label=&quot;노드 키워드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 키워드&lt;/h2&gt;
&lt;p&gt;JS 인터프리터&lt;/p&gt;
&lt;p&gt;이벤트 루트란 개념?&lt;/p&gt;
&lt;p&gt;논블럭킹 I/O?&lt;/p&gt;
&lt;p&gt;REPL(Read, Eval, Print, Loop)&lt;/p&gt;
&lt;p&gt;오늘 할려는게 REST API 서버&lt;/p&gt;
&lt;p&gt;웹소켓은 실시간으로 통신 가능&lt;/p&gt;
&lt;p&gt;LIVE-SERVER(recast에서 자동 리프레쉬 되었던)&lt;/p&gt;
&lt;h2 id=&quot;커먼-js-패턴-중요&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EB%A8%BC-js-%ED%8C%A8%ED%84%B4-%EC%A4%91%EC%9A%94&quot; aria-label=&quot;커먼 js 패턴 중요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커먼 JS 패턴 (중요)&lt;/h2&gt;
&lt;h2 id=&quot;모듈-추출-예제&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EC%B6%94%EC%B6%9C-%EC%98%88%EC%A0%9C&quot; aria-label=&quot;모듈 추출 예제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 추출 예제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모듈(&lt;a href=&quot;https://jongmin92.github.io/2016/08/25/Node/module-exports_exports/&quot;&gt;https://jongmin92.github.io/2016/08/25/Node/module-exports_exports/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;관련된 코드들을 하나의 코드로 캡슐화하는 것을 말함.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모듈 추출하기(exporting)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; greetings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js
&lt;span class=&quot;token function-variable function&quot;&gt;sayHelloInEnglish&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function-variable function&quot;&gt;sayHelloInSpanish&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;모듈 추출의 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;가지 방법
&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt; greeting&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js 첫 부분에 다음과 같은 코드 추가
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt; 다른 파일에서 exports 객체 사용을 원할 때&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHelloInEnglish&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;sayHelloInSpanish&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt; 아래와 같이 대체할 수도 있음&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 왜냐하면 exports와 module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports는 같은 객체를 참조하기 때문&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
	module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        sayHelloInEnglish&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

        sayHelloInSpanish&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모듈 사용하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;require &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js에서 module을 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;추가&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;해주기 위해 사용
&lt;span class=&quot;token comment&quot;&gt;//require는 다음과 같이 정의&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js에서 greetings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;js를 require 합니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; greetings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./greetings.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 위 코드는 아래 코드와 동일한 코드다.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; greetings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  sayHelloInEnglish&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HELLO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  sayHelloInSpanish&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// main.js 에서 greeting.js 의 값과 메소드에 접근할 수 있습니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// main.js&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; greetings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./greetings.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// &quot;Hello&quot;&lt;/span&gt;
greetings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHelloInEnglish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// &quot;Hola&quot;&lt;/span&gt;
greetings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sayHelloInSpanish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;핵심 포인트&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;require 키워드는 &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt;를 반환. module.exports와 export는 call by reference로 동일한 객체를 바라보고 있고, 리턴되는 값은 항상 module.exports 이다. 모듈은 기본적으로 객체이고, 이 객체를 module.exports, exports 모두 바라보고 있는데, 최종적으로 return 되는 것은 무조건 module.exports 라는 것입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;express&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* GET home page. */&lt;/span&gt;
router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/sp