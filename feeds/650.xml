<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Haandol</title>
 <link href="http://haandol.github.io/atom.xml" rel="self"/>
 <link href="http://haandol.github.io/"/>
 <updated>2019-05-01T08:05:25+00:00</updated>
 <id>http://haandol.github.io</id>
 <author>
   <name>Vincent Lee</name>
   <email></email>
 </author>

 
 <entry>
   <title>파이썬 슬랙봇 튜토리얼</title>
   <link href="http://haandol.github.io/2019/04/30/making-python-slackbot-with-honey-tutorial.html"/>
   <updated>2019-04-30T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2019/04/30/making-python-slackbot-with-honey-tutorial</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Honey&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 를 이용하여&lt;/p&gt;

&lt;p&gt;나만의 파이썬 스크립트를 추가할 수 있는 슬랙봇 만들기 튜토리얼&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;파이썬이 주력 언어인 회사내에서 쉽게 기능을 추가하려고 주말에 간단히 만든 슬랙봇&lt;sup id=&quot;fnref:1:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이 있었다.&lt;/p&gt;

&lt;p&gt;커널 쓰레드를 별로 좋아하지 않는 나는 gevent 를 사용하여 동시성 문제를 해결했었지만, gevent 의 몽키패칭은 마음의 짐이었다.&lt;/p&gt;

&lt;p&gt;이번에 gevent 를 Honey 에서 걷어내고 Py3 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;async / await&lt;/code&gt; 으로 대체하면서 튜토리얼을 써보기로 했다.&lt;/p&gt;

&lt;p&gt;튜토리얼이 다루는 내용은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Honey 설치&lt;/li&gt;
  &lt;li&gt;Honey 를 말하게 하기&lt;/li&gt;
  &lt;li&gt;REST 요청으로 결과 출력하는 앱 추가하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;

&lt;h3 id=&quot;slack-봇-추가&quot;&gt;Slack 봇 추가&lt;/h3&gt;

&lt;p&gt;봇을 추가하는 방법은 App 등록과 Custom Integration 방법이 있는데
여기서는 Custom Integration 으로 진행한다. (엄청 간단하기 때문)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;웹으로 &lt;a href=&quot;slack.com&quot;&gt;slack&lt;/a&gt; 에 로그인 한다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://my.slack.com/services/new/bot&quot;&gt;봇 추가&lt;/a&gt; 페이지에서 봇을 추가한다.&lt;/li&gt;
  &lt;li&gt;바로 나오는 설정페이지에서 Integration Settings 메뉴의 API Token 을 복사해서 메모장에 붙여둔다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;honey-설치&quot;&gt;Honey 설치&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://python.org&quot;&gt;Python3.5.3&lt;/a&gt; 이상을 설치한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래 명령으로 Honey 를 clone 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/haandol/honey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;pip 또는 pip3 명령으로 의존성을 설치한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;honey
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;원하는 에디터로 settings.py 를 열어서 SLACK_TOKEN 변수에 붙여넣기 해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim settings.py
...
SLACK_TOKEN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xoxb-621727845940-616854617227-hWvglOuZvg3UwYIqQH8VKfGK'&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;honey-띄워보기&quot;&gt;Honey 띄워보기&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;robot.py 를 실행하고 봇이 채널에 온라인으로 표시되는지 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python robot.py
INFO:honey:RTM Connected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190430/honey-online.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;honey 에게 DM 으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;!help&lt;/code&gt; 라고 보내보고 적절히 응답이 오는지 확인한다.
&lt;img src=&quot;/assets/img/20190430/honey-response.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;앱-추가하기&quot;&gt;앱 추가하기&lt;/h2&gt;

&lt;p&gt;Honey도 Hubot 처럼 내가 원하는 스크립트를 맘대로 플러그인 할 수 있다.
Honey 에서는 이러한 스크립트를 &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; 이라고 부른다.&lt;/p&gt;

&lt;p&gt;이번 섹션에서는 REST API 요청을 받아와서 반환해주는 앱을 추가해본다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apps&lt;/code&gt; 폴더 아래에 fake.py 를 추가한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim apps/fake.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apps/fake.py&lt;/code&gt; 에 아래내용을 입력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_command&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://jsonplaceholder.typicode.com/todos/1'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@on_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fake'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'테스트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'''fake rest api 에 요청을 보내고 결과를 받아옵니다'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 간단히 설명하면,&lt;/p&gt;

&lt;p&gt;1라인의 &lt;code class=&quot;highlighter-rouge&quot;&gt;@on_command&lt;/code&gt; 데코레이터는 명령어를 등록해준다.
우리가 만든 fake 앱은 honey 에게 &lt;code class=&quot;highlighter-rouge&quot;&gt;!fake&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;!테스트&lt;/code&gt; 메시지를 보내서 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;5라인의 URL에 브라우저로 접속해보면 단순히 아래와 같은 json 문서를 반환하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;delectus aut autem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;completed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch()&lt;/code&gt; 함수는 위의 URL 에서 title 필드를 반환한다. 간단한 기능이지만 함수를 따로 분리한 이유는 run 을 직접실행할 수 없기 때문에 개별기능에 대한 테스트를 편하게 하기 위해서이다.&lt;/p&gt;

&lt;p&gt;13라인의 &lt;code class=&quot;highlighter-rouge&quot;&gt;docstring&lt;/code&gt; 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;!help&lt;/code&gt; 메시지를 받았을때 사용자에게 표시된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;앱이 정상적으로 동작하는지 테스트를 해본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from apps import fake
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; fake.fetch&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'delectus aut autem'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 를 열고 &lt;code class=&quot;highlighter-rouge&quot;&gt;APPS&lt;/code&gt; 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fake&lt;/code&gt; 를 추가해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim settings.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'helper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello_world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'fake'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                                        
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;robot.py 를 실행하여 슬랙봇을 띄워준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python robot.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; honey.log
2019-05-01 16:50:06,266 - honey - INFO - RTM Connected.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;적당한 슬랙채널에 @honey 를 초대하고 !help, !fake 를 입력해본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190430/honey-invite.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/20190430/honey-send-command.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;redis-저장소-사용하기&quot;&gt;Redis 저장소 사용하기&lt;/h2&gt;

&lt;p&gt;Honey 는 redis_brain 을 통해 Redis 에 데이터를 넣고 가져올 수 있다.
이번 섹션에서는 내장된 redis_brain 을 이용하여 메모하는 방법을 알아보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;docker 로 redis 를 띄워본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; redis &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 6379:6379 redis
57eef9fc911f5b0eb468a55688fc33897ba0a52e0d3f96e9fe7ca9628bb986e5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;settings.py 에 Redis 주소를 추가해주고 &lt;code class=&quot;highlighter-rouge&quot;&gt;redis_brain&lt;/code&gt; 앱을 추가해주자.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim settings.py
...
REDIS_URL &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;
REDIS_PORT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6379
...
APPS &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'helper'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'hello_world'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'fake'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'redis_brain'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Honey 를 재시작해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python robot.py
2019-05-01 16:50:06,266 - honey - INFO - RTM Connected.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;honey 가 초대되어 있는 채널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;!memo&lt;/code&gt; 명령으로 값을 저장하고 가져와본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190430/honey-memo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력 순서는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;memo
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;memo hi
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;memo hi there
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;memo hi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;hi 에 대해서 there 값을 저장해두고 잘 가져오는 것을 확인할 수 있다. Redis 를 이용하면 봇을 껐다키더라도 데이터를 유지할 수 있다.&lt;/p&gt;

&lt;p&gt;내가 만든 앱에서 무언가 저장하고 가져오고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; 함수의 파라미터인 robot.brain 을 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;휴봇의 파이썬 버전이 필요해서 시작한 프로젝트 였는데 node 기반 회사로 옮기니 그냥 휴봇을 쓰게 되어 시간을 많이 들이지 못해서 약간 안타까운 맘이 있었다.&lt;/p&gt;

&lt;p&gt;언제든 필요한 내용들을 PR 해주면 좋겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/honey&quot;&gt;haandol/honey&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Redis cluster 튜토리얼</title>
   <link href="http://haandol.github.io/2018/09/07/redis-cluster-predixy.html"/>
   <updated>2018-09-07T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2018/09/07/redis-cluster-predixy</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;코드는 여기&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;기존엔 redis 를 대규모로 쓰려면 sentinel 로 master-slave 를 구성하고 각 마스터들을 twemproxy 로 묶어서 샤딩할 수 밖에 없었다.&lt;/p&gt;

&lt;p&gt;그러나 twemproxy 의 구조상 redis-cli 를 이용하여 콘솔에서 특정한 작업을 처리하는 것은 굉장히 귀찮은 작업이고, 무엇보다 twemproxy 는 유지보수를 안한지 오래되어 더 이상 쓰기가 좀 꺼려진다.&lt;/p&gt;

&lt;p&gt;redis 3.0 부터 도입된 redis-cluster 를 쓰면 샤딩없이 redis 를 HA 하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;cluster 이므로 sentinel 을 쓰지 않아도 되어 아키텍처가 간단해 지는 것은 덤.&lt;/p&gt;

&lt;p&gt;redis-cluster 를 이용하여 클러스터를 구축하고&lt;/p&gt;

&lt;p&gt;redis-cluster 용 proxy 인 predixy 를 이용하여 redis-cli 에서 쉽게 작업할 수 있는 환경을 구축해보자.&lt;/p&gt;

&lt;h2 id=&quot;redis-cluster-특징&quot;&gt;redis-cluster 특징&lt;/h2&gt;

&lt;p&gt;요즘 나오는 일반적인 클러스터 서비스의 특징을 다 갖추고 있다. (docker 안되는거 빼고)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reids &lt;code class=&quot;highlighter-rouge&quot;&gt;3.0&lt;/code&gt; 에서 추가되었다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;최대 1000 노드&lt;/code&gt;까지 선형적으로 scaleout 할 수 있도록 설계되었다.&lt;/li&gt;
  &lt;li&gt;docker 로 쓰려면 net=host 로 써야한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;NAT 지원 안함.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;최대한 write 를 safe 하게 한다. (메이저 파티션의 요청이 우선처리된다. 기존 sentinel 도 마이너 파티션 에 대한 failover 는 하지 않는다.)&lt;/li&gt;
  &lt;li&gt;파티셔닝 복구 기능. (replicas migration 을 이용해서 슬레이브가 하나도 없는 마스터들은 여러 슬레이브를 가진 애들로부터 슬레이브를 받게 된다.)&lt;/li&gt;
  &lt;li&gt;hash tags 라는 컨셉으로 구현되었다. (얼핏봐서는 consistency hashing 느낌)&lt;/li&gt;
  &lt;li&gt;하나의 db (0번) 만 쓴다.&lt;/li&gt;
  &lt;li&gt;TCP 연결로 하트비트(ping-pong) 을 쏴서 클러스터를 유지한다. 이 TCP 연결을 클러스터 버스라고 부르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;기본포트 + 10000&lt;/code&gt; 포트로 통신한다. (offset 10000 은 고정)&lt;/li&gt;
  &lt;li&gt;클러스터는 완전 그래프로 되어 있으므로 100개의 노드가 있으면 노드당 99개의 하드비트를 쏘게 되어 있다. 단, node_timeout 이라는 게 있어서 이 타임아웃안에 하트비트를 다 전송하도록 전체 하트비트 주기를 조정해주는 식으로 된다. (부하분산)&lt;/li&gt;
  &lt;li&gt;strong consistency 를 보장하지 않는다. 대부분의 클러스터가 그렇듯 eventually consistency.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redis-cluster-구성&quot;&gt;redis-cluster 구성&lt;/h2&gt;

&lt;p&gt;클러스터 구성방법은 여기&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 에 잘 나와있으므로 생략한다.&lt;/p&gt;

&lt;h2 id=&quot;proxy-설정&quot;&gt;proxy 설정&lt;/h2&gt;

&lt;p&gt;클러스터 구성 후 아무 노드나 redis-cli 로 들어가서 get/set 해보면 키가 샤딩된 노드에 맞춰 커넥션이 이리저리 redirection 된다.&lt;/p&gt;

&lt;p&gt;클라이언트가 직접 사용한다면 얼핏봐도 엄청난 오버헤드가 있을 것 같은 일이므로 프록시를 앞에 두고 클라이언트는 프록시랑만 통신하도록 하자.&lt;/p&gt;

&lt;p&gt;redis-cluster proxy 로 검색해서 이리저리 보다 보면 결국 codis, corvus, predixy 3개로 압축된다. (star 순서대로)&lt;/p&gt;

&lt;p&gt;개인적으로는 Predixy&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 라는 녀석을 쓰기로 했는데 codis 는 기능이 너무 많고, corvus 는 관리가 안되고 있는 느낌이 들기 때문이다.&lt;/p&gt;

&lt;p&gt;설치는 엄청 쉽다. 그냥 받아서 g++ 로 make 해버리면 된다. 하지만 요즘 이런 툴들은 내 컴에 깔기보다 도커로 까는 것이 낫다. 그래서 docker&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 로 구워놨다.
(용량을 줄이기 위해 alpine 으로 구우려고 했으나 musl glibc 와 리눅스용 glibc 가 함수 시그너처가 다른게 많아서 안구워져서 그냥 ubuntu 로 구웠다.)&lt;/p&gt;

&lt;p&gt;여튼 일단 프로젝트를 클로닝한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/haandol/predixy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;predixy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자신의 redis-cluster 구성대로 conf 아래의 cluster.conf, predixy.conf 를 수정한다.
servers 만 바꿔주면 된다. (앞의 + 는 오타가 아니며 꼭 붙여줘야함.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# conf/cluster.conf&lt;/span&gt;
ClusterServerPool &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    MasterReadPriority 60
    StaticSlaveReadPriority 50
    DynamicSlaveReadPriority 50
    RefreshInterval 1
    ServerTimeout 1
    ServerFailureLimit 10
    ServerRetryTimeout 1
    KeepAlive 120
    Servers &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        + 127.0.0.1:7001
        + 127.0.0.1:7002
        + 127.0.0.1:7003
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# conf/predixy.conf&lt;/span&gt;
Name PredixyExample
Bind 0.0.0.0:7617
WorkerThreads 4
MaxMemory 0
ClientTimeout 300
BufSize 4096
Log ./predixy.log
LogRotate 1d
LogVerbSample 0
LogDebugSample 0
LogInfoSample 10000
LogNoticeSample 1
LogWarnSample 1
LogErrorSample 1

Include auth.conf
Include cluster.conf
Include latency.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정후 아래의 명령으로 실행해본다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별 에러메시지가 없다면 실행된 상태임. 셸을 새로 띄워서 접속해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;redis-cli &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 7617 info
&lt;span class=&quot;c&quot;&gt;# Proxy&lt;/span&gt;
Version:1.0.5-pre
Name:PredixyExample
Bind:0.0.0.0:7617
...
 
&lt;span class=&quot;c&quot;&gt;# Servers&lt;/span&gt;
Server:127.0.0.1:7000
Role:master
Group:7921290b7deb00d57650357fe73c3fa03f54e209
DC:
CurrentIsFail:1
Connections:4
Connect:405
Requests:829
Responses:22
SendBytes:488
RecvBytes:9095
 
Server:127.0.0.1:7001
Role:master
Group:f2bf617ccf931843539083bdfa4ef54decd16188
DC:
CurrentIsFail:0
Connections:4
Connect:4
Requests:164
Responses:164
SendBytes:4496
RecvBytes:114951
...
 
LatencyMonitorName:blist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;twemproxy 에 비해 안정적이고 설정도 간편하다. 이미 대규모 서비스 들에서 잘 쓰고 있다고 하고, redis 를 쓸거면 대안이 없기도 하다. (dynomite 같은 걸로 옮겨가면 몰라도)&lt;/p&gt;

&lt;p&gt;단점은 redis 들을 host=net 으로 띄워야 한다는 것인데, 포트를 적절히 열어주는 것이 sentinel 설정하고 관리하는 거보다는 쉽기 때문에 극복할 수 있다.&lt;/p&gt;

&lt;p&gt;(회사 컨플에만 글을 열심히 쓰다보니 개인 블로그에는 글을 안쓰게 된다. 이번 글도 억지로 쓰다보니 너무 날림 글이 되어버린 느낌..)&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/predixy&quot;&gt;haandol/predixy&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.leocat.kr/notes/2017/11/07/redis-simple-cluster&quot;&gt;leocat redis cluster&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/joyieldInc/predixy&quot;&gt;Predixy&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/haandol/predixy/&quot;&gt;dockerized predixy&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Typescript2 서버 튜토리얼 - 4/4</title>
   <link href="http://haandol.github.io/2017/05/01/typescript2-experss-tutorial-part-four.html"/>
   <updated>2017-05-01T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/05/01/typescript2-experss-tutorial-part-four</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;코드는 여기&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;본 글은 typescript 를 이용하여 socket.io 를 쓰는 것이 목적이므로 일단 socket.io 의 기본은 안다고 가정한다. 
socket.io 기본 사용법은 공식 홈페이지의 문서로도 충분한 것 같다.&lt;/p&gt;

&lt;p&gt;본 글에서는 socket.io 를 이용하여 실시간으로 채팅방 서비스를 만들어보자. &lt;del&gt;방이 1개라는 것은 함정&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;프로젝트-생성&quot;&gt;프로젝트 생성&lt;/h2&gt;

&lt;p&gt;본 글은 ts-tutorial v1&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;의 프로젝트 구조를 기반으로 진행하겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:haandol/ts-tutorial.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ts-tutorial
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout v1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 구조는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── LICENSE
├── README.md
├── package.json
├── src
│   └── index.ts
└── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;typescript-socketio-설치&quot;&gt;typescript, socket.io 설치&lt;/h2&gt;

&lt;p&gt;먼저 typescript 와 socket.io 패키지를 설치해보자. 
&lt;em&gt;@types/패키지명&lt;/em&gt; 으로 타입정의를 함께 설치하는 것도 잊지 말자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; typescript socket.io
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @types/node @types/socket.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;socket.io 채팅서비스는 홈페이지 예제&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;를 기반으로 하겠다.&lt;/p&gt;

&lt;p&gt;전체 시나리오는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서버 실행&lt;/li&gt;
  &lt;li&gt;클라이언트 html 파일을 브라우저에서 실행 (이 때 사용자에게 랜덤한 이름을 부여)&lt;/li&gt;
  &lt;li&gt;사용자가 글을 입력하면 내 이름과 함께 서버로 전송&lt;/li&gt;
  &lt;li&gt;서버는 받은 내용을 모든 사용자에게 전달&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;socketio-서버-만들기&quot;&gt;socket.io 서버 만들기&lt;/h2&gt;

&lt;p&gt;그럼 먼저 socket.io 를 이용한 서버를 만들어보자.&lt;/p&gt;

&lt;p&gt;서버에서 처리할 내용은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;socket.io 로 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트를 listening&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트로 Message 객체가 오면 json string 으로 변환하여 모든 사용자에게 전달&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;message-인터페이스-만들기&quot;&gt;Message 인터페이스 만들기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트 발생시 주고 받을 내용은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자 이름  (username)&lt;/li&gt;
  &lt;li&gt;내용         (content)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;따라서 해당 형태의 인터페이스를 만들어서 처리하면 된다.&lt;/p&gt;

&lt;p&gt;src/domain/message.ts 를 만들고 아래 내용을 입력해준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; src/domain
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch src/domain/message.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/message.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서버-코드-작성&quot;&gt;서버 코드 작성&lt;/h3&gt;

&lt;p&gt;Message 인터페이스를 이용해 메시지를 주고받을 서버 코드를 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/index.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketIO&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;socket.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./domain/message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Listening port %s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 간단히 설명하면,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 http 모듈을 이용해 서버객체를 생성한 뒤, socket.io 와 바인딩 한다.&lt;/li&gt;
  &lt;li&gt;서버객체를 이용해 3000번 포트로 서버를 연다.&lt;/li&gt;
  &lt;li&gt;socket.io 를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트를 listening 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트가 발생하면 전달된 메시지를 모든 사용자에게 전달한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;socketio-클라이언트-페이지-만들기&quot;&gt;socket.io 클라이언트 페이지 만들기&lt;/h2&gt;

&lt;p&gt;socket.io 홈페이지의 예제는 express 를 사용해 html 파일을 serving 하고 있다.
본 글의 의도상 express 를 사용하지 않고 싶었다. &lt;del&gt;typescript + express + socket.io 가 되어 버린다&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;사실 socket.io 는 js 라이브러리를 따로 제공하고 있기 때문에 굳이 서버에서 html 을 렌더링 할 이유가 없다.
그래서 본 글에서는 그냥 socket.io cdn 을 이용한 index.html 파일로 클라이언트를 만들었다.&lt;/p&gt;

&lt;p&gt;전체 코드는 50줄 미만이며 public/index.html 에 있다. 아래에 body 부분의 완전한 코드를 첨부한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- public/index.html body 부분 코드 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autocomplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;button&amp;gt;&lt;/span&gt;Send&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://code.jquery.com/jquery-1.10.2.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.rawgit.com/haandol/korean-name-generator/master/build/namer.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:3000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'form'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;li&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'['&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;']: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클라이언트가 하는 일은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;socket.io 를 이용해 서버와 연결한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form#m&lt;/code&gt; 을 submit 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트를 socket.io 로 발생시킨다.&lt;/li&gt;
  &lt;li&gt;서버가 발생한 &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; 이벤트를 통해 json string 메시지를 받으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ul#messages&lt;/code&gt; 에 추가해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;namer&lt;/code&gt;&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 모듈은 있는데 한글이름을 랜덤하게 생성하려고 만든 작은 라이브러리다.
&lt;em&gt;generate()&lt;/em&gt; 함수를 실행하면 3글자 한글이름&lt;del&gt;이름이라고 부르기 힘든 녀석들도 있지만&lt;/del&gt; 을 반환한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;실행결과&quot;&gt;실행결과&lt;/h2&gt;

&lt;p&gt;서버실행은 여느때처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; 로 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ts-tutorial@1.0.0 start /Users/haandol/git/ts-tutorial
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tsc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; node ./build/index.js

Listening server on port 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;브라우저를 열고 탭을 2개 띄운 뒤, 각각의 탭에서 &lt;em&gt;public/index.html&lt;/em&gt; 을 열자.
메시지를 입력하고 화면 최하단의 send 버튼을 눌러보면(enter 를 쳐도 됨),
한 탭에서 입력한 내용이 모든 탭에서 실시간으로 보이는 것을 확인할 수 있다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qQiHZZ9KK2I&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;socket.io 가 너무 쉽게 되어 있어서 망해버린 강좌&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사실 socket.io 에서 타입체킹할 부분이 많지 않아서 굳이 typescript 를 써야 하나 하는 생각이 들었다.
&lt;del&gt;socket.io 의 타입정의가 부실한 감이 있다&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그렇다고 클라이언트 쪽에도 typescript 를 적용하자니 예제가 복잡해져서 못함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;막상 만들고보니 &lt;em&gt;한글이름 자동생성 모듈&lt;/em&gt; 만드는 시간이 본 예제 만드는 시간보다 더 걸렸다.&lt;del&gt;삽질하느라&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v3.0&quot;&gt;ts-tutorial v3&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v1.0&quot;&gt;ts-tutorial v1&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://socket.io/get-started/chat/&quot;&gt;socket.io get started&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/korean-name-generator&quot;&gt;korean name generator&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Typescript2 서버 튜토리얼 - 3/4</title>
   <link href="http://haandol.github.io/2017/04/29/typescript2-experss-tutorial-part-three.html"/>
   <updated>2017-04-29T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/04/29/typescript2-experss-tutorial-part-three</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;코드는 여기&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;본 글은 typescript 를 이용하여 mongodb 를 쓰는 것이 목적이므로 일단 mongodb 의 기본은 안다고 가정한다. 
mongodb 기본 사용법은 공식 홈페이지의 문서로도 충분한 것 같다.&lt;/p&gt;

&lt;p&gt;본 글에서는 mongodb 를 이용하여 밀짚모자 해적단 등장인물의 정보를 다룰(CRUD) 수 있는 클래스를 작성해본다.&lt;/p&gt;

&lt;h2 id=&quot;프로젝트-생성&quot;&gt;프로젝트 생성&lt;/h2&gt;

&lt;p&gt;본 글은 ts-tutorial v1&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;의 프로젝트 구조를 기반으로 진행하겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:haandol/ts-tutorial.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ts-tutorial
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout v1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 구조는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── LICENSE
├── README.md
├── package.json
├── src
│   └── index.ts
└── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mongodb-서버-준비&quot;&gt;MongoDB 서버 준비&lt;/h2&gt;

&lt;p&gt;일단 homebrew 로 mongodb를 설치하고 &lt;em&gt;/data/db&lt;/em&gt; 폴더(기본폴더)를 생성해준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install mongodb
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /data/db
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mongo 명령어로 서버에 접속이 되면 정상적으로 실행된 것이다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;typescript-mongoose-설치&quot;&gt;typescript, mongoose 설치&lt;/h2&gt;

&lt;p&gt;이제 typescript 와 mongodb 드라이버인 &lt;em&gt;mongoose&lt;/em&gt; 패키지를 설치해보자. 
&lt;em&gt;@types/패키지명&lt;/em&gt; 으로 타입정의를 함께 설치하는 것도 잊지 말자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; mongoose typescript
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @types/mongoose @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;스키마-정의&quot;&gt;스키마 정의&lt;/h2&gt;

&lt;p&gt;mongodb 는 아래와 같이 Schema 를 이용해 Model을 생성하고, 이를 이용하여 DB 에 Document 를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;robin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'robin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// 30&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'robin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// this prints 'undefined'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;printAge&lt;/em&gt; 함수의 경우 User 모델의 age 필드를 참조하여 처리를 하지만
javascript 특성상 아무 객체나 다 던져줘도 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;Typescript 를 사용하면, 아래처럼 파라미터가 스키마에 맞는 객체가 아니면 컴파일타임에 에러를 낸다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/index.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;robin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'robin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;robin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 30&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;printAge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'robin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// CompileError: can not convert to User&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typescript 를 쓰면서 추가된 사항은 아래와 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mongoose.Document 를 상속받은 Pirate 인터페이스를 정의하고&lt;/li&gt;
  &lt;li&gt;모델 생성시 Pirate 인터페이스를 제너릭 파라미터로 전달해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ipirate-정의하기&quot;&gt;IPirate 정의하기&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;당연하게도&lt;/del&gt; 타입체크를 하기 위해서 먼저 인터페이스나 클래스를 만들어야 한다.&lt;/p&gt;

&lt;p&gt;해적 정보를 저장하기 위해 src/domain/pirate.ts 를 만들고 Pirate 인터페이스를 추가하자&lt;/p&gt;

&lt;p&gt;참고로 많은 인터넷 예제들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;IPirate&lt;/code&gt; 이런 식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; 를 앞에 붙여서 인터페이스를 명명하는데
공식 스타일가이드는 인터페이스 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;를 붙이지 않도록 권장한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; src/domain
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch pirate.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/pirate.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;bounty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;isEsper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirateSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bounty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;isEsper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Pirate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirateSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;db-클래스-만들기&quot;&gt;DB 클래스 만들기&lt;/h2&gt;

&lt;p&gt;mongodb 의 CRUD 기능을 쉽게 쓸 수 있도록 wrapper 클래스를 하나 만들자.&lt;/p&gt;

&lt;p&gt;먼저 src/domain/db.ts 를 만들고 아래 내용을 추가하자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./pirate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 DB 클래스에 기능을 하나씩 추가해보자.&lt;/p&gt;

&lt;h3 id=&quot;데이터-추가하기create&quot;&gt;데이터 추가하기(Create)&lt;/h3&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./pirate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;PirateModel&lt;/em&gt; 은 mongoose.Model 을 상속받아 만들어지며,
Model.save() 는 해당 모델을 이용해 mongodb 에 Document 를 생성한다.&lt;/p&gt;

&lt;p&gt;이 때 반환된 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt; 의 제너릭 형태인데,
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 제너릭은 런타임에 타입을 지정할 수 있게 해주는 기법으로
처음 &lt;em&gt;PirateModel&lt;/em&gt; 생성시 Pirate 로 지정해줬었다.&lt;/p&gt;

&lt;p&gt;Promise 를 쓰지 않고 콜백(callback) 방식으로 호출 할 수도 있는데 아래와 같이 해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Document is created successfully'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콜백 방식은 여러 비동기 요청을 다룰 때 복잡한 코드를 만들게 되므로 가급적 Promise 와 친해지는 것이 좋다.
최근에는 generator 나 async/awaits 를 이용한 코루틴 기법도 많이 사용되고 있으니 참고하기 바란다.&lt;/p&gt;

&lt;p&gt;본 글에서는 CRUD 비동기 요청을 위해 Promise 방법을 사용하기로 한다.&lt;/p&gt;

&lt;h3 id=&quot;데이터-가져오기read&quot;&gt;데이터 가져오기(Read)&lt;/h3&gt;

&lt;p&gt;생성한 데이터를 읽어 들이는 read 함수를 추가해보자&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Model.find 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.DocumentQuery&amp;lt;Pirate[], Pirate&amp;gt;&lt;/code&gt; 를 반환하며
mongoose.DocumentQuery 인터페이스는 Promise 타입을 상속받는다.
따라서 실제로 반환하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;Pirate[], Pirate&amp;gt;&lt;/code&gt; 형태라고 생각하면 편하다.&lt;/p&gt;

&lt;p&gt;마찬가지로 read 함수도 아래와 같이 콜백 방식으로 구현할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;데이터-수정하기update&quot;&gt;데이터 수정하기(Update)&lt;/h3&gt;

&lt;p&gt;계속해서 데이터를 수정하는 update 함수를 추가해보자&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Model.update 함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;mongoose.Query&amp;lt;number&amp;gt;&lt;/code&gt; 를 반환하며
Query 인터페이스는 DocumentQuery 를 상속받으므로, 역시 Promise 타입을 상속받는다.
따라서 실제로 반환하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;number&amp;gt;&lt;/code&gt; 형태라고 생각하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;데이터-삭제하기delete&quot;&gt;데이터 삭제하기(Delete)&lt;/h3&gt;

&lt;p&gt;마지막으로 데이터를 수정하는 delete 함수를 추가해보자&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/db.ts&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DocumentQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Model.delete 함수의 반환값은 update 와 같은데 대신 삭제한 개수를 반환하지 않는다. 
따라서 실제로 반환하는 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;void&amp;gt;&lt;/code&gt; 형태라고 생각하면 편하다.&lt;/p&gt;

&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;

&lt;p&gt;마지막으로 우리가 만든 DB 클래스를 이용하여 Document 를 다뤄(CRUD) 보자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/index.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongoose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./domain/pirate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./domain/db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mongodb://localhost/onepiece'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MongooseThenable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'luffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bounty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isEsper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 mongodb 에 mongoose.connect 를 이용하여 연결하고
반환되는 Promise &lt;del&gt;Thenable 은 then 을 포함하는 인터페이스&lt;/del&gt; 를 connection 변수에 저장해둔다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;em&gt;luffy&lt;/em&gt; 객체를 만들고 Pirate 로 타입캐스팅 한다.&lt;/p&gt;

&lt;p&gt;해당 객체를 mongodb 에 저장하기 위해 db.create() 에 파라미터로 전달하고 Promise 를 반환받아서 리턴한다. 
create가 Promise 를 리턴했기 때문에 해당 Promise 를 이용하여 작업을 이어나갈 수 있다.&lt;/p&gt;

&lt;p&gt;그럼 데이터가 잘 저장되었는지 확인하기 위해 mongoDB 에서 name 이 &lt;em&gt;luffy&lt;/em&gt; 인 Document 를 가져와보자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Created'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;db.create 는 Model.save 를 바로 리턴하고 Model.save 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;Pirate&amp;gt;&lt;/code&gt; 을 리턴한다.
이때 Pirate 은 저장된 Document 를 반환하므로
다음 then 의 콜백에서 raw 를 이용해 해당 Document 를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;db.read 의 경우 Promise 를 리턴하지만 출력만 하면 되기 때문에 read 의 Promise 는 따로 리턴하지 않는다.
Promise 콜백(resolve) 는 리턴하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&amp;lt;void&amp;gt;&lt;/code&gt; 를 자동으로 리턴한다.&lt;/p&gt;

&lt;p&gt;계속해서 db.update 함수를 이용해 luffy 의 현상금을 3천만에서 5억으로 올려보자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bounty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'luffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Updated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;db.update 도 Promise 를 리턴하는데 반환값은 Promise&lt;number&gt; 로
몇개의 Document 가 업데이트 되었는지만 반환해준다.
db.read 를 이용해 실제로 데이터가 다 수정되었는지도 확인해보았다.&lt;/number&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 db.delete 함수를 이용해 luffy 를 현상수배명단에서 삭제하자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;luffy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'luffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Deleted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;db.delete 도 Promise 를 반환하는데 Promise&lt;void&gt; 를 반환한다. 따라서 파라미터가 없는 것을 볼 수 있다.
db.read 를 이용해 실제로 데이터가 다 지워졌는지도 확인해보았다.&lt;/void&gt;&lt;/p&gt;

&lt;p&gt;모든 작업을 마쳤으면 mongodb 커넥션을 닫아주자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행결과&quot;&gt;실행결과&lt;/h2&gt;

&lt;p&gt;실행은 여느때와 마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; 해주면 되겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ts-tutorial@1.0.0 start /Users/haandol/git/ts-tutorial
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tsc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; node ./build/index.js

Created
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; _id: 5905f3efb1b5611171a5bccd,
name: &lt;span class=&quot;s1&quot;&gt;'luffy'&lt;/span&gt;,
bounty: 0.3,
isEsper: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
__v: 0 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Updated
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; _id: 5905f3efb1b5611171a5bccd,
name: &lt;span class=&quot;s1&quot;&gt;'luffy'&lt;/span&gt;,
bounty: 5,
isEsper: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
__v: 0 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

Deleted
&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고로 mongoose.mpromise 관련 warning 이 나오는데 &lt;del&gt;그냥 무시해도 상관없음&lt;/del&gt;
typescript 에서는 Promise 를 global.Promise 로 대체할 수가 없어서 해결을 못했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;넣고 싶은 내용은 많았지만 다 빼고 핵심적인 부분만 담으려고 했다.
이상한 내용은 댓글이나 티켓을 보내주시면 빠르게 수정하겠다.&lt;/p&gt;

&lt;p&gt;다음은 typescript + socket.io 를 이용하여 아주 간단한 채팅서비스를 만들어보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v3.0&quot;&gt;ts-tutorial v3&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v1.0&quot;&gt;ts-tutorial v1&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Typescript2 서버 튜토리얼 - 2/4</title>
   <link href="http://haandol.github.io/2017/04/28/typescript2-experss-tutorial-part-two.html"/>
   <updated>2017-04-28T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/04/28/typescript2-experss-tutorial-part-two</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;코드는 여기&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;본 글은 &lt;strong&gt;typescript 를 이용하여&lt;/strong&gt; express 를 쓰는 것이 목적이므로일단 express 의 기본은 안다고 가정한다.
express 기본 사용법은 공식 홈페이지의 문서로도 충분한 것 같다.
&lt;del&gt;어차피 경량 웹 프레임워크는 라우팅, 미들웨어, 렌더링, 세션만 배우면 되니깐&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;본 글에서는 express 를 이용하여 밀짚모자 해적단&lt;del&gt;히익 오따꾸!!&lt;/del&gt; 등장인물의 정보를 조회할 수 있는 간단한 REST API를 만들어보자.&lt;/p&gt;

&lt;p&gt;우리가 만들 API는 아래 2개의 기능만 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전체 해적 목록 가져오기&lt;/li&gt;
  &lt;li&gt;이름으로 정보 가져오기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-생성&quot;&gt;프로젝트 생성&lt;/h2&gt;

&lt;p&gt;본 글은 ts-tutorial v1&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;의 프로젝트 구조를 기반으로 진행하겠다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:haandol/ts-tutorial.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ts-tutorial
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout v1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로젝트 구조는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── LICENSE
├── README.md
├── package.json
├── src
│   └── index.ts
└── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서비스를 개발하는 순서는 개인별로 다양할 수 있다. 본 글에서는&lt;del&gt;개인적으로&lt;/del&gt; 아래 순서를 선호한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;도메인 정의(DB 모델)&lt;/li&gt;
  &lt;li&gt;API 설계(인풋/아웃풋)&lt;/li&gt;
  &lt;li&gt;로직 작성 &lt;del&gt;및 테스트 작성&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;라우팅 테이블에 추가 &lt;del&gt;및 인수테스트 작성&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;원래는 유닛 테스트 등을 작성하는게 맞지만 글이 복잡해&lt;del&gt;길어&lt;/del&gt;지니깐, 본 글에서는 테스트를 작성하는 부분은 제외한다.&lt;del&gt;기회가 되면 다음에 다루거나&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;도메인-정의&quot;&gt;도메인 정의&lt;/h2&gt;

&lt;p&gt;일단 우리 API에서 다룰 엔티티는 &lt;em&gt;Pirate(해적)&lt;/em&gt; 뿐이다.&lt;/p&gt;

&lt;p&gt;src/domain 폴더를 만들고 models.ts 파일을 추가한 뒤 아래 내용을 넣자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; src/domain
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch src/doamin/models.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/domain/models.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bounty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isEsper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에 선언한 Pirate 클래스가 데이터베이스의 스키마 역할을 한다.&lt;/p&gt;

&lt;p&gt;이제 로직에서 데이터를 가져올 수 있도록 아주 간단한 DB 를 만들자.&lt;/p&gt;

&lt;p&gt;src/domain/db.ts 파일을 생성하고 아래의 내용을 채운다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch src/doamin/db.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// db.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./models'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'루피'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'상디'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'조로'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'우솝'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'로빈'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'브룩'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'나미'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pirates&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DB 가 하는 일은 매우 간단하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;models 에서 Pirate 모델을 임포팅 한다&lt;/li&gt;
  &lt;li&gt;Pirate[] 배열에 정적인 데이터를 로드하고&lt;/li&gt;
  &lt;li&gt;사용자 쿼리시 name 파라미터가 입력되면 이름으로 검색하고 파라미터가 없으면 전체 목록을 반환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;query 함수를 간단히 설명하면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;(name?: string)&lt;/em&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 는 해당 파라미터가 생략될 수도 있다는 것을 말한다. 생략되면 undefined 가 자동으로 들어간다.&lt;/li&gt;
  &lt;li&gt;따라서 name 이 입력되면 해당 name 과 동일한 해적을 반환하고 name 이 생략되면 전체 해적목록을 반환한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;api-설계&quot;&gt;API 설계&lt;/h2&gt;

&lt;p&gt;모델이 있다면 해당 모델을 API 로 CRUD 할 수 있어야 한다.
우리의 예제는 두개의 R(read) 기능만 제공하므로 간단하게 설계할 수 있다.&lt;/p&gt;

&lt;p&gt;요청은 아래와 같은 API 형태로 요청하면 될 것이다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET http://localhost:3000/pirate
전체목록 표시
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 이름으로 가져오는 경우에는 &lt;em&gt;name&lt;/em&gt; 파라미터만 있으면 되며, 요청은 다음과 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET http://localhost:3000/pirate/루피
루피의 해적정보 표시
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제 요청에 사용된 httpie&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 는 curl 에서 제공하는 기능을 직관적으로 사용할 수 있게 해주는 프로그램이다.
본인이 curl 을 자주 쓴다면 httpie 도 한번 보면 좋을 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install httpie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;expressjs-설치&quot;&gt;Express.js 설치&lt;/h2&gt;

&lt;p&gt;API 로직 작성을 하기 전에 express 를 설치해보자&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; express
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @types/express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;@types/express&lt;/em&gt; 는 typescript 타입정의(declarations)를 저장해둔 파일이며 해당 타입정의가 있어야 컴파일이 가능하다.
&lt;em&gt;–save-dev&lt;/em&gt; 옵션으로 개발환경에 설치하는 이유는 컴파일된 JS 를 배포 할 것이기 때문에 배포 환경에서는 타입스크립트 관련 모듈이 필요가 없기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;로직-작성&quot;&gt;로직 작성&lt;/h2&gt;

&lt;p&gt;이제 로직을 작성해보자.&lt;/p&gt;

&lt;p&gt;index.ts 에 모든 로직을 다 때려넣어서 만들어도 되지만
실제 프로젝트에서는 도메인이나 기능별로 파일을 구분해서 관리하는 것이 일반적이다.
여기서는 도메인 별로(그래봤자 Pirate 하나지만) 구분해서 파일을 생성해보겠다.&lt;/p&gt;

&lt;p&gt;먼저 src/apps/pirate/controller.ts 를 생성하자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; src/apps/pirate
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch src/apps/pirate/controller.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 controller.ts 파일의 내용을 아래와 같이 채우자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/apps/pirate/controller.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../domain/db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../domain/models'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/:name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;PirateController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;엄청 간단한 코드라 express 튜토리얼을 끝낸 수준이면 읽고 이해 할 수 있을 것이다.
그래도 코드를 간단히 짚고 넘어가면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 db 를 로딩한다.&lt;/li&gt;
  &lt;li&gt;express.Router 기능을 이용해 /pirate 이하 서브패스를 처리할 라우터를 만든다.&lt;/li&gt;
  &lt;li&gt;해당 라우터에 전체목록, 이름검색에 해당하는 라우트를 등록해준다. 각 라우트는 데이터를 json 문자열로 반환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;물론 express.Router 기능을 쓰지 않고 index.ts 에서 &lt;em&gt;app.get(‘/pirate/:name’)&lt;/em&gt; 과 같이 index.ts 안에서 모든 패스를 다 직접 지정해줄 수도 있다. &lt;del&gt;이 경우 conroller.ts 자체도 필요없어짐&lt;/del&gt;
하지만 위처럼 라우팅을 모듈화 해두면 여러 서브패스가 생기더라도 쉽게 관리할 수 있다.
또 지금은 src/apps/pirate/controller.ts 만 있지만 로직이 비대해지거나 하면 conroller(View), service(Controller), repository(Model) 로 MVC 를 적용할 수도 있다.&lt;/p&gt;

&lt;h2 id=&quot;express-서버코드-작성&quot;&gt;express 서버코드 작성&lt;/h2&gt;

&lt;p&gt;서브패스 라우터를 추가했으니 express 서버코드를 작성하고 서브패스를 라우팅 테이블에 추가해주자.&lt;/p&gt;

&lt;p&gt;기존 index.ts 를 모두 지우고 다음의 내용으로 채워준다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/index.ts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./apps/pirate/controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/pirate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PirateController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드 역시 튜토리얼 수준의 간단한 코드로 어려운 내용은 없다. 간단히 짚고 넘어가자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;express 를 임포팅 한다. typescript 의 임포팅은 &lt;code class=&quot;highlighter-rouge&quot;&gt;import * as 이름 from&lt;/code&gt; 방식과 &lt;code class=&quot;highlighter-rouge&quot;&gt;import { 모듈명 } from&lt;/code&gt;  방식이 있다.
관리측면에서는 후자를 쓸 수 있으면 쓰고 아닌 경우만 전자를 쓰는 것이 좋은 것 같다.&lt;/li&gt;
  &lt;li&gt;PirateController(express.Router 객체) 를 임포팅한다.&lt;/li&gt;
  &lt;li&gt;express app 을 생성한다.&lt;/li&gt;
  &lt;li&gt;app 에서 PirateController 를 사용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;/pirate&lt;/code&gt; prefix 뒤에 서브패스로 라우트를 등록한다.
이런 방식을 모듈식 마운팅 이라고 부르며 라우팅 방식들에 대한 자세한 내용은 공식문서&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 를 참조하자.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;서버-실행&quot;&gt;서버 실행&lt;/h2&gt;

&lt;p&gt;서버 실행은 이전과 똑같다.&lt;/p&gt;

&lt;p&gt;tsc 로 컴파일하고 src/index.js 를 실행하면 된다.&lt;/p&gt;

&lt;p&gt;따라서 전에 설정해둔 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; 명령을 그대로 쓰자. 해당 명령은 package.json 에 scripts 필드에 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cinnamon@1.0.0 start /Users/haandol/ts-tutorial
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tsc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; node ./build/index.js

Listening at http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;끝이다!!! 마지막으로 httpie 나 curl 로 정상적으로 API 가 동작하는 지 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET localhost:3000/pirate
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 325
Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf-8
Date: Fri, 28 Apr 2017 17:55:50 GMT
ETag: W/&lt;span class=&quot;s2&quot;&gt;&quot;145-Bgcrv7/sXVWx01gxwJJb3ocIYDw&quot;&lt;/span&gt;
X-Powered-By: Express

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;bounty&quot;&lt;/span&gt;: 5, 
        &lt;span class=&quot;s2&quot;&gt;&quot;isEsper&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;루피&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;bounty&quot;&lt;/span&gt;: 1.7, 
    &lt;span class=&quot;s2&quot;&gt;&quot;isEsper&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;상디&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
...
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http GET localhost:3000/pirate/루피
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 45
Content-Type: text/html&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;utf-8
Date: Fri, 28 Apr 2017 17:57:37 GMT
ETag: W/&lt;span class=&quot;s2&quot;&gt;&quot;2d-uDyo54UhUxrfUYTLzXVdZEKAOn8&quot;&lt;/span&gt;
X-Powered-By: Express

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;bounty&quot;&lt;/span&gt;: 5, 
    &lt;span class=&quot;s2&quot;&gt;&quot;isEsper&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;루피&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;구조 등에서 복잡해질 수 있기 때문에 코드적으로는 헷갈릴 요소를 최대한 제외시키고 작성했다. 이상한 내용이 있으면 알려주시라.&lt;/p&gt;

&lt;p&gt;본 글과는 별개로 뭔가 블로그 처음 목적이 퇴색되어 가는 것 같다…&lt;del&gt;먹고 사는게 힘들어서&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;빨리 연재를 마무리하고 데이터 분석쪽 공부하면서 글을 써야겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v2.0&quot;&gt;ts-tutorial v2&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v1.0&quot;&gt;ts-tutorial v1&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://expressjs.com/ko/guide/routing.html&quot;&gt;express guide for routing&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Typescript2 서버 튜토리얼 - 1/4</title>
   <link href="http://haandol.github.io/2017/04/27/typescript2-experss-tutorial-part-one.html"/>
   <updated>2017-04-27T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/04/27/typescript2-experss-tutorial-part-one</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;코드는 여기&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제마다 뭔가 많이 달라서 뭘로 해야할지 모르겠다구요?
&lt;code class=&quot;highlighter-rouge&quot;&gt;정상입니다. 설정이 제일 쉬워보이는거 정해서 하세요.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개발환경 세팅에 손이 많이가서 빡친다구요?
&lt;code class=&quot;highlighter-rouge&quot;&gt;정상입니다. 당을 섭취하면서 하다보면 익숙해집니다.&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;Python 으로만 서버 개발하다가 지난주부터 nodejs 를 공부하게 되었는데 너무나 다양한 (형태의) 예제들이 오히려 압박이었다.&lt;/p&gt;

&lt;p&gt;본 글은 나처럼 다른(Python) 언어로 서버 개발하다가 넘어오는 개발자들을 위해(즉 node 환경에 익숙하지 않은 서버개발자) 작성했다.&lt;/p&gt;

&lt;p&gt;글 순서는 아래와 같으며, 전체 시리즈의 끝에는 간단한 채팅 서비스를 만들게 될 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;hello world (당연하게도)&lt;/li&gt;
  &lt;li&gt;express + Typescript 로 간단한 REST API 개발&lt;/li&gt;
  &lt;li&gt;mongoose + Typescript 로 앞서 만든 REST API 에 CRUD 추가&lt;/li&gt;
  &lt;li&gt;socket.io + Typescript 로 실시간 채팅 서비스 개발&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;node 기본과 Typescript 는 알고 있다고 가정하고 진행하겠다.&lt;/p&gt;

&lt;p&gt;내 개발 환경은 osx + terminal + vim 이며 IDE 쓰는 사람은 알아서…&lt;/p&gt;

&lt;h2 id=&quot;프로젝트-생성-및-설정&quot;&gt;프로젝트 생성 및 설정&lt;/h2&gt;

&lt;p&gt;프로젝트 폴더를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir cinnamon
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cinnamon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Typescript 를 이용해 서버를 돌리려면 무조건 2개를 init 해줘야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt; 과 &lt;strong&gt;tsc&lt;/strong&gt; 이다. npm 은 패키지 매니저이고 tsc 는 타입스크립트 컴파일러다.&lt;/p&gt;

&lt;p&gt;이건 무조건 해야하므로 걍 받아들여라.&lt;/p&gt;

&lt;h3 id=&quot;npm-packagejson&quot;&gt;NPM: package.json&lt;/h3&gt;

&lt;p&gt;최근 python 서버에는 가상환경(virtualenv 모듈) 이 필수고 node 도 마찬가지다.&lt;/p&gt;

&lt;p&gt;node 에서 pip 에 해당하는 패키지 매니저는 &lt;strong&gt;npm&lt;/strong&gt; 이며 requirements.txt 의 역할을 하는 것은 &lt;strong&gt;package.json&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;npm 환경을 설정하기 위해 아래 명령을 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 명령은 package.json 파일을 생성해준다. 일단은 입력할 내용이 없다. 엔터만 치면 된다.&lt;/p&gt;

&lt;p&gt;package.json 의 모양은 다음과 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cinnamon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tsc-tsconfigjson&quot;&gt;TSC: tsconfig.json&lt;/h2&gt;

&lt;p&gt;이제 타입스크립트를 설지하자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; typescript @types/node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;–save&lt;/em&gt; 옵션은 package.json 에 자동으로 설치되는 패키지의 의존성을 붙여준다.
&lt;em&gt;@types/패키지&lt;/em&gt; 은 패키지의 선언(declaration) 을 Typescript 에서 사용할 수 있게 해준다.
1.x 에서는 tsd 나 typings 같은 패키지로 복잡하게 했었는데 2.x 에서는 &lt;em&gt;@types/패키지&lt;/em&gt; 를 npm install 하면 끝난다.&lt;/p&gt;

&lt;p&gt;타입스크립트는 TS 형태를 JS 로 컴파일하는 방식이며 컴파일시 &lt;strong&gt;tsconfig.json&lt;/strong&gt; 파일을 참조한다.&lt;/p&gt;

&lt;p&gt;이제 tsconfig.json 을 만들어보자. 아래 명령어 하나로 끝난다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tsc &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 tsconfig.json 가 생겼다. 파일내용은 다음과 같을 것이다.&lt;/p&gt;

&lt;p&gt;outDir 은 직접 추가해주면 되는데 아래에서 설명하겠다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;outDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;manually&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;noImplicitAny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다른건 신경안써도 되고 일단 &lt;em&gt;target&lt;/em&gt; 필드만 보자.&lt;/p&gt;

&lt;p&gt;위에서 말했듯 TS 는 JS로 컴파일을 하는데, 어떤 ES 표준버전으로 컴파일 할지 결정할 수 있다.
node 6.4 이상은 es2015 를 지원하기 때문에&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; node 구 버전을 쓰거나 프론트엔드 작업을 할 게 아니면 굳이 es5 로 컴파일을 할 이유가 없다.
es2015 에는 Promise, Generator, Iterator 같은 편리한 기능들이 많이 있기 때문에 평소에는 &lt;em&gt;es2015&lt;/em&gt;로 설정해주면 된다.&lt;/p&gt;

&lt;p&gt;다만 여기서는 컴파일된 코드가 컴파일 전 코드와 다르다는 것을 보여주기 위해 target 을 es5 로 놔두겠다.&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;em&gt;outDir&lt;/em&gt; 필드를 추가해주자. 맨 윗줄에 추가한 이유는 &lt;em&gt;쉼표(,)&lt;/em&gt; 때문에 잘못입력할까봐 그런것인데 위치는 사실 상관없다.&lt;/p&gt;

&lt;p&gt;outDir 은 컴파일된 JS 파일이 어디에 위치할지 결정해주는 것으로, 해당 옵션이 없으면 컴파일된 파일(.js) 이 소스파일(.ts) 과 동일한 폴더에 위치하게 된다.
ts 파일과 js 파일이 섞이면 보기도 안좋고 관리하기도 어렵기 때문에, outDir 로 ts 와 js 위치를 구분해주는 것이 정신건강에 좋다.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello world!&lt;/h2&gt;

&lt;p&gt;Typescript 파일은 src 폴더 아래에 위치시키는 것이 관례인 것 같다. 우리도 src 폴더를 만들자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 첫 ts 파일을 만들어보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;좋아하는 편집기로 아래 내용을 &lt;em&gt;index.ts&lt;/em&gt; 에 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Hello world, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vincent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;es6&lt;/em&gt; 에 추가된 &lt;em&gt;class&lt;/em&gt; 와 &lt;em&gt;formatting&lt;/em&gt; 를 써야 구분이 될 것 같아서 다소 위와 같은 복잡한 hello world 예제를 작성했다.&lt;/p&gt;

&lt;p&gt;이제 index.ts 파일을 tsc 를 이용해 컴파일 해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일을 하면 &lt;em&gt;build&lt;/em&gt; 폴더가 생기고 안에 index.js 파일이 es5 형태로(엄청 복잡함) 컴파일 되어 있을 것이다.&lt;/p&gt;

&lt;p&gt;현재까지의 구조는 아래와 같을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── build
│   └── index.js
├── package.json
├── src
│   └── index.ts
└── tsconfig.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 파일을 실행해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node build/index.js
Hello world, Vincent!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 출력되는 것을 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;npm-start&quot;&gt;npm start&lt;/h2&gt;

&lt;p&gt;NPM 은 패키지 매니저이지만 간단한 스크립트 명령도 수행할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install
npm WARN cinnamon@1.0.0 No description
npm WARN cinnamon@1.0.0 No repository field.

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cinnamon@1.0.0 &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; /Users/haandol/git/cinnamon
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Error: no test specified&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1

Error: no &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;specified
npm ERR! Test failed.  See above &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more details.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;npm test&lt;/em&gt; 명령은 어디서 온것인가?
아까 작성된 package.json 의 &lt;strong&gt;scripts&lt;/strong&gt; 필드를 보면 &lt;strong&gt;test&lt;/strong&gt; 필드가 있는데 필드명은 npm 파라미터이고 값은 셸에서 실행되는 명령어이다.
즉, 아래는 npm test 를 실행하면 echo 명령으로 에러메시지를 보여준 뒤 프로그램을 강제종료한다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대부분의 인터넷 예제들은 &lt;em&gt;npm start&lt;/em&gt; 를 이용해 실행되도록 설정되어 있는데 우리도 해보자.&lt;/p&gt;

&lt;p&gt;우리는 tsc 를 이용하여 index.ts 를 컴파일한 뒤 node 를 이용해 index.js 를 실행하기만 하면 된다.&lt;/p&gt;

&lt;p&gt;아래와 같이 scripts 필드에 &lt;em&gt;start&lt;/em&gt; 를 추가하고 저장한다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tsc; node ./build/index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제대로 적용이 되는지 확인하기 위해 index.ts 를 수정해보자.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Hello world, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Add hugeGreet method&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;hugeGreet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`HELLO WORLD, &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!!!!!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Vincent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hugeGreet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 &lt;em&gt;npm start&lt;/em&gt; 명령만 입력하면 자동으로 &lt;em&gt;index.ts&lt;/em&gt; 를 &lt;em&gt;build/index.js&lt;/em&gt; 로 컴파일하고 해당 파일을 node 로 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cinnamon@1.0.0 start /Users/haandol/git/cinnamon
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tsc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; node ./build/index.js

HELLO WORLD, Vincent!!!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;Typescript 가 Angular, React, React Native 등의 다양한 환경에서 쓸 수 있게 범용으로 만든 &lt;del&gt;MS 니까&lt;/del&gt; 언어라 그런지
튜토리얼도 너무나 다양한 내용을 다루고 있어서 혼란스러웠다.&lt;/p&gt;

&lt;p&gt;구글 검색으로 찾은 다른 튜토리얼들 역시 프론트 개발자가 풀스택을 하면서 쓴 글이 많아서 마찬가지로 혼란스러웠다. &lt;del&gt;돌잔치에서 돌잡이하는 기분이었다. 뭘 잡아도 뭔지도 모르고 잡음.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;본 글의 내용은 막 Node 개발을 시작한 서버 개발자로서 내가 궁금해하던 내용들만 짚어서 만들었기 때문에 다른 부분은 다른 예제들을 찾아보며 공부하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;짧게 쓴다고 썼는데도 겁나 기네…&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/haandol/ts-tutorial/tree/v1.0&quot;&gt;ts-tutorial&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://node.green/&quot;&gt;node.green&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>내가 Angular 를 선택한 이유</title>
   <link href="http://haandol.github.io/2017/04/22/how-to-start-angular2.html"/>
   <updated>2017-04-22T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/04/22/how-to-start-angular2</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Typescript 쓰려면 그냥 Angular2 쓰세요. 속편합니다.&lt;/p&gt;

&lt;h2 id=&quot;난-왜-angular2-를-쓰기로-했는가&quot;&gt;난 왜 Angular2 를 쓰기로 했는가&lt;/h2&gt;

&lt;p&gt;최근 리액티브한 프론트 개발을 시작하면
React(Redux), Angular2, Vue 셋 중 하나를 선택하는데 고민을 하게 된다.&lt;/p&gt;

&lt;p&gt;서버 렌더링과 클라이언트 렌더링을 적절히 써야하는 일이 많기 때문에
서버렌더링과 거의 무관한 Vue 는 별로 고려하지 않았다.&lt;/p&gt;

&lt;p&gt;각 프레임워크의 특징은 많은 글들이 있으니 알아서 판단하면 되고
본 글에서는 개인적으로 왜 Angular 를 선택했는지만 간략히 적어본다.&lt;/p&gt;

&lt;h2 id=&quot;typescript&quot;&gt;Typescript&lt;/h2&gt;

&lt;p&gt;나는 테스팅이 매우 중요하다고 생각하는 편이다.
특히 타입체킹은 코드 작성 뿐아니라 테스팅에도 큰 안정성을 안겨다 주기 때문에
JS 에도 타입체킹을 써야겠다고 생각했다.&lt;/p&gt;

&lt;p&gt;JS 에서 타입체킹을 위한 툴은 크게 Flow 와 Typescript 가 있다.&lt;/p&gt;

&lt;p&gt;내가 단순 툴인 Flow 보다 언어에 가까운 Typescript 를 선택한 이유는
구글에서도 인정한 툴&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;이며 MS 에서 안정적으로 관리하고 있고
coffee 같은 새로운 문법이 아니라 ES 표준을 지향하는 슈퍼셋 언어이기 때문이다.&lt;/p&gt;

&lt;p&gt;Angular2 는 Typescript 를 기본으로 채택하고 있고
Vue 와 React 는 Facebook 에서 만든 Flow 라는 툴로 타입체킹을 하고 있다.&lt;/p&gt;

&lt;p&gt;이 말은 Vue 와 React 에 빠진 기능들을 메꾸기 위한 서드파티 라이브러리들이
Typescript 를 적절히 지원하지 않을 가능성이 있으며 stable 하지 않은 버전일수록 더욱 그렇다.&lt;/p&gt;

&lt;p&gt;또 Typescript + React + Redux 는 설정이 너무나 귀찮았다.&lt;/p&gt;

&lt;h2 id=&quot;학습곡선&quot;&gt;학습곡선&lt;/h2&gt;

&lt;p&gt;React 는 내가 기술들을 선택해서 조합한다는 것에 의미가 있다.
Angular 는 자주 사용되는 기능들이 내장되어서 빠르게 개발하는 데 의미가 있다.&lt;/p&gt;

&lt;p&gt;나는 이 차이점 때문에 Angular 가 React 보다 더 이해가 잘되었다.&lt;/p&gt;

&lt;p&gt;React 를 공부할 때 Babel, Webpack, Gulp 등의 메인 기능은 아니지만 
자주 사용되는 툴들이 나오면 해당 기술을 공부안하고 넘어가기가 매우 찝찝했다.&lt;/p&gt;

&lt;p&gt;각각은 범용성을 가진 외부 패키지 이므로
내가 쓴 패키지가 내 프로젝트에 무슨 영향을 미치는지를 어느정도 파악하지 않고 그냥 넘어가는 것을
싫어하기 때문이다. (각 프로젝트가 앞으로도 잘 관리될지도 예상해 봐야하고)&lt;/p&gt;

&lt;p&gt;그리고 툴 공부하는 시간이 React, Redux 공부하는 시간보다 더 오래 걸렸다..&lt;/p&gt;

&lt;p&gt;반면 Angular 는 왠만큼 지식의 흐름에 빈 공간이 나와도
(component, injector 데코레이터가 어떻게 구현되는지 등) 넘어가게 되었다.&lt;/p&gt;

&lt;p&gt;내장된 기능은 프레임워크에서 알아서 처리해줄 것이라는 기대가 있었기 때문이다.
(프레임워크에 내장된 기능 중 하나기 때문에 크게 바뀌거나 하지도 않을 거 같고)&lt;/p&gt;

&lt;p&gt;이런 측면에서 나는 Angular 를 훨씬 빨리 공부할 수 있었다.&lt;/p&gt;

&lt;p&gt;실제로 React+Redux+Typescript 는 3일 넘게 봐서 튜토리얼을 겨우 끝냈다. 그렇지만 지금 공부한 것으로 그럴듯 한 것을 만들 수 있을 거 같다는 느낌을 받기는 힘들었다.&lt;/p&gt;

&lt;p&gt;반면 Angular 는 2일 만에 튜토리얼을 다 끝내고 간단한 투두리스트를 혼자 만들 수 있었다.
(RxJS 도 이 글&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 을 읽고 봤더니 굉장히 이해가 쉬웠다.)&lt;/p&gt;

&lt;h2 id=&quot;속도&quot;&gt;속도&lt;/h2&gt;

&lt;p&gt;서버 언어로 Python 을 사용해온 입장에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;언어의 속도는 생각만큼 중요하지 않다.&lt;/code&gt; 라는 생각에 동의한다.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;React 는 Angular 보다 1.5배쯤 빠르지만&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 저 프레임워크들은 서버가 아니라 클라이언트의 리소스를 쓴다.&lt;/p&gt;

&lt;p&gt;요즘같은 리치 클라이언트 환경에서 저 정도 속도 차이는 Angular 를 통해 얻는 생산성 향상에 비해 미미한 수준이라고 생각했다.&lt;/p&gt;

&lt;h2 id=&quot;코드구조&quot;&gt;코드구조&lt;/h2&gt;

&lt;p&gt;코드 모양은 취향문제라고 본다.&lt;/p&gt;

&lt;p&gt;나는 React 의 JSX 보다는 Angular2 의 템플릿 모양이 더 맘에 들었다.
간단하게 html, css 파일을 컴포넌트와 분리시킬 수 있다는 점에서 더 그랬다.&lt;/p&gt;

&lt;p&gt;코드 구조는 좀 다른 이야기인데 코드 구조는 커뮤니케이션과 연관되어 있기 때문이다.&lt;/p&gt;

&lt;p&gt;예로, 내가 &lt;code class=&quot;highlighter-rouge&quot;&gt;RxJS가 옵저버(Observer) 패턴으로 stream 을 구성한 프레임워크다.&lt;/code&gt; 라고 설명했다면
해당 패턴을 아는 사람에게 설명해야하는 부분이 엄청나게 줄어들며
서로 코드에 대해 이야기 할 때도 마찬가지이다.&lt;/p&gt;

&lt;p&gt;React 는 구조가 자유롭기 때문에 많은 부분에 대해 설계를 해줘야 한다.
여러 사람이 작업할 때 특정한 구조가 나온 이유에 대한 설명이 항상 필요하다.
그러지 않으면 각 사람은 자기가 생각한 구조대로 만들 것이기 때문이다.&lt;/p&gt;

&lt;p&gt;Angular 는 특정한 형태로 구조를 강제하는 부분이 많다.
다양한 사람이 만든 앱이라도 코드의 구조가 크게 달라지지 않을 것 같았다.
새로운 사람이 와도 코드구조에 대한 설명은 짧게만 언급해도 되고 컴포넌트 구조만 설명하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;정리하며&quot;&gt;정리하며&lt;/h1&gt;

&lt;p&gt;나에겐&lt;/p&gt;

&lt;p&gt;내가 중요하게 생각하는 것들을
언어나 프레임워크도 중요하게 생각하는지 여부가 중요하다.
그 다음엔 개념이나 구조가 어렵지 않고 사용할 때 재미있는 지가 중요하다.&lt;/p&gt;

&lt;p&gt;이런 성향인지라
인터넷에 돌아다니는 장단점 정리한 글 몇 개 읽어보고 결정하는 건 잘 안먹혔다.&lt;/p&gt;

&lt;p&gt;이런저런 글을 읽어봐도 감이 안오면 그냥 튜토리얼을 해보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;ZDNET 기사&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot;&gt;The introduction to Reactive Programming you’ve been missing&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://hackernoon.com/yes-python-is-slow-and-i-dont-care-13763980b5a1&quot;&gt;Yes, Python is Slow, and I Don’t Care&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/more-benchmarks-virtual-dom-vs-angular-12-vs-mithril-js-vs-the-rest/&quot;&gt;Auth0 Benchmark&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>경력직 개발자 커리어 패스 정리</title>
   <link href="http://haandol.github.io/2017/02/24/software-engineer-career.html"/>
   <updated>2017-02-24T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/02/24/software-engineer-career</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;커리어 패스는 만들어가는 것&lt;/code&gt;이고 단기간에 가능하지 않다.&lt;/p&gt;

&lt;p&gt;커리어 패스가 고민되는데 어떻게 할 지 모른다면 다음과 같이 해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;현재 내 능력과 관계없이&lt;/code&gt; 다니고 싶은 회사를 5개 정도 정한다.(예: 구글, 아마존, Valve, AirBnB, github)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 회사들의 Job / Career 란을 본다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;현재 내 능력과 관계없이&lt;/code&gt; 제일 하고 싶은 job 을 목록에서 찾는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 job 의 description 을 읽어본다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;맘에 드는 job description 은 북마크 하고 한두달에 한번씩 다시 읽고 현재 나의 성장 / 업무를 점검한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;최근 직장을 그만두고 취업준비를 하면서 많은 고민을 하고 있다.&lt;/p&gt;

&lt;p&gt;이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;현재의 커리어 패스로는, 내가 보기에 매력적인 회사에 갈 수가 없다는 것&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;풀스택 SDE 로 어설프게 DevOps 일을 하면서 커리어의 대부분을 보냈는데&lt;/p&gt;

&lt;p&gt;막상 취업시장에 뛰어드니 현재 내 커리어는 신입사원과 동일한 수준이라는 사실을 깨닫고 충격을 받았다.&lt;/p&gt;

&lt;p&gt;참고로 내 커리어 패스에 대해 고민한 결과 다음과 같은 요구사항을 정리했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;소프트웨어 엔지니어&lt;/code&gt; 로 취업을 하되&lt;del&gt;경력을 날릴 순 없으니&lt;/del&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 엔지니어&lt;/code&gt; 로의 업무를 할 수 있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추가로 사내에 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 과학자&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 분석가&lt;/code&gt; 들도 보유하고 있으면 좋겠다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;몇년 뒤, 최종적인 커리어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 과학자&lt;/code&gt; 이며 필요하다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 엔지니어&lt;/code&gt; 를 거쳐가야겠다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 데이터 분석가 / 과학자 / 엔지니어 라는 용어는 내가 정한 것이 아니라&lt;/p&gt;

&lt;p&gt;실제로 회사들에서 뽑고 있는 업무분야이며&lt;/p&gt;

&lt;p&gt;이번 글에서는 웹 쪽에 어떠한 업무분야들이 있는지 종류에 대해 간단히 정리해보려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;업무분야job-description&quot;&gt;업무분야(Job Description)&lt;/h2&gt;

&lt;p&gt;대학생때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;좋은 개발자가 되겠어&lt;/code&gt; 라는 막연한 꿈을 가지고 닥치는대로 공부했으나&lt;/p&gt;

&lt;p&gt;막상 처음 직업을 구해야하는 시점이 되자 개발자도 엄청나게 종류가 많다는 사실을 깨닫게 되었다.&lt;/p&gt;

&lt;p&gt;이런 개발자의 업무분야를 나누는 기준은 매우 다양하다.&lt;/p&gt;

&lt;p&gt;여기서는 &lt;del&gt;내 머리속의&lt;/del&gt;데이터의 흐름에 한번 따라 나눠보겠다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;서비스&lt;/code&gt;가 있어야 한다. 모든 회사는 서비스를 통해 사용자의 요청을 처리하고 적절한 데이터를 쌓게 된다.&lt;/p&gt;

&lt;p&gt;서비스를 개발하고 요청을 처리할 수 있는 서비스 스택을 디자인(architect) 하는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;서비스&lt;/code&gt; 직종이다.&lt;/p&gt;

&lt;p&gt;사용자가 성장하면서 서비스가 다루는 데이터의 양도 성장하게 된다.&lt;/p&gt;

&lt;p&gt;이렇게 늘어나는 데이터를 처리할 수 있는 적절한 경로(pipeline)를 설계하고 필요하다면 장비(hardware)도 직접 손대는 &lt;code class=&quot;highlighter-rouge&quot;&gt;시스템&lt;/code&gt; 직종이 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 서비스를 통해 시스템이 잘 쌓아둔 데이터를 이용하여 부가가치를 창출 하거나 문제를 해결하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터&lt;/code&gt; 직종이 있다.&lt;/p&gt;

&lt;p&gt;실제로는 위의 세 직종은 조금씩 교집합을 가지고 있다.&lt;del&gt;실세계의 데이터로 만든 분류기의 성능이 구린 것이 이해가 되는 순간&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;하지만 기본적으로는 교집합을 가지고 있더라도 한쪽이 주력이 되고 나머지 한쪽이 보조하는 경우가 대부분이므로 일단 넘어가자.&lt;/p&gt;

&lt;h3 id=&quot;서비스service&quot;&gt;서비스(Service)&lt;/h3&gt;

&lt;p&gt;위의 내용은 취업 준비를 하면서 많은 job description 을 읽고&lt;/p&gt;

&lt;p&gt;내 나름대로 정리한 내용이므로 완전 정확한 분류라고 보기엔 무리가 있다.&lt;/p&gt;

&lt;p&gt;회사의 job description 에 따라 백엔드 엔지니어와 소프트웨어 엔지니어가 거의 같은 경우도 있고&lt;/p&gt;

&lt;p&gt;Data Scientist/Data Analyst 대신 Junior Data Scientist/Data Scientist 라고 구분하기도 한다.&lt;/p&gt;

&lt;p&gt;큰 그림을 파악하는데 가이드라인으로만 보자.&lt;/p&gt;

&lt;h4 id=&quot;퍼블리셔publisher&quot;&gt;퍼블리셔(Publisher)&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;일명 psd 컨버터. psd 파일을 입력하면 html, css 를 출력한다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;국내는 &lt;del&gt;관련 외주회사가 많으니깐&lt;/del&gt;종종 있지만 외국은 퍼블리셔만 따로 뽑는 경우가 많이 없는 것 같다.&lt;/p&gt;

&lt;p&gt;디자이너가 퍼블리셔 역할을 하는 것이 일반적인 것 같다. UX/UI 디자이너도 분리되어 있지 않은 경우가 많아지고 있는 듯 하다.&lt;/p&gt;

&lt;h4 id=&quot;프론트엔드-엔지니어front-end-engineer&quot;&gt;프론트엔드 엔지니어(Front-end Engineer)&lt;/h4&gt;

&lt;p&gt;html, css 를 다루는 퍼블리셔와 프론트엔드 엔지니어를 구분짓는 가장 큰 차이는 &lt;del&gt;연봉&lt;/del&gt; javascript 일 것이다.&lt;/p&gt;

&lt;p&gt;프론트엔드 엔지니어는 javascript 를 이용하여 event 와 dom 을 동적으로 제어하고 json, socket.io 같은 기술을 이용해 서버와 통신하게 된다.&lt;/p&gt;

&lt;p&gt;즉 js와 browser, v8 엔진의 이해도가 프론트엔드 엔지니어의 내공을 결정한다고 보면 될 것 같다.&lt;/p&gt;

&lt;p&gt;최근에는 js heavy 한 서비스들이 많아져서 AngularJS 나 React(Flux, Redux) 를 다룰줄 아는 프론트엔드 개발자를 선호하는 추세인 것 같다.&lt;/p&gt;

&lt;h4 id=&quot;백엔드-엔지니어back-end-engineer&quot;&gt;백엔드 엔지니어(Back-end Engineer)&lt;/h4&gt;

&lt;p&gt;주로 DB(RDBMS, noSQL) 와 통신하여 데이터를 가져오고 가져온 데이터를 적절히 가공하여 프론트엔드가 통신할 API 를 만든다.&lt;/p&gt;

&lt;p&gt;새로운 기능의 구현과 기존 기능의 개선에 가장 큰 가치를 둔다.&lt;/p&gt;

&lt;p&gt;언어는 Java, PHP, node.js, &lt;del&gt;가끔가다&lt;/del&gt;RoR, &lt;del&gt;가뭄에 콩나듯이&lt;/del&gt;Python 을 사용하며&lt;/p&gt;

&lt;p&gt;언어의 비율은 국내나 해외나 큰 차이가 없는 것 같지만 C#, GO, Elxir, Erlang, Clojure 같은 &lt;del&gt;귀한?&lt;/del&gt;언어를 쓰는 경우는 해외가 훨씬 많다.&lt;/p&gt;

&lt;p&gt;해당 회사에서 사용하는 언어(Java, C#, PHP 등), DB(PostgresQL, MSSQL, noSQL), 캐시(Redis, memcached) 에 대한 기본적인 이해와 구현능력을 주로 본다.&lt;/p&gt;

&lt;p&gt;그리고 요새는 AWS, Azure 같은 클라우드 환경에서 개발하는 경우가 많아서 클라우드 환경에 대한 기본적인 이해가 있는지도 확인한다.&lt;/p&gt;

&lt;h4 id=&quot;소프트웨어-엔지니어software-engineer&quot;&gt;소프트웨어 엔지니어(Software Engineer)&lt;/h4&gt;

&lt;p&gt;Software Engineer 또는 Software Development Engineer 라고도 부르며,&lt;/p&gt;

&lt;p&gt;백엔드 엔지니어에 아키텍트(보통 시스템 디자인 이라고 함)의 능력을 함께 갖추고 있는 경우를 말한다.&lt;/p&gt;

&lt;p&gt;백엔드 엔지니어가 Robust 한 서비스를 만들 수 있느냐를 핵심가치로 한다면 소프트웨어 엔지니어는 Scalable (더 나아가서는 Highly Available) 한 서비스를 만들 수 있느냐를 핵심가치로 본다.&lt;/p&gt;

&lt;p&gt;대부분의 소프트웨어 엔지니어 면접에는 알고리즘/데이터구조 면접 뿐만 아니라 System Design 면접도 함께 치뤄진다.&lt;/p&gt;

&lt;h4 id=&quot;풀스택-엔지니어fullstack-engineer&quot;&gt;풀스택 엔지니어(Fullstack Engineer)&lt;/h4&gt;

&lt;p&gt;우리나라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;프론트엔드랑 백엔드를 다 할 줄 아는 개발자&lt;/code&gt;&lt;del&gt;가성비 좋은 개발자&lt;/del&gt; 로 생각하고 있지만&lt;/p&gt;

&lt;p&gt;외국은 &lt;code class=&quot;highlighter-rouge&quot;&gt;프론트엔드를 다룰 줄 아는 소프트웨어 엔지니어&lt;/code&gt; 로 정의하고 있다는 점이 다르다.&lt;/p&gt;

&lt;p&gt;마이크로 서비스 아키텍쳐(MSA) 가 대세인 상황에서 기능적으로 구성된 팀 문화를 가진 회사는 아무래도 풀스택 엔지니어를 선호할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;그리고 해당 팀에서의 엔지니어는 자신이 개발 및 배포를 할 뿐만 아니라, 자신이 배포한 서비스가 기본적인 트래픽에 대한 처리는 할 수 있도록 구성도 해야한다.&lt;/p&gt;

&lt;p&gt;따라서 백엔드 엔지니어의 기본적인 능력이 없이 프론트엔드만 하는 것은 의미가 없다.&lt;/p&gt;

&lt;p&gt;보통 직무에 아무 설명없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fullstack&lt;/code&gt;이라고 적혀있으면 &lt;del&gt;당연하게도&lt;/del&gt;node.js 가 백엔드인 경우가 많다. 아닌 경우는 대부분 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fullstack Java Developer&lt;/code&gt; 처럼 적어둔다.&lt;/p&gt;

&lt;h3 id=&quot;시스템system&quot;&gt;시스템(System)&lt;/h3&gt;

&lt;h4 id=&quot;시스템-엔지니어system-engineer&quot;&gt;시스템 엔지니어(System Engineer)&lt;/h4&gt;

&lt;p&gt;시스템 엔지니어는 서버나 네트워크 단의 아키텍쳐를 선정하거나 개발하며, 물리적인 서버를 관리하는 역할도 한다.&lt;/p&gt;

&lt;p&gt;클라우드 시스템을 안쓰고 IDC 등에서 서버를 직접 운영하는 경우가 많은데 이런 경우 시스템 엔지니어가 서버에 대한 점검&lt;del&gt;직접 스카시 하드를 구입하여 IDC 에 가서 추가/교체하고 온다거나&lt;/del&gt;도 직접 하고 한다.&lt;/p&gt;

&lt;p&gt;요즘 시스템 엔지니어는 IDC, 클라우드, 보안, 데이터 웨어하우스 같이 회사의 주업무가 하드웨어를 직접 관리하는 경우에만 뽑는 것 같다.&lt;/p&gt;

&lt;p&gt;클라우드 서비스 가격이 워낙 싸져서, &lt;code class=&quot;highlighter-rouge&quot;&gt;클라우드 비용 &amp;lt; 엔지니어 월급 + 하드웨어 + 서비스 다운타임 + 백업&lt;/code&gt; 이기 때문인 것 같다.&lt;/p&gt;

&lt;h4 id=&quot;devops&quot;&gt;DevOps&lt;/h4&gt;

&lt;p&gt;Developer + Operations 의 합성어로 우리나라에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;혼자서 배포가 가능한 백엔드 개발자&lt;/code&gt; 정도로 생각하고 있지만 외국에서는 전혀 그렇지 않은 것 같다.&lt;/p&gt;

&lt;p&gt;DevOps 는 기본적으로 배포자동화에 핵심가치를 두고 있으며 배포와 서비스 관리의 처음과 끝이라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;가상화(AWS AMI, Docker 등) 가 인기를 끌면서 마이크로 서비스 아키텍쳐(MSA) 가 대세가 되었는데 수십개의 마이크로 서비스를 관리하려면 자동화가 필요하게 되었다.&lt;/p&gt;

&lt;p&gt;가상화를 이용한 다양한 배포 및 관리툴 들이 많이 생겨났고(ACS, Kubernetes, Ansible, Chef) 이러한 툴들을 이용하여&lt;/p&gt;

&lt;p&gt;수십개의 마이크로 서비스들을 자동으로 배포하고 관리하는 인력들도 필요로 하게 되었다.&lt;/p&gt;

&lt;p&gt;Devops 는 이러한 툴들과 스크립트들을 이용하여 서비스를 배포/관리 하는 역할을 주로 한다.&lt;/p&gt;

&lt;h3 id=&quot;데이터data&quot;&gt;데이터(Data)&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;두개로 나눌껄 너무 길다&lt;/del&gt;&lt;/p&gt;

&lt;h4 id=&quot;데이터-엔지니어data-engineer&quot;&gt;데이터 엔지니어(Data Engineer)&lt;/h4&gt;

&lt;p&gt;데이터 엔지니어는 백엔드 개발자 업무에 데이터 플로우에 대한 파이프라인을 설계하는 업무가 추가 된다고 보면 된다.&lt;/p&gt;

&lt;p&gt;소프트웨어 엔지니어와의 차이는 바라보는 엔드유저가 다르다는 점 이랄까?&lt;/p&gt;

&lt;p&gt;소프트웨어 엔지니어는 사용자와 서비스를 바라보지만 데이터 엔지니어는 개발자와 서비스를 바라본다.&lt;/p&gt;

&lt;p&gt;즉, 소프트웨어 엔지니어는 사용자의 요청에 대한 시스템 아키텍쳐를 관장하지만 데이터 엔지니어는 개발자(또는 다른 데이터 전문가)의 요청에 대한 플로우(예를 들면 API -&amp;gt; Hadoop -&amp;gt; Spark -&amp;gt; Tablaue)만 집중한다.&lt;/p&gt;

&lt;p&gt;위에서 말했다시피 다른 데이터 관련 업무자들의 쿼리를 알고 있어야 하기 때문에 data query/visualization 쪽에도 어느정도 지식이 요구된다.&lt;/p&gt;

&lt;h4 id=&quot;데이터-사이언티스트data-scientist--데이터-분석가data-analyst&quot;&gt;데이터 사이언티스트(Data Scientist) / 데이터 분석가(Data Analyst)&lt;/h4&gt;

&lt;p&gt;두 직군은 사실 좀 애매한데&lt;/p&gt;

&lt;p&gt;업무설명을 읽다보면 왠지 애널리스트가 사이언티스트 보다 좀 더 도메인 놀리지에 집중된 느낌이 강하다.&lt;del&gt;사이언티스트가 진화하면 애널리스트가 된다. 대신 엔지니어 능력을 상당히 상실한다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;둘다 통계학 지식을 기본으로 요구하며, 문제 해결을 위해 통계적 지식이나 머신러닝 등의 데이터를 활용한 인사이트 도출이 핵심 가치라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;쉽게 말해 데이터를 기반으로 BI 를 만들어내는 업무를 한다. 주로 R, Python, SPSS&lt;del&gt;, Excel&lt;/del&gt; 등을 사용한다.&lt;/p&gt;

&lt;p&gt;데이터 엔지니어가 만들어둔 시스템을 활용해서 원하는 데이터들을 직접 가져다 분석하기 때문에&lt;/p&gt;

&lt;p&gt;RDBMS, noSQL, Spark 같은 소스에서 쿼리를 할 수 있는 언어는(SQL, CQL, Scala 등)는 어느정도 알고 있어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;지난 수년간의 어설픈&lt;del&gt;대규모의 서비스를 운영해본 적이 없는&lt;/del&gt; SDE 경력엔 아쉬움이 너무나 크게  남아있다.&lt;/p&gt;

&lt;p&gt;많은 job description 을 읽으며 회사가 요구하는 연차의 실력이 있느냐라고 물으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;그렇다&lt;/code&gt;고 하기 힘들기 때문이다.&lt;/p&gt;

&lt;p&gt;알고리즘에 꽂혀서 탑코더 레드를 찍어본다거나 데이터에 꽂혀서 캐글 상위권에 들어가본다거나 딥러닝에 꽂혀서 이미지넷 같은 경진대회에 나가보거나 하는 경험을 못한 것도 아쉽다.&lt;/p&gt;

&lt;p&gt;왜 무언가 하나에 깊이 몰두하지 못하고 여러가지를 조금씩 깨작대고 있는가? 하는 한심함도 있다.&lt;/p&gt;

&lt;p&gt;이런저런 생각이 들다가도 결국 이것저것 또 공부하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;뭐, 컴퓨터가 제일 재밌으니깐...&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>기억궁전이 동작한다고?</title>
   <link href="http://haandol.github.io/2017/02/06/memory-palace.html"/>
   <updated>2017-02-06T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/02/06/memory-palace</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;기억궁전은 해시테이블이다.&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;영어공부를 할겸 유튜브에서 TED를 틀어 보고 있었다.&lt;/p&gt;

&lt;p&gt;조슈아 포얼의 누구나 할 수 있는 엄청난 기억력&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 을 봤다.&lt;/p&gt;

&lt;p&gt;처음 드는 생각은 당연히 &lt;strong&gt;엥? 저게 된다고?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대체 어떻게 했길래 1년만에 기억력 대회에서 우승을 할 수 있었을까?&lt;/p&gt;

&lt;p&gt;너무 궁금해서 유튜브를 뒤지다보니 조신영 씨의 스타킹 영상을 보게 되었고&lt;/p&gt;

&lt;p&gt;이 사람이 운영하는 채널&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;을 구독하고 모든 동영상을 다 보게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;진짜-된다&quot;&gt;진짜 된다?!&lt;/h2&gt;

&lt;p&gt;기본적인 설명을 듣고나서 연상(지정)기억법을 써서 랜덤한 그림 10장을 외워 봤다.&lt;/p&gt;

&lt;p&gt;그림 또는 사진에 스토리를 부여해서 연결하는 방법인데 &lt;code class=&quot;highlighter-rouge&quot;&gt;어라? 10장 정도는 쉽게 외울 수 있었다.&lt;/code&gt; 심지어 재미있었다.&lt;/p&gt;

&lt;p&gt;하지만 카드는 너무 어려웠고 숫자도 어려웠는데 그 이유를 생각해보니 숫자나 카드를 어떠한 이미지에 매핑하는 연습이 아예 안되어 있어서 어떻게 해야할지 감도 안왔다.&lt;/p&gt;

&lt;p&gt;게다가 동영상 중에 하나는 셔플된 카드 한 덱(52장)을 통째로 2분안에 통째로 외우는게 있었는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;52장을 스토리로 이어서 기억하는 거면 그건 그냥 머리가 좋다고 봐야하지 않나?&lt;/code&gt; 하는 생각이 들어서 물어봤다.&lt;/p&gt;

&lt;p&gt;연상기억법만으로는 불가능해 보여서 동영상에 댓글로 물어봤다. 연상기억법만으로 가능한가요?&lt;/p&gt;

&lt;p&gt;조신영씨는 &lt;code class=&quot;highlighter-rouge&quot;&gt;기억궁전을 씁니다.&lt;/code&gt; 라고 답해주셨다.&lt;/p&gt;

&lt;h2 id=&quot;기억궁전memory-palace&quot;&gt;기억궁전(Memory Palace)&lt;/h2&gt;

&lt;p&gt;이런저런 사이트를 뒤지다 Art of Memory Forum&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 라는 사이트를 찾았다.&lt;/p&gt;

&lt;p&gt;해당 사이트의 위키&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; 에 기억궁전 만들기에 대한 설명이 상세하게 나와있어서 20분 정도 따라서 만들어 봤다.&lt;/p&gt;

&lt;p&gt;기억궁전은 생생하게 떠올릴 수 있는 장소(location)이어야 하고 기억을 저장할 특정한 사물이나 장소(locus)가 있어야 한다.&lt;/p&gt;

&lt;p&gt;내 기억궁전은 구미에 있는 고향집(location)으로 했고 장소(locus)들은 신발장, 냉장고, 피아노 등 내가 기억하고 있는 것 들을 사용했다.&lt;/p&gt;

&lt;p&gt;최종적으로 22개의 장소(locus) 를 만들어놨고 순서도 다 외워놨다. (동선은 쉬웠는데, 장소를 지정하는 것이 좀 오래 걸렸다.)&lt;/p&gt;

&lt;h2 id=&quot;기억궁전을-써보았다&quot;&gt;기억궁전을 써보았다&lt;/h2&gt;

&lt;p&gt;준비가 되었으니 숫자를 외워보았다.&lt;/p&gt;

&lt;p&gt;숫자를 특정 이미지로 매핑하는 과정이 제일 먼저인데, 가장 오래 걸리는 작업이기도 했다.&lt;/p&gt;

&lt;p&gt;0은 계란, 1은 연필, 2는 오리, 3은 뚱뚱한 아저씨 같은 식으로 0-9 까지 매핑했다.&lt;/p&gt;

&lt;p&gt;숫자를 외울땐 2자리씩 끊어서 스토리를 만들어 외운다고 해서 그렇게 했다.&lt;/p&gt;

&lt;p&gt;1320 이라면 13, 20 으로 끊고&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;13: 연필에 엉덩이가 찔린 뚱뚱한 아저씨&lt;/li&gt;
  &lt;li&gt;20: 미친듯이 빠르게 달려가는 오리를 추격하는 달리는 계란&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 식으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;짧고 강렬한 스토리&lt;/code&gt;를 만든다.&lt;/p&gt;

&lt;p&gt;그리고 해당 스토리를 기억궁전의 위치에 순서대로 하나씩 배치한다.&lt;/p&gt;

&lt;p&gt;처음엔 어려웠는데 랜덤한 4자리 숫자를 몇 번 하다보니 익숙해지는게 느껴졌다. &lt;del&gt;물론 내가 뭐하는 짓인가 하는 생각도 들었다&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;서너번 하다보니 소소한 노하우도 생겼다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;장소에 대한 특징을 반드시 포함해서 스토리를 배치한 뒤 기억할 것&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 나오는 숫자가 먼저 보이게 스토리를 짤 것&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;효과가-있다&quot;&gt;효과가 있다&lt;/h2&gt;

&lt;p&gt;4자리 숫자로 몇번 해보고 익숙해진 뒤 &lt;code class=&quot;highlighter-rouge&quot;&gt;10자리를 해봤다. 어라?! 잘 되었다.&lt;/code&gt;  &lt;del&gt;당연하게도&lt;/del&gt; 앞으로든 뒤로든 상관없이 숫자를 외울 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;20자리까지도 잘 되었다.&lt;/code&gt; 숫자의 자릿수는 시간과의 싸움일 뿐이지 (강렬한 스토리를 만드는 시간) 크게 문제가 되지는 않을 것 같았다.&lt;/p&gt;

&lt;p&gt;이론적으로는 내 기억궁전에 22개의 장소가 있으니깐 44자리 숫자까지는 어렵지 않게 외울 수 있을 것 같았다. &lt;del&gt;물론 44개 숫자를 바로 외울 수 있다면 그게 훨씬 편하다&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;기억궁전은 &lt;code class=&quot;highlighter-rouge&quot;&gt;더블 링크드 리스트(이미지)&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;버킷(장소)&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;해싱(Hashing)&lt;/code&gt;하는 일종의 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시테이블(Hash Table)&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;컴퓨터에서 해싱은 버킷 충돌이 일어나면 오픈/클로즈 어드레스 기법을 통해 해결할 수 있지만 기억궁전은 충돌이 일어나면 해결이 &lt;del&gt;거의&lt;/del&gt; 불가능 하다.&lt;/p&gt;

&lt;p&gt;따라서 각 기억궁전의 사용자는 많은 버킷(장소)을 가지고 있을 수록 유리하고, 해시함수가 빠르게 동작(스토리)하고 쉬운 알고리즘(강렬함)을 쓸 수록 유리하다.&lt;/p&gt;

&lt;p&gt;상상력과 관찰력을 키우면 성능이 올라가는 해시테이블이랄까?&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.ted.com/talks/joshua_foer_feats_of_memory_anyone_can_do?language=ko&quot;&gt;조슈아 포얼의 TED 영상&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCn2eJZxj1cU5gTljQ_s1T1g&quot;&gt;조신영씨 채널 &lt;del&gt;둘다 조씨네?!&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://mt.artofmemory.com/&quot;&gt;Art of Memory Forum&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://mt.artofmemory.com/wiki/Memory_Palace&quot;&gt;Memory_Palace&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>앙상블(ensemble)기법 설명</title>
   <link href="http://haandol.github.io/2017/02/06/ensemble-bagging-boosting.html"/>
   <updated>2017-02-06T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/02/06/ensemble-bagging-boosting</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;앙상블이란 여러개의 weak learners&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 를 이용해 최적의 답을 찾아내는 기법이다.&lt;/p&gt;

&lt;p&gt;배깅(Bootstrap AGGregatING, Bagging) 이란 테스트 데이터 샘플링(Bootstrap) 통해 여러개의 테스트 데이터를 만들고, 각 테스트 데이터를 이용해 여러개의 weak learner 를 만든다. 최종적으로 각 learner 의 예측결과를 평균내서 종합(aggregate)한다.&lt;/p&gt;

&lt;p&gt;부스팅이란(Boosting) 이란 부스트래핑된 테스트 데이터로 여러개의 weak learner 들을 순차적으로(iterative) 만드는데, i번째 learner 는 i-1 번째 learner 가 잘못 예측한 데이터에 가중치를 좀 더 주어서(boosting) 학습한다. 최종적으로 마지막에 생성된 learner 를 이용하여 예측한다.&lt;/p&gt;

&lt;h2 id=&quot;시작하며&quot;&gt;시작하며&lt;/h2&gt;

&lt;p&gt;머신러닝을 안다룬지도 좀 되었고 해서 kaggle 문제 중 쉬운 것들을 풀면서 다시 감을 잡아볼까 했다.&lt;/p&gt;

&lt;p&gt;kaggle 문제풀이에 대해서 정보를 수집하던 중,&lt;/p&gt;

&lt;p&gt;예전에는 묻지마 모델로 Random Forest 를 썼었는데 요즘에는 XGBoost 를 쓴다고 하더라&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;XGBoost와 Random Forest 를 찾아봤더니 앙상블 기법을 쓴다고 한다.&lt;/p&gt;

&lt;p&gt;앙상블 기법을 찾아보니 배깅, 부스팅의 두가지 방법을 대표적인 예로 들고 있었다. &lt;del&gt;사실 xgboost 와 random forest 는 두가지와 좀 다르다&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;대체 배깅과 부스팅은 무엇인가?&lt;/p&gt;

&lt;h2 id=&quot;개념-설명엔-유튜브가-최고인듯&quot;&gt;개념 설명엔 유튜브가 최고인듯&lt;/h2&gt;

&lt;p&gt;이런 문제가 생길 때마다(처음 접하는 개념) 많은 블로그 글과 quora 와 기타 등등을 찾아보지만, 결국 맘에 드는 정보는 Youtube 에 있더라.&lt;/p&gt;

&lt;p&gt;유튜브에서 좋은 영상을 찾았는데, 알고보니 Udacity 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;트레이딩 시스템을 위한 머신러닝 코스중 한 강좌&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;였다.&lt;/p&gt;

&lt;p&gt;영상을 캡쳐하면서 한글로 설명한 포스팅도 봤는데, 그냥 영상을 보면 바로 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;이 글에서도 그냥 영상만 소개하고 넘어가겠다.&lt;/p&gt;

&lt;h3 id=&quot;배깅bagging&quot;&gt;배깅(Bagging)&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2Mg8QD0F1dQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;부스팅boosting&quot;&gt;부스팅(Boosting)&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GM3CDQfQ4sw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;사실 learner 를 만드는건 라이브러리를 가져다 쓰면 되기 때문에 모델을 몰라도 된다.&lt;/p&gt;

&lt;p&gt;하지만 기본 파라미터를 사용한 learner 의 성능이 잘 나올리가 없다. 어느정도 성능을 내려면 파라미터를 튜닝이 필수다.&lt;/p&gt;

&lt;p&gt;이 때, 어떤 파라미터를 어떻게 수정할지 결정해야 하는데, 그러려면 모델의 동작방식과 파라미터의 의미 정도는 알아야 한다.&lt;/p&gt;

&lt;p&gt;그럼 모델의 어느정도까지 알아야 하는가?&lt;/p&gt;

&lt;p&gt;내 목표는 &lt;code class=&quot;highlighter-rouge&quot;&gt;라이브러리에서 제공하는 파라미터의 튜닝이 가능한 수준&lt;/code&gt;까지 이며 이 경우 모델을 구성하는 수식을 다 이해하는 것은 낭비라고 생각한다.&lt;del&gt;물론 꼭 이해해야하는 수식도 있지만&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;요즘 라이브러리들은 파라미터와 모델과의 관계만 알아도, 미적분 문제도 못푸는 사람이 &lt;del&gt;내가&lt;/del&gt; 튜닝을 할 수 있게 잘 만들어져있기 때문이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Learner 란 특정한 데이터를 이용해 인스턴스화 한 모델을 말한다. Weak learner 는 최종적인 결과물보다 상대적으로 정확하지 않은 결과를 보이는 learner 이다. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://freesearch.pe.kr/archives/4349&quot;&gt;모델링 그리고 부스팅&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://classroom.udacity.com/courses/ud501/lessons/4802710867/concepts/49631985600923&quot;&gt;Ensemble Overview&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>밸브(Valve) 탈락 메일을 받았다.</title>
   <link href="http://haandol.github.io/2017/01/28/valve-reply.html"/>
   <updated>2017-01-28T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/01/28/valve-reply</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;탈락메일도 브랜딩이다.&lt;/p&gt;

&lt;p&gt;진짜 브랜딩은 사소한 경험에서 나온다.&lt;/p&gt;

&lt;h3 id=&quot;밸브지원&quot;&gt;밸브지원&lt;/h3&gt;

&lt;p&gt;지지난주에 밸브 핸드북&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 이야기를 하다가 문득 이력서를 넣어봤는데 서류에서 떨어졌다.&lt;/p&gt;

&lt;p&gt;Senior 포지션은 최소 10년 이상의 경력을 가진 탑 클래스의 인재를 원한다는 것이었다.&lt;/p&gt;

&lt;p&gt;하지만 탈락메일을 받고 나서 밸브가 더 좋아졌다.&lt;/p&gt;

&lt;h3 id=&quot;탈락메일&quot;&gt;탈락메일&lt;/h3&gt;

&lt;p&gt;‘10년 차이상만 지원 가능합니다. 죄송합니다.’ 하는 내용의 템플릿 메일을 보내도 되었을텐데 그러지 않았다.&lt;/p&gt;

&lt;p&gt;11줄 짜리 짧은 메일에&lt;/p&gt;

&lt;p&gt;미안하다는 내용은 한마디도 없었다. 대신 칭찬과 격려가 담겨있었다.&lt;/p&gt;

&lt;p&gt;짧은 메일의 끝은&lt;/p&gt;

&lt;p&gt;‘당신의 열정을 따라, 가진 기술을 갈고 닦으십시오. 기술이 얼마나 늘었는지, 어떤 새 기술을 습득했는지 계속 알려주셨으면 합니다. 계속 연락주세요.’&lt;/p&gt;

&lt;p&gt;로 마무리 지어져 있었다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;브랜딩은 소소한 경험에서 나오는 것 같다. 그리고 그 소소한 경험들은 갑작스럽게 줄 수는 없는 것들이고 준비된 상태에서 자연스럽게 드러나게 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;나라는 사람은 어떠한 경험을 주변에 주고 있는가?&lt;/code&gt; 생각해보게 되는 사건이었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://playwares.com/gametalk/24915755&quot;&gt;플레이웨어즈 핸드북 번역 포스팅&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>거의 정렬된 경우 가장 빠른 알고리즘은?</title>
   <link href="http://haandol.github.io/2017/01/17/fastest-sort-algorithm-when-nearly-sorted.html"/>
   <updated>2017-01-17T00:00:00+00:00</updated>
   <id>http://haandol.github.io/2017/01/17/fastest-sort-algorithm-when-nearly-sorted</id>
   <content type="html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;거의 정렬된 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Insertion&lt;/code&gt; 정렬이 가장 빠르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bubble&lt;/code&gt;이 그 다음이다.&lt;/p&gt;

&lt;p&gt;둘다 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;시작하며&quot;&gt;시작하며&lt;/