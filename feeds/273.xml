<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>개발 블로그</title>
  
  <subtitle>Blah Blah</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://henotia.github.io/"/>
  <updated>2018-01-31T04:12:18.460Z</updated>
  <id>http://henotia.github.io/</id>
  
  <author>
    <name>Henotia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cordova Plugin 만들기 #2</title>
    <link href="http://henotia.github.io/MakeCordovaPlugin-2/"/>
    <id>http://henotia.github.io/MakeCordovaPlugin-2/</id>
    <published>2018-01-31T02:07:05.000Z</published>
    <updated>2018-01-31T04:12:18.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>본 post에서는 Cordova Plugin 작성에 대해 설명합니다</strong><br><strong>본 post의 내용은 <a href="/MakeCordovaPlugin-1">Cordova Plugin 만들기 #1</a>에서 이어집니다</strong></p></blockquote><hr><h2 id="Plugin-Structure"><a href="#Plugin-Structure" class="headerlink" title="Plugin Structure"></a>Plugin Structure</h2><p>Cordova Plugin을 이루고 있는 골자는 크게 다음과 같다.</p><ol><li>사용하고자 하는 Native 기능이 담긴 <code>Native Interface</code></li><li><code>cordova.exec</code>를 통해 Native platform과 통신하는 <code>Javascript Interface</code></li><li>플러그인의 명세가 담긴 <code>config</code>파일</li></ol><p><img src="0.zdjr5962sa.png" alt="0.zdjr5962sa"></p><p>이후 위의 내용을 바탕으로 사용자에게 텍스트를 입력받아 그대로 출력하는 <code>Echo</code> 플러그인을 작성해본다.</p><h2 id="Native-Interface"><a href="#Native-Interface" class="headerlink" title="Native Interface"></a>Native Interface</h2><p>Cordova Project에서 사용하는 Native 기능을 작성한다.</p><p>본 파일은 CordovaPlugin을 extend하는 자바 클래스로서, CordovaPlugin으로부터 메소드를 Override 받아 필요한 기능을 작성한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.cordova.CordovaPlugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myPlugin</span> <span class="keyword">extends</span> <span class="title">CordovaPlugin</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="생명주기"><a href="#생명주기" class="headerlink" title="생명주기"></a>생명주기</h3><p><code>myPlugin</code> 플러그인 객체는 Cordova Webview의 수명을 따른다.<br>기본적으로 플러그인 객체는 JavaScript의 호출 시점에 인스턴스화 되며, <code>plugin.xml</code>에서 별도의 옵션을 주면 시작과 동시에 인스턴스화 시킬 수 있다.</p><h3 id="플러그인-작성"><a href="#플러그인-작성" class="headerlink" title="플러그인 작성"></a>플러그인 작성</h3><p><code>JavaScript Interface</code>에서 플러그인 호출이 일어나면 <code>Native Interface</code>의 <code>execute</code> 메소드로 전달이 된다.<br>execute 메소드는 CordovaPlugin에서 Override를 받아 작성하며, 다음과 같이 작성할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.myplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CallbackContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.cordova.CordovaPlugin;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myPlugin</span> <span class="keyword">extends</span> <span class="title">CordovaPlugin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String action, JSONArray args, CallbackContext callbackContext)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// plugin.xml에 맵핑되어있는 action과 JavaScript Interface에서 전달받는 action이 동일할 때 수행한다</span></span><br><span class="line">    <span class="keyword">if</span> (action.equals(<span class="string">"echo"</span>)) &#123;</span><br><span class="line">      <span class="comment">// JavaScript Interface에서 전달받은 매개변수를 받아 저장한다</span></span><br><span class="line">      String message = args.getString(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// JavaScript Interface로 보낼 Callback 함수</span></span><br><span class="line">      <span class="keyword">if</span> (message != <span class="keyword">null</span> &amp;&amp; message.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        callbackContext.success(message);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callbackContext.error(<span class="string">"Echo Fail"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>플러그인 코드 작성이 끝났으면 이를 <code>plugin.xml</code>에 <code>Native Interface</code>에 대한 명세를 작성한다</p><h2 id="Plugin-명세-작성"><a href="#Plugin-명세-작성" class="headerlink" title="Plugin 명세 작성"></a>Plugin 명세 작성</h2><p>Plugin에 대한 명세는 Plugin 폴더 상단에 위치한 <code>plugin.xml</code>(파일 명이 다를 수 있음)에 작성한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">id</span>=<span class="string">"com.test.myplugin"</span> <span class="attr">version</span>=<span class="string">"0.0.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://apache.org/cordova/ns/plugins/1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>myPlugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- src에는 JavaScript Interface 파일이 위치한 곳을 기입한다 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">js-module</span> <span class="attr">name</span>=<span class="string">"myPlugin"</span> <span class="attr">src</span>=<span class="string">"www/myPlugin.js"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- clobbers에 target으로 작성된 부분이 추후 JavaScript로 호출시 사용된다 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- target은 window에 객체로 등록되며, 아래의 경우는 window.cordova.plugins.myPlugin으로 호출 할 수 있다--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clobbers</span> <span class="attr">target</span>=<span class="string">"cordova.plugins.myPlugin"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">js-module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- platform 별 명세를 작성한다 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">platform</span> <span class="attr">name</span>=<span class="string">"android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">parent</span>=<span class="string">"/*"</span> <span class="attr">target</span>=<span class="string">"res/xml/config.xml"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">"myPlugin"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- value에는 작성한 플러그인이 위치할 곳의 package와 class명을 적어준다 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"android-package"</span> <span class="attr">value</span>=<span class="string">"com.test.myplugin.myPlugin"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config-file</span> <span class="attr">parent</span>=<span class="string">"/*"</span> <span class="attr">target</span>=<span class="string">"AndroidManifest.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">config-file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- source-file의 src에 위치한 파일을 build시 target-dir의 위치에 저장한다 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source-file</span> <span class="attr">src</span>=<span class="string">"src/android/myPlugin.java"</span> <span class="attr">target-dir</span>=<span class="string">"src/com/test/myplugin"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>명세를 작성한 다음에는 <code>JavaScript Interface</code>를 수정해</p><h2 id="JavaScript-Interface"><a href="#JavaScript-Interface" class="headerlink" title="JavaScript Interface"></a>JavaScript Interface</h2><p>JavaScript로 Native Interface를 호출 할 수 있도록 JavaScript Interface를 수정해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'cordova/exec'</span>);</span><br><span class="line"></span><br><span class="line">exports.echo = <span class="function"><span class="keyword">function</span>(<span class="params">args, success, error</span>) </span>&#123;</span><br><span class="line">    exec(success, error, <span class="string">"myPlugin"</span>, <span class="string">"echo"</span>, [args]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exec</code>는 platform 추가시 <code>platform_www/cordova.js</code>에 위치한다.<br>JavaScript Interface를 좀 더 전문적으로 사용하기 위해서는 확인이 필요하지만 본 포스트에서는 넘어가도록 한다.</p><p><code>exports.echo</code> 를 통해 등록한 함수를 JavaScript로 호출할 수 있다.<br>함수 내부의 exec는 총 다섯가지의 매개변수를 갖는다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Arguments, SuccessCallback, ErrorCallback</span>) </span>&#123;</span><br><span class="line">  exec(SuccessCallback, ErrorCallback, <span class="string">"FeatureName"</span>, <span class="string">"ActionName"</span>, [Arguments])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SuccessCallback: <code>Native Interface</code>에서 <code>callbackContext.success</code>를 통해 전달받는 콜백함수</li><li>ErrorCallback: <code>Native Interface</code>에서 <code>callbackContext.error</code>를 통해 전달받는 콜백함수</li><li>“FeatureName”: <code>config</code>파일 내에 <code>&lt;feature name=&quot;&quot; &gt;</code>에서 사용되는 name을 기입한다</li><li>“ActionName”: <code>Native Interface</code>에서 <code>execute</code>메소드에서 전달받아 사용할 Action 명을 기입한다</li><li>[Arguments]: <code>Native Interface</code>로 보낼 매개변수 (반드시 배열로 보내야 함)</li></ul><p>위의 매개변수를 바탕으로 <code>JavaScript Interface</code>에서 <code>Native Interface</code>로 매개변수와 호출할 함수를 전달한다.</p><h2 id="package-json-작성"><a href="#package-json-작성" class="headerlink" title="package.json 작성"></a>package.json 작성</h2><p>플러그인 작성이 끝났으면 plugin에서 사용할 package.json을 작성해 주어야 한다<br>이전 포스트에서 사용했던 <code>plugman</code> 모듈을 사용해 package.json을 작성해 줄 수 있다.</p><p><code>myPlugin</code> 디렉토리에서 아래와 같은 명령어를 사용한다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ plugman createpackagejson . <span class="comment"># .을 반드시 써주어야 한다</span></span><br></pre></td></tr></table></figure><p>이후 나오는 내용을 본인에게 맞게 수정해주면 된다.</p><p><img src="0.wxaoyebsm3c.png" alt="0.wxaoyebsm3c"><br>예시에서는 별다른 수정없이 엔터만을 쳐서 넘겼다.</p><h2 id="플러그인-설치"><a href="#플러그인-설치" class="headerlink" title="플러그인 설치"></a>플러그인 설치</h2><p>위의 내용을 잘 따라왔다면 프로젝트 디렉토리는 다음과 같을 것이다.</p><p><img src="0.i8yaeifavc9.png" alt="0.i8yaeifavc9"></p><p>이후 Android Platform을 설치해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova platform add android</span><br></pre></td></tr></table></figure><p>platform이 추가되었으면 다음의 명령어를 통해 <code>myPlugin</code>을 설치해준다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova plugin add myPlugin --link</span><br></pre></td></tr></table></figure><p>명령어 실행 후 <code>plugins</code>디렉토리 아래에 <code>com.test.myplugin</code>으로 디렉토리가 하나 생기고 그 안에 우리가 작성한 <code>myPlugin</code>의 내용이 담겨있다<br><code>plugin.xml</code>의 <code>&lt;plugin id=&quot;&quot;&gt;</code>의 값이 디렉토리의 이름으로 지정이 된다.<br>따라서 이름을 바꾸고 싶으면 위의 부분을 바꾸어 주면 된다.</p><p><img src="0.5tqssi4ezat.png" alt="0.5tqssi4ezat"></p><p>마찬가지로 아래의 사진에서 <code>plugin.xml</code>의 <code>&lt;source-file src=&quot;&quot; target-dir=&quot;&quot;&gt;</code>에서 target-dir의 값이 platform 내에 들어간 것을 확인 할 수 있다<br><img src="0.6enw08uhwaj.png" alt="0.6enw08uhwaj"></p><h2 id="플러그인-실행"><a href="#플러그인-실행" class="headerlink" title="플러그인 실행"></a>플러그인 실행</h2><p>플러그인 설치까지 완료 되었으면, 실제 Cordova App에서 플러그인이 정상적으로 작동하는지 테스트 해보자</p><h3 id="플러그인-호출-코드-작성"><a href="#플러그인-호출-코드-작성" class="headerlink" title="플러그인 호출 코드 작성"></a>플러그인 호출 코드 작성</h3><p>프로젝트 루트 내에 있는 <code>www/</code>아래의 <code>index.html</code>을 다음과 같이 수정해준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Apache Cordova<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"deviceready"</span> <span class="attr">class</span>=<span class="string">"blink"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"event listening"</span>&gt;</span>Connecting to Device<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"event received"</span>&gt;</span>Device is Ready<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"echo"</span> <span class="attr">placeholder</span>=<span class="string">"Echo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>전송<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">~~~</span><br></pre></td></tr></table></figure><p>이어서 <code>www/</code>아래의 <code>js/index.js</code>에 아래의 내용을 추가해준다<br><code>button#send</code>를 클릭하면 input의 값을 plugin으로 보내고, callback받은 값을 alert으로 띄우는 코드이다<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">app.initialize();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'send'</span>).addEventListener(<span class="string">'click'</span>, sendInput);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'echo'</span>).value,</span><br><span class="line">        success = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; alert(v); &#125;,</span><br><span class="line">        error = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; alert(v); &#125;;</span><br><span class="line"></span><br><span class="line">    cordova.plugins.myPlugin.echo(input, success, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h3><p>작성이 모두 끝났으면 device를 pc에 연결하고 cordova project를 실행한다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova run android</span><br></pre></td></tr></table></figure><p>정상적으로 실행이 되면 기기에서 수정된 html을 확인 할 수 있다<br><img src="0.upajtrhcqp.png" width="300"></p><p>Input창에 임의의 텍스르를 입력하고 전송을 누르면 Native Interface를 거쳐 callback으로 받아와 화면에 보여준다<br><img src="0.c0rkuz5eovu.png" width="300"></p><p>정상적으로 플러그인이 연결된 것을 확인 할 수 있다.</p><hr><h2 id="플러그인-삭제"><a href="#플러그인-삭제" class="headerlink" title="플러그인 삭제"></a>플러그인 삭제</h2><blockquote><p>본 섹션에서 설명하는 내용은 여지껏 작업한 <code>myPlugin</code> 프로젝트를 바탕으로 설명합니다</p></blockquote><p>플러그인 개발을 하다보면 설치, 수정, 삭제 등 다양한 시도를 해보게 된다.<br>하지만 설치된 플러그인을 제대로 지우지 않는 경우 복잡하게 꼬여 문제가 될 수 있다.<br>이 번외 섹션에서는 플러그인을 삭제할 경우 어느부분을 어떻게 지워야 하는지에 대해 설명한다.</p><h3 id="Cordova-명령어-사용"><a href="#Cordova-명령어-사용" class="headerlink" title="Cordova 명령어 사용"></a>Cordova 명령어 사용</h3><p>Cordova-CLI에서는 plugin을 지우는 <code>cordova plugin rm &lt;plugin_id&gt;</code> 명령어를 제공한다.<br>해당 명령어로 플러그인을 지우기 위해서는 우선 플러그인의 ID가 필요하다.<br>플러그인의 ID는 <code>cordova plugin ls</code>로 확인이 가능하다.</p><p><img src="0.ery5nr8fyrm.png" alt="0.ery5nr8fyrm"></p><p>위의 내용을 바탕으로 <code>com.test.myplugin</code> 플러그인을 지우면 다음과 같은 문제가 생긴다</p><p><img src="0.t0xml3cttyj.png" alt="0.t0xml3cttyj"></p><p><code>com.test.myplugin</code>의 <code>myPlugin</code>버전을 찾을수 없다는 내용인데 package.json을 확인해보면<br><img src="0.zfp86y9rfbf.png" alt="0.zfp86y9rfbf"></p><p><code>com.test.myplugin</code>의 버전이 <code>myPlugin</code>의 형태로 되어있는 것을 확인할 수 있다.<br>위의 명령어 실행이후로, 추가적인 삭제가 필요한 부분을 하나씩 찾아나가자</p><h3 id="프로젝트-내부"><a href="#프로젝트-내부" class="headerlink" title="프로젝트 내부"></a>프로젝트 내부</h3><p>프로젝트 내부에서 설치된 플러그인은 아래의 위치에 각각 저장이 된다</p><ul><li>node_module<br><img src="0.p9qaih3axc.png" alt="0.p9qaih3axc"></li><li>plugins/fetch.json<br><img src="0.fhptplthk28.png" alt="0.fhptplthk28"></li><li>config.xml<br><img src="0.ii7j6ka82l.png" alt="0.ii7j6ka82l"></li><li>package.json<br><img src="0.yctaadvv1l.png" alt="0.yctaadvv1l"></li></ul><p>위의 내용들을 전부 지워주면 된다.</p><ul><li>node_module<br>단순히 삭제만 해주면 된다</li><li><p>plugins/fetch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>config.xml<br><code>&lt;plugin name=&quot;com.test.myplugin&quot; spec=&quot;myPlugin&quot; /&gt;</code>을 지워준다</p></li><li>package.json<br>cordova-plugins와 dependencies에 작성된 부분을 지워준다</li></ul><h3 id="프로젝트-외부"><a href="#프로젝트-외부" class="headerlink" title="프로젝트 외부"></a>프로젝트 외부</h3><p><code>cordova plugin add --link</code>를 통해 설치한 플러그인은 npm 전역에도 설치가 된다</p><p>윈도우 기준으로<br><code>%appdata%/npm/node_modules</code>로 들어가서<br><img src="0.c8p1gwvmmxw.png" alt="0.c8p1gwvmmxw"><br>본인이 설치한 플러그인에 해당 되는 부분을 삭제해준다.</p><hr><p>Cordova Plugin 만드는 기본적인 방법에 대해 설명했다.</p><p>본 포스트에서는 수정을 최소화 하고 동작에 중점을 두고 작업했기에 이름이나 ID 등이 마음에 들지 않을 수 있다.</p><p>그 부분을 수정하고 적용해 보는건 본인의 몫으로 남긴다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;본 post에서는 Cordova Plugin 작성에 대해 설명합니다&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;본 post의 내용은 &lt;a href=&quot;/MakeCordovaPlugin-1&quot;&gt;Cordova Plugin 
      
    
    </summary>
    
      <category term="Ionic" scheme="http://henotia.github.io/categories/Ionic/"/>
    
    
      <category term="Cordova" scheme="http://henotia.github.io/tags/Cordova/"/>
    
      <category term="Android" scheme="http://henotia.github.io/tags/Android/"/>
    
      <category term="Plugin" scheme="http://henotia.github.io/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>Cordova Plugin 만들기 #1</title>
    <link href="http://henotia.github.io/MakeCordovaPlugin-1/"/>
    <id>http://henotia.github.io/MakeCordovaPlugin-1/</id>
    <published>2018-01-25T02:32:05.000Z</published>
    <updated>2018-01-31T02:09:30.452Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>본 post에서는 Cordova Plugin 작성에 필요한 사전 준비 작업에 대해 설명합니다</strong></p></blockquote><hr><h2 id="Cordova-Plugin-개발시의-필요사항"><a href="#Cordova-Plugin-개발시의-필요사항" class="headerlink" title="Cordova Plugin 개발시의 필요사항"></a>Cordova Plugin 개발시의 필요사항</h2><p>Cordova plugin 개발을 위해서는 Cordova에서 제공하는 Plugman 모듈이 필요하다.<br><figure class="highlight bash"><figcaption><span>cordova plugman 설치</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g plugman <span class="comment"># 현재 plugman의 버전은 2.0.0이다.</span></span><br></pre></td></tr></table></figure></p><p>Cordova plugin 테스트는 실제 Cordova Project 내에서 테스트를 해야 하므로, Cordova Project를 만들 수 있는 모듈도 필요로 한다.(<code>Ionic</code> or <code>Cordova</code>)</p><p>본 포스트 내에서는 Android Platform에서 사용하는 Native Plugin을 작성한다.<br>따라서 Android Platform을 설치하기 위한 <code>Android SDK</code>가 필요하다.</p><p>최소한의 개발 요건은 위와 같으며, 모든 설치가 완료되었다는 전제하에 진행한다.</p><h2 id="Cordova-Plugin-개발환경-세팅"><a href="#Cordova-Plugin-개발환경-세팅" class="headerlink" title="Cordova Plugin 개발환경 세팅"></a>Cordova Plugin 개발환경 세팅</h2><p>Cordova Plugin 개발 및 디버깅, IDE의 도움 등을 받기 위해서 Android Studio 내에서 작업을 한다.</p><h3 id="Cordova-Project-생성"><a href="#Cordova-Project-생성" class="headerlink" title="Cordova Project 생성"></a>Cordova Project 생성</h3><p>우선, 만들 Plugin을 설치하고 테스트할 Cordova Project를 생성한다<br>본 포스트에서는 Cordova Project를 사용한다<br>Cordova를 사용해 만들지 않고 Ionic을 사용해 만들어도 무방하다</p><figure class="highlight bash"><figcaption><span>'pluginTestApp' Project 생성</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova create pluginTestApp com.test.plugin PTA</span><br></pre></td></tr></table></figure><p>Ionic 사용시 위의 아래의 명령어로 project를 만든다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic start pluginTestApp blank</span><br></pre></td></tr></table></figure></p><p>프로젝트가 성공적으로 만들어졌으면 해당 디렉토리로 이동한다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> pluginTestApp</span><br></pre></td></tr></table></figure><h3 id="Plugman을-사용한-Cordova-Plugin-template-생성"><a href="#Plugman을-사용한-Cordova-Plugin-template-생성" class="headerlink" title="Plugman을 사용한 Cordova Plugin template 생성"></a>Plugman을 사용한 Cordova Plugin template 생성</h3><p>Cordova Project에서 plugman을 사용해 기본 plugin template을 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ plugman create --name myPlugin --plugin_id com.test.myplugin --plugin_version <span class="string">"0.0.1"</span></span><br></pre></td></tr></table></figure><p>위 명령어 실행 후 프로젝트에 <code>myPlugin</code>으로 새로운 디렉토리가 생긴것을 확인 할 수 있다.</p><p>계속해서 생성된 플러그인 디렉토리 내에서 작업한다<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myPlugin</span><br></pre></td></tr></table></figure></p><p>이후 아래의 명령어를 사용해 실제 Android Native용 Plugin template을 만든다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ plugman platform add --platform_name android</span><br></pre></td></tr></table></figure></p><p>위의 명령어가 성공적으로 수행하면 <code>~~/myPlugin/src</code> 디렉토리 아래에 <code>android/myPlugin.java</code> 파일이 만들어진다</p><h3 id="Android-Studio에서의-개발환경-설정"><a href="#Android-Studio에서의-개발환경-설정" class="headerlink" title="Android Studio에서의 개발환경 설정"></a>Android Studio에서의 개발환경 설정</h3><h4 id="Cordova-프로젝트-열기"><a href="#Cordova-프로젝트-열기" class="headerlink" title="Cordova 프로젝트 열기"></a>Cordova 프로젝트 열기</h4><p>Plugin Template까지 제대로 작성이 됐다면, 플러그인을 작성할 일차적인 준비가 완료된 상태이다.<br>이후 Cordova Project를 Android Studio로 열어 개발 환경을 구성한다.</p><p><img src="0.f7duswk3v2m.png" alt="0.f7duswk3v2m"></p><p>프로젝트가 정상적으로 열렸다면 좌측 Project View의 <code>Android</code>탭을 <code>Project</code>로 변경해준다.<br><img src="0.8axcs2jy8jx.png" alt="0.8axcs2jy8jx"></p><p>이후 프로젝트의 구조가 정상적으로 보인다.</p><p>플러그인을 작성하기 위해 <code>myPlugin/src/android/myPlugin.java</code>를 열어보면 <code>Project SDK is not defined</code>라는 문구를 확인 할 수 있다.<br><img src="0.vs94onfmno.png" alt="0.vs94onfmno"></p><h4 id="Java-SDK-Android-SDK-적용"><a href="#Java-SDK-Android-SDK-적용" class="headerlink" title="Java SDK, Android SDK 적용"></a>Java SDK, Android SDK 적용</h4><p>메뉴의 <code>File</code> -&gt; <code>Project Structure</code>를 선택해 프로젝트 구조 관리 창을 열고 <code>Project Settings</code>의 <code>Project</code> 탭을 선택한다</p><p><img src="0.boxmdxsmx7.png" alt="0.boxmdxsmx7"></p><p><code>Project SDK</code>에는 Android SDK를<br><code>Project Language level</code>에는 Java Version에 맞춰 설정해준다.</p><p><img src="0.iho0duybkh.png" alt="0.iho0duybkh"></p><p>이후 다시 <code>myPlugin.java</code> 파일을 열면 SDK 설정에 대한 문구는 나오지 않는다.</p><h4 id="CordovaLib-적용"><a href="#CordovaLib-적용" class="headerlink" title="CordovaLib 적용"></a>CordovaLib 적용</h4><p><em>챕터 진행 전 <a href="/IonicEmbedded-1/CordovaLib-6.4.0.jar">CordovaLib-6.4.0.jar</a> 파일을 다운로드 받는다</em></p><p>프로젝트 루트 디렉토리에 <code>libs</code>로 디렉토리를 하나 만든다.<br>그리고 다운로드 받은 <code>CordovaLib-6.4.0.jar</code> 파일을 디렉토리 안에 넣는다<br><img src="0.qy7h8a35sie.png" alt="0.qy7h8a35sie"></p><p>이후 다시 메뉴의 <code>File</code> -&gt; <code>Project Structure</code>를 선택해 프로젝트 구조 관리 창을 열고 <code>Modules</code> 탭을 선택한다.<br><img src="0.lq4w1uxokak.png" alt="0.lq4w1uxokak"></p><p>이후 우측의 녹색 십자 버튼을 누르고, <code>1 JARs or directories...</code>를 누르고 <code>libs</code> 디렉토리에 넣은 <code>CordovaLib-6.4.0.jar</code>를 찾아 선택한다.</p><p><img src="0.tmskfynrpm.png" alt="0.tmskfynrpm"></p><p><img src="0.nqusor00k2.png" alt="0.nqusor00k2"><br>정상적으로 파일이 등록되었으면 <code>OK</code>를 눌러 창을 닫는다.</p><p>이후 <code>myPlugin/src/android/</code> 를 오른쪽 클릭해 <code>Mark Directory as -&gt; Sources Root</code>를 선택한다<br><img src="0.apr51y8s4yk.png" alt="0.apr51y8s4yk"></p><p>Sources Root로 잡히게 되면 IDE가 인식해, 파일의 아이콘이 바뀌며 Java 코딩이 가능해진다<br><img src="0.hbfndzyucwg.png" alt="0.hbfndzyucwg"></p><hr><p>위의 과정을 끝으로 Android Studio에서 Cordova Plugin 개발에 대한 기본적인 환경설정이 모두 끝났다.<br>각 파일에 대한 디테일한 설명은 다음 포스트에서 계속 진행하도록 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;본 post에서는 Cordova Plugin 작성에 필요한 사전 준비 작업에 대해 설명합니다&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Cordova-Plugin-개발시의-필요사항
      
    
    </summary>
    
      <category term="Ionic" scheme="http://henotia.github.io/categories/Ionic/"/>
    
    
      <category term="Cordova" scheme="http://henotia.github.io/tags/Cordova/"/>
    
      <category term="Android" scheme="http://henotia.github.io/tags/Android/"/>
    
      <category term="Plugin" scheme="http://henotia.github.io/tags/Plugin/"/>
    
  </entry>
  
  <entry>
    <title>Ionic Project를 Android Native 내에 Embedded 시키는 방법 #3</title>
    <link href="http://henotia.github.io/IonicEmbedded-3/"/>
    <id>http://henotia.github.io/IonicEmbedded-3/</id>
    <published>2018-01-12T07:37:08.000Z</published>
    <updated>2018-01-12T08:06:25.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>본 post에서는 Ionic 프로젝트를 Android Fragment를 통해 실행하는 방법에 대해 설명합니다</strong><br><strong>본 post의 내용은 <a href="/IonicEmbedded-1">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #1</a>과 <a href="/IonicEmbedded-2">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #2</a>에서 이어집니다</strong></p></blockquote><hr><h1 id="Android-Native-코드-작성"><a href="#Android-Native-코드-작성" class="headerlink" title="Android Native 코드 작성"></a>Android Native 코드 작성</h1><p>전 post에서는 Activity를 통해 Ionic Project를 실행하는 방법에 대해 설명했다.<br>이번 post에서는 Fragment를 통해 Ionic Project를 실행하는 방법에 대해 설명한다.</p><h1 id="IonicFragment-생성"><a href="#IonicFragment-생성" class="headerlink" title="IonicFragment 생성"></a>IonicFragment 생성</h1><p>Ionic을 불러오는 Fragment로 <code>IonicFragment</code>를 새로 만들어준다.</p><figure class="highlight java"><figcaption><span>IonicFragment.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IonicFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IonicFragment에서는 CordovaActivity에서 Ionic Project를 불러오기까지의 과정을 직접 처리해 주어야 한다.</p><figure class="highlight java"><figcaption><span>IonigFragment.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IonicFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> CordovaWebView appView;</span><br><span class="line">  <span class="keyword">protected</span> CordovaPreferences preferences;</span><br><span class="line">  <span class="keyword">protected</span> String launchUrl;</span><br><span class="line">  <span class="keyword">protected</span> ArrayList&lt;PluginEntry&gt; pluginEntries;</span><br><span class="line">  <span class="keyword">protected</span> CordovaInterfaceImpl cordovaInterface;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IonicFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IonicFragment();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View rootView = inflater.inflate(R.layout.fragment_layout, container, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    cordovaInterface = <span class="keyword">new</span> CordovaInterfaceImpl(getActivity());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cordovaInterface.restoreInstanceState(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadConfig();</span><br><span class="line"></span><br><span class="line">    appView = makeWebView();</span><br><span class="line"></span><br><span class="line">    createViews(rootView);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!appView.isInitialized()) &#123;</span><br><span class="line">      appView.init(cordovaInterface, pluginEntries, preferences);</span><br><span class="line">    &#125;</span><br><span class="line">    cordovaInterface.onCordovaInit(appView.getPluginManager());</span><br><span class="line"></span><br><span class="line">    appView.loadUrl(launchUrl);</span><br><span class="line">    <span class="keyword">return</span> rootView;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createViews</span><span class="params">(View rootView)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Cordova SystemWebView에 대한 Layout Parameter 설정</span></span><br><span class="line">    RelativeLayout.LayoutParams params = <span class="keyword">new</span> RelativeLayout.LayoutParams(</span><br><span class="line">      RelativeLayout.LayoutParams.MATCH_PARENT,</span><br><span class="line">      RelativeLayout.LayoutParams.MATCH_PARENT);</span><br><span class="line"></span><br><span class="line">    appView.getView().setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rootView에 SystemWebView 추가</span></span><br><span class="line">    ((RelativeLayout) rootView).addView(appView.getView());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> CordovaWebView <span class="title">makeWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CordovaWebViewImpl(makeWebViewEngine());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> CordovaWebViewEngine <span class="title">makeWebViewEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CordovaWebViewImpl.createEngine(getActivity(), preferences);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConfigXmlParser parser = <span class="keyword">new</span> ConfigXmlParser();</span><br><span class="line">    parser.parse(getActivity());</span><br><span class="line">    preferences = parser.getPreferences();</span><br><span class="line">    preferences.setPreferencesBundle(getActivity().getIntent().getExtras());</span><br><span class="line">    pluginEntries = parser.getPluginEntries();</span><br><span class="line">    launchUrl = parser.getLaunchUrl();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IonicFragment에서 사용하는, CordovaWebView를 삽입시킬 <code>fragment_layout.xml</code>을 함께 작성한다<br>해당 layout 아래에 <strong>자바코드를 사용해 직접</strong> <code>SystemWebView</code>를 삽입시킨다.</p><figure class="highlight xml"><figcaption><span>fragment_layout.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위의 코드는 이전 IonicActivity를 Fragment 형태로 변경한 내용이다.</p><h1 id="Plugin-통신을-위한-코드-추가-MainActivity-java"><a href="#Plugin-통신을-위한-코드-추가-MainActivity-java" class="headerlink" title="Plugin 통신을 위한 코드 추가 (MainActivity.java)"></a>Plugin 통신을 위한 코드 추가 (MainActivity.java)</h1><p>Plugin은 <code>onActivityResult()</code>를 통해 Plugin 결과값을 Activity로 보낸다.<br>Fragment의 경우 Activity로 보내진 onActivityResult()의 값을 직접 받지 못하고 Fragment를 감싸고 있는 Activity에서 가져와야 한다.</p><p>따라서 Fragment를 감싸고 있는 MainActivity에서 onActivityResult의 Override를 통한 추가 구현이 필요하다</p><figure class="highlight java"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 위에서 작성한 IonicFragment의 인스턴스를 만들어준다.</span></span><br><span class="line">  IonicFragment ionicFragment = IonicFragment.newInstance();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onActivityResult 구현 부분</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    ionicFragment.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이후 ionicFragment에서도 onActivityResult()의 결과값을 받아 처리할 수 있도록 코드를 작성한다.</p><h1 id="Plugin-통신을-위한-코드-추가-IonicFragment-java"><a href="#Plugin-통신을-위한-코드-추가-IonicFragment-java" class="headerlink" title="Plugin 통신을 위한 코드 추가 (IonicFragment.java)"></a>Plugin 통신을 위한 코드 추가 (IonicFragment.java)</h1><p>MainActivity에서 넘겨받는 onActivityResult()의 값을 IonicFragment의 cordovaInterface가 받아서 처리할 수 있도록 해주어야 한다.</p><p>Plugin쪽과 관련된 부분은 <code>loadConfig()</code>메소드 아래에 기입한다</p><figure class="highlight java"><figcaption><span>IonicFragment.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IonicFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  ... <span class="comment">// end of loadConfig()</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Intent intent, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    cordovaInterface.setActivityResultRequestCode(requestCode);</span><br><span class="line">    <span class="keyword">super</span>.startActivityForResult(intent, requestCode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    cordovaInterface.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      cordovaInterface.onRequestPermissionResult(requestCode, permissions, grantResults);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    cordovaInterface.onSaveInstanceState(outState);</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">    <span class="keyword">if</span> (appView == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    PluginManager pm = appView.getPluginManager();</span><br><span class="line">    <span class="keyword">if</span> (pm != <span class="keyword">null</span>) &#123;</span><br><span class="line">      pm.onConfigurationChanged(newConfig);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IonicFragment-실행하기"><a href="#IonicFragment-실행하기" class="headerlink" title="IonicFragment 실행하기"></a>IonicFragment 실행하기</h1><p>IonicFragment를 실행하기 위해 <code>MainActivity.java</code>와 <code>activity_main.xml</code>을 다음과 같이 수정해준다.</p><figure class="highlight java"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 위에서 작성한 IonicFragment의 인스턴스를 만들어준다.</span></span><br><span class="line">  IonicFragment ionicFragment = IonicFragment.newInstance();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">      <span class="keyword">case</span> R.id.startIonicActivity:</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, IonicActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> R.id.startIonicFragment:</span><br><span class="line">        Button btns[] = &#123;</span><br><span class="line">          findViewById(R.id.startIonicActivity),</span><br><span class="line">          findViewById(R.id.startIonicFragment)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 버튼들이 있으면 Fragment 화면 상단에 보여지므로 전부 상태를 View.GONE으로 변경</span></span><br><span class="line">        <span class="keyword">for</span> (Button btn : btns) &#123;</span><br><span class="line">          btn.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FragmentManager fm = getFragmentManager();</span><br><span class="line">        FragmentTransaction tx = fm.beginTransaction();</span><br><span class="line">        tx.add(R.id.cordovaWebViewFrag, ionicFragment);</span><br><span class="line">        tx.commitAllowingStateLoss();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onActivityResult 구현 부분</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>activity_main.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- activity_main.xml에 Button과 RelativeLayout 추가 --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Fragment 호출을 위한 Button --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Ionic Project 실행(Fragment)"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/startIonicFragment"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"onClick"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/startIonicActivity"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Fragment가 들어갈 Layout --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/cordovaWebViewFrag"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/startIonicFragment"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignParentStart</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>이후 MainActivity 내의 Fragment 실행 버튼을 누르면 Fragment의 형태로 IonicProject가 동작한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;본 post에서는 Ionic 프로젝트를 Android Fragment를 통해 실행하는 방법에 대해 설명합니다&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;본 post의 내용은 &lt;a href=&quot;/IonicEmbedded
      
    
    </summary>
    
      <category term="Ionic" scheme="http://henotia.github.io/categories/Ionic/"/>
    
    
      <category term="Ionic" scheme="http://henotia.github.io/tags/Ionic/"/>
    
      <category term="Cordova" scheme="http://henotia.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>Ionic Project를 Android Native 내에 Embedded 시키는 방법 #2</title>
    <link href="http://henotia.github.io/IonicEmbedded-2/"/>
    <id>http://henotia.github.io/IonicEmbedded-2/</id>
    <published>2018-01-11T08:57:43.000Z</published>
    <updated>2018-01-12T08:06:25.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>본 post에서는 Ionic 프로젝트를 Android Activity를 통해 실행하는 방법에 대해 설명합니다</strong><br><strong>본 post의 내용은 <a href="/IonicEmbedded-1">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #1</a>에서 이어집니다</strong></p></blockquote><hr><h1 id="Android-Native-코드-작성"><a href="#Android-Native-코드-작성" class="headerlink" title="Android Native 코드 작성"></a>Android Native 코드 작성</h1><p>전 post에서는 Android Project에서 Ionic Project를 실행하기위해 필요한 설정을 준비하는 작업을 했다.<br>이번 post에서는 기존의 설정을 바탕으로, Android Activity에서 Ionic Project를 불러오는 방법에 대해 설명한다</p><h1 id="IonicActivity-생성"><a href="#IonicActivity-생성" class="headerlink" title="IonicActivity 생성"></a>IonicActivity 생성</h1><p>Ionic을 불러오는 Activity로 <code>IonicActivity</code>를 새로 만들어준다.<br>본 Activity는 CordovaActivity를 상속받아, Cordova에서 처리하는 작업을 override 한다.</p><figure class="highlight java"><figcaption><span>IonicActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.cordova.CordovaActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IonicActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IonicActivity에서 override 해서 처리할 메소드는 <code>onCreate()</code>, <code>makeWebView()</code>, <code>createViews()</code> 총 세가지로 다음과 같이 작성해준다</p><figure class="highlight java"><figcaption><span>onCreate()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onCreate</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.cordova_layout);</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line"></span><br><span class="line">    loadUrl(launchUrl);</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>onCreate()</code>에서는 임의로 사용하기 위해 만든 layout(<code>cordova_layout</code>)을 사용하기 위함이다.</p><figure class="highlight java"><figcaption><span>makeWebView()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// makeWebView</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> CordovaWebView <span class="title">makeWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SystemWebView appView = (SystemWebView) findViewById(R.id.cordovaWebView);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CordovaWebViewImpl(<span class="keyword">new</span> SystemWebViewEngine(appView));</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>makeWebView()</code>는 CordovaWebView를 내가 작성한 레이아웃으로 사용하기 위해 반드시 필요한 작업이다</p><figure class="highlight java"><figcaption><span>createViews()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createViews</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do nothings</span></span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>createViews()</code>는 CordovaActivity내의 createViews()에서 사용하는 setContentView()를 피하기 위해서 사용한다. Override를 해주지 않는 경우 에러가 발생한다.</p><p>위의 세가지를 모두 작성해준 코드는 다음과 같다.<br><figure class="highlight java"><figcaption><span>IonicActivity</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IonicActivity</span> <span class="keyword">extends</span> <span class="title">CordovaActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    setContentView(R.layout.cordova_layout);</span><br><span class="line">    <span class="keyword">super</span>.init();</span><br><span class="line"></span><br><span class="line">    loadUrl(launchUrl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> CordovaWebView <span class="title">makeWebView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SystemWebView appView = (SystemWebView) findViewById(R.id.cordovaWebView);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CordovaWebViewImpl(<span class="keyword">new</span> SystemWebViewEngine(appView));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do nothings</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위의 코드를 작성했으면, IonicActivity를 AndroidManifest.xml에 등록한다.</p><h1 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".IonicActivity"</span> /&gt;</span>         <span class="comment">&lt;!-- 새로 추가 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="cordova-layout-생성"><a href="#cordova-layout-생성" class="headerlink" title="cordova_layout 생성"></a>cordova_layout 생성</h1><p>layout은 <code>res/layout</code>아래에 작성해주면 된다.<br>해당 디렉토리에 <code>cordova_layout.xml</code>로 layout파일을 생성하고 아래와 같이 작성한다.</p><figure class="highlight xml"><figcaption><span>cordova_layout.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">org.apache.cordova.engine.SystemWebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/cordovaWebView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">org.apache.cordova.engine.SystemWebView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;org.apache.cordova.engine.SystemWebView/&gt;</code> 부분이 실제 Ionic Project가 보여질 View이다.</p><h1 id="IonicActivity-실행하기"><a href="#IonicActivity-실행하기" class="headerlink" title="IonicActivity 실행하기"></a>IonicActivity 실행하기</h1><p>IonicActivity를 실행해주기 위해 <code>MainActivity.java</code>와 <code>activity_main.xml</code>을 다음과 같이 수정해준다</p><figure class="highlight java"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">      <span class="keyword">case</span> R.id.startIonicActivity:</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, IonicActivity.class);</span><br><span class="line">        startActivity(intent);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>activity_main.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- activity_main.xml에 Button 추가 --&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Ionic Project 실행"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/startIonicActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"onClick"</span>/&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>수정이 끝나면, MainActivity 내의 버튼을 클릭해 IonicActivity를 실행, IonicProject를 불러올 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;본 post에서는 Ionic 프로젝트를 Android Activity를 통해 실행하는 방법에 대해 설명합니다&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;본 post의 내용은 &lt;a href=&quot;/IonicEmbedded
      
    
    </summary>
    
      <category term="Ionic" scheme="http://henotia.github.io/categories/Ionic/"/>
    
    
      <category term="Ionic" scheme="http://henotia.github.io/tags/Ionic/"/>
    
      <category term="Cordova" scheme="http://henotia.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>Ionic Project를 Android Native 내에 Embedded 시키는 방법 #1</title>
    <link href="http://henotia.github.io/IonicEmbedded-1/"/>
    <id>http://henotia.github.io/IonicEmbedded-1/</id>
    <published>2018-01-11T06:53:42.000Z</published>
    <updated>2018-01-12T08:10:03.170Z</updated>
    
    <content type="html"><![CDATA[<p>참고</p><ol><li><a href="http://www.catharinegeek.com/embed-cordova-webview-in-android-native-app/" target="_blank" rel="noopener">http://www.catharinegeek.com/embed-cordova-webview-in-android-native-app/</a></li><li><a href="https://github.com/Adobe-Marketing-Cloud-Apps/app-sample-android-phonegap/wiki/Embed-Webview-in-Android-Fragment" target="_blank" rel="noopener">https://github.com/Adobe-Marketing-Cloud-Apps/app-sample-android-phonegap/wiki/Embed-Webview-in-Android-Fragment</a></li><li><a href="https://github.com/rajivnarayana/CordovaFragments" target="_blank" rel="noopener">https://github.com/rajivnarayana/CordovaFragments</a></li><li><a href="https://github.com/shucc/CordovaFragment" target="_blank" rel="noopener">https://github.com/shucc/CordovaFragment</a></li></ol><blockquote><p><strong>함께보기</strong><br> <a href="/IonicEmbedded-1">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #1</a><br> <a href="/IonicEmbedded-2">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #2</a><br> <a href="/IonicEmbedded-3">Ionic Project를 Android Native 내에 Embedded 시키는 방법 #3</a></p></blockquote><p><br></p><blockquote><p><strong>본 post에서는 Ionic 프로젝트를 Android Native 내에 삽입하기 위해 필요한 사전 준비 작업에 대해 설명합니다</strong></p></blockquote><hr><p>본 post의 Ionic 프로젝트는 Ionic CLI 3.19.0과 cordova 7.x로 작성되었습니다.<br><img src="xnszr0aqc348to6r.png" alt="xnszr0aqc348to6r"></p><h1 id="Ionic-Project-생성-및-빌드"><a href="#Ionic-Project-생성-및-빌드" class="headerlink" title="Ionic Project 생성 및 빌드"></a>Ionic Project 생성 및 빌드</h1><ol><li>Ionic Project 생성<br><img src="2thqc88pbas2lnmi.png" alt="2thqc88pbas2lnmi"><br>ionic start를 통해 super 템플릿으로 프로젝트를 생성합니다.<br>super 템플릿에는 기본적인 페이지들과 Camera Plugin을 추가로 설치했을 때 Camera기능을 추가적인 코딩 없이 바로 사용할 수 있도록 작성되어 있습니다.<br><br><img src="8xsivp1el7jpp66r.png" alt="8xsivp1el7jpp66r"><br><strong>Ionic Pro SDK는 설치하지 않습니다.</strong><br><br></li><li><p>Camera Plugin 설치</p><blockquote><p><code>ionic cordova plugin add cordova-plugin-camera</code></p></blockquote></li><li><p>Android Platform 추가</p><blockquote><p><code>ionic cordova platform add android</code></p></blockquote></li><li><p>Build</p><blockquote><p><code>ionic cordova build android</code></p></blockquote></li></ol><p>위의 과정을 모두 거치면 ionicEmbedded/platforms/android 내에 Android 프로젝트가 생성된다.</p><h1 id="Android-Project-생성"><a href="#Android-Project-생성" class="headerlink" title="Android Project 생성"></a>Android Project 생성</h1><p><code>IonicEmbedded</code>라는 어플리케이션 명으로 Android Project를 만들어준다.<br>Ionic은 <a href="https://ionicframework.com/docs/intro/browser-support/" target="_blank" rel="noopener">Android 4.4 (API 19) 이상을 지원</a>하므로 SDK를 4.4 이상으로 맞춘 뒤, 프로젝트를 만들어주면 된다.<br>default Activity는 <code>Empty Activity</code>로 하고, Activity의 Name 역시 <code>MainActivity</code>로 한다.</p><p><img src="90vijjlthbcyds4i.png" alt="90vijjlthbcyds4i"></p><h1 id="Ionic-Project의-내용을-Android-Project에-복사"><a href="#Ionic-Project의-내용을-Android-Project에-복사" class="headerlink" title="Ionic Project의 내용을 Android Project에 복사"></a>Ionic Project의 내용을 Android Project에 복사</h1><p>Ionic Project에서 빌드로 나온 output을 Android Project에 복사해주면 된다</p><h2 id="CordovaLib"><a href="#CordovaLib" class="headerlink" title="CordovaLib"></a>CordovaLib</h2><p><strong>Ionic Project를 Android Project로 옮기는데 가장 중요한 작업이다.</strong></p><p>IonicProject/platforms/android/CordovaLib 내에 있는 코드를 jar 파일로 변환한 뒤, AndroidProject/app/libs 안에다 넣어주면 된다.<br>하지만 CordovaLib 내의 코드를 jar 파일로 변환시키기 위해선 아래와 같은 작업을 추가로 해주어야 한다.<br><strong>본 post에서는 6.4.0을 사용한다</strong></p><p><em>생략하고 바로 받기</em>: <a href="CordovaLib-6.4.0.jar">CordovaLib-6.4.0.jar</a>, <a href="CordovaLib-7.0.0.jar">CordovaLib-7.0.0.jar</a></p><h3 id="CordovaLib를-jar로-만들기"><a href="#CordovaLib를-jar로-만들기" class="headerlink" title="CordovaLib를 jar로 만들기"></a>CordovaLib를 jar로 만들기</h3><ol><li>cordova-android source를 받는다. <a href="https://github.com/apache/cordova-android/releases/tag/6.4.0" target="_blank" rel="noopener">6.4.0</a> 또는 <a href="https://github.com/apache/cordova-android/releases/tag/7.0.0" target="_blank" rel="noopener">7.0.0</a><br>여기서는 6.4.0을 사용해 jar파일을 만든다</li><li>내려받은 cordova-android source 내의 framework를 android studio에서 열어준다.<br>import project를 통해 cordova-android/framework를 직접 import 시키면 된다.<br><img src="zos88qd47r1thuxr.png" alt="zos88qd47r1thuxr"></li><li>gradle build를 통해 framework를 빌드해준다<br><img src="805cnjngjba6pqfr.png" alt="805cnjngjba6pqfr"><br><strong>성공적으로 빌드가 된 경우 <code>framework/build/intermediates/intermediates-jars/release/classes.jar</code>가 생성된다</strong><br>만약 lint 도중 에러가 발생하는 경우 <code>build.gradle</code> 파일 내에 <code>android { }</code> 영역을 찾아 아래와 같이 작성해준다<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line">android &#123;</span><br><span class="line">  lintOptions &#123;</span><br><span class="line">    abortOnError <span class="keyword">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></li></ol><p>생성된 파일을 <code>CordovaLib</code>로 이름을 바꾼 뒤 <code>AndroidProject/app/libs</code>에 넣어준다.<br>이후 <code>app/</code> 아래에 있는 build.gradle에 <code>implementation files(&#39;libs/CordovaLib.jar&#39;)</code>를 적어준다.<br><img src="89y69jipfkdibe29.png" alt="89y69jipfkdibe29"><br>성공적으로 연결이 된 경우, CordovaLib 내의 클래스들을 사용할 수 있게 된다.</p><h2 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h2><p>IonicProject의 <code>platforms/android/assets/</code> 아래에 있는 <code>www/</code> 디렉토리를 AndroidProject에 통째로 복사한다.</p><p><code>platforms/android/assets/www/</code> -&gt; <code>app/src/main/assets/www/</code><br><img src="s8v1uge5xgktke29.png" alt="s8v1uge5xgktke29"></p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p><code>platforms/android/res/</code> 아래에 있는 파일들을 말한다.<br>splashscreen이나 app icon등 resource 파일들이 존재한다.<br><code>drawable-</code>로 시작하거나 <code>mipmap-</code>으로 시작하는경우 반드시 옮기지 않아도 된다.</p><p>Resources에서 가장 중요하게 봐야될 부분은 <code>xml/config.xml</code>로, Cordova에서 사용하는 설정들이 모두 담겨있다.<br>따라서 <code>xml/</code>만큼은 반드시 AndroidProject로 복사해 주어야 한다.</p><p>그 외의 plugin에서의 사용을 위해 임의로 만든 몇몇 파일들이 존재하는데, 예로 cordova-plugin-camera는 <code>xml/provider_paths.xml</code>파일이 존재한다.</p><p>이 경우도 반드시 복사를 해주어야 한다</p><p><code>platforms/android/res/</code> -&gt; <code>src/main/res/</code><br>몇몇 파일만을 특정하여 복사하는게 어려운경우, res 디렉토리를 통짜로 복사하면 된다.</p><h2 id="Plugins-Source"><a href="#Plugins-Source" class="headerlink" title="Plugins Source"></a>Plugins Source</h2><p><code>platforms/android/src/</code>아래에 있는 <code>.java</code>파일들을 말한다.</p><p>IonicProject 루트에 위치한 config.xml 파일 내의 <code>&lt;widget id=&quot;&quot;&gt;</code> 에 적혀있는 id가 Android App에서 사용하는 <code>MainActivity</code> 파일이 위치한 경로이다.<br>Ionic Super 템플릿은 <code>&lt;widget id=&quot;io.ionic.starter&quot; /&gt;</code>로 되어 있으며, <code>platform/android/src/io/ionic/starter/MainActivity.java</code>가 위치한다</p><p>위의 파일을 제외한 나머지는 모두 Cordova에서 사용하는 Plugin이므로 모두 복사해주어야 한다.</p><p><code>platforms/android/src/plugin_folders</code> -&gt; <code>src/main/java</code><br><img src="fwyuap4fg12d42t9.png" alt="fwyuap4fg12d42t9"></p><h2 id="AndroidManifest"><a href="#AndroidManifest" class="headerlink" title="AndroidManifest"></a>AndroidManifest</h2><p><code>platforms/android/AndroidManifest.xml</code>은 Android 관련 설정이 담겨있다.<br>위의 파일을 토대로, AndroidProject의 <code>AndroidManifest.xml</code>파일을 수정해 주어야 한다.<br><img src="9ql8nuci6586ko6r.png" alt="9ql8nuci6586ko6r"><br>왼쪽이 Android Project이고 오른쪽이 Ionic Project이다.</p><p>provider 부분은 Camera Plugin으로 인해 생긴 부분이다.<br>위의 Resource 섹션의 <code>provider_paths.xml</code>을 사용한다.</p><hr><p> 위의 작업을 끝으로 Ionic Project 내의 모든 설정을 Android Project로 옮겼다.<br> 다음장에는 Android Project에서 Ionic Project를 띄우기 위한 Native 작업에 대해 설명한다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;참고&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.catharinegeek.com/embed-cordova-webview-in-android-native-app/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http:/
      
    
    </summary>
    
      <category term="Ionic" scheme="http://henotia.github.io/categories/Ionic/"/>
    
    
      <category term="Ionic" scheme="http://henotia.github.io/tags/Ionic/"/>
    
      <category term="Cordova" scheme="http://henotia.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>신년계획</title>
    <link href="http://henotia.github.io/%EC%8B%A0%EB%85%84%EA%B3%84%ED%9A%8D/"/>
    <id>http://henotia.github.io/신년계획/</id>
    <published>2018-01-02T04:42:00.000Z</published>
    <updated>2018-01-02T06:47:17.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="18년도-계획"><a href="#18년도-계획" class="headerlink" title="18년도 계획"></a>18년도 계획</h1><h2 id="필수"><a href="#필수" class="headerlink" title="필수"></a>필수</h2><ul><li>불분명한 목적의 다이어트</li><li>1년에 책 12권 읽기</li><li>한달에 최소 한번씩 블로그 포스팅 하기</li><li><a href="https://www.urbandictionary.com/define.php?term=TIL" target="_blank" rel="noopener">TIL</a> 하기</li></ul><h2 id="선택"><a href="#선택" class="headerlink" title="선택"></a>선택</h2><ul><li>개인 프로젝트</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;18년도-계획&quot;&gt;&lt;a href=&quot;#18년도-계획&quot; class=&quot;headerlink&quot; title=&quot;18년도 계획&quot;&gt;&lt;/a&gt;18년도 계획&lt;/h1&gt;&lt;h2 id=&quot;필수&quot;&gt;&lt;a href=&quot;#필수&quot; class=&quot;headerlink&quot; title=&quot;필
      
    
    </summary>
    
      <category term="계획" scheme="http://henotia.github.io/categories/%EA%B3%84%ED%9A%8D/"/>
    
    
      <category term="신년계획" scheme="http://henotia.github.io/tags/%EC%8B%A0%EB%85%84%EA%B3%84%ED%9A%8D/"/>
    
  </entry>
  
</feed>
