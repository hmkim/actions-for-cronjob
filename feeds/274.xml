<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>GIS Developer</title>
	<atom:link href="http://www.gisdeveloper.co.kr/?feed=rss2" rel="self" type="application/rss+xml" />
	<link>http://www.gisdeveloper.co.kr</link>
	<description>공간정보시스템 기반 기술 연구소 @지오서비스(GEOSERVICE)</description>
	<lastBuildDate>Fri, 03 May 2019 06:23:43 +0900</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2</generator>
	<item>
		<title>국가지점번호</title>
		<link>http://www.gisdeveloper.co.kr/?p=6788</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6788#respond</comments>
				<pubDate>Fri, 03 May 2019 06:23:43 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[GIS Working History]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6788</guid>
				<description><![CDATA[우리나라의 특정 위치를 나타낼 수 있는 지점번호 체계에 대한 내용입니다. GIS 관련 사업 시에 국가지점번호를 지도에 표현할 때 도움이 되는 자료입니다. 먼저 국가지점 번호에 대한 직관적인 이해를 돕는 그림은 아래와 같습니다. 위의 그림은 일단 전국을 100km 단위의 격자로 나누되, 그 기준점은 별표 표시가 된 (700000, 1300000)입니다. 좌표계는 GRS80 타원체의 UTM-K입니다. 위 그림은 제가 작성한게 아닌데, &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6788" class="more-link">더 보기<span class="screen-reader-text"> "국가지점번호"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6788</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 30 : SIFT(Scale-Invariant Feature Transform)을 이용한 이미지의 특징점 추출</title>
		<link>http://www.gisdeveloper.co.kr/?p=6779</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6779#respond</comments>
				<pubDate>Tue, 30 Apr 2019 07:54:20 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6779</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_sift_intro/py_sift_intro.html 입니다. 이전 글에서는 이미지의 특징점을 Corner로 간주하였습니다. 이미지를 회전해도 귀퉁이(Corner)은 여전이 귀퉁이입니다. 그러나 만약 이미지의 크기를 늘렸을때는 어떨까요? 아래의 그림을 보면.. 왼쪽의 이미지에서 초록색 사각형 안의 형상은 Corner입니다. 그러니 이 이미지를 확대하고 동일한 크기의 초록색 사각형 안의 형상은 더 이상 Corner라고 보기 어렵습니다. 즉, 이전 장에서 살펴본 이미지의 특징점으로써 Corner를 대상으로 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6779" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 30 : SIFT(Scale-Invariant Feature Transform)을 이용한 이미지의 특징점 추출"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6779</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 29 : Shi-Tomasi Corner Detection</title>
		<link>http://www.gisdeveloper.co.kr/?p=6776</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6776#respond</comments>
				<pubDate>Thu, 25 Apr 2019 03:23:16 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6776</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_shi_tomasi/py_shi_tomasi.html 입니다. Shi-Tomasi Corner Detection는 Harris Corner Detector를 기본으로 개선을 통해 좀더 정확한 Corner를 추출해 내는 알고리즘으로 cv2.goodFeaturesToTrack 함수로 구현되어 있습니다. 이에 대한 예제는 아래와 같습니다. [crayon-5cda1a991a434195429770/] cv2.goodFeaturesToTrack 함수는 4개의 인자를 받는데, 첫번째는 특징점인 Corner를 추출할 입력 이미지로 1채널인 Grayscale 이미지를 받습니다. 두번째는 추출할 특징점의 개수이고 세번째는 특징점으로써의 최소 품질인데 품질의 범위는 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6776" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 29 : Shi-Tomasi Corner Detection"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6776</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 28 : Harris Corner Detection</title>
		<link>http://www.gisdeveloper.co.kr/?p=6765</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6765#respond</comments>
				<pubDate>Wed, 24 Apr 2019 01:31:48 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6765</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_features_harris/py_features_harris.html 입니다. 이미지의 특징점인 귀퉁이(Corner) 지점을 추출하는 알고리즘 중 하나인 Harris Corner Detection에 대한 예제를 살펴 봅니다. [crayon-5cda1a991a565460359718/] 결과는 아래와 같습니다. 입력 이미지에 대해 Corner로 인식되는 부분에 빨간색 점 표시가 되어 있습니다. cv2.cornerHarris() 함수의 인자를 살펴보면, 첫번째는 입력 이미지로써 단일 채널 이미지(Grayscale)여야 하며 데이터 타입은 float32입니다. 두번째는 Corner 검출을 위한 알고리즘 수행 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6765" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 28 : Harris Corner Detection"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6765</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 27 : 특징(Features)의 이해</title>
		<link>http://www.gisdeveloper.co.kr/?p=6756</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6756#respond</comments>
				<pubDate>Tue, 23 Apr 2019 09:19:26 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6756</guid>
				<description><![CDATA[이 글의 출처는 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_features_meaning/py_features_meaning.html 입니다. 이 글에서는 피쳐가 무엇인지, 왜 중요한지를 알아봅니다. 그리고 이미지에서 귀퉁이(Corner)이 왜 중요한지도 알아봅니다. 우리들의 대부분은 직소 퍼즐을 가지고 놀아보았을 것 입니다. 이 퍼즐 게임은 이미지의 많은 조각을 가지고 하는데, 실제로는 큰 실제 이미지에 이 조각들을 정확히 맞춥니다. 질문은, 어떻게 플레이 하느냐 입니다. 이 게임에 대한 놀이 방식을 컴퓨터가 할 수 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6756" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 27 : 특징(Features)의 이해"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6756</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 28 : GrabCut 알고리즘을 이용한 전경(Foreground) 추출</title>
		<link>http://www.gisdeveloper.co.kr/?p=6747</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6747#respond</comments>
				<pubDate>Tue, 23 Apr 2019 06:00:31 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6747</guid>
				<description><![CDATA[이 글의 원문은 https://github.com/abidrahmank/OpenCV2-Python-Tutorials/blob/master/source/py_tutorials/py_imgproc/py_grabcut/py_grabcut.rst 입니다. GrabCut 알고리즘은 이미지에서 배경이 아닌 전경에 해당하는 이미지를 추출해 내는 방법입니다. 이미지에서 한번에 전경을 추출해 내는 것이 아닌 사용자와의 상호 작용을 통해 단계적으로 전경을 추출합니다. 이 상호작용은 크게 2가지 단계로 진행되는데, 첫번째는 이미지에서 전경이 포함되는 영역을 사각형으로 대략적으로 지정합니다. 단, 이때 지정한 사각형 영역 안에는 전경이 모두 포함되어 있어야 합니다. &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6747" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 28 : GrabCut 알고리즘을 이용한 전경(Foreground) 추출"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6747</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 27 : Watershed 알고리즘을 이용한 이미지 분할</title>
		<link>http://www.gisdeveloper.co.kr/?p=6740</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6740#respond</comments>
				<pubDate>Sat, 20 Apr 2019 04:48:03 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6740</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_watershed/py_watershed.html 입니다. 회색조 이미지는 지형처럼 해석할 수 있는데, 값이 높은 픽셀 위치는 산꼭대기이고 값이 낮은 픽셀 위치는 계곡이라고 해석할 수 있습니다. 지형이므로 고립되어 분리된 계곡이 있을 것이고 이 계곡들을 서로 다른 색의 물로 채우기 시작하면 물이 점점 차오르다가 이웃한 계곡의 언저리에서 물이 합쳐지게 됩니다. 물이 합쳐지는 것을 피하기 위해서 합쳐지는 순간에서의 위치에 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6740" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 27 : Watershed 알고리즘을 이용한 이미지 분할"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6740</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 26 : 이미지에서 원형 도형 검출(Hough Circle Transform)</title>
		<link>http://www.gisdeveloper.co.kr/?p=6726</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6726#respond</comments>
				<pubDate>Thu, 18 Apr 2019 06:00:12 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6726</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_houghcircles/py_houghcircles.html#hough-circles 입니다. 앞서 이미지에서 선형 도형을 검출하는데, Hough Transform 알고리즘을 사용했습니다. 이 알고리즘은 수학적 모델링이 가능한 모든 도형을 이미지에서 검출할 수 있는 방법입니다. 그렇다면 원형에 대한 수학적 모델식을 이용해 Hought Transform을 적용할 수 있는데, 문제는 원에 대한 수학식이 중심점 (x, y)와 반지름(r)이라는 3개의 매개변수로 구성되어 있고, 결국 3차원 배열이라는 저장소를 요구한다는 점. &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6726" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 26 : 이미지에서 원형 도형 검출(Hough Circle Transform)"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6726</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Python과 OpenCV – 25 : 이미지에서 선형 도형 검출(Hough Line  Transform)</title>
		<link>http://www.gisdeveloper.co.kr/?p=6714</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6714#respond</comments>
				<pubDate>Thu, 18 Apr 2019 03:22:51 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenCV]]></category>
		<category><![CDATA[Python]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6714</guid>
				<description><![CDATA[이 글의 원문은 https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html#hough-lines 입니다. 이미지에서 선 모양의 도형을 검출하는 Hough Transform에 대해 살펴보고, 이 알고리즘을 구현한 OpenCV의 함수를 살펴봅니다. 먼저 Hough Transfom은 이미지에서 수학적으로 표현 가능한 도형을 검색하는 기술입니다. 그 도형 중 선형에 대해 검색해 볼텐데요. 선에 대한 방정식은 우리가 흔히 알고 있는 기울기(m)와 y절편(c)로 표현되는 𝑦=m𝑥+c도 있지만 삼각함수에 의한 매개변수 방정식으로써는 r = &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6714" class="more-link">더 보기<span class="screen-reader-text"> "Python과 OpenCV – 25 : 이미지에서 선형 도형 검출(Hough Line  Transform)"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6714</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>[OpenLayers] AnimatedCluster 확장 기능</title>
		<link>http://www.gisdeveloper.co.kr/?p=6708</link>
				<comments>http://www.gisdeveloper.co.kr/?p=6708#respond</comments>
				<pubDate>Tue, 16 Apr 2019 00:00:52 +0000</pubDate>
		<dc:creator><![CDATA[김 형준]]></dc:creator>
				<category><![CDATA[OpenLayers]]></category>

		<guid isPermaLink="false">http://www.gisdeveloper.co.kr/?p=6708</guid>
				<description><![CDATA[ol은 그 자체의 기능을 확장시키기 위한 확장 기능이 존재합니다. 그 중 하나가 바로 ol-ext이고, 이 곳에서 제공하는 AnimatedCluster 기능에 대해 살펴 보겠습니다. 먼저 ol-ext 기능을 ES6의 모듈방식으로 개발하기 위해 다음과 같은 ol-ext 모듈 설치가 필요합니다. [crayon-5cda1a991aefd500292790/] 이제 ol에도 이미 Cluster 기능이 존재하는데, 이 Cluster에 시각적인 효과를 추가한 것이 AnimatedCluster 입니다. 이에 대한 예제를 만들어 만들어 &#8230; <p class="link-more"><a href="http://www.gisdeveloper.co.kr/?p=6708" class="more-link">더 보기<span class="screen-reader-text"> "[OpenLayers] AnimatedCluster 확장 기능"</span></a></p>]]></description>
						<wfw:commentRss>http://www.gisdeveloper.co.kr/?feed=rss2&#038;p=6708</wfw:commentRss>
		<slash:comments>0</slash:comments>
				<enclosure url="http://www.gisdeveloper.co.kr/wp-content/uploads/2019/04/AnimatedCluster.mp4" length="40387248" type="video/mp4" />
			</item>
	</channel>
</rss>
