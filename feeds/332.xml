<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Kisang Pak on Medium]]></title>
        <description><![CDATA[Stories by Kisang Pak on Medium]]></description>
        <link>https://medium.com/@kpak?source=rss-a1305a2323b2------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*22ptPJ4LfQFxvBeyZINeEQ.jpeg</url>
            <title>Stories by Kisang Pak on Medium</title>
            <link>https://medium.com/@kpak?source=rss-a1305a2323b2------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 08:01:50 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@kpak" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[회의할때 반드시 지켜야 하는것: 시간]]></title>
            <link>https://medium.com/@kpak/%ED%9A%8C%EC%9D%98%ED%95%A0%EB%95%8C-%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%A7%80%EC%BC%9C%EC%95%BC-%ED%95%98%EB%8A%94%EA%B2%83-%EC%8B%9C%EA%B0%84-cfb28b5e4e21?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/cfb28b5e4e21</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Wed, 27 Mar 2019 05:55:33 GMT</pubDate>
            <atom:updated>2019-03-27T05:55:33.463Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*XcO0TV3zZpeqXx_VctvYng.jpeg" /></figure><p>사회생활을 하다보면 많은 사람들에게 매일 몇번이고 일어나는 것이 회의이다. 이런 말이 있다 — 회의는 아주 생산적이거나 완전한 시간낭비 둘중에 하나라고. 중간은 없다고 한다. 그만큼 회의는 잘 셋업을 하지 않으면 시간이 돈인 세상에 간접적으로 조직에 돈낭비, 시간낭비를 가져다 준다. 그렇다면 회의할때 가장 중요한 것은 무엇일까?</p><p>회의의 목적을 달성한다는 전제하에 — 첫번째도 시간지키기, 두번째도 시간지키기, 세번째도 시간지키기이다. 회의에서 시간을 지키고 목적을 달성한다는 것은 회의를 주관한 사람의 철저한 준비, discipline, 그리고 커뮤니케이션 능력을 말해준다고 해도 과언이 아니다.</p><p>회의를 주관하는 사람이 30분 혹은 1시간 회의를 잡을때는 ‘회의주제가 이 정도 시간이면 되겠다’ 라는 전제가 있다. 그리고 이 전제는 대부분의 경우에 맞는다. 그럼에도 불구하고 회의는 왜 자주 길게 늘어지는 것일까? 몇몇 분들은 이럴때 ‘해야할 얘기가 많다’ ‘결론이 날때까지 회의는 끝나지 않는다’ 라는 말로 정당화를 시키는데 이런 경우 대부분은 시간관리 혹은 주제포커스의 실패이다. 회의가 길어지는 이유는 대부분 대화도중 주제가 꼬리에 꼬리를 물어 엉뚱한 곳으로 가거나 원래 회의에 없던 아젠다를 얘기하는 경우, 혹은 결론이 나려면 한참 걸리는 토론을 시작하는 경우이다.</p><p>그럼 회의시간을 초과하는 것은 왜 그리 안좋은가?</p><p>첫째, 회의를 질질 끌 경우 참가자들의 상당수는 그 사람이 초대한 회의에 다음부터는 참여하기를 꺼려한다. 회의에 참가한 회의후에 바로 다른 스케쥴이 있는 경우가 많고 혹은 바로 다른 회의가 잡혀있는 경우도 많다. 하지만 회의 하나가 시간초과될 경우 참가자의 향후 스케쥴은 꼬이게 되고 그 회의 주최자가 회의를 길게 끌고가는 사람이라는 이미지가 한번 생기면 다음부터는 아무리 중요한 주제를 논하고 싶을지라도 그 사람이 초대한 회의는 어떻게든 피하려고 한다. 반대로 회의시간을 늘 철저히 지키는 사람이라면 그 사람이 회의초대를 할때 그 회의시간은 꼭 지켜진다는 확신이 있으므로 가벼운 마음으로 손쉽게 회의를 수락하고 기분좋게 참여하게 된다.</p><p>둘째, 다른 사람의 시간에 대한 존중이다. 누구에게나 시간은 가장 소중한 재산중의 하나이다. 내가 누군가의 참여를 필요로 해서 회의에 초청을 할 경우 나는 그 사람이 회의시간을 정말 생산적으로 쓰게 해야하는 의무가 있다. 그럼에도 얘기치 않던 주제나 토론으로 그 사람의 시간을 낭비한다면 자신은 인지하지 못하지만 상대방으로 하여금 나는 다른 사람에 대한 배려가 없는, 조금 과장하자면 이기적인 사람으로까지 비추어지게 된다.</p><p>그럼 어떻게 하면 회의 시간을 잘 지킬수 있을까?</p><ol><li><strong>회의전에 summary 보내기</strong></li></ol><p>가끔씩 어떠한 설명도 없이 제목만 한줄쓰고 회의초대를 하는 경우가 있다. 회의초대를 하는 사람이야 한줄만 써도 무슨말인지 알지만 받는 사람 입장에서는 그 한줄 가지고는 그 회의 내용을 모르는 경우가 대부분이다. 기본적으로 회의의 주제에 관한 간략한 설명, 또한 문서가 있다면 링크첨부, 그리고 회의의 목적까지 짧게라도 summary 를 보내준다면 큰 도움이 된다. 예를 들어,</p><blockquote>Team:</blockquote><blockquote>I have been working on the product specs of project Samba (http://www.greatawesomecompany.com/projectSamba). It’s a feature where the app can automatically find the best filters for any photos. The goals of this meeting are:</blockquote><blockquote>- Decide on technical feasibility of each filter</blockquote><blockquote>- Decide on the first 5 filters to launch as MVP</blockquote><blockquote>- Agree on the timeline</blockquote><blockquote>Thank you!</blockquote><p>짧지만 위의 정도로만 회의의 주제와 간단한 설명, 문서링크, 그리고 회의에서 이루고자 하는 목적들을 확실히 명시해 두면 보는 사람들로 하여금 확실한 context 가 생겨서 회의 시작과 동시에 바로 자연스럽게 주제로 들어갈수 있게 해준다.</p><p><strong>2. 회의 시작전 30초 혹은 1분정도 회의의 주제에 관한 context 전달하기</strong></p><p>회의 참여한 사람들의 손쉬운 이해를 위하여 storytelling 식으로 간단하게 얘기하면 된다. 이부분은 위에 회의초대에 보낸 첫부분의 반복정도라고 보면 된다. 가령 예를 들어 -</p><blockquote>As you all know, we plan on making AI-based photo filters for our next app version. So I’ve been working on the product specs the past 3 weeks and would like to discuss about it and make some important decisions.</blockquote><p><strong>3. 회의에서 얻고자 하는 목적(들)을 직설적으로 얘기하기</strong></p><p>이것역시 회의초대에 이미 포함이 되어있어야 하는 부분이다. 하지만 참가자들이 기억을 못하는 경우가 대부분이므로 여기에 관해서도 직설적으로 분명하게 얘기함으로써 회의의 목적을 다시한번 강조한다.</p><p><strong>4. 정말 중요한 것. 회의시간을 철저히 준수하겠다고 미리 양해 구하기</strong></p><p>아무리 착한 사람이라도 자기 말을 예고 없이 중간에 끊으면 기분이 나쁘다. 하지만 회의시간을 철저히 지키는 것은 모두가 좋아하는 것이다. 주제에 조금이라도 벗어나거나 장시간의 토론이 예상된경우 모두의 이익을 위해서 칼같이 자른다고 예고한다.</p><blockquote>I’d like to honor the meeting time and respect everyone’s time. So I will interrupt whenever we get off the subject or when a discussion gets too long. It’s for everyone.</blockquote><p>위의 정도만 얘기해 줘도 회의 중간에 ‘Let’s focus on the subject’ 라고 말해도 대부분 이해해 준다.</p><p><strong>5. 회의가 주제에서 조금이라도 벗어날 경우 과감히 자른다</strong></p><p>이것은 회의할때 길어지는 토론과 함께 회의가 늘어지는 가장 큰 이유중의 하나이다. A 를 얘기하다 B 얘기가 나오고 C 얘기도 나오면서 어느순간 D 를 얘기하고 있다. 회의 주최자는 이것을 늘 경계해야 한다. 사람들의 말에 계속 안테나를 세우고 귀를 기울이며 조금이라도 회의의 목적에서 벗어날 경우 과감히 예의지키며 자른다.</p><blockquote>“That’s a very important subject and I appreciate your thought process. But since it’s still not directly related to the meeting subject, let’s take it offline after the meeting”</blockquote><p><strong>6. 토론이 길어지면서 결론이 나지 않을 때에는 회의 후에 다시 얘기 하자고 제안한다</strong></p><p>어느 주제이건 회의에서 5분정도 이상의 토론이 계속되면 이미 이것은 30분 혹은 1시간의 회의에서 결론을 내리기에는 적절하지 않은 주제이다. 이럴 경우 그 주제만을 위해서 따로 회의를 잡거나 여기에 관해 많은 리서치와 고민이 필요하다. 이런 주제는 나중에 회의노트에 꼭 기록을 할것이라 약속하고 여기에 관해 직접적인 관련자만 따로 회의 후에 다시 얘기하거나 다른 회의를 잡자고 말하면서 다음으로 넘어간다.</p><blockquote>“I think this topic is too important to decide now. I will make sure that I include this topic on the meeting notes and send it to everyone. Let’s take it offline after the meeting to further discuss it if you’d like.”</blockquote><p><strong>7. 왠만하면 말하지 말자. 정말 중요한 질문이나 코멘트만 하기</strong></p><p>가끔씩 회의할때 자신의 ‘존재감&#39;을 들어내거나 회의에 열심히 참여하고 있다는 것을 억지로 보여주기 위해서 해도 되지 않는 당연할 말등을 하는 경우가 있다. 정말 경계해야 하는 부분이다. 회의 주최자와 그 회의에 직접관련된 핵심인물 1–2 명을 제외하고는 왠만하면 말을 안하는 것이 좋다. 정말 중요한 질문이나 반드시 팀에 필요하다고 생각하는 코멘트만 한다. 말을 하기 전에 내가 말을 하는 이유가 ‘내 자신의 존재감을 위한 것인가&#39; ‘팀을 위한 것인가&#39; 라는 기준에 100% 후자라면 괜찮다고 본다.</p><p><strong>8. 5분 혹은 10분 정도 남겨두고 남은 시간 리마인드 시키기</strong></p><p>30분의 미팅에서는 5분 남았을 경우, 1시간 미팅에서는 10분 남았을 경우 간단하게 “Time check. 5 minutes” 라며 참여자들에게 리마인드를 시킨다. 그러면서 아직도 회의의 목적이 달성되지 않았을 경우 바로 그 목적이 달성되게끔 전력질주 한다.</p><p><strong>9. 회의끝난후 to-do list 중심으로 이메일 보내기</strong></p><p>회의끝난후 그 내용을 정리해서 해야할일 중심으로 보내는 것은 대부분 회의 주최자를 위한것이 많다. 정리를 통하여 회의에 관한 내용들을 복기하며 앞으로 해야할 일들이 정리되고 뚜렷해 지는 경우가 많다. 나같은 경우에는 주로 다음의 형식으로 보낸다.</p><blockquote>세부주제</blockquote><blockquote>해당사람: 해야할일</blockquote><p>예를 들어,</p><blockquote><strong>Black-and-white photo filter</strong></blockquote><blockquote>@ MichaelJohnson: Investigate whether there is a 3rd-party, open-source library we can use</blockquote><p>위의 것들은 누구라도 조금만 연습하면 잘 지킬수 있는 것들이다.</p><p>끝.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cfb28b5e4e21" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Peer review 로 나에 대한 선입견 바꾸기]]></title>
            <link>https://medium.com/@kpak/peer-review-%EB%A1%9C-%EB%82%98%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A0%EC%9E%85%EA%B2%AC-%EB%B0%94%EA%BE%B8%EA%B8%B0-209ba5cdd7e6?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/209ba5cdd7e6</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Sat, 17 Nov 2018 07:37:47 GMT</pubDate>
            <atom:updated>2018-11-17T23:15:49.721Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*h4LdHgrGeS3ggSE87AAW8w.jpeg" /></figure><p>나는 상사와 1:1 하는 것만큼, 혹은 그것보다 더 중요하게 생각하는 1:1 이 있는데 바로 동료들과의 peer review 이다. 상사와의 1:1 이 실제로 내가 개선해야 할점을 알고 고치기 위해 쓰는 것이라면 peer review 는 회사동료가 나에게 가지고 있는 선입견을 바꾸는데 훨씬 효과적이다.</p><p>얼마전 회사에서 같은 팀에 있는 동료와 함께 샌프란시스코 오피스로 카풀을 하며 같이 출근한적이 있다. 카풀을 하면 좋든 싫든 어쨌든 1시간 가량을 같은 차안에서 있어야 하기 때문에 이럴때는 회사 동료와 peer review 를 할수 있는 절호의 기회다. 나는 그에게 내가 개선해야 할점에 대해서 물어보았다. 하지만 수평관계에 있는 회사동료라면 아무리 친해도 선뜻 나한테 ‘너는 이런점을 고쳐야 한다’라는 식으로 문제점을 직접적으로 말하는 사람은 많지 않다. 대부분 좋다고 하거나 아니면 굳이 단점은 아니지만 어떤 부분을 다른 방식으로 접근해도 괜찮지 않을까라며 호의적으로 제안하는 경우가 많다. 하지만 나 역시 많은 단점을 가진 사람이고 나에 대해 객관적인 평가를, 특히 내가 개선해야 할점을, 꼭 듣고 싶어서 집요하게 물어보았다. 그리고 그가 나에게 말한것은 내가 회의중 다른 사람들의 의견과 동의하지 않을 경우 너무 다른사람들의 입장을 고려해서 가끔씩 도가 지나치게 그 사람을 상처주지 않으려고 애쓴다는 것이었다. 흥미로운 것은 이 피드백은 내가 이미 수개월전에 내 상사로부터 받은 똑같은 피드백이다. 내가 옳다고 생각하면 상대방 기분 너무 생각하지 말고 assertive 하게 말하고 끝내라는 것이었다. 이부분을 모르는 것은 아니었다. 나는 회사에 처음 들어가 분위기를 살핀다는 차원에서 나름 ‘안전하게’ 접근한건데 굳이 그럴 필요가 없다는 말을 들었으니 이부분은 고치기가 정말 쉬웠다. 내가 업무상 의견교환시 상대방의 기분을 그렇게까지 생각하는 타입은 아니라서 원래 내가 하던데로 돌아오니 나도 편하고 상사도 이런 나의 바뀐 부분을 금방 알아차렸다. 하지만 나와 차에 동승하고 있던 회사동료는 수개월이 지났는데도 아직도 나를 지나치게 남의 입장을 배려하는 사람으로 생각하고 있었다.</p><p>선입견이 이렇게 무서운 것이다. 특히 누군가가 나에 대한 고정관념이 생기면 그것을 바꾸기는 정말 쉽지않다. 내가 아무리 바뀌었다고 해도 상대방이 굳이 나에게 관심을 가지고 유심히 관찰하지 않기 때문에 아무리 내 행동이 바뀌었다고 해도 나에 대한 고정관념은 내가 원하는 것보다 훨씬 오래간다.</p><p>이런 고정관념을 빠르게 바꾸어 줄수 있는 것이 바로 동료와의 peer review 이다.</p><p>조금전의 예를 들어서 동료가 나에게 준 피드백을 들으면 ‘아니야 나 바뀌었어’ 라고 부정을 할것이 아니라 나름 동의를 하며 앞으로 개선할것 이라는 뉘앙스를 풍긴다. 바로 이때부터 동료는 그부분에 있어서 나를 유심히 관찰하게 된다. 나에 대한 impression 을 reset 한다고 하는데 나에 대한 고정관념을 바꾸는데 가장 빠르고 효과적인 방법이다.</p><p>그럼 그날 이후에 나는 어떻게 했을까? 아무것도 한것이 없다. 그냥 평소에 내가 하던데로 행동하면 된다. 이미 나는 이부분을 오래전에 고쳤기 때문에 나의 이런 부분을 상대방이 자발적으로 관찰하게끔 하면 되는 것이다.</p><p>그리고 2주 후에 그와 가볍게 차를 마시며 그부분에 대해서 다시 물어봤는데 엄지 손가락을 치켜들며 정말 빨리 바꿨다고 신기해하였다. 사람의 심리라는 것이 흥미롭다 🙂</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=209ba5cdd7e6" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[커리어 바꾸기 (Career Pivot)]]></title>
            <link>https://medium.com/@kpak/%EC%BB%A4%EB%A6%AC%EC%96%B4-%EB%B0%94%EA%BE%B8%EA%B8%B0-career-pivot-e9d333a1b76?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/e9d333a1b76</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Tue, 21 Aug 2018 23:01:27 GMT</pubDate>
            <atom:updated>2018-08-22T01:46:24.364Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*nDcxSkCfe4e6vmQx-ho3yw.jpeg" /></figure><p>이제 링크드인에서 내 업무의 상당부분이 데이터 관련일이 되었다. 처음에 이쪽으로의 커리어 피봇을 생각하고 링크드인을 선택한 이유가 컸었는데 나름 계획되로 되가고 있는것 같다. 나는 지금까지 기술적으로는 기계공학, 전자공학, 소프트웨어 (펌웨어, UI, backend) 그리고 engineer, engineering manager, 창업자, 컨설턴트등의 직업을 거치면서 크고작은 커리어 피봇을 여러번 경험하였다. 이 과정에서 많은 실수를 거치면서 깨달은 점이 있다. 내가 새로운 일을 하려고 할때 그일에 필요한 기술을 실제로 가졌느냐도 중요하지만 이것 못지않게 중요한 것이 내가 그일을 시작할때 주위에서 나를 얼마나 신뢰할수 있느냐 하는 것이다 . 결국에 새로운 일을 할때 어느정도 규모 있는 프로젝트를 하기 위해서는 소속팀이나 회사에서 그 기회를 나에게 줘야 하는 경우가 대부분이기 때문이다.</p><h3><strong>새로운 것을 금방 배울수 있다 (fast learner) 는 명성 (reputation) 을 쌓는다</strong></h3><p>내가 새로운 일을 함에 있어서 지난 몇개월, 혹은 몇년간 퇴근후에 틈틈히 온라인 클래스도 듣고 사이드 프로젝트를 했다고 해도 다른 사람이 보기에는 다른 왕초보와 비교해 어차피 50보, 100보로 보여진다. 풀타임으로 그일을 하기 위해서 다른 사람들에게 훨씬 더 큰 믿음을 주는 것은 지금 내가 가지고 있는 능력이 아닌 내가 얼마나 새로운 일을 빨리 배울수 있는 능력이 있는가이다. 즉 fast learner 의 명성이다. “쟤는 저분야를 조금 아네” 보다 “쟤는 저걸 해도 분명히 빨리 배울꺼야” 라는 명성이 훨씬 효과적이다. 이런 명성을 쌓는데는 여러가지 방법이 있지만 효과적인 방법 2가지 소개 -</p><p>첫째, 나에게 들어온 네거티브 피드백을 바로 수정할수 있는 능력</p><p>새로운 것을 배운다는 것은 자신이 현재 모자란 부분을 얼마나 빨리 채울수 있는지가 중요하다. 나같은 경우에는 새로운 일을 할때 이쪽 분야 사람들과 최대한 자주 1:1 을 하여 내가 현재 부족한 부분을 최대한 많이 알아내려고 애쓴다. 그리고 다음과 같이 차트를 만들어서 피드백, 해야 할것, 내가 한것등으로 나누어서 다음 1:1 때 이부분에 관한 업데이트를 해준다. 이렇게만 하더래도 나는 정말 유연한 태도를 가지고 있다라는 인식을 주기 때문에 새로운 분야를 배우기 위해 가장 중요한 유연성에 관한 신뢰를 얻게 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wp9SlA_KNOZf1yUiFWn79g.jpeg" /><figcaption>내가 받은 피드백과 action item 을 정리해 놓은 차트</figcaption></figure><p>둘째, 새로운 분야 (uncomfortable zone) 에 뛰어드는 것을 두려워 하지 않는 능력</p><p>Comfortable zone 밖으로 나가는 것이 커리어를 바꿀때 중요한 것임은 두말할 나위 없다. 꼭 자신이 하고 싶은 분야에서만 이런 능력을 입증할 뿐만 아니라 평소에 ‘나는 어떤것이라도 새로운 것을 시도하는 것을 즐긴다’ 라는 명성을 쌓는 것이 중요하다. 나같은 경우에는 좀 황당한 얘기이지만 한번은 내가 개발한 기능을 소개할때 좀 획기적으로 해보자라는 생각에 짧은 영화를 만들었다. 그래서 부서에서 친하게 지내는 동료들도 직접 배우(?)로 섭외하고 시나리오도 직접쓰고 유투브에서 촬영기법같은 것도 배우면서 스토리가 담긴 짧은 영화(?)를 만들었는데 이런것들이 계속 쌓여서 주위사람들로 하여금 ‘새로운 일 시켜도 잘하겠다’ 라는 인식을 만드는데 큰 도움이 된다. 한가지 노하우는 Comfortable zone 밖으로 나가는 것은 타고난 용기같은게 아니라 습관으로 길들여 지는 부분이 훨씬 크다는 것. 이런 기회는 일상생활에서도 얼마든지 찾을수 있다. 회의를 이끌어 가는 것, Toastmasters 에서 퍼블릭 스피킹을 하는 것, 하다못해 길거리에서 마음에 드는 이성에게 다가가 연락처를 물어보는 것까지 모두 다 도움이 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*54Eseb_vn7RQ10InLU3_Vw.png" /><figcaption>기능소개영화의 도입부분</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*I6IqbiJ_wbsr2Xb5LCZnOg.jpeg" /><figcaption>기능소개영화의 한장면</figcaption></figure><h3><strong>초반에는 절대 나서지 않는다.</strong></h3><p>일단 이렇게 해서 새로운 일을 시작하면 초기에는 관찰자의 입장에서 소위 ‘나대지 않는 것’ 이 중요하다. 주위에서 본 많은 사람들 경우 회사에 처음 입사하거나 새로운 분야를 배울때 자신의 능력을 빨리 증명해 보이려 회의등에서 ‘잘난척’ 혹은 ‘아는척’ 을 하는 것을 볼수 있다. 나름 자신의 영역을 구축하고 빨리 인정받고 싶어하는 점은 이해하지만 주위에서 신뢰를 잃는 가장 빠른 지름길이다. 먼저 내가 초반에 아는척을 해대면 설마 그것이 실력에서 나오는 것이라고 하더라도 상대방이 보기에는 그저 ‘튀고싶어 애쓰는’ 캐릭터로 보일뿐이다. 이런 캐릭터는 다시말해 감정적으로 행동하는 사람으로 비추어지고 사회생활에서는 감정적으로 행동하는 사람이야말로 가장 신뢰가 안가는 사람들이다. 설상 이런 행위들로 초반에 주위에서 칭찬을 듣는다고 하여도 이런것들은 아무도 기억못하는 순간적인 것들이다. 여기에 현혹되면 안된다. 소위 ‘좌충우돌’ 이라는 단어로 초반에 열정적으로 나서며 실수하는 것을 미화시키는 경우를 볼수 있는데 이것은 그다지 좋은 명성이 아니다. 어느정도 탄탄한 입지가 쌓일때까지 조용히 관찰하는 것이 최선이다.</p><h3><strong>자신의 강점을 내세워 한분야를 파고든다.</strong></h3><p>이렇게 어느정도 관찰이 끝나면 그 안에서 자신의 강점과 연결시킬수 있는 부분이 생긴다. 나같은 경우에는 데이터쪽 사람들과 일할때 qualitative analysis 능력이 나의 강점이다. 나는 주로 consumer 서비스들을 개발하였기 때문에 제품이나 서비스를 보면 특정 metric 은 잘못된 결정으로 도출될수 있다라는것에 대한 약간의 ‘감’이 있다. 그래서 데이터쪽에서 나온 결과를 액면 그대로 받아들이지 않고 항상 usability vs. usefulness 를 분석하고, 실제 사람들이 서비스를 이용하는 것을 내 눈으로 직접 관찰한 후에 데이터와 연결시키려 한다. 이런 부분에 대해 얘기를 해주면 내가 그쪽 백그라운드를 가지고 있다는 것을 알기 때문에 내말에 훨씬 신뢰를 하고 나의 이런 강점들과 연결된 일을 하면 그부분에 대해서는 내가 나름 이분야에서는 독보적이기 때문에 짧은 시간안에 많은 경력을 쌓은 사람들과 동급으로 보여질수가 있다.</p><h3><strong>어느쪽으로 커리어 피봇을 해야 하는가?</strong></h3><p>마지막으로 어느쪽으로 커리어 피봇을 해야 하는지에 관한 나의 생각. 내 자신의 능력은 하나가 아닌 작은 여러능력들의 복합체이다. 가령 나를 예로 들자면 나의 기술은 영어, 한국어, 소프트웨어, 글쓰기, 실리콘밸리에 대한 지식/이해 등이다. 이런 기술들중 한국어, 글쓰기, 실리콘밸리에 대한 지식의 합이면 실리콘밸리의 소식을 한국에 전하는 블로거가 되는 것이고 영어와 소프트웨어의 합이면 실리콘밸리의 개발자가 되는 것이다. 이처럼 자신이 가진 많은 micro skills 들중 부분적 혹은 종합적 combination 이 세상의 직업들과 어떻게 연결될수 있는지에 대한 생각을 하는 것이 자신의 직업, 혹은 사이드 프로젝트를 찾는데 도움이 될수 있다고 생각한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e9d333a1b76" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[엔지니어들과 비엔지니어들의 커뮤니케이션 방법 2가지]]></title>
            <link>https://medium.com/@kpak/%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%93%A4%EA%B3%BC-%EB%B9%84%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%93%A4%EC%9D%98-%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B0%A9%EB%B2%95-2%EA%B0%80%EC%A7%80-6f16992dd4e0?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/6f16992dd4e0</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Mon, 30 Jul 2018 03:23:33 GMT</pubDate>
            <atom:updated>2018-07-30T03:23:33.734Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_-jvH3HjkNO7qRpYLjzkiQ.jpeg" /></figure><p>가끔 엔지니어와 비엔지니어가 커뮤니케이션하는 것을 보면 아쉬운 점들이 있다. 내 경험상 이 두 그룹의 사람들이 커뮤니케이션할때 중요한 것 2가지를 얘기해 본다.</p><h3>What You Know, What You Don’t Know, What You Think</h3><p>이 말은 전 미국국무장관 이었던 Colin Powell 이 한말로 유명한데 그는 어떤 사건에 관해서 상대방과 얘기를 할때 다음의 포맷을 썼다고 한다.</p><p>Tell me what you know. (너가 아는 것을 말해보라)</p><p>Tell me what you don’t know. (너가 모르는 것을 말해보라)</p><p>Then tell me what you think. (너 생각을 말해보라)</p><p>Colin Powell 은 주로 보안과 관련된 context 에 관해서 전략등을 짤때 위의 커뮤니케션이 효과적이었다고 하는데 위의 방법이야말로 엔지니어들이 커뮤니케이션을 할때 가장 명확히 해야하는 방법이다. 엔지니어들의 포맷에 맞게 조금 바꾸자면 -</p><p>1. This is something I know for sure (내가 확실하게 알고 있는 사실)</p><p>2. This is something I have no idea of (내가 전혀 모르고 있는 것)</p><p>3. This is something I’m guessing based on my knowledge (내 지식에 근거해서 추측하고 있는 부분)</p><p>엔지니어들은 주로 1번과 3번을 섞는 경우가 많고 심할 경우에는 2번을 1번으로 혼동하여 말하는 경우도 많이 있다. 엔지니어들은 특정 질문데 대한 답을할때 본인이 바로 며칠전에 직접 해봐서 기록으로 남아있지 않은 것이라면 2번 (내가 전혀 모르는 것) 혹은 3번(내 지식에 근거해서 추측)에 들어간다. 이중에서 3번(내 지식에 근거한 추측)이 가장 큰 부분을 차지한다. 수치화하기는 쉽지 않지만 경험상 ‘확실한 사실’ 은 30% 정도에 불과하다. 40%는 추측에 근거한 대답이고 나머지 30% 정도는 아예 모르는 부분. 그런데 많은 경우 엔지니어들은 질문을 받으면 팩트로 대답을 해야하는 일종의 강박관념 같은 것이 있다. 이부분은 물어보는 사람들이나 회사문화에도 문제가 있다. 비엔지니어가 엔지니어에게 물어볼때 뭔가 확실한 대답을 얻지 못하면 답답해 하는 경우가 많고 심한 경우 그 엔지니어가 무능하다고 생각한다. 이러니 종종 엔지니어들은 추측하는 부분을 사실처럼 말하는 경우가 있다 (실제로 혼동하는 경우도 많지만). 이것이 큰 생산성 소모와 시간낭비로 이어진다. 엔지니어가 어떤 특정질문에 대해서 실제로는 추측이지만 사실처럼 얘기를 했는데 그것이 잘못된 정보로 밝혀질 경우 그 다음부터는 그 엔지니어가 팩트라고 해도 늘 사실확인을 다시 해야하는 불편함이 생긴다. 하지만 이 3가지를 확실히 구분해서 말을 해주면 그 엔지니어가 추측이나 모른다고 하는 부분만 확인을 하면 되니 위의 수치상으로는 무려 30% 의 생산성 증가가 있는 셈이다. 나같은 경우에는 비엔지니어들과 대화할때 이부분을 확실히 명시해 둔다. 내 대답은 3가지의 카테고리중 어느부분이라고. 그리고 추측이나 모르는 대답일 경우 확인사실을 위해서는 약 얼마간의 시간이 필요하다고 얘기한다. 이정도만 하더라도 비엔지니어들과의 신뢰를 쌓는데 큰 도움이 된다. 추측이면 추측이고, 모르는 것이면 모른다고 당당히 말해도 전혀 거리낌이 없는 문화가 중요하다.</p><h3>두번째: 이 기능은 개발이 가능한가요?</h3><p>내가 본 몇몇 회사의 경우 아이디어 회의때 엔지니어들을 동반하지 않는 경우가 있다. 이유는 엔지니어들은 아이디어 회의나 기능에 관한 대화를 시작할때 그것이 기술적으로 가능한지 안한지를 먼저 생각한다는 것이다. 비엔지니어들이 이렇게 생각하는것을 나는 어느정도 이해한다. 나도 기능에 관한 아이디어를 얘기할때 기술에 대해서 아예 모르는 사람들은 좋다고 하는 경우가 많이 있는데 엔지니어들은 그 얘기를 듣자마자 머릿속에 구현을 먼저 생각하니 그 기능 자체의 유용성에 관한 생각은 뒷전으로 되버리는 것. 이럴때 내 경험상 의외로 간단한 해결방법이 있다. 회의나 대화전에 다음의 순서에 맞게 대답을 하게 하는 것이다.</p><p>1. Is this a good feature to develop? (기술적 구현을 다 떠나서 이것은 있으면 좋은 기능인가요?)</p><p>2. Then, can we develop it technically? (좋은 기능이라면 기술적으로 구현이 가능한가요?)</p><p>3. Then, when should we develop it? (기술적으로 구현이 가능하다면 언제 개발을 하는게 좋을까요?)</p><p>위의 순서에 따르자면 특정 기능을 얘기할때 일단 기술적 구현은 모두 잊어버리고 오로지 그 기능의 유용성만 생각한다. 여기서 통과가 되면 일단 그 기능은 to-do list 에 들어가는것. 그래서 2번째 기술적 구현을 얘기할때 불가능 하다면 바로 대화를 끝내면 된다. 많은 경우 IT 업계의 특성상(가파른 기술력 증가) 기술적 구현이 몇개월 혹은 몇주안에도 가능해질때가 많다. 하지만 처음부터 기술구현의 불가능으로 아예 리스트에도 있지 않다면 영원히 개발이 안되는 경우가 있다. 그 다음 기술적 구현에 관한 얘기를 할경우 많은 엔지니어들은 ‘저 기능을 만들기 위해서는 사람이 얼마나 많이 필요한데..’ 라는 생각으로 기술적 구현이 가능함에도 부정적으로 얘기하는 경우가 종종 있다. 그래서 3번의 질문이 있는 것. 기술적 구현도 가능하다고 하면 다음 ‘언제 개발하는 것이 좋은가?’ 라는 질문으로 지금 당장의 리소스로도 구현이 가능하다면 OK 인 것이고 상황이 힘들다면 역시 to-do list 에 올려놓는다. 그러면 언젠가 그 개발에 필요한 보충인력이나 자본이 확보되면 바로 개발을 할수 있는 상태가 되는 것이다. 여기서도 역시 엔지니어들의 커뮤니케이션 만큼 중요한 것이 비엔지니어들의 태도와 회사문화이다. 예를들어 특정기능에 관한 기술적 구현이 가능하다고 대답하면 ‘그럼 당장 개발하죠’ 라는 쉬운 대답이나 ‘엔지니어인데 이정도는 당연히 만들어야지&#39; 라는 생각보다 현재의 리소스로 개발이 가능한지에 관한 대화가 뒤따라야 한다. 많은 경우 엔지니어들은 ‘개발이 가능합니다&#39; 라는 대답을 하면 비엔지니어들이 바로 당장 개발을 하자는 의견을 보여서 당혹스러워 하니 실제와 다르게 대답하는 경우가 종종있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6f16992dd4e0" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[훌륭한 팀원의 조건 - Strong Views, Weakly Held]]></title>
            <link>https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%ED%8C%80%EC%9B%90%EC%9D%98-%EC%A1%B0%EA%B1%B4-strong-views-weakly-held-17880611d962?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/17880611d962</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Sat, 07 Jul 2018 12:12:39 GMT</pubDate>
            <atom:updated>2018-07-09T05:28:41.782Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Gq39BIKnEiJ3jPF6tnqaeA.jpeg" /></figure><p>예전에 같이 일을 했던 팀원중 출중한 능력을 지닌 사람이 있었다. 늘 탁월한 결정능력으로 자신이 속한 부서마다 사람들로부터 두터운 신임을 받고 있었다. 하지만 처음에 내가 그사람과 일을 할때는 많이 혼란스러웠다. 간단한 일화소개. 그 당시 개발중이던 제품의 센서를 A 와 B 중 하나로 선택해야 했다. 그 사람은 A 를 강하게 주장하고 나는 B 를 주장하여 의견이 팽팽하게 맞섰다. 나는 미팅이 끝난후 어떻게든 내가 더 옳다는 것을 증명하려 B 가 왜 A 보다 더 나은지 열심히 리서치를 하였다. 그런데 그 다음날 그가 나에게 오더니 ‘자기가 조사를 해보니 B 가 더 나은것 같다. B 로 하자&#39; 라며 입장을 급선회한다. 그날 같이 점심을 먹으며 그 사람에게 물었다. 왜 생각을 바꾸게 되었냐고… 그 사람도 그날 미팅이 끝난후 나처럼 리서치를 했다고 한다. 하지만 리서치의 방법이 나와 정반대였다. 나는 내가 주장하던 ‘B 가 A 보다 더 나은 이유&#39; 를 증명하는 자료를 찾았고 그 사람은 자신이 주장하는 ‘A 가 B 보다 낫다&#39; 라는 의견과 반대되는 자료, 즉 ‘B 가 A 보다 더 낫다&#39;, 에 관한 자료를 찾는데 시간을 썼다. 그러면서 나에게 Strong Views, Weakly Held 라는 개념을 설명해 주었다. 내 방식대로 일하면 반대의견을 조사할수가 없으니 언젠가는 잘못된 결정을 내릴 가능성이 크고 자신의 방식은 늘 상반되는 의견을 동일하게 조사하니 옳은 결정을 내릴 가능성이 크다는 것이었다. 과연 이 사람은 어떠한 일에 있어서도 처음에는 자신의 생각과 의견을 강하게 말하지만 늘 반대되는 의견을 바로 깊게 공부하여 그 결과에 따라 어떤때는 자신의 의견을 고수하고 어떤때는 반대되는 의견을 바로 수용한다. 그리고 그렇게 상반되는 의견의 정보들을 모두 이해하고 있어서 다른 팀원들도 그가 마지막에 내리는 결정에 깊은 신임을 하였다.</p><h3>고집불통 vs. 초식남녀</h3><p>실리콘밸리 테크회사들의 구성원들은 제품을 기획하고 만드는 것이 주된 업무이다. 그리고 이런 제품개발의 과정은 끊임없는 결정의 연속이다. 소프트웨어 아키텍쳐, 다음 버젼에 들어갈 기능들, 그리고 홈페이지에 있는 버튼의 위치와 색깔까지 팀원들은 끊임없이 토론하고 대화를 한다. 이런 과정에서 매사에 자기의 의견이 강한 사람들이 있다. 이런 사람들은 이런 강한 의견을 바탕으로 좋은 실행력을 보일수도 있지만 고집이 세서 소통이 힘들수도 있다. 반대로 특별한 자신의 의견없이 팀이 내린 결정에 대체적으로 순응하며 잘 따라오는 사람들이 있다. 이런 사람들은 팀의 화합에 좋은 역할을 할수도 있지만 결정 능력이 부족하여 제품개발에 차질을 빚을수도 있다.</p><p>재미있는 것은 실리콘밸리의 많은 구성원들은 자기의견이 강한 사람들이 좋은인재라는 일반적인 견해가 있다. 이말은 대체적으로 맞는 말이지만 여기에는 한가지 절대적인 조건이 따른다. 강한 의견, 즉 Strong Views, 는 그 의견에 반대되는 정보와 팩트가 나타나면 즉각 자신의 입장을 바꿀수 있는 유연성을 지녀야 한다는 것이다. 위에서 말한 Strong Views, Weakly Held — 즉 강한의견을 가지되 입장을 바로 바꿀수 있는 유연함을 지녀야 한다는 것이다.</p><h3>하지만 많은 사람들은 Strong Views, Strongly Held 혹은 Weak Views, Weakly Held 의 태도를 가지고 있다.</h3><p>자신들의 의견이 강한 사람들은 자신이 믿는대로 결정이 내려지기를 원한다. 그래서 반대되는 의견이 나왔을때 대부분의 시간을 자신의 의견이 옳다는 정보와 데이터를 수집하는데 쏟는다 (내가 사회생활 초기에 그랬던 것처럼). 또한 이런 사람들의 특징은 자신들이 open mind 라고 착각(?)하고 있다는 것이다. 이러니 소통이 힘들어 질수 밖에 없다. 자신들의 의견은 A 인데 B 가 더 좋다는 증거가 있으면 그렇게 할 의향이 있다고 말하지만 실제로 B 는 절대로 더 좋을수 없다는 생각이 밑바닥에 깔려있다. 전형적인 Strong Views, Strongly Held 에 속한다. 반대로 자신의 의견이 너무 약한 사람들은 여러 다른 의견들에 휘둘릴 가능성이 크다. 하지만 이런 사람들 또한 자신은 open mind 이지 자신의 결정능력이 약하다고 생각하지 않는다. 양쪽 다 같이 일하기 힘든 구성원들이다. 재미있는 것은 내 경험상으로 대부분 사람들은 이 둘중 하나에 속한다는 것.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/760/1*J2Za-0I2KbiushF90Q-_kw.jpeg" /></figure><p>Amazon CEO 인 Jeff Bezos 가 자신이 투자한 회사에 가서 다음과 같은 advice 를 주었다고 한다.</p><p>“The people who are right a lot often change their minds.” — 옳은 사람들은 자신의 생각을 자주 바꾼다.</p><p>나는 Jeff Bezos 의 이 말이 Strong Views, Weakly Held 를 그저 다른 문장으로 표현한 것이라고 생각한다.</p><h3>그럼 팀원들과 여기에 관해 어떻게 설명할 것인가?</h3><p>이렇게 Strong Views, Weakly Held 태도가 많은 경우에 긍정적인 효과를 내지만 중요한것은 초기에 팀원들과 여기에 관해 sync 가 되있어야 한다는 것. 아무래도 어느날 특정안건에 대해 강한 의견을 표출하다 다음날 태도를 바꾸면 팀원들이 의아해 할수가 있다는 것이다. 나같은 경우에는 주로 1:1 시간에 한명씩 여기에 관한 내 생각을 다음과 같이 말함으로써 팀원들의 동의를 얻는다.</p><p>“Hey. Let me tell you something. You will see me having relatively strong opinions on many things — whether it’s coding, feature, design, or whatever. At the same time, when someone counters my opinions, you may see me changing my opinions the next day. It doesn’t mean I’m a flip-flop, or crazy. When someone counters my opinions, I actively collect information which proves them right, not the other way around. After all the information and data, I may still stick to my original stance, or flop to the opposite. It’s called strong views and weakly held - something I strongly believe in.”</p><p>위와 같이 말하면은 내가 입장을 바꾸어도 모든 팀원들이 이해하고 또 내가 끝까지 고집을 피울때는 충분한 리서치를 한 후에 내린 결정이라 대부분의 경우 그 결정을 신뢰하게 된다.</p><p>훌륭한 팀원이 되는 기술 — Strong Views, Weakly Held</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GAsjKLsNM_o2j5E3i8HxRQ.jpeg" /></figure><p>여담으로 최근에 지인들과 하늘을 나는 자동차가 대중화 될것인지에 대해 토론을 벌인적이 있다. 나는 하늘을 나는 자동차는 워낙에 에너지 소비가 많기 때문에 실용성과 비용면에서 대중화가 힘들다는 의견을 강하게 내놓았다. 그리고 집에 돌아간후 바로 하늘을 나는 자동차의 상용화에 긍정적인 자료를 살펴보았다. 결론은 현재는 전기로 가는 하늘 자동차는 베터리의 에너지 소비가 너무커서 실용성이 크지는 않지만 베터리 에너지기술은 역사적으로 다른 기술에 비해 그 발전이 상당히 느리다는 것. 미국 정부가 석유를 회사, 개인들에게 워낙에 싸게 공급하기 때문에 아직까지 이쪽 부분의 기술발전이 더디다는 것이다. 결국 베터리 기술이 발달되면 어느시점에 tipping point 를 넘어서서 하늘을 나는 자동차도 실용성을 충분히 갖추게 될것이라고 한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=17880611d962" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[관종과 연애의 법칙]]></title>
            <link>https://medium.com/@kpak/%EA%B4%80%EC%A2%85%EA%B3%BC-%EC%97%B0%EC%95%A0%EC%9D%98-%EB%B2%95%EC%B9%99-9400843640dc?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/9400843640dc</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Sat, 23 Jun 2018 08:47:00 GMT</pubDate>
            <atom:updated>2018-06-23T08:47:00.733Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/540/1*5H2SVJjQAgi-qABE0sAOFw.jpeg" /></figure><p>이제 블로그를 쓴지도 1년이 넘어간다. 주위에서 블로그나 SNS 를 활발하게 하시는 분들을 보면 다들 그 이유와 목적이 다르더라. 순수하게 남들에게 도움을 주고 싶어하시는 분, 단순히 본인들의 이야기를 공유하고 싶으신 분, 혹은 본인이 하시는 일에 직/간접적으로 도움을 얻고자 하시는 분등 그 목적이 다양하다. 나도 처음에는 그저 내가 가지고 있는 생각들을 일기처럼 쓰고자 하는 생각에 블로그를 시작하였다. 그래서 초창기에 쓴 글들을 보면 정치, 동양철학등에 관한 글들을 많이 썼다. 그러다가 몇시간, 혹은 며칠을 공들여서 쓰는 글인데 조회수 20, 30 이렇게 나오는게 억울해서 어느날 우버/리프트 운전사 경험기, 페이스북 마케팅의 노하우 같은 보다 ‘현실적’ 인 글들을 썼는데 나름 괜찮은 반응들이 나오고 공감을 얻어서 그 다음부터는 보다 대중성이 있는 주제들에 관심을 가지게 되었다. 요즘 말하는 ‘관종’ 의 카테고리에 내가 들어가 있는듯 하다.</p><p>이런 경험들이 처음이고 신기해서 가끔 SNS 에서 영향력 있는 사람들의 패턴을 관찰해 보기도 한다. 이렇게 나의 경험, 관찰등을 통해 몇가지 결론을 얻었는데 SNS 에서 사람들과 소통하는 것은 연애의 법칙과 상당히 비슷하다는 것. 여기에 관해 몇가지 말해본다.</p><h3><strong>예측하기 쉬운 행동은 금방 싫증이 난다.</strong></h3><p>인스타그램에서 독특한 영상촬영과 편집기법의 마술동영상으로 큰 인기를 얻고 있는 Zach King. 온라인상에서 가장 영향력 있는 스타중 한명이다. 초창기에는 편집기술을 이용한 마술동영상으로 큰 인기를 얻었다. 문제는 이런 종류의 동영상들은 몇번 보면 금방 질린다는 것. Zach 는 이부분을 정확히 알고 관객들이 지루해 하는 것을 느끼면 패턴을 바꾸어 가며 늘 새로운 콘텐츠를 제작한다. 예를들어 최근에는 루빅큐브로 착시현상을 보여주며 편집된 동영상이 아닌 무편집의 동영상을 올려서 큰 인기를 끈적이 있다. 이게 단순해 보이지만 편집동영상으로 스타가된 그가 전혀 편집이 안된 동영상을 제작한다는 것 자체가 독자들의 예상을 깨버리는 극단적인 선택이고 사람들은 예측을 할수 없는 그의 다음 콘텐츠를 간절히 기다리며 그에게 열광한다. 자신이 다음에 할 행동을 대중들이 쉽게 예상할수 있을때 매력과 호감은 떨어진다.</p><p>연애도 마찬가지. 처음에 얼굴이 잘생기거나 예뻐서 초반에 호감가는 사람들의 인기가 금방 식는 이유는 그런 멋진 사람들에게서 나오는 말투나 행동은 예측하기가 쉽다는 것. 대부분 정제된 행동, 혹은 ‘후까시’ 잡는 행동들이다. 이런 예측 가능한 행동들은 그 사람에 대한 싫증을 금방 느끼게 한다. 모범생일것 같은 사람이 클럽에서 미친듯이 춤추고, 날라리 일것 같은 사람이 열심히 일하는 모습을 보일때 사람들이 호감을 느끼는 이유가 이것이다. 예상과는 다르게 행동하는 모습에 매력을 느끼고 그 사람의 다음에 대한 행동이 기대가 되는 이유이다.</p><p>요즘에 하트시그널에서 큰 인기를 얻고 있는 김모군. 몇몇분들이 ‘나쁜남자&#39; 라서 매력이 있다고 하지만 세상에 나쁜사람을 좋아하는 사람은 없다. 동영상을 보니 이분의 가장 큰 매력은 행동과 언변이 예측하기 힘들다는 것. 그래서 상대방을 늘 긴장시키고 애를 태운다. 연애의 정석이라 볼수 있다. 오늘 뉴스를 보니 하트시그널 특별방송을 하는데 이분만 출연하지 않는다고 하더라. 이것만 보더라도 여기에 출연하는 다른 아마추어들과 이미 레벨이 다르다.</p><h3>논란을 일으킨다. 나쁜 명성은 큰 매력을 가져다 준다.</h3><p>내가 쓴 블로그들 중에서 많은 논란으로 포스팅한지 3일만에 내린 글이 있다. 실리콘밸리를 대표하는 공유경제관련 회사에서 받은 오퍼와 연봉공개. 글을 쓰자마자 조회수가 폭등하며 수많은 사람들에게 친구신청, 팔로잉을 받았다. 흥미로운 것은 이 글에 대한 많은 피드백이 부정적이 었다는 것이다. “자기과시하고 싶은 관종” “헬조선에서는 어떻게 살라는 말이냐” “소송당하지 않냐” 등등. 사내정치에 관한 블로그도 마찬가지였다. 그당시 받은 피드백들중 ‘어쩜 그리 정치적으로 생활하냐&#39;, ‘계산적이다&#39; 등의 표현들이 있었다. 확실한 것은 이후 모임등에서 블로그를 읽고 먼저 다가와서 인사해주는 사람들이 늘었다는 것. 이런 글들을 부정적으로 보든, 긍정적으로 보든 호기심을 느껴서 나와 거기에 관해 얘기해보고 싶다는 것 자체가 PR 로 봐서는 성공한 셈. There’s no such thing as bad publicity.</p><p>연애도 마찬가지. 주위에서 보면 이사람 저사람 다 만나면서 논란을 일으키며 뒤에서 욕을 먹는 사람들이 있다. 어찌보면 부정적인 이미지라고 보여질수도 있지만 많은 사람들은 그런 이성이 나에게 다가오면 어떨까하는 심리가 있기 마련이고 이러한 호기심은 그 사람에 대한 매력을 증가시킬 뿐이다. 그리고 그런 사람이 화려한 언변으로 다가오면 설사 진실성이 보이지 않다고 하더라도 무장을 해제하기 마련이다.</p><p>내가 사는 실리콘밸리는 한국인 사회가 워낙에 좁아서 말 그대로 한다리 건너면 다 안다. 많은 싱글들이 이런점 때문에 안좋은 소문이 많이 날까봐 두렵고 연애하기가 조심스럽다고 한다. 여기에 관한 나의 대답은…</p><p><strong>“Be</strong> <strong>Fearless”</strong></p><p>많은 이성을 만나서 나는 소문들은 궁극적으로 좋은 결과를 가져올때가 훨씬 많다.</p><h3>튀어나온 못은 지인들 포함 주위에 적들을 만든다.</h3><p>연애할때 위처럼 소위 ‘난잡한&#39; 행동을 하면 아무래도 주위에서 소곤대고 욕을 하기 마련이다. 이런 상황에서 자연스럽게 적을 만들기 마련인데 이런것을 ‘질투나서 저래’ 라며 무시하는 것 또한 옳은 자세가 아니다. 결국 주위에서 자신을 싫어하는 사람들이 많아지면 외로워지고 어느순간 이런 여론들이 대세가 되면 매력또한 크게 떨어진다.</p><p>마찬가지로 블로그, 인스타, 패북을 통해서 작더라도 어느정도 ‘인기&#39; 를 얻으면 지인들 포함 몇몇 사람들은 적으로 돌아선다. 본인들에게 직접 말을 하지는 않지만 다른 곳에서 그들의 안좋은 말을 할 확률이 높다. 여기서 처신을 잘해야 한다는 것. 이렇게 주위의 조용한 적들은 안보이는 피해를 끼칠확률이 높다. 그들과 맞서지 않고 받아주고 들어주는 겸손함이 중요하다.</p><h3>자신에 대한 솔직한 피드백은 구하기 어렵다.</h3><p>위처럼 튀는 행동을 하더래도 주위의 지인들은 직접적으로 나쁜말을 하지는 않는다. 아무래도 친구들이고 가까운 사이니 오히려 좋은 말을 해줄때가 훨씬 많다. 그런 말들도 물론 진심이겠지만 그 외에 반대되는 부정적인 의견들은 어떤 것들이 있는지 현실감을 찾는게 중요하다. 가끔씩 패북등에 거침없이 극단적이고 편향된 의견들을 여과없이 매일같이 내뱉는 분들이 계시는데 어쩌면 주위에 ‘쓴소리&#39; 하는 사람들이 없어서 그럴수 있다는 생각도 해본다.</p><h3><strong>‘잘나가는 사람들’ 과의 스캔들은 매력을 극대화 시킨다.</strong></h3><p>Kim Kardashian. 미국에서 가장 영향력 있는 리얼리티스타. 평범한 일반인이 었던 이분이 순식간에 유명세를 탄것은 유명 랩퍼 Ray J 와의 섹스비디오 때문이다. 인지도도 없고 유명하지도 않던 그녀는 이렇게 인기연애인 Ray J 와의 스캔들을 통해서 자신을 하루아침에 그와 동일한 레벨로 만들며 미국을 강타한다.</p><p>혹은 잘나가는 사람들을 비난하여 온라인상에서 서로 치고 받는 경우가 있는데 이것 또한 명성을 쌓는데 큰 도움이 된다. 구경꾼들의 입장에서는 두 사람의 사회적 지위야 어쨌든 두 사람이 링위에서 싸우니 많은 경우 동격으로 인정해주는 경우가 많다. 굳이 누군가를 비난하고 싶으면 기왕이면 제일 위에 있는 사람을 골라서 치는 것이 핵심이다.</p><p>연애할때도 마찬가지. 질투라는 것은 연애할때 상당히 건강한 심리상태이다. 주위에서 가장 잘생기거나 예쁜 사람들과 엮이는 것만큼 그 사람의 매력을 극대화 시키고 질투를 유발시키는 것이 없다.</p><h3>멈출때를 아는 것이 중요하다</h3><p>온라인 활동에 집착하면 그 다음에는 하루라도 소셜활동을 안하면 공든탑이 금방 무너질것 같은 초조함, 불안감에 휩싸이게 되는 경우가 있다. 이러한 집착은 다른 사람들이 금방 알아차리고 그 순간 매력은 급속도로 떨어진다.</p><p>연애도 마찬가지. 집착만큼 그사람을 비호감으로 만드는것 또한 없다. 적당한 거리를 두면 둘수록 상대방은 나에게 다가오려고 한다.</p><h3>Listen</h3><p>마지막으로 가장 중요한 것이 상대방의 말에 귀를 기울여 진심으로 듣는것. 듣는것은 상대방에게 호감을 준다. 듣는것은 상대방의 자존감을 높혀준다. 듣는것은 내가 이기적이지 않고 상대방을 배려한다는 것을 간접적으로 보여준다.</p><p>관종의 법칙을 잘 이해하고 따르는 사람들이 연애도 잘하는 이유다 :)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9400843640dc" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[훌륭한 소프트웨어 엔지니어란? 답: 카멜레온 개발자]]></title>
            <link>https://medium.com/@kpak/%ED%9B%8C%EB%A5%AD%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%9E%80-%EB%8B%B5-%EC%B9%B4%EB%A9%9C%EB%A0%88%EC%98%A8-%EA%B0%9C%EB%B0%9C%EC%9E%90-b73502a63016?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/b73502a63016</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Sun, 13 May 2018 07:51:28 GMT</pubDate>
            <atom:updated>2018-05-13T14:48:53.910Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qyfEsYVOneQk5LJGI_h4yA.png" /></figure><p>요즘 ‘어떤 개발자가 좋은 개발자인가요?’ 혹은 ‘당신은 어떤 개발자인가요?’ 라는 질문들을 종종받는다. 여기에 관한 내 생각을 말해본다.</p><h3>훌륭한 개발자를 정의한다는 것 자체가 말이 안된다</h3><p>코드 한줄을 짜더래도 장인정신을 가지고 버그를 만들지 않는 개발자. 어떤 아이디어든 2–3 일 이면 순식간에 프로토타입을 뚝딱거리고 만드는 개발자. 문제가 있으면 방안에 틀어박혀 며칠이고 문제가 풀릴때까지 파고드는 개발자. 개인의 역량보다는 팀을 이끌어 문제를 해결하는 개발자. 각자의 취향과 성향에 따라서 선호하는 개발자의 모습이 있다.</p><p>에자일개발로 일컬어지는 현재 소프트웨어 개발은 크게 1. 가설 (혹은 ideation) 2. 프로토타입 3. 검증 4. 스케일의 과정을 거친다. 초반 가설과 프로토타입의 단계에서는 코드의 퀄리티보다는 얼마나 빠른 시간내에 구현을 해내느냐가 일반적으로 가장 중요한 사항이다. 그러므로 이 단계에서는 모든 경우의 수를 치밀하게 계산하고 설계하는 개발자보다는 문제를 신속하게 파악하고 빠른 학습능력으로 최소기능의 제품을 론칭하는 능력이 중요하다. 그리고 이런 제품이 시장에서 좋은 반응을 얻어 나름 구체적인 로드맵이 형성되면 그 다음에는 단기적인 성과보다는 중, 장기적인 비젼을 가지고 체계적인 설계와 개발을 할수 있는 능력이 중요해진다. 이렇듯 제품의 개발단계와 종류에 따라서 그 상황에 최적화된 개발자만이 있을 뿐이다. 예를들어 돈없고 시간에 쫓기는 가난한 스타트업에서는 지저분한 코드를 짜더라도 돈 많이 안줘도 돼고 내일 당장 론칭을 할수 있는 개발자가 훌륭한 개발자이고 구글 혹은 대기업은행 같은 곳에서는 체계적이고 실수없는 개발을 할수 있는 개발자가 훌륭한 개발자이다. 가끔씩 대기업에서 개발자로 일하면서 “나도 저렇게 지저분하게 코드짜면 3일이면 만든다&quot; 라는 분들을 볼수 있는데 그분들은 그렇게 지저분한 코딩을 안하는게 아니라 못하는 것이다. 지저분한 코딩을 하면서 머릿속에서 계속되는 코드청소의 유혹을 뿌리쳐가며 오로지 구현에만 집중하는 것도 능력이다.</p><p>이런 이유로 구글이나 페이스북같은 IT 대기업에서 일하며 그곳의 시스템에 최적화 되있는 상당수의 개발자들은 많은 스타트업들에게는 최악의 개발자들이다.</p><h3>소프트웨어 엔지니어의 본질은 특정 문제를 수치화하고 세분화해서 해결책을 제시하고 적용하는 사람. 가장 좋은 해결책은 코드를 한줄도 안짜는 것이다.</h3><p>코드는 한번 짜면 관리가 필요하다. 최소한 코드는 어느 서버에라도 저장이 되어야 한다. 코드는 결국 버그를 만들어 낸다. 코드가 없다면 버그도 없고 관리도 필요없다. 흥미로운 것은 세상에 있는 수천억줄(어쩌면 수조줄의)의 코드중 대부분은 처음부터 쓰여질 필요가 없는 코드였다. 아무도 필요로 하지 않는 모바일앱. 아무도 방문하지 않는 웹사이트. 이제는 아이디어를 검증하고 잠재고객들의 반응을 확인하는데 코드한줄 안쓰고 패이스북 캠페인 몇번이면 확인을 할수 있는 시대이다. 개발자들은 이렇듯 전혀 만들 필요가 없는 제품을 만드는 것에 대부분의 시간을 낭비한다. 개발자들이 풀어야할 문제의 시작은 어떻게 코드로 구현을 하느냐가 아니라 애초부터 이것을 만들 필요가 있나라는 것에 대한 고민이다.</p><h3>결국 훌륭한 소프트웨어 엔지니어는 특정문제에 가장 좋은 해결책을 파악하여 그 해결을 위해 최적화된 방법을 적용하는 사람이다.</h3><p>어떤 문제는 뛰어난 개발능력으로 코딩을 잘해야 풀수 있다. 어떤 문제는 탁월한 커뮤니케이션 능력으로 다른팀과의 협력을 잘해야 풀수 있다. 어떤 문제는 협상의 기술을 이용해 설득을 잘해야 풀수 있다. 어떤 문제는 장인정신으로 체계적인 설계를 해야 풀수 있다. 어떤 문제는 재치있게 빠른 프로토타입을 만들어야 풀수 있다. 위와 같이 각각의 상황들에서 적용해야 하는 개발자의 특징은 전혀 다르다. 탁월한 개발자는 주어진 문제에 최상의 해결책을 파악하고 그 해결책이 커뮤니케이션이든 개발이든 리더십이든 단시간내에 부족한 부분은 빨리 배우고 익히며 자신을 변화시켜 그 상황에 최적화된 모습을 갖춘다. 이 글의 제목처럼 카멜레온같은 개발자가 되야 한다.</p><h3>왜 소프트웨어 엔지니어가 그런것까지 해야돼?</h3><p>지금 당장은 코딩만 잘해도 먹고사는데 큰 지장이 없다. 하지만 이런 hard skills 들이야 말로 앞으로 더더욱 기계가 대처하게 되고 저렴한 인력시장으로 이동하는 것은 시간문제이다. 이것은 선택의 문제가 아니라 필수이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*nUn0Jvl1N0gbDKY0e14GdQ.png" /></figure><p>위의 그림에서 볼수도 있듯이 가까운 미래는 회사의 조직에 속해서 일한다기 보다 대부분이 프리랜서로써 회사나 개인이 필요로 하는 일들을 그때그때 처리해주고 돈을 받는 transactional task 가 주를 이룰 것으로 보인다. 이렇듯 프리랜서로 활동을 하면 개발능력은 일을 수행하는데 그저 작은 한 부분이다. 클라이언트들과의 커뮤니케이션, 허슬링, 재정관리, 팀을 이끄는 리더십등이 훨씬 더 중요한 요소들이다. 따라서 자신의 코딩능력만 믿고 이런 다른 부분을 개발하지 않으면 금방 뒤쳐질 것으로 보인다. 가끔식 커뮤니케이션 능력이 부족하고 멀티태스킹등을 못하는 것을 덕후의 특성이라며 정당화시키는 개발자분들이 있는데 이런 덕후능력만으로 돈벌수 있는 시대는 얼마 남지 않았다고 생각한다.</p><h3>그럼 어떻게 해야하나?</h3><p>개발자들의 상당수는 기술을 공부하고 익히는데 대부분의 시간을 쏟는다. 오픈소스 프로젝트, 개발관련 강의보기 등등… 이런것도 좋지만 회사업무이외에 남는시간은 기술공부만큼 리더십, 커뮤니케이션등의 공부에도 시간을 쏟는 것이 중요하다. 개발자들이 이런 능력들을 골고루 갖출수 있다면 그야말로 슈퍼맨이 될수 있다고 생각한다.</p><h3>P.S. 그런데 실리콘밸리는 훌륭한 개발자들이 많지 않나?</h3><p>과거에 내가 약간 복잡한 알고리듬을 만들어서 실리콘밸리에 있는 개발자들에게 Swift 코드로 구현하라고 한적이 있다. 나름 복잡하고 테스트를 많이 해야하는 것이라서 대충 3주의 스케쥴로 잡았는데 2주만에 끝내서 상당히 기뻐했다. 다음에 같은 알고리듬을 중국에 있는 팀에게 Java 로 구현하라고 했는데 딱 3일 걸렸다. 나는 미국의 동부, 서부, 인도, 중국, 파키스탄, 한국등의 개발자들과 일을 해봤는데 실리콘밸리나 타지역이나 평균개발자들의 능력은 전혀 차이가 없다. 그런데 일반적인 시각은 실리콘밸리의 개발자들이 보다 더 나은 개발자들이라는 인식이 있다. 왜 그럴까? 실리콘밸리가 타지역과 가장 큰 차이점은 극소수의 천재들이 있다는 것이다. 그런 천재들이 구글같은 회사도 만들고 AWS 같은 기술들을 만들어서 어마어마한 마켓을 만들어 준다. 그리고 그 조직에 속해있는 일반 개발자들은 거기에 그냥 묻혀가는 면이 있다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b73502a63016" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[재미있게 읽어주셔서 감사합니다!]]></title>
            <link>https://medium.com/@kpak/%EC%9E%AC%EB%AF%B8%EC%9E%88%EA%B2%8C-%EC%9D%BD%EC%96%B4%EC%A3%BC%EC%85%94%EC%84%9C-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-da24e131a4b5?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/da24e131a4b5</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Mon, 26 Feb 2018 17:13:29 GMT</pubDate>
            <atom:updated>2018-02-26T17:13:29.834Z</atom:updated>
            <content:encoded><![CDATA[<p>재미있게 읽어주셔서 감사합니다!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=da24e131a4b5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[나의 실리콘밸리 사내정치 스토리]]></title>
            <link>https://medium.com/@kpak/%EB%82%98%EC%9D%98-%EC%8B%A4%EB%A6%AC%EC%BD%98%EB%B0%B8%EB%A6%AC-%EC%82%AC%EB%82%B4%EC%A0%95%EC%B9%98-%EC%8A%A4%ED%86%A0%EB%A6%AC-db64e7e043e7?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/db64e7e043e7</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Fri, 16 Feb 2018 05:07:21 GMT</pubDate>
            <atom:updated>2018-02-16T05:09:46.172Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*716DUn8UVv47HFpoqo_mYA.jpeg" /></figure><p>얼마전에 아마존 개발자면접에 관한 글을 올린적이 있는데 몇몇 분들께서 내 아이가 태어난 후 바로 이틀뒤에 다시 회사를 나간 것에 ‘그렇게까지 일을 하다니 대단하다’ 는 피드백이 있었다. 그 당시 업무강도가 상당히 높기는 했지만 그렇다 하더라도 수요일에 출산이었으니 목, 금, 그리고 주말까지 쉬고 월요일에 일을 나가는 것이 상식적이다. 또 그렇게 하는 것이 중, 장기적으로 나의 생산성에 더 도움이 될수도 있었다. 하지만 그렇게까지 할수 밖에 없었던 이유에 업무량만큼 중요한것이 있었는데 바로 그것은 사내정치였다. 오늘은 여기에 관한 내 경험을 한번 얘기해 본다.</p><p>전에 글에도 밝혔지만 내가 속해 있던 클라이언트 소프트웨어/알고리즘팀(이하 미국팀)이 6명에서 4명으로 줄어든 적이 있었다. 하지만 이것은 미국팀의 숫자였고 해외에 약 2배의 인원으로 비슷한 일을 하는 팀이 있었다(이하 해외팀). 그리고 미국팀, 해외팀 둘다 같은부서 안에 속해있는 구조였다. 미국팀이 처음 6명이었을때 팀을 이끌고 있던 leader 이자 내 상사가 어느날 팀원들을 모두 소집하더니 자기는 팀을 떠나게 됐다며 그동안 있었던 일들에 대해서 몇가지 설명을 하더라. 자세히 말하기는 곤란하고 해외팀이 그동안 우리 몰래 독자적으로 다른 일을 하다가 어느날 부서에 전체공개를 하였는데 우리부서를 맡고 있던 director 가 그 해외팀의 손을 들어주었고 결국 그 전부터 쌓였있던 미국팀과 그 director 의 갈등이 터지면서 우리팀의 leader 는 다른부서로 강제이동이 되었던 것. 그후 나와 개인적으로 상당히 친했던 팀동료가 tech-lead 를 맡게 되었는데 골수엔지니어였던 그 친구는 해외팀에서 퍼붓는 정치적 bullying 에 좌절하면서 불과 몇주만에 아예 회사를 떠나게 되었다. 그렇게 팀이 불과 몇주만에 6명에서 4명으로 줄어들면서 나는 어느날 급작스럽게 tech-lead 가 되어 팀을 이끌게 되었다. 그리고 우리팀 매니저가 팀멤버들에게 프로젝트 기간동안 모든 보고(report) 는 나에게 직접 하라는 말을 하면서 결국 engineering manager 의 역할도 같이 떠맡게 되었다.</p><p>처음 내가 팀을 맡았을때는 양팀간의 관계를 적대적 관계에서 우호적이고 시너지를 내는 것으로 바꾸어 보려고 했다. 그래서 해외팀의 리더와 1:1 미팅을 하여 “We come in peace.” 의 메세지를 전했고 그분 역시 나의 그런 의도에 동의하는듯 했다. 하지만 며칠 지나지 않아 그가 부서의 director 에게 전혀 납득할수 없는 우리 미국팀의 문제를 back-channel 로 얘기하면서 이들은 정치싸움을 끝낼 의도가 전혀 없다는 것을 나는 깨달았다. 그리고 그들의 의도는 미국팀의 멤버들을 모두 부서에서 몰아내고 자신의 팀을 해외에서 더 확장시키려고 하는 것임이 분명해 보였다. 아마 이때였던것 같다. 가뜩이나 팀내에서 개인적으로 친했던 동료 2명을 잃어서 기분이 안좋았던 나에게 이 사건은 좋게 말하면 정의심, 나쁘게 말하면 복수심을 가져다 주었고 ‘Ok. I will play your game.’ — 똑같이 정치로 맞서서 반드시 이길것이라는 마음가짐을 가지게 된다.</p><p>지금까지의 상황으로는 일단 해외팀이 부서내에서 전폭적인 신뢰를 받고 있었고 인력도 훨씬 많아서 겉보기에는 우리에게 불리한 상황이었다. 회사에서 정치싸움에 이기기 위해 기본적으로 필요한건 업무능력과 실력이다. 이건 너무 당연한거고 어느정도의 업무능력을 갖추면 그만큼, 어쩌면 그보다 더 중요한 것이, 바로 사내인맥이다. 이것이 나에게는 큰 무기였다 — 우리는 Local 그들은 Remote. 우리 부서는 미국에 있기 때문에 나는 문제가 생겼을때 바로 달려가 얼굴보고 대화할수 있는 사람들이 모두 내 주위에 앉아 있었다.</p><p>전에는 우리팀을 이끌던 분들이 팀내 직원들의 화합에만 신경쓰느라 (i.e. manage-down), 부서의 director 나 팀외 직원들과의 manage-up 에 신경을 쓰지 못한것이 부족한 부분이었다. 점심식사도 늘 우리끼리만 하였다. 나는 일단 팀내에 양해를 구하고 그날부터 아침식사, 점심식사, 커피, 1:1 등을 모두 동원해 일단 부서내의 사람들과 매일 3–4 명씩 만나면서 친분쌓기에 들어간다. 그리고 1차적으로 내편으로 만들사람들 2명을 선정한다.</p><ol><li>나의 상사: 이분은 우리팀과 해외팀을 같이 맡고 있었는데 해외팀에게 훨씬 더 많은 믿음을 가지고 있었다. 이분을 내편으로 만들면 이 분의 상사인 부서의 director 의 마음도 어느정도 바꿀수 있다고 판단했고 그 당시 부서가 가지고 있던 우리팀에 대한 perspective 도 같이 바꿀수 있다고 생각했다. 여기서 참고할점 하나. 우리 부서의 director 가 해외팀에게 더 많은 신뢰가 있던 가장 큰 이유중의 하나가 해외팀을 이 director 가 직접 뽑았기 때문이었다. 심리적으로 대부분 사람들은 똑같은 능력의 직원 2명이 있으면 신기하게도 (어쩌면 너무 당연하게도) 자기가 직접 뽑은 사람을 더 높게 평가하는 본능이 있다.</li><li>Product Manager (PM): 내가 개인적으로 아는 PM 들은 모두 훌륭하신 분들이다. 제품의 비젼도 뛰어나고 기획도 훌륭하게 해내는 분들이시다. 하지만 많은 PM 들이 정보전달자에 지나지 않는 경우가 많다. 그럼에도 불구하고 이런 PM 들 조차도 대부분 사내에서 영향력들이 뛰어나다. 그 이유가 바로 PM 들이 information flow 를 컨트롤 하고 있기 때문이다. 이게 생각보다 무섭다. PM 까지 갈필요도 없다. 친구들끼리 여행을 간다고 해도 그 안에서 가장 영향력 있는 사람은 대부분 그 여행을 arrange 하고 모든 예약과 administration 을 해서 정보전달의 key 를 쥐고 있는 사람이다. 이래서 많은 PM 들이 영향력을 높히기 위해 팀을 쪼개서 미팅도 많이 잡고 여러 node 의 information flow 를 컨트롤 하려고 한다. 여하튼 이런 이유로 우리팀의 PM 을 내편으로 만들면 information 을 이용해 프로젝트의 task 를 만들고 분배하는 부분에 영향력을 끼쳐 우리팀으로 중대업무를 모두 돌릴수 있을것이라 생각했다.</li></ol><p>여하튼 위 두사람을 중심으로 부서의 많은 사람들과 1:1 미팅을 가지면서 꼭 해야하는 것이 이들에 대한 칭찬 (flattery). 많은 사람들이 만남에서 상대방에게 칭찬을 잘 못하는 큰 이유중의 하나가 내가 저 사람에게 칭찬을 하면 그게 소위 ‘아부&#39; 로 보여질수가 있는 두려움 때문이다. 대부분의 경우 아주 오버하지 않는 경우 빼고는 상대방은 칭찬을 순수하게 받아들인다. 내가 누군가에게 칭찬을 들었을때 1. 저게 아부인가? 기분 나쁘네… 라고 생각할수도 있고 2. 내가 이렇게 괜찮은 사람이구나. 기분 좋다. 라고 생각할수도 있는데 대부분 사람들은 본능적으로 2번을 택한다. 굳이 1번을 택해서 자신이 괴로워지는 것은 counter-intuitive 하다. 칭찬만큼 그 사람의 마음을 사는데 괜찮은 ROI 가 없다. 칭찬을 할때도 단순히 ‘You are so good.’ 이런게 아니라 상대방의 업무에 공감을 하고 조언을 얻는것이 중요하다. 가령 상사와 얘기할때는 ‘너의 위치에 있으면 정말 스트레스도 엄청 받고 답이 똑 떨어지는 경우가 많지 않아서 좋은 결정을 내리기 쉽지 않은데 도대체 어떻게 하는 것이냐?” 이런식으로 조언을 얻는 것처럼 해서 은연중에 상대방의 고충을 공감하고 띄워주는것이 중요하다.</p><p>상사와의 관계에서는 일단 2가지의 목표를 설정했다. 첫째는 지금까지 우리가 진행했던 업무방식은 미국팀, 해외팀 모두 부족한 점들이 많았다는 인식을 심어주는 것이었다. 이런 인식을 심어주면 해외팀 포함 우리팀에서 먼저 나간 내 전동료 2명의 업무능력까지 폄하하게 될 가능성도 있지만 현재로써는 그 방법이 최선이라 생각했다. 그리고 다른회사, 다른팀들과의 비교를 통해 수치적으로 지금 우리 제품의 개발에 필요한 리소스와, 업무방식등에 변화가 필요한 것을 일깨워 주기 시작하였다. 몇주지만 상사와 매일 얘기하고 밥을 먹고 하면서 쌓인 친분이 이 대화를 훨씬 쉽게 풀어주었다. 중요한 것은 이런 변화를 주려고 할때 결정권자와 평소에 여기에 관해 자주 얘기를 하는 것이다. 그러면 실제 변화를 적용하려고 할때 상대방이 모든 context 와 과정을 이해하고 있기 때문에 그것을 받아들이는 것이 훨씬 수월하다. 둘째는 해외팀 정치행각의 근본을 없애는 것이었다. 해외팀에서 주요적으로 쓰는 정치적 행위중 하나는 우리 미국팀의 개발에 버그나 이슈들이 너무 많다는 것이었다. QA 부서가 그 해외팀에 있는것을 이용해서 미국팀의 bug (문제) 들만 공개하고 자기팀의 문제들은 자기네들끼리 구두로만 보고 받고 해결하는 식이었다. 나는 미국팀의 QA 는 우리가 직접 할것이라고 한후 지금까지 그들의 가장 노골정인 정치행위였던 ‘QA 에서 노출되는 버그의 심각성 제기와 미국팀의 평가절하’ 를 단순한 어린아이들의 투덜대기로 치부해 버리는 것에 공을 기울였다. QA 를 넘겨받은 우리팀은 중간중간 발견되는 이슈들은 자체적으로 해결, 결국 그들의 ‘문제재기&#39; 는 해결책 없는 단순한 투덜거림에 지나지 않는다라는 인식을 조금씩 심어주기 시작한다.</p><p>이렇게 하나하나 실마리를 푸는 과정에서 첫번째 행운이 찾아온다. 그동안 내편을 만들려고 부단한 노력을 하고 있던 PM 과 어느날 점심을 같이 먹는데 그가 몇주 뒤에 출산휴가를 받아서 수주간 회사를 안나올것이라고 하더라. 부서내의 누군가에게 PM 일을 넘겨주려고 생각중이라고 하였다. 순간 마음속으로 EUREKA 를 외쳤다. 지금까지 해외팀 리더는 이 PM 과 거의 매일 얘기를 나누며 개발의 핵심업무들은 모두 자기네들이 우리가 손도 쓰기전에 가져가 버리고는 하였다. 나는 PM과 그날 바로 장시간 미팅을 잡고 회의실에서 전투적으로 그동안 나의 경력, 경험을 얘기하고 열정적으로 나를 홍보하며 해외팀과 우리팀이 개발하고 있는 제품의 PM 권한을 나에게 달라고 강력히 피치를 하였다. 그후로 3–4 일간 매일 그와 얘기하면서 결국 그의 동의와 함께 위에서 말했지만 영향력의 핵심인 information flow 를 담당하고 있는 PM 권한의 상당수를 내가 가져오게 된다. 나는 그 후에 PM 의 transition 기간동안 PM 의 고유권한을 이용해 개발의 핵심 task 를 모두 우리팀으로 돌리고 그동안 해외팀과 공유해 왔던 개발로드맵을 결정하는 analytics 등 모든 중요 서비스들의 administration 권한을 나 한사람의 권한으로 돌려버렸다. 어느날 갑자기 해외팀에서 특정서비스 로그인이 안되는 이메일이 왔지만 이미 이때는 내가 상사와 다른 사람들에게 이런 서비스의 administration 권한공유가 심각한 security &amp; privacy 문제를 만들수 있고 나중에 lawsuit 으로까지 이어질수 있는 경각심을 일으킨 다음이었다. 그리고 또 하나. 지금까지 해외팀은 이틀에 한번꼴로 전체부서회의를 통해서 늘 자신들의 공을 알리는데 열심이었다. 여기에 관해 너무 잦은 회의로 인한 동료들의 불만이 있는 상태였다. 나는 이 회의도 비효율성을 이유로 1주일에 한번으로 줄이고 시간도 예매하게 잡아 해외팀과 미국부서와의 접촉빈도를 최대한 줄였다.</p><p>이렇게 정치싸움의 판도를 서서히 우리쪽으로 바꾸고 있었지만 이때까지만 해도 전체부서가 그동안 해외팀에게 가지고 있던 많은 신뢰가 얼마나 변했는지 확신할수가 없었다. 그러다 어느날 전체전화회의에서 해외팀이 평소와 같이 제품의 버그에 대해 발언을 하였는데 상사가 전화를 mute 로 바꾸더니 “왜 이 해외팀은 맨날 이렇게 불평만 늘어놓는거냐?” 라고 고개를 저으며 말했고 주위사람들도 키득대며 동의를 하는듯 했다. 그동안 그렇게 부단히 노력했던 해외팀에 대한 정치행위 무력화가 계획대로 되고 있었다. 이때 어느정도 승리를 확신했다. 이제 자세를 defense 에서 offense 로 바꾸기로 결심한 나는 그 해외팀이 부서전체 이메일로 종종 보내던 ‘자기들의 기술력이 더 우위다’ 라는 뉘앙스의 정치적 이메일에 기존에 우리 미국팀의 입지가 약했을때 쓰던 ‘disappointed’, ‘hard to believe’ 같은 약한 어법에서 ‘baseless claim’, ‘not a shred of truth in the story’, ‘doesn’t even deserve a response’ 라는 어휘를 써가며 대립각을 세우기 시작한다. 그리고 전체미팅에서 적절히 anger 를 보이면서 부서의 멤버들에게 소위 ‘힘자랑&#39; 을 자주하기 시작한다. 어느정도 사내에서 입지가 있으면 미팅에서 anger 를 보이는것만큼 상대방에게 영향력을 끼치는 것이 없다. 그냥 무조건 화내는 것이 아니라 적절한 제스처를 섞어가며 의견대립중 단호하고 어느정도 성난 목소리로 발언을 하면 많은 사람들이 ‘저 사람이 이 프로젝트의 중심이구나. 그리고 건들면 안되겠다.&#39; 라는 생각을 가지게 된다. 의견이 대립될때 조용한 말의 ‘I think we can try it another way’ 와 상대방의 눈을 똑바로 보며 단호하고 큰 목소리로 ‘THIS IS JUST WRONG! YOU SHOULD DO IT THE OTHER WAY!” 라며 하는 말의 authority 는 전혀 다르다. 똑같은 능력의 2명이라도 후자의 발언을 한 사람에게 훨씬 더 큰 영향력이 있다고 대부분 사람들은 생각한다. 물론 평소에는 침착한 모습을 늘 보여서 툭하면 화내는 사람이 아니라는 이미지가 있다는 전제하에서다. 그러다 어느 수요일 아침, 출산으로 인한 아내의 진통으로 우리는 병원을 가게 되었다. 이부분에 관해서는 혹시 내가 출산으로 인해 회사에서 빠지면 그 기간동안 해외팀에서 알고 허튼수작을 부릴까봐 사내에서도 출산에 대해서는 함구를 하고 있었다. 그러다 목요일에 개발과정에서의 중대한 이슈가 발생했고 금요일에 비상회의가 소집이 되었다. 워낙에 중요한 사항이었고 이미 해외팀에서 분명히 이 기회를 놓치지 않을것이라고 판단한 나는 금요일 오후에 소집된 미팅을 위해 불과 아내의 출산 이틀후에 회사로 출근하였다. 그리고 미팅전 부서의 핵심인원들과 1:1 로 만나며 이 이슈의 전말에 대해 우리팀에게 유리한 쪽으로 설명을 하고 2시간 가량 진행된 해외팀도 참여하는 전체전화회의에서 모든 발언의 주도권을 가지고 미팅을 진행하였다.</p><p>사내정치에서 가장 중요한 것중 하나가 persistence (끈질김). 사내정치는 당하는쪽 뿐만이 아니라 가해자에게도 상당한 정신적, 육체적 스트레스를 요구한다. 상대방의 정치행동에 쓰러지거나 도망치지 않고 계속 버티면 많은 경우 상대방은 결국 지치게 된다. 이제 해외팀의 리더도 서서히 참을성을 잃어가는듯 했다. 어느날은 이 해외팀의 리더가 나의 간단한 코드제안에 “It makes no sense to me.” 라며 이유없는 반대를 하더니 이날은 술까지 마셨는지 오타까지 범해가며 나에게 “Are you nuts? (너 똘아이냐?)” 라며 노골적으로 불편한 감정을 드러낸다. 이 해외팀의 리더도 나름 정치의 고수라서 기록이 남는 회사이메일에 이런 실수는 좀처럼 하지 않았는데 내가 오기 훨씬 전부터 해온 많은 사람들과의 정치갈등에 피로함을 느끼기 시작한듯 하다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/750/1*jliWOpTbyR2YeBUWQgNWWg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/750/1*GWGpted3AbCNNnwMC-pRLw.png" /><figcaption>정치갈등 마지막 단계에서 나와 해외팀 리더가 자주 주고받기 시작하는 감정적 소통의 이메일</figcaption></figure><p>이러던 중 두번째 큰 행운이 찾아온다. 부서를 이끌고 있던 그 director 가 다른부서로 옮기게 된것. 이제 이 해외팀이 믿고 의지하던 가장 큰 버팀목이 사라져 버린것이다. 안그래도 언제부턴가 그 director 가 프로젝트의 성과에 대해 시큰둥 하였는데 그 이유가 여기 있었나보다. 그리고 그동안 내가 관계개선에 많은 공을 들였던 나의 상사가 그 자리를 꿰차고 들어갔다. 그 와중 개발초기에 출시일을 맞추기가 거의 불가능해 보였던 모든 개발이 끝나고 제품은 출시를 하였다. 제품은 초반에 기대이상의 기술력과 품질을 보였고 이 제품의 소프트웨어개발을 이끌었던 우리 미국팀은 나름 부서에서 탄탄한 입지를 다지게 되었다. 여기서 나는 이제 완전히 승리를 확신한다. 그리고 이 정치싸움의 마지막 단계로 그 해외팀을 팀이나 부서에서 몰아내버릴 기회를 찾기 시작한다. 일단 나는 상사와 담판을 짓기로 결정하였다. 내가 요청(혹은 요구) 할 내용은 더이상 해외팀과 공동개발을 하는것에 많은 어려움이 있으니 앞으로의 제품개발은 미국팀이 인원을 더 보충하여 단독으로 한다는 것이 골자였다. 그리고 해외팀은 새로운 제품개발업무나 타부서로 이동시키는 것에 대해서도 얘기를 할생각 이었다. 이런 네고를 위해 미팅을 들어갈때 나는 꼭 지키려고 하는 법칙이 있다. 사업을 할때 한때 딜을 따는것에 대부분의 시간을 쏟은적이 있었는데 그때 배운 BATNA — Best Alternative To a Negotiated Agreement. 네고에 들어가기 전 그 딜이 깨졌을때도 쓸수 있는 Plan B 를 꼭 준비하고 가야하는 것. 이래야 네고에서 유리한 위치를 얻게 된다. 이를 위해 나는 바로 사내에 있는 전혀 다른 부서와 면접을 가지고 바로 다음날 그 부서에서 오퍼를 받는다. 이제 나는 상사와의 담판에서 쓸수 있는 카드가 있고 딜이 깨져도 갈수 있는 곳이 있었다. 적절한 타이밍을 모색하던 중 회사에서 쪼개져있던 신규사업들의 통합을 결정하였고 우리부서는 다른부서와 하나로 합쳐지게 된다. 이 과정에서 다른부서에 있던 매니저중 한명이 나의 상사로 들어오게 되었고 나와 1:1 미팅을 몇번 가지게 된다. 이 미팅들에서 그 새로운 상사에게 제품개발과 미국팀, 해외팀에 대해서 설명을 하였다. 이 새로운 상사는 두팀에 대해 전혀 모르고 있는 완전히 새로운 분이었기 때문에 내가 다짜고짜 해외팀을 욕하면 오히려 나에게 화를 불러오기가 쉽다. 이런 상황에서 나는 대화의 주제를 ‘미국팀과 해외팀 양쪽이 가지고 있는 강점들이 상당히 다른데 이미 제품을 출시한 시점에서 지금부터 우리부서에서 필요한 스킬셋은 미국팀이 많이 가지고 있다’ 라는 식으로 대화를 이끌어 갔다. 미국팀의 강점은 (제품출시 이후에 필요한) 체계적인 개발, 사용자데이터 분석, 고개들의 피드백을 바로 적용하는 에자일 개발능력등이라고 하였고 해외팀의 강점은 초기개발에 필요한 빠른 프로토타입핑 능력, 메뉴얼 QA, 저렴한 지역인력고용등이라고 하였다. 이 새로운 상사는 여기에 대해 나의 전상사와 여러번 미팅을 하더니 회사 임원의 지시로 새로 통합된 부서의 인원을 감축하는 결정을 한다. 결과는 우리팀 4명중 나와 또다른 한명을 제외한 2명이 layoff. 그리고 라이벌이었던 그 해외팀은 전원 layoff 당하는 충격적인 사태가 발생한다. 그리고 우리 미국팀은 통합부서에서 비슷한 업무를 하고 있는 다른팀과 하나로 합쳐지게 된다.</p><p>이때 이미 지긋지긋한 정치갈등과 초긴장속에서의 제품개발로 나의 몸과 마음은 많이 지쳐있었다. 그리고 내가 이끌던 팀 인력의 반이 사라진 상태에서 그 통합된 부서에 더 이상 있는 것은 무의미하다고 판단하고 네고의 카드로 쓰려고 했던 다른부서의 오퍼를 받아들이고 나는 그 부서로 옮기게 되면서 소모적이고 적대적이었던 이 정치갈등은 그렇게 끝이났다.</p><p>회사에 직원이 2명만 생기면 나타나는 것이 사내정치다. 사내정치는 기본적인 인간의 욕구와 본능에서 자연스럽게 나타나는 현상이기 때문에 회사와 사내정치는 공생하는 관계이다. 공평하고 건전한 경쟁관계가 조성되고 대부분이 납득할수 있는 결과를 낳는 ‘좋은 사내정치’ 는 충분히 받아들일수 있다. 하지만 위처럼 적대적이고 소모적인 사내정치는 맞서지 않으면 그 끝은 나쁜정치를 한쪽이 이기는 경우가 내 경험상으로는 상당히 많았다. 여기에 있어서는 직원복지, 만족도 모두 높다는 실리콘밸리의 회사들도 내 경험상으로는 예외가 아니었다.</p><p>P.S.) 이 글에 나오는 해당회사에 대한 추측은 자제해주기 바랍니다. 저는 주위에서 알고 있는 것 이외에 4년동안 사업을 하며 수많은 클라이언트 회사들로 출근하며 contractor/consultant 로 일을 하였고 이 글에 나온 해당회사는 그 수많은 회사들중 하나일수도 있고 아닐수도 있습니다. 그리고 회사를 밝히지 않기위해 몇몇 시간적 context 를 조작했음을 미리 밝힙니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=db64e7e043e7" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Carpool Talk #10 — 실리콘밸리 취업깡패 산호세 주립대학]]></title>
            <link>https://medium.com/@kpak/carpool-talk-10-%EC%8B%A4%EB%A6%AC%EC%BD%98%EB%B0%B8%EB%A6%AC-%EC%B7%A8%EC%97%85%EA%B9%A1%ED%8C%A8-%EC%82%B0%ED%98%B8%EC%84%B8-%EC%A3%BC%EB%A6%BD%EB%8C%80%ED%95%99-31f9c0ed138f?source=rss-a1305a2323b2------2</link>
            <guid isPermaLink="false">https://medium.com/p/31f9c0ed138f</guid>
            <dc:creator><![CDATA[Kisang Pak]]></dc:creator>
            <pubDate>Mon, 12 Feb 2018 17:33:07 GMT</pubDate>
            <atom:updated>2018-02-13T14:58:59.749Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/860/1*_z196DQdp20loQn5X8xdLg.jpeg" /></figure><p><strong>2018년 2월 12일</strong></p><p>지금까지 카풀을 하면서 만나는 사람들은 대부분 실리콘밸리 IT 회사에서 근무하는 분들인데 대화하다보면 자연스럽게 직장, 출신학교에 대해서 알게 된다. 여기서 놀라운 점은 나와 동승하는 사람들의 약 60-70% 정도는 모두 산호세 주립대학의 Computer Science, Computer Engineering, 혹은 Software Engineering 전공의 <strong>석사출신</strong>들이다 (학사가 아닌 석사). 그리고 이분들의 대부분은 인도출신들. 오늘 같이 카풀을 같이 한분도 아마존에 근무하시는데 역시 산호세 주립대학 석사출신. 대학원때 같이 룸메이트 하던 다른 3명 모두 동대학원 동창들인데 2명은 Intuit, 1명은 Walmart Lab 으로 취직해서 현재 모두 실리콘밸리에서 근무하고 있다고 한다. 오늘 태운 사람의 말에 의하면 자기와 같은 전공 (컴퓨터 공학) 이던 동창들의 70%-80% 는 모두 실리콘밸리의 기업에 취직했다고 한다. 더구나 이들중의 대부분은 영주권도 아닌 학생비자 소지자 였다고 한다.</p><p>혹시 내가 태운 사람들의 sample 들이 bias 되있는 것은 아닐까 하는 생각에 검색을 해보니 각종 조사에서 산호세 주립대학이 미국의 명문대학들은 물론 같은 지역내의 Stanford, UC Berkeley 보다도 실리콘밸리 기업의 취직률이 높다는 결과도 보인다 (다음의 링크 2개 참조). 적어도 내 카풀경험으로만 보자면 너무 당연한 결과.</p><p><a href="http://www.businessinsider.com/silicon-valley-hiring-most-popular-universities-2015-7/#san-jose-state-university-20">The 20 universities that are most likely to land you a job in Silicon Valley</a></p><p><a href="http://sanfrancisco.cbslocal.com/2015/08/25/san-jose-state-university-sjsu-silicon-valley-tech-jobs-apple-cisco-hewlett-packard/">http://sanfrancisco.cbslocal.com/2015/08/25/san-jose-state-university-sjsu-silicon-valley-tech-jobs-apple-cisco-hewlett-packard/</a></p><p>어느때부터 하도 매일 산호세 주립대학 석사출신들만 태우다 보니 궁금해져서 어떻게 너희 학교는 그렇게 취업을 잘하냐고 묻기 시작하였다. 대부분 비슷한 대답들이 나왔는데 그 중 중요한 것들을 다음과 같다.</p><h3>실력이 좋으면 교수가 바로 추천을 해준다</h3><p>산호세 주립대학 교수출신들중의 상당수는 실리콘밸리의 기업내에서 임원이나 고위연구원 출신자들이다. 그래서 이분들은 실리콘밸리내의 인맥이 상당히 좋다고 한다. 구글, 페이스북같은 기업들은 개발자들이 모두 기술면접을 통과해야 하는 시스템이라서 교수의 추천이 큰 효과를 발휘하기 힘들지만 이 몇몇 기업들을 제외한 대부분의 기업들은 아직도 팀에서 마음에 드는 사람을 콕 찝어서 채용할수 있는 direct hiring 시스템이다. 그래서 이런 팀들이 산호세 주립대학교 교수들에게 ‘괜찮은 학생들좀 추천해주세요&#39; 라고 하면 교수들의 추천으로 가벼운 면접 1–2 번만 보고 바로 취업을 할수 있다고 한다.</p><h3>낮에 일하고 밤에 공부</h3><p>많은 회사들의 경우에 개발자가 파트타임이나 인턴의 형식으로 필요할 때가 많이 있다. 이런 경우에 채용하기 가장 만만한 사람들이 어느정도 어른스럽고 개발도 괜찮게 하는 저렴한 (파트타임) 인력들인데 산호세 주립대학 석사들이 여기에 딱 들어 맞는다. 여기 출신들은 상당수가 사회에서 1–2년 일한 경험도 있어서 말도 통하고 석사들이기 때문에 전문성도 있고 가장 중요한 것은 다들 같은 동네에 살아서 출퇴큰이 용이하고 처음에 이사할때 relocation 같은 과정을 거칠 필요가 전혀 없어서 편리하다는 것이다. 그래서 많은 학생들이 낮에 이런 회사들에서 일하고 저녁에 학교에서 클래스를 듣는다고 한다. 이렇게 이런 회사들에서 인턴으로 일을하면 결국 정규직으로 자연스럽게 전환되는 경우가 많다고 한다.</p><h3>현장에서 바로 투입가능한 커리큘럼</h3><p>위에 말했다시피 산호세 주립대학에는 산업에서 경험을 쌓은 교수들이 많은데 이분들의 커리큘럼은 대부분 산업에서 쓰이는 가장 유망한 기술들을 가르친다고 한다. 이런 과목들이 어렵기는 하지만 잘만 해서 이력서에 포장만 잘하면 채용하는 회사측에서 상당히 좋아한다고 한다.</p><p>여기에 미국의 정서상 지역중심의 커뮤니티와 지역학교를 지원하는 것이 일반화 되있는 시스템까지 한몫을 하여서 산호세 주립대학은 조금 과장해서 미국내에서 거의 Black Swan 같이 느껴진다.</p><p>그리고 산호세 주립대학 공대에서 석사를 취득하면 졸업후에 학생비자로 일할수 있는 기간 1년에 STEM 자격으로 2년을 더 연장, 총 3년동안 비자문제 없이 근무를 할수 있고 그 기간동안에 H1B 를 3번까지 신청할수 있어서 왠만한 경우에는 미국에서 영구적 (H1B-&gt;영주권) 으로 근무할수 있는 자격이 생기게 된다고 한다.</p><p>산호세 주립대학의 랭킹을 살펴보면 다음의 링크에서도 알수 있듯이 소위 ‘공부를 잘하는 학교&#39; 라고 보기에는 무리가 있다. 공대마저도 박사학위를 제공하지 않는 학교라서 내 생각에 고등학교때 성적으로는 중간정도만 하면 입학이 가능한 학교로 보여진다.</p><p><a href="https://www.usnews.com/best-colleges/san-jose-state-1155/overall-rankings">https://www.usnews.com/best-colleges/san-jose-state-1155/overall-rankings</a></p><p>하지만 산호세 주립대학에서 Computer Science, Computer Engineering, Software Engineering 이 셋중 하나로 석사를 취득했을때 단순히 실리콘밸리의 개발자 취업으로만 따지면 거의 최고로 보여진다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=31f9c0ed138f" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>