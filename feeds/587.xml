<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WindTale]]></title>
  <link href="http://windtale.net/atom.xml" rel="self"/>
  <link href="http://windtale.net/"/>
  <updated>2017-12-03T10:16:17+09:00</updated>
  <id>http://windtale.net/</id>
  <author>
    <name><![CDATA[진우]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS 이미지 스프라이트 자동화 (with grunt-spritesmith)]]></title>
    <link href="http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/"/>
    <updated>2014-12-26T19:28:26+09:00</updated>
    <id>http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith</id>
    <content type="html"><![CDATA[<p><del>이번에도 거의 한달만의</del> 결국 연말에야  겨우 완성시키는 포스팅이다.<br/>
지난번 예고했던대로 <a href="https://github.com/Ensighten/grunt-spritesmith">grunt-spritesmith</a>를 통해 이미지 스프라이트를 자동화 하는 방법에 대해 정리해 보았다.</p>

<p>CSS 이미지 스프라이트가 무엇이고 왜 필요한지, 그리고 이를 수동으로 할 때 어떤 문제점이 있는지에 대해 먼저 간단히 설명하고 자동화의 이점과 방법에 대해 설명할 것이다. &lsquo;CSS 이미지 스프라이트 자동화의 필요성과 방법'이 주요 내용이 될 것이며 'CSS 이미지 스프라이트'나 'grunt&rsquo;, &lsquo;grunt-spritesmith'에 대해서는 괜찮은 외부자료 링크로 대신할 것이다.</p>

<!-- more -->


<h2>CSS image sprites?</h2>

<p>css의 표현력이 많이 높아진 지금도 여전히 다양한 이유로 웹에서 레이아웃을 꾸미는데 이미지가 많이 사용되고 있다. 특히 한국의 경우 시스템폰트가 변변치 않아 디자인을 위해서 텍스트를 이미지로 표현하는 경우가 굉장히 많이 있다.
<em>이에 대해서 푸념을 늘어놓자면 끝이 없지만 그냥 넘어가겠다.</em></p>

<p>이런 이미지파일이 하나씩 늘어날수록 HTTP 요청횟수와 파일용량이 증가하게 되어 렌더링 성능저하를 가져온다. 이를 해결하기 위한 방법중 하나가 이미지 스프라이트 기법이다. 기존에 게임 개발 등 에서 이미 쓰여오던 방식인데 웹에도 이러한 기법들이 하나씩 적용되고 있는 모습을 보면 재미있다.</p>

<p>원리는 어렵지 않다.<br/>
여러개의 개별 이미지 파일을 하나로 합치고 실제 사용할때는 css의 <code>background-image</code>, <code>background-position</code> 속성을 이용해 이미지의 특정 부분만 노출되도록 하는 것이다. 실제로 적용을 하려면 이미지 파일 포맷의 특징 등과 관련하여 좀더 세부적으로 알아야 할 것들이 있다. 관련해서는 CSS-TRICKS의 <a href="http://css-tricks.com/css-sprites/">CSS Sprites: What They Are, Why They’re Cool, and How To Use Them</a>을 읽어보는 것을 추천한다.</p>

<p>아래에 이 기법을 통해 만들어진 이미지를 하나 참고용으로 소개한다. 페이스북에서 일부영역에 사용하던 스프라이트 이미지이다. 그냥 가져온건데 뭔가 법적 문제가 생기면 내리게 될 것이다 -,.-;;</p>

<p><img src="http://windtale.net/images/posts/20140511/fb-sprites.png" alt="페이스북에서 사용중이던 스프라이트 이미지의 일부 &copy; facebook"></p>

<h2>그래서, 문제가 뭐지?</h2>

<p>감을 잡았다면 이제 아래의 문제들을 생각해 보자.</p>

<h3>개별 스프라이트의 크기(width, height)</h3>

<p>css에서는 &lsquo;이미지의 특정부분만 노출'하도록 한다고 했다. 특정 부분만 노출하기 위해서는 스프라이트 이미지에서 개별 스프라이트의 시작점과 크기에 대한 정보가 필요하다. 먼저 스프라이트의 크기에 대한 이야기를 해보자.</p>

<p>크기(width, height)는 어떻게 알아내야 할까? 포토샵같은 그래픽툴을 사용해 하나로 합쳐진 이미지 파일을 열고, 개별 스프라이트의 시작점과 끝점을 알아내 직접 크기를 구해야 할 것이다.</p>

<p>네모반듯한 이미지라면 간단할 것이다.<br/>
하지만 조금 형태가 복잡한 이미지라면 시작점과 끝점을 찾는 게 만만치 않을 것이다. 뭐, 이건 10px, 100px 같은 단위로 오프셋을 정해놓는다던지 하는 규칙을 세워서 해결할 수 있긴 하다.<br/>
투명도가 적용된 이미지라면 상황이 좋지 않다. 위에 페이스북의 스프라이트 이미지에서 첫번째 스프라이트(X로 추정되는)를 한번보자. 이미지의 경계가 제대로 확인이 되는가? 그림자가 딸려 있는 경우에는 상황이 더욱 안좋다. 저런 이미지를 일일히 그래픽툴을 통해 그 경계를 확인하다 보면 심신이 고달프다. 나의 경우 저런 이미지들을 한땀한땀 작업하며 고통받다 단기간내에 굉장한 시력상실을 경험했다.</p>

<p>내가 제시하는 해법은, 스프라이트 이미지와는 별도로 개별 스프라이트의 원본 이미지 파일을 관리하는 것이다. 원본 파일 자체가 이미지의 크기에 대한 정보를 갖고 있으므로 이러한 고통에서 벗어날 수 있게 된다. 대단한 아이디어는 아니지만 나는 아직 그런식으로 관리되고 있는 프로젝트를 만나본 적이 없다. 나 자신도 그런 관리를 할 생각도 안했거니와 보통 디자인파일은 개별 리소스가 아닌 페이지 단위로 전달이 되었기 때문에 페이지에서 특정 리소스를 레이어 단위로 재단하고 한번에 스프라이트 이미지를 생성하는 프로세스로 작업을 했었다. 함께 일했던 다른 작업자들의 방식도 크게 차이가 없던 것으로 기억한다.</p>

<p>어쨌든 고통스러운 과정을 거쳐서 위 스프라이트 이미지 중 세번째 이미지에 대한 정보를 css로 나타내보면 다음과 같을 것이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-gear</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>스프라이트 이미지 내에서 개별 스프라이트의 위치(position)</h3>

<p>&lsquo;이미지의 특정부분만 노출'하기 위해서는 개별 스프라이트의 시작점과 크기에 대한 정보를 알 필요가 있다고 했다. 이번에는 스프라이트 이미지내에서의 개별 스프라이트의 위치에 대해 이야기를 해보자.
css로 스프라이트에 대한 정보를 기술할때 크기에 대한 정보는 <code>width</code>와 <code>height</code>으로 나타내며, 위치에 대한 정보는 <code>background-position</code>에 음수값으로 지정해서 나타낸다.</p>

<p>스프라이트 이미지에서의 위치에 대한 정보는 스프라이트 이미지 자체의 정보이기 때문에 &lsquo;원본파일을 관리'하는 방법으로는 해결이 불가능하다. 이 작업을 일일히 그래픽툴을 열고 픽셀값을 확인하는 작업은 매우 고통스럽기 때문에, 위에 거론했던 것처럼 오프셋을 정해놓는 식으로 보통 해결을 한다. 하지만 그럼에도 여전히 고통스러운 작업이다. 게다가 저런 규칙을 정해놓으면 완성된 스프라이트 이미지 파일은 낭비되는 빈 공간이 생기게 된다.</p>

<p>위에 예를 들었던 <code>.icon-gear</code>의 코드에 스프라이트의 위치 값을 추가해 보자.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.icon-gear</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-position</span><span class="o">:</span> <span class="m">-93px</span> <span class="m">-14px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>background-position</code> 속성을 주목하기 바란다. 저 값을 얻어내기 위해 그래픽툴을 열어 터치패드로 손을 부들부들 떨며 이미지의 시작점을 측정했다. 확대해보니 기어 아이콘에 눈에 잘 안보이는 반투명도 값이 설정되어 있이 있어 가장자리를 확인하는 것이 힘들었다. 오프셋을 정해놓는 규칙이 없다면 position을 알아내는것은 고통스러운 작업일 뿐이다.</p>

<h3>스케일링</h3>

<p>스프라이트 기법을 적용하는 이미지 갯수가 많아질수록 관리는 더 힘들어진다. 문제의 핵심은 position이다. 스프라이트 이미지의 공간효율성을 좋게 유지하면서 오프셋 규칙을 유지하는 것은 쉽지 않다. 기존에 사용하던 스프라이트를 삭제하거나 크기의 수정등이 발생하면 어떻게 할까. 개발을 하면서, 혹은 유지보수 단계에서 이미지가 수정되거나 예상하지 못한 사이즈의 이미지가 등장해서 공간효율성을 망쳐놓는 경우는 높은 빈도로 발생한다.</p>

<p>x/y축 반복패턴을 스프라이트하려는 경우도 문제다. 반복되는 축으로 같은 패턴을 채워넣는 식으로 구현을 하지만 그 길이를 추정하는 것은 굉장히 피곤하다. 처음 예상했던 사이즈보다 더 큰 이미지가 등장한 경우엔 어떻게 해야 할까? 이쯤되면 이미지 스프라이트 기법에 대한 회의가 밀려온다. 아무리 성능상 이점이 있다한들 유지보수성이 떨어진다면 매우 곤란하다.</p>

<h3>협업환경에서의 관리</h3>

<p>좀 더 큰 규모에서의 작업을 생각해보자. 나 혼자만이 아니라 여러사람과 함께 작업을 진행중이다. 작업자 A와 B가 각각 같은 스프라이트 이미지 파일에 새로운 스프라이트를 추가하려고 하다가 충돌이 발생했다. 누군가는 css와 이미지파일을 모두 수정해야 할 것이다. 추가가 아니라 수정/삭제 등의 이슈로 개별 이미지의 position이 변경된다면 문제는 더 커진다.</p>

<p>또 다른 협업 환경의 이슈로, 개별 이미지가 어느 부분에서 사용되고 있는지 확인이 어렵다는 문제도 있다. 모두 같은 클래스명으로 이미지를 사용하고 있는가? 사이즈와 위치를 동일하게 사용하고 있는가? 규칙을 정해놓지 않는다면 결국 일일히 찾아볼 수 밖에 없고, 확인이 어려우면 쉽게 관리를 포기하게 되어 버린다.</p>

<h2>규칙 정하기 - 몇가지 문제를 위한 해결방법</h2>

<p>위의 문제 중 몇가지는 규칙을 정함으로서 해결할 수 있다. 유용한 규칙 몇가지를 소개해 본다.</p>

<ol>
<li>원본이미지를 관리한다 - 이미지 사이즈 문제에서 해방될 수 있다</li>
<li>수정이 잦은 이미지는 스프라이트 기법을 적용하지 않는다 - 관리를 조금 편하게 해준다</li>
<li>반복패턴의 이미지는 스프라이트 기법을 적용하지 않는다 - 가장 좋은 방법은 패턴이미지의 사용을 최소하 하는 것이다</li>
<li>이미지 포맷은 png로 통일한다 - 용량 문제로 gif를 선호할 수 도 있지만 제약이 많은 포맷이다. jpg의 경우 그라데이션 등 색상정보가 많을 때 유용할 수 있지만, 사이트 레이아웃을 구성하는데 과연 적합한 형태의 이미지인지 재고해 보길 바란다. 그라데이션 같은 경우는 css3 gradient 속성으로 대체하고 구버전 브라우저는 단색을 사용하는 방법을 고려해보라</li>
</ol>


<h2>자동화 - 규칙만으로는 해결할 수 없는 부분이 있다</h2>

<p>규칙을 정해놓는다고 해도 이 작업을 사람이 하는 것은 역시 지루하고 따분한 일이다. 규칙을 좀더 정리해보면 이걸 컴퓨터가 하도록 시킬 수 있을 것 같다.  개별 스프라이트 이미지를 관리한다고 하면 다음의 추가 규칙을 생각해 볼 수 있다.</p>

<ol>
<li>원본이미지 파일명을 className으로 사용한다</li>
<li>width/height 값은 원본이미지의 width/height이다</li>
</ol>


<p>위의 규칙으로 <strong>개별 이미지들의 모음을 던지면 적절한 스프라이트 이미지를 생성해주고 필요한 css 코드를 생성해주는</strong> 도구를 생각해 볼 수 있다. 물론 이런 생각은 다른 누군가가 이미 했고, 온라인 도구로 만들어 놓기까지 했다.</p>

<ul>
<li><a href="http://ko.spritegen.website-performance.org/">CSS Sprite 생성도구</a></li>
<li><a href="http://spritepad.wearekiss.com/">SpritePad</a></li>
</ul>


<h2>자동화 - 좀 더 잘 해보자</h2>

<p>사람이 하기 귀찮은 일을 컴퓨터에 맡기는건 좋은 아이디어다. 위의 도구들을 활용하는데서 좀 더 나아가서, 개발 프로세스에 위의 태스크를 자동으로 수행하도록 녹일 수 있다면 귀찮은 작업이 더 줄어들 것이다.
그를 위한 도구가 바로 grunt-spritesmith이다.</p>

<p>간략히 소개하자면, 특정 폴더에 이미지들을 넣어두고 grunt task를 실행하면 설정에 맞추어서 스프라이트 이미지와 css 코드를 생성해주는 녀석이다. 자세한 사용법은 <a href="https://github.com/Ensighten/grunt-spritesmith#getting-started">grunt-spritesmith의 깃헙 페이지</a>를 참고해보자. 매우 친절하게 설명이 되어있다. 전에는 스프라이트 이미지를 생성해주기 위해 별도의 엔진을 설치해줬어야 했는데, 지금 살펴보니 3.0.0버전부터는 node로 작동하는 <code>pixelsmith</code>를 기본엔진으로 적용한 모양이다. (포스트를 완성해가는 현재 시점에서, 최신버전은 3.5.0이다)</p>

<p>그냥 소개만 하고 끝내면 당황할 것 같아서 예제를 만들어 보았다.<br/>
<strong><a href="https://github.com/arkist/grunt-sass-spritesmith-example">grunt-sass-spritesmith example</a></strong>을 체크아웃 받아서 소스를 살펴보자.</p>

<p>예제가 포함하고 있는 내용은 다음과 같다</p>

<ul>
<li><strong>grunt-spritesmith task 설정:</strong> grunt-spritesmith 사용을 위한 기본적인 grunt task 설정</li>
<li><strong>css 코드 커스터마이징:</strong> 바로 css 코드를 뱉어내지 않고 중간에 scss와 *.scss.mustache를 활용해 필요한 css property 코드만 생성하도록 했다</li>
<li><strong>레티나이미지용 css 코드생성:</strong> 일반이미지용, 레티나 이미지용 두개의 task를 만들어 모바일 등에서 사용되는 레티나 이미지 스프라이트 적용도 가능하게 했다</li>
</ul>


<p>간단하게 코드를 구성해 놓았으니 분석이 어렵지 않을 것이다. 예제에 추가/수정을 원한다면 깃헙 프로젝트에 풀리퀘스트나 이슈를 등록해주시길 바란다.</p>

<h2>정리</h2>

<p>이런저런 핑계로 꽤나 늦었지만 결국 포스트를 마무리했다.</p>

<p>글의 시작에서도 밝혔지만 본 포스트에선 CSS 이미지 스프라이트기법, Sass, Grunt에 대한 기본적인 내용을 알고 있다는 가정하에 &lsquo;CSS 이미지 스프라이트 자동화의 필요성과 방법'을 위주로 다루었기 때문에 그 대상이 굉장히 한정적일 것이라는 생각이 든다.</p>

<p>하지만 Sass, Grunt에 대해 모르는 사람이라도 CSS 이미지 스프라이팅에 고통을 겪어본 사람들이라면 본 글에 공감을 할 수 있을 것이다.
뭐 요샌 레이아웃을 꾸미는데 이미지를 쓰는일 자체가 많이 줄긴 했지만 규모가 있는 한국웹서비스를 유지보수 하려면 여전히 스프라이트를 자동화한다는건 의미가 있을 것이다.<br/>
Grunt, Sass, grunt-spritesmith의 모든 내용을 알아야 하는건 아니다. 겁먹지말고 예제를 차근히 살펴보자.</p>

<p>마지막으로 만약 당신이 프론트엔드 개발자이고 다양한 반복작업과 css/js의 한계에 지쳤다면 Sass와 Grunt(or <a href="http://gulpjs.com/">Gulp</a>)를 얼른 익혀보길 권하며 글을 마무리한다.</p>

<hr />

<p>다음 예고는 없다. 그냥 1년전처럼 &lsquo;2015년 시작&rsquo; 뭐 이런글이 되지 않을까 싶네.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[내가 Sass를 선택한 이유]]></title>
    <link href="http://windtale.net/blog/why-i-choose-sass/"/>
    <updated>2014-04-13T19:15:27+09:00</updated>
    <id>http://windtale.net/blog/why-i-choose-sass</id>
    <content type="html"><![CDATA[<p>css preprocessor라는 녀석들이 있다.<br/>
css의 태생적 한계를 극복하기 위해 나온 것으로 대표적으론 <a href="http://sass-lang.com/">Sass</a>, <a href="http://lesscss.org/">less</a>, <a href="http://learnboost.github.io/stylus/">stylus</a>가 있다.</p>

<p>css는 쉽고 간단하지만 갈수록 요구사항과 스펙이 복잡해지고 있고 그에따라 유지보수도 힘들어 지고 있다.<br/>
Sass등은 변수, 함수, 확장/상속 등의 기능을 추가해 이를 돕는다. 좀 더 잘 알고 싶다면 <a href="http://sass-lang.com/guide">Sass의 guide페이지</a>를 살펴보자. 다른 녀석들도 문법은 다르지만 큰 방향성은 비슷하다.</p>

<p>그 중에서도 나는 Sass를 가장 선호하는데, 이번 포스팅에서는 그에 대해 풀어보려 한다.</p>

<!-- more -->


<p>다른 두 녀석을 먼저 간단하게 살펴보고 Sass에 대해 이야기 할 것이다.<br/>
이 포스트는 상호간 문법적 차이나 사용법을 자세히 설명하지는 않는다. 그동안의 경험으로 알게된 특성을 간략히 정리해서 공유하고 의견을 나누는 것이 목적이다. 좀 더 친절하고 자세한 설명을 원한다면 포스트 최하단의 링크들을 참고해보자.</p>

<h2>less</h2>

<ul>
<li>js로 구동된다 (처음엔 Sass처럼 ruby로 구현되었었다고 한다)</li>
<li>브라우저단에서도 동작한다

<ul>
<li>환경을 갖추기 쉽기 때문에 처음 preprocessor를 사용하는 사람들은 이 이유 하나로 less를 택한다.  하지만 조금만 알아보면 제대로 사용할 수 있는 수준이 아니란걸 알게된다. 그냥 소스파일 하나면 작동하겠지만..</li>
</ul>
</li>
<li>제어문이 특이하다

<ul>
<li>물론 이는 나의 주관적인 평가다. <a href="http://lesscss.org/features/#mixin-guards-feature">Mixin Guard</a>, <a href="http://lesscss.org/features/#loops-feature">Loops</a>를 보고 알아서 판단하자</li>
<li>mixin(function)의 경우 class의 형식을 빌어 사용되고 있다. 나는 이것도 좀 혼란스러운 것 같은데..</li>
</ul>
</li>
<li>css3 작성을 돕는 <a href="http://lesshat.madebysource.com/">LESS Hat</a> 라이브러리가 있다</li>
<li>github repo 기준으로, 현재 제일 큰 커뮤니티를 갖고 있는 것으로 보인다</li>
</ul>


<h2>stylus</h2>

<ul>
<li>3대 css preprocessor 중 막내</li>
<li>js(node.js)로 구동된다</li>
<li>문법이 굉장히 유연하다

<ul>
<li>css의 문법 자체를 비틀어 버렸다</li>
<li>물론 기존에 css를 작성하던 방식 그대로도 가능하다</li>
<li>너무 관대한 문법이 독이 될 수 있다. xhtml 이전 시절을 떠올려 보면..</li>
<li>어느부분이 css고 어느부분이 stylus인지 구분이 모호하다. 초보자가 함부로 쓰기 위험할 수 있다</li>
</ul>
</li>
<li>css3 지원을 도와주는 <a href="https://github.com/visionmedia/nib">Nib</a>이라는 라이브러리가 있다</li>
<li>기능이 막강하다

<ul>
<li>Sass의 그것과 비슷하거나 더 낫다</li>
</ul>
</li>
<li>반면 성숙도는 제일 낮다

<ul>
<li>가끔 당황스러운 버그들을 만나게 된다다</li>
<li>sourcemap이나 ide의 지원등을 보면 sass, less가 적용되고 그 후에나 stylus 지원을 기대할 수 있</li>
</ul>
</li>
</ul>


<h2>그렇다면, Sass는?</h2>

<ul>
<li>역사가 제일 오래되었다

<ul>
<li>그만큼 성숙도가 높고, 커뮤니티도 크다</li>
</ul>
</li>
<li>sass/scss라는 두가지 문법이 있다

<ul>
<li>sass는 stylus처럼 css의 문법 자체를 바꾼다</li>
<li>scss는 권장되는 방식으로, css나 less의 문법과 닮아있다</li>
</ul>
</li>
<li>기능이 막강하다

<ul>
<li>stylus의 그것과 다른점은, Sass 문법은 css property와 시각적으로 좀 더 명확히 구분된다는 점이다</li>
<li><a href="http://sass-lang.com/documentation/file.Sass_REFERENCE.html#placeholder_selectors_">placeholder selector</a></li>
<li><a href="http://sass-lang.com/documentation/file.Sass_REFERENCE.html#parent-selector">parent selector</a>의 강력함</li>
</ul>
</li>
<li>ecosystem이 제일 발달되어 있다

<ul>
<li><a href="http://compass-style.org/">Compass</a>라는 강력한 라이브러리가 css3 지원, 이미지 스프라이트 자동화 등 막강한 기능을 더해준다</li>
<li>그외에도 그리드 시스템, 미디어쿼리 제어, 스타일링용 라이브러리 등이 다양하게 준비되어 있다</li>
</ul>
</li>
<li>문제는, ruby 환경으로 구동된다

<ul>
<li>그래서 느리다(고는 하는데 체감해보진 못했다)</li>
<li>다행인것은 Sass가 C로 포팅(<a href="http://libsass.org/">Libsass</a>)이 되었고 그 덕분에 이제 sass는 환경의 제약에서 자유로워졌다는 것이다</li>
</ul>
</li>
</ul>


<p>내가 생각하는 Sass의 유일한 단점은 ruby로 만들어졌다는 것이다. 애초에 ruby 개발환경에 Sass를 추가하는것은 간단하지만 java, python등 다른 개발환경에 오로지 Sass만을 위해서 ruby를 추가하는 것은 꽤나 큰 부담으로 다가온다.</p>

<p>물론 별도로 ruby를 설치하지 않고도 Sass+Compass를 사용 가능하게 해주는 <a href="http://alphapixels.com/prepros">Prepros</a> 같은 훌륭한 앱도 존재하지만, 제대로 사용하고 개발환경에 녹여내려면 cli로 Sass를 다루어야 하는데 환경구축이나 학습비용을 무시할 수는 없다.</p>

<p>다행스럽게도 Sass가 c로 포팅되어 ruby 없이도 Sass를 사용할 수 있게 되었지만 다음과 같은 문제가 있다.</p>

<h3>Libsass를 사용할 때의 문제</h3>

<h4>최신 변경사항 반영에 시간이 걸린다</h4>

<p>기본적으로 ruby기반의 Sass가 개발된 후에 Libsass로 포팅이 되는 식이라 최신의 변경사항이 바로 반영되지 못하는 문제가 있다.
오늘(2014/04/13) 기준으로 보면, Sass는 3.3 버전이 되었고 부모선택자의 확장된 사용 등 유용한 기능들을 포함하고 있는데 Libsass의 경우는 3.2의 기능들도 아직 100% 완벽하게 구현되지 않았다.</p>

<h4>Compass를 사용할 수 없다</h4>

<p>Sass는 C로 포팅이 되어 다양한 환경에서 사용할 수 있게 되었지만 Compass는 그렇지 못하다. Compass의 유용한 기능들은 그를 대체할 수 있는 방법을 찾아야 한다.</p>

<p>내가 찾아본 대안으로는 <a href="http://gruntjs.com">grunt</a> 환경을 구성하고 css3 지원에는 <a href="https://github.com/nDmitry/grunt-autoprefixer">Autoprefix</a>를, 이미지 스프라이트 자동화에는 <a href="https://github.com/Ensighten/grunt-spritesmith">Sprite Smith</a>를 사용하면 될 것 같다.</p>

<h2>정리</h2>

<p>나는 Sass를 선택해서 2년이 넘도록 개인프로젝트와 회사 업무 모두에 사용하고 있다.</p>

<p>&lsquo;내가 Sass를 선택한 이유'는 결국 다음과 같이 간단하다.<br/>
<strong>less</strong>의 경우 문법과 빈약한 기능이 맘에 안들었고, <strong>stylus</strong>는 혼자서 빠르게 작업할 때는 잘 사용하지만 협업시에는 문법과 ide 지원때문에 별로 호응을 얻지 못했다. 너무 문법이 관대한 점이 초보자가 사용하기엔 올바른 css 작성습관을 헤칠 수 있다고 판단되어 협업시에도 권장하지 않는다. <strong>Sass</strong>는 ruby 환경셋팅을 처음 할땐 괴로웠지만 친숙한 문법과 강력한 기능, 그리고 Compass의 지원으로 사용하지 않을 이유가 없었다. 앞으로도 계속 사용하고 주변인에게 꾸준히 전파할 것이다.</p>

<p>Libsass와 그의 Node.js 바인딩인 <a href="https://github.com/andrew/node-sass">node-sass</a>가 있기 때문에, 앞으로 Ruby를 사용하지 않는 환경에서는 다음과 같이 구성하려고 한다.</p>

<ul>
<li>ruby Sass -> <strong>node-sass</strong></li>
<li>Compass CSS3 helper -> <strong>Autoprefix</strong> (oldIE 대응은 별도 mixin 제작)</li>
<li>Compass Image-sprite helper -> <strong>Sprite Smith</strong></li>
<li>그리고 이들을 엮어줄 <strong>Grunt</strong></li>
</ul>


<p>이렇게 하면 이제 Node.js만 갖추면 작업자 모두 빠르고 손쉽게 개발환경을 구축할 수 있을것 같다.
Libsass가 ruby Sass의 최신사항 반영에 시간이 좀 걸린다고 해도 이는 결국 시간이 해결해 줄테고.. 뭐 활발히 업데이트 되고 있으니 기대해봐도 좋을 것 같다.</p>

<p>아직도 어떤녀석을 선택할지 망설여지는가? 이 글보다 좀 더 친절하고 자세한 <s>영어로 된</s> 자료들이 많이 있으니 천천히 살펴보고 자신의 상황에 알맞는 녀석을 골라보자.</p>

<ul>
<li><a href="http://www.slideshare.net/patricka1/css-preprocessors-sass-less-and-stylus">CSS Preprocessors. Comparing SASS, LESS and Stylus</a></li>
<li><a href="http://code.tutsplus.com/tutorials/sass-vs-less-vs-stylus-a-preprocessor-shootout--net-24320">Sass vs. LESS vs. Stylus: Preprocessor Shootout</a></li>
<li><a href="http://www.scottlogic.com/blog/2013/03/08/less-vs-sass-vs-stylus.html">LESS VS SASS VS STYLUS</a></li>
</ul>


<hr />

<p>다음번엔 프론트엔드 최적화에 이제는 필수가 되어버린 Grunt와 위에 설명한 Sprite smith를 이용해 이미지 스프라이트 자동화를 하는 방법에 대해 포스팅 할 것이다 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[유지보수와 확장성을 고려한 HTML/CSS 구조 전략]]></title>
    <link href="http://windtale.net/blog/maintainable-expandable-front-end-web-strategy/"/>
    <updated>2014-03-10T22:10:46+09:00</updated>
    <id>http://windtale.net/blog/maintainable-expandable-front-end-web-strategy</id>
    <content type="html"><![CDATA[<p>전부터 생각해 오던것이 있었다.</p>

<p>왜 웹개발자들은 java나 javascript는 어떻게든 잘 써보려고 노력하면서 html/css는 이토록 무관심한가. 왜 html/css 작업을 하는 사람들조차 좀 더 머리가 굵어지면 javascript, java 테크를 타려고만 하고 html/css를 버리는가.
그냥 내 눈에 띄지 않는것 뿐일까. 그럼 눈에 안띄는 이유는 무엇일까.</p>

<!-- more -->


<p>이 글은 웹접근성에 대한 이야기가 아니다.<br/>
기술적인 관점에서 어떻게 하면 html/css 그 자체를 좀 더 잘 써볼수 있을까에 대해서 그동안 고민해온 내용이다.<br/>
이해를 위해서는 기본적인 html/css에 대한 지식이 필요하다. 깊이 알 필요는 없다. 나도 잘 모른다.</p>

<p>글의 기승전결을 어떻게 해야 좋을지 몰라 그냥 항목들을 나열해 놓았다.<br/>
언제나와 같이 의견이 접수되는대로, 생각이 정리되는대로 글을 계속 보완할 생각이다.</p>

<p>그럼 시작하자.</p>

<h2>className을 지을때는 camelCase, under_score 보다는 hypen(-)을 사용하자</h2>

<ul>
<li><strong>쓰기 편하다</strong>: <kbd>shift</kbd>를 안눌러도 되서 새끼손가락이 편하다</li>
<li><strong>단어를 수정하기 쉽다</strong>: camelCase, under_score를 사용하게 되면 에디터에서 하나의 문자로 인식이 되어 단어가 조합되어 있는 경우 방향키를 여러번 입력해야 한다. hypen을 사용하면 마치 공백처럼 조합키(<kbd>opt</kbd>+<kbd>arrow</kbd>)로 문자열 사이를 이동할 수 있다.<br/>
이해가 잘 안된다면 지금 에디터를 열고 <code>sweetPotato</code>와 <code>sweet_potato</code>, <code>sweet-potato</code>를 쳐놓고 비교해 보자.</li>
</ul>


<p>camelCase와 under_score 사이의 고민은 단순한 취향문제일 수 있으나, hypen의 사용은 그 둘과는 확실히 다른점이 있다. 많은 오픈소스도 hypen을 사용하고 있고 html의 어트리뷰트 등도 hypen을 사용하고 있다.</p>

<h2>모듈화를 생각하자</h2>

<p>DOM handling이나 CSS styling을 하다보면 섬세하지 못한 설계 때문에 고통을 받는 경우가 많다.
<em>DOM탐색이나 CSS의 cascading은 기본적으로 html 문서 전역에 걸쳐 이루어지기 때문이다.</em></p>

<p>무엇이 문제이고 어떻게 해결할 수 있는지 하나씩 살펴보자.</p>

<h3>id 보다는 className을 활용하자</h3>

<blockquote><p>This attribute assigns a name to an element. This name must be unique in a document.</p></blockquote>

<p>html 스펙에서 id에 대한 내용이다. id는 문서내에서 유일해야 한다고 되어있다. 이러한 스펙 때문에 단일 엘리먼트를 핸들링할때는 id를 사용하는 경우가 많. 하지만 <strong>정말로 해당 이벤트나 스타일이 단 한번만 사용하게 될지</strong> 충분히 고민해야한다. 자신이 없다면 그냥 className을 사용하는것을 추천한다.</p>

<p>성능이나 기타 이유로 id 사용을 피할 수 없다면, 스펙을 어기는 일이 안생기도록 충분히 unique한 네이밍을 해야 할 것이다.
<em>(나는 최근에도 한 페이지에 <code>#container</code>라는 아이디가 두개 있는 것을 보았다)</em></p>

<h3>태그선택자의 사용을 지양하자</h3>

<p>먼저 예제코드를 보자.</p>

<p class="codepen" data-user="arkist" data-href="LCemy" data-height="300" data-type="css">See the Pen <a href="http://codepen.io/arkist/pen/LCemy">LCemy</a> by Arkist (Jinu) (<a href="//codepen.io/arkist">arkist</a>) on <a href="//codepen.io">CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>네이밍은 언제나 고통스럽고 귀찮은 일이기 때문에 위처럼 태그<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>에 스타일을 먹이거나 DOM 탐색을 수행하는 경우가 자주 보인다.
하지만 html 태그는 얼마든지 중첩되어 쓰일 수 있다. 다음의 예제를 보자.</p>

<p class="codepen" data-user="arkist" data-href="ALjHu" data-height="300" data-type="css">See the Pen <a href="http://codepen.io/arkist/pen/ALjHu">ALjHu</a> by Arkist (Jinu) (<a href="//codepen.io/arkist">arkist</a>) on <a href="//codepen.io">CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>테이블 내에 다른 테이블이 중첩해서 들어가게 되었다. <code>.info</code> 테이블에서 <code>th</code>, <code>td</code> 태그에 직접 스타일을 주었기 때문에 내부의 <code>.etc</code> 테이블의 <code>th</code>, <code>td</code>에 속성이 상속되었다. <code>#article .info .etc th</code>에는 상속된 값을 초기화하기 위한 코드가 추가되었다.</p>

<p>예제를 아주 단순화했기 때문에 별것 아닌것처럼 보이지만 테이블이 5겹정도 중첩되어 있는 경우를 상상해보자. 예제코드를 짜기도 두렵다.</p>

<p>다시 한번 떠올려 보자. <strong>html 태그들은 얼마든지 중첩될 수 있다.</strong> 당신이 아무리 조심한다고 해도 당신과 협업하는 누군가, 혹은 후에 당신의 코드를 물려받을 후임자는 고통받게 될 것이다. 그리고 그건 그의 잘못이 아니다.</p>

<p>그러니 가장 위험한 태그선택자를 사용하는것은 자제하도록 하자.</p>

<h3>짧고 단순한 네이밍을 지양하자</h3>

<p>위의 예제를 다시한번 살펴보자.
<code>.info</code>, <code>.etc</code>등 아주 단순한 이름을 사용하고 있다. css의 cascading 규칙 때문에 클래스명을 짧고 단순하게 짓고 cascading 시키는 경우가 많다. 하지만 이 또한 문제다. 다음을 보자.</p>

<p class="codepen" data-user="arkist" data-href="pkvAE" data-height="300" data-type="result">See the Pen <a href="http://codepen.io/arkist/pen/pkvAE">pkvAE</a> by Arkist (Jinu) (<a href="//codepen.io/arkist">arkist</a>) on <a href="//codepen.io">CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p><code>#job</code> 섹션을 만들고 내부에 또 정보를 표시하는 테이블인 <code>.info</code>를 만들었다. 지금으로선 문제가 없어보일지 모르겠다.
각각 <code>#article .info</code>, <code>#job .info</code>로 네임스페이스를 잘 분리한 것처럼 보인다.<br/>
<em>하지만 이또한 html 태그의 중첩을 피할 수 없다.</em> 다음을 보자.</p>

<p class="codepen" data-user="arkist" data-href="sDwuv" data-height="300" data-type="result">See the Pen <a href="http://codepen.io/arkist/pen/sDwuv">sDwuv</a> by Arkist (Jinu) (<a href="//codepen.io/arkist">arkist</a>) on <a href="//codepen.io">CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p><em><code>#job</code>이 <code>#article</code> 내부로 들어가 버렸다. <strong>이제 <code>#job .info</code> 테이블은 <code>#article .info</code>의 스타일을 그대로 상속받게 되었다.</strong></em> 세상에. <code>.active</code>처럼 상태를 나타내는 클래스를 상속받는 경우는 문제가 더욱 심각할 것이다.</p>

<p>혼자서 작업하는 경우에는 내가 무슨 단어를 사용했었는지 외우면 그만이라 생각할 수 있다. (물론 절대 추천하지는 않는다) 하지만 여럿이서 작업을 하고 있다면 지금 당장 짧고 단순한 네이밍은 그만두자. <strong>사실 세상에 혼자 짜는 코드라는건 없다.</strong></p>

<h3>모듈화를 해보자</h3>

<p>위에서 태그선택자와 짧은 네이밍에 대해 문제점만 지적하고 해법을 제시하지 않았다. 이제 그 이야기를 해보려 한다.</p>

<p><strong><a href="http://bem.info/method/definitions">BEM</a></strong>(Block-Element-Modifier)이라는 방법론이 있다. 자세한 내용은 링크로 대체한다. 이 방법론을 접하고 비로소 html 모듈화에 대한 고민을 시작할 수 있었다. 나는 BEM의 <em>Block</em>을 <strong>독립적이고, 재사용 가능한 모듈</strong>이라는 개념으로 접근해 보았다.</p>

<p>BEM에서는 <code>.block__element--modifier</code>식의 괴랄한 네이밍을 사용한다. BEM에 대해 소개하고 있는 tuts+의 <a href="http://webdesign.tutsplus.com/articles/an-introduction-to-the-bem-methodology--cms-19403">An Introduction to the BEM Methodology</a>을 살펴보면 이해하기 좀 더 쉬울 것이다. tuts+ 사이트 자체도 BEM을 따르고 있으므로 링크로 들어가 소스를 살펴보면 좋다. (처음 접했다면 아마 경악을 하게 될 것이다.)</p>

<p><strong>그리고 내가 추천하려는게 바로 이 방식이다.</strong></p>

<p>className을 길게 풀어씀으로서 얻는 장점은 다음과 같다.</p>

<ol>
<li><strong>className이 중복되는 것을 막는다</strong>: 중복되는 사례가 생기면 신기할 것 같다.</li>
<li><strong>직관적이다</strong>: 짧은 클래스명을 사용할때는 <code>.active .icon-home</code>같은 코드에서는 <em>무엇이 active 되었는지</em>가 불명확했다. BEM의 방식을 따르면 <code>.gnb__home--active .icon-home</code>같은 형태가 되어 직관직이다.</li>
<li><strong>전체 DOM tree를 살펴보지 않아도 된다</strong>: 짧은 클래스명을 사용할때는 <code>.menu</code>라는 영역이 있을때 이게 <code>.home</code>의 메뉴인지 <code>.article</code>의 메뉴인지는 DOM구조를 살펴보기전에는 알수가 없다. 하지만 BEM의 방식을 따르면 <code>.home__menu</code> 같은 형태가 되어 어느 block의 element인지 한번에 알 수 있다.</li>
</ol>


<p>썩 괜찮지 않은가? :)<br/>
내 경우에는 element 구분자 <code>__</code>, modifier 구분자<code>--</code>가 너무 과하게 느껴져서 각각 <code>-</code>, <code>__</code>로 바꿔 사용하고 있다.</p>

<p>위에 문제가 있던 코드를 수정하면 다음과 같은 형태가 될 것 같다.</p>

<p class="codepen" data-user="arkist" data-href="jKaLt" data-height="300" data-type="css">See the Pen <a href="http://codepen.io/arkist/pen/jKaLt">jKaLt</a> by Arkist (Jinu) (<a href="//codepen.io/arkist">arkist</a>) on <a href="//codepen.io">CodePen</a>.</p>


<script async src="//codepen.io/assets/embed/ei.js"></script>


<p>네이밍이 별로 마음에 안들수도 있겠지만, 일단 cascading의 악몽에서 벗어난것에 집중하자(..) 드디어 모듈별 독립성을 확보하게 되었다. 야호!</p>

<p>사실 이 개념은 완전히 새로운 것이 아니다. 유수의 jQuery 플러그인들만 보아도, 플러그인의 이름이나 약자를 prefix 붙여 일종의 네임스페이스개념으로 사용하고 있다. 보고 배우자.</p>

<h2>DOM 탐색</h2>

<h3>탐색레벨을 낮고 단순하게 유지하자</h3>

<p>위에서 className을 길게 풀어쓰는데 동의하지 않았다면, 이 내용을 보고 다시한번 생각해보자.</p>

<p>쿼리선택자를 통해 특정 엘리먼트를 찾는 경우를 생각해보자. 다음과 같은 코드가 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">auth_info</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.article &gt; .foot p &gt; .auth-info&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.article</code>의 자식노드인 <code>.foot</code>의 자손노드인 <code>p</code>의 자식노드인 <code>.auth-info</code>를 찾고 있다. 길다. 탐색레벨이 길어질 수록 성능에 악영향을 미친다. DOM 탐색은 비용이 많이 드는 작업이다.</p>

<p>사실 문제는 성능뿐만이 아니다. <em>만약 <code>.auth-info</code>가 <code>.foot</code>이 아니라 <code>.article .head</code>로 옮겨가게 되면 어떨까? <code>p</code>와 <code>.auth-info</code> 사이에 <code>div</code>가 하나 더 들어가게 되면? 당장에 저 쿼리는 못쓰게 되어버린다.</em></p>

<p>실제 서비스를 하다보면 HTML의 구조가 바뀌는일은 매우 빈번하다. 그러므로 탐색레벨은 낮고 단순하게 유지하는 것이 유지보수에 좋다. 쿼리를 단순하게 하려면? 길고 unique한 className을 사용하면 된다.</p>

<p><em>최근에는 브라우저 테스트 자동화에 대한 요구가 커지고 있는데, 테스트코드의 유지보수에 있어서도 매우 중요한 개념이라 할 수 있겠다.</em></p>

<p>css 제어에 있어서도 마찬가지다. 위의 쿼리를 응용해 살펴보자.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.article</span> <span class="nc">.foot</span> <span class="nc">.auth-info</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>만약 여기서 <code>.auth-info</code>의 배경색을 빨간색으로 오버라이드하고 싶다면, 위 코드에서 어느 부분에 변경자 클래스를 추가해야 할까? 가능한 경우의 수는 다음과 같다.</p>

<ol>
<li><code>.article</code> 앞</li>
<li><code>.article</code> 자신 (<code>.aricle.article-red</code>)</li>
<li><code>.foot</code>과 <code>.article</code> 사이</li>
<li><code>.foot</code> 자신 (<code>.foot.foot-red</code>)</li>
<li><code>.foot</code>과 <code>.auth-info</code> 사이</li>
<li><code>.auth-info</code> 자신 (<code>.auth-info.auth-info__red</code>)</li>
</ol>


<p>정말 끔찍하다. 어느부분에 클래스를 추가할지 감이 안온다. 탐색레벨이 깊어질 수록 경우의 수는 더욱 늘어난다.</p>

<p>탐색레벨을 한번 낮춰보자.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.article-auth-info</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이제 가능한 경우의 수는 다음과 같다.</p>

<ol>
<li><code>.article-auth-info</code> 앞</li>
<li><code>.article-auth-info</code> 자신 (<code>.article-auth-info.article-auth-info__red</code>)</li>
</ol>


<p>줄어든 탐색레벨만큼 고민도 줄었다 lol (물론 이건 css 얘기고, html에서는 아직 문제가 해결된 것이 아니다)</p>

<h3>환경에 대한 변경자로 root node를 활용하자</h3>

<p>위의 탐색레벨 이야기에서, css에서의 변경자 위치는 해결이 되었지만 html에서의 변경자의 위치는 해결을 하지 못했다. 이제 그 이야기를 해볼까 한다.
일단 경우의 수는 두가지가 있다. 바로 영향을 받는 엘리먼트 자신과 root node다.</p>

<p>개별 엘리먼트와 유저가 직접적인 상호작용을 하고있을때는 엘리먼트 자신에 변경자를 두어 제어한다. 그 외에 특정 상태에 대한 변경이 필요할때는 root node에 변경자(className)를 부여하여 변경을 가한다.</p>

<p><em>root node가 무엇인가?</em> 나는 다음의 세가지를 root node로 취급한다. 각각의 쓰임새와 함께 살펴보자.</p>

<ol>
<li><strong><code>&lt;html&gt;</code></strong>: client의 상태에 대한 정보를 담는다.<br/>
css, js 속성의 지원여부나 모바일/데스크탑 등의 환경정보</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html</span> <span class="na">class=</span><span class="s">&quot;js lt-ie10 cssAnimation mobile&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong><code>&lt;body&gt;</code></strong>: user의 상태에 대한 정보를 담는다.<br/>
접근중인 컨트롤러, 실행중인 액션, 로그인, AB테스트의 대상 여부 등</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;logged-in myinfo abtest-a&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><strong>모듈의 root(BEM에서의 <em>Block</em>)</strong>: 개별 모듈의 상태에 대한 정보를 담는다.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;msgbox msgbox__unread&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>어느곳에서 어떤 정보를 처리할지는 정답이 없다. 다만 이렇게 규칙을 정해두고 한정된 곳에서 상태들을 제어하면 컨트롤하기 수월하다. js에서 이벤트를 delegate 시키는것과도 비슷한 느낌이다. 핸들러가 흩어져 있으면 성능도 안좋고 제어하기도 힘든것처럼..</p>

<p>그런데 이것도 사실 내가 생각한 개념은 아니고 facebook, twitter, github, modernizr 이런데서 이미 다 하고 있는거다. 보고 배우자.</p>

<h2>상태값 제어</h2>

<p>작업을 하다보면 템플릿언어(freemarker라든가 jade라든가)와 javascript가 하나의 파일에서 서로 문법의 개성을 뽐내며 스파게티처럼 뒤엉켜 있는것을 볼 수 있다. (정말이다)<br/>
개인적으로는 이것을 백단코드를 깔끔하게 유지하기 위해 더러운 코드는 다 프론트엔드로 던져버린 음모로 보고 있다. (이건 농담이다)</p>

<p>이를 해결하려고 하면 파일의 분리가 필요한데, 이 경우 페이지의 상태값을 js로 전달할 방법이 필요하다.</p>

<p>많은이들이 익히 알다시피 자바스크립트 전역변수를 사용하는건 별로 아름답지 못한 아이디어다. 그렇다면 이 데이터들은 어디에다 실어서 통신을 해야하나.</p>

<p>나는 <a href="http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes">HTML5 스펙의 <code>data-*</code> attribute</a>에서 답을 찾았다.</p>

<blockquote><p>Custom data attributes are intended to store custom data private to the page or application, for which there are no more appropriate attributes or elements.</p></blockquote>

<p>자바스크립트 전역변수나 <code>&lt;input type="hidden"&gt;</code>을 사용하는 대신에, 그냥 태그의 <code>data-*</code> 어트리뷰트에다 데이터를 실어서 통신하면 된다. 어느 엘리먼트에 어트리뷰트를 선언할지는 위에서 다뤘다.<br/>
상호작용하는 엘리먼트에 직접 선언하든지, <code>&lt;body&gt;</code>에다가 마음껏 선언하면 된다. <code>&lt;body&gt;</code>에다 선언하는 경우는 웬지 탐색비용도 절감될 것 같은 기분이다. (이건 비교적 최근 떠오른 아이디어로, 검증해보진 않았다..)</p>

<h2>CSS 속성은 한줄에 하나만 선언한다</h2>

<ol>
<li>가독성이 좋다</li>
<li>어느속성을 어느위치에 넣을것인지 고민할 필요 없다</li>
<li><strong>diff할때 좋다. 속성 한줄에 있으면 대체 어디가 바뀐건지 모르겠다</strong> &lt;-</li>
</ol>


<p>제발 성능때문에 한줄로 선언해야 되니 마지막 세미콜론은 제거해야되니 어쩌니 하는소리는 이제 그만하고 빌드타임에 minify하는 전략을 취하자.</p>

<h2>마무리</h2>

<p>제대로 가다듬지 않아 글이 좀 난잡하긴 하지만, 그동안 개발을 하며 겪었던 이슈와 고민에 대해서 줄줄이 풀어놓아 보았다.</p>

<p>위에 열거한 사례들과 제안하는 규칙들이 너무 과하다고 생각하는가? 필자처럼 수십명이 하나의 프로젝트에 달려들어 AB테스트를 병렬로 수행하고, 하루에도 몇번씩 배포가 진행되고 있는 상황에 처하게 되면 이 글이 매우 고맙게 느껴질 것이다.</p>

<p>물론 여기 늘어놓은 내 생각들에 동의하지 않는 사람도 많을거라 생각한다. 그런분들은 정리하고 생각을 나눈 내 성의를 생각해서 아래 댓글로 자유롭게 토론을 해주시면 좋겠다. 내가 놓치거나 틀린 부분, 더 다듬을 수 있는 부분도 자유롭게 말씀 주시라.</p>

<p>다음엔 미루고 미뤄둔 sass와 친구들에 대해서 포스팅 해 볼 생각이다.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>HTML 엘리먼트라고 하는것이 옳은지, HTML 태그라고 하는것이 옳은지 헷갈린다면 다음을 참고하자 <a href="http://en.wikipedia.org/wiki/HTML_element#Elements_vs._tags">http://en.wikipedia.org/wiki/HTML_element#Elements_vs._tags</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask-SQLAlchemy, sqlalchemy-migrate 대신 SQLAlchemy, alembic 써보기]]></title>
    <link href="http://windtale.net/blog/flask-sqlalchemy-migrate-and-alembic/"/>
    <updated>2014-01-24T03:15:35+09:00</updated>
    <id>http://windtale.net/blog/flask-sqlalchemy-migrate-and-alembic</id>
    <content type="html"><![CDATA[<p>요즘 <a href="http://flask.pocoo.org/">Flask</a>를 조금씩 보고있다.</p>

<p><a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database">The Flask Mega-Tutorial, Part IV: Database</a>를 진행하다가, flask-sqlalchemy, sqlalchemy-migrate 대신에 sqlalchemy, alembic 조합으로 갈아타게 된 경험을 정리해볼까 한다.<br/>
서버사이드 웹개발에 대한 (혹은 데이터베이스에 대한?) 이해가 거의 없는 상태에서 정리하는 글이라, 잘못된 부분이 많을수도 있겠다.</p>

<!-- more -->


<p>페이스북 Flask korea 그룹에서 스터디를 모집하길래 덜컥 신청해놓고 튜토리얼을 버벅이며 조금씩 따라해보고 있다. 난 아주 기초부터 함께하는 초심자용 스터디인줄 알았는데, 그런건 아니었나 보다. Flask 기초지 파이썬 기초가 아니었어..</p>

<p>여담은 이만하고 본론으로 들어가자.</p>

<hr />

<p>튜토리얼의 4장 데이터베이스 부분을 보면 DB와 마이그레이션툴로 각각 Flask-SQLAlchemy, sqlalchemy-migrate를 사용하고 있다. 여기에서 고민이 생긴다.</p>

<h2>SQLAlchemy 대신 Flask-SQLAlchemy를 사용한다</h2>

<p>Flask에는 <a href="http://www.sqlalchemy.org/">SQLAlchemy</a>를 위한 확장인 Flask-SQLAlchemy가 존재하며, 튜토리얼에서도 해당 확장을 사용하고 있다. SQLAlchemy를 그대로 쓰는것보다는 설정할것도 줄어들고 코드가 좀 더 단순해져서 다루기가 쉽다.<br/>
하지만 db를 다루는데 Flask의 컨텍스트에 가둬두는게 맞는지 의문이 든다. Flask를 벗어나서 사용을 하려면 결국 SQLAlchemy를 배워야 하는것 아닌가?<br/>
사실 이런 고민은 현재 단계에서 불필요한 고민일 수 있다. 하지만 조금 더 유연한 대처를 위해서 일단 Flask-SQLAlchemy를 걷어내고 생짜 SQLAlchemy를 사용해보기로 했다. 이 부분은 좀 더 공부해보면서 결정하는걸로.</p>

<p><a href="http://flask.pocoo.org/docs/patterns/sqlalchemy/">SQLAlchemy in Flask</a>를 참고해보면 Flask에서 SQLAlchemy를 사용하는 4가지 방식을 소개하고 있다. 이곳을 참고하며 케이스에 맞는 선택을 하도록 하자.</p>

<h2>sqlalchemy-migrate를 사용한다</h2>

<p>이건 좀 확실히 문제라고 보는게, sqlalchemy-migrate는 이미 (별로 좋지 않은) 구시대의 유물이다. SQLAlchemy 신버전은 지원하지도 않아서 튜토리얼에서도 pip 패키지를 설치할 때 SQLAlchemy의 버전을 구버전으로 강제하고 있다. 이건 별로 좋은 선택이 아니다.</p>

<p><a href="https://code.google.com/p/sqlalchemy-migrate/">sqlalchemy-migrate 프로젝트 페이지</a>에서도 다음과 같이 안내를 하고 있으며,</p>

<blockquote><p>If you want to start a new project involving SQLAlchemy and have the need for database schema migrations use <a href="https://bitbucket.org/zzzeek/alembic">Alembic</a>. Alembic is from SQLAlchemy&rsquo;s author and is much better maintained than sqlalchemy-migrate.</p></blockquote>

<p><a href="http://blog.dahlia.kr/post/8153601295">sqlalchemy-migrate의 문제점</a>이라는 글에서도 몇가지 문제점을 지적하고 있다.</p>

<p>뭐, 내 경우에는 그냥 튜토리얼에서 소개된 sqlalchemy-migrate로 구현하는 방식이 별로 우아해보이지 않아서지만..</p>

<p>여튼 미래를 위해, alembic으로 갈아타자. 튜토리얼 만든 Miguel 아저씨도 저 튜토리얼 후에 alembic을 사용하기 위한 <strong>Flask-Migrate</strong>라는 확장을 만들어 <a href="http://blog.miguelgrinberg.com/post/flask-migrate-alembic-database-migration-wrapper-for-flask">Flask-Migrate: Alembic database migration wrapper for Flask</a>에 소개하고 있다. 이 부분은 튜토리얼 문서를 업데이트 해주면 좋을텐데, 책 쓴다고 정신이 없나보다.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Flask-Migrate는 Flask-SQLAlchemy에 의존성이 있으므로 생짜 SQLAlchemy를 사용하는 내 경우는 이 또한 생짜 alembic을 쓰기로 했다. 웬지 번거로운 선택을 해버린거 같은데..</p>

<p>alembic을 그대로 사용하기 위해서는 설정이 조금 필요하다. alembic의 <code>env.py</code>파일의 <code>target_metadata</code> 부분에 다음과 같이 선언해주자.</p>

<figure class='code'><figcaption><span>alembic/env.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># target_metadata = mymodel.Base.metadata</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">app.database</span> <span class="kn">import</span> <span class="n">Base</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">set_main_option</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;sqlalchemy.url&#39;</span><span class="p">,</span> <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">target_metadata</span> <span class="o">=</span> <span class="n">Base</span><span class="o">.</span><span class="n">metadata</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>SQLALCHEMY_DATABASE_URI</code> 부분이 핵심이다. flask의 <code>config.py</code> 파일에</p>

<figure class='code'><figcaption><span>config.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SQLALCHEMY_DATABASE_URI</span> <span class="o">=</span> <span class="s">&#39;postgresql://localhost/microblog&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>와 같이 선언해두고 SQLAlchemy와 alembic에서 공통으로 참조할 수 있도록 했다.
SQLAlchemy 설정에서도  create_engine 부분을 다음과 같이 선언해 두었다.</p>

<figure class='code'><figcaption><span>database.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;SQLALCHEMY_DATABASE_URI&#39;</span><span class="p">),</span> <span class="n">convert_unicode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>정리</h2>

<p>일단 여기까지 해두었더니 기본적인 셋팅은 완료된 것 같다. SQLAlchemy/alembic 조합으로 셋팅을 마치고 Flask 튜토리얼을 계속 진행하고 있다.</p>

<p>혹시 내가 놓치고 있거나 잘못된 부분은 피드백 부탁드린다. (__)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>튜토리얼 내용 엮어서 책으로 내는 것 같더라. <a href="http://blog.miguelgrinberg.com/post/flask-book-and-pycon-update">http://blog.miguelgrinberg.com/post/flask-book-and-pycon-update</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014년 시작]]></title>
    <link href="http://windtale.net/blog/new-year-2014/"/>
    <updated>2014-01-01T23:46:03+09:00</updated>
    <id>http://windtale.net/blog/new-year-2014</id>
    <content type="html"><![CDATA[<p>2014년이 와버렸다.<br/>
지난 2013년은 쉽지 않은 한해였다.</p>

<p>&lsquo;2013년 시작'이라는 글을 쓴지 얼마 지나지 않은것 같은데 벌써 1년이 지나가 버렸다.<br/>
한페이지에 2013년 시작 포스트와 2014년 시작 포스트가 한화면에 있는 모습을 보니 묘한 죄책감이 든다. 음.</p>

<!-- more -->


<hr />

<h2>2013년에는..</h2>

<p>회사에서 준비중이던 게임이 오픈하고 난 뒤 여러가지로 여유가 생겨서 <a href="http://slipp.net">SLiPP</a> 프로젝트에 좀 더 시간을 쓸 수 있었다. 기민하게 움직인것은 아니었지만 확실히 여유가 생기니 이것저것 아이디어도 생기고 여러가지 고민을 녹여내 볼 수 있었다.<br/>
하지만 더해서 서비스를 개선하기만 한다고 해서 커뮤니티가 커지지는 않는다는 점 또한 뼈저리게 느꼈다. 이 부분은 앞으로 더 고민과 학습이 필요할 듯.</p>

<p>여유가 생기니까 개인적인 삶을 찾기 위해 이런저런 새로운 것들을 시도해 보기도 했다.</p>

<ul>
<li><strong>전국일주</strong><br/>
  제주도에서 상경해 솔로의 삶으로 고통받는 산남3인방이서 짧은 전국일주를 했다. 그냥 몇개 스팟을 정해서 돌아다닌거지만..<br/>
  그래도 좁은차에 텐트니 기타니 구깃구깃 넣어서 산도가고 계곡도 가고 도로 한복판에서 차가 뻗어서 견인당하기도 하고 땅끝마을도 가보고 뭐 그랬다. 재미있었지.</li>
<li><strong>탁구</strong><br/>
  XL GAMES가 판교로 사옥을 이전하면서 만화방, 안마방, 탁구대 등 복지시설이 늘어났는데, 원래 구기운동이라면 질색을 하는 나이지만 같이 즐기는 동료들이 있어 탁구를 배워보았다. 식후 한시간 정도 즐겼는데 컨디션도 좋아지고 사람들과 업무외적으로 시간을 함께하는것도 좋았다. 실력은 별로 안늘음.</li>
<li><strong>크로스핏</strong><br/>
  제대로 운동을 해보자고 맘을 먹고 크로스핏을 시작했다. 항상 늦게까지 자다가 지각을 하는 일상이었는데 새벽에 운동을 다니니 지각도 안하고 체력과 체격이 썩 좋아졌다.<br/>
  그리고 후술하게 될 신변의 변화의 때에 맞추어 그만두었다. 3달쯤되었을 무렵 관절에 슬슬 통증이 오나 싶더니 마라톤 이후 무릎이 나가버렸다. 단시간에 무리한 강도의 운동(크로스핏)이 원인으로 생각되서, 당분간은 좀 정적인 운동위주로 진행하려 한다.</li>
<li><strong>미니마라톤</strong><br/>
  작년에 이허 올해도 10km짜리 마라톤을 두어번 나갔다. 체력적으로 힘든건 전혀 없었지만.. 위에 적은대로 마라톤 이후 무릎이 나가버려서 엄청 고생했다. 일상적인 걷기나 계단 내려가기가 힘든 수준? 그래도 물리치료를 받고 일주일정도 지나면 괜찮아지고는 했다. 만성이 될 조짐이 보이는것이 함정. 정적인 운동으로 운동근육을 좀 만드는게 선행되어야 할 듯 싶다.</li>
</ul>


<p>그리고 10월의 마지막 주..<br/>
아직까진 여전히 내 가슴속 최고의 조직인 XL GAMES 웹서비스실을 떠나 <a href="http://coupang.com">COUPANG</a> 애자일조직 롱아일랜드팀으로 거취를 옮기게 되었다.</p>

<p>회사가 서비스하는 게임이 생각만큼의 성과를 거두지 못해 입장이 애매해 지기도 했거니와..<br/>
팀의 성향이나 함께하는 사람들, 우리가 만드는 서비스의 훌륭함<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>과는 별개로 결국 게임회사는 게임이 메인이고 웹은 서브라는 점에 점차 한계를 느끼고 &lsquo;내가 만든 서비스가 메인이고 싶다. 내가 만든 서비스로 돈을 벌고 싶다<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>'는 생각으로 회사를 옮기게 되었다.</p>

<p>중간에 쉬지도 못하고 썩 내키지 않는 조건으로 입사가 결정되었지만, 배우자는 생각으로 기쁨맘으로 일을 시작했으나.. 몇가지 문제가 있었다.</p>

<ul>
<li>말도안되는 레거시코드</li>
<li>개발팀 외부에서 나는 대기업 냄새(별로 안좋은쪽으로)</li>
<li>꽤나 방대한 조직의 구조와 그에 따른 협업/분업/작업스타일의 문제</li>
<li><del>자존감문제</del> 뭐 이건 사연이 많은데 이제 그냥 잊자.</li>
</ul>


<p>힘든 시기를 보냈으나 이제는 수용 및 적응의 단계를 거쳐가고 있다. 이제 겨우 두달이 지났을 뿐이라, 내가 더 적응해야 하는 부분도 있고 그냥 피해갈 부분, 반드시 바꾸어야 할 부분도 모두 다 있다.<br/>
뭔가 쓸데없이 소모적인듯한 기분도 들지만.. 개발 외적으로 조직생활이나 프로젝트, 레거시를 끌고 전진하는 방법 등을 배우며 고민하고 있다. 아직 살아온 날보다 살아갈 날이 더 많은데 (아닌가?!) 중요한 부분들이다.</p>

<p>마지막으로 <a href="../new-year-2013">작년 시작 포스트</a>를 참고해보면, 내가 관심을 두고 파고들어보려는 항목을 열거했었는데 그 성과를 한번 돌아보자.</p>

<ul>
<li><strong>모바일</strong><br/>
  망했다. 손도 안댐.</li>
<li><strong>css</strong>:<br/>
  <em>전략</em>이 중요하단 얘기를 했었다. 직장을 옮기고 함께하는 작업자가 몇배나 불어났기 때문에 더욱더 중요해졌다. 엄청난 레거시와 보수적인 문화도 함께하기 때문에 우아하고 자연스럽게 새로운 개념과 기술을 받아들일 수 있도록 준비를 하고 있다. 곧 몇개의 포스트를 나누어 정리를 해 볼 요량이다.<br/>
  아, 하위 호환해야 되는 브라우저가 ie7까지로 바뀌었다. 여러분! 이제 2014년이라구요!!</li>
<li><strong>접근성</strong><br/>
  뭐 더 배운것도 없고, 밖은 여전히 수준히 심하더라. 이것도 새롭게 뭘 배우기보단 알고 있는것을 전파하는데 더 힘을 들여야 할 듯.</li>
<li><strong>프로그래밍</strong><br/>
  XL GAMES에서 여유롭던 시간에 ruby/python/java 모두 &lsquo;간단한 웹서비스 구축 튜토리얼 따라해보기&rsquo; 정도의 학습을 했다.<br/>
  아, ruby/python 얘기만 했었는데 역시 내 주변 생태계에서는 모두 java를 하고있기 때문에 도저히 무시할 수 없었다. 지금은 java 우선순위가 꽤 높다. 당장 실무에 쓰기도 하고. 그런데 스크립트 언어 쓰다 이거 하려니까 납득이 안되는 코드가 많이 보여 힘들더라.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
<li><strong>꾸준히 지속적으로 뭔가하기</strong>
  지속적으로 하고있는것들은 있지만 꾸준히 하질 못했다. 이건 신년다짐에서 더 반성해보자.</li>
</ul>


<hr />

<h2>해서, 2014년에..</h2>

<p>뭔가 신년계획을 세워야지하고 회고를 해보니, 마냥 놀기만 했던건 아니지만 개인의 성장 측면에서 좀 더디었던 것 같다는 생각이다. 뭐 이런저런 일들이 있긴 했지만 확실히 내 태도에서 문제가 되었던 점이 있다. 작년에 계획했던 것 중 제일 지켜지지 못한 &lsquo;꾸준히 지속적으로 뭔가하기&rsquo;
이다.</p>

<p>해서 올해는, 년단위 장기 계획보다는 달단위, 분기 단위의 계획과 내 하루하루의 생활패턴에 대한 고민을 해보기로 했다.</p>

<p>먼저 생활 패턴에 대해서.</p>

<ul>
<li>일찍 일어난다. 졸리면 늦잠을 잘게 아니라 낮잠을 잔다.</li>
<li>회사일에 목메지 않는다.<br/>
  내 이상과 회사의 일을 분리해서 생각한다. 이는 회사를 단순히 일터로 보겠다는 것은 것이 아니라 규모가 큰 회사에서 업무진행에 나의 에고를 타인에게 강요하지 말자는 다짐이다. 분위기를 오염시키지말고 슬며시 내 색을 녹여낼 방법을 차분히 고민한다.</li>
<li>미루지 않는다.<br/>
  고민은 정말 충분히 넘치도록 많이 한다. 하지만 최근들어 멘탈이 번아웃되서 선뜻 무언가 일을 시작하는것이 몹시 힘들게 되었다. 이를 극복하고 떠오른 일은 그날 당장 무언가 한다. 최소한 기록이라도 한다.</li>
<li>쉽게 납득하지 않는다.<br/>
  이것또한 최근들어 더욱 심해진것인데, 웬일인지 뭔가 하려고 하면 금새 장벽에 가로막혀 버리는 것이다. 1년전의 나였다면 돌파해냈을 법한 것들도 어느새 쉽게 포기하고 납득하게 되어 버렸다. 원래의 멘탈을 되찾고 이를 극복하자.<br/>
  (무겁게 썼지만 사실 전날 늦게 잤다고 그냥 늦잠을 자서 지각을 해버린다든가 하는 간단하고 일상적인 이슈가 대부분이다)</li>
<li>나의 삶을 찾는다.<br/>
  새로 직장을 옮긴 뒤 적응도 필요하고 뭔가 보여줘야한다는 강박감 같은 무언가 때문에 나를 위한 시간이 없었다. 회사에서 일하고 있거나 집에와서 피자쪼가리 씹으면서 침대서 뒹굴고 있거나.<br/>
  이제 하루에 일정시간, 힘들면 일주일에 일정시간을 잡아서 취미활동을 해보겠다.<br/>
  그게 기타가 될지 독서가 될지 영어공부가 될지 수영이 될진 모르겠다. 뭐 여튼 후보는 많으니 시간을 내어 무언가를 하겠다는거다.</li>
</ul>


<p>다음은 분기 목표다.</p>

<ul>
<li>sass를 전파한다.<br/>
  전 직장에서는 동료들이 쉽게 수용해주고 훌륭하게 적응해 주었지만, 역시 바깥세상은 달랐다. 하지만 이걸 마냥 남탓을 할 순 없다. 환상에 빠져서 제대로 전파할 생각은 안하고 내 멋대로만 써온 벌을 이제 받는거다. 내가 살아가려면 내가 살 수 있는 생태계를 만들어야 한다. 나를 위해서 하자. 내가 그동안 얻은 지식을 글이든 슬라이드든 동영상이든 어떻게든 풀어내어 보자.</li>
<li>개인프로젝트를 시작한다.<br/>
  공허한 이야기일 수 있겠다. 무슨 아이디어가 딱히 있는것도 아니고 시간이 남아도는 것도 아니다. 하지만 지속가능한 삶을 위해서 나만의 무언가를 한다는건 중요한거다. 이건 오래된 생각인데 여태 실천은 못하고 있는 그런것이다. 그러니 <em>시작</em>하자.</li>
</ul>


<hr />

<h2>하자. 미루지말고 지금하자.</h2>

<p>작년글에서 <em>하자</em>라고 끝을 맺었다. 거기에 <em>미루지말고 지금하자</em>를 더해본다.<br/>
그리고 그 시작이 지금 이 글을 쓰는 것이었다.<br/>
일년 후 또 새해의 시작에서 이 글을 돌아볼 때 부끄럽지 않도록 하자 ;)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>사실 회사를 다니던 그땐 잠시 의심을 하기도 했지만, 돌이켜보면 그만한게 없더라..<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>후에 생각해보니 좀 우습더라. &lsquo;내가 만든 서비스로 돈을 번다'는건 관점에 따라 이전에도 그래왔을 수 있고 지금도 그렇지 않을 수 있는 뭐 그런 문제.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>사실 이건 언어의 문제가 아니라 그냥 레거시코드의 문제일 수 있다. 뭐 봐야하는/보고있는 코드가 다 레거시다보니..<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - 글목록에서 Disqus 댓글 카운트가 항상 '0'일 때]]></title>
    <link href="http://windtale.net/blog/octopress-disqus-count-problem/"/>
    <updated>2013-01-29T15:36:00+09:00</updated>
    <id>http://windtale.net/blog/octopress-disqus-count-problem</id>
    <content type="html"><![CDATA[<p>요며칠 옥토프레스 자잘한 문제들을 수정하고 있다.<br/>
이번엔 blog, archives 메뉴에서 댓글이 &lsquo;0'으로 나오는 문제를 해결.</p>

<!--more-->


<h2>Disqus</h2>

<p>옥토프레스는 정적페이지 기반이기 때문에, 댓글은 외부 시스템을 끌어다 사용한다. 흔히 사용하는게 <a href="//disqus.com">Disqus</a>. 이 블로그에도 달려있는 녀석으로 소셜 댓글 시스템이라고 해야하나.. 자세한 사항은 홈페이지를 참고해보자. <del>비슷한 국내서비스로는 <a href="http://livere.com">LiveRe</a>라는 녀석이 있는데 얜 내 취향이 아니다.</del></p>

<p>여튼, 이 녀석이 달려있는데 글 하단에 달린 녀석은 잘 작동하는데 글목록 등 메뉴에서 댓글 카운트를 가져오지 못하고 항상 &lsquo;0'으로 표시를 하는 것이다. 아마 Disqus가 2012년판으로 업그레이드 되면서 내부동작방식이 뭔가 수정이 된 모양이었다. 해결법을 열심히 뒤지기 시작.. 옥토프레스의 깃헙 이슈페이지에서 <a href="https://github.com/imathis/octopress/pull/277">2.1버전에서 해당 문제가 해결 되었다는 글</a>을 발견했다. 해결이 안된것 같은데..? <a href="https://github.com/imathis/octopress/pull/277/files">해당 이슈가 어떤식으로 소스에 반영되었는지</a> 코드를 살펴 보았다.<br/>
아하, <code>source/_includes/article.html</code> 파일이 문제였구먼?</p>

<h2>써드파티 테마 이슈</h2>

<p>만약 옥토프레스의 기본 테마가 아닌 다른 개발자의 써드파티 테마를 사용하고 있다면 동일한 문제를 겪을 수 있다. <code>source/_includes</code> 디렉토리는 개별 테마에서 다루기 때문에, 메인소스와는 별개로 추가/수정된 내용을 반영해주어야 한다. 옥토프레스의 업데이트 절차에서 자동으로 해당 내용을 반영해줄 수 있을지 모르지만, <code>.themes</code> 디렉토리에서 관리되는 써드파티 테마의 경우 해당 수정사항을 반영해주지 못하기 때문에 테마를 재적용하거나 변경시 추가/수정된 내용이 누락될 수 있다. css를 수정하는 수준이 아닌 html 구조 자체를 변경하기 위해서는 조금이라도 로직이 섞인 템플릿 파일을 다루게 되고, 그렇게 원 저작자의 손을 떠난 소스는 어떻게 될지 알 수가 없다. 역시 유지보수는 어렵다.</p>

<h2>그래서 결론</h2>

<p>동일한 문제가 발생한 분들은,<br/>
<code>source/_includes/article.html</code>, <code>source/_includes/archive_post.html</code> 파일의 <code>span.comments&gt;a</code>에 <code>data-disqus-identifier</code> 속성이 누락되진 않았는지 확인해보시면 됩니다. 만약 해당 속성이 누락되었다면 <a href="https://github.com/imathis/octopress/pull/277/files">해결법</a>을 참고해서 수정하세요.<br/>
끝.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages+Octopress에서 커스텀 도메인 사용시 주의사항]]></title>
    <link href="http://windtale.net/blog/using-custom-domain-with-octopress-in-github-pages/"/>
    <updated>2013-01-28T11:57:00+09:00</updated>
    <id>http://windtale.net/blog/using-custom-domain-with-octopress-in-github-pages</id>
    <content type="html"><![CDATA[<p>근래 2~3일간 블로그 접속이 잘 안되었을 것이다.
옥토프레스를 좀 건드려보다가 도메인 셋팅파일이 자꾸 날아가는 바람에 그렇게 되었다.
나와 같은 환경에서 커스텀 도메인을 사용시 문제점과 필요한 셋팅에 대해 남겨본다.</p>

<!--more-->


<hr />

<p><strong>[2013-07-11]</strong> 이 문제는 정식으로 보고되어 해결된 것으로 보인다. <a href="http://octopress.org/docs/deploying/github/">정식사이트의 Github Pages를 통한 배포</a>에서 <strong>Custom Domains</strong>부분을 참고하자.</p>

<hr />

<blockquote><p><em>Github Pages에 커스텀 도메인을 연결하는 법은 이 포스트에서 다루지 않는다. 관련해서는 <a href="http://dogfeet.github.com/articles/2012/github-pages.html">GitHub의 페이지 기능 이용하기 - dogfeet</a>를 참고하자.</em></p></blockquote>

<p>여기서는 Github Pages+Octopress 환경에서 커스텀 도메인을 사용하는 법에 대해서만 간단히 다룬다.</p>

<hr />

<p>현재 이 블로그는 <a href="//octopress.org">Octopress</a>를 이용해 정적 페이지를 생성하고, <a href="//octopress.org/docs/deploying/github/">Github Pages에 배포</a>하는 방식으로 운영하고 있다. Github Pages는 <code>arkist.github.com</code> 같은 도메인 대신에 <code>windtale.net</code> 같은 <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">자신의 고유 도메인을 사용할 수 있는 기능</a>을 제공한다. 도메인쪽에는 DNS를 설정해주고 실제 운영되는 계정에는 해당 도메인이 적힌 CNAME 파일만 하나 있으면 된다.</p>

<figure class='code'><figcaption><span>CNAME - windtale.net</span><a href='https://github.com/arkist/arkist.github.com/blob/master/CNAME'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>windtale.net
</span></code></pre></td></tr></table></div></figure>


<p>그런데 옥토프레스를 사용하면서 문제가 되는게.. 포스트를 작성하거나 뭔가 수정을 하면서 <code>rake generate</code>, <code>rake preview</code>, <code>rake watch</code> 명령을 사용하게 되는데, 이때 <strong>public 폴더의 내용을 통째로 갱신하면서 CNAME 파일을 삭제</strong>해버리는 것이다. 그래서 옥토프레스의 Rakefile에 다음과 같이 추가해 주었다.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Check if preview posts exist, which should not be published</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;## Found posts in preview mode, regenerating files ...&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;.preview-mode&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="ss">:generate</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Generating CNAME, README&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;echo windtale.net &gt; </span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">/CNAME&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;echo Windtale.net Blog! &gt; </span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">/README&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Done!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="ss">:copydot</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">source_dir</span><span class="p">,</span> <span class="n">public_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_default</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">execute</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>위 소스상에서 9-12번째 라인이 추가한 부분다.
deploy 명령을 실행하면 <code>deploy</code>를 구성하기전에 먼저 <code>public</code> 디렉토리에 <code>CNAME</code> 파일을 생성해 준다.
그동안 파일생성 시점을 착각하고 generate쪽에 추가해뒀더니, preview시에 CNAME 파일이 삭제되는데도 모르고 지나쳤었다.
<del>요번에 블로그 접속이 안되던게 그것 때문이었다-_-)</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013년 시작]]></title>
    <link href="http://windtale.net/blog/new-year-2013/"/>
    <updated>2013-01-03T12:30:00+09:00</updated>
    <id>http://windtale.net/blog/new-year-2013</id>
    <content type="html"><![CDATA[<p>빠르다. 벌써 2013년이다.<br/>
뭔가 열심히 꾸려보자 블로그를 열었지만 이게 겨우 세번째. 게다가 꼴랑 세개 있는 글 중 &lsquo;시작'이 들어가는 제목이 두개. lol</p>

<p>어쨌든 해가 가고, 또 해가 왔으니<br/>
지난날을 돌아보고, 앞날을 생각해 봐야겠다.</p>

<!--more-->


<h2>2012년에는..</h2>

<p>열심히 살았다고 하기엔 좀 한량처럼 지내기도 했고.. 그래도 서울로 상경해서 첫 일년. 이것저것 하면서 재밌게 지냈다.</p>

<p>락공연을 다녔다거나 마라톤을 뛰었다거나 이런저런 얘긴 이 포스트에 기록하지 않는다. 일단은 기술관련 내용 위주의 블로그니까. 극히 개인적인건 페이스북에..<br/>
그렇지만 이 포스트 자체는 기술적인 내용을 깊게 풀어나가진 않을것이다. 그러기엔 쌓아둔 얘기가 많아서 풀어놓을 자신이 없다. 회사얘기, 일얘기, 관심기술 얘기를 가볍게 가볍게 끄적여 본다.</p>

<p><a href="http://xlgames.com">XL GAMES</a> 웹팀으로 이직해서 새로운 환경에서 훌륭한 동료들과 함께 한것은 <em>가장 큰 수확</em>이었다.<br/>
그간 머리속에만 굴러다니던 생각들을 실제 업무에 적용할 수 있어 좋았다. 규모가 작아서 그런것도 있지만 동료들의 도움이 없이는 힘들었을 것이다.<br/>
머릿속으로 생각만 하고 외부 사례를 보기만 하는것보다 직접 해보면서 여러 문제에 부딪히고 또 그것들을 해결/회피하는 과정에서 스스로 성장을 느낄 수 있어 즐거웠다. <del>그 과정을 글로 기록했으면 더 남는게 많았을텐데, 게으름 피우느라 그러지 못한게 아쉽다.</del><br/>
<a href="http://sass-lang.com">sass</a>나 <a href="http://get-serve.org">serve</a> 등 마크업개발에 날개를 날아주는 녀석들의 도입과 사용 전략에 대해 많은 고민을 해볼 수 있었다. 여튼 우리팀 마크업 개발자들은 짱이다. 혼자서는 힘들었겠지.</p>

<p>연말즈음에는 재미있는 프로젝트를 하나 했다. 올해 오픈베타서비스를 시작한 <a href="http://archeage.com">아키에이지</a>의 <a href="http://archeage.com/preview">프리뷰사이트</a> 개발이 그것.<br/>
이게 참.. 여럿이 붙어서 다이나믹하게 고생고생하면서 만들었다. 그간 작업물 중 자바스크립트 규모가 가장 뻐근한 녀석이었다. <a href="http://requirejs.org">RequireJS</a>의 사용이라든지 단일페이지웹, 성능 튜닝을 위한 고민 등 만들면서 쏠쏠한 재미를 느낄 있었다. 언젠가 겪었던 이슈들이나 사용한 기술들, 개발하며 고려했던 사항들을 공유하고 싶다. <del>물론 이 또한 언제가 될 지 모른다는게 함정이다.</del></p>

<p>우리팀의 개발파트장이셨고, 지금은 NHN NEXT의 교수이신 <a href="http://javajigi.net">자바지기</a>님의 <a href="http://slipp.net">SLiPP</a> 프로젝트에 참여하게 된 것도 큰 행운이다. Git과 GitHub의 사용법을 익히게 되었고 회사 업무보다 더 자유로운 서비스개발이 가능해서 즐거운 마음으로 조금씩 뚝딱거리고 있다. 아직 기여도는 1g도 안되지만 열심히 해볼 생각이다.</p>

<h2>2013년에..</h2>

<p>열심히 파고들어보려 하는 관심항목을 하나씩 풀어보겠다.</p>

<ul>
<li><strong>모바일</strong><br/>
작년에 이것저것 배움도 많고 기회도 많았는데, 모바일쪽은 거의 신경을 쓰지 못하고 지냈다. 갈수록 모바일 비중이 높아지는데, 올해는 모바일에 신경을 좀 더 써보고 싶다.</li>
<li><strong>css</strong><br/>
지금 내가 하는일 중 매력적인 부분 하나가.. 게임 내부에 크로미움 기반 브라우저가 들어가서 css3를 자유롭게 쓸 수 있다는 것이다. 웹사이트 자체도 css3를 적극 사용하고 한국웹 특유의 <em>모든 브라우저에서 동일하게 보여야 해!</em> 마인드가 없어서 매우 즐겁고 합리적으로 일할 수 있다. 게다가 sass가 함께하고 있어 더욱 든든하다. 사실 css3 속성 쓰는거야 레퍼런스 뒤지면서 어렵지 않게 쓸 수 있다. 작년에 작업을 하면서 절절하게 느낀건 <strong>전략</strong>이 매우 중요하다는 것! 마크업은 이제 단순코딩이 아니다.</li>
<li><strong>접근성</strong><br/>
마크업 관련 커뮤니티에서 슬쩍슬쩍 활동을 하면서, &lsquo;웹퍼블리셔'라는 단어로 스스로 롤을 규정짓고 접근성에 대한 허상속에 빠진 몇몇 모습에 질려버렸다. 그런모습보다는 '프론트엔드 개발자'로써 더 나은 비전을 제시하기 위해 틈틈히 접근성에 대해 고민을 해보려 한다. 'alt속성이 빠졌어요~&rsquo; 이런 이야기나 할 시기는 이미 한참전에 지났다.</li>
<li><strong>프로그래밍</strong><br/>
프로그래밍이라고는 했지만 거창한 건 아니고 언어를 몇개 배워보려고 한다. 일단 자바스크립트 베이스에, 작년에는 루비와 친해져보려고 기웃거렸는데 올해는 파이썬까지 한번 건드려볼까 한다. 이것저것 들쑤시는게 수박겉핥기라고 할 지 모르겠다. 괜찮다. 나는 특정언어를 잘하고 싶은게 아니라 프로그래밍을 기초부터 다시 해보고 싶은거니까.. 자바나 c가 아니라 루비/파이썬인 이유는 복잡하고 거창한 걸 하려는게 아니라 콘솔창에서 유틸들 깔짝깔짝대는게 재밌으니까.</li>
<li><strong>꾸준히 지속적으로 뭔가하기</strong><br/>
사실 이걸 제일 하고 싶다. 누군가 다른이에게도 제일 탐나는게 이거다. 나는 이게 굉장히 약하기 때문에.. 여기 적어놓으면 쪽팔려서라도 열심히 하겠지?</li>
</ul>


<hr />

<h2>하자</h2>

<p>고민만 하는 삶의 모습을 느리지만 조금씩 치워나가고 있다.<br/>
<em>시작하자. 그리고 끝까지 하자! ;)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 유용한 기능과 단축키]]></title>
    <link href="http://windtale.net/blog/sublime-text-tip/"/>
    <updated>2012-09-24T21:57:00+09:00</updated>
    <id>http://windtale.net/blog/sublime-text-tip</id>
    <content type="html"><![CDATA[<h2>소개</h2>

<p><a href="http://sublimetext.com">Sublime Text</a>를 쓰는 사람이 많이 늘었다. 맥/윈도우/리눅스를 지원하는 강력한 에디터이다. 심플함과 막강한 기능이 매력이다.</p>

<p>무료로 사용할 수도 있지만, (하루에 한번꼴로 구매권유 팝업이 뜨긴 한다) $59를 지불하고 정품유저로 등록하면 모든 운영체제에서 사용할 수 있는 라이센스이고, 너무도 잘 만들어진 녀석이라 나도 하나 구입해서 사용중이다.</p>

<p>공식 홈페이지나 문서에도 사용법이 나와 있긴 하지만,,
지금 블로그에서 사용하고 있는 마크다운 방식을 손에 익히기도 할겸, 그리고 주변에서 간단하게 사용법과 팁을 소개해 줬으면 좋겠다는 요구가 좀 있어서 가볍게 정리해 보기로 했다.</p>

<!--more-->


<h2>자주 쓰게되는 단축키</h2>

<ul>
<li><p><strong>행 들여쓰기 · 내어쓰기</strong>
win: <code>ctrl+[ · ctrl+]</code>, mac: <code>cmd+[ · cmd+]</code>
기본적으로 탭키를 사용할 수도 있지만, 한참 코드를 작성하다가 행단위 들여쓰기를 제어하려면 이 방식이 편하기도.</p></li>
<li><p><strong>행 상하 이동</strong>
win: <code>ctrl+shift+↕</code>, mac: <code>cmd+ctrl+↕</code></p></li>
<li><p><strong>코드블럭 접기 · 펴기</strong>
win: <code>ctrl+shift+[ · ctrl+shift+]</code>, mac: <code>cmd+opt+[ · opt+shift+]</code></p></li>
<li><p><strong>찾아바꾸기</strong>
win: <code>ctrl+h</code>, mac: <code>cmd+opt+f</code></p></li>
<li><p><strong>여러파일에서 찾기</strong>
win: <code>ctrl+shift+f</code>, mac: <code>cmd+shift+f</code></p></li>
<li><p><strong>GoTo Anything</strong>
win: <code>ctrl+p</code>, mac: <code>cmd+p</code>
GoTo Anything을 호출한다. 해당기능은 아래서 살펴볼 것이다.</p></li>
<li><p><strong>Command Palette</strong>
win: <code>ctrl+shift+p</code>, mac: <code>cmd+shift+p</code>
Command Palette를 호출한다. 해당기능은 아래서 살펴볼 것이다.</p></li>
</ul>


<h2>유용한 기능</h2>

<h3>프로젝트단위 관리</h3>

<p>단일파일만 작업할 것이 아니라면 일단 프로젝트부터 생성하고 보자. 아래 살펴볼 <strong>GoTo Anything</strong>이나 검색등을 잘 활용하려면 프로젝트 단위로 관리를 하는 것이 좋다.
상단 메뉴의 <strong>Project - Add Folder to~</strong> 메뉴로 작업공간을 프로젝트에 추가하자.</p>

<h3>GoTo Anything</h3>

<p><img src="http://windtale.net/images/posts/20120924/1.png" alt="GoTo Anything. 파일명에 'in'이라는 단어가 들어가는 파일을 찾고 있다"></p>

<p>이름 그대로 어디로든 이동이 가능하다. 단축키를 외워두면 좋다. (위에 소개했다)<br/>
실행하면 프로젝트 내의 모든 파일의 목록이 노출된다. 타이핑을 통해 목록에서 필터링을 통해 접근할 수 있다.<br/>
예를 들면 <em>view/headContainer.html.erb</em>라는 파일에 접근하려는 경우 <code>view hc erb</code>라는 식으로 축약해 입력해도 목록에는 원하는 파일이 노출될 것이다.</p>

<p>단순한 파일간 이동 뿐만이 아니라 파일내의 특정부분으로 이동도 가능하다 <code>:line 라인넘버</code>를 입력해서 파일의 특정라인으로의 접근이 가능하며, <code>@symbol 심볼명</code>을 통해 함수등 특정 심볼 정의로 이동하거나 <code>#word 단어</code>를 통한 특정단어위치로의 이동도 가능하다.</p>

<p>심지어 파일이름과 특정부분을 조합한 이동도 가능하다.
html을 수정하다가 <em>sass/common.scss</em>의 <em>#container 스타일 정의부분을 수정</em>할 일이 생겼다. 이 경우 Goto Anything에서 <code>sass comm #cont</code>만 입력하면 간단히 원하는 위치로 이동할 수 있을 것이다.
멋지지 않은가? ;)</p>

<h3>Command Palette</h3>

<p><img src="http://windtale.net/images/posts/20120924/2.png" alt="Command Palette. 'install Package' 명령을 실행하기위해 간단히 'inst pa'라고 입력했다"></p>

<p>커맨드 팔렛트는 마우스 대신 키보드로 명령을 입력해서 실행할 수 있는 강력한 도구다. 이것도 단축키를 외워두면 인생이 편해진다. (위에 소개했다)<br/>
사용가능한 모든 메뉴가 노출되므로 하나하나 살펴보는 것도 좋고, <strong>GoTo Anything</strong>처럼 몇번의 타이핑으로 원하는 명령을 빠르게 찾을 수도 있다.<br/>
예를 들면 아래서 살펴볼 <strong>Package Control</strong>의 경우, 단지 <code>paccon</code>이라고 입력하는 것으로 충분하다. <code>pcon</code>도 괜찮고 <code>pack</code>도 좋다.</p>

<h3>Package Control</h3>

<p><img src="http://windtale.net/images/posts/20120924/3.png" alt="Package Control의 Install Package 메뉴에서 패키지 목록을 둘러보고 있다. 패키지명과 간단한 설명이 노출된다"></p>

<p>일단 서브라임 텍스트를 설치했으면 먼저 실행해야 하는 작업이 이 패키지 매니저란 녀석을 설치하는 것이다.<br/>
서브라임에서는 &lsquo;패키지'라는 것이 '플러그인'의 개념이다. 패키지 매니저는 이름 그대로 서브라임이 지원하는 패키지를 관리할 수 있는 녀석이다.
복잡한 인터페이스 없이 간단한 커맨드라인명령으로 관리가 가능하다.<br/>
설치를 위해서는 먼저 콘솔창을 호출한다.</p>

<p><strong>단축키</strong> <code>ctrl+`</code></p>

<p>하단에 콘솔창이 열릴 것이다.
아래의 내용을 복사해 콘솔창에 붙여넣고 실행(엔터)한다.</p>

<blockquote><p>import urllib2,os; pf=&lsquo;Package Control.sublime-package&rsquo;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&lsquo;wb&rsquo;).write(urllib2.urlopen(&lsquo;<a href="http://sublime.wbond.net/">http://sublime.wbond.net/</a>&rsquo;+pf.replace(&lsquo; &rsquo;,&lsquo;%20&rsquo;)).read()); print &lsquo;Please restart Sublime Text to finish installation&rsquo;</p></blockquote>

<p>콘솔에 <em>Please restart Sublime Text to finish installation</em>라는 메시지가 출력되는 것을 확인하고 프로그램을 재시작한다.</p>

<p>만약 위의 명령으로 작동하지 않는다면 <a href="http://wbond.net/sublime_packages/package_control/installation">installation - Sublime Package Control</a>을 참고해서 다시한번  설치를 시도해보자.</p>

<blockquote><p><strong>[2013-07-11]</strong> 현재 베타릴리즈 된 SublimeText3의 경우 위의 방식이 아닌 git을 통한 방법으로 설치를 해야한다. <a href="http://wbond.net/sublime_packages/package_control/installation#ST3">공식사이트의 설명</a>을 참고하자.</p></blockquote>

<p>설치를 마쳤으면 이제 커맨드 팔레트를 열어 Package Control로 다룰 수 있는 명령들을 알아보자.<br/>
많이 사용하는 명령은 다음과 같다.</p>

<ul>
<li><strong>Install Package</strong>: 패키지를 설치한다.</li>
<li><strong>List Package</strong>: 설치된 패키지 목록을 확인한다.</li>
<li><strong>Remove Package</strong>: 설치된 패키지를 삭제한다.</li>
<li><strong>Update Package</strong>: 설치된 패키지에 업데이트사항이 있는지 확인하고, 업데이트 내역이 있을 경우 업데이트한다.</li>
</ul>


<p>더 자세한 내용은 <a href="http://wbond.net/sublime_packages/package_control">Sublime Package Control</a>에서 살펴볼 수 있다.</p>

<h3>유용한 패키지 목록</h3>

<blockquote><p><strong>[2013-07-11]</strong> SublimeText3의 경우 파이썬버전이 2.6 -> 3.3으로 변경되면서 호환되지 않는 패키지들이 있다. 호환성에 대해서는 <a href="https://github.com/wbond/sublime_package_control/wiki/Sublime-Text-3-Compatible-Packages">Sublime Package Control Wiki의 ST3 호환성리스트</a>를 참고하도록 하자.</p></blockquote>

<p>내가 쓰고 있는 패키지는 다음과 같다. 코딩을 즐겁게 해준다 ;)</p>

<ul>
<li><p><strong><a href="https://github.com/facelessuser/BracketHighlighter">BracketHighlighter</a></strong><br/>
블럭영역의 시작과 끝을 눈에 좀 더 잘 띄게(?) 해준다. 기본은 옅은 밑줄만 쳐져 있어 분간이 어려웠다.</p></li>
<li><p><strong><a href="https://github.com/buymeasoda/soda-theme/">Theme - Soda</a></strong><br/>
조금은 뚱뚱한 느낌이 드는 기본 테마를 변경해준다. Theme는 에디터 내부 문법강조 컬러를 변경해주는 Color Scheme과는 다른 개념으로, 프로그램 전체의 룩앤필을 칭한다.</p></li>
<li><p><strong><a href="https://github.com/talltroym/sublime-theme-railscasts">RailsCasts Theme</a></strong><br/>
위의 Theme와는 다르게 이건 Color Scheme을 변경해준다. RailsCast 스타일이다. 현재까지 써본것중엔 기본으로 포함된 Twilight과 함께 제일 편안한 색상이다.</p></li>
<li><p><strong><a href="http://wbond.net/sublime_packages/package_control">Package Control</a></strong><br/>
위에서 살펴보았다. 다양한 패키지를 커맨드 팔렛트에서 관리할 수 있도록 해준다.</p></li>
<li><p><strong><a href="https://github.com/noklesta/SublimeQuickFileCreator">Quick File Creator</a></strong><br/>
커맨드 팔렛트에서 파일, 폴더 등을 생성할 수 있다. 마우스 안녕~</p></li>
<li><p><strong><a href="https://github.com/skuroda/Sublime-AdvancedNewFile">AdvancedNewFile</a></strong><br/>
<strong>[2013.07.11]</strong> ST3 호환성문제로 위의 Quick File Creator를 대체할 녀석을 찾던 중 발견. 이쪽이 더 직관적이고 사용이 편하다.
커맨드 한번으로 파일생성 가능. <code>hello/im/arkist/msg.markdown</code>식으로 입력하면 폴더들과 파일이 한번에 생성된다. 편하다!</p></li>
<li><p><strong><a href="//emmet.io">Emmet</a> (ZenCoding)</strong><br/>
<a href="http://coding.smashingmagazine.com/2009/11/21/zen-coding-a-new-way-to-write-html-code/">젠코딩</a>을 가능하게 해준다. html 코딩할 때 이거 없으면 피곤하다.<br/>
<strong>[2012.01.26]</strong> ZenCoding이 Emmet으로 진화했다. <a href="http://docs.emmet.io/css-abbreviations/fuzzy-search/">Fuzzy Search</a> 기능 최고!</p></li>
<li><p><strong><a href="https://github.com/kuroir/SCSS.tmbundle">SCSS</a></strong><br/>
<a href="http://sass-lang.com/">SCSS</a>를 위한 문법강조를 지원한다.</p></li>
<li><p><strong><a href="https://github.com/buymeasoda/soda-theme/">ERB Insert and Toggle Commands</a></strong><br/>
ERB 블럭 입력을 도와준다.</p></li>
<li><p><strong><a href="https://github.com/Kronuz/SublimeCodeIntel">SublimeCodeIntel</a></strong><br/>
코드인텔리전스 기능이다. 지원언어는 다음과 같다.</p>

<blockquote><p>PHP, Python, RHTML, JavaScript, Smarty, Mason, Node.js, XBL, Tcl, HTML, HTML5, TemplateToolkit, XUL, Django, Perl, Ruby, Python3</p></blockquote></li>
<li><p><strong><a href="http://wbond.net/sublime_packages/sftp">SFTP</a></strong><br/>
FTP, FTPS, SFTP 지원을 위한 녀석.<br/>
_유료. 이것도 라이센스키를 입력하지 않으면 구매권유 팝업이 뜬다.</p></li>
<li><p><strong><a href="https://github.com/joelpt/sublimetext-automatic-backups">Automatic Backups</a></strong><br/>
파일을 저장할때마다 백업본을 생성해준다.<br/>
<strong>[2013.07.11]</strong> ST3 호환성을 위해 <a href="https://github.com/akalongman/sublimetext-autobackups">AutoBackups</a>로 대체.</p></li>
</ul>


<hr />

<p>짦은 글이었는데 글 쓰는 시간이 제법 오래 걸렸다; 그동안 글정리를 너무 소홀히 한듯..<br/>
새로운 내용이 생길때마다 이 포스트는 지속적으로 업데이트 할 것이다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[블로그 새로 시작 (또!)]]></title>
    <link href="http://windtale.net/blog/start-new-blog/"/>
    <updated>2012-09-24T21:35:00+09:00</updated>
    <id>http://windtale.net/blog/start-new-blog</id>
    <content type="html"><![CDATA[<p>블로그를 다시 시작하기로 했다.
여기는 기술관련된 내용 위주로 포스팅을 할 예정이다.</p>

<p>그에 안 어울리게 <strong>WindTale</strong>이라는 이름을 달고 있지만, 그냥 일단 이 이름 그대로 가자.. 나중에 사이트를 구축해서 이 공간이 서브로 들어가거나 일상 위주 포스팅이 올라가는 또다른 블로그를 만들지도 모르겠다.</p>

<p>어쨌든 그때까진 여긴 WindTale이다. <del>아직 연결은 안했지만 <a href="http://windtale.net">http://windtale.net</a> 도메인도 가지고 있고.. (지금은 옛날에 몇번 끄적이던 블로그로 연결된다)</del>
(12/09/25) 도메인을 연결했다. 이제 <a href="http://windtale.net">windtale.net</a>으로 접속하면 이 블로그가 노출될 것이다. lol</p>

<p>한없이 나태해지는걸 막기위해, 부지런히는 못하더라도 꾸준히 포스팅을 할 것이다.</p>

<!--more-->


<p>블로그 시스템은 정적페이지 기반의 블로깅엔진 <a href="http://octopress.org">Octopress</a>를 이용한다.
마크다운형식으로 글을 작성하면 옥토프레스가 정적페이지를 생성해주고, 배포를 하게되면 <a href="http://github.com">Github</a>에 내 계정으로 커밋되어 실제 페이지를 렌더링 해주는 흥미로운 구조다.
Ruby와 Git을 조금씩 공부하고 있는데, 공부도 할겸해서 한번 시도해 보았다.</p>

<p>블로그 스킨은 반응형웹디자인으로 나름 깔끔하게 만들어진 <a href="https://github.com/tommy351/Octopress-Theme-Slash">Slash</a>라는 녀석을 가져다 조금 튜닝했다. 조금 튜닝하는데도 역시 남이 만든 소스라 그런지 엄청 헤맸다@_@
일단 시작하는게 중요한거니까! 나중에 더 손보도록 한다.</p>

<p>Node.js나 Ruby 따위들이 윈도와 상성이 좋지 않아 초기셋팅에 애를 좀 먹었지만, 어떻게든 해냈다.</p>

<blockquote><p>윈도에서 옥토프레스에 도전하는 사람들을 위해 팁을 주자면, 콘솔에서 자꾸 인코딩 에러를 내뱉으면 마법의 명령어 <code>chcp 65001</code>를 시전해주자.</p></blockquote>

<p>전체 시스템은 내 개인 <a href="http://dropbox.com">Dropbox</a>에 올라가 있어서 맥-윈도를 오가며 포스팅을 할 수 있고,
실제 페이지들은 내 깃헙계정에서 서비스 되는 구조다.
이제 쓸데없이 호스팅문제로 끙끙앓지 않아도 된다! lol <del>호스팅 받고 있는거 하나 있긴 하지만</del></p>

<p>뭐 어쨌든 복잡한거 다 걷어내고 포스팅할땐 까만배경 에디터에다 키보드만 두드리니까 좋다. 글쓸맛도 나고.</p>

<p>얼마나 할진 두고 봐야겠지만,
해보자!</p>
]]></content>
  </entry>
  
</feed>
