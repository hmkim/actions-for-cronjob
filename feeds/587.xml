<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-31528299</id><updated>2018-09-17T20:05:32.515+10:00</updated><category term="swift"/><category term="스위프트"/><category term="스칼라"/><category term="scala"/><category term="actor"/><category term="akka"/><category term="class"/><category term="struct"/><category term="구조체"/><category term="액터"/><category term="클래스"/><category term="array"/><category term="dictionary"/><category term="map"/><category term="scala excercise"/><category term="딕셔너리"/><category term="맵"/><category term="배열"/><category term="스칼라 연습"/><category term="외부이름"/><category term="자바스크립트"/><category term="철학자의 만찬"/><category term="함수"/><category term="3항연산자"/><category term="BLOB"/><category term="Blogger"/><category term="FRP"/><category term="Newton method"/><category term="Oracle"/><category term="PIS"/><category term="Partial Function"/><category term="SICP"/><category term="SQL"/><category term="StackEdit"/><category term="Traversable"/><category term="YAML"/><category term="akka routing"/><category term="akka 라우팅"/><category term="anonymous function"/><category term="argument"/><category term="arithmetic operator"/><category term="capture"/><category term="character replace"/><category term="closure"/><category term="commandline"/><category term="computed property"/><category term="cygwin"/><category term="dspace"/><category term="enumeration"/><category term="external name"/><category term="final"/><category term="function"/><category term="implicit"/><category term="inheritence"/><category term="javascript"/><category term="lazy"/><category term="lens"/><category term="let"/><category term="linux"/><category term="literal"/><category term="logical operator"/><category term="memory_limit"/><category term="method"/><category term="mutating"/><category term="nested data structure"/><category term="operator"/><category term="option"/><category term="override"/><category term="parameter"/><category term="php"/><category term="php-cli"/><category term="property"/><category term="range operator"/><category term="reactive"/><category term="reactive programming"/><category term="return type"/><category term="sbt"/><category term="stored property"/><category term="subclass"/><category term="subscript"/><category term="subscript overloading"/><category term="superclass"/><category term="ternary operator"/><category term="tr"/><category term="tuple"/><category term="type"/><category term="type method"/><category term="type property"/><category term="utility"/><category term="var"/><category term="값 중심의 프로그래밍"/><category term="계산프로퍼티"/><category term="곱집합"/><category term="글쓰기"/><category term="내부이름"/><category term="내포구조"/><category term="내포함수"/><category term="논리연산자"/><category term="뉴튼법"/><category term="데카르트곱"/><category term="도사티비"/><category term="디스페이스"/><category term="렌즈"/><category term="리눅스"/><category term="리터럴"/><category term="마크다운"/><category term="매개변수"/><category term="메모리"/><category term="메서드"/><category term="명령행"/><category term="무명함수"/><category term="문자"/><category term="문자열"/><category term="문자열 함수"/><category term="문자치환"/><category term="반응형"/><category term="반응형 프로그래밍"/><category term="반환타입"/><category term="범위연산자"/><category term="변수"/><category term="부분함수"/><category term="블로그"/><category term="블롭"/><category term="산술연산자"/><category term="상속"/><category term="상수"/><category term="서브클래스"/><category term="수퍼클래스"/><category term="스위프트 언어"/><category term="아카"/><category term="암시클래스"/><category term="엑셀"/><category term="연산"/><category term="연산자"/><category term="열거형"/><category term="오라클"/><category term="오버라이드"/><category term="옵션"/><category term="인자"/><category term="일등객체"/><category term="저장프로퍼티"/><category term="지연계산"/><category term="첨자"/><category term="첨자 오버로딩"/><category term="커맨드라인"/><category term="클로저"/><category term="타입"/><category term="타입메서드"/><category term="타입프로퍼티"/><category term="튜플"/><category term="파라미터"/><category term="파이널"/><category term="포획"/><category term="프로그래밍기초"/><category term="프로퍼티"/><category term="함수형 프로그래밍"/><title type='text'>士別三日卽當刮目相對</title><subtitle type='html'>어제보다 더 나은 오늘</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://www.enshahar.me/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default?start-index=26&amp;max-results=25'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>31</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-31528299.post-6413828930656402464</id><published>2016-08-05T21:10:00.001+10:00</published><updated>2016-08-05T21:13:59.448+10:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Partial Function"/><category scheme="http://www.blogger.com/atom/ns#" term="scala"/><category scheme="http://www.blogger.com/atom/ns#" term="부분함수"/><category scheme="http://www.blogger.com/atom/ns#" term="스칼라"/><category scheme="http://www.blogger.com/atom/ns#" term="함수"/><title type='text'>용어로 살펴보는 스칼라 - 부분함수(PartialFunction)</title><content type='html'>&lt;p&gt;스칼라를 처음 시작하는 사람들은 다양한 용어에 곤란을 겪곤 합니다. 그래서 용어 중심으로 하나씩 스칼라 내용을 풀어가는 작업을 해보려 합니다. 그 첫번째는 부분함수입니다.&lt;/p&gt; &lt;p&gt;제 생각에는 스칼라에서 &lt;code&gt;PartialFunction&lt;/code&gt;이 커링이나 &lt;code&gt;for&lt;/code&gt; 내장 정도로 중요한 개념은 아닙니다. 개념이 생소할 뿐이죠. 필요성보다는 그게 뭐고, 어떤 용례가 있는지 이해하고 넘어가면 될 것 같습니다.&lt;/p&gt; &lt;h1 id=&quot;부분함수의-정의&quot;&gt;부분함수의 정의(?)&lt;/h1&gt; &lt;p&gt;&lt;code&gt;PartialFunction&lt;/code&gt;은 함수입니다. 따라서, &lt;code&gt;Function&lt;/code&gt;을 대신할 수 있습니다. 함수를 호출할 수 있는 곳에서는 &lt;code&gt;PartialFunction&lt;/code&gt;을 대신 사용할 수 있겠죠. &lt;/p&gt; &lt;p&gt;다만, &lt;code&gt;PartialFunction&lt;/code&gt;은 &lt;code&gt;isDefinedAt(value)&lt;/code&gt;을 제공해야 합니다. 이 메서드는 &lt;code&gt;value&lt;/code&gt;에 대해 함수값이 정의돼 있으면 참 , 그렇지 않으면 거짓을 반환합니다.&lt;/p&gt;   &lt;h2 id=&quot;부분함수가-필요한-이유&quot;&gt;부분함수가 필요한 이유&lt;/h2&gt; &lt;p&gt;어떤 함수를 호출하면 결과가 정상적으로 나오지 않을 때가 있다면, 그런 경우를 어떻게 처리해야 할까요? 몇가지 방법이 있겠죠. 대충 생각나는걸 적어보면…&lt;/p&gt; &lt;ol&gt;&lt;li&gt;예외를 던진다. 굳이 자세한 설명이 필요 없겠죠?&lt;/li&gt;&lt;li&gt;정상적이지 않은 경우를 표현하는 다른 반환값을 사용한다. 예를 들어 스칼라의 &lt;code&gt;Option&lt;/code&gt;이나 &lt;code&gt;Either&lt;/code&gt; 등을 사용하면 정상적인 값과 그렇지 않은 값을 처리할 수 있습니다. 자바라면 &lt;code&gt;null&lt;/code&gt;을 던지는 것도 한가지 방법이긴 하겠다(그렇다고 그렇게 해도 된다는 이야기는 아님)&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;자바의 경우 메서드 뒤에 &lt;code&gt;throws&lt;/code&gt;를 붙여서 꼭 발생할 수 있는 예외를 명시해야 하므로 어떤 함수가 예외를 발생시킬지 알 수 있습니다. 하지만 스칼라에서는 예외를 반드시 명시할 필요가 없으므로(&lt;code&gt;@throws&lt;/code&gt; 애노테이션이 있지만 쓰기 싫으면 안써도 되죠), 2번처럼 &lt;code&gt;Option&lt;/code&gt;이나 &lt;code&gt;Either&lt;/code&gt;, &lt;code&gt;Try&lt;/code&gt; 등을 활용할 것을 권장합니다. 함수의 반환 타입만 봐도 “아.. 이 함수는 예외를 발생시킬 수 있구나”하고 감이 오니까요.&lt;/p&gt; &lt;p&gt;반대로 어떤 함수가 특정한 값에 대해서만 작동하거나, 특정한 값에 대해서만 올바른 결과값을 반환할 것을 보장한다면 이를 어떻게 표현할 수 있을까요? 이때는 다음과 같은 방법이 있겠죠.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;code&gt;InvalidArgumentException&lt;/code&gt;을 던진다.&lt;/li&gt;&lt;li&gt;입력오류를 표현하는 결과값을 반환한다.&lt;/li&gt;&lt;li&gt;&lt;code&gt;PartialFunction&lt;/code&gt;으로 함수를 만들고, &lt;code&gt;isDefinedAt&lt;/code&gt;으로 먼저 함수가 정상적인 값을 반환할지를 물어본다. &lt;code&gt;isDefinedAt&lt;/code&gt;이 참을 반환하는 경우에만 함수를 호출한다.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;1번 방식은 자바식 방법이겠죠. 2번은 별로 바람직한 방법은 아닐겁니다. 미리 오류를 표현하는 결과값이 뭔지 알야아 하고, 함수를 호출한 다음 결과값을 체크해야 하니까요. 3번은 &lt;code&gt;PartialFunction&lt;/code&gt;라는 &lt;strong&gt;함수의 타입만 보고, 그 함수가 정해진 몇가지 값에 대해서만 정의된 함수라는 것을 알 수 있습니다.&lt;/strong&gt; &lt;/p&gt; &lt;p&gt;이렇게 표현했을 때 얻을 수 있는 잇점 한가지는, &lt;code&gt;PartialFunction&lt;/code&gt;끼리 조합해서 새로운 &lt;code&gt;PartialFunction&lt;/code&gt;을 만들 수 있다는 점입니다. &lt;code&gt;PartialFunction&lt;/code&gt;에 있는 다음 메서드를 봅시다.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;def andThen[C](k: (B) ⇒ C): PartialFunction[A, C]&lt;/code&gt; &lt;/li&gt;&lt;li&gt;&lt;code&gt;def orElse[A1 &amp;lt;: A, B1 &amp;gt;: B](that: PartialFunction[A1, B1]): PartialFunction[A1, B1]&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;code&gt;andThen&lt;/code&gt;은 부분함수가 정의된 경우에, 그 결과에 다른 함수를 적용해서 반환합니다. 반면, &lt;code&gt;orElse&lt;/code&gt;는 인자로 들어온 값에 대해 부분함수가 정의된 경우에는 그냥 결과값을 반환하고, 그렇지 않은 경우에는 다른 부분함수를 호출합니다. 그 부분함수가 원래의 인자에 대해 정의돼 있다면 그 결과값이 반환되게죠. &lt;code&gt;andThen&lt;/code&gt;은 &lt;code&gt;isDefinedAt()&lt;/code&gt;이 참인 범위가 확장되지 않고 그대로 유지되지만, &lt;code&gt;orElse&lt;/code&gt;는 두 부분함수의 정의역의 합집합이 새로운 정의역이 되겠죠.&lt;/p&gt;   &lt;h2 id=&quot;부분함수가-지켜야-할-사항&quot;&gt;부분함수가 지켜야 할 사항&lt;/h2&gt; &lt;p&gt;&lt;code&gt;PartialFunction&lt;/code&gt;은 &lt;code&gt;isDefinedAt&lt;/code&gt;을 제공하며, &lt;code&gt;isDefinedAt&lt;/code&gt;이 참을 반환하는 경우에는 정상적인 동작과 반환값을 보장한다는 의미가 있습니다. 호출하는 쪽에서는 먼저 &lt;code&gt;isDefinedAt&lt;/code&gt;을 호출해서 함수가 정상 작동할지를 확인할 수 있기 때문에 정상작동할거라는 확신을 가지고 함수를 호출할 수 있습니다. 물론 컴파일러가 그런 약속을 강제하지는 않기 때문에, 부분함수를 작성하는 사람이 조심해 작성해야 하고, 쓰는 사람도 가급적 &lt;code&gt;isDefinedAt()&lt;/code&gt;을 호출해 호출시 제대로된 출력이 나올지 미리 검토를 해야 합니다.&lt;/p&gt;   &lt;h2 id=&quot;예&quot;&gt;예&lt;/h2&gt;   &lt;h3 id=&quot;간단한-예&quot;&gt;간단한 예&lt;/h3&gt; &lt;p&gt;예를 봅시다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// 72법칙에 따라 복리계산시 2배 되는 기간을 계산한다.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; doublePeriod = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PartialFunction[Int, Int] {&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; apply(d: Int) = &lt;span class=&quot;hljs-number&quot;&gt;72&lt;/span&gt; / d&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; isDefinedAt(d: Int) = d &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; d &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// 너무 이율이 크면 72법칙이 맞지 않는다.&lt;/span&gt;&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이런 경우..&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;scala&amp;gt; doublePeriod(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&lt;br /&gt;res0: Int = &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; doublePeriod(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;java.lang.ArithmeticException: / by zero&lt;br /&gt;  at $anon$&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;apply$mcII$sp(&amp;lt;console&amp;gt;:&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)&lt;br /&gt;  ... &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; elided&lt;br /&gt;&lt;br /&gt;scala&amp;gt; doublePeriod(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)&lt;br /&gt;res2: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; doublePeriod.isDefinedAt(&lt;span class=&quot;hljs-number&quot;&gt;50&lt;/span&gt;)&lt;br /&gt;res3: Boolean = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; doublePeriod.isDefinedAt(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;res4: Boolean = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;보시면 아시겠지만, &lt;code&gt;isDefinedAt()&lt;/code&gt;이 거짓이라고 해서 해당 함수를 호출하지 못하는 것도 아니고, 예외가 발생하지 않는 것도 아닙니다. 그러니까, 호출하는 쪽에서 신경을 써줘야 합니다.&lt;/p&gt; &lt;p&gt;&lt;code&gt;andThen&lt;/code&gt;과 &lt;code&gt;orElse&lt;/code&gt;의 예를 봅시다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; oddFt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PartialFunction[Int, Int] {&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; apply(x: Int) = x + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; isDefinedAt(x: Int) = x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; evenFt = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PartialFunction[Int, Int] {&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; apply(x: Int) = x * &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; isDefinedAt(x: Int) = x%&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제 이 둘을 가지고 시험해 봅시다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; range = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; to &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;&lt;br /&gt;range: scala.collection.immutable.Range.Inclusive = Range(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; range.map(oddFt.isDefinedAt)&lt;br /&gt;res5: scala.collection.immutable.IndexedSeq[Boolean] = Vector(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; range.map(evenFt.isDefinedAt)&lt;br /&gt;res6: scala.collection.immutable.IndexedSeq[Boolean] = Vector(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; oddFt(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br /&gt;res9: Int = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; evenFt(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br /&gt;res10: Int = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; composed = oddFt andThen evenFt&lt;br /&gt;composed: PartialFunction[Int,Int] = &amp;lt;function1&amp;gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; composed(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; merged = oddFt orElse evenFt&lt;br /&gt;merged: PartialFunction[Int,Int] = &amp;lt;function1&amp;gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; merged(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br /&gt;res16: Int = &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; merged(&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)&lt;br /&gt;res17: Int = &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; range.map(merged.isDefinedAt)&lt;br /&gt;res18: scala.collection.immutable.IndexedSeq[Boolean] = Vector(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;스칼라에서-사용중인-부분함수의-예&quot;&gt;스칼라에서 사용중인 부분함수의 예&lt;/h2&gt;   &lt;h3 id=&quot;액터의-receive&quot;&gt;액터의 &lt;code&gt;receive&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;스칼라에서 가장 &lt;code&gt;PartialFunction&lt;/code&gt;의 예로 유명한 것은 아마도 액터의 &lt;code&gt;receive&lt;/code&gt;일 것입니다. 액터는 임의의 메시지를 받을 수 있기 때문에, 액터시스템에서는 어떤 액터가 메시지를 처리할지 아닐지를 미리 알면 좋습니다. 아카 &lt;a href=&quot;http://doc.akka.io/api/akka/2.4/?_ga=1.69164370.255820194.1469671698#akka.actor.Actor&quot;&gt;액터의 API스칼라독&lt;/a&gt;을 보면: &lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;type Receive = PartialFunction[Any, Unit]&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;abstract def receive: Actor.Receive&lt;/code&gt; : 최초 액터의 행동을 결정한다. 액터의 동작 로직이 들어있는 부분 함수여야만 한다.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;여기서 &lt;code&gt;receive&lt;/code&gt;의 타입은 &lt;code&gt;PartialFunction[Any,Unit]&lt;/code&gt;입니다. 따라서, 액터 시스템은 어떤 액터가 메시지를 처리할 수 있는지 여부를 &lt;code&gt;receive&lt;/code&gt;의 &lt;code&gt;isDefinedAt()&lt;/code&gt;을 호출해서 알아낼 수 있습니다.&lt;/p&gt;   &lt;h3 id=&quot;파서-컴비네이터의&quot;&gt;파서 컴비네이터의 &lt;code&gt;^?&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;스칼라 파서 컴비네이터의 &lt;a href=&quot;http://www.scala-lang.org/api/2.11.8/scala-parser-combinators/#scala.util.parsing.combinator.Parsers%24Parser&quot;&gt;Parser&lt;/a&gt;를 보면 다음과 같은 메서드가 있습니다.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;def ^?[U](f: PartialFunction[T, U]): Parser[U]&lt;/code&gt; : 이 메서드는 파서가 파싱에 성공하면 &lt;code&gt;f&lt;/code&gt;를 적용해주되, &lt;code&gt;f&lt;/code&gt;이 파싱 결과값에 대해 정의돼 있지 않거나, 파서가 실패했다면 오류 메시지를 표시하고 파싱을 중단하겠죠.&lt;/li&gt;&lt;li&gt;&lt;code&gt;def ^?[U](f: PartialFunction[T, U], error: (T) ⇒ String): Parser[U]&lt;/code&gt;: 이 메서드는 파서가 파싱에 성공하면 &lt;code&gt;f&lt;/code&gt;를 적용해주고, &lt;code&gt;f&lt;/code&gt;이 파싱 결과값에 대해 정의돼 있지 않으면 &lt;code&gt;error&lt;/code&gt;에 파싱 결과를 넘겨서 오류 메시지를 가져와 표시하고, 파서가 실패했다면 오류 메시지를 표시하고 파싱을 중단하겠죠.&lt;/li&gt;&lt;/ul&gt;   &lt;h2 id=&quot;부분함수를-정의하는-여러가지-방법&quot;&gt;부분함수를 정의하는 여러가지 방법&lt;/h2&gt; &lt;p&gt;앞에서 부분함수를 직접 &lt;code&gt;PartialFunction&lt;/code&gt;을 사용해 익명 클래스로 구현한 것을 봤습니다. 당연히 익명 클래스가 아닌 일반 클래스로 &lt;code&gt;PartialFunction&lt;/code&gt;을 상속하거나 믹스인해서도 구현할 수 있겠죠. 이에 대해서는 따로 설명하지 않겠습니다. 이외에도 몇가지 유용한 방법이 있습니다.&lt;/p&gt;   &lt;h2 id=&quot;match문을-활용하는-방법&quot;&gt;&lt;code&gt;match&lt;/code&gt;문을 활용하는 방법&lt;/h2&gt; &lt;p&gt;다음 프로그램을 봅시다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// match.scala라는 이름으로 저장한다.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MatchTest&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; main(args: Array[String]):Unit = {&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; y = (x:Int) =&amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      }&lt;br /&gt;    println(y(x))&lt;br /&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;// 위 y와 완전히 같은 람다지만 타입만 다르게 선언&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; z:PartialFunction[Int,String] = (x:Int) =&amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      }&lt;br /&gt;    println(z.isDefinedAt(x))&lt;br /&gt;  }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 프로그램을 &lt;code&gt;scalac -Xprint:all .\match.scala&lt;/code&gt;로 컴파일해보면 다음과 같습니다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;[[syntax trees at end of                    parser]] &lt;span class=&quot;hljs-comment&quot;&gt;// match.scala&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &amp;lt;empty&amp;gt; {&lt;br /&gt;  &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MatchTest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scala&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;AnyRef&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &amp;lt;init&amp;gt;() = {&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&amp;lt;init&amp;gt;();&lt;br /&gt;      ()&lt;br /&gt;    };&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; main(args: Array[String]): Unit = {&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; y = ((x: Int) =&amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      });&lt;br /&gt;      println(y(x));&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; z: PartialFunction[Int, String] = ((x: Int) =&amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      });&lt;br /&gt;      println(z.isDefinedAt(x))&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[[syntax trees at end of                     namer]] &lt;span class=&quot;hljs-comment&quot;&gt;// match.scala: tree is unchanged since parser&lt;/span&gt;&lt;br /&gt;[[syntax trees at end of            packageobjects]] &lt;span class=&quot;hljs-comment&quot;&gt;// match.scala: tree is unchanged since parser&lt;/span&gt;&lt;br /&gt;[[syntax trees at end of                     typer]] &lt;span class=&quot;hljs-comment&quot;&gt;// match.scala&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &amp;lt;empty&amp;gt; {&lt;br /&gt;  &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MatchTest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scala&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;AnyRef&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &amp;lt;init&amp;gt;(): MatchTest.&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; = {&lt;br /&gt;      MatchTest.&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&amp;lt;init&amp;gt;();&lt;br /&gt;      ()&lt;br /&gt;    };&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; main(args: Array[String]): Unit = {&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; y: Int =&amp;gt; String = ((x: Int) =&amp;gt; x &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      });&lt;br /&gt;      scala.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Predef.println(y.apply(x));&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; z: PartialFunction[Int,String] = ({&lt;br /&gt;        &lt;span class=&quot;hljs-annotation&quot;&gt;@SerialVersionUID&lt;/span&gt;(value = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &amp;lt;synthetic&amp;gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; $&lt;span class=&quot;hljs-title&quot;&gt;anonfun&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scala&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;runtime&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;AbstractPartialFunction&lt;/span&gt;[&lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Serializable&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &amp;lt;init&amp;gt;(): &amp;lt;$anon: Int =&amp;gt; String&amp;gt; = {&lt;br /&gt;            $anonfun.&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&amp;lt;init&amp;gt;();&lt;br /&gt;            ()&lt;br /&gt;          };&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; applyOrElse[A1 &amp;lt;: Int, B1 &amp;gt;: String](x: A1, &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;: A1 =&amp;gt; B1): B1 = (x: A1 &lt;span class=&quot;hljs-annotation&quot;&gt;@unchecked&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; (defaultCase$ @ _) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;.apply(x)&lt;br /&gt;          };&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; isDefinedAt(x: Int): Boolean = (x: Int &lt;span class=&quot;hljs-annotation&quot;&gt;@unchecked&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; (defaultCase$ @ _) =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br /&gt;          }&lt;br /&gt;        };&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; $anonfun()&lt;br /&gt;      }: PartialFunction[Int,String]);&lt;br /&gt;      scala.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Predef.println(z.isDefinedAt(x))&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;[[syntax trees at end of                    patmat]] &lt;span class=&quot;hljs-comment&quot;&gt;// match.scala&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; &amp;lt;empty&amp;gt; {&lt;br /&gt;  &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;MatchTest&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scala&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;AnyRef&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &amp;lt;init&amp;gt;(): MatchTest.&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; = {&lt;br /&gt;      MatchTest.&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&amp;lt;init&amp;gt;();&lt;br /&gt;      ()&lt;br /&gt;    };&lt;br /&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; main(args: Array[String]): Unit = {&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; y: Int =&amp;gt; String = ((x: Int) =&amp;gt; {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;synthetic&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x1: Int = x;&lt;br /&gt;        x1 &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MatchError(x1)&lt;br /&gt;        }&lt;br /&gt;      });&lt;br /&gt;      scala.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Predef.println(y.apply(x));&lt;br /&gt;      &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; z: PartialFunction[Int,String] = ({&lt;br /&gt;        &lt;span class=&quot;hljs-annotation&quot;&gt;@SerialVersionUID&lt;/span&gt;(value = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &amp;lt;synthetic&amp;gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; $&lt;span class=&quot;hljs-title&quot;&gt;anonfun&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;scala&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;runtime&lt;/span&gt;.&lt;span class=&quot;hljs-title&quot;&gt;AbstractPartialFunction&lt;/span&gt;[&lt;span class=&quot;hljs-title&quot;&gt;Int&lt;/span&gt;,&lt;span class=&quot;hljs-title&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Serializable&lt;/span&gt; {&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &amp;lt;init&amp;gt;(): &amp;lt;$anon: Int =&amp;gt; String&amp;gt; = {&lt;br /&gt;            $anonfun.&lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;.&amp;lt;init&amp;gt;();&lt;br /&gt;            ()&lt;br /&gt;          };&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; applyOrElse[A1 &amp;lt;: Int, B1 &amp;gt;: String](x: A1, &lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;: A1 =&amp;gt; B1): B1 = {&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;synthetic&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x1: A1 = (x: A1 &lt;span class=&quot;hljs-annotation&quot;&gt;@unchecked&lt;/span&gt;);&lt;br /&gt;            case7(){&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;1.&lt;/span&gt;==(x1))&lt;br /&gt;                matchEnd6(&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;)&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;                case8()&lt;br /&gt;            };&lt;br /&gt;            case8(){&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;2.&lt;/span&gt;==(x1))&lt;br /&gt;                matchEnd6(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;)&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;                case9()&lt;br /&gt;            };&lt;br /&gt;            case9(){&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;3.&lt;/span&gt;==(x1))&lt;br /&gt;                matchEnd6(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;)&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;                case10()&lt;br /&gt;            };&lt;br /&gt;            case10(){&lt;br /&gt;              matchEnd6(&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;.apply(x))&lt;br /&gt;            };&lt;br /&gt;            matchEnd6(x: B1){&lt;br /&gt;              x&lt;br /&gt;            }&lt;br /&gt;          };&lt;br /&gt;          &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; isDefinedAt(x: Int): Boolean = {&lt;br /&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &amp;lt;synthetic&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; x1: Int = (x: Int &lt;span class=&quot;hljs-annotation&quot;&gt;@unchecked&lt;/span&gt;);&lt;br /&gt;            x1 &lt;span class=&quot;hljs-keyword&quot;&gt;match&lt;/span&gt; {&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br /&gt;            }&lt;br /&gt;          }&lt;br /&gt;        };&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; $anonfun()&lt;br /&gt;      }: PartialFunction[Int,String]);&lt;br /&gt;      scala.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.Predef.println(z.isDefinedAt(x))&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;... 이하 생략 ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;잘 보시면 &lt;code&gt;typer&lt;/code&gt;가 타입체킹을 하면서 &lt;code&gt;PartialFunction&lt;/code&gt;에 해당하는 경우에는 &lt;code&gt;isDefinedAt&lt;/code&gt;과 &lt;code&gt;applyOrElse&lt;/code&gt;를 자동으로 넣어준다는 것을 알 수 있습니다. 바로 이 부분이 &lt;code&gt;match&lt;/code&gt;로 부분함수를 만드는 마법에 해당합니다. 우리가 사용한 형태 &lt;code&gt;val z: PartialFunction[Int, String] = ((x: Int) =&amp;gt; x match { ... }&lt;/code&gt;에서 &lt;code&gt;((x: Int) =&amp;gt; x match&lt;/code&gt; 부분의 &lt;code&gt;x&lt;/code&gt;는 실제로는 전혀 프로그램의 의미에 영향을 끼치지 못하고, 단지 인자가 1개인 함수를 만들어주는 역할만을 합니다. (참고로 이런 형태로 &lt;code&gt;x&lt;/code&gt;가 전혀 들어있지 않은 어떤 식 &lt;code&gt;expr&lt;/code&gt;을 &lt;code&gt;(x:Type) =&amp;gt; expr&lt;/code&gt;과 같이 함수 형식으로 확장하는 것을 에타확장이라고 부릅니다.) 따라서, 스칼라는 불필요하게 에타 확장을 할 필요 없이 직접 &lt;code&gt;match&lt;/code&gt;식의 &lt;code&gt;case&lt;/code&gt; 부분들만을 쓸 수 있게 허용합니다. 그에 따라 앞의 &lt;code&gt;z&lt;/code&gt;를 다음과 같이 정의할 수도 있습니다.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs php&quot;&gt;    val z2:PartialFunction[Int,String] = {&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Three&quot;&lt;/span&gt;&lt;br /&gt;      }&lt;br /&gt;    println(z2.isDefinedAt(x))&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 코드를 앞의 &lt;code&gt;match.scala&lt;/code&gt;에 넣고 컴파일해보면 람다의 인자 부분을 제외하면 동일한 코드를 만들어준다는 사실을 알 수 있습니다. 이런 케이스 블럭은 &lt;code&gt;PartialFunction&lt;/code&gt; 역할을 할 수 있고, &lt;code&gt;PartialFunction&lt;/code&gt;은 &lt;code&gt;Function&lt;/code&gt;이기도 하기 때문에, 함수가 필요한 곳에 람다 대신 케이스블럭을 넣을 수도 있습니다. 다만, 그런 경우에는 케이스 블럭에서 처리하지 않는 값에 대해서는 &lt;code&gt;MatchError&lt;/code&gt;가 발생할 수 있음에 유의해야겠죠. &lt;/p&gt; &lt;p&gt;이런 이유로, 매치문을 (부분함수인 케이스 블럭을 사용해) 쉽게 고차함수에 넘길 수 있습니다. &lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs php&quot;&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;) map { &lt;br /&gt;     | &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;&lt;br /&gt;     | &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt;&lt;br /&gt;     | &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Other&quot;&lt;/span&gt; }&lt;br /&gt;res2: &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;[String] = &lt;span class=&quot;hljs-keyword&quot;&gt;List&lt;/span&gt;(One, Two, Other)&lt;/code&gt;&lt;/pre&gt;   &lt;h2 id=&quot;부분함수와-컬렉션&quot;&gt;부분함수와 컬렉션&lt;/h2&gt; &lt;p&gt;대표적인 스칼라 컬렉션 &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;에 대해 생각해 봅시다. &lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; family = List(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Frank&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Kevin&quot;&lt;/span&gt;,&lt;span class=&quot;hljs-string&quot;&gt;&quot;Joshua&quot;&lt;/span&gt;)&lt;br /&gt;family: List[String] = List(Frank, Kevin, Joshua)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; family(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;res6: String = Frank&lt;br /&gt;&lt;br /&gt;scala&amp;gt; family(&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)&lt;br /&gt;java.lang.IndexOutOfBoundsException: &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;br /&gt;  at scala.collection.LinearSeqOptimized$&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.apply(LinearSeqOptimized.scala:&lt;span class=&quot;hljs-number&quot;&gt;65&lt;/span&gt;)&lt;br /&gt;  at scala.collection.immutable.List.apply(List.scala:&lt;span class=&quot;hljs-number&quot;&gt;84&lt;/span&gt;)&lt;br /&gt;  ... &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; elided&lt;br /&gt;&lt;br /&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; familyMap = Map( &lt;span class=&quot;hljs-string&quot;&gt;&quot;dad&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Frank&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;mum&quot;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;Joyce&quot;&lt;/span&gt;)&lt;br /&gt;familyMap: scala.collection.immutable.Map[String,String] = Map(dad -&amp;gt; Frank, mum -&amp;gt; Joyce)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; familyMap(&lt;span class=&quot;hljs-string&quot;&gt;&quot;dad&quot;&lt;/span&gt;)&lt;br /&gt;res8: String = Frank&lt;br /&gt;&lt;br /&gt;scala&amp;gt; familyMap(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mistress&quot;&lt;/span&gt;)&lt;br /&gt;java.util.NoSuchElementException: key not found: mistress&lt;br /&gt;  at scala.collection.MapLike$&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;(MapLike.scala:&lt;span class=&quot;hljs-number&quot;&gt;228&lt;/span&gt;)&lt;br /&gt;  at scala.collection.AbstractMap.&lt;span class=&quot;hljs-keyword&quot;&gt;default&lt;/span&gt;(Map.scala:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;)&lt;br /&gt;  at scala.collection.MapLike$&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt;.apply(MapLike.scala:&lt;span class=&quot;hljs-number&quot;&gt;141&lt;/span&gt;)&lt;br /&gt;  at scala.collection.AbstractMap.apply(Map.scala:&lt;span class=&quot;hljs-number&quot;&gt;59&lt;/span&gt;)&lt;br /&gt;  ... &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; elided&lt;br /&gt;&lt;br /&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; arr = Array(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br /&gt;arr: Array[Int] = Array(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; arr(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;res10: Int = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; arr(-&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;br /&gt;java.lang.ArrayIndexOutOfBoundsException: -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  ... &lt;span class=&quot;hljs-number&quot;&gt;32&lt;/span&gt; elided&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;List&lt;/code&gt;나 &lt;code&gt;Array&lt;/code&gt;의 &lt;code&gt;i&lt;/code&gt;번째 원소를 가져오는 연산(실제로는 &lt;code&gt;apply()&lt;/code&gt; 메서드)의 특징은 뭘까요? &lt;br&gt;- &lt;code&gt;i&lt;/code&gt;가 &lt;code&gt;0&lt;/code&gt; 이상 배열이나 리스트의 원소개수 미만이라면 해당 위치에 있는 원소를 반환한다. &lt;br&gt;- 그 이외의 경우에는 &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;이나 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;를 던진다.&lt;/p&gt; &lt;p&gt;마찬가지로, &lt;code&gt;Map&lt;/code&gt;의 경우는 다음과 같습니다. &lt;br&gt;- 인자가 &lt;code&gt;Map&lt;/code&gt;에 들어있는 키중 하나와 같으면, 그 키에 대응하는 값을 반환한다. &lt;br&gt;- 인자와 일치하는 키가 없다면,  &lt;code&gt;NoSuchElementException&lt;/code&gt;을 반환한다.&lt;/p&gt; &lt;p&gt;어디서 많이 보던 패턴 아닌가요? 맞습니다. 그래서, 스칼라의 컬렉션들은 &lt;code&gt;PartialFunction&lt;/code&gt;을 믹스인 합니다. &lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;scala&amp;gt; family.isDefinedAt(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;)&lt;br /&gt;res12: Boolean = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; familyMap.isDefinedAt(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Hoho&quot;&lt;/span&gt;)&lt;br /&gt;res13: Boolean = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;scala&amp;gt; arr.isDefinedAt(Int.MaxValue)&lt;br /&gt;res14: Boolean = &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;따라서, 스칼라에서 케이스 블럭을 사용하지 않고, &lt;code&gt;PartialFunction&lt;/code&gt;을 정의하는 간단한 방법 중 하나는 &lt;code&gt;Map&lt;/code&gt;을 만드는 것입니다. &lt;code&gt;List&lt;/code&gt;나 &lt;code&gt;Array&lt;/code&gt;는 &lt;code&gt;0&lt;/code&gt;부터 시작하고, &lt;code&gt;1&lt;/code&gt;씩 인덱스가 증가하는 연속된 범위에 대한 &lt;code&gt;PartialFunction[Int, 어떤타입]&lt;/code&gt;만을 만들 수 있기 때문에 아무래도 쓸모가 좀 덜하겠죠.&lt;/p&gt;   &lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-scala hljs &quot;&gt;scala&amp;gt; &lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; y:PartialFunction[Int, String] = Map( &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;One&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;-&amp;gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;Two&quot;&lt;/span&gt; )&lt;br /&gt;y: PartialFunction[Int,String] = Map(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; -&amp;gt; One, &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; -&amp;gt; Two)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;부분함수(partial function)과 흔히 혼동하는 것이 부분 적용한 함수(partially applied function)입니다. 다음에 기회가 되면 그에 대해 다뤄볼까 합니다.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.enshahar.me/feeds/6413828930656402464/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=31528299&amp;postID=6413828930656402464' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/6413828930656402464'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/6413828930656402464'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/2016/08/hello.html' title='용어로 살펴보는 스칼라 - 부분함수(PartialFunction)'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-31528299.post-6453871919646352060</id><published>2015-11-07T23:49:00.001+10:00</published><updated>2015-11-07T23:49:37.798+10:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="값 중심의 프로그래밍"/><category scheme="http://www.blogger.com/atom/ns#" term="도사티비"/><category scheme="http://www.blogger.com/atom/ns#" term="스칼라"/><category scheme="http://www.blogger.com/atom/ns#" term="엑셀"/><category scheme="http://www.blogger.com/atom/ns#" term="자바스크립트"/><category scheme="http://www.blogger.com/atom/ns#" term="함수형 프로그래밍"/><title type='text'>[도사티비] 함수형 프로그래밍 맛보기</title><content type='html'>&lt;h1 id=&quot;[도사티비]-함수형-프로그래밍-맛보기&quot;&gt;&lt;a name=&quot;[도사티비]-함수형-프로그래밍-맛보기&quot; href=&quot;#[도사티비]-함수형-프로그래밍-맛보기&quot;&gt;&lt;/a&gt;[도사티비] 함수형 프로그래밍 맛보기&lt;/h1&gt;&lt;h2 id=&quot;함수형-프로그래밍이란?&quot;&gt;&lt;a name=&quot;함수형-프로그래밍이란?&quot; href=&quot;#함수형-프로그래밍이란?&quot;&gt;&lt;/a&gt;함수형 프로그래밍이란?&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;오래된 글이지만 참고: “Why Functional Programming Matters”, John Hughes&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;사전적 의미(위키백과)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;함수형 프로그래밍은 자료 처리를 &lt;strong&gt;수학적 함수의 계산&lt;/strong&gt;으로 취급하고 &lt;strong&gt;상태와 가변 데이터를 멀리하는&lt;/strong&gt; 프로그래밍 패러다임의 하나이다. 명령형 프로그래밍에서는 상태를 바꾸는 것을 강조하는 것과는 달리, 함수형 프로그래밍은 함수의 응용을 강조한다. 함수형 프로그래밍은 1930년대에 계산가능성, 결정문제, 함수정의, 함수응용과 재귀를 연구하기 위해 개발된 형식체계인 람다 대수에 근간을 두고 있다. 다수의 함수형 프로그래밍 언어들은 람다 연산을 발전시킨 것으로 볼 수 있다.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;질문:-상태와-가변-데이터가-없는-프로그래밍이-정말-가능한가?&quot;&gt;&lt;a name=&quot;질문:-상태와-가변-데이터가-없는-프로그래밍이-정말-가능한가?&quot; href=&quot;#질문:-상태와-가변-데이터가-없는-프로그래밍이-정말-가능한가?&quot;&gt;&lt;/a&gt;질문: 상태와 가변 데이터가 없는 프로그래밍이 정말 가능한가?&lt;/h3&gt;&lt;h3 id=&quot;답:-그렇다!&quot;&gt;&lt;a name=&quot;답:-그렇다!&quot; href=&quot;#답:-그렇다!&quot;&gt;&lt;/a&gt;답: 그렇다!&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;충분히 복잡한 계산을 변수 없이 할 수 있다! 엑셀을 보라.&lt;br&gt;— 엑셀에서 셀간의 의존성을 DAG로 표현할 수 있으며, 연산순서는 각 셀간의 의존관계에 의해 자동 계산된다.&lt;br&gt;— 엑셀에서 한 셀의 값이 정해지고 나면, 사용자가 그 셀의 값을 변경하거나, 입력 역할을 하는 셀(계산 의존성 DAG에서 다른 셀에는 의존하지 않으면서, 다른 셀에 값을 제공하기만 하는 셀들)을 변경하지 않는 이상 결코 그 셀의 값이 바뀌지 않는다.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;엑셀의-단점:-스프레드-시트-수준에서-추상화가-불가능하다.&quot;&gt;&lt;a name=&quot;엑셀의-단점:-스프레드-시트-수준에서-추상화가-불가능하다.&quot; href=&quot;#엑셀의-단점:-스프레드-시트-수준에서-추상화가-불가능하다.&quot;&gt;&lt;/a&gt;엑셀의 단점: 스프레드 시트 수준에서 추상화가 불가능하다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;저수준 추상화는 copy &amp;amp; paste시 엑셀이 자동으로 해준다고 볼 수도 있다.&lt;br&gt;— 예: x(t+1) = x(t) - f(x(t))/f’(x(t))를 입력시 셀 위치를 가지고 잘 공식을 정의한 다음, 셀의 복사시 상대 주소 자동 조정 기능을 활용함)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;이런 셀 복사시 상대 주소 자동 변경만으로 적절한 추상화가 어렵다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;만들어진 스프레드 시트에서 공통적인 추상 패턴을 알아보기가 힘들다. 즉, 코딩은 비주얼하게 편하게 가능하지만, 스프레드 시트를 보고 공통 패턴을 파악하는 것은 어렵다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;그럼에도 불구하고, 우리는 엑셀을 통해 불변 값 위주의 계산이 유용함을 알 수 있고, 불변 값 중심의 코딩이 결코 어렵지 않음도 알 수 있다(자바 프로그래머 숫자 &amp;lt;&amp;lt;&amp;lt; 엑셀 프로그래머 숫자)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;그럼,-엑셀-코드를-프로그래밍-언어로-표현해-보자.&quot;&gt;&lt;a name=&quot;그럼,-엑셀-코드를-프로그래밍-언어로-표현해-보자.&quot; href=&quot;#그럼,-엑셀-코드를-프로그래밍-언어로-표현해-보자.&quot;&gt;&lt;/a&gt;그럼, 엑셀 코드를 프로그래밍 언어로 표현해 보자.&lt;/h2&gt;&lt;h3 id=&quot;자바스크립트-콘솔---우리의-놀이터&quot;&gt;&lt;a name=&quot;자바스크립트-콘솔---우리의-놀이터&quot; href=&quot;#자바스크립트-콘솔---우리의-놀이터&quot;&gt;&lt;/a&gt;자바스크립트 콘솔 - 우리의 놀이터&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;REPL(read-eval-print-loop, 레플이라고 읽음): 입력을 받아(read), 평가/계산하고(eval), 결과를 출력(print)하는 과정을 반복한다.&lt;br&gt;— 자바스크립트 콘솔이 우리의 REPL이라 할 수 있다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;엑셀에서 12개월 만기 이율 5% 정기적금의 1년후 만기 금액을 계산하는 식을 변수 값을 한번 설정한 다음에는 바꾸지 않는 자바스크립트로 옮겨보자.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;var i_year = 0.05;         // 5% 이율&lt;br /&gt;var i_month = i_year / 12; // 월이율&lt;br /&gt;var installment = 30000.0;   // 불입금&lt;br /&gt;var pi_0 = installment + installment * (12-0) * i_month; // 첫 불입금의 최종 원리금&lt;br /&gt;var pi_1 = installment + installment * (12-1) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_2 = installment + installment * (12-2) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_3 = installment + installment * (12-3) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_4 = installment + installment * (12-4) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_5 = installment + installment * (12-5) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_6 = installment + installment * (12-6) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_7 = installment + installment * (12-7) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_8 = installment + installment * (12-8) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_9 = installment + installment * (12-9) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_10 = installment + installment * (12-10) * i_month; // 2번째 불입금의 최종 원리금&lt;br /&gt;var pi_11 = installment + installment * (12-11) * i_month; // 12번째 불입금의 최종 원리금&lt;br /&gt;var sum = pi_0 + pi_1 + pi_2 + pi_3 + pi_4 + pi_5 + pi_6 + pi_7 + pi_8 + pi_9 + pi_10 + pi_11; // 12번의 불입에 대한 원금+이자의 총 합&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;var i_year = 0.05;         // 5% 이율 var i_month = i_year / 12; // 월이율 var installment = 30000.0;   // 불입금 var pi_0 = installment + installment * (12-0) * i_month; // 첫 불입금의 최종 원리금 var pi_1 = installment + installment * (12-1) * i_month; // 2번째 불입금의 최종 원리금 var pi_2 = installment + installment * (12-2) * i_month; // 2번째 불입금의 최종 원리금 var pi_3 = installment + installment * (12-3) * i_month; // 2번째 불입금의 최종 원리금 var pi_4 = installment + installment * (12-4) * i_month; // 2번째 불입금의 최종 원리금 var pi_5 = installment + installment * (12-5) * i_month; // 2번째 불입금의 최종 원리금 var pi_6 = installment + installment * (12-6) * i_month; // 2번째 불입금의 최종 원리금 var pi_7 = installment + installment * (12-7) * i_month; // 2번째 불입금의 최종 원리금 var pi_8 = installment + installment * (12-8) * i_month; // 2번째 불입금의 최종 원리금 var pi_9 = installment + installment * (12-9) * i_month; // 2번째 불입금의 최종 원리금 var pi_10 = installment + installment * (12-10) * i_month; // 2번째 불입금의 최종 원리금 var pi_11 = installment + installment * (12-11) * i_month; // 12번째 불입금의 최종 원리금 var sum = pi_0 + pi_1 + pi_2 + pi_3 + pi_4 + pi_5 + pi_6 + pi_7 + pi_8 + pi_9 + pi_10 + pi_11; // 12번의 불입에 대한 원금+이자의 총 합 &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;추상화(abstraction): 별것 아니고, 코드에서 공통 패턴을 하나로 묶고 부르기 편하게 이름을 붙이는 것임&lt;/li&gt;&lt;li&gt;반복되는 패턴이 무엇일까? &lt;code&gt;installment + installment * (12-&amp;lt;불입회차&amp;gt;) * i_month;&lt;/code&gt;이 반복된다. &lt;/li&gt;&lt;li&gt;이 패턴은  &lt;code&gt;installment&lt;/code&gt;, &lt;code&gt;ith&lt;/code&gt;, &lt;code&gt;i_month&lt;/code&gt;에 따른 불입금과 최종이자의 합을 표현한다.&lt;/li&gt;&lt;li&gt;반복되는 부분은 불입금과 그 불입금에 대한 이자의 합계를 계산하는 식 부분이다.&lt;/li&gt;&lt;li&gt;매번 달라지는 부분은 &lt;code&gt;installment&lt;/code&gt;, &lt;code&gt;ith&lt;/code&gt;, &lt;code&gt;i_month&lt;/code&gt;이다(사실은 12도 만기 개월수에 따라 바뀐다).&lt;/li&gt;&lt;li&gt;전체 식에 이름을 붙이되, 매번 달라지는 부분을 입력(함수의 입력을 다른 말로 매개변수라 한다)으로 만들고, 계산 결과를 돌려주게 하자.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;// 코드 읽는 방법: &lt;br /&gt;//    getPIValue라는 이름은 함수(function)인데, &lt;br /&gt;//    인자로 installment, i_month, t_month, ith를 받아서&lt;br /&gt;//    installment + installment * (t_month-ith) * i_month를 반환한다.&lt;br /&gt;var getPIValue = function(installment, i_month, t_month, ith) {&lt;br /&gt;  return installment + installment * (t_month-ith) * i_month;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;// 코드 읽는 방법:  //    getPIValue라는 이름은 함수(function)인데,  //    인자로 installment, i_month, t_month, ith를 받아서 //    installment + installment * (t_month-ith) * i_month를 반환한다. var getPIValue = function(installment, i_month, t_month, ith) {   return installment + installment * (t_month-ith) * i_month; } &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;여기서 &lt;code&gt;function(매개변수) { ... }&lt;/code&gt; 부분을 익명함수(anonymous)라고 함.&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;내가 그 함수에 var로 이름을 붙이기 전에는 그는 다만 익명함수에 지나지 않았다 - 익명함수 by 익명작가&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;생각해보면 이 함수는 적금 계산 엑셀 워크시트의 테이블의 각 행을 getPTValue라는 함수로 바꾼 것이다. 사실 함수값을 식으로 계산하는 것과, 표로 만들어 놓은 입력값과 출력값 사이의 관계를 해석하는 데는 일맥상통하는 부분이 있다. 다만, 표는 유한하지만, 함수는 입력이 무한한 경우 출력도 무한할 수 있다.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;여기서, 함수 내부는 외부에 대해 닫힌 세상이다.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;외부에서 주입되는 매개변수는 함수의 결과를 변화시키지만, 함수가 외부를 변화시키는 일은 없다.&lt;/li&gt;&lt;li&gt;외부에서 함수의 결과를 바꾸는 유일한 방법은 매개변수에 다른 값을 전달하는 것 뿐이며, 매개변수가 같은 경우엔 함수의 결과도 항상 같다.&lt;/li&gt;&lt;li&gt;1,2를 다른말로 하자면, 함수의 결과가 어떤 상태에 의존하지 않고 매개변수에만 의존하며, 함수의 실행으로 인해 반환값 외에 다른 어떤 상태가 바뀌는 일도 없다. 이를 &lt;em&gt;부수효과(side effect)가 없다&lt;/em&gt;고 말한다.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;— 이런 경우, 매개변수가 같으면 함수의 결과도 같고, 함수가 함수 바깥에 영향을 끼치지 못하기 때문에, 같은 매개변수로 함수를 호출하는 경우가 여러번 있다면, 그 모든 호출을 결과값으로 바꿔치기 해도 안전하고, 함수를 호출해 계산한 것이나, 호출하는 대신 결과값으로 바꿔치기 해서 계산한 것이나 그 결과는 동일하다. 이를 &lt;em&gt;참조 투명성(referential transparency)&lt;/em&gt;이라 한다.&lt;br&gt;— 이렇게 부수효과가 없으며, 입력이 같으면 출력이 같은 함수를 순수함수(pure function)라고 부른다. &lt;/p&gt;&lt;h4 id=&quot;개선한-프로그램&quot;&gt;&lt;a name=&quot;개선한-프로그램&quot; href=&quot;#개선한-프로그램&quot;&gt;&lt;/a&gt;개선한 프로그램&lt;/h4&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;var i_year = 0.05;         // 5% 이율&lt;br /&gt;var i_month = i_year / 12; // 월이율&lt;br /&gt;var installment = 30000.0;   // 불입금&lt;br /&gt;&lt;br /&gt;// installment를 월이율 i_month로 불입하는 t_month 만기 적금에서, ith번째(ith는 0부터 t_month-1 까지) 불입금에서 얻을 수 있는 이자와 원금의 합을 구한다.&lt;br /&gt;var getPIValue = function(installment, i_month, t_month, ith) {&lt;br /&gt;  return installment + installment * (t_month-ith) * i_month;&lt;br /&gt;}&lt;br /&gt;var pi_0 = getPIValue(installment, i_month, 12, 0);&lt;br /&gt;var pi_1 = getPIValue(installment, i_month, 12, 1);&lt;br /&gt;var pi_2 = getPIValue(installment, i_month, 12, 2);&lt;br /&gt;var pi_3 = getPIValue(installment, i_month, 12, 3);&lt;br /&gt;var pi_4 = getPIValue(installment, i_month, 12, 4);&lt;br /&gt;var pi_5 = getPIValue(installment, i_month, 12, 5);&lt;br /&gt;var pi_6 = getPIValue(installment, i_month, 12, 6);&lt;br /&gt;var pi_7 = getPIValue(installment, i_month, 12, 7);&lt;br /&gt;var pi_9 = getPIValue(installment, i_month, 12, 8);&lt;br /&gt;var pi_10 = getPIValue(installment, i_month, 12, 9);&lt;br /&gt;var pi_11 = getPIValue(installment, i_month, 12, 10);&lt;br /&gt;&lt;br /&gt;var sum = pi_0 + pi_1 + pi_2 + pi_3 + pi_4 + pi_5 + pi_6 + pi_7 + pi_8 + pi_9 + pi_10 + pi_11; // 12번의 불입에 대한 원금+이자의 총 합&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;var i_year = 0.05;         // 5% 이율 var i_month = i_year / 12; // 월이율 var installment = 30000.0;   // 불입금  // installment를 월이율 i_month로 불입하는 t_month 만기 적금에서, ith번째(ith는 0부터 t_month-1 까지) 불입금에서 얻을 수 있는 이자와 원금의 합을 구한다. var getPIValue = function(installment, i_month, t_month, ith) {   return installment + installment * (t_month-ith) * i_month; } var pi_0 = getPIValue(installment, i_month, 12, 0); var pi_1 = getPIValue(installment, i_month, 12, 1); var pi_2 = getPIValue(installment, i_month, 12, 2); var pi_3 = getPIValue(installment, i_month, 12, 3); var pi_4 = getPIValue(installment, i_month, 12, 4); var pi_5 = getPIValue(installment, i_month, 12, 5); var pi_6 = getPIValue(installment, i_month, 12, 6); var pi_7 = getPIValue(installment, i_month, 12, 7); var pi_9 = getPIValue(installment, i_month, 12, 8); var pi_10 = getPIValue(installment, i_month, 12, 9); var pi_11 = getPIValue(installment, i_month, 12, 10);  var sum = pi_0 + pi_1 + pi_2 + pi_3 + pi_4 + pi_5 + pi_6 + pi_7 + pi_8 + pi_9 + pi_10 + pi_11; // 12번의 불입에 대한 원금+이자의 총 합 &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;행복한가? 조금…. 왜? 그래도 노가다. 머리가 나쁘면 몸이 고생&lt;/li&gt;&lt;li&gt;현재까지 우리가 아는 언어 요소(순수함수 + 불변 값 + 기본 산술연산) 만으로 해결이 불가능함&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;반복적인-작업을-프로그램이-하게-만들기&quot;&gt;&lt;a name=&quot;반복적인-작업을-프로그램이-하게-만들기&quot; href=&quot;#반복적인-작업을-프로그램이-하게-만들기&quot;&gt;&lt;/a&gt;반복적인 작업을 프로그램이 하게 만들기&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;함수가 자기 자신을 호출할 수 있다면 반복이 가능하다!&lt;/li&gt;&lt;li&gt;어떻게 하면 함수안에서 자기 자신을 부르게 할 수 있을까?&lt;/li&gt;&lt;li&gt;결국, 함수를 정의하면서 내부에서 자신을 부를 이름을 지정하게 해야 한다.&lt;/li&gt;&lt;li&gt;예: n이 10보다 작은 동안 루프 돌기&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;// 여기서 loopUntil10은 만들어진 익명함수에 부여한 이름이고,&lt;br /&gt;/  function 다음에 있는 loop는 함수 안에서 자기 자신을 부를 때 쓰기 위한 &lt;br /&gt;// 이름이다.&lt;br /&gt;var loopUntil10 = function loop(n) {&lt;br /&gt;  if(n&amp;amp;lt;10) {&lt;br /&gt;    loop(n+1);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;// 여기서 loopUntil10은 만들어진 익명함수에 부여한 이름이고, /  function 다음에 있는 loop는 함수 안에서 자기 자신을 부를 때 쓰기 위한  // 이름이다. var loopUntil10 = function loop(n) {   if(n&amp;lt;10) {     loop(n+1);   } } &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;이제, 이런 재귀를 사용해 적금 총액을 계산하자.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;// 적금 합계를 구하는 재귀 함수&lt;br /&gt;// sum_so_far에 합계를 누적해 나감&lt;br /&gt;var getJukgumSum = function loop(i, sum_so_far) {&lt;br /&gt;  if(i&amp;amp;lt;12) {&lt;br /&gt;    return loop(i+1, sum_so_far + getPIValue(installment, i_month, 12, i));&lt;br /&gt;  } else {&lt;br /&gt;    return sum_so_far;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// 사용법&lt;br /&gt;var sum = getJukgumSum(0, 0);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;// 적금 합계를 구하는 재귀 함수 // sum_so_far에 합계를 누적해 나감 var getJukgumSum = function loop(i, sum_so_far) {   if(i&amp;lt;12) {     return loop(i+1, sum_so_far + getPIValue(installment, i_month, 12, i));   } else {     return sum_so_far;   } }  // 사용법 var sum = getJukgumSum(0, 0); &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;단점: 사용할 때 0, 0을 지정해야 함. 호출하면서 실수하기도 쉬울 뿐 아니라, 외부에 불필요한 인터페이스를 노출하는 것임.&lt;/li&gt;&lt;li&gt;함수 안에서 함수를 정의해 써먹고, 밖에는 최소의 인터페이스만 제공하자.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;var getJukgumSum = function loop() {&lt;br /&gt;  function loopInner(i, sum_so_far) {&lt;br /&gt;    if(i&amp;amp;lt;12) {&lt;br /&gt;      return loop(i+1, sum_so_far + getPIValue(installment, i_month, 12, i));&lt;br /&gt;    }&lt;br /&gt;    else {&lt;br /&gt;      return sum_so_far;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  loopInner(0,0);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// 사용법&lt;br /&gt;var sum = getJukgumSum();&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;var getJukgumSum = function loop() {   function loopInner(i, sum_so_far) {     if(i&amp;lt;12) {       return loop(i+1, sum_so_far + getPIValue(installment, i_month, 12, i));     }     else {       return sum_so_far;     }   }    loopInner(0,0); }  // 사용법 var sum = getJukgumSum(); &lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;지금까지-중간-정리&quot;&gt;&lt;a name=&quot;지금까지-중간-정리&quot; href=&quot;#지금까지-중간-정리&quot;&gt;&lt;/a&gt;지금까지 중간 정리&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;값 중심 코딩 -&amp;gt; 추상화 -&amp;gt; 함수&lt;/li&gt;&lt;li&gt;함수 -&amp;gt; 추상화 -&amp;gt; 함수를 입력으로 받는 함수&lt;h4 id=&quot;함수-프로그래밍이라도-특별히-다른-원칙이-적용되는-것이-아니다.&quot;&gt;&lt;a name=&quot;함수-프로그래밍이라도-특별히-다른-원칙이-적용되는-것이-아니다.&quot; href=&quot;#함수-프로그래밍이라도-특별히-다른-원칙이-적용되는-것이-아니다.&quot;&gt;&lt;/a&gt;함수 프로그래밍이라도 특별히 다른 원칙이 적용되는 것이 아니다.&lt;/h4&gt;&lt;/li&gt;&lt;li&gt;인터페이스를 깔끔하게 하기&lt;/li&gt;&lt;li&gt;공통 부분을 추상화하기&lt;/li&gt;&lt;li&gt;다만, 대입을 사용하지 않고 최대한 함수를 활용하기&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;왜-절차지향을-지양하는가?&quot;&gt;&lt;a name=&quot;왜-절차지향을-지양하는가?&quot; href=&quot;#왜-절차지향을-지양하는가?&quot;&gt;&lt;/a&gt;왜 절차지향을 지양하는가?&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Alan Perlis: “A programming language is low level when its programs require attention to the irrelevant”&lt;/li&gt;&lt;li&gt;앨런 펠리스: 어떤 프로그래밍 언어가 프로그램을 하면서 중요하지 않은 요소에 관심을 기울이게 만든다면 저수준이라 할 수 있다.&lt;/li&gt;&lt;li&gt;절차는 사실은 문제 해결에 있어 핵심 관심 대상이 아님.&lt;br&gt;— 그럼 재귀는 중요하지 않은 요소에 관심을 기울이게 만드는 것 아니란 말인가? -&amp;gt; 글쎄… ^^&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;다른-방식---스트림-활용&quot;&gt;&lt;a name=&quot;다른-방식---스트림-활용&quot; href=&quot;#다른-방식---스트림-활용&quot;&gt;&lt;/a&gt;다른 방식 - 스트림 활용&lt;/h2&gt;&lt;h3 id=&quot;정기적금&quot;&gt;&lt;a name=&quot;정기적금&quot; href=&quot;#정기적금&quot;&gt;&lt;/a&gt;정기적금&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;이번엔 스칼라를 사용하자. 스칼라 REPL이나 워크시트를 실행한다.&lt;/li&gt;&lt;li&gt;정기적금 문제 매 단계를 살펴보면:&lt;br&gt;— 각 행의 결과는 개월수와만 관계 있음(이율 등 다른 요소는 행이 바뀐다고 해도 그대로임)&lt;br&gt;— 엑셀을 그대로 인코딩한다면:&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;[0부터 11까지 개월을 표현하는 어떤것] &lt;br /&gt;  ===(getPIValue를 모든 원소에 적용한 결과)===&amp;amp;gt;&lt;br /&gt;[(불입금 * 원금)의 배열] &lt;br /&gt;  ===(배열의 모든 원소의 합을 구함)===&amp;amp;gt;&lt;br /&gt;합계&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;[0부터 11까지 개월을 표현하는 어떤것]    ===(getPIValue를 모든 원소에 적용한 결과)===&amp;gt; [(불입금 * 원금)의 배열]    ===(배열의 모든 원소의 합을 구함)===&amp;gt; 합계 &lt;/code&gt;&lt;/pre&gt;라는 식으로 파이프라이닝이 가능함&lt;/li&gt;&lt;li&gt;일단, &lt;code&gt;getPIValue&lt;/code&gt; 정의 및 다른 값의 정의를 REPL에서 하자.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;val i_year = 0.05         // 5% 이율&lt;br /&gt;val i_month = i_year / 12 // 월이율&lt;br /&gt;val installment = 30000.0   // 불입금&lt;br /&gt;&lt;br /&gt;def getPIValue(installment:Double, i_month:Double, t_month:Int, ith:Int):Double = installment + installment * (t_month-ith) * i_month&lt;br /&gt;&lt;br /&gt;// getPIValue에서 항상 같은 installment, i_month, 12를 지정해서 만든 새로운 함수. 인자를 ith만 받기 때문에 편리함.&lt;br /&gt;def getPIValue2(ith:Int):Double = getPIValue(installment, i_month, 12, ith)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;val i_year = 0.05         // 5% 이율 val i_month = i_year / 12 // 월이율 val installment = 30000.0   // 불입금  def getPIValue(installment:Double, i_month:Double, t_month:Int, ith:Int):Double = installment + installment * (t_month-ith) * i_month  // getPIValue에서 항상 같은 installment, i_month, 12를 지정해서 만든 새로운 함수. 인자를 ith만 받기 때문에 편리함. def getPIValue2(ith:Int):Double = getPIValue(installment, i_month, 12, ith) &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;0부터 11까지 개월을 표현하는 어떤것&lt;/p&gt;&lt;ul&gt;&lt;li&gt;원소나열법: &lt;code&gt;Seq(0,1,2,3,4,5,6,7,8,9,10,11)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;범위 사용: &lt;code&gt;(0 to 11)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;===(getPIValue를 모든 원소에 적용한 결과)===&amp;gt;&lt;/code&gt; : 어떤 컬렉션의 모든 원소에 같은 함수를 적용: &lt;code&gt;컬렉션 map (함수)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;   Seq(0,1,2,3,4,5,6,7,8,9,10,11) map (getPIValue2)&lt;br /&gt;   (0 to 11) map (getPIValue2)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;   Seq(0,1,2,3,4,5,6,7,8,9,10,11) map (getPIValue2)    (0 to 11) map (getPIValue2) &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;만들어진 결과의 합계를 구함&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;// 직접 만든 재귀 합계 함수&lt;br /&gt;def calcSum(c:Seq[Double], sum_so_far:Double):Double = {&lt;br /&gt;  if(c.isEmpty)&lt;br /&gt;    sum_so_far&lt;br /&gt;  else&lt;br /&gt;    calcSum(c.tail, sum_so_far + c.head)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// 사용법&lt;br /&gt;calcSum(Seq(0,1,2,3,4,5,6,7,8,9,10,11) map (getPIValue2), 0)&lt;br /&gt;calcSum(((0 to 11) map (getPIValue2)).toList, 0)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;// 직접 만든 재귀 합계 함수 def calcSum(c:Seq[Double], sum_so_far:Double):Double = {   if(c.isEmpty)     sum_so_far   else     calcSum(c.tail, sum_so_far + c.head) }  // 사용법 calcSum(Seq(0,1,2,3,4,5,6,7,8,9,10,11) map (getPIValue2), 0) calcSum(((0 to 11) map (getPIValue2)).toList, 0) &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;한번 더 추상화&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;   ((0 to 11) map (getPIValue2)).reduce(_+_)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;   ((0 to 11) map (getPIValue2)).reduce(_+_) &lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;“It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.” - Alan Perils&lt;br&gt;&lt;a href=&quot;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&quot;&gt;http://www.cs.yale.edu/homes/perlis-alan/quotes.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;뉴튼법&quot;&gt;&lt;a name=&quot;뉴튼법&quot; href=&quot;#뉴튼법&quot;&gt;&lt;/a&gt;뉴튼법&lt;/h3&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;def f = (x:Double) =&amp;amp;gt; x*x - 2.0&lt;br /&gt;def df = (x:Double) =&amp;amp;gt; 2*x&lt;br /&gt;&lt;br /&gt;val x0 = 2&lt;br /&gt;val x1 = x0 - f(x0)/df(x0)&lt;br /&gt;val x2 = x1 - f(x1)/df(x1)&lt;br /&gt;...&lt;br /&gt;x_n = x_n-1 - f(x_n-1)/df(x_n-1)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;def f = (x:Double) =&amp;gt; x*x - 2.0 def df = (x:Double) =&amp;gt; 2*x  val x0 = 2 val x1 = x0 - f(x0)/df(x0) val x2 = x1 - f(x1)/df(x1) ... x_n = x_n-1 - f(x_n-1)/df(x_n-1) &lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;재귀를 사용한 스트림 정의&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code data-origin=&quot;&lt;pre&gt;&lt;code&gt;lazy val x:Stream[Double] = 2.0 #:: x.map(&lt;br /&gt;  (x) =&amp;amp;gt; x - f(x)/df(x)&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;x.zipWithIndex.dropWhile( &lt;br /&gt;  tuple =&amp;amp;gt; tuple._1 - x(tuple._2+1) &amp;amp;gt;= 0.0001 || tuple._1 - x(tuple._2+1) &amp;amp;lt;= -0.0001&lt;br /&gt;)(0)._1&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&quot;&gt;lazy val x:Stream[Double] = 2.0 #:: x.map(   (x) =&amp;gt; x - f(x)/df(x) )  x.zipWithIndex.dropWhile(    tuple =&amp;gt; tuple._1 - x(tuple._2+1) &amp;gt;= 0.0001 || tuple._1 - x(tuple._2+1) &amp;lt;= -0.0001 )(0)._1 &lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.enshahar.me/feeds/6453871919646352060/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=31528299&amp;postID=6453871919646352060' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/6453871919646352060'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/6453871919646352060'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/2015/11/taste-of-functional-programming.html' title='[도사티비] 함수형 프로그래밍 맛보기'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-31528299.post-1539297498052089776</id><published>2014-07-24T13:33:00.001+10:00</published><updated>2014-07-24T13:34:49.815+10:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="implicit"/><category scheme="http://www.blogger.com/atom/ns#" term="scala"/><category scheme="http://www.blogger.com/atom/ns#" term="Traversable"/><category scheme="http://www.blogger.com/atom/ns#" term="곱집합"/><category scheme="http://www.blogger.com/atom/ns#" term="데카르트곱"/><category scheme="http://www.blogger.com/atom/ns#" term="스칼라"/><category scheme="http://www.blogger.com/atom/ns#" term="암시클래스"/><title type='text'>[Scala] Traversable의 데카르트 곱 - implicit 클래스 사용</title><content type='html'>&lt;h1 id=&quot;scala-traversable의-데카르트-곱-implicit-클래스사용&quot;&gt;[Scala] Traversable의 데카르트 곱 - implicit 클래스사용&lt;/h1&gt; &lt;p&gt;모든것은 구구단에서 출발했다. 스칼라 리스트에는 &lt;code&gt;tabulate&lt;/code&gt;라는 메서드가 있고, 이를 활용하면 다음과 같이 구구단을 구현할 수 있다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;tabulate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;$x%02d * $y%02d = ${x*y}%02d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;filterNot&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;00&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;물론, for문 두개를 사용하거나 이와 동치인 map/flatMap을 사용해도 가능하다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// yield를 해서 foreach를 해도 되지만 ...&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;$x%02d * $y%02d = ${x*y}%02d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// flatMap과 map 사용&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; _&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1}%02d * ${x._2}%02d = ${x._1 * x._2}%02d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;어느쪽이던 좋다. 이제 원하는 것은 둘 이상의 시퀀스(아마도 &lt;code&gt;Traversable&lt;/code&gt;이면 될 것 같다)에 대해 자동으로 카테시안 곱(cartesian product)을 해주는 방법은 없을까 하는 것이다. 예를 들어 어떤 암시적 변환(implicit conversion)이 있어서 자동으로 시퀀스에 cartesianProduct(other:Traversable)라는 메서드를 더해줄 수 있다면 구구단을 다음과 같이 만들 수 있다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1}%02d * ${x._2}%02d = ${x._1 * x._2}%02d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;인터넷을 찾아보니 이에 대한 해답은 &lt;a href=&quot;http://stackoverflow.com/questions/16219545/scala-cross-cartesian-product-with-multiple-sources-and-heterogeneous-types&quot;&gt;스택오버플로우&lt;/a&gt;에 이미 있긴 하다. 한번 그냥 좀더 쉽고 간단한 방법을 써보고, 언제 쓸지 모르는 다음 글에서 스택오버플로우의 접근방법을 논의해 보겠다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h2 id=&quot;시퀀스가-두개인-경우&quot;&gt;시퀀스가 두개인 경우&lt;/h2&gt; &lt;p&gt;시퀀스가 두개인 경우 첫 시퀀스에 cartesianProduct 메서드를 추가해주는 암시적 변환만 만들면 큰 문제 없이 바로 처리 가능하다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 클래스를 정의하고 나면 다음과 같은 위 예제와 같은 코드를 사용할 수 있다. REPL에서 테스트해보자.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;paste&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Entering paste mode (ctrl-D to finish)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1}%02d * ${x._2}%02d = ${x._1 * x._2}%02d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Exiting paste mode, now interpreting.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(생략)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h2 id=&quot;세-시퀀스의-데카르트-곱&quot;&gt;세 시퀀스의 데카르트 곱&lt;/h2&gt; &lt;p&gt;이제 세가지 시퀀스의 데카르트 곱을 만들고 싶다. 한번 시험삼아 [1,3], [4,6], [7,9](수학의 구간 표기법 사용함)의 정수의 데카르트 곱을 출력해보자.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1}%02d * ${x._2}%02d * ${x._3}%02d = ${x._1 * x._2 * x._3}%03d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&amp;lt;console&amp;gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; error&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; value _3 &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; a member of &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;              &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1}%02d * ${x._2}%02d * ${x._3}%02d = ${x._1 * x._2 * x._3}%03d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;타입 오류가 난다. 타입을 보면 ((Int, Int), Int)이다. 왜냐하면 첫 cartesionProduct의 곱이 (Int, Int)의 시퀀스이기 때문에, 그 시퀀스를 cProductable로 암시적 변환하시 타입 파라미터인 X가 튜플(Int,Int)이 되어, 결과 타입은 튜플과 정수 튜플의 시퀀스 타입(Traversable[((Int, Int), Int))이 되어버린다. 일단 다음과 같이 하면 출력은 할 수 있지만 뭔가 찜찜하다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; println&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;${x._1._1}%02d * ${x._1._2}%02d * ${x._2}%02d = ${x._1._1 * x._1._2 * x._2}%03d&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;028&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;032&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;036&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;035&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;040&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;045&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;042&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;048&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;054&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;056&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;064&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;072&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;070&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;080&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;090&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;084&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;096&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;084&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;096&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;105&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;126&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;06&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;162&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;결과 프로덕트를 평평하게 펼쳐주고 싶다. 즉, &lt;code&gt;(1 to 3).cartesianProduct(4 to 6).cartesianProduct(7 to 9)&lt;/code&gt;의 결과가 &lt;code&gt;Traversable[(Int, Int, Int)]&lt;/code&gt;가 되었으면 한다.&lt;/p&gt; &lt;p&gt;결국, 이를 해결하려면 Traversable[(Int, Int)]에 대해 cartesianProduct를 제공해주는 암시 변환을 추가하면 될것 같다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7.3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;필요한 만큼 이런 클래스를 추가하면 가능할 것이다. 이를 모두 묶어서 한 객체에 넣자. 9개까지만 추가했다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;kwd&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; com&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;enshahar&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;cartesian&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;CartesianProducts&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cProductable9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;X8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; cartesianProduct&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Traversable&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xs&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; ys &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; x8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; y&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;사용하려면 import com.enshahar.cartesian.CartesianProducts._라고 하고 쓰면 된다.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.enshahar.me/feeds/1539297498052089776/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=31528299&amp;postID=1539297498052089776' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/1539297498052089776'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/1539297498052089776'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/2014/07/scala-traversable.html' title='[Scala] Traversable의 데카르트 곱 - implicit 클래스 사용'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-31528299.post-5897135274899438611</id><published>2014-07-15T01:18:00.001+10:00</published><updated>2014-07-15T01:18:51.142+10:00</updated><title type='text'>[scala][codejam] Rational Number Tree - 우아한 막코딩</title><content type='html'>&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h1 id=&quot;코드잼-rational-number-tree&quot;&gt;코드잼-Rational Number Tree&lt;/h1&gt; &lt;p&gt;코드잼 문제중 스칼라 스트림을 사용하면 우아하고 무식하게(?) 풀 수 있는 문제가 있어서 한번 풀어본다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h2 id=&quot;문제정의-rational-number-tree&quot;&gt;문제정의: Rational Number Tree&lt;/h2&gt; &lt;p&gt;이 트리는 다음과 같이 이뤄지는 분수의 트리이다.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;루트는 1/1이다.&lt;/li&gt;&lt;li&gt;p/q라는 분수가 있으면, 그 분수의 두 자녀는 p/(p+q), (p+q)/q 이다.&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;따라서, 루트에서부터 3번째 레벨까지 나열해 보면 다음과 같다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;   &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 트리에는 모든 양의 유리수가 단 한번씩만 들어있다는 사실을 증명할 수 있단다(난 그 증명을 모른다).&lt;/p&gt; &lt;p&gt;어쨌든 이 트리를 레벨순서순회(level-order traversal)하면 다음과 같은 수열을 얻을 수 있다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;코드잼 문제는 입력을 받아서 &lt;/p&gt; &lt;ol&gt;&lt;li&gt;1번 케이스는 n을 받아서 이 트리 수열에서 n번째 원소가 뭔지 출력&lt;/li&gt;&lt;li&gt;2번 케이스는 p q를 받아서 p/q가 트리 수열에서 몇번째 원소인지 출력&lt;/li&gt;&lt;/ol&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h2 id=&quot;문제-해결-설계&quot;&gt;문제 해결 설계&lt;/h2&gt; &lt;p&gt;여러 방법이 있겠지만, 우아하게 무식하게 스트림을 사용해 짤 것이다.&lt;/p&gt; &lt;p&gt;&lt;code&gt;p/q&lt;/code&gt;를 나타내는 방법은 다양한 것이 있겠지만, &lt;code&gt;(Int,Int)&lt;/code&gt; 튜플로 표현할 것이다.&lt;/p&gt; &lt;p&gt;매 레벨을 &lt;code&gt;List[(Int, Int)]&lt;/code&gt; 타입으로 나타낸다면, 전체 트리는 &lt;code&gt;Stream[List[(Int,Int)]]&lt;/code&gt; 타입이며, 전체 트리의 첫 원소는 &lt;code&gt;List((1,1))&lt;/code&gt;일 것이다.&lt;/p&gt; &lt;p&gt;스트림으로 나타낼 경우 &lt;code&gt;lazy val&lt;/code&gt;로 표현하면서 지금까지 있는 것을 가지고 어떻게 다음 원소를 구할지 표현하면 된다. 어떤 한 레벨이 있다면, 그 레벨의 각 &lt;code&gt;(p,q)&lt;/code&gt;쌍은 &lt;code&gt;(p, p+q) (p+q, q)&lt;/code&gt;으로 바뀐다. 따라서 한 레벨을 변환하는 규칙은 다음과 같다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; transLevel&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;flatMap &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;lazy val tree:Stream[List[(Int,Int)]]&lt;/code&gt;가 있다면 이 트리의 각 레벨(즉, &lt;code&gt;List[(Int, Int)]&lt;/code&gt;타입의 원소)마다 &lt;code&gt;transLevel&lt;/code&gt;을 적용하면 된다. 이를 그대로 쓰면 다음과 같다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;lazy val tree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;#:: tree.map(transLevel)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, 이 트리의 각 레벨을 펼치면 된다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;val flattree &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; tree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;함수를 없애고 합치면 다음과 같이 두줄로 표현 가능하다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;lazy val tree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;#:: tree.map( _.flatMap { case (x,y) =&amp;gt; List((x,x+y), (x+y, y)) } )&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;val flattree &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; tree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt; &lt;p&gt;이 &lt;code&gt;flattree&lt;/code&gt;에서 n번째를 찾으려면 다음과 같이 인덱스를 사용한다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flattree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;res12&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flattree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;res13&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;br /&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flattree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;res14&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 &lt;code&gt;flattree&lt;/code&gt;에서 &lt;code&gt;(p,q)&lt;/code&gt;를 찾으려면 &lt;code&gt;find&lt;/code&gt;를 쓰면 된다. 예를 들어 (8,5) 즉, 8/5를 찾아보자.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flattree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;find &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; p &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; q &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;res16&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;문제는 인덱스를 못찾는다는 것. 인덱스를 찾으려면 루프를 돌면서 찾아도 되고, &lt;code&gt;zip&lt;/code&gt;을 사용해 두 무한시퀀스를 조합하는 방법도 있을 것이다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;lazy val nat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;#:: nat.map(_+1)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;val flatTreeWithIdx &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flattree&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이를 사용하면 다음과 같이 인덱스를 구할 수 있다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; flatTreeWithIdx&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;find &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; r&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; p &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; q &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;res19&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.enshahar.me/feeds/5897135274899438611/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=31528299&amp;postID=5897135274899438611' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/5897135274899438611'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/5897135274899438611'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/2014/07/scalacodejam-rational-number-tree.html' title='[scala][codejam] Rational Number Tree - 우아한 막코딩'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-31528299.post-2469000646372560374</id><published>2014-07-13T17:18:00.001+10:00</published><updated>2014-07-13T17:18:55.042+10:00</updated><title type='text'>[GIT] 삭제한 파일 커밋하기</title><content type='html'>&lt;h1 id=&quot;git-삭제한-파일-커밋하기&quot;&gt;[GIT] 삭제한 파일 커밋하기&lt;/h1&gt; &lt;p&gt;GIT를 쓰다 보면 파일을 삭제하고 이를 커밋해야 할 경우가 있다. 물론 파일이름을 일일히 치면 되긴 하지만, 귀찮다.&lt;/p&gt; &lt;h2 id=&quot;자동-트래킹-사용&quot;&gt;자동 트래킹 사용&lt;/h2&gt; &lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;를 하면 삭제한 파일도 일괄적용한다.&lt;/p&gt; &lt;p&gt;&lt;code&gt;git commit -a&lt;/code&gt;를 하면 모든 변경 파일을 커미한다.&lt;/p&gt; &lt;h2 id=&quot;수동추가&quot;&gt;수동추가&lt;/h2&gt; &lt;p&gt;가끔 삭제한 파일만 커밋하고 싶을 수도 있다. 그런 경우 다음과 같이 한다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;git ls&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;files &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;deleted &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;z &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; xargs &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; git rm&lt;br /&gt;git commit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.enshahar.me/feeds/2469000646372560374/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=31528299&amp;postID=2469000646372560374' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/2469000646372560374'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/31528299/posts/default/2469000646372560374'/><link rel='alternate' type='text/html' href='http://www.enshahar.me/2014/07/git.html' title='[GIT] 삭제한 파일 커밋하기'/><author><name>Hyunsok Oh</name><uri>http://www.blogger.com/profile/01408999472890865034</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-31528299.post-3606947760021540812</id><published>2014-07-12T02:01:00.001+10:00</published><updated>2014-07-12T12:20:13.516+10:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="lazy"/><category scheme="http://www.blogger.com/atom/ns#" term="scala"/><category scheme="http://www.blogger.com/atom/ns#" term="scala excercise"/><category scheme="http://www.blogger.com/atom/ns#" term="스칼라"/><category scheme="http://www.blogger.com/atom/ns#" term="스칼라 연습"/><category scheme="http://www.blogger.com/atom/ns#" term="지연계산"/><title type='text'>[스칼라] [연습] 스파이럴 출력 문제 - 2</title><content type='html'>&lt;h1 id=&quot;스칼라연습-스파이럴-출력-문제&quot;&gt;[스칼라][연습] 스파이럴 출력 문제&lt;/h1&gt; &lt;h2 id=&quot;문제정의&quot;&gt;문제정의&lt;/h2&gt; &lt;p&gt;&lt;img src=&quot;https://fbcdn-sphotos-e-a.akamaihd.net/hphotos-ak-xfp1/t1.0-9/p526x296/10533271_698139383555472_3784405498673265491_n.jpg&quot; alt=&quot;스파이럴 문제정의&quot; title=&quot;&quot;&gt;&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h2 id=&quot;풀이&quot;&gt;풀이&lt;/h2&gt; &lt;h3 id=&quot;기본착상&quot;&gt;기본착상&lt;/h3&gt; &lt;p&gt;일단 기본 착상을 보자.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;m x n 배열이 있다면 시작은 왼쪽 맨 위에서 시작해 n개를 차례로 0부터 n-1까지 배열한다. &lt;br&gt;&lt;ul&gt;&lt;li&gt;그러면 남는것은 (m-1) x n 배열이다.&lt;/li&gt;&lt;li&gt;이 (m-1) x n 배열을 90도 회전시키면, n x (m-1) 배열이다. 이 배열을 다시 재귀적으로 이 처리방법을 따라 처리하면 된다.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt; &lt;h4 id=&quot;구체적-예&quot;&gt;구체적 예&lt;/h4&gt; &lt;p&gt;구체적 예를 보자. 3 x 5 배열이 있다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;맨 처음에, &lt;code&gt;1 2 3 4 5&lt;/code&gt;를 차례로 &lt;code&gt;0 1 2 3 4&lt;/code&gt;를 채워넣고 나면, 다음 배열이 남는다. (5개의 원소를 처리했다)&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이 배열을 90도 회전(왼쪽으로) 시키면 다음과 같이 2 x 5 배열이 생긴다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, 다시 재귀적으로 &lt;code&gt;10 15&lt;/code&gt;를 &lt;code&gt;5 6&lt;/code&gt;으로 채워놓고 나면 나머지는 다음과 같다. (2개를 처리했다)&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이를 회전하면 다음과 같다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;다음으로 &lt;code&gt;14 13 12 11&lt;/code&gt;에 &lt;code&gt;7 8 9 10&lt;/code&gt;을 채워넣고, 남은 배열을 회전시키면 다음과 같다. (4개를 처리했다)&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, &lt;code&gt;6&lt;/code&gt;에 &lt;code&gt;11&lt;/code&gt;을 채워넣고, 나머지를 회전시킨다. (1개를 처리했다)&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, &lt;code&gt;7 8 9&lt;/code&gt;에 &lt;code&gt;12 13 14&lt;/code&gt;를 채워넣으면 나머지는 없다. (3개를 처리했다)&lt;/p&gt; &lt;p&gt;지금까지 채워넣은 순서대로 값을 순서쌍으로 적고 배열 크기를 정리해 보자.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;3 x 5 : (1, 0) (2, 1) (3, 2) (4, 3) (5, 4)&lt;/li&gt;&lt;li&gt;5 x 2 : (10, 5) (15, 6)&lt;/li&gt;&lt;li&gt;2 x 4 : (14, 7) (13, 8) (12, 9) (11, 10)&lt;/li&gt;&lt;li&gt;4 x 1 : (6, 11)&lt;/li&gt;&lt;li&gt;1 x 3 : (7, 12) (8, 13) (9, 14)&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;순서쌍에 있는 첫 값은 위치고 두번째 값은 채워넣어야 할 값이다. 이를 채워넣어 보면 다음과 같은 매트릭스가 생긴다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3 id=&quot;구현-1&quot;&gt;구현 1&lt;/h3&gt; &lt;p&gt;일단 위 재귀호출을 잘 살펴보면, m x n크기의 배열을 처리하면 n개를 채워넣고, 다시 n x (m-1) 배열을 재귀적으로 처리한다. &lt;/p&gt; &lt;p&gt;입력은 물론 m, n일 것이고, 출력을 뭘로 해야 할까? 좌표에 대한 값을 정해야 하는데 회전을 고려하고 방향을 고려하려면 간단하지 않다. &lt;/p&gt; &lt;p&gt;물론 여러가지 방법이 있겠지만, 여기서는 매 재귀 단계마다 몇개의 원소를 채워넣어야 하는지를 리스트로 만들어내는 함수를 먼저 정의했다. &lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; generate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; generate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, 매 재귀 단계마다 가로 세로 좌표 변화를 표현해야 한다. 좌표 변화는 (0, 1), (1, 0), (0, -1), (-1, 0)을 무한반복한다. 무한반복은 &lt;code&gt;lazy val&lt;/code&gt;로 표현하면 된다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;pln&quot;&gt;lazy val direction&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;direction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제 generate한것과 direction을 묶으면 몇개를 어떤 좌표변화로 만들어내야 하는지 구할 수 있다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genRun&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; generate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; generate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  lazy val direction&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::(-&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)#::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;direction&lt;br /&gt;  generate&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;genRun&lt;/code&gt;이 만들어내는 리스트는 (크기, (row증분, col증분))이 모인 것이다. 이를 (row증분, col증분)이 크기만큼 반복하고, 다시 이런 모든 리스트를 flatMap으로 하나로 모으자.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genIncList&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))]):&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; l flatMap &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;run &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;padTo&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;이제, 이 리스트를 실제 좌표계산에 활용하는 다음과 같은 함수를 만들 수 있다.&lt;/p&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genPosVal&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)],&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; l match &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;t &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;h3 id=&quot;구현-종합&quot;&gt;구현 종합&lt;/h3&gt; &lt;p&gt;지금까지를 다 종합하면 다음과 같다.&lt;/p&gt;&lt;div class=&quot;se-section-delimiter&quot;&gt;&lt;/div&gt; &lt;pre class=&quot;prettyprint prettyprinted&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; generateSpiral&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; n&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genPosVal&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]):&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)],&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; l match &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;t &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; pos&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; v&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;lit&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;&lt;br /&gt;    genPosValInner&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;s