<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeongmin&#39;s Blog</title>
  
  <subtitle>Tech &amp; Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ggomi.github.io/"/>
  <updated>2019-04-26T14:07:15.687Z</updated>
  <id>https://ggomi.github.io/</id>
  
  <author>
    <name>Jeongmin Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>스프링 부트 Security</title>
    <link href="https://ggomi.github.io/spring-boot-security/"/>
    <id>https://ggomi.github.io/spring-boot-security/</id>
    <published>2019-04-25T16:35:43.000Z</published>
    <updated>2019-04-26T14:07:15.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>스프링 부트 시큐리티는 스프링 시큐리티에 스타터를 제공해서 더 빠르게 보안설정을 지원합니다.</p><p>스프링 부트 시큐리티에서 가장 중요한 개념은 <strong>인증</strong>과 <strong>권한 부여</strong>입니다.</p><p>인증방식은 <code>Credential 기반 인증 방식</code>과 <code>이중 인증 방식</code>도 있습니다. credential기반 인증방식은 전통적인 아이디, 패스워드 인증 방식이며,<br><code>이중 인증 방식</code>의 대표적인 예는 <code>OAuth2</code>방식이 있습니다.</p><h1 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h1><p><code>OAuth</code>는 <code>토큰</code>을 사용한 범용적인 방법의 인증을 제공하는 표준 인증 프로토콜이며, <code>OAuth2</code>는 두번째 버전으로 총 4가지의 승인 타입을 제공합니다.</p><h2 id="권한-부여-코드-승인-타입-Authorization-Code-Grant-Type"><a href="#권한-부여-코드-승인-타입-Authorization-Code-Grant-Type" class="headerlink" title="권한 부여 코드 승인 타입(Authorization Code Grant Type)"></a>권한 부여 코드 승인 타입(Authorization Code Grant Type)</h2><ul><li>클라이언트가 다른 사용자 대신 특정 리소스에 접근을 요청할 때 사용됩니다. 리소스 접근을 위한 사용자명과 비밀번호, 권한 서버에 요청해서 받은 <code>권한코드</code>를 함께 활용하여 리소스에 대한 <code>액세스 토큰</code>을 받으면 이를 인증에 이용하는 방식입니다.</li></ul><h2 id="암시적-승인타입-Implicit-Grant-Type"><a href="#암시적-승인타입-Implicit-Grant-Type" class="headerlink" title="암시적 승인타입 (Implicit Grant Type)"></a>암시적 승인타입 (Implicit Grant Type)</h2><ul><li>권한 부여코드 승인 타입과 다르게 권한 코드 교환 단계없이 액세스 토큰을 즉시 반환받아 이를 인증에 이용하는 방식입니다.</li></ul><h2 id="리소스-소유자-암호-자격-증명-승인-타입-Resource-Owner-Password-Credentials-Grant-Type"><a href="#리소스-소유자-암호-자격-증명-승인-타입-Resource-Owner-Password-Credentials-Grant-Type" class="headerlink" title="리소스 소유자 암호 자격 증명 승인 타입 (Resource Owner Password Credentials Grant Type)"></a>리소스 소유자 암호 자격 증명 승인 타입 (Resource Owner Password Credentials Grant Type)</h2><ul><li>클라이언트가 암호를 사용하여 액세스 토큰에 대한 사용자의 자격증명을 교환하는 방식입니다.</li></ul><h2 id="클라이언트-자격-증명-승인-타입-Client-Credentials-Grant-Type"><a href="#클라이언트-자격-증명-승인-타입-Client-Credentials-Grant-Type" class="headerlink" title="클라이언트 자격 증명 승인 타입 (Client Credentials Grant Type)"></a>클라이언트 자격 증명 승인 타입 (Client Credentials Grant Type)</h2><ul><li>클라이언트가 컨텍스트 외부에서 액세스 토큰을 얻어 특정 리소스에 접근을 요청할 때 사용하는 방식입니다.</li></ul><p>이 중에서도 <code>권한부여코드승인타입</code>이 다양한 소셜미디어들이 웹서버 형태의 클라이언트 형태로 지원하는데 많은 서비스들이 이 방식이 사용하고 있습니다.</p><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><ul><li>기존의 사용자명 + 비밀번호 인증 방식은 단 한 번의 요청으로 인증을 하며, OAuth2는 최소 세 번 요청을 하게 됩니다.</li><li>회원가입 없이 이미 사용하는 소셜미디어 계정으로 인증하기 때문에 사용자 입장에서는 더욱 편리하게 로그인을 할 수 있게됩니다.</li><li>서비스 측면에서는 회원가입관련 기능을 축소시키고, 소셜에서 제공하는 User 정보를 가져올 수 있기 때문에 간편합니다.</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://www.yes24.com/Product/Goods/64584833?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">처음으로 배우는 스프링부트 2</a> - 김영재</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;스프링 부트 시큐리티는 스프링 시큐리티에 스타터를 제공해서 더 빠르게 보안설정을 지원합니다.&lt;/p&gt;
&lt;p&gt;스프링 부트 시큐리티
      
    
    </summary>
    
      <category term="Spring" scheme="https://ggomi.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://ggomi.github.io/tags/Spring/"/>
    
      <category term="Security" scheme="https://ggomi.github.io/tags/Security/"/>
    
      <category term="스프링 부트 시큐리티" scheme="https://ggomi.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 테스트 (1)</title>
    <link href="https://ggomi.github.io/spring-test/"/>
    <id>https://ggomi.github.io/spring-test/</id>
    <published>2019-04-18T08:05:29.000Z</published>
    <updated>2019-04-20T14:09:37.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스프링부트-테스트"><a href="#스프링부트-테스트" class="headerlink" title="스프링부트 테스트"></a>스프링부트 테스트</h1><p>스프링부트2에서는 기본적인 테스트 스타터를 제공한다. 기본적으로 제공되는 테스트 어노테이션은 아래와 같이 제공됩니다.</p><ol><li>@SpringBootTest</li><li>@WebMvcTest</li><li>@DataJpaTest</li><li>@RestClientTest</li><li>@JsonTest</li><li>@DataRedisTest</li></ol><p>이 글에서 <code>@SpringBootTest</code>, <code>@WebMvcTest</code>, <code>@DataJpaTest</code>에 관해서 살펴보도록 하겠습니다.</p><hr><h1 id="SpringBootTest"><a href="#SpringBootTest" class="headerlink" title="@SpringBootTest"></a>@SpringBootTest</h1><p>통합 테스트를 제공하는 기본적인 부트 테스트 어노테이션입니다. <strong>여러단위의 테스트들을 하나의 테스트로 수행할 때 적합</strong> 합니다.<br>하지만, 애플리케이션이 실행되는 것과 동일하게 애플리케이션에 설정된 모든 빈들을 로드하기 때문에 애플리케이션 규모가 클수록 느려집니다.</p><ul><li><code>@ActiveProfiles(&quot;local&quot;)</code>과 같은 방식으로 프로파일 환경값을 부여할 수 있다.</li><li>테스트에서 <code>@Transactional</code>을 사용하면 데이터가 롤백됩니다. 하지만, 서버의 다른 스레드에서 실행 중이면 WebEnvironment의 <code>RANDOM_PORT</code>나 <code>DEFINDE_PORT</code>를 사용해서 테스트를 수행해도 트랜잭션이 롤백되지 않습니다.</li><li><code>@SpringBootTest</code>는 기본적으로 <code>@SpringBootApplication</code>이나 <code>@SpringBootConfiguration</code> 어노테이션을 찾습니다. 둘 중 하나는 필수이다.</li></ul><hr><h1 id="WebMvcTest"><a href="#WebMvcTest" class="headerlink" title="@WebMvcTest"></a>@WebMvcTest</h1><p>MVC관련 설정인 <code>@Controller</code>, <code>@ControllerAdvice</code>, <code>@JsonComponent</code>, <code>Filter</code>,<code>WebMvcConfigurer</code>,<code>HandlerMethodArgumentResolver</code>만 로드되므로 <code>@SpringBootTest</code>보다 가볍게 테스트 가능합니다.</p><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>웹에서 테스트하기 힘든 <code>컨트롤러</code>를 테스트하는데 적합합니다. </li><li>웹상에서 <code>요청</code>과 <code>응답</code>에 대해 테스트할 수 있습니다. </li><li>시큐리티 혹은 필터까지 자동으로 테스트하며 수동으로 <code>추가/삭제</code>까지 가능합니다.</li></ul><h2 id="WebMvcTest-예시"><a href="#WebMvcTest-예시" class="headerlink" title="WebMvcTest 예시"></a>WebMvcTest 예시</h2><h3 id="1-Book"><a href="#1-Book" class="headerlink" title="1.Book"></a>1.Book</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer idx;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime publishedAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, LocalDateTime publishedAt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.publishedAt = publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-BookController"><a href="#2-BookController" class="headerlink" title="2.BookController"></a>2.BookController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookList</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"bookList"</span>, bookService.getBookList());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"book"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-BookService"><a href="#3-BookService" class="headerlink" title="3.BookService"></a>3.BookService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Book타입의 리스트를 넘기는 메서드를 작성하고, 실제 구현체는 만들지않고, mock데이터를 이용해 테스트를 진행하겠습니다.</li></ul><h3 id="4-BookControllerTest"><a href="#4-BookControllerTest" class="headerlink" title="4.BookControllerTest"></a>4.BookControllerTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.mock.mockito.MockBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.contains;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.given;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebMvcTest</span>(BookCotroller.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookControllerTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> Book_MVC_테스트() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Book book = <span class="keyword">new</span> Book(<span class="string">"Spring Boot Book"</span>, LocalDateTime.now());</span><br><span class="line">        given(bookService.getBookList()).willReturn(Collections.singletonList(book));</span><br><span class="line"></span><br><span class="line">        mvc.perform(get(<span class="string">"/book"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(view().name(<span class="string">"book"</span>))</span><br><span class="line">                .andExpect(model().attributeExists(<span class="string">"bookList"</span>))</span><br><span class="line">                .andExpect(model().attribute(<span class="string">"bookList"</span>, contains(book)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@WebMvcTest</code>를 사용하기 위해 테스트할 특정 컨트롤러명을 명시해주어야합니다. 주입된 <code>MockMvc</code>는 컨트롤러 테스트 시 모든 의존성을 로드하지않고, <code>BookController</code>관련된 빈만 로드하여 가볍게 테스트를 수행합니다.</li><li><code>@Service</code>어노테이션은 <code>WebMvcTest</code>의 적용대상이 아닙니다. <code>BookService</code> 인터페이스를 구현한 구현체가 없지만 <code>@MockBean</code>을 적극활용하여 컨트롤러 내부의 의존성 요소인 <code>BookService</code>를 가짜 객체로 대체하였습니다. 이러한 것을 <code>목 객체</code>라고 하고, 실제 객체는 아니지만 특정행위(<code>given()</code>)를 지정하여 실제 객체처럼 동작하게 할 수 있습니다.</li></ul><hr><h1 id="DataJpaTest"><a href="#DataJpaTest" class="headerlink" title="@DataJpaTest"></a>@DataJpaTest</h1><p>이 어노테이션은 JPA 관련 테스트 설정만 로드합니다. 데이터소스의 설정이 정상적인지, JPA를 사용하여 데이터를 제대로 CRUD하는지 테스트 할 수 있습니다.</p><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>기본적으로 인메모리 임베디드 데이터베이스를 사용하며, <code>@Entity</code>클래스를 스캔하여 JPA저장소를 구성합니다. </li><li>JPA테스트가 끝날 때마다 자동으로 데이터를 롤백합니다.</li><li><code>@AutoConfigureTestDatabase</code> 어노테이션의 기본 설정값인 Replace.Any를 사용하면 기본 내장 데이터소스를 사용합니다. Replace.NONE으로 설정하면 프로파일에 설정한 환경 값에 따라 적용됩니다.</li></ul><h2 id="DataJpaTest-예시"><a href="#DataJpaTest-예시" class="headerlink" title="@DataJpaTest 예시"></a>@DataJpaTest 예시</h2><h3 id="1-Book-1"><a href="#1-Book-1" class="headerlink" title="1.Book"></a>1.Book</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer idx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime publishedAt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String title, LocalDateTime publishedAt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.publishedAt = publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-BookRepository"><a href="#2-BookRepository" class="headerlink" title="2.BookRepository"></a>2.BookRepository</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-BookJpaTest"><a href="#3-BookJpaTest" class="headerlink" title="3.BookJpaTest"></a>3.BookJpaTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hamcrest.collection.IsEmptyCollection;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.MatcherAssert.assertThat;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.contains;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.hasSize;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.core.Is.is;</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookJpaTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String BOOT_TEST_TITLE = <span class="string">"SPRING Boot Test Book"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestEntityManager testEntityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> Book_저장하기_테스트() &#123;</span><br><span class="line">        Book book = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        testEntityManager.persist(book);</span><br><span class="line">        assertThat(bookRepository.getOne(book.getIdx()), is(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> BookList_저장하고_검색_테스트() &#123;</span><br><span class="line">        Book book1 = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE +<span class="string">"1"</span>)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        testEntityManager.persist(book1);</span><br><span class="line"></span><br><span class="line">        Book book2 = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE +<span class="string">"2"</span>)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        testEntityManager.persist(book2);</span><br><span class="line"></span><br><span class="line">        Book book3 = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE +<span class="string">"3"</span>)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        testEntityManager.persist(book3);</span><br><span class="line"></span><br><span class="line">        List&lt;Book&gt; bookList = bookRepository.findAll();</span><br><span class="line"></span><br><span class="line">        assertThat(bookList, hasSize(<span class="number">3</span>));</span><br><span class="line">        assertThat(bookList, contains(book1, book2, book3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> BookList_저장하고_삭제_테스트() &#123;</span><br><span class="line">        Book book1 = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE +<span class="string">"1"</span>)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        testEntityManager.persist(book1);</span><br><span class="line"></span><br><span class="line">        Book book2 = Book.builder</span><br><span class="line">                .title(BOOT_TEST_TITLE +<span class="string">"2"</span>)</span><br><span class="line">                .publishedAt(LocalDateTime.now())</span><br><span class="line">                .build();</span><br><span class="line">        testEntityManager.persist(book2);</span><br><span class="line"></span><br><span class="line">        bookRepository.deleteAll();</span><br><span class="line">        assertThat(bookRepository.findAll(), IsEmptyCollection.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://www.yes24.com/Product/Goods/64584833?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">처음으로 배우는 스프링부트 2</a> - 김영재</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스프링부트-테스트&quot;&gt;&lt;a href=&quot;#스프링부트-테스트&quot; class=&quot;headerlink&quot; title=&quot;스프링부트 테스트&quot;&gt;&lt;/a&gt;스프링부트 테스트&lt;/h1&gt;&lt;p&gt;스프링부트2에서는 기본적인 테스트 스타터를 제공한다. 기본적으로 제공되는 테
      
    
    </summary>
    
      <category term="Spring" scheme="https://ggomi.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://ggomi.github.io/tags/Spring/"/>
    
      <category term="스프링" scheme="https://ggomi.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81/"/>
    
      <category term="테스트" scheme="https://ggomi.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="SpringBoot" scheme="https://ggomi.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Value와 ConfigurationProperties Annotation</title>
    <link href="https://ggomi.github.io/value-configuration-properties/"/>
    <id>https://ggomi.github.io/value-configuration-properties/</id>
    <published>2019-04-17T06:24:55.000Z</published>
    <updated>2019-04-17T07:02:47.074Z</updated>
    
    <content type="html"><![CDATA[<p>이 글에서 YAML파일에 있는 데이터를 가져오는데 유용하게 사용되는 <code>@Value</code>와 <code>@ConfigurationProperties</code>에 대해서 다뤄보겠습니다.</p><h1 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h1><p>프로퍼티의 키를 사용하여 특정한 값을 호출할 수 있습니다. 주로 단일 값을 가져올 때 사용합니다.</p><h2 id="매핑방식"><a href="#매핑방식" class="headerlink" title="매핑방식"></a>매핑방식</h2><ul><li><code>@Value(&quot;${propertyName.??.??}&quot;)</code> : 깊이가 존재하는 키값에 대해 <code>.</code>으로 구분하여 값을 매핑합니다.</li><li><code>@Value(&quot;${propertyTest}&quot;)</code> : 단일 키값을 매핑합니다.</li><li><code>@Value(&quot;${noKey : default value}&quot;)</code> : 키값이 존재하지 않으면 디폴트값이 매핑되도록 설정합니다.</li><li><code>@Value(&quot;${propertyTestArray}&quot;)</code> : 여러 값을 나열할 때는 배열로 매핑합니다.</li><li><code>@Value(&quot;#{&#39;${propertyTestList}&#39;.split(&#39;,&#39;)}&quot;)</code> : SpEL을 사용하여 <code>,</code>를 기준으로 List에 매핑합니다.</li></ul><h1 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h1><ul><li>List, Map 자료구조로 프로퍼티값을 매핑하는 방식에 주로 사용됩니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruit:</span><br><span class="line">    list:</span><br><span class="line">        - name : banana</span><br><span class="line">          color: yellow</span><br><span class="line">        - name: apple</span><br><span class="line">          color: red</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"fruit"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitProperty</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이런 식으로 매핑이 가능하지만 <code>Map</code>이라는 기본 컬렉션을 사용하는 것보다 더 직관적이고, 명확하게 객체를 구성할 수 있게 아래와 같이 별도로 <code>POJO 타입</code>을 생성하고 <code>Map</code>대신 아래 <code>POJO타입</code>을 매핑하는 것이 더 좋습니다. </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitProperty</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="http://www.yes24.com/Product/Goods/64584833?scode=032&amp;OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">처음으로 배우는 스프링부트2</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 글에서 YAML파일에 있는 데이터를 가져오는데 유용하게 사용되는 &lt;code&gt;@Value&lt;/code&gt;와 &lt;code&gt;@ConfigurationProperties&lt;/code&gt;에 대해서 다뤄보겠습니다.&lt;/p&gt;
&lt;h1 id=&quot;Value&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Spring" scheme="https://ggomi.github.io/categories/Spring/"/>
    
    
      <category term="YAML 파일 매핑" scheme="https://ggomi.github.io/tags/YAML-%ED%8C%8C%EC%9D%BC-%EB%A7%A4%ED%95%91/"/>
    
      <category term="Value" scheme="https://ggomi.github.io/tags/Value/"/>
    
      <category term="ConfigurationProperties" scheme="https://ggomi.github.io/tags/ConfigurationProperties/"/>
    
  </entry>
  
  <entry>
    <title>필드 주입? 생성자 주입?</title>
    <link href="https://ggomi.github.io/injection/"/>
    <id>https://ggomi.github.io/injection/</id>
    <published>2019-03-18T08:09:12.000Z</published>
    <updated>2019-03-18T10:42:35.131Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>의존주입에 대해서 학습하면서 정리한 글입니다.</p></blockquote><h1 id="Field-Injection"><a href="#Field-Injection" class="headerlink" title="Field Injection"></a>Field Injection</h1><h2 id="Autowired를-통한-자동주입"><a href="#Autowired를-통한-자동주입" class="headerlink" title="@Autowired를 통한 자동주입"></a><code>@Autowired</code>를 통한 자동주입</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldInjection</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service1 service1;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Service2 service2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위와 같은 방법은 불필요한 코드없이 간결하게 보이기 때문에 좋아보일 수 있다.</li></ul><h1 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldInjection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Service1 service1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Service2 service2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FieldInjection</span><span class="params">(Service1 service1, Service2 service2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service1 = service1;</span><br><span class="line">        <span class="keyword">this</span>.service2 = service2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>생성자의 파라미터가 늘어날수록 책임에 대한 위기감이 생기게 된다.</li><li>의존을 추가할 때마다 생성자에 추가해줘야하기 때문에 번거로울 수 있지만 조심할 수 있다.</li><li>Spring 4.3 버전부터는 단일 생성자일 때 <code>@Autowired</code>를 쓰지않아도 된다.</li></ul><h2 id="왜-Field-Injection보다-Constructor-Injection인가"><a href="#왜-Field-Injection보다-Constructor-Injection인가" class="headerlink" title="왜 Field Injection보다 Constructor Injection인가?"></a>왜 Field Injection보다 Constructor Injection인가?</h2><ol><li><code>불변성 위반</code> - Field Injection은 final을 선언할 수 없기 때문에 객체가 변경가능한 상태가 된다.</li><li><code>단일 책임의 원칙 위반</code> - 필드주입은 의존주입이 쉬워져서 책임에 대한 위기감이 덜 느껴지게된다.</li><li><code>Field Injection</code>은 숨은 의존성만 제공한다. - </li><li>필요한 의존성을 가진 클래스를 곧바로 인스턴스화 시킬 수 없다.</li><li>생성자를 통한 주입은 순환의존성인지를 알 수 있다.<blockquote><p>순환의존성?</p><ul><li>의존하는 것들끼리 꼬리에 꼬리를 물어서 <code>A-&gt;B-&gt;C-&gt;A</code> 와 같은 형태를 말한다.</li></ul></blockquote></li></ol><h2 id="앞으로-생성자를-통한-의존주입을-하자"><a href="#앞으로-생성자를-통한-의존주입을-하자" class="headerlink" title="앞으로 생성자를 통한 의존주입을 하자!"></a>앞으로 생성자를 통한 의존주입을 하자!</h2><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;의존주입에 대해서 학습하면서 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Field-Injection&quot;&gt;&lt;a href=&quot;#Field-Injection&quot; class=&quot;headerlink&quot; title=&quot;Fi
      
    
    </summary>
    
      <category term="Spring" scheme="https://ggomi.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://ggomi.github.io/tags/Spring/"/>
    
      <category term="Dependency Injection" scheme="https://ggomi.github.io/tags/Dependency-Injection/"/>
    
      <category term="의존주입" scheme="https://ggomi.github.io/tags/%EC%9D%98%EC%A1%B4%EC%A3%BC%EC%9E%85/"/>
    
  </entry>
  
  <entry>
    <title>DI(Dependency Injection)</title>
    <link href="https://ggomi.github.io/spring-injection/"/>
    <id>https://ggomi.github.io/spring-injection/</id>
    <published>2019-03-16T16:55:22.000Z</published>
    <updated>2019-03-25T05:37:00.307Z</updated>
    
    <content type="html"><![CDATA[<p><code>DI(Dependency Injection)</code>를 하는 방법은 여러가지가 있다. 그 방법을 알아보기 전에 DI가 왜 필요한가에 대해서 알아보자.</p><h1 id="DI는-왜-필요한가"><a href="#DI는-왜-필요한가" class="headerlink" title="DI는 왜 필요한가?"></a>DI는 왜 필요한가?</h1><p>객체 의존성은 객체가 다른객체를 참조, 상호작용을 하여 긴밀한 연결, 결합이 생기는 것이다.<br>객체 의존은 아래와 같은 문제가 발생된다.</p><ol><li>하나의 모듈이 바뀌면 의존한 다른 모듈까지 변경되어야한다.</li><li>결합이 강하기 때문에 Unit Test 작성이 어렵다.</li></ol><p>그렇기 때문에 <strong>Framework에 의해 객체의 의존성을 주입하게 되는 설계패턴</strong>, <code>DI</code>를 이용하게 되는 것이다.</p><p><code>DI</code>를 찾다보면 <code>Ioc(제어의 역전)</code>라는 것도 보게되는데 이 둘은 같은의미로 사용되며 <code>Ioc</code>는 <code>DI</code>를 통해 달성된다. </p><p><code>Ioc</code>는 말그대로 모든 제어의 중심이 Framework로 넘어가는 것이다.</p><h2 id="DI의-장점"><a href="#DI의-장점" class="headerlink" title="#DI의 장점"></a>#DI의 장점</h2><ol><li><strong>종속성 감소(느슨한 결합)</strong></li><li>재사용성 증가</li><li>더 많은 테스트코드 작성 가능</li><li>코드 가독성 증가</li></ol><h1 id="의존성-주입-방법"><a href="#의존성-주입-방법" class="headerlink" title="의존성 주입 방법"></a>의존성 주입 방법</h1><p>대표적으로 마틴파울러가 제시한 세가지 방법이 있다.</p><h3 id="1-생성자를-통한-주입"><a href="#1-생성자를-통한-주입" class="headerlink" title="1. 생성자를 통한 주입"></a>1. 생성자를 통한 주입</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dependency dependency;</span><br><span class="line">    <span class="keyword">private</span> Dependency2 dependency2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DI</span><span class="params">(Dependency dependency,Dependency2 dependency2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dependency = dependency;</span><br><span class="line">        <span class="keyword">this</span>.dependency2 = dependency2;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>필요한 의존성을 모두 포함하는 클래스의 생성자를 만들고, 그 생성자를 통해 의존성을 주입한다.</li></ul><h3 id="2-Setter를-통한-주입"><a href="#2-Setter를-통한-주입" class="headerlink" title="2. Setter를 통한 주입"></a>2. Setter를 통한 주입</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dependency dependency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDependency</span><span class="params">(Dependency dependency)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dependency = dependency;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>의존성을 입력받는 Setter메소드를 만들고, 이를 통해 의존성을 주입한다.</li></ul><h3 id="3-Interface를-통한-주입"><a href="#3-Interface를-통한-주입" class="headerlink" title="3. Interface를 통한 주입"></a>3. Interface를 통한 주입</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span>...  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">injectFinder</span>(<span class="title">MovieFinder</span> <span class="title">finder</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinderFilename</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFilename</span> <span class="params">(String filename)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColonMovieFinder</span> <span class="keyword">implements</span> <span class="title">MovieFinder</span>, <span class="title">InjectFinderFilename</span>......  </span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">injectFilename</span>(<span class="title">String</span> <span class="title">filename</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filename = filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>의존성을 주입하는 함수를 포함한 인터페이스를 작성하고 인터페이스를 구현함으로써 실행시에 주입을 한다. (스프링에서 지원하지 않는 방식)</li></ul><h1 id="어떤방법을-쓸까"><a href="#어떤방법을-쓸까" class="headerlink" title="어떤방법을 쓸까?"></a>어떤방법을 쓸까?</h1><ul><li>Spring 3.x에서는 <code>Setter를 이용한 방법</code>을 지지하고있다. 왜냐하면 외부에서 제공받은 오브젝트 레퍼런스를 저장해뒀다가 내부의 메소드에 의해서 사용하게 하기 때문에 DI 방식에서 활용하기 적당하기 때문이다.</li><li>하지만 Spring 4.x로 넘어오면서 <code>Constructor를 이용한 주입</code>을 지지하고있다. 생성자에는 <code>final</code>을 선언할 수 있으므로 객체가 불변하도록 할 수 있고, 순환의존성도 알 수 있다고한다.</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;DI(Dependency Injection)&lt;/code&gt;를 하는 방법은 여러가지가 있다. 그 방법을 알아보기 전에 DI가 왜 필요한가에 대해서 알아보자.&lt;/p&gt;
&lt;h1 id=&quot;DI는-왜-필요한가&quot;&gt;&lt;a href=&quot;#DI는-왜-필요한가&quot;
      
    
    </summary>
    
      <category term="Spring" scheme="https://ggomi.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://ggomi.github.io/tags/Spring/"/>
    
      <category term="Dependency Injection" scheme="https://ggomi.github.io/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>20190211 _ 20190215</title>
    <link href="https://ggomi.github.io/weekly-retrospective-20190211-0215/"/>
    <id>https://ggomi.github.io/weekly-retrospective-20190211-0215/</id>
    <published>2019-02-17T09:48:12.000Z</published>
    <updated>2019-02-17T23:59:35.967Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align: center;">2019년 02월 11일 ~ 2019년 02월 15일 주간회고</h2><hr><blockquote><p>회고를 진행할 방식은 <a href="http://www.funretrospectives.com/the-4-ls-liked-learned-lacked-longed-for/" rel="external nofollow noopener noreferrer" target="_blank">4L 회고</a> 방식으로 <code>Liked - Learned - Lacked - Longed For(좋았던 점 - 배운 것 - 아쉬운점 - 앞으로 바라는 점)</code>로 구성된다.</p></blockquote><h2 id="Liked"><a href="#Liked" class="headerlink" title="Liked"></a>Liked</h2><ul><li>Github의 issue 기능을 통해서 <a href="https://github.com/GGomi/Basic_Board" rel="external nofollow noopener noreferrer" target="_blank">Basic_Board</a> 프로젝트의 에러를 <a href="https://cheese10yun.github.io/github-proejct/#issue-%EA%B8%B0%EB%B0%98-bracnh-%EC%83%9D%EC%84%B1" rel="external nofollow noopener noreferrer" target="_blank">issue 기반 Branch 생성</a>을 통해서 에러를 확인하고, 해결한 것을 반영하고, Merge까지 시켜보았는데 뭔가 Github를 제대로 쓰고있는 것 같은 기분이 들었다.</li><li>하루하루 계획을 세워가면서 이행하려고 노력하는데 이번주는 나름 잘 이행했다고 생각한다. 사실 계획이라는게 방학계획표처럼 무너지기 마련인데 이정도면 선방ㅎㅎ</li></ul><h2 id="Learned"><a href="#Learned" class="headerlink" title="Learned"></a>Learned</h2><ul><li>Github issue 발급과 issue기반 Branch생성 및 병합을 해보고, 경험할 수 있었다.</li><li>jpa modelMapper는 Setter를 사용하기 때문에 Entity에 Setter를 포함해야한다. </li></ul><h2 id="Lacked"><a href="#Lacked" class="headerlink" title="Lacked"></a>Lacked</h2><ul><li>하루하루 계획에 <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=28301535" rel="external nofollow noopener noreferrer" target="_blank">객체지향과 디자인패턴</a> 책을 읽겠다고 했는데 제대로 읽지못했다.<br>(<del>알고리즘에 빠져서…</del>)</li></ul><h2 id="Longed-For"><a href="#Longed-For" class="headerlink" title="Longed For"></a>Longed For</h2><ul><li>이번 주는 알고리즘 풀이를 주로 했는데 아직도 연습이 많이 필요하다고 생각이 든다. 문제를 보자마자 생각난 풀이방법에 대해서 깊게 생각하는 능력을 길러야 할 것 같다. 그리고 구현속도 또한 아직 너무 느리다..</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 style=&quot;text-align: center;&quot;&gt;2019년 02월 11일 ~ 2019년 02월 15일 주간회고&lt;/h2&gt;

&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;회고를 진행할 방식은 &lt;a href=&quot;http://www.funretrospecti
      
    
    </summary>
    
      <category term="주간회고" scheme="https://ggomi.github.io/categories/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
    
      <category term="주간회고" scheme="https://ggomi.github.io/tags/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
  <entry>
    <title>TDD 실습 예제(1)</title>
    <link href="https://ggomi.github.io/TDD-%EC%98%88%EC%A0%9C(1)/"/>
    <id>https://ggomi.github.io/TDD-예제(1)/</id>
    <published>2019-02-12T05:32:09.000Z</published>
    <updated>2019-04-20T13:50:20.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TDD-실습-예제-1"><a href="#TDD-실습-예제-1" class="headerlink" title="TDD 실습 예제 (1)"></a>TDD 실습 예제 (1)</h1><blockquote><p>msbaek님의 강의를 보고 작성한 글입니다. <a href="https://www.youtube.com/watch?v=X4JtF2BfA0U" rel="external nofollow noopener noreferrer" target="_blank">링크</a></p></blockquote><h1 id="개요-amp-용어-정의"><a href="#개요-amp-용어-정의" class="headerlink" title="개요 &amp; 용어 정의"></a>개요 &amp; 용어 정의</h1><h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><ul><li>소인수 분해 알고리즘 작성</li><li>입력 값의 소인수 구하기</li><li><code>TDD</code>로 개발을 진행합니다.(테스트 -&gt; 해결 -&gt; 리팩토링 순서)<h2 id="소수"><a href="#소수" class="headerlink" title="소수"></a>소수</h2></li><li>1과 자기자신외의 정수로 나누어 떨어지지않는 정수<h2 id="소인수"><a href="#소인수" class="headerlink" title="소인수"></a>소인수</h2></li><li>어떤 정수를 소수만의 곱으로 나타낼 때 그 인수가 되는 각각의 소수</li></ul><hr><h1 id="0-nothing"><a href="#0-nothing" class="headerlink" title="0. nothing"></a>0. nothing</h1><p>public void nothing으로 시작</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeFactorsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nothing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이 테스트를 통해서 현재 프로젝트가 테스트 가능한 환경인지 확인한다.</li></ul><hr><h1 id="1-canFactorIntoPrimes-for-1"><a href="#1-canFactorIntoPrimes-for-1" class="headerlink" title="1. canFactorIntoPrimes for 1"></a>1. canFactorIntoPrimes for 1</h1><h2 id="1-1-실패-테스트-추가"><a href="#1-1-실패-테스트-추가" class="headerlink" title="1.1 실패 테스트 추가"></a>1.1 실패 테스트 추가</h2><p><img src="https://user-images.githubusercontent.com/19489949/52614673-cd5f5700-2ed5-11e9-8f2d-f52fa75297b4.png" alt="createFactorInfoPrimes for 1"></p><ul><li>가장 단순한 1에 대한 소인수를 구하는 테스트를 진행한다.</li><li>1을 제외한 <code>소인수</code>들을 구해야한다. 그래서 1의 <code>소인수</code>는 없다.</li></ul><h2 id="1-2-Test-성공시키기"><a href="#1-2-Test-성공시키기" class="headerlink" title="1.2 Test 성공시키기"></a>1.2 Test 성공시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-Refactor"><a href="#1-3-Refactor" class="headerlink" title="1.3 Refactor"></a>1.3 Refactor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(list(),of(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>of()</code>의 리턴타입은 <code>Integer</code>인 반면에 테스트에서는 <code>Object</code>이므로 <code>Arrays.asList()</code>를 Extract 해준다.</li></ul><hr><h1 id="2-canFactorIntoPrimes-for-2"><a href="#2-canFactorIntoPrimes-for-2" class="headerlink" title="2. canFactorIntoPrimes for 2"></a>2. canFactorIntoPrimes for 2</h1><p>2에 대한 소인수를 찾아야하는데 여기서 <strong>Variable arguments(가변인자)</strong>라는걸 사용했는데 일단 한번 코드로 보자</p><h2 id="2-1-실패테스트-추가-및-테스트-성공시키기"><a href="#2-1-실패테스트-추가-및-테스트-성공시키기" class="headerlink" title="2.1 실패테스트 추가 및 테스트 성공시키기"></a>2.1 실패테스트 추가 및 테스트 성공시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(list(),of(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 2에 대한 테스트 추가</span></span><br><span class="line">    assertEquals(list(<span class="number">2</span>),of(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">list</span><span class="params">(Integer... n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) </span><br><span class="line">        factors.add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>list()에서 가변인자 <strong>‘…’</strong> 를 통해 파라미터를 배열로 바꾸어준다.</li><li>가변인자 : ‘해당 타입의 객체가 0개부터 여러개까지 매개변수로 올 수 있다.’ 라는 뜻</li><li>Java 1.5부터 사용가능한 가변인자는 파라미터 <code>맨 끝에만</code> 사용가능하다.(오버로딩 주의)</li></ul><h2 id="2-2-Refactor"><a href="#2-2-Refactor" class="headerlink" title="2.2 Refactor"></a>2.2 Refactor</h2><ul><li><code>n==2</code> 보다 <code>n&gt;1</code>이 좀 더 Generic하므로 수정한다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) </span><br><span class="line">        factors.add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-canFactorIntoPrimes-for-3"><a href="#3-canFactorIntoPrimes-for-3" class="headerlink" title="3. canFactorIntoPrimes for 3"></a>3. canFactorIntoPrimes for 3</h1><h2 id="3-1-실패-테스트-추가"><a href="#3-1-실패-테스트-추가" class="headerlink" title="3.1 실패 테스트 추가"></a>3.1 실패 테스트 추가</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertEquals(list(),of(<span class="number">1</span>));</span><br><span class="line">    assertEquals(list(<span class="number">2</span>),of(<span class="number">2</span>));</span><br><span class="line">    assertEquals(list(<span class="number">3</span>),of(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-2-테스트-성공시키기"><a href="#3-2-테스트-성공시키기" class="headerlink" title="3.2 테스트 성공시키기"></a>3.2 테스트 성공시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) </span><br><span class="line">        factors.add(n);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>모든 테스트는 최소한의 코드로 성공시키려고한다.</li></ul><h2 id="3-3-Refactor"><a href="#3-3-Refactor" class="headerlink" title="3.3 Refactor"></a>3.3 Refactor</h2><p><code>assertEquals</code>가 반복되는게 보기 안좋다. <code>Extract method</code>시키자!</p><h3 id="Extract-Variable"><a href="#Extract-Variable" class="headerlink" title="Extract Variable"></a>Extract Variable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = list();</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    assertEquals(list, of(n));</span><br><span class="line">    assertEquals(list(<span class="number">2</span>), of(<span class="number">2</span>));</span><br><span class="line">    assertEquals(list(<span class="number">3</span>), of(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Extract-Method"><a href="#Extract-Method" class="headerlink" title="Extract Method"></a>Extract Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertPrimeFactors(list(), <span class="number">1</span>);</span><br><span class="line">    assertPrimeFactors(list(<span class="number">2</span>), <span class="number">2</span>);</span><br><span class="line">    assertPrimeFactors(list(<span class="number">3</span>), <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertPrimeFactors</span><span class="params">(List&lt;Integer&gt; list, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    assertEquals(list, of(n));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Change-Signature"><a href="#Change-Signature" class="headerlink" title="Change Signature"></a>Change Signature</h3><p><img src="https://user-images.githubusercontent.com/19489949/52617035-d2280900-2edd-11e9-8496-ec675a18951d.png" alt="image"></p><ul><li><code>Change Signature</code>를 통해서 <code>assertPrimeFactors</code> 메소드의 파라미터 순서를 바꿔준다(바꾸는게 보기편하다고 한다..)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertPrimeFactors(<span class="number">1</span>, list());</span><br><span class="line">    assertPrimeFactors(<span class="number">2</span>, list(<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">3</span>, list(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-canFactorIntoPrimes-for-4"><a href="#4-canFactorIntoPrimes-for-4" class="headerlink" title="4. canFactorIntoPrimes for 4"></a>4. canFactorIntoPrimes for 4</h1><ul><li>4의 소인수는 <code>2,2</code></li></ul><h2 id="4-1-실패-테스트-추가"><a href="#4-1-실패-테스트-추가" class="headerlink" title="4.1 실패 테스트 추가"></a>4.1 실패 테스트 추가</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertPrimeFactors(<span class="number">1</span>, list());</span><br><span class="line">    assertPrimeFactors(<span class="number">2</span>, list(<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">3</span>, list(<span class="number">3</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">4</span>, list(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-테스트-통과시키기"><a href="#4-2-테스트-통과시키기" class="headerlink" title="4.2 테스트 통과시키기"></a>4.2 테스트 통과시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(<span class="number">2</span>);</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">            factors.add(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>간단하게 <code>2</code>로 나누었을 때 나머지가 <code>0</code>이면 <code>2</code>를 <code>ArrayList</code>에 추가</li></ul><h2 id="4-3-Refactor"><a href="#4-3-Refactor" class="headerlink" title="4.3 Refactor"></a>4.3 Refactor</h2><ul><li><code>factors</code>에 <code>n</code>을 더하는 부분을 <code>if(n&gt;1)</code> 밖으로 뺀다.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">          factors.add(<span class="number">2</span>);</span><br><span class="line">          n /= <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">      factors.add(n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="5-canFactorIntoPrimes-for-8"><a href="#5-canFactorIntoPrimes-for-8" class="headerlink" title="5. canFactorIntoPrimes for 8"></a>5. canFactorIntoPrimes for 8</h1><ul><li>그 전 숫자들은 모두 Pass, 8에서 걸림</li></ul><h2 id="5-1-실패-테스트-추가"><a href="#5-1-실패-테스트-추가" class="headerlink" title="5.1 실패 테스트 추가"></a>5.1 실패 테스트 추가</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertPrimeFactors(<span class="number">1</span>, list());</span><br><span class="line">    assertPrimeFactors(<span class="number">2</span>, list(<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">3</span>, list(<span class="number">3</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">4</span>, list(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">8</span>, list(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-테스트-성공-시키기"><a href="#5-2-테스트-성공-시키기" class="headerlink" title="5.2 테스트 성공 시키기"></a>5.2 테스트 성공 시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(<span class="number">2</span>);</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.add(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>간단하게 <code>if(n % 2 == 0)</code> 부분을 <code>while</code>문으로 교체해서 해결</li></ul><h1 id="6-canFactorIntoPrimes-for-9"><a href="#6-canFactorIntoPrimes-for-9" class="headerlink" title="6. canFactorIntoPrimes for 9"></a>6. canFactorIntoPrimes for 9</h1><h2 id="6-1-실패-테스트-추가"><a href="#6-1-실패-테스트-추가" class="headerlink" title="6.1 실패 테스트 추가"></a>6.1 실패 테스트 추가</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">canFactorIntoPrimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertPrimeFactors(<span class="number">1</span>, list());</span><br><span class="line">    assertPrimeFactors(<span class="number">2</span>, list(<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">3</span>, list(<span class="number">3</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">4</span>, list(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">8</span>, list(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">    assertPrimeFactors(<span class="number">9</span>, list(<span class="number">3</span>,<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-테스트-성공-시키기"><a href="#6-2-테스트-성공-시키기" class="headerlink" title="6.2 테스트 성공 시키기"></a>6.2 테스트 성공 시키기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(<span class="number">2</span>);</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(<span class="number">3</span>);</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.add(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>간단하게 <code>3</code>에 대한 <code>while</code>문 추가로 테스트 패스</li></ul><h2 id="6-3-Refactor"><a href="#6-3-Refactor" class="headerlink" title="6.3 Refactor"></a>6.3 Refactor</h2><p>while문의 중복이 생기게 된다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">int</span> divisor = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(n % divisor == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(divisor);</span><br><span class="line">            n /= divisor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.add(<span class="number">3</span>);</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">        factors.add(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>첫번째 <code>while</code>문의 중복되는 <code>2</code>에 대해서 <code>extract variable</code>한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">of</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; factors = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> divisor = <span class="number">2</span>;n &gt; <span class="number">1</span>;divisor++)</span><br><span class="line">        <span class="keyword">for</span>(;n % divisor == <span class="number">0</span>; n /= divisor)</span><br><span class="line">            factors.add(divisor);</span><br><span class="line">    <span class="keyword">return</span> factors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>while</code>문들을 <code>for</code>문으로 변경해주면서 조건들을 <code>for</code>문에 담는다. <code>for</code>문의 조건상 마지막 <code>if(n&gt;1)</code>은 의미가 없기때문에 삭제한다.</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TDD-실습-예제-1&quot;&gt;&lt;a href=&quot;#TDD-실습-예제-1&quot; class=&quot;headerlink&quot; title=&quot;TDD 실습 예제 (1)&quot;&gt;&lt;/a&gt;TDD 실습 예제 (1)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;msbaek님의 강의를 보고 작
      
    
    </summary>
    
      <category term="TDD" scheme="https://ggomi.github.io/categories/TDD/"/>
    
    
      <category term="TDD" scheme="https://ggomi.github.io/tags/TDD/"/>
    
      <category term="msbaek" scheme="https://ggomi.github.io/tags/msbaek/"/>
    
      <category term="백명석" scheme="https://ggomi.github.io/tags/%EB%B0%B1%EB%AA%85%EC%84%9D/"/>
    
  </entry>
  
  <entry>
    <title>20190128 _ 20190201</title>
    <link href="https://ggomi.github.io/weekly-retrospective-20190128-20190201/"/>
    <id>https://ggomi.github.io/weekly-retrospective-20190128-20190201/</id>
    <published>2019-02-04T04:51:32.000Z</published>
    <updated>2019-02-17T23:59:38.898Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align: center;">2019년 01월 28일 ~ 2019년 02월 01일 주간회고</h2><hr><blockquote><p>회고를 진행할 방식은 <a href="http://www.funretrospectives.com/the-4-ls-liked-learned-lacked-longed-for/" rel="external nofollow noopener noreferrer" target="_blank">4L 회고</a> 방식으로 <code>Liked - Learned - Lacked - Longed For(좋았던 점 - 배운 것 - 아쉬운점 - 앞으로 바라는 점)</code>로 구성된다.</p></blockquote><h2 id="Liked"><a href="#Liked" class="headerlink" title="Liked"></a>Liked</h2><ul><li>첫 면접을 보았는데 면접을 볼 수 있었다는 것 자체로 좋은 경험이었다.</li></ul><h2 id="Learned"><a href="#Learned" class="headerlink" title="Learned"></a>Learned</h2><ul><li>기본적인 정렬 알고리즘(Quick Sort, Merge Sort, Heap Sort, Bubble Sort..)</li><li><a href="https://github.com/GGomi/TIL/blob/master/ComputerScience/Sorting_Algorithm.md" rel="external nofollow noopener noreferrer" target="_blank">정렬 알고리즘 TIL</a></li></ul><h2 id="Lacked"><a href="#Lacked" class="headerlink" title="Lacked"></a>Lacked</h2><ul><li>면접이 처음이라서 어떤 것들을 준비해가야할지 잘 모르고 있었고, 면접에 대한 준비를 제대로 하지못했다.</li><li>카카오페이 코딩테스트를 진행했었는데 한문제에 빠져들어서 시간분배를 제대로 하지못했다.</li></ul><h2 id="Longed-For"><a href="#Longed-For" class="headerlink" title="Longed For"></a>Longed For</h2><ul><li>자기소개정도 하나쯤 제대로 머리에 생각해두어야할 것 같다. (<del>매번 말할 때마다 소개가 바뀜..</del>)</li><li>잘 알고있었다고 생각한 기본적인 자료구조들을 다시 학습해야할 것. </li><li>기본적인 자료구조들에 파생되는 것들도 학습해야할 것.(HashMap, LinkedList..)</li><li>특히 <strong>시간복잡도</strong>, 객체지향의 기본적인 개념들(public, static, private, protected..)</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 style=&quot;text-align: center;&quot;&gt;2019년 01월 28일 ~ 2019년 02월 01일 주간회고&lt;/h2&gt;

&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;회고를 진행할 방식은 &lt;a href=&quot;http://www.funretrospecti
      
    
    </summary>
    
      <category term="주간회고" scheme="https://ggomi.github.io/categories/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
    
      <category term="주간회고" scheme="https://ggomi.github.io/tags/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
  <entry>
    <title>20190121 _ 20190125</title>
    <link href="https://ggomi.github.io/weekly-retrospective-20190121-20190125/"/>
    <id>https://ggomi.github.io/weekly-retrospective-20190121-20190125/</id>
    <published>2019-01-30T04:57:24.000Z</published>
    <updated>2019-01-30T07:46:34.771Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align: center;">2019년 01월 21일 ~ 2019년 01월 25일 주간회고</h2><hr><h2 id="주간회고-시작"><a href="#주간회고-시작" class="headerlink" title="주간회고 시작!"></a>주간회고 시작!</h2><p><a href="https://github.com/gwonsungjun" rel="external nofollow noopener noreferrer" target="_blank">gwonsungjun님</a>의 주간회고을 보고 느낀 점들이 많아서 주간회고를 시작해보려고 합니다. 얼마나 꾸준하게 오래 갈지는 모르겠지만 최대한 빼먹지않고, 할 수 있는데까지 해볼예정이다.</p><blockquote><p>회고를 진행할 방식은 <a href="http://www.funretrospectives.com/the-4-ls-liked-learned-lacked-longed-for/" rel="external nofollow noopener noreferrer" target="_blank">4L 회고</a> 방식으로 <code>Liked - Learned - Lacked - Longed For(좋았던 점 - 배운 것 - 아쉬운점 - 앞으로 바라는 점)</code>로 구성된다.</p></blockquote><h2 id="Liked"><a href="#Liked" class="headerlink" title="Liked"></a>Liked</h2><ul><li>알고리즘 문제를 하루에 한 문제 꼴로 풀었는데 이번 주는 배울 수 있었던 것들이 많았다.(Java8에 관련된 Lambda식 등..)</li><li>모두 인터넷 도움없이 순수 내 머리로만 풀 수 있어서 좋았다(<del>크게 어려운 문제는 없었다는게 함정</del>)</li><li>이력서와 포트폴리오를 지원서에 제출할 수 있을 정도로 작성하고 지원까지 끝냈다.</li></ul><h2 id="Learned"><a href="#Learned" class="headerlink" title="Learned"></a>Learned</h2><ul><li><a href="http://www.yes24.com/24/goods/65551284" rel="external nofollow noopener noreferrer" target="_blank">Effective Java</a>라는 책을 통해서 Java8의 함수형 프로그래밍의 기초에 관해서 배웠다.</li><li><a href="https://www.inflearn.com/course/spring_rest-api/" rel="external nofollow noopener noreferrer" target="_blank">백기선님의 스프링 REST API강의</a>로 제대로 된 REST API에 관해서 알아가는 중이다.</li></ul><h2 id="Lacked"><a href="#Lacked" class="headerlink" title="Lacked"></a>Lacked</h2><ul><li>알고리즘 문제를 푸는데 시간투자를 너무 많이해서 아쉬웠다.</li><li>REST API 강의를 많이 듣지못한 점</li><li>요즘 포트폴리오와 이력서준비를 하느라 코딩을 많이 하지 못한 것 같다.</li></ul><h2 id="Longed-For"><a href="#Longed-For" class="headerlink" title="Longed For"></a>Longed For</h2><ul><li>우선, 당장있을 면접을 준비하는게 우선, 기본적인 CS 개념들을 준비해보자</li><li>HTTPS와 HTTP의 차이점과 TCP/IP같은 네트워크 개념을 다시 잡아보자</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 style=&quot;text-align: center;&quot;&gt;2019년 01월 21일 ~ 2019년 01월 25일 주간회고&lt;/h2&gt;

&lt;hr&gt;
&lt;h2 id=&quot;주간회고-시작&quot;&gt;&lt;a href=&quot;#주간회고-시작&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="주간회고" scheme="https://ggomi.github.io/categories/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
    
      <category term="주간회고" scheme="https://ggomi.github.io/tags/%EC%A3%BC%EA%B0%84%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
  <entry>
    <title>DDD 정리 (도메인 주도 설계)</title>
    <link href="https://ggomi.github.io/DDD/"/>
    <id>https://ggomi.github.io/DDD/</id>
    <published>2019-01-21T02:45:04.000Z</published>
    <updated>2019-01-22T02:12:23.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDD-Domain-Driven-Design"><a href="#DDD-Domain-Driven-Design" class="headerlink" title="DDD (Domain Driven Design)"></a>DDD (Domain Driven Design)</h1><p>Entity 모델을 기반으로 개발되는 설계법이다. </p><p>도메인 모델의 중요성을 강조하며, 도메인 모델로부터 디자인한다.</p><h1 id="표현-영역"><a href="#표현-영역" class="headerlink" title="표현 영역"></a>표현 영역</h1><ul><li>사용자에게 정보를 보여주고, 사용자의 요청을 해석한다.</li><li>Request시 응용서비스가 요구하는 형식으로 사용자 요청을 변환한다.</li><li>필수값, 값의 형식 등의 검증을 확실히 해야 응용서비스에서 반복된 로직이 나오지 않는다.</li></ul><h1 id="응용-영역"><a href="#응용-영역" class="headerlink" title="응용 영역"></a>응용 영역</h1><ul><li>실제 사용자가 원하는 기능을 제공</li><li>기능 실행에 필요한 입력값(Parameters)을 받아 실행 결과를 리턴한다.</li><li>실행 결과 리턴시 사용자에게 알맞은 형식으로 Response 한다.</li></ul><h1 id="응용-서비스"><a href="#응용-서비스" class="headerlink" title="응용 서비스"></a>응용 서비스</h1><ul><li>도메인 객체를 이용한 사용자 요청처리 -&gt; 도메인객체간의 흐름을 제어</li><li>트랜잭션 처리</li><li>접근제어</li><li>이벤트 처리</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DDD-Domain-Driven-Design&quot;&gt;&lt;a href=&quot;#DDD-Domain-Driven-Design&quot; class=&quot;headerlink&quot; title=&quot;DDD (Domain Driven Design)&quot;&gt;&lt;/a&gt;DDD (Domain 
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="DDD" scheme="https://ggomi.github.io/tags/DDD/"/>
    
      <category term="도메인 주도 설계" scheme="https://ggomi.github.io/tags/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84/"/>
    
  </entry>
  
  <entry>
    <title>JPA 개념 및 설명</title>
    <link href="https://ggomi.github.io/JPA-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    <id>https://ggomi.github.io/JPA-개념-및-설명/</id>
    <published>2019-01-04T13:22:20.000Z</published>
    <updated>2019-01-22T02:13:06.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SpringBoot와 JPA를 사용하면서 제대로 된 이해도가 낮다고 생각해서 JPA의 개념에 대해서 공부해보고, 끄적여보았습니다.. 틀린 점이나 이상한 점 있으시면 조언해주시면 감사드리겠습니다.</p></blockquote><h2 id="객체지향적-개발-vs-SQL-매핑"><a href="#객체지향적-개발-vs-SQL-매핑" class="headerlink" title="객체지향적 개발 vs SQL 매핑"></a>객체지향적 개발 vs SQL 매핑</h2><p>처음 Java라는 객체지향언어를 처음 배우고, 웹에 관심을 가지게 되면서 <em>MVC</em> 같은 디자인패턴도 배우고, 구조적인 부분이나 개발방법 등 기초적인 부분에 대해서 관심을 많이 가지기 시작했다.</p><p><strong>하지만</strong> Spring을 배우고, 익숙해지면서 서로 다른 프로젝트를 해도 내 프로젝트 구조는 점점 획일화되고, 주구장창 SQL매핑만 하고있는 나를 발견하게 되었다.</p><p>SQL매핑에 신경을 쏟다보니 나에게 객체지향은 의미가 없었다..<del>객체지향이 뭐더라</del></p><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA?"></a>JPA?</h2><p>iBatis, Mybatis 밖에 모르던 때에 개발을 하면 SQL매핑만 잘하고 쿼리 잘 짜면 장땡인 줄 알았다. </p><p>하지만 Mybatis같은 것은 ORM이라고 불린다는 것을 알고, 다른 ORM은 없나하고 찾아보다가 알게된 것이 <strong>JPA</strong>였다. (무려 Java ORM 표준)</p><p>내가 느낀 <strong>JPA</strong>는 서로 상반된 사상을 가진 객체지향과 RDBS 사이를 연결을 시켜주는 ORM역할을 하고, 철저하게 분리 시켜주는 역할을 해주는 것 같아보인다. 그럼 Mybatis도 ORM인데 더 나은 점이 무엇이길래 열광하고, 인기가 있을까?</p><h2 id="JPA를-사용해야하는-이유-장점"><a href="#JPA를-사용해야하는-이유-장점" class="headerlink" title="JPA를 사용해야하는 이유(장점)"></a>JPA를 사용해야하는 이유(장점)</h2><ul><li>SQL 중심적인 개발이 아닌 객체중심으로 개발을 할 수 있다.<ul><li>이러한 이유때문에 비즈니스로직에 집중할 수 있게된다.</li></ul></li><li>생산성<ul><li>쿼리를 작성할 필요없이 jpa가 대신해준다.</li></ul></li><li>유지보수<ul><li>객체중심의 개발이므로 실제 테이블에서 컬럼이 수정,추가,삭제 되었을 때 개발자는 필드만 수정하면된다. </li></ul></li><li><strong>패러다임의 불일치 해결</strong><ul><li>상속<ul><li>저장</li><li>조회</li></ul></li><li>연관관계</li><li>신뢰할 수 있는 엔티티, 계층</li><li>동일한 트랜잭션에서 조회한 엔티티는 같음을 보장한다.(Java Collection처럼)</li></ul></li><li>RDBS와 객체사이에서 동작하기 때문에 성능 상에서 문제가 생길 수 있다고 생각하지만 개발하기 나름이다. 중간 레이어가 있다는 것은 양날의 검이다.</li><li>지연로딩<ul><li>객체가 실제 사용될 때 로딩</li></ul></li><li>즉시로딩<ul><li>JOIN SQL로 한번에 연관된 객체까지 미리 조회</li></ul></li></ul><hr><ul><li>JPA가 쿼리를 작성하고 지원하는 기능이 많다고 해서 그냥 아무생각없이 사용하면 안되고, 알고 써야한다! <em>근본</em>이 중요하다.</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SpringBoot와 JPA를 사용하면서 제대로 된 이해도가 낮다고 생각해서 JPA의 개념에 대해서 공부해보고, 끄적여보았습니다.. 틀린 점이나 이상한 점 있으시면 조언해주시면 감사드리겠습니다.&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="JPA" scheme="https://ggomi.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://ggomi.github.io/tags/JPA/"/>
    
      <category term="JPA 기초" scheme="https://ggomi.github.io/tags/JPA-%EA%B8%B0%EC%B4%88/"/>
    
      <category term="JPA 개념 및 설명" scheme="https://ggomi.github.io/tags/JPA-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%84%A4%EB%AA%85/"/>
    
  </entry>
  
  <entry>
    <title>TDD(Test Driven Development)란?</title>
    <link href="https://ggomi.github.io/tdd/"/>
    <id>https://ggomi.github.io/tdd/</id>
    <published>2019-01-01T10:55:43.000Z</published>
    <updated>2019-01-22T14:14:01.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.</p></blockquote><hr><h2 id="1-TDD의-세가지-법칙"><a href="#1-TDD의-세가지-법칙" class="headerlink" title="1. TDD의 세가지 법칙"></a>1. TDD의 세가지 법칙</h2><ul><li>Failing Test가 있을때만 프로덕션코드에 작성하라</li><li>실패를 나타내는데 충분한 테스트만 작성하라.</li><li>테스트가 성공하는 만큼만의 코드를 작성하라. (이해가 아직 잘 안됨..)</li></ul><h2 id="2-TDD-절차"><a href="#2-TDD-절차" class="headerlink" title="2. TDD 절차"></a>2. TDD 절차</h2><p>세가지 법칙이나 TDD작성 절차를 지키지 않았을경우 Stocking이라는 옴짝달싹하지 못하는 상태에 빠질 수 있다.<br><img src="/images/tdd_1.png" alt="TDD 절차"></p><ol><li>Failing 테스트 작성(Red page)</li><li>Failing 테스트를 통과할 만큼의 코드를 작성(Green page) </li><li>Refactor(Blue Page)<blockquote><p>리팩토링 전까지 모두 최소한의 코드를 작성해서 절차를 만족시키기만 하면된다. 일단 돌아만 가게하면된다. Refactor는 선택이 아닌 필수이다.</p></blockquote></li></ol><h2 id="3-원칙"><a href="#3-원칙" class="headerlink" title="3. 원칙"></a>3. 원칙</h2><ul><li>남들이 봤을때 별거 아닌 것처럼 보일만큼 쉬운 것부터!!</li><li>테스트가 구체적으로 변해갈 때 프로덕션코드는 점점 범용(Generic)적이 되어간다.</li></ul><h2 id="4-TDD의-이점"><a href="#4-TDD의-이점" class="headerlink" title="4. TDD의 이점"></a>4. TDD의 이점</h2><h3 id="Debugging-Time"><a href="#Debugging-Time" class="headerlink" title="Debugging Time"></a>Debugging Time</h3><ul><li>TDD가 디버깅시간을 1/10으로 줄여 줄 것이다.</li></ul><h3 id="Design-Documents"><a href="#Design-Documents" class="headerlink" title="Design Documents"></a>Design Documents</h3><ul><li>TDD의 3가지 법칙을 잘 따르면 설계문서를 얻을 수 있다.(low level design Document이다.)</li></ul><h3 id="Decoupling"><a href="#Decoupling" class="headerlink" title="Decoupling"></a>Decoupling</h3><ul><li>테스트를 먼저 작성하면 Prooduction 코드가 테스트 가능해진다.</li><li>모든 코드라인을 테스트하는 유일한 방법은 테스트 코드에서 그 코드들에 접근하는 것이다.</li><li>TDD로 구현하면 보다 decouple된 시스템을 갖게된다.</li></ul><h3 id="Courage-to-Change"><a href="#Courage-to-Change" class="headerlink" title="Courage to Change"></a>Courage to Change</h3><ul><li>테스트가 있기 때문에 시스템이 정상적으로 동작하는지 확인할 수 있다면 변경이 두렵지 않다. =&gt; Refactor를 공격적으로 할 수 있다.</li><li>테스트는 코드를 깨끗하게 하고, 썩는 것을 방지한다.</li><li>하지만, 레거시한 코드에 테스트를 추가하기는 힘들다.</li><li>regression test</li><li>완벽한 설계에 기반해 개발을 했더라도 테스트가 없다면 코드를 clean하는데 두려움이 생길 것이다.</li></ul><h3 id="Trust"><a href="#Trust" class="headerlink" title="Trust"></a>Trust</h3><ul><li>3가지 규칙을 준수했을 때 낙하산을 가지고 있는 것처럼 테스트로 하여금 믿음을 가질 수 있다.</li><li>개발 후 테스트를 작성하게되면, 테스트에 대한 신뢰가 떨어진다.</li><li>이미 작성된 코드에서 테스트를 작성하라고 하면 실행 잘되는 케이스만 생각하게 될 것.</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/codetemplate/videos&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt; 클린코더
      
    
    </summary>
    
      <category term="TDD" scheme="https://ggomi.github.io/categories/TDD/"/>
    
    
      <category term="TDD" scheme="https://ggomi.github.io/tags/TDD/"/>
    
      <category term="Test Driven Development" scheme="https://ggomi.github.io/tags/Test-Driven-Development/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure &amp; Impedance Mismatch</title>
    <link href="https://ggomi.github.io/data-structure/"/>
    <id>https://ggomi.github.io/data-structure/</id>
    <published>2018-12-26T08:16:24.000Z</published>
    <updated>2019-01-22T14:21:09.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.</p></blockquote><hr><h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><table><thead><tr><th>Class</th><th>Data Structure</th></tr></thead><tbody><tr><td>private 변수들 + 이를 다루는 함수들</td><td>public 변수들 + Getter/Setter </td></tr><tr><td>cohesive groups of variables를 조작하는 메소드</td><td>개별 변수들을 조작(Getter/Setter)</td></tr><tr><td>구현을 hide, abstract</td><td>구현을 노출</td></tr><tr><td>Tell 가능</td><td>Tell불가, Ask만 가능</td></tr></tbody></table><ul><li>Data Structure는 Class와 반대되는 개념으로 볼 수 있다.</li><li>DS는 기능의 추가에 대해서 자유롭다. 하지만 타입의 추가에 대해서는 취약함. OOP는 타입추가에 대해서 자유롭다.</li></ul><h2 id="Impedance-Mismatch"><a href="#Impedance-Mismatch" class="headerlink" title="Impedance Mismatch"></a>Impedance Mismatch</h2><blockquote><p>OOP에서 RDB를 사용할 때 발생하는 일련의 개념적/기술적 어려움</p></blockquote><ul><li>특히 객체나 클래스의 정의가 데이터베이스 테이블이나 관계스키마에 직접 매핑될 때 발생</li></ul><h3 id="DB-테이블은-DS이다"><a href="#DB-테이블은-DS이다" class="headerlink" title="DB 테이블은 DS이다."></a>DB 테이블은 DS이다.</h3><ul><li>data를 노출하고, 메소드는 없다.</li><li>테이블은 너무 concrete해서 polymorphic(다형화)할 수 없다.</li><li>DB는 어떠한 객체도 포함 할 수 없다.</li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><ul><li>Hibernate<ul><li>진정한 Object-Relational Mapper는 아니다.</li><li>DB row와 객체간의 직접적인 매핑이 없기 때문</li><li>Hibernate는 DB의 DS를 메모리의 DS로 매핑한다.</li></ul></li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/codetemplate/videos&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt; 클린코더
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0/"/>
    
      <category term="Data Structure" scheme="https://ggomi.github.io/tags/Data-Structure/"/>
    
      <category term="Boundaries" scheme="https://ggomi.github.io/tags/Boundaries/"/>
    
  </entry>
  
  <entry>
    <title>Algospot(알고스팟) KWPattern</title>
    <link href="https://ggomi.github.io/kwpattern/"/>
    <id>https://ggomi.github.io/kwpattern/</id>
    <published>2018-12-26T07:20:21.000Z</published>
    <updated>2019-01-22T02:13:11.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KWPATTERN"><a href="#KWPATTERN" class="headerlink" title="KWPATTERN"></a>KWPATTERN</h2><h3 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h3><p>서기 2222년, cdinside 알고스팟 갤러리에서 WonhaJin은 무패 전설의 키보드 워리어로 유명하다. WonhaJin은 항상 만년떡밥을 던짐으로써 낚여든 상대방을 무참히 공격하여 굴복시키곤 했다. 이러한 패턴으로 그는 한 번도 키보드 배틀에서 패배한 적이 없다.</p><p>한편, 그동안 그와 대등하게 승부했지만 한 번도 이겨 본 적이 없는 숙명의 라이벌 WookMan은 WonhaJin에게 패배를 안겨주고자 22개월간 WonhaJin의 키보드 배틀 패턴을 파악하고자 노력하였다.</p><p>그러던 도중 2222년 2월 22일 22시 22분 22초에 그가 뻘글을 쓰는 것을 확인하였다. 이는 키보드 워리어에게 있어 치명적인 약점이다. WookMan은 이로부터 그가 성시마다 약점을 보인다는 가설을 세웠다. 성시란 다음과 같다:</p><p>어떤 시각이 24시간제 기준으로 X 년 Y 월 Z 일 A시 B분 C 초이면, 이를 XY ZABC 의 형태로 이어 붙인 것과 그것을 뒤집은 문자열이 서로 같을 때 그 시각은 성시이다.<br>시각은 그레고리력(양력) 을 따라 4의 배수 해는 2월이 29일까지 있는 윤년이다. 단, 100의 배수 해는 윤년이 아니지만 400의 배수 해는 윤년이다.<br>X는 네 자리에 맞추어 표기하며, 나머지는 두 자리에 맞추어 표기한다. 모자라는 자리는 “0”으로 채운다.<br>예를 들어 2011년 9월 20일 23시 57분 11초의 경우, 20110920235711인데 이는 이를 뒤집은 11753202901102와 다르기 때문에 성시가 아니다. 한편 2011년 12월 11일 21시 11분 2초의 경우 20111211211102이므로 성시이다.</p><p>이러한 패턴을 이용하여 WonhaJin을 공격하고자 WookMan은 1970년 1월 1일 0시 0분 0초 (이는 프로그래머들에게 있어 현존하는 모든 역사가 시작된 시간이다) 부터 N 번째로 등장하는 성시를 찾는 프로그램을 작성하려고 하였는데, 최근 취업과 육아를 동시에 시작하여 너무 바쁜 나머지 추종자들에게 도움을 요청하였<br>다.</p><p>WookMan의 꼼꼼함에 반한 추종자인 당신은 이 프로그램을 작성해주어야 한다.</p><p>입력</p><blockquote><p>입력은 여러 개의 테스트 케이스로 구성된다. 입력의 첫 행에는 테스트 케이스의 수 T 가 주어진다.</p></blockquote><p>각 테스트 케이스는 하나의 행으로 이루어져 있는데, 그 행에는 양의 정수 N (1 ≤ N ≤ 10000)이 주어진다.</p><p>출력</p><blockquote><p>각 테스트 케이스에 대해 N 번째 성시를 한 행에 하나씩 “XXXX-YY-ZZ AA:BB:CC” 의 형식으로 출력한다.</p></blockquote><p>Input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">7</span><br><span class="line">2</span><br><span class="line">20</span><br><span class="line">99</span><br></pre></td></tr></table></figure></p><p>Output<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2000-11-11 11:00:02</span><br><span class="line">2000-01-22 10:00:02</span><br><span class="line">2001-12-22 21:10:02</span><br><span class="line">2013-12-11 21:31:02</span><br></pre></td></tr></table></figure></p><hr><ul><li>크게 어려운 문제는 아니었다고 생각하는데, 얼핏 보면 시,분,초 까지 구해야한다는 생각이 들 수 있는데 사실 년월일만 구하면 되는 문제였다.</li></ul><p>Solved<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KWPATTERN</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] YEARS;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> START = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> START2 = <span class="number">2000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String year;</span><br><span class="line">        String month;</span><br><span class="line">        String day;</span><br><span class="line">        initYears();</span><br><span class="line">        <span class="keyword">int</span> caseSize = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        String[] array = &#123;<span class="string">"01"</span>,<span class="string">"02"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"12"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; caseSize; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> select = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> temp = select / <span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 나누고, 뺐더니 오답, 빼고 나눠야 정답처리..</span></span><br><span class="line">            <span class="keyword">int</span> yearIndex = (select - <span class="number">1</span>) / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(select &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                select = select - ( <span class="number">10</span> * temp );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(select == <span class="number">0</span>) &#123;</span><br><span class="line">                    select = <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(select % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                day = <span class="string">"22"</span>;</span><br><span class="line">                <span class="keyword">int</span> target = select / <span class="number">2</span>;</span><br><span class="line">                month = array[target-<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                day = <span class="string">"11"</span>;</span><br><span class="line">                month = array[select/<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            year = String.valueOf(YEARS[yearIndex]);</span><br><span class="line">            StringBuffer sMonth = <span class="keyword">new</span> StringBuffer(month);</span><br><span class="line">            StringBuffer sYear = <span class="keyword">new</span> StringBuffer(year);</span><br><span class="line">            sYear = sYear.reverse();</span><br><span class="line"></span><br><span class="line">            System.out.println(year+<span class="string">"-"</span>+month+ <span class="string">"-"</span> + day + <span class="string">" "</span> + sMonth.reverse().toString() + <span class="string">":"</span>+sYear.substring(<span class="number">0</span>,<span class="number">2</span>)+<span class="string">":"</span>+sYear.substring(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initYears</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        YEARS = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">        YEARS[<span class="number">0</span>]=START;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">            String s = String.valueOf(YEARS[i-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(s.split(<span class="string">""</span>)[s.length()-<span class="number">1</span>])&gt;<span class="number">5</span>) &#123;</span><br><span class="line">                YEARS[i-<span class="number">1</span>] = START+<span class="number">10</span>;</span><br><span class="line">                START =YEARS[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            String z= String.valueOf(START);</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(z.split(<span class="string">""</span>)[<span class="number">1</span>])&gt;<span class="number">5</span>) &#123;</span><br><span class="line">                YEARS[i-<span class="number">1</span>] = START2+<span class="number">1000</span>;</span><br><span class="line">                START2 =YEARS[i-<span class="number">1</span>];</span><br><span class="line">                START = START2;</span><br><span class="line">            &#125;</span><br><span class="line">            YEARS[i]=YEARS[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>이 문제를 5번 제출 만에 풀게되었는데 도저히 어떤부분에서 오답을 받는지 못찾고, 헤매다가 겨우 찾게되었다. 이유는 <em>뺄셈연산</em>과 <em>나눗셈</em> 연산 순서문제였는데 주어진 테스트케이스에서는 정확하게 답이 나와서 정말 찾기 힘들었었다…</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;KWPATTERN&quot;&gt;&lt;a href=&quot;#KWPATTERN&quot; class=&quot;headerlink&quot; title=&quot;KWPATTERN&quot;&gt;&lt;/a&gt;KWPATTERN&lt;/h2&gt;&lt;h3 id=&quot;문제&quot;&gt;&lt;a href=&quot;#문제&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://ggomi.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://ggomi.github.io/tags/Algorithm/"/>
    
      <category term="Alogospot" scheme="https://ggomi.github.io/tags/Alogospot/"/>
    
      <category term="KWPattern" scheme="https://ggomi.github.io/tags/KWPattern/"/>
    
  </entry>
  
  <entry>
    <title>Vertical Formatting과 Classes</title>
    <link href="https://ggomi.github.io/vertical-classes/"/>
    <id>https://ggomi.github.io/vertical-classes/</id>
    <published>2018-12-23T13:23:20.000Z</published>
    <updated>2019-01-22T14:20:05.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vertical-Formatting"><a href="#Vertical-Formatting" class="headerlink" title="Vertical Formatting"></a>Vertical Formatting</h1><hr><h2 id="1-공란을-함부로-사용하지마라"><a href="#1-공란을-함부로-사용하지마라" class="headerlink" title="1. 공란을 함부로 사용하지마라."></a>1. 공란을 함부로 사용하지마라.</h2><blockquote><p>공란은 비어있는 라인을 말하는데 이것도 일련의 규칙을 가지고 하는 것이 좋다고 한다. 아래와 같은 경우에 공란을 주자!</p></blockquote><ul><li>메소드 사이</li><li>private 변수들과 public 변수들 사이</li><li>변수선언과 메소드 실행의 나머지 부분 사이</li><li>if / while 블록과 다른 코드 사이</li></ul><h2 id="2-서로-관련된-것들은-Vertical하게-근접해야한다"><a href="#2-서로-관련된-것들은-Vertical하게-근접해야한다" class="headerlink" title="2. 서로 관련된 것들은 Vertical하게 근접해야한다."></a>2. 서로 관련된 것들은 Vertical하게 근접해야한다.</h2><blockquote><p>Vertical한 거리가 그들간의 관련성을 나타낸다!</p></blockquote><hr><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="1-Class란-무엇인가"><a href="#1-Class란-무엇인가" class="headerlink" title="1. Class란 무엇인가?"></a>1. Class란 무엇인가?</h2><blockquote><p>private 변수와 그 변수들에 대해서 동작하는 public 함수들의 집합이다.(private함수일 수 도..)</p></blockquote><p><em>private</em>변수들을 작성함으로써 클래스를 작성한다. 그리고 <em>private</em>변수들을 public 함수들로 조작한다. 그렇기 때문에 외부에서는 클래스 내의 <em>private</em>변수들이 존재하지 않는 것처럼 보인다.</p><h2 id="하지만"><a href="#하지만" class="headerlink" title="하지만,"></a><strong>하지만,</strong></h2><p>너무 잘 보인다.</p><p>왜냐하면 <em>Getter/Setter</em> 때문에 짐작할 수 있게된다. 왜 변수는 <em>private</em>로 선언하고, <em>Getter/Setter</em>를 제공하나?</p><blockquote><p><strong>필요하지도 않는 <em>Getter/Setter</em>들을 만드는 것은 정말 좋지않은 습관이다.</strong></p></blockquote><p>또한, 객체의 상태를 외부에서 사용할 수 있도록 하는 <em>Getter/Setter/property</em> 등을 제공하는 것은 잘못 된 설계다.</p><p>여기서, 또다시 <em>Tell, Don’t Ask Rule</em>이 나온다.</p><blockquote><p>객체가 관찰할 수 있는 상태를 가지지 않는다면, Tell 하기 쉽고, ask할 가치가 없어진다. 이 규칙을 따르게 되면 Getter가 많지않고, Getter가 많지않으므로 Setter도 적다.</p></blockquote><p>Max cohesive(응집도 최대)를 생각했을 때 Getter/Setter는 cohesive 하지않다.<br>왜냐하면 하나의 변수만 사용하기 때문에 응집도가 높을 수 없다. 그렇다고 해서 Getter/Setter가 없을 수는 없다.. </p><p><strong>그래서 최소화하고 본래변수를 그대로 노출하지않고, 추상화를 통해 제공해야한다.</strong></p><p> <img src="/images/class.png" alt="class"></p><p> 위의 사진처럼 getter를 추상화를 통해서 제공하고, 추상화하기 때문에 getter 이름을 잘 정해야한다.</p><p> 이렇게 했을 때 다형성이 자연스럽게 따라오게 된다.<br> 다형성은 클라이언트 코드를 서버코드의 구현 변경으로부터 보호하고,<br> IoC를 통해 High Level Policy(클라이언트, 비즈니스 로직)를 Low Level Detail로부터 보호하는 것.</p><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vertical-Formatting&quot;&gt;&lt;a href=&quot;#Vertical-Formatting&quot; class=&quot;headerlink&quot; title=&quot;Vertical Formatting&quot;&gt;&lt;/a&gt;Vertical Formatting&lt;/h1&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0/"/>
    
      <category term="주석" scheme="https://ggomi.github.io/tags/%EC%A3%BC%EC%84%9D/"/>
    
      <category term="문서화" scheme="https://ggomi.github.io/tags/%EB%AC%B8%EC%84%9C%ED%99%94/"/>
    
      <category term="Vertical Formatting" scheme="https://ggomi.github.io/tags/Vertical-Formatting/"/>
    
      <category term="Classes" scheme="https://ggomi.github.io/tags/Classes/"/>
    
  </entry>
  
  <entry>
    <title>Comments Rules</title>
    <link href="https://ggomi.github.io/comments-rules/"/>
    <id>https://ggomi.github.io/comments-rules/</id>
    <published>2018-12-22T05:18:29.000Z</published>
    <updated>2019-01-22T02:12:12.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.</p></blockquote><hr><h1 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h1><blockquote><p><strong>조직이 일정수준의 크기가 되면 문서화를 요구한다. 하지만 별도의 문서를 작성하는 것은 반대!!</strong></p></blockquote><p>처음에는 별도의 문서가 있어도 괜찮을거라고 생각이 들었는데 강의를 듣다보니 생각이 바뀌었다. 코드에 대한 설명을 코드 자체로 설명하는 것이지 별도의 문서로 설명한다는 것은 아니라고 한다. 별도의 문서가 필요하다는 말은 해당 코드가 Coding Standard의 예로 적합하지 않다는 뜻이 된다.<br>Comments 작성을 강요하면 프로그래머는 필요해서가 아니라 해야하므로 Comment를 작성하게된다.<br>그리고 이런 Comments는 무의미하고, 무시당하기 십상이다. <del>너무해ㅠ</del><br>Comments를 보는사람이 감사하는 마음이 생겨야 좋은 Comments이다.</p><blockquote><p><strong>모든 Comments는 당신의 코드가 ‘제대로 표현되고있지않다’라는 실패의 상징이다.</strong></p></blockquote><p>이 말은 좀 충격이었다. 지금까지 사람들에게 내 코드를 이해시키기위해 주석을 열심히 써왔는데… 차라리 이 노력을 코드표현력에 쏟을걸 하는 생각이 들었다.</p><p>그렇다면 Comments를 꼭 써야하는 상황에서의 좋은 Comments 그리고 나쁜 Comments는 무엇일까?</p><hr><h2 id="좋은-Comments"><a href="#좋은-Comments" class="headerlink" title="좋은 Comments"></a>좋은 Comments</h2><p><strong>Legal Comments</strong></p><ul><li>법적인 문제가 쓰여져있는 Comments</li><li>Ex) LICENSE 문제</li></ul><p><strong>Informative Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// format matched kk:mm:ss EEE, MMM dd, yyyy</span></span><br><span class="line">Pattern timePattern = Pattern.compile(<span class="string">"\\d*:\\d*:\\d* \\w*. \\w* \\d*, \\d*"</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><ul><li>예를 들면 정규식을 사용할 때 이 패턴이 어떤 패턴인지 설명해주는 그런 정보를 제공하는 Comments</li></ul><p><strong>Warning of Consequences</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// don't run unless you have some time to kill</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readReallyBigFile</span><span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p><ul><li>코드에 관해서 <strong>경고</strong>할 때</li></ul><p><strong>TODO Comments</strong></p><ul><li>TODO(해야할 일에 관한 Comment)<br><strong>Public API Documentation</strong></li></ul><hr><h2 id="나쁜-Comments"><a href="#나쁜-Comments" class="headerlink" title="나쁜 Comments"></a>나쁜 Comments</h2><p><strong>Mumbling</strong> </p><ul><li>주저리주저리 써놓은 Comments들</li></ul><p><strong>Redundant Explanations</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Child Containers belong to this container, keyed by name</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Child&gt; children = <span class="keyword">new</span> HashMap&lt;String, Child&gt;();</span><br></pre></td></tr></table></figure></p><ul><li>코드한줄만 봐도 뻔히 알 수 있는 내용인데 굳이 Comment에서 중복되게 다시 설명하고 있는 Comment</li></ul><p><strong>Mandated Redundancy</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateIn input date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> formatted string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">convertDateFormat</span><span class="params">(String dateIn)</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>IDE에서 자동으로 생기는 Comment</li></ul><p><strong>Journal Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 변경이력</span></span><br><span class="line"><span class="comment"> * 2018.11.01 : 생성</span></span><br><span class="line"><span class="comment"> * 2018.11.05 : convertDateFormat 메소드 구현 ...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><ul><li>코드의 변경이력을 써놓은 Comment</li></ul><p><strong>Noways Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  default constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">DateFormatUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ...</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>누가봐도 default 생성자인데 굳이 위에 생성자라고 Comment를 작성하는 것처럼 너무 말도 안되게 뻔한 Comments (<strong>절대 해선안된다!!</strong>)</li></ul><p><strong>Big Banner Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/************************</span></span><br><span class="line"><span class="comment">     * instance variables   *</span></span><br><span class="line"><span class="comment">     ************************/</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> date;</span><br><span class="line">     ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>잘보이게 하려고 특수문자로 도배해놓은 Comment</li></ul><p><strong>Closing Brace Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(...) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">//end of if</span></span><br><span class="line">&#125; <span class="comment">//end of for</span></span><br></pre></td></tr></table></figure></p><ul><li>loop의 끝과 Method의 끝 등등 코드블록 끝을 표시해놓은 Comment</li></ul><p><strong>Attribution Comments</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add by jm</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>누가 작성했는지 써놓은 Comment, 굳이 코드에 써놓을 필요가 없다.</li></ul><p><strong>HTML in Comments</strong> </p><ul><li>HTML 코드로 Comment 작성 (javadoc 작성을 위해서 이렇게 하는 사람들이 있다고한다.)</li></ul><p><strong>Non-Local Information</strong> </p><ul><li>local이 아닌 멀리 떨어진 곳의 코드를 설명하는 Comments는 Comments와 무고나하게 변경될 수 있다.</li></ul><hr><ul><li><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></li><li><a href="https://ggomi.github.io">Blog</a></li><li><a href="https://github.com/ggomi" rel="external nofollow noopener noreferrer" target="_blank">Github</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/codetemplate/videos&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt; 클린코더
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기_Comment" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-Comment/"/>
    
      <category term="주석" scheme="https://ggomi.github.io/tags/%EC%A3%BC%EC%84%9D/"/>
    
      <category term="Comments" scheme="https://ggomi.github.io/tags/Comments/"/>
    
      <category term="문서화" scheme="https://ggomi.github.io/tags/%EB%AC%B8%EC%84%9C%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>함수의 구조 (function Structure) - 2</title>
    <link href="https://ggomi.github.io/function-structure-2/"/>
    <id>https://ggomi.github.io/function-structure-2/</id>
    <published>2018-12-20T04:57:56.000Z</published>
    <updated>2019-01-22T14:33:57.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="함수의-구조"><a href="#함수의-구조" class="headerlink" title="함수의 구조"></a>함수의 구조</h1><blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.</p></blockquote><hr><blockquote><p><a href="/function-structure">함수의 구조 - 1</a></p></blockquote><p><strong>—————————————————————————————————————</strong></p><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ul><li><a href="#%ED%95%A8%EC%88%98%EC%9D%98-%EA%B5%AC%EC%A1%B0">함수의 구조</a></li><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#cqs">CQS</a><ul><li><a href="#command">command</a></li><li><a href="#query">query</a><ul><li><a href="#example">Example</a></li></ul></li></ul></li><li><a href="#tell-dont-ask">Tell Don’t Ask</a></li><li><a href="#law-of-demeter">Law of Demeter</a></li><li><a href="#early-returns">early returns</a></li><li><a href="#error-handling">Error handling</a><ul><li><a href="#exception%EC%9D%80-%EC%96%B4%EB%96%A4-%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EB%8B%B4%EC%95%84%EC%95%BC-%ED%95%A0%EA%B9%8C">Exception은 어떤 메시지를 담아야 할까?</a></li></ul></li><li><a href="#special-cases">Special Cases</a></li><li><a href="#null-is-a-value">Null is a value</a></li><li><a href="#try">try</a></li></ul><p><strong>———————————————————————————————————————————————–</strong></p><h1 id="CQS"><a href="#CQS" class="headerlink" title="CQS"></a>CQS</h1><ul><li>상태를 변경하는 함수는 값을 반환하면 안된다. 값을 반환하는 함수는 상태를 변경하면 안된다.</li></ul><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><ul><li>시스템의 상태변경가능</li><li>side effect를 갖는다</li><li>아무것도 반환하지않는다.</li></ul><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><ul><li>side effect가 없다.</li><li>계산값이나 시스템의 상태를 반환</li><li>신뢰의 문제</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User u = authorize.login(userName, password);</span><br></pre></td></tr></table></figure><ul><li>위의 상황에서 User를 사용하기 위해서는 항상 login을 해야함. login을 하면 원치않아도 User정보를 읽어야만 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">authorize.login(userName, password);</span><br><span class="line">User u = authorize.getUser(userName);</span><br></pre></td></tr></table></figure><ul><li><strong>login Method</strong>의 리턴을 void로 변경하고, <strong>User</strong> 정보가 필요할때만 읽음.</li><li><p>값을 반환하는 함수는 상태를 변경하면 안된다.<br>상태를 변경하는 함수는 <strong>exception</strong>을 발생시킬 수는 있지만, 값을 반환할 수 없다.</p></li><li><p>이것은 SideEffect를 관리하는 약속이다. 약속을 어겨서 혼란을 주지말자.</p></li></ul><p><strong>———————————————————————————————————————————————–</strong></p><h1 id="Tell-Don’t-Ask"><a href="#Tell-Don’t-Ask" class="headerlink" title="Tell Don’t Ask"></a>Tell Don’t Ask</h1><ul><li>extream한 CQS는 C와 Q를 함께 사용하지 말도록</li></ul><p><img src="/images/ask.png" style="width: 60%;"></p><blockquote><p>로그인 여부는 user객체에 속한다. Tell Don’t Ask 인데 isLoggedIn()은 이상함.</p><ul><li>Tell Don’t Ask 는 CQS를 강화하는 수단</li><li>이 규칙을 준수하다보면 Query메소드가 많이 필요없어진다. - 매우 좋은 현상(왜냐하면 Q는 Out of control되는 경향이 있기 때문)</li></ul></blockquote><h1 id="Law-of-Demeter"><a href="#Law-of-Demeter" class="headerlink" title="Law of Demeter"></a>Law of Demeter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 예를 들어서 아래와 같은 코드가 있다면, </span></span><br><span class="line">o.getX()</span><br><span class="line">    .getY()</span><br><span class="line">        .getZ()</span><br><span class="line">            .doSomething();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수가 시스템에 너무 많은 의존성을 가지게 된다.</span></span><br></pre></td></tr></table></figure><ul><li>함수가 시스템의 전체를 알게 하면 안된다.</li><li>개별 함수는 아주 제한된 지식만 가져야한다.</li><li>이전 메소드 호출의 결과로 얻은 객체의 메소드를 호출하면 안된다.</li><li>Tell Don’t Ask나, Law of Demeter 모두 어떻게 의존도를 낮추고, <em>Testable</em>하게 만들고, 클린하게 만들건지에 대한 방법, 규칙들이다.<blockquote><p><em>ask대신 tell하면 surrounding과 decouple 된다.</em> </p></blockquote></li></ul><h1 id="early-returns"><a href="#early-returns" class="headerlink" title="early returns"></a>early returns</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(...)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(...)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(...)</span><br><span class="line"><span class="keyword">else</span> (...)&#123; <span class="keyword">return</span>; &#125;</span><br></pre></td></tr></table></figure><p>위 코드처럼 <em>else</em>에다가 리턴을 두지말고 return 되는 로직을 상단으로 올려서 코드를 끝까지 읽지않아도 될 수 있게하는 것</p><ul><li>루프 중간에서 return 하는 것은 문제이다.</li><li>코드가 동작하도록 하는 것보다 이해할 수 있게하는 것이 더 중요하다.</li></ul><h1 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h1><ul><li>Error처리를 위해 pop은 null을 반환하고, push는 false를 반환하는 것보다 Exception을 발생시키는 것이 좋다.</li><li>Exception의 이름은 최대한 구체적이어야 한다.</li><li>Inner클래스로 Exception을 정의하면 읽기 편할 수 있다. 고려해볼 것</li><li>checked vs unchecked ?(찾아봐야함.) Checked Exception은 되도록 사용하지말자.</li><li>unchecked는 throws를 말하는 것 같고, checked는 try~catch를 말하는 것 같다.</li></ul><h2 id="Exception은-어떤-메시지를-담아야-할까"><a href="#Exception은-어떤-메시지를-담아야-할까" class="headerlink" title="Exception은 어떤 메시지를 담아야 할까?"></a>Exception은 어떤 메시지를 담아야 할까?</h2><ul><li>필요없는 것이 가장 좋다.</li><li>Exception이름을 명확하게 지어서 이름으로 의미가 전달되도록 하자.</li><li>클래스 내부에 Message를 절대 두지말자.</li></ul><h1 id="Special-Cases"><a href="#Special-Cases" class="headerlink" title="Special Cases"></a>Special Cases</h1><ul><li><a href="https://github.com/msbaek/stack-example" rel="external nofollow noopener noreferrer" target="_blank">Special Cases 참고</a></li></ul><h1 id="Null-is-a-value"><a href="#Null-is-a-value" class="headerlink" title="Null is a value"></a>Null is a value</h1><ul><li>stack이 empty일 때 top함수는 무엇을 반환해야하나?</li><li>Null 대신 Empty 객체를 발생시키는 것이 좋다.</li></ul><h1 id="try"><a href="#try" class="headerlink" title="try"></a>try</h1><ul><li>try가 있다면 함수내에서 변수선언을 제외하고 첫번째문장이여야한다.</li><li>try 블럭 내에는 함수호출만 있어야한다.</li><li>finally가 함수의 마지막 블럭이어야한다. 이후에 어떤라인도 없어야 한다.</li><li>Error handling은 하나의 일이다.</li></ul><hr><blockquote><p>지금은 이해할 수 있고, 다 이해한것 같아도 속지말고, 직접 내 코드에 적용해보고, 설계해보자</p></blockquote><ul><li><p><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></p></li><li><p><a href="https://ggomi.github.io">Blog</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;함수의-구조&quot;&gt;&lt;a href=&quot;#함수의-구조&quot; class=&quot;headerlink&quot; title=&quot;함수의 구조&quot;&gt;&lt;/a&gt;함수의 구조&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/cod
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기_함수" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-%ED%95%A8%EC%88%98/"/>
    
      <category term="함수" scheme="https://ggomi.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
      <category term="리팩토링" scheme="https://ggomi.github.io/tags/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>함수의 구조 (function Structure) - 1</title>
    <link href="https://ggomi.github.io/function-structure/"/>
    <id>https://ggomi.github.io/function-structure/</id>
    <published>2018-12-20T00:14:01.000Z</published>
    <updated>2019-01-22T14:34:26.583Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/function-structure.png" alt="함수의 구조"></p><blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.</p></blockquote><p><strong>————————————————————————————————————————————————————-</strong></p><h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ul><li><a href="#Arguments">Arguments</a></li><li><a href="#The-Stepdown-Rule">The Stepdown Rule</a></li><li><a href="#Switches-and-cases">Switches and cases</a></li><li><a href="#Temporal-Coupling">Tomporal Coupling</a></li></ul><p><strong>————————————————————————————————————————————————————-</strong></p><h1 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h1><ul><li>인자가 많아지면 복잡도가 증가한다.</li><li><p>인자를 최대 3개</p><h2 id="생성자의-많은-수의-넘겨야한다면"><a href="#생성자의-많은-수의-넘겨야한다면" class="headerlink" title="생성자의 많은 수의 넘겨야한다면?"></a>생성자의 많은 수의 넘겨야한다면?</h2><pre><code>Java Bean Pattern을 사용(Getter &amp; Setter)Builder 패턴을 적용하는 것이 더 좋은방법!!</code></pre><h2 id="Boolean-인자-사용-금지"><a href="#Boolean-인자-사용-금지" class="headerlink" title="Boolean 인자 사용 금지"></a>Boolean 인자 사용 금지</h2><pre><code>Boolean 이라면 true, false 두가지 일을 한다는 것이기 때문에 &apos;Method는 한가지 일만 해야한다.&apos; 를 위반한다.</code></pre></li></ul><h2 id="Innies-not-Outies"><a href="#Innies-not-Outies" class="headerlink" title="Innies not Outies"></a>Innies not Outies</h2><ul><li>Parameter는 입력으로 작용해야지 출력으로 작용하면 안된다.</li></ul><p><strong>————————————————————————————————————————————————————-</strong></p><h2 id="Null-defense"><a href="#Null-defense" class="headerlink" title="Null defense"></a>Null defense</h2><ul><li><strong>null</strong>을 전달/기대하는 함수는 boolean을 전달하는만큼 잘못된 것</li><li><strong>public api</strong>의 경우는 <strong>defensive</strong>하게 프로그래밍하는 것이 맞지만 같은 팀 내에서 <strong>defensive programming</strong>을 하는것은 잘못됨. =&gt; 팀원이나 단위테스트를 못 믿는다는 말</li><li><strong>null</strong>을 <strong>boolean</strong>처럼 사용하지마라</li><li><strong>null</strong>체크를 한다는 것 자체가 무언가 잘못되었다는 단서</li><li><strong>null</strong>여부를 지속적으로 체크할 것이 아니라 단위테스트에서 검증을 해라.</li></ul><p><strong>————————————————————————————————————————————————————-</strong></p><h1 id="The-Stepdown-Rule"><a href="#The-Stepdown-Rule" class="headerlink" title="The Stepdown Rule"></a>The Stepdown Rule</h1><ul><li>코드 상 public은 위로 private는 아래로</li><li><strong>public</strong> 필드만 보고도 이해할 수 있을정도로</li><li><strong>public</strong> part만 사용자들에게 전달하면 됨.</li><li>중요한 부분은 위로, 상세한 부분은 밑으로  </li></ul><p><strong>———————————————————————————————————————————————————–</strong></p><h1 id="Switches-and-cases"><a href="#Switches-and-cases" class="headerlink" title="Switches and cases"></a>Switches and cases</h1><ul><li>switch문장 사용을 왜 꺼리나 =&gt; OO(Object-Oriented) 스럽지않아서?<h2 id="그럼-OO-Object-Oriented-는-뭐가-좋을까"><a href="#그럼-OO-Object-Oriented-는-뭐가-좋을까" class="headerlink" title="그럼 OO(Object-Oriented)는 뭐가 좋을까?"></a>그럼 OO(Object-Oriented)는 뭐가 좋을까?</h2></li><li>OO의 가장 큰 이점 중 하나는 의존성 관리능력이다.</li><li>예시</li></ul><p><img src="/images/switch.png" alt="switch"></p><ul><li>이상태에서는 독립적으로 배포/컴파일/개발 불가하다.</li><li>runtime 의존성은 그대로 둔 채로 의존성을 역전시킨다.(Dependency Inversion Principle)</li></ul><p><img src="/images/oo2.png" alt="switch2"></p><ul><li>A와 B사이에 interface를 두면 source code 의존성은 runtime 의존성과 반대가 된다.</li><li>Unit테스트도 잘된다 =&gt; 설계가 잘된 것.</li><li>TDD도 잘된다. =&gt; TDD가 잘 안된다, 어렵다 싶으면 설계가 잘못된 것.</li></ul><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h2><ul><li>각 case는 외부 모듈에 의존성을 갖는다.</li><li>독립적 배포에 방해가 됨.</li><li><em>fan-out problem</em></li><li>외부모듈 중 하나라도 변경이 일어나면 switch문 문제생김.</li></ul><h2 id="제거하려면"><a href="#제거하려면" class="headerlink" title="제거하려면?"></a>제거하려면?</h2><blockquote><ol><li>polymorphic interface 호출로 변환 </li><li>case에 있는 문장들을 별도의 클래스로 추출하여 변경 영향이 발생하지 않도록 한다.</li></ol><ul><li><a href="https://github.com/msbaek/videostore" rel="external nofollow noopener noreferrer" target="_blank">switch-case제거 실습</a> <em>branch:</em> remove-switch-statement</li></ul></blockquote><p><strong>———————————————————————————————————————————————————–</strong></p><h1 id="Temporal-Coupling"><a href="#Temporal-Coupling" class="headerlink" title="Temporal Coupling"></a>Temporal Coupling</h1><p>DB연결처럼 Connection을 열고, 닫고, 이런 코딩을 할 때 순서가 중요한 상황을 말한다.</p><ul><li>함수들이 순서를 지키며 호출되어야한다. </li><li><em>Passing a Block</em></li><li>Strategy Pattern</li></ul><p><img src="/images/temporal.png" alt="temporal"></p><ul><li>사용자에게 ‘주의해서 사용하라’가 아니고 위의 사진처럼 구현</li></ul><hr><ul><li><p><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></p></li><li><p><a href="https://ggomi.github.io">Blog</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/function-structure.png&quot; alt=&quot;함수의 구조&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/codetemplate/videos&quot; re
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기_함수" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-%ED%95%A8%EC%88%98/"/>
    
      <category term="함수" scheme="https://ggomi.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
      <category term="리팩토링" scheme="https://ggomi.github.io/tags/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>SSE란?</title>
    <link href="https://ggomi.github.io/SSE/"/>
    <id>https://ggomi.github.io/SSE/</id>
    <published>2018-12-18T04:10:05.000Z</published>
    <updated>2019-01-22T02:13:31.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSE-Server-Sent-Events"><a href="#SSE-Server-Sent-Events" class="headerlink" title="SSE(Server-Sent Events)"></a>SSE(Server-Sent Events)</h2><ul><li>HTML5 표준안 권고사항!! (IE 미지원)</li></ul><h2 id="그래서-뭔데"><a href="#그래서-뭔데" class="headerlink" title="그래서 뭔데?"></a>그래서 뭔데?</h2><ul><li><strong>서버가 필요할 때마다 클라이언트에게 데이터를 줄 수 있게 해주는 서버 푸쉬 기술</strong></li><li>HTML5가 등장하기 전까지는 HTML에 서버 푸시를 위한 표준화된 기술이 없었기 때문에 웹에서 실시간 정보를 받아와야 할 때 외부플러그인을 이용하거나 서버푸시를 흉내 낸 Ajax Polling 기법등을 사용했다고 한다.</li></ul><h2 id="그럼-뭐가-더-좋을까"><a href="#그럼-뭐가-더-좋을까" class="headerlink" title="그럼 뭐가 더 좋을까?"></a>그럼 뭐가 더 좋을까?</h2><p>먼저, 장점을 말하기 전에 기존 기술을 살펴보자.</p><ul><li><p><strong>Poling</strong></p><ul><li>대다수의 AJAX 응용 프로그램에서 사용되는 전통적인 기술입니다.</li><li>기본 개념은 응용 프로그램이 서버에서 데이터를 반복적으로 요청하는 것.</li><li><strong>장점</strong><ul><li>일정하게 갱신이 되는 서버 데이터의 경우 매우 유용하며 기존 단순한 모델을 유지 할 수 있습니다.</li></ul></li><li><strong>단점</strong><ul><li>클라이언트는 요청을 하고 서버가 데이터로 응답 할 때까지 기다립니다. 갱신되지 않은 의미없는 응답이 리턴될 수 도 있습니다. 그렇기 때문에 HTTP 오버헤드가 커지게 된다.</li></ul></li></ul></li><li><p><strong>Long Polling</strong></p><ul><li>폴링의 변형, 폴링과 비슷하지만 서버에 사용 가능한 데이터가 없으면 서버는 새 데이터를 사용할 수 있을 때까지 요청을 보류한다. 그래서 <em>Hang GET</em>이라고 불리기도 한다.</li><li>폴링의 단점을 해결한 것처럼 보이지만 사용 가능한 데이터가 지속적으로 응답해야하기 때문에 다른 추가적인 방법이 필요하다.</li></ul></li></ul><hr><h1 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h1><ul><li>처음부터 효율적으로 설계되어서 <strong>SSE</strong>를 사용하여 통신 할 때 서버는 초기 요청을 하지 않고도 필요할 때마다 데이터를 앱으로 푸시 할 수 있다. 즉, 서버와 클라이언트 사이에 단일 단방향 채널을 열게되는 것. <strong>Long Polling</strong>과 가장 큰 차이점은 브라우저에서 직접 처리된다는 점이다.</li><li>HTTP를 사용하기 때문에 작동하기위해 별도의 프로토콜이나 서버구현이 필요없다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSE-Server-Sent-Events&quot;&gt;&lt;a href=&quot;#SSE-Server-Sent-Events&quot; class=&quot;headerlink&quot; title=&quot;SSE(Server-Sent Events)&quot;&gt;&lt;/a&gt;SSE(Server-Sent Eve
      
    
    </summary>
    
      <category term="HTML5" scheme="https://ggomi.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="https://ggomi.github.io/tags/HTML5/"/>
    
      <category term="SSE" scheme="https://ggomi.github.io/tags/SSE/"/>
    
  </entry>
  
  <entry>
    <title>함수 리팩토링, 추상화 예제 (2)</title>
    <link href="https://ggomi.github.io/function-example2/"/>
    <id>https://ggomi.github.io/function-example2/</id>
    <published>2018-12-18T02:14:05.000Z</published>
    <updated>2019-01-22T14:16:32.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="함수-리팩토링-추상화-예제-2"><a href="#함수-리팩토링-추상화-예제-2" class="headerlink" title="함수 리팩토링, 추상화 예제 (2)"></a>함수 리팩토링, 추상화 예제 (2)</h2><p><img src="/images/function.png" alt="banner"></p><blockquote><p><a href="https://www.youtube.com/user/codetemplate/videos" rel="external nofollow noopener noreferrer" target="_blank"> 클린코더스 - 백명석님 </a> 강의를 보고 작성한 글입니다.<br><a href="https://github.com/msbaek/clean-coders-2013" rel="external nofollow noopener noreferrer" target="_blank">Source Code</a></p></blockquote><hr><p><img src="/images/gif/test5.gif" alt="pageName"><br><img src="/images/gif/test6.gif" alt="method Extract"></p><ul><li>함수의 파라미터에 <code>Extract Valuable</code>를 진행하고, <code>Extract Method</code>를 진행하기위해 가장안쪽 <code>if</code> 내부에 있던 지역변수를 <code>if</code>문 밖으로 꺼내어 메소드 추출 준비를 합니다.</li><li>그리고 유사한 코드를 찾아 메소드로 추출합니다.</li></ul><p><img src="/images/gif/test7.gif" alt="inline"><br><img src="/images/gif/test8.gif" alt="method Extract"></p><ul><li>추출하고 남아있는 코드에서 의미없이 라인만 차지하는 코드들을 <code>inline</code>형태로 변경하고, 다시 메소드 추출을 진행합니다.</li></ul><p><img src="/images/result.png" alt="method Extract"></p><ul><li>마지막으로 같은레벨의 <code>if</code>문 두개로 나누어져있는 코드를 하나로 병합해줍니다.</li></ul><hr><ul><li>이렇게 코드를 리팩토링을 연습해보았는데, 저번 <a href="/basic-3">포스트</a>에서 나온 것처럼 함수추출을 진행해도 추상화단계에 변화가 없을 때까지 추출을 진행해야 한다는 것이 크게 와닿지 않았었는데 코드예제를 보고 연습을 하다보니 왜 그렇게 해야할지 알 수 있었고, 역시 어렵다..</li><li>같은 코드만 10번정도 반복한 것 같다.. <del>멍청..</del></li></ul><hr><ul><li><p><a href="https://velog.io/@essri" rel="external nofollow noopener noreferrer" target="_blank">velog</a></p></li><li><p><a href="https://ggomi.github.io">Blog</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;함수-리팩토링-추상화-예제-2&quot;&gt;&lt;a href=&quot;#함수-리팩토링-추상화-예제-2&quot; class=&quot;headerlink&quot; title=&quot;함수 리팩토링, 추상화 예제 (2)&quot;&gt;&lt;/a&gt;함수 리팩토링, 추상화 예제 (2)&lt;/h2&gt;&lt;p&gt;&lt;img src
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기_함수" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-%ED%95%A8%EC%88%98/"/>
    
      <category term="함수" scheme="https://ggomi.github.io/tags/%ED%95%A8%EC%88%98/"/>
    
      <category term="리팩토링" scheme="https://ggomi.github.io/tags/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81/"/>
    
  </entry>
  
</feed>
