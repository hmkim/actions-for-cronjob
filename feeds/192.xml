<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1365591944722180079</id><updated>2019-05-05T01:23:41.442-07:00</updated><category term="분석/요구사항"/><category term="소프트웨어공학"/><category term="SWEBOK(소프트웨어 지식체계)"/><category term="문화/조직/회사"/><category term="코딩"/><category term="프로세스"/><category term="기반시스템"/><category term="소프트웨어 공학"/><category term="실리콘밸리"/><category term="정부 정책"/><category term="ATP"/><category term="Outsourcing"/><category term="계약"/><category term="방법론"/><category term="설계"/><category term="영어"/><category term="인수테스트"/><title type='text'>김익환의 &quot;소프트웨어 지혜&quot;</title><subtitle type='html'>실리콘밸리에서 20년 글로벌 소프트웨어 회사에서의 경험과 한국에서의 18년 정부,학계,산업계를 컨설팅한 경험을 바탕으로 한국 소프트웨어 업계가 필요로 하는 &quot;소프트웨어 지혜&quot;를 얘기합니다.&#xa;&lt;br&gt; * 당분간 한국 Software 업계에서 가장 취약한 분야인 &quot;분석&quot;에 관해 연재합니다.&#xa;</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default?start-index=26&amp;max-results=25'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>40</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-1248765825541946280</id><published>2019-01-10T05:56:00.000-08:00</published><updated>2019-01-10T06:07:25.845-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="ATP"/><category scheme="http://www.blogger.com/atom/ns#" term="계약"/><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><category scheme="http://www.blogger.com/atom/ns#" term="인수테스트"/><title type='text'>분석 #10. 잘못된 국내 Outsourcing 계약 방식과 글로벌 계약 방식</title><content type='html'>&lt;br /&gt;이 기사는 일전에 게재한 기사인 “분할발주의 허구와 진실” 과 바로 앞 기사인 베트남의 Outsourcing 회사에 관한 기사와 연관되어 있다. 국내 개발 Outsourcing 생태계의 도전적인 숙제이자 염원이기도 한 “분할 발주”도 하고 싶고 글로벌 고객을 상대로 개발 Outsourcing 비지니스도 하고 싶겠지만 열정과 의지만으로 되는 것은 아니고 그를 수행할 수 있는 기본 역량부터 있고 다양한 고객을 상대할 수 있는 경험도 있어야 한다. &lt;br /&gt;&lt;br /&gt;대부분의 국내 회사는 거의 미신과 같은 국내의 기존 관행에 몇십년을 젖어 있었기 때문에 우물안 개구리의 문제점을 눈치 채기도 어렵다. 이 기사를 읽어도 눈치 챌 수 있는 사람은 극히 소수일 것이다. 꿈속에서 사는 삶이 있고 현실의 삶이 따로 있는데 이런 추상적인 문제에서는 계속 꿈속에서 사는 것이 통상적이다. 영화 매트릭스에서 얘기한 빨간 약을 먹으면 계속 행복한 환상의 세계에서 살고 파란 약을 먹으면 고통스러운 진실과 마주한다는 것과 같다. 현실에서는 진실을 모르는 것이 더 좋은 경우가 더 많다. 어느 쪽을 택할 지는 순전한 각자의 선택이다.&lt;br /&gt;&lt;br /&gt;먼저 소프트웨어 외주 개발 계약의 방식부터 간단히 살펴보자. 필자의 저서와 블로그에서 여러 번 언급했듯이 계약에는 Time and Material(T&amp;M)과 Turn-key 의 두 가지 방식이 있다. &lt;br /&gt;&lt;br /&gt;T&amp;M은 인력의 노동시간(Time)으로 비용을 지불하는 방식이다. 발주자나 인력 업체나 간단하다. 인력을 어떻게 사용할지는 발주자가 알아서 관리한다. 계약한 숫자의 인력만 제대로 공급해주면 법적인 소송의 여지도 없다. 주로 개발 앞쪽의 분석 단계에서 사용된다.  산출물에 대한 객관적인 기준을 정할 수 없는 경우에는 T&amp;M 방식이 가장 좋다.  정확하게 말하면 인력의 시간외에 실제 들어가는 장비나 물품((Material)이 포함한다.&lt;br /&gt;&lt;br /&gt;반면에 Turn-key 방식은 서로 약속한 제품을 미리 정해진 가격(Fixed Price)과 일정에 개발해 주기로 하는 것이다. 즉 한 사람이 개발하건 10명이 개발해 주건 상관할 필요가 없다. 예를 들어 책상을 주문했는데 몇 명이 만들 건 상관이 없다. 원하는 제품을 만들어 주면 되는 것이다. 자동차를 주문해도 마찬가지이다. 몇 명이 만들었는지도 모르고 알 필요도 없다. 그런 자유가 있는 반면에 책임도 크다. Turn-key 방식은 약속한 물품을 제 일정에 배달하지 못하면 당연히 피해 보상등 법적 소송의 문제가 발생한다. &lt;br /&gt;&lt;br /&gt;소송에서 시시비비를 판단하려면 제품에 대한 정확한 스펙(SRS)이 있어야만 가능하다. 정확한 스펙을 작성하는 것이 얼마나 어려운 지는 그 동안 필자가 누누히 설명했다. 정밀도의 문제와 같다. 1센티를 따지는 스펙과 1밀리미터를 따지는 스펙은 양과 질에서 차이가 난다. 소프트웨어도 홈페이지 만드는 정밀도와 금융 소프트웨어를 만드는 정밀도가 다르다. 간단한 홈페이지 프로젝트는 적당한 계약에 애자일 방법론도 좋고 주먹구구식으로 개발해도 큰 문제가 없다. 문제가 있으면 별 피해 없이 고치면 된다. 금융 소프트웨어는 1분만 다운되어도 피해보상 소송이 빗발치니 처음부터 문제 없도록 개발해야 한다.&lt;br /&gt;&lt;br /&gt;스펙에 대해서는 여러 곳에서 충분히 설명했기 때문에 여기서 생략하고 Turn-Key 계약에 스펙보다 더 핵심인 인수테스트(Acceptance Test Plan, ATP)를 추가로 소개한다. 회사마다 용어가 약간 다를 수 있으나 가장 혼란 없이 이해하는 용어인 ATP를 사용하기로 한다.&lt;br /&gt;&lt;br /&gt;위에서 말한 T&amp;M 방식의 계약에는 인력 공급 내용만 있지 산출물은 정해지지 않았기 때문에 검증할 인수 조건이 없다. 쉽게 말해 일당으로 비용이 계산되는 일용직 고급 근로자라고 보면 적절하다. 통상적으로 분석이나 설계 작업과 같이 하루에 수천불 가격인 매우 비싼 직업이다. 개발의 첫 단계에서는 계약에 명시할 스펙도 없고 인수 조건도 나올 수 없다. 이런 비싼 고급 전문가를 잘 사용하고 관리하는 것은 전적으로 발주자의 역할이다. 전문성이 높은 분석가나 아키텍트인 만큼 대부분은 발주자를 리드하고 주도해서 일을 할 수 있는 능력이 있다. 그런 능력 때문에 비싼 값을 지불한다.&lt;br /&gt;&lt;br /&gt;Turn-Key 방식의 핵심이 스펙이라고 이전에 필자가 계속 말해 왔는데 일부만 사실이다. 진짜 핵심은 인수조건이다. 인수테스트로 대표되는 인수조건이 핵심이다. 하지만 인수테스트만 가지고는 개발을 할 수 없기 때문에 개발할 내용을 설명하는 스펙이 필요한 것이지 법적인 상황에서는 스펙보다는 ATP로 시비를 가린다. 근본적으로 ATP를 통과하면 계약은 종료된 것이고 ATP 중에 하나라도 실패하면 계약이 종료되지 않은 것이다. 개발사가 폭포수 모델로 개발하건, 애자일방식으로 개발하건 반복적모델로 개발하건 상관이 없다. 100개가 넘는 시중의 개발방법론, 또 수만개는 되는 다양한 종류의 템플릿 중에 어떤 것을 사용하건 상관할 필요가 없다. 그냥 약속한 일정에 ATP를 통과한 물품을 배달하기만 하면 된다. 이상적인 상황이라면 중간에 서로 대화를 할 필요도 없다. 배달 날자까지 기다렸다가 인수를 하든지 피해보상 소송을 하든지 둘 중의 하나이다. 이 부분은 명백한 흑백논리가 적용된다. 예를 들어 ATP에 포함된 10,000개의 테스트 케이스 중에서 1개라도 실패하면 실패한 것이다. &lt;br /&gt;&lt;br /&gt;Turn-key 계약의 인수조건은 아주 명백하지만 아무나 이렇게 하기 어려운 두가지 이유가 있다. ATP에 포함되는 테스트 케이스를 만들기 어렵다. 국내에서 ATP를 이용해서 계약을 한 회사는 필자는 본 적이 없다. 대부분은 엉성한 스펙만으로도 몇 백억짜리 프로젝트도 계약 한다. 성공하면 기적이다. &lt;br /&gt;&lt;br /&gt;누가 테스트 하느냐에 따라서 ATP에 들어가는 테스트 케이스의 개수는 10배도 더 차이가 난다. 회사의 내부에서 제품도 잘 알고 늘 테스트 해 오던 사람들이 하는 경우와 외부의 인력이 테스트 할 경우에 테스트 케이스의 숫자가 10배 정도의 차이가 날 수 있다. 전혀 모르는 사람에게 스펙을 적어 줄 때도 마찬가지이다. 내부 인력이라면 10 페이지 적으면 되는 양을 외주 계약을 위해서는 100 페이지를 적어야 하는 경우가 전혀 이상한 것이 아니다.  필자에게 “스펙이나 ATP를 얼마나 자세히 적어야 됩니까?” 라는 질문을 많이 하는데 고객과 상황에 따라 다르다는 답 밖에 없다. 이런 상황에 따른 유연성이 진정한 소프트웨어 공학의 영역이다. 건강에 좋은 음식이 사람에 따라 다른 것과 마찬가지이다. 만약 누가 정형화된 답을 준다면 그것은 이론이며 가짜 소프트웨어 공학인 것이다.&lt;br /&gt;&lt;br /&gt;우여 곡절 끝에 많은 시간을 들여서 외부 사람들을 위한 방대한 ATP 테스트 케이스를 작성했다고 가정하자. 그렇다고 개발업체만 믿고 계약 마지막 날에 완성이 될 것이라고 기다리기에는 불안하다. 100만원에 1주일짜리 프로젝트라면 그렇게 해도 괜찮겠지만 100억에 1년 걸리는 프로젝트를 하는데 그렇게 할 수는 없다. 그래서 ATP는 완료 평가의 척도는 되지만 중간에 개발이 제대로 진행되는지 확인하기 위해서는 다른 방법이 필요하다. 그래서 Design Review, Integration Test, 몇 번의 Iteration등 중간 중간에  진행 상황을 검증할 수 있어야 한다. 물론 여기에서도 몇 명이 개발하는지는 중요하지 않다. 천재 1명이 개발하든 초급개발자 100명이 개발하든 그건 개발업체의 선택이다. &lt;br /&gt;&lt;br /&gt;정확한 스펙과 ATP도 없이 수행하는 Turn-key 계약은 근본적으로 거대한 위험성을 내포하고 있다. 성공할 가능성은 없다고 보면 된다. 나중에 그냥 서로 눈감고 대충 넘어가거나 소송으로 가거나 둘 중의 하나이다. 거대한 제품을 개발했는데 인수를 거절해서 소송이 벌어진 경우도 있다. 정확한 스펙과 ATP 없이 계약하려고 하니까 뭔가 안전장치를 만들어야 하고 담당자는 책임도 회피해야 하니 투입할 인력을 명시하게 된다. 더군다나 발주자가 확인할 수 있는 장소에 상주하도록 요구한다. 그러다 보니 Turn-key 계약에 액수, 일정, 인력까지 명시하는 것이다. 상식적으로 말이 안되지만 담당자가 책임을 회피하기 위해서는 가장 쉬운 방법이 인력이다. 그러니 원래 어려운 원격 개발은 이래저래 더 어렵다.&lt;br /&gt;&lt;br /&gt;그래서 T&amp;M 방식도 아니고 Turn-key 방식도 아닌 비상식적인 계약이 그동안 국내에서 멀쩡하게 사용되어 왔다. 그럴 수 밖에 없는 근본적인 원인은 스펙의 부정확성,  ATP의 부족이나 부재, 그리고 중간에 Monitoring 할 수 있는 역량이 부족하기 때문이다. 국내에서는 이런 식의 계약에도 거부감을 느끼지 못하겠지만 이런 비상식적인 계약은 소프트웨어 선진국의 정상적인 상황에서는 존재할 수 없다. 발주자인 갑의 역량부족으로 인해서 생긴 계약의 횡포일 뿐이다. 이 모든 문제를 해결하려면 ATP를 작성할 수 있는 역량이 있어야 하는데 ATP를 만들기 위해서는 정확한 스펙이 있다는 가정하에서만 가능하다.&lt;br /&gt;&lt;br /&gt;진정한 Turn-key로 계약하고 관리할 수 없는 회사에서 과연 훌륭한 소프트웨어를 만들어 낼 수 있을까? 없다고 생각한다. 전략 없는 숙련공들의 혼란스러운 개발이 될 수 밖에 없다. 스펙을 개발 도중에 변경하는 일도 빈번하고 따라서 회의나 번잡스러운 일이 많아지고 관리비용이 엄청나게 추가된다. 개발보다는 관리에 더 집중하기 쉽다. 그래서 관리를 잘해 보겠다고 또 새로운 시스템을 도입하거나 PMO니 하는 얘기가 나오는데 방향을 잘못 잡는 것이다. 합리화 하기 위한 방법으로 실리콘밸리의 영웅담 같은 얘기는 꼭 인용한다. 악순환이 계속된다. 대부분의 문제는 관리로 해결될 수 있는 문제가 아니기 때문이다. 좌절한 개발자가 중간에 사라지는 것도 늘 보는 현상이고 납기 지연은 너무 당연하다. 종종 나오는 뉴스가 알만한 큰 프로젝트들이 지연되었다는 기사이다.  &lt;br /&gt;&lt;br /&gt;국내는 인간 관계로 적당히 실패를 덮어 버릴 수 있다. 그러나 그럴 수 없는 국제간의 심각한 계약을 한다고 생각해 보면 ATP를 작성할 수 있는 역량이 없으면 T&amp;M 방식으로 계약하는 방법 밖에 없다. 글로벌 회사에서는 발주자나 개발업체나 둘 다 엉성한 Turn-key 계약은 할 수 있는 근거도 없고 그런 위험하고 무책임한 계약은 하지도 않는다.&lt;br /&gt;&lt;br /&gt;거의 모든 국내 소프트웨어 관련 소송은 이 부류에 속한다. 소송 당사자들은 국내 관행대로 했는데 왜 소송을 당했는지를 이해하지 못한다. ATP와 같은 객관적인 평가 기준이 없으니 자신들 유리한 대로 해석하고 서로 상대방만 비난한다. 개발업체는 몰상식한 악덕 발주자를 만나서 억울하다고 하고 발주자는 회사에 손해를 끼친 엉터리 개발업체라고 분에 차있다. 처음부터 사기를 치려고 하지 않았다면  대부분의 경우 둘 다 50% 씩 잘못이다. 이 모두 ATP만 있었다면 소송에 갈 필요도 없다.&lt;br /&gt;&lt;br /&gt;분할 발주, 원격 개발, 탄력있는 근무 시간등 아주 듣기 좋은 말들이다. 정부가 강제로 계약에 관련된 이런  정책을 법제화 하려고 하는 것은 좋지만 생태계가 준비되지 않은 상태에서는 더 큰 문제를 불러 올 수 있다. 근본적인 이해 없이 눈 앞의 증상만을 치료해 보고자 하는 단세포적인 정책은 또 다른 문제를 불러온다. 극히 조심해야 한다.&lt;br /&gt;&lt;br /&gt;스펙이나 ATP 작성 역량은 계약을 위한 역량뿐은 아니고 소프트웨어를 제대로 개발하기 위해 꼭 필요한 역량이다. 이런 기초 체력 없이 소프트웨어 강국이 되려는 생각은 허황된 망상에 불과하다. 그냥 국내에서 국내 고객을 위해 국내용 소프트웨어를 개발하는 정도로 만족해야 한다. 그것도 하나의 훌륭한 성공이다. 많은 시간과 경험이 필요한 이런 역량을 교육으로 해결하겠다는 생각을 하는 사람들도 많이 봤는데 태권도를 이론 교육으로 가르치려는 것과 같다. 이는 학교에서는 절대 가르칠 수 없는 현실의 문제이고 바로 진정한 소프트웨어 공학 역량이다.&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/1248765825541946280/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=1248765825541946280' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1248765825541946280'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1248765825541946280'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2019/01/10-outsourcing.html' title='분석 #10. 잘못된 국내 Outsourcing 계약 방식과 글로벌 계약 방식'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-1701372106707851450</id><published>2018-11-10T02:27:00.002-08:00</published><updated>2018-11-15T03:29:37.283-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Outsourcing"/><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><category scheme="http://www.blogger.com/atom/ns#" term="영어"/><title type='text'>분석 #9. 글로벌 SW Outsourcing 시장, 분석과 영어 역량</title><content type='html'>&lt;br /&gt;필자가 15년 전에 &quot;대한민국에는 소프트웨어가 없다&quot; 라는 책을 썼다. 그동안 여기저기 사람들을 만나다 보면 &quot;지금은 소프트웨어가 있습니까?&quot; 하고 나에게 물어본다. 변한 것이 없다고 대답한다. 마치 엄청난 발전을 이룬 것 같지만 잘 보면 하나도 잘 된 것이 없다. 마치 &quot;15년 전보다 세상이 행복해 졌습니까?&quot; 라고 묻는 것과 같다.  문명은 엄청난 발전을 했지만 정신적인 행복은 변한 것이 없다. 아마 더 불행해 졌을지도 모른다. SW도 마찬가지이다. 수 많은 새로운 도구와 기술이 생겨났지만 그런 것은 이 세상 누구나가 다 사용하는 것이다. 즉 경쟁력에서 도움이 되지도 않고 그냥 모든 사람들에게 편리한 도구가 생긴 것 뿐이다. 그런 것을 사용한다고 더 경쟁력이 생기는 것도 아니고 당연히 때에 따라 편리하니까 사용하는 것일 뿐이다. 유행에 따라 잠깐 생겼다가 없어지는 것이 대부분이다. 동서고금을 통해 진짜 중요한 도구들은 이미 필자가 경험한 40년 전부터 존재해 왔다. 예를 들어 소스코드관리 시스템이나 이슈관리 시스템 같은 것이다. 많은 진화를 거듭해서 편리한 점이 많아 졌지만 그 사상에는 큰 차이는 없다. Git이나 Jira가 없었던 과거에도 다른 도구들이 있어 왔고 똑같이 사용해 왔다. 글로벌 대기업들은 내부적으로 그런 도구들을 자체 개발해서 사용하기도 한다. 하지만 사상은 변하지 않았다.&lt;br /&gt;&lt;br /&gt;SW 역량을 평가할 때 여러가지 관점이 있지만 여기서는 SW Outsourcing 중에서도 SW 개발 Outsourcing 역량에 대해서 얘기하기로 한다. SW 개발 Outsourcing,은 국내에서는 소프트웨어 개발의 약 70%를 차지한다는 통계가 있다. 30%는 자체 제품이나 인프라 개발이다. 그 만큼 무시할 수 없는 비중을 차지하고 있기도 하고 SW 산업이 3D 업종이라고 불리는 중요한 원인이기도 하다. SW에서 생기는 모든 문제는 결국은 분석역량이 최초의 원인으로 도달하게 된다. 그 다음은 설계 역량이 중요할 텐데 궁금해 하는 사람들을 위해 숫자로 표현하자면 분석에 비해 1/10 정도의 중요성이다. 숫자는 상징적인 의미를 위해 사용했지 컨설팅업체라면 만들어 내는 재주가 있을지 모르지만 어디에도 이런 근거는 있을 수 없다. 그러니 설계를 귀신같이 한다고 해도 10% 밖에 안되는 것을 잘하는 것이다. 난이도도 1/10 정도이다. 바둑을 두는데 프로가 되는 것이 아마추어의 최고가 되는 것과는 열 배 이상 더 어렵다. 분석을 잘하는 것과 설계를 잘하는 것은 프로와 아마추어의 관계라고 비교할 수 있다. &lt;br /&gt;&lt;br /&gt;전세계 SW 개발 Outsourcing business는 몇십년 전부터 cross-border라고 국가의 경계를 넘어 진행되어 왔다. 거리가 먼 나라인 경우 Offshore, 몇시간 정도 거리를 near-shore, 바다를 넘어기지 않고 가까운 경우 on-shore라고 부르기도 한다. 현재 전 세계 SW 개발 Outsourcing business에서 인도와 베트남이 가장 중요한 나라이다. 인도는 미국에게서 배웠고 베트남은 인도에게 배워서 따라 하는 상황이기 때문에 베트남이 인도에 비해 10년 이상은 뒤떨어져 있다고 본다. TCS나 Wipro같은 인도의 글로벌 Outsourcing회사는 인건비도 비싸지만 이제는 지저분한 고객과는 상대를 하지 않는다. 그런 인도 회사들이 떠나는 자리를 베트남이 메꾸기 시작해 결과적으로 인도와 베트남이 이제는 전 세계 Outsourcing 시장의 양대 산맥이 되었다.&lt;br /&gt;&lt;br /&gt;인터넷에서 &quot;Software Outsourcing India&quot;, &quot;Software outsourcing Vietnam&quot;과 &quot;Software Outsourcing Korea&quot;로 비교해 보기 바란다. 국내 SW의 70%를 차지한다고 하는 국내 개발 회사들은 글로벌에는 존재가 전무하다. 반대로 Vietnam에 관한 자료는 연구논문이 있을 정도로 수를 셀수 없이 많다. 베트남에서 가장 큰 SW 회사라고 하면 FPT Software인데 개발인력만 만명이 넘는다. 고객의 대부분이 미국, 일본, 유럽의 글로벌 회사들이다. FPT 이외에도 규모는 작지만 수천명의 개발인력을 가진 회사들이 수십개가 넘는다. 제조업이 많지 않은 베트남의 국내 사정상 국내 고객은 극히 적다. 모두 처음부터 외국의 고객들을 대상으로 생겨났다. 글로벌 회사들을 상대로 10년 이상을 개발해 왔기 때문에 엄청난 기술과 함께 소프트웨어 공학 역량도 축적이 되었다. 베트남의 중요한 외화벌이 산업이기도 한다.&lt;br /&gt;&lt;br /&gt;위에서 말한 인도의 회사들이 피하는 &quot;지저분한 고객&quot;은 바로 주먹구구식으로 계약을 하는 회사들이다. &quot;주먹구구식&quot;과 똑같은 단어가 &quot;분석역량이 없다&quot;는 것이다. 국내 회사가 10페이지 짜리 스펙을 적을 때 글로벌 회사들은 100페이지 짜리 스펙을 적는다. 그런 두 회사가 계약을 하거나 파트너십을 얘기할 때 잘 되지 않을 것은 너무 당연하다. 프로와 아마추어의 차이이다. 프로는 프로를 찾아서 놀기 마련이다. 그래서 인도의 회사들이 국내 회사들을 상대하지 않는 이유이기도 하다. 그런 국내 회사들을 베트남 회사들은 지금은 기꺼이 고객으로 상대해 준다. 워낙 인건비가 저렴하니 위험을 감수해도 이익을 창출할 수 있다고 생각한다. 소위 갑질이라고 하는 &quot;고객의 사양 변경하기&quot;를 당해도 자존심 버리고 저비용으로 버틸 수 있다. 자존심이 없거나 몰라서 당하는 것이 아니다. 하지만 인건비 비싸고 마진이 작은 국내 SI 회사들은 버티기 어렵다. &lt;br /&gt;&lt;br /&gt;베트남의 Outsourcing 회사들은 미국, 일본, 유럽의 고객들과 경험이 있기 때문에 당연히 국내 회사들의 차이와 문제점을 잘 알고 있다. 또 베트남이 글로벌시장에서 성공할 수 있었던 가장 중요한 이유중의 하나가 영어 역량이다. 내가 만났던 베트남회사의 모든 임원들은 영어를 실리콘밸리에서 만나서 회의하는 것과 같은 정도로 편안하게 구사한다. FPT Software의 경우 모든 직원들이 email과 문서는 영어로 적는 것으로 규정하고 있다. 또 일년에 한 번씩 모든 임직원이 예외 없이 TOEIC 시험을 봐서 점수를 공개한다. 또 FPT가 설립한 베트남의 최고 기술대학 중의 하나인 FPT University의 입학 조건이 TOEIC 800점이다. 국내에서 직원의 TOEIC 평균이 800 점을 넘는 회사는 아마 한두 군데 뿐일 것이다. 일본의 대기업들도 영어만 사용하도록 규정을 바꾼 회사들이 점점 더 많이 생기고 있다. 일본의 최대 인터넷 쇼핑몰 회사인 라쿠텐이 2010년에 회사의 공식 내부 언어는 영어로 한다고 해서 직원들을 쇼크상태로 몰아가기도 했다. 하지만 지금은 감사해 하는 직원들이 많다. 언어에 관한 한 가장 폐쇄적인 나라였던 일본 회사들도 글로벌 환경에 적응하기 위해 그만큼 변하고 있다.&lt;br /&gt;&lt;br /&gt;베트남의 소프트웨어 산업은 이런 소프트웨어 공학과 영어의 역량을 기반으로 글로벌 회사들과 같이 일을 하면서 빠르게 성장하고 있다. 반면에 국내의 상황은 암울하다. 앞으로 10년이 지나도 오늘 현재 베트남이 글로벌에서 가지고 있는 수준을 넘어가지 못할 것이다. 그냥 국내용 숙련공들만 많이 생기는 생태계이다. 필자가 볼 때 20년 전의 상황이나 지금 상황이나 소프트웨어공학 역량이나 영어역량은 변한 것이 없다. 그냥 보호무역적이고 폐쇄적인 상황에서 국내용으로 안주해 왔을 뿐이다. 국내의 온라인 쇼핑몰 중에 외국인이 구매할 수 있는 곳은 없다. 필자가 늘 얘기하듯이 국내에서만 살아가겠다면 식당을 하든, 술집을 하든, 소프트웨어 회사를 하든 참견할 일은 아니다. 하지만 식당을 열어 놓고 외국고객을 상대로 장사를 하겠다고 주장한다면 변해야 한다.&lt;br /&gt;&lt;br /&gt;지난 20년 이상 그랬듯이 지금도 국내에서 정부, 산업계, 학계, 연구소에서 수 많은 탁상공론들이 얘기되고 있다. 아직도 무엇이 핵심인지도 모르고 이론과 용어만 가지고 메뉴만 바꾼 시행착오를 하고 있다. 진정한 분석이 무엇인지 본 적도 없으니 100페이지를 10페이지로 적고 껍데기에 불과한 방법론이나 운운하며 자아도취에 빠져서는 앞으로 영원히 발전할 수도 없고 베트남에게도 점점 더 뒤떨어 질 것이다. 세계에 내 세울만한 소프트웨어는 하나도 없고 외국 대학 수업의 숙제 수준의 소프트웨어를 만들어 정부 보조금 받아 생존하며 자화자찬 하면서 세계적인 소프트웨어를 만들었다고 주장하는 상황이 20년 전이나 신기할 정도로 전혀 변한 것이 없다. 마치 데자뷰를 보는 것 같다. 베트남이 많은 글로벌 회사들을 고객으로 개발을 하면서 성장했다는 사실도 모르는 우물안 개구리로 살고 있다. 자아도취와 자화자찬이 현재의 국내 상황이다. 그러면서 글로벌 흉내를 낸다고 국내 실정에 맞지도 않는 것을 따라 하려고 하는 것도 20년 동안 전혀 변하지 않았다. 바로 &quot;아니면 말고&quot;이다. 장님 코끼리 만지듯 주워들은 실리콘밸리의 영웅담 얘기는 모든 사람이 빼놓지 않고 한다. 서울 안가본 사람이 서울을 더 잘아는 척하는 얘기와 같다.&lt;br /&gt;&lt;br /&gt;차라리 가짜 소프트웨어 공학으로 그동안 시행착오 했을 동안에 영어공부라도 했으면 국내 사이트의 가짜 정보 대신에 글로벌 사이트에서 영어로 된 정보를 접하는 것이 더 좋았을 수도 있다. 소프트웨어 개발은 단순하다. 분석-&gt;설계-&gt;구현-&gt;테스트 이다. 하지만 단순하지만 어렵다. 노래를 잘하려면 음정과 박자를 맞추면 된다는 것과 비슷하다. 단순하지만 혼자서 배우기는 어렵다. 누군가에게 배워야 한다. 철학자인 니체가 &quot;세상에는 진짜보다 가짜가 더 많다&quot;라고 했다. 국내에서 진짜를 거의 찾아보기 힘든 분야가 소프트웨어 공학분야이다. &lt;br /&gt;&lt;br /&gt;적어도 20년 이상을 이런 생태계로 지내면서 이해 집단도 많아져 진짜가 살아가기 어려운 생태계가 되어버렸다. 먼저 개발자들이 더 이상 속아 넘어가지 않는 것이 중요하다. 그러는 순간 길이 보이기 시작할 것이다. 적어도 20년 이상을 반복해 온 역사에서 배울 것이 있다. 또 &quot;촘스키처럼 생각하는 법&quot;이라는 책에서 말하는 것 처럼 남에게 이용 당하지 않으려면 가짜로부터의 지적인 자기방어가 필요하다.&lt;br /&gt;&lt;br /&gt;필자의 경우에도 이제는 웬만하면 베트남 개발 인력을 사용하려고 하고 있다. 베트남이 SW Outsourcing에서 성공할 수 있었던 이유는 도메인 지식도 아니고 영어를 기반으로 인도에게서 배운 소프트웨어 공학 역량이었다.  그 중에서도 계약을 가능하게 하는 것은 바로 분석 역량이다. 혹은 Software Requirements Specification(스펙)을 작성할 수 있는 능력이다. 인도는 똑같이 미국에게서 배웠다. 베트남에게서 배워야 한다는 것을 인정하기 힘들겠지만 너무 수준 차이가 나는 미국이나 인도보다도 베트남에게서 배울 점이 있다는 것을 쉽게 인지할 수 있다.&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/1701372106707851450/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=1701372106707851450' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1701372106707851450'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1701372106707851450'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2018/11/9-sw-outsourcing.html' title='분석 #9. 글로벌 SW Outsourcing 시장, 분석과 영어 역량'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-3685153110562518880</id><published>2017-07-15T02:13:00.000-07:00</published><updated>2017-07-16T22:19:29.732-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="방법론"/><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><title type='text'>분석 #8 애자일은 죽었다</title><content type='html'>&quot;애자일&quot;이라고 하면 국내 소프트웨어 업계에서는 보통 &quot;스크럼&quot;으로 알고 있다. 여기서 스크럼을 자세히 설명하는 것은 의미가 없고 대충 설명하자면 10명 정도의 한 팀에서 스프린트라고 불리는 2주일 개발주기로 개발하면서 매일 아침 서서 회의를 한다는 것이다. 필자는 이 말을 듣고 농담하는줄 알았다고 책에서 적은 적이 있다.&lt;br /&gt;&lt;br /&gt;하여튼 형식과 체계를 싫어하는 자유로운 영혼의 개발자들에게는 무척 희소식이다. 어차피 아무런 체계없이 주먹구구식으로 계속 개발할 수는 없다. 명분도 없고 어딘가 찜찜할 수 밖에 없다. 그런 와중에 아주 쉽게 적용할 수 있는 애자일이라는 방법이 있으니 반가울 수 밖에 없다. 이제는 자랑스럽게 방법론에 의해서 개발을 하고 있다고 말할 수가 있게 되었다. 일단 주먹구구식에서 벗어났다고는 할 수 있다. 그 길이 옳은지 아닌지는 별개의 문제이다.&lt;br /&gt;&lt;br /&gt;&quot;애자일&quot;은 추상적인 단어이고 그 종류가 많지만 이 글에서는 애자일이라는 단어를 방법론 중에서 가장 자유로운 스크럼 방법론이라고 가정하고 진행한다. 그 반대 극단은 한번 결정한 것을 변경하지 않는다는 가장 엄격한 방법론인 폭포수모델이다. 요구사항의 변경을 수용하기 위한 반복적인 개발모델의 필요성이 의논된 것은 소프트웨어의 탄생 얼마 후인 1957년이었다. 지금부터 60년 전이다. 그리고 폭포수모델의 병폐와 애자일 방법론의 필요성에 대한 본격적인 논쟁은 거의 30년 전인 1990년에 출간된 &quot;Wicked Problems and Righteous Solution&quot; 이라는 책에서 벌어졌다. 마치 애자일방법론이라는 비법을 최근에 발견한 것 처럼 착각하는데 스크럼이 탄생한 1995년에도 애자일은 이미 퀘퀘묵은 논쟁이었다. 폭포수모델이 필요한 곳에서는 폭포수모델을 계속 사용할테고 절대 폭포수모델을 사용하지 않는 곳도 있고 너무 당연한 종교적인 논쟁일 뿐이다. 중요한 것은 어떤 방법론이 우리가 개발하는 제품에 적당할 것인가이다. &lt;br /&gt;&lt;br /&gt;필자가 실리콘밸리에서 20년 동안 사용한 방법론은 방위산업체에서의 수년간의 폭포수모델과 그 나머지는 애자일 방법론이었다. 물론 애자일이라는 용어가 생겨나기도 전이었기 때문에 스크럼은 당연히 아니고 &quot;빨리 개발하는 방법론&quot; 이라는 의미에서의 애자일방법론이다. 회사마다 빨리 개발하는 방법이 다 달랐다. 당연할 수 밖에 없다. 프로젝트가 다른데 폭포수나 스크럼이 만병통치약이 안되듯이 한 가지 방법론으로 다 통할 수가 없다. 경직도로 봤을 때 폭포수와 애자일 중간에는 수십개의 알려졌던 방법론이 있고 비공식적으로는 회사마다 다른 수만개의 방법론이 있다.&lt;br /&gt;&lt;br /&gt;애자일의 공식적인 생애는 1995년 ~ 2014년까지 20년이다. 그래도 다른 방법론에 비하면 오래 생존한 편이다. 애자일을 창시한 사람들이 애자일은 잘못되었다고 선언했다. 인터넷에서 &#39;Agile is dead&quot;를 검색하면 많은 기사들이 많이 나온다. 그렇다고 애자일을 창시한 사람들이 소프트웨어 개발의 근본 원칙을 부정한 것이 아니라 간단한 규칙을 만들어 준 것이었다. 그 규칙을 누가 어떻게 해석하고 이용하는 가에 따라 좋은 것이 될 수도 있고 나쁜 것이 될 수도 있는데 대부분은 애자일을 만든 사람의 의도와는 다르게 사용되었기 때문에 실패했다고 공식적으로 선언한 것이다. 수 많은 방법론의 역사에서 보면 심각한 일도 아니고 하나의 해프닝으로 볼 수 있다.&lt;br /&gt;&lt;br /&gt;결국 애자일이 되었던 폭포수가 되었던 수 많은 실리콘밸리회사들이 사용하는 방법론의 원칙을 이해하는 것이 중요하다. 그 진리는 분석, 설계, 구현이다. 이 단계를 잘 이해하고 적용하는 것이 중요하지 방법론의 규칙이 중요한 것이 아니다. 어차피 극히 소수만 사용하는 폭포수방법론이 아닌 경우에는 모두 반복적인 방법론이다. 이미 몇십년 전에 공식적으로 반복적인 방법론이 나왔기 때문에 새로운 것이 아니다. 스크럼이 하나의 방법론으로 눈에 띄기 위해서는 어떤 매력적인 규칙을 정해야 하는데 그 중에  하나가 2주 주기 개발이다. 기존의 방법론과 차별화가 안되니 2주를 강조했다. 거기에다가 Sprint라고 멋진 이름을 붙였다. 또 Daily Standing Meeting이라는 용어를 만들어 냈다. 앉아서 회의를 하면 기존의 방식과 전혀 다를 것이 없으니까 일어서서해야 한다는 것을 강조했다. 결국 스크럼방법론은 이미 기존의 회사들이 하고 있었던 방법과 별로 다를 것이 없는 것이다. 새로운 것도 아니고 나쁜 것도 아니다. 마케팅의 성공일 뿐이다. 그 덕택에 20년간 인기를 누리면서 혜택을 받은 사람들이 있었다.&lt;br /&gt;&lt;br /&gt;지금도 어떤 프로젝트에서는 폭포수가 적절할 수도 있고 스크럼이 적절할 수도 있다. 그럼 분석이라는 측면에서 보면 어떤 것이 더 적당할까? 완벽을 추구하는 폭포수나 2주일 만의 기능을 명시하는 스크럼이나 필자가 볼때는 대부분의 프로젝트에서는 적절하지 않다. 그럼 무슨 방법론이 적절할까? 방법론을 찾아서 떠도는 순간 영원히 방법론을 찾지 못할 것이다. 왜냐하면 그런 방법론은 없기 때문이다. 마치 나에게 가장 좋은 음식이 무엇일까를 찾는 것과 같다. 좋은 음식이 사람마다 다른 것 같이 프로젝트마다 다르다. 한 회사 안에서도 프로젝트 마다 다르다. 하나의 틀에 억매이지 않고 원칙을 알고 잘 응용하는 것이 중요하다.&lt;br /&gt;&lt;br /&gt;소프트웨어는 외부 고객이건 내부 고객이건 혹은 자기 자신이건 누군가의 요구에 의해서 개발하는 것이다. 이런 고객요구사항이 변하는 것은 소프트웨어 탄생부터 있어 왔던 변하지 않는 현상이다. 이 현상 때문에 폭포수가 잘못되었다고 말할 수는 없다. 그런 환경까지 고려해서 만들어진 것이 폭포수이기 때문이다. 핵심은 고객요구사항이 변하는 상황에서 컨트롤할 수 있어야 한다는 것이다. 그 방법이 한번에 완벽히 작성해서 확인하는 방법일 수도 있고 매일 고객과 물어보면서 작성할 수도 있고 2주일에 한번씩 보여주면서 얘기할 수도 있다.  같은 프로젝트 안에서도 어떤 경우는 매일 의논이 필요하고 어떤 경우는 1달 동안 얘기할 필요가 없는 경우도 있다. 현실에서 벌어지는 모든 프로젝트는 비규칙적이고 반복적인 협의를 필요로 한다. &lt;br /&gt;&lt;br /&gt;결국 모든 방법론의 형식은 항상 변화해 왔지만 그 내용이 중요하다. 어떤 방법론에서도 결국 성공하려면 코딩을 잘 해야 하는 것처럼 설계도 잘 해야하고 분석도 잘 해야 한다.  &quot;잘&quot; 이라는 용어가 &quot;완벽하게&quot;를 의미하지도 않고 &quot;2주일마다&quot;를 의미하지도 않는다. &lt;br /&gt;&lt;br /&gt;드디어 가장 중요한 결론이 나온다. 자연의 불변하는 진리인 열역학 제2의 법칙은 &quot;자연계에서 자발적인 진화방향은 혼란도(엔트로피)가 증가하는 방향으로 진화한다&quot;는 것이다. 즉 열은 뜨거운 곳에서 낮은 곳으로 흐르고 흐르고 반대방향은 일어나지 않는다. 이를 비가역성이라고 한다. 최초에 열을 높은 곳으로 올려 놓는 것은 자연적이 아니라 인위적으로 해야 한다. 폭포수가 가장 안정된 상태이고 주먹구구식이 가장 엔트로피가 높은 상태이다. 자신이 최초에 원하는 수준에 가려면 그 수준을 가진 회사에 가서 배워야 한다. 폭포수를 해 본 사람은 그 아래의 어떤 방법론도 응용해서 할 수가 있다. 할 수 있는 것을 안하는 선택만 하면 된다. 하지만 애자일만 해 본 사람은 폭포수를 절대 할 수가 없다. 해 본 적이 없는 것을 할 수는 없다. 혼란한 곳에서 안정된 곳으로 갈 수 없는 자연의 진리 때문이다.&lt;br /&gt;&lt;br /&gt;모든 규칙을 다 터득한 사람은 모든 규칙에서 벗어나 완전한 자유를 누릴 수 있다. 어려운 육체적인 고통의 수행을 거쳐 진리를 깨달은 사람을 해탈했다고 하는 것이 혼란하지 않은 마음의 안정을 얻었기 때문이다. 엔트로피가 가장 낮은 안정된 상태를 만드는 것은 어려울 수 밖에 없고 그래서 가치가 있다. 엔트로피가 가장 높은 방법론인 애자일을 배웠다면 움직일 수 있는 선택의 폭은 그 보다 다 자유로운 주먹구구식방법 밖에 없다. 물은 절대로 거꾸로 흐리지 않는다. 누가 인위적으로 올려다 주기 전에는 아래로만 갈 수 있다.&lt;br /&gt;&lt;br /&gt;어떤 프로젝트에도 응용할 수 있는 방법론을 배우려면 가장 엔트로피가 낮은 폭포수모델을 배우는 것이다. 이런 방식이 미국의 60여년의 소프트웨어 역사가 지나온 방향이다. 그렇기 때문에 실리콘밸리에는 다양한 엔트로피를 가진 회사들이 다 존재하고 자신이 일했던 회사보다 엔트로피가 높은 프로젝트는 모두 일할 수 있다. 반면에 한국에는 엔트로피가 안정된 회사들이 없다. 내용은 없고 형식만 흉내내는 혼란스러운 회사가 있을 뿐이다. &lt;br /&gt;&lt;br /&gt;소프트웨어 개발을 잘 하기 위해 애자일방법론이 전혀  중요한 것도 아니고 가치도 제한적이라는 것을 이해하는 것이 미래 발전을 위한 첫 걸음이다. 지금 나에게 적절하다고 확신한다면 사용하면 된다. 하지만 맹목적으로 사용하는 것은 파괴적이라고 애자일의 창시자들이 말을 하니 &quot;해봐서 손해 볼 것 없다&quot;는 생각은 금물이다. 엄청난 기회비용을 상실하게 되니 신중하게 결정할 일이다. &lt;br /&gt;&lt;br /&gt;애자일로 인해 역사가 되풀이 된다는 것도 알게 되었고 유행에 민감한 국내 개발 환경이 잘못된 리더들에 의해 핵심을 놓치고 미신에 빠져 국내 소프트웨어 발전에 큰 피해가 올 수 있다는 것은 항상 조심할 일이다.&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/3685153110562518880/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=3685153110562518880' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/3685153110562518880'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/3685153110562518880'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2017/07/8.html' title='분석 #8 애자일은 죽었다'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-5599343571529481425</id><published>2016-07-31T02:28:00.001-07:00</published><updated>2016-07-31T02:36:17.582-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="문화/조직/회사"/><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석 #7 회사가 문제다 - Monotasker 와 Multitasker</title><content type='html'>&lt;br /&gt;&lt;br /&gt;SW는 인류 역사상 가장 복잡한 지식산업이다. 반대로 말하면 노동산업적인 요소가 가장 적다는 것이다. 지식산업의 특성상 인해전술이나 열정만으로는 성공하기 어렵다는 것이 문제이다. 한국회사의 경영관리체계는 과거의 노동산업적인 요소가 뿌리깊게 내려 있고 이는 한국 소프트웨어 발전의 가장 큰 장애물이다.  &lt;br /&gt;&lt;br /&gt;얼마 전에 삼성전자가 &quot;삼성 소프트웨어 경쟁력 백서&quot; 라는 프로그램에서 자사의 역량을 평가했다. “자사의 SW 개발자 중에서 구글의 SW 개발자 역량을 가진 사람이 1-2% 밖에 안 된다”는 내용과  &quot;30층 짜리 건물을 지어야 하는데 삼성은 지금 초가집 짓는 수준이다.&quot;  라는 놀랄만한 내용이지만 사실이다. 10여년 전에 “대한민국에는 소프트웨어가 없다” 라는 책을 발간했고 지금도 상황이 전혀 변하지 않았다는 필자의 생각과 정확하게 일치한다. 이는 전문성 위주인 미국 SW 회사와 달리 관리 중심인 한국 SW 회사의 필연적인 결과이다. 그런데 이 문제는 증상이 개발자의 역량에서 나타났을 뿐 개발자의 잘못이 아니고 전적으로 회사와 경영진의 책임이다.&lt;br /&gt;&lt;br /&gt;지금까지는 막연하게 SW 선진국과의 형상 비교만으로 근거 없이 한국 SW회사의 관리자나 경영진의 문제점을 지적하고 비판하는 내용이 많았는데 과학적인 근거가 나왔다. 스탠포드 대학에서 연구한 결과인데 다중작업자(Multitasker) 와 단일작업자(Monotasker) 의 차이점에 대한 연구이다. 다중작업자는 여러 가지 일을 동시에 하는 사람을 말하고 단일작업자는 한가지 일을 집중해서 하는 사람을 말한다. 다중작업자들은 자신이 다른 사람들을 인터럽트 하기도 하고 자신도 인터럽트를 당한다. MRI 조사 결과 다중작업자는 다른 일이 끼어들 때마다 흥분과 쾌락의 호르몬인 도파민이 나오고 그 쾌락에 서서히 중독되어 간다는 것이다. 중독이 심해지면서 간섭 받기를 즐기며 또 기다린다. 더 놀라운 결과는 그렇게 중독이 되면 뇌세포가 손상을 입고 IQ가 낮아져 다시는 단일작업자로 다시는 돌아갈 수 없는 불치의 상태가 된다. 결국은 간섭하고 간섭 받는 것을 즐기다 보면 집중력이 필요한 일을 하는 전문 능력은 영원히 없어진다. &lt;br /&gt;&lt;br /&gt;한국회사의 임원이나 관리자는 하루 종일 수 많은 회의와 보고에 시간을 보내는 전형적인 다중작업자들이다. 또 개발자도 경력이 몇 년만 되면 팀장과 같은 관리 업무를 하게 된다. 이는 다중작업자가 되기 시작하는 출발점이다. 어차피 관리자들은 이미 전문 능력이 없어진 다중작업자이기 때문에 다중작업자가 되어도 상관이 없다. 하지만 개발자들은 한 번 관리를 하게 되면 영원히 개발 전문가로 되돌아 오기 힘들다. 도파민과 권력욕의 쾌락에 빠져 회사생활을 즐기며 산다. 여기까지는 문제가 없다. 어차피 관리자도 필요하기 때문이다. 하지만 관리자들의 본연의 업무가 전문가들이 제대로 전문가의 길로 갈 수 있게 환경을 만드는 일이며 다행히도 그런 작업에는 집중력이 필요하지 않다. 하지만 그런 본연의 업무보다는 표면적인 지식으로 전문성 있는 일에 쓸데없는 간섭을 하고 잘못된 결정을 내리는 것이 한국 관리자의 고질적인 문제이며 개발자들의 의욕을 감소시킨다.&lt;br /&gt;&lt;br /&gt;지식산업인 SW 개발은 집중이 필요하다. 특히 초기단계인 분석과 설계 단계는 고도의 집중력을 필요로 한다. 이미 오래 전에 SW 개발자가 가장 많이 보는 블로그를 가지고 있고 마이크로소프트의 엑셀팀장이기도 했던 Joel Spolsky가 자신의 책에서 얘기 했다. 한 번 전화로 인터럽트를 당하면 다시 집중하기까지 30분의 시간이 소요된다고 했다. 모차르트가 음악을 작곡할 때나 작가가 글을 쓸 때  30분 마다 전화가 온다면 일을 제대로 할 수 없다. 바둑에서도 수를 읽고 있는 중에 누가 말을 걸면 처음부터 다시 시작해야 한다. 전체를 보는 일체성이 중요하기 때문이다. 그래서 버클리대의 전산학과 교수가 자기는 프로그래밍을 할 때 휴대폰, 이메일, 메신저 등 모든 통신수단을 다 꺼놓는다고 한다. 학생들에게도 수업시간에 학생들 자신을 위해 휴대폰을 꺼놓으라고 지시한다. 필자도 일주일에 이틀 정도는 아무에게도 간섭 받지 않는 조용한 환경에서 일을 하도록 노력한다. 나의 전문성을 지속적으로 유지할 수 있는 최소한의 귀중한 시간이다. &lt;br /&gt;&lt;br /&gt;반면에 삽질, 망치질과 같은 단순 노동작업 일은 중간에 인터럽트를 당해도 다시 시작하는 데 문제가 없다. 일체성과 연속성이 없기 때문이다. 그래서 개발 중에 인터럽트의 영향이 가장 심각한 부분이 분석이고 그 다음이 설계이다. 가장 영향을 적게 받는 부분이 코딩이다. 코딩 단계는 국지적이고 설계한 결과가 있기 때문에 언제든지 코딩이 중단되어도 다시 시작하는 데 문제가 없다. 이런 얘기를 하면 코딩을 우습게 본다고 반론을 제기하는 국내 개발자들이 많은데 그 이유는 분석과 설계 없이 코딩을 하기 때문이다. 혹은 애자일 방법론을 잘못 이해하고 생각 없이 코딩으로 뛰어들어가는 애자일을 빙자한 무모한 방식이기 때문이다. 애자일의 미신 문화에 대해서는 다음에 자세히 얘기하겠지만 분석, 설계, 그리고 코딩을 동시에 하고 있다면 어려울 수 밖에 없다. &lt;br /&gt;&lt;br /&gt;참고로 필자는 개발 시에 분석과 설계에 비해 코딩 단계에 극히 일부분의 시간만을 소비한다. 이는 1시간 짜리 프로젝트나 1일 프로젝트나 1개월짜리 프로젝트나 같다. 코딩은 거의 타이핑하는 수준이다. 그러니 단순한 오타 외에는 고칠 것도 없다. 코드를 적으면서 설계를 하는 것은 공사를 먼저 시작하고 빌딩 디자인을 하는 것과 같다. 이러한 방식은 개 집 만들 때나 가능한 방식이다. 모차르트가 작곡할 때 악보에 고친 흔적이 없다는 전설적인 얘기도 같은 맥락이다. 분석이 가장 극단적인 지식산업이고 코딩은 가장 노동 산업에 가깝다. 그 중간에 설계단계가 있다. &quot;분석&quot;은 모든 요소를 한번에 다 고려해서 일체성 있게 생각을 해야 하기 어렵다. 머리가 복잡해져서 아파오기 시작해도 중지할 수가 없다. 그만 두면 어차피 처음부터 다시 시작해야 하기 때문이다. 그래서 여러 명이 할 수 도 없다. 여러 명이 나누어서 할 수 있는 일은 노동산업 쪽에 가깝다.&lt;br /&gt;&lt;br /&gt;번잡하게 일하면 열심히 일하는 것처럼 인정을 받는 한국 회사에서는 점점 더 많은 인터럽트가 발생하게 된다.  미국회사에서는 심지어 관리자마저도 자기 시간의 50% 이상 회의를 하고 있으면 도대체 언제 일하냐고 농담의 대상이 되는데 한국은 거의 80 - 90% 를 회의로 보낸다. 대부분이 계획과 분석 없이 정리가 되지 않은 상태에서 다중작업으로 인해 뇌 손상이 되고 기억력이 감퇴되니 묻고 또 묻고 하는 중복적인 보고가 벌어진다. 전문성이 없으니 근무 시간이 고과 평가에서 중요시 될 수 밖에 없다. &quot;넓고 얕은 지식&quot; 으로 무장한 한국의 관리자나 경영진들이 전문성이 없기 때문에 평가도 제대로 하지 못하는 상황에서 필연적인 결과이다. 소프트웨어 용어나 표면 지식으로는 전 세계의 어느 누구한테도 뒤지지 않는 것이 한국의 관리자나 경영진들이다. 용어에 관한 한은 박사 수준이다. 지식으로는 모를 것이 없겠지만 선수나 코치가 될 수 있는 것은 아니다. 그냥 관중 수준일 뿐이다. CTO라는 명함을 가지고 있어도 마찬가지다.&lt;br /&gt;&lt;br /&gt;한국이 자랑하는 인천대교와 영종대교의 핵심 설계를 한국이 하지 못하고 일본의 조다이(長大)라는 업체가 맡았다. 한국의 토목 설계 전문가는 &quot;이 회사의 하마지라는 기술자 한 명이 보유한 경험과 기술이 우리나라 교량 설계업체 전체를 합친 것 이상이라고 해도 과언이 아닐 것&quot;이라고 했다. 이런 고부가가치 전문가는 다중작업자 환경에서는 절대 나올 수 없다. 그래서 페이스북의 창업자인 주커버그가 &quot;개발자 한 명이 백 명보다 가치가 있다&quot;라고 했다.&lt;br /&gt;&lt;br /&gt;한국 회사의 근무환경은 수 많은 회의와 보고로 인해 단일작업자의 환경이 원천적으로 불가능하고 당연히 전문가는 나오기 어렵다. 그래서 한국 회사에서는 40세가 넘으면 연구결과대로 뇌가 손상을 입고 전문성 역량은 없어져 감원 우선순위가 되는 반면에 단일작업자인 실리콘밸리의 SW 개발자는 40세가 넘으면 회사의 핵심 인력이 된다. 회사에서의 감원 대상은 도파민에 중독된 &quot;넓고 얕은 지식&quot;의 다중작업자이다. 그렇게 된 데는 다중작업 환경을 만든 회사의 시스템과 그런 시스템을 만든 경영진이 전적으로 책임을 져야 한다. 실리콘밸리와 같이 백발이 성성한 개발자인 전문가가 존재하고 그들의 의견을 존중하고 전적으로 따르는 관리자들의 문화와는 전혀 다른 한국회사의 문화는 SW와 같은 극단적인 지식산업과는 궁합이 맞지 않는다.&lt;br /&gt;&lt;br /&gt;조용한 환경에서만 생겨날 수 있는 단일작업자만이 진정한 SW 전문가가 될 수 있고 그런 근무환경을 만드는 것이 경영진이 해야 할 일이며 한국 SW 산업이 발전할 수 있는 핵심 필요조건이다. 그러기 위해서는 회사 문화뿐 아니라 분석 능력의 향상 그리고 조용한 개발환경에 필수불가결한 기반 시스템 구축이 우선되어야 한다.&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/5599343571529481425/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=5599343571529481425' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/5599343571529481425'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/5599343571529481425'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/07/monotasker-multitasker.html' title='분석 #7 회사가 문제다 - Monotasker 와 Multitasker'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-4606137117819576156</id><published>2016-06-26T00:30:00.000-07:00</published><updated>2019-03-31T18:43:38.365-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석 #6 왜 삼성개발자의 1-2%만 구글 개발자의 역량에 불과한가?</title><content type='html'>&lt;br /&gt;&lt;br /&gt;요새 삼성전자에서 SW 개발자 역량에 대한 자기 성찰의 기사가 나와서 화제거리가 되었다. 지금쯤이면 다 읽어 보았겠지만 &lt;br /&gt;&lt;br /&gt;&quot;삼성전자 SW 엔지니어는 문제해결 능력에 대한 훈련을 많이 한 것 같지 않다. 지금 당장 문제해결 평가 방식으로 구글 입사를 시도 한다면 1~2%만 제외하고는 어렵지 않을까 생각한다.&quot; 라는 기사이다. &lt;br /&gt;&lt;br /&gt;이는 너무 당연한 결론이며 삼성전자가 아닌 한국 소프트웨어 전체의 현상을 보여주는 것이다. 지금까지는 자아도취에 동키호테식 열정으로 진실을 외면하고 살아왔다면 이제 심각한 상황이 되면서 조금 눈치는 챘다고 볼 수 있다. 이는 개발자 자신들의 책임은 절대 아니다. 대부분은 회사와 경영진의 책임이긴 하지만 개발자들도 조금만 더 현명하게 기득권층과 선동가들에게 현혹되지 않았다면 지금보다는 나아질 수 있었다. &lt;br /&gt;&lt;br /&gt;미국 SW 회사에서는 어려워져서 개발자 감원을 시킬 때 경력이 적은 사람부터 시킨다. 이름하여 오랜 경력자를 지키겠다는 정책으로 &quot;Seniority&quot;라고 한다. 그 이유는 상식적으로 너무 당연하다. 실력이 있기 때문이다. 회사에 오래 있었으니까 충성심을 고려해서 그런다고 생각하면 세상을 너무 모르는 순진한 생각이다. 그런 순수성은 존경할 만 하지만 세상 살아가는 요령은 약하다. CEO의 입장으로 바꾸어 놓고 생각하면 쉽게 이해가 갈 것이다. 어렵게 CEO가 되어서 자기도 실적을 내어야 살아남는데 실력없는 개발자를 단순히 회사에 오래 있었기 때문에 불쌍해서 살려주겠다고 생각할 CEO는 세상에 없다. 여기서 다양한 인사 정책을 논할 수는 없지만 기본적으로 핵심은 실력이다. 그 이외의 모든 인사 정책은 극히 작은 부분을 차지한다.&lt;br /&gt;&lt;br /&gt;상황을 이해하기 쉽도록 인사 정책을 흑백논리로 생각해 보자. 모든 개발자를 40대 이후의 그룹과 40대 이전의 그룹으로 나누어 보자. 회사가 어려워져서 두 그룹 중 한 그룹을 감원시켜야 한다고 가정하자. 미국에서는 당연히 40 이전의 젊은 그룹을 감원시킨다. 40대 이후의 개발자가 다 없어지면 회사는 망한다. 한국 SW 회사에서는 40대 이후를 감원시키는 것이 옳다. 한국에서 40대 이후면 개발자가 아니고 거의 개발자의 탈을 쓴 관리자이다. 그러니 더욱 더 감원해도 문제가 안된다. 상식적으로 그렇고 사실이 그렇다. 그래서 필자가 개발자를 채용할 때도 대기업의 고참 개발자는 조심해서 본다. 개발자도 아닌 직원을 뽑아서는 할 일이 없을 뿐만 아니라 방해만 된다. 실제로 한국 회사에서 대부분의 젊은 개발자들은 위의 관리자나 임원들이 회사에 가치가 있다고 보지 않는다. 그들 만의 국지적인 관점일 수도 있지만 전세계 회사 평가 사이트인 glassdoor.com 에서 외국인들이 내린 평가를 보아도 한국회사들의 임원이나 관리자들에 대한 평가는 최악이다. 무지한 상태에서 엉뚱한 지시만 내린다는 평이다. 또 CEO를 인정하는가를 묻는 &quot;Approve CEO&quot;는 대부분 부정적이다. 이것은 필자의 추측도 아니고 부정할 수 없는 엄연한 사실이다. 전문성보다는 관리위주로 경영할 수 밖에 없는 최고경영진부터 회사가 그렇게 설정되어 있기 때문이다. 어떤 경우는 개발을 해 본 적도 없는 사람이 연구소장이나 CTO라는 직함을 가지고 있기도 하다. 외국에 나가서 어떻게 상대방과 대화를 할 수 있을지 의문이다.&lt;br /&gt;&lt;br /&gt;필자도 지금까지 미국과 한국에서 기술자 경로에 있어 왔지만 미국 회사에서 개발자 경로에 있다보면 자기보다 나은 고수들의 공력을 느끼고 감탄하며 배운다. 반대로 30대가 되면 20대 신입이었을 때가 세상모르고 열정과 자신감으로 보낸 젊음의 시절이고, 40대가 되면 30대를 보고 이제 조금 SW를 알겠구나 하는 생각을 하게 되고, 50대가 되면 40대를 보고 이제 조금만 가이드해주면 일을 믿고 맡길 수가 있겠구나 하는 생각이 든다. 그래도 1,000명이 개발하는 거대한 제품은 백발이 성성한 개발자가 지휘해야 할 것이다. 한국이 자랑하는 인천대교와 영종대교의 핵심 설계를 일본의 조다이(長大)라는 업체가 맡았다. 1968년에 설립된 이래 전 세계적으로 20여개의 대형 교량을 설계한 경험이 있는 회사다. 한 토목 설계 전문가는 &quot;이 회사의 하마지라는 기술자 한 명이 보유한 경험과 기술이 우리나라 교량 설계 업체 전체를 합친 것 이상이라고 해도 과언이 아닐 것&quot;이라고 했다. 이런 기술자를 회사가 어렵다고 감원시키겠는가? 절대 아니다. 이게 바로 백발이 성성한 개발자의 실력에서 나오는 Power인 것이다. 애플 창업자인 스티브 워즈니악, 전 마이크로소프트의 Chief Scientist였던 레이 오지, 하둡의 창시자인 더그 커팅등 기술로는 전세계에서 누구도 따라갈 수 없는 기술자들이다. 다 60대 전후이지만 실리콘밸리에 가보면 이런  사람들이 수도 없이 많다. 그들이 바로 실리콘밸리의 숨은 힘이다. 요새 알파고로 갑자기 유행이 된 인공지능 분야에서도 세계적인 대가인 Geoffrey Hinton, Ray Kurzweil, Yann Lecun도 다 백발이 성성한 상태에서 구글과 페이스북의 인공지능 기술을 이끌어 가고 있다. 관리자가 아니다. 한국의 관료중심과 정치적인 환경에서는 절대 생겨날 수 없는 사람들이다. 조금만 유명해 지면 이런 저런 정부회의나 프로젝트등에 기웃기웃해서는 일단 시간이 모자란다. 기술은 멀어지고 점점 더 정치꾼으로 변해간다. &lt;br /&gt;&lt;br /&gt;실리콘밸리의 기술자들은 서로 많은 기술 정보를 공유하고 협력하면서 실력이 급속히 늘어간다. 백발이 되어가면서 그들의 실력은 임계치를 넘은 폭발력으로 점점 더 가파르게 증가한다. 물론 육체적인 능력은 떨어지지만 종합적인 판단력이나 기술적인 결정은 회사의 운명을 좌우한다. 타이핑하는 속도는 20대를 따라갈 수 없다. 생각하는 시간이 많아지고 타이핑하는 시간이 줄어들기 때문이다. 그에 반해 한국은 조금만 경력이 생기면 팀장이라든가 해서 기술력의 전문성은 떨어지기 시작한다. 바로 죽도 밥도 아닌 Generalist가 탄생하는 순간이며 팀장이나 관리자의 권위를 즐기며 살아가는 것도 잠깐일 뿐 조금만 지나면 생존을 염려해야 한다. 회사가 관리위주의 경영을 하기 위해 개발자를 관리직으로 내몰면서 가치를 감소시켜 놓고 연봉은 높아지고 그러니까 감원의 첫째 대상이 된다. 이렇게 된 원인은 최고경영진부터 임원 등 그 위에 있는  사람들이 역시 비슷한 사람들이기 때문에 그들에게 업무 보고하고 지시 받기 위해서는 상대가 같이 &quot;무지한&quot; 수준이어야 하기 때문이다. 깊이가 없으니 똑같은 얘기를 반복적으로 하기도 하고 답하기도 한다. 그러니 보고가 많아지게 된다. 필자가 누누이 얘기 하지만 보고가 많다는 것은 망가진 회사의 전형적인 증상 중의 하나이다. &lt;br /&gt;&lt;br /&gt;기술자가 일하는 환경은 번잡스러운 회의가 없는 조용하고 집중할 수 있는 환경이어야 한다. 이 점을 또 오해하는 경우가 많은데 고립해서 일하는 것은 절대 아니다. 개발자들이 마음대로 개발하는 환경을 만들어 주었다고 자랑하는 한국 회사들도 있는데 대부분의 그런 회사는 관리위주의 회사보다 더 빨리 망한다. 공유와 협업을 조용하게 할 수 있는 기반 시스템이 마련되어 있지 않은 상태에서는 일인회사에서나 적합한 방식이기 때문이다.&lt;br /&gt;&lt;br /&gt;한국회사의 두가지 문제인 관리위주 혹은 고립된 연구 스타일 모두 글로벌 개발자가 생겨나기에는 열악한 환경이다. 구글로 대변되는 글로벌 회사에서의 &quot;문제해결(Problem Solving) 능력&quot;이라는 것은 한국에서 생각하는 코딩 능력도 아니고, 프로그래밍 언어를 많이 아는 것도 아니고, 프로세스도 아니고, MVC와 같은 Framework를 많이 아는 것도 아니고, 많은 도구를 사용한 경험도 아니고, Agile과 같은 개발방법론을 아는 것도 아니다. 이런 잡다한 기법들이 이력서에 잔뜩 적혀 있는 것이 한국 개발자들의 통상적인 이력서인데 그런 것들은 놀랍게도 미국회사의 인터뷰시에 물어보지도 않는다. 그런 것들은 어차피 수시로 생겨나고 없어지고 하는 것이기 때문에 가치도 없고 신경도 쓰지 않는다. 진정으로 필요한 장기적이고 영속적인 문제해결 능력을 보는 것이다. 한국에서 그토록 맹신하는 Agile 방식도 이미 &quot;Agile is dead&quot; 라고 Agile을 창시한 사람들 조차도 문제점을 지적하면서 죽었다고 선언한다. 그런 것들은 필요에 따라 혹은 유행따라 어차피 순식간에 배워서 사용하다가 생명이 다하면 버리고 하는 것이 개발자의 인생이기 때문에 핵심 가치는 절대 아니다.  &quot;문제해결능력&quot;에는 핵심은 아니지만 그런 것들을 순식간에 배워서 사용할 수 있는 능력이 당연히 포함되어 있다. 어떤 컴퓨터 과목에서는 한 학기에 전혀 모르는 여러가지 언어를 사용해서 숙제를 해야 하는 경우도 많다. 초보때나 기본적인 개념을 배우기 위해 프로그래밍 언어를 한 과목에서 배우지 그 다음에는 하루 이틀안에 배워서 교과 과정을 따라가야 한다. 필자도 Coursera에서 Machine Learning 코스를 들었을때 Matlab 프로그래밍을 처음 접했지만 몇시간 교육 후에 전혀 문제없이 교과 과정을 따라갔다. 물론 경험자보다는 약간 시간이 더 걸리겠지만 그 정도는 역량의 차별화가 되지 않는다. 삽들고 땅파는 능력이 중요한 것이 아닌 지식산업이기 때문이다.&lt;br /&gt;&lt;br /&gt;그럼 그런 국지적인 기법이 실력의 차이가 아니라면 그렇게 글로벌 회사들이 주장하는 &quot;문제해결능력&quot;이란 무엇인가? 여기서 글로 답을 주기는 쉽지 않다. 불가지론이나 형이상학과 같이 차원이 다른 것을 이해하기가 어렵기 때문이다. 모든 사람들에게 쉽게 이해시킬 수 있었다면 한국 소프트웨어가 과거 20년을 이렇게까지 열악한 환경이 되도록 허송세월 하지는 않았을 것이다. 바로 베스트셀러였던 칩 히스의 &quot;지식의 저주&quot; 이다. 먼저 깨달은 사람이 깨닫지 못한 사람에게 설명하는 것은 너무 어렵다는 것이다. 예를 들어 5년전 만 해도 SVN이나 Git와 같은 소스코드관리시스템을 사용하지 않고도 개발하는데 전혀 문제가 없다고 주장하는 개발자들이 많았다. 지금은 개발자들이 거의 깨달았겠지만 소스코드관리시스템 없이 개발한다는 것은 불가능하다. 너무 어처구니 상황이지만 깨닫지 못한 본인들은 전혀 눈치를 못채고 있었을 뿐이다. 그런데 지금도 이슈만 바뀌었지 똑같은 상황이 계속되고 있다.&lt;br /&gt;&lt;br /&gt;&quot;문제해결 능력&quot; 이라는 것은 해결해야 할 문제가 주어졌을 때 종합적으로 여러가지 관점에서 생각하고 또 생각해서 가장 좋고 빠른 방법을 찾아내서 개발하는 것이다. 즉 Top-down으로 생각하는 능력이 기본이다. 이것을 바로 분석역량이라고 한다. 분석을 잘하기 위해서는 수 많은 기법을 동원해서 할 수도 있고 전혀 기법이 없이 수행할 수도 있다. 기법을 몰라서 분석을 못하거나 문제해결을 못하겠다면 그건 Technician이다. 템플릿이나 형식과 같은 기법으로 생각하는 순간 분석은 물 건너 갔다. 시간만 낭비하고 그냥 잘 되어야 숙련공일 뿐이다. &lt;br /&gt;&lt;br /&gt;문제해결 능력을 테스트하는데 프로그래밍 언어 테스트는 당연히 하지 않는다. 사실 프로그래밍은 개발에서 마지막 단계에 위치해 있는 시공 능력이다. 필자는 학교숙제를 비롯해 어떤 개발을 하더라도 코딩 시간을 20% 이상 할애하지 않으려고 한다. 가끔 전혀 모르는 언어를 사용해서 개발하거나 생소한 분야의 개발을 해야 할때는 50% 까지도 코딩 시간이 늘어날 수 있지만 기본적으로 대부분의 시간을 분석, 그 다음에 설계에 시간을 들인다. 이 방법이 가장 빠르고 품질 좋은 제품을 만들어 낼 뿐 아니라 1,000명의 개발자가 같이 개발을 해야 하는 경우에는 필수적이기 떄문이다. 한국에 Agile이 소개되었을 때 Top-Down에 대한 악영향을 걱정했었는데 역시 Top-Down 방식에 대한 반론을 위한 합리화에 많이 사용되고 결국은 한국 소프트웨어 역사에서 좋은 결과를 가져오지는 않았다. 그런 면에서 실리콘밸리에서는 대부분의 개발자들이 용어조차도 모르는 CMMI도 한국에 와서 좋은 점 보다는 나쁜 영향을 주었다. 1% 도 아니고 0.1% 의 회사에서나 필요한 것을 모든 회사에 적용할 수는 없다. 시금치가 건강에 좋다고 온 국민 식단에 시금치를 사용한 것과 다를 바 없다.&lt;br /&gt;&lt;br /&gt;이런 문제해결 능력은 좋은 환경에서 지식을 공유하면서 점점 더 성장하게 되는데 소프트웨어에 관한한 &quot;구경꾼&quot; 수준에 불과한 Generalist 경영진들과 그런 회사에서 성장한 개발자들이 그런 능력을 가지기는 어렵다. 그래서 &quot;1-2% 밖에 없다&quot; 라는 평가가 나오는 것은 너무나 당연한데 필자가 보기에는 현재 상태에서는 1-2%도 발견하기 어렵다. 차라리 문제해결 능력은 관리와 기법위주의 대기업보다는 벤처기업에서 아직 물들지 않은 개발자 중에서 찾기가 더 쉽다. 스스로가 아키텍트이며 고급 개발자라는 것을 증명하려면 Coursera 같은 곳에서 자기가 관심있는 분야의 강좌를 다른 개발자보다 몇 배 빨리 끝낼 수 있어야 한다. 한국 회사에서 &quot;팀장&quot;, &quot;부서장&quot; 등 &quot;장&#39;이라는 직함을 가지고 있는 사람들은 관리자이지 SW 개발자가 아니다. &lt;br /&gt;&lt;br /&gt;소프트웨어 개발자의 최고 능력은 바로 분석능력이며 그게 바로 글로벌 회사에서 가장 중요한 가치인 &#39;문제해결 능력&quot; 이다. 경험하기 전에는 이해하기도 어렵고 교육으로 가르치기는 불가능한 형이상학의 영역이다. 삼성이 고맙게도 자체평가를 통해 공식적으로 이슈를 알게 했으니 이 기회에 깨닫고 실천하는 중요한 계기가 되기를 바란다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/4606137117819576156/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=4606137117819576156' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/4606137117819576156'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/4606137117819576156'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/06/6-1-2.html' title='분석 #6 왜 삼성개발자의 1-2%만 구글 개발자의 역량에 불과한가?'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-7309099783627949400</id><published>2016-05-05T23:26:00.002-07:00</published><updated>2016-05-05T23:27:34.981-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><title type='text'>분석 #5 Coursera에서 소프트웨어 공학 최고의 스승을 만나보자</title><content type='html'>&lt;br /&gt;요즈음 교육 방법으로 매우 편리한 MOOC(Massive Open Online Course) 라는 방식이 있다. 언제 어디서나 원하는 강의를 들을 수 있는 온라인 강좌서비스인데 강좌 자료만 올려 놓는 가장 원시적인 것부터 실제 전세계 최고의 대학 강좌와 거의 비슷하게 체험할 수 있는 것까지 다양한 수준이 있다.&lt;br /&gt;&lt;br /&gt;전세계 MOOC중에서 가장 유명한 사이트가 Coursera (https://www.coursera.org) 이다. Coursera 에서 가장 많이 듣는 강좌가 Stanford 교수인 Andrew Ng의 기계학습(Machine Learning) 코스이다. Andrew Ng 교수는 Coursera의 창시자이기도 하고 인공지능 분야의 대가 중의 한 명인데 얼마 전에 구글에서 바이두로 옮겨 인공지능의 책임자인 Chief Scientist로 있다. 이 강좌는 Stanford 대학원의 정규 코스이기도 하다.&lt;br /&gt;&lt;br /&gt;필자가 수년 전에 Market Segmentation으로 Machine Learning을 했었는데 알파고의 홍보효과로 한국에서는 갑자기 대중에게 유행이 되었지만 이미 전세계에서 미래의 핵심 기술로 자리 잡은지 오래이다. 구글, 페이스북, 마이크로소프트, 애플, 바이두 등 전세계 모든 기업들이 사운을 걸고 엄청나게 투자를 하는 분야이다. 필자가 Stanford에 입학할 당시에는 인공지능의 실현 가능성에 문제가 제기되던 시절이라 전공으로 선택하지는 않았는데 그 후 30년이 흐르면서 많은 변화가 있었다. 특히 Geoffrey Hinton 교수의 획기적인 발견과 GPU 연산능력의 발전으로 과거의 문제들이 해결되면서 이제는 의심의 여지없이 미래 모든 산업의 핵심기술이 되었다.&lt;br /&gt;&lt;br /&gt;필자도 이 기회에 여러가지 목적으로 Andrew Ng 교수의 Machine Learning 강좌를 들었다. 가장 큰 목적은 한국의 개발자들이 이 코스를 들을 때 직면할 문제점을 발견하고 조언을 하기 위해서 였다. 이전에 학생이었을 때 듣던 거의 유사한 교육 방식의 코스이기 때문에 필자는 전혀 거부감이나 당황감 없이 들을 수 있었다. 주중에는 시간이 없으므로 주말에 밤새우다시피 하면서 11주 코스를 6주만에 빨리 끝냈다. 하지만 쉽게 통과하기 쉽지 않은 코스라는 것을 밝혀둔다.&lt;br /&gt;&lt;br /&gt;이 강좌의 가치는 &amp;nbsp;Machine Learning을 배우는 것 이외에도 다음과 같은 3가지 혜택이 있다.&lt;br /&gt;&lt;br /&gt;첫째, 대학 교육방법의 Role Model을 보여준다.&lt;br /&gt;둘째, 실리콘밸리 회사에서 어떻게 일하는 지를 가르쳐 준다.&lt;br /&gt;셋째, 분석이 무엇인지를 몸에서 느끼게 저절로 가르쳐 준다.&lt;br /&gt;&lt;br /&gt;이 강좌를 듣는 방법에는 3가지가 있는데 첫째로 그냥 동영상 강의만 듣는 것이다. 즉 청강이다. Class당 1시간 20분 정도의 동영상 11개 이니까 동영상만 듣는다면 대충 15시간이면 끝난다. 둘째 방식은 가끔 나오는 Quiz를 이해하고 풀면서 듣는 것인데 강좌을 다시 듣고 잘 이해해야 하는 부분이 있으므로 조금 시간이 더 걸린다. 20시간으로 잡자. 거의 모든 개발자가 기초만 있으면 통과할 수 있는 수준이다. 마지막 셋째는 프로그래밍 숙제를 해야 하는 방식이다. 숙제를 모두 끝내야 Course Certificate을 발행해 준다. Certificate만 받지 않으면 모두 무료 강좌이다. 개발자의 수준에 따라 다르겠지만 필자의 경우에는 약 100시간 걸렸다. 시간으로 보면 Quiz까지 푸는 방식과 숙제까지 하는 방식에서 5배의 차이가 난다. 하지만 배우는 역량은 5배가 아니라 10배, 100배의 가치가 있다. 청강이나 Quiz를 푸는 방식으로는 진정으로 개발자가 배워야 하는 것은 전혀 배울 수 없다. 그냥 얉은 표면적인 지식만 임시적으로 쌓일 뿐이다. 즉 골프는 쳐보지도 않고 골프 동영상 강좌만 들은 것과 같다.&lt;br /&gt;&lt;br /&gt;그럼 이 강좌의 Certificate을 받기 위한 과정에서 개발자들에게 어떤 중요한 가르침을 줄 수 있는지 보자. 핵심은 프로그래밍 숙제이다. 프로그래밍 숙제를 모두 통과하지 못한다면 이 코스를 완성했다고 인정할 수 없다. 훈수나 두는 잡다한 지식 수준이다. 그럼 프로그래밍 숙제가 어떻게 나오는 지를 살펴보자. 한국의 대학교수들이 꼭 배워야 할 점이기도 하다.&lt;br /&gt;&lt;br /&gt;첫째, 모든 숙제의 설명이 양적으로 작은 책자처럼 나온다. 그것을 다 읽고 완전히 이해해야 한다. 한 부분이라도 이해하지 못한 상태에서 대충 어떻게 되겠지하고 숙제를 하려고 시작하면 고생은 고생대로 하고 시간이 더 든다. 여기서 개발자가 배워야 할 기본 원칙이 나온다. &quot;무엇을 할 지를 모르면서는 코딩을 시작하지 말라&quot;는 것이다. 백가지 이유를 들면서 일찌감치 코딩에 뛰어드는 한국의 통상적인 개발자는 아무리 얘기해도 실감하기 어려운 것인데 강좌를 들어보고 경험해 보면 백문이 불여일견이라고 이해가 갈 것이다. 즉 &quot;코딩을 일찍 시작하면 개발시간이 더 걸린다&quot; 는 소프트웨어 공학의 #1 원칙을 배울 기회이다. 폭포수모델이니 애자일 방법론과는 전혀 상관이 없는 기본 원칙이니 방법론과 착각하지 말기 바란다.&lt;br /&gt;&lt;br /&gt;숙제가 정의되어 있는 상세함을 보면 무엇을 프로그램해야 하는 지 정확하게 정의되어 있다. 숙제 설명 중에 쓸데 없는 단어도 없고 모든 단어가 필요한 만큼 잘 사용되어 있다. 바로 &quot;완벽한 SRS&quot;인 것이다. SRS의 형식이 중요한 것이 아니라 문제를 정확히 정의하는 것을 확실히 볼 수 있다. 이 숙제 설명 중에 한 부분이라도 이해 없이 넘어가면 꼭 문제가 되고 결국 다시 와서 이해하기 전에는 숙제를 완성할 수 없다. 이런 식으로 매 과목마다 완벽한 SRS를 기반으로 숙제를 하고 교육을 받다 보면 SRS를 어떻게 작성해야 하는 것을 저절로 배우게 된다. 자신이 다른 사람에게 어떤 일을 부탁할 때나 개발 프로젝트 발주를 할 때도 그렇게 적어야 한다는 것이 몸에 배게 되는 것이다. 자신도 모르는 사이에 문제를 정의하는 방법, 즉 &quot;분석&quot; 능력을 배우게 된다.&lt;br /&gt;&lt;br /&gt;문제를 정확히 정의하는 것과 창의성과는 전혀 별개의 문제이고 둘 다 모두 가장 중요한 개발자의 역량이지만 여기서는 창의성을 설명하지는 않는다. 정확히 정의된 문제 안에서 창의성을 발휘하는 것 정도로 알아 두자.. 불행히도 한국에는 이런 수준의 숙제를 디자인하고 만들수 있는 교수가 거의 없다. 학교에서 잘 가르쳐야 한다고 요구해야 정치교수, 관리교수들 처럼 실무 역량을 상실한 교수들에게는 이런 코스 디자인 역량이 있을 수 없고 공허한 메아리만 될 뿐이다.&lt;br /&gt;&lt;br /&gt;또 중요한 것이 숙제를 채점하는 방식이다. 온라인 사이트로 숙제를 프로그램 채점기에 제출하면 즉시 자동으로 채점이 되어 나온다. 채점은 항목별로 Pass/Fail (통과/실패)로 나온다. 모든 항목을 100% Pass 해야만 숙제가 통과된다. 여기서 소프트웨어 개발 프로세스에서 나오는 Acceptance Test Plan(ATP, 인수테스트) 라고 하는 핵심 개념이 나온다. ATP만 통과하면 개발이 완료되고 계약은 종료된다. 발주시 미리 약속한 ATP만 통과하면 발주자가 어떤 트집도 잡을 수 없다. 이런 정교한 ATP가 없는 한국에서는 절대 경험해 볼 수 없는 것이다. 대학의 과목에서도 따라하는 소프트웨어 개발의 기본을 한국의 소프트웨어 업계에서는 한 번도 경험해 본 적이 없다는 것은 슬픈 현실이다. 그러면서 소프트웨어 공학을 논할 자격이 있는지도 의문이다.&lt;br /&gt;&lt;br /&gt;프로그래밍 숙제의 내용에 대해 정확히 정의되어 있고, 채점도 Pass와 Fail이 자동으로 나온다. 무슨 편법을 사용하더라도 채점 프로그램만 통과하면 통과한 것이다. 하지만 하드코딩을 한다거나 편법으로 채점기를 속이는 것은 불가능하게 디자인 되어 있다. 프로그램을 제대로 하지 않는 이상은 절대 채점기를 통과할 수 없게 만들어져 있으니 시간 낭비 하지 말고 처음부터 제대로 하는 것이 현명하다. 여기서 주지할 것은 채점기가 얼마나 정교하게 잘 되어있는지도 중요하지만 더 중요한 것은 숙제 설명과 함께 동시에 채점기가 나온다는 것이다. 이것을 소프트웨어 산업에서 비교하자면 숙제의 정의는 SRS이고 채점기는 ATP (인수테스트)인 것이다. 소프트웨어 공학에서 당연하게 SRS와 ATP(인수 테스트)가 동시에 나오는 기본 원칙을 보여주는 것이다. SRS와 ATP 있어야만 합리적이고 정상적인 개발 계약이 가능하다. 이런 기본적인 프로세스를 한 번도 해 본 적이 없다는 것은 한국 소프트웨어 업계의 실체와 수준을 적나라하게 보여준다.&lt;br /&gt;&lt;br /&gt;한국에서의 프로젝트 발주와 수주의 기본 프로세스인 &quot;RFP (제안 요청서) -&amp;gt; Proposal(제안서) -&amp;gt; 우선협상대상자 계약 -&amp;gt; 개발범위 논의 -&amp;gt; 등등&quot; 의 어디에서 과연 내가 돈을 주고 발주를 하든 돈을 받고 수주계약을 하던 계약 전에 무엇을 개발하는 지와 인수테스트를 정확히 알 수 있는 시점이 없다는 점이다. 무슨 근거로 애초에 이런 개발방식이 생겨났는지는 안타까운 과거의 행위이지만 앞으로 한국 소프트웨어 업계가 넘어가야할 가장 큰 장애물이다. 하여튼 이 잘못된 관행은 프로젝트 규모의 문제가 아니라 기본이 안 되어 있기 때문인 것이다. 규모가 크기 때문에 학교의 과목보다도 더 정확히 하지 않으면 재앙은 더 커진다.&lt;br /&gt;&lt;br /&gt;마지막으로 말하고 싶은 것은 이 과목에서는 Matlab 이라는 프로그래밍 언어를 사용한다. 필자는 이 전에 한 번도 Matlab을 사용해 본 적이 없다. 하지만 배워서 이 숙제를 해야 한다. 강좌에서도 한 30분 정도 가르쳐 준다. 다른 과목에서는 Python으로 숙제를 해야 한다. 이 역시 학생들이 알아서 배워야 한다. 이런 프로그래밍 언어는 학원에서는 가르칠지 모르지만 학교에서 귀중한 학점을 낭비하면서 따로 가르치지는 않는다. 중요한 것은 문제해결 능력이지 프로그래밍 언어의 Syntax가 아니기 때문이다. 이런 Syntax를 가르칠 만큼 한가한 학교라면 그 학교에서는 많은 것을 배우지 못할 것이다. 한국 개발자의 이력서에 빼곡히 적힌 프로그래밍 언어 목록에 대해 필자는 그렇게 가치를 두지 않는다. 실리콘밸리에서 개발자를 뽑을 때도 그랬고 지금도 그렇다. 이런 모든 상황 때문에 한 학기에 프로그래밍이 숙제로 있는 코스를 1개 이상 수강한다는 것은 거의 사생활을 포기한 것이나 다름 없다. 그래서 전산학을 하면서 Full-time 학점인 학기당 12학점 이상을 듣는다는 것도 거의 불가능하다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;이 강좌 하나에 한국의 정부, 학교, 회사, 개발자등 소프트웨어 업계가 배워야 하는 Role Model이 모두 들어 있다. 과연 이런 강좌를 한국에서 언제 보게 될 수 있을 지가 궁금하다. 그 때가 아마 한국의 소프트웨어 업계가 진정으로 소프트웨어를 이해하는 시점이고 글로벌 소프트웨어를 위해 나갈 수 있는 시작점이라고 본다. 그 때까지는 한국의 갈라파고스 섬에서 자화자찬하며 살아갈 것이다.&lt;br /&gt;&lt;br /&gt;미래의 핵심 역량인 Machine Learning을 배우면서 추가로 소프트웨어 공학의 핵심을 저절로 배우는 기회를 위해 필자가 개발자들에게 꼭 추천하는 강좌이다.</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/7309099783627949400/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=7309099783627949400' title='5개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7309099783627949400'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7309099783627949400'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/05/5-coursera.html' title='분석 #5 Coursera에서 소프트웨어 공학 최고의 스승을 만나보자'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-8717410771777279954</id><published>2016-02-20T20:26:00.003-08:00</published><updated>2016-02-21T00:08:16.525-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석 #4 잘못된 이름으로 인한 치명적인 착각</title><content type='html'>&lt;h2&gt;&lt;/h2&gt;&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 미국에 처음 갔을 때 한국교포&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 2&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;세와 얘기를 하다가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;잘못보았다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;란 말을 영어로 해야 하는데 도저히 생각이 나지 않아서 영어로 뭐라고 하느냐고 물어보니까 그 교포도 고개를 갸우뚱하더니 똑같은 말이 없다고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;자동차로 잘못 보았다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;는 말은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;I thought it was a car&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 하는 표현으로 대체 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 한 언어에서 다른 언어로 직역할 수 없는 것들이 많다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래서 외국어를 배울 때 분석하지 말고 그냥 외우는게 가장 빨리 배운다는 격언이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;인간이 어떤 행위를 하면 결과물이 나온다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라는 행위를 하면 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;SRS&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라는 산출물이 나온다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;행위를 했는데 산출물이 나오지 않으면 다른 사람에게는 행위를 하지 않은 것으로 간주된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &amp;nbsp;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;미국의 소프트웨어 회사에서 통상적으로&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 하는 것이 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Software Requirements Specification&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 줄인 말이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;한국에서는 당연히 한글로 번역을 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그런데 이 잘못된 번역 때문에 한국 소프트웨어 업계가 시작부터 잘못된 원인이 되었다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;직역할 수 없는 단어 하나 때문에 소프트웨어 개발에 대한 문화가 갈라파고스 섬으로 가버렸다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;일단 문자를 풀어서 해석하자면 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Software&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Requirements&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Specify&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;한 것이라고 할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;당연히&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Requirements&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;와&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;Specification&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 다르다는 것을 의미한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기서 언어가 문제가 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. Requirement&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;와&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Specification&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;을 둘 다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;사양&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라고 번역한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;완전히 다른 것을 이름을 같이 붙여 놓으니 문제가 없을 수가 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;이런 번역의 오류가 생기는 예로 특허 문서에 사용하는 용어 중에 영어로는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Compise&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;와&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Consist&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 있는데 완전히 다른 의미로 사용된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그런데 한글로 번역을 하면 둘 다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구성하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라는 똑같은 용어로 해석된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래서 한국에서 특허를 내고 나중에 외국에서 특허를 내려고 할 때 문제가 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;중국어도 한글로 번역되지 않는 경우가 많이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;해도 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;혹은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;는 조동사가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;neng&quot;, &quot;hui&quot;, &quot;yinggai&quot;, &quot;dei&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;등과 같이 한글로는 다 똑같이 번역되지만 중국어에서는 다르게 사용되는 단어들이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;한국에서는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 나름대로 추측해서 어떻게 부르는지 몇 개만 나열해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;요구사항 명세서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;기능 명세서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;고객요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;등이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 모두 완전히 잘못된 번역이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;지금 나열한 문서의 제목은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;Requirements&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에 가깝다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 기능명세서를 적어 놓고&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 작성했다고 주장하는 것은 착각이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;요구사항 명세서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래도 비슷한 편인데 요구사항을 적는 것이라고 생각한다면 잘못된 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;정확하게 말하면 첫째로 요구사항을 적고 그 다음에 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Specify&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라는 행위를 하고 나서 그 결과물인 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Specification &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;문서를 적는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. Requirements &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 있고 나서 그것을 기반으로&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Specify &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;해야 비롯&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 작성되는 것인데&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;만 적었지 아직&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Specify&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하는 행위는 시작하지도 않았다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그런 이유로 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 간단히 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Specification&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;혹은 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Spec&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라고 부른다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 그게 그거지 뭐 이렇게 문서를 많이 적어야 하는 지 짜증이 들지도 모르겠지만 그 것도 착각이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;고객의 요구사항을 가져 오는 것은 개발자의 업무가 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 개발자들이 전문성도 없고 자기 업무도 아닌 엉뚱한 일을 하고 있었던 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;고객의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 정리하고 가져오는 것은 마케팅부서의 핵심 업무이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;보통 마케팅부서의 업무를 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;4P&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 표현한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. Product, Price, Placement, Promotion &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 4&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개의 용어가 모두&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; P&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;로 시작하기 때문에 붙여진 이름이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그 중의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Product&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 바로 제품을 정의하는 업무이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 작성하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;마지막에&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Promotion&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;홍보&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;인데 한국에서는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;마케팅&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라고 하면&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;홍보&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 의미할 정도로 완전히 잘못 사용하고 있는 용어이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;미국에서는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Promotion&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;을 담당하는 분서는 마케팅부서 중에서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;Marketing Communication&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;결국 개발자들이 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;요구사항 명세서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라는 것을 작성하는데 자기 일도 아닌 마케팅부서의 일을 하고 있는 것이고 그 것을&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 적었다고 착각하는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 2&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가지 오류를 범하고 있는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;왜 그런 상황이 되었는지는 이유가 있지만 나중에 얘기하기로 하자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그나마 개발방법론을 조금 안다고 주장하는 사람들이 뭔가를 적지만 아예&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;도 없이 추상적인 기획이나 비전만 가지고 코딩으로 뛰어드는 용감무쌍한 개발자들도 많이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;그래도 거대방법론을 도입한 회사&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;주로 대기업&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;들은 방법론이 요구하는 문서를 보고 적다 보면 그 와중에 형식적으로는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Specify &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라는 행위의 결과물을 적는 흉내를 내게 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 본질을 모르는 상태에서 템플릿에 적는 방식으로는 한계가 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;제대로 충실한 내용이 적힐 수가 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;어떤 방법론을 사용해도 마찬가지이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;나중에 설명하겠지만&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;일체성&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(Integrity)&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라는 핵심 특성이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;진정한&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 완성되기 위해 꼭 고려되어야 하는 특성이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;도대체 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 무엇인지 궁금증을 약간 해소하기 위해 여기서는 매우 간단히&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에 적어야 하는 대표적이고 핵심적인 일부 항목들만 나열해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. IEEE&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에 대해 전세계 전문가들이 만들어 놓은 바이블과 같은 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Template&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에서 가져온 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;혼란을 피하기 위해 영어를 같이 사용한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Purpose (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;목적&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Prodcut Scope (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;범위&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Product Perspective (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;제품조망&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Overall System Onfiguration (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;전체 시스템 구성&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Overall Operation (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;전체 동작방식&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Product Functions (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;제품주요기능&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Assumptions and Dependencies (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가정과 종속관계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Apportioning Requirements (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단계별 요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Backwards Compatibility (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하위호환성&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Operating Environment (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;운영환경&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Development Environment (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개발환경&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Test Environment (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;테스트 환경&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Configuration Management (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;형상관리&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- External Interface (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;외부 인터페이스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- User Interface (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;유저 인터페이스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Peformance Requirements (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;성능요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Non-functional Requirements (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;비기능요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Functional Requirements (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;기능요구사항&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 40.0pt; mso-add-space: auto;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- Change Management Process (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;변경관리 프로세스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;어떤 방법론을 사용하든 이와 비슷한 용어들은 많이 들어 보게 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;모든 방법론이 나온 근원이고 여기에 포장만 입혀 놓은 것이기 때문에 너무 당연하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이것을 다 작성한다고 생각하면 기겁을 할 수도 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;실리콘밸리나 한국이나 개발자의 성향은 같다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;재미없는 일을 하는 것은 인간이면 다 싫어한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그런데 재미를 모르는 것이지 재미 없는 것은 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석을 하고 이런 문서를 적는 것이 코딩보다 더 재미있는 일이라는 것을 인식하게 될 때 바로 훌륭한 개발자가 되었다고 자부해도 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이렇게 많은 문서를 다 적는 것이 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그렇게 해왔다면 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 본질을 이해하지 못하고 있다는 것을 증명한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 본질은 가장 빠르게 개발하는 것이 목적이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그레서 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 적히는 방법은 모든 프로젝트가 다 다르다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;학교숙제를 할 때도 이 모든 문서를 일단 다 생각해 본다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;생각하는 시간은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 1&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분이면 충분하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 1&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분 동안 무슨 문서를 얼마나 작성할 것인가를 직감적으로 결정한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;별로 작성할 문서가 많지 않다는 것을 알게 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;학교숙제의 경우 이 중에서 한두개만 작성할 수도 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;학교숙제가 아니고 한 달 짜리 프로젝트라고 해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 어떤 문서를 얼마나 작성할 지를 결정하는데 역시 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;1&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분 이면 충분하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;문서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 2-3&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개 쯤 될 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 일했던&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;General Electiric&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 원자력 발전소 소프트웨어를 개발한다고 해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 모든 문서를 작성해야 한다는 것을&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 1&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분 안에 직감으로 결정할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단 어떤 문서를 얼마나 적어야 할지는 모든 프로젝트마다 다르다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 해 본 수백개의 프로젝트도 다 달랐다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 어떤 규칙으로서 적용할 수 없는 예술적인 판단이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래서 소프트웨어가 극단적인 지적산업인 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;주어진 템플릿보고 채워나가는 일을 하고 있다면&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개발 노동&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;을 하고 있는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;위에 나열한 것 중에서 전체 작성하는 문서의 양 중에서 어떤 경우는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &#39;Functional Requirements&#39;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 90%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 차지하기도 하고&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot; User Interface (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;유저 인터페이스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 90%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 차지하기도 하고&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;, External Interface (&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;외부 인터페이스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 90%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 차지하기도 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그를 조절하는 것 역시 어려운 판단이며 예술의 영역이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;다시 한 번 강조하지만 어렵기 때문에 연봉을 많이 받는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;템플릿이나 채우고 있는 개발 노동자들에게 높은 연봉을 주는 바보 경영진은 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;다시 정리하자면&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;와&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Specification&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;은 완전히 다른 영역이며&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; Requirements&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;는 마케팅의 업무이고 개발자의 업무가 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;통상적으로 개발자가 수행해왔는데 비효율적인 것은 말할 것도 없거니와 그것을&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 적었다고 착각하는 것도 큰 착각이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;결론적으로 한국에서 벌어지는 거의 모든 프로젝트는&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가 제대로 적히지 않은 상태에서 개발을 해 왔다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;주먹구구식이거나 혹은 대형 방법론의 경우 형식적으로 적힌 가치가 없는 문서가 대부분이었다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;경험자들은 이런 사실을 잘 알고 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;애자일 방법론은 미국에서는 이미 유행이 지나갔지만 그냥 방법론의 하나일 뿐이지 개발의 원칙을 벗어난 예외가 될 수는 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;또 다른 관점에서 볼 때 가치있는 문서를 적&lt;span style=&quot;font-family: inherit;&quot;&gt;었다면 오래동안 생존해야 한다&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;나중에 보지 않는 문서라면 당연히 가치가 없는 문서이다. SRS는 제품이 단종이 될 때까지 살아남는 문서이다.&amp;nbsp;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;앞으로 진행하면서 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 다양한 실체를 보게 되겠지만 소프트웨어 개발에서 가장 정교하고 어려운 행위라는 것을 명심하기 바란다&lt;/span&gt;&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;.&lt;/span&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/8717410771777279954/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=8717410771777279954' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/8717410771777279954'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/8717410771777279954'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/02/4.html' title='분석 #4 잘못된 이름으로 인한 치명적인 착각'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-6108215576064720049</id><published>2016-02-13T23:43:00.000-08:00</published><updated>2016-02-13T23:43:56.915-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석 #3 분할 발주의 허구와 진실</title><content type='html'>&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어는 이론적인 개발 단계가 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이론이라고 무시하려고 할지 모르지만 이론이 아닌 실전에서 가장 중요한 개념이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;, &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단계적인 개발 방식을 외부의 개발사와 계약으로 할 때 분할 발주가 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 용어는 다 이해하겠지만 제대로 &amp;nbsp;따라하지는 않는다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;역량 때문일 수도 있고 의지 때문일 수도 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기서는 외주 개발사를 가정하고 분할 발주로 얘기하자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 개발단계의 핵심은 동일하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;먼저 분할 발주의 목적을 알아야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;목적도 모르고 무조건 분할 발주를 하겠다는 것은 방향도 모르고 눈 감고 길을 가는 것과 같다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분할 발주의 목적 중의 하나는 개발 단계를 나누어서 각 단계의 발주를 다른 회사에게도 줄 수 있게 하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;분할발주를 하려면 당연히 분할을 해야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;잠깐 여기서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; IEEE&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; SWEBOK (SW &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;지식체계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에서 세계 최고의 실전 전문가 수백명들이 말하는 분할의 첫 단계인 분석의 목적을 몇 개만 나열해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot; style=&quot;margin-left: 36.0pt; mso-add-space: auto;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개발에 드는 비용을 정확하게 산정하기 위함이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;정확한 개발 일정을 알고 싶다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계를 위한 기초가 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;여기서 보면 분할 발주의 목적이나 분석의 목적이 같다는 것을 알 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;결국 분할 발주의 목적을 이루기 위해서는 분석을 잘해야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;프로세스도 아니고 오직 분석이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;진리는 가까운 곳에 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;반면에 지옥으로 가는 길은 매력적으로 포장되어 있다는 격언이 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;유행따라 멋있어 보이는 프로세스&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;, &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;기법&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;, &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;방법론들이 매력적으로 보이지만 결국은 대부분 사라지고 분석이라는 추상적인 원칙 만이 영원히 살아남는다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;대부분의 새로운 것들은 마케팅 천재들이 만들어 낸 멋진 마케팅 패션용어에 불과했다는 것을 나중에 깨닫게 된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. Big Data, IOT, Machine Learning&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;등도 갑자기 생겨난 기적이 아니고 과거에 있었던 것들이 환경에 맞게 필요해 진 것 뿐이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;때에 맞추어 &amp;nbsp;새로운 이름을 붙이니 매력적으로 보이는 것 뿐이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;국내에서 늦은 감이 있지만 분할 발주가 중요하다는 것을 깨달았다고 하고 법으로까지 만든다는 것은 나쁘지 않다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 법으로는 충분하지 않다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;법을 바꾸는 것은 쉽지만 사람들의 마음 속에서 편견을 없애는 것이 훨씬 어렵다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;전세계에서 인종에 대한 차별이 법으로는 거의 다 없어졌다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 사람들의 마음 속에는 아직도 뿌리 깊은 편견이 남아 있고 행동에서도 나타난다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;법은 한계가 있고 마음속으로 받아 들여야만 진정한 변화가 올 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;지금까지는 신도 얼마짜리 인지 알 수 없는 몇백억짜리 계약을 용감하게 해 왔다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그렇게 하는 방식 외에는 본 적이 없으니 그런 방식이 인생인 줄 안다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;마치 처음 알에서 깨어난 오리새끼가 최초에 본 물체가 자기 어미인줄 알고 평생을 따라 다니는 것과 같다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&amp;nbsp; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;한국에서 벌어지고 있는 갈라파고스 신드럼 중의 하나이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 실리콘밸리에 있었을 때 한국회사가 와서 이런 방식으로 미국회사와 계약하고 사업을 하려다 소송 당하고 철수한 적도 있었다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 아직도 의아하게 생각하는 것은 미국회사가 어떻게 애초부터 그런 계약을 했을가 하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;정상적인 미국 회사라면 그런 비상식적인 계약을 했을 리가 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;아마도 한국 회사의 브랜드와 파격적인 약속을 믿고 계약했을지 모르지만 결국 두 회사 모두 피해를 입었다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;실리콘밸리에서는 한국처럼 엉터리 계약후 적당히 넘어가는 것은 문화적으로 불가능하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;게약은 외부 회사와의 계약서만 계약이 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;내부에서 개발 프로젝트를 하겠다고 하는 것도 똑같은 계약이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;내부라고 계약 없이 대충하는 것은 주먹구구식으로 일하는 회사라는 것을 증명한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;혹시나 친구끼리 시작한 신생업체인 경우 개발 계획도 없이 열정으로 열심히 해 볼 수는 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;운이 좋아 한탕은 가능할 지 모르겠지만 지속적인 성장은 불가능하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;혼자서 열심히 연습해서 세계적인 피아니스트가 되겠다는 것과 다를 바 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 구체적으로 정상적인 경우에 어떻게 계약이 진행되는 지를 살펴보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;가장 먼저 확실히 인식해야 할 &amp;nbsp;진리는 개발시작 당시에는 소프트웨어를 개발하는 데 드는 일정과 비용을 신도 모른다는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;전지전능한 신도 모르니 아는 척 하지 말기 바란다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 결국 단 하나 남은 선택은 얼마를 줄테니까 알아서 개발해 달라는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래서 소위 우선협상대상자라는 것을 선정하고 정해진 계약비용안에서 무엇을 해 줄 것인가를 협상한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;아주 그럴듯하게 보이지만 역시 엉터리이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이런 방법 외에 어떤 방법도 없어 보이지만 실리콘밸리에서 계약은 그렇게 진행되지 않는다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;오리새끼처럼 처음부터 잘못된 길에 들어서 한국에 뿌리깊게 자리잡은 잘못된 방법일 뿐이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 과연 어떻게 진행되는 지 진실을 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;실제 경험 없이는 지금은 이해할 수 없는 미묘한 것들이 있지만 먼저 설명할 수 밖에 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. 1&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;인 회사나 글로벌 대기업이나 마찬가지로 소프트웨어 개발은 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(1) &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;비전&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; -&amp;gt; (2) &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;기획&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; -&amp;gt; (3) &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; -&amp;gt; (4) &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; -&amp;gt; (5) &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구현 으로 진행된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;아니 진행되어야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이는 폭포수 이론처럼 들릴지 모르지만 극히 현실적인 방법이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;폭포수에 대한 이해를 잘못하고 있는 사람들이 많지만 실리콘밸리는 그렇게 한가하고 이론적인 곳이 아니다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;실리콘밸리는 경쟁이 극심한 곳이고 가장 현실적인 방법론을 사용하는 곳이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 중에서 통상적으로 비전은 경영진의 역할이고 기획은 기획부서 혹은 마케팅부서의 업무이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기서 첫 단추가 잘못 끼워지면 뒷 부분에서 제대로 되기는 힘들다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;한국에서 필자가 본 기획은 대부분 비전에 가까운 추상적인 문서이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 분석을 수행할 만한 충분한 정보가 없다는 이야기이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;일단 제대로 된 기획이 있다는 가정하에서 진행해 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 개발팀이 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;+&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;+&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구현&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;을 해야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;외부냐 내부냐에 상관 없이 얼마에 계약을 해야 하는 문제가 생긴다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이게 비로 불가능한 일이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그래서 먼저 계약후 우선협상대상자를 선정해서 개발범위를 얘기해 봐야 역시 무지에서의 토론일 뿐이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;무지에서의 토론이니 어떤 협상도 신빙성이 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그것은 절대적으로 잘못된 방법이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 옳은 방법을 보자&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;개발 일정은 전지전능한 신도 모르지만 희망하는 목표 일정은 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그 목표 일정의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 30% &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;정도를 나누어서 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;업무에 관한 계약을 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그러면 다음과 같은 질문이 생긴다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석에 대한 계약 금액은 얼마로 할까&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;? &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;어떤 결과를 원할까&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;? &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;X-NONE&quot;&gt;- &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석의 결과물 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;총칭해서 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;)&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 내용과 품질은 어떻게 장담할 수 있을까&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;? &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;이 문제들은 분할 없이 전체를 계약할 때 생기는 문제와 동일해 보인다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 큰 차이가 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;해법도 단순하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 계약은 결과물을 정하는 것이 아니라 분석에 소비하는 시간에 대한 비용으로 계약을 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이를 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Time and Material&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이라고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 계약한 시간 동안 일을 하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;나중에 얘기할 다른 방식은 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;Turn-key&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;목표 일정이 완전히 엉터리가 아니라면 약&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 30% &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;정도의 시간을 들여서 분석의 목적은 이룰 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. 20%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 하든&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 30%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 하든&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 40%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 하든 그 목적을 이룰 수 있게 진행하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;목적은 다음 단계인 설계와 구현에 필요한 일정과 비용을 정하기에 충분한 정보를 명시하는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;제품 개발을 완성하는 것이 아니기 때문에&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 30%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이건&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 40%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이건 목적에 맞게 분석을 완성할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석의 결과는 유연하게 조절이 가능하다는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;얼마나 자세하게 명시하는 가에 따라 시간을 조절할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석가로서의 경험이 있다면 당연히 그 정도는 조정할 줄 알아야 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;이 분석의 결과물의 논리적인 이름은 총칭해서&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;라고 한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;물리적인 문서 이름은 천차만별이고 회사마다 다르다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;문서의 종류와 갯수도 다르다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하지만 똑 같은 원칙에 의해서 작성된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;필자가 몇십년동안 수행했던 크고 작은 수백개의 프로젝트가 똑같은 형식의 결과물이 나온 적은 한번도 없었다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기서는 아직 어떤 결과물이 나오는 지 궁금해 할 수는 있지만 나중으로 미룬다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;하여튼 분석이 완료된 이 시점에서는 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;+&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구현&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot; &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단계에서 해야 할 일이 얼마나 되는지 알 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;+&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구현&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;을 얼마에 계약을 할 지를 비로서 아는 시점이 온 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기에서의 계약은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;Turn-key &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;게약이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;몇 명의 개발자가 일을 하는 가는 전혀 신경쓰지 않는다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. SRS&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;에 명시된 대로 개발해 주는지 아닌지가 핵심이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이미 개발내용이 명시된 상태에서 하기 때문에 우선협상 같은 것은 당연히 필요 없다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;즉 분할 발주를 한다면 계약은 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(1) &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;과 &lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(2) &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;+&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;구현&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 두단계로 나눈다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;또 분석의 중요한 목적의 하나인 이 프로젝트를 계속할 것인다 포기할 것인가도 여기서 결정할 수 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. 30%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 비용을 들여서 분석을 했다고 해도 과감히 매몰비용&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;(Sunken Cost)&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;으로 버리는 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. 30%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;의 투자가 아까와서 안해야 할 프로젝트에 남은&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 70%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 투자하는 것은 바보같은 직이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;설계와 구현 단계는 계약에서는 나누지 않는다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;연속성이 훨씬 더 중요하기 때문이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;그리고 설계와 구현의 경계선을 긋는다는 것은 거의 불가능하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계에 참여하지 않은 상태에서 코딩을 할 수 있게 하려면 엄청난 양의 문서가 필요하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계와 구현을 분할하겠다는 생각은 그럴듯해 보이지만 현실과는 거리가 멀고 착각에 불과하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단계는 나눌지 모르지만 대부분의 개발자는 연속적으로 투입된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계와 구현을 나누어 계약하는 경우는 필자의 실리콘밸리 경험상 본 적도 없을 뿐더러 가능하다고 해도 엄청난 시간의 낭비이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계까지 나간다는 것은 이미 개발을 포기하지는 않는다는 전제를 가지고 있다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;즉 어차피 구현까지 계속 한다는 가정인 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;설계까지 했다면 거의&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; 70%&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;를 진행한 것인데 이제 와서 포기한다는 것은 애초부터 계획이 심각하게 잘못되었다는 것을 의미한다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;여기까지 오다 보면 마치 거대한 프로젝트를 대상으로 얘기하는 것 같지만 이 원칙은 학교숙제할 때도 적용된다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;규모에 상관 없이 가장 빨리 그리고 효율적으로 개발하기 위한 원칙은 동일하다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;단 같은 원칙하에서 프로젝트에 따라 응용법은 달라지며 이 응용역량이 높은 연봉을 받는 진정한 분석 역량인 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;이제 두 단계로 계약을 하는 목적과 그 단계의 경계는 절대적으로&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt; &quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;&quot;&lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이 끝나는 시점이 되어야 한다는 것을 이해할 수 있을 것이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;이런 진리를 확실히 이해했다면 그 목적에 적합한 역량을 키우는 것이 다음에 해야 할 일이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;. &lt;/span&gt;&lt;span lang=&quot;KO&quot;&gt;분석을 수행하면서도 항상 기억해야 하는 것이 분석의 목적이다&lt;/span&gt;&lt;span lang=&quot;X-NONE&quot;&gt;.&amp;nbsp;&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/6108215576064720049/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=6108215576064720049' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/6108215576064720049'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/6108215576064720049'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/02/3.html' title='분석 #3 분할 발주의 허구와 진실'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-7970175439089825385</id><published>2016-01-30T02:22:00.002-08:00</published><updated>2016-01-30T06:37:32.399-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석 #2 개발자가 분석을 잘해야 하는 극히 세속적인 이유</title><content type='html'>&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;TV &lt;span lang=&quot;KO&quot;&gt;프로그램 중에 동물농장이라는 프로가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;외국&lt;/span&gt; TV&lt;span lang=&quot;KO&quot;&gt;에서도&lt;/span&gt; &quot;&lt;span lang=&quot;KO&quot;&gt;위험한 구출&lt;/span&gt;(&quot;Dangerous Resque&quot;)&lt;span lang=&quot;KO&quot;&gt;라는 프로그램을 방영한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;위험에 닥친 동물을 구조하려는 것인데 구조에 협조하는 동물은 보지 못했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;도망가려고 기를 쓰고 심지어는 구출대원을 공격하기도 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;자신을 위한 일인데도 이해를 하지 못하니 그럴 수 밖에 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;인간도 그렇게 다르지 않다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소크라테스가&lt;/span&gt; &quot;&lt;span lang=&quot;KO&quot;&gt;유일한 악은 무지이다&lt;/span&gt;&quot; (The only evil is ignorance)&lt;span lang=&quot;KO&quot;&gt;라는 말을 했고 아인슈타인도&lt;/span&gt; &quot;&lt;span lang=&quot;KO&quot;&gt;너 자신의 무지를 과소평가하지 말라&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;고 했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소크라테스가 살던&lt;/span&gt; 2500&lt;span lang=&quot;KO&quot;&gt;년 전이나 지금이나 인간은 무지에 관한한 개선되지 않았다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;찬란한 과학문명의 발전에 비하면 생각하는 방식은 진화하지 않았다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;과학의 발전에 상관 없이 무지와의 싸움은 영원히 끝나지 않을 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;언젠가는 지구를 떠나 우주로 날아가서 살 정도로 과학이 발전하겠지만 그렇다고 인간의 생각이 바뀌기는 어려울 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;무지가 좋은 점은 현명한 자는 무지에서 벗어나 다른 사람들과 차별화할 수 있는 기회가 있다는 것이다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;어떤 행동을 유도하기 위해 이론적이나 추상적으로 좋은 이유를 말하기 보다는 현실적으로 왜 분석이 중요할 까 하는 얘기를 세속적으로 돈과 관련해서 해 보려고 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;가치를 돈과 연결하는 것이 세속적이기는 하지만 인간의 속성상 설득하기에 가장 좋은 방법이 아닐까 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;사실 필자가 국내에서 가치를 가질 수 있었던 것도 세속적인 차이점을 부각시킬 수 있었기 때문이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석을 이해하기도 전에 먼저 왜 중요한지 그리고 왜 해야하는 지에 대해 동기를 부여해 보도록 한다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어의 모든 용어는 건축에서 시작되었다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;설계라는 말을 가장 쉽게 이해할 수 있는 분야가 건축이다&lt;/span&gt;.&amp;nbsp; &lt;span lang=&quot;KO&quot;&gt;건물을 건축하려면 두 단계가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;설계와 시공이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그런데 건축과 소프트웨어와는 용어가 약간 다르다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;건축은 두 단계가 있지만 소프트웨어에서 말하는 설계는 시공 쪽에 가깝다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;즉 소프트웨어에서는 분석&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;구현의&lt;/span&gt; 3 &lt;span lang=&quot;KO&quot;&gt;단계가 있다&lt;/span&gt;. &amp;nbsp;&lt;span lang=&quot;KO&quot;&gt;소프트웨어의 분석은 건축에서의 설계와 같고 설계와 구현을 합쳐서 건축에서의 시공과 비슷하다&lt;/span&gt;. &amp;nbsp;&lt;span lang=&quot;KO&quot;&gt;이 점이 이상스럽게 생각될지 모르지만&lt;/span&gt; 2&lt;span lang=&quot;KO&quot;&gt;단계와&lt;/span&gt; 3&lt;span lang=&quot;KO&quot;&gt;단계를 매핑하려니 그렇게 보는 것이 가장 가깝다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;나중에 그 이유를 잘 알 게 될 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소프트웨어에서 규모에 따라 비효율성을 피하기 위해 한 단계를 없애고 두 단계로 축소한다면 &lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;과&lt;/span&gt; &quot;&lt;span lang=&quot;KO&quot;&gt;구현&lt;/span&gt;&quot; &lt;span lang=&quot;KO&quot;&gt;이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;지금은 추상적인 단계이니 현실적으로 분석이 왜 중요한가는 이해하기가 어렵다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;세속적으로 돌아와서 건축에서 설계를 담당하는 설계가와 시공하는 인부중 누가 더 임금을 많이 받겠는가&lt;/span&gt;? &lt;span lang=&quot;KO&quot;&gt;나의 가치를 올리자면 &amp;nbsp;다른 사람들과 차별화된 기술을 가져야지만 임금을 많이 줄 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;이것은 세상의 진리이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;차별화된 가치가 없으면 누구도 돈을 많이 주지 않는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;차별화된 가치를 가지고 있으면 누군가가 그 가치에 해당하는 비용을 지불하고 사용할 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;반대의 입장이 되어서 생각해 보면 너무 당연하다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;손자병법에서도 나를 알고 적을 알아야 한다고 했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소프트웨어 개발자의 임금을 올려야 한다고 근거 없이 주장할 것이 아니라 내가 다른 사람이 인정하는 그만한 가치를 가지고 있으면 저절로 올라간다&lt;/span&gt;. &amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;공사장의 인부가&lt;/span&gt; 30&lt;span lang=&quot;KO&quot;&gt;년 경험이 있으니까 임금을 많이 달라고 해야 한계가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;노동 산업이기 때문에 육체적으로 절정에 있고 숙련된 기술이 있을 때 가장 가치가 높다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;아마&lt;/span&gt; 30&lt;span lang=&quot;KO&quot;&gt;대가 전성기일 가능성이 많다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;바로 소프트웨어에서 코딩이 그렇다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;물론 코딩도 수준이 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하지만 그건 숙련도이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;구글에서 나이 많은 나이 많은&lt;/span&gt; 50,60&lt;span lang=&quot;KO&quot;&gt;대의 개발자가 밤도 못 세우는데 왜 임금을 많이 받으면서 일을 할 수 있을까를 생각해 보아야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;바로 건축에서의 설계이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;설계시에는 시공은 시작도 하지 않았다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;시공은 나중에 누가 하든 할 사람이 많다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;새벽시장의 인부도 얼마든지 구할 수 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소프트웨어 개발자로서 새벽시장의 인부가 되기를 원하는 사람은 없을 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그런데 새벽 인부시장에서 구출하는 방법을 가르쳐 주어도 절대 나오려고 하지 않는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;인부들에게 설계를 할 줄 알아야 한다고 말해야 현실적이 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;오랜시간이 걸리고 지금와서 공부를 시작할 수도 없고 너무 어렵다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그렇게 때문에 조금이라도 일찍 인부가 아닌 설계가가 되도록 노력해야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;옷을 만들 때도 디자이너가 디자인을 하고 수공작업은 중국과 같이 값싼 인부를 사용한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;소프트웨어라고 다르다고 생각하면 거대한 착각이며 스스로의 가치를 결정짓는 데 엄청난 잘못을 하게 된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;일단은 소프트웨어나 하드웨어나 옷 만드는 것이나 다 같다라는 관점에서 생각해야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;다른 점은 나중에 발견하도록 한다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;여기서 요새 유행하는 애자일 방법론으로 시공을 미화하고 합리화하지 않기 바란다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;애자일을 잘못 해석하여 영원히 인부의 길로 확실히 자리매김하는 불행한 경우를 많이 보았다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;모짜르트는 곡을 쓸 때 머리로 작곡하고 실제 종이에 적는 것은 순식간에 했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;생각없이 처음부터 종이에 적어야 좋은 곡이 나올 수 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;다른 산업에서의 설계는 소프트웨어에서의 분석단계와 같으니 여기서부터는 분석이라는 용어를 사용할 때 다른 산업에서의 설계를 연상하면 된다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;분석해서 나온 결과를 다른 사람에게 보여 줄수 있어야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;모든 지식산업에서는 머리로 생각을 해야 하고 생각의 결과가 기록되는 문서가 있어야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;생각만 하고 문서를 적지 않고 공사를 해야 한다면 생각의 가치가 없이 또 인부로 전락하고 많다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;역시 임금을 많이 받을 수 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;보여줄 수 없으면 사기꾼이나 다름 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;모짜르트가 생각만 하고 악보를 적지 않았자면 무슨 가치가 있는가&lt;/span&gt;?&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어 개발자로서의 가치를 높이고 임금을 많이 받으려면 그에 해당하는 기술을 가져야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그것이 코딩은 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그렇다면 분석이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;현실에서는 분석의 결과가 너무 다양한 상태로 나타나기 때문에 운이 좋아 분석의 결과물을 본 적이 있다고 해도 별 것 아닌 것 같이 보이기도 하고 언제든지 따라할 수 있을 것 같지만 착각이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;손자병법이&lt;/span&gt; A4 &lt;span lang=&quot;KO&quot;&gt;용지에 가득 적으면 두 장 밖에 안되는&lt;/span&gt; 6&lt;span lang=&quot;KO&quot;&gt;천여자에 불과 하지만 어떻게 응용하는 가에 따라 손자병법이 될 수도 있고 그냥 평범한 글자의 집합이 될 수도 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;대부분의 사람들에게는 후자가 될 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;추상적인 것에서 원칙을 지키면서 현실에서 응용하는 것이 가장 어렵다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;천재라면 혼자서 그 원리를 파악할 수도 있지만 배우는 것이 효율적이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;춘추전국시대 때 &lt;/span&gt;6&lt;span lang=&quot;KO&quot;&gt;천자에 불과한 손자병법만을 보고 손자를 오나라의 대장군에 임명한 오나라 왕 합려도 대단한 통찰력을 가진 사람이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;천재는 천재를 알아보는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 후에 모든 사람이 손자 병법을 읽었지만 읽은 장군이나 안 읽은 장군이나 적군인 초나라는&lt;/span&gt; 3&lt;span lang=&quot;KO&quot;&gt;배나 많은 군사를 가지고도 모든 전쟁에서 다 패했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;손자가 병졸들 같이 칼을 잘 쓴 것은 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;병졸보다 칼 싸움은 못하지만 대장군으로서 인정받아 부귀와 영화를 누리면서 살았다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;병졸들이 칼 싸움을 아무리 잘한다고 한들 한계가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;숙련된 인부도 인부의 한계를 벗어나지 못한다&lt;/span&gt;. &amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;내가 개발자로서 차별화 할 수 있는 가치가 무엇인지를 상식적으로 생각해 보아야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;수 많은 인부 중의 한 사람으로 살겠다면 그건 너무 쉽다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;옆에 있는 수 많은 개발자들이 하는 것과 똑같이 하면 된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그러면 모든 개발자는 똑 같은 대우를 받을 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;자신은 머리가 좋다고 생각할지 모르지만 인부세계에서 조금 기술이 더 좋다고 해서 숙련공으로 인정받을 뿐이지 &lt;/span&gt;10&lt;span lang=&quot;KO&quot;&gt;배&lt;/span&gt;, 100&lt;span lang=&quot;KO&quot;&gt;배의 가치가 생기지는 않는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 사람이 없더라도 더 싼 숙련공을 여러명 투입해도 된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;손자는 여러 명의 병졸로 대체할 수 있는 사람이 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그렇기 때문에 가치가 있는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;어렵지 않으면 차별화 하기 어려운 인부에 불과하다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;보기에 쉬워 보인다면 다른 사람도 마찬가지이고 &amp;nbsp;차별화 할 수 있는 가치는 아닌 것이 분명하다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;일단 어려워야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그리고 역설적으로 왜 그런 식으로 시작해야 하는지 이해가 되지 않아야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;모든 사람이 쉽게 설득되어서 시작하게 된다면 또 가치가 작아진다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;오나라와 합려와 손자를 추천한 오자서 두 사람만이 손자병법을 이해했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 후에도 다른 사람들은 대부분 손자를 시기하고 방해했다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;자신의 가치를 극대화 해서 돈을 많이 받기 위해서는 세 단계가 어려워야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;먼저 왜 해야하는 지를 이해하기가 어려워야 하고&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;이해했다고 하더라도 원칙을 잘 이해해야 하고&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;그랬다고 해도 실전에 응용하기가 어려워야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그래야만 최고의 가치가 있는 것이고 쉽게 할 수 있다고 한다면 이론적인 방법론에 불과하거나 착각일 뿐이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;실리콘밸리는 회사에서 그런 환경을 만들어 주어 자신도 모르는 사이에 그런 기술을 쌓아간다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그러면서 오랜 경험과 함께 어렵게 습득한 가치로 인해 실리콘밸리의 백발이 성성한 개발자들이 많은 임금을 받으면서 회사에서 중요한 사람으로 인정을 받으며 절대 감원시키지 않은 안전한 직업으로 미국에서 가장 인기 있는 직종으로 꼽히는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;코딩만 열심히 해서는 차별화가 불가능하고 그런 대접을 절대 받을 수 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;무엇인가로 차별화를 해야 하는데 그것은 분석 밖에 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석을 잘하기 위해 첫 단계가 먼저 설계를 잘하는 것이라는 개념만 알려주고 나중에 현실에서 벌어지는 분석과 설계의 미묘하고 애매모호한 경계에 대해서 자세히 설명하겠다&lt;/span&gt;.&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/7970175439089825385/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=7970175439089825385' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7970175439089825385'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7970175439089825385'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/01/blog-post_30.html' title='분석 #2 개발자가 분석을 잘해야 하는 극히 세속적인 이유'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-1318761108376900300</id><published>2016-01-24T03:19:00.003-08:00</published><updated>2016-01-24T03:19:59.388-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><title type='text'>분석  #1  소프트웨어의 분석의 본질은 무엇인가?</title><content type='html'>&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;이 포스트는 필자가 이제 시작하려는 실전 소프트웨어&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&quot; &lt;span lang=&quot;KO&quot;&gt;시리즈의 첫 번째 포스트이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;이전에 포스트한&lt;/span&gt; SWEBOK&lt;span lang=&quot;KO&quot;&gt;의 분석단계에 대한 번역을 하면서 소개를 했지만 이 시리즈에서는 현실에 더 가깝고 실리콘밸리에서의 경험을 바탕으로 실무에서 도움이 될 자세한 내용을 적으려고 한다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어는 인류역사상 가장 복잡한 지식산업이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;지식산업의 특징은 한 사람이 여러 사람을 모은 것 보다도 뛰어날 수 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;페이스북의 주커버그가 개발자&lt;/span&gt; 1&lt;span lang=&quot;KO&quot;&gt;명이&lt;/span&gt; 100&lt;span lang=&quot;KO&quot;&gt;명보다 더 뛰어날 수 있다고 했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;바둑이나 체스와 같은 지식 활동에서도 상급자 한 명이 하급자&lt;/span&gt; 100&lt;span lang=&quot;KO&quot;&gt;명이 합한 것을 이길 수 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;이런 지적차이가 없이 백명을 합해서 한명을 이길 수 있다면 노동산업일 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그럼 소프트웨어의 어떤 부분이 이렇게 큰 차이를 만들어 낼까를 항상 염두에 두면서 지적인 생각을 많이 해야 하는 단계가 언제일까 하는 답을 스스로 찾기 바란다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpLast&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어를 개발할 때 분석&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;설계&lt;/span&gt;, &lt;span lang=&quot;KO&quot;&gt;구현 단계가 있다는 것은 누구나 다 들어 보았을 것이다&lt;/span&gt;.. &lt;span lang=&quot;KO&quot;&gt;그런데 현실에서 제대로 행하기는 쉽지 않다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석이라는 단어가 너무 추상적이기 때문이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석을 항상 하면서도 자기는 분석을 안한다고 생각하는 실리콘밸리의 개발자도 있고 분석이 무엇인지도 모르면서 자기는 분석 잘한다고 하는 국내의&lt;/span&gt;&amp;nbsp; &lt;span lang=&quot;KO&quot;&gt;개발자도 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;마치 야구선수에게 만류인력법칙을 아냐고 물어보면 모른다고 할 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하지만 공이 떨어지는 궤도를 가장 잘 파악해서 잡아내는 것을 보면 만류인력을 몸으로 잘 실행하고 있는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;실행면에서 는 물리학교수보다 더 잘한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;증기기관차를 발명한 사람들도 열역학이 생기기도 전에 발명했다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 만큼 분석이라는 단어는 극히 추상적인데다 이론과 현실의 착각에서 부터 모든 사람들이 다르게 해석하고 평가할 수 있는 위험한 단어이기도 하다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;각자 생각하는 분석의 정확한 정의가 다를 수 밖에 없지만 여기서는 실리콘밸리에서 행하는 통상적인 분석을 가정하고 진행한다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;분석을 제대로 하지 않고도 지금까지 소프트웨어 개발자로서 개발하는 데 지장이 없다면 분석이 꼭 필요한 것인가&lt;/span&gt;? &lt;span lang=&quot;KO&quot;&gt;이는 내가 인생을 살아가는데 있어서 학교는 꼭 가야하는가&lt;/span&gt;? &lt;span lang=&quot;KO&quot;&gt;라는 질문과 비슷하다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;학교를 가지 않아도 생존하는 데는 문제가 없었고 가끔 크게 성공하기도 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;결국은 필수냐 아니냐의 문제가 아니고 선택의 문제라고 할 수도 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그런데 경쟁을 해야 한다면 얘기가 다르다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;취미생활이라면 적당히 해도 되고 잘하든 안하든 문제가 없지만 다른 사람과 경쟁을 해서 이겨야 한다면 최선의 방법을 택해야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;필요하다 아니다의 문제가 아니고 경쟁에서는 최선의 방법이 필수가 된다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;소프트웨어를 개발한다는 것은 지적산업이라는 점에서 자동차를 만드는 것이나 그림을 그리는 것과 같다&lt;/span&gt;.&lt;span lang=&quot;KO&quot;&gt;하는데 그렇다면 개발하는데 지식산업다운 모습을 가져야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그림을 그리기 전에 스케치를 해야 한다거나 자동차를 만들기 전에 설계를 해야 한다거나 심지어는 옷을 만들기 위해서도 디자인을 해야 한다면 아무도 이의를 제기하지 않는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;너무 당연하기 때문이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그런데 소프트웨어에서 분석을 해야 한다고 하면 안하기 위해 핑계를 대며 노력하는 것이 국내의 현실이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;억지로 시켜야 할 수 없이 대충 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;물론 제대로 잘 하고 있는 가는 나중에 얘기할 또 다른 큰 이슈이기 때문에 여기서는 넘어간다&lt;/span&gt;. TV&lt;span lang=&quot;KO&quot;&gt;를 보다보면 동물농장이라는 프로에서 가끔 위험에 처한 동물을 구조하려는 경우가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그런데 동물들이 자신을 위한 것인데도 순순히 구조를 받아들이는 것이 아니라 구조를 당하지 않으려고 갖은 발악을 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;이 경우와 비슷하다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;폭포수방법론이니 애자일 방법론이니등 방법론과 분석의 필요성을 연관지어서 생각하는 것은 원칙과 방법론을 혼동해서이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;폭포수나 애자일 벙법론이 좋다 나쁘다 할 수 있는 것은 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;잘못 해석하면 해악을 끼칠 수가 있다&lt;/span&gt;. &amp;nbsp;&lt;span lang=&quot;KO&quot;&gt;애자일 경우에는 분석을 하지 않아도 된다는 착각을 심어주기 딱 좋은 사상을 가지고 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;마크 트웨인의 말처럼 건강에 관한 책은 오타로 인해 죽을 수도 있다는 말처럼 착각을 불러 일으켜 해를 끼치기 좋게 되어 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석의 본질을 이해하기 위해서는 당분간 방법론에 대한 생각을 하지 않는 것이 좋다&lt;/span&gt;. &quot;Unteach&quot; &lt;span lang=&quot;KO&quot;&gt;라고 생각을 비워보자&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;어렵지만 방법론을 배웠더라도 잠시 안 배운 것처럼 머리에서 지우도록 하자&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;구글에서도 분석작업을 하지 않고 설계부터 하는 경우도 많다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;많다기 보다는 겉으로 그렇게 보인다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;필자도 이전에 그랬었다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그래서 겉으로 보기에 분석작업을 하지 않는다고 생각한다면&lt;/span&gt;&amp;nbsp; &lt;span lang=&quot;KO&quot;&gt;착각이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하기는 하되 경우에 따라 방법이 다른 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;지금까지 필자가 평생동안 수 백번의 프로젝트를 해 왔지만 똑같은 정형화돤 기법으로 분석을 하는 경우는 없었다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;즉 어떤 샘플이나 템플릿을 보고 작성할 수 는 없다는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;원칙을 이해해야 하기 때문에 추상적이고 혼란이 생긴다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;분석의 본질은 무엇인가를 실행하기 전에 전체적으로 생각해 보는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;방법은 그 다음 문제이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;학교숙제와 같이 한번만 하고 끝날 프로젝트는 굳이 분석에 많은 투자를 하지 않아도 규모가 작기 때문에 큰 피해가 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;구동만 되면 된다는 사상이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하지만 피해는 크지 않지만 비효율적인 것은 사실이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;필자는 학교숙제를 비롯헤 간단한 문제를 풀 때로 분석을 하고 설계를 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;형식은 때에 따라 다르다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하지만 아무리 간단해도 분석을 해야 더 빠르다는 것을 몸으로 알고 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;국내 개발은 대부분 한탕주의 식으로 진행한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;미래에 대한 고려를 할 필요가 없는 &lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;이번만 끝내면 된다&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;는 환경에서는 당연할 수도 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;이 세상 모든 일에는 좋은 점과 나쁜 점이 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;외국 속담에 어떤 남자가 마음에 드는 예쁜 여자와 결혼을 하고 싶은데 그 여자와 결혼을 하려면 추한 쌍동이 자매를 같이 데려가야 한다는 조건이 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;국내에서 문화적으로 성행하게 된 한탕주의 개발이 좋은 점은 다음 차세대 프로젝트를 금방 다시 할 수 있기 때문이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;개발자들의 수요가 더 많이 필요하고 돈이 잘 도니 경제가 잘 돌아간다고 미화할 수 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그러나 그런 모순적인 방법은 곧 냉혹하고 무서운 현실에 부딪치게 된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;바로 국제 경쟁력이다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;국내 경쟁력은 별 문제가 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;잘못한다고 해도 회사가 개발비용이 조금 많이 들고 품질이 나빠서 고객이 떨어져 나갈 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;하지만 경쟁자도 그렇다면 큰 문제가 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;도토리 키재기이기 때문이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그렇지만 치명적인 한계가 온다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 한계는 바로 글로벌 경쟁애서 뒤떨어지는 것이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그러다 보면 소프트웨어 산업이 황폐화 되고 장기적으로 개발자나 회사나 국가나 모두 피해를 입는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;그 이유도 모르니 문제를 엉뚱한 데서 찾고 많은 노력을 기울여도 한계가 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;지적산업의 특성을 모르기 때문이다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;구글 같은 글로벌 기업에 가 보면 젊은 개발자나 &lt;/span&gt;5,60&lt;span lang=&quot;KO&quot;&gt;대의 나이 많은 개발자가 똑같이 많다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;감원을 시킬때는&lt;/span&gt; Seniority &lt;span lang=&quot;KO&quot;&gt;라는 방식으로 젊은 사람부터 내보내는 것이 통상적이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;젊은 사람들은 다시 구할 수 있지만 경력자는 다시 구하기가 어렵고 회사에서 리더가 없어지는 것이기 때문에 타격이 크다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;경력이 많을 수록 전체를 보는 통찰력이 있고 오랜 경험으로 시행착오를 줄인다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;젊은 병졸이 힘이 좋을 지는 모르지만 전쟁을 수행할 수는 없다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;백발이 성성할 때 까지 오래 일하고 연봉이 높아지려면 코딩을 줄이고 전체를 보는 지적인 분석과 설계를 해야 한다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;코딩하는 인력은 나이가 들면 젊은 개발자들에게 떨어질 수 밖에 없다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;믿기 싫더라도 인간의 신체가 그렇게 되어 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;젊었을 때 잘 할 수 있는 것이 있고 나이가 들어 잘 할 수 있는 것이 있다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;젊은 사람의 기술만으로는 그 가치가 오래 가지 않는다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;지적으로 성숙해 지고 전체를 볼 수 있는 역량이 바로 백발 개발자의 가치이다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;분석을 &lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;요구사항 분석&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;등과 같은 단편적인 용어로 표현하면&lt;/span&gt; 100% &lt;span lang=&quot;KO&quot;&gt;잘못된 상상을 하게 된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;분석은 절대로 남을 따라하거나 어떤 것을 흉내 내서 되는 것이 아니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;대충해서도 안된다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;바둑을 대충 두면서 이기기를 바란다면 망상이다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;목적에 따라 적절한 수준으로 해야 중요한 가치가 있다&lt;/span&gt;. &quot;&lt;span lang=&quot;KO&quot;&gt;적절히&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;와&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;적당히&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;는 다르다&lt;/span&gt;. &quot;&lt;span lang=&quot;KO&quot;&gt;적절히&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;는 현실을 고려한 유연성을 의미하지만 &lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;적당히&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;는 소프트웨어에서 만병의 근원이다&lt;/span&gt;. &quot;&lt;span lang=&quot;KO&quot;&gt;행동하기 전에 충분히 생각하고 적어서 정확히 표현해라&lt;/span&gt;.&quot; &lt;span lang=&quot;KO&quot;&gt;하는 것이 지금의 추상적인 수준에서 분석의 본질에 대해 말할 수 있는 표현이다&lt;/span&gt;.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;여기서는 지식산업의 핵심과 소프트웨어에서의 어떤 부분이 지식산업의 핵심일까 하는 것을 생각해 보는 기회로 하자&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;앞으로의 포스트에서는 여러 관점에서 구체적으로 들어가 보자&lt;/span&gt;.&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoListParagraph&quot;&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/1318761108376900300/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=1318761108376900300' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1318761108376900300'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/1318761108376900300'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/01/1.html' title='분석  #1  소프트웨어의 분석의 본질은 무엇인가?'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-2204726851557494867</id><published>2016-01-24T02:16:00.001-08:00</published><updated>2016-01-24T02:18:05.600-08:00</updated><title type='text'></title><content type='html'>&lt;br /&gt;&lt;br /&gt;구독하고 계신 독자들께 감사드립니다.&lt;br /&gt;&lt;br /&gt;&lt;span lang=&quot;KO&quot;&gt;지금까지 블로그 호스팅을 개인적으로 하다가 관리의 시간을 줄이고 블로그 기사를 쓸 수 있는 시간을 조금이라도 더 가지기 위해 구글&lt;/span&gt; Blogger&lt;span lang=&quot;KO&quot;&gt;로 옮겼습니다&lt;/span&gt;. &lt;span lang=&quot;KO&quot;&gt;모양도 변경되고 기능이 조금 다른 점이 있으나 앞으로 가면서 정리하고 또 자주 포스팅하려고 합니다&lt;/span&gt;.&lt;br /&gt;&lt;div class=&quot;MsoNormalCxSpFirst&quot;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;span lang=&quot;KO&quot;&gt;당분간은 소프트웨어 개발에서 가장 중요하고 국내 소프트웨어 역량 중에서 가장 취약한&lt;/span&gt; &quot;&lt;span lang=&quot;KO&quot;&gt;분석&lt;/span&gt;&quot;&lt;span lang=&quot;KO&quot;&gt;에 대한 기사를 계속하려고 합니다&lt;/span&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormalCxSpMiddle&quot;&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/2204726851557494867/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=2204726851557494867' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/2204726851557494867'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/2204726851557494867'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2016/01/blog-post.html' title=''/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-7835132248135384839</id><published>2015-07-26T07:00:00.000-07:00</published><updated>2015-11-28T23:55:05.504-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="SWEBOK(소프트웨어 지식체계)"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><category scheme="http://www.blogger.com/atom/ns#" term="프로세스"/><title type='text'>SWEBOK - SW 프로세스 #3 프로세스 관리</title><content type='html'>SWEBOK 해설 SW Process #3 프로세스 관리 - 2015-07-26&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 이번 번역을 시작하기 전에 회사에서의 상황에 대해 한마디.&lt;br /&gt;회사에서 프로세스를 정의하고 구체적으로 프로세스를 따라서 일을 하기 위해서는 &quot;프로세스 다이어그램&quot; 이라는 것을 만들게 된다. 프로세스를 관리하기 위해서는 핵심적인 문서이다. 프로세스 다이어그램은 벤처회사인 경우 10 페이지 일 수도 있고 대기업인 경우 수천 페이지 일 수도 있다. 그 만큼 회사에 따라 프로세스의 숫자와 상세도가 다양하지만 수십 명의 개발자가 일하는 회사에서 프로세스 다이어그램 하나 없이 개발을 하고 있는 경우는 아직은 프로세스의 중요성과 필요성을 인식하지 못하는 상태라고 할 수 있다. 천재라고 하더라도 프로세스 다이어그램이 필요 없다고 생각하는 것은 총 잘 쏘는 병사가 전쟁을 수행하겠다는 것과 비슷하다. 회사에서 회계관리를 머리로 하는 것과 비슷하다. 새 직원이 들어왔을 때 가르쳐 주기도 어렵다. 프로세스라는 용어에 대해 과거의 잘못된 경험에서 온 거부감을 고집하기 보다는 모든 사람이 체계적이고 편안하게 일하는 기본 규칙이라고 생각하기 바란다. 물론 더 위험한 것은 이론가들이 만들어 놓은 과도한 프로세스이다. 소크라테스가 말한 &#39;무지한 사람이 하는 행위는 절대 선이 될 수 없다 (The only evil is ignorance)&quot;가 잘 적용되는 경우이다. 소프트웨어 공학이라는 용어자체가 &quot;현실&quot; 이라는 의미를 가지고 있듯이 본질적으로 이론가들이 가이드 하기에는 매우 위험한 분야이다. &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;8장 Software Engineering Process (소프트웨어 공학 프로세스)&lt;br /&gt;1. 소프트웨어 프로세스 정의 ( 이전 포스트)&lt;br /&gt;1.1 소프트웨어 프로세스 관리 (Software Process Management)&lt;br /&gt;&lt;br /&gt;소프트웨어 프로세스 관리의 2가지 목적은 프로세스를 새로 도입할 때나 개선을 하려고 할 때 효율성(Efficiency)과 효과(Effectiveness)를 높이기 위한 것이다. 프로세스는 개인, 프로젝트, 조직 수준에서 벌어지는 모든 프로세스를 포함한다. &lt;br /&gt;&lt;br /&gt;통상적으로 제품을 개발하는 있어서 효율성과 효과를 증가시킨다는 기대에서 프로세스를 도입하거나 개선을 하게 된다. 최종 목표는 개발비용, 개발일정, 제품품질을 향상시키는 것이다. 그를 위한 프로세스의 도입, 조직의 변경, 그리고 인프라구조의 변경(새로운 기술 도입이나 도구의 변경 등)은 모두 밀접하게 연관되어 있다. 프로세스 변경은 소프트웨어의 제품뿐 아니라 조직의 변경도 유발한다. 프로세스 변경은 전 조직에 파급효과(Ripple Effect)를 가져온다. 예를 들면 IT의 도구나 기술의 변경은 대부분 프로세스의 변경을 요구한다.&lt;br /&gt;&lt;br /&gt;일부 과정에서 신규 프로세스가 도입될 때 다른 기존 프로세스가 변경될 지도 모른다. 예를 들면 개발과정에 새로운 검사 프로세스를 도입하면 테스트 프로세스가 변경될 가능성이 높다. 이런 현상을 &quot;프로세스 진화(Process Evolution)&quot;라고 한다. 이런 진화가 대규모인 경우에는 조직의 문화와 비지니스 모델도 프로세스의 변화를 수용할 수 있도록 같이 변화해야 한다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 회사의 변화는 의도적인 프로세스의 변화로 일어나기도 하지만 어떤 도구를 도입할 때도 일어난다. 예를 들어 빌드 도구, 정적분석기, SVN이나 Git와 같은 소스코드관리도구의 변경 등으로 항상 벌어진다. 그럴 때 가장 많이 하는 실수가 단순한 도구의 도입으로만 생각하는 것이다. 도구의 도입은 항상 크고 작은 프로세스의 변경으로 이어진다. 그럴 때 기존 프로세스를 처음부터 끝까지 검토해보는 것이 중요하다. 이런 경우를 위해 체계적으로 작성된 프로세스 다이어그램과 같은 문서가 필수적으로 필요하다.&lt;br /&gt;&lt;br /&gt;프로세스의 변화는 많은 비용을 초래하게 된다. 실리콘밸리와 같이 오랜 공력이 쌓인 회사에서 조차 변화는 위험하기 때문에 조심해서 수행해야 한다. 현실적으로 대규모의 급진적인 변화는 거의 없고(또 그럴 필요성도 거의 없다) 대부분은 조그만 변경을 간헐적으로 한다. 그런 조그만 변화에도 개발자들의 준법정신이 성공에 큰 역할을 차지한다. 프로세스는 모든 사람이 규칙을 따를 때 효과가 있는 것인데 독불장군이 있다면 프로세스가 제대로 정착하기는 어렵다. 특히 프로세스는 형식적인 면과 내용적인 면이 있는데 형식적인 면에서는 억지로 따라 할 지 모르지만 내용적인 면은 강제화하기도 어렵고 평가하기도 어려운 부분이다. 예를 들어 동료 검토 같은 것이 그렇다. 하는 흉내는 낼지 모르지만 시간 낭비하는 경우가 많다. 그래서 내용을 충실하게 만들 수 있는 역량이 없다면 준비된 다음에 하는 것이 좋다.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;121 소프트웨어 프로세스 인프라구조 (Software Process Infrastructure)&lt;br /&gt;&lt;br /&gt;소프트웨어 프로세스의 도입, 구현, 관리는 각 단위 프로젝트에서 시작한다. 그렇지만 프로세스는 모든 조직에서 같이 일사분란 하게 도입할 때 조직의 모든 소프트웨어에 혜택을 줄 수 있다. 소프트웨어 프로세스 인프라구조(Software Process Infrastructure)는 프로세스의 정의, 프로세스의 해석, 프로세스의 정책, 그리고 프로세스를 적용하기 위한 절차를 제공한다. 더 나아가서는 투자비용, 도구, 교육, 프로세스 도입과 유지보수에 필요한 인력을 제공한다.&lt;br /&gt;&lt;br /&gt;소프트웨어 프로세스 인프라구조는 프로젝트의 규모와 조직의 규모에 따라 다르다. 소규모의 간단한 조직과 프로젝트는 간단한 프로세스 인프라구조가 필요하다. 반대로 크고 복잡한 규모의 조직과 프로젝트는 크고 복잡한 프로세스 인프라구조가 필요하다. 큰 규모의 경우에는 프로세스의 구현과정이나 개선활동을 가이드하는 소프트웨어공학 그룹이나 운영 위원회 같은 조직이 만들어 질 수도 있다. &lt;br /&gt;&lt;br /&gt;가장 흔하게 벌어지는 잘못된 착각은 소프트웨어 프로세스의 도입이 소프트웨어 프로젝트에 추가적인 시간과 비용을 더한다는 생각이다. 당연히 프로세스의 도입과 개선에 들어가는 비용이 있다. 하지만 조직적인 프로세스의 개선이 높은 생산성, 비용절감, 재작업의 감소, 품질 좋은 제품의 혜택이 있다는 것을 경험이 보여주었다. 프로세스의 성능이 소프트웨어 제품의 품질에 영향을 미친다고 볼 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 간단하면 간단한 프로세스, 복잡하면 복잡한 프로세스가 필요하다는 너무 당연한 얘기이지만 실제로 따라 하기는 힘들다. 간단하다고 아예 안 하는 경우도 많고 큰 규모를 한 번에 하려는 경우도 많다. 변화에는 Big bang(한번에)과 Phased Approach(단계별)가 있는데 프로세스에도 Big bang이 좋은 경우도 있고 Phased Approach가 좋은 경우도 있다. 예를 들어 이슈관리시스템은 형식으로는 Big bang으로 도입하지만 내용은 Phased Approach로 서서히 향상시켜 가야 한다. 내용과 같이 경험이 쌓여야지만 제대로 수행될 수 있는 것을 Big Bang으로 수행하는 것은 불가능하다. 도구는 한 번에 준비를 해 주지만 사용은 천천히 해야 현실적이다. 골프를 하루에 다 배우겠다는 것과 같다. 단 골프채는 시작할 때 사 주어야 한다.&lt;br /&gt;&lt;br /&gt;또 얼마나 간단한가를 판단하는 것이 중요하다. 필자가 가장 많이 본 실수는 원칙을 알고 적용하는 대신에 자신이 하고 있는 잘못된 관행을 진리로 알고 프로세스로 옮기는 것이다. 원칙을 정확히 아는 것이 중요하다.  프로세스가 다른 개발방법론이 100개가 넘게 있지만 모두 원칙은 동일하다는 것을 깨닫기 바란다. 어느 날 갑자기 획기적인 방법론을 발견했다고 도입해서 사용한다면 성공할 확률은 없다. 그런 금방망이는 존재하지 않는다. 건강식품 판매자 들의 과대선전으로 생각하면 된다. 건강식품과 같이 판단 실수와 오류를 건전한 시행착오로 미화하면 안 된다. 어떤 시행착오는 성장에 꼭 필요한 경험이기도 하지만 어떤 시행착오는 조직과 자신을 회복이 불가능한 파멸로 이끄는 경우도 있다. 모든 배움이 그렇지만 소프트웨어에서도 훌륭한 스승의 역할이 그래서 중요하다.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;다음 포스트의 순서는 다음과 같다.&lt;br /&gt;2. 소프트웨어 생명주기 (SW Life Cycles)&lt;br /&gt;2.1 소프트웨어 프로세스의 분류 (Categories)&lt;br /&gt;2.2 소프트웨어 생명주기 모델 (Life Cycle Models)&lt;br /&gt;2.3 소프트웨어 프로세스 적용 (Adaptation)&lt;br /&gt;2.4 현실적인 고려 (Practical Considerations)&lt;br /&gt;&lt;br /&gt;3. 소프트웨어 프로세스 평가와 개선( SW Process Assessment and Improvement)&lt;br /&gt;3.1 소프트웨어 프로세스 평가 모델 (Assessment Models)&lt;br /&gt;3.2 소프트웨어 프로세스 평가 방법 (Assessment Method)&lt;br /&gt;3.3 소프트웨어 프로세스 개선 모델 (Improvement Models)&lt;br /&gt;3.4 연속적, 단계적 소프트웨어 프로세스 등급 (Continuous and Staged SW Process Ratings)&lt;br /&gt;&lt;br /&gt;4. 소프트웨어 측정 (SW Measurement)&lt;br /&gt;4.1 소프트웨어 프로세스와 제품 측정 (Process and Product Measurement)&lt;br /&gt;4.2 평가결과의 품질 (Quality of Measurement Results)&lt;br /&gt;4.3 소프트웨어 정보 모델 (SW Information Models)&lt;br /&gt;4.4 소프트웨어 프로세스 측정 기술 (Measurement Techniques)&lt;br /&gt;&lt;br /&gt;5 소프트웨어 공학 프로세스 도구들 (SW Engineering Process Tools)</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/7835132248135384839/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=7835132248135384839' title='2개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7835132248135384839'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/7835132248135384839'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2015/07/swebok-sw-3.html' title='SWEBOK - SW 프로세스 #3 프로세스 관리'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-3926390220267211637</id><published>2015-07-12T12:32:00.000-07:00</published><updated>2015-11-28T23:58:32.901-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="SWEBOK(소프트웨어 지식체계)"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어 공학"/><category scheme="http://www.blogger.com/atom/ns#" term="프로세스"/><title type='text'>SWEBOK - SW 프로세스 #2 정의</title><content type='html'>8장 Software Engineering Process (소프트웨어 공학 프로세스)&lt;br /&gt;&lt;br /&gt;1. 소프트웨어 프로세스 정의&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 프로세스의 정의는 매우 중요한 주제이다. 잘못 이해함으로써 소프트웨어 회사에 막대한 피해를 끼칠 수 있다. 실제 국내 소프트웨어 회사에서 많은 비용과 시간을 낭비하는 것을 보아 왔다. 프로세스라는 용어는 매우 추상적인 단어이다. 이 정의는 아무리 잘 한다고 해도 역시 추상적이다. 결과적으로 모든 사람이 &quot;프로세스&quot; 라는 용어를 다르게 해석한다. 혹은 다르게 느낀다. 각자 자신이 경험한 범위 내에서만 이해가 가능하다. 경험하지 않은 것을 정확하게 이해할 수 있는 최고의 통찰력은 극히 소수의 사람만이 가지고 있는 역량이다. 여기 SWEBOK에서도 정확한 정의를 주기 위해 많은 노력을 한 흔적이 보인다. 하지만 글자가 현실을 설명할 수 있는 한계가 있다. 필자는 많은 개발 경험으로 프로세스라는 용어에 대한 거부감도 전혀 없고 1인 회사를 해도 프로세스를 적용한다. 반면에 잘못된 프로세스를 경험한 대부분의 국내 개발자들은 프로세스 혹은 더 나아가 소프트웨어 공학에 대한 느낌이 부정적으로 되었다. 이런 감정을 바꾸기에는 많은 시간이 필요할 것이다.&lt;br /&gt;&lt;br /&gt;국내 대부분의 개발자들은 자수성가하거나 이론가들로부터 프로세스를 이론적으로 접하게 된다. 미국회사가 프로세스가 잘되어 있거나 소프트웨어 공학에서 중요하다고 하는 등 이런 저런 단편적인 사실을 잘못 이해하고 결과적으로 잘못된 프로세스를 경험하게 된다. 여기서 조심해야 할 것은 옳은 프로세스도 없지만 틀린 프로세스도 없다. 잘못된 프로세스는 잘못 적용된 프로세스이다. 즉 아무리 잘 만들어진 미국 국방부의 프로세스라고 해도 대부분의 회사에게는 나쁜 프로세스이다. 필자는 실리콘밸리의 2개 회사에서 거대한 프로세스를 경험했다. 그 프로세스가 그 회사들에는 적합하다고 생각하지만 나는 그런 회사에서 일하기를 선호하지는 않는다. 다행히도 실리콘밸리의 99% 회사와 국내 회사들은 그런 거대한 프로세스를 따라 할 필요가 없다. 그런데 이론적으로 접근하다 보면 자연적으로 거대한 프로세스가 만들어지기 쉽다. 그 것이 가장 그럴듯하게 보이기 때문이다. 그래서 필자가 말하기를 한국 소프트웨어에 독약으로 작용할 수 있는 것이 바로 프로세스이다. 적당히 사용한다는 것도 가장 추상적인 단어이기 때문에 구체적인 케이스는 불가능하다. 이런 경험의 영역이야 말로 진정한 소프트웨어 공학의 영역이며 건강식품과 같이 사기꾼들이 성행하는 분야이라는 것을 항상 주지하여야 한다.&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;이 주제는  소프트웨어 프로세스, 소프트웨어 프로세스 관리와 소프트웨어 프로세스 기반시스템과 관련되어 있다.&lt;br /&gt;&lt;br /&gt;소프트웨어 프로세스는 입력되는 산출물을 다른 출력되는 산출물로 변형시키는 일련의 행위와 업무이다. 최소한도의 경우에도 필수 입력물, 변화시키는 행위, 생성되는 산출물이 있다. 약간 복잡해 지면 entry와  exit criteria, 그리고 행위(Activity)를 잘게 쪼갠 task 로 나눈다. Task는 관리의 대상이 되는 가장 작은 단위이다. 프로세스는 Event에 의해서 시작될 수도 있고 다른 프로세스의 Output이 이 프로세스의 Input이 될 수도 있다. 프로세스가 시작하기 위해서는 초기 전제조건(Input Criteria)이 만족되어야 한다. Output 산출물의 완수조건을 포함한 모든 조건이 만족되어야지만 프로세스가 완료되었다고 말할 수 있다. &lt;br /&gt;&lt;br /&gt;프로세스는 하위프로세스(Sub-Process)를 포함하기도 한다. 예를 들면 Requirement Validation(검증)은 소프트웨어 개발을 시작하기 위해 충분한 정보가 있는지를 검증하는 프로세스인데 이는 Requirement Analysis의 하위 프로세스이다. Requirement Validation 프로세스의 Input은 Software Requirement Specification(SRS) 와 validation을 수행하기 위한 인력과 시간, Validation을 위해 사용할 도구이다. Requirement Validation 활동은 SRS의 검토, 프로토타이핑, 모델 검증 등을 포함할 수 있다. 이런 활동은 개인이나 팀 같이 행위의 주체에게 업무가 할당될 것이다. Validation 프로세스의 Output은 검증된 SRS이며 이런 SRS는 다음 프로세스인 설계와 테스트 단계에 사용된다.&lt;br /&gt;&lt;br /&gt;(*** 필자주석) 마지막 문장 중에 눈치 채기는 어렵지만 매우 중요한 내용이 들어 있다. &quot;검증된 SRS가 설계와 테스트 단계에 사용된다&quot; 라는 말에서 보면 테스트 단계가 설계단계와 함께 진행된다는 것을 인식해야 한다. 나중에 테스트 chapter에서 부가적으로 설명하겠지만 V-Model에서 보면 가장 위쪽에 SRS와 같은 수준에 Acceptance Test Plan이 위치해 있다. 결론만 간단히 얘기하자면 SRS (1page건 1000page이건 어떤 형태가 되었던 상관없다)가 있으면 테스트계획과 테스트 케이스를 만들 수 있어야 한다. SRS가 부실하면 필연적으로 테스트도 부실해 진다. 여기서 인과의 법칙에 예외를 적용하는 실수를 하지 않기 바란다.&lt;br /&gt;&lt;br /&gt;Requirement Analysis의 하위프로세스인 Requirement Validation이나 다른 하위 프로세스들은 흔히 겹치기도 하고 반복되기도 한다. 즉 하위 프로세스들은 입구와 출구를 드나들면서 몇 번 씩 되풀이 되기도 한다. &lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 이 한 문장이 바로 Iterative 개발 방법론 또는 Agile 개발방법론과 같은 의미를 얘기한다. 실리콘밸리의 99%의 프로젝트는 Water Fall 방법론을 사용하지 않는다. 즉 완벽하게 SRS를 적고 한 번의 프로세스 만에 개발하려는 환상적인 생각은 용과 같이 거의 전설 속에서만 존재하는 것이다. 그런 면에서 혹시라도 미국 소프트웨어 회사는 거대한 프로세스를 사용하고 있다는 근거 없는 착각은 하지 말기 바란다. 가장 실용적인 방법으로 개발하고 있는 실리콘밸리가 상식적으로 Water Fall 방법론을 사용할 리가 없다. 실리콘밸리가 Agile 방법을 가장 잘하고 있는 것이다. 또 관련 주제가 나왔을 때 자세히 설명하겠지만 빨리 개발하겠다고 Agile 방법론이라는 이름으로 엉터리로 개발하는 것을 합리화하지 말기 바란다. &quot;프로세스&quot; 와 마찬가지로 &quot;Agile 방법론&quot;, &quot;Lean 개발&quot;도 매우 조심해야 적용해야 할 단어이다.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;소프트웨어 프로세스를 더 자세히 부연해서 설명하자면 IT 지원조직의 유무, 소프트웨어공학 기법과 도구, 업무 환경, 프로세스 수행의 효율성을 측정하기 위한 평가지수(KPI) 등과 같이 보조 역할과 역량까지도 포함된다. 더 나아가 여기저기 기술적 역량이 필요하기도 하고 다른 부서와 협력해야 하기도 하고 관리하기 위한 활동도 포함될 수 있다. 표기법은 자연어 텍스트의 형태로 설명한 활동들의 목록, Data Flow Diagram, State Charts, BPMN, IDEF0, Petri nets and UML activity 다이어그램 등으로 표현된다.&lt;br /&gt;&lt;br /&gt;프로세스내의 변환(Transforming) 업무는 Checklist와 같이 순서적으로 정의된 Procedure의 집합으로 정의된다. &lt;br /&gt;&lt;br /&gt;항상 강조해야 할 점은 &quot;가장 좋은 프로세스&quot;는 없다는 것이다. 소프트웨어 프로세스는 선택되어야 하고 조정되어야 하고 각 프로젝트와 조직의 목적에 맞게 적절히 응용되어야 한다. 이상적인 프로세스는 존재하지 않는다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;(*** 필자주석) 추상적이긴 하지만 위에서 열심히 정의해 놓고 여기 와서 이상적인 프로세스는 없고 적절히 사용해야 한다는 말을 한다. 결국 따라 해야 할 수 있는 구체적인 방법은 얘기하지 못한다. 그게 현실이고 본질이다. 결국 경험한 만큼만 이해한다는  지식의 저주와 비슷하다. &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;다음 포스트에서는 아래 1.1.과 1.2.를 적는다.&lt;br /&gt;&lt;br /&gt;1.1 소프트웨어 프로세스 관리 (Management)&lt;br /&gt;1.2 소프트웨어 프로세스 구조 (Infrastructure)&lt;br /&gt;&lt;br /&gt;2. 소프트웨어 생명주기 (SW Life Cycles)&lt;br /&gt;2.1 소프트웨어 프로세스의 분류 (Categories)&lt;br /&gt;2.2 소프트웨어 생명주기 모델 (Life Cycle Models)&lt;br /&gt;2.3 소프트웨어 프로세스 적용 (Adaptation)&lt;br /&gt;2.4 현실적인 고려 (Practical Considerations)&lt;br /&gt;&lt;br /&gt;3. 소프트웨어 프로세스 평가와 개선( SW Process Assessment and Improvement)&lt;br /&gt;3.1 소프트웨어 프로세스 평가 모델 (Assessment Models)&lt;br /&gt;3.2 소프트웨어 프로세스 평가 방법 (Assessment Method)&lt;br /&gt;3.3 소프트웨어 프로세스 개선 모델 (Improvement Models)&lt;br /&gt;3.4 연속적, 단계적 소프트웨어 프로세스 등급 (Continuous and Staged SW Process Ratings)&lt;br /&gt;&lt;br /&gt;4. 소프트웨어 측정 (SW Measurement)&lt;br /&gt;4.1 소프트웨어 프로세스와 제품 측정 (Process and Product Measurement)&lt;br /&gt;4.2 평가결과의 품질 (Quality of Measurement Results)&lt;br /&gt;4.3 소프트웨어 정보 모델 (SW Information Models)&lt;br /&gt;4.4 소프트웨어 프로세스 측정 기술 (Measurement Techniques)&lt;br /&gt;&lt;br /&gt;5 소프트웨어 공학 프로세스 도구들 (SW Engineering Process Tools)</content><link rel='replies' type='application/atom+xml' href='http://www.ikwisdom.com/feeds/3926390220267211637/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=1365591944722180079&amp;postID=3926390220267211637' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/3926390220267211637'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1365591944722180079/posts/default/3926390220267211637'/><link rel='alternate' type='text/html' href='http://www.ikwisdom.com/2015/07/swebok-sw-2.html' title='SWEBOK - SW 프로세스 #2 정의'/><author><name>김익환(Ike Kim)</name><uri>http://www.blogger.com/profile/11340247295485319971</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//3.bp.blogspot.com/-x__od8uqpcc/Vyxog9hJalI/AAAAAAAAN9A/0W4t02UojOEtChtp6UQkq_cFYEp5ynM5gCK4B/s113/%25EA%25B9%2580%25EC%259D%25B5%25ED%2599%2598_20150722_%25EC%25A6%259D%25EB%25AA%2585%25EC%2582%25AC%25EC%25A7%2584.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1365591944722180079.post-8339452892470718371</id><published>2015-01-18T05:57:00.000-08:00</published><updated>2016-01-19T17:04:23.139-08:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="분석/요구사항"/><category scheme="http://www.blogger.com/atom/ns#" term="소프트웨어공학"/><category scheme="http://www.blogger.com/atom/ns#" term="실리콘밸리"/><category scheme="http://www.blogger.com/atom/ns#" term="정부 정책"/><title type='text'>소프트웨어 분할발주를 위해 선행해야 할 일</title><content type='html'>&lt;script type=&quot;text/javascript&quot;&gt;// &lt;![CDATA[&lt;br/&gt;(function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;);   ga(&#39;create&#39;, &#39;UA-50709339-1&#39;, &#39;ikwisdom.com&#39;);   ga(&#39;send&#39;, &#39;pageview&#39;);&lt;br/&gt;// ]]&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;color: blue;&quot;&gt;&lt;br /&gt;요새 정부에서 분할발주를 하겠다는 정책이 있다. 정책의 방향은 100% 찬성한다. 하지만 방법이 문제다. 정책의 자세한 내용을 가지고 왈가왈부해 봐야 탁상공론식으로 찬성, 반대, 우려, 상황론에 의한 합리화등 너무 많은 이슈가 얽혀 있어 쉽게 결론이 나지 않는다. 진실의 이슈가 아니라 이 이슈도 정치적인 이슈가 되어 버렸기 때문이다. 정치적인 이슈의 특징은 아무리 오랜 세월이 지나도 모양만 변형될 뿐 노블리스 오블리제는 없이 각자 이득을 취하기 위한 본질은 변하지 않는다. 일단 올바른 정책을 펴기 위해서는 먼저 본질을 정확히 파악하고 있어야 한다. 또 역량도 없이 증상만을 치료하기 위해 인기영합적인 정책을 수립한다면 필연적으로 다른 문제가 생긴다.  &lt;br /&gt;&lt;br /&gt;아래에 필자의 저서인 &quot;글로벌 소프트웨어를 말하다, 지혜 (2014/06)&quot;에서 쓴 &quot;인도에 개발 외주 주는 방법&quot; 이 있다. 이 글이 분할발주에 대한 실리콘밸리 소프트웨어 회사에서의 기본적인 원칙과 방법론을 말해준다. 원칙에 어긋나는 정책은 시행착오를 일으키며 또 몇 년의 세월을 낭비할 것이다. 또 역량이 없으면 방법이 원칙에 맞더라도 실패할 수 밖에 없다. 불행이도 국내에는 개발 앞 단계의 분석을 등한시 하는 문화가 오랫동안 진행되어 왔기 때문에 먼저 분석역량의 제고에 신경써야 할 것이다. 또 분석과 설계를 한 덩어리로 묶어서 얘기하는 경우가 있는데 이 둘은 완전히 다른 역량을 필요로 한다. IEEE SWEBOK의 분석부분을 번역해 놓은 것이 이 블로그의 SWEBOK 카테고리의 Post에 있으니 참고하기 바란다. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 20px;&quot;&gt;&lt;strong&gt;34장 인도에 개발 외주 주는 방법&lt;/strong&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;실리콘밸리를 미국이라고 하니까 백인들이 많을 것이라고 생각한다. 실리콘밸리에는 동양인들이 백인들보다 많다. 버클리 대학에도 인종으로는 동양인이 가장 많다. 특히 실리콘밸리같이 IT 분야에는 중국 개발자와 인도 개발자가 전체 개발자의 반 정도 된다. 중국이야 원래 인구가 많아 캘리포니아에 많이 살고 있었고 따라서 중국인 회사도 많았다. 필자가 1980년도에 실리콘밸리에 도착했을 때도 중국 식당이 가장 많았었다. 그러면서 미국의 전문인력 이민(H1B) 정책으로 전세계 인재들이 몰려들면서 중국과 인도의 개발자들이 대거 채용되어 왔다. 이것도 연쇄작용이라 그렇게 온 이민자들이 또 동료들을 불러오고 하니까 점점 더 많아진 것이다. 인도는 또 영어권이라는 장점 때문에 미국 회사의 외주 프로젝트를 많이 수행하면서 소프트웨어 산업이 발전하고 강국이 되었다. 그렇게 된 원인은 단 두가지이다. 싼 임금과 영어권이라는 것이다. 특별히 머리가 좋아서도 아니고 원래 소프트웨어에 적당한 문화라서도 아니다. 솔직히 정직성이나 책임감은 인도나 중국보다는 상대적으로 한국 개발자들이 더 좋다고 생각한다. 성공의 원인은 미국에서 배운 개발방식이다.&lt;br /&gt;&lt;br /&gt;미국 회사는 영어가 잘 통하고 임금이 싸다는 장점으로 인도에 많은 소프트웨어 프로젝트를 주었다. 그래서 TCS, Infosys, Wipro, Sapient 같은 세계적인 거대 시스템통합업체가 발전했다. 그러면서 미국의 소프트웨어 개발방식을 배워 강국이 되었다. 소프트웨어 개발을 맡길때 정직성을 믿고 시스템 없이 맡기는 것과 모든 개발자를 믿을 수 없는 인간이라고 가정하고 시스템을 믿고 개발하는 것과 어느 것이 좋을까?  즉 사회를 통치할 때 성선설로 보는 것과 성악설로 보는 것 중 어떤 방법이 사회를 더 평화롭게 만들 수 있을 까? 미국은 근본적으로 소프트웨어 개발은 성악설에 기반한 개발 문화이다. 누가 무슨 일을 하는 지 명확하게 정의하고 진행하는 과정에 대해서도 투명하게 돌아간다. 투명 그 자체이다. 비밀스럽게 일하는 사람들에게는 무척 거북한 시스템이다. 이런 방식은 인도와의 관계 때문이 아니고 미국 회사 내부에서도 똑같은 방식이 사용된다. 일년 365일 내가 어느날 몇 줄의 소스코드를 고쳤는지를 누구나 항상 알 수 있다. 즉 인도 때문에 개발방식이 바뀐 것은 없다. 그러면서도 창조성이 필요한 곳은 허용해 준다. 창조도 투명하게 하는 것이지 창조성이 몰래 하라고 내버려두는 무정부상태가 아니다. 법과 질서를 잘 지키는 것이 창조성과는 아무런 관계가 없다. 참견하지 않는 것은 창조성이 아니라 무책임한 것이다.&lt;br /&gt;&lt;br /&gt;국내 소프트웨어 회사에서 내부 프로젝트를 수행할 때나 외주를 줄 때나 상대가 인도라고 가정해보자. 과연 계약서에 서명을 하고 인도에 프로젝트를 줄 수 있는가? 물론 영어는 문제가 아니라는 가정하에서다. 필자가 보기에 인도에 프로젝트를 줄 수 있는 회사는 거의 없다. 국내 소프트웨어 회사는 대충 개발하는데 너무 익숙해져 있어서 그렇게 사는 게 인생인 줄 안다. 그리고 합리화를 할 수 있는 무기는 많이 있다. 대충 몇 개만 나열해 보면 다음과 같다.&lt;br /&gt;&lt;br /&gt;?	계약시에는 그렇게 자세한 내용은 알 수가 없어서 진행하면서 정해가야 합니다.&lt;br /&gt;?	새로운 제품이라서 먼저 대충 화면이 나오고 사용자 평가를 받아보면서 조정해야 합니다.&lt;br /&gt;?	시간이 없어서 대충 계약하고 일단 시작해야 합니다.&lt;br /&gt;&lt;br /&gt;필자가 귀가 따갑도록 들은 앵무새 같은 소리들이다. 한국에 처음 왔을 때는 신기했지만 이제는 그런 소리를 들으면 안타까울 뿐이다. 새로운 혁신적인 프로젝트는 한국보다는 미국이 훨씬 더 많다. 그리고 자세한 것을 모르는 상태나 시간이 없는 상태는 전 세계 모든 소프트웨어 회사의 공통점이다. 이제는 착각에서 깨어날 때도 되었다.&lt;br /&gt;&lt;br /&gt;인도와 외주 계약을 한다고 가정하면 계약금액이 있고 일정이 있고 사양이 있어야 한다. 계약이 성립하려면 발주자나 수주자나 개발종료에 대한 확실한 기준이 있어야 한다. 대부분의 소프트웨어 방법론에서는 인수테스트(Acceptance Test Plan)라고 한다. 한국의 방식에서는 수주자가 개발이 종료했다고 선언한 다음에 발주자가 인수를 위한 검증을 수행한다는 희안한 과정이 들어 있다. 전혀 잘못이 없어 보이는 이 과정은 발주자인 갑의 무소불휘의 권리이자 최후의 방어선이기도 하다. 이 인수 검증이 바로 모든 문제의 원인이다. 이런 식의 발주자의 주관적인 검증은 미국이나 인도 회사가 도저히 받아들일 수 없는 계약조건이다. 프로젝트 계약이 성립할 수 없는 근본 원인이다. &lt;br /&gt;&lt;br /&gt;인도의 수주한 개발자도 스스로 제품에 하자가 있다 없다는 것을 개발이 끝나기 전에 알고 있어야 한다. 개발자도 모르는 상태에서 발주자의 주관적인 판단에 맡긴다는 것은 엄청난 리스크이다. 그런 상태에서라면 계약을 하지 않는다. 대부분의 국내 발주자 같은 진상고객을 만나면 낭패다. 추가 비용만이 문제가 아니라 다음 프로젝트 일정도 망가지고 회사 계획이 엉망이 된다. 즉 결론은 납품할 제품이 검증을 통과할지 안할지를 개발자가 명확히 알 수 있는 내용이 있어야지만 계약이 성립된다. 그렇기 때문에 구체적으로 적힌 인수테스트를 통과하면 그냥 개발종료된 것이다. 발주자가 이의를 제기할 수가 없는 것이다. 발주자의 검증은 개발자가 자체적으로 인수 테스트를 수행할 때 옆에서 지켜보는 것으로 끝나기도 한다. 발주자가 인수테스트를 수행한다는 것은 똑같은 테스트를 두 번 하는 것으로 시간낭비이다.&lt;br /&gt;&lt;br /&gt;그래서 개발자들은 발주자와는 대화 한번 없이도 약속한 날자에 인수테스트를 통과한 제품을 납품함으로써 끝난다. 발주자가 강심장이라면 납품일자까지 가만히 있다가 인수테스트를 통과했으면 끝난 것이고 아니면 소송해서 위약금을 받아내면 된다. 통상적으로는 리스크를 줄이기 위해 중간에 점검을 하지만 계약서가 바뀌는 것은 아니다. 이런 시나리오가 성립되려면 무엇이 필요할까 하는 것은 방법의 문제이다. 이 책의 이 부분 저 부분을 다 엮으면 방법이 나올 것이다. 이것이 바로 실리콘밸리 회사에서 개발이 진행되는 기본 원리이다. 먼저 이 원리를 확실히 이해하고 그 다음에 방법을 찾아가기 바란다. 방법까지 찾고 실행까지 할 수 있다면 개발역량 만큼은 글로벌 회사 수준이다. 생각을 도와주기 위한 시나리오를 준다면 다음과 같다.&lt;br /&gt;&lt;br /&gt;1.	계약서에 사인을 하고는 나중에 결과물을 인수받을 때까지 서로 간에 얘기할 필요가 없다.&lt;br /&gt;2.	그러려면 계약시에 납품 통과 기준을 인수테스트 목록으로 명확히 알려주어야 한다.&lt;br /&gt;3.	인수테스트 목록만 패스하면 그 외에 아무리 오류가 많아도 그대로 제품을 인수 받아야 한다.&lt;br /&gt;4.	개발자는 스스로 모든 인수테스트 목록이 통과할 때 까지 개발을 계속한다.&lt;br /&gt;5.	약속한 날자에 제품과 인수테스트 결과보고서를 첨부해서 납품하면 끝이다.&lt;br /&gt;6.	발주자가 검증한다는 것은 인수여부를 위해서가 아니라 자기들이 미처 생각하지 못한 것이 있나를 검증하는 것이다. 있다면 자기 잘못이다. 미리 계약때 포함시켰어야 한다.&lt;br /&gt;7.	납품받으면 끝이다. 그 때 필요한 추가 기능이 생각나서 인간적으로 해주세요 빌어도 안 해준다. 잔금으로 협박하지 말고 깨끗이 추가 계약을 하는 수 밖에 없다. 한국식으로는 했다가는 소송걸려서 이자와 재판비용까지 물어야 한다.&lt;br /&gt;8.	그럼 인수테스트를 그렇게 잘 적으려면 무엇이 필요할까? SRS가 필요하다.&lt;br /&gt;9.	SRS에는 인수테스트를 위한 기능목록은 기본이고 성능사양, 비기능 사양등 원하는 모든 것이 포함되어 있어야 한다. &lt;br /&gt;10.	결국 SRS를 잘 적어야 한다. 보통 국내회사에서 생각하는 것과는 상상을 초월할 만큼 양이 많다.&lt;br /&gt;11.	SRS를 잘 적기 위해서 누가 적으며 어떻게 해야 잘 적을까? 이게 문제이다. 또 다시 제1원인에 도달했다.&lt;br /&gt;&lt;br /&gt;여기까지는 쉽게 제1원인을 찾아서 올 수 있었으나 여기서부터가 문제다. 요약하자면 미국 회사와 인도회사는 한 쪽은 SRS와 인수테스트를 잘 적고 한 쪽은 내용이 충분한지 검토한 다음 계약을 한다는 것이다. 이 과정에서 인도 회사들은 SRS를 읽고 개발을 해주는 역량부터 기르기 시작해서 서당개 3년이면 풍월을 읇는다고 SRS를 적을 수 있는 역량도 서서히 생겨난 것이다. 이런 SRS를 템플릿이나 샘플보고 적는다고 생각하는 것은 국내 개발자들의 망상이다. 차라리 책보고 골프배우는 것이 훨씬 쉽다. 이것이 바로 소프트웨어 개발에서 가장 어렵다는 분석역량이라는 것이고 수 많은 경험이 필요한 것이다. &lt;br /&gt;&lt;br /&gt;지금 이 시나리오는 모든 소프트웨어 개발의 가장