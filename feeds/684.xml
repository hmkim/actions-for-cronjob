<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 이선협 on Medium]]></title>
        <description><![CDATA[Stories by 이선협 on Medium]]></description>
        <link>https://medium.com/@kciter?source=rss-afd327d79e23------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*Sg3mVcYKtXPW9Gn5xCCVPA.png</url>
            <title>Stories by 이선협 on Medium</title>
            <link>https://medium.com/@kciter?source=rss-afd327d79e23------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 14:47:18 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@kciter" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[루비로 배우는 객체지향 디자인 — 2]]></title>
            <link>https://medium.com/@kciter/%EB%A3%A8%EB%B9%84%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EB%94%94%EC%9E%90%EC%9D%B8-2-e81de3a4046b?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/e81de3a4046b</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Sun, 01 Feb 2015 14:39:42 GMT</pubDate>
            <atom:updated>2015-02-02T11:03:41.022Z</atom:updated>
            <content:encoded><![CDATA[<h3>루비로 배우는 객체지향 디자인 정리— 2</h3><p>2장 단일 책임 원칙을 따르는 클래스 디자인하기를 읽고 정리한 글입니다.</p><p>객체지향 시스템의 근간을 이루는 것은 메시지이지만 가장 명시적으로 드러나는 것은 클래스이기 때문에 이번 장에서는 ‘무엇이 클래스에 속하는지&#39;, ‘어떻게 알 수 있는지&#39;에 집중해보자</p><blockquote>클래스는 단순해야 한다</blockquote><p>클래스를 만들 때에는 항상 고민이 된다. 하지만 <strong>클래스는 단순해야 한다</strong>라는 말을 명심하자.</p><h3><strong>수정하기 쉽도록 코드를 구성하기</strong></h3><p>디자인이란 완벽함을 추구하는 행위라기보다 <strong>코드의 수정가능성을 보존하는 기술</strong>이다. 코드가 수정하기 쉬워야 한다고 누구든지 말할 수 있고 대부분의 사람들이 동의한다. 하지만 ‘수정하기 쉽다&#39;라는 표현은 애매하기 때문에 <strong>명확한 정의와 구체적인 기준</strong>이 필요하다.</p><h4><strong>‘수정하기 쉽다’의 정의</strong></h4><pre>1. 수정이 예상치 못한 부작용을 낳지 않는다.<br>2. 요구사항이 조금 변했을 때 연관된 코드들을 조금만 수정하면 된다.<br>3. 현재 코드를 다시 사용하기 쉽다.<br>4. 코드를 수정하는 가장 쉬운 방법은 이미 수정하기 쉬운 코드에 새로운 코드를 추가하는 것이다.</pre><h4>‘수정하기 쉽다&#39;의 기준</h4><pre>1.<strong> 투명하다</strong>: 수정된 코드와 그 연관된 코드에서 수정의 결과가 뚜렷하게 드러나야 한다.<br>2.<strong> 적절하다</strong>: 모든 수정 비용은 수정 결과를 통해 얻은 이득에 비례해야 한다.<br>3.<strong> 사용가능하다</strong>: 예상치 못한 상황에서도 현재 코드를 사용할 수 있어야 한다.<br>4.<strong> 모범이 된다</strong>: 코드 자체가 나중에 수정하는 사람이 위의 특징을 이어갈 수 있도록 도와줘야한다.</pre><h3>하나의 책임만 지는 클래스 만들기</h3><p>클래스는 최대한 작으면서도 유용한 것만 해야한다. 다시 말해서, <strong>하나의 책임</strong>만 있어야 한다.</p><h4>단일 책임 원칙은 왜 중요한가</h4><p>한 개 이상의 책임이 있는 클래스는 재사용이 어렵다. 이 클래스에서 여러 책임들은 서로 얽혀 있을 가능성이 높다. 이 클래스 전체가 아니라 특정 메서드만 재사용하고 싶어도 우리가 원하는 부분만 수정하기 어렵다.</p><p>애플리케이션이 너무 많은 것을 하는 클래스에 기대고 있으면 예상치 못한 오류가 발생할 가능성도 높아진다.</p><h3>변화를 받아들일 수 있는 코드 작성하기</h3><p>변화는 피할 수 없기 때문에 수정하기 쉬운 방식으로 코드를 작성하면 언젠가는 그 값어치를 한다. 이런 코드를 작성하는 데 몇 가지 잘 알려진 기술이 있다.</p><h4>데이터가 아니라 행동에 기반한 코드를 작성하라</h4><p>행동은 메서드 속에 담겨 있고 메시지를 보내는 행위를 통해 실행된다. 하나의 책임을 지는 클래스의 행동들은 단 한 곳에만 존재한다. “반복하지 말 것(DRY)”라는 문구는 이런 아이디어를 나타낸다. DRY한 코드는 변화를 잘 견뎌 내는데, 클래스의 행동을 수정하기 위해 코드의 오직 한 부분만 수정하면 되기 때문이다.</p><p>객체는 행동과 함께 데이터를 갖는다. 이 데이터에는 두 가지 방법으로 접근할 수 있는데 인스턴스 변수를 직접 참조하거나 또는 인스턴스 변수를 감싸는 엑세서 메서드를 만들어 이 메서드를 통해 접근하는 방법이 있다. 인스턴스 변수를 직접 참조하는 것 보다는<strong> 엑세서 메서드를 만들어 이 메서드를 통해 접근하는 벙법이 좀 더 효율적</strong>이다.</p><p>좋은 이유는 생략</p><h4>데이터 구조 숨기기</h4><p>인스턴스 변수를 직접 참조하는 것이 안 좋은 방법이라면 데이터 구조에 의존하는 방식은 더더욱 좋지 않다.</p><p>ex) 배열의 구조에 의존적인 코드</p><h4>요약</h4><p>한 가지만 하는 클래스, 그 행동을 애플리케이션의 다른 부분들로부터 분리시키는 것. 이런 분리가 예상치 못한 결과로부터 자유로운 수정을 할 수 있도록, 중복 없이 코드를 재사용할 수 있도록 한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e81de3a4046b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[루비로 배우는 객체지향 디자인 정리 — 1]]></title>
            <link>https://medium.com/sunhyoups-story/%EB%A3%A8%EB%B9%84%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%A0%95%EB%A6%AC-1-12759f4cdb5e?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/12759f4cdb5e</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Sun, 25 Jan 2015 14:16:47 GMT</pubDate>
            <atom:updated>2015-01-25T14:16:47.617Z</atom:updated>
            <content:encoded><![CDATA[<h3>루비로 배우는 객체지향 디자인 정리 — 1</h3><p>1장 객체지향 디자인을 읽고 정리한 글입니다.</p><p>이 세상은 <strong>순차적</strong>이다. 일어날 사건의 순서를 알고 있기 때문에 사건 하나하나를 실행하는 코드를 짠 후 사건들을 내 마음대로 엮을 수 있는 절차적 프로그램을 작성할 수 있다.</p><p>이 세상은 <strong>객체지향적</strong>이기도 하다. 객체의 세계에서 객체들의 행동은 자연스럽게 뒤섞이기 때문에 예상치 못한 행동들의 조합이 나타날 수 있다.</p><p>절차적 프로그램은 예상치 못한 행동들의 조합을 프로그래밍하기 어렵다. 프로그래머가 모든 사건의 조합을 작성하기에는 힘들기 때문이다. 이를 해결하기 위해서 객체지향 디자인이 등장했다. 객체지향 디자인은 이미 정해진 절차들의 묶음으로 생각하지 않고, 객체가 서로 주고 받는 메시지들의 연쇄로 파악할 것을 요구한다. 이로인해 프로그래머는 객체들의 연관성만 작성하고나면 예전 처럼 모든 사건의 조합을 작성할 필요가 사라졌다.</p><h4>객체지향 디자인 공부에 앞서서</h4><p>객체지향 디자인의 실패는 <strong>코딩 능력 부족</strong>이 아닌 <strong>관점의 실패</strong>다. 객체지향 디자인을 배우기위한 첫걸음은 <strong>객체지향적 관점</strong>을 얻는 것이다. 객체지향적 관점을 얻고나면 나머지는 자연스럽게 해결된다.</p><h4>디자인이 해결해 줄 수 있는 문제들</h4><p>오늘 새로운 애플리케이션을 만든다고 상상해보자. 또, 이 애플리케이션을 작성하기 위한 모든 요구사항이 완벽하고 기획이 절대 바뀌지 않는다고 가정해보자. 이런 경우에 디자인은 중요하지 않다. 한 번 프로그램을 작성한 뒤 영원히 애플리케이션이 돌아가는 모습을 바라보면 된다. 하지만 <strong>프로그램은 반드시 변한다</strong>. 유행, 시대, 기술의 발전, 유저의 변덕 등 모든 외부 조건으로부터 프로그램 기획은 변하기 마련이다. 쉽게 변경할 수 있는 애플리케이션은 프로그래밍을 하는 과정도 즐겁고 확장하는 과정도 즐겁다. 하지만 그 반대의 경우 즐겁게 작업을 할 수 없다. 어쩌면 고통스러울 수 있다. <strong>요구사항의 변경은 반드시 일어나기 때문에</strong> 디자인이 중요한 것이다.</p><h4>프로그램 수정이 어려운 이유</h4><p>객체지향 애플리케이션은 상호작용하는 여러 부분으로 구성되어 있다. 여기서 <strong>여러 부분이 객체</strong>이고, <strong>상호작용이 객체가 주고받는 메시지</strong>다. 여기서 송신하고 수신하는 객체가 <strong>두 객체 사이의 의존성</strong>을 만들어 내고, 이런 <strong>의존성이 애플리케이션을 수정하기 어렵게 만든다</strong>.</p><p>객체지향 디자인은 의존성을 관리하는 것이고, <strong>의존성을 관리하는 기술이 객체지향 디자인</strong>이다. 디자인이 결여되어 있을 때, 관리되지 않은 의존성은 재앙을 불러온다.</p><p>예를 들어 객체가 서로에 대해서 너무 많이 알고 있을 때 하나의 객체를 수정할 경우 그 객체와 연결된 다른 객체까지 수정해야 한다. 이어서 다른 객체의 다른 객체까지 수정해야한다. 별거 없는 기능을 추가할 때에도 모든 코드를 수정해야할 수 있다.</p><h4>디자인 원칙</h4><p>디자인 원칙을 뜻하는 <strong>SOLID</strong>는 객체지향 디자인의 잘 알려진 디자인 원칙다섯 가지를 대변한다.</p><ol><li>단일 책임(Single Responsibility)</li><li>개방-폐쇄(Open-Closed)</li><li>리스코프 치환(Liskov Substitution)</li><li>인터페이스 분리(Interface Segregation)</li><li>의존성 역전(Dependenc Inversion)</li></ol><p>그 외에는 <strong>DRY</strong>와 <strong>데메테르의 원칙</strong>(Law of Demeter — LoD)등이 있다.</p><h4>디자인 패턴</h4><p>객체지향 디자인은 원칙뿐만 아니라 <strong>패턴</strong>을 가지고 있다. 1995년에 출판된 한국 출판명 &lt;GoF의 디자인 패턴&gt;은 패턴이란 객체지향 소프트웨어 디자인에서 명확한 문제를 처리하는 간단하고도 우아한 해결책이라고 말한다. 디자인 패턴은 <strong>동일한 문제 같은 방식으로 해결할 수 있는 방법</strong>에 이름을 부여한 것을 말한다. 디자인 패턴은 프로그래머들이 서로 소통하고 협업할 수 있는 도구를 제공해 주었다.</p><p>패턴이 유명해지면서 초보 프로그래머가 패턴을 오용하는 문제도 발생했다. 좋은 패턴을 잘못된 문제에 적용하면 복잡하고 혼란스러운 코드를 낳게 된다. 그렇기 때문에 올바른 패턴을 선택하고 제대로 사용할 수 있는 지식을 알아야 한다.</p><h4>조심해야할 점</h4><p>디자인 없는 애플리케이션은 점점 더 수정할 수 없는 애플리케이션이 된다. 그러나 지나친 디자인을 적용한 애플리케이션도 마찬가지로 점점 더 수정할 수 없는 애플리케이션이 될 수 있다. 이런 경우는 원칙을 적용할 수 없는 곳에 원칙을 적용하고 패턴이 없는 곳에서 패턴을 본다.</p><p>마지막으로 디자인은 <strong>반복적인 피드백</strong>과 함께하는 <strong>점진적인 발견</strong>의 과정이다. 그리고 디자인은 지속적인 자기조절 능력을 갖추고, 자연스럽게 발전하는 것이 가장 좋다. 때문에 반복과 점진적인 발전을 중시하는 애자일 소프트웨어 개발은 잘 디자인된 애플리케이션을 만드는 데 매우 적합하다.</p><h4>언제 디자인을 해야하는가?</h4><p>앞서 말한 애자일 소프트웨어 개발이 잘 디자인된 애플리케이션을 만드는 데 적합하다면 두 가지 주장 역시 사실이다. 첫째, 커다란 디자인을 먼저 구상하는 방식(BUFD)을 취할 이유가 하나도 없다. 둘째, 애플리케이션이 완성되는 시점을 누구도 예상할 수 없다.</p><p>커다란 디자인을 먼저 구상하는 방식은 프로그래머와 고객이 서로 대립하게 만든다. 앞서 구성해놓은 커다란 디자인이 고객이 원하는 바일 확률은 상당히 낮기 때문에(흔히 고객은 자신이 원하는 바를 잘 알지 못한다) 프로그램을 수정하게 되고 지켜야하는 일정이 있는 프로그래머는 수정사항들을 처리할 수 없다고 말한다. 결국 프로젝트 자체도 점점 파멸의 길에 들어선다. 마감일이 다가왔는데도 프로젝트가 끝나지 않는다면 수정사항이 너무 많아서 그랬더라도 책임은 프로그래머가 진다. 그렇기 때문에 애자일 개발을 통한 디자인 변경은 중간 중간 변하는 기획에 대해서 대처하기 위한 좋은 방법이다.</p><p>결국 좋은 애플리케이션을 위해서는 <strong>초기에 큰 디자인을 구상하지 않고 계속해서 디자인을 변경해주는 게 좋다</strong>.</p><h4>디자인 평가하기</h4><p>프로그래머를 평가하는 데 있어서 코드 줄 수는 중요하지 않다. 오히려 코드 줄 수를 가지고 프로그래머를 평가하는 방식은 애플리케이션의 품질을 저하시키는 지름길이다. 최근에는 코드 품질을 측정하는 새로운 측정법이 많이 등장했다. 이러한 <strong>측정 소프트웨어</strong>들은 소스 코드를 검사하여 몰랐던 문제나 개선할 수 있는 방법을 제공해준다. 잘 디자인된 애플리케이션처럼 보였을지라도 실제로는 객체지향 디자인의 원칙을 너무 많이 위반하고 있을 수 있다.</p><p>하지만 <strong>객체지향 디자인 점수가 높더라도 좋은 디자인을 구현하고 있다고 확신할 수는 없다</strong>. 다음번 수정이 쉽다고 보장해주지 않는다는 것이다. 과도한 디자인은 ‘객체지향 디자인 점수&#39;를 높게 받을 수 있겠지만 미래의 수정사항을 잘못 예상했다면 수정사항은 배로 높아질 것이다.</p><p>결국 소프트웨어의 질을 측정하는 궁극적인 기준은 ‘<strong>주어진 시간 안에서의 기능별 구현 비용</strong>&#39;일 것이다. 만일 필요한 기능이 구현되어 있지 않아 당장 시장에서 퇴출될 상황이라면 유지보수 비용이 얼마나 증가할지는 중요하지 않다. 주어진 시간 이내에 최대한 빨리 구현하는 것이 중요하다. 이러한 방식으로 타협하는 것은 미래의 시간을 빌려오는 것과 같다. 이 빚은 언젠가 갚아야 한다. 그렇기 때문에 우리는 디자인의 손익분기점을 원하는 대로 조절하는 기술이 필요하다.</p><h2>요약</h2><ol><li>객체지향적</li><li>디자인 원칙과 패턴</li><li>주어진 시간 안에서의 기능별 구현</li><li>성공적</li></ol><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=12759f4cdb5e" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/%EB%A3%A8%EB%B9%84%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%A0%95%EB%A6%AC-1-12759f4cdb5e">루비로 배우는 객체지향 디자인 정리 — 1</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Swift에서 CocoaPods 사용하기]]></title>
            <link>https://medium.com/sunhyoups-story/swift%EC%97%90%EC%84%9C-cocoapods-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-2940916fa403?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/2940916fa403</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Sat, 20 Dec 2014 12:58:16 GMT</pubDate>
            <atom:updated>2014-12-21T02:17:22.575Z</atom:updated>
            <content:encoded><![CDATA[<p>Swift에서 라이브러리 의존성 관리 도구인 CocoaPods를 사용해봅시다.</p><h3>CocoaPods 소개</h3><p>Cocoapods는 OS X 혹은 iOS 앱을 개발할 때 사용되는 라이브러리 관리를 도와주는 Maven같은 도구입니다. 기존에 라이브러리 버전 관리와 라이브러리 중복으로 인한 링크 에러로 골치 아팠던 것을 Cocoapods가 해결해 줄 수 있습니다.</p><h3>CocoaPods 설치</h3><p>CocoaPods를 사용하기 위해서는 Ruby gem이 필요합니다. 맥에는 ruby가 내장되어 있지만 rbenv를 설치하여 ruby 버전과 gem을 관리할 수 있습니다.</p><pre>$ # rbenv를 brew로 설치<br>$ brew install rbenv ruby-build<br>$ # 루비 버전 설치 현재 가장 최신 버전은 2.1.5<br>$ rbenv install 2.1.5<br>$ # 루비 글로벌 버전 설정<br>$ rbenv global 2.1.5</pre><p>Ruby 설치가 완료되면 gem을 사용하여 CocoaPods를 설치합시다.</p><pre>$ # cocoapods 설치<br>$ gem install cocoapods<br>$ # 라이브러리 spec을 불러옴<br>$ pod setup</pre><p>pod setup까지 마무리되면 CocoaPods 설치가 완료되었습니다. 이제 Xcode 프로젝트를 만들어봅시다. (생략)</p><p>Xcode 프로젝트가 만들어졌으면 프로젝트 파일이 있는 폴더에 Podfile을 만들어야합니다.</p><pre>$ # Xcode 프로젝트 폴더로 이동<br>$ cd ./…/test<br>$ # Podfile 파일 생성<br>$ cat &gt;&gt; Podfile<br>platform :ios, &#39;7.0&#39;<br>inhibit_all_warnings!<br>pod &#39;AFNetworking&#39;<br>^C</pre><ol><li><strong>platform :ios, ‘7.0’</strong><br>프로젝트에 대한 설정입니다. 여기서는 iOS 7.0으로 설정했습니다.</li><li><strong>inhibit_all_warnings!</strong><br>CocoaPods가 생성하는 프로젝트에서 나오는 경고를 표시 여부를 설정하는 옵션입니다.</li><li><strong>pod ‘AFNetworking’</strong><br>AFNetworking 라이브러리를 설치, 관리합니다.</li></ol><p>Podfile 설정이 완료되었으면 다음 명령어를 통해 설정에 등록된 라이브러리를 설치할 수 있습니다.</p><pre>$ pod install<br>Analyzing dependencies<br>Downloading dependencies<br>Installing AFNetworking (2.5.0)<br>Generating Pods project<br>Integrating client project</pre><pre>[!] From now on use `test.xcworkspace`.<br>$ ls<br>Podfile          Podfile.lock     Pods             test             test.xcodeproj   test.xcworkspace testTests</pre><p>설치가 완료되면 Podfile.lock파일과 Pods 폴더가 생성되고 Pods 폴더 내부에 설치된 라이브러리가 등록되어 있는 Pods 프로젝트와 기존에 만들어둔 프로젝트가 들어가있는 워크스페이스가 생성됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/255/1*T_JLOmkjkgFztHel4mJYFw.png" /><figcaption>AFNetworking 라이브러리가 생성되었습니다.</figcaption></figure><p>워크스페이스를 열어보면 성공적으로 AFNetworking가 설치된 모습을 확인할 수 있습니다. test 프로젝트와 Pods 프로젝트의 라이브러리는 pod install 하면서 자동으로 링킹됩니다.</p><p>하지만 AFNetwoking은 Objective-C로 작성된 라이브러리 입니다. Swift 프로젝트는 바로 사용할 수 없습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/598/1*BY3nArcPgabyc-gAOI7m0A.png" /></figure><p>Objective-C 파일을 생성하면 위 처럼 Bridging header로 사용할 것이냐고 물어봅니다. Bridging header는 Objective-C와 Swift를 연결해주는 헤더입니다. Bridging header에 Objective-C로 작성된 헤더를 import하면 Swift에서 사용할 수 있습니다. 같이 생성된 m 파일은 삭제해도 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/708/1*CPwd9b43tkYzIABXr-QcKQ.png" /></figure><p>이제 Swift에서 AFNetworking 라이브러리를 사용할 수 있습니다.</p><p>앞으로 필요한 라이브러리가 있으면 위와 같은 절차로 Podfile에 등록, pod install, Bridging header에 등록을 통하여 사용할 수 있습니다.</p><p>사용하고 싶은 라이브러리가 CocoaPods에 등록되었는지 확인하기 위해서는 <a href="http://cocoapods.org/">CocoaPods 공식 홈페이지</a>에서 확인할 수 있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2940916fa403" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/swift%EC%97%90%EC%84%9C-cocoapods-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-2940916fa403">Swift에서 CocoaPods 사용하기</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Grunt와 Bower를 이용한 웹 프론트엔드 제작하기]]></title>
            <link>https://medium.com/sunhyoups-story/grunt%EC%99%80-bower%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0-bfa32e6614c1?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/bfa32e6614c1</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Tue, 16 Dec 2014 16:44:00 GMT</pubDate>
            <atom:updated>2014-12-16T16:45:31.148Z</atom:updated>
            <content:encoded><![CDATA[<p>Grunt를 이용하여 static file의 압축, 문법 검사 등을 자동화 하고 Bower를 이용하여 웹 프론트엔드에 필요한 라이브러리를 간편하게 관리하는 방법을 알아봅시다.</p><p>예전에 좋은 프로그래머가 되기 위해서는 자동화 할 수 있는 부분은 모두 자동화하라는 말을 들은 적이 있습니다. 그 말을 뒷받침 하듯이 개발자를 돕기위한 자동화 툴이 상당히 많습니다. 물론 웹 프론트엔드 개발에도 예외는 아닙니다. 웹 프론트엔드 개발을 위한 자동화 툴 중 Bower와 Grunt에 대해서 소개하겠습니다.</p><h2>Grunt</h2><p>예전에 <a href="https://medium.com/sunhyoups-story/7-a02655bb6873">‘보다 좋은 자바스크립트 코드를 작성하기 위한 7단계’</a>라는 글을 번역한 적이 있습니다. 이 글에서 소개하는 7단계의 대부분을 Grunt를 이용하여 자동화할 수 있습니다.</p><p>먼저 Grunt란 무엇일까요?<br>Grunt는<em> ‘Grunt is a task-based command line build tool for JavaScript projects.’ </em>라고 정의할 수 있습니다. 여기서 중요한 것은 task-based 입니다. Grunt에 적당한 task를 작성하면 Grunt가 task에 따라서 프로젝트를 자동으로 빌드해준다는 뜻입니다.</p><h3>설치</h3><p>설치는 npm을 통해서 설치할 수 있습니다. npm이란 Node Packaged Modules의 약자로 node.js에서 사용하는 모듈을 npm을 이용하여 설치할 수 있습니다. node.js를 설치하면 npm도 같이 설치됩니다. node.js설치는 <a href="http://nodejs.org/">공식 홈페이지</a>에서 할 수 있습니다.</p><p>npm이 설치되었으면 다음과 같은 명령을 입력합시다.</p><pre>$ npm install -g grunt-cli</pre><p>위 명령어 에서 ‘-g’는 글로벌을 나타냅니다. grunt-cli를 콘솔 어디서나 사용 편하게 가능합니다.</p><p>grunt-cli를 설치했으면 grunt를 설치해봅시다.</p><pre>$ npm init<br>…<br>$ npm install grunt --save</pre><p>npm init을 통해 package.json 파일을 생성할 수 있습니다. 이 파일은 npm 의존성 관리 및 프로젝트 내용을 기록합니다.<br>grunt 설치 중 —save옵션을 적어주면 package.json에 grunt 의존성을 기록합니다.</p><p>이제 grunt를 사용할 수 있습니다.</p><h3>실행</h3><p>grunt를 사용하기 위해서는 Gruntfile.js를 작성해야 합니다. 이 파일에서 task를 관리할 수 있습니다</p><pre>module.exports = function(grunt) {<br>  grunt.initConfig({<br>  });</pre><pre>  grunt.registerTask(&#39;dev&#39;, []);<br>}</pre><p>위 처럼 작성한 뒤 아래의 커맨드로 실행시켜 봅시다.</p><pre>$ grunt dev</pre><p>Done, without errors. 라는 문자열이 보인다면 성공입니다.</p><p>이제 본격적으로 grunt를 이용한 자동화를 진행해봅시다.</p><h4>grunt-contrib-concat를 이용한 예제</h4><p>grunt-contrib-concat은 여러 파일을 하나로 합쳐주는 모듈입니다.<br>다음과 같이 설치하여 사용할 수 있습니다.</p><pre>$ npm install grunt-contrib-concat --save</pre><p>‘js/src’ 폴더 아래 모든 js가 있다고 가정하고 Gruntfile.js을 수정하여 모든 파일을 합쳐봅시다.</p><pre>module.exports = function(grunt) {<br>  grunt.loadNpmTasks(&#39;grunt-contrib-concat&#39;);</pre><pre>  grunt.initConfig({<br>    concat: {<br>      dev: {<br>        src: [&#39;js/src/*.js&#39;],<br>        dest: &#39;js/application.js&#39;<br>      }<br>    }<br>  });</pre><pre>  grunt.registerTask(&#39;dev&#39;, [&#39;concat:dev&#39;]);<br>}</pre><p>먼저 loadNpmTasks를 통해 모듈을 불러온 후 initConfig에 concat설정을 작성합니다. 그후 registerTask에 사용할 task를 적어주면 사용이 가능합니다.</p><pre>$ grunt dev<br>$ Running &quot;concat:dev&quot; (concat) task<br>$ File js/application.js created.</pre><pre>$ Done, without errors.</pre><p>위와 같이 task실행이 완료되면 모든 js파일이 합쳐진 application.js가 생성됩니다. 만약 합쳐져야하는 순서를 정해야 한다면 위 initConfig 설정 중 src에서 합쳐져야하는 순서대로 파일 명을 적어줘야합니다.</p><h4>그 외</h4><p>concat말고도 grunt를 사용하여 자동화 할 수 있는 모듈이 많습니다. jshint를 이용하여 문법 및 잠재적인 문제를 검사할 수 있고 uglify와 mincss를 사용하여 자바스크립트, CSS 파일을 압축할 수 있습니다.</p><p>grunt 모듈의 종류는 <a href="https://github.com/gruntjs/grunt-contrib">grunt-contrib</a>에서 찾아 볼 수 있습니다. 프로젝트에 필요한 모듈을 설치하여 사용할 수 있습니다. 사용방법은 각 git 저장소에 자세히 나와있습니다.</p><h2>Bower</h2><p>bower는 웹 프론트엔드 제작에 필요한 라이브러리를 관리할 수 있는 npm, maven, gem같은 패키지 매니저입니다.</p><p>웹 프론트엔드에서 자주 사용하는 jQuery, Bootstrap과 같은 라이브러리를 간편하게 관리, 설치해줄 수 있습니다.</p><h3>설치</h3><p>설치는 grunt와 동일하게 npm을 사용하여 설치할 수 있습니다. 먼저 node.js를 설치한 후 다음 명령어를 입력하면 bower 설치를 시작합니다.</p><pre>$ npm init<br>…<br>$ npm install bower --save</pre><h3>사용법</h3><p>bower를 사용하기 위해서는 우선 bower.json파일을 생성해야 합니다. bower.json 생성은 다음 명령어로 생성 가능합니다.</p><pre>$ bower init</pre><p>bower init을 할 때 나오는 각종 설정을 프로젝트에 맞춰서 작성하시면 bower.json 생성이 완료됩니다.</p><h4>jQuery 설치</h4><p>bower install 명령어를 사용하여 jQuery를 설치할 수 있습니다.</p><pre>$ bower install jquery --save</pre><p>설치가 완료되면 bower_components 폴더 아래에 jquery 폴더가 생성됩니다. 그리고 —save 옵션을 붙이면 bower.json에 의존성을 기록할 수 있습니다.</p><h4>bower-installer</h4><p>bower를 사용하여 설치된 라이브러리는 bower_components 폴더 아래에 생성되므로 사용이 불편합니다. 이러한 문제를 bower-installer를 사용하여 해결 할 수 있습니다.</p><pre>$ npm install -g bower-installer</pre><p>global로 bower-installer를 설치 후 bower.json에 다음 설정을 추가합니다.</p><pre>&quot;install&quot;: {<br>  &quot;path&quot;: {<br>    &quot;css&quot;: &quot;static/css&quot;,<br>    &quot;js&quot;: &quot;static/js&quot;<br>  }<br>}</pre><p>위 설정은 bower로 설치한 라이브러리 중 css파일은 ‘static/css’로 js파일은 ‘static/js’ 폴더로 옮기는 설정입니다. 위 설정을 추가 후 다음 명령을 실행 해봅시다.</p><pre>$ bower-installer<br>$ Setting up install paths...Finished<br>$ Running bower install...Finished<br>$ Installing:<br>$ jquery : /.../test/static/js/jquery/jquery.js<br>$ Success</pre><p>성공적으로 jquery파일이 ‘static/js’ 폴더로 옮겨졌습니다. 외에도 <a href="https://github.com/blittle/bower-installer">bower-installer git 저장소</a>에 다양한 설정 방법이 적혀있습니다.</p><p>밤에 쓰려니 졸려서 길게 쓰지를 못하겠네요 ㅠㅠ<br>내용에 틀린 점이나 부족한 점이 있다면 지적 부탁드립니다. ^^</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bfa32e6614c1" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/grunt%EC%99%80-bower%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9B%B9-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%A0%9C%EC%9E%91%ED%95%98%EA%B8%B0-bfa32e6614c1">Grunt와 Bower를 이용한 웹 프론트엔드 제작하기</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[젠킨스를 github와 연동하여 MSBuild로 빌드하는 방법]]></title>
            <link>https://medium.com/sunhyoups-story/%EC%A0%A0%ED%82%A8%EC%8A%A4%EB%A5%BC-github%EC%99%80-%EC%97%B0%EB%8F%99%ED%95%98%EC%97%AC-msbuild%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-bd7a8713ea4?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/bd7a8713ea4</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Wed, 05 Nov 2014 04:16:51 GMT</pubDate>
            <atom:updated>2014-12-16T14:38:27.020Z</atom:updated>
            <content:encoded><![CDATA[<p>NHN NEXT 휴먼 디자인 프로젝트 수업 중 사용된 PPT 자료입니다.</p><p>Visual Studio 2013에서 작성된 프로젝트를 젠킨스와 github를 연동하여 빌드하는 방법입니다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.slideshare.net%2Fslideshow%2Fembed_code%2F32495866&amp;url=http%3A%2F%2Fwww.slideshare.net%2Fsunhyouplee%2Fmsbuild-git-jenkins&amp;image=http%3A%2F%2Fcdn.slidesharecdn.com%2Fss_thumbnails%2Fci1-140319105650-phpapp02-thumbnail-4.jpg%3Fcb%3D1395244690&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=slideshare" width="425" height="355" frameborder="0" scrolling="no"><a href="https://medium.com/media/49058083fd69bdf5a7b182b478c08e55/href">https://medium.com/media/49058083fd69bdf5a7b182b478c08e55/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=bd7a8713ea4" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/%EC%A0%A0%ED%82%A8%EC%8A%A4%EB%A5%BC-github%EC%99%80-%EC%97%B0%EB%8F%99%ED%95%98%EC%97%AC-msbuild%EB%A1%9C-%EB%B9%8C%EB%93%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-bd7a8713ea4">젠킨스를 github와 연동하여 MSBuild로 빌드하는 방법</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[C++과 루아스크립트 연동하기]]></title>
            <link>https://medium.com/sunhyoups-story/c-%EA%B3%BC-%EB%A3%A8%EC%95%84%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0-632201360ea2?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/632201360ea2</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Wed, 05 Nov 2014 04:14:45 GMT</pubDate>
            <atom:updated>2014-11-05T04:14:45.465Z</atom:updated>
            <content:encoded><![CDATA[<p>간단하게 연동하는 방법을 정리한 슬라이드</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.slideshare.net%2Fslideshow%2Fembed_code%2F32626719&amp;url=http%3A%2F%2Fwww.slideshare.net%2Fsunhyouplee%2Fc-lua-script&amp;image=http%3A%2F%2Fcdn.slidesharecdn.com%2Fss_thumbnails%2Fcluascript-140323041346-phpapp02-thumbnail-4.jpg%3Fcb%3D1395572364&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=slideshare" width="425" height="355" frameborder="0" scrolling="no"><a href="https://medium.com/media/6ce55fb608f49e17d2907d0e890cc3f0/href">https://medium.com/media/6ce55fb608f49e17d2907d0e890cc3f0/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=632201360ea2" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/c-%EA%B3%BC-%EB%A3%A8%EC%95%84%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0-632201360ea2">C++과 루아스크립트 연동하기</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zero copy란?]]></title>
            <link>https://medium.com/sunhyoups-story/zero-copy%EB%9E%80-e113d5df7191?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/e113d5df7191</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Tue, 26 Aug 2014 05:16:39 GMT</pubDate>
            <atom:updated>2015-12-02T07:44:47.124Z</atom:updated>
            <content:encoded><![CDATA[<p>무복사 기법이라고도 불리는 Zero copy에 대해서 알아봅시다.</p><p>주로 웹 어플리케이션을 제작할 때 가장 중요한 부분 중 하나가 정적 파일입니다. 이러한 정적 파일을 통해서 페이지를 좀 더 아름답고, 동적이게 만들 수 있습니다. (물론 API만으로 이뤄진 웹 어플리케이션을 제외합니다) Zero copy는 이러한 정적 파일을 전송할 때 주로 쓰입니다.</p><p>그러면 이제 Zero copy를 사용하지 않고 평범하게 정적 파일을 전송할 경우의 문제점에 대해서 알아봅시다. 별다른 처리를 하지 않고 웹 어플리케이션에서 정적 파일을 제공할 경우 단순하게 디스크에서 파일을 읽어 소켓에 담은 뒤 응답을 합니다. 이러한 처리는 단순해서 더 손댈 필요도 없어 보입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/620/1*QZUV1cfUENoDkp8yphoNhA.png" /><figcaption>정적 파일을 전송하기 위해 서버가 하는 일을 나타낸 그림입니다.</figcaption></figure><p>조악한 그림이지만 위 그림을 보시면 서버가 정적 파일을 클라이언트에 전송하기 위해 하는 일을 알 수 있습니다. 일어나는 큰 사건을 순서대로 정리해봅시다.</p><pre>1. 클라이언트가 서버에게 정적 파일을 요청<br>2. 서버의 웹 어플리케이션이 요청을 받음<br>3. 웹 어플리케이션(유저 영역)이 디스크에서 파일 데이터를 읽기 위해서 커널(커널 영역)이   파일 데이터를 읽도록 요청<br>4. 파일을 다 읽은 후 커널(커널 영역)이 다시 웹 어플리케이션(유저 영역)으로 데이터를 반환<br>5. 하지만 웹 어플리케이션(유저 영역)은 클라이언트에 반환하기 위해서 소켓에 파일 데이터를 넣어야 하므로 다시 커널(커널 영역)에 요청<br>6. 커널(커널 영역)은 소켓을 처리</pre><p>정적 파일 데이터가 커널 / 유저 영역 사이를 넘나들 때에는 매번 복사가 일어납니다. 위 4, 5번 항목을 보면 불필요한 Context Switching으로 CPU와 메모리를 소모하고 있습니다.</p><p>Zero copy는 이러한 문제점을 해결하는 방법입니다. 커널 영역에서 파일 데이터를 읽은 후 웹 어플리케이션으로 되돌아가지 않고 바로 소켓에 데이터를 담아 전합니다. 말 그대로 Zero copy(무복사) 입니다.</p><h3>Reference</h3><pre>1. <a href="http://www.kodb.or.kr/info/info_06.php?field=&amp;keyword=&amp;type=techreport&amp;page=151&amp;dbnum=128046&amp;mode=detail&amp;type=techreport">http://www.kodb.or.kr/info/info_06.php?field=&amp;keyword=&amp;type=techreport&amp;page=151&amp;dbnum=128046&amp;mode=detail&amp;type=techreport</a></pre><pre>2. <a href="http://en.wikipedia.org/wiki/Zero-copy">http://en.wikipedia.org/wiki/Zero-copy</a></pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e113d5df7191" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/zero-copy%EB%9E%80-e113d5df7191">Zero copy란?</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[왜 Swift를 해야할까요?]]></title>
            <link>https://medium.com/sunhyoups-story/%EC%99%9C-swift%EB%A5%BC-%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C%EC%9A%94-4f9c2e7375c2?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/4f9c2e7375c2</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Mon, 25 Aug 2014 12:55:06 GMT</pubDate>
            <atom:updated>2014-08-25T12:55:06.036Z</atom:updated>
            <content:encoded><![CDATA[<p>회사 내에서 신청 도서를 읽고 독후감으로 작성한 PPT입니다.<br>개발팀에서 어떤 일을 하고 있고 책을 신청한 이유에 대해서 설명하는 PPT이기 때문에 비개발자 분을 대상으로 작성했습니다.</p><p>사실 그다지 크게 도움 될만한 PPT는 아닙니다.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.slideshare.net%2Fslideshow%2Fembed_code%2F38325602&amp;url=http%3A%2F%2Fwww.slideshare.net%2Fsunhyouplee%2Fswift-38325602&amp;image=http%3A%2F%2Fcdn.slidesharecdn.com%2Fss_thumbnails%2Fswift-140825074958-phpapp01-thumbnail-4.jpg%3Fcb%3D1408971144&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=slideshare" width="425" height="355" frameborder="0" scrolling="no"><a href="https://medium.com/media/75f502d831e95db9c0bdfa89c46a6916/href">https://medium.com/media/75f502d831e95db9c0bdfa89c46a6916/href</a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4f9c2e7375c2" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/%EC%99%9C-swift%EB%A5%BC-%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C%EC%9A%94-4f9c2e7375c2">왜 Swift를 해야할까요?</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[3개월간 회사를 다니면서 배운 내용]]></title>
            <link>https://medium.com/sunhyoups-story/3-93acf170c289?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/93acf170c289</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Sat, 12 Jul 2014 14:05:08 GMT</pubDate>
            <atom:updated>2014-07-12T14:05:08.237Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="http://blog.outsider.ne.kr/1067">http://blog.outsider.ne.kr/1067</a></p><p>위 글을 보고 나서 학교를 휴학한 후 회사에서 배운 내용을 정리하기로 마음먹었다. 이미 3개월이라는 긴 시간이 지났기 때문에 지난날에 있었던 모든 일을 개발 일지처럼 정리하는 것보다 큰 단위로 무엇을 고민했고, 고민을 해결하기 위해 공부한 내용과 그 결과가 어떻게 다가왔는지 이번 포스팅으로 정리한 후 앞으로 일주일 단위로 개발일지를 쓰기로 하였다.</p><h3>고민한 내용</h3><p>회사 입사 후 시간 순으로 고민한 내용을 나열하면 다음과 같다.</p><pre>1. 확장이 힘든 서버 코드<br>2. cafe24로 서비스 되고 있는 서버를 AWS로 확장 가능하게 이전<br>3. 정규화되지 않은 DB<br>4. 분실된 안드로이드, iOS 릴리즈 소스에 맞춰서 현재 가지고 있는 소스를 수정하기<br>5. 통계 기능<br>6. 외부업체와 연동하는 신규 프로젝트 진행</pre><p>위 고민에 대한 내용을 글로 적다보니 너무 길어졌기 때문에 간단하게 요약하여 적어보자면</p><ol><li>언어는 PHP이지만 CakePHP, CodeIgniter와 같은 프레임워크 사용안하고 REST API로 제작되지 않음.</li><li>Apache, PHP, MySQL이 모두 한 서버에 구축되어 있어서 사용자 수가 많아지면 문제가 생길 가능성이 높음. 스케일 아웃이 불가능하고 스케일 업만 가능. 특히 DB나 파일에 대한 Failover가 불가능하다.</li><li>테이블간 컬럼이 중복되거나 한 컬럼에서 ‘,’ 혹은 ‘|’같은 특수 문자로 데이터를 분리하는 등 정규화가 이뤄지지 않은 문제가 있음. 입사 당시에는 외래키에 대한 인덱스가 걸려지있지 않아 성능도 느렸음.</li><li>지금 제작된 제품은 외주 업체에서 제작된 제품인데 현재 릴리즈된 버전의 소스를 외주 업체에서 분실하여 그 이후에 레이아웃이 변경된 소스만 남아있음. 이 소스를 수정해서 현재 레이아웃으로 변경하고 버그도 수정해야함.</li><li>릴리즈된 제품은 통계와 같은 기능이 없어서 GA(Google Analytics)를 붙이거나 수집된 데이터를 시각화하는 기능 제작해야함.</li><li>네비게이션 업체 혹은 장소 제공 업체와 연동하는 모바일 웹페이지 제작.</li></ol><p>전부 정말 만만치 않은 일들이었다. 처음에는 이미 나온 제품이 있어서 간간히 버그 수정만 하면 되는 줄 알았는데 거의 한 달은 야근 + 주말 근무를 계속해서 했다. 물론 지금은 모든 이슈가 해결되서 여유롭게 다니고 있다.</p><h3>해결 방법과 공부한 내용</h3><p>각 문제에 대한 해결 방법과 그 해결 방법을 위해 공부한 내용을 정리하자면 다음과 같다.</p><ol><li><strong>확장이 힘든 서버 코드, 정규화되지 않은 DB<br></strong>이 문제들을 해결하기 위해서는 이미 서비스되고 있는 시점에서 많은 수의 코드와 이미 많은 데이터가 들어가있는 DB를 수정하기에는 비효율 적이기 때문에 외부업체와 연동하는 신규 프로젝트를 마친 후 새롭게 개발하기로 하였다.(가능하지만 아직 사용자가 많지 않은 시점에서 확장 가능하도록 빠르게 개발하는 편이 좋다고 생각했다)</li><li><strong>cafe24로 서비스 되고 있는 서버를 AWS로 확장 가능하게 이전</strong><br>우선 안정적으로 이전하기 위해서 AWS를 확실히 공부할 필요가 있었기에 <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7336048">아마존 웹 서비스 클라우드 디자인 패턴 구축 가이드</a>라는 책을 사서 읽었다. 그 후 과정을 설명하자면 cafe24에 있던 DB 데이터를 AWS RDS로 이전한 후 코드에서 AWS RDS로 접속하도록 수정하였다. 그 후에 EC2 인스턴스를 신규 프로젝트 용, 기존 서버 용으로 생성하여 git으로 배포한 후 네임 서버를 AWS Route53으로 연결되도록 수정하였다. 설명은 간단하지만 이 과정에서 문제가 생길까봐 상당히 무서웠다.</li><li><strong>분실된 안드로이드, iOS 릴리즈 소스에 맞춰서 현재 가지고 있는 소스를 수정하기</strong><br>이 부분은 현재 진행 중인데 학교 친구인 조성환을 꼬셔서 안드로이드 부분을 수정하고 내가 iOS 부분을 수정하고 있다. 이 과정에서 느낀 점은 역시 문서화와 아키텍처가 중요하다는 점이었다.</li><li><strong>통계 기능</strong><br>안드로이드와 iOS 업데이트는 아직 현재 진행 중이기 때문에 이전에는 야매로 API 서버에 GA를 붙였다. 사실 야매로 붙였기 때문에 정확한 통계가 나오지는 않지만 접속량을 볼 수 는 있다. 그 외에 결제량과 유저 가입수는 DB의 데이터를 뽑아서 dimplejs 라이브러리를 이용하여 시각화 하였다.</li><li><strong>외부업체와 연동하는 신규 프로젝트 진행</strong><br>사실 이 작업을 하면서 가장 많이 공부했다. 과감하게 공부해보지 못한 프레임워크도 사용하였다. 프로젝트를 진행하면서 처음으로 Angularjs를 공부했고 어설프게 알았던 javascript를 좀 더 깊게 공부했다.</li></ol><h3>그 외에 배운 내용</h3><p>회사에서는 오로지 소프트웨어 개발 관련되서만 배우지는 않았다. 오히려 회사 업무와 관련된 내용을 더 많이 배웠다.</p><ol><li><strong>이메일, 전화 업무</strong><br>예전에도 회사를 다녀본 적은 있지만 이렇게 본격적으로 회사 업무를 해본 것은 처음이기 때문에 외부 업체에 이메일을 보내거나 전화를 하는 일이 많아졌다. 이메일을 보낼 때는 메일을 받는 당사자 뿐만 아닌 관계된 사람들을 참조에 넣는 등 기본적인 것도 몰랐기 때문에 많은 도움이 됬다. 특히 전화는 상당히 부담감이 심했기 때문에 처음에 상당히 전화 업무에는 거부감이 들었는데 여러 차례 적응을 하다보니 조리있게 말하는 법을 배웠다.</li><li><strong>외부 업체와 미팅</strong><br>사실 이 부분은 배웠다기 보다는 경험이라고 생각된다. 전화 업무와 마찬가지로 모르는 사람들과 미팅하는 것도 조금 거부감이 있었기에 적응하기 어려웠다. 지금은 많이 적응되어서 미팅에 대해 거부감은 없다.</li></ol><p>사실 하고 싶은 말은 더 많지만 지난 3개월간 너무 많은 일이 있었던 것도 그렇지만 글을 잘 못쓰기에 표현을 제대로 못한 점이 더 큰 것 같다. 앞으로 일주일에 한 번 씩 개발일지를 적어서 글 쓰는 법을 연습해야겠다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=93acf170c289" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/3-93acf170c289">3개월간 회사를 다니면서 배운 내용</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[보다 좋은 자바스크립트 코드를 작성하기 위한 7단계]]></title>
            <link>https://medium.com/sunhyoups-story/7-a02655bb6873?source=rss-afd327d79e23------2</link>
            <guid isPermaLink="false">https://medium.com/p/a02655bb6873</guid>
            <dc:creator><![CDATA[이선협]]></dc:creator>
            <pubDate>Thu, 12 Jun 2014 16:54:27 GMT</pubDate>
            <atom:updated>2014-06-13T02:44:37.600Z</atom:updated>
            <content:encoded><![CDATA[<h4>코드 작성 -&gt; 문서화 -&gt; 분석 -&gt; 테스트 -&gt; 측정 -&gt; 자동화 -&gt; 예외 처리를 통해 고품질 코드를 작성해봅시다.</h4><p><a href="http://www.creativebloq.com/netmag/7-steps-better-javascript-51411781?utm_source=javascriptweekly&amp;utm_medium=email">http://www.creativebloq.com/netmag/7-steps-better-javascript-51411781?utm_source=javascriptweekly&amp;utm_medium=email</a> 의 내용을 번역한 내용입니다. 일부 내용은 원문과 다르게 표현했습니다. (특히 코드작성 부분)<br>오역은 내용 좌측의 댓글에 남겨주시면 감사하겠습니다.</p><blockquote>Den Odell은 완벽한 코드를 작성하기위한 자신의 7단계를 제시하고 프로세스를 간소화하기 위한 유용한 도구를 요약했습니다.</blockquote><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FHwOfj0krPlQ%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DHwOfj0krPlQ&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FHwOfj0krPlQ%2Fhqdefault.jpg&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/40b32840b2b903f725feede574b3eb3d/href">https://medium.com/media/40b32840b2b903f725feede574b3eb3d/href</a></iframe><p>브라우저 성능 개선과 함께 새로운 HTML5 API가 꾸준히 채택되면서 웹에서 자바스크립트의 비중이 커지고 있습니다. 하지만 잘못 작성한 코드의 한 라인이 웹 서비스를 멈추게하고 사용자와 잠재 고객의 유입을 끊을 수 있습니다.</p><p>개발자들은 작성한 코드가 예상대로 동작하기 위해 코드 품질을 향상 시킬 수 있는 도구와 기술을 사용합니다. 이 주제는 저와 밀접한 관계가 있었고 몇 년 동안 일하면서 최고의 품질을 가진 코드를 작성하기위한 ‘단계’를 찾았습니다.</p><p>당신의 자바스크립트 프로젝트의 품질을 극적으로 향상시키기 위한 7단계가 여기 있습니다. 7단계를 통해서 기존 프로젝트 보다 적게 오류가 발생할 것이고 유저가 떠나는 일이 줄어들 것입니다.</p><h3>01. 코드 작성</h3><ol><li>당신의 함수에서 “use strict”를 사용하여 ECMAScript5의 strict 모드를 시작합시다.</li><li>모듈 디자인 패턴을 사용합시다.</li><li>분산된 코드 모듈을 자기 실행 클로저에 집어넣어 전역 변수 사용을 최소화합시다.</li><li>명확하고 간결한 모듈을 유지하기 위해 모든 외부 종속성을 전달합시다.</li><li>로직과 데이터를 분리하여 제작합니다.</li><li>충분히 검증된 라이브러리 및 프레임워크를 사용하여 코드를 작성합니다.</li></ol><p>여러 명의 개발자가 투입된 큰 프로젝트의 경우 다음과 같은 규칙을 따르는 것이 좋습니다.</p><ol><li>구글의 자바스크립트 스타일 가이드와 같은 코딩 가이드라인을 따르는 것이 좋습니다.</li><li>Asynchronous Module Definition (AMD)을 따르는 RequireJS 같은 라이브러리를 사용하여 스크립트의 의존성을 관리합니다.</li><li>당신이 사용하는 종속적인 라이브러리의 특정 버전을 Bower 혹은 Jam을 이용하여 패키지 관리를 합니다.</li><li>옵저버 패턴 같은 구조적 디자인 패턴을 사용하여 당신의 각각 다른 모듈을 느슨하게 연결하여 상호작용 할 수 있도록 합니다.</li><li>코드 관리 시스템인 Git이나 Subversion을 사용하는 GitHub 또는 Beanstalk와 같은 서비스는 당신의 코드를 웹에 백업하고 지켜줍니다. 이전 버전으로 돌아가는 것이 가능하고 기능 단위로 브랜치를 생성하여 작업한 후 나중에 합치는 것도 가능합니다.</li></ol><h3>02. 문서화</h3><p>어떤 개발자는 커뮤니케이션 오해를 줄이고 코드를 뜯어볼 필요가 없도록 YUIDoc 또는 JSDoc으로 구조화된 블록 주석을 이용합니다. 마크다운 문법을 사용하여 긴 의견과 주석을 달 수 있습니다. 관련된 커맨드 라인 툴을 사용하여 구조에 대한 주석과 최신 코드에 대한 변경 사항에 대한 웹사이트 기반 문서를 자동으로 만들 수 있습니다.</p><h3>03. 분석</h3><p>정기적으로 코드에 JSHint와 JSLint 같은 정적 코드 분석 도구를 사용합시다. strict mode를 사용하는 것을 잊었거나 변수 선언을 까먹었거나 괄호 짝이 맞지 않게 코딩하거나 세미콜론을 빼먹는 것과 같은 흔히 하기 쉬운 코딩 실수를 검사해줍니다. 당신의 코드 품질을 향상시키기 위해 도구(JSHint, JSLint)의 설정을 변경할 수 있습니다. 설정 변경을 통해 인덴트 스페이스 수, 중괄호의 위치, 큰 따옴표를 사용할지 작은 따옴표를 사용할지 팀 프로젝트의 코딩 표준을 정할 수 있습니다.</p><h3>04. 테스트</h3><p>유닛 테스트(단위 테스트)는 특정 입력을 통해 예상하는 결과를 확인하기 위해 함수 하나를 실행하는 독립적인 기능입니다. (예를 들어 function sum에서 1+1을 입력했을 때 2라는 결과가 나오는지 검사하는 함수 입니다) QUnit 혹은 Jasmine과 같은 프레임워크를 사용하여 여러 유닛 테스트를 작성하여 코드가 예상대로 작동하는지 확인할 수 있고 이러한 행위를 통해 자신감을 향상시킬 수 있습니다.</p><p>클라우드 가상 머신을 이용하여 테스트를 할 수 있도록 도와주는 BrowserStack와 Sauce Labs와 같은 서비스를 사용한다면 여러 운영체제, 여러 브라우저에서 코드가 잘 동작하는지 테스트할 수 있습니다. 두 서비스는 자동으로 유닛 테스트를 여러 브라우저에서 실행하고 당신에게 피드백이 갈 수 있도록 API를 제공합니다. 만약 당신의 코드가 Github에 저장되어 있다면 BrowerSwarm을 사용할 수 있습니다. BrowerSwarm은 당신이 코드를 커밋 할 때 자동으로 유닛 테스트를 실행하는 도구입니다.</p><h3>05. 측정</h3><p>Istanbul과 같은 코드 커버리지 도구(소프트웨어의 테스트가 충분한지 나타내는 도구)는 유닛 테스트가 함수를 실행할 때 함수의 총 라인 수와 실행되는 라인의 수를 퍼센트로 당신에게 보여줍니다. 코드 커버리지 도구를 함께 사용하여 유닛 테스트를 하면 당신의 코드에 더 큰 신뢰성을 주고 100퍼센트에 도달하기 위해 추가 테스트를 할 수 있습니다.</p><p>함수 복잡도는 Halstead의 소프트웨어 복잡성 척도를 사용해 측정할 수 있습니다. 루프와 분기, 기능 호출의 갯수에 따른 함수의 복잡도를 정량화하는 방법은 1970년대에 컴퓨터 사이언티스트 Maurice Halstead가 고안했습니다. 복잡성 점수가 감소하면 오류가 날 가능성을 줄일 수 있습니다. 커맨드 라인 툴인 Plato는 자바스크립트 코드의 복잡성을 측정하고 개선 할 수 있도록 시각화하여 보여줍니다.</p><h3>06. 자동화</h3><p>Grunt 같은 task runner를 사용한다면 문서화, 분석, 테스트, 커버리지, 복잡한 보고서 생성과 같은 작업을 자동화할 수 있으므로 당신의 시간과 노력을 줄이면서 품질 문제를 해결할 수 있는 기회가 늘어납니다. 이 문서에 나온 대부분의 도구와 테스트 프레임워크들은 Grunt와 연동이 가능합니다. Grunt를 사용하면 당신이 손가락 하나 까닥하지 않아도 워크플로우와 코드 품질을 향상 시키기 위한 귀찮은 작업을 연결할 수 있습니다.</p><h3>07. 예외 처리</h3><p>어플리케이션을 실행시켜보면 어김 없이 어느 시점에서 오류가 나기 마련입니다. (완벽해보여도 어떤 말도 안되는 오류가 발생할 수 있습니다) try … catch 구문을 사용하면 우아하게 런타임 오류를 처리하고 웹 서비스의 동작에 미치는 영향을 줄일 수 있습니다. 당신의 코드를 개선하거나 에러를 하나하나 제거하기 위해 새로운 유닛 테스트를 만들기 위해서는 이 try … catch 구문을 사용합시다.</p><blockquote>모든 단계를 마치셨습니다</blockquote><p>이 7단계는 제가 지금까지 제가 작성한 코드 중 가장 자랑스럽다고 생각하는 코드를 만드는데에 도움이 되었습니다. 우리의 프로젝트에서 고품질의 자바스크립트 코드를 생산하여 웹 서비스를 같이 개선해 나갑시다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a02655bb6873" width="1" height="1"><hr><p><a href="https://medium.com/sunhyoups-story/7-a02655bb6873">보다 좋은 자바스크립트 코드를 작성하기 위한 7단계</a> was originally published in <a href="https://medium.com/sunhyoups-story">Sunhyoup’s Story</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>