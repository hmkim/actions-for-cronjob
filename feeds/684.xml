<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>shalomeir&#039;s blog</title>
	<atom:link href="http://www.shalomeir.com/feed/" rel="self" type="application/rss+xml" />
	<link>http://www.shalomeir.com</link>
	<description>Seong-gyu&#039;s Post Archives</description>
	<lastBuildDate>Mon, 17 Dec 2018 10:57:34 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	

<image>
	<url>https://i2.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_bbclean1-54682dbb_site_icon.png?fit=32%2C32</url>
	<title>shalomeir&#039;s blog</title>
	<link>http://www.shalomeir.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">78417219</site>	<item>
		<title>snippod-starter-demo-app &#8211; Full Stack : React, Flux (Redux), Django</title>
		<link>http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/</link>
		<comments>http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/#comments</comments>
		<pubDate>Mon, 25 Jul 2016 12:10:49 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[Django]]></category>
		<category><![CDATA[DRF]]></category>
		<category><![CDATA[Flux]]></category>
		<category><![CDATA[Full Stack]]></category>
		<category><![CDATA[FullStack]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[REST]]></category>
		<category><![CDATA[Snippod]]></category>
		<category><![CDATA[리액트]]></category>
		<category><![CDATA[스닙팟]]></category>
		<category><![CDATA[장고]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=495</guid>
		<description><![CDATA[<p>snippod-starter-demo-app &#8211; Full Stack Architecture : React &#38; Flux + Django REST Framework 일명 Single Page Application (SPA), 웹 어플리케이션은 네이티브앱과는 별도로 빠르게 성장하고 있는 플랫폼입니다. 여전히 웹은 누구에게나 친숙하고 접근성이 좋은 플랫폼이며, SPA는 네이티브와 유사한 경험을 줄 수 있기 때문에 사용성이 중요한 웹서비스는 웹앱으로 만들어 지고 있습니다. &#160; &#160; &#160; &#160; 2015년 초 창업을 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/">snippod-starter-demo-app &#8211; Full Stack : React, Flux (Redux), Django</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>snippod-starter-demo-app &#8211; Full Stack Architecture : React &amp; Flux + Django REST Framework</h3>
<p>일명 Single Page Application (SPA), 웹 어플리케이션은 네이티브앱과는 별도로 빠르게 성장하고 있는 플랫폼입니다. 여전히 웹은 누구에게나 친숙하고 접근성이 좋은 플랫폼이며, SPA는 네이티브와 유사한 경험을 줄 수 있기 때문에 사용성이 중요한 웹서비스는 웹앱으로 만들어 지고 있습니다.</p>
<p>&nbsp;</p>
<p><img class="alignnone aligncenter" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/React.js-Flux-3.png?resize=359%2C205&#038;ssl=1" alt="" width="359" height="205" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p><img class="alignnone aligncenter" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/django-rest-logo.png?resize=460%2C203&#038;ssl=1" alt="" width="460" height="203" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>2015년 초 창업을 준비하면서 웹앱으로 프로덕트를 준비해야 겠다는 생각과 함께 어떤 stack으로 웹앱을 구현할지가 새로운 고민이 되었었습니다. 그리고 Facebook이 공개한 <a href="https://facebook.github.io/react/"><strong>React</strong></a> JavaScript 라이브러리와 <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> Architecture를 접하며 이를 이용하는 것이 가장 좋은 선택이라는 결론을 내렸고, 관련된 오픈소스들을 분석해보면서 사용법을 익히고 가장 스탠다드한 적용방식이 무엇인지 고민했습니다. 몇개월여 준비하여 snippod-boilerplate 를 만들었고, 이를 기반으로 2016년부터 <a href="https://www.snippod.com/"><strong>Snippod</strong></a> 웹앱 서비스를 개발하고 있습니다. 그리고 최근(2016년 7월) 스닙팟(Snippod)의 베이스가 되는 boilerplate가 많이 변경되었고 더 이상 boilerplate 라고 명명하기엔 많은 기능들이 담기게 되어 <strong>데모 앱(Demo App)</strong> 형태로 GitHub 에 새로 공개하였습니다. 그래서 다시 현재 공개된 <a href="https://github.com/shalomeir/snippod-starter-demo-app"><strong>Snippod-Starter-Demo-App</strong></a> 저장소 코드에 대한 상세 설명을 블로그에 포스팅게 되었습니다.</p>
<p>대부분의 웹앱 샘플 프로그램의 서버사이드는 JavaScript End to End 구현에 따른 여러 잇점때문에 <strong>Node.js</strong>를 많이 사용하고 있었습니다. 그래서 처음에는 저 역시 <strong>Node.js</strong>로만 서버를 구현하려 했습니다. 하지만 향후 본 프로덕트를 보다 복잡한 데이터 모델을 사용하는 서비스로 발전시켜야 했기 때문에, 이전에 경험해본 Django ORM 모델을 활용하고 싶었고,<sup id="fnref-495-1"><a href="#fn-495-1" class="jetpack-footnote">1</a></sup> 그래서 <a href="https://www.djangoproject.com/"><strong>Django</strong></a>으로 REST API 서버를 별도로 구축하게 되었습니다.</p>
<p>&nbsp;</p>
<figure style="width: 800px" class="wp-caption aligncenter"><img class="alignnone aligncenter" src="	
https://s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/SnippodStarterDemoAppArchitecture.png" alt="" width="800" /><figcaption class="wp-caption-text">Snippod Starter Demo Application Full Stack Diagram</figcaption></figure>
<p>&nbsp;</p>
<p>공유한 데모 앱은 <a href="https://facebook.github.io/react/"><strong>React</strong></a> + <a href="https://github.com/gaearon/redux"><strong>Redux</strong></a> 프론트사이드와 <a href="http://www.django-rest-framework.org/"><strong>Django REST</strong></a> 서버사이드로 <strong>Full Stack</strong>을 구현한 오픈소스이며 저장소에는 프론트 사이드와 서버 사이드 GitHub 저장소를 각각 <a href="https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88">Git 서브모듈</a>로 바라보고 있습니다.</p>
<figure style="width: 600px" class="wp-caption aligncenter"><a href="http://snippod-demo-front.9r5e86piij.ap-northeast-2.elasticbeanstalk.com/"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/SnippodStarterDemoApp_Capture_Ko_160717.png?w=600&#038;ssl=1" alt="" data-recalc-dims="1" /></a><figcaption class="wp-caption-text">Snippod Starter Demo Application like Hacker news</figcaption></figure>
<ul>
<li><strong>Git Repository</strong> : <a href="https://github.com/shalomeir/snippod-starter-demo-app">https://github.com/shalomeir/snippod-starter-demo-app</a>
<ul>
<li><strong>Git Repository (Front Side)</strong> : <a href="https://github.com/shalomeir/snippod-starter-demo-app-front">https://github.com/shalomeir/snippod-starter-demo-app-front</a></li>
<li><strong>Git Repository (Server Side)</strong> : <a href="https://github.com/shalomeir/snippod-starter-demo-app-server">https://github.com/shalomeir/snippod-starter-demo-app-server</a></li>
<li><strong>Git Repository For CodeLab (Front Side)</strong> : <a href="https://github.com/shalomeir/snippod-starter-demo-app-front/tree/codelab">https://github.com/shalomeir/snippod-starter-demo-app-front/tree/codelab</a></li>
</ul>
</li>
<li><strong>Git Repository For CodeLab 설치를 위한 설정 가이드 문서</strong> : <a href="https://docs.google.com/document/d/1PPooko0uzUanYZMwKrEUXUWMD3FXCarKhVxGq5_Kip0/edit?usp=sharing">https://docs.google.com/document/d/1PPooko0uzUanYZMwKrEUXUWMD3FXCarKhVxGq5_Kip0/edit?usp=sharing</a></li>
<li><strong>Git Repository For CodeLab 강의 PPT 자료<sup id="fnref-495-2"><a href="#fn-495-2" class="jetpack-footnote">2</a></sup></strong> : <a href="https://drive.google.com/file/d/0B9ltVFRI_UMiTjdNYzc5UklQTVU/view?usp=sharing">https://drive.google.com/file/d/0B9ltVFRI_UMiTjdNYzc5UklQTVU/view?usp=sharing</a><br />
&nbsp;</li>
<li><strong>DEMO (Updated with <a href="https://www.snippod.com/">Snippod Inc.</a>)</strong> : <a href="http://snippod-demo-front.9r5e86piij.ap-northeast-2.elasticbeanstalk.com/">http://snippod-demo-front.9r5e86piij.ap-northeast-2.elasticbeanstalk.com</a></li>
</ul>
<p>&nbsp;</p>
<p>그래서 본 포스팅에서는 공유한 Full Stack 데모 프로그램에서 사용하고 있는 기술 스택들과 세부적인 라이브러리들을 간단히 소개하고 본 기술 스택을 처음 사용하게 되면서 도움이 되었던 여러 자료들을 공유하고자 합니다.<sup id="fnref-495-3"><a href="#fn-495-3" class="jetpack-footnote">3</a></sup></p>
<p>&nbsp;</p>
<h2>사용한 기술 스택</h2>
<p>본 snippod demo app에서 사용한 주요 라이브러리 들과 간략한 소개는 다음과 같습니다.</p>
<h3>Frontend side</h3>
<ul>
<li><a href="http://facebook.github.io/react/"><strong>React</strong></a>: UI View 를 만들어 주기 위한 라이브러리. 만들고자 하는 부분들을 Component단위로 구현</li>
<li><a href="https://github.com/gaearon/redux"><strong>Redux</strong></a>: Flux 의 구조에 영향을 받아 단방향 데이터 흐름을 사용하게 해주는 상태 컨테이너 </li>
<li><a href="https://github.com/paularmstrong/normalizr"><strong>normalizr</strong></a>: Flux 와 Redux 앱을 위해 JSON 응답 결과를 정의한 Schema에 따라 정규화 해주는 라이브러리</li>
<li><a href="http://redux-form.com/"><strong>Redux Form</strong></a>: Redux store를 통해 React 콤포넌트 내 form 데이터를 관리해주는 라이브러리</li>
<li><a href="http://semantic-ui.com/"><strong>Semantic UI</strong></a>: UI 스타일링을 위한 프레임워크로 Bootstrap과 유사한 역할을 하지만 더 자유도가 높은 편이며 커스터마이징을 위한 체계적인 스타일 구조를 별도의 빌드 프로세스를 통해 지원함</li>
<li><a href="https://github.com/FormidableLabs/radium"><strong>Radium</strong></a>: <a href="https://facebook.github.io/react/tips/inline-styles.html">React Inlins Styles</a>을 보다 파워풀하게 사용하기 위한 라이브러리</li>
<li><a href="http://rackt.github.io/react-router/"><strong>React-router</strong></a>: SPA 에서 중요한 Routing (url path) 처리</li>
<li><a href="https://github.com/reactjs/react-router-redux"><strong>react-router-redux</strong></a>: 구 이름은 redux-simple-router. React-router와 Redux store의 sync를 유지해줌</li>
<li><a href="https://github.com/yahoo/react-intl"><strong>React Intl</strong></a>: Yahoo에서 제공하는 국제화(i18n)를 위한 JavaScript 라이브러리 <a href="http://formatjs.io/">Format.js</a>의 일부로 React 를 위한 바인딩 기능을 제공</li>
<li><a href="https://visionmedia.github.io/superagent/"><strong>superagent</strong></a>: ajax call 을 쉽게 하기 위한 라이브러리</li>
<li><a href="https://webpack.github.io/"><strong>Webpack</strong></a>: 모듈 번들러</li>
</ul>
<h3>Server side</h3>
<ul>
<li><a href="https://www.djangoproject.com/"><strong>Django</strong></a>: 장고 웹 프레임워크</li>
<li><a href="http://www.django-rest-framework.org/"><strong>Django REST Framework</strong></a>: REST API 서버를 만들기 위한 프레임워크</li>
<li><a href="http://initd.org/psycopg/"><strong>psycopg2</strong></a>: PostgreSQL 을 장고에서 쓰기 위한 어답터</li>
</ul>
<p>&nbsp;</p>
<h4><strong>React + Flux(Redux)</strong></h4>
<p><strong>React</strong>를 이용한 웹 어플리케이션을 개발할 때 <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> 아키텍쳐를 쉽게 구현하기 위한 여러 라이브러리를 고려하였었고 초기에는 <a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>를 적용하였었습니다. 하지만 <a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>는 ES6를 완벽하게 지원하지 않고 mixin 을 중심으로 만들어져 있어 React 버전 업데이트에 따라 다른 대안을 고려하게 되었습니다. 마침 새롭게 떠오른 <a href="https://github.com/gaearon/redux"><strong>redux</strong></a>가 현재 React 커뮤니티에서 독보적인 지지를 받고 있었기에 <a href="https://github.com/gaearon/redux"><strong>redux</strong></a>를 통해 전체 어플리케이션 구조를 관리하는 것으로 바꾸게 되었습니다. 처음 <a href="https://github.com/gaearon/redux"><strong>redux</strong></a>를 접할때는 <a href="http://dobbit.github.io/redux/docs_kr/advanced/AsyncFlow.html">비동기 API 핸들링</a>이나 <a href="http://dobbit.github.io/redux/docs_kr/advanced/Middleware.html">미들웨어 개념</a>등 한번에 잘 이해가 어려운 부분이 있었지만 적용하고 사용하면서 <a href="https://github.com/gaearon/redux"><strong>redux</strong></a>를 사용하지 않았다면 현재의 복잡한 데이터 스토어를 관리하기 위해 얼마나 많은 부분을 직접 처만들고 관리해야 했을지 걱정이 되고 지금은 <a href="https://github.com/gaearon/redux"><strong>redux</strong></a>로 구조를 바꾼 결정에 아주 만족하고 있습니다.</p>
<p><a href="https://github.com/gaearon/redux"><strong>redux</strong></a>는 개발자는 기능에 따른 함수인 <a href="http://dobbit.github.io/redux/docs_kr/basics/Actions.html">ActionCreator</a> 및 <a href="http://dobbit.github.io/redux/docs_kr/basics/Reducers.html">Reducer</a> 들을 만들고 redux를 통해 조합해주면 모든 웹앱의 상태를 단일 Store로 관리할 수 있게 합니다. 제공한 오픈소스에서는 ActionCreator 및 Reducer 를 구현하는 과정에서 <a href="https://github.com/erikras">&#8216;Erik Rasmussen&#8217;</a>님이 제안한 <a href="https://github.com/erikras/ducks-modular-redux"><strong>Ducks</strong></a> 방법을 통해 기능적으로 공통분모가 있는 ActionCreator 와 Reducer, Actions 를 하나의 파일로 관리하고 있습니다. 또한 JSON 데이터 처리를 하는 데 있어 개별 ID에 따라 모든 데이터를 &#8216;entities&#8217;에 단일 객체로 저장하고 list 는 별도의 pagination 객체로 처리하고 있으며 이를 위해 정규화 과정을 처리해주는 <a href="https://github.com/paularmstrong/normalizr"><strong>normalizr</strong></a> 라이브러리를 사용하여 자동화 하였습니다.</p>
<h4><strong>React-router</strong></h4>
<p>WebApp을 만들때 routing 처리는 까다롭지만 너무 중요한 요소 입니다. <a href="http://rackt.github.io/react-router/"><strong>React-router</strong></a>가 그 역할을 잘 수행해줍니다. 또한 <a href="https://github.com/reactjs/react-router-redux"><strong>react-router-redux</strong></a>를 통해 Redux Store와 잘 동기가 되어 있습니다. 실제 router를 셋팅하는 데 있어 처음에는 조금 막막한데, 샘플 소스가 가이드가 될 수 있을 것 같습니다.</p>
<h4><strong>Semantic UI</strong></h4>
<p>UI 구현을 위해 사용하는 프레임워크로 본 오픈소스에서는 <a href="http://semantic-ui.com/"><strong>Semantic UI</strong></a>를 도입하였습니다. 일반적으로 많이 사용되는 <a href="http://getbootstrap.com/">Bootstrap</a>과 비교해 보았을 때, Class 네이밍 룰의 의미적인 조합으로만 특정 Dom에 원하는 콤포넌트 스타일링이 적용되기에 사용하기 편리하고 제공하는 기본 콤포넌트들의 수준 또한 굉장히 높고 다양합니다. 최근 많이 적용되고 있는 Google이 제안한 <a href="http://www.google.com/design/spec/material-design/introduction.html"><strong>Material</strong></a> 디자인을 활용한 React Meterial Component 도입도 검토하였으나 적용은 쉬운 반면 커스터마이징이 쉽지 않다고 판단되었고 <a href="http://semantic-ui.com/"><strong>Semantic UI</strong></a>는 유연하게 스타일 변경이 가능한 점이 특히 마음에 들어 도입하였습니다.<br />
<a href="http://semantic-ui.com/"><strong>Semantic UI</strong></a>에서는 테마 적용 및 커스텀 테마를 작성하고 적용 하기 위한 별도의 스타일 선언 및 관리 체계가 구조화되어 있고 이를 위한 별도의 빌드 도구도 <a href="http://gulpjs.com/">Gulp</a>를 통해 제공합니다. 만약 체계적으로 CSS (SASS or LESS) 스타일을 관리하고 싶다면 <a href="http://semantic-ui.com/"><strong>Semantic UI</strong></a>에서 제공하는 스타일을 거의 사용하지 않아도 커스텀 테마 기능이 좋은 가이드가 되어 줍니다. 아쉬운 점이 없는 것은 아니지만 한번 사용해보는 것 추천 드립니다. Quora에 올라온 <a href="https://www.quora.com/Do-you-prefer-Semantic-UI-or-Bootstrap">&#8220;Do you prefer Semantic UI or Bootstrap?&#8221;</a> 질문에 대한 답변들도 참고해보세요~</p>
<h4><strong>Radium</strong></h4>
<p><a href="https://facebook.github.io/react/tips/inline-styles.html">React Inlins Styles</a>은 React 커뮤니티가 성장하면서 이목을 많이 받고 있는 스타일 적용의 한 방안으로 React 에서 기본적으로 제공하는 기능중 하나입니다. React 만으로는 &#8216;:hover&#8217; 또는 MediaQuery 등의 적용이 까다로운 편인데 이를 편하게 할 수 있고 그외 편의성을 향상시켜주는 라이브러리가 많이 존재합니다. 그중 저는 <a href="https://github.com/FormidableLabs/radium"><strong>Radium</strong></a>을 적용하였습니다. Global하게 선언하는 CSS 스타일 외에 직접적으로 Style을 주입시키는 <a href="https://facebook.github.io/react/tips/inline-styles.html">Inlins Styles</a> 방식을 하이브리드로 함께 사용하는 것이 편하지만 정확히 어떤 경우에만 <a href="https://facebook.github.io/react/tips/inline-styles.html">Inlins Styles</a>을 통해 스타일을 선언할 지 명확한 기준을 세워서 사용하는 것이 좋을 것 같습니다. (그때 그때 귀찮지 않으려고 순간적으로 기준을 안 지킬 경우가 많아서 확고한 기준을 앞으로는 세우고 지켜야 겠다는 생각을 하고 있습니다.)</p>
<h4><strong>React Intl</strong></h4>
<p><a href="https://ko.wikipedia.org/wiki/%EA%B5%AD%EC%A0%9C%ED%99%94%EC%99%80_%EC%A7%80%EC%97%AD%ED%99%94">국제화와 지역화</a> 기능을 앱 프레임워크 차원에서 지원하기 위해 현재 탄탄하게 개발 발전하고 있는 Yahoo에서 제공한 JavaScript 라이브러리 <a href="http://formatjs.io/">Format.js</a>의 React 바인딩 버전인 <a href="https://github.com/yahoo/react-intl"><strong>React Intl</strong></a>을 전면적으로 도입하였습니다. 쉽게 여러 언어로 설정을 변경할 수 있게 되어 있으며 번역 파일을 별도로 관리할 수 있도록 체계화 되어 있습니다. 참고로 GitHub 공유된 <a href="https://github.com/emmenko/redux-react-router-async-example"><strong>&#8216;redux-react-router-async-example&#8217;</strong></a> 오픈소스에서 본 기능을 가져와 적용하였습니다.</p>
<h4><strong>superagent</strong></h4>
<p>ajax call 을 하기 위해 사용하였습니다. jQuery로 처리할 때보다 편한 점이 있어 사용합니다.</p>
<h4><strong>Django</strong></h4>
<p>서버 프로그래밍에선 비동기 프로그래밍이 더욱 까다롭기에 JavaScript보다 python이 더 편하것 같습니다. 게다가 Django Model 에서 제공하는 ORM이 아주 훌륭하고 공식 문서도 너무 잘 되어 있어요.</p>
<h4><strong>Django REST Framework</strong></h4>
<p>RESTful 한 API 서버가 서버와 클라이언트간의 기준이라고 할 때, 이 기준을 잘 지킬 수 있게 해주는 고마운 프레임워크 입니다. REST API를 제대로 다 이해하고 직접 구현했어야 한다면 굉장히 많은 시간을 이 부분에 쓰거나, 또는 무시하고 나중에 고생하거나 하지 않을까 싶습니다.</p>
<h4><strong>psycopg2</strong></h4>
<p>RDBMS 를 선택하는데 있어 Django 와 함께 사용한다면 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>과 <a href="https://www.mysql.com/"><strong>MySQL</strong></a>이라는 두가지 선택지 중에 고민하게 되는 경우가 많을 것 같습니다. 저는 처음에는 <a href="https://www.mysql.com/"><strong>MySQL</strong></a>로 배포를 하다 변경사항 발생시 Migration 과정에서 여러가지로 애를 먹고 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>로 바꾸었습니다. <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>에서는 Migration 중에 문제가 사라져서 초보인 저는 맘 편하게 고민하지 않고 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>를 사용하고 있습니다. 공유된 <strong>snippod-boilerplate</strong> 소스에서는 <strong>SQLite3</strong>로 개발환경 셋업이 되어 있어서 배포를 하지 않는 다면 DB는 따로 신경을 쓰지 않으셔도 됩니다.</p>
<p>&nbsp;</p>
<h2>AWS 배포하기</h2>
<figure style="width: 256px" class="wp-caption alignnone"><a href="http://aws.amazon.com/ko/elasticbeanstalk/"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/elastic_beanstalk.png?resize=256%2C256&#038;ssl=1" alt="" width="256" height="256" data-recalc-dims="1" /></a><figcaption class="wp-caption-text">AWS Elastic Beanstalk Logo</figcaption></figure>
<p><a href="http://aws.amazon.com/ko/elasticbeanstalk/"><strong>Elastic Beanstalk</strong></a>은 로드 밸런싱, 스케일링 작업도 손쉽게 가능하고 모니터링도 쉽게 가능하다는 여러 홍보물을 접해왔었기에 이를 이용해봐야 겠다고 생각하고 이번에 데모 프로그램을 배포하는데 사용했습니다. 공유된 <a href="http://snippod-demo-front.9r5e86piij.ap-northeast-2.elasticbeanstalk.com">&#8216;Snippod Starter Demo App&#8217;</a>을 살펴보시면 Elastic Beanstalk에서 제공하는 것을 그대로 사용하였음을 알 수 있는데요. 개발환경에서 올려보는 것과는 여러가지로 다른점이 많아 초기 셋팅에 에로사항이 꽤 있었습니다.<br />
혹시 Elastic Beanstalk에 Django 배포 셋업을 참고하시고 싶으시다면 공유된 소스 중 &#8216;./ebextensions&#8217; 디렉토리를 살펴보시면 도움이 될 것 같습니다.</p>
<p>&nbsp;</p>
<h4>React Server-side Rendering</h4>
<p>초기 React를 <a href="https://nodejs.org/"><strong>Node.js</strong></a>서버로 구현하고 싶었던 가장 큰 이유는 Server-side Rendering 구현이 훨씬 쉽다는 점 때문입니다. <a href="http://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94">SEO</a>를 위해서는 React Server-side Rendering이 반드시 적용되어야 하며, 첫 페이지 로딩 속도도 훨씬 빨라지기 때문에 Django 에서도 React Server-side Rendering을 할 수 있는 방안을 검토해 보았습니다.</p>
<p>본 데모 앱에서는 Node.js서버에서 Server-side Rendering 이 가능하도록 잘 구현된 boilerplate에서 코드를 가져와서 적용은 하였지만 아직 충분히 테스트 되지 못하여 option은 꺼둔 상태 입니다.</p>
<p>&nbsp;</p>
<h2>Reference</h2>
<h4><a href="http://stackshare.io/instagram/instagram">Instagram Stack</a></h4>
<p>React에 처음 관심을 가지게 된 것은 역시 <a href="https://instagram.com/">Instagram</a>의 <a href="https://github.com/petehunt">Pete Hunt</a>가 발표했던 <a href="https://youtu.be/VkTCL6Nqm6Y">Instagram에서 React를 통해 SPA를 도입한 사례 소개 영상</a> 때문이었고 이후 Instagram이 굉장히 효율적으로 서비스를 만들었다는 생각에 Instagram 관련 기술 정보 들을 많이 참고하였습니다. Instagram에서 적극적으로 정보를 공유해주어 참고할 수 있는 자료가 많았는데요, 개발팀이 스타트업 초기 고려했던 기술 스택에 대해 쓴 글인 <a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances"><strong>&#8216;What Powers Instagram: Hundreds of Instances, Dozens of Technologies&#8217;</strong></a>은 <a href="https://charsyam.wordpress.com/2011/12/17/%EB%B0%9C-%EB%B2%88%EC%97%AD-%EC%88%98%EB%B0%B1%EB%8C%80%EC%9D%98-%EC%9E%A5%EB%B9%84%EC%99%80-%EC%88%98%EC%8B%AD%EA%B0%80%EC%A7%80%EC%9D%98-%EA%B8%B0%EC%88%A0-instagram%EC%9D%98-%ED%9E%98/">한글로 번역된 포스팅</a>도 존재합니다. 결국 본 데모 프로그램에 사용한 주요 기술들인 React+Django+PostgreSQL 은 Instagram 과 정확히 일치합니다.</p>
<h4>GitHub Open Source</h4>
<p>GitHub 에서 React, Flux, Django 및 그외 사용한 라이브러리들에 관련된 샘플 프로그램들은 되도록 많이 설치해 보려했고 굉장히 도움이 많이 되었습니다. 개별적인 소스 들 중에 본 데모 프로그램에 직접적으로 영향을 준 소스는 아래와 같습니다.</p>
<h5>Front side</h5>
<ul>
<li><a href="https://github.com/erikras/react-redux-universal-hot-example">React Redux Universal Hot Example</a> : React 와 Redux를 적용한 boilerplate 중 가장 파워풀한 소스 중 하나로 현재 데모 앱의 기반이 됩니다.</li>
<li><a href="https://github.com/rackt/redux/tree/master/examples/real-world">Redux Real-World Example</a>: 특히 <a href="https://github.com/paularmstrong/normalizr"><strong>normalizr</strong></a>를 <a href="https://github.com/reactjs/redux/blob/master/examples/real-world/reducers/paginate.js"><strong>paginate</strong></a>하는 방식을 잘 보여줍니다.</li>
<li><a href="https://github.com/gaearon/flux-react-router-example">gaeron&#8217;s Flux React Router Example</a> : 한번 GET 해온 데이터들을 Page 나 Sorting 옵션이 바뀌어도 잘 보관하고 있도록 하는 것은 중복적인 서버와의 통신을 막고 훨씬 빠르게 페이지간 이동을 가능하게 해주는 데요, 이러한 방식의 Store를 구현하기 위해 gaeron이 공유한 소스가 굉장히 도움이 되었습니다.</li>
<li><a href="https://github.com/emmenko/redux-react-router-async-example">redux-react-router-async-example</a> : <a href="https://github.com/yahoo/react-intl"><strong>React Intl</strong></a>적용 및 빌드 도구는 본 예제소스에서 가져왔습니다.</li>
</ul>
<h5>Server side</h5>
<ul>
<li><a href="https://thinkster.io/django-angularjs-tutorial/">Thinkster.io Django and AngularJS Tutorial</a> : Django가 Template이 아닌 AngularJS를 주로 사용하는 케이스로 Django REST Framework를 사용하고 있었기에 서버 측면에서 참고가 되었습니다.</li>
</ul>
<h6>향후 <a href="https://www.snippod.com">Snippod</a> 공식 블로그를 통해 본 포스팅은 다시 업데이트 될 예정입니다.</h6>
<div class="footnotes">
<hr />
<ol>
<li id="fn-495-1">
물론 Node.js 에서도 <a href="http://docs.sequelizejs.com/en/latest/">Sequelize</a>등을 이용하여 ORM을 사용할 수 있기는 합니다.&#160;<a href="#fnref-495-1">&#8617;</a>
</li>
<li id="fn-495-2">
2016년 7월 2회에 걸쳐 진행한 <a href="http://onoffmix.com/event/72541"><strong>오프라인 코드랩</strong></a>중 사용한 자료 입니다.&#160;<a href="#fnref-495-2">&#8617;</a>
</li>
<li id="fn-495-3">
웹 프로그래밍 기술을 익히는 데 참고했던 서적 및 온라인 강의들은 <a href="http://www.shalomeir.com/2015/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B4%80%EB%A0%A8-%EC%84%9C%EC%A0%81-%EC%98%A8%EB%9D%BC%EC%9D%B8-%EC%9E%90%EB%A3%8C%EB%93%A4/"><strong>&#8216;웹 프로그래밍 관련 서적, 온라인 자료들&#8217;</strong></a>포스트로 공유하였습니다.&#160;<a href="#fnref-495-3">&#8617;</a>
</li>
</ol>
</div>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/">snippod-starter-demo-app &#8211; Full Stack : React, Flux (Redux), Django</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/feed/</wfw:commentRss>
		<slash:comments>7</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">495</post-id>	</item>
		<item>
		<title>snippod-boilerplate &#8211; Full Stack : React, Flux (Reflux), Django</title>
		<link>http://www.shalomeir.com/2015/05/snippod-boilerplate-1-full-stack-react-flux-django/</link>
		<comments>http://www.shalomeir.com/2015/05/snippod-boilerplate-1-full-stack-react-flux-django/#comments</comments>
		<pubDate>Sun, 24 May 2015 08:02:59 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[Django]]></category>
		<category><![CDATA[Flux]]></category>
		<category><![CDATA[FullStack]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[Reflux]]></category>
		<category><![CDATA[REST]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=352</guid>
		<description><![CDATA[<p>snippod-boilerplate (Deprecated) &#8211; Full Stack Architecture : React &#38; Flux + Django REST Framework 본 포스팅은 2016년 07월 부로 새롭게 업데이트된 소스코드에 따라 &#8216;snippod-starter-demo-app &#8211; Full Stack : React, Flux (Redux), Django&#8217;로 다시 포스팅 되었습니다. 일명 Single Page Application (SPA), 웹 어플리케이션은 네이티브앱과는 별도로 빠르게 성장하고 있는 플랫폼입니다. 여전히 웹은 누구에게나 친숙하고 접근성이 좋은 플랫폼이며, [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2015/05/snippod-boilerplate-1-full-stack-react-flux-django/">snippod-boilerplate &#8211; Full Stack : React, Flux (Reflux), Django</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>snippod-boilerplate (Deprecated) &#8211; Full Stack Architecture : React &amp; Flux + Django REST Framework</h3>
<h4>본 포스팅은 2016년 07월 부로 새롭게 업데이트된 소스코드에 따라 <a href="http://www.shalomeir.com/2016/07/snippod-starter-demo-app-full-stack-react-redux-django/"><strong>&#8216;snippod-starter-demo-app &#8211; Full Stack : React, Flux (Redux), Django&#8217;</strong></a>로 다시 포스팅 되었습니다.</h4>
<hr />
<p>일명 Single Page Application (SPA), 웹 어플리케이션은 네이티브앱과는 별도로 빠르게 성장하고 있는 플랫폼입니다. 여전히 웹은 누구에게나 친숙하고 접근성이 좋은 플랫폼이며, SPA는 네이티브와 유사한 경험을 줄 수 있기 때문에 사용성이 중요한 웹서비스는 웹앱으로 만들어 지고 있습니다.</p>
<p>&nbsp;</p>
<p><img class="alignnone aligncenter" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/React.js-Flux-3.png?resize=359%2C205&#038;ssl=1" alt="" width="359" height="205" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p><img class="alignnone aligncenter" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/django-rest-logo.png?resize=460%2C203&#038;ssl=1" alt="" width="460" height="203" data-recalc-dims="1" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>저 역시 준비하고 있는 첫 프로덕트를 웹앱으로 만들기로 정했기에, 이때부터는 어떤 stack으로 웹앱을 구현할지가 새로운 고민이었습니다. 그리고 Facebook이 공개한 <a href="https://facebook.github.io/react/"><strong>React</strong></a> JavaScript 라이브러리와 <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> Architecture를 접하며 이를 이용하는 것이 현재 저로서는 가장 좋은 선택지라고 결론을 내렸고, 관련된 오픈소스들을 분석해보면서 사용법을 익히고 가장 standard한 적용방식을 고민했습니다.</p>
<p>대부분의 웹앱 샘플 프로그램의 오픈소스 서버사이드는 JavaScript End to End 구현에 따른 여러 잇점때문에 <strong>Node.js</strong>를 사용하고 있었습니다. 그래서 처음에는 저 역시 <strong>Node.js</strong>로 구현하려 했습니다. 하지만 향후 본 프로덕트를 보다 복잡한 데이터 모델을 사용하는 서비스로 발전시켜야 했기 때문에, 이전에 경험해본 Django ORM 모델을 활용하고 싶었고,<sup id="fnref-352-1"><a href="#fn-352-1">1</a></sup> 그래서 <a href="https://www.djangoproject.com/"><strong>Django</strong></a>로 서버를 구축하게 되었습니다.</p>
<p>그리고 수많은 오픈소스가 <strong>Github</strong>에서 공유되고 있지만 의외로 <a href="https://facebook.github.io/react/"><strong>React</strong></a> + <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> 프론트사이드와 <a href="http://www.django-rest-framework.org/"><strong>Django REST</strong></a> 서버사이드로 <strong>Full Stack</strong>을 구현한 오픈소스를 찾지 못했기에, 저와 유사한 고민을 하시는 분들에게 조금이나마 도움이 될까 싶어 데모 프로그램을 만들고 이를 오픈소스로 공유하였습니다. 참고로 본 데모 프로그램은 기존에 React로 만들어진 Evan의 <a href="https://github.com/echenley/react-news">데모 프로그램</a>을 clone하였기 때문에 프로덕트 구조, 기획 및 디자인을 거의 그대로 가져와서 발전시켰습니다.<sup id="fnref-352-2"><a href="#fn-352-2">2</a></sup></p>
<ul>
<li><strong>Git Repository (Deprecated)</strong> : <a href="https://github.com/shalomeir/snippod-boilerplate">https://github.com/shalomeir/snippod-boilerplate</a></li>
<li><strong>DEMO (Updated with <a href="https://www.snippod.com/">Snippod Inc.</a>)</strong> : <a href="http://snippod-demo-front.ap-northeast-2.elasticbeanstalk.com/">http://snippod-demo-front.ap-northeast-2.elasticbeanstalk.com/</a></li>
</ul>
<p>&nbsp;</p>
<p>그래서 본 포스팅에서는 공유한 Full Stack 데모 프로그램에서 사용하고 있는 기술 스택들과 세부적인 라이브러리들을 간단히 소개하고 본 기술 스택을 처음 사용하게 되면서 도움이 되었던 여러 자료들을 공유하고자 합니다.</p>
<h6>참고로 저는 근래 몇개월 동안 JavaScript, Django 관련 서적 및 온라인 강의<sup id="fnref-352-3"><a href="#fn-352-3">3</a></sup>와 <a href="https://github.com/">Github</a> 를 통해 셀프 스터디로 코딩을 배워나갔지만 아직 내공이 많이 부족합니다. 그래서 소스를 보시면 엉성한 부분이 많이 있습니다. 피드백 주시면 더욱 감사하겠습니다!</h6>
<p>&nbsp;</p>
<h2>사용한 기술 스택</h2>
<p>본 snippod demo 프로그램에서 사용한 주요 라이브러리 들과 간략한 소감은 다음과 같습니다.</p>
<h3>Frontend side</h3>
<ul>
<li><a href="http://facebook.github.io/react/"><strong>React</strong></a>: UI View 를 만들어 주기 위한 라이브러리. 만들고자 하는 부분들을 Component단위로 구현</li>
<li><a href="https://github.com/spoike/refluxjs"><strong>Reflux</strong></a>: Flux 의 구조에 영향을 받아 단방향 데이터 흐름을 사용하게 해주는 라이브러리</li>
<li><a href="http://facebook.github.io/immutable-js/"><strong>Immutable js</strong></a>: JavaScript 에서 Immutable 한 List, Map 등 자료구조 지원</li>
<li><a href="http://rackt.github.io/react-router/"><strong>React-router</strong></a>: SPA 에서 중요한 Routing (url path) 처리</li>
<li><a href="https://visionmedia.github.io/superagent/"><strong>superagent</strong></a>: ajax call 을 쉽게 하기 위한 라이브러리</li>
</ul>
<h3>Server side</h3>
<ul>
<li><a href="https://www.djangoproject.com/"><strong>Django</strong></a>: 장고 웹 프레임워크</li>
<li><a href="http://www.django-rest-framework.org/"><strong>Django REST Framework</strong></a>: REST API 서버를 만들기 위한 프레임워크</li>
<li><a href="http://initd.org/psycopg/"><strong>psycopg2</strong></a>: PostgreSQL 을 장고에서 쓰기 위한 어답터</li>
</ul>
<p>&nbsp;</p>
<h4><strong>React + Flux(Reflux)</strong></h4>
<p>모던 웹이 점차 <strong>Component</strong>로 구현하는 것이 중요해지고 있으며, <a href="https://www.polymer-project.org/0.5/"><strong>Polymer</strong></a>는 아직 IE에서 문제가 많기에, <strong>React</strong>를 사용하기로 결정하게 되었습니다. 그리고 이에 따라 <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> 아키텍쳐를 쉽게 구현하기 위한 여러 라이브러리를 고려했었는데요, 이 중 많은 분들이 사용하고 있는 <a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>를 적용하였습니다. <a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>는 아직 ES6를 완벽하게 지원하지 않는다는 단점이 있지만, <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a>의 기존 구조에서 Action과 같은 패턴으로 만들어지는 Dispatcher와 Action과 Store간의 연결을 위한 여러 메소드를 자동으로 생성해주어서 좀 더 코드가 줄고 깔끔하게 보이는 편 입니다. 현재 <a href="https://facebook.github.io/react/"><strong>React</strong></a> + <a href="https://facebook.github.io/flux/docs/overview.html"><strong>Flux</strong></a> 형태의 프론트를 만들때 많은 개발자분들이 <a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>를 이용하고 있습니다.</p>
<p><a href="https://github.com/spoike/refluxjs"><strong>reflux</strong></a>는 모든 Action, Store, Component 간에 event 기반으로 출판, 구독하는 방식으로 이루어져 있고 이에 대해서 <a href="http://blog.krawaller.se/posts/the-reflux-data-flow-model/"><strong>&#8216;The Reflux data flow model&#8217;</strong></a> 블로그 포스팅에서 그 특징을 잘 서술하고 있습니다. 결국 Pub/Sub 모델이고 Action 이벤트가 일어나면 이를 Store/Component 모두 구독가능합니다. Store에서 <strong>&#8216;trigger()&#8217;</strong>를 통해 publish한 event는 Component 뿐 아니라 다른 Store도 구독할수 있게 되어 있기 때문에 굉장히 다양한 direction 구조가 가능하게 됩니다. 그래서 사용자에 따라 다양한 방식으로 사용할 수 있고 그러다보니 현재까지 획일적인 방식이 보편화 되있지는 않았습니다. 예를 들면 Async 한 ajax call 등을 Store에서 처리하는 경우와 Action에서 처리하는 경우가 사용자에 따라 다르기도 하고요, Reflux 관련 자료들에서도 Store에서 external 서버 통신을 처리하는 방법을 많이들 이용합니다. 저의 경우 action 파트에서 ajax call을 처리하고 async 분기도 처리하도록 만들었습니다. 이렇게 함으로서 Action과 Store간의 역할을 확실하게 분리하고 data flow가 깔끔하게 드러납니다.</p>
<h4><strong>Immutable js</strong></h4>
<p>React에서는 Component 하위로 props를 전달하면서 UI를 렌더링하게 되는데, 이 때 자식콤포넌트들에게 JavaScript Object가 변경된 것을 빠르게 인식해서 변경된 데이터만 다시 렌더링함으로서 뛰어난 퍼포먼스를 보여줍니다. 하지만 전달되는 Object가 nested한 형태로 참조되는 값이 변경되면 React가 다시 렌러딩할 때 같은 props인줄 알고 다시 렌더링을 하지 않는 경우가 있습니다. 하지만 <a href="http://facebook.github.io/immutable-js/"><strong>Immutable js</strong></a>를 사용하면 nested한 객체에서 바라보는 값이 변경되면 무조건 root값도 변경되어서 이러한 문제가 발생하지 않습니다. 그래서 어떤 형태의 props를 받게 되던 상관없이 변경된 데이터가 오게되면 새롭게 rendering을 하게 됩니다. 또한 React Component에서 편하게 <a href="https://facebook.github.io/react/docs/pure-render-mixin.html"><strong>PureRenderMixin</strong></a>을 적용하여 퍼포먼스를 향상 시킬 수 있습니다. 저는 <a href="http://facebook.github.io/immutable-js/"><strong>Immutable js</strong></a>를 오직 Store에서만 적용했습니다. 그렇게 처리하면 View는 Immutable 객체를 신경안써도 되기 때문에 편하고 어차피 항상 새로운 데이터는 Store에서 받아오고 Immutable 객체를 통해 재생성된 값을 Store에서 던져주게 되므로 Immutable한 데이터를 처리하게 됩니다.</p>
<h4><strong>React-router</strong></h4>
<p>WebApp을 만들때 routing 처리는 까다롭지만 너무 중요한 요소 입니다. <a href="http://rackt.github.io/react-router/"><strong>React-router</strong></a>가 그 역할을 잘 수행해줍니다. 실제 router를 구현하는 데 있어 처음에는 조금 막막한데, 샘플 소스가 좋은 가이드가 될 수 있을 것 같습니다.</p>
<h4><strong>superagent</strong></h4>
<p>ajax call 을 하기 위해 사용하였습니다. jQuery로 처리할 때보다 편한것 같아요.</p>
<h4><strong>Django</strong></h4>
<p>서버 프로그래밍에선 비동기 프로그래밍이 더욱 까다롭기에 JavaScript보다 python이 더 편하것 같습니다. 게다가 Django Model 에서 제공하는 ORM이 아주 훌륭하고 공식 문서도 너무 잘 되어 있어요.</p>
<h4><strong>Django REST Framework</strong></h4>
<p>RESTful 한 API 서버가 서버와 클라이언트간의 기준이라고 할 때, 이 기준을 잘 지킬 수 있게 해주는 고마운 프레임워크 입니다. REST API를 제대로 다 이해하고 직접 구현했어야 한다면 굉장히 많은 시간을 이 부분에 쓰거나, 또는 무시하고 나중에 고생하거나 하지 않을까 싶습니다.</p>
<h4><strong>psycopg2</strong></h4>
<p>RDBMS 를 선택하는데 있어 Django 와 함께 사용한다면 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>과 <a href="https://www.mysql.com/"><strong>MySQL</strong></a>이라는 두가지 선택지 중에 고민하게 되는 경우가 많을 것 같습니다. 저는 처음에는 <a href="https://www.mysql.com/"><strong>MySQL</strong></a>로 배포를 하다 변경사항 발생시 Migration 과정에서 여러가지로 애를 먹고 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>로 바꾸었습니다. <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>에서는 Migration 중에 문제가 사라져서 초보인 저는 맘 편하게 고민하지 않고 <a href="http://www.postgresql.org/"><strong>PostgreSQL</strong></a>를 사용하고 있습니다. 공유된 <strong>snippod-boilerplate</strong> 소스에서는 <strong>SQLite3</strong>로 개발환경 셋업이 되어 있어서 배포를 하지 않는 다면 DB는 따로 신경을 쓰지 않으셔도 됩니다.</p>
<p>&nbsp;</p>
<h2>AWS 배포하기</h2>
<figure style="width: 256px" class="wp-caption alignnone"><a href="http://aws.amazon.com/ko/elasticbeanstalk/"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/snippod-boilerplate/elastic_beanstalk.png?resize=256%2C256&#038;ssl=1" alt="" width="256" height="256" data-recalc-dims="1" /></a><figcaption class="wp-caption-text">AWS Elastic Beanstalk Logo</figcaption></figure>
<p>현재 블로그를 구축하면서 <a href="http://aws.amazon.com/ko/"><strong>AWS</strong></a>의 EC2,RDS,S3를 한번 이용해 보았기 때문에 손쉽게 데모 프로그램도 배포가 가능하리라 생각했습니다. 그러나&#8230; ㅎ~<br />
<a href="http://aws.amazon.com/ko/elasticbeanstalk/"><strong>Elastic Beanstalk</strong></a>은 로드 밸런싱, 스케일링 작업도 손쉽게 가능하고 모니터링도 쉽게 가능하다는 여러 홍보물을 접해왔었기에 이를 이용해봐야 겠다고 생각하고 이번에 데모 프로그램을 배포하는데 사용했습니다. 공유된 &#8216;snippod-boilerplate DEMO'(Depreceated)을 살펴보시면 Elastic Beanstalk에서 제공하는 것을 그대로 사용하였음을 알 수 있는데요.<br />
개발환경에서 올려보는 것과는 여러가지로 다르다는 것을 알게 되었고, 셋팅 수정에 한 스텝 진행 할때 마다 error를 만나면서 겨우 마쳤습니다. 최적화 하고 싶은 욕심이 끝이 없는건 배포환경도 마찬가지라는 생각도 들었네요 ㅎ<br />
혹시 Elastic Beanstalk에 Django 배포 셋업을 참고하시고 싶으시다면 공유된 소스 중 <a href="https://github.com/shalomeir/snippod-boilerplate/tree/master/.ebextensions">&#8216;./ebextensions&#8217;</a>과 <a href="https://github.com/shalomeir/snippod-boilerplate/blob/master/snippod_boilerplate/settings/prod.py">Django Settings for Production file</a>을 참고하세요~ 추가로 <strong>AWS console</strong> 에서 &#8216;Elastic Beanstalk&gt;[application]&gt;Configration&gt;Software Configration&gt;Environment Properties&#8217;화면에서 아래 Properties를 셋업해두어야 <strong>&#8216;eb deploy&#8217;</strong>과정에서 이를 읽어 사용합니다.</p>
<ul>
<li>&#8216;AWS_ACCESS_KEY_ID&#8217; : 사용하는 AWS Access Key_ID</li>
<li>&#8216;AWS_SECRET_ACCESS_KEY&#8217; : 사용하는 AWS Secret Key</li>
<li>&#8216;SECRET_KEY&#8217; : Production 에 사용하는 random value Secret key</li>
</ul>
<p>&nbsp;</p>
<h2>향후 추가를 고려할만한 기술들</h2>
<h4>CSS Framework &amp; Animation</h4>
<p>현재 데모는 기존의 evan&#8217;s <a href="http://henleyedition.com/reactnews/#/">react news</a> 데모 프로그램의 기능들과 디자인을 그대로 clone 하기만 하였기에 디자인 적용에 신경을 쓰지 못한 상태 입니다. 현재 react에서 개별 component는 new line 처리가 되기 때문에 기존의 <a href="http://getbootstrap.com/"><strong>Bootstrap</strong></a>을 그래도 적용하기 까다롭고 className 을 처리하는 과정이 반복적인데 이를 좀 더 심플하게 해주기 위해 <a href="http://react-bootstrap.github.io/index.html"><strong>React-Bootstrap</strong></a> 라이브러리가 나왔습니다. 현재 충분히 프로덕션 레벨로 적용할만한지는 모르겠지만 Bootstrap을 쓴다면 고려해 볼만한 라이브러리 인듯 합니다.</p>
<p>또한 Google이 제안한 <a href="http://www.google.com/design/spec/material-design/introduction.html"><strong>Material</strong></a> 디자인이 트렌드가 되면서 이를 React Component 로 구현한 라이브러리가 나오기 시작했습니다. 그중 <a href="http://material-ui.com/#/"><strong>material-ui.com</strong></a> 라이브러리가 굉장히 깔끔하게 Component들을 잘 제공하는 것 같습니다.</p>
<p>한편 CSS Animation 효과를 주기 위해 React에서 직접 <a href="https://facebook.github.io/react/docs/animation.html">Animation 관련</a> addon component를 제공하는데요, 가이드대로 적용해 본 후 잘 안되서 홀딩했는데 향후 디자인을 제대로 적용할 때 살펴 볼 예정입니다.</p>
<h4>React Server-side Rendering</h4>
<p>초기 React를 <a href="https://nodejs.org/"><strong>Node.js</strong></a>서버로 구현하고 싶었던 가장 큰 이유는 Server-side Rendering 구현이 훨씬 쉽다는 점 때문입니다. <a href="http://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94">SEO</a>를 위해서는 React Server-side Rendering이 반드시 적용되어야 하며, 첫 페이지 로딩 속도도 훨씬 빨라지기 때문에 Django 에서도 React Server-side Rendering을 할 수 있는 방안을 검토해 보았습니다.</p>
<p>첫번째 방안은 내부적으로 Node.js서버를 띄워서 React Component 를 렌더링 한후 이를 다시 Text형태로 Django서버에서 받아 클라이언트에 전달하는 방식입니다. 조금 무식한 느낌을 받았는데요, 관련 샘플 <a href="https://github.com/ustun/django-react-integration">예제 소스</a>을 보면서 그래도 Node.js에 익숙하다면 이 방안이 가장 확실하다는 느낌을 받았습니다.</p>
<p>두번째 방안으로 python 에서 JSX translation을 해주는 라이브러리를 이용해 <a href="https://github.com/markfinger/python-react"><strong>react rendering을 하는 방법</strong></a>을 고려해 보았는데요, 아직 충분히 도입할 만한 수준인지 확신이 들지 않았습니다.</p>
<p>프로덕션 레벨로 가려면 결국 Node.js도 도입해야 하는것 아닌가 싶은 생각이 들었습니다.</p>
<h4>i18n &amp; l10n : internationalization (국제화) &amp; localization (지역화)</h4>
<p>Django에서 기본적으로 제공하는 <a href="https://docs.djangoproject.com/en/1.8/topics/i18n/">i18n</a>은 굉장히 잘 되어 있지만, Django의 Template을 쓰지 않고 React를 사용했기에, 다른 대안이 필요합니다. Yahoo에서 공개한 <a href="http://formatjs.io/"><strong>Format.js</strong></a>가 아주 훌륭한거 같고 React를 많이 고려해서 React Component를 위한 <a href="http://formatjs.io/react/">integration</a>도 잘 지원합니다. 하지만 Translation 은 결국 server에서 접속자에 따라 다르게 제공해 주어야 할 텐데 이를 처리하려면 Django에서 static 파일을 분류해서 던져주어야 할 것 같습니다. <a href="https://pypi.python.org/pypi/django-statici18n"><strong>django-statici18n</strong></a>이 그러한 기능을 제공해주고 있는데, 단순한 분기 처리 정도만 해주는 듯 해 보입니다.</p>
<h4>소셜 인증</h4>
<p>요즘 같은 시대에 <a href="http://psa.matiasaguirre.net/"><strong>Python-Social-Auth</strong></a>를 이용해서 소셜 인증 가입/로그인을 적용 안할 수는 없는 듯 합니다~</p>
<h4>Cache Framework</h4>
<p>캐쉬 프레임워크도 역시 이젠 기본인데.. 현재는 전혀 적용이 되어 있지 않습니다.</p>
<p>&nbsp;</p>
<h2>Reference</h2>
<h4><a href="http://stackshare.io/instagram/instagram">Instagram Stack</a></h4>
<p>React에 처음 관심을 가지게 된 것은 역시 <a href="https://instagram.com/">Instagram</a>의 <a href="https://github.com/petehunt">Pete Hunt</a>가 발표했던 <a href="https://youtu.be/VkTCL6Nqm6Y">Instagram에서 React를 통해 SPA를 도입한 사례 소개 영상</a> 때문이었고 이후 Instagram이 굉장히 효율적으로 서비스를 만들었다는 생각에 Instagram 관련 기술 정보 들을 많이 참고하였습니다. Instagram에서 적극적으로 정보를 공유해주어 참고할 수 있는 자료가 많았는데요, 개발팀이 스타트업 초기 고려했던 기술 스택에 대해 쓴 글인 <a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances"><strong>&#8216;What Powers Instagram: Hundreds of Instances, Dozens of Technologies&#8217;</strong></a>은 <a href="https://charsyam.wordpress.com/2011/12/17/%EB%B0%9C-%EB%B2%88%EC%97%AD-%EC%88%98%EB%B0%B1%EB%8C%80%EC%9D%98-%EC%9E%A5%EB%B9%84%EC%99%80-%EC%88%98%EC%8B%AD%EA%B0%80%EC%A7%80%EC%9D%98-%EA%B8%B0%EC%88%A0-instagram%EC%9D%98-%ED%9E%98/">한글로 번역된 포스팅</a>도 존재합니다. 결국 본 데모 프로그램에 사용한 주요 기술들인 React+Django+PostgreSQL 은 Instagram 과 정확히 일치합니다.</p>
<h4>GitHub Open Source</h4>
<p>GitHub 에서 React, Flux, Django 및 그외 사용한 라이브러리들에 관련된 샘플 프로그램들은 되도록 많이 설치해 보려했고 굉장히 도움이 많이 되었습니다. 개별적인 소스 들 중에 본 데모 프로그램에 직접적으로 영향을 준 소스는 아래와 같습니다.</p>
<h5>Front side</h5>
<ul>
<li><a href="https://github.com/larsonjj/generator-yeogurt">yeogurt generator</a> : front build tool 인 grunt 관련해서 굉장히 세부적으로 셋업이 잘 되어 있어서 잘 가져다 적용했습니다.</li>
<li><a href="https://github.com/echenley/react-news">Evan&#8217;s React News</a> &amp; <a href="http://henleyedition.com/building-an-app-using-react-and-refluxjs/">blog post</a> : 본 데모의 기능적인 부분, 디자인을 그대로 가져왔습니다. 일부 Component들 중 유사하게 변형하거나 배치를 다르게 하긴 했으나 기본적인 틀을 거의 같고 CSS는 그대로 가져왔습니다. 하지만 내부적인 Architecture는 본 데모에서는 완전히 새로 만들었기 때문에 구조적으로 많이 다릅니다. 일단 Evan의 소스는 Firebase기반으로 서버사이드가 존재하지 않으며, Store 에서 ajax처리를 합니다. Upvoting이 중복해서 입력되는 등 기본적으로 심플한 구조를 가지고 있습니다.</li>
<li><a href="https://github.com/gaearon/flux-react-router-example">gaeron&#8217;s Flux React Router Example</a> : 한번 GET 해온 데이터들을 Page 나 Sorting 옵션이 바뀌어도 잘 보관하고 있도록 하는 것은 중복적인 서버와의 통신을 막고 훨씬 빠르게 페이지간 이동을 가능하게 해주는 데요, 이러한 방식의 Store를 구현하기 위해 gaeron이 공유한 소스가 굉장히 도움이 되었습니다.</li>
</ul>
<h5>Server side</h5>
<ul>
<li><a href="https://thinkster.io/django-angularjs-tutorial/">Thinkster.io Django and AngularJS Tutorial</a> : Django가 Template이 아닌 AngularJS를 주로 사용하는 케이스로 Django REST Framework를 사용하고 있었기에 서버 측면에서 참고가 되었습니다.</li>
</ul>
<h6><a href="">다음 포스팅</a>은 본 포스팅의 업데이트 버전입니다.</h6>
<div class="footnotes">
<hr />
<ol>
<li id="fn-352-1">
물론 Node.js 에서도 <a href="http://docs.sequelizejs.com/en/latest/">Sequelize</a>등을 이용하여 ORM을 사용할 수 있기는 합니다.&#160;<a href="#fnref-352-1">&#8617;</a>
</li>
<li id="fn-352-2">
<a href="http://henleyedition.com/reactnews/#/">evan의 데모</a>는 firebase를 서버로 사용하고 있으며 프론트의 기본적인 구조가 많이 다릅니다.&#160;<a href="#fnref-352-2">&#8617;</a>
</li>
<li id="fn-352-3">
웹 프로그래밍 기술을 익히는 데 참고했던 서적 및 온라인 강의들은 <a href="http://www.shalomeir.com/2015/05/%EC%9B%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B4%80%EB%A0%A8-%EC%84%9C%EC%A0%81-%EC%98%A8%EB%9D%BC%EC%9D%B8-%EC%9E%90%EB%A3%8C%EB%93%A4/"><strong>&#8216;웹 프로그래밍 관련 서적, 온라인 자료들&#8217;</strong></a>포스트로 공유하였습니다.&#160;<a href="#fnref-352-3">&#8617;</a>
</li>
</ol>
</div>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2015/05/snippod-boilerplate-1-full-stack-react-flux-django/">snippod-boilerplate &#8211; Full Stack : React, Flux (Reflux), Django</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2015/05/snippod-boilerplate-1-full-stack-react-flux-django/feed/</wfw:commentRss>
		<slash:comments>22</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">352</post-id>	</item>
		<item>
		<title>웹 프로그래밍 관련 서적, 온라인 자료들</title>
		<link>http://www.shalomeir.com/2015/05/%ec%9b%b9-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ea%b4%80%eb%a0%a8-%ec%84%9c%ec%a0%81-%ec%98%a8%eb%9d%bc%ec%9d%b8-%ec%9e%90%eb%a3%8c%eb%93%a4/</link>
		<comments>http://www.shalomeir.com/2015/05/%ec%9b%b9-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ea%b4%80%eb%a0%a8-%ec%84%9c%ec%a0%81-%ec%98%a8%eb%9d%bc%ec%9d%b8-%ec%9e%90%eb%a3%8c%eb%93%a4/#comments</comments>
		<pubDate>Tue, 19 May 2015 13:14:57 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[Coding]]></category>
		<category><![CDATA[Django]]></category>
		<category><![CDATA[Flux]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[책]]></category>
		<category><![CDATA[추천]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=377</guid>
		<description><![CDATA[<p>웹 프로그래밍을 시작하면서, 참고하였던 서적과 온라인 강의 자료 등을 공유합니다. 본 페이지는 종종 update 를 하려고요~ 전반적인 프로그래밍 관련 자료 Code School Online Lectures 추천! Code School은 무엇보다 동영상 강의 시작 전, 인트로 음악이 아주 매력적입니다. 각 path 별로 테마와 음악이 있는데 왠지 기분이 막 좋아집니다.. ㅎㅎ 개인적으로 Angular.js jingle 이 제일 귀에 감겼는데요. intro [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2015/05/%ec%9b%b9-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ea%b4%80%eb%a0%a8-%ec%84%9c%ec%a0%81-%ec%98%a8%eb%9d%bc%ec%9d%b8-%ec%9e%90%eb%a3%8c%eb%93%a4/">웹 프로그래밍 관련 서적, 온라인 자료들</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>웹 프로그래밍을 시작하면서, 참고하였던 서적과 온라인 강의 자료 등을 공유합니다.</h3>
<h4>본 페이지는 종종 update 를 하려고요~</h4>
<h2>전반적인 프로그래밍 관련 자료</h2>
<ul>
<li><a href="https://www.codeschool.com/paths/javascript"><strong>Code School</strong></a> Online Lectures <strong>추천!</strong><br />
Code School은 무엇보다 동영상 강의 시작 전, 인트로 음악이 아주 매력적입니다. 각 path 별로 테마와 음악이 있는데 왠지 기분이 막 좋아집니다.. ㅎㅎ 개인적으로 Angular.js jingle 이 제일 귀에 감겼는데요. intro 때문에 막 Angular path 를 열심히 들어보고 싶어질 정도 였습니다. (하지만 Angular는 초반부 듣다 포기상태 ㅎㅎ)<br />
동영상 강의 수준과 코딩 연습 도구들, 그리고 모바일에서 강의를 듣기 편한 앱 제공 등 여러가지로 코딩 공부하기 아주 좋은 온라인 강의 사이트로 추천합니다! JavaScript 와 FrontEnd 위주로 들었는데, 원래 Ruby 스터디 하시는 분들이 많이 들 추천하는 사이트로 유명합니다. 참, 2일 무료로 사용해 볼 수 있는 link들이 웹에 있으니 유료 강의를 들어보고 싶을 때 한번 찾아보시는 것도 괜찮을 것 같습니다.</li>
</ul>
<div class="jetpack-video-wrapper"><iframe class='youtube-player' type='text/html' width='1000' height='563' src='http://www.youtube.com/embed/PF3qr7mMmgA?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></div>
<p>&nbsp;</p>
<ul>
<li>
<p><a href="http://www.codecademy.com/"><strong>Codecademy</strong></a><br />
&#8216;코드아카데미&#8217;로 그동안 알고 있었는데, 이 글을 쓰며 &#8216;코드카데미&#8217; 였네요. 실제 코딩을 바로 해보면서 학습을 진행하는 방식이 굉장히 도움이 많이 되지만, 너무 한단계 한단계 직접 코딩하는 방식이 조금은 지루하기도 했습니다. 일단 서비스 자체의 품질은 아주 훌륭하구요, 게다가 최근 <a href="http://www.codecademy.com/en/tracks/korean-web"><strong>한글!</strong></a> 로도 몇개의 학습들이 제공되고 있습니다. 혹시 코딩을 처음 접하는 분들이 있다면 추천하고 싶네요~</p>
</li>
<li>
<p><a href="https://opentutorials.org"><strong>생활코딩</strong></a> <strong>추천!</strong><br />
목소리가 너무 좋아서, 남자인 저도 반할 것 같은; 이고잉님의 온라인 강의 입니다. 물론 목소리 뿐 아니라 내용도 아주 알차고 다루는 범위도 굉장히 광범위합니다. 게다가 친숙한 한글 강의이므로 부담없이 들을 수 있습니다. 한글인데다 이고잉 님의 부드러운 목소리,,,, 가끔 팟캐스트 듣는 기분이 들기도 했습니다. ㅎㅎ</p>
</li>
<li>
<p><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=4728986"><strong>프로 자바스크립트 테크닉</strong></a> 저자: 존레식<br />
그 유명한 jQuery 로 알려진 존 레식느님이 쓰신 자바스크립트 책, JavaScript 를 좀 더 제대로 공부해보고 싶어서 읽었고 JavaScript 로 프로그래밍 하면서 석연치 않던 부분을 좀 더 깊이 고민하면서 도움이 되었습니다.</p>
</li>
<li>
<p><a href="https://wikidocs.net/book/1"><strong>점프 투 파이선</strong></a> EBOOK SITE <strong>추천!</strong><br />
파이썬 까먹을 때 자주 찾던 사이트. 깔끔하게 정리되어 있습니다.</p>
</li>
</ul>
<h2>Django</h2>
<ul>
<li>
<p><a href="https://www.djangoproject.com/"><strong>Django Official Site</strong></a> <strong>추천!</strong><br />
장고 공식 웹사이트에 나와 있는 있는 내용들이 모두 다 중요하면서도 디테일하여, 결국은 장고를 하다보면 본 사이트를 열심히 헤집고 훌터보는게 제일 중요한 거 같습니다.</p>
</li>
<li>
<p><a href="http://www.django-rest-framework.org/"><strong>django REST Framework Official Site</strong></a> <strong>추천!</strong><br />
django REST Framework 공식 사이트는 장고 공식 사이트를 여러면에서 그대로 이어 받은 가이드를 제공하기에, 이 사이트 역시 너무 잘 가이드가 되어 있습니다. django REST Framework 공식 사이트만으로 REST Framework 공부는 충분할 정도로 훌륭한 것 같습니다.</p>
</li>
<li>
<p><a href="http://www.tangowithdjango.com/"><strong>Tango With Django</strong></a> EBOOK SITE<br />
Django 의 기본을 알려주는 튜토리얼 사이트. 국내에 있는 많은 Django 서적들과 성격적인 면에서 유사한 면이 있습니다.</p>
</li>
<li>
<p><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ISBN=8968481814"><strong>파이썬 웹 프로그래밍 : Django(장고)로 배우는 쉽고 빠른 웹 개발</strong></a><br />
최근에 나온 책으로, 판매 전에 예약해서 받아 본 책은 제겐 처음이었습니다. 처음 django를 접하기에 아주 좋은 책인 것 같습니다.</p>
</li>
<li>
<p><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;ejkGb=KOR&amp;barcode=9788960881198"><strong>Fast Web Service Build Up : 웹서비스를 쉽고 빠르게 구축하는 기술</strong></a><br />
처음 장고를 스터디할 때 당시 한글로 된 책이 몇 권 안되어 의지가 된 책입니다.</p>
</li>
</ul>
<h2>Modern Web</h2>
<ul>
<li><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7753115"><strong>단일 페이지 웹 애플리케이션 : 프론트엔드부터 백엔드까지 자바스크립트로 완성하는</strong></a> 저자: 마이클 미코스키, 조시 C. 파월 <strong>추천!</strong><br />
Single Page Web Application 에 대해 전반적으로 모두 경험하게 해준 책으로 Full Stack 을 공부하는 데 있어 아주 도움이 많이 되었던 책입니다. 뿐만 아니라 Node.js, Socket.io, Mongo DB, 테스트 모드 등 꼭 필요한 모던 웹 기술을 모두 훌터볼 수 있습니다.</li>
</ul>
<h2>React</h2>
<ul>
<li>
<p><a href="https://scotch.io/author/kenwheeler"><strong>All Blog Posts By Ken Wheeler</strong></a> <strong>추천!</strong><br />
React &amp; Flux 관련 훌륭한 튜토리얼 역할을 해준 블로그 포스팅 들 입니다. React 를 공부해야 한다면 꼭 훌터볼만한 포스팅들이죠~</p>
</li>
<li>
<p><a href="https://egghead.io/"><strong>Egghead.io</strong></a> Online Lectures <strong>추천!</strong><br />
모던 웹 기술은 Angular, React 등을 전문으로 하는 동영상 강의 제공 사이트 입니다. 강의가 구체적인 부분들에 집중하여 콘텐츠가 딱 마음에 들어 유료로 결제하려고 고민중인데, 아직 React관련 강의 중 무료인 강의들만 듣고 홀딩하고 있습니다.</p>
</li>
</ul>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2015/05/%ec%9b%b9-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ea%b4%80%eb%a0%a8-%ec%84%9c%ec%a0%81-%ec%98%a8%eb%9d%bc%ec%9d%b8-%ec%9e%90%eb%a3%8c%eb%93%a4/">웹 프로그래밍 관련 서적, 온라인 자료들</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2015/05/%ec%9b%b9-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ea%b4%80%eb%a0%a8-%ec%84%9c%ec%a0%81-%ec%98%a8%eb%9d%bc%ec%9d%b8-%ec%9e%90%eb%a3%8c%eb%93%a4/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">377</post-id>	</item>
		<item>
		<title>NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (3)</title>
		<link>http://www.shalomeir.com/2014/12/netflix-prize-3/</link>
		<comments>http://www.shalomeir.com/2014/12/netflix-prize-3/#comments</comments>
		<pubDate>Tue, 02 Dec 2014 07:50:31 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Research]]></category>
		<category><![CDATA[Algorithm]]></category>
		<category><![CDATA[Data Mining]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Netflix]]></category>
		<category><![CDATA[Netflix Prize]]></category>
		<category><![CDATA[Recommendation]]></category>
		<category><![CDATA[기계학습]]></category>
		<category><![CDATA[넷플릭스]]></category>
		<category><![CDATA[영화 추천]]></category>
		<category><![CDATA[추천 시스템]]></category>
		<category><![CDATA[추천 알고리즘]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=263</guid>
		<description><![CDATA[<p>NETFLIX PRIZE 진행과정에 대한 마지막 포스트인 (3)편 입니다. 드디어 마지막 편이네요. 지난 (1)편과 (2)편은 사실 본 (3)편의 내용을 포스팅 하고 싶어서 작성했었던 예고편과 같은 포스팅이었다고 할 수 있습니다. 🙂 (2)편에서 이미 말씀 드린 것처럼 백만달러의 상금이 걸린 Final Grand Prize 우승팀은 첫 해 AT&#38;T Research Labs 소속 연구원이 주축으로 시작된 &#8220;BellKor&#8217;s Pragmatic Chaos&#8221; 팀 입니다. [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/12/netflix-prize-3/">NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (3)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>NETFLIX PRIZE 진행과정에 대한 마지막 포스트인 (3)편 입니다.</h3>
<p>드디어 마지막 편이네요. <a href="http://www.shalomeir.com/2014/11/netflix-prize-1/"><strong>지난 (1)편</strong></a>과 <a href="http://www.shalomeir.com/2014/11/netflix-prize-2/"><strong>(2)편</strong></a>은 사실 본 (3)편의 내용을 포스팅 하고 싶어서 작성했었던 예고편과 같은 포스팅이었다고 할 수 있습니다. <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> <a href="http://www.shalomeir.com/2014/11/netflix-prize-2/"><strong>(2)편</strong></a>에서 이미 말씀 드린 것처럼 백만달러의 상금이 걸린 <strong>Final Grand Prize</strong> 우승팀은 첫 해 AT&amp;T Research Labs 소속 연구원이 주축으로 시작된 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong> 팀 입니다. 하지만 저는 우승팀의 이야기 보다 다른 팀들이 어떻게 경쟁했는지가 더 흥미로웠습니다. 백만달러가 걸린 이제부터가 본 게임이라고 할 수 있겠죠.</p>
<h2>2009 : 대연합의 시대</h2>
<figure style="width: 460px" class="wp-caption aligncenter"><img src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/blending+coffee.jpg?resize=460%2C360&#038;ssl=1" alt="" width="460" height="360" data-recalc-dims="1" /><figcaption class="wp-caption-text">Blending : 더 뛰어난 향의 커피를 만들기 위해 여러 원두를 섞는 것 처럼 기계학습도 더 좋은 결과를 위해 기존의 결과들을 잘 섞는다.</figcaption></figure>
<p><a href="http://www.netflixprize.com/community/viewtopic.php?id=1193"><strong>Netflix Progress Prize 2008</strong> 결과</a> 우승 팀의 최종 성능은 Cinematch 대비 9.44%로 백만달러를 받을 수 있는 10% 향상까지 0.56% 만 더 향상시키면 되었습니다. 2007, 2008 중간 진행과정에서의 우승 상금은 5만달러에 불과했기 때문에 사실 <strong>Grand Prize</strong>가 진정한 의미의 우승이라고 할 수 있습니다. 이미 우수한 알고리즘들은 모두 공개된 상황이었기 때문에 여러 알고리즘을 효율적으로 배합하고 변수를 컨트롤하면서 다양한 결과를 실험해보면 이제는 Grand Prize를 노려볼 수 있는 시기가 되었음을 여러 참가자들은 본능적으로 알게 되었습니다. 이미 2007년부터 &#8220;BellKor&#8221; 팀은 100개 이상의 알고리즘으로 얻어진 결과를 배합하여 최종 예측을 한다고 발표했었고, 여러 결과를 배합하는 데 있어 단순히 좋은 성능을 보이는 결과들의 합보다 새로운 발상으로 접근한 결과들을 배합할 때 성능이 올라간다는 것이 이론적으로 증명되었기 때문에 기존의 팀들은 본인팀과는 다른 새로운 시도를 한 팀과의 연합이 필수적인 상황이 되었습니다.</p>
<h6>정보이론을 통해 기계학습(Machine Learning) 분야에서 단일 알고리즘이 아닌 여러 알고리즘을 잘 섞는 알고리즘의 중요성이 대두되어 <strong>ensemble method</strong>로 발전하였고, 최근 단일 알고리즘이 충분히 고도화 되면서 그 중요성이 계속 높아지고 있습니다.</h6>
<h3>GPT : Open Collaboration</h3>
<p>2007 대회에서 마지막에 연합까지 했었지만 결국에는 우승을 코앞에서 놓쳤던 <strong>&#8220;Gravity&#8221;</strong> 와 <strong>&#8220;Dinosaurs Planet&#8221;</strong>팀을 기억하시죠? 이 연합팀은 새롭게 팀을 정비하여 2009년 2월, <strong>Gravity R&amp;D</strong>의 <strong>Gabor Takacs</strong>를 리더로 <strong>&#8220;Grand Prize Team (GPT)&#8221;</strong>으로서 새롭게 출범합니다. 새롭게 출범하면서 새로운 전략은 <strong>Open Collaboration</strong> 이었습니다. 이미 연합을 통해 알고리즘을 잘 배합하면 (<strong>&#8220;blending&#8221;</strong>이라고 표현합니다) 더 좋은 성능이 나올 수 있음을 체득하였기 때문에 팀이 연합하면 CineMatch 대비 10% 성능 향상을 하여 Grand Prize 수상이 가능할 수 있다는 생각이었습니다.</p>
<blockquote><p>
  Grand Prize Team Offer : GPT 팀은 이미 CineMatch 기준 9%의 성능을 향상시켰고 단 <strong>1%</strong>만 더 향상시키면 되는 상황이었습니다. 그들은 만약 우승상금 백만달러를 받게되면 상금의 1/3인 $333,333 USD만을 GPT에서 차지하고 나머지 $666,666 USD 는 기여자들에게 기존 약 9%에서 성능을 향상 시킨 비율 만큼 상금을 배분하겠다는 조건을 제안하였습니다.
</p></blockquote>
<h5>또한 <strong>Gravity</strong> team 소속 <strong>Bottyan Nemeth</strong>은 참가자들이 쉽게 본인의 모델을 GPT에 추가로 배합시키면 얼마나 성능이 향상되는지 확인 할 수 있도록 별도의 웹서버를 만들어 빠르게 수치를 확인할 수 있도록 제공했습니다.</h5>
<p>어차피 Winner-take -all 인 대회규정에 따라 우승이 어려울 것이라고 생각되는 팀들은 GPT의 제안에 관심을 가지고 본인의 데이터를 GPT 서버에 제출하여 GPT보다 얼마나 성능 향상에 기여하는지 바로 확인할 수 있었기 때문에 제공하는 팀들이 많았지만 실제 GPT 기준보다 더 높은 데이터는 많지 않았습니다.</p>
<p>그럼에도 불구 몇 명의 지원자는 눈에 띄는 성능 향상을 보이며 GPT 팀에 합류하기 시작했는데요, Leaderboard Top 10에서 오래 머물던 샌디애고의 엔지니어 <strong>Ces Bertino</strong>는 GPT 기준보다 0.21% 향상시키는 결과를 제공하며 제일 먼저 합류하게 됩니다. 그리고 점차  미국 외에 여러 다른 나라에서도 합류를 시작합니다. 그리고 결국 RMSE <strong>0.8597</strong>로 당시 RMSE <strong>0.8596</strong>으로 공동 1위를 하고 있던 <strong>&#8220;BellKor in Big Chaos&#8221;</strong> 팀과 <strong>&#8220;Pragmatic Theory&#8221;</strong> 팀에 이어 <strong>3위</strong>까지 올라가게 됩니다. 하지만 Grand Prize를 달성하기 위한 RMSE 스코어 <strong>0.8563</strong>까지 내려가려면 아직도 0.36% 수준의 향상이 필요했습니다.</p>
<p>&nbsp;</p>
<h2>Grand Prize Open</h2>
<h3>BellKor&#8217;s Pragmatic Chaos</h3>
<figure style="width: 604px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/bellkor_team.png?resize=604%2C440&#038;ssl=1" alt="" width="604" height="440" data-recalc-dims="1" /><figcaption class="wp-caption-text">BellKor&#8217;s Pragmatic Chaos 팀의 구성</figcaption></figure>
<p>2009년 6월까지 1위를 달리고 있던 팀도 백만달러가 걸린 Grand Prize 기준인 CineMatch 기준 10% 향상에는 미치지 못하고 있었는데요, 1위를 달리고 있던<strong>&#8220;BellKor in Big Chaos&#8221;</strong> 팀과 <strong>&#8220;Pragmatic Theory&#8221;</strong> 팀이 결국 연합하면서 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong> 팀으로서 6월 28일 CineMatch 대비 10.05% 성능을 향상시키는데 성공합니다. 드디어 최종 우승 상금 백만달러가 걸린 <strong>Grand Prize</strong>가 열린 것이죠. <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong> 팀이 10%를 넘는 성능이 제출한 순간 부터 <strong>30일</strong>의 시간이 주어지고 <strong>30일</strong>이 지난 <strong>2009년 7월 26일 18:42:37 UTC</strong> 까지 최고 성능을 제출한 팀이 우승하게 되는 것 입니다. <strong>&#8220;Pragmatic Theory&#8221;</strong> 팀은 캐나다 통신회사에서 근무하는 2명의 직원으로 구성되어 있었고 그래서 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong>팀은 7명으로 늘어나게 됩니다.</p>
<h3>Vandelay Industries</h3>
<p>팀들간의 Collaboration 전략으로 팀들을 흡수하며 키우는 것과 유사한 전략을 가진 팀은 <strong>Grand Prize Team (GPT)</strong>팀만이 아니었습니다. 2009년 2월, <strong>GPT</strong>팀과 거의 같은 시기에 소프트웨어 개발자 <strong>Greg McAlpin</strong>은 <strong>&#8220;Greg&#8217;s Probe File Exchange&#8221;</strong> 웹사이트를 런칭하고 <a href="http://www.netflixprize.com//community/"><strong>Netflix Prize Forum</strong>커뮤니티</a>에서 열성적으로 활동하는 참가자를 대상으로 초대장을 발송했습니다. <strong>&#8220;Greg&#8217;s Probe File Exchange&#8221;</strong> 웹사이트는 Invitation Only로 초대된 참가자만 이용할 수 있게 되어 있었고, Netflix 데이터에 정답이 공개된 Probe Set 예측결과를 업로드하면 기존에 Greg이 보유한 결과와 <strong>배합(blending)</strong>하여 예측성능이 얼마나 향상되는지 확인할 수 있게 만들었습니다. 재미있던 사실은 당시 호스팅 서버 업체 중 <strong>dreamhost.com</strong>이 그해 95% 할인 프로모션을 보고 할인 된 가격에 서버운영이 가능했던 것이 사이트를 만든 계기가 되었다는 것입니다.</p>
<p><strong>&#8220;Greg&#8217;s Probe File Exchange&#8221;</strong>웹사이트에 초대된 <strong>Bo Yang</strong>이 먼저 합류하기 시작하며 8.8%수준의 성능 향상을 보이기 시작합니다. 아직 10%까지는 갈길이 멀지만 2009년 본격적으로 시작된 팀으로서 빠르게 Top tier에 따라가기 시작한 것이죠. 이후 팀원이 늘며 5명까지 늘어나게 됩니다. 이때까지만 해도 여러 팀원들의 결과 예측을 배합하는 데 있어 <strong>선형 회귀(linear regression)</strong>방법을 사용하였다면, 다섯 번째 합류한 <strong>Chris Hefele</strong>는 <strong>비선형 회귀(Nonlinear regression)</strong>으로 배합하는 방법을 <strong>&#8220;Greg&#8217;s Probe File Exchange&#8221;</strong>웹사이트에 제안하여 성능을 끌어올리는 공을 세우게 됩니다. <strong>Chris</strong>는 이후에도 배합하는 blending 기술을 개선시키며 <strong>블랜더(blender)</strong>를 발전시켜 나가게 됩니다. 이 때부터 이 팀은 <strong>&#8220;Vandelay Industries&#8221;</strong>로 팀명을 개선하고 대부분의 시간을 알고리즘을 개선시키는데 할애하였으며 2009년 5월에는 Netflix Prize에 순위표인 <strong>Leader Board</strong>상에 15위까지 올라가게 됩니다. 그리고 Netflix LeaderBoard 와 Forum 에서 적극적으로 합류 요청 메일을 보내고 대화를 걸기 시작합니다. 순위권의 참가자들은 아직 <strong>&#8220;Vandelay Industries&#8221;</strong>가 우승 가능성이 높아보이지 않아 합류에 대해 적극적으로 검토하지는 않았지만 몇몇은 시험삼아 블랜딩 해본 후 함께할 때 성능이 향상될 수 있음을 보면서 팀원으로 합류하게 됩니다. 마침내 6월이 되서 <strong>&#8220;Vandelay Industries&#8221;</strong>팀은  Top 10안에 들어가게 됩니다. 이 때, <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong>팀이 CineMatch 대비 10.05% 향상시키며 최종 <strong>Grand Prize</strong> 까지 30일이 남은 상황인 <strong>last call</strong>에 돌입하게 됩니다.</p>
<p>&nbsp;</p>
<h2>The Ensemble team</h2>
<figure style="width: 604px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/theensemble+team.png?resize=604%2C297&#038;ssl=1" alt="" width="604" height="297" data-recalc-dims="1" /><figcaption class="wp-caption-text">The Ensemble Team의 구성</figcaption></figure>
<p><strong>2009년 7월 26일 18:42:37 UTC</strong> 까지 30일의 시간이 주어졌고, 이제 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong>팀을 제외한 다른 팀들 중 CineMatch 기준 10% 성능향상을 시킨 팀은 아무도 없었습니다. Top 10 안에 있던 팀들인 <strong>&#8220;Grand Prize Team&#8221;</strong>, <strong>&#8220;Vandeley Industries&#8221;</strong>, <strong>&#8220;Opera Solutions&#8221;</strong> 등이었고 각 팀은 남은 기간동안 최선을 다해 성능을 끌어올렸지만 한계에 직면한 것 같았습니다.</p>
<p><strong>2009년 7월 24일</strong>, 최종 제출 마감 2일 전 <strong>&#8220;Vandeley Industries&#8221;</strong>의 팀원들은 <strong>&#8220;Grand Prize Team&#8221;</strong>에 조인해야 한다고 의견을 함께합니다. 그 때 팀원들이 이야기 합니다.</p>
<blockquote><p>
  &#8220;백만달러는 우리가 지금까지 이렇게 열심히 달려온 이유가 아니야. 대회가 시작되었을 때 대부분의 사람들은 10%의 목표가 불가능하다고 이야기 했었어. 하지만 우린 지금 6개월간 불가능을 이뤄 내고 있어.  우리의 목표는 10%의 성능향상을 만들어 내는 것이야.&#8221;
</p></blockquote>
<h5>대회 마감 하루 전 우승 후보인 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221;</strong>팀을 제외한 <strong>&#8220;Grand Prize Team&#8221;</strong>, <strong>&#8220;Vandeley Industries&#8221;</strong>, <strong>&#8220;Opera Solutions&#8221;</strong>이 모두 조인하며 통합을 의미하면서 동시에 기계학습의 배합알고리즘을 의미하는 <strong>&#8220;The Ensemble&#8221;</strong>팀이 만들어 집니다.</h5>
<blockquote><p>
  &#8220;우리 The Ensemble 팀의 성공은 단순히 기술적으로 데이터를 통합시키는 것만을 의미하는 것이 아니다. 30일도 안되는 짧은 시간동안 여러 사람들을 통합시키고, 함께 만들어 가는 팀이 될 수 있었기에 성공이었다.&#8221;
</p></blockquote>
<p>&nbsp;</p>
<h2>최종 제출 카운트다운</h2>
<h5>본 <strong>최종 제출 카운트다운</strong> 의 내용은 <strong>&#8220;The Ensemble&#8221;</strong>팀의 블로그 포스팅 <a href="http://www.the-ensemble.com/content/final-submission-countdown"><strong>&#8220;Final Submission Countdown&#8221;</strong></a>의 내용을 작성자인 <strong>Lester Mackey</strong>의 허락을 받아 번역한 것 입니다. 화자의 입장을 최대한 살리기 위해 구어체를 섞어 작성하였습니다. 본 챕터에서는 <strong>&#8220;Lester Mackey&#8221;</strong>의 화자 시점으로 <strong>The Ensemble</strong>팀의 최종 제출 직전의 상황을 묘사하고 있습니다.</h5>
<blockquote><p>
   Ensemble팀 리더 <strong>Gabor</strong>에게 내가(Lester Mackey) 최종 결과를 제출하는 순간, 대회 마감 시한 11:42 AM 을 불과 16분 남겨두고 있었다. 우리 팀원들은 밤새 일하면서 전날 스코어였던 RMSE 0.8554를 뛰어넘길 원했다. 우리는 놀랍게도 Last call 29일 동안 1위를 차지하고 있었던 &#8220;BellKor&#8217;s Pragmatic Chaos (BPC)&#8221; 연합팀을 불과 24시간 전에 물리치고 현재 1위를 달리고 있었다. BPC 팀이 쉽게 물러나지 않을 것이 확실했기 때문에, 기뻐할 시간은 없었고 남은 시간 더 훌륭한 결과를 내기 위해 노력해야 했다. 넷플릭스에서 최종 제출 공지가 다시 발표된 후 200개에 가까운 새로운 결과들이 제출되었다. 이 중 몇몇은 과거 저조한 실적을 뛰어넘는 것이었고, 마지막 순간까지 누구든 더 높은 결과를 제출할 수 있는 상황이었다. 우리에게 마법이 필요한 순간이었다.
</p></blockquote>
<p><span style="color: #808080;"> <em><strong>11:26 AM </strong></em></span></p>
<p><strong>Me (Lester Mackey)</strong> : <span class="bubble"> gabor(팀장)~ 최고치를 경신한 새로운 결과가 나왔어. </span></p>
<p><strong>Me</strong> : <span class="bubble">이게 어떻게 가능했는지 나도 모르겠지만 RMSE 0.8553 이야. </span></p>
<p><span style="color: #808080;"> <em><strong>11:27 AM </strong></em></span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> Blender 수치는 어떻게 나왔어? </span></p>
<p><strong>Me</strong> : <span class="bubble"> 0.855345926622, 지금까지중 최고수치야! </span></p>
<h5>우리가 결과파일을 제출 시작하려는 시한 9분 전에 제출할 수 있는 창이 떳다. Gabor는 구글 챗으로 제출 예정까지 남은 시간을 계속 알려달라고 했었다.</h5>
<p><span style="color: #808080;"> <em><strong>11:28 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 5분 전. </span></p>
<h5>제출까지 더 할일이 있지는 않았지만 일부러 기다렸다.</h5>
<p><span style="color: #808080;"> <em><strong>11:29 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 4분 남았어 </span></p>
<p><strong>Me</strong> : <span class="bubble">BPC는 우리와 현재까지 동점이야. 으~~~ </span></p>
<figure style="width: 595px" class="wp-caption alignnone"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/3_626pm_18_minutes_to_go_Bellkor_improves_a_point.jpg?resize=595%2C67&#038;ssl=1" alt="" width="595" height="67" data-recalc-dims="1" /><figcaption class="wp-caption-text">최종 제출 20분 전 동점상태인 스코어 (LAST Submit Time UTC 기준임)</figcaption></figure>
<h5>사실, 조금 전 BPC 팀이 우리가 어제 제출한 1등 결과와 동점인 결과를 제출 한 상태였다. 나는 동료들의 리액션을 확인했고 David W.는 계속적으로 왜 아직 최종결과를 제출하지 않았냐고 성화였다. (David W.의 시계가 13분 빨랐다.)</h5>
<p><span style="color: #808080;"> <em><strong>11:30 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 3분. </span></p>
<p><span style="color: #808080;"> <em><strong>11:31 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 2분전. </span></p>
<p><span style="color: #808080;"> <em><strong>11:32 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 잠깐, </span></p>
<p><strong>Me</strong> : <span class="bubble">Peng이 0.8552 결과를 얻었대!! </span></p>
<h5>그랬다. 1분을 남겨두고 Peng 이 마지막 블렌딩 결과가 올라온 것을 봤다. 0.85525 였다. 이 수치는 우리가 제출해야 할 수 있는 최고의 결과였다. 서버에 접속해서 재빨리 결과파일을 찾아보았지만 수백개 파일 중 어떤 파일을 받아야 할지 알수 없었다.</h5>
<p><span style="color: #808080;"> <em><strong>11:33 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> Peng, 어떤 파일이야! 빨리! </span></p>
<h5>대답이 없었다. Peng 은 내 채팅창에는 보이지 않았거나 그의 인터넷이 끊긴거 같았고 다시 블랙베리로 문자를 보냈다.</h5>
<p><span style="color: #808080;"> <em><strong>11:34 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> <strong>어떤 파일이야!</strong> </span></p>
<p><strong>Jacob</strong> : <span class="bubble bc-blue"> 이게 지금 최고의 RMSE 결과 맞지? 우리는 이걸로 반드시 제출 해야해! </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> 1분, 지금 제출해야해! </span></p>
<p><span style="color: #808080;"> <em><strong>11:35 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 우린 지금 어떤 파일인지 몰라!!! 빨~~~~~~리~~~~!!! </span></p>
<p><strong>Ces</strong> : <span class="bubble bc-blue"> 우리 지금 제출해야 되지 않아?! </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> Lester!!!!!!! </span></p>
<h5>내가 얼마나 좌절했는지 상상이 가나요? 현재 우리가 정해둔 제출 시한에서 이미 2분이 지났고 대회 제출 마감까지는 7분이 남아있었다. 나는 미친 듯이 폴더의 파일을 뒤지며 0.85525 이름을 가진 파일이 있는지 살폈지만 찾을 수 없었다.</h5>
<p><span style="color: #808080;"> <em><strong>11:36 AM </strong></em></span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> !!! </span></p>
<p><strong>Me</strong> : <span class="bubble"> 모르겠어!! 못찾겠어! </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> OK </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow">난 그냥 네가 준걸로 제출하겠어. </span></p>
<h5>그 순간, 나는 파일을 찾았다.</h5>
<p><span style="color: #808080;"> <em><strong>11:37 AM </strong></em></span></p>
<p><strong>Me</strong> : <span class="bubble"> 잠깐! </span></p>
<p><strong>Me</strong> : <span class="bubble"> 찾았어. opera_est_0.855259.txt.gz </span></p>
<p><span style="color: #808080;"> <em><strong>11:38 AM </strong></em></span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> 업로딩 중.. </span></p>
<p><strong>Me</strong> : <span class="bubble"> OK, AWESOME </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> 우리가 마감보다 늦어지지 않을지 조금 걱정돼는데. </span></p>
<p><strong>Me</strong> : <span class="bubble"> 음. 어. 아직 11:42은 아니야. </span></p>
<p><span style="color: #808080;"> <em><strong>11:39 AM </strong></em></span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> 그치만 업로딩이 너무 느려. </span></p>
<p><strong>Me</strong> : <span class="bubble"> 4분 여유가 있어. 될거야. </span></p>
<p><strong>Gabor</strong> : <span class="bubble bc-yellow"> OK, 제출 성공 <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> </span></p>
<figure style="width: 604px" class="wp-caption alignnone"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/7_649pm_yayay_ensemble_improves_a_point.jpg?resize=604%2C73&#038;ssl=1" alt="" width="604" height="73" data-recalc-dims="1" /><figcaption class="wp-caption-text">최종 제출 마감 직전의 RMSE Score (quiz set기준)</figcaption></figure>
<h5>Yes, 제출에 성공했다.</h5>
<p><strong>Me</strong> : <span class="bubble"> 이건 정말 우리 팀에 대한 모든 것이야, 아슬아슬 사는 구나 <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> </span></p>
<p>&nbsp;</p>
<h2>20 minutes</h2>
<figure style="width: 636px" class="wp-caption aligncenter"><img class="" src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/Netflix%2BAwards%2B1%2BMillion%2BNetflix%2BPrize%2BAnnounce%2BGlSauXYrsD6x.jpg?resize=636%2C436&#038;ssl=1" alt="" width="636" height="436" data-recalc-dims="1" /><figcaption class="wp-caption-text">우승한 “BellKor’s Pragmatic Chaos”팀의 Robert M. Bell</figcaption></figure>
<p>마침내, 대회는 종료되었습니다. 그리고 Netflix Grand Prize의 최종 우승팀은 <strong>&#8220;The Ensemble&#8221;</strong>팀의 예상과는 다르게 <strong>&#8220;BellKor’s Pragmatic Chaos&#8221;</strong>팀이 수상하게 되었습니다. 본 블로그 <a href="http://www.shalomeir.com/2014/11/netflix-prize-1/">(1)편 포스팅</a>에서 소개했던 대회의 최종 규칙과 같이 실제 최종 결과는 <strong>quiz set</strong>이 아닌 <strong>test set</strong>데이터를 통해 나온 RMSE Score로 산출합니다. <strong>test set</strong>의 점수는 공개되지 않아 넷플릭스가 최종 발표하기 전에는 알 수가 없었지만 <strong>quiz set</strong>과 거의 유사한 경향이 나타나는데요, 그러나 <strong>test set</strong>의 최종 결과는 아래 그림 처럼 <strong>동점</strong>이었습니다.</p>
<figure style="width: 668px" class="wp-caption aligncenter"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/skitch_finalscore.png?resize=668%2C329&#038;ssl=1" alt="" width="668" height="329" data-recalc-dims="1" /><figcaption class="wp-caption-text">Netflix Prize Final Score (Test Set 기준)</figcaption></figure>
<h5>최종 제출 결과는 동점이었기 때문에, Netflix 주최측에서는 대회 규정에 따라 20분 먼저 제출한 &#8220;BellKor’s Pragmatic Chaos&#8221;팀의 우승한 것으로 <a href="http://www.netflixprize.com/community/viewtopic.php?id=1537">발표</a>하게 되었습니다. 당시 넷플릭스의 CEO <strong>Reed Hastings</strong>는 수상자 선정 결과에 대해서 <strong>&#8220;That 20 minutes was worth a million dollars&#8221;</strong>라는 코멘트를 남겼습니다.</h5>
<figure style="width: 395px" class="wp-caption aligncenter"><img src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/netflix0_395.jpg?resize=395%2C250&#038;ssl=1" alt="" width="395" height="250" data-recalc-dims="1" /><figcaption class="wp-caption-text">Netflix CEO Reed Hastings</figcaption></figure>
<p>대회가 굉장히 아슬아슬하게 진행되었고 결국 성공적으로 마무리 되면서 당시 대부분의 주요 언론사에서 기사들이 게제되었고, 넷플릭스는 큰 홍보효과를 누리게 됩니다.</p>
<ul>
<li><a href="http://nyti.ms/Kmn8oA">CNBC Netflix Awards $1M Prize Video</a></li>
</ul>
<p>&nbsp;</p>
<h2>마치며</h2>
<p><img class="aligncenter" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/VictoriaEstrella.com_collaboration-10-01-14.jpg?resize=725%2C534&#038;ssl=1" alt="" width="725" height="534" data-recalc-dims="1" /></p>
<p>처음에 가볍게 대회 진행 과정을 서술하면 재미있겠다 싶어 작성한 글이 꽤 길게 이어졌네요. 데이터 예측 알고리즘 경쟁 대회가 스포츠 만큼이나 아슬아슬하고 드라마틱하게 전개될 수 있다는 것을 잘 보여주는 사례라고 생각되어 굉장히 흥미로웠는데 읽는 분들도 그렇게 느껴지셨다면 좋겠습니다.</p>
<p>이러한 데이터 마이닝 경진대회는 <a href="https://www.kaggle.com/"><strong>Kaggle</strong></a>에 많이 올라오고 있고, &#8220;KDD Cup&#8221;으로 학회 차원에서도 매년 진행되고 있는데요. 언어의 장벽이 별로 없고 대회 규칙이 명료하기 때문에 수학에 뛰어난 우리나라에서도 많은 사람들이 도전해 볼만한 대회인 것 같습니다.</p>
<p>한편으로 유독 <strong>Netflix Prize</strong>가 이러한 경진대회에서 크게 주목을 받을 수 있었던 이유는 실제 사용자의 빅데이터를 제공한 첫 대회라는 점이라고 볼 수 있습니다. 하지만 저는 대회 진행과정을 보면서 그것만이 아닌 하나의 <strong>&#8220;운&#8221;</strong>과 같은 요소가 있다고 보여졌는데요. Netflix 참가자들도 언급을 많이 한 것처럼 <strong>Grand Prize</strong> 기준을 <strong>10%</strong>라는 수치를 설정하였는데 이 수치가 불가능한 것 같으면서도 결국 달성 가능했다는 것은 운이 따른 것이 아닌가 싶은 생각도 듭니다. 대회 규칙에서도 5년동안 <strong>10%</strong> 달성팀이 나오지 않으면 대회는 거기서 종료된다고 밝히고 있는데요. 그만큼 <strong>10%</strong> 목표가 과연 가능할지, 또는 너무 쉬운 목표는 아닌지 가늠하는 것은 주최측도 몰랐던 것 같습니다. 우연히도 이 목표가 굉장히 적절했기에 결국 마지막에&#8221;BellKor’s Pragmatic Chaos&#8221;팀과 &#8220;The Ensemble&#8221; 두 팀만이 이 목표를 넘어서면서 대회가 성황리에 마무리 될 수 있었습니다.</p>
<p>또한, 대회가 진행되는 과정에서 연구에서의  <strong>&#8220;Crowdsourcing&#8221;</strong>이 가져올 수 있는 가능성을 증명했습니다. 참가자들이 서로 협력하는 과정에서 성능이 지속적으로 좋아지고 새로운 방법들이 개발되면서 <strong>추천 시스템</strong>분야의 발전에 큰 성과가 있었습니다.</p>
<p>저는 알고리즘 분야야 말로 소수의 천재들이 성과를 달성할 수 있는 분야라고 생각해 왔는데, 대회 과정을 통해 여럿이 함께 연구하는 것이 얼마나 중요한 지 잘 와 닿았습니다. 보다 많은 분야에서 이와 같은 사례가 계속 나올 수 있으면 좋겠습니다.</p>
<p>&nbsp;</p>
<h6><strong>Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회</strong> 지난 글 바로가기</h6>
<p><a href="http://www.shalomeir.com/2014/11/netflix-prize-1/"><strong>(1)편</strong></a>,  <a href="http://www.shalomeir.com/2014/11/netflix-prize-2/"><strong>(2)편</strong></a></p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/12/netflix-prize-3/">NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (3)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/12/netflix-prize-3/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">263</post-id>	</item>
		<item>
		<title>NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (2)</title>
		<link>http://www.shalomeir.com/2014/11/netflix-prize-2/</link>
		<comments>http://www.shalomeir.com/2014/11/netflix-prize-2/#comments</comments>
		<pubDate>Fri, 28 Nov 2014 02:30:26 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Research]]></category>
		<category><![CDATA[Data Mining]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Netflix]]></category>
		<category><![CDATA[Netflix Prize]]></category>
		<category><![CDATA[Recommendation]]></category>
		<category><![CDATA[기계학습]]></category>
		<category><![CDATA[넷플릭스]]></category>
		<category><![CDATA[영화 추천]]></category>
		<category><![CDATA[추천 알고리즘]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=244</guid>
		<description><![CDATA[<p>NETFLIX PRIZE 진행과정을 담은 포스트 (2)편 입니다. 지난 (1)편은 Netflix Prize가 어떤 대회이고 규칙과 평가기준 등을 살펴보았는데요. 간단한 내용을 복습하시고 (2)편을 보시면 조금 더 내용이 와닿을 것 같습니다. 🙂 Grand Prize Winner : BellKor&#8217;s Pragmatic Chaos 우승 상금 백만달러를 수여받은  2009 Grand Prize의 우승팀은 이름은 좀 긴 &#8220;BellKor&#8217;s Pragmatic Chaos&#8221; Team입니다. 최종 우승 팀의 이름이 왜 이렇게 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/netflix-prize-2/">NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (2)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>NETFLIX PRIZE 진행과정을 담은 포스트 (2)편 입니다.</h3>
<p><a href="http://www.shalomeir.com/2014/11/netflix-prize-1/"><strong>지난 (1)편</strong></a>은 Netflix Prize가 어떤 대회이고 규칙과 평가기준 등을 살펴보았는데요. 간단한 내용을 복습하시고 (2)편을 보시면 조금 더 내용이 와닿을 것 같습니다. <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<h2>Grand Prize Winner : BellKor&#8217;s Pragmatic Chaos</h2>
<figure style="width: 462px" class="wp-caption aligncenter"><img src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/netflix-prize.jpg?resize=462%2C312&#038;ssl=1" alt="" width="462" height="312" data-recalc-dims="1" /><figcaption class="wp-caption-text">최종 우승한  7명의 &#8220;BellKor&#8217;s Pragmatic Chaos&#8221;팀 멤버들</figcaption></figure>
<p>우승 상금 백만달러를 수여받은  <strong>2009 Grand Prize</strong>의 우승팀은 이름은 좀 긴 <strong>&#8220;BellKor&#8217;s Pragmatic Chaos&#8221; Team</strong>입니다. 최종 우승 팀의 이름이 왜 이렇게 긴 이름이 되었는지를 보면 3여년에 걸친 대회가 어떻게 진행 되었는지 알 수가 있는데요. 이유는 이 팀의 성장이 사실 Netflix Prize 대회의 성장과 궤를 같이 했기 때문입니다. 처음부터 3년에 걸친 장대한 대회의 결말을 알려드렸지만, 그 과정이 결과보다 흥미진진하기 때문에 기대하셔도 좋습니다. <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /> 그럼 최종 대회 이전의 2007년 대회 진행 상황으로 돌아가 볼까요?</p>
<h2>Progress Prize 2007 Winner : BellKor</h2>
<figure style="width: 378px" class="wp-caption aligncenter"><img src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/netflix_winners_2_star-medi.jpg?resize=378%2C432&#038;ssl=1" alt="" width="378" height="432" data-recalc-dims="1" /><figcaption class="wp-caption-text">2007 우승한 AT&amp;T Labs의 BellKor Team (좌부터  Chris Volinsky, Yehuda Koren, Bob Bell)</figcaption></figure>
<h6>&#8220;BellKor&#8221; Team 이름은 팀 멤버의 이름중 &#8220;Bell&#8221;과 &#8220;Koren&#8221;의 &#8220;Kor&#8221;를 조합했습니다. Chris Volinsky 는  AT&amp;T Statistics Research Group 의 Director였는데 아마도 리더라 너그럽게 본인의 이름이 들어가지 않았지만 발음하기 좋은 이름으로 정하지 않았을까 싶습니다.</h6>
<p>2006년 10월 2일 넷플리스 대회가 시작 되었고, 초반 두달간은 칭화대 출신 WXYZConsulting 팀이 선두를 달리기 시작하였습니다. 이 두달동안 넷플릭스 Cinematch 알고리즘 보다 약 5% 수준의 성능 향상이 급속히 이뤄지는데요, 이때부터 추천 알고리즘의 대표적인 방법인 <strong>SVD (Singular Value Decomposition)</strong>가 대부분 참가팀의 메인 알고리즘으로 사용됩니다. 후술하겠지만 추천결과를 만들기 위해 단 하나의 알고리즘이 아닌 100여개 이상의 알고리즘을 통해 결과를 만든 후 이를 다시 통합하여 예측 성능을 향상 시키는 데요, 이 때 단일 알고리즘으로서 <strong>SVD</strong>가 가장 좋은 성능을 보여줍니다. <strong>SVD</strong>는 선형대수에서 쓰이는 <strong>Matrix Factorization</strong>기법 중 하나로 이미 유명했지만 추천 문제와 같이 데이터에 알 수 없는 값들이 대부분인 경우 그대로 적용할 수 없고 기계학습을 통해 추론하는 과정에서도 과적합(Overfitting)등의 문제가 나타나기 쉬워 추천알고리즘으로 구현하는 것에 어려움이 있었습니다.</p>
<p>2006년 12월 <strong>Simon Funk</strong>라는 이름으로 활동하여 더 잘 알려진 소프트웨어 개발자 &#8220;Brandyn Webb&#8221;이 Gradient Descent 방법을 통해 어떻게 SVD를 Netflix Prize 문제에 적합하게 <strong>SVD</strong>를 구현할 수 있는지 코드와 방법을 &#8220;Try this at Home&#8221;이라는 제목으로 블로그에 상세히 공개합니다. <a href="http://sifter.org/~simon/Journal/20061211.html"><strong>(Simon Funk 의 &#8220;Netflix Update: Try This at Home&#8221;)</strong></a></p>
<blockquote><p>
  그리고, Simon Funk 가 공개한 SVD 알고리즘은 이후 대부분의 참가 팀이 참고하여 사용하게 됩니다. 우승한 &#8220;BellKor&#8221;팀도 Simon Funk Blog를 참고하여 적용하였음을 논문에서 언급합니다.
</p></blockquote>
<p>Simon Funk 본인도 대회 중 3위 까지 올라갈 정도로 좋은 결과 (6%대의 성능향상)를 제출했었는데요, 휴가기간에 뉴질랜드에서 비행기에 오르던 중 친구에게 Netflix Prize에 대한 소식을 접하게 되면서 여유있는 시간에 참여한 것 치고는 정말 대단한 것 같습니다. 인터뷰에서 마침 여유가 있던 시기였다고 하는데, 노는 것 보다 더 넷플릭스 대회가 끌렸던 것을 보면 데이터 마이닝에 대한 열정이 대단한 분인 것 같습니다. 친구가 보낸 메일에는 다음과 같이 써 있었다고 하네요.</p>
<blockquote><p>
  It looks like someone designed the contest of your dreams.</p>
<p>  All you need to develop is the guts of the thing&#8211;no UI, no communications stuff, no infrastructure, no ancillary programs, no integration, no hardware or hardware interfaces. No need to recruit, pay, or work with a team. No tedious grant writing. No fund raising. No PR.
</p></blockquote>
<p>2007년 대회 참가자들이 제출한 결과는 Simon Funk가 알고리즘을 공개하면서 상향 평준화 되기 시작하고 150여개국 20,000개가 넘는 팀이 넷플릭스 대회에 등록하여 경쟁하기 시작합니다.  2007년 5월 <strong>AT&amp;T Lab</strong>의 연구원으로 이뤄진 <strong>&#8220;BellKor&#8221;</strong> 팀이 7%이상의 성능을 향상시키며 선두를 차지하게 되고 <strong>&#8220;Dinosaur Planet&#8221;</strong>팀과 <strong>&#8220;Gravity&#8221;</strong> 팀이 각각 RMSE 0.8769, 0.8785 로 바짝 따라붙습니다.</p>
<h3>Gravity &amp; Dinosaur Planet Team</h3>
<figure style="width: 413px" class="wp-caption aligncenter"><img src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/201002_netflix_final_leaderboard.png?resize=413%2C275&#038;ssl=1" alt="" width="413" height="275" data-recalc-dims="1" /><figcaption class="wp-caption-text">Progress Prize 2007 Final RMSE Score</figcaption></figure>
<p>2007 최종 제출된 결과를 보면 &#8220;KorBell&#8221; 팀과 &#8220;BellKor&#8221; 팀이 각각 1,2위를 차지한 것으로 보이지만 사실 같은 팀이 두개의 이름으로 제출한 것이고 (그래서 공식 발표상에서는 &#8220;KorBell&#8221;팀이 우승한 것으로 나옵니다), 그 뒤로는 <strong>&#8220;When Gravity and Dinosaurs Unite&#8221;</strong> 팀이 뒤따르고 있습니다.</p>
<p><strong>Gravity</strong>팀은 <strong>Gabor Takacs</strong> 를 리더로 하는 헝가리 연구원 4명으로 구성된 팀이었으며 <strong>Dinosaurs Planet</strong>은 프린스턴 대학의 학생 3명으로 구성되어 있었습니다. 이 두 팀은 계속 &#8220;BellKor&#8221;팀에 필적할만한 성능의 결과를 냈지만, 아쉽게도 약간씩 뒤쳐지다 데드라인인 10월 1일 하루 전 <strong>연합</strong>하여 <strong>&#8220;Gravity and Dinosaurs Unite&#8221;</strong> 팀을 결성하며 1위를 차지하게 됩니다. 하지만 결국 마지막 제출 시간일인 10월 1일 <strong>BellKor</strong> 팀은 다시  <strong>&#8220;Gravity and Dinosaurs Unite&#8221;</strong> 연합팀을 앞지르며 RMSE Score test set 에서 0.8728로 Netflix Cinematch보다 8.26 % 우수한 성능으로 첫해 우승을 차지 합니다.</p>
<h5>비록 &#8220;Gravity&#8221;와 &#8220;Dinosaurs Planet&#8221;팀은 결국 우승하지 못했지만 개별 팀의 결과를 합하면 우승팀을 위협할 수 있을 정도로 결과가 상승할 수 있음을 직접 경험하게 됩니다.</h5>
<p>&nbsp;</p>
<h2>Progress Prize 2008 Winner : BellKor in BigChaos</h2>
<figure style="width: 608px" class="wp-caption aligncenter"><img class="" src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/bkc_team_logo.png?resize=608%2C114&#038;ssl=1" alt="" width="608" height="114" data-recalc-dims="1" /><figcaption class="wp-caption-text">2008년 &#8220;또&#8221; 우승한 &#8220;BellKor in BigChaos&#8221; 팀 로고</figcaption></figure>
<p>2008년 대회가 다시 1년의 긴 장정을 시작하였습니다. 대회 규칙 중 하나는 지난 년도 우승팀이 별다른 큰 성능 향상 없이 쉽게 또 우승을 하지 않도록 하기 위해서 지난 년도 우승 팀 성능에서 최소 1%이상의 성능 향상이 있어야 한다는 추가 규칙이 있었습니다. <a href="http://www.shalomeir.com/2014/11/netflix-prize-1/">(1)편 포스팅</a>에서도 언급한 것처럼 백만달러의 상금이 걸린 Grand Prize 는 넷플릭스 Cinetmatch 보다 <strong>10%</strong> 이상의 성능을 향상시켜야 했는데 이 수치가 거의 불가능에 가까운 결과가 아닌가 에 대한 참가자들의 볼멘소리도 있었습니다. 그만큼 성능 향상이 이제 쉽지 않은 단계에 접어들었지만 <strong>&#8220;BellKor&#8221;</strong>팀은 오스트리아의 <strong>commendo research and consulting</strong>을 창업한 기계학습 분야 연구원 2명으로 이루어진 <strong>&#8220;Big Chaos&#8221;</strong>팀과 엽합하여 <strong>&#8220;Bellkor in BigChaos&#8221;</strong> 팀으로 확장하며 2008년 9월 30일 Cinematch대비 9.44% 향상된 결과를 제출, 우승하게 됩니다. &#8220;BellKor&#8221;팀원은 2년 연속 우승하게 된 것이죠. 2008년도에는 원래 AT&amp;T 연구원이었던 &#8220;Yahuda Koren&#8221;이 이스라엘에 있는 Yahoo Research Lab 으로 이직하면서 AT&amp;T, Yahoo, Commando Research 3개 회사 5명으로 이뤄진 팀이었습니다.</p>
<p>대회가 진행되는 과정 동안 보였던 가장 긍정적인 부분 중 하나는 참가한 사람들이 서로 경쟁자이지만 한편으론 협력자로서 서로 간에 정보를 기꺼이 공유하는데 적극적이었다는 점 입니다. 기본적인 대회 규정 상 매해 우승 팀들은 우승하는 데 사용한 알고리즘을 논문 등의 형태로 발표하여야 했으며<a href="http://www.netflixprize.com/assets/ProgressPrize2008_BellKor.pdf">(2008 대회 우승팀 solution)</a>, 우승 팀 뿐 아니라 대부분의 팀들은 <a href="http://www.netflixprize.com/community/"><strong>Netflix Prize Forum</strong></a>을 통해 발견한 알고리즘이나 정보를 기꺼이 공유하고 서로 협력하였습니다. 또한 대회 기간 중 <a href="http://en.wikipedia.org/wiki/SIGKDD"><strong>&#8220;KDD&#8221;</strong></a>와 같은 데이터 마이닝 학회에서도 실험결과와 노하우들이 활발히 공유되었습니다. 2009년에는 KDD Best Paper로 &#8220;Yahuda Koren&#8221;의 <a href="http://sydney.edu.au/engineering/it/~josiah/lemma/kdd-fp074-koren.pdf">&#8220;<b><i>Collaborative Filtering with Temporal Dynamics&#8221;</i></b></a> 논문이 수상하는 등 학술적으로도 큰 성과를 이루었습니다. 그리고 이러한 활동들 덕분에 다음해인 2009년, 처음에는 불가능해 보였던 10% 이상의 성능 향상을 달성하게 됩니다.</p>
<h5>Final Grand Prize 2009 대회의 진행 과정은 마지막이 될 것으로 생각되는 (3)편으로 이어집니다. (3)편은 빠르게 업데이트 할 예정입니다~</h5>
<h5><a href="http://techchannel.att.com/play-video.cfm/2010/1/18/From-The-Labs-Netflix-Prize">AT&amp;T 에서 공개한 8분여의 영상</a>에서 Netflix Prize를 아주 잘 요약했네요. 추천드립니다.</h5>
<h6>본 포스팅의 내용은 &#8220;Netflix Prize Forum&#8221; 및 관련 뉴스 기사들, 참가팀의 인터뷰 및 홈페이지, 관련 논문, <a href="http://en.wikipedia.org/wiki/Netflix_Prize">Wikipidea</a> 등을 참고하여 재구성하였습니다.</h6>
<p>&nbsp;</p>
<h6><strong>Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회</strong> 바로가기</h6>
<p><a href="http://www.shalomeir.com/2014/11/netflix-prize-1/"><strong>(1)편</strong></a>,  <a href="http://www.shalomeir.com/2014/12/netflix-prize-3/"><strong>(3)편</strong></a></p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/netflix-prize-2/">NETFLIX PRIZE – 다이나믹 했던 알고리즘 대회 (2)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/11/netflix-prize-2/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">244</post-id>	</item>
		<item>
		<title>Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회 (1)</title>
		<link>http://www.shalomeir.com/2014/11/netflix-prize-1/</link>
		<comments>http://www.shalomeir.com/2014/11/netflix-prize-1/#comments</comments>
		<pubDate>Wed, 19 Nov 2014 10:29:40 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Movie]]></category>
		<category><![CDATA[Research]]></category>
		<category><![CDATA[Data Mining]]></category>
		<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[Netflix]]></category>
		<category><![CDATA[넷플릭스]]></category>
		<category><![CDATA[영화 추천]]></category>
		<category><![CDATA[추천 시스템]]></category>
		<category><![CDATA[추천 알고리즘]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=227</guid>
		<description><![CDATA[<p>기계학습, 알고리즘 대회에서 연구원들이 치열하게 연구결과를 가지고 경쟁하는 대회가, 대회 기간이 하루 이틀도 아니고 1년 단위로 이뤄진다면 과연 스포츠 경기 종료 휘슬 직전과 같은 흥미로운 상황이 있을까요? 그래서 대회 당시 분위기를 살펴보는 포스팅을 작성하게 되었습니다. 몇년사이 많은 IT회사 빅마우스들이 한결같이 이야기하는 주제 중에는 아마도 기계학습(Machine Learning)분야가 아닐까 싶습니다. 저도 전부터 기계학습, 특히 추천, 랭킹 알고리즘 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/netflix-prize-1/">Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회 (1)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h4>기계학습, 알고리즘 대회에서 연구원들이 치열하게 연구결과를 가지고 경쟁하는 대회가, 대회 기간이 하루 이틀도 아니고 1년 단위로 이뤄진다면 과연 스포츠 경기 종료 휘슬 직전과 같은 흥미로운 상황이 있을까요? 그래서 대회 당시 분위기를 살펴보는 포스팅을 작성하게 되었습니다.</h4>
<p>몇년사이 많은 IT회사 빅마우스들이 한결같이 이야기하는 주제 중에는 아마도 <strong>기계학습(Machine Learning)</strong>분야가 아닐까 싶습니다. 저도 전부터 기계학습, 특히 추천, 랭킹 알고리즘 분야가 굉장히 중요하다고 생각하게 되면서 이런 저런 연구를 찾아 보던 중 <strong>추천 알고리즘</strong>분야에서 가장 대표적인 사례로 언급되고 있는 <abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr>의 <strong>영화 추천 시스템</strong>에 대해서 파헤쳐 봤었는데요, 그 때 연구 내용도 흥미로웠지만  Neflix Prize 데이터 예측 대회가 연구와 관계없이 생각보다 다이나믹 하게 진행되었던 것이 인상에 남았습니다. 그래서 본 포스팅에서 추천 알고리즘이나 기계학습에 대한 경험이 없으신 분들도 흥미롭게 데이터 연구 과정과 대회가 진행되는지 전달되도록 써내려 갔습니다. (약간 초반에 지루한 설명이 있긴 합니다만;) 그나저나 <abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr> 대회가 종료된게 벌써 5년 전이네요.</p>
<h5>한번에 다 적으려고 했는데 분량이 생각보다 많아져서 시리즈 물로 포스팅합니다. (포스팅 수가 가득이나 별로 없는 블로그이기도 해서요. ^^;)</h5>
<h2>Neflix Prize 란?</h2>
<figure style="width: 792px" class="wp-caption aligncenter"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/2D9672564-attachment.jpg?resize=792%2C474&#038;ssl=1" alt="" width="792" height="474" data-recalc-dims="1" /><figcaption class="wp-caption-text">Netflix Movie Recommendation은 추천 알고리즘의 대표적인 성공사례로 꼽힌다.</figcaption></figure>
<p>Netflix Prize는 <strong><abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr></strong> 사용자들의 영화 별점 데이터를 가지고 2006년 10월부터 2009년 7월까지 약 3년에 걸쳐 이어진 기계학습을 통한 영화 평가 데이터 예측 대회입니다. 본 대회를 통해 대표적인 추천 알고리즘인 <a href="http://en.wikipedia.org/wiki/Collaborative_filtering"><strong>&#8216;collaborative filtering&#8217;</strong></a>이 발전하고 공유되었습니다. 특히 우승팀의 <a href="http://en.wikipedia.org/wiki/Singular_value_decomposition"><abbr title="Singular value decomposition">SVD</abbr></a>를 활용한 <a href="http://research.yahoo.com/files/kdd08koren.pdf"><abbr title="Singular value decomposition">SVD</abbr>++</a>는 이후 굉장히 많은 분야에서 활용되고 있습니다. 연구 분야의 발전 뿐 아니라 Netflix는 성공적인 대회 개최를 통해 큰 홍보효과를 얻었고 <abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr> 영화추천 시스템 성능 향상에도 도움이 되었습니다.</p>
<p>당시 대회의 우승 상금은 winner-take-all 방식으로 1등팀이 US <strong>$1,000,000</strong>를 가져가는 것 이었습니다. 연구분야에서의 상금 치고는 상당한 수준이죠. 정확히는 1등팀이 무조건 수상하는 것은 아니고 매년 우승팀에는 US $50,000 가 주어지며 Netflix가 사용하고 있던 Cinematch 알고리즘보다 10% 이상 성능이 향상 된 경우에만 최종 상금 백만달러가 주어지는 형태로 진행되었습니다. (어떤 한 팀이 10%이상 향상된 결과를 제출하게 되면, last call 한달의 기간이 주어지고 한달 후 최고 성능의 영화 별점 예측을 한 팀이 우승합니다.)</p>
<h6>참고로 Netflix Prize 는 2009년 종료된 후 다시 시작하지 않고 있는데요, 프라이버시 문제가 있었던 것이 그 이유 중 하나가 아닐까 예상됩니다. 실제 누구인지 알 수 없도록 변환된 user id 가 어떤 영화를 어떻게 별점을 주었는지 (그리고 변환된 시간정보)가 주어졌는데 이 데이터로 충분히 실제 어떤 사람이 어떤 영화를 봤는지를 역추적이 가능했기 때문에 대회 종료 후 <abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr> 데이터로 역추적하는 방법이 연구로 나올 정도였고 그래서 현재 Netflix 에서는 당시 공유했던 데이터를 공유하지 않고 있습니다. (얻을 수 있는 방법은 여전히 많이 있지만요.)</h6>
<h2>영화 추천시스템 성능 평가 방법 : <abbr title="Root Mean Squared Error">RMSE</abbr></h2>
<p>당시 추천 시스템의 평가 방법은 지금도 prediction 에서 주로 쓰이는 <a href="https://www.kaggle.com/wiki/RootMeanSquaredError"><strong><abbr title="Root Mean Squared Error">RMSE</abbr></strong></a> 방식으로 어떤 유저가 &#8216;포레스트 검프&#8217;에 별점 4를 주었는데 추천 시스템에서 예상하기로 해당 유저는 &#8216;포레스트 검프&#8217;에 별점 3.7 을 줄 것이라고 계산했다면 0.3 의 error가 발생한 것입니다. 이러한 error를 최소화 하는 방향으로 예측을 하면 알고리즘이 예측을 잘 하는 것으로 볼 수 있으므로 <strong><abbr title="Root Mean Squared Error">RMSE</abbr> Score 가 낮을 수록 성능이 좋은 것 입니다.</strong></p>
<p>참고로 대회에서 기준이 된 Netflix의 Cinematch 알고리즘의 <abbr title="Root Mean Squared Error">RMSE</abbr> 는 <strong>0.9525</strong> 였는데 이 의미는 1보다 살짝 작으므로 유저가 &#8216;인디펜던스 데이&#8217;를 보고 별점을 실제 매긴 결과와 시스템이 예측한 결과의 오차가 1개 정도의 오차가 난다는 의미로 볼 수 있습니다. (물론 실제로는 이보다 성능이 훨씬 좋습니다. 왜냐하면 본 대회는 오로지 USER &#8211; Movie Rating 데이터만을 가지고 예측하는데 반해 실제로는 해당 영화가 무슨 영화인지, 유저가 어떤 유저인지, 영화를 언제 봤는지, 중간에 멈췄는지, 여러날에 걸쳐 봤는지 등 다양한 추가 데이터를 사용할 수 있기 때문입니다.)</p>
<figure style="width: 400px" class="wp-caption aligncenter"><img src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/Ranking-FeaturesPerformance.png?resize=400%2C236&#038;ssl=1" alt="" width="400" height="236" data-recalc-dims="1" /><figcaption class="wp-caption-text">Netflix에서 공개한 챠트 : 단순 Rating데이터(feature) 외에 다른 Feature를 쓸 경우 거의 10배 이상 성능이 향상됨</figcaption></figure>
<p>사실, <strong><abbr title="Root Mean Squared Error">RMSE</abbr></strong>를 이용한 성능 평가는 영화 추천 서비스를 제공하는데 있어 최적화된 방법은 아니라고 할 수 있습니다. 왜냐하면 영화 예측 시스템이 유저가 안 본 모든 영화에 대하여 별점을 잘 예측하는 것보다는 어떤 영화를 가장 재미있게 볼지를 예측하는 것이 중요하기 때문입니다. 그러므로 별표 1개를 줄 영화를 잘 예측하는 것은 영화를 서비스하는 입장에선 별로 의미가 없다고 할 수 있으며, 추천 시스템이 유저에게 재미있게 볼 것이라고 예상한 Top N 영화목록이 실제 유저가 좋아할만한 영화인지가 더 중요합니다. 그래서 Netflix Prize 우승팀의 Yahuda Koren 연구원의 논문에서도 이를 지적하며 다른 평가방법을 제안하였었구요. 현재는 <strong>Top N의 Precision</strong> 을 보거나 <strong>nDCG</strong> 등의 다른 평가 방법을 통해 추천할 순서로 상위 예측 영화에 더 가중치를 주어 추천 시스템의 성능을 평가하고 있습니다.</p>
<h2>주어진 영화 데이터 사용 방법</h2>
<p>본 대회 진행 과정을 이해하는 데 추천 알고리즘을 이해해야 하는 것은 아닙니다. 그래도 일반적인 기계학습이 트레이닝과 테스트의 과정으로 나누어져 있다는 것을 이해하시면 대회 결과를 이해하는 데 도움이 됩니다. 기계학습은 보통 데이터를 트레이닝 용과 테스트용으로 나누어 진행되는데, 처음에 아무런 주어진 정보가 없이 모든 데이터를 예측하는 것은 불가능하기 때문입니다. 예를 들어 <abbr title="넷플릭스는 미국 시장 점유율 90% 수준에 육박하는 세계적인 온라인 미디어 스트리밍 업체입니다.">넷플릭스</abbr>의 데이터의 경우 <strong>{USER, MOVIE, RATING}</strong>  형태로 이루어진 트레이닝 데이터들로 학습을 한 후 <strong>{USER, MOVIE, ?}</strong> 로 되어 있는 테스트 데이터에서 <strong>&#8216;?&#8217;</strong>를 예측하는 것 입니다. 실제 &#8216;?&#8217; 값도 데이터가 주어지지만 모른다고 가정하고 예측을 한 후 예측 결과와 실제 결과를 비교하는 것으로 <abbr title="Root Mean Squared Error">RMSE</abbr> 를 계산하게 되는 것 입니다.</p>
<figure style="width: 697px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/netflix/data_trts.png?resize=697%2C423&#038;ssl=1" alt="" width="697" height="423" data-recalc-dims="1" /><figcaption class="wp-caption-text">Data set 활용 과정</figcaption></figure>
<p>위의 그림과 같이 약 1억개(99,072,112)개의 <strong>training set</strong>을 가지고 추천 시스템을 만듭니다. 만든 시스템이 괜찮게 만들어 졌는지 1,408,395개의 <strong>probe set</strong>을 가지고 확인합니다. <abbr title="Root Mean Squared Error">RMSE</abbr>가 낮게 나오는지 확인하여 수치가 낮게 나오면 나올 수록 추천시스템이 잘 만들어 진 것이죠.</p>
<p>여기서 추가로 대회 과정을 이해하시기 위해 주어진 데이터 외에 그림 하단의 <strong>qualifying set</strong>(ratings unknown)을 보셔야 합니다. 이 데이터는 <strong>{USER, MOVIE, ?}</strong> 로 되어 있고 &#8216;?&#8217;인 영화 별점 Rating 값은 대회 주최측만 알고 있습니다.<br />
Qualifying set 데이터는 대회 참가자들은 모르기 때문에 추천 시스템으로 예상되는 별점을 set에 추가하여 대회 주최측의 시스템으로 submission을 합니다. 제출된 submission 데이터 약 3백만개중 절반은 제출받은 대회 주최측 시스템에서 바로 성능평가를 한 후 <abbr title="Root Mean Squared Error">RMSE</abbr> 를 계산하여 Leaderboard에 공개합니다. 예측을 잘한 데이터를 제출한 팀의 순위가 1위에 놓이게 되겠지요. 이 때 결과를 아예 보여주지 않는 &#8216;test set&#8217;이 존재하는데 이렇게 결과를 숨겨놓는 이유는 결과 제출을 계속하면서 Qualifying set으로 성능을 높이는 시도를 차단하기 위한 것으로 실제 대회에서 최종 final score 는 이 숨겨진 결과로 산정합니다.<br />
보통 대회 참가자들은 quiz set과 test set을 나누어서 다루지 않고 결과를 제출하게 되기 때문에 quiz set과 test set의 <abbr title="Root Mean Squared Error">RMSE</abbr>는 거의 차이를 보이지 않습니다.</p>
<h5>재미있는 대회 진행 과정을 소개하려고 했는데, 널리 알려져 있기도 하고 일반적인 이야기만 하다 (1)편 포스팅은 여기서 마치게 되었습니다. <strong>(2)편은 흥미진진 할 예정입니다!!</strong></h5>
<h6><strong>Netflix Prize</strong>에서는 실제 유저 들이 어떤 영화에 어떻게 별점을 주었는지 보여주는 대량의 데이터를 공개했는데 이것도 데이터 과학자들이 흥미를 가질만한 요소였습니다. 또한 대회도 성공적이었기 때문에 이후 유사한 대회가 많이 열리게 되었는데요. 이러한 데이터 마이닝 대회는 대회 주관하는 측에서도 전문적으로 대회 운영을 해야 하는 어려움이 있습니다. 그래서 <a href="https://www.kaggle.com"><strong>Kaggle</strong></a>  과 같은 데이터 경쟁을 위한 플랫폼을 제공하는 스타트업이 있고 현재 KDD Cup등 유명한 데이터 마이닝 대회가 <a href="https://www.kaggle.com"><strong>Kaggle</strong></a> 을 이용하고 있습니다. 아래 영상으로 이러한 데이터 마이닝 대회가 어떻게 진행되는지 한번 보시는 것도 유익할 것 같습니다.</h6>
<p>&nbsp;</p>
<div class="jetpack-video-wrapper"><iframe class='youtube-player' type='text/html' width='1000' height='563' src='http://www.youtube.com/embed/PoD84TVdD-4?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></div>
<p>&nbsp;</p>
<h6><strong>Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회</strong> 바로가기</h6>
<p><a href="http://www.shalomeir.com/2014/11/netflix-prize-2/"><strong>(2)편</strong></a>,  <a href="http://www.shalomeir.com/2014/12/netflix-prize-3/"><strong>(3)편</strong></a></p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/netflix-prize-1/">Netflix Prize &#8211; 다이나믹 했던 알고리즘 대회 (1)</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/11/netflix-prize-1/feed/</wfw:commentRss>
		<slash:comments>5</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">227</post-id>	</item>
		<item>
		<title>인터스텔라 &#8211; 만족스럽지만 놀란이기에 아쉬운 영화</title>
		<link>http://www.shalomeir.com/2014/11/interstellar/</link>
		<comments>http://www.shalomeir.com/2014/11/interstellar/#comments</comments>
		<pubDate>Mon, 17 Nov 2014 03:01:58 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Movie]]></category>
		<category><![CDATA[interstellar]]></category>
		<category><![CDATA[Review]]></category>
		<category><![CDATA[놀란]]></category>
		<category><![CDATA[리뷰]]></category>
		<category><![CDATA[영화]]></category>
		<category><![CDATA[인터스텔라]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=194</guid>
		<description><![CDATA[<p>최근 가장 핫한 영화라면 단연 인터스텔라가 아닐까 싶습니다. 그래서 저도 이 흐름에 편승하여 인터스텔라 리뷰를 남겨 봅니다. 본 리뷰는 스포일러를 포함하고 있습니다. 영화를 보지 않은 분은 더 이상 읽지 않기를 강력 권장드립니다. 잘 알려졌듯 놀란 감독은 IMAX, 필름으로 영화를 촬영하는데 굉장한 집착을 보이는 감독 입니다. &#8216;다크나이트&#8217;에서 상업영화 최초로 IMAX 필름을 사용하여 충격적인 행보를 시작한 이후 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/interstellar/">인터스텔라 &#8211; 만족스럽지만 놀란이기에 아쉬운 영화</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h4>최근 가장 핫한 영화라면 단연 인터스텔라가 아닐까 싶습니다. 그래서 저도 이 흐름에 편승하여 인터스텔라 리뷰를 남겨 봅니다.</h4>
<h3>본 리뷰는 <strong><span style="color: #ff0000;">스포일러</span></strong>를 포함하고 있습니다. 영화를 보지 않은 분은 더 이상 읽지 않기를 강력 권장드립니다.</h3>
<figure style="width: 680px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/93adf4cc94ee6641c38e9cb64706abf5cf528229.jpg?resize=680%2C1063&#038;ssl=1" alt="" width="680" height="1063" data-recalc-dims="1" /><figcaption class="wp-caption-text">IMAX를 권장하는 INTERSTELLAR Poster</figcaption></figure>
<h4>잘 알려졌듯 놀란 감독은 IMAX, 필름으로 영화를 촬영하는데 굉장한 집착을 보이는 감독 입니다. &#8216;다크나이트&#8217;에서 상업영화 최초로 IMAX 필름을 사용하여 충격적인 행보를 시작한 이후 지금까지 IMAX 카메라로 촬영한 상업영화 7개 중 3개가 놀란감독의 영화이고요. 감독이 직접 IMAX 상영관을 찾아 본인이 의도한 대로 잘 상영이 되는지 점검할 정도라니 다른 영화도 아닌 놀란 감독 영화는 IMAX로 봐주어야 할 것 같습니다.</h4>
<p>비록 국내 상영관은 감독의 기준을 만족시키는 필름 상영관이 없고 혹자는 LIEMAX라고 하는 방식의 IMAX 상영관 밖에 없지만 그래도 최선의 선택은 IMAX인듯 합니다. IMAX 를 떠나 또 필름 촬영과 상영에 대한 놀란 감독의 고집 덕분에 국내에서도 오랜만에 <a href="http://news.donga.com/rel/3/all/20141015/67175062/1">필름으로 상영되는 영화관</a>이 생겨났는데요.  <a href="http://star.mt.co.kr/stview.php?no=2014111508284557311&amp;ERV2">CGV의 4DX 효과</a>도 문제시 삼았다고 하는데 진상은 확실하지 않지만 감독이 관객에게 어떻게 영화가 전달되어야 하는지 영화 제작,배급 뿐 아니라 상영까지 컨트롤하려고 한다는 점에서 감독이 생각하는 영화의 범위도 대단히 넓고 또 현재 영화계에서 가진 영향력도 엄청나다는 생각이 듭니다. 어쨌거나 워낙 매니아 층이 두터워 인터스텔라의 경우 개봉 3주 전에 CGV IMAX 상영관 1주일 분량이 오픈 되었었는데 6시간이 채 되기 전에 서울 기준 사이드를 제외한 좌석은 모두 매진될 정도로 굉장히 순식간에 예매가 완료되더군요. 다행히 그때 트위터에 예매오픈 소식이 뜬 것을 보고 부랴부랴 예매하여 IMAX로 관람할 수 있었습니다.</p>
<blockquote class="twitter-tweet" width="550">
<p lang="ko" dir="ltr">놀란은 관객 얼굴에 물을 뿌리진 않을 정도로 제정신이다. <a href="http://t.co/KicSCXFlGs">pic.twitter.com/KicSCXFlGs</a></p>
<p>&mdash; eggry (@eggry) <a href="https://twitter.com/eggry/status/531609557353512961">November 10, 2014</a></p></blockquote>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<h6>어떤 분의 재미있는 트윗. 사실 필름 방식을 고집하는 놀란 감독 영화와 4DX는 극과 극의 관계가 아닐까 싶습니다. 그리고 인터스텔라 영화의 성격상 4DX 가 안맞는 것은 차치하더라도 2D로 상영하는데 4DX라고 하는 것부터가 좀 애매한 느낌. 가장 놀라운 것은 인터스텔라 4DX는 좌석이 움직이기는 하지만 스크린이 중소형 임에도 IMAX보다 티켓값이 2천원 더 비싸다는 사실;</h6>
<p>막상 영화를 보고 나서는 영화의 스케일이나 웅장함을 고려할 때 분명 IMAX가 최고의 환경이긴 하지만, 영화가 생각보다 IMAX 특성을 잘 살린 화면이 많지 않은 듯 하다는 느낌도 받았습니다.</p>
<p>그리고 영화를 보고나서 오래전 부터 많은 영화팬들이 언급하던 우주 SF영화의 명작이자 놀란 감독이 존경하고 또 오마주가 있다고 언급한 스탠리 큐브릭 감독의 <a href="http://www.imdb.com/title/tt0062622/?ref_=nv_sr_1"><strong>&#8220;2001: 스페이스 오디세이&#8221;</strong></a> 를 찾아 보게 되었는데요. 놀란감독이 의식한 부분도 있고 무의식중에 영향을 받은 부분도 많겠지만 정말 너무나 많은 부분에서 영향을 받았구나 싶은 생각이 들었습니다. 사실 <strong>&#8220;인터스텔라&#8221;</strong> 뿐 아니라 <a href="http://www.imdb.com/title/tt0062622/?ref_=nv_sr_1"><strong>&#8220;2001: 스페이스 오디세이&#8221;</strong></a>에 영향을 받지 않은 우주를 배경으로 한 영화는 거의 없다는 것이 괜한 이야기가 아니라는 생각이 들었습니다. 그래서 리뷰 중간 계속적으로 <strong>2001: 스페이스 오디세이</strong> 를 언급하지 않을 수 없을 것 같습니다.</p>
<figure style="width: 821px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/screenshot_2001odyssey.png?resize=821%2C376&#038;ssl=1" alt="" width="821" height="376" data-recalc-dims="1" /><figcaption class="wp-caption-text">2001 스페이스 오디세이는 마치 모든 우주를 배경으로 한 영화의 어머니 같은 느낌입니다.</figcaption></figure>
<p>&nbsp;</p>
<h2>단연 최고라고 생각되는 부분, 영화 음악</h2>
<p>이번에도  놀란과 함께한 음악감독은 한스짐머인데요. 영화계의 최고 음악 감독이라고 불리우는 감독 중에서도 단연 제가 제일 좋아하는 감독이어서 무한 애정을 듬뿍 담아 찬사를 드릴 수 밖에 없는 분인데, 이번 영화를 통해 더욱 감탄을 하고 나왔습니다. 인터스텔라가 전반적 전개가 좋게 표현하면 자연스럽고, 나쁘게 이야기하면 뻔하게 흘러가는 편이어서 긴장감이 넘치는 영화는 아니었습니다. 그래서 몇몇 긴장감이 느껴져야 하는 순간들에 별로 감흥이 느껴지지 않을수도 있었는 데 음악 덕분에 긴 상영시간 동안 긴장감이 살아났고, 감정을 끌어 내 주었습니다. 아래 영상은 만 박사가 인듀어런스 호 도킹하려다 부숴먹고 주인공 일행이 다시 도킹을 시도하는 장면에서 나오는 음악입니다. 음악만 들어도 저절로 그때의 긴박함이 떠오르시지 않으시나요?</p>
<div class="jetpack-video-wrapper"><iframe class='youtube-player' type='text/html' width='1000' height='563' src='http://www.youtube.com/embed/bYa5luHb2DA?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></div>
<h6>interstellar Docking 장면에서의 음악. 인듀어런스 호의 특징과 중력을 이용한 기발한 연출도 좋았지만, 주인공 일행이 Docking 에 실패할리가 없다는 것이 너무 당연했음에도 이 장면에서 긴장하고 볼 수 밖에 없었던 것은 한스짐머의 음악 덕분이 아닐까요?</h6>
<h2>우주를 비쥬얼화 하는데 있어 지금 기술로 가능한 최고의 수준</h2>
<p>웜홀과 블랙홀은 영화 전체에서 가장 중요한 장치이자 영화의 중심 소재입니다. 인터스텔라가 기존의 우주를 배경하는 영화와 우주를 보여주는 데 있어 가장 큰 차별점이라면 그 것은 &#8216;블랙홀&#8217;을 어떻게 제대로 보여줄지 도전했다는 점을 들 수 있을 것 같습니다. 그동안 많은 영화에서 웜홀과 블랙홀에 대한 언급은 많았지 제대로 표현한 영화는 없었으니까요. 그리고 인셉션에서 본 것처럼 이미 공간을 뒤틀고 현실적이면서도 현실에서 일어날 수 없는 생경한 환경을 묘사하는데 관심이 많은 감독이기 때문에 더욱 이러한 소재에 흥미를 가졌으리라 생각됩니다.</p>
<figure style="width: 851px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/screenshot_wome.png?resize=851%2C459&#038;ssl=1" alt="" width="851" height="459" data-recalc-dims="1" /><figcaption class="wp-caption-text">Interstellar 에서 나오는 웜홀 장면. 정말 다른 공간과 이동할 수 있는 홀이 있다면 어떻게 보일지 너무 잘 표현되었다.</figcaption></figure>
<p>유명한 물리학자 킵손과 함께 블랙홀과 웜홀을 가장 그럴듯하게 표현하는데 도전하였고 그 결과가 실제 천체물리학 이론에 얼마나 기대였는지는 확실치 않지만 적어도 이론을  비쥬얼로 표현하는 데 있어서는 최대한 논리적으로 그려진 것 같습니다.</p>
<h4>웜홀을 표현한 장면은 우리가 생각할 수 있는 다른 공간과의 접점을 정말 멋지게 표현했습니다. 저에게 있어 이 영화의 최고의 장면은 다른 어떤 장면보다도 웜홀을 통과하는 장면이었습니다.</h4>
<p>본 영화에서 새로운 공간 이동을 표현한 방식은 지금까지 어떤 영화보다도 현실적이었습니다. 개인적으로 거의 모든 면에서 완벽하다고 생각되는 영화 중에 &#8216;아바타&#8217;가 있는데 그 &#8216;아바타&#8217;마저도 정신이 이동하는 효과에서는 판에 박힌 느낌을 받았었는데 말이죠.</p>
<p>제가 생각하기에 놀란은 영화 전반적인 스토리를 봐도 그렇고, 감독의 성향을 고려할 때 반드시 완벽한 현실 이론에 근거하여 영화를 만드는 감독은 아니라고 생각됩니다. 관객에게 얼마나 현실적으로 그럴듯하게 전달되는지를 더 중요하게 생각하기 때문에 여러 물리학 이론을 영화의 좋은 소재와 장치로 활용하여 영화가 현실적으로 느껴지도록 만드는데 활용한다는 느낌을 받았고 실제 물리이론에 어긋나는 부분이 있는지는 그다지 중요하게 생각하지 않는 것 같다는 생각도 들었습니다. 이런 부분은 영화적으로 대부분 용인되고 있고 그러한 방법이 더 효과적이기 때문에 어떻게 보면 당연한 것이라고 생각됩니다.</p>
<p>물론 얼마나 리얼리티를 중시하는가는 영화가 시대가 흘러도 그 생명력을 유지하는 데 있어서는 굉장히 중요한 요소가 아닐까 싶습니다. 그래서 &#8216;블레이드 런너&#8217;나 &#8216;2001: 스페이스 오딧세이&#8217;와 같이 시간이 흘러도 명작 SF로 느껴지는데 이러한 요소도 크게 작용했을 것 같습니다. 현실적으로 보이기 위해 스탠리 큐브릭이 집착했던 수준을 생각하면 &#8216;인터스텔라&#8217;는 보여주는데 있어서는 굉장히 현실적이었지만 영화 전반에 걸쳐 사용된 물리이론은 소재로만 활용된 것 같아 아쉬움이 느껴졌습니다.</p>
<h2>영화 전체의 구조</h2>
<h3>제가 생각한 인터스텔라의 주제는 &#8216;사랑&#8217; 보다는 &#8216;희망&#8217;</h3>
<figure style="width: 742px" class="wp-caption aligncenter"><img class="" src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/screenshot_endurance.png?resize=742%2C391&#038;ssl=1" alt="" width="742" height="391" data-recalc-dims="1" /><figcaption class="wp-caption-text">우주를 여행할 수 있는 수준의 기술을 갖추고 있는 것만으로 우리 참 대단하지 않나 싶은 뿌듯함을 느껴지게 하는 인듀어런스 호.</figcaption></figure>
<p>우주를 배경으로 한 영화에서 가장 적합한 주제는 무엇이 있을까요? 고독한 우주를 배경으로 하고 있으니 &#8216;사랑&#8217;도 좋은 주제가 될 수 있고 우주 너머 우리가 알 수 없는 거대한 존재, 인간보다 우월한 존재를 표현하는 데 있어 우주만큼 좋은 소재도 없으니 &#8216;인간&#8217;의 한계를 그릴 수도 있을 것 같습니다. 그러한 한계를 이겨내야 영화가 마무리 될테니, 그 한계를 이겨내는 과정이 중요한 스토리가 될 것 같은데요. 많은 영화에서 인간 보다 우월한 존재를 표현하는데 우주 자체를 이용하기 보다 우주에서 마주칠 미지의 존재, 외계인 을 상정하는 경우가 너무 많았습니다. 그래서 놀란 감독은 의도적으로 <strong>외계인</strong> 의 등장을 배제하는 것을 보여줌으로서 기존 영화와 차별화하려고 한다는 인상을 받았습니다. 특히 마지막에 &#8216;외계인&#8217;의 존재를 굳이 보다 더 뛰어난 &#8216;인간&#8217;으로 치환함으로서 영화가 주는 메시지를 보인 것이 아닌가 싶습니다.</p>
<blockquote><p>
  제가 생각하는 큰 영화적 줄기는 다음과 같습니다. 영화속 마이클 케인이 언급하는 딜런의 &#8216;Do Not Go Gentle into That Good Night &#8216; 시 구절 처럼 죽음에 임박한 상황을 상정하고, 가만히 앉아 죽음을 기다리지 말고 맞서 싸우려는 의지를 가진 주인공이 등장합니다. 프론티어 정신이 영화 전체에 깔려 있죠. 죽음에 이르게 할 정도의 난관은 첫번째 밀러 행성에서 처럼 거대한 자연일 수도 있고 두번째 만 박사의 행성처럼 사람 사이에서의 문제도 있습니다. 이러한 문제가 결국 절대 극복하지 못할 정도의 존재인 블랙홀 처럼 다가오더라도 인간은 스스로의 힘으로 이를 이겨낼 수 있다. 라는 것이 영화의 주제로 생각됩니다. 곧 <strong>희망</strong> 을 가지고 계속 부딪혀야 된다는 것.
</p></blockquote>
<figure style="width: 843px" class="wp-caption aligncenter"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/screenshot_hope.png?resize=843%2C365&#038;ssl=1" alt="" width="843" height="365" data-recalc-dims="1" /><figcaption class="wp-caption-text">&#8220;우린 답을 찾을 것이다. 늘 그랬듯이&#8221;</figcaption></figure>
<p>영화에서 전달하고자 하는 메시지나 주제는 당연하게도 보편 타당한 좋은 내용입니다. 어떻게 색다르게 보여줌으로써 관객에게 지루하지 않고 새롭게 전달하는지 스스로 깨닫게 만드는 것이 제일 중요한 요소라고 생각하는데, 놀란 감독은 그동안 공간과 시간을 뒤틀리는 방식과 일반적인 관객이 예상가능한 영화의 기승전결 구조를 살짝 뒤틀어서 관객에게 기존 영화와 다른 느낌을 받도록 하는 능력이 탁월하다고 생각합니다. 그런데 &#8216;인터스텔라&#8217;에서는 그러한 장기가 거의 느껴지지 않았습니다.</p>
<figure style="width: 379px" class="wp-caption alignnone"><img src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/simson.jpg?resize=379%2C283&#038;ssl=1" alt="" width="379" height="283" data-recalc-dims="1" /><figcaption class="wp-caption-text">영화 초반 책장을 통해 메시지가 나오는 걸 보니 영화 마지막에는 블랙홀로 들어가 책장 뒤에서 메시지를 보내겠구먼&#8230;</figcaption></figure>
<p>시공간을 뛰어넘어 농장을 배경으로 한 자식과 아버지의 모습을 교차 편집하여 보여주는 장면 정도가 놀란 감독의 장기를 잘 보여준 것 같지만 영화 전체에 걸쳐 큰 틀에서 볼때 너무 평이한 흐름을 가진 영화여서 이 부분이 가장 아쉬움이 많이 남네요.</p>
<p>또 &#8216;2001: 스페이스 오디세이&#8217; 이후 많은 우주를 배경으로 한 영화에서 영화 마지막에 현재 인간과 차원을 달리하는 존재의 등장시킴으로서 영화의 스케일을 극대화 하는 형태의 스토리 라인은 그동안 너무 많이 보아 왔는데, 단지 그 존재가 알고보니 &#8216;외계인&#8217; 이 아닌 &#8216;인간&#8217; 이었다는 것만으로 차별화되었다고 보기는 어려울 것 같습니다.</p>
<h2>모든 연기자의 연기는 정말 멋졌다.</h2>
<h4>매튜 맥커너히</h4>
<figure style="width: 692px" class="wp-caption aligncenter"><img src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/111114_TimeCircle_Circle.jpg?resize=692%2C389&#038;ssl=1" alt="" width="692" height="389" data-recalc-dims="1" /><figcaption class="wp-caption-text">HBO 드라마 True Detective 에서의 매튜 맥커너히 모습</figcaption></figure>
<p>요즘 나오는 영화와 미드 <a href="http://www.imdb.com/title/tt2356777/"><strong>트루 디텍티브</strong></a>까지 갑자기 매력치가 최고로 올라가버린 배우 매튜 맥커너히가 &#8216;인터스텔라&#8217;에서도 여전히 그 쿨한 어투의 매력을 발산했습니다. 생각해보면 과거 &#8216;콘택트&#8217;에서 &#8216;조디포스터&#8217;에 밀려 존재감이 약했던 배우였던 것 같은데 갑자기 이렇게 대단한 배우가 된 것이 신기한데요. 아무튼 최근 나오는 영화마다 연신 푹 빠질만한 캐릭터로 나오고 있습니다. 약간은 그 매력이 다 비슷한 점이 염려 스럽지만 지금으로서는 정점에 올라선 배우가 아닌가 싶습니다. &#8216;인터스텔라&#8217;에서도 매튜 맥커너히를 보는 재미로 시간이 갔던 것 같습니다.</p>
<h4>앤 해서웨이</h4>
<p>앤 헤서웨이의 연기는 좋았던 것 같습니다. 하지만, 등장할때마다 너무 이뻐서 &#8220;아, 영화구나&#8221; 하는 생각이 들게 한다는 점이 문제였습니다. 저만 그랬으려나요? ㅎㅎ</p>
<figure style="width: 425px" class="wp-caption alignnone"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/interstellar-skip-crop.jpg?resize=425%2C638&#038;ssl=1" alt="" width="425" height="638" data-recalc-dims="1" /><figcaption class="wp-caption-text">도저히 우주인으로 받아들여지기 어려운 외모</figcaption></figure>
<h4>그 외 많은 등장인물들</h4>
<p>따로 언급하려다 함께 묶어 언급해서 아쉬운 어린 머피 역의 맥킨지, 너무 사랑스러웠죠!</p>
<p>덱스터에서 가장 강렬한 악역으로 멋진 연기를 보여주신 아버지 역할의 존 리스노우, 영화사에서 등장을 최대한 비밀로 붙였던 M님. 또 한번 등장한 신뢰를 주는 마이클 케인 등 모든 출연진의 연기가 영화에 잘 붙어 있었습니다. 좋은 감독에게는 항상 뛰어난 사람들이 함께 하는 중력이 발휘 된 것이 아닌가 싶네요.</p>
<h2>기대한 그 이상은 없었다.</h2>
<p>하지만 결국 기대한 것 이상의 혁신은 없었습니다. 다른 감독의 영화였다면 충분히 만족스러운 영화였겠지만, 감독의 야심을 보면 기존의 잘 만든 영화 이상의 영화가 나올 수도 있다고 생각했는데요. &#8216;2001: 스페이스 오디세이&#8217;가 이후 수많은 영화에 미친 영향력처럼, &#8216;다크나이트&#8217;가 히어로 영화의 공식을 새로 씀과 동시에 히어로 영화의 틀을 깨부순 것처럼 무언가 &#8216;인터스텔라&#8217;가 이룬 성과를 통해 이후 영화들을 더 발전 시킬 수 있는 요소가 발견되기를 기대했습니다. 하지만 제가 생각하기에 &#8216;인터스텔라&#8217; 는 분명 훌륭한 영화지만 어떤 혁신이 느껴지지는 않았습니다.</p>
<blockquote><p>
  다시한번 강조드리면, 모든 영화에서 혁신을 기대하는 것은 아닙니다. 놀란 감독이었기 때문에 큰 기대를 한 것이고 그래서 아쉬울 따름입니다.
</p></blockquote>
<div class="jetpack-video-wrapper"><iframe class='youtube-player' type='text/html' width='1000' height='563' src='http://www.youtube.com/embed/kpz8lpoLvrA?version=3&#038;rel=1&#038;fs=1&#038;autohide=2&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;wmode=transparent' allowfullscreen='true' style='border:0;'></iframe></div>
<h6>한스짐머의 INTERSTELLAR Main theme. 음악만 들어도 다른 은하계로 떠나는 듯한 느낌. 너무 좋네요. ㅠㅠ</h6>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/interstellar/">인터스텔라 &#8211; 만족스럽지만 놀란이기에 아쉬운 영화</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/11/interstellar/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">194</post-id>	</item>
		<item>
		<title>BLOG를 개설하며 공부한 것</title>
		<link>http://www.shalomeir.com/2014/11/blogcomponent/</link>
		<comments>http://www.shalomeir.com/2014/11/blogcomponent/#comments</comments>
		<pubDate>Sun, 16 Nov 2014 10:04:35 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[블로그]]></category>
		<category><![CDATA[워드프레스]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=125</guid>
		<description><![CDATA[<p>본 블로그를 개설하며 여러가지를 공부한 것들을  간략히 나열해 봅니다. 블로그 구축 목적 중 하나는 웹 사이트 구축 및 운영 과정에서 필요한 요소들을 익히는 데 있었기 때문에 꼭 블로그를 구축하는데 있어 필수적인 요소가 아니었어도 필요하다 싶은 내용들을 공부해 나갔습니다. 많은 부분들이 사실 직접적으로 사용되진 않았지만 도움이 되었습니다. 1. WORDPRESS 블로깅을 위해 어떠한 컨텐츠 생산 도구(CMS)를 사용하는 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/blogcomponent/">BLOG를 개설하며 공부한 것</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>본 블로그를 개설하며 여러가지를 공부한 것들을  간략히 나열해 봅니다.</h3>
<h4>블로그 구축 목적 중 하나는 웹 사이트 구축 및 운영 과정에서 필요한 요소들을 익히는 데 있었기 때문에 꼭 블로그를 구축하는데 있어 필수적인 요소가 아니었어도 필요하다 싶은 내용들을 공부해 나갔습니다. 많은 부분들이 사실 직접적으로 사용되진 않았지만 도움이 되었습니다.</h4>
<h2>1. WORDPRESS</h2>
<p>블로깅을 위해 어떠한 컨텐츠 생산 도구(<abbr title="Contents Management System">CMS</abbr>)를 사용하는 것이 좋은지 여러가지 대안을 고민하던 중, <a href="2014/11/makingblog/">&#8216;<strong>BLOG를 개설하게 된 동기</strong>&#8216;</a> 포스팅에서 밝힌 것처럼 어떠한 도구인지가 개인 블로거에게 있어 크게 중요하지 않다는 생각을 했습니다. 물론 현 시대에 와서 <a href="http://www.bloter.net/archives/196694" title="전 세계 언론은 왜 복스미디어 CMS에 군침을 흘릴까"><strong>VOX Media 의 사례</strong></a>처럼 <abbr title="Contents Management System">CMS</abbr> 의 중요성은 날로 커지고 있습니다. 보다 좋은 도구가 좋은 컨텐츠를 생산하는데 있어 분명 큰 도움이 됩니다. 특히 보다 전문적인 이유로 컨텐츠를 생산해야 한다면 TEXT Editor 와 해당 분야를 잘 커버할 수 있는 <abbr title="Contents Management System">CMS</abbr>와의 차이는 엄청나겠지요. 하지만 제 블로그는 특별한 분야에 대한 전문성을 표방하지 않고 있고 생각을 글과 약간의 사진, 영상을 첨부할 수 있는 것으로 충분하다고 보았기 때문에 어떠한 <abbr title="Contents Management System">CMS</abbr>인지가 컨텐츠 생산 측면에서 크게 중요하지 않았습니다. 그래서 <a href="https://medium.com/"><strong>Medium</strong></a> 과 같은 블로깅 플랫폼이나 <a href="http://docs.getpelican.com/en/latest/#"><strong>Pelican</strong></a> 과 같은 static html 을 생산해주는 가벼운 툴도 고민해 보았습니다. Pelican 과 같은 툴을 서비스화 한  <a href="http://scriptogr.am"><strong>Scriptogr.am</strong></a> 도 굉장히 편리하구요. Dropbox 에 text editor 로 <a href="http://daringfireball.net/projects/markdown/"><strong>Markdown 문법</strong></a> 에 따라 작성해두면 알아서 동기화 되서 웹에 올라가는데 그 깔끔한 맛이 아주 일품입니다. <img src="https://s.w.org/images/core/emoji/11/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>WordPress, jumla, duopla 과 같은 전통적인 <abbr title="Contents Management System">CMS</abbr>보다 단순하고 깔끔한 STATIC PAGE 만을 생산하는 것으로 충분한 블로거들이 많기 때문에 앞으로 계속 발전할지 지켜볼만 할 것 같구요. 하지만 저는 WordPress 의 다양한 플러그인 그리고 직접 서버에 설치 운영하면서 얻는 경험들이 필요했기 때문에 최종적을 가장 무난한 워드프레스를 사용했습니다.</p>
<h4>COMMENT SYSTEM : DISQUS Plugin</h4>
<p>댓글은 블로깅이 일방향이 아닌 소통이 되기 위해 아주 중요한 역할을 해오고 있습니다. 댓글 플러그인이 앞으로 단순한 댓글 이상의 역할을 하리라고 예상할 수 있기 때문에 현재 대세인 <a href="https://disqus.com/"><strong>DISQUS</strong></a> 나 <a href="http://web.livefyre.com/"><strong>Livefyre</strong></a>  그리고 국내에서 가장 높은 점유율을 보이고 있는 <a href="http://www.livere.com/"><strong>Livere</strong></a> 의 적용을 고민해 보았고 심플하다는 이유로 DISQUS 를 적용해보았습니다. 저는 이 분야가 향후 대단한 가능성이 있다고 보여지지만 근래 몇년 동안 큰 발전이 없는 것 처럼 느껴지기도 해서 조금 아쉽습니다.</p>
<h4><abbr title=" Search Engine Optimization">SEO</abbr> : Yoast</h4>
<p>검색 최적화를 플로그인 형태로 다양하게 지원하는 서비스가 있는데 이중 <a href="https://yoast.com/">Yoast</a> 플러그인으로 적용한 상태 입니다.</p>
<figure style="width: 590px" class="wp-caption aligncenter"><img class="" src="https://i0.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/wordpress-seo-plugin-590x372.png?resize=590%2C372&#038;ssl=1" alt="yoast plugin" width="590" height="372" data-recalc-dims="1" /><figcaption class="wp-caption-text">WordPress SEO by Yoast Plugin 설치 후 나타나는 옵션들</figcaption></figure>
<p>검색엔진이 스니펫을 만드는 과정에 대해 관심이 많았었는데 Yoast를 통해 그 과정을 조금 더 잘 이해할 수 있게 되었네요.</p>
<h4>THEME : <b>INTERGALACTIC</b></h4>
<p>워드프레스 블로그를 만들며 어떤 테마를 사용해야 할지는 가장 고민되는 결정 중 하나가 아닐까 싶습니다. 아무래도 눈에 보이는 형태를 많이 좌지우지 하게 되는 데요.  <a href="https://medium.com/"><strong>Medium</strong></a>스러운 심플한 형태를 고려하면서 여러 Theme 를 살펴보았는데요. 본 블로그에 적용한 테마인 <a href="http://intergalacticdemo.wordpress.com/2014/09/25/into-the-great-beyond/"><strong>INTERGALATIC</strong></a>과 $43 유료인 <a href="http://demo.codestag.com/?theme=ink"><strong>Ink</strong></a>가 가장 제게 매력적으로 다가왔습니다.</p>
<ul>
<li> Medium style wordpress theme를 검색해보면  <a href="http://premium.wpmudev.org/blog/free-medium-inspired-themes-wordpress/">&#8220;13 Free Medium Inspired WordPress Themes&#8221;</a>와 같은 포스팅들이 굉장히 많이 보입니다.</li>
</ul>
<p><a href="http://demo.codestag.com/?theme=ink"><strong>Ink</strong></a>가 굉장히 원하던 스타일이었지만 아직 대단한 알맹이가 하나도 없는데 굳이 유료를 적용할 필요까진 없다고 보여지고 <a href="http://intergalacticdemo.wordpress.com/2014/09/25/into-the-great-beyond/">INTERGALATIC</a>도 WORDPRESS 4.0 웹서비스에서 공식적으로 제공하는 만큼 신뢰가 갔기 때문에 선택하게 되었습니다.</p>
<figure style="width: 433px" class="wp-caption aligncenter"><img src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/ink-screenshot.jpg?resize=433%2C1062&#038;ssl=1" alt="" width="433" height="1062" data-recalc-dims="1" /><figcaption class="wp-caption-text">너무 이쁜 INK Theme screenshot</figcaption></figure>
<h4>Child THEME 커스터마이징</h4>
<p>워드프레스 테마는 자식테마를 생성해서 기존 테마를 커스터마이징 하는 방법을 제시하고 있는데, 이를 통해 간단한 CSS Style 수정에서 부터 php 를 직접 수정하는 방법이 손쉽게 가능합니다. 처음에는 제대로 다 뜯어고치고 싶은 의욕으로 PHP에 대해 잘 모르고 있었기 때문에 책한권을 빌려 PHP 웹서비스 구축 튜토리얼을 따라해보며 WordPress 를 어느정도 수정할 수 있을까 기대했지만, 막상 워드프레스 source 를 이해하는 것만도 보통 일이 아님을 깨닫게 되었습니다. 그나마 자식 테마를 통해 눈에 보이는 부분이라도 대강 바로 이해할 수 있게 되어 있어서 다행이 아닌가 싶었는데요. 반응형 웹 디자인, 미디어 쿼리 적용을 하면서 원하는 디자인 수정만으로도 계속 의도한 바대로 안 움직여 줘서 결국 필수적으로 수정하고 싶었던 부분 외에는 소스 반영을 다 못하고 말았네요.</p>
<p>&nbsp;</p>
<h2>2. Amazon Web Service</h2>
<p>아마존에서 제공하는 클라우드 인프라인  <abbr title="Amazon Web Service">AWS</abbr> 를 웹 서비스 용도로 사용하게 되었습니다. 마침 지난달 Amazon Korea 에서 개최한 [**&#8221;Cloud Taekwon | 서울&#8221;*]  행사에서 받은 $50 프로모션이 있어서 혹시 모를 트래픽 증가에도 도움이 될 것 같았고 무엇보다 앞으로 웹 서비스를 런칭한다면 서버 인프라는 <abbr title="Amazon Web Service">AWS</abbr> 를 이용해야 한다고 생각해 왔기 때문에 다른 고민없이 <abbr title="Amazon Web Service">AWS</abbr> EC2와 RDS, S3 그리고 Route 53 을 사용해 서버셋업을 완료하였습니다.</p>
<figure style="width: 599px" class="wp-caption aligncenter"><img class="" src="https://i1.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/posting+img/B0dtMo9CYAESHYM.jpg?resize=599%2C337&#038;ssl=1" alt="AWS" width="599" height="337" data-recalc-dims="1" /><figcaption class="wp-caption-text">때마침 아마존 세미나를 갔다 받은 $50 쿠폰, 과연 본 블로그가 $50를 소모하는 순간이 언제 즈음 올런지 궁금하네요.</figcaption></figure>
<h2>3. 고유 도메인 적용 : <a href="http://www.shalomeir.com">www.shalomeir.com</a></h2>
<p>고유 도메인 구입하여 적용해서 저의 고유 id를 가진 웹 주소를 블로그에 적용해 보았습니다. 크게 어려운 과정은 아니었지만 도메인 구입 및 적용과정에서 웹 환경이 어떤 구성으로 되어 있는지 느껴볼 수 있어 좋았습니다.</p>
<figure id="attachment_452" style="width: 660px" class="wp-caption aligncenter"><a href="https://i0.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_wb_shalomeir1.png"><img class="wp-image-452 size-medium" src="https://i0.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_wb_shalomeir1.png?resize=660%2C660" alt="" width="660" height="660" srcset="https://i0.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_wb_shalomeir1.png?resize=660%2C660 660w, https://i0.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_wb_shalomeir1.png?resize=150%2C150 150w, https://i0.wp.com/www.shalomeir.com/wp-content/uploads/2014/11/SHALOMEIR-LOGO_wb_shalomeir1.png?w=960 960w" sizes="(max-width: 660px) 100vw, 660px" data-recalc-dims="1" /></a><figcaption class="wp-caption-text">adobe illustrator 로 작업해 본 로고</figcaption></figure>
<h2>4. Desgin : adobe photoshop, illustrator</h2>
<p>블로그를 개설하는 과정에서 제 웹 아이덴티티를 의미하는 ID : <strong>shalomeir</strong> 를 의미하는 Logo 를 만들어서 웹 사이트에 적용하고 싶었는데요. 요즘에는 많은 웹 서비스에서 ID뿐 아니라 간단한 프로필 사진 썸네일이 사용되기 때문에 이를 통일하고 싶은 마음도 있었고 스타트업을 준비하며 로고를 직접 러프하게 만들어보고도 싶어서 어도브 일러스트레이터를 공부해보았습니다. 최근까지도  포토샵과 일러스트레이터의 차이점도 잘 모르고 있었기 때문에 포토샵으로 다 되는줄로만 알고 있었는데, 최근처럼 반응형 웹이 대세가 된 경향을 고려하면 일러스트레이터가 포토샵보다 더 중요한 도구가 아닌가 싶은 생각도 들었습니다. 벡터 기반 디자인 도구로 할 수 있는 것이 엄청 많고 또 흥미로워서 취미삼아 앞으로도 계속 뭔가 그려보고 싶은 욕심이 나더군요.</p>
<p>| 일러스트레이터는 사진을 가지고 작업하는 것이 아닌 직접 그려보는 듯한 기분이 들어서 만드는 재미가 아주 쏠쏠 했습니다.</p>
<p>로고 디자인, 직접 제 얼굴을 일러스트 풍으로 만드는 일을 동영상 강좌들을 보며 따라해보다 보니 시간이 술술 가더군요.</p>
<p><a href="http://www.shalomeir.com/2014/11/blogcomponent/#gallery-125-1-slideshow">슬라이드 쇼를 보려면 클릭하세요.</a><br />
<a href="http://youtu.be/Cye3VaLo0Go">&#8220;Create The Obama Hope Poster Style In Adobe Illustrator Youtube 강좌 영상&#8221;</a>을 참고해서 본 일러스트를 그려보았습니다.</p>
<h4>블로그를 만드는 과정에서 배우는 것도 많았고 재미있었지만 정작 중요한 컨텐츠를 채워 나가는 것은 이제 시작이라 앞으로 얼마나 많은 시간을 할애하여 좋은 포스팅을 꾸준히 올릴 수 있을지 염려도 되는데요, 기왕 개설한 김에 꾸준히 가벼운 내용이라도 올려야겠네요.</h4>
<div style="display: none;">http://blogand.me Verify Code : 55dc524a847e4</div>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/blogcomponent/">BLOG를 개설하며 공부한 것</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/11/blogcomponent/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">125</post-id>	</item>
		<item>
		<title>BLOG를 개설하게 된 동기</title>
		<link>http://www.shalomeir.com/2014/11/makingblog/</link>
		<comments>http://www.shalomeir.com/2014/11/makingblog/#comments</comments>
		<pubDate>Sat, 15 Nov 2014 16:37:21 +0000</pubDate>
		<dc:creator><![CDATA[shalomeir]]></dc:creator>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[wordpress]]></category>
		<category><![CDATA[블로그]]></category>
		<category><![CDATA[워드프레스]]></category>

		<guid isPermaLink="false">http://www.shalomeir.com/?p=115</guid>
		<description><![CDATA[<p>본 블로그를 개설하기로 마음먹은 이유를 공유해봅니다. 오래전부터 블로그를 꼭 구축해야 겠다는 생각을 해오고 있었는데, 미루다 드디어 저만의 블로그를 구축하게 되었습니다. 웹 관련 연구와 일을 하고 정보 흐름에 관심이 많음에도 스스로 관리할 수 있는 웹 콘텐츠 생산 도구가 없다는 것에 마음의 부채를 가지고 있었는데, 이제서 조금이나마 그 부채를 내려놓을 수 있을 것 같네요. 저만의 웹, 홈페이지의 [&#8230;]</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/makingblog/">BLOG를 개설하게 된 동기</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></description>
				<content:encoded><![CDATA[<h3>본 블로그를 개설하기로 마음먹은 이유를 공유해봅니다.</h3>
<p>오래전부터 블로그를 꼭 구축해야 겠다는 생각을 해오고 있었는데, 미루다 드디어 저만의 블로그를 구축하게 되었습니다. 웹 관련 연구와 일을 하고 정보 흐름에 관심이 많음에도 스스로 관리할 수 있는 웹 콘텐츠 생산 도구가 없다는 것에 마음의 부채를 가지고 있었는데, 이제서 조금이나마 그 부채를 내려놓을 수 있을 것 같네요.</p>
<h2>저만의 웹, 홈페이지의 역사</h2>
<p>생각해보면, 처음 인터넷을 접하면서 가장 먼저 제가 한 일 중 하나는 홈페이지를 만드는 것이었습니다. 첫 홈페이지 구축은 2000년도 방학을 맞이하였을 때 인데요. 그때도 인터넷 시대에 홈페이지 하나쯤은 있어야 되잖아? 하는 얕은 이유로 열심히 만들었었는데요. 당시 HTML 보다도 포토샵을 배워가며 전체 디자인을 하는데 더 신경을 썼던것이 기억나네요. 게시판은 제로보드로 했었구요. 포토샵으로 전체 화면을 그린 후, 각 버튼이나 항목 등 주요 이미지를 직사각형으로 서걱서걱 잘라서 다시 HTML로 붙이는 과정에서 픽셀이 어긋나 이를 맞추는 것이 힘들었던 기억이 새록 새록 납니다.</p>
<p>첫 홈페이지를 개설한 후 1년 정도 글을 열심히 올려도 공유할 만한 채널이 마땅치 않았었고 특별한 컨텐츠를 만들지도 않았기에 몇몇 지인들만 가끔 와서 이야기 하는 곳이었는데 지금은 그때보다 콘텐츠 유통이 훨씬 쉬워진 것 같습니다.  당시 글을 다시 보게 되면 굉장히 창피할 것 같은데, 다행인지 찾을 길이 없네요. <img src="https://s.w.org/images/core/emoji/11/72x72/1f61b.png" alt="😛" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>홈페이지 관리의 의욕을 잃고 몇 번 업데이트를 시도하다 인식도 못한 채 호스팅 이 끈겼고, 이후 싸이월드를 주력으로 썼던 것 같습니다. 호기심에 네이버 블로그도 조금 끄적여 보고 SK Comms.에서 C2 Project 로 열심히 만들었던 홈2 도 써보고 설치형 블로그 붐이 시작되던 시기엔 태터툴즈도 만들어 보았지만 2007년 경 이후엔 아무것도 안썼으니 새롭게 저만의 블로그를 개설해 본 것이 근 7년 만인 것 같습니다. 자, 그럼 본론으로 들어가서.</p>
<h2>왜 블로그를 개설하였는가?</h2>
<p>공식적인 블로그 및 저의 소개는 <a href="http://shalomeir.com/about" title="about - shalomeir's blog">블로그 About page </a> 를 통해 정리하여 보았습니다.</p>
<p>블로그를 개설하면서 크게 2가지 활동을 하게 되는데 그 첫번째는 &#8216;글쓰기&#8217; 이고 두번째는 &#8216;사이트 구축, 운영&#8217; 으로 볼 수 있을 것 같습니다.</p>
<p><strong>그래서 블로그 개설한 이유 중 한가지는 &#8220;왜 글을 쓰는가?&#8221; 와 같은 조금 더 원론적인 이야기로 적어야 될 것 같습니다.</strong></p>
<h3>1. 좋은 글을 쓸 수 있게 되길 바래서.</h3>
<p>동물농장으로 유명한 조지오웰도  <a href="http://book.daum.net/detail/book.do?bookid=KOR9788984314238">&#8220;나는 왜 쓰는가?&#8221;</a> 에 대해 고민했었고 책으로 까지 나와 있는 것을 보면 왜 글을 쓰는지 명확하게 정의하는 것도 참 어려운 일이 아닌가 싶습니다. 조지 오웰 께선 어떤 이유로 글을 쓰셨을까 궁금해 보니 첫번째가 똑똑해 보이고 싶어서 라더군요.  ^^; 저도 그러한 이유가 있을 수 있겠지만 지금 이 포스팅과 같이 부족한 수준의 글로 똑똑해 보이기는 틀렸으니 똑똑해 보이고 싶으면 당장은 글을 안쓰는 게 더 나을 듯 싶습니다. 하지만 앞으로는 좋은 글을 쓸 수 있으려면 계속 글을 써야 할 것 같다는 생각을 하고 있습니다.</p>
<p>그래서 조지오웰의 표현처럼 말하면 <strong>&#8220;앞으로 똑똑해 보이는 글을 쓰고 싶어서&#8221;</strong> 글을 쓰고 있습니다. 지금은 좋은 글을 쓸 수준이 못되어도 꾸준히 이런 저런 글을 쓰다보면 더 나아질 테니까요. 또한 어떤 글이 웹 상에서 좋은 글로 받아들여 질 수 있을지도 배워나갈 수 있었으면 좋겠습니다.</p>
<p>학생 시절 자의보다는 타의로 열심히 과제 등을 통해 글을 써내려 왔었고 지금 Facebook에서는 긴 글을 쓰게 되진 않지만 홈페이지나 싸이월드를 사용했을 때는 하나의 주제로 글을 작성하던 적이 있었는데 최근에 와서는 점점 글 작성을 할 기회가 없었습니다. 직장을 들어가기 위해 공들여 자기소개서를 작성했었던 것을 마지막으로 정보형태가 아닌 저만의 생각을 글을 옮겨 본지가 정말 오래되었는데요. 그동안 작문실력이 얼마나 떨어졌는지 겨우 본 포스팅 하나를 적으면서도 절절하게 느껴집니다. (역시 블로그 개설하기 잘했어요)</p>
<p>초기 블로그 포스팅을 보시는 분들께서는 부족하더라도 댓글을 통해 피드백을 남겨 주시면 큰 도움이 될 것 같습니다. 문득 앞으로 다른 블로그도 보면서 댓글을 많이 남겨야 겠다는 생각이 드네요. ^^;</p>
<figure style="width: 240px" class="wp-caption aligncenter"><img class="" src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/disqus_wallimages.jpeg?resize=240%2C210&#038;ssl=1" alt="" width="240" height="210" data-recalc-dims="1" /><figcaption class="wp-caption-text">본 블로그는 DISQUS 댓글 플러그인을 적용했습니다. 댓글도 참 여러가지 고려할 요소가 너무 많지요.</figcaption></figure>
<p>&nbsp;</p>
<h3>2. 블로그의 성격의 변화 (컨텐츠 전달 -&gt; 컨텐츠 축적)</h3>
<p>홈페이지, 그리고 현재에 와서는 BLOG 형태로 운영되는 개인 웹 사이트는 그동안 인터넷이 정보의 바다로 그 역할을 하는데 있어서 매우 중요한 역할을 해오고 있는데요. 특히 처음 WWW 이 Hyperlink 형태로 시작된 것을 상기해 보면 정보를 담은 하나의 web page 는 그 하나의 페이지로서 충분히 그 역할을 다 할 수 있었기 때문에 지금의 인터넷에 이른 것이 아닌가 싶습니다. 정보는 LINK 라는 고유의 ID를 가지고 있고 과거에는 주로 Hyperlink 나 검색서비스를 통해서 전파되었다면 이제는 Social 서비스를 통해 사용자가 직접적으로 그 공유 과정에 참여하고 있다는 점에서 과거보다 Web Page 의 단일 정보로서 가치가 더욱 강조되고 있는 것 같습니다. 그래서 점차 정보의 원자(Atom)화를 이야기하게 되고 있구요. 과거 인터넷 상의 많은 정보들이 &#8216;지식in&#8217;, &#8216;카페&#8217; 플랫폼 위에서 생산된 것들이 많았지만 지금은 어떤 플랫폼으로 생산된 것인지 보다 그 정보 자체로서 훌륭하다면 충분히 전파될 수 있는 환경이 되었기 때문에 블로그는 이제 컨텐츠 전달 보다는 컨텐츠를 잘 축적하고 원자화된 컨텐츠를 잘 표현할 수 있으면 충분하다고 생각됩니다.</p>
<blockquote><p>
  컨텐츠를 잘 표현하는 웹페이지만 있다면 공유하는데 있어 충분합니다.
</p></blockquote>
<p>그래서 제가 생각할 때 본연의 블로그 역할인 개별 정보를 잘 표현하는 것, 그러한 측면에 집중한 서비스로 최근 주목하게 된 것은 <strong><a href="http://medium.com" title="medium">Medium</a></strong> 입니다.아마 Medium User 시라면 눈치를 채셨을것 같은데, 본 블로그의 테마도 최대한 Medium 의 특성을 살리는 디자인으로 하려고 유사한 테마를 골라 흉내를 내보았구요. Medium은 Blogger 를 만들어 구글에 인수시켰고 이후 트위터를 공동창업했던 에반 윌리암스가 만든 블로깅 플랫폼 서비스입니다. 에반 윌리암스의 Medium Post <a href="https://medium.com/about/welcome-to-medium-9e53ca408c48">&#8220;Welcome to Medium&#8221;</a>를 통해 Medium이 어떠한 지향점을 가진 서비스인지 확인 할 수 있는데요, Medium post 자체를 통해서도 전달하고자 하는 &#8220;메세지&#8221; 만을 보여주는 군더더기 없는 디자인이 Medium의 지향점이 잘 느껴집니다. 현혹하는 수많은 배너와 Link 연계 정보를 배제하고 오로지 컨텐츠를 잘 표현하여 보는 이로 하여금 내용에 최대한 집중할 수 있는 형태의 디자인이어서 글을 정말 읽고 싶게 만드는 것 같습니다.</p>
<p>또한 Medium의 진짜 매력은 무엇보다 글을 읽는데서 더 나아가 글을 쓰고 싶게 만든 다는 점 입니다. 에반 윌리암스가 Medium 서비스를 만든 동기가 트위터에서 손을 떼면서 블로깅을 시작 하려다 기존의 블로그 컨텐츠 생산도구에 대한 불편을 느끼게 된 것이 가장 큰 원인인 만큼 Medium의 글 작성 모드는 굉장히 글 작성에 집중할 수 있게 잘 만들어져 있습니다.</p>
<figure style="width: 900px" class="wp-caption alignnone"><img class="" src="https://i2.wp.com/s3-ap-northeast-1.amazonaws.com/wpstoragepublicshare/medium_writing.png?resize=900%2C556&#038;ssl=1" alt="" width="900" height="556" data-recalc-dims="1" /><figcaption class="wp-caption-text">Medium 글쓰기 화면</figcaption></figure>
<p>처음 Medium New Post 를 클릭하면 보게 되는 황량한 흰 바탕가 커서만이 보이는 글 작성 모드를 보면, 다른 것보다 무슨 말을 써야 할까, 오직 그것만을 고민하게 만들더군요. 좋은 글을 쓰는데 최대한 집중할 수 있는 형태이면서도 실제 블로깅하는데 꼭 필요한 요소들은 WISIWIG 형태로 잘 녹아들어가 있습니다. 게다가 작성 도중에도 함께 작성할 사람을 초대해서 Google Drive 문서 작성 도구 처럼 협업할 수 있도록 되어 있습니다.  왠지 모르게 좋은 글을 작성해서 좋은 사람들을 참여시켜 개선시켜 나가고 싶은 욕구가 절로 나는 느낌을 받았습니다.</p>
<p>현재 Medium은 컨텐츠 생산 뿐 아니라 유통 측면에서도 많은 기능을 제공 하고 있고 실제 메타 블로그 로서의 가능성도 생겨나고 있습니다. 하지만 전 Medium이 개인 Writer 를 계속적으로 독려하고 있는 측면과 개인 블로거 들이 점차 Medium을 플랫폼으로 활용하는 데 더 주목하고 싶습니다.</p>
<p>블로그를 만든 이유를 이야기 하다 Medium 이야기가 좀 길어졌는데요, 그만큼 <strong>Medium으로 글을 작성해보는 것만으로도 블로그를 만드는 이유를 대부분 충족시킨다고 생각됩니다.</strong> 어떤 도구를 쓰던 개별 페이지에 좋은 정보를 잘 표현할 수 있게 잘 담아두는 것이 목적이기 때문에 Medium이 아니더라도 Evernote 의 웹 공유를 통해 글을 써도 되고, static html 블로깅 소스로 github에 올려도 되고 그냥 Facebook note 를 써도 무관할 것 같습니다. <strong>결국 좋은 컨텐츠인지가 제일 중요하겠죠.</strong></p>
<h3>3. 웹 서비스를 직접 운영해보는 경험</h3>
<p>블로그를 개설하게 된 개인적인 또 다른 이유 때문에 번거롭더라도 WordPress 를 이용하여 직접 구축 및 운영을 하게 되었습니다. 앞으로 제가 웹서비스를 만들고 운영하기 위해 준비하고 있고 다른 서비스도 아닌 컨텐츠 유통 방법에 대해 고민하고 있기 때문에 가장 대중적인 방식으로 컨텐츠를 생산해 볼 필요성을 느꼈습니다.</p>
<blockquote><p>
  저는 특히 웹에서 컨텐츠 유통 방식에 대해 주목하고 있습니다.
</p></blockquote>
<p>현재 가장 많은 점유율을 자랑하는 워드프레스 플랫폼을 통해 블로그를 직접 구축해보고 운영해 보는 것이 저의 경우 꼭 필요한 과정이고, 그래서 뒤늦게 나마 블로그를 구축하게 되었습니다. 구축 과정에서 배울 수 있는 요소도 많고 이것이 실제 웹 서비스를 구축하는 데 있어 필요한 경험들이니까요. 또한 운영 과정에서도 구글 어날리틱스/애드센스 등을 적용해보면서 일반적인 웹 환경을 이해하는 데 도움이 되기도 합니다. 블로깅 본연의 목적인 좋은 컨텐츠의 생산 보다 어쩌면 제게는 이러한 부수적인 이유가 크게 작용했기에 비록 제가 특별히 공유할만한 컨텐츠가 없음에도 본 블로그를 개설하였습니다.</p>
<p>&nbsp;</p>
<p>본 블로그를 개설하면서 배운 요소들은  <a href="http://www.shalomeir.com/2014/11/blogcomponent/">&#8220;<strong>별도의 포스트</strong>&#8220;</a> 에 작성하였습니다.</p>
<h4>예전에 블로그는 명확한 목적과 컨셉을 필수로 보았습니다. 하지만 지금은 개별 페이지로서 정보를 잘 표현하는 역할에 충실하기만 하다면 꼭 블로그의 포스팅들이 공통된 컨셉으로 유지될 필요성은 줄어들었습니다. 그래서 본 블로그는 큰 주제를 가지고 운영되기 보다 그때 그때 다양한 주제로 제가 하고 싶은 이야기를 하나의 포스팅으로 작성해 나가려고 합니다.</h4>
<p>그렇지만 RSS 로 구독해서 제 블로그를 계속 지켜봐 주시는 분이 있다면 정말 좋을 것 같습니다. ^^</p>
<p>The post <a rel="nofollow" href="http://www.shalomeir.com/2014/11/makingblog/">BLOG를 개설하게 된 동기</a> appeared first on <a rel="nofollow" href="http://www.shalomeir.com">shalomeir&#039;s blog</a>.</p>
]]></content:encoded>
			<wfw:commentRss>http://www.shalomeir.com/2014/11/makingblog/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
	<post-id xmlns="com-wordpress:feed-additions:1">115</post-id>	</item>
	</channel>
</rss>
