<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wonderland</title>
  
  <subtitle>wonderland</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://wonderer80.github.io/"/>
  <updated>2018-04-29T05:42:24.242Z</updated>
  <id>https://wonderer80.github.io/</id>
  
  <author>
    <name>wonderer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>slack과 오픈커뮤니케이션</title>
    <link href="https://wonderer80.github.io/2018/04/29/slack%EA%B3%BC-%EC%98%A4%ED%94%88%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98/"/>
    <id>https://wonderer80.github.io/2018/04/29/slack과-오픈커뮤니케이션/</id>
    <published>2018-04-29T02:32:44.000Z</published>
    <updated>2018-04-29T05:42:24.242Z</updated>
    
    <content type="html"><![CDATA[<p>필자의 아이들이 다니고 있는 대안학교에서는 학부모간에 대화를 나눠야하는 일이 많다.</p><p>주로 텔레그램으로 대화를 나누고 있는데 회사에서 슬랙을 경험해 본 필자 입장에서는 텔레방이 너무 불편하고 복잡하게 느껴졌다. 그래서 종종 학부모나 선생님들에게 슬랙을 소개하고는 했는데, 막상 장점을 말하려니까 설명이 어려웠다.</p><p>다행히 관심을 가진 분들이 계셔서 슬랙을 학교 월례회의 때 소개할 수 있는 기회가 생기게 되었고, 나도 다시 한번 슬랙의 장점에 대해 생각해보는 기회가 되었다.<br><img src="/images/slack_overview.png" alt="Slack Overview" title="slack"></p><h2 id="오픈-커뮤니케이션-도구로서의-슬랙"><a href="#오픈-커뮤니케이션-도구로서의-슬랙" class="headerlink" title="오픈 커뮤니케이션 도구로서의 슬랙"></a>오픈 커뮤니케이션 도구로서의 슬랙</h2><p>오늘은 슬랙의 장점 중 필자가 가장 중요하다고 생각하는 오픈 커뮤니케이션 도구로서의 슬랙을 이야기해보고자 한다.</p><p>슬랙은 여러 편리한 기능이 있지만 개인적으로 가장 인상적인 부분은 기본적으로 생성된 채널(단체대화방)이 공개라는 것이다. 현재 생성되어 있는 모든 채널 리스트를 볼 수 있을 뿐만 아니라, 채널에 올라온 과거의 글들까지 모두 볼 수 있었다. 누군가 초대하지 않아도 본인이 원하면 채널에 들어와서 대화에 참여할 수도 있다.</p><p>한번은 필자가 속한 서버팀 채널에 사람들과 워크샵 논의를 하며 워크샵 장소를 공유한 적이 있다. 그런데 항상 서버팀 채널에 상주하며 대화를 즐기던 데브옵스 리더가 공유한 내용에 이모지를 붙이더니 잠시 후 데브옵스도 워크샵을 가겠다며 같은 날짜에 근처 숙소에 워크샵 장소를 잡았다고 공표했다.</p><p>그러자 클라이언트팀, 기획팀, 애자일코치팀까지 모두 같은 날, 같은 펜션으로 워크샵을 잡는 사태가 벌어졌다. 덕분에 워크샵 장소에 가서는 팀과 상관없이 모두가 함께 즐거운 시간을 보낼 수 있었다. 이러한 해프닝은 슬랙의 정보 개방성의 특징이 보여준 일화라고 볼 수 있다.<br><img src="/images/workshop-together.jpg" alt="workshop together" title="we are the world"></p><h2 id="다른-사람에게-딴지를-걸-수-있는가"><a href="#다른-사람에게-딴지를-걸-수-있는가" class="headerlink" title="다른 사람에게 딴지를 걸 수 있는가?"></a>다른 사람에게 딴지를 걸 수 있는가?</h2><p>김창준님의 <a href="http://agile.egloos.com/5904102" target="_blank" rel="noopener">협업의 5가지 미신</a> 강연에서 인용한 Eduardo Salas 의 연구에 따르면, 팀의 효과성을 예측하는 중요한 변수로 Mutual performance monitoring 이라는게 있다고 한다. Mutual performance monitoring 이란 쉽게 말하자면 다른 사람이 일하는 것을 들여다보고 피드백(딴지)을 줄 수 있는가를 말한다.</p><p>슬랙은 이런 면에서 우리가 여러 채널에 관심을 갖고 의견을 표시하기 쉽도록 되어 있다고 볼 수 있다. 가볍게는 누군가의 대화에 이모지를 붙일 수도 있고 여러 사람들에게 의견을 묻거나 자신의 의견을 말할 수도 있다. 최근 IT기업에서는 사무실에 오픈 오피스를 도입하거나 confluence 같은 위키를 사용하는 기업이 많다. 이러한 모두가 협업을 위한 정보의 공유와 오픈 커뮤니케이션을 용이하게 해주는 도구라고 볼 수 있다.</p><h2 id="잘-이해하고-쓰는-것이-필요하다"><a href="#잘-이해하고-쓰는-것이-필요하다" class="headerlink" title="잘 이해하고 쓰는 것이 필요하다"></a>잘 이해하고 쓰는 것이 필요하다</h2><p>하지만 이런 도구를 다 사용하고 있음에도 협업이나 오픈 커뮤니케이션을 하고 있다는 느낌이 들지 않을 수 있다. 이런 경우 다음과 같은 분위기가 있지 않은가 살펴보자.</p><ul><li>채널에 초대받지 않은 사람들이 들어와서 구경하거나 의견을 내는 것이 불편하다</li><li>작성자 이외의 사람이 위키페이지에 와서 편집을 하거나 댓글을 다는 것이 불편하다</li><li>슬랙에 생성된 채널의 대부분은 주제중심이 아닌 조직구성을 반영한 채널이다</li><li>공개된 채널(혹은 위키페이지)이 별로 없고 비밀채널이 대부분이다</li></ul><p>아이방에 공부책상을 사다 놓는다고 아이가 공부를 열심히 하게 되는 것이 아니듯이 도구는 결국 도구일 뿐이다. 이러한 도구들의 장점과 철학을 잘 이해하지 않고 단지 도입하는 것만으로는 회사의 문화가 바뀌지는 않는다.</p><p>우리가 회사에 입사할 때에는 특정한 역할로 지원하고 입사하게 되지만, 한 사람이 가지고 있는 재능은 다양하다. 서로가 서로의 일에 관심을 갖고 의견을 나눌 수 있을 때 조직에서 협업이 일어나고 효율이 좋아진다. 이번 계기로 필자도 협업과 오픈 커뮤니케이션이라는 것에 다시 한번 생각해보는 계기가 되었다. 우리들이 속한 환경에서 즐겁고 활발한 커뮤니케이션이 많이 일어났으면 하는 바람이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;필자의 아이들이 다니고 있는 대안학교에서는 학부모간에 대화를 나눠야하는 일이 많다.&lt;/p&gt;
&lt;p&gt;주로 텔레그램으로 대화를 나누고 있는데 회사에서 슬랙을 경험해 본 필자 입장에서는 텔레방이 너무 불편하고 복잡하게 느껴졌다. 그래서 종종 학부모나 선
      
    
    </summary>
    
    
      <category term="IT생각" scheme="https://wonderer80.github.io/tags/IT%EC%83%9D%EA%B0%81/"/>
    
      <category term="개발문화" scheme="https://wonderer80.github.io/tags/%EA%B0%9C%EB%B0%9C%EB%AC%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>개발자 채용 어떻게 해야하나?</title>
    <link href="https://wonderer80.github.io/2018/04/12/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%B1%84%EC%9A%A9-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC%ED%95%98%EB%82%98/"/>
    <id>https://wonderer80.github.io/2018/04/12/개발자-채용-어떻게-해야하나/</id>
    <published>2018-04-12T08:25:58.000Z</published>
    <updated>2018-04-12T12:47:37.582Z</updated>
    
    <content type="html"><![CDATA[<p><u>‘개발자 채용 시 기술실력 검증 어떻게 해야 하나’</u> 라는 주제로 김창준님 강연에 다녀왔다.<br>좋은 기회를 마련해주신 김창준님께 먼저 감사드린다.</p><p>전체적인 요약은 다른 분들이 이미 잘 정리해주셨기에, 이 포스팅에서는 강연 내용을 듣고 채용에 대해 필자가 생각해왔던 부분을 정리해보고자 한다.</p><ul><li><a href="https://brunch.co.kr/@leehosung/47" target="_blank" rel="noopener">이호성님 브런치</a></li><li><a href="https://okky.kr/article/456499" target="_blank" rel="noopener">창천향로님의 칼럼</a></li></ul><h1 id="어떤-사람을-뽑을-것인가"><a href="#어떤-사람을-뽑을-것인가" class="headerlink" title="어떤 사람을 뽑을 것인가?"></a>어떤 사람을 뽑을 것인가?</h1><p>필자도 평소에 ‘어떤 사람을 뽑아야하는가’에 대한 고민이 많이 있었는데, 그 이전에 ‘왜 사람을 뽑는가?’ 와 관련이 있을 것 같다. 대부분의 회사가 개발자를 뽑는 이유는 ‘할일은 많은데 개발자가 부족해서’ 이다. 하지만 아이러니하게도 개발자를 뽑으면 그에 맞춰서 할일도 늘어나기 때문에 똑같은 상황이 반복된다.</p><p><img src="/images/infinity.jpg" alt="Infinity loop" title="개발자는 항상 부족함"></p><p>예전에 다니던 직장에서는 <u>‘사람이 부족해다고 뽑진 않겠다. 하지만 좋은 사람이면 무조건 뽑겠다’</u> 고 선언을 한적이 있었다. 지금 생각해보면 ‘좋은 사람에 대한 정의가 좀 더 명확했으면 어땠을까’ 하는 생각도 들지만 그 당시에는 꽤 마음에 와닿는 내용이었다.</p><p>어제 강연에서 <u>‘회사 내에서 좋은 평가를 받는 개발자들의 특징이나 습관을 추려서 채점표를 만들면 좋다’</u> 는 이야기가 있었는데 이런 방식을 통해서 회사에서 생각하는 좋은 사람의 정의가 가능할 것 같다. 그리고 추가적으로 드는 생각은 새로 채용하는 사람은 조직의 부족한 부분을 채워줄 수 있는 사람이어야 한다는 점이다. 이런 부분이 없으면 그냥 무난하게 같이 일하기 좋은 사람을 뽑게 될 확률이 높다.</p><p>예를 들어 우리는 코드 품질이 너무 낮아서 이런 부분을 잘 관리하고 보완하고 싶다고 한다면 다른 부분에서는 약간 부족하더라도 리팩토링이나 테스트 코드에 장점이 있는 사람을 채용하겠다는 기준을 가지고 사람을 채용하는거다. 물론 채용만 해서 끝나는 일은 아니고 그 사람이 자신의 장점을 잘 발휘할 수록 환경을 조성해주는 것도 필요하겠다.</p><h1 id="어떻게-검증할-것인가"><a href="#어떻게-검증할-것인가" class="headerlink" title="어떻게 검증할 것인가?"></a>어떻게 검증할 것인가?</h1><h2 id="X로-테스트-하면-X를-잘하는-사람이-뽑힌다"><a href="#X로-테스트-하면-X를-잘하는-사람이-뽑힌다" class="headerlink" title="X로 테스트 하면 X를 잘하는 사람이 뽑힌다"></a>X로 테스트 하면 X를 잘하는 사람이 뽑힌다</h2><p>이전 직장에서 필자는 리더로서 기존 서비스의 레거시 코드에 대한 고민이 많이 있었다. 그래서 레거시 코드를 잘 해석하고 리팩토링도 할 수 있는 사람을 뽑고 싶었다. 창준님 강연에서 X로 테스트 하면 X를 잘하는 사람이 뽑힌다는 내용이 있었는데 지금 생각해보면 나름 그러한 부분이 반영된 테스트를 만들었던 것 같다.</p><h2 id="기술-인터뷰-방식"><a href="#기술-인터뷰-방식" class="headerlink" title="기술 인터뷰 방식"></a>기술 인터뷰 방식</h2><p>1) 과거에 사용되었던 어떤 기능을 가지고 있는 레거시 코드를 프린트 해서 보여준다.<br>2) 이 코드를 보고 3가지를 설명해달라고 했다</p><ul><li><strong> 이 코드가 어떤 기능을 하는 코드인지 간단하게 요약해달라 </strong></li><li><strong> 이 코드를 테스트 한다면 어떤 부분을 어떻게 테스트 할 것인가? </strong></li><li><strong> 이 코드를 개선한다면 어떤 부분을 어떻게 개선할 것인가? </strong></li></ul><h3 id="보완이-필요한-부분"><a href="#보완이-필요한-부분" class="headerlink" title="보완이 필요한 부분"></a>보완이 필요한 부분</h3><p>개인적으로 이 방식은 나름 노력대비 괜찮다고 생각했는데 어제 강연을 듣고 부족했다고 생각이 들은 부분은 다음과 같다.</p><p><strong> ​객관적이고 명시적인 채점 기준이 없었다 </strong></p><ul><li>사내의 개발자들을 대상으로 테스트해보고 채점표를 만들었으면 좋았을 것 같다.</li></ul><p><strong> 말로만 듣다보니 모호하게 느껴지는 부분이 많았다 </strong></p><ul><li>​실제로 테스트를 해보고 리팩토링을 할 수 있는 환경을 제공해주었으면 좋았을 것 같다. 단 시간은 더 필요로 하게 될 것 같다.</li></ul><p><strong> 스트레스를 많이 받을 수 있다 </strong></p><ul><li>​면접관 앞에서 짧은 시간안에 코드를 파악하고 설명해야했기 때문에 사람에 따라 압박감때문에 설명을 잘 못했을 수 있다. 좀 더 편안한 환경을 제공할 수 있으면 좋을 것 같다.</li></ul><h3 id="가급적-실제-상황에-가까운-환경을-제공하자"><a href="#가급적-실제-상황에-가까운-환경을-제공하자" class="headerlink" title="가급적 실제 상황에 가까운 환경을 제공하자"></a>가급적 실제 상황에 가까운 환경을 제공하자</h3><p>강연을 들으면서 개인적으로 한가지 슬펐던 것은 인터뷰를 할 때의 기법 중에 하나가 미래에 어떻게 할 것인지가 아니라 과거에 어떻게 했는가를 물어보라고 하는 부분이었는데, 필자는 사실 “과거에 힘든 프로젝트는 뭐였나요?” 라던지 “최근에 프로젝트 한 것 중에 가장 도전적인건 어떤거였나요?” 라는 질문에 대답을 잘 못하는 경우가 많다.</p><p>필자는 과거의 사건들을 추상적인 개념으로 기억하는 경우가 많아서 디테일하게 무엇을 했는지 기억이 나지 않을 때가 많다. 또는 면접장소에서 압박감으로 인해 내가 원격으로 진행한 코딩 테스트에 대해서 왜 이렇게 했는지에 대해서 설명을 못한적도 있다. (집에 가는 길에 화장실에서 기억났다…)</p><p><a href="http://einstein.pslc.cs.cmu.edu/research/wiki/index.php/Cognitive_task_analysis" target="_blank" rel="noopener">CTA</a>같은 기법을 통해서 나의 전문성을 상대가 끌어내주면 좋겠지만 그런 면접관이 얼마나 있겠나 싶다. 그래서인지 가끔 필자는 인터뷰가 자신이 없을 때가 있다. 나 같은 사람은 질문보다는 실제 과제를 주고 하도록 하는게 더 효과적인 것 같다.</p><h1 id="어떻게-좋은-인재를-유치할-것인가"><a href="#어떻게-좋은-인재를-유치할-것인가" class="headerlink" title="어떻게 좋은 인재를 유치할 것인가?"></a>어떻게 좋은 인재를 유치할 것인가?</h1><blockquote><p>작거나 유명하지 않은 회사는 저런 고민할 필요가 없는 것 같아요.</p><p>제대로 된 지원자가 없으니깐요.</p></blockquote><p>창천향로님의 <a href="https://okky.kr/article/456499" target="_blank" rel="noopener">포스팅</a>에 붙은 어느 댓글의 내용이다. 필자도 비슷한 이유로 고민한 경험이 있다. 사실 이 부분은 회사의 규모와 상관없이 인재 영입에 대해 얼마나 중요성을 인식하고 노력하는가에 가까운 것 같다. 아무나 대충 뽑아도 상관없다고 생각하는 회사라면 빨리 그 회사를 나오는 것이 현명한 판단이지 않을까 싶다.</p><p>반대로 직장을 구하는 입장에서 어떤 것을 보고 회사를 지원하는가를 생각해보면 조금은 힌트가 있지 않을까 싶다. <a href="/2018/03/29/기술-기반-회사란-무엇일까/" title="기술 기반 회사란 무엇일까?">기술 기반 회사란 무엇일까?</a>에서 이야기 한 것처럼 좋은 개발자라면 자신이 보다 성장할 수 있는 환경을 찾으려고 노력할 것이다. 필자가 인터뷰할 때 가장 많이 들은 이직 사유가 <u>‘성장을 위해서’</u> 이다.</p><p>최근에 직장을 구하는 과정에서 가장 먼저 살핀 것중에 하나는 ‘회사에서 운영하는 개발 블로그가 있는가’였다. Job Description 도 중요한 부분이다. 그 회사에서 무엇을 중요하는지, 어떤 기술을 쓰는지, 가면 내가 어떤 것을 배울 수 있고 성장할 수 있을지에 대해 알 수 있다. 종종 외부에 공개된 대표 인터뷰나 기사 등을 살피기도 한다. 최종적으로는 인터뷰에 가서 그 회사에 대한 여러가지를 물어보고 이야기를 나누면서 회사를 파악하게 되었다. 보여주기 식의 홍보는 당연히 안되겠지만 회사 입장에서는 회사의 장점을 적극적으로 알리고 개발자들이 매력을 느낄 수 있도록 노력을 기울여야한다.</p><p>혹자는 회사에서의 최고의 복지는 좋은 동료와 함께 일하는 것이라고 한다. 반대로 직장을 옮기게 되는 가장 큰 이유 중에 하나도 사람 때문이다. 이게 우리가 인사권을 가지고 있지 않더라도 채용에 관심을 가져야만 하는 이유이다.</p><p>앞으로 일하게 될 직장에서도 이러한 부분에 대해 동료들과 함께 고민하고 발전시킬 수 있는 계기가 되었으면 좋겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;u&gt;‘개발자 채용 시 기술실력 검증 어떻게 해야 하나’&lt;/u&gt; 라는 주제로 김창준님 강연에 다녀왔다.&lt;br&gt;좋은 기회를 마련해주신 김창준님께 먼저 감사드린다.&lt;/p&gt;
&lt;p&gt;전체적인 요약은 다른 분들이 이미 잘 정리해주셨기에, 이 포스팅에서는 강
      
    
    </summary>
    
    
      <category term="IT생각" scheme="https://wonderer80.github.io/tags/IT%EC%83%9D%EA%B0%81/"/>
    
  </entry>
  
  <entry>
    <title>티비를 보며 코딩하면 안되는 이유</title>
    <link href="https://wonderer80.github.io/2018/04/10/%ED%8B%B0%EB%B9%84%EB%A5%BC-%EB%B3%B4%EB%A9%B0-%EC%BD%94%EB%94%A9%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/"/>
    <id>https://wonderer80.github.io/2018/04/10/티비를-보며-코딩하면-안되는-이유/</id>
    <published>2018-04-10T05:28:12.000Z</published>
    <updated>2018-04-10T07:00:20.147Z</updated>
    
    <content type="html"><![CDATA[<p>게임업계나 스타트업에서 일을 하다보면 상당히 자유로운 분위기에서 일을 하는 모습을 볼 수 있다. 편하고 자유로운 환경은 스트레스를 줄여주고 자유로운 의사소통을 나눌 수 있으며 자율적인 분위기를 조성하는데 도움이 된다. 그런 가운데에는 음악을 들으며 코딩을 하거나 티비나 영화 등을 관람하며 작업하는 경우도 많이 보아왔다. 오늘은 티비를 보며 코딩을 하는 것에 대해 생각했던 개인적 견해를 밝혀보고자 한다.</p><p>필자의 경우는 주변소음을 차단하기 위한 정도로 가사가 없는 음악을 듣거나 아무 것도 듣지않는 경우가 많은데 그게 가장 개발에 집중하는 효율적이다고 생각하기 때문이다. 우리가 전문가로서 성장하기 위해, 그리고 좋은 품질의 결과물을 만들기 위해 새로운 기술을 배우거나 좋은 도구를 찾는 것은 매우 당연하다고 생각하는데, 마찬가지로 개발에 효율적인 환경을 갖추는 것도 중요하다고 생각한다. 그런 면에서 개발을 하면서 티비나 만화를 보는 행위는 집중에 상당히 방해가 되는 행위라고 생각하는데, 나는 이런 것이 프로답지 못한 행위라고 생각한다.</p><p>그 사람의 전문성을 평가할 때 태도나 외형만을 보고 평가하는 것은 분명 위험하다고 생각한다. 출퇴근시간이나 복장, 헤어스타일 같은 것들이 그런 것이다. 그럼에도 불구하고 개발을 하면서 영상을 소비하는 행위를 부정적으로 생각하는 이유는 다음과 같다.</p><h2 id="고도의-사고와-집중력을-요하는-작업을-하는데-있어서-티비시청은-품질의-저하를-가져올-가능성이-높다"><a href="#고도의-사고와-집중력을-요하는-작업을-하는데-있어서-티비시청은-품질의-저하를-가져올-가능성이-높다" class="headerlink" title="고도의 사고와 집중력을 요하는 작업을 하는데 있어서 티비시청은 품질의 저하를 가져올 가능성이 높다"></a>고도의 사고와 집중력을 요하는 작업을 하는데 있어서 티비시청은 품질의 저하를 가져올 가능성이 높다</h2><p>우리 나라를 포함하여 여러 나라들에선 <a href="http://shr.gs/YuHWstD" target="_blank" rel="noopener">운전 중 영상 시청을 하게 되면 법적인 책임</a>을 지어야 한다. 그 이유는 운전 중 영상 시청을 하게 되면 전방 주시율이 떨어지는데 이게 사고로 이어질 확률이 굉장히 높다고 한다. 근데 전방 주시율이 왜 떨어질까? 당연히 내용을 듣다보면 영상이 궁금해지기 때문이고 그렇게 잠시 눈을 돌리면 사고로 이어지는 것으로 생각된다. 필자는 평소에도 여러 일을 동시에 처리하는 것을 잘 못하는데, 그렇기 때문에 티비 뿐만 아니라 가사가 있는 가요를 들었을 때 집중력이 현저하게 떨어지는 것을 감지하게 된다.</p><p><a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=394762" target="_blank" rel="noopener">피플웨어</a>에서 소개된 내용에 따르면 일에 정신없이 집중해서 몰입상태에 빠지는 것을 심리학자들 사이에서는 <a href="https://en.wikipedia.org/wiki/Flow_(psychology" target="_blank" rel="noopener">플로(flow)</a>라고 부른다고 한다. 엔지니어링이나 설계나 개발, 저작과 같은 업무는 고도의 집중력을 요하기 때문에 플로 상태에 있어야 일이 잘된다는 것은 굳이 책에서 설명하지 않아도 다들 느끼는 부분이라고 생각한다. 플로 상태가 되기까지는 소음이나 각종 방해 요인이 없는 상태에서 집중하기 까지의 시간을 필요로 하기 때문에 플로 상태를 오래 유지하는 것이 중요한데, 티비시청을 하면서 플로우 상태에 들어가거나 유지하는 것을 매우 어려운 일이다.</p><h2 id="일부러-자신의-한계를-시험할-필요는-없다"><a href="#일부러-자신의-한계를-시험할-필요는-없다" class="headerlink" title="일부러 자신의 한계를 시험할 필요는 없다"></a>일부러 자신의 한계를 시험할 필요는 없다</h2><p>당신이 술을 취한 상태라면 조금이라도 코딩을 하는게 좋을까? 아니면 자는게 좋을까? 정답은 잠을 자는거다.</p><p>제 정신이 아닌 상태에서 개발을 하면 잘못된 설계를 하거나 버그를 유발할 가능성이 높다. 일반적으로 개발을 하는데 있어서 비용이 가장 많이 드는 건 개발 후에 설계를 변경하거나 버그를 잡는 것이다. 굳이 여러분의 집중력을 시험해 볼 필요성이 있을까? 술자리에 가서 금주하거나 부페가서 다이어트를 시도할 필요는 없다. 직장에서 당신이 동영상을 감상할꺼면 차라리 동영상을 보면서 휴식해라. 업무에도 적절한 릴렉스와 휴식은 필요하다.</p><h2 id="프로란-무엇일까"><a href="#프로란-무엇일까" class="headerlink" title="프로란 무엇일까?"></a>프로란 무엇일까?</h2><iframe src="https://www.youtube.com/embed/izVDrQ7505o?start=153" width="560" height="315" frameborder="0" allowfullscreen></iframe><blockquote><p>“주방에서 쉽게만 하려고 하다보면 당신의 실수들을 고객들이 모를거라 생각할 때가 있습니다. 그 때가 그만둬야 할 땝니다. 누구나 버거를 뒤집거나 샐러드 소스를 뿌릴 수 있거든요. 전 19살 때 축구를 하다 쫓겨나야 했습니다. 두번째 기회를 주신게 신의 뜻이었죠. 지금도 제 식당이 영국에서 가장 오래 미슐랭 3성을 받고있는 식당이지만 전 절대 자만하지 않으려 합니다. 요리사는 마지막으로 만든 요리의 맛으로 점수를 받는겁니다.”<br><em>&lt;고든 렘지&gt;</em></p></blockquote><p>레스토랑 주방에서 티비를 보면서 요리하는 유명 쉐프가 상상이 되는가? 프로란 항상 자신이 낼 수 있는 최고의 기량을 낼 수 있도록 노력해야한다. 나는 단순히 월급을 받기 위해 직장을 다니는 직장인이 되고 싶지 않다. 항상 배우고 성장하며 가치를 만들어내는 전문가가 되고 싶으며 그러한 동료가 되고 싶다.</p><p>여러분은 어떠한가?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;게임업계나 스타트업에서 일을 하다보면 상당히 자유로운 분위기에서 일을 하는 모습을 볼 수 있다. 편하고 자유로운 환경은 스트레스를 줄여주고 자유로운 의사소통을 나눌 수 있으며 자율적인 분위기를 조성하는데 도움이 된다. 그런 가운데에는 음악을 들으
      
    
    </summary>
    
    
      <category term="IT생각" scheme="https://wonderer80.github.io/tags/IT%EC%83%9D%EA%B0%81/"/>
    
  </entry>
  
  <entry>
    <title>초보를 위한 테스트 코드 없이 TDD 배우기</title>
    <link href="https://wonderer80.github.io/2018/04/04/%EC%B4%88%EB%B3%B4%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%97%86%EC%9D%B4-TDD-%EB%B0%B0%EC%9A%B0%EA%B8%B0/"/>
    <id>https://wonderer80.github.io/2018/04/04/초보를-위한-테스트-코드-없이-TDD-배우기/</id>
    <published>2018-04-04T07:31:35.000Z</published>
    <updated>2018-04-04T17:22:35.400Z</updated>
    
    <content type="html"><![CDATA[<p>이전 포스팅을 통해서 TDD를 배우기 왜 어려운지에 대한 이야기를 하였다. 그럼 TDD를 위한 기반지식이 없는 상태에서 TDD를 배우려면 어떻게 해야할까? 당연하겠지만 정석은 차근차근 필요한 지식들을 공부해나가는 것이다. 테스트 하는 법, 테스트 코드를 작성하는 법, 리팩토링을 하나씩 수련해나가는 것이다. 하지만 하나하나가 만만치가 않다. 나는 언제야 TDD를 해볼 수 있는 것일까?</p><p>그래서 이번 포스팅에서는 정석적인 학습법이 아닌 내가 시도한 사파의 수련법을 공유해보고자 한다. 이로인한 주화입마는 책임지지 않으니 판단은 각자에게 맡기도록 하겠다.</p><p>내가 처음 TDD를 접했을 때 당시에는 테스트 코드가 뭔지에 대한 개념이 전혀 없는 상태였다. 리팩토링에 대해서는 책을 조금 보고 조금씩 실무에 적용해보는 단계였다. 사실 테스트 코드가 뭔지도 모르는 상황에서 TDDBE를 봤을 때 나는 그게 정확하게 무엇을 하는지 이해하지는 못했지만, 딱 한가지 감탄한 접근 방법이 있었다.</p><p>일반적으로 개발을 할 때는 객체를 설계하고 그 기능들을 완성한 다음에 그 기능을 활용하여 개발을 해왔다. 완성된 하나의 서비스나 기능을 만들 때 그것을 위한 세부 기능 파트를 만들고 마지막에 그것들을 조합해서 완성하는 것이다. 그런데 TDD 에서는 그런 생각을 완전히 뒤집는다. 처음부터 완성되었다고 가정하고 개발을 하기 시작하는 것이었다. 메서드를 호출하는데 메서드 정의조차 하지 않고 메서드 호출을 한다. 그렇게 하면 당연히 에러가 나는데 거기에서부터 점진적인 개발이 시작된다.</p><p>이런 접근 방법에 감탄한 이유가 몇가지 있었는데 다음과 같다.</p><h1 id="TDD-초보자가-얻은-작은-통찰"><a href="#TDD-초보자가-얻은-작은-통찰" class="headerlink" title="TDD 초보자가 얻은 작은 통찰"></a>TDD 초보자가 얻은 작은 통찰</h1><h2 id="인터페이스-설계가-명확하고-간결하게-된다"><a href="#인터페이스-설계가-명확하고-간결하게-된다" class="headerlink" title="인터페이스 설계가 명확하고 간결하게 된다"></a>인터페이스 설계가 명확하고 간결하게 된다</h2><p>파트 단위로 먼저 개발을 하다보면 지나치게 범용적인 설계를 하거나 실제 호출되는 상황을 고려하지 못한 설계가 되는 경우가 많다. 그로인해 결과적으로 지나치게 많은 시간을 소비하거나 과도한 기능 설계나 잘못된 설계로 변경이 필요하게 되어 재작업하는 경우가 잦다.</p><h2 id="점진적인-개발을-하기-편하다"><a href="#점진적인-개발을-하기-편하다" class="headerlink" title="점진적인 개발을 하기 편하다"></a>점진적인 개발을 하기 편하다</h2><p>기존의 방식을 완성된 기능을 만들기 위해 그것을 위한 세부 기능들이 완성이 되기전까지 확인할 수 있는 것들이 매우 제한적이다. 하지만 사용하는 곳부터 구현하다보면 매우 빠른 지점부터 내가 확인할 수 있는 것들이 생긴다.</p><h1 id="테스트-코드-없이-TDD-활용하기"><a href="#테스트-코드-없이-TDD-활용하기" class="headerlink" title="테스트 코드 없이 TDD 활용하기"></a>테스트 코드 없이 TDD 활용하기</h1><p>그럼 이제 본론으로 들어가서 기반지식이 별로 없는 상황에서의 TDD를 활용하는 방법에 대해서 이야기해보자. 이야기했듯이 나는 TDD를 처음 접했을 때 테스트 코드가 뭔지도 몰랐다. 테스트 코드가 뭔지도 모르고 만들줄도 모르는데 TDD가 역설적으로 들릴 수 도 있다. 하지만 테스트 코드를 만들 줄 모른다고 해서 테스트를 못하는 것은 아니다. 테스트에 대한 이야기도 나중에 좀 더 자세히 다를 수도 있겠지만 우선 그 부분은 생략하고 필자가 테스트 코드 없이 TDD를 활용한 방법을 소개해보겠다.</p><p><img src="/images/UML_Sequence_diagram.jpg" alt="Sequence diagram" title="어떤 방식으로 개발하느냐에 따라 구현 순서가 다르다"></p><h2 id="가장-끝단에서부터-개발하기"><a href="#가장-끝단에서부터-개발하기" class="headerlink" title="가장 끝단에서부터 개발하기"></a>가장 끝단에서부터 개발하기</h2><p>위에서도 이야기 했지만 TDD의 특징 중 하나가 기능구현 이전 단계 부터 사용하는 부분을 개발하는 것이다. 본래 TDD에서는 테스트 코드가 수행되는 부분에서 그 로직을 호출하게 되지만 나는 그냥 메인 코드에서 그렇게 작업을 하기 시작했다. 이런 접근법은 매우 간단하게 개발을 시작하게 만들어주었고 나에게 빠르게 결과를 확인할 수 있게 해주었다.</p><p>위 다이어그램의 기능을 내가 구현한다고 생각해보자. 일반적인 방식에서는 Customer, Waiter, Chef 의 기능을 모두 설계, 개발 후에 최종적으로 해당 기능들을 조합해서 만들게 될 것이다. 하지만 TDD 방식으로 개발한다면 메인 로직에서 Customer의 order를 호출하는 부분(다이어그램상으로는 정의되어 있지 않다)부터 개발하게 된다.</p><h2 id="미구현-부분을-Mock으로-처리하고-점진적으로-구현하기"><a href="#미구현-부분을-Mock으로-처리하고-점진적으로-구현하기" class="headerlink" title="미구현 부분을 Mock으로 처리하고 점진적으로 구현하기"></a>미구현 부분을 Mock으로 처리하고 점진적으로 구현하기</h2><p>끝단부터 개발해서 역으로 채워나가는 과정에서 빠르게 결과를 확인하기 위해서 단계별로 기능을 구현하고 미구현 부분은 하드코딩을 통해서 Mock으로 처리한다.</p><p>메인 로직에서 Customer의 order 메서드로 기능이 시작된다고 가정했을 때 Waiter의 order, Chef의 orderfood 라는 메서드가 내부적으로 호출된다. 처음에 메인로직에서 Customer의 order를 호출하고 Customer의 order를 만들 때에는 Customer order의 전체를 Mock 처리한다. 여기서의 Mock 처리는 보통은 하드코딩을 통해서 의도한 결과를 리턴하는 것이다. 이 과정에서 Customer 객체의 정의나 order 메서드의 인터페이스가 정의 되는데, 이 과정을 통해 order라는 기능이 전체적인 프로그램에서의 흐름을 확인할 수 있게 되면 다음엔 Waiter의 order를 호출하는 로직을 추가한다.</p><p>이 후의 과정은 앞서 했던 과정의 반복으로 이루어지는데, 중간 단계를 섣불리 생략하면 무한 재귀함수에 빠진 것처럼 뇌에서 stackoverflow 가 발생될 것이다. 초기 수련 단계에서는 반드시 모든 단계를 생력하지 않고 순차적으로 진행하는 것이 중요하다.</p><h1 id="TDD를-통해-무엇을-배울-것인가"><a href="#TDD를-통해-무엇을-배울-것인가" class="headerlink" title="TDD를 통해 무엇을 배울 것인가?"></a>TDD를 통해 무엇을 배울 것인가?</h1><p>위에서 내가 접근한 방법을 보고 어떤 생각이 드는가? ‘에이~ 이게 무슨 TDD야’ 라는 생각이 들지도 모르겠다. 저렇게 하는 것만을 가지고 ‘난 TDD 한다’라고 말하기에는 분명 부족함이 많다.</p><p>그런데 여러분이 TDD를 하려고 하는 이유는 무엇인가?  내가 다른 사람들에게 TDD를 할 줄 안다고 말하는 것이 중요하다면 이런 접근은 별로 의미가 없을지도 모르겠다. 하지만 엔지니어로서 새로운 기술을 습득하고 역량을 발전시키는데 목적이 있다면 필자는 이런 접근 방법도 괜찮다고 생각한다.</p><blockquote><p>TDD의 아이러니 중 하나는 TDD가 테스트 기술이 아니라는 점이다(워드 커닝엄의 선문답이다). TDD는 분석 기술이며, 설계 기술이기도 하다. 사실은 개발의 모든 활동을 구조화하는 기술이다.</p><p><em>&lt;켄트 백, 테스트 주도 개발&gt;</em></p></blockquote><p>이러한 접근 방식을 내가 추천하는 이유는 TDD에서의 점진적인 개발과도 맞닿아 있다고 생각하는데, 모든 걸 완벽하게 이해하고 완성해야만 그 결실을 얻을 수 있는게 아니라 내가 이해하고 있는 수준 안에서 실천하고 그 안에서의 이점들을 취할 때 TDD를 지속할 수 있는 힘이 된다고 생각한다.</p><p>마지막으로 혹시라도 이 포스팅만을 보고 TDD에 대해 이해했다고 착각하는 실수를 범하지 않았으면 좋겠다. 이 방식은 앞서 말했다시피 필자가 밟아온 시행착오 중의 하나일 뿐이며, 단순히 TDD를 글로만 이해하는데에는 한계가 있다. 여러분의 실제 개발 환경에서 직접 시도하는 과정에서만 TDD에 대해 배우고 이해할 수 있다.</p><p>이 글을 통해 다른 많은 분들의 경험담을 전해들을 수 있었으면 좋겠다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이전 포스팅을 통해서 TDD를 배우기 왜 어려운지에 대한 이야기를 하였다. 그럼 TDD를 위한 기반지식이 없는 상태에서 TDD를 배우려면 어떻게 해야할까? 당연하겠지만 정석은 차근차근 필요한 지식들을 공부해나가는 것이다. 테스트 하는 법, 테스트
      
    
    </summary>
    
    
      <category term="TDD" scheme="https://wonderer80.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>당신이 TDD에 실패하는 이유</title>
    <link href="https://wonderer80.github.io/2018/04/03/%EB%8B%B9%EC%8B%A0%EC%9D%B4-TDD%EC%97%90-%EC%8B%A4%ED%8C%A8%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/"/>
    <id>https://wonderer80.github.io/2018/04/03/당신이-TDD에-실패하는-이유/</id>
    <published>2018-04-03T01:51:12.000Z</published>
    <updated>2018-04-04T16:29:09.757Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">TDD</a>가 나온지 많은 세월이 지났지만 TDD를 잘알고 활용하는 개발자는 흔치 않다. 그럼에도 잊을만하면 어디선가 한번씩 언급되는 TDD이기에 자세히는 몰라도 관심을 가지고 있는 개발자는 많다.</p><p>어떤 개발자는 테스트 코드를 작성하는게 TDD가 아니냐고 하는 개발자도 있었다. TDD라는게 뭔가 자동화 테스트와 관련이 있는 것 같은데 자세히는 모르겠고, 막연한 뭉개구름 같은 감각적 느낌으로만 알고 있는 개발자가 흔하게 있을 정도로 TDD는 그 이름에 비해 잘 알고 있는 사람은 별로 없다.</p><p>나 역시 처음 TDD를 배워보겠다고 <a href="http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=37469717" target="_blank" rel="noopener">TDDBE</a>라는 유명한 책을 구입했었다. 책을 구매해서 고개를 끄덕끄덕 하며 감탄하며 읽었는데, 다 읽고 난 후에 현실로 돌아왔을 때 남은 것은 막연함 뿐이었다.</p><p>사실 그 때는 잘 몰랐지만 지금 와서 생각해보니 TDD를 제대로 익히기 어려운 이유가 있었는데 그건 TDD가 여러 기술을 요구하기 때문이다.<br><img src="/images/TDD_Global_Lifecycle.png" alt="TDD Global Lifecycle" title="보기만 해도 복잡한 TDD Lifecycle"></p><h1 id="TDD를-위해-필요한-기술"><a href="#TDD를-위해-필요한-기술" class="headerlink" title="TDD를 위해 필요한 기술"></a>TDD를 위해 필요한 기술</h1><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>테스트를 만들어야 하니까 결국 어떤 것을 테스트할 것인지에 대한 정의가 중요하다. 안타깝게도 많은 개발자들은 테스팅 기술을 익힐 수 있는 기회가 없다. 누군가 알려준적도 없을 뿐더러 QA(라고 쓰고 테스터라고 부르는)담당자가 별도로 있는 경우가 많기 때문이다. 그래서 대충대충 빠르게 만들고 테스트는 QA 혹은 사용자에게 미루다보니 스스로 테스팅을 잘 하고 익힐 수 있는 기회가 없다.</p><h2 id="Test-Automation"><a href="#Test-Automation" class="headerlink" title="Test Automation"></a>Test Automation</h2><p>TDD에서의 테스트 수행 방식은 테스트 코드를 이용한 테스트 자동화를 의미한다. JUnit이나 RSpec 같은 Testing Framework를 주로 이용한다. 많은 개발자들은 TDD에서 이 부분이 가장 어려울 것이라고 생각하지만 실질적으로는 무엇을 테스트해야할지를 어려워하는 경우가 더 많다.</p><h2 id="Refactoring"><a href="#Refactoring" class="headerlink" title="Refactoring"></a>Refactoring</h2><p>TDD의 개발 Cycle 중 필수요소로 들어가는 것이 Refactoring이다. Refactroing은 기존의 동작을 변경하지 많으면서 효율적인 코드로 개선하는 작업이다. Refactoring을 하려면 Refactoring을 하기 앞서 어떤 코드가 좋은 코드인가에 대한 기반지식이 뒷받침되어야 한다.</p><h1 id="TDD를-배우기-어려운-이유"><a href="#TDD를-배우기-어려운-이유" class="headerlink" title="TDD를 배우기 어려운 이유"></a>TDD를 배우기 어려운 이유</h1><p>위의 3가지 중에 하나라도 어렵게 느껴지는 것이 있는가? TDD를 잘 하려면 위의 3가지를 기본적으로 할 수 있어야한다.<br><a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%EC%A7%80_%EB%B6%80%ED%95%98" target="_blank" rel="noopener">인지 부하 이론</a>에 의하면 일반적으로 과제 해결에 요구되는 인지자원의 양이 인지구조가 보유하고 있는 자원의 용량을 초과할 때 인지과부하(cognitive overload)가 발생한다고 하는데 이는 학습 부진의 주요 원인으로 본다. 쉽게 말하면 우리가 어떤 것을 배우거나 문제를 해결할 때 필요한 기반지식이 충분히 뒷받침 되지 않으면 많은 어려움을 겪게 된다는 뜻이다.</p><p>TDD는 위의 3가지 기술을 기반으로 설계와 개발을 어떤 식으로 할 것에 대한 개발 방법론인데 기본적인 기술에 대한 이해가 없는 상황에서 TDD를 시도하게 되면 결국 인지과부하가 발생될 수밖에 없게되고 결국 TDD 적용에 실패하게 된다.</p><h1 id="TDD를-안할지언정-정신-승리는-하지말자"><a href="#TDD를-안할지언정-정신-승리는-하지말자" class="headerlink" title="TDD를 안할지언정 정신 승리는 하지말자"></a>TDD를 안할지언정 정신 승리는 하지말자</h1><p>간혹 테스트 코드를 짜냐는 질문에 자긴 TDD를 좋아하지 않는다고 답하는 개발자들을 보고는 한다. 그들이 내세우는 근거는 대부분 테스트 코드는 짜는데 시간이 많이 걸려서 효율이 좋지 않다는 것과 <a href="https://sangwook.github.io/2014/04/25/tdd-is-dead-long-live-testing.html" target="_blank" rel="noopener">TDD는 죽었다 - 번역</a>의 내용을 인용하는 것이다. 여기서 문제는 보통 이런 주장을 하는 사람들의 대부분은 테스트 자동화와 TDD를 구분하지 못할 뿐더러, 당연히 제대로 테스트 코드를 짜보거나 TDD를 경험해보지 못했다는 것이다. 사실 ‘TDD는 죽었다’라는 글을 쓴 DHH 는 테스트 자체를 반대한 것은 아니다.</p><p>완벽한 기술이란 없다. 하지만 본인이 지금 못한다고 해서 무조건적인 비하는 하지말자. TDD를 못한다고 볼품없는 개발자가 되는 것도 아니다. 하지만 배우기도 전에 거부하는 것은 스스로 배움의 기회를 멀리 차버리는 것과 같다.</p><h1 id="TDD를-꼭-배우고-싶은데-그럼-어떻게-하면-좋을까"><a href="#TDD를-꼭-배우고-싶은데-그럼-어떻게-하면-좋을까" class="headerlink" title="TDD를 꼭 배우고 싶은데 그럼 어떻게 하면 좋을까?"></a>TDD를 꼭 배우고 싶은데 그럼 어떻게 하면 좋을까?</h1><p>어쩃든 여러분이 TDD를 배우기 어렵다는 것은 잘 알았다. 그럼 어떻게 TDD를 익혀나갈 수 있을 것인가? 가장 쉽고 빠른 방법은 TDD를 이미 잘 이해하고 사용하는 개발자에게 배우는 것이다. <a href="https://en.wikipedia.org/wiki/Pair_programming" target="_blank" rel="noopener">페어 프로그래밍</a>을 할 수 있으면 금상첨화다. 여러분 주위에 그런 사람이 있으면 그건 정말 큰 행운이라고 생각한다.</p><p>하지만 불행하게도(일반적으로) 주위에 그런 개발자가 없다면 결국 혼자 익히는 수밖에는 없다. 솔직히 필자는 TDD를 처음 접할 때 테스트 코드라는게 무엇인지도 전혀 이해를 못했다. 그럼에도 TDD를 개발에 적용할 수 있었는데 오히려 무지했기에 가능한 방법이었던 것 같다. 필자가 TDD를 어떤 방식으로 활용했고 배웠는지 궁금한가? 나는 무슨 방법을 써서라도 TDD를 익혀보고 싶다면 필자의 방법을 참고해보도록 하라.</p><p><em>다음 포스팅을 통해 필자가 익힌 邪派의 기술을 전수해주겠다.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TDD&lt;/a&gt;가 나온지 많은 세월이 지났지만 TDD를 잘알고 활용하는 개발자
      
    
    </summary>
    
    
      <category term="TDD" scheme="https://wonderer80.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>기술 기반 회사란 무엇일까?</title>
    <link href="https://wonderer80.github.io/2018/03/29/%EA%B8%B0%EC%88%A0-%EA%B8%B0%EB%B0%98-%ED%9A%8C%EC%82%AC%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C/"/>
    <id>https://wonderer80.github.io/2018/03/29/기술-기반-회사란-무엇일까/</id>
    <published>2018-03-29T09:22:26.000Z</published>
    <updated>2018-04-12T15:19:36.700Z</updated>
    
    <content type="html"><![CDATA[<p>예전에 다니던 직장에서 ‘우리 회사는 기술 기반 회사인가?’ 라는 주제로 엔지니어 그룹에서 토론을 한적이 있었다.</p><p>그렇다고 하는 사람도 있었고, 아니다라고 하는 사람도 있었는데 왜 그 토론을 주제로 삼았는지는 기억이 안나지만 어느 쪽이든 기술 기반 회사의 회사에서 일하고 싶다는 마음은 같았던 것 같다.</p><p>그렇게 몇 년이 지나 그 직장을 그만두고 회사를 알아보러 이곳 저곳에 면접을 보러 다니는 와중에 8년차 서비스를 하고 있는 유명 스타트업 E사의 대표님과의 최종 면접이 있었다. 왜 이전 직장을 나왔냐는 단골 질문에 기술적인 성장과 자극을 위해라는 단골 답변을 했는데, 그 대표님은 한숨을 쉬며 기술이 중요한 것은 알겠는데 솔직히 우리 같은 스타트업은 하루하루 생존의 위협에 시달리고 있는데, 기술 개발 같은건 N사나 K사 같은 큰 회사나 할 수 있는거 아니냐며 푸념을 하였다. 그 이야기를 나누면서 확실하게 알게 된 것은 이 곳은 기술 기반 회사와는 아주 거리가 멀다는 것이었다.</p><p>보통 우리가 기술 기반 회사라고 하면 떠올리는 이미지는 최신 기술에 민감하게 반응하고 기술을 선도하는 기업의 이미지를 가지고 있다.최소한 플랫폼 서비스나 솔루션과 같은 기술을 경쟁력으로 하는 회사를 떠올릴 것으로 생각한다.</p><h1 id="내가-생각하는-기술-기반-회사"><a href="#내가-생각하는-기술-기반-회사" class="headerlink" title="내가 생각하는 기술 기반 회사"></a>내가 생각하는 기술 기반 회사</h1><p>하지만 나는 조금 더 넓은 의미에서의 의미를 적용하고 싶다는 생각을 하는데, 사업의 핵심 경쟁력을 기술에 두고 기술 개발 및 발전을 위한 계획을 가지고 있는 회사라고 생각한다.</p><p>요즘 아무리 작은 스타트업이라도 CTO 가 없는 회사는 거의 없다. 그만큼 기술에 대한 중요성은 인식하고 있다. 하지만 CTO가 있어도 기술에 대한 로드맵이나 계획, 정책을 가지고 있는 회사는 별로 보지 못했다. 이제까지 아무도 만들어내지 못한 기술을 새로 만들어내야만 기술이 있는 것인가? 난 아니라고 생각한다. 처음에는 그런 기술이 없었을지라도 서비스를 운영하는 과정에서 생기는 경험이나 노하우도 일종의 기술이라 볼 수 있다. 문제는 그 과정에서 생기는 기술이나 경험을 제대로 공유하고 학습하기보단 주먹구구식의 임기응변으로 대처함으로 인해 기술이 내재화 되지 못하는 것이다.</p><p>과거에 습득한 지식과 경험은 잘 정리하여 구성원들에게 공유함으로서 기술 기반을 축적시켜 나가고, 그 기반을 바탕으로 새로운 기술들을 학습을 할 수 있는 체계를 갖추고 있다면 훌륭한 기술 기반 회사라고 생각을 한다. 이러한 것들은 회사의 규모나 형편과는 상관없다. 모든 회사가 항상 위기라고 한다. 계획을 가지고 있는가? 그리고 그것을 상황에 맞게 꾸준히 실천해나가고 있는가? 그 차이 뿐이라고 생각한다.</p><h1 id="엔지니어들이-다니고-싶은-회사"><a href="#엔지니어들이-다니고-싶은-회사" class="headerlink" title="엔지니어들이 다니고 싶은 회사"></a>엔지니어들이 다니고 싶은 회사</h1><p>다시 E사의 이야기로 되돌아가보자.</p><p>E사의 대표님은 본인이 이제까지 월급 안밀리고 잘 운영한 것을 자랑으로 생각하신다고 했다.<br>그래서 그럼 내가 이 회사에 다닌다면 월급 이외에 무슨 메리트가 있느냐는 물음에 머뭇거리면 대답을 잘 하지 못하셨다.</p><p>한 회사의 경영자로서 회사를 안정적으로 운영한 것은 분명 훌륭한 일이다. 하지만 훌륭한 엔지니어가 이런 곳에서 일하고 싶지 않을 것이라는 것은 확실하다.결국 난 다음 날 입사 제의를 거절하였다.</p><p>왜 엔지니어들은 기술 기반 회사에 다니고 싶을까? 엔지니어들은 누구나 기술적 성장에 대한 갈망을 가지고 있다.</p><p>기술의 성장과 회사의 성장을 동일 시 여기는 회사. 즉 엔지니어 개개인의 성장을 중요 시 여기고 그에 대한 비전을 가지고 있는 회사라면 엔지니어라면 누구나 다니고 싶은 회사일 것이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;예전에 다니던 직장에서 ‘우리 회사는 기술 기반 회사인가?’ 라는 주제로 엔지니어 그룹에서 토론을 한적이 있었다.&lt;/p&gt;
&lt;p&gt;그렇다고 하는 사람도 있었고, 아니다라고 하는 사람도 있었는데 왜 그 토론을 주제로 삼았는지는 기억이 안나지만 어느 쪽
      
    
    </summary>
    
    
      <category term="IT생각" scheme="https://wonderer80.github.io/tags/IT%EC%83%9D%EA%B0%81/"/>
    
  </entry>
  
</feed>
