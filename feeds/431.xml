<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" >
    <channel>
        <title>아하하 이녀석</title>
        <link>http://blog.daum.net/funfunction</link>
        <description>재미로 남겨보는 개발이야기
</description>
        <language>ko</language>
                <pubDate>Tue, 4 Feb 2014 13:01:40 +0900</pubDate>
                <webMaster>범이</webMaster>
        <generator>Daum Blog (http://blog.daum.net/)</generator>
        <ttl>100</ttl>
        <image>
        	<url>
        	<![CDATA[http://cfile225.uf.daum.net/image/1807803550E597280FE4E7]]>
        	</url>
        </image>
         		 		
			        <item>        
	            <title><![CDATA[ R17의 발전 한가지: 익명함수에 이름 붙이기]]></title>
	            <description><![CDATA[ http://www.erlang.org/news/67 erts 5.x 시대를 지나 erts 6.x 시대로 넘어가는 시발점이자 중요한 개선점을 포함하는 얼랭 R17이 드디어 모습을 보였다. R17은 구현상의 개선뿐만 아니라 언어적인 개선도 포함하고 있다. 우선 눈에 띄는 발전은 익명함수의 내부에서 자기자신의 이름을 붙이는 것이 가..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Erlang&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Erlang&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=R17&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;R17&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Lambda&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Lambda&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/23</link>
	            	            <pubDate>Tue, 4 Feb 2014 13:01:40 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/23</guid>
	            	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[R17]]></category>
	            		           	<category><![CDATA[Lambda]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ F# 메시지 패싱 - 2]]></title>
	            <description><![CDATA[저번 글에서 F#의 메시지 패싱에 대한 개요와 메시지 보내기를 보았다. 이번에는 한걸음 더 나아가 보낸 메시지에 대한 응답을 받아보도록 하겠다. 기본적으로 메시지에 대한 응답을 받는 방법은 보내는 메시지에 응답을 위한 객체를 넘겨주는 것이다. 얼랭이라면 메시지에 Pid를 첨부하는..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Agent&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Agent&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=F#&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;F#&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=메시지 패싱&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;메시지 패싱&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/22</link>
	            	            <pubDate>Sat, 11 Jan 2014 17:10:05 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/22</guid>
	            	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[Agent]]></category>
	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[메시지 패싱]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ Elixir의 메모리 작동]]></title>
	            <description><![CDATA[저번에 Elixir를 둘러보기 시작했다고 했는데, 최근에는 좀 심도있게 들여다 볼 수 있었다. 결과는 충격과 공포였다. Elixir는 대단히 좋다. 문장도 좋고 코드 전체가 표현식이라 컴파일 과정에서 테스트를 통합시키거나 하는 일도 간단하게 처리된다. 이러한 장점을 살려 테스트를 위해 ExUnit..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=메모리&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;메모리&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Erlang&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Erlang&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Elixir&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Elixir&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=불변상태&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;불변상태&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/21</link>
	            	            <pubDate>Thu, 9 Jan 2014 16:03:01 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/21</guid>
	            	            		           	<category><![CDATA[주제 없는 이야기]]></category>
	            		           	<category><![CDATA[메모리]]></category>
	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[Elixir]]></category>
	            		           	<category><![CDATA[불변상태]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ Elixir란 언어를 보고 있다.]]></title>
	            <description><![CDATA[ Elixir란 언어가 좋은평가를 받고 있길래 둘러보기 시작했다. 이 언어는 곡괭이 책의 저자인 Dave Thomas와 얼랭의 디자이너인 Joe Armstrong의 극찬을 받았다. 나는 막 문장들을 살펴보는 정도에 불과해서 심도있는 평가는 어렵지만, 언뜻보기에 Elixir는 얼랭이 가지는 장점을 유지하면서 루비같..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Erlang&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Erlang&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Elixir&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Elixir&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/20</link>
	            	            <pubDate>Fri, 15 Nov 2013 21:18:20 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/20</guid>
	            	            		           	<category><![CDATA[주제 없는 이야기]]></category>
	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[Elixir]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ Erlang과 C의 연결]]></title>
	            <description><![CDATA[ 얼랭은 단순한 연산능력이 약하게 설계된 언어다. 기본적으로 실수 연산을 제외하면 기계형을 전혀 따르지 않기 때문이다. 이러한 설계는 임의의 데이터형(현실세계의 데이터는 대부분 이렇다는 것을 기억하자)을 편리하게 처리할 수 있는 편의성을 제공하지만, 연산능력의 저하라는 단..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=C&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;C&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=NIF&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;NIF&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Erlang&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Erlang&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Ports&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Ports&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/19</link>
	            	            <pubDate>Wed, 9 Oct 2013 16:54:55 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/19</guid>
	            	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[C]]></category>
	            		           	<category><![CDATA[NIF]]></category>
	            		           	<category><![CDATA[Erlang]]></category>
	            		           	<category><![CDATA[Ports]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ process.nextTick은 비동기가 아닌...]]></title>
	            <description><![CDATA[ node.js가 0.10이 되기 전 process.nextTick은 다소 불분명했다. 그러니까 대충 겁나짧은 타이머 같은 그런 물건이었다. 그러다보니 nextTick 재귀가 길어질 경우 그 사이에 다음 이벤트 루프가 넘어오는 일도 가능했다. 하지만 node.js 0.10이 나오면서 교통정리가 되어 nextTick의 실행은 지금 이벤트 루..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=process.nextTick&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;process.nextTick&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=비동기&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;비동기&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/18</link>
	            	            <pubDate>Sun, 29 Sep 2013 01:17:44 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/18</guid>
	            	            		           	<category><![CDATA[Node.js]]></category>
	            		           	<category><![CDATA[process.nextTick]]></category>
	            		           	<category><![CDATA[비동기]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ 오류 처리: 이벤트 객체와 오류]]></title>
	            <description><![CDATA[ node.js의 장점 중 하나는 비동기 처리 과정에서 발생하는 오류에 대하여 비교적 명확한 규약이 존재한다는 것이다. 규약이라 그래도 내용은 아주 간단한데, 우선 callback 함수를 이용하는 경우 arguments[0]는 오류를 전달하는 용도로 쓴다는 것이다. asyncRequest(request, // callback의 arguments[0]은 오..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=error&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;error&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=domain&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;domain&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=node.js&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;node.js&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=events&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;events&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/17</link>
	            	            <pubDate>Fri, 20 Sep 2013 18:20:20 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/17</guid>
	            	            		           	<category><![CDATA[Node.js]]></category>
	            		           	<category><![CDATA[error]]></category>
	            		           	<category><![CDATA[domain]]></category>
	            		           	<category><![CDATA[node.js]]></category>
	            		           	<category><![CDATA[events]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ fsson: F# JSON 라이브러리]]></title>
	            <description><![CDATA[저번에 업무용 프로그램에서 쓰기 위하여 F#으로 JSON 파서를 만든적이 있었는데, 만들다보니 이것저것 추가되어서 조금더 정리해 라이브러리로 빼야겠다는 생각을 한 적이 있었다. 그래서 조금씩 정리를 하였고 오늘 정리가 마무리 된 것 같아서 Github에 올렸다. 라이브러리는 JSON 형식의 ..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=JSON&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;JSON&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=F#&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;F#&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=fsson&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;fsson&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/16</link>
	            	            <pubDate>Wed, 18 Sep 2013 00:35:52 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/16</guid>
	            	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[JSON]]></category>
	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[fsson]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ node-mysql-transaction 판올림]]></title>
	            <description><![CDATA[ 한동안 node-mysql-transaction에 관심을 끊고 있었는데, 얼마전 한번 들춰보니 내부 pool의 구조가 생각보다 구렸다는 사실을 발견했다;; 뭐 딱히 작동에는 지장이 없었고 최종 응용 계층인 chain에 잉여력이 몰빵되었던 코드라서 눈치채지 못하고 넘어갔던 것 같다. 하지만 일단 알게 된 이상 넘..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=mysql&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;mysql&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=transaction&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;transaction&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=node.js&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;node.js&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/15</link>
	            	            <pubDate>Wed, 11 Sep 2013 23:01:55 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/15</guid>
	            	            		           	<category><![CDATA[Node.js]]></category>
	            		           	<category><![CDATA[mysql]]></category>
	            		           	<category><![CDATA[transaction]]></category>
	            		           	<category><![CDATA[node.js]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ F# 메시지 패싱 - 1]]></title>
	            <description><![CDATA[메시지 패싱은 Erlang의 핵심적인 요소이자 오늘날 보다 현대적인 언어들로 빠르게 전파되고 있는 디자인이다. 메시지 패싱은 병렬, 비동기, 병행 프로그램을 만들어내는 현실적인 방법이며, 무엇보다 3가지 특성을 한번에 달성하기 용이하다는 장점이 있다. F#에서 메시지 패싱을 처리하는..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=Agent&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;Agent&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=F#&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;F#&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=메시지 패싱&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;메시지 패싱&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/14</link>
	            	            <pubDate>Sun, 8 Sep 2013 00:48:40 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/14</guid>
	            	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[Agent]]></category>
	            		           	<category><![CDATA[F#]]></category>
	            		           	<category><![CDATA[메시지 패싱]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ F#을 좋아하게 되었다.]]></title>
	            <description><![CDATA[ 일 때문에 F#을 접하게 된 것이 수개월 전이었는데 지금은 F#을 상당히 좋아하고 있다. F#을 사용해본 느낌은 상대적으로 복잡한 코드를 투입한 시간대비 쉽게 짤 수 있다는 것이었다. 한번은 상당히 큰 간접 재귀에 의한 FSM을 작성 했는데, 타입 시스템의 견고함 덕분에 어려움 없이 만들..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=프로그래밍언어&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;프로그래밍언어&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=F#&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;F#&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/13</link>
	            	            <pubDate>Thu, 15 Aug 2013 00:16:09 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/13</guid>
	            	            		           	<category><![CDATA[주제 없는 이야기]]></category>
	            		           	<category><![CDATA[프로그래밍언어]]></category>
	            		           	<category><![CDATA[F#]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ 싱글톤 모듈 만들기]]></title>
	            <description><![CDATA[ node.js의 모듈은 원래 자바스크립트가 그러하듯이 유연하다. 그래서 이런저런 재미난 일들이 가능한데, 오늘은 그 하나로 싱글톤 작동을 하는 모듈을 만들어볼 것이다. 싱글톤으로 모듈을 작성하면 한번 초기화 한뒤 초기화한 객체 하나를 계속 불러서 쓸 수 있게 된다. 사용 용도는 다양..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=module&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;module&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=node.js&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;node.js&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=singleton&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;singleton&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=exports&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;exports&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/12</link>
	            	            <pubDate>Sat, 3 Aug 2013 00:56:49 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/12</guid>
	            	            		           	<category><![CDATA[Node.js]]></category>
	            		           	<category><![CDATA[module]]></category>
	            		           	<category><![CDATA[node.js]]></category>
	            		           	<category><![CDATA[singleton]]></category>
	            		           	<category><![CDATA[exports]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ IE10의 터치 이벤트 MSPointer에 대한 생각]]></title>
	            <description><![CDATA[ 오늘날의 일반적인 브라우저들은 마우스와 터치를 구분해서 구현하고 있다. 여기에는 몇 가지 이유가 숨겨져 있다. 과거 포인팅 장치 중 터치스크린이라는 것이 막 등장했던 당시에 터치스크린은 그냥 마우스를 흉내내는 장치였었다. 그래서 터치 이벤트는 마우스의 그것으로 1:1매칭이 ..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=터치스크린&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;터치스크린&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=IE10&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;IE10&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=MSPointer&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;MSPointer&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=터치이벤트&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;터치이벤트&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/11</link>
	            	            <pubDate>Sun, 23 Jun 2013 23:06:56 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/11</guid>
	            	            		           	<category><![CDATA[JavaScript]]></category>
	            		           	<category><![CDATA[터치스크린]]></category>
	            		           	<category><![CDATA[IE10]]></category>
	            		           	<category><![CDATA[MSPointer]]></category>
	            		           	<category><![CDATA[터치이벤트]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ 프로그래밍 언어의 모든 구성요소를 공부해야 하는가?]]></title>
	            <description><![CDATA[ 새롭게 프로그래밍 언어를 공부하는 사람들 중 꼭 언어의 모든 구성요소를 다 학습하고 사용해보겠다는 원대한 계획을 가지는 사람들이 있다. 하지만 대부분의 경우 이 당찬 계획은 좋은 선택이 아니다. 우선 이 목표는 달성하는 것 자체가 어렵다. 당신이 배우려는 언어가 이제 막 알파 ..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=잡담&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;잡담&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=프로그래밍 언어&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;프로그래밍 언어&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/10</link>
	            	            <pubDate>Sun, 9 Jun 2013 01:44:33 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/10</guid>
	            	            		           	<category><![CDATA[주제 없는 이야기]]></category>
	            		           	<category><![CDATA[잡담]]></category>
	            		           	<category><![CDATA[프로그래밍 언어]]></category>
	            	        </item>
		  	        <item>        
	            <title><![CDATA[ 잉여적 모듈소개 node-mysql-transaction]]></title>
	            <description><![CDATA[ 널리 사용되는 node.js의 mysql 2.0 드라이버는 트랜젝션을 직접 지원하지 않는다. 직접 지원하는건 아니지만 드라이버 자체는 connection pool을 가지고 있으므로 트랜젝션이 필요하면 pool에서 연결을 하나 받아 트랜젝션을 구현할 수 있다. 하지만 2달 전 나는 잉여력의 신비한 힘에 이끌려 트랜..&lt;br&gt;&lt;br&gt;tag : &lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=mysql&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;mysql&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=transaction&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;transaction&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;/_blog/tagArticleList.do?blogid=0dYjS&amp;tagName=node.js&quot; rel=&quot;tag&quot; target=&quot;_blank&quot;&gt;node.js&lt;/a&gt;]]></description>
	            <link>http://blog.daum.net/funfunction/9</link>
	            	            <pubDate>Wed, 15 May 2013 12:03:07 +0900</pubDate>
	            <author>범이</author>
	            <guid isPermaLink="true">http://blog.daum.net/funfunction/9</guid>
	            	            		           	<category><![CDATA[Node.js]]></category>
	            		           	<category><![CDATA[mysql]]></category>
	            		           	<category><![CDATA[transaction]]></category>
	            		           	<category><![CDATA[node.js]]></category>
	            	        </item>
		  			       </channel>
</rss>