<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Sunghoon Kang on Medium]]></title>
        <description><![CDATA[Stories by Sunghoon Kang on Medium]]></description>
        <link>https://medium.com/@devholic?source=rss-7c59a12b4ac7------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*3sjB_LZO8h4cSnJWTwO5JA.png</url>
            <title>Stories by Sunghoon Kang on Medium</title>
            <link>https://medium.com/@devholic?source=rss-7c59a12b4ac7------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 10:47:02 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@devholic" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[[리빙 포인트] AWS Encryption SDK에서 Illegal key size Exception이 발생할 땐]]></title>
            <link>https://medium.com/rainist-engineering/how-do-we-resolve-aws-crypto-exception-2c12c152e6d9?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/2c12c152e6d9</guid>
            <category><![CDATA[openjdk]]></category>
            <category><![CDATA[jvm]]></category>
            <category><![CDATA[backend-development]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[cryptography]]></category>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Fri, 09 Nov 2018 09:33:27 GMT</pubDate>
            <atom:updated>2018-11-09T10:26:18.574Z</atom:updated>
            <content:encoded><![CDATA[<h4>Java Cryptography Extension을 설치하면 된다</h4><p>뱅크샐러드에서는 <a href="https://aws.amazon.com/ko/kms/">AWS Key Management System (KMS)</a>를 활용해 데이터를 암/복호화하고 있습니다. 그러던 어느 날, KMS를 이용하는 Service를 수정할 일이 있어 코드를 수정하고 작업환경에서 테스트를 진행하니, 아래와 같은 Exception이 발생했습니다.</p><pre>com.amazonaws.encryptionsdk.exception.AwsCryptoException: java.security.InvalidKeyException: Illegal key size</pre><p>미국 통상법에 따라 AES-256의 수출이 금지되어있기 때문에 발생한 에러였는데요, 이를 해결하기 위해 추가 조치가 필요했습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/615/0*3lVZRhamBwTxZLzt.jpg" /><figcaption>U.S.A</figcaption></figure><p>로컬에 설치된 <strong>Oracle JDK에는 AES-256이 포함되어 있지 않습니다. </strong>내부에서 Docker Image를 빌드할 때 사용하고 있는 <strong>Open JDK</strong>에서는 기본적으로 AES-256 알고리즘을 지원하기 때문에 실제 서비스에서는 정상으로 작동했습니다.</p><p>미국 외 지역에서 OracleJDK 기반으로 AES-256을 사용하려면 어떻게 해야 될까요?</p><blockquote>Java 버전을 업데이트 하거나,</blockquote><blockquote><a href="https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java Cryptography Extension</a>을 설치하면 됩니다.</blockquote><p><strong>6u181</strong> / <strong>7u171</strong> / <strong>8u161</strong> / <strong>9b148</strong> 버전 이후에는 Oracle JDK에서 기본적으로 AES-256을 지원하기 때문에 버전을 업데이트하거나, Extension을 설치하면 AES-256을 사용할 수 있습니다. 정말 간단하죠? (자세한 내용은 <a href="https://bugs.java.com/view_bug.do?bug_id=JDK-8170157">JDK-8170157</a>을 참고하세요 😎)</p><h3>Open JDK 🤟</h3><p>이렇게 개발자들이 개발하는 환경은 다 다르고, 통일하기도 어렵습니다. 어떻게 하면 이 문제를 효과적으로 해결할 수 있을까요? 다음 글에서 Docker Compose를 활용해 이 문제를 해결할 수 있었는지에 대해 공유하도록 하겠습니다.</p><p>I’ll be back <em>(soon)</em></p><figure><a href="https://rainist.com/recruit"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*EkFP1lNBagOl81cZub7qPw.png" /></a></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2c12c152e6d9" width="1" height="1"><hr><p><a href="https://medium.com/rainist-engineering/how-do-we-resolve-aws-crypto-exception-2c12c152e6d9">[리빙 포인트] AWS Encryption SDK에서 Illegal key size Exception이 발생할 땐</a> was originally published in <a href="https://medium.com/rainist-engineering">Rainist Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[네, 맞습니다!]]></title>
            <link>https://medium.com/@devholic/%EB%84%A4-%EB%A7%9E%EC%8A%B5%EB%8B%88%EB%8B%A4-a9ed655b253f?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/a9ed655b253f</guid>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Mon, 17 Sep 2018 13:31:42 GMT</pubDate>
            <atom:updated>2018-09-17T13:32:37.816Z</atom:updated>
            <content:encoded><![CDATA[<p>네, 맞습니다!</p><p>Hidden Member의 경우 host와 port를 통해 직접 연결해야 접속할 수 있습니다 :D</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a9ed655b253f" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Analyze Data in MongoDB with AWS]]></title>
            <link>https://medium.com/rainist-engineering/analyze-data-in-mongodb-with-aws-43c25ef0592f?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/43c25ef0592f</guid>
            <category><![CDATA[athena]]></category>
            <category><![CDATA[glue]]></category>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[fintech]]></category>
            <category><![CDATA[data]]></category>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Mon, 10 Sep 2018 09:46:12 GMT</pubDate>
            <atom:updated>2018-09-12T02:39:06.666Z</atom:updated>
            <content:encoded><![CDATA[<blockquote><a href="https://www.meetup.com/ko-KR/banksalad/events/bldvbqyxlbmb/">Con-Salad 01 🌽🥗</a>에서 <a href="https://www.slideshare.net/SunghoonKang4/analyze-data-in-mongodb-with-aws">발표된 내용</a>입니다.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YxrhFdSjEfjyNgxZGdBA5g.png" /></figure><p>뱅크샐러드에는 사용자의 데이터를 분석해 조금 더 맞춤화된 자산관리를 돕는 <strong>금융비서</strong>라는 기능이 있습니다. 예를 들면 소비가 급격히 늘었을 때 과소비 경보 조언을 보내주고, 지난밤 과하게 술을 마셨을 때는 음주 경고 조언을, 반대로 평소보다 술을 덜 마셨을 때는 절주 칭찬 조언을 발송해주는 등 사용자에게 개인화된 자산 관리 경험을 제공하고 있습니다.</p><p>그러던 어느 날, 금융비서 <em>PM </em>님이 회의시간에 의견을 주셨습니다.</p><blockquote>(사용자의 데이터를 기반으로) 특정 사용자 집단을 대상으로 다양한 실험을 해보고 싶어요!</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/338/1*yFg1mGVOOHc3jFw6HwHCTA.png" /><figcaption>I. WILL. BE. BACK~~~~~</figcaption></figure><p>예를 들면 현대카드를 보유하고 있는 사용자에게 슈퍼콘서트 공연에 관한 조언 발송 후 조언 클릭률과 좋아요 클릭률 등을 측정해 어떤 형태의 조언을 시스템화할지 의사결정을 한다면, 금융비서 프로젝트가 전반적으로 좀 더 기민하고 효율적으로 돌아갈 수 있겠죠.</p><p>하지만 이렇게 특정 사용자 그룹을 타겟팅할 수 있는 시스템과 인프라를 개발하기에는 너무 많은 시간이 소요된다고 판단하여 <strong>단순히 간단한 쿼리만으로 이 문제를 해결할 수 없을지</strong> 생각해보게 되었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/661/1*bR0DuNFxWKmLNiLHKlO_eg.png" /></figure><p>뱅크샐러드의 데이터 대부분은 <a href="https://www.mongodb.com"><em>MongoDB</em></a>에 저장되고 있습니다. (당연히) 환경별로 <em>DB</em>는 분리되어 있지만, 별도의 분석용 <em>DB</em>가 따로 없었습니다.</p><blockquote>1TB가 넘어가고 10억 개 이상의 Document가 쌓여있는 DB에 복잡한 쿼리를 날리면 어떻게 될까요?</blockquote><p><em>Index</em> 없이 쿼리를 날리는 경우 모든 <em>Document</em>를 <em>Scan </em>하는 탓에 <em>Disk IOPS</em>가 치솟아 서비스 전반에 영향을 끼칠 수도 있고,<em>(물론 권한 설정을 제대로 하면 그럴 일은 없겠지만) </em>잘못된 쿼리를 날리는 경우 데이터가 날아갈 수도 있겠죠.</p><blockquote>그러면 <a href="https://docs.mongodb.com/manual/core/replica-set-hidden-member/">Hidden Member</a>를 사용하면 되지 않나요?</blockquote><p>현재 뱅크샐러드에서는 <em>Managed Service</em>인 <a href="https://www.mongodb.com/cloud/atlas"><em>MongoDB Atlas</em></a>를 사용하고 있는데, <em>Atlas Cluster</em>가 <em>Hidden Member</em>를 지원하지 않으며 특정 쿼리를 위한 <em>Index</em>를 계속 관리해줘야 한다는 점 때문에 <em>MongoDB</em>는 분석용으로 적합하지 않다고 생각했습니다.</p><h4>원하는 데이터를 어떻게 안전하고, 빠르고, 편리하게 뽑을 수 있을까?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/256/1*VsusxX7viLyxddmWdm9gRQ.png" /></figure><p>조사 중 <em>SQL</em>을 사용해 <strong><em>Amazon S3</em>에 저장된 데이터를 간편하게 분석</strong>할 수 있는 서비스인 <a href="https://aws.amazon.com/ko/athena"><strong><em>Amazon Athena</em></strong></a>를 발견하게 됩니다. 그러면 <em>MongoDB</em>에 있는 <em>Data</em>를 어떻게 <em>Athena</em>로 분석할 수 있을까요?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*p0E3PtnA0LlTihnkbov-vw.png" /></figure><p>먼저 사용자가 금융 정보를 갱신할 때마다 생성되는 <em>Snapshot</em>을, 1) 자정에 <em>Kubernetes Cluster</em>에서 작동하는 <em>CronJob</em>을 통해 <em>JSON</em>으로 변한한 뒤 2) S3에 저장한 후, 3) <em>Athena</em>로 데이터를 분석하는 <em>Pipeline</em>을 개발하면 어떨지 개발팀과 토의 했고, 이 구조로 개발하게 되었습니다.</p><p>이렇게 올라간 <em>JSON File</em>을 <em>Athena</em>에서 쿼리를 날려보려고 했더니, <em>Table</em> 정의가 필요하다는 사실을 깨닫게 되었습니다. 그런데…</p><pre>기준일<br>계좌 | 종류 / 금융사 / 잔액 (금액 / 통화) / 개설일 ...<br>카드 | 이름 / 카드사 ... <br>...</pre><p>기존 자산 데이터의 <em>Schema</em>가 변경되거나 특정 자산이 새롭게 추가되는 경우 매번 <em>Table Schema</em>를 수정하는 건 굉장한 비효율이라고 느꼈습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/256/1*GvRm15ox2sQGhMWhBYKnvw.png" /><figcaption>괜찮아요? 많이 놀랬죠</figcaption></figure><p>그러다 관련 문서를 보던 중 분석을 위해 손쉽게 데이터를 준비하고 로드할 수 있도록 지원하는 <strong>완전관리형 ETL 서비스인 </strong><a href="https://aws.amazon.com/ko/glue"><strong><em>Glue</em></strong></a>를 만나게 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/616/1*j5ATIxobWgrCgg98FC7nbg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/342/1*k6vo1yuncc5vpc_Wtic46A.png" /></figure><p><em>Glue</em>에서 제공하는 <em>Crawler</em>를 통해 클릭 몇 번으로 위와 같이 <em>Data</em>의 <em>Schema</em>를 뽑아낼 수 있습니다. 만약 특정 구조체의 <em>Schema</em>가 이상하게 인식되더라도 아래와 같이 직접 수정할 수 있으니 걱정하지 마세요!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/431/1*0VX3fNlIgB5TMTIFGu7thQ.png" /></figure><p>이제 쿼리를 날리기 위한 모든 준비를 마쳤으니 <em>Athena</em>를 활용해 뱅크샐러드에서 카드를 등록한 사용자 집단을 찾는 쿼리를 날려보도록 하겠습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3019c5b0099067c0b5d5962bd2e6259d/href">https://medium.com/media/3019c5b0099067c0b5d5962bd2e6259d/href</a></iframe><p>FYI — 쿼리 결과는 <em>Athena</em> 대시보드 상단의 History 탭에서 확인하실 수 있으니 시간이 너무 오래 걸린다면 중간에 창을 닫으셔도 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/758/1*H32sy531M8lrrHIZKcfvlg.png" /></figure><p>원하는 결과를 얻어 좋지만, 너무 느립니다. 어디서부터 잘못된 걸까요?</p><h4>위 쿼리 결과에서 이상한 점을 서술하세요 (5점)</h4><p>정답 — <strong><em>JSON</em>을 <em>Full Scan</em>하고 있어요</strong></p><pre>WITH latest_summaries AS<br>    (SELECT <strong>user_id</strong> AS uid,<br>        max(<strong>base_datetime</strong>) AS mdt<br>    FROM user_asset_summaries<br>    GROUP BY  (<strong>user_id</strong>))<br>SELECT <strong>user_id<br></strong>FROM user_asset_summaries s<br>JOIN latest_summaries ls<br>    ON s.<strong>user_id</strong> = ls.uid<br>        AND s.<strong>base_datetime</strong> = ls.mdt<br>WHERE cardinality(<strong>s.cards</strong>) &gt; 0</pre><p>쿼리를 위해 필요한 <em>Column</em>은 user_id, base_datetime, cards 이 세 <em>Column</em>인데, 모든 <em>Row</em>를 다 스캔하고 있어 매우 느리고, 굉장히 비효율적입니다. <em>JSON</em>을 <strong><em>Column</em> 형식</strong>으로 변환한다면, <em>Athena</em>에서 <strong>쿼리에 사용되는 <em>Column</em>만 스캔하기 때문에</strong> 쿼리 실행 속도가 비약적으로 빨라지게 됩니다.</p><p>그러면 <em>JSON File</em>을 어떻게 <em>Column</em> 형식으로 변환할 수 있을까요? <em>Table</em>을 생성할 때처럼 <em>Glue</em>를 사용하면 됩니다! <em>Glue</em>는 <em>Apache Spark</em> 기반의 서비스이기 때문에 <em>Spark</em> 코드를 작성하고 <em>Glue Job</em>으로 등록하면, 특정 이벤트가 발생했을 때 (예를 들면 <em>S3</em>에 파일이 업로드되었을 때, 혹은 <em>Glue Crawler</em>가 동작했을 때 등) 자동으로 실행되도록 설정할 수 있습니다.</p><p>그러면 <em>JSON</em>을 <em>Column</em> 형식 중 하나인 <a href="https://parquet.apache.org/"><em>Parquet</em></a>로 변환하는 코드를 살펴보겠습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/25466d50a0351cd0cde5ec6ea8d9ef7b/href">https://medium.com/media/25466d50a0351cd0cde5ec6ea8d9ef7b/href</a></iframe><p>먼저 <em>Spark</em>의 <em>Data Frame</em>과 유사한 개념인 <em>Glue</em>의 <strong><em>Dynamic Frame</em></strong>을 기존 <em>JSON Data</em>의 <em>Catalog</em>에서 가져옵니다. <em>Dynamic Frame</em>은 <em>Schema</em> 없이 각 <em>Record</em>가 <em>self-describe</em> 한다는 점을 제외하고는 <em>Data Frame</em>과 같습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8040ddc2eb74eacca9a90b3b2c05cb35/href">https://medium.com/media/8040ddc2eb74eacca9a90b3b2c05cb35/href</a></iframe><p>가져온 <em>Dynamic Frame</em>을 <em>Data Frame</em>으로 변환한 뒤, 특정 <em>Column</em>에 대한 <em>Transform</em>을 처리할 수 있습니다. 위 코드는 <strong><em>string</em></strong>으로 저장된 base_datetime 이라는 <em>Column</em>을 <strong><em>timestamp</em></strong>로 변환하는 코드입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/2b61edd149916b90d2367b38f8b7c623/href">https://medium.com/media/2b61edd149916b90d2367b38f8b7c623/href</a></iframe><p>마지막으로 <em>Data Frame</em>을 <em>S3</em>로 내보내기만 하면 끝! 🎉 참 쉽죠? 위 코드에서는 <em>Parquet</em>에서 권장하는 <a href="https://google.github.io/snappy"><strong><em>Snappy</em></strong></a>로 압축하는 내용까지 포함되어 있습니다.</p><h4>그래서 얼마나 효율적으로 쿼리를 날릴 수 있게 되었나요?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/728/1*uvrH4dJKGkfyGLSm88ncow.png" /></figure><p><strong>시간은 거의 94% 정도 단축</strong>되고, 쿼리를 위해 스캔한 <strong>데이터의 크기도 1/3</strong> 정도로 줄어들었습니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/576/1*KNMx-kg_eVHDfrjS7HF0jg.png" /></figure><p>그런데 작업 로그를 살펴보니 실행 시간이 선형적으로 증가하는 걸 발견할 수 있었습니다. 그 이유는 이미 <em>Parquet</em>로 변환된 <em>JSON</em> 파일도 다시 <em>Parquet</em>로 변환하기 때문인데요. <strong>작업 북마크를 활성화</strong>하면 이 문제가 해결됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/866/1*2zer16lyP7GEFBpgYIvLMw.png" /><figcaption>속성에 숨어있는 작업 북마크…</figcaption></figure><h4>🍯 Tip — File Size Matters</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/620/1*FoiDkEY5CMw8GwdxbpLL6g.png" /><figcaption>HBO의 <a href="https://www.hbo.com/silicon-valley">Silicon Valley</a> 꼭 보세요</figcaption></figure><p><em>JSON</em>을 <em>Parquet</em>로 변환하는 게 까다롭다면, 파일을 압축하는 걸 추천합니다. <em>Athena</em>의 경우 스캔한 데이터의 크기를 기준으로 비용이 계산되는데, <em>Athena</em>는 압축된 파일도 지원하므로 압축을 하는 게 비용 절감에 도움이 될 수 있습니다. (지원되는 압축 포맷은 <a href="https://docs.aws.amazon.com/athena/latest/ug/compression-formats.html">여기</a>서 확인하실 수 있습니다)</p><h3>글을 맺으며</h3><p>개발 기간을 최소화하며 빠르게 사용자에게 조언을 발송해 다양한 실험을 해볼 수 있다는 점에서 인상 깊었던 프로젝트였습니다. 실제로 카드사 프로모션 조언, 공항 라운지 프로모션 조언 등 다양한 조언을 발송해 여러 의미 있는 데이터를 뽑아낼 수 있었다는 점에서 재밌던 경험이었습니다.</p><p>하지만 시간관계상 진행하지 못한 부분이 있다는 게 아쉬웠습니다. <em>User Snapshot</em>의 경우 <strong><em>time series data</em></strong>이기 때문에<em> data partitioning</em>을 통해 좀 더 최적화 할 수 있었을 것 같고, 비록 이번에는 <em>Parquet</em>만 사용해보았지만, 다음에는 <a href="https://orc.apache.org"><strong><em>ORC</em></strong></a>도 사용해보고 두 포맷에 대한 비교도 <em>(언젠가는)</em> 진행해보고 싶습니다.</p><p>끝으로 레이니스트에서는 모든 직군의 엔지니어를 채용 중입니다. 함께 기술적인 문제들과 사용자에 대해 고민하며 더 나은 제품을 만들고 싶으신 분은 아래의 배너를 통해 언제든지 지원해주세요 💗 😎</p><figure><a href="https://rainist.com/recruit"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*EkFP1lNBagOl81cZub7qPw.png" /></a></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=43c25ef0592f" width="1" height="1"><hr><p><a href="https://medium.com/rainist-engineering/analyze-data-in-mongodb-with-aws-43c25ef0592f">Analyze Data in MongoDB with AWS</a> was originally published in <a href="https://medium.com/rainist-engineering">Rainist Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안녕하세요,]]></title>
            <link>https://medium.com/@devholic/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-aa00cf3adcc5?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/aa00cf3adcc5</guid>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Sat, 08 Sep 2018 05:03:13 GMT</pubDate>
            <atom:updated>2018-09-08T05:03:46.801Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요,</p><p>작성해주신 코드를 보니 제 코드와의 차이점은Subscriber에서 받는 데이터의 타입 (저의 경우는 Pair&lt;Long, Long&gt;, 쎄미님께서 작성하신 코드는 시간 계산을 먼저 하기 때문에 Boolean)만 다르고 크게 로직상 다른점은 보이지 않아 문제가 없을 것 같습니다 :D</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=aa00cf3adcc5" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Meet Our Chefs: 뱅크샐러드 iOS팀을 만나다]]></title>
            <link>https://medium.com/rainist-engineering/meet-our-ios-chefs-947687306684?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/947687306684</guid>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[recruit]]></category>
            <category><![CDATA[meet-our-chefs]]></category>
            <category><![CDATA[ios]]></category>
            <category><![CDATA[agile]]></category>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Thu, 17 May 2018 12:16:52 GMT</pubDate>
            <atom:updated>2018-09-08T07:41:16.294Z</atom:updated>
            <content:encoded><![CDATA[<blockquote><strong>Meet Our Chefs</strong><em>는 뱅크샐러드를 만들어가고있는 레이니스트 엔지니어링 팀 인터뷰 시리즈입니다.</em></blockquote><p>App Store 메인에 뱅크샐러드가 오늘의 앱으로 선정된 2018년 5월 14일, 사내 카페 (a.k.a. 분위기 사네 카페)에서 iOS팀을 인터뷰하게 되었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*0kJPctjhggF52pLr2JuCOg.jpeg" /><figcaption>왼쪽부터 관수님, 보영님, 찬울님</figcaption></figure><h4>안녕하세요? 간단하게 자기소개 부탁드립니다!</h4><p>찬울: 안녕하세요! 입사한지는 좀 더 되었지만, 1년 3개월 째 iOS팀에서 근무하고 있는 김찬울입니다. iOS 프로젝트의 첫 PR을 한 게 엊그제 같은데, 벌써 시간이 이렇게 흘렀네요.</p><p>보영: 나이는 막내가 아니지만, 입사 5개월차이자 팀의 막내인 박보영입니다. 원래는 글로벌 영업을 했었는데, 지금은 완전히 다른 직군으로 일하고 있습니다.</p><p>관수: 간편결제 서비스 P앱, 음식배달 서비스 Y앱을 개발하다 합류하게 된 레이니스트 최초의 <strong>아빠 개발자</strong> 안관수입니다.</p><h4>레이니스트 엔지니어링 팀에 어떻게 합류하게 되셨나요?</h4><p>찬울: 원래는 <strong>Web팀이 사용하는 </strong><a href="https://rainist.com/recruit"><strong>기술 스택</strong></a><strong>이 너무 인상깊어서</strong> Web팀으로 합류하게 되었어요. 그러던 중, iOS 팀이 새롭게 생긴다는 얘기를 듣고 뒤도 안돌아보고 자원해서 iOS팀의 초창기 멤버가 될 수 있었습니다.</p><blockquote>웹을 개발하다 관련된 지식이 하나도 없는 iOS팀으로 옮기는데 부담감이 컸을 것 같은데, 자원하게 된 결정적인 동기가 있나요?</blockquote><p>찬울: 제가 좋아하는 서비스를, 좋아하는 플랫폼에서 처음부터 개발하는 흔치않은 경험을 할 수 있을 것 같아서 지원하게 되었어요.</p><p>관수: 저같은 경우도 비슷한데요, 기존부터 가계부 자체에 관심이 많았고 제가 <strong>관심 가질 수 있는 제품을 만들 때 가장 큰 성취감을 느낄 수 있어서</strong> 레이니스트를 선택하게 되었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*VhSHomjuGCOXBZHrRPioTg.jpeg" /></figure><blockquote>현재 시장에 다양한 가계부 앱들이 나와있는데, 뱅크샐러드를 선택한 이유가 있나요?</blockquote><p>관수: iOS용 대부분의 가계부 앱은 대부분 복사-붙여넣기를 통해 사실상 수기로 작성해야해요. 그러다 뱅크샐러드를 우연히 발견하고 사용해보니 자동으로 입력해주는 게 너무 마음에 들었어요. <strong>뱅크샐러드를 만드는 회사는 어떨까 하고 찾아보니 제가 관심을 갖고 있던 기술 스택을 사용한다는걸 알게 되어 지원하게 되었어요.</strong></p><p>보영: 저도 관수님이랑 비슷해요. 저는 개발이라는, 기존에는 한번도 해본 적 없던 분야를 선택한 이유가 <strong>제가 하고싶은 일</strong>이었기 때문이었어요. 개발을 배우고, 어떤 회사에 들어가면 좋을까 고민하다 지원할 회사의 조건을 고민했어요. 제가 <strong>6개월 이상 잘 사용하고 있는 앱, 그리고 정말 좋아하는 서비스</strong>. 그게 바로 뱅크샐러드였습니다. 😆😆</p><p>결정적으로 회사 홈페이지를 들어가보니 단순히 가계부 앱을 만드는게 아닌, 그를 넘어 금융 정보의 비대칭성을 해결하고자 하는 미션이 정말 마음에 들어서 지원하게 됐어요.</p><h4>iOS팀을 간단하게 소개해주세요!</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kf9C4BCICsknGMoYC4UPZw.jpeg" /></figure><p>보영: 음… 떠오르는 이미지는 많은데 말로는 설명을 잘 못하겠네요. iOS가 등장한 초기부터 개발하신 분도 있고, 다른 플랫폼을 개발하다 iOS를 개발하신 분, 그리고 저같이 처음 iOS를 개발하는 사람들이 모여 다양한 기술을 적용하려고 노력하는 팀?</p><p>찬울: 이게 바로 온고지신 아닐까요? 😆</p><p>저희 팀은 보영님이 말씀해주신 것 처럼 다양한 최신 기술을 적극적으로 도입하고 있어요. 뱅크샐러드 iOS 앱은 <strong>100% Swift</strong>로 작성되어있고, RxSwift가 앱 전체에 적용되어있어요. 그리고 MVVM 패턴을 적극 지향하고 있고요.</p><p>기술적인 부분을 중요시하고 있는 팀이지만, 저는 무엇보다도 최신 기술을 (그것이 쉽든 어렵든) 팀원 전부가 서로 공유하고, 이해하고, 서로에게 알려줄 수 있는 팀이라고 생각해요.</p><p>관수: 저는 개인적으로 서로에 대한 피드백이 되게 많은 팀이라고 생각해요. 잘한 부분, 못한 부분 모두 서로 피드백을 주는데 두려워하지 않고, 적극적으로 줘서 모두 빠르게 성장할 수 있는 팀인 것 같아요.</p><p>찬울: 결정적으로 iOS 팀원 모두 지금 만들고 있는 뱅크샐러드 앱을 너무 사랑하고 있어요.</p><blockquote>얼마 전 iOS 100만 다운로드 기념으로 떡을 돌리시는걸 보고 정말 제품을 사랑하는 팀이라는게 느껴졌어요. 혹시 떡을 돌리신 이유가 있나요?</blockquote><p>찬울: 지표를 보니 iOS 앱 다운로드수가 100만에 근접했음을 알게되었어요. 사실 iOS팀끼리 자축할 수 있었지만, 개발팀 뿐만 아니라 고객감동팀, 금융상품 분석팀, 디자인팀, 마케팅팀, 영업팀 모두가 너무 많은 기여를 해주셨기에 감사한 마음에 (제 사비로) 떡을 돌리게 되었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4ex4JTfjCM1QHxIUgTmeoQ.png" /><figcaption>찬울님의 레이니스트에 대한 사랑이 가득 담긴 떡 ( 진짜 맛있었습니다 💖)</figcaption></figure><h4>iOS팀만의 협업 노하우는?</h4><p>찬울: 계획, 회고 과정을 통해 잘한점은 위키에 남겨 팀의 노하우로 계속 가져가고, 아쉬웠던 점들은 사후 부검 과정을 통해 원인을 분석하고, 다시 발생하지 않도록 회고를 통해 개선하고 있어요.</p><p>보영: 실제로 문제들이 투명하게 논의되다 보니 예상치못한 버그가 발생했을 때 누가 잘못했냐 보다는 <strong>이 문제가 왜 발생했고, 어떻게 하면 재발을 방지할 수 있는가</strong>에 초점이 맞춰져서 계속 팀 자체가 업그레이드 된다는 느낌을 많이 받고있어요.</p><p>관수: 저는 감성적으로 접근해보자면, <strong>서로에 대한 관심이 iOS팀의 협업 노하우</strong>라고 생각해요. 내가 하는일 뿐만 아니라 남이 하는 일도 관심을 갖기 때문에 문제가 있으면 바로 공유해야할 것 같다는 생각이 저절로 들게 되더라고요.</p><h4>iOS 앱을 개발하면서 겪는 어려움은 어떤 것들이 있고, 어떻게 해결하고 계신가요?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1FdkNvMYgy116Hc54heIeA.jpeg" /><figcaption>조정석님을 닮은 찬울님</figcaption></figure><p>찬울: App Store의 심사라는 개념이 개인적으로 어려웠어요. Android의 경우 배포된 버전에 문제가 포함되어 있어도 핫픽스를 빠르게 배포할 수 있지만, iOS는 배포 전에 애플에 무조건 심사를 요청해야되기 때문에 배포가 약간 부담스러웠어요.</p><p>그래서 이슈를 빠르게 해결하고자 사내배포용 베타샐러드 빌드를 만들어 회사 구성원의 도움을 받고 있어요. 사내배포를 통해 QA팀과의 협업 효율도 올라가고, 구성원의 피드백을 통해 빠르게 개선할 수 있어서 배포에 대한 두려움을 떨칠 수 있었던 것 같아요.</p><p>보영: Swift 언어의 Reference가 다른 언어에 비해 부족하고, RxSwift는 자료가 더 없어서 초반에 기술적인 장벽에 막히는 느낌이 들었습니다. 게다가 MVVM 패턴까지 적용한 자료를 찾기가 더더욱 힘들어서 어떻게 해야할 지 잘 몰랐으나, iOS 팀 내부에서 리서치를 진행하고, 회사 Slack의 #tech_stackoverflow 채널에 질문을 올려서 해결했습니다. 커뮤니티 활동 (RxSwift)도 많은 도움이 되었어요.</p><p>관수: 저도 초반에 적응하는 데 힘들었는데, 업무 시간에 다양한 지식을 적극적으로 공유하는 자리가 많아서 빠르고 신속하게 새로운 지식을 효과적으로 전달 받을 수 있었고, 결과적으로 이러한 small talking이 제가 iOS 팀에 빠르게 적응할 수 있게 도와준 것 같아 만족스럽습니다.</p><p>보영: 👍</p><p>찬울: 그리고 금융 앱을 개발하기 때문에 보안을 엄청 신경써서 앱을 개발하고 있습니다. 그러다 보니 코드 한줄 한줄에 약간의 부담이 있었는데, 코드 리뷰를 통해 서로 놓친 부분을 잡아주고, 보안팀에서 많은 도움을 주셔서 요즘은 보안에 대한 심한 부담을 느끼지는 않는 것 같아요. (보안팀 사랑합니다 💕)</p><h4>iOS팀에게 애플이란?</h4><p>보영: 나의 복잡한 아이덴티티를 대신 설명해주는 존재</p><p>찬울: 애플은 안망합니다 (웃음)</p><p>보영: 그렇지만 전 레이니스트를 더 사랑합니다. (찡끗)</p><p>관수: 저 같은 경우에는 App Store를 통해 개발 시장 자체를 넓혀주었기 때문에 약간 밥통같은 존재라고 생각해요.</p><p>찬울: 저는 11살 때 처음으로 iPod을 쓰고, 13살 때 고장난 MacBook을 학원 선생님께 샀었습니다. 고장난 맥북에서 하드디스크를 바꿔끼니까 잘 되더라구요. 선생님 감사합니다 😋</p><p>Mac OS를 사용하며 느꼈던 완벽주의, 절제된 디자인과 마감을 보면서 희열을 느꼈었는데, 돌아보면 애플이 제 라이프 스타일에 많은 영향을 끼쳤다는 것을 느꼈습니다.</p><p>결정적으로 그들의 제품을 소비하는 것에서 벗어나, 그들의 제품을 이용해 세상을 좀 더 아름답게 만들 수 있게 도와준 존재라고 생각합니다.</p><h4>마지막으로 레이니스트를 한 줄로 표현한다면?</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7pE8cu9qTiru7QqPIG4E-A.jpeg" /></figure><p>보영: <strong>삶 자체에 동기부여가 되는 회사</strong>인 것 같아요. 개인적으로 제 자신이 지향하는 비전과 회사의 비전이 일치할 때 시너지가 난다고 생각하는데, 레이니스트의 비전이 제가 지향하는 비전과 일치하고 있어 꿈꾸던 직장이라고 생각합니다.</p><p>찬울: 회사는 보통 사람과 사업 아이템으로 결정된다고들 하는데, 레이니스트는 둘 다를 충족시킨 완전체에 가까운 회사라고 생각해요. <strong>무엇보다도 같이 일하는 동료들이 제일 좋아요</strong>. 함께 일하다 보면 이 사람들과는 어떤걸 하더라도 성공시킬 수 있다는 확신이 듭니다.</p><p>관수: 제가 근무했던 다른 회사들보다 애자일 철학을 잘 추구하려 하는 회사라고 생각합니다. <strong>애자일 철학을 추구하는 과정에서 저도 같이 성장할 수 있어</strong> 굉장히 만족하고 있습니다.</p><p>앞으로 이어질 인터뷰들을 기대해주세요!</p><figure><a href="https://rainist.com/members"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-O4npzhkh2lpXPaDQ6ETQA.png" /></a></figure><figure><a href="https://rainist.com/recruit"><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7UG25N69Njz5SSkQfbb6NQ.png" /></a></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=947687306684" width="1" height="1"><hr><p><a href="https://medium.com/rainist-engineering/meet-our-ios-chefs-947687306684">Meet Our Chefs: 뱅크샐러드 iOS팀을 만나다</a> was originally published in <a href="https://medium.com/rainist-engineering">Rainist Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안녕하세요, 먼저 글을 읽어주셔서 감사합니다 :D]]></title>
            <link>https://medium.com/@devholic/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-%EB%A8%BC%EC%A0%80-%EA%B8%80%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%A3%BC%EC%85%94%EC%84%9C-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-d-abddf639babe?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/abddf639babe</guid>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Tue, 06 Mar 2018 13:27:19 GMT</pubDate>
            <atom:updated>2018-03-06T13:27:19.297Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요, 먼저 글을 읽어주셔서 감사합니다 :D</p><p>첫번째 질문의 경우</p><p>저희는Realm.getDefaultInstance 를 통해 Instance를 가져온 다음 Kotlin에서 제공하는<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/use.html">use</a> 를 활용해 Database에 접근하고 있는데요, Realm Instance가 Closable한 객체이기 때문에 use 에 넘겨준 block이 실행되고 나면 close 가 호출되게 됩니다.</p><p>두번째 질문에 대해서는 저희도 마땅한 방법을 찾지 못해, 적어주신 것 처럼SingleUseCase , MaybeUseCase 등을 만들어서 사용하고 있습니다.</p><p>댓글을 이제서야 보게 되어 답변이 늦어졌네요 ㅠㅠ 양해 부탁드립니다!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=abddf639babe" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안녕하세요, 먼저 부족한 글을 읽어주셔서 감사합니다 :D]]></title>
            <link>https://medium.com/@devholic/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-%EB%A8%BC%EC%A0%80-%EB%B6%80%EC%A1%B1%ED%95%9C-%EA%B8%80%EC%9D%84-%EC%9D%BD%EC%96%B4%EC%A3%BC%EC%85%94%EC%84%9C-%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-d-a8f42fa49ebc?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/a8f42fa49ebc</guid>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Fri, 10 Nov 2017 04:44:20 GMT</pubDate>
            <atom:updated>2017-11-15T04:42:54.014Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요, 먼저 부족한 글을 읽어주셔서 감사합니다 :D</p><p>저희 앱이 공인인증서 기반의 앱이다 보니 국내에서만 사용한다는 가정을 하고 코드를 작성한게 맞습니다.</p><p>Eastern Arabic같은 경우는 사실 방금 환님께서 알려주지 않으셨더라면 이런 케이스가 있는지도 몰랐을 것 같습니다. 말씀 해주신 것 처럼 parse 메소드를 사용하면 깔끔하게 edge case까지 처리할 수 있겠네요 :D</p><p>감사합니다!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a8f42fa49ebc" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[알아두면 쓸데있는 신비한 Locale의 세계]]></title>
            <link>https://medium.com/rainist-engineering/awesome-locale-world-c8612faa11e?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/c8612faa11e</guid>
            <category><![CDATA[android]]></category>
            <category><![CDATA[android-app-development]]></category>
            <category><![CDATA[localization]]></category>
            <category><![CDATA[app-development]]></category>
            <category><![CDATA[software-development]]></category>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Wed, 08 Nov 2017 09:30:36 GMT</pubDate>
            <atom:updated>2018-05-18T07:48:04.021Z</atom:updated>
            <content:encoded><![CDATA[<p>얼마 전 <a href="https://www.wanted.co.kr/wd/4466">뱅크샐러드 고객감동팀</a>에 한 건의 버그 리포트가 도착했습니다. 내역 수정 화면에서 <strong>금액을 수정하기만 하면 무조건 0원으로 저장되는 버그</strong>였는데요. 앱 출시 이후로 그런 버그는 단 한 번도 발생한 적이 없었고, 저희가 보유한 테스트 기기로 해당 현상을 재현해보려고 해도 재현 할 수 없었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/450/1*otG00n7nnIbPdiWKxKB5OA.png" /><figcaption>진짜 왜 이러는지 1도 모르겠다…</figcaption></figure><p>그러던 중, 고객님이 보내주신 스크린샷에서 이상한 점을 발견했습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/720/1*DXWRsWksIEPQZE20x0PK8g.png" /><figcaption>실제 고객님께서 보내주신 스크린샷이 아닌 보내주신 스크린샷을 재현한 화면입니다.</figcaption></figure><p>혹시 위 스크린샷에서 이상한 부분을 발견하셨나요?</p><p><em>그렇습니다! 이 고객님은 바로 </em><strong><em>독일어</em></strong><em>로 핸드폰을 사용하고 계셨습니다!</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*inhcPLz6Fx81N7jr-0GNfg.png" /><figcaption>독.일.조.아 (본인 촬영)</figcaption></figure><h3>독일어가 왜 문제인가</h3><p>독일어 문제가 아닌 <strong><em>Locale</em>에 대한 이해가 부족한 저희의 문제</strong>였습니다.</p><p>빠른 이해를 도와드리기 위해 예시를 하나 준비해봤습니다. 한국에서 당연히 <strong>123,456.78</strong>이라고 쓰는 숫자를 독일에서는 어떻게 쓸까요?</p><p>정답은 <strong>123.456,78</strong>입니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KLybxm_DsenZW6KyH_VvyA.png" /><figcaption>금액 표시가 다른걸 보고 그냥 그런가 보다 하고 지나쳤었는데…</figcaption></figure><p>좀 더 찾아보니 우리나라와 독일을 포함한 전 세계 국가들에서는 아래와 같이 크게 <strong>여섯 가지 방법</strong>으로 숫자를 표시하고 있었습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uk0Y2aYzcABW5RLTvPQZ_A.png" /><figcaption>다 같은 숫자입니다 ʅ（´◔౪◔）ʃ</figcaption></figure><p>뱅크샐러드에서는 금액을<em> formatting</em> 할 때 String.format 메소드를 사용하는데, 특정 locale 을 설정하지 않고 Locale.getDefault() 로 설정하여 사용하고 있습니다.</p><p>하지만 금액 입력을 받는 <em>EditText</em>의 <em>formatting</em>과 <em>validation</em>을 처리하기 위한 <em>TextWatcher</em>를 <strong>천 단위는 무조건 </strong><strong>, 로 구분한다는 가정 하에 코드를 작성했기 때문에</strong> 독일 문화권에서는 올바른 표현인 <strong>1.234.567,89</strong>에 한국에서 소수점을 표현하는 기호인 . 이 여러 번 들어 있어 숫자 <em>validation</em>에 실패해 발생한 문제였습니다.</p><h3>해결 방법</h3><p>DecimalFormatSymbols 를 사용하면 쉽게 해결할 수 있습니다. 다음과 같이 DecimalFormatSymbols 의 <em>Instance</em>를 가져온 다음 <em>decimalSeparator</em>와 <em>groupingSeparator</em>를 가져와서 <em>formatting</em> 또는 <em>validation</em>을 진행하면 됩니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/cc8444bb74897e8d40927f8d4824ea05/href">https://medium.com/media/cc8444bb74897e8d40927f8d4824ea05/href</a></iframe><h3>글을 맺으며</h3><p><em>Locale</em>에 대한 부족한 이해가 고객님의 큰 불편으로 이어져 죄송한 마음이 들었지만, 추후 개발할 때 사용자 분들의 다양한 사용 환경에 따른 변수를 고려해야 한다는 점을 깨달을 수 있는 좋은 기회였다고 생각합니다.</p><p>읽어주셔서 감사합니다 :D</p><p>끝으로 레이니스트에서 고객들의 목소리에 귀를 기울여가며 금융정보의 비대칭성을 함께 해결해 나갈 <a href="https://rainist.com/recruit/engineer">개발자를 찾습니다</a>!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c8612faa11e" width="1" height="1"><hr><p><a href="https://medium.com/rainist-engineering/awesome-locale-world-c8612faa11e">알아두면 쓸데있는 신비한 Locale의 세계</a> was originally published in <a href="https://medium.com/rainist-engineering">Rainist Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kotlin, AWS 그리고 레이니스트와 함께라면 육군훈련소에서도 외롭지 않아]]></title>
            <link>https://medium.com/rainist-engineering/writing-aws-lambda-function-in-kotlin-b3faf3f55777?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/b3faf3f55777</guid>
            <category><![CDATA[rxjava]]></category>
            <category><![CDATA[kotlin]]></category>
            <category><![CDATA[rainist]]></category>
            <category><![CDATA[aws-lambda]]></category>
            <category><![CDATA[app-development]]></category>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Fri, 15 Sep 2017 06:09:11 GMT</pubDate>
            <atom:updated>2018-05-18T07:48:48.230Z</atom:updated>
            <content:encoded><![CDATA[<p>올해 <em>Google IO</em>에서 <a href="https://blog.jetbrains.com/kotlin/2017/05/kotlin-on-android-now-official"><em>Kotlin</em>이 <em>Android</em> 공식 언어로 선정</a>되었는데요, 레이니스트에서는 작년부터 뱅크샐러드 <em>Android</em> 앱을 100% <em>Kotlin</em>으로 작성하고 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GP9SlOTjVWeWp2xzjejTLw.png" /><figcaption>It’s real</figcaption></figure><p><em>Kotlin</em>의 특징 중 하나는 <em>Java</em>와 100% 호환된다는 점인데요, 이번 포스트에서는 <em>AWS</em>의 <a href="https://aws.amazon.com/ko/lambda/details/"><em>Lambda Function</em></a>을 <em>Kotlin</em>으로 작성한 경험을 공유하고자 합니다.</p><h3>들어가면서</h3><p>레이니스트는 병무청에서 지정한 <a href="https://www.mma.go.kr/contents.do?mc=mma0000760">병역지정업체</a>입니다. 아직 병역의 의무를 해결하지 못한 분이라면 레이니스트에서 산업기능요원으로 근무하면서 병역의 의무를 함께 할 수 있습니다. (현재는 보충역 대상자만 가능합니다)</p><p>저는 올해 초부터 레이니스트에서 산업기능요원으로 병역의 의무를 수행하고 있는데요. 열심히 뱅크샐러드 앱을 만들고 있는 도중 한 통의 편지를 받게 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Xq6xHmfvZEhSh_6JoM7mNA.png" /><figcaption>국방의 의무 축하해~♪</figcaption></figure><p>바로 군사교육 소집 통지서였습니다. 통지서를 받고 나서 (말로만) 훈련을 받거나 사회 소식을 못 듣는 건 별로 걱정이 되지 않았는데 회사 소식을 4주 동안 못 듣게 되면 나오고 나서 업무를 진행하는데 흐름을 못 탈 것 같아(?) 회사 동료분들께 편지 작성을 부탁드릴 간단한 <a href="https://api.slack.com/bot-users"><strong><em>Slack Bot</em></strong></a>을 만들기로 했습니다. <em>Slack</em>에서 기본적으로 제공하는 <em>Reminder</em>를 사용해도 되지만 <em>AWS Lambda</em>를 활용해보고 싶어 주말에 조금씩 시간을 내서 만들기로 했습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/569/1*Pwt6IJLgkvo7fAY_uLReMA.png" /><figcaption>사실 주말에 할게 없어서…</figcaption></figure><h3>만들기 시작!</h3><p>사실 처음 목표는 육군훈련소 홈페이지에 자동으로 편지를 쓰게 해주는 <em>Lambda Function</em>을 만들계획이었으나, 본인인증이라는 거대한 벽에 막혀 다음과 같은 흐름을 가지는 <em>Lambda Function</em>을 만들기로 했습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*njSATgm2IgBhxVgQ_td4qQ.png" /><figcaption>간단하쥬?</figcaption></figure><p>가장 먼저, <a href="https://api.slack.com/apps?new_app=1"><em>Slack API 사이트</em></a>에서 <em>Slack App</em>을 만들고 <em>Lambda Function</em>에서 Slack 채널로 메시지를 보낼 때 사용할 <strong><em>Webhook URL</em></strong>을 발급받습니다. 생성된 Slack App을 관리 페이지 좌측의 <em>Incoming Webhooks</em>에서 다음 사진과 같이 <em>Webhook URL</em>을 발급받을 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*65JzbdxHAbZDfhvAZKY8Ig.png" /></figure><h3>Lambda Function 작성하기</h3><p>먼저 <a href="https://mvnrepository.com/artifact/com.amazonaws/aws-lambda-java-core/1.1.0"><em>aws-lambda-java-core</em></a>를 <em>gradle dependency</em>로 추가하고, <em>Lambda Function</em>의 <em>Entry Point </em>역할을 할<em> </em><a href="http://javadox.com/com.amazonaws/aws-lambda-java-core/1.1.0/com/amazonaws/services/lambda/runtime/RequestHandler.html"><strong><em>RequestHandler</em></strong></a>를 구현합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5cbf29ed68ed09906a367b0507e570d5/href">https://medium.com/media/5cbf29ed68ed09906a367b0507e570d5/href</a></iframe><p><em>handleRequest</em> 메소드를 어떻게 작성할까 고민하다, 뱅크샐러드 안드로이드 앱의 <strong><em>UseCase</em></strong>처럼 코드를 작성하기로 했습니다. (자세한 내용은 <em>Droid Knights 2017</em>에서 저희 CTO님께서 발표하신 <a href="https://academy.realm.io/kr/posts/clean-architecture-in-android"><strong><em>Clean Architecture in Android</em></strong></a>발표를 참고해주세요)</p><p>일단, 육군훈련소 홈페이지에서 제가 배치된 연대, 중대, 소대 정보를 가져올 <a href="https://github.com/devholic/epilogue/blob/master/src/main/kotlin/io/devholic/epilogue/repository/KATCRepository.kt"><em>KATCRepository</em></a>, 편지 써줄 사람을 지목하고 채널에 메시지를 보낼 <a href="https://github.com/devholic/epilogue/blob/master/src/main/kotlin/io/devholic/epilogue/repository/SlackRepository.kt"><em>SlackRepository</em></a>, 채널에 보낼 메시지를 만들 <a href="https://github.com/devholic/epilogue/blob/master/src/main/kotlin/io/devholic/epilogue/repository/MessageRepository.kt"><em>MessageRepository</em></a>, 끝으로 지목당한 분이 편지에 쓸 내용이 없는 경우를 대비해 편지에 바깥 세상(?) 소식 요약본을 담기 위한 <a href="https://github.com/devholic/epilogue/blob/master/src/main/kotlin/io/devholic/epilogue/repository/NaverNewsRepository.kt"><em>NaverNewsRepository</em></a><em>,</em> 총 4개를 만들었습니다.</p><p><em>Repository</em>의 각 메소드들은 비동기 처리를 위해 <a href="http://reactivex.io/RxJava/javadoc/io/reactivex/Single.html"><em>Single</em></a>, 혹은 <a href="http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html"><em>Completable</em></a>을 <em>return</em>하게 되어있는데, .blockingGet()을 사용하면 <em>Stream</em>이 종료될 때 <em>Lambda Function</em>이 종료될 수 있도록 <em>blocking </em>처리 할 수 있습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f8090a200706b392a705fbbb2ecac3e5/href">https://medium.com/media/f8090a200706b392a705fbbb2ecac3e5/href</a></iframe><p><em>Slack Bot</em>을 다 만들었으니, 이제 <em>AWS</em>에 업로드하는 일만 남았습니다. <em>Gradle Script</em>에 <em>jar task</em>를 추가해서 <em>jar</em>파일로 빌드합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d9476902998af3b4e70abcbb6704fd99/href">https://medium.com/media/d9476902998af3b4e70abcbb6704fd99/href</a></iframe><p><em>AWS Console</em>을 통해 <em>Lambda Function</em>을 생성해주고, 생성된 <em>jar</em>파일을 업로드 하면 되는데요. <em>trigger</em>는 일단 비워둔 상태로, <strong>Lambda 함수 핸들러 및 역할</strong>을<strong> </strong>다음과 같이 런타임은 <strong><em>Java8</em></strong>, 핸들러는 package.classname::handlerMethodName형식으로 생성하면 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mWKJcNDOXH0wmeSw76DGcw.png" /></figure><p><em>Slack Bot</em>의 전체 소스는<em> </em><a href="https://github.com/devholic/epilogue"><strong><em>GitHub</em></strong></a>에서 확인하실 수 있습니다.</p><p><a href="https://github.com/devholic/epilogue">devholic/epilogue</a></p><h3>CloudWatch Event 만들기</h3><p>이제 일정 주기마다 위에서 생성한 <em>Lambda Function</em>을 실행을 시켜야 하는데, 이 문제는 <a href="https://aws.amazon.com/ko/cloudwatch/"><em>CloudWatch</em></a><em> Event</em>로 간단하게 해결할 수 있습니다. <em>CloudWatch Event</em>는 <em>Cron</em>식을 지원하는데요. 저는 <strong>화요일, 금요일 아침 9시</strong>에만 메시지를 보내기로 했으므로 다음 식을 사용했습니다.</p><p><em>0 0 ? * TUE, FRI *</em></p><p>여기서 중요한 점은 <strong>시간대가 <em>GMT +0</em></strong>으로 설정되어있기 때문에, <strong>서울 시간 기준으로 -9시간을 해줘야 원하는 스케줄대로 작동</strong>합니다. <em>Cron</em>식을 입력하고 화면 우측의 호출할 대상을 위에서 생성한 <em>Lambda</em> 함수로 지정하면, 모든 준비가 끝납니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IOTAYohisstB6TbI6AUtVw.png" /><figcaption>끝!</figcaption></figure><h3>입소, 그리고 수료</h3><p>입소하고 시간은 흐르고 흘러 CloudWatch Event가 발생하는, 그리고 슬랙봇이 작동할 수도 있는 첫 번째 화요일이 되었습니다. 제 입소 정보는 화요일 오후쯤에 육군훈련소 홈페이지에 올라가니 편지가 오지 않을 거라 예상 했으나…</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*3xXtAZp_-YXFvM3UQ4MVnA.png" /><figcaption>다시봐도 감동</figcaption></figure><p>봇이 작동하지 않았음에도 첫날에 편지가 두 통이나 왔습니다 ㅠㅠ</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/502/1*rYpUc_LTSgNxGhtmr7J_Ew.png" /><figcaption>가… 감동이야… <em>(슬랙 봇 같은건 필요 없었어!)</em></figcaption></figure><p>동료 분들과 가족들에게 편지를 받고 나니, 봇이 정상적으로 동작하는지 안 동작하는지 확인할 수 있는 금요일이 손꼽아 기다려지기 시작했습니다. (사회소식이 궁금하지 않다고 했었지만 진짜 궁금해서 애가 탔었… 볼 수 있는 게 국방일보 밖에 없었습니다 ㅠㅠ)</p><p>그리고 손꼽아 기다리던 금요일 저녁, 편지가 도착했습니다!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KIa4eZARMVelBWNRMd3D9Q.png" /><figcaption>기술부채 말고 편지부채!</figcaption></figure><blockquote>편지 써준다던 친구들은 거의 안써주고…</blockquote><blockquote>레이니스트 더럽… the love…</blockquote><p>수료하고 난 뒤 <em>Slack</em>을 켜서 봇이 동작한 모습을 보니 뿌듯한 마음 반, 편지 써주신 동료분들에 대한 감사의 마음 반으로 가득 찼습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*LaHmp-XmB9CiWmS4u4P3WA.png" /><figcaption>돌아와서 슬랙을 보니…</figcaption></figure><h3>글을 맺으며</h3><ol><li><em>Kotlin</em>은 <em>Java</em>와 100% 호환되기에 <em>AWS Lambda Function</em>을 <em>Kotlin</em>으로도 작성할 수 있습니다.</li><li>레이니스트에서 금융정보의 비대칭성을 함께 해결해 나갈 <a href="https://rainist.com/recruit/engineer">개발자를 찾습니다</a>. (산업기능요원 보충역 신규 편입 / 전직 가능)</li><li>군인에게 편지는 힘이 됩니다 (저희와 함께하시다 훈련소 가시게 되면 제가 1주일에 2번 편지써드릴께요 ㅠㅠ)</li></ol><p><em>아, 마지막으로 다시 한번 편지를 써주신 분들께 감사의 말씀을 전합니다 ㅠㅠ</em></p><p>읽어주셔서 감사합니다 :D</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b3faf3f55777" width="1" height="1"><hr><p><a href="https://medium.com/rainist-engineering/writing-aws-lambda-function-in-kotlin-b3faf3f55777">Kotlin, AWS 그리고 레이니스트와 함께라면 육군훈련소에서도 외롭지 않아</a> was originally published in <a href="https://medium.com/rainist-engineering">Rainist Engineering</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[저도 마음같아서는 클라우드로 넘어가고싶지만 비용문제때문에 넘어가기가 조금 애매하네요 ㅠㅠ]]></title>
            <link>https://medium.com/@devholic/%EC%A0%80%EB%8F%84-%EB%A7%88%EC%9D%8C%EA%B0%99%EC%95%84%EC%84%9C%EB%8A%94-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EB%A1%9C-%EB%84%98%EC%96%B4%EA%B0%80%EA%B3%A0%EC%8B%B6%EC%A7%80%EB%A7%8C-%EB%B9%84%EC%9A%A9%EB%AC%B8%EC%A0%9C%EB%95%8C%EB%AC%B8%EC%97%90-%EB%84%98%EC%96%B4%EA%B0%80%EA%B8%B0%EA%B0%80-%EC%A1%B0%EA%B8%88-%EC%95%A0%EB%A7%A4%ED%95%98%EB%84%A4%EC%9A%94-%E3%85%A0%E3%85%A0-44d8134c3ee9?source=rss-7c59a12b4ac7------2</link>
            <guid isPermaLink="false">https://medium.com/p/44d8134c3ee9</guid>
            <dc:creator><![CDATA[Sunghoon Kang]]></dc:creator>
            <pubDate>Sat, 01 Jul 2017 04:50:06 GMT</pubDate>
            <atom:updated>2017-07-01T04:50:06.588Z</atom:updated>
            <content:encoded><![CDATA[<p>저도 마음같아서는 클라우드로 넘어가고싶지만 비용문제때문에 넘어가기가 조금 애매하네요 ㅠㅠ</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=44d8134c3ee9" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>