<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by SeongUg Steve Jung on Medium]]></title>
        <description><![CDATA[Stories by SeongUg Steve Jung on Medium]]></description>
        <link>https://medium.com/@jsuch2362?source=rss-c2ac5c1d1623------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*UDwcfCr853vortz2-xTdYQ.jpeg</url>
            <title>Stories by SeongUg Steve Jung on Medium</title>
            <link>https://medium.com/@jsuch2362?source=rss-c2ac5c1d1623------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 07:18:06 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@jsuch2362" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[이중과세보단 한국에 가져올때 (맥시멈 세금) -(싱가포르에서 낸 세금) 으로 낸다고 들었습니다.]]></title>
            <link>https://medium.com/@jsuch2362/%EC%9D%B4%EC%A4%91%EA%B3%BC%EC%84%B8%EB%B3%B4%EB%8B%A8-%ED%95%9C%EA%B5%AD%EC%97%90-%EA%B0%80%EC%A0%B8%EC%98%AC%EB%95%8C-%EB%A7%A5%EC%8B%9C%EB%A9%88-%EC%84%B8%EA%B8%88-%EC%8B%B1%EA%B0%80%ED%8F%AC%EB%A5%B4%EC%97%90%EC%84%9C-%EB%82%B8-%EC%84%B8%EA%B8%88-%EC%9C%BC%EB%A1%9C-%EB%82%B8%EB%8B%A4%EA%B3%A0-%EB%93%A4%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4-d3470424b26f?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/d3470424b26f</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Wed, 10 Apr 2019 14:27:19 GMT</pubDate>
            <atom:updated>2019-04-10T14:27:19.192Z</atom:updated>
            <content:encoded><![CDATA[<p>이중과세보단 한국에 가져올때 (맥시멈 세금) -(싱가포르에서 낸 세금) 으로 낸다고 들었습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d3470424b26f" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ViewModel 에서 직접적으로 View 에 관여하고자 할때]]></title>
            <link>https://medium.com/@jsuch2362/viewmodel-%EC%97%90%EC%84%9C-%EC%A7%81%EC%A0%91%EC%A0%81%EC%9C%BC%EB%A1%9C-view-%EC%97%90-%EA%B4%80%EC%97%AC%ED%95%98%EA%B3%A0%EC%9E%90-%ED%95%A0%EB%95%8C-3e38566e8ced?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/3e38566e8ced</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Thu, 20 Dec 2018 15:00:41 GMT</pubDate>
            <atom:updated>2018-12-20T15:00:41.430Z</atom:updated>
            <content:encoded><![CDATA[<ol><li>ViewModel 에서 직접적으로 View 에 관여하고자 할때</li></ol><p>여기에는 2가지 방법을 사용할 수 있습니다.<br>한가지는 reverse-Databinding 을 이용해서 뷰의 정보를 Observable 을 통해서 전달 받을 수 있는 것인데요 이 방법은 꽤나 손이 많이 가는 방법이 있고요. 다른 하나는 ViewUsecase 를 전달 받는 방식입니다.</p><p>저는 ViewUsecase 를 더 많이 사용하는 편입니다. 단 DI 시점에 따라서 ViewUsecase 에 View 를 직접 넣지 못하는 경우가 있기 때문에 Lazy 로 View 를 가져올 수 있는 인터페이스를 주입받아서 처리합니다.</p><p>2. 예상하신대로DI 툴을 쓰신다면 문제 없습니다. :D</p><p>3. ViewModel 의 UnitTest 경우, ViewUsecase 는 mocking 하여 테스트하고 ViewUsecase 만 별도로 UnitTest 코드를 작성하는 방식을 통해 작성합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3e38566e8ced" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[안녕하세요.]]></title>
            <link>https://medium.com/@jsuch2362/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94-67fc744c3e7e?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/67fc744c3e7e</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Tue, 18 Dec 2018 14:48:10 GMT</pubDate>
            <atom:updated>2018-12-18T14:48:10.326Z</atom:updated>
            <content:encoded><![CDATA[<p>안녕하세요.</p><p>메모리 저장이 필요한 정보는 앱레벨에서 Singleton 객체로 저장하고<br>onCreate-onDestroy 에 대한 처리는 RxLifecycle 를 이용해서 ViewModel 에서만 다 처리하고 있습니다.</p><p>RxLifecycle 로 dispose 를 알려주기 위해 별도로 RxActivity 같은 기본 클래스 하나 만들어서 ViewModel 에 전달합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=67fc744c3e7e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Yes, You are correct.]]></title>
            <link>https://medium.com/@jsuch2362/yes-you-are-correct-77c2a0278d4c?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/77c2a0278d4c</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Mon, 08 Oct 2018 16:09:46 GMT</pubDate>
            <atom:updated>2018-10-08T16:09:46.454Z</atom:updated>
            <content:encoded><![CDATA[<p>Yes, You are correct.</p><p>But sometimes Presenter have to interact with adapter data.</p><p>Guess that Facebook support Likebutton at each posting.</p><p>when user click Like, it should have network api. It means Presenter have to know data, at least id of data.</p><p>In this case, Many people implement wrong. In Presenter, it calls View.getClickedData() .</p><p>After network, Presenter will update data to notify successful network.<br>In this case, also Between Presenter and View, they communicate many time.</p><p>So in this posting, I want to explain how to make these decoupling.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=77c2a0278d4c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Android MVVM : Lifecycle 감지하기]]></title>
            <link>https://medium.com/@jsuch2362/android-mvvm-lifecycle-%EA%B0%90%EC%A7%80%ED%95%98%EA%B8%B0-204c4309436?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/204c4309436</guid>
            <category><![CDATA[lifecycle]]></category>
            <category><![CDATA[android]]></category>
            <category><![CDATA[mvvm]]></category>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Mon, 08 Oct 2018 15:58:31 GMT</pubDate>
            <atom:updated>2018-10-08T15:58:31.373Z</atom:updated>
            <content:encoded><![CDATA[<h3>Android MVVM : Lifecycle 감지하기</h3><p>Activity/Fragment 와 ViewModel 를 분리하고자 하더라도 몇몇 특수한 경우에 대비하는 코드가 필요한데 오늘은 그중에서 Lifecycle 감지에 대해 알아보도록 하겠습니다.</p><p>예를 들면, 채팅화면에서 메세지를 쓰다가 전송하기 전에 화면을 닫은 경우 메세지를 특정 영역에 저장하였다가 다시 채팅화면으로 돌아온 경우 마지막 쓰다만 메세지를 보여줘야하는 경우가 필요합니다. 이럴 경우 onDestroy 콜백을 받아서 처리해야 합니다.</p><p>위의 콜백을 받도록 하기 위해 Lifecycle 진입시 콜백을 호출하는 인터페이스를 만들어 ViewModel 이 Register, Observing 를 하도록 하는 방법 구현하도록 할 것입니다.</p><h3>Lifecycle 진입시 콜백 호출하도록 하기</h3><p>Activity/Fragment 에서 ViewModel의 Lifecycle 과 관련된 함수를 직접 호출하는 방식이 있습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/ce4395a4576023022cdf56408ac4c10d/href">https://medium.com/media/ce4395a4576023022cdf56408ac4c10d/href</a></iframe><p>위처럼 LifecycleOwner/Register/Notifier 를 정의하고 구현하는 방식입니다. 이 방식은 AAC 의 LifecycleObserver 와 Provider 를 간단한 방식으로 구현한 것입니다.</p><p>위의 방식은 Event 를 받아 처리하는 코드가 많아질 때 가독성이 좋지 않기 때문에 RxJava 를 이용해서 바꿔보도록 하겠습니다.</p><h4>RxJava 를 이용해서 Lifecycle 콜백 처리하기</h4><p>RxJava 로 구현한 경우 기초 코드는 위의 방법보다 다소 많습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4578346346c8b54d3a5f3c0e8ae3b665/href">https://medium.com/media/4578346346c8b54d3a5f3c0e8ae3b665/href</a></iframe><p>ViewModel 에서는 이전의 구현 방식보다는 좀 더 자유도가 있는 구현을 할 수가 있습니다.</p><h3>종합</h3><p>위의 구현은 기존의 AAC 의 LifecycleOwner, RxLifecycle 과 매우 유사한 형태의 구현이 됩니다. 기존의 알려진 구현 방식들이 MVVM 에서 명시적인 Lifecycle 을 분리시킬 수도록 할 수 있고 이는 Activity 와 ViewModel 간 독립성을 얻을 수 있습니다.</p><p>다음 포스팅에서는 현재까지의 구현을 통해 다른 모습으로 MVVM 을 활용할 수 있는 예시를 공유하도록 하겠습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=204c4309436" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LiveData 는 모델의 변경을 감지하고 이를 화면에 반영하기 위해 만들어졌어요.]]></title>
            <link>https://medium.com/@jsuch2362/livedata-%EB%8A%94-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EB%B3%80%EA%B2%BD%EC%9D%84-%EA%B0%90%EC%A7%80%ED%95%98%EA%B3%A0-%EC%9D%B4%EB%A5%BC-%ED%99%94%EB%A9%B4%EC%97%90-%EB%B0%98%EC%98%81%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%A1%8C%EC%96%B4%EC%9A%94-e0161192a895?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/e0161192a895</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Mon, 03 Sep 2018 03:21:11 GMT</pubDate>
            <atom:updated>2018-09-03T03:21:11.320Z</atom:updated>
            <content:encoded><![CDATA[<p>LiveData 는 모델의 변경을 감지하고 이를 화면에 반영하기 위해 만들어졌어요. 화면에 반영하는 과정에서 onPause-onResume 의 라이프사이클 영향을 받기 때문에 원하시는 시점의 백그라운드에서 갱신이 제때 안되는 것이라 생각합니다.</p><p>LiveData -&gt; Lifecycle 체크 -&gt; Databinding 업데이트 처리</p><p>이런 순서라고 보시면 되요.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e0161192a895" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[아뇨. 구분짓진 않습니다. 데이터를 가져와야 하는 경우에도 씁니다. usecase 라 부를만한 경우가 워낙다양해서 딱히 규정짓고 쓰진 않습니다.]]></title>
            <link>https://medium.com/@jsuch2362/%EC%95%84%EB%87%A8-%EA%B5%AC%EB%B6%84%EC%A7%93%EC%A7%84-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%99%80%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8F%84-%EC%94%81%EB%8B%88%EB%8B%A4-usecase-%EB%9D%BC-%EB%B6%80%EB%A5%BC%EB%A7%8C%ED%95%9C-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9B%8C%EB%82%99%EB%8B%A4%EC%96%91%ED%95%B4%EC%84%9C-%EB%94%B1%ED%9E%88-%EA%B7%9C%EC%A0%95%EC%A7%93%EA%B3%A0-%EC%93%B0%EC%A7%84-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4-62ea90581d87?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/62ea90581d87</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Sat, 01 Sep 2018 04:19:54 GMT</pubDate>
            <atom:updated>2018-09-01T04:19:54.684Z</atom:updated>
            <content:encoded><![CDATA[<p>아뇨. 구분짓진 않습니다. 데이터를 가져와야 하는 경우에도 씁니다. usecase 라 부를만한 경우가 워낙다양해서 딱히 규정짓고 쓰진 않습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=62ea90581d87" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[감사합니다. :D]]></title>
            <link>https://medium.com/@jsuch2362/%EA%B0%90%EC%82%AC%ED%95%A9%EB%8B%88%EB%8B%A4-d-3fc75d255858?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/3fc75d255858</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Thu, 30 Aug 2018 08:06:35 GMT</pubDate>
            <atom:updated>2018-08-30T08:06:35.512Z</atom:updated>
            <content:encoded><![CDATA[<p>감사합니다. :D</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3fc75d255858" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[R.xx.yyy 는 String 이나 Drawable 의 조건 케이스가 워낙 다양하고 Unit Test 코드를 작성하는데 문제를 일으키진 않아서 다들 그냥 쓰고 있어요.]]></title>
            <link>https://medium.com/@jsuch2362/r-xx-yyy-%EB%8A%94-string-%EC%9D%B4%EB%82%98-drawable-%EC%9D%98-%EC%A1%B0%EA%B1%B4-%EC%BC%80%EC%9D%B4%EC%8A%A4%EA%B0%80-%EC%9B%8C%EB%82%99-%EB%8B%A4%EC%96%91%ED%95%98%EA%B3%A0-unit-test-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94%EB%8D%B0-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9D%BC%EC%9C%BC%ED%82%A4%EC%A7%84-%EC%95%8A%EC%95%84%EC%84%9C-%EB%8B%A4%EB%93%A4-%EA%B7%B8%EB%83%A5-%EC%93%B0%EA%B3%A0-%EC%9E%88%EC%96%B4%EC%9A%94-6273c26aa11a?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/6273c26aa11a</guid>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Thu, 30 Aug 2018 08:06:13 GMT</pubDate>
            <atom:updated>2018-08-30T08:06:13.145Z</atom:updated>
            <content:encoded><![CDATA[<p>R.xx.yyy 는 String 이나 Drawable 의 조건 케이스가 워낙 다양하고 Unit Test 코드를 작성하는데 문제를 일으키진 않아서 다들 그냥 쓰고 있어요.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6273c26aa11a" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ViewModel : 안드로이드에서 멀어지기]]></title>
            <link>https://medium.com/@jsuch2362/viewmodel-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90%EC%84%9C-%EB%A9%80%EC%96%B4%EC%A7%80%EA%B8%B0-e9016d0416c?source=rss-c2ac5c1d1623------2</link>
            <guid isPermaLink="false">https://medium.com/p/e9016d0416c</guid>
            <category><![CDATA[mvvm]]></category>
            <category><![CDATA[android]]></category>
            <dc:creator><![CDATA[SeongUg Steve Jung]]></dc:creator>
            <pubDate>Wed, 29 Aug 2018 16:20:23 GMT</pubDate>
            <atom:updated>2018-08-29T16:20:23.859Z</atom:updated>
            <content:encoded><![CDATA[<p>이번 포스팅에서는 ViewModel 을 안드로이드 프레임웍으로 부터 독립적으로 구성하는 과정에서 나오는 문제들을 알아보려고 합니다.</p><p>Android 는 일부 케이스에서 직접적으로 View 나 Context 에 접근해야만 할 수 있는 동작들이 있습니다. 이런 코드들은 지속적으로 ViewModel 이 Activity/Fragment 에 종속시키도록 합니다.</p><p>몇몇 케이스를 통해서 이를 해결하는 방법을 알아보도록 하겠습니다.</p><h4>리소스 접근하기</h4><p>화면을 갱신하는 과정에서 이미지나 문자열 리소스에 접근해야 하는 경우가 많습니다.</p><p>다음 코드는 문자열에 접근하기 위한 방법입니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0b22a318c61790dd82a2b8f99badcf5c/href">https://medium.com/media/0b22a318c61790dd82a2b8f99badcf5c/href</a></iframe><p>ViewModel 은 리소스에 접근하는 인터페이스를 컴포넌트로 하고 구현 클래스의 객체를 통해서 실제로 접근하도록 합니다.</p><p>테스트를 작성할 때는 Mocking 을 적절히 활용하면 의도된 테스트를 충분히 하실 수 있습니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8abe35c2de89a70b060f8a2d4c659779/href">https://medium.com/media/8abe35c2de89a70b060f8a2d4c659779/href</a></iframe><h4>Drawable Resource 처리하기</h4><p>이미지뷰에 이미지를 넣는 과정에서 최대한 Drawable 이나 Bitmap 을 노출하지 않기 위해 Databinding 을 활용합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c37f70291b8a7d19e285fd97cbb4d1b4/href">https://medium.com/media/c37f70291b8a7d19e285fd97cbb4d1b4/href</a></iframe><p>위의 방법은 Vector Resource 를 처리할 때도 유용합니다.</p><ul><li>URI Image 로드하기</li></ul><p>URI 형 이미지 로드는 대개 Glide 나 Picasso 와 같은 이미지 로더를 함께 씁니다. 이럴 경우 이미지 로더와 URI 를 동시에 바인딩이 되도록 하기 위해 BindingAdapter 의 requireAll 을 이용해서 처리하도록 합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/3085dc35faf553058c964c395f7d291b/href">https://medium.com/media/3085dc35faf553058c964c395f7d291b/href</a></iframe><p>위와 같이 선언하게 되면 bindUri 와 bindImageLoader 가 동시에 정의되어야 호출됩니다.</p><h4>View 상태 옵저빙 하기</h4><p>View 의 사이즈변경 과 같은 레이아웃 이벤트들을 모니터해야 하는 시점에 이르면 ViewModel 의 코드와 Activity/Fragment 코드 사이에서 굉장한 갈등이 시작됩니다. View 의 정보를 알기 위해서는 Activity/Fragment 로 부터 콜백을 받아야 하기 때문에 ViewModel 이 View 에 간섭하는 코드가 추가될 가능성이 큽니다.</p><p>이 경우에는 ViewUsecase 를 만들어 해당 뷰를 관찰하도록 합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c662cbcfb8cfb9d583f51e08369064c8/href">https://medium.com/media/c662cbcfb8cfb9d583f51e08369064c8/href</a></iframe><p>MainViewModel 을 생성하는 과정에서 View에 관여하는 LayoutCenterViewUsecase 를 전달합니다. 이제MainViewModel 은 LayoutCenterViewUsecase 를 통해서 View 의 정보를 간접적으로 접근할 수 있습니다.</p><h4>액티비티 실행하기</h4><p>액티비티를 실행하는 것 또한 앞선 Usecase 예시를 적용하도록 합니다.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/9631ccba6e59237d1de60b933b1f6a19/href">https://medium.com/media/9631ccba6e59237d1de60b933b1f6a19/href</a></iframe><p>위의 Usecase 를 ViewModel 을 생성 할 때 전달하고 필요할 때 showSecond() 를 호출하도록 합니다.</p><h4>정리</h4><p>위의 모든 예제들은 ViewModel 이 직접적으로 Context 나 View 에 접근하는 것을 피하기 위함입니다. 그렇게 함으로써 ViewModel 을 안드로이드로부터 독립적으로 유지되도록 합니다.</p><p>다음 포스팅에서는 ViewModel 이 Activity/Fragment 의 Lifecycle 을 감지하는 방법을 알아보도록 하겠습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e9016d0416c" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>