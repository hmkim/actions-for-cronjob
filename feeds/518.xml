<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Hubert Shin on Medium]]></title>
        <description><![CDATA[Stories by Hubert Shin on Medium]]></description>
        <link>https://medium.com/@hubert.shin?source=rss-aa085ed7fa1------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*FlLeFLDtkHq5bBFW.</url>
            <title>Stories by Hubert Shin on Medium</title>
            <link>https://medium.com/@hubert.shin?source=rss-aa085ed7fa1------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 10:47:37 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@hubert.shin" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[[Phase#8]]]></title>
            <link>https://medium.com/@hubert.shin/phase-8-aade7ef3cc0e?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/aade7ef3cc0e</guid>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Sat, 02 Feb 2019 14:37:47 GMT</pubDate>
            <atom:updated>2019-02-19T02:41:12.278Z</atom:updated>
            <content:encoded><![CDATA[<h3>[Phase#8] 애자일 10년</h3><p>2015년 6월 필자는 세명의 최고의 IT 전문가들과 식사를 했다.</p><p>전세계적으로 가장 많이 사용되는 개발 프레임웍인 스프링 프레임웍(Spring framework)을 만든 로드 존슨(Rod Johnson), 지속적인 딜리버리(Continuous delivery)라는 개념을 최초 정리한 제즈 험블(Jez Humble), 그리고 마지막으로는 쏘트웍스(ThoughtWorks)라는 회사에서 일하고 배포를 스테이지 별로 하는 디플로이 파이프라인을 실제 최초로 구현하고 컨셉을 정리한 팀 브라운(Tim brown)이었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/0*GgLz_JQWl-bBjmep" /><figcaption>[왼쪽부터 제즈험블, 로드존슨, 팀 브라운]</figcaption></figure><p>우리는 샌프란시스코 AT&amp;T 스타디움 옆에 위치한 나마스시라는 일식집에서 왁자지껄 이야기 하며 즐거운 시간을 보냈다.</p><p>당시 필자는 미국에 있었다. 회사 출장으로 샌프란시스코에서 3개월, 산호세에서 3개월의 시간을 보냈다. 이 기간동안 나는 일을 하면서도 가급적으로 많은 사람들을 만났다. 점심을 먹고 저녁을 함께 했다.</p><p>예전에 알던 친구에서 부터 일면식도 없는 사람들에게 연락해가며 계속해서 만났다. 베이 에리어(Bay Area: 샌프란시스코에서 산호세, 오클랜드 까지의 지역을 뜻함)는 네트워킹이 너무나 자유로운 곳이었다. 책과 동영상으로만 보던 사람들을 정말 쉽게 만날 수 있었다.그들과 커뮤니케이션하면서 필자가 하고 싶어하는 것을 알리기도 하고, 서로 배울 수도 있었다. 이 만남들을 통해 필자 스스로도 성장하는 것을 느낄 수 있었다.</p><p>처음 만나는 사람과 식사를 할 때는 늘 필자가 먼저 샀다. 그래야 다음 번에도 이 사람을 다시 만날 이유가 생기기 때문이었다. 나는 이런 방식으로 샌프란시스코 인근의 많은 전문가들을 두 번 이상 만났다. 처음에는 내가 무슨일을 하는 지 먼저 이야기 했다. 그리고 그 일을 잘 하는데 어떠한 문제들이 있는지 투명하게 이야기 했다. 그들은 내가 하는 말에 공감해주고, 진지하게 들어주었다.</p><p>예를들어, 린스타트업을 창시한 에릭 리스(Eric Ries), GE의 프로세스 혁신의 조력자 데이비즈 블랜드(David Bland), 마이크로서비스 아키텍처를 정리한 크리스 리차드슨(Chris Richardson), 백악관에서 퍼실리테이션 강의를 하는 제이슨 프레이저(Jason Fraser), UX를 위한 린스타트업 저자 로라 클래인(Laura Klein), SaaS 버젼 CD 툴을 만든 바드리 자나키나만(Badri Janakinaman), 이노베이션 게임을 정리한 루크 호먼(Luke Homman), GE의 프로덕트매니저 리샵 툴산(Rishab Toolsan), 트위터의 애자일 코치이자 산호세의 애자일 밋업 리더 룩 라우(Luk Lau), 쏘트웍스의 CCO(Chief Capability Officer) 채드 워딩턴(Chad Wathington), 쏘트웍스의 품질 리드 컨설턴트 비펄 가그(Vipul Garg), 쏘트웍스의 엄청난 개발자 크리스 곤잘레스(Kris Gonzalez) 그리고 프로젝트 매니저 크리스탈 안(Crystal Ahn), 제즈 험블과 팀 등이었다.</p><p>이들 중 제즈 험블과 팀 브라운과는 과거로부터 특별한 있었다. 이들을 알게 된 것은 2013년이었다. 제즈는 정말 프로페셔널리즘이 강한 사람이었다. 당시 한국으로 오는 비행기를 타려고 공항에서 달리다 넘어져 무릎뼈가 부러졌음에도 불구하고, 필자와의 약속을 지키기 위해 응급처치만하고 비행기에 올라탔다.</p><p>그는 나를 만나, 당시 지속적인 딜리버리(CD)가 무엇인지도 잘 모르던 내게 이 패러다임이 얼마나 중요하고 좋은 소프트웨어를 만들기 위해 왜 이 개념의 실천이 필요한 지, 그리고 그것이 회사의 문화와 어떻게 엮여 움직이는지를 정말 열심히 설명했다.</p><p>팀은 세 번 정도 만났는데, 늘 내가 하는 일에 큰 조력자였다. 그는 내가 하는 일을 왜 해야 하는지, 그 일의 가치가 무엇인지 설명해주기 위해 늘 애썼다. 세상에서 가장 바쁜 사람들 이었지만, 늘 그 만남들 한순간 한순간에 최선을 다하려고 노력했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/486/0*kVhU6kHdTTiA6epX" /><figcaption>[제즈 험블과 팀 브라운]</figcaption></figure><p>필자는 2015년 미국에 있는 동안 그들을 다시 만나고 싶었다. 당시 제즈는 오클랜드에, 팀은 샌프란시스코에 살고 있었고 그들에게 연락한 지 2개월 만에야, 제즈가 드디어 시간이 났다며 저녁을 함께 먹자고 먼저 연락했다.</p><p>만나기로 한 시간이 다가오는 가운데, 제즈가 한 시간 정도 전에 전화를 했는데, 다음과 같은 부탁을 했다.</p><p>제즈: “휴벗, 정말 미안한데 혹시 내 친구 한명을 데려가도 될까? 함께 만나면 좋을 것 같기도 하고 해서…”</p><p>나는 주저없이 대답했다. 새로운 사람을 만나는 것은 대부분의 경우에 도움이 되었다. 특히나, 제즈 같은 사람이 초대할 만한 사람이면 필자도 함께 만나고 싶었다.</p><p>필자: “물론이지.”</p><p>제즈는 팀과 함께 나타나면서, 40대 말~50대 초 정도로 보이는 개발자 한 명을 데리고 나왔다. 나는 제즈에게 물어봤다.</p><p>필자: “이 사람 누구야?”</p><p>제즈: “휴벗, 이 사람 몰라?”</p><p>필자: “응?”</p><p>제즈: “스프링 프레임웍 만들었잖아.”</p><p>필자: “!!!!”</p><p>그렇게 나는 로드 존슨, 제즈 험블, 팀 브라운을 한 자리에서 만났다. 로드 같은 경우는 처음 만났지만, 내가 다니는 회사에 스프링을 쓰는 사람이 워낙 많다는 이야기를 시작으로 재미난 이야기를 많이 할 수 있었다. 당시 로드와 함께 나눈 대화중에 이런 내용이 있었다.</p><p>필자: “로드, 스프링 프레임웍 왜 만들었어요?”</p><p>로드: “응?”</p><p>필자: “그거 일하느라 바빴을텐데, 굳이 그런거 만들어서 오픈소스로 뿌린 이유가 뭔가요?”</p><p>로드: “아.. 그거. 내가 30대가 막 넘어가는데, 어느날 이런 고민이 드는거야. 아, 시간도 남는데 좀 무료하다. 혼자 그냥 뭐 하나 만들어 볼까해서..“</p><p>필자: “그게 이유의 다야?”</p><p>로드: “응.”</p><p>필자: “나중에 이렇게 많은 사람들이 쓰게 될 줄 알았어요?”</p><p>로드: “아니 뭐.. 많이 쓰나?”</p><p>필자: “우리 회사에서만 3천명 쓰는데?”</p><p>로드: “(씨익 웃으며) 그래? 사람들이 좋데?”</p><p>필자: “당연하지! 당신이 만든게 우리 회사 표준 개발 환경이야.”</p><p>로드: “으하하하. 그래? 나 한국에 너네 회사 가봐도 돼?”</p><p>필자: “내일 같이 가까? 로드가 우리회사 오면 스타야. 우리 회사 사람들이 당신 손 한번 잡아보자고 한 뒤, 앞으로는 손 안 씻는다고 할껄?”</p><p>로드: “으하하하”</p><p>(그날 로드는 정말 기분이 좋았던 것으로 기억한다. 그리고 한참을 돌아갔어야 했는데도 불구하고 필자를 내가 살던 집까지 데려다줬다.)</p><p>아무튼 즐겁게 식사를 마친 후, 팀이 2차에 가자고 제안했고 우리는 부근 어딘가에 있는 바에 들어갔다. 그곳에서 2시간 정도 음악을 들으며 술을 함께 마셨다.</p><p>난 그날 술에 거하게 취해, 왜인지는 모르겠으나, 복잡한 심경을 이 형들(?)에게 이야기 했던 것으로 기억한다.</p><p>필자: “내가 계속해서 애자일 관련한 일을 이 회사에서 하고 있는데, 이 일을 계속해야 할 지 모르겠어. 벌써 10년째 인데, 정말 원하는 것을 얻었는지도 모르겠고… 한국에서 애자일이 희망이 있는지도 모르겠고, 앞으로 어떤 일이 있을지도 모르겠어. 확실한 게 없어. 힘들고 답답해. 요새 생각이 드는게, 다른 회사로 옮겨야 하는 것은 아닌가..“</p><p>이러한 반응에 대해 팀이 다음과 같이 이야기 했다.</p><p>팀: “휴벗아(필자의 영어이름), 이 말은 진심에서 하는 말인데. 난 너같은 미친 사람은 처음 봤다. 10년간 이렇게 큰 기업에서 애자일을 한다고 하고 아직도 거기에 있다니… 그리고 심지어 그 일을 계속 가치있게 하고 있잖아.”</p><p>그리고 그는 말을 이었다.</p><p>팀: “내가 살아보니까.. 인생에 갑자기 무슨일이 있을지 정말 알 수 없더라. 휴벗아.. 정말 넌 이 일을 계속 해야 한다. 그게 네가 가진 강점임을 잊지마. 안그래? 로드? 제즈?”</p><p>로드: “응 맞아. 네가 하고 있는 일은 정말 멋진 일이야. 난 네가 가고자 하는 길을 응원하고 싶어. 힘들꺼야. 힘들꺼지만 가치있는 길이야.”</p><p>제즈: “나도 동의해. 포기하지마. 곧 네가 하고 싶은 것의 결과를 얻을 수 있을꺼야. 도움이 필요하면 언제든지 이야기해”</p><p>나는 당시 그의 말이 어떤 의미인지 잘 이해하지 못했다. 이 글을 다시 볼 때마다 오글거리겠지만, 지금까지 내가 이 일을 하고 있는 이유는 그 때 만들어졌다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=aade7ef3cc0e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Phase#7] 영국에서의 발표]]></title>
            <link>https://medium.com/@hubert.shin/phase-7-%EC%98%81%EA%B5%AD%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%9C%ED%91%9C-4fa45c1467b0?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/4fa45c1467b0</guid>
            <category><![CDATA[혁신]]></category>
            <category><![CDATA[애자일]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Sat, 02 Feb 2019 14:32:42 GMT</pubDate>
            <atom:updated>2019-02-19T02:40:12.997Z</atom:updated>
            <content:encoded><![CDATA[<h3>Phase#7 영국에서의 발표</h3><p>17년 8월 정도에 모바일 폰으로 메시지가 왔다. 루이스라는 영국인에게서 온 메세지였는데, 혹시 자신이 여는 컨퍼런스에 연사로 와줄 수 있냐는 제안이었다.</p><p>‘뭐지? 이 사람이 어떻게 날 알았을까?’</p><p>그는 필자에게 제안과 더불어 설명하기를 2018년 3월 영국에서 글로벌 애자일 개발과 혁신이라는 컨퍼런스가 열리는데 키 스피커로 초대하고 싶고 발표제목과 간략한 줄거리를 줄 수 있냐고 또 한번 연락했다.</p><p>이 경험은 정말 내게 신기한 일이었다. 우리나라에서는 여러차례 컨퍼런스에서 발표해 본 적은 있으나, 해외 컨퍼런스에서 발표한 것은 2011년 올랜도에서의 딱 한번이었고, 그 이후 오랜 시간이 지났다. 그럼에도 불구하고 중요한 컨퍼런스에서 발표를 해달라는 제안이 온 것이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*7I8e_xpyyrtGvqhO" /><figcaption>[글로벌 애자일 개발과 혁신 브로셔]</figcaption></figure><p>루이스에게 필자를 어떻게 찾았냐고 묻자. 자신은 코퍼레트 패리티라는 회사에 근무하고있고, 이 회사는 혁신 관련된 다양한 컨퍼런스를 유치하여 사람들간의 네트워킹을 돕는 것을 주로 한다고 했다.</p><p>금번 애자일 관련된 주제로 스피커를 찾다가 리서치 조직을 통해 아시아의 사례가 있으면 좋겠다는 생각이 들었고, 리서치를 하는 담당자가 링트인을 통해 나를 찾게 된 후, 주변 애자일 코치들을 통해 검증 단계를 거쳤다고 한다.</p><p>대부분이 처음 만나는 사람들일 가능성이 매우 높은 컨퍼런스에서 무슨 이야기를 해야 할까 고민했다. 한참을 고민하다 문득, 2015년 내가 미국에 있을 때 로드(Rod Johnson), 제즈(Jez Humble), 팀(Tim Brown)과 함께 나눴던 대화가 생각이 났다. 그리고 그들이 이야기 했던 ‘가치 있는 길’에 대해 공유하기로 마음먹었다.</p><p>‘내가 한 개의 대형회사에서 10년 이상 수행했던 애자일에 대해 이야기 하면, 그곳 사람들에게 많은 것을 느끼게 하고, 공감을 얻을 수 있지 않을까? ‘</p><p>그리고 다음과 같이 제목과 내용요약을 적어 보냈다.</p><p>— — — — — — — — — — — — — — — — — — — — — — — — — — — -</p><p>제목: 얼마나 왔을까? — S사의 애자일을 통한 10년간의 지속적인 개선 이야기</p><p>내용 요약: 애자일 전환은 모든 회사들이 염원하는 것이다. 애자일이라는 용어를 통해 지난 10년간 많은 회사들이 노력하고 성공사례를 이야기해 왔으나, 아시아에서 애자일을 통한 성공이 이야기 된 적은 거의 없다.</p><p>하지만, 10년 간 S사 또한 10년간 정말 많은 노력을 해왔다. 문화적, 환경적 이유로 노력에 비해 좋은 과실을 만들지 못했으나 우리는 결코 포기하지 않았다. 10년의 노력이 결실을 맺어 2015년 S사 ACT(애자일 코어팀)이라는 곳이 만들어졌고, 그곳을 중심으로 S사는 애자일 기법을 통해 제품을 만들고 있다. 한국에서는 처음으로 큰 회사에서 애자일 기반을 다지는 일이 만들어진것이다.</p><p>ACT(애자일 코어 팀)의 구성은 S사의 환경적 제한적 프로세스를 극복한 것이라 매우 의미가 있다. 수 많은 부서들이 가진 다른 목표들에서 오는 의존관계로부터 하나의 홀팀으로 제품을 만들 수 있는 팀을 만드는 것은 매우 어려운 일이었다. 나는 우리 팀을 만들게 된 접근방법들을 공유하고 이를 통해 어떻게 아시아의 기업 문화를 관통했는지 공유하고 싶다.</p><p>— — — — — — — — — — — — — — — — — — — — — — — — — — — -</p><p>6개월 뒤 나는 실제로 영국에 있었다. 22개국에서 온 많은 애자일 전문가들 앞에서, 필자는 S사가 했던 10년 이상의 애자일에 대한 노력과 ACT라는 한국의 애자일 팀에 대해 이야기 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*ZilgH7kG2CY2aGF0" /><figcaption>[10년간의 애자일 여행을 화이트 보드에 그림으로 표현한 내용]</figcaption></figure><p>필자는 40분간의 프리젠테이션을 진행하며, 2007년 부터 내가 속한 S사가 현재까지 어떠한 과정을 겪어 애자일 방식을 수행했고, 어떻게 성공과 실패를 했는지 설명했다.</p><p>그리고 기대하지 않았던 일이 생겨났다. 프리젠테이션 중에 심지어 눈물을 지은이도 있었고 프리젠테이션 후 13명의 청중들이 내게 찾아와 컨퍼런스 발표에 대해 감사 표시를 했다. 그리고 쉬는시간에는 7명의 청중들은 필자에게 찾아와 구체적으로 회사 내에서 어떻게 스폰서십을 얻었는지 또는 어떻게 팀이 일하고 있는지 등의 추가 질문을 했고 그 중 3명의 전문가들은 시간이 될 때, 실제 한국에 찾아가도 되는지를 물었다.</p><p>저명한 애자일 컨설턴트인 아스트라제네카의 나비드 카와자(Naveed Kawahja)는 필자 다음의 발표 순서였는데, 심지어 자신의 프리젠테이션에 필자의 회사 내용을 추가하여 비전이 명확한 회사가 어떠한 퍼포먼스를 낼 수 있느냐에 대해 설명하며 치켜 세웠다. 그리고 컨퍼런스 내내 발표 내용에 대해 계속해서 질문하고 토의하자는 사람들이 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*fD5SYgooPRnTVGbJ" /><figcaption>[나비드 카와자가 S사를 언급하는 모습]</figcaption></figure><p>이 사람들의 반응을 보고 나는 정말 얼떨떨했다. 그리고 알았다.</p><p>‘우리가 해온 애자일 여행이 정말 가치있는 일이었다는 것을… 그리고 S사 또한 이제는 진짜 애자일 회사가 되었다는 것을…그리고 그 여행을 내가 함께 해왔다는 것을…’</p><p>이 블로그의 글들은 지난 2007년 부터 현재까지 S사가 걸어온 애자일의 여정을 담은 내용들이다. 필자가 처음부터 그 일에 관여 해 왔기 때문에 개인적인 글의 느낌이 들 수도 있다. 하지만, 그런 이유로 더 솔직한 성공과 실패담을 여러분은 접할 수 있을 것이다.</p><p>또한 만약, 여러분이 현장에서 ‘지속적인 개선’을 실천하고 있거나 실천하려는 사람이라면, 이 블로그의 내용을 통해 용기를 얻을 수도 있을 것이다. 왜냐하면, 당신은 혼자가 아니며, 그 일이 매우 가치 있는 일이고, 결과적으로 좋은 결과로 이어질 수 있다는 희망을 볼 수 있을 것이기 때문이다.</p><p>다만, 여러분이 속한 조직 또는 환경에서 이 내용대로 똑같이 해보려고 하기 보다는 스스로의 방식을 찾기를 부탁하고 싶다. 왜냐하면 애자일은 ‘지속적인 개선’ 이기에 현재 상태를 잘 파악하고 그 위에 더 나음을 추구하기 위해 팀이 노력하는 것이기 때문이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4fa45c1467b0" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Note#8] 캐즘을 넘어서, 그리고 애자일]]></title>
            <link>https://medium.com/@hubert.shin/%EC%BA%90%EC%A6%98%EC%9D%84-%EB%84%98%EC%96%B4%EC%84%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%95%A0%EC%9E%90%EC%9D%BC-cd8b9190d906?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/cd8b9190d906</guid>
            <category><![CDATA[캐즘]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Tue, 11 Sep 2018 05:17:36 GMT</pubDate>
            <atom:updated>2019-02-19T02:41:30.832Z</atom:updated>
            <content:encoded><![CDATA[<p>캐즘을 넘어서(Crossing Chasm) 라는 이론이 있다. 이것은 1991년 죠프리무어(Geoffrey Moore)박사가 쓴 동명의 책 “캐즘을 넘어서(Crossing the chasm)”라는 저서로 세상에 알려졌다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*fGtAnCXkbRhPXbKy" /><figcaption>[캐즘을 넘어서 이론 그림]</figcaption></figure><p>이 캐즘을 넘어서라는 이론은, 세상에 등장한 새로운 기술이나 제품이 어떠한 형태로 시장이나 조직에 진입하여 성숙하고 어떠한 마찰이 일반적으로 발생하는지를 패턴으로 설명한다. 이후 “혁신기업의 딜레마”라는 책을 쓴 클레이튼 크리슨텐슨 교수(Clayton, Christensen)의 이론과 함께 많은 대학의 교수들이 기업이나 조직의 혁신과정을 이 예로 설명하게 되어 세상에 보다 유명해지게 되었다.</p><p>캐즘을 넘어서라는 이론을 통해 혁신이 이루어지는 과정은 크게 두 가지의 단계로 설명된다. 이는 이 깊은 골짜기 ‘캐즘’을 사이로 나뉘어 조기 진입 단계(Early Market)와 성숙 단계(The Mainstream Market)이다.</p><p>먼저, 조기진입은 조직 내 일부의 사람들이나 집단이 이를 활용하고 전파하려는 단계를 의미하며, 그리고 성숙 단계는 조직 전체로 확산되고 50%이상의 인원들에게 수용되는 단계를 말한다. 이 두 단계에 걸쳐 점진적으로 확산이 진행 될 때, 여러 가지 성향을 가진 사람들이 나타나게 되는데, 캐즘 이론은 이를 5가지의 집단으로 구분한다. 그 5가지는 혁신가, 공상가, 실용주의자, 보수주의자, 회의론자이다. 이들의 지식 전파 과정을 통해 조직에 혁신적인 활동이 확산되는 과정을 쉽게 설명한다. 이들을 설명하면 다음과 같다.</p><ol><li>혁신가(Innovator) — 혁신가는 가장 먼저 새로운 기술을 조직에 유입시키는 사람들이다. 이들은 늘 새로운 것을 만들어 내거나 추구하는데 매우 흥미를 느끼는 집단이다. 이들을 사용해보며 러프하게 분석하여 새로운 것에 대한 장점 단점을 찾는다. 그리고 보통 이를 일부 주변 사람들에게 알린다. 하지만 이들은 일반적으로 오랫동안 이것을 사용하지 않는다. 혁신가들의 특성상 해당 기술에 조금만 익숙해지면 곧 지루함을 느끼기 때문이다. 이 익숙한 지루함이 싫어 곧 다른 새로움을 찾아 떠난다.</li><li>공상가(Visionary) — 공상가는 이 혁신가들이 만들거나 도입한 기술이나 제품을 보고 마치 종교를 숭배하듯 맹목적으로 수용하는 집단이다. 한번 그 새로운 것이 마음에 들면 자신이 믿는 것을 주변 사람들도 함께 얻기 바라며, 이를 열심히 전달하고, 전파한다. 공상가들은 자신의 믿는 것에 대해 치밀한 증명 없이 이야기 하기 때문에 보통 이상주의자로 불린다. 이들의 목소리가 크기에 이들을 통해 조직 내 많은 사람들이 이 새로운 것에 대해 알게 된다. 이러한 패턴 때문에, 이들은 새로운 기술을 확산하는데, 가장 강력한 추진력이 된다. 하지만, 동시에 조직의 갈등을 만드는 주요 이유가 되기도 한다. 자신들의 주장이 워낙 강력해서, 주변에서 저항을 야기한다. 또한 보통 이전에 수행하던 것을 부정하는 형태로 주변을 설득하게 되는데, 이는 조직 내 또다른 갈등을 만들어 낸다.</li><li>실용주의자(Pragmatist) — 공상가들과 달리 실용주의자들은 늘 현실에 대해 고민하는 사람들이다. 때문에 공상가들의 믿음에 대해 의심의 눈초리를 보낸다. 이들은 공상가들의 주장을 그대로 받아들이지 않고, 먼저 비판적인 시각에서 이를 지켜보고 실제 자신들에게 도움이 될 것을 증명하라고 요구한다. 이 요구에 대한 답을 듣고, 이를 받아들일 충분한 이유가 있거나, 자신들에게 도움이 된다는 것이 증명되면, 공상주의자들이 이야기한 내용 중 일부만 취하거나, 이를 표준화하는 가이드라인을 공상가들에게 추가로 요구하거나 스스로 만들어낸다. 그리고 그 범위 안에서 현실에 적용한다.</li><li>보수주의자(Conservative) — 보수주의자들은 대세가 되면 새로운 것을 수용하는 특성을 가진 집단이다. 혁신가, 공상가에 이어 실용주의자들이 혁신을 받아들이게 될 때까지도 이들은 특별히 관심을 갖지 않는다. 그러다가 이 새로움이 어느 순간 50% 이상이 된다는 느낌이 들면, 조건없이 수용한다. 때문에 혁신은 50% 정도까지 만들어지는 것은 매우 어려우나, 50%에서 85% 수준까지 전파되는 것은 매우 빠르다. 이 35% 정도의 사람들이 이러한 특성을 보이는 보수주의자들이기 때문이다.</li><li>회의론자(Skeptics) — 그리고 마지막으로 회의론자들은 아무리 좋은 기술이나 제품이 있더라도 고집스럽게 본인들이 해오던 것을 고집하는 사람들이다. 이들은 누가 무슨 일을 하더라도, 현재 자신이 익숙한 것이 가장 좋은 방법이라고 믿고 활용한다. 때문에 혁신이 진행되더라도 그들은 별로 관심이 없다.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/960/0*HFUmt-FBy06tYDRX" /><figcaption>[변화에 대해 집단에 대한 특성]</figcaption></figure><p>위의 다섯 가지 중에 여러분은 어느 그룹에 속한 사람인가? 또한 여러분 주변에 있는 사람은 어느 그룹에 속한 사람인가? 아마도, 대부분의 주변 사람을 위의 5가지의 카테고리 안에 매칭 할 수 있을 것이다.</p><p>이 다섯가지 종류의 집단에 가장 큰 갈등을 일으키는 두 집단은 어디일까? 아마 쉽게 답을 찾을 수 있으리라 생각된다. 위 다섯가지의 집단에서 새로운 기술이나 제품의 유입되는데 가장 마찰이 크게 발생하는 상황은 공상가들과 실용주의자들이 만날때이다.</p><p>공상가들의 이상추구와 실용주의 자들의 실리추구는 늘 커다란 논쟁의 소용돌이를 만든다. 좋다는 것을 맹목적으로 믿는 사람과, 그 맹목적인 것을 일단 비판하고 실제 도움이 되는 것을 찾는 사람은 늘 충돌하기 마련이다. 캐즘을 넘어서라는 이론은 이 두 집단의 사이를 “깊은 골짜기” 즉 “캐즘(Chasm)”이라고 한다. 종교를 숭배하듯 맹목적으로 수용하는 집단과 실용적으로 현실에 맞게 본인들에 맞는 것만 취하려는 사람 사이에는 늘 논쟁은 조직의 크기나 특성에 따라 다르나 일반적으로 짧게는 6개월에서 3년 정도까지 진행된다.</p><p>애자일이 진행될 때도 동일한 과정을 발견할 수 있다. 어떠한 이유에서이나, 한 조직이 애자일을 적용하고자 의지를 보일 때, 공상가와 실용주의자들은 크게 부딪힌다. 특히 애자일은, 문화 또는 원칙으로 설명되는 일이 많고 심지어 적용 시 조직의 상황을 기반한 유연함을 추구하기 때문에, 기존의 명확한 프로세스나 방법론 보다 더 실용주의자들을 설득하기 어렵다. 이상주의자들이 원하는 이상이 있지만, 실용적인 부분에는 자율성(Autonomous)을 강조하기 때문이다.</p><p>실용주의자들의 입장에서 생각해보면, 새로운 시도에 대해 성공 확률이 채 50%도 안되는 상황이 있었고, 이 기간 동안 다양한 SW개발 방법이 시도된 현실이 있기에, 애자일을 그저그런 소프트웨어 개발 방법론 중 하나라고 생각 할 수도 있다. 또 다른 새로운 시도를 하기에는 그동안의 소프트웨어 개발 환경에서 개발해온 새로운 프로세스에 대한 피로감이 매우 컸다.</p><p>때문에, 그들은 증명을 요구한다. 애자일을 수행하면 생산성과 품질 측면에서 어떻게 좋아지는지를 묻고 구체적인 답을 요청한다. 일반적으로 공상가들은 그들이 충분한 경험을 취하지 않는 한 이러한 질문에 대해 좋은 답을 주기 매우 어렵다. 다른 회사의 예를들어 설명하는 것도 어렵다. 다른 회사에 주어진 다른 상황이 있기 때문이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=cd8b9190d906" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Phase#6] 애자일에서 문서란 얼마나 중요한가?]]></title>
            <link>https://medium.com/@hubert.shin/phase-6-%EC%95%A0%EC%9E%90%EC%9D%BC%EC%97%90%EC%84%9C-%EB%AC%B8%EC%84%9C%EB%9E%80-%EC%96%BC%EB%A7%88%EB%82%98-%EC%A4%91%EC%9A%94%ED%95%9C%EA%B0%80-b381c9e9724d?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/b381c9e9724d</guid>
            <category><![CDATA[산출물]]></category>
            <category><![CDATA[애자일문서]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Tue, 04 Sep 2018 13:55:53 GMT</pubDate>
            <atom:updated>2018-09-04T14:05:04.010Z</atom:updated>
            <content:encoded><![CDATA[<p>이전 120명의 프로젝트를 코칭하면서 필자가 애자일 코치로서 가장 많은 질문을 받은 내용은 산출물 작성에 관한 내용이었다. 이전 Phase#5에서 언급한 애자일 아키텍처와 거의 유사하게 산출물의 작성 범위와 수준에 대해서도 모호하게 생각하며 궁금해 하는 이들이 많았다.</p><p>그들은 애자일 선언 중 ‘포괄적인 문서보다 작동하는 소프트웨어를’이라는 말을 그들 나름대로 해석하여, 애자일은 산출물 작성이 필요 없다고 주장하거나 정말 없어도 되는지 필자를 통해 확인하고 싶어했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*ZXd5mIUlpHD4OFwT" /><figcaption>[문서.. 문서.. 문서]</figcaption></figure><p>이전에 수행한 30명 단위 중규모 프로젝트에서는 적어도 산출물에 대해서는 이견이 없었다. 이해 관계자의 수도 적었고, 고객은 기본적으로 산출물에 관심이 없었다. 그들은 ‘검수’라는 행위를 통하여 인수인계를 받을 때에만 약속한 산출물이 작성 되어 있는지 없는지 정도를 확인했다. 공공 사업이었기에, 외부 감리를 거쳐야 하여 어느정도의 수준은 필요했지만, 그 수준을 넘어서면 누구도 제어하지 않았다.</p><p>때문에, 외부에서 보는 산출물의 틀(종류)을 그대로 두고, 추적성에만 집중하고 내용을 전반적으로 줄이는 방식을 쓸 수 있었다. 이를 경험으로 필자는 약속된 산출물은 작성해야 하나 양을 얼마든지 줄 일 수 있으니, 쇼케이스를 통한 동작하는 제품을 중심으로 중간 중간에 고객에 확인하여 충실도를 낮추자라는 주장을 했다. 동시에 고객에게도 이제는 동작하는 제품을 보고, 당신들이 향후 파기할 문서따위는 신경쓰지 말라고 설득했다.</p><p>실제로 고객을 포함한 모든 이해관계자들은, 워터폴에서도 설계 단계에서 개발 단계로 넘어가는 순간부터 모두가 단계별 진척에 관심 갖지 않고 기능 목록의 기능이 몇 퍼센트 완성되고 테스트 되었는지만 확인하는 관례들을 가지고 있었다. 동작하는 소프트웨어를 확인할 수 있으면 굳이 중간과정의 산출물을 확인할 필요가 없기 때문이다.</p><p><strong><em>* 대형프로젝트에서 겪었던 일</em></strong></p><p>때문에 금번 대규모 프로젝트에서도 동일한 방식으로 고객을 설득하며 산출물 작성 수준을 줄이고 이해관계자들이 동작하는 제품에 관심을 가질 수 있도록 노력했다. 산출물은 기본적으로 객체지향을 지향했다. 그 객체지향 문서에 사용자스토리를 더했다. 유스케이스 흐름도에서 정의된 유스케이스들을 스토리로 쪼개고, 스토리는 사용자와 이벤트들로 작성하게 했다. 유스케이스는 비즈니스, 화면, 데이터, 인터페이스로 분할되고 비즈니스쪽 산출물을 사용자 스토리가 보완하는 형태로 문서를 작성하게 했다. 당시 고객들이 산출물의 중요성을 늘 언급하던 사람들이라 설계/개발 이터레이션 중 작성해야 하는 문서는 10종 정도 되었다.</p><p>설계/개발 이터레이션은 계단식 방식(스태거드 어프로치 라고 한다)으로 역할을 나누어 분석/설계자는 다음 이터레이션에 개발될 내용에 대해 설계하고, 다음 이터레이션에서 개발자들이 이를 개발하는 동안 분석/설계자는 그 다음 이터레이션의 설계 내용을 준비하였다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/716/0*v69_C1wI55hjydTy" /><figcaption>[계단식 방식(Staggerd Approach) 그림]</figcaption></figure><p>N차 이터레이션에서, N+1차 이터레이션에 개발할 목록에 대한 설계 산출물을 고객 제품 책임자에게 한번 검증하고 N+1차 이터레이션에서 개발 시 개발된 내용과 함께 설계서를 한번 더 검증하는 형태로 진행했다. 2주 단위로 이터레이션을 돌렸었는데 2주 단위 마지막주 목요일은 N+1차 이터레이션 대상 개발목록 설계 검증을, 금요일은 N차 이터레이션의 기능 검증을 수행했다.</p><p>설계/개발 이터레이션 단계 초반에는 이 검증들이 정말 잘 진행되었다. 설계와 개발 검증이 진행되며, 아무런 문제가 되지 않는 것 같았다. 설계 및 개발이 30% 정도 진행되었다.</p><p>하지만, 어느날부터인가 고객과 개발팀 사이의 마찰음이 발견되었다. 고객사의 일부 제품 책임자들로 부터 불만이 터져나왔는데, 개발팀이 설계 산출물을 제대로 작성하지 않는다는 것이었다. 그 목소리는 다소 극단적이었다.</p><p>“설계 없이 개발을 할 수 있는 겁니까? 그건 소프트웨어의 101을 지키지 않는 것 아닙니까?”</p><p>‘설계 없이 개발을 한다.’ 이 말의 의미가 무엇인지 필자는 한 팀 한 팀을 돌아다니며, 현상태를 파악해야 하는 상황에 놓여졌다. 확인해 보니, 예상치 못하는 결과들이 보이기 시작했다. 최초 불만은 개발팀에서 시작되었다. 동작하는 제품을 제품 책임자에게 늘 시연하는데 동시에, 굳이 이런 상세한 문서를 써야 하냐는 내용이었다.</p><p>개발자들은 어느 순간 패턴화 되어 있는 산출물들의 작성을 줄이고 동작하는 제품을 테스트하고 시연하는데 중심을 두고 일하고 싶어했다. 그리고 그 불만을 제품 책임자에게 표현하여 결국 마찰로 이어진 것이었다.</p><p>필자는 조금 더 개발팀을 관찰하기로 했다. 상황을 좀 더 면밀히 분석해볼 필요가 있었다. 그리고 그들이 일하는 내용에 대해 좀 더 확인했다. 그들은 상세한 설계서 없이 다음과 같은 패턴으로 일하고 있었다.</p><ol><li>분석/설계자는 늘 내 옆에 있는 비즈니스 전문가인 제품 책임자에게, 간단하게 쓰인 사용자 스토리를 중심으로 질문하며, 기능 개발 방향에 대해 정한다.</li><li>분석/설계자는 화면 표준에 맞는 화면을 툴로 그린다.</li><li>분석/설계자는 사용자 스토리를 기반으로 본인들이 그린 화면을 개발자들에게 보여주며 구두로 설명한다.</li><li>개발자들은 이를 기반으로 개발을 시작한다.</li><li>개발자들은 설계서를 보고 정의된 아키텍처와 공통기능, 화면 표준을 기반으로 구현한다.</li><li>실제 만든 것들은 개발자가 충분히 테스트 한 뒤, 설계/개발자에게 기능 URL을 전달한다.</li><li>설계/개발자는 이를 테스트 한 뒤 제품 책임자에게 한번 더 확인해달라고 기능 URL을 전달한다.</li><li>팀원 모두가 모여, 시연을 통해 전반적인 표준이나 부족한 부분에 대해 피드백 받고 이를 수정한다.</li></ol><p>여러분은 이 개발 과정을 어떻게 생각하는가? 상세 설계서가 없기에 개발을 하기에 부족한 상황으로 생각되는가?</p><p>문서가 필요하다고 이야기하는 사람들은 늘 운영/유지보수에 대해 이야기한다. 이들에게 시스템을 온전히 인수인계하려면 문서는 반드시 필요하다고 말한다. 운영/유지보수할 인력이 개발 인력과 다른 사람이라는 가정하에서는 말이다.</p><p>하지만, 실제 운영 운영/유지보수를 하는 사람들에게 물어보면 보통 다르게 이야기 하는 경우가 많다. 그들 또한 코드에 대해 알게되면 그간 작성된 산출물을 업데이트 하는 것이 매우 부담스러운 상황이 된다는 것이다. 결국 구축 사업에서 작성한 그 많은 양의 문서들은 일부의 정말 필요한 산출물을 제외하고는 활용하기 어렵다는 말이 된다.</p><p>문서는 원래 문서는 다른 사람에게 정보를 전달하기 위해 작성하는 것이다. 즉, 보다 나은 커뮤니케이션을 위한 수단이다. 이를 작성하고 보관이 가능해진다.그런데 위와 같이 일을 하기 위해 직접 면대면으로 수행하는 커뮤니케이션이 잘 되는 상황에서 굳이 과거의 워터폴 프로세스에서 작성했던 복잡한 문서들을 작성할 필요가 있을까? 이것을 작성하는 시간에 코드의 품질을 높이거나 결함을 줄이기 위한 방법을 고민해 볼 수는 없을까? 관행처럼 작성해오던 문서들에 대해 ‘그동안 왜 썼을까?’ 라는 질문을 해보고 이를 관장하는 이해관계자와 함께 이야기 해보기를 여러분에게 제안해본다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b381c9e9724d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Phase#5] 애자일 아키텍처(?)]]></title>
            <link>https://medium.com/@hubert.shin/phase-5-%EC%95%A0%EC%9E%90%EC%9D%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%9D%BC%EB%8A%94-%EB%A7%90%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-b11ad9037680?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/b11ad9037680</guid>
            <category><![CDATA[아키텍처]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Tue, 04 Sep 2018 13:46:13 GMT</pubDate>
            <atom:updated>2018-09-04T22:45:43.057Z</atom:updated>
            <content:encoded><![CDATA[<p>애자일을 수행할 때 가장 모호하다고 이야기 하는 것 중, 애자일 아키텍처라는 말이 있다. 이 말은 여전히 국내 IT 시장에서 정의하기 어려운 말로 통용된다. 이를 이해하기 위해 먼저, 애자일 아키텍처라는 말이 어디에서 나왔는지를 잠시 살펴보자.</p><p>1994년에 DSDM(Dynamic systems development method)이라는 프로젝트 딜리버리 프레임웍이 발표되었다. 이는 빠르게 개발을 하기 위해 만들어진 RAD(rapid application development ) 라는 방식에서 발전되어 애자일 프로세스의 한 기조로 자리잡았다. 이 프로세스는 과거 XP, 스크럼처럼 개발 자체에 중심을 둔 방식과는 다르게, 프로젝트 관리와 거버넌스에 중심을 두었다. 때문에 추후 확장되어 IT가 아닌 영역에서도 많이 사용되는 프레임웍으로 발전했다.</p><p>DSDM의 여러가지 원칙 중에 “확고한 기초(Firm foundations) 위에 점진적으로 제품을 만든다” 라는 것이 있다. 이 확고한 기초라는 말이 이후 2008년에 딘 레핑웰이라는 소프트웨어 아키텍트를 통해 해석되어 필요한 만큼(Just Enough) 구축하는 애자일 아키텍처라는 말로 발전되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/303/0*qBF8izMQS-qzMmwC" /><figcaption>[딘 레핑웰, 최근에는 SAFe의 창시자로 잘 알려져 있다]</figcaption></figure><p>그렇다면 “필요한 만큼” 은 얼마만큼의 준비를 이야기 하는 것일까? 이 부분이 현실에서 적용될 때 애매한 부분이다. 이는 이해관계자 관점에서 다를 수가 있다. 특히나 모두 워터폴을 경험했던 인력 구성원이라면 더욱 그럴 것이다.</p><p>이 부분이 애자일 아키텍처라는 말에 대해 많은 사람들이 모호하다는 이야기를 하는 지점이다. 만약 여러분의 팀이 4~5명 규모의 작은 팀으로 시작하여 점점 SW 크기를 불려나갔다면 이러한 모호함은 발생하지 않을 것이다. 아키텍처가 상황에 따라 적응하며 자연스레 함께 성장하기 때문이다.</p><p>하지만, 50명 이상 프로젝트에 갑자기 애자일 아키텍처를 적용한다고 했을때는 상황이 달라진다. 많은 문제들이 발생할 수 있다. 이전 Phase에서 이야기했던 프로젝트의 이야기를 계속해보자. (물론 비즈니스를 이렇게 하면 안되다는 논쟁을 벌일 독자도 있을꺼라 생각한다. 필자도 그 말에 동의한다. 하지만, 그 논란은 뒤로 미루자. 현실에서 여러가지 전략적인(?) 이유로 최초부터 많은 인력을 투입하는 프로젝트는 여전히 있다.)</p><p><strong><em>* 설계/개발 이터레이션 수행시 발생한 아키텍처관련 문제점</em></strong></p><p>커뮤니케이션 방식이 바뀌면서 프로젝트는 한결 대화가 많아졌다. 하지만 모든 문제가 순조롭게 해결되기 보다는 오히려 더 많은 문제들이 발생한 것처럼 보였다.</p><p>개발자들로부터 상향식으로 이슈가 전달되는 공식적인 채널이 생기면서, 기본적으로 이슈의 양부터 많아졌다. 그리고 중간관리자들은 이를 정제하고 의논해야 했기에 더 많은 시간 회의와 타 팀과의 협업에 매달렸다. 중복된 것은 제거하고 다른 팀에 비슷한 이슈가 있는 것을 확인하여 이를 우선순위화 했다. 그리고 프로젝트 관리자는 이를 해결하기 위해 노력했다.</p><p>설계/개발 기간을 통합하여 이터레이션을 돌리다보니, 이전과의 이슈의 종류가 많이 달랐다. 과거에는 주로 협업, 고객과의 커뮤니케이션에 대한 것이 많았다면, 이번 프로젝트는 대부분 아키텍처와 공통기능에 대한 내용이 대부분이었다. 짧은 납기에 많은 것을 개발해야 하는 개발자들은 다음과 같이 목소리를 높이며 이야기했다.</p><p>“내가 개발하기 위해 준비된 것이 없다”</p><p>설계/개발의 이터레이션 초기에 개발자들은 아키텍처와 공통 기능 때문에, 개발을 할 수 없다고 이야기 했다. 이 말을 듣고 아키텍처/공통팀에 가보니, 이들은 며칠째 밤샘을 하며 기능을 개발하고 있었다. 그리고,</p><p>“애자일은 우리에게 너무 힘들다”</p><p>라며, 얼마나 그들이 어려움을 겪고 있는지 표현했다.</p><p>과거 워터폴 방식으로 프로젝트를 수행했던 경험을 다시 기억해보자. 위 상황을 설명하기 위해 일반적인 13개월 짜리 워터폴 프로젝트를 생각해보자. 그리고 분석 2개월, 설계 3개월, 개발 6개월, 테스트 2개월 단위로 나누었다고 가정하자.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/503/0*AEN9nm6dtHUSRvSr" /><figcaption>[일반적인 폭포수 방법론 프로젝트의 아키텍처 분석/설계 길이]</figcaption></figure><p>일반적으로 50명 이상 규모의 프로젝트가 되면 아키텍처/공통을 담당하는 팀을 전담으로 배치한다. 왜냐하면 로그인, 세션, 로깅, 업무 공통 기능 같은 경우 업무 개발팀 중 누가 개발해야 할 지 애매한 경우가 많기 때문이다.</p><p>이들은 분석 단계 2개월 동안 정의된 요구정의 내용을 기반으로 기능들을 도출하여 설계 기간 3개월 통한 업무팀이 투입되기 전 대부분의 필요 아키텍처 및 공통 기능을 개발하기 위해 노력한다. 이를 통해 다음 시작되는 개발 단계에 개발자들이 활용할 수 있는 다양한 기능들을 준비해 놓는다.</p><p>물론 개발단계에서도 이 작업은 계속된다. 실제 업무 개발팀에서 피드백을 받지않고 만든 아키텍처나 공통 기능은 아직 부족한 것이 많다. 때문에 아키텍처/공통 기능팀의 개발자들은 업무 개발팀의 개발자들과 이야기 하면서, 지속적으로 이를 수정하며 보완해 나간다.</p><p>이 피드백을 받아 보완한다는 것은 업무 개발팀 입장에서는 필연적인 재작업을 의미한다. 아키텍처/공통 기능팀의 개발자가 피드백을 받아 아키텍처를 변경하면 전체 업무 개발자들이 이를 다시 반영해야 하기에 이미 개발해 놓은 기능에 대해 다시 작업하는 일은 필연적으로 발생한다. 이는 표준이 변경되는 것을 의미한다.</p><p>때문에 이를 개발 단계 초기에 잡느냐 잡을 수 없느냐가 프로젝트의 성패와 긴밀한 관계가 있다. 이를 개발자들이 기능개발을 많이 하지 않은 조기에 해결하면 그만큼의 재작업 공수가 적게들고 개발 단계 뒤로 가면 갈수록 공수는 기하급수적으로 늘어난다.</p><p>애자일을 수행한다고 하면서, 단순하게 설계/개발 단계를 합쳐 이터레이션을 수행한다고 가정해보자. 위와 같은 상황과 엮이면 어떠한 문제가 발생할까? 설계 단계 3개월이 없어지면서 아키텍처/공통 기능 개발자들은 준비할 물리적 시간을 부여받지 못하게 된다.</p><p>설계/개발 이터레이션이 진행되면서 미완된 기능을 개발하는 것과 개발자들의 피드백을 동시에 받는 일이 진행된다. 아키텍처/공통팀은 굉장한 압박을 받게 된다. 이들은 개발팀에 필요한 것들을 제공해주기 위해 최선을 다하나, 물리적인 준비 시간 자체가 부족하다.</p><p>해당 프로젝트에서는 14회에 걸쳐 전체적인 개발의 영향을 주는 아키텍처와 공통기능이 크게 변경되는 일이 발생했다. 이는 개발자들의 피로감으로 이어졌고, 프로젝트에 있는 모두가 이를 버거워했다.</p><p>애자일은 이터레이션을 통해 고객 피드백을 받아 소프트웨어를 지속적으로 개선하는 작업이다. 이는 분명히 프로젝트 성공에 도움이 된다. 하지만, 대규모 인력이 한번에 참여해야 하는 비즈니스 상황에서는 무조건 이터레이션을 너무 빨리 수행하려고 하지 말자. 필연적으로 준비하는 기간이 필요하다. 그리고 이후 쇼케이스를 통해 고객 피드백을 받으면 된다.</p><p>Phase #2에서 설명한 프로젝트는 다른 경우이다. 당시 프로젝트는 기존에 존재했던 아키텍처 위에 개발이 수행된 형태였다. 이러한 경우는 위 같은 문제가 발생하지 않는다. 이 경우는 이터레이션을 아주 초반부터 수행해도 문제가 없다.</p><p>이 두가지의 차이가 어찌보면 ‘필요한 만큼’의 경험적 정의가 아닐까 싶다.</p><ol><li>작은 팀(4~6명의 개발자)이 비즈니스 상황에 따라 인력이 늘어나는 경우는 아키텍처 준비기간이 필요 없다. 이경우 그냥 만들고 고쳐나가면 된다.</li><li>50명 이상의 프로젝트에서 기존 아키텍처 위해 기능 개선하는 상황에서는 아키텍처를 위한 준비기간이 필요 없다. 그냥 바로 개발을 시작해도 된다.</li><li>50명 이상의 신규 프로젝트에서는 반드시 아키텍처링과 공통 기능을 위한 준비기간이 필요하다.</li></ol><p>필자의 은사이신 일리노이 주립대학의 랄프 존슨(Ralph Johnson) 교수에게 09년 전화 통화로 위와 같은 질문을 한 적이 있다.</p><p>“제가 120명 규모의 애자일 프로젝트를 수행하는데, 혹자는 애자일이기 때문에 아키텍처링이 필요 없다고 합니다. 어떻게 생각하시나요?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/294/0*ZPsOS7sldChu_WT0" /><figcaption>[디자인 패턴의 창시자 랄프존슨 교수]</figcaption></figure><p>교수님은 다음과 같은 명쾌한 답을 주었다.</p><p>“나는 그런 말도 안되는 이야기를 들어본 적이 없다. 한번에 많은 기능을 개발해야 하는 비즈니스 상황에서는 아키텍처링이 반드시 필요하다. 혹시 그 질문을 했던 분이 프로젝트를 한번도 수행해 보지 않은 것은 아닌가?”</p><p>금번 경험을 통해 이후 수행하는 프로젝트 부터는’이터레이션 0’ 라는 개념을 도입하기 시작했다. 50명 이상의 프로젝트에서는 1~2개 정도의 이터레이션은 최소의 개발인원이 들어와 현재의 기능 전체를 보고 나중에 투입될 업무 개발자들을 위해 아키텍처링과 공통기능을 만들었다. 그 뒤로는 위와 같은 문제가 현저히 줄었다.</p><p>위와 같은 이유로, TCS, 와이프로, 코그니전트, 사피엔트 같은 대형 구축형 사업을 주로 서비스하는 인도 회사들은 이터레이션 0를 먼저 진행한다. 이 기간동안 ‘필요한 만큼’ 의 아키텍처링을 수행한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b11ad9037680" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Note#7] 역할의 통합과 소멸]]></title>
            <link>https://medium.com/@hubert.shin/note-7-%EC%97%AD%ED%95%A0%EC%9D%98-%ED%86%B5%ED%95%A9%EA%B3%BC-%EC%86%8C%EB%A9%B8-678d451638e0?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/678d451638e0</guid>
            <category><![CDATA[역할]]></category>
            <category><![CDATA[테스터]]></category>
            <category><![CDATA[아키텍트]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Thu, 19 Jul 2018 12:28:33 GMT</pubDate>
            <atom:updated>2018-07-19T12:35:56.354Z</atom:updated>
            <content:encoded><![CDATA[<p>최근 클라우드의 활용과 더불어, 작은 기업 형태로 쪼개는 마이크로엔터프라이즈화의 영향으로 SW개발 시 늘 존재하던 일부 역할의 통합과 소멸이 가속화 되고 있다. 이를 통해 조직간 Silo를 제거하면서, 자동화를 강조하고, 작은팀 중심으로 역할을 단순화 하여 빠른 피드백을 줄 수 있는 형태로의 변화를 추구하고 있다. 이번 글에서는 이를 사례를 통해 살펴보도록 한다.</p><p><strong>* 최대 클라우드 CRM 솔루션 업체의 사례</strong></p><p>첫번째로 전세계에서 가장 큰 클라우드 기반 CRM 업체인 미국의 S사는 2017년 4월 내부적으로 매우 큰 변화를 단행했다. 그것은 QA를 다른 역할로 흡수, 통합 시킨 것이다. 테스트를 그동안 매우 중시해왔던 회사가 QA를 개발자 또는 프로젝트 관리자 그룹으로 통합시킨 사례는 시장에 커다란 충격을 주었다. 왜 그런일이 벌어졌는지는 S사가 성장한 과정을 이해할 필요가 있다.</p><p>S사는 1999년 아파트 1채에 두 명이 사업을 시작해서 급속도로 성장했고, 2004년 IPO에 성공했다.</p><p>2005년에는 150명 규모로 성장했는데, 이 때 커다란 사고가 발생했다. 중요 릴리즈가 15개월이나 늦어진 것이었다. 이 문제로 고객과의 신뢰에 커다란 오점을 남겼다. 원인을 파악해보니, 이는 성능을 중심으로 테스트 하던 조직과 제품 조직 사이의 갈등으로 일어난 일이라 내부적인 갈등으로 야기된 결과였다. 이에 릴리즈 트레인(Release Train)이라는 개념을 도입하여 조직과 역할자의 통합을 위해 노력했다. 이 개념은 쉽게 말하면 고객의 요구사항을 받아 개발하고 배포하는 것까지의 일련의 과정을 자동화 하는 것이었다. 이 때 자동화 테스트를 중시하는 데밥스의 개념을 적용하는 시도들이 일어난다. 이와 함께 S사는 애자일 선언을 한다. 소수 팀을 중심으로 시작하여 빅뱅으로 전체 조직을 애자일 전환 했고, 외부 컨설턴트들의 도움을 받았다. 하지만 외부 컨설턴트에 대한 시각은 그다지 좋지 않았다.</p><p>2006년에는 S사 자체의 애자일 방법론을 런칭한다. 이 방법론은 기존의 스크럼, 린, XP 등의 프로세스를 적절히 섞어 만들었다. 이와 함께 인력은 200명이 넘게 된다. 이 때부터 협업을 강조하는 마인드 셋을 중요시하게 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/538/0*2_lZH5adx2YGlxpm" /><figcaption>[S사의 애자일 방법론]</figcaption></figure><p>2008년에는 600명의 조직으로 성장하면서 개발조직과 QA조직을 통합한다. 그리고 600명의 인력을 크게 개발자+QA 조직과 제품 조직으로 변화 시킨다. 이는 QA와 개발자간의 극심한 마찰이 있었기 때문이다. 같은 비전을 보고 개발할 수 있도록 하기 위해 이러한 변화를 드라이브했다.</p><p>2012년에는 1500명 조직으로 성장했다. 흥미로운 점은 클라우드 기반의 인프라 담당자들은 애자일에 대해 극렬히 반대했다는 점이다. 스크럼, 칸반은 그들이 하는 일에 크게 도움이 안된다는 생각이 지배적이었다는 것이다.</p><p>2017년은 7000명 조직으로 급격히 인력이 늘어난다. 이 7000명 조직은 450개의 애자일 팀으로 나뉘어 운영되었다. 그리고 이 때 QA를 프로젝트 매니저와 개발자로 흡수 통합한다.</p><p>이러한 결정을 수행한 가장 커다란 이유는 개발자와 QA의 역할이 나누어져 있을때 같은 목표를 보지 않고 역할자간 마찰이 발생하는 것을 자주 발견했기 때문이다. 두 번째 이유는 자동화 테스트이다. 2005년 부터 자동화 테스트를 강조한 S사는 유닛, 시스템, 통합, API, GUI 등에 충분한 자동화 테스트가 확보되어 있었고, 이는 기존에 QA가 하던 일을 프로젝트 매니저와 개발자가 나누어서 수행할 수 있을 만큼의 팀으로 진화할 수 있는 밑거름이 되었다.</p><p><strong>* 보안 소프트웨어 업체의 사례</strong></p><p>또 다른 예제로 독일의 보안 소프트웨어 개발 업체 A사의 예를 들어보려고 한다. 이 회사는 500명의 개발조직을 2014년 부터 애자일 전환하기 위해 노력했다.</p><p>시작점은 CTO, 인사, 개발자가 모인 TF 활동으로 변화를 만든 것인데, 이를 통해 팀 문화 → 팀 기술 → 조직 구조 형태의 순서로 진화시키려고 했다. 기존의 조직은 프론트 엔드 개발조직, 백엔드 개발조직, DB 설계조직, 아키텍트 조직 등으로 나뉘었는데, 시간이 갈수록 조직간 협업이 어려워지고 있다는 것을 느낄 수 있었다. 이를 해결하기 위해 단계별 접근을 실시했다.</p><p>1) 1단계 (역할의 통합)</p><p>그리고 먼저 역할의 통합을 목표로 잡았는데, 사일로(Silo) 조직인 프론트 엔드, 백엔드, DB 설계, 아키텍트 조직의 프로젝트 관리자들을 개발자 또는 제품 책임자로 전환하기로 했다. 하지만, 이를 모두 한번에 수행하면 일대 혼란이 일어날 것이라 생각되어, 파일럿을 수행하기로 했다.</p><p>우선 한 팀의 프로젝트 관리자를 개발자로 전환했다. 이 프로젝트 관리자는 이 전부터 이해관계자와의 협의보다 개발자를 더 선호하던 사람이었다. 이후 다기능 팀(Cross Functional Team)을 만들었다. 제품 책임자를 제외한 모든 역할자 즉 테크니컬 라이터, QA등을 개발자로 전환했다.</p><p>그리고 사내에는 향후 본인의 전문성을 중심으로 하되 풀 스택 개발자로 일해야 한다고 이야기 했다. 프로젝트 관리자들에게는 내년부터 프로젝트 관리자라는 역할이 모두 없어질 것이며, 파일럿을 수행하는 팀과 비슷한 형태로 업무를 수행하게 될 것이고 이를 회사는 배려할 것이라고 이야기 했다.</p><p>2) 2단계 (평가제도의 혁신)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/0*-RZOKjeX3rKvmyCb" /><figcaption>[A사의 2단계 변화]</figcaption></figure><p>일부 사람은 회사를 떠났으나, 대부분 인력들의 일하는 만족도는 높아졌다. 왜냐하면 회사가 기술 교육, 세미나 참석을 더 자유롭게 받아 개인들이 성장 할 수 있도록 배려했기 때문이다. 그리고 개발 코치라는 역할자들 7명을 신규로 채용했다. 1명이 30명 정도를 담당하는 식으로 기술적인 어려운점이 있을때마다 짝 코딩을 실시하며 도움을 주었다.</p><p>그리고 팀 평가 방식을 변화했다. 회고 형식을 바꾸어 한 명의 퍼실리테이터와 함께 들어가서 미팅 룹에서 서로에게 모두 피드백을 주는 365 피드백 방식을 도입했다. 이를 통해 개인에게 성장을 위한 데이터를 제공했다. 또한 평가 방식도 개선했는데, 기술력, 팀 협업 능력, 팀 공헌도의 세 가지 측면에서 평가했다. 기술력은 특정 언어에 대한 기술력을 팀의 동료들이 평가하는 것이었는데, 개발자들 스스로 평가 항목을 정했다. 팀 협업 능력은 짝 프로그래밍의 실력이라던지, 코드리뷰를 하는 능력, 팀에게 피드백을 얼마나 잘 제공하는지 정도의 항목을 평가했다. 마지막으로 팀 공헌도는 다른 팀원에 비해 얼마나 팀에 헌신하는지, 협업을 하는 능력이 얼마나 좋은지, 새로운 발상을 얼마나 잘 할 수 있는지로 기준을 잡았다.</p><p>3) 3단계 (인사, 관리제도의 혁신)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/922/0*WqDcl-E7qte0Xoxs" /><figcaption>[A사의 3단계 혁신]</figcaption></figure><p>마지막으로 채용 프로세스를 변경했다. 채용 과정 시 이전에는 회사 전체적으로 채용을 실시하던 것에서 HR은 팀이 원하는 인력을 찾고 팀이 주축으로 인력 관리 예산 및 필요를 고려하여 인력을 채용하는 형태로 전환하였다. 또한 프로젝트의 예산 또한 과거 프로젝트 단위로 예산을 주던 것에서 역량 중심의 예산 부여 방식으로 변경하여 개발팀이 더 안전한 그물망에서 개발할 수 있도록 했다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=678d451638e0" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Phase#4] Silencing Conflict at Work — 필요한 말을 하지 않는 똑똑한 사람들]]></title>
            <link>https://medium.com/@hubert.shin/silencing-conflict-at-work-%ED%95%84%EC%9A%94%ED%95%9C-%EB%A7%90%EC%9D%84-%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%98%91%EB%8F%85%ED%95%9C-%EC%82%AC%EB%9E%8C%EB%93%A4-1980201f4a8b?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/1980201f4a8b</guid>
            <category><![CDATA[대형프로젝트]]></category>
            <category><![CDATA[애자일]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Tue, 22 May 2018 12:43:31 GMT</pubDate>
            <atom:updated>2018-05-23T23:00:51.748Z</atom:updated>
            <content:encoded><![CDATA[<p>하버드 비즈니스 스쿨의 석학인 레슬리 A. 퍼로우는 조직 행동학을 연구하는 교수이다. 레슬리는 ‘03년도 부터 여러 회사들을 다니며, 몇 달의 기간동안 특정 조직을 관찰하고 개선할 점을 제시하는 ‘에쓰노그래퍼(Ethnographer)’ 로 활약해왔다. 주로 엑손 모바일, 월마트, GM들과 같은 포츈 500 안에 드는 대형 회사들을 대상으로 관찰하고 연구했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/436/0*m3OmsYnCwFT_9CDa." /></figure><p>[레슬리 A. 퍼로우]</p><p>레슬리가 발견한 것 중 흥미로웠던 점들은 누구나 가고 싶어하는 고액 연봉을 주는 회사들의 고학력 인재들이 때때로 매우 비효율적으로 일한다는 것이었다. 심지어 서로의 자존심에 상처주고 싶지 않아 실제 필요한 이야기를 제 때 하지도 못한다고 한다. 이의 실 예제를 들어보면 다음과 같다.</p><p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</p><p>“얼마전까지 보통 3~5년 정도의 기간동안 프로젝트를 수행하던 회사가 있다. 이들은 최고의 결과물을 내기 위해 그 기간동안 프로젝트에 최적화된 일하는 방법을 선택했다. 매달 두 번의 4시간 동안 상세 회의를 통해 아젠다를 하나씩 잘 정리했다. 또한 이 미팅을 통해 나온 데이터와 제안들을 의사결정자들과 늘 공유했다. 때문에 프리젠테이션을 준비하고 그들의 눈높이에 맞추기 위해 프로젝트 팀원들은 열심히 노력했다.</p><p>그러던 어느날 긴급한 아젠다가 떨어졌다. 프로젝트의 기간이 3년 대신에 9개월로 정해졌다. 고학력의 그 팀의 구성원들은 이전처럼 열심히 일했다. 그들은 프로젝트 계획을 과거 수행해왔던 노하우로부터 정했다. 이는 완벽해 보였다. 하지만 프로젝트를 수행하면서 조금씩 문제가 발생했다.</p><p>그들은 똑같이 두 번의 4시간 동안의 상세 회의를 수행했다. 다만 프로젝트 기간이 짧아졌기 때문에, 한 달 대신에 일주일 단위로 회의를 했다. 일주일에 4시간 동안의 회의를 화요일 목요일 마다 진행한 것이다. 그들은 동일한 방법으로 의사결정자들과 생각을 맞추기 위한 프리젠테이션 준비를 했다. 하지만 4시간 회의를 위한 레포트 준비와 의사결정자들을 위한 프리젠테이션에 이전 3년 프로젝트 수행 시 만큼의 공수를 들여야 했다. 모두가 그 정도의 결과물을 기대했기 때문이다.</p><p>이 때문에, 일하는 사람들의 야근과 주말 근무가 시작되었다. 레포트를 위한 준비는 정작 프로젝트 수행을 위한 다른 사안들을 지연시켰다. 그 지연은 더 많은 야근과 주말 근무를 일으켰다.</p><p>하지만, 이를 의사 결정자들에게 정직하게 이야기하는 사람은 없었다. 해당 프로젝트가 회사에 매우 중요한 것이었기에, 모두가 자존심을 지키기 위해 열심히 일하며 문제를 해결하고자 더 노력했다. 중간 관리자들이 보고 시 되어 있다고 말하는 일 또한 잦아졌다. 이미 진행됐다고 보고 한 일들에 새로운 일들까지 더 해져 더 짧은 시간에 작업을 수행해야 하는 상황이 더 자주 더 많이 발생했다.</p><p>이 때문이었을까, 실무자들과 중간관리자들간의 신뢰가 무너졌다. 하지만 실무자들 중에 누구도 이를 중간관리자에게 명확하게 이야기 하지 않았다. 중간관리자는 이 이슈를 묵인하는 프로젝트 관리자에 대해 커다란 불만을 갖게 되었고, 프로젝트 전체적으로 신뢰하지 못하는 분위기 까지 생겨났다. 결과적으로 프로젝트는 후반기에 커다란 이슈들이 발생하여 크게 실패했고, 회사는 커다란 손실을 입었다.“</p><p>— — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</p><p>여러분이 일하는 환경에서 위의 이야기 같은 일이 관찰되는 경우가 있는가? 실은 이 일화는 매우 많은 회사들에서 흔히 발견되는 패턴이다. 이전에 관습에 의해 잘못된 행위들이 만들어지는 것이고, 레슬리교수는 이를 “일터에서 침묵으로 만들어지는 혼란(Silencing conflict at work)”이라 정의한다.</p><p>즉, 문제가 있을때는 필요한 말을 제때에 하고 이를 개선하는 것이 중요하다. 이 상황에 누가 프로젝트의 문제점을 찾고 개선할 수 있을까? 애자일 코치는 이러한 일을 하는데 매우 좋은 역할자이다. 애자일이라는 강력한 툴들을 이용하여 전체를 보고, 개선할 부분을 찾고 팀과 함께 실행할 수 있다.</p><p>필자는 ‘09년 레슬리가 경험한 것과 비슷한 일을 겪었다. 나의 커리어에서 처음 수행했던 애자일 코치로서의 첫 번째 대형 프로젝트에서 였다. 필자는 프로젝트가 애자일이 필요하다는 설득에 프로젝트에 코치로 참여하게 되었다.</p><p>해당 프로젝트에는 120명의 팀원이 있었다. A사 40명, B사 40명, 그리고 B사의 외주계약으로 들어온 C사 인력이 40명이었다. 이 프로젝트는 9개월 간 매우 많은 양의 개발을 해야 하는 프로젝트 였다. 초 단납기에 프로젝트르 수행해야 했다.</p><p>다행히도, 이 프로젝트에 구성된 인력들은 대부분 훌륭한 역량을 가진 인력들이었다. A, C사의 인력은 기술력과 풍부한 프로그래밍 경험이 B사 인력은 도메인 전문가들이었다. 이들은 대부분 좋은 학력의 소유자들이었다. 그리고 열정적이었다. 또한 해당 프로젝트 도메인에 전문가들이 많았다. 그 업무에 대해 7년 이상 프로젝트를 수행하면서 해당 업무들에 대해서도 잔뼈가 굵은 사람들이었다.</p><p>필자가 프로젝트에 투입되자마자 처음 했던 것은 관찰이었다. 전체 팀을 일주일 간 관찰하며 애자일 방식으로 어떻게 팀을 개선할 지 고민했다. 얼마 후 한 가지 문제를 관찰하게 된다. 아래의 타임라인을 보고, 여기서의 실제 문제가 무엇인지 함께 생각해보자.</p><p>* 타임라인</p><p>- A사 개발자가 B사 개발자 중 한 명의 협업 방식에 대해 문제 삼기 위해 이슈를 에스컬레이션하기로 결정했다. (1일차 오후 4시)</p><p>- A사 개발자는 A사 중간관리자에게 문제를 이야기 했다.(2일차 오전 9시 30분)</p><p>- A사 중간관리자는 A사 프로젝트 관리자에게 이슈를 에스컬레이션 했다.(3일차 오전 9시)</p><p>- A사 프로젝트 관리자는 PMO회의에서 공식적으로 B사 프로젝트 관리자에게 이슈를 제기했다. (3일차 오전 10시)</p><p>- B사 프로젝트 관리자는 협업 방식이 문제된 B사 개발자의 담당 중간관리자에게 이슈해결방안이 전달되었다.(4일차 오전 9시)</p><p>- B사 중간관리자는 개발자와 이야기 하며, 협업에 대해 주의사항을 이야기 하고 재발하지 않도록 조치했다. (4일차 오전 9시 30분)</p><p>여러분은 이 상황을 보고 어떠한 생각이 드는가? 먼저, 문제의 해결에 왜 이렇게 많은 시간이 소요되어야 하는지 궁금해질 것이다. 문제를 해결하는데 거의 4일(3.7)이 걸렸다. 가장 먼저 할 수 있는 생각은 해결 방법을 바꾸는 것이다. A사의 개발자가 이슈를 에스컬레이션 하지 않고 직접 B사 인력과 이야기 하면서, 팀 안에서 문제를 해결하면, 가장 좋을 것이다. 그 방법이 가장 최선의 방법이라는 것에는 이견이 없다. 하지만 여러 회사들이 함께 일 할 때 사소한 일로 회사간 긴장감이 생기기도 한다. 이러한 상황을 함께 고려하여 이 이슈는 해결을 위해 꼭 에스컬레이션이 되어야 한다고 가정하자.</p><p>그렇다면, 이슈를 해결하는데, 이렇게 많은 시간이 소요된 이유가 무엇일까? 원인을 찾기 위해 아래의 커뮤니케이션 체계를 보자.</p><p>* 회의체계</p><p>- 9:00 프로젝트 관리자+중간관리자 회의 — A사 프로젝트 관리자, 중간관리자 회의 (1번 회의실), B사 프로젝트 관리자, 중간관리자 회의(2번 회의실)</p><p>- 9:30 팀회의 — A사 중간관리자, 팀원들과의 회의(각 팀 사무실) B사 중간관리자, 팀원들과의 회의(각 팀 사무실)</p><p>- 10:00 PMO 회의 — A, B사 통합 PMO회의(1번 회의실)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/572/0*0XhHiamJC0q6UNPQ." /><figcaption>[A, B사 회의 체계]</figcaption></figure><p>위의 커뮤니케이션 방식은 매우 일반적으로 보인다. 대형 프로젝트에는 이슈를 해결하기 위해 보통 위와 같은 계층형 프로젝트 회의 체계를 만든다. 이는 프로젝트의 효율을 극대화 하기 위해 적합한 채널들을 만드는 것이다.</p><p>하지만, 개발자가 상향으로 이슈를 제기하고 문제를 해결하는데는 그다지 합리적이지 않아 보인다. 각 타임라인 별 이벤트를 커뮤니케이션 체계와 함께 생각하면 다음과 같다.</p><p>* 타임라인 + 회의체계</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/634/0*wW-SEIy3k9Vqk1wL." /><figcaption>[A사 개발자가 B사 개발자에 대해 제기한 이슈가 해결되는 방법]</figcaption></figure><p>이 방식을 관찰한 이후로 프로젝트 관리자과 중간관리자를 인터뷰하며 왜 위와 같은 커뮤니케이션 방식을 선택했는지 물었다. 그들의 답은 다음과 같았다.</p><p>“먼저 9시와 10시 회의를 만들었습니다. 9시는 프로젝트 관리자과 중간관리자 간의 회의, 10시는 PMO회의 였죠. 하지만 프로젝트 초기에 정해야 할 것이 많아지면서 PMO회의 마다의 전달사항이 점점 많아 지기 시작했습니다. 이에 중간관리자들이 팀원들을 공식적으로 만나는 자리를 가지기 원했습니다. 그래서 9시 30분 회의가 만들어졌죠.”</p><p>일을 하다 자연스레 만들어 질 수 있는 형태의 커뮤니케이션이 병목이 되고 있다는 것을 2주 째 팀원들은 알지 못했다. 이들을 먼저 일깨우는 것이 먼저였다. 회의에서 프로젝트 관리자과 중간관리자 들을 대상으로 애자일을 수행하자고 하면서, 가장 먼저 제안했던 것은 커뮤니케이션 방식의 변경이었다.</p><p>우선 팀 별로 10명에서 30명까지 있던 인원들을 10명 이하의 스크럼으로 변형했다. 업무별로 1~3개의 스크럼이 생겼고, 해당 스크럼 당 A사의 리더를 PL, B사의 리더를 제품책임자(PO)라고 이야기 했다. 둘의 역할은 PL은 일정 및 이슈 관리, PO는 기능에 대한 정의였다. 그리고 하위 스크럼 팀 마다 스크럼 마스터 역할을 부여하여, 수시로 PL, 제품책임자와 이야기 하자고 제안했다. 각 팀은 데일리 스크럼이라는 저녁에 수행한 회의를 통해 팀내 이슈를 공유하고 도출하며 필요한 경우 이를 에스컬레이션 한다. 즉, PL에게는 이슈 전달, PO에게는 이슈 공유를 수행한다.</p><p>그리고 이 PL, PO 들이 모여 회의를 함께 진행하는 것을 제안했다. 그리고 PMO는 기존에 참석하던 프로젝트 관리자과 PL과 PO대표가 함께 참석하자고 제안했다. 이 체계를 개선하면 다음과 같았다.</p><p>* 개선된 커뮤니케이션 체계</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-7WkjAPfz8FuMUm2." /><figcaption>[개선한 미팅 체계]</figcaption></figure><p>- 1일차 오후 5시 45분: 데일리 스크럼 (5분~10분)</p><p>- 2일차 오전 9시 45분: A, B사 PL, PO 통합회의(15~20분)</p><p>- 2일차 오전 10시: PMO 회의 — A, B사 공동 PMO회의(1번 회의실)</p><p>이렇게 변경하자 대부분의 문제들이 하루 안에 해결되는 상황으로 개선되었다. 피드백이 빨라지고, 팀 전체적으로 초기 이슈를 빨리 해결하게 되었다.</p><p>* 개선된 타임라인 및 커뮤니케이션 방법</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/677/0*zY_1V204niviPF_4." /></figure><p>- A사 개발자가 B사 개발자 중 한 명의 협업 방식에 대해 문제 삼기 위해 이슈를 에스컬레이션하기로 결정했다. (1일차 오후 4시)</p><p>- A사 개발자는 A사 중간관리자에게 문제에 대해 이야기 한다 (1일차 5시 45분)</p><p>- A사 개발자는 A사 중간관리자, B사 중간관리자에게 문제를 이야기 하고 해결방안을 찾고, PMO회의에서 공유를 결정한다. (2일차 오후 9시 45분)</p><p>- PMO회의에서 문제를 공유하고 해결방법을 찾는다. (2일차 오전 10시)</p><p>- B사 중간관리자는 개발자와 이야기 하며, 협업에 대해 주의사항을 이야기 하고 재발하지 않도록 조치했다.(2일차 오후 5시 45분)</p><p>여러분들의 주변에서도 비슷한 느낌의 상황을 심심치 않게 관찰할 수 있을 것이라 생각한다. 뭔가 다들 정말 열심히 하는데, 조금만 크게 보면 비효과적인 무엇인가가 있는 상황이 종종 있다. 이 상황이 문제라는 생각이 들면 이 글을 읽는 여러분들이 이를 해결하는 시작점의 촉매가 되어보면 어떨까?</p><p>똑똑한 그들이 주변 현상을 객관적으로 볼 여유가 없을 때, 약간의 오지랖으로 단순히 문제를 제기하고 해결방안을 팔로우 업하는 것 만으로도 많은 사람들이 일할 때 조금 더 행복해 질 수 있다는 것을 기억했으면 한다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=1980201f4a8b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Phase#3] 어느 유지보수팀의 애자일 이야기]]></title>
            <link>https://medium.com/@hubert.shin/phase-4-%EC%96%B4%EB%8A%90-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%ED%8C%80%EC%9D%98-%EC%95%A0%EC%9E%90%EC%9D%BC-%EC%9D%B4%EC%95%BC%EA%B8%B0-3c952aca081?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/3c952aca081</guid>
            <category><![CDATA[유지보수]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Sun, 29 Oct 2017 14:22:19 GMT</pubDate>
            <atom:updated>2017-10-30T01:16:06.567Z</atom:updated>
            <content:encoded><![CDATA[<p>애자일은 주로 개발에만 맞는 방식이라고 이야기를 하는 경우가 있다. 이는 오해라고 생각한다. 애자일이 결국 현재 상황에서 지속적인 개선을 하자는 것이기에, 어떠한 조직에든 시도할 수 있는 것들이 있다.</p><p>달리 말하면 제약이 있기에 애자일이라는 것이 필요하다. 문제가 있으니까 개선이 필요한 것이다.</p><p>이러한 맥락으로 지금부터 현실적인 제약이 가장 많은 것으로 이야기 되는 유지보수 팀의 애자일 적용 사례를 설명해보려고 한다.</p><p>이 팀은 ‘09년에 만났다. 주로 내 선배이자 동료인 애자일 코치가 6주간 코칭을 진행했고 필자는 관찰했다. 애자일 코치는 이틀에 한 번꼴로 팀을 만났으며 진행한 코칭 시간은 한번에 1~4시간 정도였다.</p><p><em>“A팀은 5명으로 조직되어 있다. 이 팀의 구성은 투입된 지 1년 남짓 된 인력부터 시작해서 15년째 이 팀의 유지보수를 하고 있는 인력도 있다. 사원 1명, 대리 1명, 과장 2명, 차장 1명(A)으로 구성되어 4가지의 시스템의 유지보수를 동시에 하고 있다.</em></p><p><em>과거에는 담당하는 도메인별 시스템별 업무가 있었으나 3년 전 신규 시스템을 개발하면서, 기존의 도메인 지식을 알고 있던 몇몇 친구가 타 팀으로 전배를 가게 되어, 현재는 도메인 별 구성은 무리한 상황이다. 때문에, 주로 개발의 레이어위주로 일이 분배되어 있다. 예를들면 사원과 대리는 주로 화면 위주 개발을 하고, 과장 2명 중 한명은 서버쪽 개발을 수행한다.</em></p><p><em>또한 B과장은 인프라에 대한 관리 및 배포를 관리한다. A는 전체의 업무를 총괄한다. 이들은 4개 시스템에 대해 모든 설명을 다른 4명에게 해준다. 5명의 인원 중 4명이 주로 Hands on 일을 한다. 팀웍은 매우 좋다. 더 직급이 높은 선배들이 일을 도맡아 팀원들을 보호해주는 느낌을 주고, 문제에 대해 늘 적극적으로 커뮤니케이션 한다. 혹시나 고객의 험한 말에 상처를 주는 경우라도 있으면, 서로 동기부여해주는 일도 빈번히 일어난다.“</em></p><p><strong>애자일의 시작</strong></p><p>이 팀이 애자일을 접하게 된 것은 ‘09년이었다. A가 회사에서 요구한 강제 애자일 교육에 입과하여 교육을 받고 이 교육의 후속과제로 애자일을 현장에 적용하라는 미션을 받으면서 부터였다.</p><p>그는 교육을 통해 스크럼과 XP에 대해 배우고 익혔다. 하지만 여전히 이를 현장에 어떻게 적용 할 지 도저히 감이 잡히지 않았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*qEAu_l4qCLiXlMy_." /><figcaption>[그림] 스크럼 프로세스 설명 (출처: <a href="https://sciodev.com/blog/best-practices-for-distributed-agile-part-1-of-4/">https://sciodev.com/blog/</a>)</figcaption></figure><p><strong>1) 제품책임자/스크럼마스터/팀 멤버의 구성 (스크럼)</strong></p><p>- 제품책임자는 만들어야 할 기능에 대한 우선순위화를 수행한다. 그리고 기능 목록인 제품 백로그라는 것을 늘 유지해야 한다고 한다. 하지만 현재 팀을 고려하면 과연 누가 이 프로젝트에서 제품 책임자가 될 수 있겠는가? 4개의 시스템을 사용하는 사용자인가? 아니면 예산을 확보해주는 고객 부서인가? 아니면 변경 요구사항을 늘 전달하는 시스템 관리 부서인가? 혼란스러웠다. 시스템별 전체 오너들이 모호했다.</p><p>- 스크럼마스터는 더 혼란스러운 역할이었다. 내가 잘 알고 있는 PM의 역할인가? 아니면 팀의 이슈를 관리하는 PMO인가? 팀의 병목을 해결한다고 하니, 회사에 기술리딩을 하는 아키텍트가 이런 역할을 해야 하나? 우리 팀에서 과연 누가 이 역할을 할 수 있을까, 고민스러웠다.</p><p><strong>2) 제품 백로그/스프린트 백로그/스프린트의 적용 (스크럼)</strong></p><p>- 스크럼에서는, 전체의 업무 목록을 제품 백로그라 하고, 한 달의 한 번 정도씩 스프린트 백로그라는 것을 통해 상세화 한다고 한다. 그리고 스프린트 백로그를 기준으로 팀 멤버들이 일하는 동안 스크럼 마스터가 주변 상황을 방어하며 계속 그 일만 수행할 수 있도록 한다고 하는데, 그런 것은 현실에 일어날 수 없는 일이었다. 하루에도 몇 번씩 다양한 루트를 통해 요구사항이 들어온다.<br> <br>- 고객들은 직접 찾아오거나 전화를 통해 우리 팀에 찾아와 늘 다음과 같이 이야기 한다. “오늘까지 이 일을 반드시 끝내지 않으면 큰일이 난다” 예전에는 이들의 말이 억지스러웠지만, 오랜 시간 그들과 일하면서 그들이 그럴 수 밖에 없는 이유에 대해서도 이해하기 시작했다. 때문에 최대한 그들과 열려진 자세로 이야기를 하려면 주고 받는게 있어야 한다. 스크럼의 한 달의 타임 프레임을 가져간다는 것은, 내년에는 재계약을 하지 말아달라고 부탁하는 것이나 마찬가지였다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1014/0*F0yfMe9TkZRdQn3l." /><figcaption>[그림] XP 프랙티스(출처: xdev.com)</figcaption></figure><p><strong>3) 엔지니어링 프랙티의 적용(XP)</strong></p><p>- 테스트 주도개발은 개발자들이 할 수 있는 것이니 먼저 진행해보려고 했으나, 테스트케이스를 먼저 만들고 개발하라니, 현재 테스트케이스가 0인 레거시를 다루는 상황에서 언제부터 어디까지 테스트케이스를 만들어야 할 지 감이 잡히지 않았다. 몇 개의 테스트 케이스를 추가 해보려고 했지만, DB의 값이 바뀌면서 되었다 안되었다 하는 Flaky 테스트가 만들어져 이를 유지보수 하는 것이 더 어려운 상황이 되었다. 또한 화면을 개발하는 인력들과 서버를 개발하는 인력으로 구성되어 있기에 각자의 테스트코드를 짜는 것도 매우 어려웠다.</p><p>- 패어 프로그래밍은 개개인의 역량이 미치지 못한다는 생각이었다. 팀 전체적으로 사원과 대리는 서버를 개발하기에는 아직 멀었다는 인식이 있었다. 그리고 무리한 패어로 그들을 가르치다가 심지어 일처리가 미루어질 것이라고 생각되었다.</p><p><strong>애자일 코치를 만나다.</strong></p><p>무엇을 할 수 있을까? A는 고민하다가 , 결국 사내 전문가를 부르자고 생각했다. 혼자서는 무엇을 어떻게 해야 할 지 고민하다 모양만 낸 과제를 하게 될 것 같았다. 다행히 흔쾌히 사내 전문가 애자일 코치는 팀에 찾아와 주었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/0*2a1iGVhuDWTd8GIX." /><figcaption>[그림] 애자일 코치(출처: SolutionsIQ)</figcaption></figure><p>애자일 코치는 1시간 정도 A의 고민을 듣더니, 스크럼 이라는 말, XP라는 말자체는 크게 의미가 없다고 이야기 했다. 대신에 앞으로 초점을 맞춰야 하는 것은 현재 상태의 일을 어떻게 하면 개선하고 주기적으로 팀이 함께 고민하며 그 개선의 의지를 끊임없이 가져가는 것이라 했다.</p><p>A는 이 말을 듣고 여전히 이해가 가지 않았다. “그래서 뭘 하라는 거야..?”</p><p>그는 먼저 인터뷰를 시작했다. 팀원당 30분씩 그들이 느끼는 팀에 대해 들었다. 5명에 대한 인터뷰가 모두 끝난 뒤, 사내 애자일 전문가는 A를 불러 다음과 같은 결과를 이야기해 줬다.</p><p><strong>발견한 문제점</strong></p><p>(1) 팀원간 커뮤니케이션 부족으로 문제점 공유미흡</p><p>(2) 업무처리 관리시스템 부재로 인한 비 효율적인 자원분배</p><p>(3) 독립적인 업무할당으로 인한 기술수준 편차 발생</p><p>(4) 수동배포로 인한 업무공수손실 및 효과적인 테스트수행 미흡</p><p>실제 팀원들과 대화를 나누어 보니 A의 생각과는 다르게 가장 먼저, (1) 정보가 팀 내에서 제대로 공유되지 않는다는 피드백이 나왔다. 팀원들은 더 많은 정보를 알고 싶고, 배우고 싶어 하는데 기회가 없다는 이야기도 있었다. 또한 A가 하는 일에 대해서는 “차장님이 늘 팀을 위해 헌신하시는데 업무 내용을 잘 몰라 무엇을 도와야 할 지 잘 모르겠다” 라는 피드백이 있었다.</p><p>또한 (2) 관리시스템에 없다는 이야기가 있었는데, 운영 시스템의 특성상 일년 중 늘 주기적으로 진행하는 일들이 있는데, 몰리는 사람에게만 업무가 몰리는 경향이 늘 반복되고 있다고 했다. 이럴 때마다, 무언가 업무 전체를 보는 뷰가 있으면 좋겠다는 고민을 했었다고 한다. 도대체 누가 얼마만큼의 일을 하는지 공유가 안되어 알고 싶다는 피드백 또한 있었다.</p><p>(3) 전체 A to Z가 아닌 화면과 서버만 개발하다보니, 늘 숲보다 나무를 보는 느낌이라는 피드백도 있었다. 이 때문에 실제 문제 해결시 마다 느낄 수 있는 성취감이 부족하다고 했다. 과장이 혼자 진행하는 배포 같은 경우는 누구도 공유할 수 없다고 했다. 배포를 담당하는 과장만 이 일을 할 수 있기에 배포가 있는 날인 매주 수요일과 금요일은 과장만 늘 10시가 넘어야 퇴근하게되는 일이 반복되고 있다고 했다.</p><p>(4) 배포 과정에서 로컬에 통합환경이 없기 때문에 서버에서 컴파일 하고 운영 서버에서 클래스를 복사하고 서버를 올렸다 내렸다 하는 형태로 배포를 하고 있다고 했다. 이 때문에 테스트를 하려면 운영서버를 잠시 쉴 수 있는 저녁 시간에 활용해야 하는데, 이 때마다 늘 야근을 하고 있다고 했다.</p><p><strong>제안</strong></p><p>A는 이 이야기를 듣고 약간의 현기증을 느꼈다. 늘 에너지가 넘치는 좋은 팀이라고 생각했었는데, 상황에 대해 부정적으로 대답한 팀원들의 이야기가 좀 섭섭했다.</p><p>하지만 다른 편으로는, 모두들 이들 모두 팀을 정말 사랑있다는 것을 알 수 있었다. 이제부터 이 팀이 어떻게 나아질 수 있는지에 대해 고민할 수 있다는 생각이 들었다. 섭섭함은 기대감으로 바뀌었고, 팀원들을 위해 새로운 시도를 해보고자 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/692/0*kBW0xbQEqRu4WrQG." /><figcaption>[그림] 애자일 플랜 (출처: <a href="http://www.the-program-manager.com/">http://www.the-program-manager.com/</a>)</figcaption></figure><p>애자일 코치는 A와의 대화를 통해 2주씩 3회의 이터레이션을 진행해보자라고 제안했다. 그리고 그 이터레이션의 목표를 다음과 같이 잡았다.</p><p><em>(1) 이터레이션 #1 목표: 팀문화 조직문화의 변화를 통해 사고의 전환을 가져온다</em></p><p><em>- 스탠드업 미팅, 포스트잇을 이용한 업무내용 공유, 업무량 함께 추정, 회고를 통한 개선항목 도출</em></p><p><em>(2) 이터레이션 #2 목표: 툴을 사용하여 팀원들이 하고 있는일을 투명화한다</em></p><p><em>- Kanban 보드 활용</em></p><p><em>(3) 이터레이션 #3 목표: Engineering 부분을 특화한다.</em></p><p><em>- 지속적인 통합, 유지가능할 정도로 일하기</em></p><p>그리고 5명의 팀원을 모두 모아 어떻게 애자일 방식을 6주간 진행할 지 사전에 설명했다. 애자일 코치가 퍼실리테이션을 맡았고, 팀원들의 반응들은 매우 호의적이었다. 사전 인터뷰 내용 때문인지 모두들 “나의 문제를 해결할 수 있다”라는 기대감을 보였다.</p><p>2주 후 첫번째 회고를 진행했다. 스탠드업 미팅, 포스트잇을 이용한 업무공유, 업무량을 함께 추정하는 것 등을 2주간 진행했다. 다음과 같은 피드백들이 있었다.</p><p><strong>&lt;(2주후) 이터레이션 #1 회고 결과&gt;</strong></p><p><strong><em>Plus: </em></strong><em>새로운 자극/새로운 만남, 팀원간 의사소통 증가, 백로그 관리를 통해 업무처리 효율성 증가됨, 자원할당, 업무분배의 팀원 참여를 통해 업무 주도적 수행 가능, 초급 개발자의 향상된 능력 확인, 팀원간 소통 증가를 통해 팀 내 신뢰도 향상</em></p><p><strong><em>Minus: </em></strong><em>애자일에 대한 압박이 예상됨, 연말에 일이 몰리고 있어 부담이 될까봐 걱정됨, 업무가 추정했던 것보다 큰 일이 반복되고 있음</em></p><p>그리고 4주후 Tool 을 사용한 후에는 다음과 같은 피드백이 있었다.</p><p><strong>&lt;(4주후) 이터레이션 #2 회고 결과&gt;</strong></p><p><strong><em>Plus: </em></strong><em>우리팀이 점점 홀팀이 되어가고 있음, 백로그가 잘 분배되어 업무 능률이 향상되었다.</em></p><p><strong><em>Minus: </em></strong><em>일회성 수명업무가 다량 발생하여 업무에 집중하지 못하고 있음, 레드마인 완성도가 떨어져 자유롭게 활용할 수 없음, 여전히 애자일 관련 기법에 많은 시간이 소요됨</em></p><p>마지막 지속적인 통합과 패어 프로그래밍을 해본 6주 후에는 다음과 같은 피드백이 있었다.</p><p><strong>&lt;(6주후) 이터레이션 #3 회고 결과&gt;</strong></p><p><strong><em>Plus: </em></strong><em>패어 프로그래밍을 실제 적용해보니 예상외의 효과를 느낌, 패어 프로그래밍을 통해 실제 협업을 하고 있다는 느낌 나의 일이 아닌 우리의 일이라는 생각이 들음, Redmine을 통해 작업현황이 효과적으로 공유되고 있음, 초급 인력들의 개발능력이 생각보다 훨씬 나음, 배포를 돌아가면서 진행할 수 있게 됨</em></p><p><strong><em>Minus: </em></strong><em>패어 프로그래밍 시 너무 빠르게 피로해짐, 애자일 코치 부재시 애자일 기법의 꾸준한 실천이 어려움, 수명업무가 발생할 때 패어를 풀어야 함</em></p><p>6주간의 애자일 관련 활동을 하면서 가장 팀이 인사이트를 많이 받은 때는 마지막주 였다. 팀원들은 서로에 대해 다음과 같은 암묵적 가정을 가지고 있었다는 것을 깨달았다.</p><p><em>“직급이 낮은 인력은 서버를 개발하기에 부족한 역량을 가졌기 때문에 화면을 주로 개발한다”</em></p><p>6주차에 진행된 매우 짧은 4시간의 패어프로그래밍 동안 팀원들이 생각이 잘못된 것임을 확인하게 된 계기가 된 이벤트였다. 실제로 같은 업무에 대해 패어로 일해보니, 사원/대리의 개발자들도 업무를 화면부터 서버까지 진행하는데 큰 무리가 없었다.</p><p>이를 통해 팀은 진작에 이러한 일을 함께 하고 잘 분배했다면 훨씬 더 자신들이 보다 중요한 일에 시간을 쓸 수 있었을 것이라는 생각이 되었고, 후배들에게 보다 많은 배움의 기회를 줄 수 있었을 것이라는 후회를 했다.</p><p>특히 배포를 도맡아하던 B과장이 다음과 같은 고백을 했다.</p><p><em>“수/금요일마다 늘 10시가 넘어야 퇴근하는 일을 맡았던 것이 정말 괴로웠는데, 이제는 같이 할 수 있는 팀원들이 있다.”</em></p><p>6주차 부터 배포를 팀원들이 번갈아가며 진행할 수 있게되었다. 지속적인 통합 체계를 통해 로컬에서 빌드 후 개발서버에서 빌드/테스트 하고 이를 운영서버에 보낼 수 있는 장치가 그동안 배포때마다 온 몸의 신경이 곤두서는 경험을 해야 했던 과장의 고통에서 벗어나는 일을 만들었다. 또한 팀원들은 보다 Cross Functional 하게 일할 수 있는 백업체계를 갖추었다.</p><p>짧은 기간이었지만, 팀원들은 더 나아지고 싶은 의지가 있었고, 배우고 싶은 욕구가 있었다. 6주간의 실험은 그들이 성장할 수 있다는 확신을 주었고, 이후로도 계속해서 애자일 관련 실험을 계속해오고 있다.</p><p>당시 회고 진행시 필자도 함께 잇었는데, 이때의 케미는 애자일 코칭을 계속해온 필자도 쉽게 잊지 못한다. 그 만큼 팀이 나아지는 그 순간을 즐기고 있었다.</p><p>글을 마치기 전, 부가적으로 해당 팀에서 조사한 설문을 함께 공유한다.</p><p>우선은 애자일 성숙도를 코칭 전과 후로 조사해봤는데 다음과 같아. 6가지에 대해 조사 했는데, 요구사항 관리 측면(Req Mgmt), 비전 공유 측면(Shared Vision), 이터레이션 개발(Itr Dev), 사용자스토리 개발(USDD), 홀 팀(Whole Team), 애자일 만족도(Agile Sat) 였다. 5명 모두 평균 3점 이하의 점수가 나왔다. (왼쪽 그림)</p><p>두 번째로 팀이 생각하는 기술적 스킬에 대한 조사도 진행했다. 팀이 정했고 스스로 설문을 진행했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/729/1*cAA85XBtyegiZxpsNz0zYA.png" /><figcaption>[그래프] 애자일 성숙도 전과 후</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/838/1*VuLom3Wz4qDaLdpHl_C5Fg.png" /><figcaption>[그래프] 팀 스킬 전과 후</figcaption></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3c952aca081" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Note#6] 성장 마인드셋과 애자일 전환에 대하여]]></title>
            <link>https://medium.com/@hubert.shin/note-6-%EC%84%B1%EC%9E%A5-%EB%A7%88%EC%9D%B8%EB%93%9C%EC%85%8B%EA%B3%BC-%EC%95%A0%EC%9E%90%EC%9D%BC-%EC%A0%84%ED%99%98%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-3c8b9bd6c083?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/3c8b9bd6c083</guid>
            <category><![CDATA[애자일전환]]></category>
            <category><![CDATA[성장마인드셋]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Sun, 15 Oct 2017 11:26:33 GMT</pubDate>
            <atom:updated>2017-10-15T13:40:14.260Z</atom:updated>
            <content:encoded><![CDATA[<p>오늘 저는 성장 마인드셋과 애자일 전환에 대해 이야기 해보려고 합니다.</p><p>오늘 이 자료를 통해 들어 많은 회사들이 지향하는 애자일 문화라는 것이어떠한 의미를 가지고 있는지 다시 한번 재조명하고자 합니다.</p><p>이 설명을 위해 제가 존경하는 Ahmed Sidky 라는 분의 Agile NZ 2015 키노트 프리젠테이션에서 내용을 발췌해 왔습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/299/0*eS3M5bU42kxf_8K4." /></figure><p>최근 10년간 많은 회사들에서 다음과 같은 일들이 일어났습니다.</p><p>여러분에게 어느 날 여러분의 CEO인 Jack이 다음과 같은 메세지를 줍니다.</p><p><em>“자 스테이시! 애자일이라는 것이 있는데, 많은 회사들이 쓰고 있데, 이를 한번 해 보는게 어때? 물론 네가 하는 일도 지금 있지만, 이 일도 그것만큼 중요해 보여. 먼저 2개 정도 성공 사례를 만들어봐.”</em></p><p>그리고 외부 컨설팅의 도움으로 Scrum을 이용한 2개의 성공사례를 만듭니다. 그 결과를 본 Jack에게 다음과 같이 말하죠.</p><p><em>“그럼 우리 Scrum을 올해 말까지 모두 하자. 먼저 애자일 관련 툴 설치부터 시작하자. 그리고 모두에게 그 Scrum 사례 팀처럼 하자라고 내가 시킬께”</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/606/0*NlvHCJbVaydCqNDC." /></figure><p>2016년 조사 결과에 따르면 전세계 94%정도의 IT회사가 애자일을 하고 있다고 이야기 하는데, 70%이상의 회사에 이와 비슷한 상황이 벌어진다고 합니다.</p><p>여러분이 이런 상황을 겪는다면 어떠한 느낌이 드실까요? 아래와 같은 질문을 하고 싶지 않으실까요?</p><p><em>“과연 이렇게 애자일 전환을 하는 것이 연속성(Sustainable)이 있을까? “,</em></p><p><em>“과연 이 방식이 애자일인가?”</em></p><p><em>“실제로 일에는 과연 내 일에 도움은 되는건가?“</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/238/0*ryR2s4B57a0oPCNj." /></figure><p>위 내용에 대한 답을 내기 전에 우리는 세상에 여러 가지 종류의 일이 있다는 것을 이해할 필요가 있습니다.</p><p>이를 피터 드러커가 나눈 분류를 이용하면 다음과 같이 나눌 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/299/0*FFDxxF5UFzi1GL2O." /></figure><p>Task Work 와 Knowledge Work 이라는 거죠</p><p>Task Work은 누군가가 할당 해준 일을 처음 생각했던 대로 제 때에 끝내는 것을 목표로 일하는 것을 말합니다. 반대로 Knowledge Work이라는 것은 창의적으로 생각하며 결과물을 만드는 일을 말하죠.</p><p>두 가지의 가장 큰 차이는 결과물입니다.</p><p>Task Work는 결과물을 예측하기 매우 쉽습니다. 대신 Knowledge Work은 결과물을 예측하기가 어렵습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/415/0*_lsEHeX_6wMcYFdk." /></figure><p>애자일은 주로 Knowledge Work 이라는 것을 지향하며, 이는 개인의 성장을 중요시 합니다.</p><p>이를 마인드셋과 함께 연결하면 Task Work는 주로 고정 마인드셋과 연관이 되고,</p><p>Knowledge Work은 “성장”을 중요하게 생각하는 성장 마인드셋 과 연관되게 됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/607/0*-o4jByE5RF5-mGoy." /></figure><p>이는 일에 대하여 직원들이 완전히 다른 접근을 하게 만듭니다.</p><p>고정 마인드셋은 정해진 일을 최대한 변경없이 끝내려는 성향을 갖게 합니다. 일을 고정시키고, 더 이상 무언가를 하는 것을 꺼려 합니다. 도전과 리스크를 핸들링 하는 것보다 보다 안정적인 방식으로 일하려고 노력합니다.</p><p>대신 성장 마인드셋이라는 것은 고객도 나도 이 일에 대해 잘 모르니, 함께 일하며 함께 배워/성장하며 일을 계속해서 해나가는 것을 중요하게 생각합니다. 이 경우 불확정성은 당연하다고 받아들이게 되죠.</p><p>큰 차이는 애자일 하면 빠질 수 없는 “이터레이션”이라는 것을 어떻게 받아들이냐로 발견됩니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/886/0*RjfPNcbceOphTGjS." /></figure><p>고정 마인드 셋은 요구정의를 해서 요구사항에 대한 선을 긋고, 전체 결과물을 정확히 예상하고 이를 기반으로 일을 하자고 제안합니다. 그러니까 그림을 그릴 때 우리는 모나리자라는 여성의 그림을 고객이 원할 것이고 “아니면 틀리다”라는 가정하에 일을 하죠. 이 때문에 확정을 원합니다. 고객이 잘 모를 수도 있지만, 확정을 해달라고 처음부터 얘기하죠.</p><p>고정 마인드셋은 이와 같은 이유로 실패를 용납하지 않습니다.</p><p>문제는 빠른 시기에 뭔가를 그리더라도, 전체적인 그림을 볼 수 없기에 고객이 자신이 이것을 원하는 것인지 아닌지 확인하기 어렵죠.</p><p>사실 세상의 많은 애자일을 한다는 조직도 여전히 고정 마인드셋으로 일을 하고 있습니다.</p><p>대신에 성장 마인드셋은 고객이 남성을 그리는 것을 원할 지 여성을 원할 지를 스스로 계속해서 배워가며 상호 인터렉션을 통해 결과물이 성장하게 합니다. 계속해서 가치를 증가시키는 방식이죠.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/970/0*GyeQVVBH5V5DOBFo." /></figure><p>이 방식의 특징은 첫 번째 스케치를 그려가면 고객이 원하던 것이 아닐 수 있다는 것에 기인합니다.</p><p>이것은 작고 빠른 시기의 실패를 의미하죠. 만약 고객이 원하던 것이 아니면, 아직 시간이 많이 남아있으니, 다음 이터레이션 때는 그 피드백을 기반으로 더 나은 그림을 만들어 갈 수 있는거죠.</p><p>이 때문에 피드백이 매우 중요합니다. 피드백을 통해 개선할 수 있다는 믿음을 가지고 있는 사람들이죠.</p><p>애자일은 일을 할 때 사람들이 성장 마인드셋을 가지고 있다는 가정에서 시작합니다.</p><p>때문에, 불확정적인 상황에서도 함께 고객과 이야기 하며 제품을 만들고 이터레이션을 통해 계속해서 고객의 가치를 찾아나가죠.</p><p>애자일은 마인드 셋이 가장 중요합니다. 이 성장 마인드셋을 기반으로, 애자일 선언을 통해 4가지 가치와 12가지의 원칙을 정해놓았습니다.</p><p>이로부터 Pair Programming 또는 TDD 같은 다양한 프랙티스들이 많은 사람들의 시도를 통해 도출되게 되었습니다.</p><p>하지만, 많은 사람들이 가치보다는 이 프랙티스들에만 관심을 가지고 이를 고정시켜 놓고, 애자일 방식으로 일한다라고 말하고 있습니다.</p><p>이러한 현상도 사실 고정 마인드셋에서 기인한 내용이라 볼 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/680/0*UErcfvV672GCdHZr." /></figure><p>프랙티스를 조합하여 만든 방식들이 Scrum, XP(Extreme) 같은 프로세스 들이기에, 마인드셋을 중시하지 않고, Scrum을 한다, XP를 한다는 것은 애자일을 수행하는데 매우 잘못된 접근방식입니다.</p><p>Scrum, XP도 마인드셋에 기본을 둔 채로 만들어진 것이기 때문입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/928/0*KBPTGfyWNgM6ETNM." /></figure><p>이 마인드셋을 변화시키는 일은 마치 딸기잼을 만드는 것과 비슷합니다.</p><p>딸기 두 개를 준비했다고 해서 잼이 되는 건 아니죠. 딸기 10개를 모아놨다고 해서 잼이 되는 것도 아닙니다. 대신 중간 불에서 계속해서 딸기를 저어줘야죠. 수 십간 또는 수일 동안 말이죠.</p><p>그렇게, 잼이 만들어지는 것과 비슷하게, 중간 불로 계속적으로 저어주어야, 마인드셋이 바뀌고 문화라는 것이 만들어집니다. 지속적으로 노력하는 것이 필요하죠. 이를 더 빨리 할 수 있을까요? 그건 매우 어렵습니다. 왜냐하면 불을 세게 할 경우 잘못하면 딸기처럼 타 버릴 수 있기 때문입니다.</p><p>또 한 가지 딸기잼을 한번 만들면, 이전의 딸기로 형체를 다시 만드는 것이 불가능한 것처럼. 애자일로 한번 전환하면 이전으로 돌아가기가 불가능합니다. 만약 어떤 팀이 애자일화가 되었다고 이야기 했지만, 특정한 압박에 못이겨 이전 일하는 방식으로 돌아갔다면 그것은 애자일화가 잘 된 조직이 아닙니다. 그것은 딸기가 아직 잼이 되지 못한 상태입니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/543/0*n8XaYIhXynEcmpUO." /></figure><p>딸기를 딸기잼을 만드는 중간불은 무엇을 의미할까요? 그것은 바로 “왜?”라는 질문입니다.</p><p>즉, “왜 우리는 애자일 로 전환해야 하는가?”입니다.</p><p>조직이 살아남기 위해 반드시 이를 성공해야 한다는 절실함이 보통 계속해서 애자일전환을 위한 불을 때도록 만듭니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/658/0*vLWbg7m5P3YY36fB." /></figure><p>“만약 애자일이 없어도 우리는 잘 할 수 있어＂ 라는 생각이 있다면 사실 애자일전환을 하기가 매우 어렵습니다.</p><p>이 때는 새로운 것에 대한 모험이 부담으로만 느껴지겠죠</p><p>만약 이렇게 애자일이 필요한 상황이라고 하면 우리는 이전의 “전환”이라는 단어에 조심을 해야 합니다.</p><p>이전에는 보통 프로세스나 기술, 트레이닝에 대해 초점을 맞추던 “전환”이라면 이제는 사람에 초점을 맞춘 것이어야 합니다.</p><p>그리고 끊임없이 공유된 비전을 통해 그들을 독려하고 도와야 합니다.</p><p>문화를 바꾸는 것이 현실에서 잘 이루어지냐고요? 아니죠. 전혀 그렇지 않습니다.</p><p>지난 9년간 조사에 따르면 많은 회사들이 애자일 전환이 이루어지지 못하는 가장 큰 이유에</p><p>“문화의 변화가 어려움”를 꼽았습니다.</p><p>애자일 문화는 포스트잇이나, 스탠드업 미팅, 회고따위가 아닙니다. 그 아래 빙산 처럼 정말 많은 것들이 바닷속에 잠겨 있죠.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/450/0*w8ZP2YAKBsbMnWv1." /></figure><p>문화란 우리의 가치, 믿음, 행동들의 모음이고, 우리가 무엇을 어떻게 해 나아갈지에 대해 가장 커다란 기반이 되는 것입니다.</p><p>이러한 문화는 보통 Leadership, Strategy, Structure, Process, People 이 함께 움직여야 만들 수 있는 것입니다. 이 둘레를 둘러싼 빨간 삼각형이 결국 문화를 만들어내는 것이죠</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/736/0*_PSjoHlJfBqM2FOo." /></figure><p>이 5개의 계층은 사실 크게 두 가지로 나눠질 수 있습니다.</p><p>사람에 대한 부분과 사람에 대한 내용이 아닌 부분이죠.</p><p>Leadership 과 People은 사람에 대한 부분, Strategy, Structure, Process 는 사람에 대한 내용이 아닙니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/565/0*VnLJUDMBLIt9K-Nt." /></figure><p>그런데, 많은 사람들이 사람이 아닌 부분에 더 많은 노력을 합니다. 가장 큰 이유는 이것들의 변화가 훨씬 쉽기 때문입니다. 사람을 바꾼다는 것.. 정말 어려운 일이니까요</p><p>때문에, 애자일 변환이란, 거의 모든 성패가 사람에 달려 있습니다.</p><p>결국 우리는 Task Work에서 Knowledge Work으로 일하는 방법을 전환한 다는 것이고 이는 사람들이 결국 일할 때 이전과는 다른 가치를 가지고, 생각하고, 믿는 것이니까요.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*QMBuTtAUV9FOGsqT." /></figure><p>많은 회사들이 일반적으로 하는 애자일 전환 방식은 프로세스 중심 전환입니다. 보통 프로세스 한가지만 강조하죠</p><p>프로세스는 바로 적용할 수 있고, 적용하기 쉽습니다. 하지만, 프로세스를 적용한다고 사람들의 생각이 달라지진 않죠.</p><p>이 때문에 그림과 같은 부서진 문화를 가진 찌그러진 삼각형 모양을 띄게 됩니다.</p><p>나중에 이 나머지를 함께 이동 시키는 것도 매우 큰 힘이 듭니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*UU0mhFQZko5zG6kS." /></figure><p>두 번째로 팀 중심 전환은 다음과 같은 그림이 됩니다.</p><p>‘15년 부터 제가 몸담는 회사에서 ACT라는 팀이 중심이 되어 애자일전환을 한 형태가 이 팀 중심 전환방식입니다. 우선 Team 4가 먼저 애자일을 하게 됩니다. 이 때 Team 4는 나머지 팀과 매우 이질적인 팀이 되어 버리죠.</p><p>하지만, 몇 팀들이 함께 움직이면 어느 순간 모두가 애자일을 한다는 이야기를 하는 팀들이 생기고 이 경우 여러문화의 팀이 공존하는 조직이 되어 버립니다. 계속해서 문화적인 충돌이 팀별로 생기게 되죠. 팀 전체를 전환할 수는 있지만, 조직의 구성원들은 문화의 혼란기를 겪게 됩니다.</p><p>가장 효과적인 방법은 모두가 한 발자욱씩 전환을 위해 노력하는 것입니다. 이렇게 하면 모두가 문화에 대하 혼란스럽지 않고, 우리가 무엇을 하는지 보다 잘 알 수 있습니다. 다만,</p><p>이는 정말 오랜 시간이 걸립니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*wgqTDYxyKob0Ie7y." /></figure><p>마치 씨앗을 심어 나무를 키우는 것처럼 말이죠</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/513/0*R00lwC6YRP_B1h9O." /></figure><p>이 변화를 위해서는 최종 목표를 정하고 거기까지의 Step을 나누고 각 Step별로 무엇을 해야 하는지를 전략으로 가져가야 합니다. 그리고 가장 중요한 사람의 변화를 위해 투자해야죠</p><p>이 Step 별 목표를 정하면서 조직이 할 수 있는 부분을 진행하면서 동시에 훨씬 더 중요하게 사람의 변화 대한 교육과 변화관리를 지속적으로 해야 하죠.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/648/0*9JltK_KizYmQphYo." /></figure><p>왜냐하면 Being 애자일이, Doing 애자일보다 훨씬 중요하니까요.</p><p>성장을 중심으로 한 문화가 수행하는 프랙티스보다 훨씬 중요하니까요.</p><p>이를 통해 우리는 올바른 문화를 만들어야 합니다.</p><p>성장을 중심으로 창의적으로 사고하는 문화, 그것을 통해 만들고 개선하고 끊임없이 나아지기 위한 노력을 해야 합니다.</p><p>그리고 그게 우리와 다른 이들과의 차이를 만들고 결국 경쟁력으로 이어질 테니까요</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3c8b9bd6c083" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[Note#5] “애자일은 대형 프로젝트에서 안돼”]]></title>
            <link>https://medium.com/@hubert.shin/note-5-%EC%95%A0%EC%9E%90%EC%9D%BC%EC%9D%80-%EB%8C%80%ED%98%95-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EC%95%88%EB%8F%BC-18241bfb75cd?source=rss-aa085ed7fa1------2</link>
            <guid isPermaLink="false">https://medium.com/p/18241bfb75cd</guid>
            <category><![CDATA[safe]]></category>
            <category><![CDATA[large-scaled-agile]]></category>
            <category><![CDATA[agile]]></category>
            <dc:creator><![CDATA[Hubert Shin]]></dc:creator>
            <pubDate>Tue, 19 Sep 2017 05:06:07 GMT</pubDate>
            <atom:updated>2017-09-24T10:44:51.299Z</atom:updated>
            <content:encoded><![CDATA[<p>필자가 2007년 이탈리아에서 열리는 컨퍼런스에 참석했을 때 많은 참석자들에게 들었던 말이다. 당시 애자일은 대형 프로젝트에 적용할 수 없다라는 의견이 시장에 지배적이었고, 실제 애자일을 한다는 사람조차 대형 프로젝트에서의 애자일 방식에 대해서는 회의적인 경우가 많았다.</p><p>이러한 생각의 가장 큰 이유는, 2001년 “애자일 선언”이 만들어 질 때 애자일의 기원 자체가 작은 팀을 중심으로 일하는 프로세스에서 기초되었기 때문이었다.</p><p>스크럼, XP, 린 S/W 개발 등은 7~9명 단위의 작은 팀을 기반으로 설명되어 있었고, 이 인원으로 최고의 생산성과 품질을 낼 수 있다 라고 언급하였다. 그나마 스크럼 프로세스 정도가 여러 스크럼 팀으로 확장 될 때 작은 팀들을 여러개 만들고 이를 스크럼의 스크럼이라는 형태의 회의로 이슈를 해결하면 된다라는 확장에 대한 고민을 담았다.</p><p>하지만 심지어 스크럼 조차도 개발 외에 요구사항을 받는 방법이라던지, 릴리즈의 구체적인 방법에 대한 언급은 없었기 때문에, 규모가 큰 프로젝트에서 적용하는데는 제약이 있다는 생각들이 많았다.</p><p>그 때문이었을까… 십년 이상동안 대형 프로젝트에서 애자일을 활용하는 극복의 과정은 꽤나 고통스러웠다.</p><p>작은 팀 위주에 초점을 맞추던 기존의 프랙티스에서 벗어나 대형 프로젝트에 맞게 일부 변경된 시도를 하던 사람들에게는 많은 비난이 쏟아졌다.이전의 오리진(Origin)을 버리는 것이라 비난하는 이도 많았고 조금이라도 문서화에 초점을 맞추면 “이건 애자일이 아냐” 라고 비난하는 사람들이 생겨났다. “무늬만 애자일”, “하이브리드”, “미니워터폴” 등 다양한 용어들로 변형된 프로세스에 대해 부정적이었다.</p><p>하지만,이에 대한 변화는 결국 시장이 주도하게 되는데, 기존 프로세스에 대한 불만과 클라우드로 전환하는 시장의 흐름에 따라, 애자일의 확산 니즈는 점점 커졌다. 이와 함께 애자일 또한 일반화/정형화/대중화 되기 위한 움직임들이 나타났다.</p><p>그리고 다양한 조직의 더 많은 사람들이 애자일 방식을 기반으로 한 나름대로의 프로세스를 만들어 나갔다. 기존의 한계를 극복하며 현실적인 접근을 시도했던 것이다.</p><p>이의 대표적인 프로세스가 DaD(Disciplined Agile development), SAFe(Scaled Agile framework), LeSS(Large Scaled Scrum) 등이다. 심지어 SAFe는 미국 정부를 비롯하여 애자일을 하는 회사의 50%이상이 활용할 정도로 큰 인기를 얻고 있는 애자일 프로세스이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*VgEIe79hiAm4xvvB." /></figure><p>&lt;SAFe(Scaled Agile Framework):150명 이상의 Portfolio 관리가 필요한 대형 애자일 방식&gt;</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Jjngok8Uk3amhcAH." /></figure><p>&lt;LESS(Large Scaled Scrum): MAX 80명 애자일 조직을 대상으로 수행하는 대형 스크럼방식&gt;</p><p>이러한 프로세스는 기존의 도그마(Dogma: 독단적인 학설, 이성적으로 증명되지 않은 가설)라고 이야기 되던 순수 애자일 추구에서 벗어나 현실속에서 기존 문화와 다양한 프랙티스들을 섞는 것을 시도하는 내용들이 담겨 있었다. 시장 상황, 이해관계자들의 일해오던 방식 등을 일부 존중하면서, 애자일 방식을 통해 가치를 얻을 수 있는 중간 단계의 무엇인가를 찾는 노력들이 있었다.</p><p>이에, 디지안 씽킹으로 대표되는 디자인 방식의 변화, 린스타트업으로 대표되는 스타트업 바람이 더해져 바탕으로 이제는 소프트웨어 회사의 94%이상이 본인들은 애자일을 하는 회사라 말하고 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/947/0*PU5WkjwDD1HlE-VE." /></figure><p>&lt;버젼원의 리포트2016: 애자일을 수행하는 회사가 94%라는 설문 결과&gt;</p><p>전체적으로 스펙트럼이 소/중/대형을 넘나드는 애자일 방식들이 생겨나게 된 내용은 지금까지 설명한 바와 같다.</p><p>그렇다면 과거의 소규모를 향한 애자일과 중/대형 사업의 애자일과의 구체적인 차이는 무엇일까? 현실과 맞물린 일하는 방법이란 과연 무엇일까?</p><p>이를 효과적으로 설명하려면 2001년의 애자일 선언을 가지고 이야기 하면 좋다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/947/0*lBimDfePbHEftH1-." /></figure><p>과거 작은 팀을 중심으로 진행하는 애자일 방식은 오른쪽 노란색 부분은 마치 금기처럼 무시하려는 분위기가 강했다. 그래서 조금이라도 오른쪽에 접근하는 것을 경계했다.</p><p>하지만 현실과 맞물리며 대형 프로젝트 같은 경우, 왼쪽보다는 확실히 덜 중요하나 오른쪽 부분 또한 중요하다는 인식으로 발전되어 갔다.</p><p>이를 설명하면 다음과 같다.</p><p>1. 대규모 프로젝트(50명 이상)에서 개인과 상호작용만 강조하면, 두 개이상의 팀이 되었을 때 효과적인 커뮤니케이션을 하기 힘들다 때문에 툴을 사용하는 것이 좋다</p><p>2. 동작하는 소프트웨어에만 집중하면 팀 내에서는 진행상황에 대해 잘 이해할 수 있으나 두 개이상의 팀이 되었을 때 서로의 진행사항을 확인하기 어렵다. 애자일팀들이 아주 쉽게 말하는 “우리팀에 와서 언제든 제품을 보세요” 라는 말은 2팀 이상을 봐야 하는 관리자에게는 눈살을 찌푸리게 만드는 대화가 될 수도 있다. 때문에 적당한 문서화는 커뮤니케이션에 도움이 될 수 있다.</p><p>3. 고객과의 협업만 강조하면 다양한 이해관계자를 모두 포용하지 못할 수 있다. 때문에 계약과 협상 을 통해 전체 이해관계자와 동일한 비전/생각을 갖으며 일을 해야 한다.</p><p>4. 상황에 따라 변화를 하는 것은 중요하지만, 주변 팀에 이야기 하지 않으면 두 팀 이상이 될 경우 의존관계를 무시하게 되여 고객의 비즈니스 가치를 늦게 딜리버리하는 상황을 만날 수 있다.</p><p>혹시나 대형 프로젝트, 대규모 조직에서 애자일을 적용하다 현실의 벽에 부딪혀 고민하고 있는 독자가 있었다면 위 이야기를 듣고 반가운 생각이 들 수 있다.</p><p>하지만, 다시한번 강조하여 이야기 하고 싶다. 개인과 상호작용, 동작하는 소프트웨어, 고객과의 협업, 상황의 따른 변화가 여전히 더 중요하다. 그래야 애자일 방식이다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=18241bfb75cd" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>