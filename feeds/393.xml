<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jin Park - Human</title>
    <description>Jin Park</description>
    <link>https://www.jinpark.net/</link>
    <atom:link href="https://www.jinpark.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 21 Dec 2018 05:03:24 +0000</pubDate>
    <lastBuildDate>Fri, 21 Dec 2018 05:03:24 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>External Laptop Battery Hack</title>
        <description>&lt;p&gt;I just realized I wrote only 2 blog posts this year. :(&lt;/p&gt;

&lt;p&gt;Lots of stuff’s been happening in my life but not much tech related.&lt;/p&gt;

&lt;p&gt;One thing that did happen was that I got a new laptop, Macbook Pro 15 2018 version. It’s not bad but the battery is not great.&lt;/p&gt;

&lt;p&gt;I sometimes dont have any outlets available to charge so I got a &lt;a href=&quot;https://www.zmiusa.com/collections/portable-chargers-for-phones-tablets/products/20000-mah-duplex-quick-charge-portable-power-bank-battery-charger&quot;&gt;large usb-c external battery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only problem with it was that I sometimes forgot it was plugged in and when I move the laptop, the battery flies away, causing damage to the usb c port on the laptop.&lt;/p&gt;

&lt;p&gt;My simple solution was sticking on a 3M Hook and Loop (velcro) sticker on my laptop and the battery and sticking it on there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/laptop1.jpg&quot; alt=&quot;sentiment by user&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/laptop2.jpg&quot; alt=&quot;sentiment by user&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It works very well and did not effect the hinge of the macbook at all, which I was a little worried about.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Dec 2018 16:50:29 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2018/12/external-laptop-battery-pack</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2018/12/external-laptop-battery-pack</guid>
        
        <category>Macbook</category>
        
        <category>Macbook Pro</category>
        
        <category>Battery</category>
        
        <category>ZMI Battery Pack</category>
        
        <category>3M Hook and Loop</category>
        
        
      </item>
    
      <item>
        <title>IRC Bot to Alexa Skill</title>
        <description>&lt;p&gt;I’ve been running an IRC bot on a small network that I run for a while (10 years?). One of its features is that it can tell you about the air quality in the general vicinity of where you are (assuming you have added your location data previously). It’s a fairly simple little python script that just calls a geocoding API to convert a location to a latitude and longitude and uses an air quality API to return the AQI (&lt;a href=&quot;https://en.wikipedia.org/wiki/Air_quality_index&quot;&gt;Air Quality Index&lt;/a&gt;) value. The code for that is available &lt;a href=&quot;https://github.com/jinpark/phenny-modules/blob/master/air-quality.py&quot;&gt;here&lt;/a&gt;. I talked about a IOT version of this in a &lt;a href=&quot;https://www.jinpark.net/blog/2017/05/Quick-Particle-Project-to-Display-Air-Quality-at-a-Glance&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve been fooling around with different (4!) voice assistants at home and realized that for Alexa, there was no skills to check air quality outside of the US for US based Alexa devices, which mine was. I wrote a small Alexa skill a while back for playing back Simpsons so I knew that I could bang out a quick air quality skill without a problem.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;https://github.com/johnwheeler/flask-ask&quot;&gt;Flask-Ask&lt;/a&gt; as the backend framework to handle the boilerplate to interface with the Alexa SDK. The only thing I added was to find a list of 5000 largest cities in the world and add those as a custom slot. Currently, the Alexa SDK only provides US, GB and a few other countries for city slots. I just created a long text file with the list of cities and added that into the Alexa skill console.&lt;/p&gt;

&lt;p&gt;One other thing that you need to do is to create and add a privacy policy to the app. I took a standard privacy policy since I was not recording any personal data from the user and just modified it a bit to fit this app.&lt;/p&gt;

&lt;p&gt;This whole project took about an hour or so between the time I woke up and had breakfast, so there are more than a few things missing. I’m currently working on accessing the location provided by Amazon for each user instead of requiring the user to say the location when activating the skill. &lt;del&gt;Also, I need to cache the geocode results so I don’t hit the geocode api repeatedly.&lt;/del&gt; The results are now cached, allowing for faster results.&lt;/p&gt;

&lt;p&gt;The code is available on &lt;a href=&quot;https://github.com/jinpark/airquality-alexa&quot;&gt;github&lt;/a&gt;. &lt;del&gt;The skill is not availble yet on the Alexa app since there were a few bugs, I will get this rectified and have the link available here ASAP.&lt;/del&gt; The skill is now live on Amazon &lt;a href=&quot;https://www.amazon.com/dp/B07BY8M8QS/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Apr 2018 16:50:29 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2018/04/IRC-bot-to-Alexa-Skill</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2018/04/IRC-bot-to-Alexa-Skill</guid>
        
        <category>IRC</category>
        
        <category>Willie</category>
        
        <category>Bot</category>
        
        <category>Alexa</category>
        
        <category>Echo</category>
        
        <category>Flask</category>
        
        <category>Flask-Ask</category>
        
        
      </item>
    
      <item>
        <title>Back to Windows?</title>
        <description>&lt;p&gt;I’ve switched jobs recently and needed a new laptop for work, which includes working on a React Native app.&lt;/p&gt;

&lt;p&gt;I dropped my personal 2014 Macbook Pro a little while ago and broke the screen, so I’ve been using it as a desktop, leaving me with only my 2011 Macbook Air. While the Air is still working great, not counting the low battery life, it can’t handle runnng the React Native packager and Android Emulator without choking. For a little while, I’ve been using my main phone (a Xiaomi Redmi 3S Prime) to develop the app, but it is a pain to having to check another device to do my work.&lt;/p&gt;

&lt;p&gt;I’ve been pretty disappointed with the new Macbook Pros, the increased prices as well as the reduced functionality, so I was looking at other similar high end windows/linux laptops (Dell XPS 13, Thinkpad X1 Carbon, etc). While searching, I came across &lt;a href=&quot;https://www.youtube.com/watch?v=BlMKftsnfWE&quot;&gt;this youtube video&lt;/a&gt; where it showed off the Acer Aspire 5 as a budget gaming PC, coming in at around $600 USD, with a 8th gen i5 and discrete graphics. That came to about 1/3rd of the price of a Macbook Pro 15 while having similar specs. I did some research online to see if this was available in Korea and I found a similar Acer model for about the same price but with an IPS screen instead of a TN screen, 4GB of RAM instead of 8, and 128GB of storage instead of 256. I found a 8GB RAM stick for about $75 USD and bought the whole system for about $675 USD. While this isin’t pocket change, this was significantly cheaper than the other options I was looking at, and if it was no good, I could at least use it as a gaming computer!&lt;/p&gt;

&lt;p&gt;My goals with this computer was that I should be able to setup Windows, get the WSL working and setup React Native along with the Android emulator. Setting up Windows and getting the WSL working was a breeze, installing node, npm and yarn was slightly annoying due to permissions issues but I had it working pretty quickly. The difficult part that I did not expect was getting React Native in WSL to work with the emulator in Windows. Luckily for me, someone else had the same problem as me in &lt;a href=&quot;https://stackoverflow.com/questions/42614347/running-react-native-in-wsl-with-the-emulator-running-directly-in-windows&quot;&gt;Stack Overflow&lt;/a&gt; and pointed out that you can run the packager in WSL and install the debug APK manually through Powershell. This worked pretty well since you only need to install the APK once in the emulator. Installing and setting up the emulator was overly convoluted (installing Android Studio, installing java, setting up a new project, deleting the project because it was using the wrong sdk), but with help from SO and google, it got done.&lt;/p&gt;

&lt;p&gt;My Windows setup is now, WSL for git and running node/react-native-cli, Visual Studio Code as an editor, and Android Studio to run the emulator. I’m still working on getting fish to be my default shell.&lt;/p&gt;

&lt;p&gt;UPDATE: So one problem I ran into is that the Android Emulator (bundled into Android Studio) requires Hyper-V to be turned off, while Docker for Windows requires it to be turned on. I was lucky enough to be able to run what I needed to run on docker locally but I can see this being a real problem later on. I found that you can use &lt;a href=&quot;vhttps://www.visualstudio.com/vs/msft-android-emulator/&quot;&gt;Visual Studio Android Emulator&lt;/a&gt; as an alternative emulator that works with Hyper-V but it does seem slower.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Mar 2018 16:50:29 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2018/03/Back-To-Windows</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2018/03/Back-To-Windows</guid>
        
        <category>mac</category>
        
        <category>windows</category>
        
        <category>Linux</category>
        
        <category>WSL</category>
        
        <category>Windows Subsystem for Linux</category>
        
        <category>Ubuntu</category>
        
        
      </item>
    
      <item>
        <title>Software I Use Daily</title>
        <description>&lt;p&gt;I’ve been changing my computers pretty frequently recently due to hard drive failures, un-hackintoshing my computer, laptop screen failures etc, so I had to reinstall and re-setup my computer a bunch of times.&lt;/p&gt;

&lt;p&gt;I had a chance to review my setup and see where I could make upgrades and which stuff I can keep. Kind of a spring cleaning for my computer.&lt;/p&gt;

&lt;h3 id=&quot;essentials&quot;&gt;Essentials&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://panic.com/transmit/&quot;&gt;Transmit for Mac&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;My favorite software to move files around to and from servers. It has access for &lt;code class=&quot;highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;backblaze b2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp&lt;/code&gt; and whatever else you can think of.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Holds my 1Password data, and has over 10 years of files. I’m actively looking for a replacement that I can use as a drop in replacement but I haven’t found it yet.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Saves all my passwords. Makes it pretty fast for me to create and retrieve complex passwords.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/chrome/browser/desktop/index.html&quot;&gt;Chrome&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Its fast and its dev tools are the best. I have &lt;code class=&quot;highlighter-rouge&quot;&gt;ublock origin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;the great suspender&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;google dictionary&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;disable html5 autoplay&lt;/code&gt; plugins installed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.opera.com/&quot;&gt;Opera&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Thinking about changing to Opera full time but doesn’t have all the extensions as chrome yet. Runs on the same engine so its pretty fast and comes with free browser based vpn. By far the easiest VPN I use that doesn’t seem to steal my data (hopefully)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I’ve been a staunch user of Sublime Text for a long time but I took the chance to dip my toes into atom and VSCode. Both were fine but VSCode seemed to work better for me. The great markdown integration, built in linting, and a bunch of features that doesn’t seem to slow down the program.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;terminal-stuff&quot;&gt;Terminal Stuff&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Normal terminal is fine but doesn’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; integration, which is essential for me for when I &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into servers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tmux.github.io/&quot;&gt;tmux&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;terminal multiplier, like a newer &lt;code class=&quot;highlighter-rouge&quot;&gt;screen&lt;/code&gt; or older version of tabs. I kinda hate the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-b&lt;/code&gt; key binding but I use &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-a&lt;/code&gt; for go to the beginning of the line that I can’t seem to change it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Fish shell just seems like a modern shell. The configuration is done through a slick locally hosted website, the API makes sense and is pretty fun to use. The one problem is that the syntax is pretty different from bash which makes using some CLI programs that are based on bash harder to use.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;solarized dark themes&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I like solarized dark.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;home-server&quot;&gt;Home Server&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://plex.tv/web&quot;&gt;Plex&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Serves up my video files that I somehow have. Mostly stuff that isn’t easily obtainable through legal sources. It’s just a super nice piece of software. (I have a Plex Lifetime subscription. I just want to give them money!)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sonarr.tv/&quot;&gt;Sonarr&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Schedules regular downloads of shows I can’t get here due to licensing issues. Coupled with Plex, this makes a killer home media service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guacamole.apache.org/&quot;&gt;Guacamole&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Allows for rdp/vnc/whatever to be accessed through the web. I’ve been &lt;code class=&quot;highlighter-rouge&quot;&gt;noVNC&lt;/code&gt; for a little bit but guacamole comes with auth and multiple users and works well in windows (at least with docker).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;A simple http web server. Super easy setup and https right out of the box. Just a great front end to all the web services I run on the server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thelounge.github.io/&quot;&gt;The Lounge&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;A web based bouncer and client for IRC. A fairly new thing for me, but it totally replaced textual, my previous irc client. Since its just a web app, you can run it on your phone and also, since its a PWA, web push and notifications work on any browser that supports it. So even on my android phone, it works like a true native app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;services-that-i-pay-for&quot;&gt;Services (that I pay for)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.paperspace.com/&quot;&gt;Paperspace&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;A workspace as a service that allows me to have a windows workstation whenever I need it. Pricing is super cheap, works amazingly well for being across the globe, and pretty fast customer service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newsblur.com/&quot;&gt;Newsblur&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;My &lt;code class=&quot;highlighter-rouge&quot;&gt;RSS&lt;/code&gt; reader of choice. Lays out the feed really cleanly, downloads the content beforehand so its really quick to retrieve content and has its own readability-like thing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://music.naver.com/&quot;&gt;Naver Music&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I got this for “free” after buying their Wave voice assistant speaker. Well laid out interface for their android app, gets music up really quickly. Good replacement for Spotify. Small note, their web interface sucks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 23 Dec 2017 16:50:29 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2017/12/software-i-use</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2017/12/software-i-use</guid>
        
        <category>mac</category>
        
        <category>server</category>
        
        <category>software</category>
        
        
      </item>
    
      <item>
        <title>Favorite Anime of 2017</title>
        <description>&lt;p&gt;I made a small vuejs project to showcase some shows I liked in 2017.&lt;/p&gt;

&lt;p&gt;I glued together a few libraries and bashed together some code and it looks pretty nice! I did not use vue-router or even vuex. Just standard vue, some libraries and surge for deployment.&lt;/p&gt;

&lt;p&gt;A few things I found,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue-test-utils&lt;/code&gt; is very nice but unfinished. It makes it fairly difficult if not impossible to cleanly test your &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; functions.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue-cli&lt;/code&gt; makes it rediculously easy to start a project. Its like &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; but you can still change your webpack configs!&lt;/li&gt;
  &lt;li&gt;Debugging is fairly easy with the vue chrome extension but not as easy as react.&lt;/li&gt;
  &lt;li&gt;Single file components with scoped css is awesome.&lt;/li&gt;
  &lt;li&gt;There were a lot of fun anime this year!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check it out at &lt;a href=&quot;http://2017-anime.jinpark.net&quot;&gt;2017-anime.jinpark.net&lt;/a&gt;
Code available at &lt;a href=&quot;https://github.com/jinpark/best-of-2017&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Dec 2017 16:50:29 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2017/12/favorite-anime</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2017/12/favorite-anime</guid>
        
        <category>anime</category>
        
        <category>vuejs</category>
        
        <category>vue</category>
        
        
      </item>
    
      <item>
        <title>Quick Particle Project to Display Air Quality at a Glance</title>
        <description>&lt;p&gt;I’ve been waiting for World Air Quality Project to release their JSON API for normal users for a few years now. They finally did and now I can finish my first particle project.&lt;/p&gt;

&lt;p&gt;I’m going to be using a &lt;a href=&quot;https://www.particle.io/products/hardware/photon-wifi-dev-kit&quot;&gt;Particle Photon&lt;/a&gt; , &lt;a href=&quot;https://www.particle.io/products/hardware/internet-button&quot;&gt;an Internet Button&lt;/a&gt; , &lt;a href=&quot;http://aqicn.org/json-api/demo/&quot;&gt;the World Air Quality Project JSON API&lt;/a&gt; and &lt;a href=&quot;https://docs.particle.io/guide/tools-and-features/webhooks/&quot;&gt;Particle Webhooks&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;First, I got an API key from aqicn.org by entering my info &lt;a href=&quot;http://aqicn.org/data-platform/token/#/&quot;&gt;here&lt;/a&gt;. I then found my nearest monitoring station number by finding my current latitude and longitude and searching for my nearest station using &lt;a href=&quot;http://aqicn.org/json-api/doc/#api-Geolocalized_Feed-GetGeolocFeed&quot;&gt;this api&lt;/a&gt; and using that station id to get the AQI info from that station using &lt;a href=&quot;http://aqicn.org/json-api/doc/#api-City_Feed-GetCityFeed&quot;&gt;this api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now I can call the API and get my current AQI (Air Quality Index). The next step was to set this up to be consumed by the Photon. This can be done by setting up a webhook within the Particle Console. Set up a new webhook to GET the air quality endpoint, and use the response template to just return the AQI value. The response template uses the mustache templating engine, so you might need to fiddle around with it.&lt;/p&gt;

&lt;p&gt;Time to write the firmware for the Photon! I’ll just go over the main points.&lt;/p&gt;

&lt;p&gt;First, include the InternetButton library and instantiate it. In the setup block, subscribe to the webhook so it receives the AQI values and create a handler function that converts the AQI value to a RGB value set that can be easily ingested by the internet button. Call the webhook every 60 minutes, and turn on all the LEDs to those values a few seconds after you make the call. That should give the API enough time to respond.&lt;/p&gt;

&lt;p&gt;The full code is below.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/83f30d36fce5c1d0da4ae90f33ea269a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This was a fun quick 1 hour project that should hopefully let me know when I should put my mask on!&lt;/p&gt;

</description>
        <pubDate>Tue, 30 May 2017 03:35:57 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2017/05/Quick-Particle-Project-to-Display-Air-Quality-at-a-Glance</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2017/05/Quick-Particle-Project-to-Display-Air-Quality-at-a-Glance</guid>
        
        <category>particle</category>
        
        <category>air quality</category>
        
        <category>particle photon</category>
        
        <category>webhooks</category>
        
        
      </item>
    
      <item>
        <title>Fixing a trivial problem in the most convoluted way possible</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/rpidns.jpg&quot; alt=&quot;rpi-dns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m writing a chromecast receiver that works with dash and widevine DRM for work. The chromecast connects wirelessly to my receiver app which is hosted on my work laptop on the same network. When you access the video content on the chromecast, it calls the widevine server to be able to decode the encrypted content, and then decodes the media assets in the browser.&lt;/p&gt;

&lt;p&gt;We have a few CORS issues here since the widevine server only has CORS support for a few domains, not including my local domain. The normal way to fix it would be to add CORS support for my local domain in the dev wide vine server, or to temporarily host the receiver app in a domain that has CORS support.&lt;/p&gt;

&lt;p&gt;Instead, I decided to do the most difficult thing and try to edit DNS entries in the router level to redirect back to my laptop. Currently my router is an Airport Extreme which does not have this capability.&lt;/p&gt;

&lt;p&gt;I had a few spare raspberry pis left from when I was using them as a media server that I wanted to run OpenWRT on. There were already &lt;a href=&quot;https://wiki.openwrt.org/toh/raspberry_pi_foundation/raspberry_pi&quot;&gt;prebuilt images&lt;/a&gt; on the OpenWRT website that I tried to use. The problem here was that I either needed to run this between my current Airport Extreme and the modem, or give the raspberry pi wifi. I decided to go the wifi route since I did not want to reimplement the current config of my airport into the new router.&lt;/p&gt;

&lt;p&gt;Long story short, I tried three wifi adapters and they all failed. One failed because the hardware was broken. The second adapter’s drivers did not have the ability to use as an access point. The third just stopped working and I was unable to troubleshoot it.&lt;/p&gt;

&lt;p&gt;Then I decided to try another method. I’ve ran &lt;a href=&quot;https://pi-hole.net/?v=38dd815e66db&quot;&gt;Pi-hole&lt;/a&gt; before, a DNS server that acts as an adblocker, but it was a pain in the butt compared to just running a chrome extension. This time I didn’t want it for the ad blocking capabilities but for the DNS server that handles the adblocking.&lt;/p&gt;

&lt;p&gt;I installed pi-hole through &lt;a href=&quot;http://dietpi.com/&quot;&gt;dietpi&lt;/a&gt;, a mini OS for the raspberry pi running on top of debian jessie. It was easy to setup, but annoyingly not able to be done headless through ssh. Instead, it required a monitor and a keyboard. After I got dietpi and pihole installed, I looked online to see how I could route based on domain. I thought I would have had to create some iptables rules but it was just adding some values to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file and restarting the &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;After I set that, I set the default dns server on my router to point to my pi hole server and then everything was set. I was able to point any domain wherever I wanted and as long as you were connected to the airport extreme, you were redirected correctly.&lt;/p&gt;

&lt;p&gt;Next time I would need to do something like this, I would just run a dns server locally instead of on a raspberry pi. You can &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install dnsmasq&lt;/code&gt; easily and handle your dns rules locally.&lt;/p&gt;

&lt;p&gt;NOTE: I realized after I did all this that the chromecast has its dns hardcoded internally to google’s DNS. So everythign I did does not work…. I ended up buying a new router&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Mar 2017 03:35:57 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2017/03/Fixing-a-trivial-problem-in-the-most-convoluted-way-possible</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2017/03/Fixing-a-trivial-problem-in-the-most-convoluted-way-possible</guid>
        
        <category>dns</category>
        
        <category>raspberry pi</category>
        
        <category>pi hole</category>
        
        <category>dietpi</category>
        
        
      </item>
    
      <item>
        <title>Learning Lua</title>
        <description>&lt;p&gt;A friend of mine on IRC, haste, told me about Advent of Code recently. Its a coding challenge in the style of an advent calendar, where you get a small problem to do every day in december until christmas. I wanted to learn Lua so I took the chance and started doing the challenges in lua. I have my solutions up on https://github.com/jinpark/adventofcode2016&lt;/p&gt;

&lt;p&gt;A few things I learned&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lua does not have much of a standard library&lt;/li&gt;
  &lt;li&gt;Arrays and dicts are the same data structure&lt;/li&gt;
  &lt;li&gt;Penlight is a great package for the great standard libraries I got used to during python development.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The REPL (pre 5.3) does not take input as expressions, but as statemtents. This means that&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 10 + 20&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;does not return 30 but returns&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stdin:1: unexpected symbol near '10'&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;instead&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Lua starts indicies at 1 instead of 0. First, this was a bit of a mindfuck but as I got used to it, it made sense how easy it was to figure about indecies in arrays. This does make negative indexes (something that is not available in standard lua) a bit difficult.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall, writing lua forced me to rethink the way I write code and be a little bit smarter about how I use the standard library. Having such a limited pool of functions I can pull from made me think about what my code is actually doing and be aware of the chokepoints hidden in my code.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 03:35:57 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2017/01/learning-lua</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2017/01/learning-lua</guid>
        
        <category>lua</category>
        
        <category>advent of code</category>
        
        
      </item>
    
      <item>
        <title>How to survive as a remote employee</title>
        <description>&lt;p&gt;Congratulations! You got a remote job. Your company trusts you enough to be an adult and handle yourself like a responsible human being. Now what?&lt;/p&gt;

&lt;p&gt;My two year anniversary of switching to a remote work is coming up and I wanted to write some things I figured out while working remotely.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find a place (or places) that you ONLY do work in. It might be a coffee shop, a home office or even a park with wifi during summer. Splitting your work and home life is very important. I’m usuallly at two nearby coffee shops, depending on my mood. One has really good coffee, fast wifi, nice 90s music and jazz and is pretty quiet. The other is a chain that is not as good as the first cafe but is just another place to go to when I get tired of the first cafe.&lt;/li&gt;
  &lt;li&gt;Make sure that the rest of your family or rooomates know that during your work hours, you should not be disturbed. People like to assume that working remotely means you’re available to handle other tasks but everyone should be aware that you need to focus. Even if you can handle other tasks, make that the exception and not the norm. You don’t want to be responsible for something at home when you’re needed at work.&lt;/li&gt;
  &lt;li&gt;Be available to your coworkers. If your company has some sort of chat program such as slack or hipchat, make sure that your team members know that you are available during work hours, for help or just to talk. It’s hard to get the same kind of camadarie as you get with workers around the water cooler, so you have to make double the effort.&lt;/li&gt;
  &lt;li&gt;Don’t work so hard. If you are not in the same timezone as your coworkers, you might end up working way longer than you would normally work. This was a common theme for me when I first started but keep track of when you’re working and when you’re tired and make adjustments.&lt;/li&gt;
  &lt;li&gt;Try to make it into the office once in a while. I’m horrible at this, mostly because my office is 13 hours away by air but if you can, go in and just plan a day for just meeting your team mates and coworkers. Even if you do conference calls, nothing really beats having face to face conversations. See if your team mates wants to go out for drinks or such afterwards!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully this helps someone with their new remote job! It’s great but its tough if you’re not prepared!&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Sep 2016 03:35:57 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2016/09/how-to-survive-as-a-remote-employee</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2016/09/how-to-survive-as-a-remote-employee</guid>
        
        <category>remote work</category>
        
        <category>remote working</category>
        
        
      </item>
    
      <item>
        <title>Pokemon Go and OCR</title>
        <description>&lt;p&gt;I wanted to make a quick and easy webapp for Pokemon Go and I ended up stealing my friend &lt;a href=&quot;http://github.com/haste&quot;&gt;Trond&lt;/a&gt;’s idea for his ingress &lt;a href=&quot;http://tie.rs/&quot;&gt;http://tie.rs/&lt;/a&gt; stats app.&lt;/p&gt;

&lt;p&gt;This simple webapp takes in a screenshot from your pokemon team page and then parses it and creates a sharable webpaage for you to show off your team. The current implementation is at &lt;a href=&quot;https://pokemon-go-team.herokuapp.com&quot;&gt;pokemon-go-team.herokuapp.com&lt;/a&gt; and you can see what it outputs &lt;a href=&quot;https://pokemon-go-team.herokuapp.com/team/b4f08b6090/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/andrew.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Example Team Screenshot&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since API access is still illegal for Pokemon GO, the only “legal” way to access team data is if the user sends it voluntarily. The front end takes in the screenshot and sends it to the backend to handle it.&lt;/p&gt;

&lt;p&gt;The app does a few things to process the screenshot.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The screenshot’s height and width are measured through &lt;a href=&quot;https://python-pillow.org/&quot;&gt;pillow&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/pokemononly.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The top portion of the screen (status bar, tabs) are removed so just the pokemon are shown.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/row.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The pokemon section is split into single rows. Currently, we’re just taking the top 6 pokemon, so 2 rows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/dodrio.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The row is split into 3 columns for each pokemon while removing 15% of the width from each side to remove unnecessary scroll bars.&lt;/li&gt;
  &lt;li&gt;Each pokemon section is cut horizontally into 3 sections. Top area for the name, bottom area for the CP and the middle for the image which we discard.&lt;br /&gt;
&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/name.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;The top area with just the name is OCR-ed.&lt;br /&gt;
&lt;img src=&quot;https://forestryio.s3-us-west-2.amazonaws.com/wdn0ioiolknhfq/forestryio/images/cp.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;The bottom area with the CP is OCR-ed and the “CP” part is discarded.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After OCR-ing, we end up with a hash for each pokemon and their cp. We send that info to the front end and allow the user to make changes, since the OCR might have been incorrect OR the pokemon name was actually just a nickname. I’m using &lt;a href=&quot;https://pokeapi.co/&quot;&gt;pokeapi&lt;/a&gt; to get pokemon data and I scraped the pokemon move data from &lt;a href=&quot;http://serebii.net/pokemongo/moves.shtml&quot;&gt;serebii&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The technologies used are flask for the backend web portion, pillow for the image cropping and manipulation, pyocr and pytesseract for OCR, redis for a simple database, jquery and semantic-ui for the frontend.&lt;/p&gt;

&lt;p&gt;At the end, you get something like &lt;a href=&quot;https://pokemon-go-team.herokuapp.com/team/b4f08b6090/&quot;&gt;this&lt;/a&gt; which you can share with others.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 03:35:57 +0000</pubDate>
        <link>https://www.jinpark.net/blog/2016/07/pokemon-go-and-ocr</link>
        <guid isPermaLink="true">https://www.jinpark.net/blog/2016/07/pokemon-go-and-ocr</guid>
        
        <category>pokemon go</category>
        
        <category>ocr</category>
        
        
      </item>
    
  </channel>
</rss>
