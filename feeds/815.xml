<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Begginer Developer</title>
  
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://devjang.github.io/"/>
  <updated>2019-04-28T14:55:53.002Z</updated>
  <id>https://devjang.github.io/</id>
  
  <author>
    <name>DevJang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/27/2019-04-27-javascipt30-8/"/>
    <id>https://devjang.github.io/2019/04/27/2019-04-27-javascipt30-8/</id>
    <published>2019-04-26T15:00:00.000Z</published>
    <updated>2019-04-28T14:55:53.002Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 8주차</p><ul><li>Geolocation based Speedometer and Compass</li><li>Follow Along Links</li><li>Speech Synthesis</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/X7Cbtra0C6I/maxresdefault.jpg" alt=""></p><h1 id="21-Geolocation-based-Speedometer-and-Compass"><a href="#21-Geolocation-based-Speedometer-and-Compass" class="headerlink" title="21. Geolocation based Speedometer and Compass"></a>21. Geolocation based Speedometer and Compass</h1><p>영상: <a href="https://youtu.be/X7Cbtra0C6I" target="_blank" rel="noopener">https://youtu.be/X7Cbtra0C6I</a></p><p><code>Geolocation</code> 기반의 속도계 &amp; 나침반</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrow = <span class="built_in">document</span>.querySelector(<span class="string">'.arrow'</span>);</span><br><span class="line"><span class="keyword">const</span> speed = <span class="built_in">document</span>.querySelector(<span class="string">'.speed-value'</span>);</span><br><span class="line"></span><br><span class="line">navigator.geolocation.watchPosition(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// DOM에 속도계 반영</span></span><br><span class="line">  speed.textContent = data.coords.speed;</span><br><span class="line">  <span class="comment">// CSS에 접근하여 나침반 시각화</span></span><br><span class="line">  arrow.style.transform = <span class="string">`rotate(<span class="subst">$&#123;data.coords.heading&#125;</span>deg)`</span>;</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/POP_qri7RA8/maxresdefault.jpg" alt=""></p><h1 id="22-Follow-Along-Links"><a href="#22-Follow-Along-Links" class="headerlink" title="22. Follow Along Links"></a>22. Follow Along Links</h1><p>영상: <a href="https://youtu.be/POP_qri7RA8" target="_blank" rel="noopener">https://youtu.be/POP_qri7RA8</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noopener">getBoundingClientRect()</a>를 활용한 마우스 오버 링크 스타일링</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> triggers = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">const</span> highlight = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">highlight.classList.add(<span class="string">'highlight'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(highlight);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// viewport에서의 상대적인 위치를 반환</span></span><br><span class="line">  <span class="keyword">const</span> linkCoords = <span class="keyword">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> coords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    top: linkCoords.top + <span class="built_in">window</span>.scrollY,</span><br><span class="line">    left: linkCoords.left + <span class="built_in">window</span>.scrollX</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  highlight.style.width = <span class="string">`<span class="subst">$&#123;coords.width&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.height = <span class="string">`<span class="subst">$&#123;coords.height&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.transform = <span class="string">`translate(<span class="subst">$&#123;coords.left&#125;</span>px, <span class="subst">$&#123;coords.top&#125;</span>px)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">triggers.forEach(<span class="function"><span class="params">a</span> =&gt;</span> a.addEventListener(<span class="string">'mouseenter'</span>, highlightLink));</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/saCpKH_xdgs/maxresdefault.jpg" alt=""></p><h1 id="23-Speech-Synthesis"><a href="#23-Speech-Synthesis" class="headerlink" title="23. Speech Synthesis"></a>23. Speech Synthesis</h1><p>영상: <a href="https://youtu.be/saCpKH_xdgs" target="_blank" rel="noopener">https://youtu.be/saCpKH_xdgs</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance" target="_blank" rel="noopener">SpeechSynthesisUtterance</a> API를 활용한 다국어 TTS<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스피치 인스턴스 생성</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br><span class="line"><span class="keyword">let</span> voices = [];</span><br><span class="line"><span class="keyword">const</span> voicesDropdown = <span class="built_in">document</span>.querySelector(<span class="string">'[name="voice"]'</span>);</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">document</span>.querySelectorAll(<span class="string">'[type="range"], [name="text"]'</span>);</span><br><span class="line"><span class="keyword">const</span> speakButton = <span class="built_in">document</span>.querySelector(<span class="string">'#speak'</span>);</span><br><span class="line"><span class="keyword">const</span> stopButton = <span class="built_in">document</span>.querySelector(<span class="string">'#stop'</span>);</span><br><span class="line">msg.text = <span class="built_in">document</span>.querySelector(<span class="string">'[name="text"]'</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateVoices</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 디바이스의 모든 음성 객체 리스트 반환</span></span><br><span class="line">  voices = <span class="keyword">this</span>.getVoices();</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    .filter(<span class="function"><span class="params">voice</span> =&gt;</span> voice.lang.includes(<span class="string">'en'</span>))</span><br><span class="line">    .map(<span class="function"><span class="params">voice</span> =&gt;</span> <span class="string">`&lt;option value="<span class="subst">$&#123;voice.name&#125;</span>"&gt;<span class="subst">$&#123;voice.name&#125;</span> (<span class="subst">$&#123;voice.lang&#125;</span>)&lt;/option&gt;`</span>)</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.voice = voices.find(<span class="function"><span class="params">voice</span> =&gt;</span> voice.name === <span class="keyword">this</span>.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params">startOver = true</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 말을 멈추거나 취소한다</span></span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">if</span> (startOver) &#123;</span><br><span class="line">    <span class="comment">// 발언을 추가한다</span></span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.value);</span><br><span class="line">  msg[<span class="keyword">this</span>.name] = <span class="keyword">this</span>.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getVoices() 메서드 반환될 SpeechSynthesisVoice 리스트 변경시</span></span><br><span class="line">speechSynthesis.addEventListener(<span class="string">'voiceschanged'</span>, populateVoices);</span><br><span class="line">voicesDropdown.addEventListener(<span class="string">'change'</span>, setVoice);</span><br><span class="line">options.forEach(<span class="function"><span class="params">option</span> =&gt;</span> option.addEventListener(<span class="string">'change'</span>, setOption));</span><br><span class="line">speakButton.addEventListener(<span class="string">'click'</span>, toggle);</span><br><span class="line">stopButton.addEventListener(<span class="string">'click'</span>, () =&gt; toggle(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 8주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geolocation based Speedometer and Compass&lt;/li&gt;
&lt;li&gt;Follow Along Links&lt;/li&gt;
&lt;li&gt;Speech Synthesis&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>실습과 그림으로 배우는 리눅스 구조</title>
    <link href="https://devjang.github.io/2019/04/14/2019-04-14-linux-example-photo-book/"/>
    <id>https://devjang.github.io/2019/04/14/2019-04-14-linux-example-photo-book/</id>
    <published>2019-04-13T15:00:00.000Z</published>
    <updated>2019-04-15T02:02:54.033Z</updated>
    
    <content type="html"><![CDATA[<p>개발자가 알아야 하는 OS와 하드웨어의 기초 </p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 다케우치 사토루<br>역자 : 신준희<br>출간 : 2019.02.20<br>페이지 : 304<br>ISBN : 9791162241523<br>가격 : 24,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14524977" target="_blank" rel="noopener">https://book.naver.com/bookdb/book_detail.nhn?bid=14524977</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793" target="_blank" rel="noopener">http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>컴퓨터 공학 기초와 개발자의 레벨업을 돕는 데에 초점이 있다는 소개가 주이며</p><p>특히 출판사에서는 실습과 그림을 강조한 점이 눈에 띈다</p><p>하지만 책을 보기 전에 느낀 개인적인 강점은<br>보통의 두껍고 부담스러운 리눅스 책들에 비해 얇고 가볍다는 것이었다.</p><h2 id="이해를-돕는-도식화"><a href="#이해를-돕는-도식화" class="headerlink" title="이해를 돕는 도식화"></a>이해를 돕는 도식화</h2><p>책 자체는 구성부터 실습 예제까지 굉장히 <code>친절한</code> 편이다.</p><p>특히 그림이라는 표현보다는 도식화라는 표현이 더 어울릴 법하다고 생각하는데<br>(왜 그림이라고 표현했는지는 모르겠다)</p><p>스케줄러와 메모리 그리고 시스템 콜 등은 정말 상세하게 도식화되어있다.</p><p><code>책 분량의 절반은 도식화</code>라고 볼 수 있을 정도로 친절한 책이다.</p><h2 id="컴퓨터-공학-기초부터-데브옵스-입문까지"><a href="#컴퓨터-공학-기초부터-데브옵스-입문까지" class="headerlink" title="컴퓨터 공학 기초부터 데브옵스 입문까지"></a>컴퓨터 공학 기초부터 데브옵스 입문까지</h2><p>사실 책을 보기 전에 받은 첫 느낌은 그저 리눅스에 한정된 책이고<br>그에 해당하는 두께를 가졌구나였다.</p><p>하지만 책 분량에 비해 컴퓨터 공학 기초에 대해서도 상당히 많이 다루고 있었고</p><p>다양한 케이스와 실습을 다루고 있기에 도움이 데브옵스 입문에도 도움이 될 것 같다.</p><p>물론 쌩 입문자가 볼 수는 없는 수준이지만 최소한의 컴퓨터 공학 기초가 있거나<br>현업에서 일하는 비전공 개발자들에게 디딤돌이 될만한 책이라 생각이 든다.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개발자가 알아야 하는 OS와 하드웨어의 기초 &lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
      <category term="computer science" scheme="https://devjang.github.io/categories/book/programming/computer-science/"/>
    
    
      <category term="리눅스" scheme="https://devjang.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/14/2019-04-14-javascipt30-7/"/>
    <id>https://devjang.github.io/2019/04/14/2019-04-14-javascipt30-7/</id>
    <published>2019-04-13T15:00:00.000Z</published>
    <updated>2019-04-27T06:02:27.264Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 7주차</p><ul><li>How JavaScript’s Array Reduce Works</li><li>Unreal Webcam Fun with getUserMedia() and HTML5 Canvas</li><li>Speech Recognition</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/SadWPo2KZWg/maxresdefault.jpg" alt=""></p><h1 id="18-How-JavaScript’s-Array-Reduce-Works"><a href="#18-How-JavaScript’s-Array-Reduce-Works" class="headerlink" title="18. How JavaScript’s Array Reduce Works"></a>18. How JavaScript’s Array Reduce Works</h1><p>영상: <a href="https://youtu.be/SadWPo2KZWg" target="_blank" rel="noopener">https://youtu.be/SadWPo2KZWg</a></p><p><code>reduce</code> 메서드의 활용 방법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data-* 를 이용해 셀렉팅 후 배열 메서드 활용을 위해 Array.from() 사용</span></span><br><span class="line"><span class="keyword">const</span> timeNodes = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'[data-time]'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// map을 통해 데이터를 가공 후 reduce를 통해 누적값 활용</span></span><br><span class="line"><span class="keyword">const</span> seconds = timeNodes</span><br><span class="line">  .map(<span class="function"><span class="params">node</span> =&gt;</span> node.dataset.time)</span><br><span class="line">  .map(<span class="function"><span class="params">timeCode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [mins, secs] = timeCode.split(<span class="string">':'</span>).map(<span class="built_in">parseFloat</span>);</span><br><span class="line">    <span class="keyword">return</span> (mins * <span class="number">60</span>) + secs;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">total, vidSeconds</span>) =&gt;</span> total + vidSeconds);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> secondsLeft = seconds;</span><br><span class="line">  <span class="keyword">const</span> hours = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">3600</span>);</span><br><span class="line">  secondsLeft = secondsLeft % <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mins = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">60</span>);</span><br><span class="line">  secondsLeft = secondsLeft % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(hours, mins, secondsLeft);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/ElWFcBlVk-o/maxresdefault.jpg" alt=""></p><h1 id="19-Unreal-Webcam-Fun-with-getUserMedia-and-HTML5-Canvas"><a href="#19-Unreal-Webcam-Fun-with-getUserMedia-and-HTML5-Canvas" class="headerlink" title="19. Unreal Webcam Fun with getUserMedia() and HTML5 Canvas"></a>19. Unreal Webcam Fun with getUserMedia() and HTML5 Canvas</h1><p>영상: <a href="https://youtu.be/ElWFcBlVk-o" target="_blank" rel="noopener">https://youtu.be/ElWFcBlVk-o</a></p><p><code>getUserMedia()</code>와 HTML5 캔버스를 활용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getUserMedia()를 통한 접근</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">localMediaStream</span> =&gt;</span> &#123;</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`OH NO!!!`</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// canplay 이벤트 타입은 비디오를 재생할 수 있을 때 트리거 된다</span></span><br><span class="line">video.addEventListener(<span class="string">'canplay'</span>, paintToCanvas);</span><br></pre></td></tr></table></figure><p>이외에 로직은 RGB 값 및 캔버스 조작과 <code>takePhoto()</code> 함수를 통한 로직</p><hr><p><img src="http://i3.ytimg.com/vi/0mJC0A72Fnw/maxresdefault.jpg" alt=""></p><h1 id="20-Speech-Recognition"><a href="#20-Speech-Recognition" class="headerlink" title="20. Speech Recognition"></a>20. Speech Recognition</h1><p>영상: <a href="https://youtu.be/0mJC0A72Fnw" target="_blank" rel="noopener">https://youtu.be/0mJC0A72Fnw</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API" target="_blank" rel="noopener">Web Speech API</a>를 활용한 음성인식</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition = <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br><span class="line"><span class="comment">// 중간결과 반환 여부 (기본값은 false)</span></span><br><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">'en-US'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">'.words'</span>);</span><br><span class="line">words.appendChild(p);</span><br><span class="line"></span><br><span class="line">recognition.addEventListener(<span class="string">'result'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = <span class="built_in">Array</span>.from(e.results)</span><br><span class="line">    .map(<span class="function"><span class="params">result</span> =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function"><span class="params">result</span> =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 음성 인식 중 지정된 단어는 '💩'으로 대체</span></span><br><span class="line">    <span class="keyword">const</span> poopScript = transcript.replace(<span class="regexp">/poop|poo|shit|dump/gi</span>, <span class="string">'💩'</span>);</span><br><span class="line">    p.textContent = poopScript;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">      p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">      words.appendChild(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 음성 인식이 끝나거나 종료되었을때</span></span><br><span class="line">recognition.addEventListener(<span class="string">'end'</span>, recognition.start);</span><br><span class="line"></span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 7주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How JavaScript’s Array Reduce Works&lt;/li&gt;
&lt;li&gt;Unreal Webcam Fun with getUserMedia() and HTML5 Canvas&lt;/li&gt;
&lt;li&gt;Speech Recognition&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/07/2019-04-07-javascipt30-6/"/>
    <id>https://devjang.github.io/2019/04/07/2019-04-07-javascipt30-6/</id>
    <published>2019-04-06T15:00:00.000Z</published>
    <updated>2019-04-14T15:00:59.956Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 6주차</p><ul><li>LocalStorage and Event Delegation</li><li>CSS Text Shadow Mouse Move Effect</li><li>Sorting Band Names without articles</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/YL1F4dCUlLc/maxresdefault.jpg" alt=""></p><h1 id="15-LocalStorage-and-Event-Delegation"><a href="#15-LocalStorage-and-Event-Delegation" class="headerlink" title="15. LocalStorage and Event Delegation"></a>15. LocalStorage and Event Delegation</h1><p>영상: <a href="https://youtu.be/YL1F4dCUlLc" target="_blank" rel="noopener">https://youtu.be/YL1F4dCUlLc</a></p><p>로컬 스토리지와 이벤트 위임</p><p>리스트의 <code>&lt;ul&gt;</code> 태그에 이벤트를 등록하여 자식요소인 다수의 <code>&lt;li&gt;</code> 태그에 이벤트를 한번에 등록한다.</p><p>이외에 특별한 부분은 존재하지 않았으며</p><p><code>&lt;form&gt;</code> 태그에 당연히 <code>e.preventDefault()</code>를 사용한 점과<br><code>reset()</code>을 활용한 부분을 다시 한번 상기시킬 수 있었다.</p><hr><p><img src="http://i3.ytimg.com/vi/zaz9gLI-Xac/maxresdefault.jpg" alt=""></p><h1 id="16-CSS-Text-Shadow-Mouse-Move-Effect"><a href="#16-CSS-Text-Shadow-Mouse-Move-Effect" class="headerlink" title="16. CSS Text Shadow Mouse Move Effect"></a>16. CSS Text Shadow Mouse Move Effect</h1><p>영상: <a href="https://youtu.be/zaz9gLI-Xac" target="_blank" rel="noopener">https://youtu.be/zaz9gLI-Xac</a></p><p>Text Shadow 효과 활용하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">offsetWidth</span>: width, <span class="attr">offsetHeight</span>: height &#125; = hero;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">offsetX</span>: x, <span class="attr">offsetY</span>: y &#125; = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> !== e.target) &#123;</span><br><span class="line">  x = x + e.target.offsetLeft;</span><br><span class="line">  y = y + e.target.offsetTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xWalk = <span class="built_in">Math</span>.round((x / width * walk) - (walk / <span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> yWalk = <span class="built_in">Math</span>.round((y / height * walk) - (walk / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">text.style.textShadow = <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;xWalk&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(255,0,255,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(0,255,255,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;yWalk&#125;</span>px <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px 0 rgba(0,255,0,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;yWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;xWalk&#125;</span>px 0 rgba(0,0,255,0.7)</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p><code>mousemove</code> 이벤트 타입을 사용하여 텍스트의 `textShadow 스타일링을 수정한다.</p><hr><p><img src="http://i3.ytimg.com/vi/PEEo-2mRQ7A/maxresdefault.jpg" alt=""></p><h1 id="17-Sorting-Band-Names-without-articles"><a href="#17-Sorting-Band-Names-without-articles" class="headerlink" title="17. Sorting Band Names without articles"></a>17. Sorting Band Names without articles</h1><p>영상: <a href="https://youtu.be/PEEo-2mRQ7A" target="_blank" rel="noopener">https://youtu.be/PEEo-2mRQ7A</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bands = [<span class="string">'The Plot in You'</span>, <span class="string">'The Devil Wears Prada'</span>, <span class="string">'Pierce the Veil'</span>, <span class="string">'Norma Jean'</span>, <span class="string">'The Bled'</span>, <span class="string">'Say Anything'</span>, <span class="string">'The Midway State'</span>, <span class="string">'We Came as Romans'</span>, <span class="string">'Counterparts'</span>, <span class="string">'Oh, Sleeper'</span>, <span class="string">'A Skylit Drive'</span>, <span class="string">'Anywhere But Here'</span>, <span class="string">'An Old Dog'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">bandName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bandName.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">''</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><code>sort()</code> 메서드를 활용한 정렬과 정규표현식 활용 방법으로 딱히 특별한 내용은 없었다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 6주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalStorage and Event Delegation&lt;/li&gt;
&lt;li&gt;CSS Text Shadow Mouse Move Effect&lt;/li&gt;
&lt;li&gt;Sorting Band Names without articles&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/31/2019-03-31-javascipt30-5/"/>
    <id>https://devjang.github.io/2019/03/31/2019-03-31-javascipt30-5/</id>
    <published>2019-03-30T15:00:00.000Z</published>
    <updated>2019-03-31T09:17:45.351Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 5주차</p><ul><li>JavaScript KONAMI CODE!</li><li>Vanilla JavaScript Slide In on Scroll</li><li>JavaScript Fundamentals: Reference VS Copy</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/_A5eVOIqGLU/maxresdefault.jpg" alt=""></p><h1 id="12-JavaScript-KONAMI-CODE"><a href="#12-JavaScript-KONAMI-CODE" class="headerlink" title="12. JavaScript KONAMI CODE!"></a>12. JavaScript KONAMI CODE!</h1><p>영상: <a href="https://youtu.be/_A5eVOIqGLU" target="_blank" rel="noopener">https://youtu.be/_A5eVOIqGLU</a></p><p>키 입력 감지</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pressed = [];</span><br><span class="line"><span class="keyword">const</span> secretCode = <span class="string">'wesbos'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'keyup'</span>, (e) =&gt; &#123;</span><br><span class="line">  pressed.push(e.key);</span><br><span class="line">  <span class="comment">// 입력된 키의 배열을 최신순으로 최대 6개 유지시킨다</span></span><br><span class="line">  pressed.splice(-secretCode.length - <span class="number">1</span>, pressed.length - secretCode.length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 미리 정의된 secretCode와 입력된 키 배열을 대조하여 UI에 변화를 준다.</span></span><br><span class="line">  <span class="keyword">if</span> (pressed.join(<span class="string">''</span>).includes(secretCode)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DING DING!'</span>);</span><br><span class="line">    cornify_add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/uzRsENVD3W8/maxresdefault.jpg" alt=""></p><h1 id="13-Vanilla-JavaScript-Slide-In-on-Scroll"><a href="#13-Vanilla-JavaScript-Slide-In-on-Scroll" class="headerlink" title="13. Vanilla JavaScript Slide In on Scroll"></a>13. Vanilla JavaScript Slide In on Scroll</h1><p>영상: <a href="https://youtu.be/uzRsENVD3W8" target="_blank" rel="noopener">https://youtu.be/uzRsENVD3W8</a></p><p>스크롤 이벤트 활용하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 성능 최적화를 위한 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">20</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 윈도우 객체</span></span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 스크롤 이벤트</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(later, wait);</span><br><span class="line">    <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSlide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  sliderImages.forEach(<span class="function"><span class="params">sliderImage</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> slideInAt = (<span class="built_in">window</span>.scrollY + <span class="built_in">window</span>.innerHeight) - sliderImage.height / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> imageBottom = sliderImage.offsetTop + sliderImage.height;</span><br><span class="line">    <span class="keyword">const</span> isHalfShown = slideInAt &gt; sliderImage.offsetTop;</span><br><span class="line">    <span class="keyword">const</span> isNotScrolledPast = <span class="built_in">window</span>.scrollY &lt; imageBottom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// css 트랜스폼 translateX 속성 변경으로 스크롤을 통한 가로 슬라이드 효과를 준다.</span></span><br><span class="line">    <span class="keyword">if</span> (isHalfShown &amp;&amp; isNotScrolledPast) &#123;</span><br><span class="line">      sliderImage.classList.add(<span class="string">'active'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sliderImage.classList.remove(<span class="string">'active'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성능 최적화를 위해 debounce()에 함수를 위임한다.</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, debounce(checkSlide));</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/YnfwDQ5XYF4/maxresdefault.jpg" alt=""></p><h1 id="14-JavaScript-Fundamentals-Reference-VS-Copy"><a href="#14-JavaScript-Fundamentals-Reference-VS-Copy" class="headerlink" title="14. JavaScript Fundamentals: Reference VS Copy"></a>14. JavaScript Fundamentals: Reference VS Copy</h1><p>영상: <a href="https://youtu.be/YnfwDQ5XYF4" target="_blank" rel="noopener">https://youtu.be/YnfwDQ5XYF4</a></p><p>JavaScript의 객체와 배열 그리고 참조 vs 복사</p><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 배열</span></span><br><span class="line"><span class="keyword">const</span> players = [<span class="string">'Wes'</span>, <span class="string">'Sarah'</span>, <span class="string">'Ryan'</span>, <span class="string">'Poppy'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> team = players;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">team[<span class="number">3</span>] = <span class="string">'Lux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="keyword">const</span> team2 = players.slice();</span><br><span class="line"><span class="keyword">const</span> team3 = [].concat(players);</span><br><span class="line"><span class="keyword">const</span> team4 = [...players];</span><br><span class="line"><span class="keyword">const</span> team5 = <span class="built_in">Array</span>.from(players);</span><br></pre></td></tr></table></figure><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 객체</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Wes Bos'</span>,</span><br><span class="line">  age: <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> captain = person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">captain.number = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="keyword">const</span> cap2 = <span class="built_in">Object</span>.assign(&#123;&#125;, person, &#123; <span class="attr">number</span>: <span class="number">99</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> cap3 = &#123;...person&#125;;</span><br></pre></td></tr></table></figure><h3 id="객체-1-depth-초과"><a href="#객체-1-depth-초과" class="headerlink" title="객체 (1 depth 초과)"></a>객체 (1 depth 초과)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 객체</span></span><br><span class="line"><span class="keyword">const</span> wes = &#123;</span><br><span class="line">  name: <span class="string">'Wes'</span>,</span><br><span class="line">  age: <span class="number">100</span>,</span><br><span class="line">  social: &#123;</span><br><span class="line">    twitter: <span class="string">'@wesbos'</span>,</span><br><span class="line">    facebook: <span class="string">'wesbos.developer'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">Object</span>.assign(&#123;&#125;, wes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">dev.social.twitter = <span class="string">'@coolman'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="comment">// lodash의 cloneDeep 사용</span></span><br><span class="line"><span class="comment">// JSON 활용</span></span><br><span class="line"><span class="keyword">const</span> dev2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(wes));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 5주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript KONAMI CODE!&lt;/li&gt;
&lt;li&gt;Vanilla JavaScript Slide In on Scroll&lt;/li&gt;
&lt;li&gt;JavaScript Fundamentals: Reference VS Copy&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/24/2019-03-24-javascipt30-4/"/>
    <id>https://devjang.github.io/2019/03/24/2019-03-24-javascipt30-4/</id>
    <published>2019-03-23T15:00:00.000Z</published>
    <updated>2019-03-24T09:56:45.147Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 4주차</p><ul><li>14 Must Know Chrome Dev Tools Tricks</li><li>JS Checkbox Challenge!</li><li>Custom HTML5 Video Player</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/xkzDaKwinA8/maxresdefault.jpg" alt=""></p><h1 id="9-14-Must-Know-Chrome-Dev-Tools-Tricks"><a href="#9-14-Must-Know-Chrome-Dev-Tools-Tricks" class="headerlink" title="9. 14 Must Know Chrome Dev Tools Tricks"></a>9. 14 Must Know Chrome Dev Tools Tricks</h1><p>영상: <a href="https://youtu.be/xkzDaKwinA8" target="_blank" rel="noopener">https://youtu.be/xkzDaKwinA8</a> </p><p>크롬 개발자 도구의 콘솔를 활용하는 팁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 보간법</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello I am a %s string!'</span>, <span class="string">'💩'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스타일링</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'%c I am some great text'</span>, <span class="string">'font-size:50px; background:red; text-shadow: 10px 10px 0 blue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span><br><span class="line"><span class="comment">// 테스팅</span></span><br><span class="line"><span class="built_in">console</span>.assert(p.classList.contains(<span class="string">'ouch'</span>), <span class="string">'That is wrong!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콘솔 그룹화</span></span><br><span class="line">dogs.forEach(<span class="function"><span class="params">dog</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.groupCollapsed(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`This is <span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span> is <span class="subst">$&#123;dog.age&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span> is <span class="subst">$&#123;dog.age * <span class="number">7</span>&#125;</span> dog years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.groupEnd(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타이머</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'fetching data'</span>);</span><br><span class="line">fetch(<span class="string">'https://api.github.com/users/wesbos'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'fetching data'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 테이블 표기</span></span><br><span class="line"><span class="built_in">console</span>.table(dogs);</span><br></pre></td></tr></table></figure><p>콘솔이 이렇게 다양함에도 불구하고 개인적으로<br><code>console.log()</code>와 <code>console.dir()</code>로 대부분 해결하고는 했다.</p><p>때문에 앞으로 의식적으로라도 활용하기 좋을 것 같은 것들만 정리했다.</p><hr><p><img src="http://i3.ytimg.com/vi/RIPYsKx1iiU/maxresdefault.jpg" alt=""></p><h1 id="10-JS-Checkbox-Challenge"><a href="#10-JS-Checkbox-Challenge" class="headerlink" title="10. JS Checkbox Challenge!"></a>10. JS Checkbox Challenge!</h1><p>영상: <a href="https://youtu.be/RIPYsKx1iiU" target="_blank" rel="noopener">https://youtu.be/RIPYsKx1iiU</a> </p><p><code>shift</code> 키로 전체 선택 가능한 체크박스 리스트</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.inbox input[type="checkbox"]'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 마지막으로 선택된 체크박스</span></span><br><span class="line"><span class="keyword">let</span> lastChecked;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCheck</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inBetween = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 쉬프트 키 이벤트 발생 &amp; 체크박스 true 트리거</span></span><br><span class="line">  <span class="keyword">if</span> (e.shiftKey &amp;&amp; <span class="keyword">this</span>.checked) &#123;</span><br><span class="line"></span><br><span class="line">    checkboxes.forEach(<span class="function">(<span class="params">checkbox</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (checkbox === <span class="keyword">this</span> || checkbox === lastChecked) &#123;</span><br><span class="line">        inBetween = !inBetween;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (inBetween) &#123;</span><br><span class="line">        checkbox.checked = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lastChecked = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkboxes.forEach(<span class="function">(<span class="params">checkbox</span>) =&gt;</span> checkbox.addEventListener(<span class="string">'click'</span>, handleCheck));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Flag 변수 <code>inBetween</code> &amp; <code>lastChecked</code>를 활용한다</li><li><code>this</code>의 잦은 활용과 불필요해보이는 <code>if문</code>이 있어 리팩토링해볼만 할 부분으로 보인다.</li><li><code>checkboxes</code>에 이벤트 등록 방법을 달리할 수 있을 것 같다.</li></ul><hr><p><img src="http://i3.ytimg.com/vi/yx-HYerClEA/maxresdefault.jpg" alt=""></p><h1 id="11-Custom-HTML5-Video-Player"><a href="#11-Custom-HTML5-Video-Player" class="headerlink" title="11. Custom HTML5 Video Player"></a>11. Custom HTML5 Video Player</h1><p>영상: <a href="https://youtu.be/yx-HYerClEA" target="_blank" rel="noopener">https://youtu.be/yx-HYerClEA</a> </p><p>HTML5 API를 활용한 비디오 플레이어 핸들링 방법을 다룬다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 비디오 플레이 토글</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">togglePlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> method = video.paused ? <span class="string">'play'</span> : <span class="string">'pause'</span>;</span><br><span class="line">  video[method]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비디오 플레이 버튼 아이콘 변경</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> icon = <span class="keyword">this</span>.paused ? <span class="string">'►'</span> : <span class="string">'❚ ❚'</span>;</span><br><span class="line">  toggle.textContent = icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스킵 버튼 클릭시 비디오 현재 플레이 시간에 반영</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> video.currentTime += <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.dataset.skip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3가지 레인지 영역에 대한 핸들링을 한번에 처리</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRangeUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  video[<span class="keyword">this</span>.name] = <span class="keyword">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeupdate 이벤트 발생시 진행바의 스타일링 수정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleProgress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> percent = (video.currentTime / video.duration) * <span class="number">100</span>;</span><br><span class="line">  progressBar.style.flexBasis = <span class="string">`<span class="subst">$&#123;percent&#125;</span>%`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비디오 재생 진행바에 대한 마우스 이벤트(클릭/다운/업/무브)를 처리한다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrub</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> scrubTime = (e.offsetX / progress.offsetWidth) * video.duration;</span><br><span class="line">  video.currentTime = scrubTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>video API의 <code>play</code>, <code>pause</code>, <code>timeupdate</code> 이벤트 타입 활용도와 강력함을 알 수 있었다.</p><p>이밖에도 활용도 높은 API가 있기 때문에 HTML5 지원 환경에서 작업시<br>HTML5 API만으로 괜찮은 비디오 플레이어를 개발할 수 있을 것 같다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 4주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 Must Know Chrome Dev Tools Tricks&lt;/li&gt;
&lt;li&gt;JS Checkbox Challenge!&lt;/li&gt;
&lt;li&gt;Custom HTML5 Video Player&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/17/2019-03-17-javascipt30-3/"/>
    <id>https://devjang.github.io/2019/03/17/2019-03-17-javascipt30-3/</id>
    <published>2019-03-16T15:00:00.000Z</published>
    <updated>2019-03-17T10:12:35.473Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 3주차</p><ul><li>Ajax Type Ahead with fetch()</li><li>Array Cardio Day 2</li><li>Let’s build something fun with HTML5 Canvas</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/y4gZMJKAeWs/maxresdefault.jpg" alt=""></p><h1 id="6-Ajax-Type-Ahead-with-fetch"><a href="#6-Ajax-Type-Ahead-with-fetch" class="headerlink" title="6. Ajax Type Ahead with fetch()"></a>6. Ajax Type Ahead with fetch()</h1><p>영상: <a href="https://youtu.be/y4gZMJKAeWs" target="_blank" rel="noopener">https://youtu.be/y4gZMJKAeWs</a></p><p>미리 준비된 JSON Data를 Fetch API를 사용하여 받아온 후 정규표현식을 통해 조작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(endpoint)</span><br><span class="line">  .then(<span class="function"><span class="params">blob</span> =&gt;</span> blob.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> cities.push(...data));</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Body/json" target="_blank" rel="noopener">body.json()</a>를 사용하여 JSON을 파싱하는데 <code>JSON.parse()</code>와 다른 부분이 흥미롭다<br><code>body.json()</code>의 경우 <strong>비동기</strong>이며 <strong>Promise 객체를 반환</strong>한다.</li></ul><p>참고자료: <a href="https://stackoverflow.com/questions/48295439/json-parse-vs-json" target="_blank" rel="noopener">body.json() vs JSON.parse()</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberWithCommas</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.toString().replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3자리 단위로 콤마를 찍어주는 정규표현식</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case 1</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(wordToMatch, <span class="string">'gi'</span>);</span><br><span class="line"><span class="keyword">return</span> place.city.match(regex) || place.state.match(regex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Case 2</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.value, <span class="string">'gi'</span>);</span><br><span class="line"><span class="keyword">const</span> cityName = place.city.replace(regex, <span class="string">`&lt;span class="hl"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.value&#125;</span>&lt;/span&gt;`</span>);</span><br><span class="line"><span class="keyword">const</span> stateName = place.state.replace(regex, <span class="string">`&lt;span class="hl"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.value&#125;</span>&lt;/span&gt;`</span>);</span><br></pre></td></tr></table></figure><ul><li>정규표현식 메서드를 사용하기 위한 방법</li></ul><hr><p><img src="http://i3.ytimg.com/vi/QNmRfyNg1lw/maxresdefault.jpg" alt=""></p><h1 id="7-Array-Cardio-Day-2"><a href="#7-Array-Cardio-Day-2" class="headerlink" title="7. Array Cardio Day 2"></a>7. Array Cardio Day 2</h1><p>영상: <a href="https://youtu.be/QNmRfyNg1lw" target="_blank" rel="noopener">https://youtu.be/QNmRfyNg1lw</a> </p><p>JavaScript Array 강화 훈련2</p><p>이전에 나왔던 4강의 <strong>JavaScript Array Cardio Practice - Day 1</strong>과 별 다를게 없었다.</p><p><strong>강의 속 사용된 Array Method</strong></p><blockquote><ul><li>Array.prototype.some</li><li>Array.prototype.every</li><li>Array.prototype.find</li><li>Array.prototype.findIndex</li></ul></blockquote><hr><p><img src="http://i3.ytimg.com/vi/8ZGAzJ0drl0/maxresdefault.jpg" alt=""></p><h1 id="8-Let’s-build-something-fun-with-HTML5-Canvas"><a href="#8-Let’s-build-something-fun-with-HTML5-Canvas" class="headerlink" title="8. Let’s build something fun with HTML5 Canvas"></a>8. Let’s build something fun with HTML5 Canvas</h1><p>영상: <a href="https://youtu.be/8ZGAzJ0drl0" target="_blank" rel="noopener">https://youtu.be/8ZGAzJ0drl0</a> </p><p>HTML5 Canvas를 활용한 그림판</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"draw"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"800"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>캔버스 DOM 요소 생성</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'#draw'</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br></pre></td></tr></table></figure><ul><li>캔버스 생성시 렌더링 타입을 <code>getContext()</code>를 통해 초기화해줘야한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 윤곽선 색상</span></span><br><span class="line">ctx.strokeStyle = <span class="string">'#BADA55'</span>;</span><br><span class="line"><span class="comment">// 모서리 스타일</span></span><br><span class="line">ctx.lineJoin = <span class="string">'round'</span>;</span><br><span class="line"><span class="comment">// 선의 끝점 스타일</span></span><br><span class="line">ctx.lineCap = <span class="string">'round'</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 도형이 겹쳐질때의 방식</span></span><br><span class="line">ctx.globalCompositeOperation = <span class="string">'multiply'</span>;</span><br><span class="line"><span class="comment">// 도형을 그릴때의 시작 경로</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 지정된 좌표로 이동</span></span><br><span class="line">ctx.moveTo(lastX, lastY);</span><br><span class="line"><span class="comment">// 지정된 위치까지 선을 그린다</span></span><br><span class="line">ctx.lineTo(e.offsetX, e.offsetY);</span><br><span class="line"><span class="comment">// 현재 or 지정된 경로로 윤곽선을 그린다.</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>전체적인 로직은 마우스 이벤트를 감지한 후 캔버스 객체를 활용하여 그림을 그리는 방식이다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 3주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajax Type Ahead with fetch()&lt;/li&gt;
&lt;li&gt;Array Cardio Day 2&lt;/li&gt;
&lt;li&gt;Let’s build something fun with HTML5 Canvas&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/10/2019-03-10-javascipt30-2/"/>
    <id>https://devjang.github.io/2019/03/10/2019-03-10-javascipt30-2/</id>
    <published>2019-03-09T15:00:00.000Z</published>
    <updated>2019-03-10T08:36:48.420Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 2주차</p><ul><li>Woah! CSS Variables?!</li><li>JavaScript Array Cardio Practice - Day 1</li><li>Flexbox + JavaScript Image Gallery</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/AHLNzv13c2I/maxresdefault.jpg" alt=""></p><h1 id="3-Woah-CSS-Variables"><a href="#3-Woah-CSS-Variables" class="headerlink" title="3. Woah! CSS Variables?!"></a>3. Woah! CSS Variables?!</h1><p>영상: <a href="https://youtu.be/AHLNzv13c2I" target="_blank" rel="noopener">https://youtu.be/AHLNzv13c2I</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">사용자 정의 CSS 속성 사용하기 (변수)</a></p><p>이번 섹션에서 JavaScript는 특별한 부분이 딱히 보이지 않았으며 CSS에 흥미로운 점이 있었다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--base</span>: <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="attribute">--spacing</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">--blur</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(var(--blur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hl</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>가상 클래스 <code>:root</code>를 통하여 변수를 <code>선언</code>할 수 있다</li><li><code>--</code> 프리픽스를 통해 변수를 <code>사용</code>할 수 있다</li><li><code>getPropertyValue</code>와 <code>setProperty</code>를 사용하여 JS로도 접근이 가능하다</li></ul><p>자세한 정보: <a href="https://wit.nts-corp.com/2017/06/27/4731" target="_blank" rel="noopener">https://wit.nts-corp.com/2017/06/27/4731</a></p><hr><p><img src="http://i3.ytimg.com/vi/HB1ZC7czKRs/maxresdefault.jpg" alt=""></p><h1 id="4-JavaScript-Array-Cardio-Practice-Day-1"><a href="#4-JavaScript-Array-Cardio-Practice-Day-1" class="headerlink" title="4. JavaScript Array Cardio Practice - Day 1"></a>4. JavaScript Array Cardio Practice - Day 1</h1><p>영상: <a href="https://youtu.be/HB1ZC7czKRs" target="_blank" rel="noopener">https://youtu.be/HB1ZC7czKRs</a> </p><p>JavaScript Array 강화 훈련</p><p>이번 섹션에서는 다양한 Array 기본 내장 메서드를 활용하는 섹션이기때문에 딱히 어려움은 없었다.</p><p><strong>강의 속 사용된 Array Method</strong></p><blockquote><ul><li>Array.prototype.map</li><li>Array.prototype.filter</li><li>Array.prototype.sort</li><li>Array.prototype.reduce</li></ul></blockquote><hr><p><img src="http://i3.ytimg.com/vi/9eif30i26jg/maxresdefault.jpg" alt=""></p><h1 id="5-Flexbox-JavaScript-Image-Gallery"><a href="#5-Flexbox-JavaScript-Image-Gallery" class="headerlink" title="5. Flexbox + JavaScript Image Gallery"></a>5. Flexbox + JavaScript Image Gallery</h1><p>영상: <a href="https://youtu.be/9eif30i26jg" target="_blank" rel="noopener">https://youtu.be/9eif30i26jg</a> </p><p>Flexbox를 활용한 이미지 갤러리</p><p>Flexbox를 통해 레이아웃된 이 이미지 갤러리에 트랜지션(<code>transitionend</code>) 효과를 트리거하여 동작하는 구동 방식이다.</p><ul><li>Safari에서의 <code>transitionend</code> 이벤트 프로퍼티명은 <code>flex</code></li><li>Chrome에서의 <code>transitionend</code> 이벤트 프로퍼티명은 <code>flex-grow</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> panels = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.panel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  <span class="keyword">this</span>.classList.toggle(<span class="string">'open'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleActive</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.propertyName);</span><br><span class="line">  <span class="keyword">if</span> (e.propertyName.includes(<span class="string">'flex'</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.classList.toggle(<span class="string">'open-active'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> panel.addEventListener(<span class="string">'click'</span>, toggleOpen));</span><br><span class="line">panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> panel.addEventListener(<span class="string">'transitionend'</span>, toggleActive));</span><br></pre></td></tr></table></figure><ul><li><code>classList.toggle()</code>은 jQuery의 <code>toggleClass()</code>과 같은 동작을 한다.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 2주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Woah! CSS Variables?!&lt;/li&gt;
&lt;li&gt;JavaScript Array Cardio Practice - Day 1&lt;/li&gt;
&lt;li&gt;Flexbox + JavaScript Image Gallery&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/03/2019-03-03-javascipt30-1/"/>
    <id>https://devjang.github.io/2019/03/03/2019-03-03-javascipt30-1/</id>
    <published>2019-03-02T15:00:00.000Z</published>
    <updated>2019-03-10T08:03:00.300Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 1주차</p><ul><li>JavaScript Drum Kit</li><li>CSS + JS Clock</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/VuN8qwZoego/maxresdefault.jpg" alt=""></p><h1 id="1-JavaScript-Drum-Kit"><a href="#1-JavaScript-Drum-Kit" class="headerlink" title="1. JavaScript Drum Kit"></a>1. JavaScript Drum Kit</h1><p>영상: <a href="https://youtu.be/VuN8qwZoego" target="_blank" rel="noopener">https://youtu.be/VuN8qwZoego</a> </p><p>백그라운드에서 입력받으면 키를 통해 이미 지정된 로컬 경로의 이미지가 실행되는 방식이다.<br>(CSS 효과도 있다)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">"65"</span> <span class="attr">src</span>=<span class="string">"sounds/clap.wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">"83"</span> <span class="attr">src</span>=<span class="string">"sounds/hihat.wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/HTML/Element/audio" target="_blank" rel="noopener">HTML5 <code>&lt;audio&gt;</code></a> 요소가 사용되었다.</li><li>입력받을 키코드를 미리 <a href="https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/data-*" target="_blank" rel="noopener">data-*</a>를 통해 커스텀 어트리뷰트로 정의하였다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key="<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>);</span><br><span class="line"><span class="keyword">const</span> key = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key="<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><code>data-*</code></strong> 셀렉팅 방법</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">audio.currentTime = <span class="number">0</span>;</span><br><span class="line">audio.play();</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>HTML &lt;audio&gt;</code></strong> API 활용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.key'</span>));</span><br><span class="line">keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> key.addEventListener(<span class="string">'transitionend'</span>, removeTransition));</span><br></pre></td></tr></table></figure></li><li><p>굳이 <code>Array.from</code>를 사용하지 않고 <code>for of...</code>만 활용하는 것이 더 좋을 것 같다.</p></li></ul><p><img src="http://i3.ytimg.com/vi/xu87YWbr4X0/maxresdefault.jpg" alt=""></p><h1 id="2-CSS-JS-Clock"><a href="#2-CSS-JS-Clock" class="headerlink" title="2. CSS + JS Clock"></a>2. CSS + JS Clock</h1><p>영상: <a href="https://youtu.be/xu87YWbr4X0" target="_blank" rel="noopener">https://youtu.be/xu87YWbr4X0</a> </p><p>CSS의 이용한 transform을 이용한 JS Clock</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> seconds = now.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> mins = now.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> hour = now.getHours();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondsDegrees = (seconds / <span class="number">60</span>) * <span class="number">360</span> + <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">const</span> minsDegrees = (mins / <span class="number">60</span>) * <span class="number">360</span> + (seconds / <span class="number">60</span>) * <span class="number">6</span> + <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">const</span> hourDegrees = (hour / <span class="number">12</span>) * <span class="number">360</span> + (mins / <span class="number">60</span>) * <span class="number">30</span> + <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">  secondHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secondsDegrees&#125;</span>deg)`</span>;</span><br><span class="line">  minsHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;minsDegrees&#125;</span>deg)`</span>;</span><br><span class="line">  hourHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;hourDegrees&#125;</span>deg)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>시분초가 한번에 핸들링 되는 <code>setDate()</code> 함수를 1000밀리세컨드마다 <code>setInterval()</code>을 통해 호출하고 있다.</li><li>시분초의 DOM을 미리 정의하고 셀렉팅하여 CSS의 <code>transform : rotate의 각도</code>를 1000밀리세컨드마다 변경해준다.</li><li>특별한 로직이 없지만 CSS만으로도 얼마나 많은 효과를 줄 수 있는지 다시 한번 깨닫는다</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 1주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript Drum Kit&lt;/li&gt;
&lt;li&gt;CSS + JS Clock&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
      <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
      <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>모던 자바스크립트</title>
    <link href="https://devjang.github.io/2019/02/22/2019-02-22-understanding-ecmascript-6/"/>
    <id>https://devjang.github.io/2019/02/22/2019-02-22-understanding-ecmascript-6/</id>
    <published>2019-02-21T15:00:00.000Z</published>
    <updated>2019-02-24T12:54:37.450Z</updated>
    
    <content type="html"><![CDATA[<p>예제로 배우는 ECMAScript 6 핵심 기능! 모던 자바스크립트 리뷰!</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>원제 : Understanding Ecmascript 6<br>출판사 : 인사이트<br>저자 : 니콜라스 자카스<br>역자 : 김두형, 정재훈<br>출간 : 2017-11-08<br>페이지 : 388<br>ISBN : 9788966262113<br>가격 : 28,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12723816" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=12723816</a><br>: <a href="https://leanpub.com/understandinges6" target="_blank" rel="noopener">https://leanpub.com/understandinges6</a></li></ul><h3 id="읽기-전에"><a href="#읽기-전에" class="headerlink" title="읽기 전에"></a>읽기 전에</h3><ol><li>뭔가 고전적인 표지</li><li>일반적이고 끌림 없는 제목</li><li>예제로만 가득할 것 같은 느낌의 부제</li></ol><p>이러한 첫인상에도 불구하고 <code>니콜라스 자카스의 책은 언제나 옳다</code>라는 생각으로 책을 고르게 되었다<br>(또한 ES6에 대한 사전 지식이 있어 책이 꼭 필요한 상태는 아니였다)</p><h3 id="결국-JavaScript를-위한-책"><a href="#결국-JavaScript를-위한-책" class="headerlink" title="결국 JavaScript를 위한 책"></a>결국 JavaScript를 위한 책</h3><p>처음 책을 마주했을 때는 예제를 통해 ES6를 훑어보는 책이구나 정도였다.</p><p>하지만 이 책의 진가는 <code>깊이</code>와 <code>전개</code>에 있었다.</p><blockquote><p>=&gt; JavaScript에서의 개념<br>=&gt; ES6 이전의 문제점 및 코드<br>=&gt; 해당 Feature가 생겨난 이유와 코드<br>=&gt; Best Practice</p></blockquote><p>책은 위와 같은 흐름으로 진행된다.</p><p>JavaScript 기본 지식이 없다면 읽을 수 없으며<br>이미 <code>ES2015+ Feature에 대해서도 익숙한 개발자도 기본기와 개념을 다질 수 있는</code> 책이다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>JavaScript는 계속 공부 하면 되는 거고 ES2015+부터는 검색해서 찾아 쓰면 되겠지</p><p>라는 접근법으로 ES6에 다가갔던 나의 부족함 얕은 깊이를 체감할 수 있는 책이었다.</p><p>또한 저자가 저자의 책 다운 책을 써줘서 감사했고 역자의 적절한 번역으로 편하게 읽을 수 있어 좋았다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;예제로 배우는 ECMAScript 6 핵심 기능! 모던 자바스크립트 리뷰!&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/book/programming/javascript/"/>
    
    
      <category term="예제로 배우는 ECMAScript 6 핵심 기능" scheme="https://devjang.github.io/tags/%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-ECMAScript-6-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EB%8A%A5/"/>
    
      <category term="ES6" scheme="https://devjang.github.io/tags/ES6/"/>
    
      <category term="ES2015" scheme="https://devjang.github.io/tags/ES2015/"/>
    
  </entry>
  
  <entry>
    <title>자바스크립트를 깨우치다</title>
    <link href="https://devjang.github.io/2019/02/15/2019-02-15-enlightenment-js/"/>
    <id>https://devjang.github.io/2019/02/15/2019-02-15-enlightenment-js/</id>
    <published>2019-02-14T15:00:00.000Z</published>
    <updated>2019-02-17T03:22:07.126Z</updated>
    
    <content type="html"><![CDATA[<p>객체로 풀어보는 JavaScript의 원리! 자바스크립트를 깨우치다</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 비제이퍼블릭<br>저자 : 코디 린들리<br>역자 : 김태곤<br>출간 : 2013.07.22<br>페이지 : 183<br>ISBN : 9788994774435<br>가격 : 18,500 원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7262575" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=7262575</a>  </li></ul><hr><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>믿음이 가는 <strong>오라일리</strong>의 서적 그리고 존경하는 역자 <strong>김태곤님</strong><br>하지만 너무 <code>오래된 출간일</code></p><p>이 책을 구매하고자 하기에는 뭔가 부족했지만</p><p>결국 기초를 다지기 위해 훑어보기에는 충분히 얇은 분량<br>또한 중고 서적으로 저렴한 가격</p><p>결국 책 구매 후 일주일도 되지 않아 빠르게 읽어볼 수 있었다.</p><h2 id="JavaScript를-훑어보다"><a href="#JavaScript를-훑어보다" class="headerlink" title="JavaScript를 훑어보다"></a>JavaScript를 훑어보다</h2><p>책은 목차대로 훌훌 넘어가면서도 가이드와 관점을 제시하며 독자를 올바른 방향으로 인도한다.</p><p>제목 그대로 책을 보며 <code>오!</code>하며 깨우치는 순간이 있기도 하고<br><code>오!</code>하며 잊었던 개념들을 다시 한번 상기할 수도 있었다.</p><h2 id="이제는-놓아줘야-할-때"><a href="#이제는-놓아줘야-할-때" class="headerlink" title="이제는 놓아줘야 할 때"></a>이제는 놓아줘야 할 때</h2><p>너무나 오래되었다.</p><p>책이 출간되었던 13년도 그랬지만 현시점에서조차 JavaScript 생태계는 무한하게 성장하며 변해가고 있다.<br>이 책은 출간 시점을 기준으로 <strong>초중급 개발자를 타겟</strong>으로 하고 있다고 소개되어있지만</p><p>요즘 Front-end 신입 구직자들이 굉장히 뛰어나기 때문에 이 정도의 책이라면 어렵지 않게 읽을 수 있을 거라는 생각이 든다.</p><p>또한 <code>ES3의 요약본</code>이라고도 할 수 있는 책이기에 ES5조차 다루지 않는다는 것도 아쉬운 부분이다.<br>(또한 비동기를 다루지 않는다)</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>JavaScript 입문 서적을 추천할 때 종종 보이는 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7400243" target="_blank" rel="noopener">인사이드 자바스크립트</a>와 유사하지만 쉬운 버전의 책이라고 봐도 무방하다.<br>(인사이드 자바스크립트는 결코 입문 수준의 책이 아니다)</p><ol><li>JavaScript의 기초를 다시 한번 다지고 싶을 때</li><li>적은 분량을 원할 때</li><li>레거시한 JavaScript를 봐도 좋을 때</li><li>인사이드 자바스크립트를 봐야 하는데 너무 어려워서 보기 힘들 때</li></ol><blockquote><p>위의 상황에 빠르게 JavaScript 개념을 정리할 수 있는 책이라고 할 수 있다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;객체로 풀어보는 JavaScript의 원리! 자바스크립트를 깨우치다&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/book/programming/javascript/"/>
    
    
      <category term="자바스크립트를 깨우치다" scheme="https://devjang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EA%B9%A8%EC%9A%B0%EC%B9%98%EB%8B%A4/"/>
    
  </entry>
  
  <entry>
    <title>객체지향 자바스크립트의 원리</title>
    <link href="https://devjang.github.io/2018/12/23/2018-12-23-ths-principles-of-oop-js/"/>
    <id>https://devjang.github.io/2018/12/23/2018-12-23-ths-principles-of-oop-js/</id>
    <published>2018-12-22T15:00:00.000Z</published>
    <updated>2018-12-23T02:09:50.913Z</updated>
    
    <content type="html"><![CDATA[<p>객체지향 자바스크립트의 원리</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 비제이퍼블릭<br>저자 : 니콜라스 C. 자카스<br>역자 : 김태곤<br>출간 : 2015.03.26<br>페이지 : 131<br>ISBN : 9788994774923<br>가격 : 16,500 원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=8819616" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=8819616</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>정확히 말하자면 객체에 집중적으로 파고들고 학습하는 책은 아니다.</p><p>사실 그런 면을 기대하고 본 책이지만 그렇지 못해 실망한 부분도 없지 않아 있었다.</p><p>제목과는 다르게 책은 <code>일반적인 JS 서적과 비슷한 흐름</code>으로 이어지지만</p><p>객체 입장에서 먼저 생각하는 내용이 많다.</p><p>또한 객체를 깨우치기보다는 자바스크립트로 객체를 어떻게 다루는지에 대해<br>ES5로 잘풀어내는 책이다.</p><h2 id="얇지만-강력한"><a href="#얇지만-강력한" class="headerlink" title="얇지만 강력한"></a>얇지만 강력한</h2><p>이 책을 선택한데에는 이유는 여러가지가 있었다.</p><ol><li>니콜라스 자카스</li><li>김태곤님</li><li>얇다</li></ol><p>한참 공부가 잘안되고 집중이 안될때 공부는 해야겠고 결국 슬림한 분량으로 내 마음을 사로잡았다.</p><p>하지만 내용은 그렇게 얇지 않다.<br>군더더기 없는 내용과 핵심만 설명하며 ES5를 충분히 활용한다.</p><p>이 책을 처음 본 독자는 이렇게 얇은 책에 이런 많은 내용을?! 생각하게 될 것이다.</p><p>당연히 김태곤님의 번역은 안심을 하고 보게된다.</p><p>항상 좋은 책을 번역해주시는 것에 감사함을 느끼는!!</p><h2 id="깊이의-아쉬움"><a href="#깊이의-아쉬움" class="headerlink" title="깊이의 아쉬움"></a>깊이의 아쉬움</h2><p>충분한 설명 좋은 예제 좋은 두께를 보이는 책이다.</p><p>입문이 아닌 기초 서적이라고 봐도 무방할 것 같은 이 책은 제목 그대로 객체를 주로 다루긴 하지만</p><p>실제로는 JavaScript의 기초와 기본을 넘나들며 간결하게 설명하고 풀이해준다.</p><p>하지만 이 책만을 가지고 JavaScript의 객체를 굉장히 심도깊게 연구하며 습득하기에는 부족함이 많은 편이다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><blockquote><p>보고 또 보고 싶을정도로 얇고 가볍지만 강력한 책으로 JavaScript를<br>어느정도 습득한 초보 개발자들에게 한단계 올라갈 수 있는 디딤돌 같은 책이라고 할 수 있을 것 같다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;객체지향 자바스크립트의 원리&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/book/programming/javascript/"/>
    
    
      <category term="객체지향 자바스크립트의 원리" scheme="https://devjang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%9B%90%EB%A6%AC/"/>
    
      <category term="객체지향 자바스크립트" scheme="https://devjang.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"/>
    
      <category term="자바스크립트 oop" scheme="https://devjang.github.io/tags/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-oop/"/>
    
  </entry>
  
  <entry>
    <title>(번역) 멋진 ES6 - var, let 그리고 const를 깊이 살펴보다</title>
    <link href="https://devjang.github.io/2018/11/25/2018-11-25-var-let-and-const/"/>
    <id>https://devjang.github.io/2018/11/25/2018-11-25-var-let-and-const/</id>
    <published>2018-11-24T15:00:00.000Z</published>
    <updated>2018-12-02T15:44:07.556Z</updated>
    
    <content type="html"><![CDATA[<p>이 글에서 ES6의 몇 가지 멋진 것들에 대해 탐구할 것입니다.<br>(고전적인 <code>var</code>에 상반된 <code>let</code>, <code>const</code>에 대해)</p><p>시작합시다!</p><a id="more"></a><hr><blockquote><p>JavaScript 변수는 데이터의 값을 저장하는 컨테이너(그릇, 용기)입니다.</p></blockquote><p>일반적으로 JavaScript에서 새로운 변수를 어떻게 만들까요?<br>좋아요. 저는 이 질문이 바보 같은 질문이라는 걸 압니다. (우리는 모두 “<strong>var</strong>“ 를 사용합니다)</p><h1 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstVar; <span class="comment">// firstVar 의 기본값을 선언하세요 - undefined</span></span><br><span class="line"><span class="keyword">var</span> secondVar = <span class="number">2</span>; <span class="comment">// secondVar 변수를 선언하고 2를 할당하세요.</span></span><br></pre></td></tr></table></figure><p>누군가를 위해 설명하자면 <code>var</code>는 영어로 “변수”를 의미합니다 (확실히 😆).</p><p>많은 현대 언어와 마찬가지로 JavaScript는 유연함을 제공하므로 변수를 선언할 때 특정 타입을 결정할 필요가 없습니다.</p><p>정수형? 문자열? 객체? 함수? … — <em>모두 var 하나면 딱</em></p><p>다음과 같은 상황을 만나기 전까지는 어렵지 않습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> increment = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (increment === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> increment; <span class="comment">// 기본값을 사용하여 increment를 다시 선언합니다.</span></span><br><span class="line">  <span class="comment">// 무엇이든 해보세요.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(increment); <span class="comment">// 무엇이 출력될까요?</span></span><br></pre></td></tr></table></figure><p>도대체 무슨 일이 벌어지고 있는 걸까요? 우선 <strong>호이스팅</strong>에 대해 언급할 필요가 있습니다.</p><h1 id="호이스팅-면밀하게-관찰하기"><a href="#호이스팅-면밀하게-관찰하기" class="headerlink" title="호이스팅 면밀하게 관찰하기"></a>호이스팅 면밀하게 관찰하기</h1><blockquote><p>호이스팅은 <strong>모든 변수 및 함수 선언</strong>을 코드가 작성된 위치와 관계없이 <strong>실행 컨텍스트</strong>의 컴파일 단계 중에 먼저 <strong>메모리에 저장되는 JavaScript의 기본 동작</strong>을 말합니다.</p></blockquote><p>좀 더 일반적으로 설명하자면 <em><strong>모든</strong></em> 선언을 현재 스코프의 <em><strong>맨 위</strong></em> 로 이동시키는 JavaScript의 동작입니다. (<strong>물리적인</strong> 코드 변경은 전혀 없으며) 다른 모든 작업보다 먼저 처리됩니다.</p><p>위의 예제를 살펴보면 컴파일 단계에서 코드는 다음과 같이 <strong>이해</strong>할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> increment;</span><br><span class="line"><span class="keyword">var</span> increment;</span><br><span class="line">increment = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (increment === <span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(increment); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>또 다른 예제:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumOf(x, y));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOf</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>다음과 같이 처리됩니다:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">var</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOf</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumOf(x,y));</span><br></pre></td></tr></table></figure><p><strong>주의사항</strong><br>JavaScript의 호이스팅은 <strong>선언이 <em>아닌</em> 할당에만 적용됩니다.</strong><br>모든 값 할당은 코드에 작성 또는 위치하는 곳과 같은 위치에서 처리며 다음 결과를 얻습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); </span><br><span class="line">x = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><p><code>1, 3</code> 출력을 예상할 수 있지만 출력 결과는 <code>undefined, 1</code> 입니다.</p><p>또한 위에서 언급한 실행 컨텍스트는 <em>(JavaScript 문서에 따르면)</em> <strong>선언된 <code>var</code> 변수의 스코프</strong>입니다.<br>그렇다면 <code>var</code> 변수 선언 &amp; 할당에 어떤 영향을 미칠까요?</p><h1 id="실행-컨텍스트는-무엇일까요"><a href="#실행-컨텍스트는-무엇일까요" class="headerlink" title="실행 컨텍스트는 무엇일까요?"></a>실행 컨텍스트는 무엇일까요?</h1><p>실행 컨텍스트는 <strong>Javascript 코드가 실행 / 평가되는 환경</strong>입니다. 다음 중 하나가 될 수 있습니다.</p><ul><li>전역 — 기본 환경</li><li>함수 — 함수 내부 환경</li><li>Eval — <code>eval</code> 함수 내부 환경</li></ul><p>따라서 여기서 <code>var</code> 변수의 스코프는 함수 내부 또는 전역 컨텍스트에 있습니다.</p><p><strong>다른 모든 블록 컨텍스트</strong> - {} 중괄호, 문, 표현식 등의 내부 코드 블록을 의미합니다…<br>-<strong>위에서 정의한 3가지 유형이 아닌 경우</strong> 언급된 변수의 스코프에는 영향을 미치지 않습니다.</p><p>결과적으로 코드 문 블록, 표현식 <em>(if…else … 문, 반복문 등)</em> 에서 변수를 선언하는 것은 컴파일러 / 작성 단계의 맨 위에 선언하는 것으로 이해할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x); </span><br><span class="line">  <span class="comment">// while 문 내부에 x가 선언되어 있음에도 불구하고 2 가 출력됩니다</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이게 바로 <code>var</code>입니다.<br>보시다시피 이 var 문은 개발자에게 필요한 모든 유연성을 제공합니다 <em>(하지만 남용해서는 안 됩니다!).</em></p><p>그렇다면 왜 ES6에서는 두 개의 문(<code>let</code> 과 <code>const</code>)을 더 도입하려고 애쓸까요?<br>자 이제 알아봅시다.</p><h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><p><code>var</code>와 유사하게 변수를 선언하고 값을 할당할 수 있습니다(선택적으로).<br>그러나 var와 <strong>달리</strong> 변수 선언이 <strong>블록 스코프 내부의</strong> 값으로만 선언됩니다.</p><p>이것은 변수가 <code>표현식 또는 문, 블록 ({}) 내부에서만</code> 선언되고 <code>존재하도록 제한</code>되며 일반적인 실행 컨텍스트 외에 하위 블록에서도 사용할 수 있음을 의미합니다. (둘러싸인 함수 등)</p><p>따라서 위 예제의<br><code>x</code>는 대부분의 언어와 마찬가지로 <code>while</code> 블록 스코프 내에서 제한되지 않지만 <code>var</code>를 <code>let</code>로 바꾸면 결과가 변경됩니다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testMe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">//ReferenceError: x는 정의되지 않았습니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>네. undefined가 아닌 null이 아닌 2가 아닌 대신 <code>ReferenceError</code>입니다.</p><p>이렇게 하면 <em>변수의 지역성</em> 이 보장되므로 이전에 같은 이름으로 선언된 변수를 실수로 변경하지 않으므로 안심할 수 있습니다.</p><p>이 상황에서와 같이 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 여전히 1</span></span><br></pre></td></tr></table></figure><p><em>Yippie (hippie와 New Left의 중간을 자처하는 미국의 젊은이), 🐛가 숨겨질 기회가 줄어듭니다!</em></p><p>잠깐! 더 있습니다. 블록 스코프로 제한되기 때문에 마침내 <em>클로저의 도움</em> <strong>없이</strong> private 멤버를 구현할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name;</span><br><span class="line">  Person = <span class="function"><span class="keyword">function</span>(<span class="params">_name</span>)</span>&#123; </span><br><span class="line">      name = _name;</span><br><span class="line">  &#125;;</span><br><span class="line">  Person.prototype.getName = <span class="function"><span class="params">()</span> =&gt;</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Maya'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 아무것도 출력되지 않습니다</span></span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// Maya</span></span><br></pre></td></tr></table></figure><p><code>var</code>와 다른 중요한 차이점은 <strong>변수 호이스팅이</strong> <code>let</code><strong>에는 적용되지 않는다</strong>는 점입니다.<br>즉 컴파일 단계에서 <code>let</code> 선언은 <strong>현재 위치에 그대로 유지</strong>되고 다른 코드에서 먼저 처리되지 <strong>않습니다</strong>.<br>(일명 <code>var</code>처럼 컨텍스트의 맨 위로 이동하지 않습니다.)</p><p>따라서 이 예제를 실행할 때<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span>;</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y; </span><br><span class="line"><span class="keyword">var</span> x;</span><br></pre></td></tr></table></figure></p><p><code>y</code>에 ReferenceError를 다시 나타내지만 <code>x</code>에는 그렇지 않습니다.</p><p>마지막으로 <code>let</code>을 전역 컨텍스트에서 사용할 때 <code>var</code>와는 달리 <strong>전역 객체 대한 프로퍼티를 생성하지 않습니다.</strong><br>우연이라도 전역 객체를 <strong>어지럽히지 않습니다</strong>!!! 🚀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.y); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.y); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>var와 달리 <strong><code>let</code> 변수를 다시 선언하면 SyntaxError가 발생합니다.</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*T6GieUKgH7ew68zuEvw26Q.png" alt=""><br>x에 대한 SyntaxError</p><p>따라서 <code>let</code>를 사용할 때 <code>var</code> 선언의 일반적인 방법보다 <strong>더 많은 제한 / 한계</strong>(더 좋게 말하면)가 있을 것입니다. <code>const</code>는 어떨까요?</p><h1 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h1><p>예를 들어 템플릿, 기본 메시지 등과 같은 데이터 변수가 있습니다.<br>(상수로 사용하기 위함) <em>JavaScript를 사용하여 애플리케이션 전체에서 이러한 데이터가 변경되지 않도록 하려면 어떻게 해야 할까요?</em></p><p>ES6 이전 한 가지 방법 - <strong>작성하는 것에 주의하세요</strong><br>(또는 다른 개발자가 상수에 사용하는 네이밍 컨벤션을 알아채고 이해하도록 기도하라).</p><p>ES6 이후 (하나님 감사합니다) 우리는 const를 가집니다.</p><p><code>const</code> - <code>let</code>과 동일하게 <code>지역 블록 스코프 변수</code>를 선언하고 초기화할 수 있습니다.<br>따라서 <code>let</code>에는 다음과 같은 모든 제한이 있습니다:</p><ul><li><p>선언된 변수는 일반적인 실행 컨텍스트 외에 <strong>표현식, 문 코드의 {} 블록 내부에서만 사용할 수 있습니다.</strong></p></li><li><p>const에 <strong>호이스팅이 적용되지 않습니다.</strong></p></li><li><p>전역 컨텍스트에서 사용될 때 <strong>전역 객체에 프로퍼티가 생성되지 않습니다.</strong></p></li><li><p>선언된 변수를 <strong>다시 선언할 수 없습니다.</strong></p></li></ul><p>또한 누구나 추측할 수 있듯이 <code>const</code>는 상수를 뜻합니다:</p><ul><li>선언된 변수는 값으로 <strong>초기화해야 합니다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myConstants; <span class="comment">// SyntaxError: const 선언에 초기화 누락</span></span><br></pre></td></tr></table></figure><ul><li>선언된 변수는 <strong>한 번의</strong> 값으로<strong>만</strong> 할당할 수 있습니다. <strong>재할당 없음</strong>(상수 값에 대한)</li></ul><p>하지만 한 가지 <code>단점</code>은 <strong>할당된 값 자체가 객체</strong>(객체, 배열 등)의 <strong>형태</strong>일 경우에도 여전히 <strong>수정할 수 있다</strong>는 것입니다.</p><p>예:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myConstant = &#123;<span class="attr">name</span>: <span class="string">"Constant"</span>&#125;;</span><br><span class="line">myConstant = &#123;<span class="attr">name</span>: <span class="string">"new Constant"</span>&#125;; <span class="comment">// 오류</span></span><br><span class="line">myConstant.name = <span class="string">"new Constant"</span>; <span class="comment">// 좋아요</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myConstant.name); <span class="comment">// 새로운 상수</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr = [<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 오류</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">2</span>; <span class="comment">// 좋아요</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[2,2]</span></span><br></pre></td></tr></table></figure></p><p>확실하고 이해하기 쉽지 않습니까?</p><p>일반적으로 이 새로운 문이 가져다주는 장점을 알아차렸을 것입니다.<br>그러니 요약해 봅시다.</p><h1 id="let-그리고-const의-장점"><a href="#let-그리고-const의-장점" class="headerlink" title="let 그리고 const의 장점"></a>let 그리고 const의 장점</h1><ul><li><p><strong>오염 방지</strong> - 불필요한 프로퍼티를 지닌 전역 객체</p></li><li><p><strong>숨겨진 🐛 피하기</strong> - 실수로 상수 값을 수정하거나 서로 다른 범위 블록에 있지만 동일한 이름으로 선언된 잘못된 변수를 업데이트 등</p></li><li><p><strong>불필요한</strong> 호이스팅 <strong>피하기</strong></p></li><li><p><strong>더 많은 제한을 추가</strong>하여 보다 안정적이고 체계적이며 읽기 쉬운 코드<br>(<code>var</code>로 선언된 변수가 const가 되어야 할 경우를 알 수 있습니까??).</p></li></ul><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>실제로 <code>let</code>과 <code>const</code>가 <code>var</code>에 비해 얼마나 많은 장점을 가지고 <code>var</code>를 <strong>대체하기 위한 것이 아니라</strong> <strong>더 많은 강제</strong> 사항을 JavaScript에 제공하고 개발자의 코드 리뷰와 읽기에 드는 시간을 절약하는 데 도움이 됩니다.</p><p>기억하세요 - 저의 조언은 항상 그렇듯이 <strong>먼저 필요한 것을 분석한 다음 작은 변수조차도 적절한 선언문을 선택</strong>하라는 것입니다.<br><em>많은 작고 하찮은 것들에 대해 처음부터 주의를 기울이지 않는다면 언젠가는 커다랗고 무서운 악몽으로 이어질 수 있습니다.</em></p><p><em>결국 깨끗하고 안전한 코드를 작성하는 것을 좋아하지 않는 사람이 있을까요?</em> 😃</p><hr><p>이 아티클(<a href="https://medium.com/front-end-hacking/es6-cool-stuffs-var-let-and-const-in-depth-24512e593268" target="_blank" rel="noopener">ES6 cool stuffs —var, let and const in depth</a>)은 원작자 <a href="https://twitter.com/MayaShavin" target="_blank" rel="noopener">MayaShavin</a>의 동의를 얻어 번역되었습니다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 글에서 ES6의 몇 가지 멋진 것들에 대해 탐구할 것입니다.&lt;br&gt;(고전적인 &lt;code&gt;var&lt;/code&gt;에 상반된 &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;에 대해)&lt;/p&gt;
&lt;p&gt;시작합시다!&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="https://devjang.github.io/categories/programming/"/>
    
      <category term="javascript" scheme="https://devjang.github.io/categories/programming/javascript/"/>
    
    
      <category term="번역" scheme="https://devjang.github.io/tags/%EB%B2%88%EC%97%AD/"/>
    
      <category term="es6" scheme="https://devjang.github.io/tags/es6/"/>
    
      <category term="var" scheme="https://devjang.github.io/tags/var/"/>
    
      <category term="let" scheme="https://devjang.github.io/tags/let/"/>
    
      <category term="const" scheme="https://devjang.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>신입 프론트엔드 개발자들의 구직을 위한 소소한 팁</title>
    <link href="https://devjang.github.io/2018/11/11/2018-11-11-new-fed-begginer-tip/"/>
    <id>https://devjang.github.io/2018/11/11/2018-11-11-new-fed-begginer-tip/</id>
    <published>2018-11-10T15:00:00.000Z</published>
    <updated>2018-12-02T15:05:10.368Z</updated>
    
    <content type="html"><![CDATA[<p>(우아한형제들과는 관계가 없습니다)</p><p>프론트엔드 개발자로 취업하려면 어떻게 해야 할까?<br>그때는 어떤 때일까, 프론트엔드 꿈나무들의 고통과 외침</p><a id="more"></a><hr><p>언제부터인지 다양한 루트로 신입 프론트엔드 구직에 대한 질문을 받고 있습니다.</p><p>질문을 받고 멘토링을 하며 느낀 점은 <code>제가(현재 2년차를 마무리하고 있는 부족한 실력의 주니어 개발자인 시점)</code><br>과연 이런 질문을 받아도 될까? 였지만<br>결국 그로부터 한 달에 한 분 정도 구직에 대한 멘토링을 하고 있습니다.</p><p>루트는 다양하지만 질문을 주는 그들의 꿈과 희망은 일치했었습니다.<br>(물론 눈에 보이는 것이 전부는 아닙니다. <strong>즉: 꿈과 희망은 일치하지만 욕망이 다른 경우도 있습니다.</strong>)</p><p>부족했던 제가 취직했던 과정과 변해가는 프론트엔드 구직 시장 그리고 멘토링을 하며 느꼈던 모든 것을 종합해보며<br>신입 프론트엔드 구직을 하고자 하는 구직자분들에게 조금이나마 보탬이 되고자 이렇게 아티클을 작성합니다.</p><h1 id="자아성찰하기"><a href="#자아성찰하기" class="headerlink" title="자아성찰하기"></a>자아성찰하기</h1><p>프론트엔드 개발자가 되고 싶은 사람들은 다양합니다.</p><p>하지만 <strong>하나의 타겟에 다양한 지원군을</strong> 포함하고 있습니다.</p><ul><li>SI 주니어 백엔드 개발자</li><li>경력 퍼블리셔 (가장 많은 분포도)</li><li>디자이너</li><li>대학생</li></ul><p>이 밖에도 더 많은 케이스가 존재하지만 대부분은 위와 같은 케이스입니다.</p><p><img src="https://frontendmasters.com/books/front-end-handbook/2018/images/what-is-front-end-dev.png" alt=""></p><p><strong>하지만 대부분 프론트엔드 개발자를 모르거나 구체적으로 알고 있지 못합니다.</strong></p><ul><li>리액트나 뷰하면 프론트엔드 개발자 아닌가요…?</li><li>HTML + CSS에서 JavaScript 좀 잘하면 되는 거 아닌가요…?</li></ul><p>어쩌면 위와 같은 말도 달리 생각해보면 완전히 틀린 말은 아닙니다.<br>하지만 더 많은 것을 알고 있어야만 프론트엔드 개발자가 될 수 있습니다.</p><p><strong>결국 프론트엔드 개발자가 되고 싶다면 질문을 해야 합니다(자기 자신에게)</strong></p><ol><li>왜 프론트엔드 개발자가 되고 싶은 건지</li><li>프론트엔드 개발자는 무엇이고 어떤 일을 하는 건지</li></ol><p><strong>자격요건과 우대사항으로 자아성찰하기</strong></p><ul><li>원티드 신입 FE 채용 필터링: <a href="https://www.wanted.co.kr/wdlist/518/669?years=0" target="_blank" rel="noopener">https://www.wanted.co.kr/wdlist/518/669?years=0</a></li></ul><p>위의 링크를 보며 자격 요건보다 부족한 점이 있다면 현실적으로 파악한 후 리스트 업하여 스터디 플랜을 만들어야합니다.</p><blockquote><p>결국은 자신의 상태를 그 누구보다 잘 알고 진단하느냐가 중요합니다.</p></blockquote><hr><h1 id="좋은-회사의-기준"><a href="#좋은-회사의-기준" class="headerlink" title="좋은 회사의 기준"></a>좋은 회사의 기준</h1><p>좋은 회사의 기준은 <code>절대적일 수도 있지만 상대적일 수도</code> 있는 부분입니다.</p><ul><li>워라밸</li><li>연봉</li><li>사용할 수 있는 스킬 및 회사에서 지향하는 개발</li><li>사람</li><li>복지</li><li>회사에서의 나의 존재감</li><li>자유도</li></ul><p>다양한 가치관과 조건이 존재하기 때문입니다</p><p><img src="http://img.hani.co.kr/imgdb/resize/2016/0801/00500779_20160801.JPG" alt=""></p><p><strong>하지만 안타깝게도 구직자의 수준에 따라 갈리는 경우도 있습니다.</strong></p><p>가령 예를 들어 설명해보겠습니다</p><p><code>A</code>라는 회사를 두고<br><code>1번 구직자:</code> 내 실력에 <code>A</code> 회사 정도면 <strong>최고의</strong> 회사야! 라고 생각할 수 있겠지만<br><code>2번 구직자:</code> 아.. 내 실력에 <code>A</code> 회사는 너무 <strong>하향 지원</strong>인데 조금 더 공부하면서 구직을 노려보자</p><p>사실 위와 같은 상황은 <strong>경력자에게도 마찬가지</strong>입니다.</p><p>좋은 회사를 추천해달라는 질문을 많이 받고는 하는데 그전에 본인의 역량을 파악해야 합니다.</p><p><strong>자격요건</strong>은 되어야 이력서를 넣을 수 있고<br><strong>우대사항</strong>이 되어야 면접을 보러 갈 수는 있겠구나 생각하는 것도 적당합니다.</p><blockquote><p>이를 판단하는 방법은 일단 이력서를 넣고 실패해보며 피드백을 받는 것이 가장 확실하고 빠른 방법입니다.</p></blockquote><hr><h1 id="디테일의-중요성"><a href="#디테일의-중요성" class="headerlink" title="디테일의 중요성"></a>디테일의 중요성</h1><p><img src="http://4.bp.blogspot.com/-lcSEmZYjRxU/W-e9MoYwckI/AAAAAAAADaA/9bd2ru-Gv0cqJho7eHJ_BeKJNGSHwfBjQCK4BGAYYCw/s1600/quick.png" alt=""><br><del>빠른 입사 지원</del>은 지양합시다</p><p>기본적인 CS나 알고리즘 테스트를 통한 실력을 중점으로 하는 입사 프로세스로 지원하는 경우가 아닐 때는<br>이력서에 많은 시간을 할애할 것입니다.</p><p>이때 가장 주의해야 할 점과 알아두면 좋은 점은 결국 <code>버릴 건 버리는 심플함</code>과 <code>센스 있는 디테일</code>입니다.</p><h3 id="심플함"><a href="#심플함" class="headerlink" title="심플함"></a>심플함</h3><ol><li><strong>불필요한 자격증은 기입하지 않기</strong><ul><li>운전면허를 넣는 경우도 봤습니다.</li></ul></li><li><strong>TMI(Too Much Information) &amp; TMT(Too Much Talker) 버리기</strong><ul><li>너무 많은 내용은 담지 않는 것이 좋습니다.</li><li>관계없는 내용은 더더욱 담지 않는 것이 좋습니다.</li></ul></li><li><strong>문단 정리하기</strong><ul><li>타이틀, 서브타이틀, 컨텐츠 등으로 문단을 정확히 나눕니다.</li><li>강조할 건 강조합니다. (예: <strong>강조</strong>, <code>강조</code>, <em>강조</em>, <u>강조</u>)</li></ul></li></ol><p><img src="https://thumbnews.nateimg.co.kr/view610///onimg.nate.com/orgImg/sc/2016/10/24/2016102401002084500150921.jpg" alt=""></p><h3 id="디테일"><a href="#디테일" class="headerlink" title="디테일"></a>디테일</h3><ol><li><strong>HWP…DOC…PPT…가 아닌 PDF</strong><ul><li>PDF는 첨부가 아닌 클라우드를 활용한 링크 공유를 합시다 (단축 URL은 센스)</li></ul></li><li><strong>누구든 어디서나 몰래 볼 수 있는 정적 페이지 만들기</strong><ul><li>핸드폰으로 이력서를 읽는 인사 담당자분도 봤습니다.</li><li><code>깃헙 페이지</code>나 파이어베이스를 사용하셔도 좋습니다.</li><li>이미 만들어진 <code>html resume template</code>를 활용해도 좋습니다.</li></ul></li><li><strong>회사 이름이라도 넣자</strong><ul><li>이력서 or 자기소개서에 회사에 관한 내용이나 연관성이 전혀 없다면 실력이 충분하더라도 감점 요소입니다.</li><li>이력서 양식에 지원 회사 시그니처 컬러 or 지원 회사의 시그니처 폰트를 적용하는 센스</li></ul></li></ol><hr><h1 id="전략-세우기"><a href="#전략-세우기" class="headerlink" title="전략 세우기"></a>전략 세우기</h1><p><strong>“적을 알고 나를 알면 백 번을 싸워도 위험하지 않다”</strong> 손자병법의 한 구절</p><p>말 그대로 취업은 나를 알고 회사를 알아가는 과정입니다.</p><p>이미 준비된 실력이라면 당장 쟁쟁한 회사의 테스트를 뚫고 합격할 수 있겠지만<br>아쉽게도 신입 개발자들을 위한 자리보다는 높은 연차의 개발자들을 원하는 곳이 대부분…</p><p>다른 포지션의 개발자 또한 마찬가지겠지만 FE 직군의 경우 더욱 양극화되어있으며<br>국비지원 수강생과 기타 유료 학원 수강생들을 포함하면 분기별로 최소 100명 이상의 신입 FE 취준생이 쏟아질 것으로 예상됩니다.<br><code>(개인적인 추측)</code></p><p>당연히 뛰어난 실력을 갖춰야 이런 경쟁 속에서 수월해지겠지만 더 유연하게 대처할 필요가 있습니다.<br>그나마 신입 구직자일때 개발 실력외에 다른 강점을 보여줄 수 있기때문이죠.</p><h3 id="탑-다운-다운-탑"><a href="#탑-다운-다운-탑" class="headerlink" title="탑 - 다운 ? 다운 - 탑?"></a>탑 - 다운 ? 다운 - 탑?</h3><p><img src="https://4.bp.blogspot.com/-8BJPLKwqJ_o/W-gXTnVvULI/AAAAAAAADaM/dufFIZGBewQFvuC3afKgYZ4MJ92XrUs_wCK4BGAYYCw/s1600/sheet.png" alt=""></p><p>지원하고 떨어지고 반복하다 보면 자신의 수준을 자각할 수 있습니다.  </p><p>저 같은 경우는 위와 같은 시트로 구직 현황을 관리하고는 했었는데 굉장히 큰 도움이 되었습니다.<br>또한 본인이 판단하는 가치와 예상 합격률을 잘 고민하여 등급을 나눠보는 것이 좋습니다.</p><p>그렇게 나눈 등급을 통하여 <code>탑(합격률 낮음) - 다운(합격률 높음)</code> 순으로 지원하시는 것을 추천합니다.</p><h4 id="탑-다운"><a href="#탑-다운" class="headerlink" title="탑 - 다운"></a>탑 - 다운</h4><ul><li>장점<ol><li>취업이 급할 때 유리하다.</li><li>자신의 수준을 빠르게 캐치할 수 있다.</li></ol></li><li>단점<ol><li>면접을 통한 실력 향상을 누리지 못할 수 있다.</li><li>면접 및 서류 광탈로 멘탈이 터지거나 자존감이 떨어질 수 있다.</li></ol></li></ul><h4 id="다운-탑"><a href="#다운-탑" class="headerlink" title="다운 - 탑"></a>다운 - 탑</h4><ul><li>장점<ol><li>장기적인 구직 레이스에 적합하다.</li><li>당장은 취업이 어려운 회사에 차후 적합한 핏과 면접 경험을 살려 지원할 수 있다.</li></ol></li><li>단점<ol><li>공백 기간이 길어질 수 있다.</li><li>잦은 이직을 하게 될 수도 있다.</li></ol></li></ul><p>꼭 신입 구직이 아니더라도  <strong>1 ~ 2년 차와 상시 모집 정도는 지원</strong>해보는 것이 좋습니다.<br>1차 2차 3차 면접 프로세스가 길어질수록 <code>프로세스가 유효한 시점을 살려 즉각 자신에게 부족한 점을 보충</code>해야 합니다.</p><h4 id="활동량을-높인다"><a href="#활동량을-높인다" class="headerlink" title="활동량을 높인다"></a>활동량을 높인다</h4><p>다양한 <code>컨퍼런스</code> 및 <code>채용 행사</code>를 통해 회사의 정보와 얻을 수 있습니다.</p><p>운 좋은 경우는 CTO 또는 인사 담당자와 1 대 1로 Q&amp;A 시간을 가지는 경우도 있으니 다양한 활동에 참여하는 것을 권장합니다.</p><h4 id="네트워크를-이용하자"><a href="#네트워크를-이용하자" class="headerlink" title="네트워크를 이용하자"></a>네트워크를 이용하자</h4><p>다양한 스터디와 실제 친분을 통하여 적절한 정도의 정보를 얻어보는 것도 방법입니다.</p><h4 id="운-좋은-입사는-없다"><a href="#운-좋은-입사는-없다" class="headerlink" title="운 좋은 입사는 없다"></a>운 좋은 입사는 없다</h4><p>간혹 운 좋게 자신의 실력에 비해 빠르게 구직에 성공할 수 있습니다.</p><ul><li><strong>의심해 볼 수 있는 포인트</strong><ol><li>퇴사율이 높은 회사</li><li>FE에 대한 이해도가 굉장히 낮아 보이는 면접관이 대부분일 때</li><li>빨리 들어와서 빨리 좀 도와달라는 모습을 보일 때</li><li>개발 자체를 전혀 모르는 사람들이 면접관일 때</li><li>취업 시 내가 1인 개발자인 회사</li><li>정보처리기사가 우대 사항인 경우</li></ol></li></ul><blockquote><p>이 밖에도 다양한 방법과 경험을 살려 자신에게 맞는 구직 플랜과 꾸준한 학습 &amp; 프로젝트 진행을<br>게을리하지 않는다면 험난한 구직 시장에서도 굉장한 성장을 이룰 수 있습니다.</p></blockquote><hr><h1 id="면접도-공부다"><a href="#면접도-공부다" class="headerlink" title="면접도 공부다"></a>면접도 공부다</h1><p>면접은 정말 피드백이 확실한 공부 방법입니다.</p><p>간혹 마음에 드는 회사가 아니라며 서류 합격 이후 면접에 불참하는 경우가 있는데<br>그런 경우에도 필히 <code>면접에 참가하여 자신의 실력을 갈고닦는 것이 좋습니다.</code></p><p>면접을 통해 공부하는 방법은 여러 가지가 있습니다.</p><ol><li>면접 이후 필히 면접 문제를 회사별로 정리한다.</li><li>가능하다면 본인이 떨어진 이유를 <code>피드백</code> 받도록 한다. (피드백이 없다면 요청하는 것도 방법)</li><li>각종 자료를 통해 이미 정리된 면접 문제를 보는 것도 좋지만 면접 문제를 따로 정리한다.</li><li><code>면접관의 표정</code>이 안 좋을 때와 좋을 때를 기억하여 어떤 포인트에서 자신의 장점과 단점이 났는지 정리한다.</li><li>구직 중에도 뭔가 <code>꾸준히</code> 한다. (예: TIL, 알고리즘 문제 풀기, 사이드 프로젝트 등)</li><li>위와 같은 정리를 통해 나온 자신의 <code>단점을 파악하여 보완</code>하는 시간을 가진다.</li><li>다양한 면접과 구직을 통해 공부해야 하지 말아야 할 것이 보인다면 망설임 없이 그것에는 시간을 할애하지 않는다.</li><li>도움 되는 멘토를 찾아 <code>현실적인 조언</code>을 받아 그것을 실행한다.</li></ol><hr><h1 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h1><p>위와 같은 내용을 정리하자면 <code>결국 개발자 구직</code>이라는 것입니다.<br>때문에 당연하게도 CS 기본 소양과 알고리즘이 탄탄하다면 더 좋은 결과를 얻을 수 있습니다.</p><p>하지만 누군가에게는 합격을 누군가에게는 가난하고 힘든 기간이 될 수 있으니</p><ol><li>적당한 긴장</li><li>즉각적인 피드백을 통한 단점 보충</li><li>꾸준함</li><li>다양한 활동</li></ol><p>위의 세 가지를 잊지 않는다면 좋은 결과와 좋은 성장을 이룰 수 있습니다.</p><p>마지막으로 입사 지원 대비 <strong>서류 합격률이 10%도 되지 않는다면 이력서를 완전히 다시 작성하는 것도 좋습니다.</strong></p><blockquote><p>요즘 뛰어난 신입 개발자분들과 학생 개발자분들 보며 굉장한 자극과 영감을 받고는 합니다.<br>하지만 이와 다르게 상대적으로 실력이 부족한 구직자분들에게는 구직 기간이 스트레스가 될 수 있습니다.<br>그럴 때일수록 오히려 <code>구직 과정을 역이용</code>해 스트레스가 아닌 성장을 하는 계기를 가졌으면 좋겠습니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(우아한형제들과는 관계가 없습니다)&lt;/p&gt;
&lt;p&gt;프론트엔드 개발자로 취업하려면 어떻게 해야 할까?&lt;br&gt;그때는 어떤 때일까, 프론트엔드 꿈나무들의 고통과 외침&lt;/p&gt;
    
    </summary>
    
      <category term="column" scheme="https://devjang.github.io/categories/column/"/>
    
    
      <category term="신입 프론트엔드" scheme="https://devjang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/"/>
    
      <category term="신입 개발자" scheme="https://devjang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
      <category term="신입 프론트엔드 개발자" scheme="https://devjang.github.io/tags/%EC%8B%A0%EC%9E%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>VS 코드 콘솔에서 TypeScript 실행하기</title>
    <link href="https://devjang.github.io/2018/04/29/2018-04-29-run-simple-ts/"/>
    <id>https://devjang.github.io/2018/04/29/2018-04-29-run-simple-ts/</id>
    <published>2018-04-28T15:00:00.000Z</published>
    <updated>2018-08-13T11:26:44.869Z</updated>
    
    <content type="html"><![CDATA[<p>타입스크립트 개발 환경없이 작성하기</p><a id="more"></a><hr><p>타입스크립트를 작성하다 보면 간단히 콘솔로 코드를 찍어보고 싶을 때도 있고 컴파일 없이 작업하고 싶은데 그렇지 못해 답답할 때가 있습니다</p><p>자바스크립트는 개발자 도구에서 간편하게 작성해볼 수 있으니 접근성이 이 엄청나기 때문에 비교가 될 수 있죠.</p><p>이러한 부분 때문에 포기하시는 분들을 위한 자료를 준비했습니다.</p><h1 id="Front-end-Playground-활용하기"><a href="#Front-end-Playground-활용하기" class="headerlink" title="Front-end Playground 활용하기"></a>Front-end Playground 활용하기</h1><p>기본 설정으로 타입스크립트를 제공하는 웹서비스를 이용할 수 있습니다.</p><h2 id="CodePen"><a href="#CodePen" class="headerlink" title="CodePen"></a><a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a></h2><p><img src="https://1.bp.blogspot.com/-h-85nGQvZ4E/WuVyg7Te0PI/AAAAAAAADRo/wVtqatYQ00Y3aUgvvpS3MpWgfw06xE9DwCK4BGAYYCw/s640/CodePen.png" alt=""></p><p>설정 &gt; JavaScript Preprocessor &gt; TypeScript</p><p><img src="http://4.bp.blogspot.com/-6RWLp4ZxyvQ/WuVyuPo4LoI/AAAAAAAADSI/gYStwhmccxcRehuQL8ox1fKG5SinINRAQCK4BGAYYCw/s640/CodePen%2B%25282%2529.png" alt=""></p><p>너무나 유명한 서비스인만큼 이미 되어있는 템플릿으로 간단히 사용 가능합니다.</p><hr><h2 id="JS-Bin"><a href="#JS-Bin" class="headerlink" title="JS Bin"></a><a href="https://jsbin.com" target="_blank" rel="noopener">JS Bin</a></h2><p><img src="http://2.bp.blogspot.com/-9qhJDMR09rY/WuVzdMXeuwI/AAAAAAAADSc/VIyr2GDe8GUdf3Z3-wybBSDM7344mTTkgCK4BGAYYCw/s640/JS%2BBin.png" alt=""></p><p>JavaScript 탭 선택 &gt; JavaScrip 클릭 &gt; TypeScript 선택</p><p><img src="http://4.bp.blogspot.com/-wX3DK-7fCGY/WuVzdDzEJKI/AAAAAAAADSg/Qga1joLrt38VoiLlfFkoTU3oNBBLlOjCACK4BGAYYCw/s640/JS%2BBin%2B%25282%2529.png" alt=""></p><p>마찬가지로 몇번의 클릭만으로 사용가능합니다.</p><hr><h2 id="JSFiddle"><a href="#JSFiddle" class="headerlink" title="JSFiddle"></a><a href="https://jsfiddle.net" target="_blank" rel="noopener">JSFiddle</a></h2><p><img src="http://2.bp.blogspot.com/-2q3O1zE3VKA/WuV0APcK6RI/AAAAAAAADS4/N3oNrAhnS_glQmUMMXFm7bfjJ-wI4qaKgCK4BGAYYCw/s640/JSFiddle.png" alt=""></p><p>JavaScript 클릭 &gt; TypeScript 선택</p><p><img src="http://1.bp.blogspot.com/--MdTnteqe3I/WuV0AMoR_OI/AAAAAAAADS0/xDARUbc07cIdBZNnh1p2k7gcR8UGpNCEACK4BGAYYCw/s640/JSFiddle%2B%25282%2529.png" alt=""></p><p>마찬가지로 몇번의 클릭만으로 사용가능합니다.</p><hr><h2 id="TypeScript-Playground"><a href="#TypeScript-Playground" class="headerlink" title="TypeScript Playground"></a><a href="https://www.typescriptlang.org/play/index.html" target="_blank" rel="noopener">TypeScript Playground</a></h2><p><img src="http://4.bp.blogspot.com/-zbbfPCyvN_c/WuV8AQkjoBI/AAAAAAAADUM/Mm_zuctkxNcn7OGXAOFjdJNW7lqKVRhOQCK4BGAYYCw/s640/Playground.png" alt=""></p><p><code>별도의 설정과 도구없이 JS코드로 바로 컴파일 되어 비교</code>할 수 있기 때문에 학습에는 가장 좋다고 생각이 듭니다.</p><p>타입스크립트의 코드가 자바스크립트의 어떤 코드로 변환되는지 항상 볼 수 있기에 흥미로우며 <strong><code>Run</code></strong> 버튼을 활용하여 <code>브라우저에서 실행</code>해볼 수 있습니다.</p><blockquote><p>VS 코드가 내장되어 VS 코드에 익숙한 사용자분들은 IntelliSense와 단축키를 그대로 사용할 수 있습니다.</p></blockquote><hr><h2 id="CodeSandbox"><a href="#CodeSandbox" class="headerlink" title="CodeSandbox"></a><a href="https://codesandbox.io" target="_blank" rel="noopener">CodeSandbox</a></h2><p><img src="http://2.bp.blogspot.com/-H-unRpsqD4g/WuV0XMi2w6I/AAAAAAAADTQ/TcJ7mVbcBRoOKIBh3RlbGc-wAUiEMc7LACK4BGAYYCw/s640/CodeSandbox.png" alt=""></p><p>Create Sandbox 클릭 &gt; New Sandbox &gt; <code>Vanilla</code> 선택 </p><p><img src="http://1.bp.blogspot.com/-0M990pdbRsI/WuV0XE4xepI/AAAAAAAADTM/QaqtaMvPwPEuJ2wAZP4d8xy7AnhijsUXgCK4BGAYYCw/s640/CodeSandbox%2B%25282%2529.png" alt=""></p><p>기본적인 Parcel 번들러 프로젝트가 생성됩니다 &gt; <code>Add Dependency</code> 클릭</p><p><img src="http://1.bp.blogspot.com/-wtpHRxG0az4/WuV6immz97I/AAAAAAAADTs/qaT0MrA-tRUbFfYGe5e8GKfQIYRuj4jqACK4BGAYYCw/s640/CodeSandbox%2B%25283%2529.png" alt=""></p><p>TypeScript 검색 &gt; 검색된 TypeScript 설치</p><p><img src="http://2.bp.blogspot.com/-GAOFp_cyru0/WuV6itDsyBI/AAAAAAAADTo/Ed1DIkIe6MMF3LA51nRjp_3XkGR8jGhdACK4BGAYYCw/s640/CodeSandbox%2B%25284%2529.png" alt=""></p><p>index<code>.js</code>를 <code>.ts</code>로 변경 <strong>(index.html내에 삽입된 스크립트도 마찬가지)</strong></p><p><img src="http://4.bp.blogspot.com/-0ahE1epEngg/WuV7YukqtWI/AAAAAAAADUA/ml7Uxff98wAZX3f41L5v7iAMZSYOoIBvQCK4BGAYYCw/s640/CodeSandbox%2B%25286%2529.png" alt=""></p><p>설정이 완료된 후 바로 TS 코드를 작성할 수 있습니다</p><p><img src="http://1.bp.blogspot.com/-FC8Vy9GHgSE/WuV7YiMjZQI/AAAAAAAADT8/QgHdxjqY7Y4E3RgAyV8JN4A-TEp_-LUxQCK4BGAYYCw/s640/CodeSandbox%2B%25285%2529.png" alt=""></p><p>VS code의 <code>IntelliSense</code></p><p>간단한 플레이그라운드 그 이상으로 다양한 기능을 지원합니다.</p><p>또한 위에 이미 설명한 서비스들 보다 간편하지는 못하고 <code>무겁다</code>는 단점이 있지만</p><p><code>Github 연동, 로컬 파일 연동, Live(유료), npm 가능, 번들러 및 실제 파일 관리 가능</code> 엄청난 확장성이 존재합니다.</p><p>한마디로 모듈화 및 파일을 나누고 싶을때 온라인에서 간단히 사용할 수 있습니다<br>(이럴 거면 그냥 로컬이 낫다고 판단될 수도…)</p><blockquote><p>VS 코드가 내장되어 VS 코드에 익숙한 사용자분들은 IntelliSense와 단축키를 그대로 사용할 수 있습니다.</p></blockquote><h1 id="에디터-활용하기"><a href="#에디터-활용하기" class="headerlink" title="에디터 활용하기"></a>에디터 활용하기</h1><h2 id="VS-code"><a href="#VS-code" class="headerlink" title="VS code"></a>VS code</h2><p>이번에는 에디터로 넘어와 VS code에서 간단한 콘솔 출력을 방법을 알아보겠습니다.</p><p><img src="http://4.bp.blogspot.com/-kxQO1zfPJ5A/WuV8M_HJLhI/AAAAAAAADUc/UIdtdR5kTIEN-vnpaAYcEC9jgi1m6Z2YgCK4BGAYYCw/s640/VS%2Bcode.png" alt=""></p><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> 확장 플러그인 설치</p><p><img src="http://2.bp.blogspot.com/-czYAV06UjoA/WuV8M4ILU3I/AAAAAAAADUY/zkAJXEUFlsEnVmsCpEWsiZ3WOOBG2T_BwCK4BGAYYCw/s640/VS%2Bcode%2B%25282%2529.png" alt=""></p><p><a href="https://github.com/TypeStrong/ts-node" target="_blank" rel="noopener">ts-node</a> 설치<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g ts-node // 전역 설치를 하시면 됩니다 (-g 또는 -global)</span><br></pre></td></tr></table></figure></p><p><img src="http://4.bp.blogspot.com/-JFWufuvwWto/WuV9murmEQI/AAAAAAAADU0/eNfmX-6nNBE_4-NOlEKAzLHfS3pOc_zrwCK4BGAYYCw/s640/VS%2Bcode%2B%25283%2529.png" alt=""></p><p>마우스 우클릭 &gt; <code>Run Code</code> 클릭 또는 단축키 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>n</kbd><br>(기본 단축키가 다른 플러그인과 겹치는 경우가 많습니다)</p><p><img src="http://2.bp.blogspot.com/-zrxaIx0VdQc/WuV9mkoc96I/AAAAAAAADU4/KUI-NDayfp8Xzd8u_90kIOdATuQvbnWHACK4BGAYYCw/s640/VS%2Bcode%2B%25284%2529.png" alt=""></p><p>위와 같은 출력 결과를 간단하게 볼 수 있습니다.</p><blockquote><p><strong>주의사항</strong><br>간혹 설정에 문제가 있는 경우 아래와 같은 옵션을 확인해주시면 됩니다<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"code-runner.executorMap" : &#123;</span><br><span class="line">  "typescript": "ts-node"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>모던 자바스크립트를 접하며 혼란스러운 것들 중 하나는 환경설정일 것입니다.<br>물론 알고 넘어가야 하지만 입문자의 경우 이런 다양한 방법을 통해 학습하시는 것도<br>초반에 러닝 커브를 이겨내는 데 큰 도움이 될 수 있을 것 입니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;타입스크립트 개발 환경없이 작성하기&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="https://devjang.github.io/categories/programming/"/>
    
      <category term="typescript" scheme="https://devjang.github.io/categories/programming/typescript/"/>
    
    
      <category term="intellij" scheme="https://devjang.github.io/tags/intellij/"/>
    
      <category term="visual studio code" scheme="https://devjang.github.io/tags/visual-studio-code/"/>
    
      <category term="CodePen" scheme="https://devjang.github.io/tags/CodePen/"/>
    
      <category term="JS Bin" scheme="https://devjang.github.io/tags/JS-Bin/"/>
    
      <category term="JSFiddle" scheme="https://devjang.github.io/tags/JSFiddle/"/>
    
      <category term="CodeSandbox" scheme="https://devjang.github.io/tags/CodeSandbox/"/>
    
      <category term="typescript" scheme="https://devjang.github.io/tags/typescript/"/>
    
      <category term="run console" scheme="https://devjang.github.io/tags/run-console/"/>
    
  </entry>
  
  <entry>
    <title>이것이 자바다</title>
    <link href="https://devjang.github.io/2018/04/12/2018-04-12-this-is-java/"/>
    <id>https://devjang.github.io/2018/04/12/2018-04-12-this-is-java/</id>
    <published>2018-04-11T15:00:00.000Z</published>
    <updated>2018-08-13T11:26:44.868Z</updated>
    
    <content type="html"><![CDATA[<p>신용권의 Java 프로그래밍 정복! 이것이 자바다</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 신용권<br>출간 : 2015.01.06<br>페이지 : 1224<br>ISBN : 9788968481475<br>가격 : 30,000 원</p></blockquote><ul><li><p>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=8589375" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=8589375</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1460673937" target="_blank" rel="noopener">http://www.hanbit.co.kr/store/books/look.php?p_code=B1460673937</a></p></li><li><p>이것이 자바다 카페<br>: <a href="http://cafe.naver.com/thisisjava" target="_blank" rel="noopener">http://cafe.naver.com/thisisjava</a></p></li><li><p>3강까지만 제공되는 샘플 영상<br>: <a href="https://www.youtube.com/playlist?list=PLVsNizTWUw7FPokuK8Cmlt72DQEt7hKZu" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLVsNizTWUw7FPokuK8Cmlt72DQEt7hKZu</a></p></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>이전에 국비 지원으로 Java 교육을 5개월가량 받을 때를 제외하고 Java와는 남남처럼 지내고 있었는데 <code>한빛미디어</code>의 은총으로 오랜만에 Java 기본서를 펴보게 되었다.</p><p>처음 <code>이것이 자바다</code>를 받아봤을 때는 이미 Java 기본서를 여러 번 접해봤기때문에 뭐 별거 있겠어? 싶었다.</p><p>JavaScript 같은 경우에는 워낙 다양한 스타일과 종류가 있고 언어 자체가<br>느슨하기 때문에 저자의 스타일에 따라 코드 내용이 다르기도 하지만 Java같은 경우에는 컨셉과 목차 스타일 그리고 코드를 풀어나가는 느낌과 개념 설명 말고는 큰 차이를 알기는 어려웠다. (물론 책마다 완성도는 큰 차이가 있다)</p><h2 id="입문부터-깊이까지-초보자부터-숙련자까지"><a href="#입문부터-깊이까지-초보자부터-숙련자까지" class="headerlink" title="입문부터 깊이까지 초보자부터 숙련자까지"></a>입문부터 깊이까지 초보자부터 숙련자까지</h2><p>큰 기대는 없었다.</p><p>워낙 Java 기본서는 책의 가짓수만 해도 어마어마하고 그나마 유명한 책 중 <code>난 정말 JAVA를 공부한 적이 없다구요</code>, <code>헤드퍼스트 Java</code>, <code>Java의 정석</code>을 읽은 적이 있다(꼼꼼하게 공부하지 못했는지 기억이 잘나지 않는다….)</p><ul><li><p>난 정말 JAVA를 공부한 적이 없다구요: 개념 설명이 쉽게 되어 읽기 좋고 가장 Java를 깨우치는 도움이 되었던 책이지만 구성이 좀 부실했다. (대신 동영상 제공)</p></li><li><p>헤드퍼스트 Java: 재미있는 책이다. 구성도 마음에 들고 책 설명처럼 뇌를 자극하는 느낌이지만…. 너무 산만하고 레거시하다는 생각도 들었다.</p></li><li><p>Java의 정석: 정말 정적이고 딱딱하다는 느낌을 받았다. 개념에 충실한 정말 교과서 같은 기본서다. 지루해서 읽다가 포기했던 기억이 있다.</p></li></ul><p>현업에서 Java를 하고 있지도 않고 시간이 부족해서 동영상도 보지 못했고 한빛미디어와의 약속이 있기때문에 이것이 자바다는 중요 개념과 궁금한 내용 위주로 읽어 나갔다.</p><p><img src="https://4.bp.blogspot.com/-MHXbli8lzX4/WtGVBXRXmJI/AAAAAAAADN4/KN2FREjDPrs2doWdjHJlj6DOSwdiswZkACK4BGAYYCw/s1600/P20180414_094912115_54461DE1-5ECD-4F8F-A5A7-B628DB5753AE.JPG" alt=""><br>챕터를 마치고 꼭 확인을 한다</p><p>이것이 자바다를 보고 느낀 건 정말 완전체 같다는 느낌이였다.<br>1000페이지가 넘는 분량인데 뭐하나 빠지는 게 없고 <code>입문하기에 어렵지도 않으며 나름 딥하기까지하다.</code></p><p><img src="https://3.bp.blogspot.com/-Vw9Nv3S5wy4/WtGVBZYO1uI/AAAAAAAADOM/lxzBfE8dx0gcCBKnCKOlIumuCVl73zM4QCK4BGAYYCw/s1600/P20180414_094936593_ACE396FE-300D-45F1-9B1F-BE9D7435A696.JPG" alt=""><br>또한 개념 설명은 꼭 짚고 넘어가며 연습문제도 있고 <strong>코드 설명이 너무나 친절하다.</strong></p><p><img src="http://1.bp.blogspot.com/-vsmsWh-OeCs/WtGaihwr3_I/AAAAAAAADO0/_LrX4z8a8yA-XPKOQ0lGyyT0MkOVxWZaQCK4BGAYYCw/s1600/P20180414_094644696_41035B0C-4864-4524-B46D-2665C5C617FC.JPG" alt=""><br>영상을 보지는 못했지만 함께한다면 효과는 더 크지 않을까 싶다.</p><h2 id="Java-개념"><a href="#Java-개념" class="headerlink" title="Java 개념"></a>Java 개념</h2><p>다른 언어들도 마찬가지이겠지만 Java를 통해 얻을 수 있는 것들이 굉장히 많다.</p><p>OOP, 인터페이스, 클래스, 다형성 등등 코딩만으로는 해결되지 않는 이러한 <strong>개념에 대한 이해가 Java 학습에 있어서 큰 허들이 될 수 있다.</strong></p><p><img src="https://4.bp.blogspot.com/-s3hSliUBqfY/WtGVBRBTTSI/AAAAAAAADOI/oah0yUy_Q282Cg_yNKKd8ay0T2GY8V-FgCK4BGAYYCw/s1600/P20180414_094844421_C7FA33F0-F01B-448A-BD4C-A98BB59731C4.JPG" alt=""></p><p>이것이 자바다에서 인상적인 부분은 <code>정말 꼼꼼하게 개념 요소들을 챙긴다</code>.<br>놓치는 게 없다고 볼 수 있을 정도였다.</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>사실 이 책에 API까지 있을거라고는 생각도 못했고 기본 API정도 밖에는 나오지 않지만 API를 이렇게 쉽게 설명해주는구나…. 감동이였다.</p><p><img src="https://2.bp.blogspot.com/-TUaJdyOmJrU/WtGVB7EHtEI/AAAAAAAADOU/xHIVswwFHSEU34IW4KQZzEZHoc-LR6JXgCK4BGAYYCw/s1600/P20180414_094959314_FAF03C4E-4262-4916-A49B-D87FD628631A.JPG" alt=""><br>API 설명</p><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><p><img src="https://3.bp.blogspot.com/-vK99ODmpkx4/WtGVBrbpUOI/AAAAAAAADOY/Evd-xc2gCY41W_wT-3dImcCbvi0IGREFQCK4BGAYYCw/s1600/P20180414_094720940_9C965570-07DC-42A5-A8CA-E5622C7BB2FA.JPG" alt=""><br>정말 독자를 세심하게 챙긴다는 것을 알 수 있다.</p><blockquote><p>독자를 세심하게 챙기며<br>개념은 꼼꼼하게 놓치지 않고<br>설명은 도식화하여 이해시키려 노력한다.</p></blockquote><p>누군가 Java 책을 추천해달라고 하면 입문일 때는 이 책 언제는 저 책<br>상황에 따라 나눠서 추천했었겠지만 <strong>이제는 <code>이것이 자바다</code> 한 권으로 기본을 확실하게 넘어가라고 권하고 싶다.</strong></p><p><img src="https://3.bp.blogspot.com/-U30YrztOzHI/WtGUEcI6NmI/AAAAAAAADNc/e3iDhZNWF0Mrw0eYsvK_zSzB2VZOc2L1QCK4BGAYYCw/s1600/this-is-java-roadmap.png" alt=""><br>카페에 가보니 직딩들을 위한 목차가 있었다.</p><blockquote><p>프로그래밍에 처음 입문해도 Java를 처음 배워도 Java를 깊이 있게 보고 싶어도 <strong>이것이 자바다</strong> 하나로 해결 가능하지 않을까 생각이 들었다.</p></blockquote><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;신용권의 Java 프로그래밍 정복! 이것이 자바다&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
      <category term="java" scheme="https://devjang.github.io/categories/book/programming/java/"/>
    
    
      <category term="자바 입문 책" scheme="https://devjang.github.io/tags/%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8-%EC%B1%85/"/>
    
      <category term="이것이 자바다" scheme="https://devjang.github.io/tags/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EC%9E%90%EB%B0%94%EB%8B%A4/"/>
    
      <category term="신용권" scheme="https://devjang.github.io/tags/%EC%8B%A0%EC%9A%A9%EA%B6%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hello Coding 프로그래밍</title>
    <link href="https://devjang.github.io/2018/02/18/2018-02-18-hello-coding-programming/"/>
    <id>https://devjang.github.io/2018/02/18/2018-02-18-hello-coding-programming/</id>
    <published>2018-02-17T15:00:00.000Z</published>
    <updated>2018-11-12T04:57:14.228Z</updated>
    
    <content type="html"><![CDATA[<p>개념부터 처음 배우는 프로그래밍! Hello Coding 프로그래밍 리뷰</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : Pope Kim<br>출간 : 2018.01.02<br>페이지 : 352<br>ISBN : 9791162240342<br>가격 : 19,800원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12877969" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=12877969</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B6832340619" target="_blank" rel="noopener">http://www.hanbit.co.kr/store/books/look.php?p_code=B6832340619</a></li></ul><h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h3><p><a href="https://www.youtube.com/user/KimPopeTV" target="_blank" rel="noopener">포프TV</a>로 유명한 유튜버 김포프님의 입문 서적이다.  (<a href="https://youtu.be/0Hbq3En8xvw" target="_blank" rel="noopener">책에 대한 포프님의 설명</a>)<br>때문에 포프님이 좋아하는 C#을 기본으로 한 책이며 수준은 입문 수준이다</p><p><img src="http://1.bp.blogspot.com/-4kKXVvZAs-E/Wo78hIOknPI/AAAAAAAADLQ/lAvvbMWzpd8RJVxLhOwcpamp_SJzVSTQACK4BGAYYCw/s1600/20180222_055458.jpg" alt=""><br>목차부터 심상치 않다</p><h3 id="기존의-틀과는-다른-입문-서적"><a href="#기존의-틀과는-다른-입문-서적" class="headerlink" title="기존의 틀과는 다른 입문 서적"></a>기존의 틀과는 다른 입문 서적</h3><p>보통의 프로그래밍 입문 서적이라면 하나의 언어를 처음부터 끝까지 가르쳐주거나<br>언어에 얽매이지 않고 전체적인 개발의 모든 것을 담기 위한 서적이거나<br>스크래치부터 설명하는 책이거나 보통은 이런 방향이다.</p><p>하지만 이 책의 경우에는 <code>개발에 입문하고자 C#을 사용하는 느낌</code>이라고 볼 수 있다.<br>프로그래밍의 개념을 설명하는 방식이 다른 책들과 확연히 다르다는 느낌을 알 수 있었다.</p><p>그저 프로그래밍 입문에만 초점을 맞춘 것이 아닌 코드를 어떻게 짜야 하는지 무엇을 주의해야 하는지 <code>의식에 흐름과 방향성</code>까지 놓치지않고 <code>제시</code>해주는 점은 긍정적인 부분이었다.</p><p>그런 이유로 그런 건지는 잘 모르겠지만 위의 <strong>목차만 봐도 어떠한 언어를 배울 때 주로 볼 수 있는 입문 서적의 목차와는 다르다..</strong><br>일반적인 입문 서적이라면 언어의 개론 =&gt; 변수 =&gt; 흐름 제어 =&gt; 반복문 =&gt; 함수 =&gt; 좀 더 딥하게 를 상상할 수 있다.</p><h3 id="친절한-구성"><a href="#친절한-구성" class="headerlink" title="친절한 구성"></a>친절한 구성</h3><p><img src="http://3.bp.blogspot.com/-KxNamnrZFAc/Wo78gUx5_cI/AAAAAAAADLA/FLALn_dFKXQCJZkf71KoLkns2Jq7_QtmgCK4BGAYYCw/s1600/20180222_055722.jpg" alt=""></p><p><code>이해를 돕기 위한 도식화와 그림 그리고 폰트 어느 하나 부족함을 느낄 수 없다.</code><br>포프님의 책이기 때문에 어렵겠지? 이해에 초점을 두지는 않겠지? 생각했으나 큰 오산이었으며<br>한빛답게 정말 <strong>친절하고 꼼꼼한 편집으로 책을 즐겁고 편안하게 볼 수 있었다.</strong></p><h3 id="기초를-단련하기-위한-문제들"><a href="#기초를-단련하기-위한-문제들" class="headerlink" title="기초를 단련하기 위한 문제들"></a>기초를 단련하기 위한 문제들</h3><p><img src="http://1.bp.blogspot.com/-zjmkuu6qbhc/Wo78gWrX8iI/AAAAAAAADK8/tHekcIM9HeEsGqd38b-Fk9SbGB9eVdzeQCK4BGAYYCw/s1600/20180222_055637.jpg" alt=""></p><p>문제는 각 챕터마다 꾸준히 등장하며 <code>기초 문제 &amp; 심화 문제</code>로 이루어져 있다.<br>프로그래밍에 완전히 처음 입문하는 사람들에게는 후반부로 갈수록 점점 어려움을 느낄 수 있지만<br>확실히 실력 향상과 습득에 도움이 된다는 것을 느낄 수 있다.</p><h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><blockquote><p>결국 각 챕터를 완독하고 문제를 풀며 실습을 하게 되고 간단한 게임을 만들게 된다</p></blockquote><p>포프님이 의도한 책의 방향이 이거구나 싶었다</p><p>완전히 프로그래밍에 처음 입문하는 사람들에게는 약간 어려울 수는 있으나<br>기존의 프로그래밍 언어적인 개념에 접근한 입문 서적이 아닌 <code>프로그래밍에 대한 개념과 생각에 접근하도록 유도하는 서적</code>이라고 볼 수 있다.</p><p>또한 책과 각 챕터마다 나오는 문제를 통해 직접 체험하고 습득하는 재미도 느낄 수 있으며<br><strong>C#을 처음 접하는 사람들도 부담없이 코딩할 수 있는 정말 친절한 구성을 가지고 있다.</strong></p><p>한빛미디어에서 Hello Coding 시리즈를 통해 다양한 입문자들의 학습을 돕겠다는 취지가 느껴진다.<br>앞으로도 이와 같은 방향의 책이 많이 출간되었으면 좋겠다.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개념부터 처음 배우는 프로그래밍! Hello Coding 프로그래밍 리뷰&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
      <category term="Hello Coding 프로그래밍" scheme="https://devjang.github.io/tags/Hello-Coding-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
      <category term="c# 입문 책" scheme="https://devjang.github.io/tags/c-%EC%9E%85%EB%AC%B8-%EC%B1%85/"/>
    
      <category term="김포프" scheme="https://devjang.github.io/tags/%EA%B9%80%ED%8F%AC%ED%94%84/"/>
    
  </entry>
  
  <entry>
    <title>프로그래머의 길, 멘토에게 묻다</title>
    <link href="https://devjang.github.io/2017/12/30/2017-12-30-apprenticeship-patterns/"/>
    <id>https://devjang.github.io/2017/12/30/2017-12-30-apprenticeship-patterns/</id>
    <published>2017-12-29T15:00:00.000Z</published>
    <updated>2018-08-13T11:26:44.868Z</updated>
    
    <content type="html"><![CDATA[<p>소프트웨어 개발 분야 새내기를 위한 프로그래머 가이드! 프로그래머의 길, 멘토에게 묻다 리뷰</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 인사이트<br>저자 : 데이브 후버, 애디웨일 오시나이<br>역자 : 강중빈<br>출간 : 2010.07.26<br>페이지 : 288<br>ISBN : 9788991268807<br>가격 : 14,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=6332442" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=6332442</a><br>: <a href="http://www.insightbook.co.kr/book/individual/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4" target="_blank" rel="noopener">http://www.insightbook.co.kr/book/individual/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4</a></li></ul><h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h3><p>많은 사람들이 추천해주는 책으로 유명하기에 구입을 하게 되었다.<br>물론 최근 들었던 <a href="https://devjang.github.io/2017/11/16/2017-11-16-okky">이종립님의 발표</a>를 듣고 꼭 읽어봐야겠다 싶었고 출퇴근길을 이용해 읽기 좋은 부담 없는 두께였다.</p><p>숙련된 소프트웨어 개발자가 되기위한 길에 아낌없는 조언을 받는 느낌이었다</p><p>이 책의 설명 그대로 개발자로 가는 험난한 여정의 지침서 그 자체였다.</p><p>어떤 행동을 하면 좋을지 어떻게 배우면 좋은지 어떤 마음가짐을 가지고 있으면 좋은지<br>구체적인 사례과 해결책을 제시해준다.</p><ul><li>책의 구성은 패턴 위주로 제공된다.  </li></ul><ol><li>패턴을 제공한다 (약간의 명언도 포함)  </li><li>사례와 문제점을 예시로 보여줌  </li><li>해결방안과 대책을 구체적으로 제시  </li><li>연관된 패턴</li></ol><p>지겨울 정도로 반복되는 정석적인 패턴이지만 놓칠 내용하나 없이 살이 되는 느낌이었다.</p><h3 id="국내에서도-도움되는-다양한-사례와-해결책"><a href="#국내에서도-도움되는-다양한-사례와-해결책" class="headerlink" title="국내에서도 도움되는 다양한 사례와 해결책"></a>국내에서도 도움되는 다양한 사례와 해결책</h3><p>이런 책들을 보면 간혹 국내에서 성장하는 개발자들과는 너무나 동떨어진 이야기도 많고<br>비현실적인 이야기도 많다.<br>하지만 이 책 같은 경우에는 벌써 출간된 지 10년의 세월은 흘렀고<br>외국에서의 사례와 해결책이지만 기가 막히게 도움되는 내용이 많았다.</p><p>프로그래밍을 관두고 싶을 때<br>실무경험이 부족할 때<br>열정이 질식되는 환경에 있을 때<br>길을 잃었을 때<br>학습이 더디어졌을 때<br>등등 수많은 패턴과 그에 대한 통한 사례와 해결책을 통해 선배 개발자들의 통찰과 이해를 체험할 수 있다.</p><h3 id="개발자의-인생을-살펴보다"><a href="#개발자의-인생을-살펴보다" class="headerlink" title="개발자의 인생을 살펴보다"></a>개발자의 인생을 살펴보다</h3><p>시작하는 개발자부터 은퇴를 앞둔 개발자까지 다양한 개발자들의 삶을 체험할 수 있다.<br>3년 후 5년 후 10년 후 자신이 어떤 개발자가 되어있을까 멀리 내다보도록 해준다.</p><h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>쓸데없는 걱정이 많고 고민 많은 개발자에게 도움이 되는 책이다.<br>특히 이제 시작하는 신입이나 쥬니어 개발자에게 큰 도움이 되겠지만<br>이미 많은 세월을 보낸 개발자에게도 이 책은 자기 자신을 되돌아보는 성찰의 시간을 주지 않을까 싶다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;소프트웨어 개발 분야 새내기를 위한 프로그래머 가이드! 프로그래머의 길, 멘토에게 묻다 리뷰&lt;/p&gt;
    
    </summary>
    
      <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
      <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
      <category term="프로그래머의 길 멘토에게 묻다" scheme="https://devjang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%9D%98-%EA%B8%B8-%EB%A9%98%ED%86%A0%EC%97%90%EA%B2%8C-%EB%AC%BB%EB%8B%A4/"/>
    
      <category term="개발자 로드맵" scheme="https://devjang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A1%9C%EB%93%9C%EB%A7%B5/"/>
    
      <category term="개발자 인생" scheme="https://devjang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9D%B8%EC%83%9D/"/>
    
  </entry>
  
  <entry>
    <title>에디터 or IDE 터미널 명령어로 실행하기</title>
    <link href="https://devjang.github.io/2017/12/24/2017-12-24-open-ide-tip/"/>
    <id>https://devjang.github.io/2017/12/24/2017-12-24-open-ide-tip/</id>
    <published>2017-12-23T15:00:00.000Z</published>
    <updated>2018-08-13T11:26:44.868Z</updated>
    
    <content type="html"><![CDATA[<p>간단한 설정 한번이면 터미널을 통해 에디터를 실행할 수 있습니다.</p><a id="more"></a><hr><p>저장소를 새로 만든다던지 git clone을 한다던지 현재 터미널에 있으면서<br><code>원하는 경로로 에디터를 실행한다는 것이 귀찮을 때</code>가 많습니다.</p><p>이런 경우에 정말 너무도 간단하게 명령어 <code>단 몇 글자</code>면 해당 경로에서<br>IDE를 즉시 실행할 수가 있습니다!!</p><p>(단. MacOS 환경에서의 팁입니다.)</p><h2 id="Visual-Studio-Code-명령어로-실행하기"><a href="#Visual-Studio-Code-명령어로-실행하기" class="headerlink" title="Visual Studio Code 명령어로 실행하기"></a>Visual Studio Code 명령어로 실행하기</h2><p><img src="http://2.bp.blogspot.com/-5c5ynj6S73k/WkY6xRdcAlI/AAAAAAAADEI/1RmUN-m79rIyaq86dGBPQsOXi2BKD6fXACK4BGAYYCw/s1600/code-1.png" alt="">  </p><p><img src="http://3.bp.blogspot.com/-j9wvE1DG7mQ/WkY6xb9BJrI/AAAAAAAADD0/SzvrqQgSPKUmns6bLjzFyEBATlF-IUL6ACK4BGAYYCw/s1600/code-2.png" alt="">  </p><ul><li>CMD + SHIFT + P 입력 후 위와 같은 검색을 통해 <code>셸 명령: PATH에 &#39;code&#39; 명령 설치</code>를 합니다.</li></ul><p><img src="http://2.bp.blogspot.com/-ZFVH7_wfnX0/WkY6xecUPpI/AAAAAAAADEA/FMfv5yvsru0-RraDIqeCj9uhHF-s45MVwCK4BGAYYCw/s1600/code-3.png" alt="">  </p><ul><li><p>실행을 원하는 경로에서 명령어를 통해 실행합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .    // 주의: code와 . 사이에 공백이 필요합니다.</span><br></pre></td></tr></table></figure></li><li><p>실행화면<br><img src="http://1.bp.blogspot.com/-MB8awVyepQU/WkY5D7lx2dI/AAAAAAAADDU/4-iTvaxOGKkjGgrTJ6XY58CJjZfZKxDsACK4BGAYYCw/s1600/code-run.gif" alt="">  </p></li></ul><hr><h2 id="IntelliJ-명령어로-실행하기"><a href="#IntelliJ-명령어로-실행하기" class="headerlink" title="IntelliJ 명령어로 실행하기"></a>IntelliJ 명령어로 실행하기</h2><p><img src="http://4.bp.blogspot.com/-rlIG2xoH5_M/WkY6xb7CWwI/AAAAAAAADEE/lTUYi1nl3tUVOdq6u00I2xzIjhWw3EwgwCK4BGAYYCw/s1600/idea-1.png" alt="">  </p><ul><li>IntelliJ 메뉴에서 Tools &gt; <code>Create Command-line Launcher...</code> 를 실행합니다</li></ul><p><img src="http://3.bp.blogspot.com/-F7ZVUtqRVvA/WkY6xaX5J1I/AAAAAAAADD8/hlh7KxmtqpsS4NqkP6EUXeF6ovQHpLA-wCK4BGAYYCw/s1600/idea-2.png" alt="">  </p><ul><li>기본 경로를 제공합니다. 특별한 이유가 없는 이상 여기서 <code>OK</code>만 하면 설정은 끝입니다.</li></ul><p><img src="http://1.bp.blogspot.com/-5k0xxxpCjWs/WkY6xcPX1YI/AAAAAAAADD4/k5GuNoP5IsU0QT4HKSfwhq9DPxu5Ko_9ACK4BGAYYCw/s1600/idea-3.png" alt="">  </p><ul><li>실행을 원하는 경로에서 명령어를 통해 실행합니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idea .    // 주의: idea와 . 사이에 공백이 필요합니다.</span><br></pre></td></tr></table></figure><ul><li>실행화면 (노트북이 느려서…구동에 시간이 소요됩니다)<br><img src="http://4.bp.blogspot.com/-8QalaSvfKWU/WkY4kfESaUI/AAAAAAAADDI/6B1uKe5kM84bWHSf2kTLcZhcnbk_ANyOQCK4BGAYYCw/s1600/idea-run.gif" alt=""></li></ul><hr><p>참고 :  </p><p><a href="https://code.visualstudio.com/docs/setup/mac" target="_blank" rel="noopener">Running VS Code on Mac</a><br><a href="https://code.visualstudio.com/docs/setup/windows" target="_blank" rel="noopener">Running VS Code on Windows</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;간단한 설정 한번이면 터미널을 통해 에디터를 실행할 수 있습니다.&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="https://devjang.github.io/categories/programming/"/>
    
      <category term="tip" scheme="https://devjang.github.io/categories/programming/tip/"/>
    
    
      <category term="터미널 에디터 실행" scheme="https://devjang.github.io/tags/%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%94%94%ED%84%B0-%EC%8B%A4%ED%96%89/"/>
    
      <category term="run terminal" scheme="https://devjang.github.io/tags/run-terminal/"/>
    
      <category term="intellij" scheme="https://devjang.github.io/tags/intellij/"/>
    
      <category term="vscode" scheme="https://devjang.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Adieu 2017 &amp; 내가 신입 개발자들의 멘토인 이유</title>
    <link href="https://devjang.github.io/2017/12/21/2017-12-21-adieu-2017/"/>
    <id>https://devjang.github.io/2017/12/21/2017-12-21-adieu-2017/</id>
    <published>2017-12-20T15:00:00.000Z</published>
    <updated>2018-08-13T11:26:44.868Z</updated>
    
    <content type="html"><![CDATA[<p>2017년을 회고하며 2018년을 약속하기 &amp; 좋은 개발자 되기</p><a id="more"></a><hr><p><img src="http://4.bp.blogspot.com/-eAfQIDyQ2W8/WiO49a-lz2I/AAAAAAAABxA/rI2uMJE-E_g2zOqLgraXoDOwNPrizTmCACK4BGAYYCw/s1600/600620pr25yo658h2966.jpg" alt=""></p><p><img src="http://4.bp.blogspot.com/-gaz81QmBx3U/WiO49qO49YI/AAAAAAAABxM/s43dljVCJPQuW4mG-xLWKNYL3ASZxveKQCK4BGAYYCw/s1600/uj4n3m2096gy0j630n36.jpg" alt=""></p><p><img src="http://4.bp.blogspot.com/-n7YaIpxlqCM/WiO49pxIT9I/AAAAAAAABxI/JFlnD05kXWsUUTw34K7RtCp4ZI4-Smk6QCK4BGAYYCw/s1600/q2tlx4d0c38y83alhi5z.jpg" alt=""></p><p><img src="http://4.bp.blogspot.com/-vxE1K7NENM0/WiO49u4sXiI/AAAAAAAABxE/cmJxDJZ3Ez0tjvUtLJ7we0JnIKmu7B0wACK4BGAYYCw/s1600/uy9l5f4l4ll56g4f649q.jpg" alt=""></p><hr><!-- TOC --><ul><li><a href="#내가-신입-개발자들의-멘토인-이유">내가 신입 개발자들의 멘토인 이유</a></li><li><a href="#도대체-무엇을-했는-가">도대체 무엇을 했는 가</a></li><li><a href="#2017년-배운-것">2017년 배운 것</a></li><li><a href="#2017년-실패한-이유">2017년 실패한 이유</a></li><li><a href="#실패는-성공의-어머니-solution">실패는 성공의 어머니 Solution</a><ul><li><a href="#마치며">마치며..</a></li></ul></li></ul><!-- /TOC --><hr><h2 id="내가-신입-개발자들의-멘토인-이유"><a href="#내가-신입-개발자들의-멘토인-이유" class="headerlink" title="내가 신입 개발자들의 멘토인 이유"></a>내가 신입 개발자들의 멘토인 이유</h2><p>2017년 개발자로 첫발을 내디딘 첫해를 돌아봤고<br>얼마나 잘못된 개발자가 되었는지 회고를 통해 알 수 있었다</p><p><img src="http://4.bp.blogspot.com/-Zkvs1cyfVvE/WiO8DgkgXfI/AAAAAAAABxY/8PX59e3ORvwcRK3Lidf3Dr35giOq_0IuACK4BGAYYCw/s1600/year-half.jpeg" alt=""></p><p>분명 7월이 시작될 때만 해도 돌아다니는 이 짤방을 보고 불안감을 느꼈지만 개선하지 못한 잘못이 크다.</p><p>뒤늦은 11월쯤부터 서서히 정신을 차리기 시작했지만 결국 너무나 늦어버렸다.</p><p>이 포스팅을 통해 2017년의 나를 분석하고 나 자신을 멘토로 다시 한걸음 나아가길 기원한다. </p><hr><h2 id="도대체-무엇을-했는-가"><a href="#도대체-무엇을-했는-가" class="headerlink" title="도대체 무엇을 했는 가"></a>도대체 무엇을 했는 가</h2><ul><li><p><strong>스터디 (18회)</strong></p><p>수많은 스터디에 참여했다.</p><p>Angular2+, React, Vue, JavaScript, CSS, Git, 비사이드 소프트의 코드스피츠 등등..</p><p>돈을 지불하는 강의형 스터디부터 그룹 스터디까지 수없이 참여했지만</p><p>헛된 노력이 많았고 <code>정말 내 것으로 소화해낸 건 많지 않았다.</code></p><p>중간에 파토난 스터디도 꽤 있었고 많지는 않지만 개인 사정상 불참했던 스터디도 있었다.</p><p>물론 큰 배움을 얻은 스터디도 있었지만 몇몇 스터디는 내 것으로 소화해내지 못했다.</p><p>이에 대한 내용은 밑에서 분석할 예정이다.</p><p>​</p></li><li><p><strong>Seminar &amp; Conference (14회)</strong></p><p>정말 많이 느끼고 배웠다.</p><p>사실 불필요한 부분도 있고 겹치는 내용도 많고 부실한 내용이 있을 때도 있지만</p><p><code>동기부여와 인생의 터닝 포인트라고 느낄 정도의 감명을 받을 때도 있었다.</code></p><p>앞으로도 꾸준히 참가할 생각이다(과도한 참가는 줄이자)</p><p>​</p></li><li><p><strong>독서 (7권)</strong></p><p>한빛 미디어에서 리뷰를 진행한 덕에 강제로 읽은 책도 있고 개인적인 독서는 JavaScript 기본서 위주였다.</p><p>도중에 읽기를 포기한 책도 있지만 처음부터 끝까지 완주한 책은 <code>1년 동안 겨우 7권이다.</code></p><p>이 또한 실속 없이 읽어 무엇이 남았을까 싶다</p><p>​</p></li><li><p><strong>첫 취업 그리고 이직</strong></p><p>개발자의 취업 그리고 취준생 개발자..</p><p>참 준비할 것도 많고 해야할 것도 많다. 이 시기만큼은 스스로 굉장히 많이 터득하고 배웠다.</p><p>​</p></li><li><p><strong>블로그</strong></p><p>2016년 하반기 Java 국비지원을 받으며 TIL을 작성하는 블로그를 만들었다.</p><p>(현재 4번째 블로그 이사로 TIL은 다른 곳에 있는 상태)</p><p>정말 시간을 많이 쏟기도하고 큰 노력을 기울였다. 나를 되돌아보는 데 도움은 되었지만 아쉬운 건</p><p>(과거의 글을 보면서 글을 왜 이렇게 못쓸까 느낀다)</p><p>기술적인 글을 작성한 부분이 거의 없다는 것이다.(개발 실력에 대한 자존감이 바닥이였다)</p><p>앞으로는 개발 기술에 대한 내용을 다뤄보도록 해야겠다. </p></li></ul><hr><h2 id="2017년-배운-것"><a href="#2017년-배운-것" class="headerlink" title="2017년 배운 것"></a>2017년 배운 것</h2><p>2017년 망했지만 실패를 분석하기 전에 그래도 배운 것(잘한 것) 을 되짚어본다.</p><p><img src="http://2.bp.blogspot.com/-qI_jIsbu1Vw/WiPHEmSywcI/AAAAAAAABxw/BUHeppmYl3IIdoaH4oOCkimhaRX9wCacgCK4BGAYYCw/s1600/2017-11-cal.png" alt=""></p><ul><li><p><strong>철저한 일정관리</strong></p><p>회사를 다니며 사이버대학을 다니다 보니 일정관리만큼은 철저하게 해야 한다.</p><p>구글 캘린더 &amp; 구글 keep(Spot Todo 관리) &amp; 회사 맥 &amp; 개인 맥 &amp; 개인 데스크탑 &amp; 스마트폰</p><p>모두 연동하여 일정 별로 (1시간 전 ~ 2시간 전 ~ 3시간 전 ~ 하루 전) 알람을 해놓고 생활했다.</p><p><del>너무 변태스럽지만</del></p><p>머리를 언제 잘랐지 궁금해서 시작했던 게 결국 언제 머리를 잘랐는 지까지 캘린더에 저장하는 습관도 생겼고</p><p>이제는 달력을 수시로 확인하고 일정 관리를 하지 않으면 불안할 때도 있다.</p></li></ul><hr><p>  ​<br>  <img src="http://1.bp.blogspot.com/-JZvbiab5Lr8/WiPx9MbbEXI/AAAAAAAAByA/QSxyC93PJFAzHPt7QSaNUUOO8yKSXiW9QCK4BGAYYCw/s1600/work.png" alt=""><br>  실제 구직할 때 작성하던 시트 :<br>  실제로는 떨어진 회사가 대부분이고 회사의 내용도 담겨있어서 공개할 수 있는 부분이 많지 않다</p><ul><li><p><strong>구직활동</strong></p><p>개발자 구직 활동을 통해 다양한 배움이 있었다.</p><ol><li>개인 명함만 들어 면접 시 명함 교환하기</li><li>자기소개 페이지를 만들어 도메인 달기 (사실 허접한 static HTML 이력서 2페이지였다)</li><li>면접 후 면접 질문 모으고 정리하기</li><li>결과를 통해 면접 실패와 성공을 분석</li><li>시트를 작성하여 어느 회사에 지원했어 어느 회사에 떨어졌고 어떤 이력서를 제출했는지 정리</li><li>지원할 회사를 분석하고 1회사 1이력서 공식 유지 (절대로 같은 회사에 같은 내용을 작성하지 않았다)</li><li>TIL 블로그 만들기</li></ol><p><code>구직활동에 요령이 생겼고 자신을 돌아보는 계기도 되었다.</code><br>​</p></li></ul><ul><li><p><strong>습관 만들기</strong></p><p>예전부터 사소한 습관조차 만들지 못했으나 <code>2017년 습관 만들기</code>에 돌입했고 <code>결국 내 것으로</code> 만들었다.</p><ol><li>회사 출근시 계단으로 출근하기</li><li>하루에 팔굽혀펴기 30개 하기</li><li>회사에서 업무시 1시간에 한번 몸풀기 (스마트폰 알람의 도움을 받는다)</li><li>집 앞 버스 정류장이 아닌 2정거장 전의 버스정류장까지 걸어서 버스타기 (운동)</li></ol><p>정말 아무것도 아닌 것 같지만 습관을 만들 수 있다는 자신감을 가지게 되었다.</p></li></ul><blockquote><p>습관의 재발견 :<br><code>우리는 그동안 “목표는 크게, 높게, 멋있게 잡아야 한다!”는 것을 강요당해 왔다.</code><br>그래서 늘 버거운 목표에 힘겨워 하다 포기하고, 또 포기하고 언젠가부터는 계획조차 세우지 않게 되었다.</p></blockquote><ul><li><p><strong>다양한 Tool 사용</strong></p><p>개인 성향 때문인지 항상 다양한 도구의 활용법에 관심이 많다.</p><p>인텔리J의 모든 단축키를 거의 다 외운다던가 웬만한 플러그인은 전부 설치해서 실행해보고</p><p>그 밖에도 다양한 도구들을 활용하고 접하게 되었고 커스텀하여 고쳐 쓰는 것도 좋아한다.</p><p>사소하지만 lint 같은 도구들도 정말 깊하게 파면서까지 연구해본다.</p><p>(개발을 이렇게 했어야 하는 데 아쉬운 부분이긴 하다.)</p></li></ul><ul><li><p><strong>다양한 커뮤니티 활동과 정보 수집</strong></p><p>우리나라의 웬만한 모든 커뮤니티에는 가입한 상태이기 때문에 다양한 정보를 빠르게 접할 수 있다.</p><p>심지어 모든 정보를 나를 통해 받는 친구들도 있다.</p><p>물론 <code>너무 많은 정보 속에 갈피를 못잡게 된 계기도 생길 수 있다.</code></p><p>(사실 커뮤니티 활동이라 적었지만 낯가림이 심한 눈팅족이다)</p></li></ul><hr><p><img src="http://dontkry.com/images/comics/roommates.png" alt=""><br>출처 : <a href="http://dontkry.com" target="_blank" rel="noopener">http://dontkry.com</a></p><ul><li><p><strong>Front-end 생태계의 이해</strong></p><p><code>Front-end 개발자는 알아야 될 범위가 굉장히 넓고 그 생태계를 이해하는 건 굉장히 중요하다.</code></p><p>사실 지금에 와서 돌이켜본다면 16년 12월부터 Front-end 구직을 시작하여 취업하기까지 </p><p>Front-end 개발자가 될 만큼 실력도 없었고 Front-end 생태계조차 이해하지 못했다.</p><p>물론 지금도 완벽한 수준은 아니지만 Why에 접근하여 생각할 수 있는 것 같다.</p></li></ul><p>  <code>Front-end 생태계를 얼마나 이해하는지 확인할 수 있는 글</code></p><p>  : <a href="http://www.looah.com/article/view/2054" target="_blank" rel="noopener">2016년에 자바스크립트를 배우는 기분</a></p><hr><h2 id="2017년-실패한-이유"><a href="#2017년-실패한-이유" class="headerlink" title="2017년 실패한 이유"></a>2017년 실패한 이유</h2><p>왜 실패했는지 변명이 아닌 Why에 접근해본다.</p><ul><li><p><strong>갑작스러운 Front-end 구직</strong></p><p>비전공에 5개월을 Java에 spring은 세팅하는 수준정도만 배운 흔히 오키에서 국좀이라고 불리우는</p><p>국좀 출신 개발자이다.</p><p>공부할 때는 TIL도 쓰고 열심히 공부했었지만 수료를 앞두고 프로젝트를 진행하며 Java보다는 CSS에 재미가 들었다.</p><p>그리고 Si에 대한 안 좋은 소문들과 글을 보며 내심 고민에 빠지게 되었고 Front-end 개발자가 되어</p><p>스타트업에서 시작한다는 말도 안되는 목표를 세우게 되었다.</p><p><code>국내의 퍼블리셔와 Front-end 개발자의 사이도 착각하게 된 것이다.</code><br>​<br><img src="http://i.imgur.com/wR3ZxfB.jpg?367" alt=""><br>: <a href="http://rebrn.com/re/javascript-466402" target="_blank" rel="noopener">당신은 JavaScript에 대해 얼마나 알고 있는가?</a></p><p><code>SPA가 뭔지도 모르고 JavaScript와 jQuery의 차이도 갓 알게 된 12월 Front-end 구직을 시작</code>했다.</p><p>뒤늦게 AngularJS 책을 여러 권 사서 공부했으나 <code>기본기가 없으니 겉핥기수준</code>이었고</p><p>하지만 운 좋게 취업에 성공했다(학원 강사님 말고는 주변에 말려주는 사람이 없었다.)</p><p>결국… <em>기본 실력 없이 기초 수준의 Java만 배우고 Front-end 개발자로 취직</em></p></li><li><p><strong>시간관리 실패</strong></p><p>일정관리에는 성공했으나 시간관리는 실패했다.</p><p>말도 안 되는 소리이긴 하다.<br>한마디로 말하면 일정은 지켰으나 <code>공부에 대한 시간 계획 및 실천은 없던 것이다</code></p><ol><li>오전에는 느긋하게 일하다가 뒤늦게 <code>야근하면 되지 생각한다.</code></li><li>과도한 스터디로 <code>이동시간을 소비</code>한다. (집은 수원 =&gt; 스터디 및 회사는 서울)</li><li><code>출퇴근에 소요되는 시간</code>이 하루에 3시간 이상이지만 버리기만했 다.</li></ol></li></ul><ul><li><p><strong>멘탈관리 실패</strong></p><p>사내에서 React로 된 서비스를 진행했으나 <code>서비스 실패</code>로 결국 폐지를 하게 되었다.</p><p>때문에 회사에서 불필요한 개발자가 된 것만 같은 기분이 들었고</p><p>사내에 다른 프로젝트는 합류하기엔 기술적으로 거리가 있기 때문에 참여할 수 없는 프로젝트였고..</p><p>결국 몇 개월간 회사에서 뭘했는 지 모르겠다는 생각까지 든다</p><p>​<br>또한 <code>개인적인 문제</code>로 생애 가장 힘든 시기를 마주하게 되었고 결국 한계에 도달하였다.</p><p>일을 하며 아무것도 할 수 없는 스트레스까지 받았을 정도였고 이 시기가 너무 길어</p><p>개인적으로 공부도 손 놓고 아무것도 할 수 없는 지경에 이르렀다.<br>​</p><ol><li><p>사내에 전담으로 맡은 서비스가 폐지된 후 슬럼프에 빠지다.</p></li><li><p>개인적인 사연으로 인한 스트레스 극복 실패 (돈을 빌려주거나 갚을 때 차용증은 선택이 아닌 필수입니다)</p><p>​</p></li></ol></li><li><p><strong>연휴를 놓치다</strong></p><p>5월 그리고 10월 굉장한 연휴를 맞이했고 <code>공부할 시간과 기회도 충분했으나</code></p><p><code>빈둥빈둥 놀기만</code> 했고 그렇다고 멋진 휴가를 다녀온 것도 아니다. 개인적으로는 이것이 가장 안타깝다. </p></li></ul><p>  <em>황금연휴에 공부할 기회를 버리다.</em></p><pre><code>​</code></pre><ul><li><p><strong>공부 방법의 문제</strong></p><p>정말 수 없이 많은 문제가 있었다.</p><p>만약 <code>2017년 회고를 하지 않는다면 2018년에 다시 일어날 기회조차 없이 망했을 것이다.</code></p></li></ul><ol><li><p><strong>러닝 커브 극복 실패</strong></p><p>문제 해결이 필요할 때 깊은 생각은 피하고 외면할 때가 많았다.</p><p>대충 라이브러리로 해결하는 식의 문제 해결이나 </p><p>어떠한 부분에 대한 지식이 부족할 때 <code>추가적인 학습의 러닝 커브를 이겨내지 못하고 포기</code>한 것이다.</p></li><li><p><strong>잘못된 독서</strong></p><p>독서를 하며 졸거나 코드 타이핑을 넘기거나 독서 중 헷갈리거나 모르는 부분이 있을 때</p><p>깊이 파고들기보다는 <code>그러려니 하고 넘기고는 했다.</code></p><p>물론 그러려니 넘기는 경우 책을 2번이고 3번 다시 읽어 소화하는 방식도 있었지만</p><p>2번 이상 읽은 적도 없고 간단한 요약의 독후감만 작성하고 독서를 끝냈다.</p></li><li><p><strong>의식적 무지</strong></p><p>무엇을 모르는지 어떤 부분이 부족한지는 알지만 제대로 된 <code>공부를 시작하여 끝을 본 적이 많지 않다.</code></p></li><li><p><strong>프로젝트를 통해 만든 것이 없다</strong></p><p>수많은 프로젝트와 스터디를 했음에도 불구하고 <code>결과물을 낸 적이 없다.</code></p><p>물론 거의 끝까지 만든 프로젝트도 있었지만.. 결과물을 내는 스터디는 거의 시작부터 망했다.</p><p><code>부담스러운 프로젝트는 스터디원들에게 부작용으로 작용할 때가 있다.</code></p><p>또한 개인적인 토이 프로젝트도 없었으며 겨우 인터넷에 돌아다니는 예제를 따라 만드는 수준이 전부였다.</p></li><li><p><strong>겉핥기 학습</strong></p><p><code>아는 것 많으나 정작 할 줄 아는 건 없다.</code></p><p>지식의 분포도를 따져 봤을 때 다 얇게 퍼져있기만 하고 어느 하나 깊게 파고들지 못한 부분이 아쉽다.</p></li><li><p><strong>Why가 아닌 How</strong></p><p>회사에서 업무를 할때 개인적인 개발이나 공부를 할 때 <code>Why가 아닌 How로 접근</code>하게 되었다.</p><p>이런 부분은 <code>지식에 착각</code>을 일으킨다. 결국 <code>알고 있는 것이 아니기 때문</code>이다.</p><p><code>설명서를 보고 만든 것과 직접 만든 것은 큰 차이</code>가 있듯이 어떻게 했는 지만 알고</p><p>동작 원리나 구동 원리는 전혀 모르는 것이다.</p></li><li><p><strong>유행 따라가기</strong></p><p>Angular, React, Vue =&gt; Front-end 춘추천국 시대이다.</p><p><code>결국 JavaScript</code>구나 Front-end 개발자도 결국 개발자구나..</p><p>라는 걸 깨달을 때까지 누군가 입이 닳도록 설명해봐야 깨닫기는 힘들다.</p><p>고용자에게 Front-end 개발자는 축구에 포지션이 있듯이 결국 포지션일 뿐이라고 생각할 수도 있다.</p><p>결국 <code>기본이 가장 중요하다는 것을 알고 있었으면서도 부정</code>하고 있었다.</p></li><li><p><strong>취업 의식</strong></p><p><code>Front-end 분야는 러닝 커브가 빠르게 올라가고 있다.</code></p><p>분명 16년 12월 구직활동을 할때는 AngularJS가 가장 중요한 자격요건이였으나</p><p>3~4월 다시 이직을 준비할 때는 React로 간단한 Todo App 정도는 만들 줄 알아야 지원할 수 있는 수준이었다.<br>(현재는 그 이상으로 러닝 커브가 올라왔다)</p><p>공부하고 싶고 개발하고 싶어야 하는 데 취업을 위해 어떤 공부를 해야 되는지부터 생각했고</p><p>그 와중에 <code>공부하는 것들에 대한 연관 관계가 말도 안 되게 뒤죽박죽 혼재</code>되었다.<br><img src="http://blog.teamtreehouse.com/wp-content/uploads/2015/08/react-hype.jpg" alt=""></p></li></ol><hr><ul><li><p>마지막. <strong>스터디 실패</strong></p><p>  <code>다양한 스터디에 참여했으나 정말 도움이 되어 내 것이 된 스터디는 15%</code> 정도에 불과하다.</p><p>  실제로 스터디를 다니면서 인터넷 쇼핑을 하거나 딴짓을 하는 분들도 많이 봤다.</p><p>  물론 나는 그 정도는 아니었지만 집중을 못하거나 복습을 못할때가 있었는 데</p><p>  이런 경우 <code>스터디는 안 하는 것보다 못한 것</code> 같은 결과를 초래 할 수있다.</p></li></ul><hr><h2 id="실패는-성공의-어머니-Solution"><a href="#실패는-성공의-어머니-Solution" class="headerlink" title="실패는 성공의 어머니 Solution"></a>실패는 성공의 어머니 Solution</h2><p>이제부터는 실패를 통해 2018년을 계획해본다.</p><p>국비지원을 다니던 시절 말로만 노력하는 동기가 입이 닳도록 하는 말이었다.<br><code>실패는 성공의 어머니! 수료할 때까지 꼭 제 손으로 게시판을 만들겠습니다</code></p><p>적어도 2017년의 나는 그 동기와 다를 바가 없으니 그 동기의 말이 떠오르게 되었다.</p><ul><li><p><strong>기본 실력 없이 기초수준의 Java만 배우고 Front-end 개발자로 취직</strong></p><p>   11월부터 Harvard CS50 공부를 시작했으며 일단 커넥트재단의 CS50 X edwith를 거의 완강한 상태이다.</p><p>   앞으로는 운영체제, 알고리즘, 자료구조, 네트워크, 데이터베이스를 공부할 생각이며</p><p>   18년 1/4분기까지 정보처리기사와 영문 Harvard CS50에 집중하며 알고리즘을 볼 생각이다.</p><blockquote><p>Outsider<br>   : 언어와 프레임워크가 바뀌어도 바뀌지 않을 지식을 공부하자<br>   자바지기 박재성<br>   : 기초레벨 포기하고 공부했다. 초반에는 통했지만 결국은 기초다. 내가 좋아하고 경쟁력 있는 것 그것만 몇 년을 하자.</p></blockquote></li><li><p><strong>오전에는 느긋하게 일하다가 뒤늦게 야근하면 되지 생각한다</strong></p><p>   시간을 버리지 않고 시간별로 무엇을 했는지 기록하는 수단을 찾는다.<br>   (완벽한 공부법을 참고할 예정이다)</p><blockquote><p>칼럼니스트 임백준<br>   : 에너지가 바닥난 사람을 컴퓨터 앞에 앉혀두면 그가 할 수 있는 일은 “잠자코 앉아있기”말고 아무것도 없다.<br>   키보드 위에서 영혼이 담기지 않은 손가락 놀림만 분주하다. </p></blockquote></li><li><p><strong>과도한 스터디로 이동시간을 소비한다</strong></p><p>   불필요한 스터디는 절대 하지 않는다.</p><p>   스터디에 참여하게 되면 노력 없이 나의 지식이 될 것이라고 착각하지 않고 복습과 예습을 통해 적극적으로 참여한다.</p><p>   또한 <code>원격 스터디도 제대로 한다면 오프라인 스터디보다 더 좋은 결과를 낼 수 있다.</code></p></li></ul><ul><li><p><strong>출퇴근에 소요되는 시간이 하루에 3시간 이상이지만 버리기만 했다</strong></p><p>   개발자라는 직업을 가지고 서울에서 일하지 않는 것은 힘든 부분이다.</p><p>   그렇다면 수면시간과 출퇴근 시간을 조율해야 하는 데 이런 시간에 <code>쓸데없이 스마트폰보는 시간은 줄인다.</code></p><p>   졸릴 땐 잔다.</p><p>   졸리지 않다 =&gt; 스마트폰을 절대 보지 않는다 =&gt; 독서를 한다.</p><blockquote><p>우아한 형제들 이종립<br>: 내가 자고 싶은 시간이 아니라 <code>몸이 자고 싶은 시간에 잔다</code></p></blockquote></li><li><p><strong>사내에 전담으로 맡은 서비스가 폐지된 후 슬럼프에 빠지다</strong></p><p>   어떻게든 훌훌 털어내고 회사와 협의 후 빠르게 다른 프로젝트를 준비하도록 한다.</p><blockquote><p>넥슨 박종천 VP    </p><ul><li>한가지 회사가 아닌 어느 회사를 갈 수 있는 역량에 초점을 맞춘다<br>=&gt; <code>능력이 없을 때 생기는 기회는 저주다. 결국 무너지게 된다.</code>  </li><li>사내에서 자기 발전을 위한 방법을 찾는다.<br>=&gt; 내 능력을 키울 수 있는 방법을 찾는다.</li></ul></blockquote></li></ul><ul><li><p><strong>개인적인 사연으로 인한 스트레스 극복 실패</strong></p><p>   이런 경우에는 질질 끌지 않고 어떻게든 자체적인 휴식기를 마련하여 휴식을 가지는 것이 좋을 것 같다.</p><blockquote><p>우아한 형제들 이종립<br>: 힘들 땐 친구 또는 가족과 가벼운 전화통화를 한다.</p></blockquote></li><li><p><strong>황금연휴에 공부할 기회를 버리다</strong></p><p>   강제성을 부여해서 황금 연휴에 맞는 사이즈의 토이 프로젝트를 선정해서 준비한다.</p><blockquote><p>이상한 모임 by minieetea<br>   : 사실 사이드 프로젝트라고 하기에는 투잡에 가까우리만큼 빡빡한 스펙과 일정이었다.<br>   매일 퇴근하고 집으로 달려가 새벽 3-4시까지 작업하고 4시간 남짓을 자며 출근하길 1달.<br>   주말에는 아침에 일어나 새벽 5시까지도 달리는 일이 허다했다.<br>   심지어 해외는 시차가 2시간이나 빨라 한국 새벽반이 눈감을 때쯤 호주 아침반 개발이 시작되어 24시간 개발이 돌아가는 날도 허다했다.<br>   고생했다는 것을 자랑하기보단,<br>   <code>작은 성공의 열매를 맛보았다 얘기하고 싶다.</code><br>   <a href="http://minieetea.com/2017/02/archives/4921" target="_blank" rel="noopener">토이 프로젝트를 완성하려면 얼마나 걸릴까?</a></p></blockquote></li><li><p><strong>잘못된 독서</strong></p><p>   출퇴근 시간에는 인문학 느낌의 개발 서적을 읽고 있다.<br>   자칫 지루하면 스마트폰의 유혹을 이기지 못하기 때문에 코드보단 인문학 느낌의 책을 선택했다.</p><p>   또한 읽은 책은 개인 Wiki에 기록할 준비를 해놨다.</p><blockquote><p>우아한 형제들 이종립<br>   : <code>하루에 3가지 종류(집에서, 지하철에서, 회사에서)</code>의 책을 조금씩 읽고 요약한다<br>   <code>일주일에 35페이지</code>만 읽어도 <code>훌륭한 책을 두 달</code>마다 읽을 수 있다.</p></blockquote></li></ul><ul><li><p><strong>의식적 무지</strong></p><p>   무엇을 모르는지 알면서 공부를 안 하는 저주이지만 다행히도 무엇을 모르는지 알기때문에</p><p>   모르는 부분에 대한 것을 언제 어디서나 수시로 기록할 수 있는 <code>무지 노트를 작성</code>하고 짬이 날 때마다</p><p>   무지 노트의 항목들을 클리어하거나 깊이 공부해서 모아놓고 괜찮은 내용은 블로그에 작성해 지식을 나눈다.</p><blockquote><p>프로그래머의 길 멘토에게 묻다<br>   : <code>무지를 드러내라</code><br>   무지에 맞섬으로 지식을 습득해나가는 모습을 보여줘라</p></blockquote></li><li><p><strong>프로젝트를 통해 만든 것이 없다</strong></p><p>   분기, 반기, 연간 프로젝트를 계획해서 진행한다.</p><p>   <code>감당할 수 있는 범위의 프로젝트만</code> 계획하며 Plan B를 계획한다.</p><p>   작더라도 호기심을 자극하는 재미있는 프로젝트를 진행하자</p><blockquote><p>Velopert<br>   : <code>“매일 12시마다 한 시간씩만 투자해서 사이드 프로젝트를 진행하자!”</code><br>   이 약속을 지키기 위해서, 매일매일 개발 하는 걸, 유튜브에서 라이브 스트리밍을 해서 기록을 남기기로 했다<br>   <a href="https://velopert.com/3465" target="_blank" rel="noopener">가상화폐 모의 투자 / 거래소 개발기</a></p></blockquote></li><li><p><strong>겉핥기 학습 &amp; 유행 따라가기</strong></p><p>   사전에 겉핥기로 봐야 되는 부분과 깊게 고뇌하며 공부해야 할 것이 무엇인지 판단하자</p><p>   만약 공부해야 될 부분이 변하지 않는 지식이라면 절대 겉핥기 식으로 보지 않도록 한다.</p><p>   <code>같은 걸 여러 번 만들어서 실력을 쌓는다</code></p><p>   <code>괴롭더라도 러닝 커브를 극복하고 이겨내며 다음 단계로 넘어가는 방법을 모색해보자</code></p><blockquote><p>토비의 스프링 이일민<br>   : 내가 무엇을 포기할지 먼저 정하자.<br>   새로운 기술이 너무 많아 이것저것 다 하면 아무것도 못한다.  </p></blockquote></li></ul><ul><li><p><strong>Why가 아닌 How</strong></p><p>   프로그래머의 길 멘토에게 묻다를 보면 <code>동기부여가 되는 일을 기억해서 계속 상기</code>시키는 걸 추천한다.</p><p>   러닝 커브를 만나는 나는 도망치는 걸 선호하는 것 같으니 어떻게든 도전하여 쟁취하는 습관과</p><p>   마인드를 갖두도록 해야겠다.</p><blockquote><p>Okky by fender<br>어떻게보다 왜가 궁금했다면 일단 무슨 오류가 왜 발생했는지 읽어라도 보았을 테고,<br>혼자 해결을 못해서 검색으로 답을 찾더라도 왜 그렇게 하면 문제가 해결이 되는지 이해할 수 있을 것입니다.<br>개발자의 실력은 그렇게 느는 것인데, 그 과정을 통째로 생략하고 그냥 이렇게 생긴 메시지가 나오면<br>  어떻게 하는지 <code>찾아 외우겠다는 식으로 접근해선 경력이 아무리 쌓여도 이른바 통밥만 늘지 개발 실력은 제자리걸음</code>이 됩니다. </p></blockquote></li><li><p><strong>취업 의식</strong></p><p>   불안해서 취업만을 생각하는 공부를 하지 않도록 한다.</p><p>   흔들리지 않고 꾸준히만 공부 해나간다면 트렌드에 흔들리지 않을 수 있을 것이다</p><blockquote><p>넥슨 박종천 VP<br>   : <code>새가 부러질 수도 있는 나뭇가지에 앉아 있는 것은 나뭇가지가 부러질 것을 두려워하지 않는 것이 아니라     부러져도 날 수 있는 날개가 있기 때문이다.</code><br>   소프트웨어를 쉽게 개발하는 것이 중요한 것이 아니다. 그 이면에 있는 기술력이 중요하다.<br>   지금부터 착실히 내실을 다지고 그것을 잘 배우며 다른 사람과 충돌하지 않고 착하게 지낼 수 있다면<br>   그것은 그 사람만의 경쟁력이 될 수 있다</p></blockquote></li><li><p><strong>스터디 실패</strong></p><p>   불필요한 스터디는 하지 않는다.</p><p>   스터디를 한다고 그 지식이 모두 내 것이 될 것이라고 착각하지 않는다.</p><p>   감당할 수 있는 시간의 스터디만 한다.</p><p>   나의 부주의로 다른 스터디원에게 피해를 주지 않는다.</p><p>   <code>이제는 스터디를 주도해서 열고 함께 공부하는 법도 배우도록 할 생각이다</code></p><blockquote><p>자바지기 박재성<br>   : 사람을 구하는 방향을 바꾸자. <code>나보다 잘난 사람보다는 나와 성향이 비슷한 사람</code>을 찾자.<br>   나와 성향이 맞는 사람을 찾으려면 <code>나를 드러내야 한다.</code><br>   <code>맞으면 계속 같이 가는 거고, 아니면 그만 보면 된다.</code></p></blockquote></li></ul><hr><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><p><strong>이상한모임의 주제는 회고</strong>였고 그 덕분에 2017년 개발자로서의 첫걸음을 분석할 수 있었다.<br>이 회고가 나에게는 너무 큰 도움이 되었고 누군가에게도 도움이 되었으면 좋겠다</p><blockquote><p><code>세상은 넓고 천재는 많다. 똑똑한 개발자도 많고 나보다 더 노력하는 개발자도 많다.</code><br>부족한 점을 깔끔히 인정하고 적절한 자존감을 유지해야 꾸준한 학습을 할 수 있다.<br>2018년에는 2017년보다 더 성장해서 개발자 다운 개발자가 되고 싶다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017년을 회고하며 2018년을 약속하기 &amp;amp; 좋은 개발자 되기&lt;/p&gt;
    
    </summary>
    
      <category term="column" scheme="https://devjang.github.io/categories/column/"/>
    
    
      <category term="신입 개발자 멘토" scheme="https://devjang.github.io/tags/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%A9%98%ED%86%A0/"/>
    
      <category term="2017 개발자 회고" scheme="https://devjang.github.io/tags/2017-%EA%B0%9C%EB%B0%9C%EC%9E%90-%ED%9A%8C%EA%B3%A0/"/>
    
  </entry>
  
</feed>
