<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>준이어데브</title>
        <description>야금야금 모으는 지식 저장소</description>
        <link>junebuug.github.io/</link>
        <atom:link href="junebuug.github.io/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 04 May 2019 14:24:06 +0000</pubDate>
        <lastBuildDate>Sat, 04 May 2019 14:24:06 +0000</lastBuildDate>
        <generator>Jekyll v3.8.5</generator>
        <image>
        <url>https://junebuug.github.io/assets/favicon-32x32.png</url>
		<title>준이어데브</title>
		<link>junebuug.github.io </link>
        </image>
        
        <item>
            <title>MIL(Monthly I learned) 4월 공유</title>
            <description>&lt;p&gt;TIL (Today I Learned) 는 매일 매일 배운 점을 적는 것인데요.&lt;/p&gt;

&lt;p&gt;매일 매일 무언가를 지속해나간다는 건 참으로 힘든 일이네요.&lt;/p&gt;

&lt;p&gt;그래도 다달이 하나쯤 공유하는 건 어렵지 않을 테니, 열심히 정리해보려고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;dto-data-transfer-object-만들-때-annotation-팁&quot;&gt;DTO (Data Transfer Object) 만들 때 annotation 팁&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;필드 하나만 바꿔야 하면 JsonProperty,&lt;/li&gt;
  &lt;li&gt;클래스 레벨에서 전략을 적용해서 일괄로 바꾸려면 JsonNaming,&lt;/li&gt;
  &lt;li&gt;애플리케이션 전체에서 전략을 적용해서 일괄로 바꾸려면 프로퍼티 파일에서 spring.jackson.property-naming-strateg 을 통해 바꾸면 엄청 편해요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;by 사수님&lt;/p&gt;

&lt;h3 id=&quot;jpa-에서-여러-칼럼을-합쳐서-unique-key를-걸고-싶을-때&quot;&gt;JPA 에서 여러 칼럼을 합쳐서 unique key를 걸고 싶을 때&lt;/h3&gt;

&lt;p&gt;예를 들어 칼럼에 이름와 이메일이 있는데 합쳐서 unique key를 걸고 싶다는 말은,&lt;/p&gt;

&lt;p&gt;(june, “abcd@naver.com”) 과 (june, “abcd@gmail.com”) 은 중복해서 들어갈 수 있지만&lt;/p&gt;

&lt;p&gt;이름도 이메일도 같은 경우는 들어갈 수 없다는 것이다.&lt;/p&gt;

&lt;p&gt;그럴 땐 엔티티 위에 다음과 같이 적어주자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;테이블이름&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;uniqueConstraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@UniqueConstraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columnNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;칼럼이름1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;칼럼이름2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;칼럼이름3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;querydsl-에서-앞뒤로-like검색하기&quot;&gt;queryDsl 에서 앞뒤로 Like검색하기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;containsIgnoreCase&lt;/code&gt; 사용&lt;/p&gt;

&lt;h3 id=&quot;java-optional-사용-시&quot;&gt;Java Optional 사용 시&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;orElseThrow 는 getOrElseThrow 를 줄인 것. 즉, empty도 잡아준다 !&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jpa에서-id-list로-검색하고-싶을-때&quot;&gt;JPA에서 id List로 검색하고 싶을 때&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findByIdIn&lt;/code&gt; 을 사용하면 된다. idList를 넘겨주면 해당하는 값들이 entity로 뽑혀나온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하지만 주의! idList의 순서대로 나오지는 않는다. 테이블에서 매긴 랭크 (id 값)으로 나옴.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그래서 나는 따로 stream으로 sorted 해주었다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted(Comparator.comparingInt(o -&amp;gt; idList.getIndexof(o.getId)))&lt;/code&gt; 였던 것 같은데. 소스가 기억은 안난다. idList의 인덱스로 비교해서 다시 정렬해줌.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;매우 칭찬 받았다. 😙&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;brew-cask-와의-만남&quot;&gt;brew cask 와의 만남&lt;/h3&gt;

&lt;p&gt;java 11 로 업데이트하면서 만나게 되었음.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;커맨드라인에서 맥용 어플을 설치하게 해주는 유틸리티&lt;/li&gt;
  &lt;li&gt;즉, 그냥 앱들도 설치 가능&lt;/li&gt;
  &lt;li&gt;brew가 이미 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew tap caskroom/cask&lt;/code&gt; 로 설치가 가능함.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew cask search 어플이름&lt;/code&gt; 어플을 찾을수있음&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#1. Install homebrew&lt;/span&gt;

/usr/bin/ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2. Update homebrew if already installed:&lt;/span&gt;

brew update
&lt;span class=&quot;c&quot;&gt;# 3.  allow brew to lookup versions&lt;/span&gt;

brew tap caskroom/versions

&lt;span class=&quot;c&quot;&gt;# 4. list available java versions&lt;/span&gt;

brew search java

&lt;span class=&quot;c&quot;&gt;# Optional: to find out the minor version of java&lt;/span&gt;
brew cask info java8

&lt;span class=&quot;c&quot;&gt;# 5.install java 8 (or any other version available)&lt;/span&gt;
brew cask install java8

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deprecated-너는-어디까지-가니-&quot;&gt;@Deprecated 너는 어디까지 가니 🤔&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Deprecated 태그는 어디에나 붙을 수 있나?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정의를 보자&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONSTRUCTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCAL_VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;생성자, 필드, 로컬변수, 메소드, 패키지, 파라미터, 타입까지&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mockito-직관적으로-이해하기&quot;&gt;Mockito 직관적으로 이해하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@InjectMocks&lt;/code&gt; 는 위에 mock이나 spy로 표시한 애들을 넣어준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@mock&lt;/code&gt;은, 그냥 null로 표시 안될 깡통 instance 만들어주는거.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@spy&lt;/code&gt;는 실제로 동작하는 instance 만들어주는거. 안에 있는 로직이 다 돈다. 부분적으로 mocking해서 원하는 동작을 하게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MIL, 내받코리처럼 종종 써먹자 !&lt;/p&gt;
</description>
            <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
            <link>/2019-05-04/monthly-I-learned</link>
            <guid isPermaLink="true">junebuug.github.io/2019-05-04/monthly-I-learned</guid>
            
            <category>Java</category>
            
            <category>CodeReview</category>
            
            
        </item>
        
        <item>
            <title>NDC(Nexon Developer Conference) 2019, &lt;FIFA 온라인 4&gt; 서버 포스트모템 후기</title>
            <description>&lt;p&gt;발표자료는 올라올테지만, 가장 인상깊게 들었던 발표를 들으며 적었던 노트를 날것으로 (ㅋㅋ) 공유합니다.&lt;/p&gt;

&lt;h2 id=&quot;fifa-온라인-4-서버-포스트모템&quot;&gt;&amp;lt;FIFA 온라인 4&amp;gt; 서버 포스트모템&lt;/h2&gt;

&lt;p&gt;김에스더님 From EA Korea&lt;/p&gt;

&lt;p&gt;런칭 이전에 서버 준비과정부터 런칭 이후 운영 이슈까지 공유하고자 함&lt;/p&gt;

&lt;p&gt;Microservices on Kubernetes(오케스트레이션 툴)&lt;/p&gt;

&lt;h3 id=&quot;서버-아키텍쳐&quot;&gt;서버 아키텍쳐&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;피파온라인4는 FIFA시리즈 바탕 온라인 게임&lt;/li&gt;
  &lt;li&gt;아시아 4개국, PC와 모바일로 서비스 중&lt;/li&gt;
  &lt;li&gt;전작 피파3은 &lt;strong&gt;Monolithic Architecture&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;하나의 애플리케이션에 모든 구현이 담겨있었음 (Db- Game Server - User Interface)&lt;/li&gt;
      &lt;li&gt;세가지 단점
        &lt;ul&gt;
          &lt;li&gt;장애 → 전체 서비스 장애&lt;/li&gt;
          &lt;li&gt;작은 변경을 위해 전체 서버 빌드 및 배포 필요&lt;/li&gt;
          &lt;li&gt;비효율적인 서버 Scale out 비용 (휴일 등 트래픽 대응에 전체 서버를 스케일 아웃해야했음.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MicroService Architecture&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;여러개를 합쳐서 운영하는 방식&lt;/li&gt;
      &lt;li&gt;개발 속도가 빠르다&lt;/li&gt;
      &lt;li&gt;배포가 쉽다&lt;/li&gt;
      &lt;li&gt;서버 장애의 영향도가 일부 서비스에 국한된다&lt;/li&gt;
      &lt;li&gt;스케일링이 쉽고 효율적이다&lt;/li&gt;
      &lt;li&gt;백엔드는 RabbitMQ, MongoDB, Redis 등을 사용함.  (서비스 단의 메시지 통신을 위해 메시지 큐)&lt;/li&gt;
      &lt;li&gt;서비스 모니터링을 위한 Grafana 등으로 구성&lt;/li&gt;
      &lt;li&gt;대표적인 서비스 - GateWay, Auth, Session, API, Data, Log, Chat, Noti, Matchmaker&lt;/li&gt;
      &lt;li&gt;로그인 : Gateway가 받아서 처리할 수 있는 Authenticate 서비스에 보냄&lt;/li&gt;
      &lt;li&gt;전달하는 매개체는 RabbitMQ&lt;/li&gt;
      &lt;li&gt;훨씬 복잡한 구성이 있기때문에, hop이 길어지는 경우도 많음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;배포&quot;&gt;배포&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;배포해야 하는 대상이 너무 많음
    &lt;ul&gt;
      &lt;li&gt;게이트웨이&lt;/li&gt;
      &lt;li&gt;인증&lt;/li&gt;
      &lt;li&gt;알림&lt;/li&gt;
      &lt;li&gt;로그&lt;/li&gt;
      &lt;li&gt;데이터&lt;/li&gt;
      &lt;li&gt;매치메이킹 등 .. 40가지 서버 부자가 되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이렇게 많은 종류의 서비스를 라이브 서버에 어떻게 배포하지?
    &lt;ul&gt;
      &lt;li&gt;config 하나하나 작성해서 40번 올리면 되지 🙂&lt;/li&gt;
      &lt;li&gt;이걸 관리할 수 있는 오케스트레이션 툴&lt;/li&gt;
      &lt;li&gt;구동, 배포, 관리하기 위해서 &lt;strong&gt;Kubernetes를 사용&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;구글이 개발, 선택하게 된 이유 중&lt;/li&gt;
      &lt;li&gt;라이브 서비스를 하기에 적합한 툴이라는 생각이 들음
        &lt;ul&gt;
          &lt;li&gt;장애나 형상관리를 할 때 유용한 Feature 들&lt;/li&gt;
          &lt;li&gt;Rolling Update&lt;/li&gt;
          &lt;li&gt;Version Control&lt;/li&gt;
          &lt;li&gt;Auto Scaling&lt;/li&gt;
          &lt;li&gt;Resource Allocation 이 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;kubernetes-cluster&quot;&gt;Kubernetes Cluster&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Master - Node 의 단순한 구조&lt;/li&gt;
  &lt;li&gt;Master의 요소랑 일반 노드의 요소랑 다름&lt;/li&gt;
  &lt;li&gt;Master는 관리자 역할이 있으니까, 다양 - DNS 서버, API 서버, Scheduler, Controller Manager&lt;/li&gt;
  &lt;li&gt;클러스터 마스터에 명령을 내릴 때 실제 명령을 내리게 해주는 매개가 API 서버 (이를 통해 cluster 내에서, 그리고 관리자와 소통)&lt;/li&gt;
  &lt;li&gt;Node 내에는 Kubelet이라는 노드 agent가 뜸.&lt;/li&gt;
  &lt;li&gt;node 마다 role을 줄 수 있는데, role에 따라 어떤 서비스를 띄울 지 결정할 수 있음&lt;/li&gt;
  &lt;li&gt;e.g.) Backend node는 MQ들이 뜨고, Game node에는 API 서버, cronjobs, data server 가 뜨는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;서비스-배포-단계&quot;&gt;서비스 배포 단계&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;서비스 빌드 &amp;amp; 업로드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kubernetes Manifest 작성 ← 어려움&lt;/strong&gt;, Kubernetes 적용 config
    &lt;ul&gt;
      &lt;li&gt;작성하는 포맷이 복잡하여 작성 작업이 시간이 크게 소요됨&lt;/li&gt;
      &lt;li&gt;스키마가 다 다름&lt;/li&gt;
      &lt;li&gt;indentation 이 중요 ( yml 파일임 ㅠㅠ)&lt;/li&gt;
      &lt;li&gt;오타 등 실수가 감지하기 어려움&lt;/li&gt;
      &lt;li&gt;히스토리 관리와 공유가 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Helm이라는 패키지 매니저를 통해서 Manifest를 관리 및 배포 프로세스  구축 + Jenkins와 Herfos(?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Helm&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;버전 컨트롤 뿐아니라 manifest respository 구성 가능 → 어떻게 manifest 작성할지 막막할때 helm 오피셜 repo에서 fetch 해올수 있음&lt;/li&gt;
  &lt;li&gt;방식이 좀 달라서, 지속적으로 변경이 일어나는 상수 부분을 대체할 수 있음.&lt;/li&gt;
  &lt;li&gt;40개의 서비스 manifest에 버전이나 서버 갯수를 바꿔야한다면..?!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;배포-프로세스&quot;&gt;배포 프로세스&lt;/h4&gt;

&lt;p&gt;레포에 manifest 커밋 → 젠킨스 job CI → Jenkins가 helm repo에 manifest push → 서버에서 fetch 해감&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서버에 Manifest 적용하여 서비스 업데이트&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;장점&quot;&gt;장점&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;배포 히스토리 관리&lt;/li&gt;
  &lt;li&gt;Helm 기능으로 설정 오류 감소 , 오류 보정됨&lt;/li&gt;
  &lt;li&gt;팀내 sync up&lt;/li&gt;
  &lt;li&gt;작업시간 감소&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stability&quot;&gt;Stability&lt;/h3&gt;

&lt;p&gt;어떻게 서비스를 안정적으로 ?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서비스 오픈날도 장애없이 4개 국 동시 운영&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;장애 대비와 대응을 어떻게 했나? 🤨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Microservice Architecture&lt;/p&gt;

    &lt;p&gt;부하가 전체 서비스가 아닌 일부에만 영향을 준다!&lt;/p&gt;

    &lt;p&gt;match maker라든지 일부 서비스만 다운되면 로그인해서, 거래 시장 이용, 채팅 등은 문제가 없는 부분!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점일 때도 있었음..&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;어떤 서비스에 얼마만큼의 영향을 주는지 파악하기 힘들다&lt;/li&gt;
      &lt;li&gt;물리서버 발주하는 시점에서(ㅋㅋㅋ) 서비스가 얼마나 리소스를 사용하는지 모름! 😢&lt;/li&gt;
      &lt;li&gt;매치 1판 할때 어떤 서비스에 얼마만큼 부하가 발생하는지 명확하게 알 수 있을까..?&lt;/li&gt;
      &lt;li&gt;Monolithic 이면 부하만 보면 단순히 계산이 되는데!&lt;/li&gt;
      &lt;li&gt;Micro 인 경우 - Gateway 부하가 얼마고, log에, match maker에 부하가 얼마나 들어가는지 계산이 어려움. 커뮤니케이터인 RabbitMQ인 경우 MQ의 부하도 생각해야하고, DB도 생각하고 …&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;대규모 로드테스트를 하게 됨&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;대규모-로드테스트&quot;&gt;대규모 로드테스트&lt;/h4&gt;

&lt;p&gt;CBT나 OBT말고 대규모(동접 30만 기준)&lt;/p&gt;

&lt;p&gt;criteria를 정함 : &lt;strong&gt;서버가 초당 3만 건 요청을 처리할 수 있어야 부하를 견딜 수 있다!&lt;/strong&gt; 라고 생각함&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;유저 시나리오를 작성&lt;/li&gt;
  &lt;li&gt;AWS 로드 테스트 서버 구축
    &lt;ul&gt;
      &lt;li&gt;라이브 서버와 똑같이 Kubernetes 구성,  HA 구성, LoadBalancer도 붙임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로드 테스트 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;기준(criteria)을 통과할 때까지 반복 실행&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;뭐가-좋아요&quot;&gt;뭐가 좋아요?&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;부하가 높을 때만 발생하는 문제를 확인할 수 있음&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;e.g.) 부하가 높을 때 →  서비스의 메모리 100% 차는 현상&lt;/li&gt;
  &lt;li&gt;처음에 말한 목적처럼 &lt;strong&gt;리소스 측정해서 할당 할 수 있음&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;미처-대비하지-못한-문제&quot;&gt;미처 대비하지 못한 문제&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;패치 데이터 오류&lt;/li&gt;
  &lt;li&gt;발견하기 어려운 서버 코드 버그&lt;/li&gt;
  &lt;li&gt;CPU 나 메모리등의 서버 리소스 사용량 급증&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 문제가 발생했을 때 &lt;strong&gt;Kubernetes를 사용해서 해결&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;solution-1&quot;&gt;&lt;strong&gt;Solution #1&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Server Hotfix : Rolling Update&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;유저 몰래 업데이트 😗&lt;/li&gt;
  &lt;li&gt;점검 없이 rolling update 가능&lt;/li&gt;
  &lt;li&gt;단. 라이브 서비스 중에 재시작되어도 트랜잭션 처리 등 서버 임팩트가 없도록 보장되어야 함&lt;/li&gt;
  &lt;li&gt;에러를 쓰루하는 등의 처리가 명확하지 않으면 CS 처리로 해야함.. 조심해..😭&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;solution-2&quot;&gt;&lt;strong&gt;Solution #2&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;손쉬운 명령어로 빠른 Scale out&lt;/p&gt;

&lt;h5 id=&quot;solution-3&quot;&gt;&lt;strong&gt;Solution #3&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;auto scaling으로 자동 리소스 관리&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;미연에 장애를 관리할 수 있는 기능&lt;/li&gt;
  &lt;li&gt;“부하가 늘면 자동으로 늘어나네”&lt;/li&gt;
  &lt;li&gt;단, Scale in 이 될수도 있기때문에 이 경우를 고려해야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h3&gt;

&lt;p&gt;모니터링 시스템을 구축안해도 Kubernetes Dashboard를 만들어준다 ! 🙂&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만.. 사실상 모니터링보다는 관리자 작업 페이지에 가까움&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 구성 요소&lt;/li&gt;
  &lt;li&gt;리소스 사용량 확인&lt;/li&gt;
  &lt;li&gt;콘솔 로그 확인&lt;/li&gt;
  &lt;li&gt;서비스 생성 및 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 기능 제공!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리얼 타임으로 이걸 보기엔 괜찮지만 시간을 조절해서 볼수도 없다!&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;필요한-데이터는-뭐지-&quot;&gt;필요한 데이터는 뭐지 🤔&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;물리/VM 서버 상태&lt;/li&gt;
  &lt;li&gt;리소스 사용량&lt;/li&gt;
  &lt;li&gt;Kubernetes 서비스 상태&lt;/li&gt;
  &lt;li&gt;CCU 증감 추이  (게임 서비스의 데이터)&lt;/li&gt;
  &lt;li&gt;서버 응답 지연 및 에러 발견&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 세개는  다음과 같이 해결할 수있는데&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Cloud Engine을 사용! (무료)&lt;/li&gt;
  &lt;li&gt;DataDog같은 솔루션을 사용 (유료)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 두개는 다음과 같이 해결할 수있는데&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CCU API를 통해 감시&lt;/li&gt;
  &lt;li&gt;Sentry로 에러 감시&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;솔루션이 나눠져 있는데 통합해서 볼 수 없을까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;대시보드가 여러 개면&lt;/li&gt;
  &lt;li&gt;뭔가 문제가 있을 때 한번에 보고 파악하기가 어렵다 .&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;custom-monitoring-tool이-필요하다&quot;&gt;&lt;strong&gt;Custom Monitoring Tool이 필요하다!&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Kubernetes + Game Server를 다 보자&lt;/li&gt;
  &lt;li&gt;Kubernetes API Sever (모니터링 통해서 가져올수있는걸 준다)&lt;/li&gt;
  &lt;li&gt;cAdvisor는 container 의 상태를 가져와서 Kublet에게 주고. API Server가 가져가고 싶은것만 Kublet에서 fetch해서 가져감&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API Server → 프로메테우스에 저장하고 → Grafana(대시보드)&lt;/p&gt;

&lt;p&gt;대시보드가 없을때는 Manifest를 들어가서 확인해야했음 ㅠ.ㅠ&lt;/p&gt;

&lt;p&gt;NEEDS&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gateway 서버 100개면 평균적인 inbound outbound 값을 보여주고싶은데 그런 툴이 없어서 아직 custom 사용중.&lt;/li&gt;
  &lt;li&gt;처리 건수가 줄어들면 병목 상황을 감지 가능&lt;/li&gt;
  &lt;li&gt;Slow API 가 초당 몇개 발생하고 있는지!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;SUMMARY&lt;/h2&gt;

&lt;h3 id=&quot;microservice-단점&quot;&gt;MicroService 단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;nanoservice 가 될 수 있음 → 갯수가 너무 늘어남&lt;/li&gt;
  &lt;li&gt;서비스 개수만큼 관리비용이 크다&lt;/li&gt;
  &lt;li&gt;트랜잭션과 같은 로직 구현이 까다롭다
    &lt;ul&gt;
      &lt;li&gt;서비스가 여러개인데 같은 document 에 접근하려고 할 때 로직 구현 어렵&lt;/li&gt;
      &lt;li&gt;lock 걸때 지연속도가 늘어나서 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스 간 통신 시간만큼의 서비스 처리 속도 증가 (hop 마다 속도가 늘어남)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kubernetes-단점&quot;&gt;Kubernetes 단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;기본 구성이 매우 복잡하다&lt;/li&gt;
  &lt;li&gt;초기 프로세스를 구축하기 위해 많은 노력&lt;/li&gt;
  &lt;li&gt;소규모에 적합하지 않다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;장점-1&quot;&gt;장점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;다양한 기능 제공&lt;/li&gt;
  &lt;li&gt;오토스케일링, 롤링 업데이트, Failover 기능으로 라이브 운영에 적합&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;개인적으로는 게임 서버 뿐 아니라 어떤 서버든 적용되는 내용을 꼼꼼하게 설명해주셔서 좋았다.
아는게 조금 늘어났다고 좀더 이해되는게 너무 신기하고 (그래서 후기도 쓸 수 있었고 ㅋㅋ),
좀더 개발 세션 들어야겠다.&lt;/p&gt;

&lt;p&gt;위의 내용이 발표와 다르거나 틀린 점이 있는 경우 둥글게 댓글 부탁드립니다.&lt;/p&gt;
</description>
            <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
            <link>/2019-04-25/ndc-2019</link>
            <guid isPermaLink="true">junebuug.github.io/2019-04-25/ndc-2019</guid>
            
            <category>Conference</category>
            
            
        </item>
        
        <item>
            <title>스트레티지 패턴 🌚</title>
            <description>&lt;p&gt;HEAD FIRST DESIGN PATTERN 을 정리합니다.&lt;/p&gt;

&lt;h1 id=&quot;01-디자인-패턴-소개--그리고-스트레티지-패턴&quot;&gt;01 디자인 패턴 소개 , 그리고 스트레티지 패턴&lt;/h1&gt;

&lt;h2 id=&quot;상속의-문제점&quot;&gt;상속의 문제점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;서브 클래스에서 코드가 중복된다&lt;/li&gt;
  &lt;li&gt;모든 서브클래스의 행동을 알기가 어렵다&lt;/li&gt;
  &lt;li&gt;코드를 변경했을 때 원치 않는 서브클래스들에게 영향을 끼칠 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;duck-예제&quot;&gt;Duck 예제&lt;/h3&gt;

&lt;p&gt;Duck 종류를 총괄하는 Duck 클래스가 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 꽉&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 헤엄&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//오리모양 보여주기&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이를 상속하는 청둥오리도 있고 고무오리도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RubberDuck&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;고무 꽉&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Duck 이 날 수 있다는 점에 착안해 Duck 에 fly() 메소드를 추가했다&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 꽉&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 헤엄&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//오리모양 보여주기&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 새로 추가된 fly?&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러고 나서 보니… 고무 오리가 날 수 있게 됐다? 🤔&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RubberDuck&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;고무도 날 수 있다!!!! &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;날 수 없는 Duck 들은 Override 해서 날 수 없다고 말해주면 되겠네!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 날 수 없는 Duck이 추가될때마다 오버라이드를 끊임없이 해줘야한다!&lt;/p&gt;

&lt;p&gt;그리고 어떤 Duck들이 날 수 없는지 알 방법이 없네 😭&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flyable, Quackable 인터페이스를 만들어서, Duck에서 해당 메소드를 제거하고 필요한 Duck만 인터페이스 상속하게 하는 건 어떨까? RubberDuck extends Duck, implements Quackable 하는 식으로!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 코드 재사용성은 어떡할거야..? (Java 8이하에서는 interface에 default 메소드 를 사용할 수 없는 단점이 있었다.)&lt;/p&gt;

&lt;p&gt;일단 다음 원칙을 기억해서 해결방법을 도출해보자!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;디자인원칙 &lt;code class=&quot;highlighter-rouge&quot;&gt;애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리시킨다.&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;스트레티지-패턴-straetegy-패턴-등장-배경&quot;&gt;스트레티지 패턴 (Straetegy 패턴) 등장 배경&lt;/h2&gt;

&lt;h3 id=&quot;duck-예제에서-달라지는-부분-뽑아보기&quot;&gt;Duck 예제에서 달라지는 부분 뽑아보기&lt;/h3&gt;

&lt;p&gt;fly와 quack은 오리마다 달라지는 부분이네? 이 메소드를 끄집어내서 새로운 클래스로 만들어버리자!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최대한 유연하게 만들어야 한다.
    &lt;ul&gt;
      &lt;li&gt;애초에 유연하지 못해서 이렇게 변경하게 생겼으니까💦&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오리의 행동을 동적으로 바꾸고싶다
    &lt;ul&gt;
      &lt;li&gt;세터 메소드를 만들어 변경할 수 있으면 좋겠네.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;그럼 아까 말한 대로 인터페이스를 뽑아내면 좋겠네.. 그런데 재사용성은 ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;디자인원칙 &lt;code class=&quot;highlighter-rouge&quot;&gt;구현이 아닌 인터페이스에 맞춰서 프로그래밍한다&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fly와 quack은 이제 duck에서 표현하지 않아! 대신 우리는 FlyBehavior와 QuackBehavior라는 &lt;strong&gt;인터페이스&lt;/strong&gt;를 만들 생각이야. 예를 들어 FlyBehavior를 상속하는 FlyWithWings 그리고 CantFly 클래스를 사용하면, 날수있는 애들과 못나는 애들끼리 코드를 재사용할 수 있다 👀&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아하, 그러면 구조가 어떻게 되는거야?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Setter&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Getter&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlyBehavior&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flyBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performFly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;flyBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlyBehavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlywithWings&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlyBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;난 날 수 있아!!!!!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Duck은 fly메소드를 갖지 않아. 대신 FlyBehavior를 멤버로 가지고. 이 멤버에 뭘 집어 넣어주는 지에 따라서 나는 방식이 달라지겠지?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MallardDuck&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MallardDuck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;flyBehavior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlyWithWings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 이 경우&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MallardDuck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MallardDuck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;performFly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &quot;난 날 수 있아!!!!!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;어떨 때는 A는 B이다(메소드, 멤버) 관계보다 A에는 B가 있다(구성) 관계가 나을 때도 있다.&lt;/p&gt;

&lt;p&gt;두 클래스를 이렇게 합치는 것을 &lt;strong&gt;구성(composition)&lt;/strong&gt;이라고 한다네. 구체적으로는 한 클래스가 다른 클래스를 멤버 변수로 갖는 걸 의미하고.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;디자인 원칙 &lt;code class=&quot;highlighter-rouge&quot;&gt;상속보다는 구성을 활용한다&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;무조건적으로 구성이 좋다는 건 아니고, 장단점을 배워야해.&lt;/p&gt;

&lt;p&gt;구성을 활용한 이 패턴은 스트레티지 패턴이라고 부른다. 이름이 겁나 와닿진 않는데, 일단 정의를 보면..&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;알고리즘군을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록만든다. 스트래티지를 활용하면 알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 변경할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 정의를 예제에 붙이면 클라이언트는 Duck, 알고리즘은 flyBehavior겠다.&lt;/p&gt;
</description>
            <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
            <link>/2019-04-17/design-pattern-strategy</link>
            <guid isPermaLink="true">junebuug.github.io/2019-04-17/design-pattern-strategy</guid>
            
            <category>DesignPattern</category>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>Redis 뭔지나 알고가자</title>
            <description>&lt;p&gt;프로젝트에서 like 를 Redis로 관리하고 있다.&lt;/p&gt;

&lt;p&gt;관련해서 한번 짚고 넘어가려고한다.&lt;/p&gt;

&lt;h2 id=&quot;redis&quot;&gt;Redis?&lt;/h2&gt;

&lt;p&gt;기본적으로 Storage, 즉 저장소이다. 가장 큰 특징은 메모리 기반의 Key-value 저장소라는 점이다.&lt;/p&gt;

&lt;p&gt;빠르고, 다양한 데이터 구조체(String, Set, Sorted Set ..)를 지원한다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;strong&gt;큐로도, Cache로도, Dictionary, 세션용도&lt;/strong&gt;로도 다양하게 사용할 수 있다!&lt;/p&gt;

&lt;p&gt;안정성은 보장할 수 없어서 주로 cache로 사용하는 모양이다.&lt;/p&gt;

&lt;p&gt;풀네임은 REmote DIctionary Sever. 공식홈페이지는 &lt;a href=&quot;https://redis.io/&quot;&gt;https://redis.io&lt;/a&gt; 다.&lt;/p&gt;

&lt;h3 id=&quot;key---value--특정한-키-값에-값을-저장한다&quot;&gt;KEY - VALUE : 특정한 키 값에 값을 저장한다&lt;/h3&gt;

&lt;p&gt;json 처럼, 하나의 key에 하나의 value를 매핑하는 형태로 되어있다. (value의 모양은 다양하다).&lt;/p&gt;

&lt;p&gt;key에 대해서 PUT, GET 하는 기능을 지원한다.&lt;/p&gt;

&lt;h3 id=&quot;다양한-데이터-구조체&quot;&gt;다양한 데이터 구조체&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;String
    &lt;ul&gt;
      &lt;li&gt;일반적인 문자열을 지원한다. Text 문자열 뿐 아니라 숫자나 이미지 같은 바이너리 파일도 저장이된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set
    &lt;ul&gt;
      &lt;li&gt;순서가 없는 집합이다. SET 간의 연산 (합집합, 교집합, 차집합)을 지원한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sorted Set
    &lt;ul&gt;
      &lt;li&gt;순서가 생긴 집합! 오름차순으로 내부 정렬된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hash
    &lt;ul&gt;
      &lt;li&gt;hash 자체는 field - string 쌍으로 이루어진 구조체이다. 결국 이를 redis에 저장하면 key- field - string 쌍이 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List
    &lt;ul&gt;
      &lt;li&gt;String의 집합이지만 link list같은 형태이다. 앞뒤로 push와 pop이 가능하며, 순서가 있어 특정 위치를 지정할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메모리면-너무-위험한데-디스크에-데이터-저장하는-건-없어&quot;&gt;메모리면 너무 위험한데.. 디스크에 데이터 저장하는 건 없어?&lt;/h3&gt;

&lt;p&gt;메모리에 데이터를 저장하면 서버가 꺼진 이후에는 데이터가 유실된다. 이런 것을 막기 위해서 디스크에 저장할 수 있다. 두 가지 방식이 있는 데 둘다 안일함..&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스냅샷 방식(RDB) 방식
    &lt;ul&gt;
      &lt;li&gt;순간적으로 메모리에 있는 내용을 전체를 사진을 찍어 옮겨 담는 방식
        &lt;ul&gt;
          &lt;li&gt;SAVE : 순간적으로 redis 동작을 정지시킨다음 사진을 찍는 방식&lt;/li&gt;
          &lt;li&gt;BGSAVE:  별도 프로세스를 띄워서 명령어 수행 당시의 사진을 찍음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;장점: 스냅샷 크기가 일정하고, 서버 리스타트시 스냅샷만 로드하면 되므로 리스타트 시간이 빠르다&lt;/li&gt;
      &lt;li&gt;단점: 스냅샷 시점 이후의 데이터를 유실된다. 스냅샷을 찍는데 오래걸린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AOF 방식 (Append On File)
    &lt;ul&gt;
      &lt;li&gt;사용된 명령어들을 모두 로깅하는 방식. 서버가 재시작되면 순차적으로 명령어를 실행해서 데이터를 복구한다.
        &lt;ul&gt;
          &lt;li&gt;장점: 로그파일에 append하기때문에 log write 속도가 빠르고, 서버가 다운되더라도 해당 시점까지 복구가 가능함&lt;/li&gt;
          &lt;li&gt;단점: 무한히 늘어나는 로그파일… 데이터양이 갈수록 커진다. 따라서 리스타트 후 데이터가 복구되는 시간도 길다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;요거를 좀 보완하기 위해서 &lt;strong&gt;rewrite&lt;/strong&gt; 를 하기도 한다. write - delete 명령이 있다면 이를 삭제해서 좀 줄이는 식이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;둘다 장단이 있고 안일해서(…) 섞어 써야한다고 한다.&lt;/p&gt;

&lt;h3 id=&quot;싱글스레드-입니다&quot;&gt;싱글스레드 입니다&lt;/h3&gt;

&lt;p&gt;싱글스레드이기때문에 keys() 같은 명령어를 때리면 무한히 뒤에 명령어들이 기다리게 된다.&lt;/p&gt;

&lt;p&gt;유의합시다~,~&lt;/p&gt;

&lt;h3 id=&quot;master---slave-그리고-sentinel&quot;&gt;Master - Slave, 그리고 Sentinel&lt;/h3&gt;

&lt;p&gt;Redis 한대로는 유실의 위험이 계속 있고, Redis 자체가 죽을 경우가 있다.&lt;/p&gt;

&lt;p&gt;이때를 대비해서 Slave를 만든다. 그리고 주기적으로 master 정보를 slave에 내려준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-03-29/redis-ha.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마스터와 슬레이브만으로는 서버가 내려갔을 때 보장을 하기가 어렵기 때문에 sentinel이라는 보초를 단다.&lt;/p&gt;

&lt;p&gt;그래서 마스터와 슬레이브가 살아있는지 계속해서 감시한다.&lt;/p&gt;

&lt;p&gt;안일한(…) redis에 비해 redis client는 상당히 스마트해야한다.&lt;/p&gt;

&lt;p&gt;맨 처음에 바로 master에게 가는 게 아니라&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sentinel에 먼저 master가 떠있는지 물어보고, 마스터에 접근해서 액션을 수행&lt;/strong&gt;한다.&lt;/p&gt;

&lt;p&gt;우리의 redis master는 sentinel이 자기를 감시하고 있는지도 모른다. 맹충이&lt;/p&gt;

&lt;p&gt;sentinel은 master에 문제가 생길 경우에 바로 slave에 바꿔치기하는 failover 를 수행한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;redis-cluster&quot;&gt;Redis Cluster&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;목적&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1000대의 노드까지 확장할 수 있도록 설계되었다 (서버의 갯수를 늘리는, scale out)&lt;/p&gt;

&lt;p&gt;노드를 추가하거나 삭제할 때 클러스터 전체를 중지할 필요가 없게&lt;/p&gt;

&lt;p&gt;키 이동시에만 해당 키에 대해서 잠시 멈출 수 있다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그러면 키 할당은 어떻게 나눠?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;입력된 키가 있다고 하자. 그리고 레디스 서버가 10대 있다고 하자.&lt;/p&gt;

&lt;p&gt;이때 입력된 키를 1-100 사이의 숫자로 바꿔주는 해시 함수(Hash function) 을 적용해서 변환한다.&lt;/p&gt;

&lt;p&gt;그리고 1-10 의 키는 1번 서버에, 11-20은 2번 서버에, … 91-100번은 10번 서버에 할당한다.&lt;/p&gt;

&lt;p&gt;이때 1-100의 숫자를 슬롯이라고  말한다.&lt;/p&gt;

&lt;p&gt;레디스 클러스터는 16384개의 슬롯을 사용한다. (2의 13승이네)&lt;/p&gt;

&lt;p&gt;레디스 노드(서버)가 3개 일 경우, 1번 노드는 0-5460, 2번 노드는 5461 - 10922, 3번 노드는 10923-16383 슬롯을 갖게 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;얘네도 센티널 필요함?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;레디스 클러스터에는 별도의 센티널이 필요없다.&lt;/p&gt;

&lt;p&gt;센티널이 해주는 장애조치(failover)를 서로 서로 해주기 때문인데, 한 마스터가 다운될 경우 다른 마스터들이 장애조치를 진행한다. 마스터가 다운되어도 걱정 말라구~ 🙈&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;못하는 건 뭐야?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 transaction이라고 부르는, 멀티 키 명령어는 못씀. (특히 data merge!)&lt;/p&gt;

&lt;p&gt;transaction이라고 하면 보통 명령어의 묶음이 atomic하게 (all or nothing)으로 실행되는 걸 의미하는데,&lt;/p&gt;

&lt;p&gt;redis에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MULTI&lt;/code&gt;라는 명령어로 transaction 을 시작한다.&lt;/p&gt;

&lt;p&gt;하지만 redis cluster에서는 이런 명령을 수행할 수 없다! 일단 키들이 나눠져있는데, data merge를 실행한다고 하면 노드간 데이터를 전송해야한다. 성능이 우선인 redis에는 그런게 병목현상이 될 수 있고, 치명적인 현상이 되기 때문임!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redisgate.jp/redis/cluster/cluster_introduction.php&quot;&gt;http://redisgate.jp/redis/cluster/cluster_introduction.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bcho.tistory.com/654&quot;&gt;https://bcho.tistory.com/654&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
            <link>/2019-03-29/redis-basics</link>
            <guid isPermaLink="true">junebuug.github.io/2019-03-29/redis-basics</guid>
            
            <category>Redis</category>
            
            
        </item>
        
        <item>
            <title>JAVA url 매핑 정규식 공유</title>
            <description>&lt;p&gt;테스트를 8개 정도밖에 만들지 못했지만, 
일단 원하는 바에 부합하는 정규식인 듯 하여 블로그에 작성해 둡니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-regex&quot;&gt;^((http|https)://)?(www.)?([a-zA-Z0-9]+)\.[a-z]+([a-zA-Z0-9.?#]+)?
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;http나 https로 시작하는 경우에는 ://가 반드시 붙는다. Optional.&lt;/li&gt;
  &lt;li&gt;www. 로 시작하는 경우가 있다. Optional.&lt;/li&gt;
  &lt;li&gt;알파벳 혹은 숫자를 포함한 문자열이 반드시 1개 이상 있다.&lt;/li&gt;
  &lt;li&gt;이후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 이 반드시 하나 포함된다. (.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 를 기점으로 이후에 소문자가 반드시 1개 이상 포함됨&lt;/li&gt;
  &lt;li&gt;이후에는 계속해서 영문자, 숫자, 특수문자가 붙을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java String으로는 다음과 같이 표기&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;^((http|https)://)?(www.)?([a-zA-Z0-9]+)\\.[a-z]+([a-zA-z0-9.?#]+)?&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;june (x)&lt;/li&gt;
  &lt;li&gt;website (x)&lt;/li&gt;
  &lt;li&gt;http:web.site(x)&lt;/li&gt;
  &lt;li&gt;naver.com (O)&lt;/li&gt;
  &lt;li&gt;www.web.site(O)&lt;/li&gt;
  &lt;li&gt;https://web.site.sth(O)&lt;/li&gt;
  &lt;li&gt;http://web.site(O)&lt;/li&gt;
  &lt;li&gt;https://june.me(O)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.regexplanet.com/share/index.html?share=yyyyuw9406r&quot;&gt;데모보기&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
            <link>/2019-03-04/java-url-regex</link>
            <guid isPermaLink="true">junebuug.github.io/2019-03-04/java-url-regex</guid>
            
            <category>Java</category>
            
            <category>Regex</category>
            
            
        </item>
        
        <item>
            <title>JPA 영속성 컨텍스트 정리</title>
            <description>&lt;h2 id=&quot;영속성-컨텍스트&quot;&gt;영속성 컨텍스트&lt;/h2&gt;

&lt;p&gt;JPA를 사용하고 테스트를 짜다보면 영속성 컨텍스트를 몰라서 오류를 겪게되는 일이 생긴다.&lt;/p&gt;

&lt;p&gt;그래서 한번은 짚고 넘어가야겠다는 생각에 참고글을 나름대로 정리해보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2019-02-28/persistence.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정의&quot;&gt;정의&lt;/h2&gt;

&lt;p&gt;영속성 컨텍스트는 엔티티를 저장하는 환경이다. 엔티티 하나하나를 식별자 값(&lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt;)로 구한다.&lt;/p&gt;

&lt;p&gt;이 컨텍스트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager&lt;/code&gt; 객체 당 하나가 만들어진다. (Manager는 팩토리에서 만들어진다.)&lt;/p&gt;

&lt;p&gt;위 그림에서의 메소드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EntityManager.persist(entity)&lt;/code&gt; 형태로 호출한다.&lt;/p&gt;

&lt;p&gt;영속성 컨텍스트가 관리하는 엔티티는 &lt;code class=&quot;highlighter-rouge&quot;&gt;영속상태(managed)&lt;/code&gt;라고 말한다.&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JPA는 트랜잭션을 커밋하는 순간, 영속성 컨텍스트에 새롭게 저장된 엔티티를 데이터베이스에 반영한다.&lt;/p&gt;

    &lt;p&gt;(컨텍스트에 저장되는 순간 DB에 바로 반영되는 게 아님 =) )&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;1차 캐시 사용&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;영속성 컨텍스트는 Map 형태로 엔티티를 저장하는데, 이를 &lt;strong&gt;1차 캐시&lt;/strong&gt;라고 부른다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;entityManager.find()&lt;/code&gt;를 호출하면 1차 캐시를 뒤져서 먼저 찾고, 만약 없으면 DB에서 조회해서 1차 캐시로 가져온다. 그 다음 영속상태인 해당 객체를 반환한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;객체 동일성 보장&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;위에서 말했듯이 1차 캐시에 있는 Entity인스턴스를 반환하기때문에 같은 객체임을 보장한다! (key가 id인 map을 캐시로 사용하기 때문!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;쓰기 지연 지원&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;트랜잭션 커밋하기 전까지 entity를 DB에 저장하지 않고, 영속성 컨텍스트 내부에 SQL 저장소에 생성 쿼리를 저장해둔다.  트랜잭션을 커밋하면 저장소에 일괄 SQL를 보내서 저장한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;변경 감지&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;스냅샷이 존재해서,  flush 시점에 스냅샷과 엔티티를 비교해서 변경된 entity를 찾는다. 있으면 수정 쿼리를 날린다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;지연 로딩&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;프록시 객체를 로딩해두고 실제 사용할 때만 영속성 컨텍스트를 통해 데이터를 불러오는 방법.&lt;/p&gt;

    &lt;p&gt;User 내부에  Badge 객체가 있으면, User를 로딩할 땐 Badge 프록시만 가져온다. 실제 badge에 접근할 때 영속성 컨텍스트에 있는 Badge 인스턴스를 가져온다.&lt;/p&gt;

    &lt;p&gt;따라서 detached 상태이면 - 프록시 객체만 있는데 원본과의 연결이 없으므로 지연로딩이 불가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;cascade 는 영속성을 따라 관리합니다&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;JPA 에서 엔티티 선언 시 cascade를 설정하면, 부모가 자식의 영속시점을 조절할 수 있다. 부모가 1차 캐시 들어갈 때 함께 같이 들어가고, 나올때 같이 나오는 등!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://hyeooona825.tistory.com/87&quot;&gt;https://hyeooona825.tistory.com/87&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-28/jpa-persistence</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-28/jpa-persistence</guid>
            
            <category>JPA</category>
            
            <category>PersistenceContext</category>
            
            
        </item>
        
        <item>
            <title>Webpack과 babel이 뭐요</title>
            <description>&lt;p&gt;vue를 어설프게 써보려고, vue-cli 모듈로 프로젝트를 만들면 이런 설명부터 나온다. ‘그냥 디폴트 스펙(webpack &amp;amp; babel) 깔아줄까? 아니면 다른 모듈쓸래? ^_^’ 물론 webpack이랑 babel을 모르면 무슨 얘기인지 모르고 ‘ㅇㅇ.. 깔아줘…’ 할 수밖에 없지만, 그러기에는 너무 바보같으니까 정리해보기로 한다.&lt;/p&gt;

&lt;h2 id=&quot;뭐-자바스크립트는-모듈-import-개념이-없었다고&quot;&gt;뭐 자바스크립트는 모듈 import 개념이 없었다고&lt;/h2&gt;

&lt;p&gt;자바스크립트는 모듈을 지원하지 않는다. 아니 않았다. (ES5) 아니 그러면 한 파일에 모든 코드를 때려넣어야하니..? 하고 생각하면 그것도 아니라고 한다. 커뮤니티에서 이 현실을 개탄하면서 어떻게든 코드를 모듈화 하고 서로 임포트하는 개념을 만들어 냈다. 그렇게 등장한 두가지 스탠다드가 바로 CommonJS 모듈 (node.js 가 쓰는) 과 Asynchronous Module Definition(RequireJS 사용하는) 이다.&lt;/p&gt;

&lt;p&gt;아니, 그렇지만 아무리 그래도 모듈 개념이 없는 건 너무 하잖아.. 하면서 자바스크립트에 새로운 표준이 생겼다. 바로 ECMAScript6 (ES6)다. ES6는 위의 두 스탠다드의 특장점들을 가져와서 새로운 포맷을 만들어냈다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CommonJS 처럼 간결한 문법을 갖추어, 싱글 익스포트 와 순환 의존성 지원함.&lt;/li&gt;
  &lt;li&gt;AMD 처럼 바로 비동기 로딩과 (설정가능한) 모듈 로딩을 지원함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;거기에 ‘&lt;strong&gt;언어가 모듈을 지원하며’&lt;/strong&gt;  생기는 장점도 추가 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CommonJS보다 문법이 더 간결함.&lt;/li&gt;
  &lt;li&gt;구조가 static하게 분석 가능하고, 최적화도 됨.&lt;/li&gt;
  &lt;li&gt;CommonJS보다 순환 의존성 지원이 잘됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;그런데-브라우저는-여전히-파일-단위-모듈을-잘-모른다&quot;&gt;그런데 브라우저는 여전히 파일 단위 모듈을 잘 모른다&lt;/h2&gt;

&lt;p&gt;ES6는 일부 브라우저에서만 지원한다.(크롬, 사파리) 여러 버전의 각기 다른 브라우저는 이런 모듈화를 지원하지 않는 경우도 있다. 하나의 소스로 모든 브라우저에서 보여주는 게 웹의 특장점이다. 그래서 모듈을 하나의 파일로 묶어 네트워크 비용을 최소화 할 수 있어야한다. 이 과정을 번들링 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundling&lt;/code&gt; 이라고 한다.&lt;/p&gt;

&lt;p&gt;웹팩 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 은 모듈 번들러이다. 웹팩의 다음 네가지 개념을 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;엔트리&lt;/li&gt;
  &lt;li&gt;아웃풋&lt;/li&gt;
  &lt;li&gt;로더&lt;/li&gt;
  &lt;li&gt;플러그인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;엔트리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔트리는 의존성 그래프의 시작점을 의미한다. 엔트리 파일을 의존하는 파일은 없고, 엔트리가 A를 의존하고, A가 다시 B, C를 의존하고.. 하는 식으로 모듈이 연결된다. 이때 웹팩은 이미지, 폰트, 스타일시트 역시 모듈로 관리한다. 설정파일에서 엔트리 파일을 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// webpack.config.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./src/main.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 넣으면 시작점이 src/main.js 가 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;entry&lt;/code&gt; 키에 시작점 경로를 지정한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;아웃풋&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔트리에 설정한 자바스크립트 파일을 시작으로, 의존되어 있는 모듈을 하나로 묶어서 내보낸다 (번들링). 번들된 결과물이 나오는 위치는 &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; 키에 기록한다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// webpack.config.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.dist'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;dist 폴더에 bundle.js 파일에 결과가 나오게 된다.&lt;/p&gt;

&lt;p&gt;html 파일에는 번들링된 이 파일만 나오게 되면 된다.&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./dist/bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;웹팩을 터미널에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 커맨드를 입력하여 바로 빌드할 수 있다. vue-cli 를 사용하는 상황이었으니 기본으로 webpack은 설치되어있다. webpack이 없는 경우 node.js 설치 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g webpack&lt;/code&gt; 으로 전역 설치를 해준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;로더&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹팩은 자바스크립트 파일 뿐 아니라 이미지, 폰트, 스타일시트까지 전부 모듈로 관리한다. 그런데 어떻게 하는 걸까? 웹팩은 자바스크립트밖에 모른다. 자바스크립트가 아닌 파일들은 웹팩이 이해하도록 변경해야한다. 이 역할을 바로 로더가 해준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;css-loader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;css를 자바스크립트 파일로 변환해서 로딩할 때 사용하는 로더이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 설정해주자. test에 로딩할 파일을 지정해주고, user에 사용할 로더를 정해주면 된다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//webpack.config.js &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;플러그인&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;로더는 (번들되기 전) 파일단위를 처리하는 반면, 플러그인은 번들된 결과물을 추가로 처리한다. 번들된 자바스크립트를 난독화 한다거나 특정 텍스트를 추출하는 용도로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UglifyJsPlugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바스크립트 결과물을 난독화 처리하는 플러그인이다.&lt;/p&gt;

&lt;p&gt;플러그인을 사용할 때는 웹팩 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; 배열에 추가한다.&lt;/p&gt;

&lt;h2 id=&quot;바벨은-뭐야&quot;&gt;바벨은 뭐야&lt;/h2&gt;

&lt;p&gt;그놈의 브라우저가 계속 문제다. 어쨌든 저렇게 했음에도 불구하고, ES6나 ES7(최신표준) 브라우저가 이해하지 못하기때문에 ES5로 바꿔주는 과정이 필요하다. 이 과정을 해주는 자바스크립트 컴파일러가 &lt;strong&gt;바벨이다&lt;/strong&gt;. 개발자는 ES6 + 버전으로 개발할 수 있으니 생산성은 향상된다.&lt;/p&gt;

&lt;p&gt;다만 babel을 사용한다고 해서 모든 최신 자바스크립트 함수를 다 사용할 수 있는 것은 아니고, 브라우저에서 지원하지 않는 함수를 검사하는 작업이 프로그램 시작에 진행되어야한다. 이 역할은 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;이 담당한다.&lt;/p&gt;

&lt;p&gt;바벨은 다음과 같이 문법을 바꿔준다.&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 바벨 Input: ES2015(ES6)의  =&amp;gt; 문법 &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 결과는 [2,3,4]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 바벨 Output: ES5 호환 가능 &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;설치는-이렇게&quot;&gt;설치는 이렇게&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;커맨드 라인에 다음 명령어를 실행한다. 물론 npm은 깔려있어야한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @babel/core @babel/cli @babel/preset-env
npm install &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; @babel/polyfill
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;프로젝트 루트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;babel.config.js&lt;/code&gt; 라는 파일을 만든다. 그리고 다음과 같이 작성
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;s2&quot;&gt;&quot;@babel/env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;firefox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;60&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;67&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;safari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;11.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;usage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
 &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 디렉토리에 있는 모든 파일을 컴파일(babel 문법변환) 해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; 으로 옮겨준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다음 명령어를 치면 된다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./node_modules/.bin/babel src &lt;span class=&quot;nt&quot;&gt;--out-dir&lt;/span&gt; lib 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.jeonghwan.net/js/2017/05/15/webpack.html&quot;&gt;http://blog.jeonghwan.net/js/2017/05/15/webpack.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://moon9342.github.io/javascript-babel&quot;&gt;https://moon9342.github.io/javascript-babel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/en/&quot;&gt;https://babeljs.io/docs/en/&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-20/webpack-babel</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-20/webpack-babel</guid>
            
            <category>FE</category>
            
            <category>Javascript</category>
            
            
        </item>
        
        <item>
            <title>Netflix Zuul - 요청을 다른데로 보내고 싶다면</title>
            <description>&lt;h2 id=&quot;zuul-을-만나다&quot;&gt;Zuul 을 만나다&lt;/h2&gt;

&lt;p&gt;사건의 발단&lt;/p&gt;

&lt;p&gt;서비스용 Stat 페이지를 운영툴에 붙이고 싶었다. 이 Stat 페이지는 vue 코드가,  elastic search API를 찔러야하는 구조로 되어있고, elastic search가 설치된 서버는 물론~ &lt;strong&gt;운영툴의 도메인과는 다른 도메인&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;같은 vue로 되어있는 운영툴 frontend에 떡하니 붙여보니, 운영툴 FE 도메인이 다른 도메인에 요청을 보내므로 CORS가 뜬다.&lt;/p&gt;

&lt;p&gt;운영툴의 backend 는 frontend와 같은 도메인이므로 CORS 에러가 나지 않는다.&lt;/p&gt;

&lt;p&gt;따라서 이런 결론에 다다르게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;backend에서 특정 uri로 들어온 요청을 elastic search로 프록시해주자!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 이미 프로젝트에서 같은 목적으로 쓰고 있던 zuul을 사용 해보게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;zuul&quot;&gt;Zuul?&lt;/h2&gt;

&lt;p&gt;참고한 링크를 보면 Zuul에 대한 설명이 나와있다. ‘Zuul은 모든 디바이스/웹사이트에서 넷플릭스 백엔드에 보내는 요청의 &lt;strong&gt;앞문&lt;/strong&gt;이다. Zuul은 동적 라우팅, 모니터링, 탄성, 그리고 보안을 가능하게 만들어졌다.’&lt;/p&gt;

&lt;p&gt;즉, client가 요청을 zuul에 보내고, zuul 을 통해서 넷플릭스의 백엔드 서비스로 퍼지게 된다.&lt;/p&gt;

&lt;p&gt;넷플릭스는 시스템들이 복잡하게 엮여 있고, 1,000 개 이상의 디바이스 종류를 지원하며, 초당 5만 건 이상의 요청을 처리하는 API를 갖고 있다. 또한 매일매일 피쳐를 새롭게 개발하며, 계속해서 변경점이 생긴다. 새로운 AWS 리전에 배포를 시작하고, UI에서도 변경점이 계속 만들어진다. 이런 변화에 대응하기 위해서, 빠른 개발, 높은 유연성, 인사이트가 필요했다. 이를 해결해줄 것이 바로 Zuul인것이고!&lt;/p&gt;

&lt;h2 id=&quot;어떻게-작동하나&quot;&gt;어떻게 작동하나?&lt;/h2&gt;

&lt;p&gt;Zuul의 핵심에는 HTTP 요청과 응답을 라우팅하는 과정에서 특정 액션을 수행하는 &lt;strong&gt;필터&lt;/strong&gt;들이 있다. Zuul 필터의 핵심 특징은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type: 라우팅 플로우 중에 필터가 어디에 적용될지를 의미한다 ( 라우팅 훨씬 전에, 직전에, 이후에 등)&lt;/li&gt;
  &lt;li&gt;Execution Order: 여러 필터 중 몇번째로 실행될 것인지 의미한다. Type과 관련되어 있음.&lt;/li&gt;
  &lt;li&gt;Criteria: 필터가 작동할 조건을 의미한다.&lt;/li&gt;
  &lt;li&gt;Action: 조건(위의 Criteria)가 만족할때 어떤 행동을 할 것인지 정의한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래는 simple filter의 예이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceDelayFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZuulFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ZuulFilter를 꼭 상속해야함 &lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필터 종류 - pre, route, post 가 있다. FilterConstant에서 참조&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5번째로 실행됨 &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 받은 Request의 deviceType이 BrokenDevice인 경우 필터 실행  &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deviceType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BrokenDevice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Sleep for a random number of&lt;/span&gt;
                                    &lt;span class=&quot;c1&quot;&gt;// seconds between [0-20]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Zuul 은 이런 필터를 동적으로 읽고, 컴파일하고, 동작하는 프레임워크를 제공한다. 필터는 서로 직접적으로 통신하진 않고, 각 Request 마다 유니크하게 생성되는 RequstContext라는 상태를 공유한다. 현재는 필터가 Groovy로 쓰여있지만, Zuul은 JVM 기반 언어를 모두 지원한다. 각 필터의 소스코드는 줄 서버의 특정 디렉토리에 들어가 있고, 변경사항이 있는지 주기적으로 poll 을 돌린다. 업데이트된 필터를 디스크에서 가져와서, 현재 돌고 있는 서버에 &lt;strong&gt;동적으로 컴파일&lt;/strong&gt;되고 이후 요청부터는 &lt;strong&gt;변경된 필터로 동작&lt;/strong&gt;한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.us-west-2.amazonaws.com/secure.notion-static.com/329ea0af-fea9-4dad-8aa8-3d9de0d3f819/ZuulCoreArchitecture.png?AWSAccessKeyId=ASIAT73L2G45L275FNDU&amp;amp;Expires=1550730857&amp;amp;Signature=diHrb1o0v5A8yrUfSFzvNz9ml8s%3D&amp;amp;response-content-disposition=filename%20%3D%22ZuulCoreArchitecture.png%22&amp;amp;x-amz-security-token=FQoGZXIvYXdzEB0aDPf98Z%2Bi4prKSNHuxyK3A4G%2FPnmeCYjIYt%2FeXjpJXAH9alQnzAgFdZhJ4g7MD2lAM%2BwazxmDW9y4ljTXZNjwHAO06iFH%2FyI00iDKYJcuMdZZrOom9gVRJSgcZzE%2FI3kWAcghtSzavHNgGlDjq4YZ%2Fz2gRbtCS25tJKRrXn9GjREznO498f2J0Fga5ohqJLNzZzl56sKEQfPLizHquP73ww3EQLUpBLjqUrabvtHdv7BspeJ1PxcFqijnkPxe67lGwwXddsVdz0kXpUj%2BRf2ZwV9RXYgGWu0jDdBEtie0LO8PVaWF36USjDKOBBb5YoHKcRMjEiqirkuqAq%2FiFXZGDWIiSZwEEbeqH5kpwOxyrbAQ7wx%2BTLIGsT5C2xrex6pGwsUazUFwMZm%2Fk3UIAZFeF%2FlVB6hrulaeJXNfmS%2F%2Fil8gR0bJR7dnw6Yqd%2BRcNJlWSwIVKYNrygVzpdcdMNf7MuMDthdUS2MCTdzk6EchLY3zxEiirjpi0cpgDQydOCEn8D0hWjM9TPNWmMjSlhxOfItJkeXPmO5QTXdErFFrjVsAfHzqdRMSMPqyC%2Bd8T3ntcxxT0R9JlLexQBaUzGlrXKSLpLJF4JUoj5Sz4wU%3D&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zuul의 핵심 아키텍처 구조.&lt;/p&gt;

&lt;p&gt;요청이 들어오면 통과하게되는 필터 타입들을 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PRE : 라우팅되기 전에 실행된다. 여기에서는 대개 요청에 대한 인증, origin server 선택, 디버깅 정보를 로깅하는 등의 일을 한다. (origin은 요청이 원래 도달해야하는 서버를 의미한다.)&lt;/li&gt;
  &lt;li&gt;ROUTING: origin으로의 요청 라우팅을 다룬다. origin에 보낼 HTTP Request가 생성되는 곳이자 Apache HttpClient 혹은 Netflix ribbon을 사용해서 보내지는 곳이다.&lt;/li&gt;
  &lt;li&gt;POST : 요청이 origin 에 도달한 이후 실행된다. 클라이언트에 보낼 응답에 HTTP header를 붙이거나, 통계나 지표 수집, origin 에서 client로 응답을 스트리밍하는 등에 사용한다.&lt;/li&gt;
  &lt;li&gt;ERROR: 다른 단계에서 에러가 발생하면 실행된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zuul에는 기본 필터들이 차례대로 실행되고, 그 중간에 &lt;strong&gt;custom filter&lt;/strong&gt;를 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;내 경우 origin에 해당하는 서버에 따로 인증을 했어야해서, Custom filter를 사용해서 라우팅 때 인증 정보를 함께 보내려고 맘을 먹었다. 이에 필요한 정보는 &lt;a href=&quot;https://supawer0728.github.io/2018/03/11/Spring-Cloud-Zuul/&quot;&gt;https://supawer0728.github.io/2018/03/11/Spring-Cloud-Zuul/&lt;/a&gt; 를 참고했다.&lt;/p&gt;

&lt;h2 id=&quot;프로젝트에-적용&quot;&gt;프로젝트에 적용&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;build.gradle에 의존성을 추가해준다.
    &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
     &lt;span class=&quot;c1&quot;&gt;// zuul&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.cloud:spring-cloud-starter-netflix-zuul:2.1.0.RC3'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Application.java 혹은 Config 파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableZuulProxy&lt;/code&gt; Annotation을 설정해준다. 프로젝트에서는 다음과 같은 ZuulConfig를 사용했다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableZuulProxy&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZuulConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 이따가 bean 설정을 넣을 것이다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;application.yml에 라우팅할 루트를 설정한다.
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;zuul&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
 &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;customRoute&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/api/custom&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://another-api.com/search&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;sensitive-headers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Cookie, Set-Cookie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 하면, 프로젝트 백엔드 서버 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;host명&amp;gt;/api/custom&lt;/code&gt; 하위로 요청이 들어가면 &lt;code class=&quot;highlighter-rouge&quot;&gt;[https://another-api.com/search](https://another-api.com/search)&lt;/code&gt; 에 요청이 라우팅된다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;another api&lt;/code&gt; 서버에 인증이 필요해서 custom filter에 authorization header를 따로 붙여줄 것이므로, sensitive-headers에 다른 헤더 명들만 명시해준다(Cookie, Set-Cookie).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Custom filter를 만든다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;내 경우  크게 두가지를 해주어야 했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;origin 서버에 대한 인증&lt;/li&gt;
  &lt;li&gt;uri 변경
    &lt;ul&gt;
      &lt;li&gt;위의 설정처럼 하면, origin으로 요청이 /search/api/custom으로 간다.&lt;/li&gt;
      &lt;li&gt;백엔드에서는 /api/custom 으로 요청을 보내고, origin에서는 요청이 search로 가도록 해주고 싶다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 요구조건을 Custom Filter로 해결할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomFilter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZuulFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CUSTOM_URI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api/custom&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTH_INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id:password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROUTE_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ROUTE 필터 소속&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIMPLE_HOST_ROUTING_FILTER_ORDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
                &lt;span class=&quot;c1&quot;&gt;// 원래 ROUTING 필터 직전에 호출해줌&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shouldFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 공통 변수인 RequestContext에서 요청이 /api/custom으로 올때만 필터 사용&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CUSTOM_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQUEST_URI_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZuulException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;basicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. auth 진행 &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;refineUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. uri 변경&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refineUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQUEST_URI_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQUEST_URI_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AUTH_INFO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addZuulRequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인증은 보통 Pre filter에서 한다-라고 대부분의 문서에 나와있지만,  이는 API GATEWAY에 대한 인증이었나보다… origin 에 대한 인증은 Route 필터에서 해야 동작했다. 이 필터는 이 custom api 에 대해서만 동작했으면 해서 shouldFilter로 조건을 부여했다. 이 부분이 위에서 말한 Criteria에 해당한다.&lt;/p&gt;

&lt;p&gt;filter가 실행되면&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;RequestContext에 인증 헤더를 붙이고&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URI를 변경하는 작업을 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Filter를 bean으로 등록한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아까 설정한 Config 내부에 bean으로 등록한다. application.java에서 해도 되지만 좀더 깔끔한 표현을 위해!&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableZuulProxy&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZuulConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이따가 bean 설정을 넣을 것이다&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomFilter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;테스트 해본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;POSTMAN으로 backend에 요청을 보내서 origin 에서 내려주는 응답이 오는지 확인해본다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;zuul은 적용하기도 쉽고, 손쉽게 CORS 오류를 피할 수 있는 방법이라 편리하게 사용했다.&lt;/p&gt;

&lt;p&gt;대용량 시스템에서의 로드밸런싱 등에도 효과적으로 사용할 수 있는 것으로 보이는데, 다음에 쓸일이 있으면 더 정리하도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://woowabros.github.io/r&amp;amp;d/2017/06/13/apigateway.html&quot;&gt;http://woowabros.github.io/r&amp;amp;d/2017/06/13/apigateway.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/netflix-techblog/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee&quot;&gt;https://medium.com/netflix-techblog/announcing-zuul-edge-service-in-the-cloud-ab3af5be08ee&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-20/netflix-zuul</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-20/netflix-zuul</guid>
            
            <category>Zuul</category>
            
            <category>proxy</category>
            
            
        </item>
        
        <item>
            <title>내받코리 1월,2월</title>
            <description>&lt;p&gt;이전에 &lt;a href=&quot;https://junebuug.github.io/2018-12-15/code-review-i-got&quot;&gt;내가 처음으로 받은 받은 JAVA 코드리뷰 모음&lt;/a&gt; 이라는 제목으로 글을 올렸었는데,&lt;/p&gt;

&lt;p&gt;그 이후에도 이건 &lt;strong&gt;꾸준히 하면 좋겠다!&lt;/strong&gt; 라는 생각이 들어서 또 다시 적습니다.&lt;/p&gt;

&lt;p&gt;2월에는 Vue 공부도 조금했는데, Java 코드리뷰가 아닌 관계로 제외되었더니 양이 적네요.&lt;/p&gt;

&lt;h2 id=&quot;보안이슈로-이전-api-deprecated&quot;&gt;보안이슈로 이전 API Deprecated&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;나중에 없앨 계획이시면 @deprecated 붙여 두시고, 언제 없앨 건지 커맨트 남겨두시면 좋습니다. swagger 에도 반영되었던 걸로 기억해요&lt;/li&gt;
  &lt;li&gt;반영 후 클라이언트에 API 변경 전달 부탁드려요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;회원-탈퇴로직&quot;&gt;회원 탈퇴로직&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;외부&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorReason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER_SESSION_INVALID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Exception이 항상 session invalid가 아닐 수도 있지 않을까요?외부Exception e를 살려두는게 도움이 될 것 같습니다!
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;assertThatExceptionOfType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isThrownBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;탈퇴&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;타입말고 에러메시지에서도 확인해 볼 수 있는데, 연습도 할겸 적용해 보셔요~&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;로그인-시-검사-로직&quot;&gt;로그인 시 검사 로직&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;앱 로그인 시에 login 을 먼저 호출하고, 아닌 경우 signup을 하므로 login 에 검사 로직을 추가했습니다.-&amp;gt; 호출 순서에 무관하게 막야야 하니…signup api 에도 체크 해야 하지않을까요?&lt;/li&gt;
  &lt;li&gt;상수 명이 REGION_CODE 인 것 보다는 REGION_JAPAN 처럼 일본임을 명시하는 게 자연스러울 것 같아요~&lt;/li&gt;
  &lt;li&gt;Locale.JAPAN.getCountry() 저는 이거 많이 사용하긴 했어요~&lt;/li&gt;
  &lt;li&gt;테스트 모킹 코드가 중복이 많은 것 같은데~ 별도 메서드로 분리하는 거 검토해보시면 좋을 것 같아요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;db-ddl-변경분-에-대해서&quot;&gt;DB DDL 변경분 에 대해서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ddl 파일에 칼럼 추가 부탁드려요.&lt;/li&gt;
  &lt;li&gt;국가코드 넣는거라면 CHAR(2)로 해도 될것같아요.
```java
  if (!응답.get정보().equals(상수)) {
    &lt;ul&gt;
      &lt;li&gt;throw new UserException(ErrorReason.User.NOT_SERVICED_REGION_CODE);&lt;/li&gt;
      &lt;li&gt;}
```&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;응답에 있는 정보는 항상 오는 걸까요? 혹시 모를 NPE를 막으려면,상수.equals(응답.get정보()) 가 낫겠네요~
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;HashMap을 쓰실거면 Map&amp;lt;String, Object&amp;gt; 로 받아주세요.간혹 HashMap 에만 있는 기능을 쓰는 케이스가 있긴하지만 많지는 않아서 꼭 필요한 경우아니면 interface로 받아주시는게 좋겠습니다~자매품 Collections 도 있습니다. java9으로 가면 이런것도 고민 좀 덜하게 될텐데 말이죠 쩝…
Collections.singletonMap()&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테스트-정리-pr&quot;&gt;테스트 정리 PR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;정리 잘하셨네요.&lt;/p&gt;

    &lt;p&gt;좀 더 단순하게 만들어서 더 줄일 수 있는지 포인트를 찾아보면 몇 군데 정도 더 줄 일 수 있을 것 같습니다.변수값을 보면 대부분 의미가 있는 경우가 아니어서 꼭 필요한 것들만 남기거나, method 로 객체를 빼놓는 등 의미별로 분리를 할 수 있을 것 같아요.&lt;/p&gt;

    &lt;p&gt;전역의 경우는 클래스가 길어지면 아무래도 참조해서 보기 어렵기도 하고, 변경 가능성도 있고 해서 많이 사용하지는 않았던 것 같습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;외부response 를 예로 보자면,지금 이 테스트에서 관심있고 테스트하고자하는 부분은 지역코드 입니다.나머지는 어떤 값이 들어가도 신경쓰지않고(verify) 있기 때문에 아무거나 넣어도 되는 상황이어서,response 들은 method 로 빼놓으면 여러곳에서 사용하기 편할 것 같습니다. ExternalResponse externalResponse = defaultResponse().setRegineCode(“JP”); 이정도로하고 나머지는 다른 테스트들과 동일한 구조로 반복하는게 가능할 것 같습니다.&lt;/p&gt;

    &lt;p&gt;테스트 하려는 부분이나 비교하려는 값을 제외하고는 되도록이면 읽어서 분석하지 않게 해주면 테스트 목적이 확 드러나지 않을까 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-20/codereview-i-got-2</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-20/codereview-i-got-2</guid>
            
            <category>Java</category>
            
            <category>CodeReview</category>
            
            
        </item>
        
        <item>
            <title>RestTemplate 말고 WebClient</title>
            <description>&lt;p&gt;가장 먼저 코드로 본 web 요청 인터페이스는 WebClient였고, 명확하고 직관적이여서 자주 썼다.&lt;/p&gt;

&lt;p&gt;그런데 현재 프로젝트에서는 RestTemplate과 WebClient가 혼재되어있어서, 이 둘에 대해서 조금 알아볼까 한다.&lt;/p&gt;

&lt;h2 id=&quot;뭐가-더-먼저-나왔을까--resttemplate&quot;&gt;뭐가 더 먼저 나왔을까 : RestTemplate&lt;/h2&gt;

&lt;p&gt;WebClient vs RestTemplate으로 치면 스택오버플로우 글 하나가 나온다.&lt;/p&gt;

&lt;p&gt;“야 Spring 5로 업글하고 싶으면 RestTemplate 못씀??? 그럼 RestTemplate쓴 옛날 어플리케이션들 어떡함?? 다 WebClient 써야해? “ &lt;a href=&quot;https://stackoverflow.com/questions/47974757/webclient-vs-resttemplate&quot;&gt;https://stackoverflow.com/questions/47974757/webclient-vs-resttemplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;침착하게 다른 사람들이 이렇게 답변해줬다.&lt;/p&gt;

&lt;p&gt;“아니 RestTemplate 계속 있을거고 WebClient 안써도 돼. 제일 큰 차이는 RestTemplate은 &lt;strong&gt;synchronous하고 blocking&lt;/strong&gt; 하다는 거임. 그게 무슨 말이냐면… web 요청을 하고 다음 행동을 하려면 response가 올때까지 기다려야한다는 뜻임ㅎㅎ WebClient는 완전 반대야. 호출한 사람은 response 올 때까지 기다릴 필요가 없고, response가 오면 알림을 받게 될거임!!!&lt;/p&gt;

&lt;p&gt;그런 기능 필요하면 WebClient로 갈아타시고~ WebClient에서 resttemplate처럼 &lt;strong&gt;synchronous&lt;/strong&gt;하게도 쓸 수 있으니까 (block()) 잘생각해봐~ 참고로 반대 방향(Rest template에서 Webclient 처럼 쓰기) 는 안됨 =) “&lt;/p&gt;

&lt;p&gt;“Java Doc이 그러는데 RestTemplate 나중에~~~~~ deprecated될거래 &lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html&quot;&gt;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html&lt;/a&gt; “&lt;/p&gt;

&lt;p&gt;정리해보면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RestTemplate은 WebClient 보다 이전에 나왔다&lt;/li&gt;
  &lt;li&gt;RestTemplate은 동기식이며, response가 올 때까지 다음 행동으로 넘어갈 수 없다&lt;/li&gt;
  &lt;li&gt;RestTemplate은 곧 deprecated 되어 역사의 뒤안길로 사라지게 될거다 (ㅠㅠ)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;그럼-webclient-부터-알아보자&quot;&gt;그럼 WebClient 부터 알아보자&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-5-webclient&quot;&gt;https://www.baeldung.com/spring-5-webclient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebClient는 웹 요청을 하는 데 있어 출입문 역할을 하는!  인터페이스이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Web Reactive&lt;/code&gt; 모듈에 포함되어 있고,  RestTemplate 을 대체한다.&lt;/p&gt;

&lt;h2 id=&quot;설치의존성-설정&quot;&gt;설치/의존성 설정&lt;/h2&gt;

&lt;p&gt;gradle에는 다음과 같은 dependencies 를 설정해준다.&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-webflux'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.projectreactor:reactor-spring:1.0.1.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;webclient-instance-생성하기&quot;&gt;WebClient Instance 생성하기&lt;/h2&gt;

&lt;p&gt;프로젝트 소스코드에서는 builder 패턴을 사용하여 인스턴스를 만든다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;Webclient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultCookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;쿠키키&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;쿠키값&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONTENT_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;request-요청하기&quot;&gt;Request 요청하기&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;일단 HTTP 메소드를 정해야한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UriSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RequestBodySpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;두번째로 uri API를 제공해야한다. String 포맷 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URL&lt;/code&gt; 포맷으로 넘긴다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RequestBodySpec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/search&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;필요하다면 Request에 &lt;code class=&quot;highlighter-rouge&quot;&gt;body, content-type,length, cookie, header&lt;/code&gt; 등을 포함할 수 있다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RequestHeadersSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;
                                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/search&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                             &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BodyInserters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromObejct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아예 다르게 접근할 수도 있다. 원하는 uri를 직접 만들어 요청하는 방식이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RequestHeaderUriSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;baseSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Webclient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;주소&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// baseSpec에 원하는 파라미터를 추가로 붙여서 요청한다. &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;baseSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;이름&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;값&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Response를 받아옴.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;response를-받아오기&quot;&gt;Response를 받아오기&lt;/h2&gt;

&lt;p&gt;이 과정에는 두 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exchange&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientResponse&lt;/code&gt;를 상태값 그리고 헤더와 함께 가져오는 반면에,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;retrieve&lt;/code&gt; 는 body를 바로 가져온다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retrieve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodyToMono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;bodyToMono&lt;/code&gt; 는 가져온 body를 Reactor의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; 객체로 바꿔준다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Mono&lt;/code&gt; 객체는 0-1개의 결과를 처리하는 객체이고, 반면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flux&lt;/code&gt; 는 0-N개인 결과를 처리하는 객체!&lt;/p&gt;

&lt;p&gt;위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; 을 사용하면 Rest Template처럼 동기식으로 사용할 수 있다고 했다.&lt;/p&gt;

&lt;p&gt;block을 Mono에 사용하여, response와 함께 전송된 실제 데이터를 구독하고 얻어 올 수 있다!&lt;/p&gt;

&lt;h2 id=&quot;resttemplate도-어떻게-쓰는-건지-알아는-보자&quot;&gt;RestTemplate도 어떻게 쓰는 건지 알아는 보자&lt;/h2&gt;

&lt;p&gt;참고:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sjh836.tistory.com/141&quot;&gt;https://sjh836.tistory.com/141&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.saltfactory.net/using-resttemplate-in-spring/&quot;&gt;http://blog.saltfactory.net/using-resttemplate-in-spring/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RestTemplate도 생성과 사용이 그렇게 어렵지 않다.&lt;/p&gt;

&lt;h3 id=&quot;시작해보자&quot;&gt;시작해보자&lt;/h3&gt;

&lt;p&gt;일단 침착하게 RestTemplate 설정을 위한 Config 클래스를 만들어준다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.web.client.RestTemplateBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.retry.annotation.EnableRetry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.client.RestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableRetry&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RestTemplateClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestTemplateBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Config클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; 어노테이션이 붙어있어야한다. 이렇게 해주는 이유는 우리 프로젝트에서 기존 방법으로 RestTemplate 을 빈으로 인식하지 않았기때문이다. builder를 거쳐서 만들어줘야한다.&lt;/p&gt;

&lt;p&gt;이제 요청을 원하는 클래스에 가서 restTemplate 필드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 를 사용해서 주입해준다.&lt;/p&gt;

&lt;p&gt;ResttemplateBulilder.build()를 사용해서 만들어서 주입해주는 경우도 있다.&lt;/p&gt;

&lt;h3 id=&quot;사용하기&quot;&gt;사용하기&lt;/h3&gt;

&lt;p&gt;주요 메소드를 &lt;code class=&quot;highlighter-rouge&quot;&gt;restTemplate.메소드명&lt;/code&gt; 과 같이 사용하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;execute(): Request / Response 를 수정할 수 있다. HTTP method를 직접 지정 가능&lt;/li&gt;
  &lt;li&gt;exchange() : Http header를 수정가능함. 응답은 HttpResponseEntity 형태&lt;/li&gt;
  &lt;li&gt;getForObject(String url, 원하는 클래스타입): Http header는 기본 형태. 응답은 원하는 오브젝트 형태로 결과를 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;getForEntity(): Http header가 기본 형태. 응답은 HttpResponseEntity 형태.&lt;/li&gt;
  &lt;li&gt;postForObject: post 요청을 보냄, 응답은 HttpResponseEntity 형태
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TestClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSthFromServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://api.com/search?text=호이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;결론적으로는, Spring 프로젝트가 RestTemplate에서 WebClient로 마이그레이션하고 있는 추세이고 추후 지원을 중단할지도 모르니 WebClient로 이동하는 것이 가장 좋다는 생각이 든다. 🤔&lt;/p&gt;

&lt;p&gt;WebClient가 기본 비동기식이긴 하지만, 동기식처럼 사용할 수도 있다는 장점 또한 마이그레이션할 이유가 될 수 있겠다.&lt;/p&gt;

</description>
            <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-11/resttemplate-vs-webclient</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-11/resttemplate-vs-webclient</guid>
            
            <category>Spring</category>
            
            <category>WebInterface</category>
            
            
        </item>
        
        <item>
            <title>Mockito when으로 repository save 구현하기</title>
            <description>&lt;h3 id=&quot;상황&quot;&gt;상황&lt;/h3&gt;

&lt;p&gt;Test를 mockito로 작성하던 도중, repository의 save을 모킹해줄 일이 생겼다.&lt;/p&gt;

&lt;p&gt;테스트하려는 메소드의 로직이 respository의 행동을 포함하고 있었기때문인데,&lt;/p&gt;

&lt;p&gt;실제로 repository가 들고 있거나 DB에 저장되지 않아도 save 한 것 처럼&lt;/p&gt;

&lt;p&gt;넣은 객체를 그대로 받고 싶었다.&lt;/p&gt;

&lt;p&gt;일반적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;when - return&lt;/code&gt; 으로는 해결되지 않아 스택오버플로우를 참조했다.&lt;/p&gt;

&lt;h3 id=&quot;해결방법&quot;&gt;해결방법&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/questions/26161917/mockito-returning-the-same-object-as-passed-into-method&lt;br /&gt;
&lt;strong&gt;mockito에서 메소드에 전달된 오브젝트를 그대로 리턴하는 법&lt;/strong&gt; 으로 검색했다.&lt;/p&gt;

&lt;p&gt;이는 when에서 any object를 넘겨주고, then에서 AdditionalAnswers를 사용하는 방법이다.&lt;/p&gt;

&lt;p&gt;실제로 적용한 내용은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AdditionalAnswers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returnFirstArg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 User Object가 넘어가든지, 넘어간 args 중 첫번째 args를 리턴하도록 하여 해결했다.&lt;/p&gt;

</description>
            <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-08/mockito-repo-save</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-08/mockito-repo-save</guid>
            
            <category>Test</category>
            
            <category>Mockito</category>
            
            
        </item>
        
        <item>
            <title>Custom Annotation으로 유효성 검사하기</title>
            <description>&lt;h2 id=&quot;상황&quot;&gt;상황&lt;/h2&gt;

&lt;p&gt;어떤 값이 유효한지 검사를 해야 하는데, 해당 값은 entity나 DTO에서 받을 때 매번 유효성 검사를 해야한다.&lt;/p&gt;

&lt;p&gt;이런 경우 대개 Validator를 사용해야하는데, Validator와 Annotation을 함께 사용하여 깔쌈하게 만드는 법을 알아본다.&lt;/p&gt;

&lt;h2 id=&quot;annotation은-뭐더라&quot;&gt;Annotation은 뭐더라&lt;/h2&gt;

&lt;h3 id=&quot;annotation-어노테이션&quot;&gt;Annotation 어노테이션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;주석이라는 뜻, 보통 생각하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/* */&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!-- --&amp;gt;&lt;/code&gt; 주석과는 다름. (ㅋㅋ)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이 속성을 어떻게 연결할지&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;이 클래스는 이런 역할이야&lt;/code&gt; 라고 정의해주는 역할&lt;/li&gt;
  &lt;li&gt;annotation을 라벨로 생각하면 쉬운데, &lt;code class=&quot;highlighter-rouge&quot;&gt;이 라벨이 붙은 건 이렇게 처리해주십셔!&lt;/code&gt; 라고 말하는 것과 같음&lt;/li&gt;
  &lt;li&gt;읽기는 &lt;strong&gt;어노테이션&lt;/strong&gt;이라고 읽으며, @를 앞에 붙여서 표시.&lt;/li&gt;
  &lt;li&gt;대표적으로는 오버라이드한 메소드 위에 붙이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Override&lt;/code&gt;나 이제 쓰이지 않을 메소드/ 클래스를 표현하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Deprecated&lt;/code&gt; 가 있음&lt;/li&gt;
  &lt;li&gt;정해진 annotation외에도 &lt;strong&gt;유저가 직접 설정하여&lt;/strong&gt; annotation을 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-annotation은-어떻게-만들어요&quot;&gt;Custom Annotation은 어떻게 만들어요?&lt;/h2&gt;

&lt;p&gt;Custom Annotation을 만드는 방법은 &lt;a href=&quot;https://jdm.kr/blog/216&quot;&gt;JDM’s Blog&lt;/a&gt; 에 매우 자세히 설명되어있다.&lt;/p&gt;

&lt;p&gt;간단하게 다시 정리해보자.&lt;/p&gt;

&lt;p&gt;Custom annotation을 만들기 위해서는 다음과 같이 정의만 내리면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ValidNumber라는 이름으로 annotation을 만들었다.
즉 이제 어디에서든 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ValidNumber&lt;/code&gt; 라는 어노테이션을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;그런데 이 라벨이 붙으면 어플리케이션이 언제, 어디에, 어떻게 동작해야하는지 정해줘야한다.&lt;/p&gt;

&lt;p&gt;이를 위해서는 메타 어노테이션들을 몇개 지정해준다.&lt;/p&gt;

&lt;h3 id=&quot;meta-annotation-메타-어노테이션&quot;&gt;Meta Annotation 메타 어노테이션&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Retention&lt;/code&gt; : 표시된 어노테이션이 어떻게 저장될지 결정합니다. 코드 or 클래스로 컴파일 or 런타임. RetentionPolicy enum에서 참조 가능하다.
    &lt;ul&gt;
      &lt;li&gt;RetentionPolicy.RUNTIME: 컴파일 이후에도 JVM 참조가 가능&lt;/li&gt;
      &lt;li&gt;RetentionPolicy.CLASS: 컴파일러가 클래스를 참조할때까지 유효&lt;/li&gt;
      &lt;li&gt;RetentionPolicy.SOURCE: 어노테이션 정보는 컴파일 후 없어짐&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Target&lt;/code&gt; : 어노테이션을 적용할 위치를 지정한다. ElementType enum에서 가져올 수 있다.
    &lt;ul&gt;
      &lt;li&gt;ElementType.TYPE : 클래스, 인터페이스, enum 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.FIELD: enum 상수를 포함한 필드 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.METHOD: method 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.PARAMETER: 파라미터 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.CONSTRUCTOR: 생성자 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.LOCAL_VARIABLE: 로컬 변수 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.ANNOTATION_TYPE: 어노테이션 타입 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.PACKAGE: 패키지 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.TYPE_PARAMTER: 자바 8이상부터 타입 파라미터 정의에 사용&lt;/li&gt;
      &lt;li&gt;ElementType.TYPE_USE: 자바 8이상부터, 타입에 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Documented&lt;/code&gt;: 문서에도 어노테이션 정보가 표시됨. (공식 문서에서는 public contract에 나오게 된다고 표현)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Inherited&lt;/code&gt; : 자식 클래스가 어노테이션을 상속 받을 수 있게 함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Repeatable&lt;/code&gt; : 반복적으로 어노테이션을 선언할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;다시-돌아와서&quot;&gt;다시 돌아와서&lt;/h3&gt;

&lt;p&gt;다시 어노테이션을 만들어보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 문서에 표시할 거고 &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필드에만 적용할 거고&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 런타임에서도 적용되었으면 함 &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Constraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validateBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidNumberValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// optional, 여기서는 유효성을 검사하기위해 넣었다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invalid number&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;이제-validator-class를-작성해보자&quot;&gt;이제 Validator Class를 작성해보자&lt;/h2&gt;

&lt;p&gt;위에서 Constraint annotation으로 사용된 Validator를 작성해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ConstraintValidator&amp;lt;어노테이션이름, 해당필드의자료형&amp;gt;을 구현한다. &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidNumberValidator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintValidatorContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValidNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValidNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ConstraintValidator를 상속해서 다음과 같은 Validator를 만들었다.&lt;/p&gt;

&lt;p&gt;여기에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;isValid&lt;/code&gt; 함수를 override하여 값이 유효한지 판단하는 함수를 작성하면 완성이다.&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jdm.kr/blog/216&quot;&gt;https://jdm.kr/blog/216&lt;/a&gt;
&lt;a href=&quot;http://www.nextree.co.kr/p5864/&quot;&gt;http://www.nextree.co.kr/p5864/&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-08/make-validator-annotation</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-08/make-validator-annotation</guid>
            
            <category>Spring</category>
            
            <category>Annotation</category>
            
            
        </item>
        
        <item>
            <title>json을 펼쳐주는 @JsonUnwrapped</title>
            <description>&lt;h3 id=&quot;dto&quot;&gt;DTO&lt;/h3&gt;
&lt;p&gt;**DTO (Data Transfer Object) **는 클라이언트와 데이터를 교환하기 위해서 형식을 정해놓은 것이다.&lt;/p&gt;

&lt;p&gt;예를 들어 화면에 상품과 그에 대한 리뷰가 같이 필요하다면,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Accessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Review&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같이 여러개를 감싸서 클라이언트에서 사용할 데이터만 쏙쏙 골라서 내려줄 집합인 것이다.&lt;/p&gt;

&lt;h3 id=&quot;json-모양이-복잡해--nested-json&quot;&gt;json 모양이 복잡해 : nested json&lt;/h3&gt;
&lt;p&gt;그런데 위와 같은 DTO는 json으로 생성할 때 괄호 안에 괄호가 있는 형식으로 생성된다.&lt;/p&gt;

&lt;p&gt;즉 Product와 Review가 하나의 엔티티이므로 다음과 같이&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;id&quot; : 1131310,
    {
        &quot;product_name&quot;: &quot;블루베리우유&quot;,
        &quot;price&quot; : 5000
    },
    {
        &quot;content&quot;: &quot;JMT입니다&quot;,
        &quot;user&quot; : {
            &quot;name&quot; : &quot;준벅&quot; 
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;괄호 안에 괄호를 품은 모양으로 생성된다. 이렇게 복잡도가 높아지는 모양을 보통 nested 라고 한다.&lt;/p&gt;

&lt;p&gt;그런데 너무 간단한 내용은 nested 되지 않게 펼쳐주는 것이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;json을-좀-펼쳐주자&quot;&gt;json을 좀 펼쳐주자!&lt;/h3&gt;

&lt;p&gt;아래를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stat은 count 하나만 가지고 있는 엔티티이다. Stat을 포함한 DTO를 만들면 json 형태는&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;어쩌구저쩌구리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;count&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;와 같은 형태를 띄게 된다.&lt;/p&gt;

&lt;p&gt;이때 불필요한 count 주위의 괄호를 없애려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonUnwrapped&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;첫번째 예제에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@JsonUnwrapped&lt;/code&gt;를 사용해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Accessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;nd&quot;&gt;@JsonUnwrapped&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Review&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Home은 json으로 변환될때 Product 부분이 &lt;strong&gt;펼쳐져서&lt;/strong&gt;  표시된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;id&quot; : 1131310,
    &quot;product_name&quot;: &quot;블루베리우유&quot;,
    &quot;price&quot; : 5000,
    {
        &quot;content&quot;: &quot;JMT입니다&quot;,
        &quot;user&quot; : {
            &quot;name&quot; : &quot;준벅&quot; 
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
            <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
            <link>/2019-02-08/json-unwrapped</link>
            <guid isPermaLink="true">junebuug.github.io/2019-02-08/json-unwrapped</guid>
            
            <category>Spring</category>
            
            <category>Annotation</category>
            
            
        </item>
        
        <item>
            <title>Setter 설정안하고 set하기</title>
            <description>&lt;h2 id=&quot;상황&quot;&gt;상황&lt;/h2&gt;

&lt;p&gt;기존에 통합테스트로 돌고 있던 web client 테스트가 있다.&lt;/p&gt;

&lt;p&gt;외부 API를 찔러보는 테스트인데, 이에 필요한 파라미터는 해당 web client 내부에서 가져오는 방식이다.&lt;/p&gt;

&lt;p&gt;이때 무거운 통합테스트가 아니라, 직접 파라미터를 set해주는 가벼운 단위 테스트를 만들고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;기존-통합테스트&quot;&gt;기존 통합테스트&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomClientIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;테스트할&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;메소드야&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CustomReponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;custom-client&quot;&gt;Custom Client&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${somewhere.base-url}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;테스트해보고 싶은 메소드 요청에 필요한 baseUrl은 다음과 같이 &lt;strong&gt;@Value로 묶여있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 baseUrl에 대해서 &lt;strong&gt;setter를 설정하는 것은 위험&lt;/strong&gt;하다.&lt;/p&gt;

&lt;p&gt;이때 ReflectionTestUtils를 가볍게 사용하면 좋다.&lt;/p&gt;

&lt;h2 id=&quot;변경된-단위-테스트&quot;&gt;변경된 단위 테스트&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomClientTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@BeforeEach&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ReflectionTestUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;baseUrl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://api.somewhere.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CustomResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직접적으로 CustomClient에 변경사항 없이 테스트용으로 사용할 때 깔끔하고 좋다.&lt;/p&gt;
</description>
            <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
            <link>/2019-01-08/reflectionTestUtils</link>
            <guid isPermaLink="true">junebuug.github.io/2019-01-08/reflectionTestUtils</guid>
            
            <category>Java</category>
            
            <category>Spring</category>
            
            <category>UnitTest</category>
            
            
        </item>
        
        <item>
            <title>2018. 회고</title>
            <description>&lt;p&gt;2017 회고를 쓰면서 2018에는..! 하는 마음이 있었던 것도 어제 같은데, 벌써 12월의 마지막 날이다.&lt;/p&gt;

&lt;p&gt;시간 순으로 할까, 주제 순으로 할까, Good, Bad로 할까 고민했는데, 일단 주제순으로 가도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;졸업-그리고-&quot;&gt;졸업, 그리고 ..&lt;/h2&gt;

&lt;h3 id=&quot;1월--2월&quot;&gt;1월 :: 2월&lt;/h3&gt;

&lt;p&gt;휴학이 끝나고 겨우 2학기를 마친 후, 숨돌릴 틈도 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;코드스쿼드&lt;/code&gt;에서 인턴을 했다. (개인 블로그지만) 이 자리를 빌어 JK 마스터님께 정말 감사를 표한다. 학교의 얼토당토않는 행정처리 일정에 한줄기 빛처럼 내려와 인턴을 하게 되었다.&lt;/p&gt;

&lt;p&gt;이때 코드스쿼드 수료증 시스템과 관리툴을 &lt;code class=&quot;highlighter-rouge&quot;&gt;python &amp;amp; django&lt;/code&gt; 로 만들었다. Github 로그인 - OAuth2 로그인과 토큰 개념, jwt 개념, vue 끄적이기, google docs 긁어와서 코드스쿼드 맛집 봇 만들기 (?),  AWS 에 DB랑 웹어플리케이션 서버 나눠서 배포하는 것 등을 익혔다. NAT 해보고. nginx 로 배포도 해보고.. 아무것도 모르면서 겁도 없이 물어보고, 고통받으면서 만들었다. 아 나 근데 원래 iOS 개발하려던거 아니야?&lt;/p&gt;

&lt;p&gt;하지만 행복했다. 기획부터 개발까지 전부 다 했고, 매 순간이 배움이라 너무 재밌었다. 인턴급여를 받으면서도 이정도 가르침을 받았으면 돌려드려야하는 거 아닐까 싶을 정도. 그리고 김준영은 이때의 경험을 바탕으로 겁없이 서버 개발자 포지션에도 넣게 되는데…&lt;/p&gt;

&lt;h3 id=&quot;3월&quot;&gt;3월&lt;/h3&gt;

&lt;p&gt;3월의 메인은 바로 이것이 아닐까. 재수를 하고, 또 1년 휴학을 한 탓에 마음에 조급함이 있었나보다. 아슬아슬하게 한학기 조기졸업 가능하다는 사실을 알고, 계속해서 설계, 설계를 했고 1-2월의 인턴도 그의 연장선상이었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-12-30/2018-12-307-4590a06a-53b0-4f6f-886f-c24b1a1f39e4.07.17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;학부에서 제일 무섭다고 생각하던 교수님이 학과장님이었는데, 학과장님께 메일을 울면서 몇통 찔러서 (행정적 문제가) 해결됐다.&lt;/p&gt;

&lt;p&gt;지금이야 이렇게 담담하게 말하지만, 계획이 어그러지는 걸 못참아 못참아~~ 하는 성격이여서 계속 주변사람들 붙들고  나 졸업되냐..하고 물어봤다 (학우들이 어떻게 알겠어..) 죄송합니다..&lt;/p&gt;

&lt;h3 id=&quot;4월--6월&quot;&gt;4월 :: 6월&lt;/h3&gt;

&lt;p&gt;본격적으로 구직을 준비하기 시작한다. 7월부터 해도 되지않을까? 졸업이 해결되면, 남은 한학기로 가능하지 않을까? 하는 생각이 있었으나, 조급했으므로 그냥 진행했다.&lt;/p&gt;

&lt;p&gt;지금 생각하면 7월부터 천천히 하라고 말해주고싶다.  너 방학 이제 평생없어.. 하고 속삭여줄텐데.&lt;/p&gt;

&lt;p&gt;평생의 숙원이던 게임회사 A, 메신저 회사 B, 금융 스타트업 C, 글로벌 오픈소스 스타트업 D, 그리고 지금 재직 중인 네이버에 지원서를 냈다.&lt;/p&gt;

&lt;p&gt;C, D는 직접 티타임 or 바베큐파티를 갖고 먼저 사람들을 만나 뵈었는데, 둘다 너무 호감가는 (개발자로서도, 인간으로서도) 사람들이 있었다. 하지만 스케쥴을 조정하는 과정에서 나의 구직 체력 부족으로 코딩테스트 전에 조심스럽게 포기의사를 전했다.&lt;/p&gt;

&lt;p&gt;A,B와 네이버는 코딩테스트를 통과하고 면접을 보러갔다.&lt;/p&gt;

&lt;p&gt;A의 면접이 가장 먼저 있었는데, WTM과 장고걸스, 학업까지 겹쳐 하나도 공부를 안하고 갔다. FE 포지션이었고, 아주 기초적인 질문에도 답을 못했다. CS에서도 탈탈 털렸다. 면접을 굉장히 꼼꼼하게 짚는다는 느낌을 받았다. 꽤 시간이 지난 뒤에 정성스러운 불합격 이유를 받을 수 있었다. 첫 면접이 가장 빡셌던 게 이후의 준비에 도움이 됐다.&lt;/p&gt;

&lt;p&gt;네이버는 면접에서는 기초적인 stack, queue, BFS… 등을 물어봤다. 이 정도만 하면 우리가 키워줄게~~~ 라는 느낌을 받았다. 서버개발자 포지션으로 지원했다.&lt;/p&gt;

&lt;p&gt;B는 공채 형식으로 진행된 시험이었다. iOS 신입 포지션으로, 전반적인 CS와 디자인패턴에 관해서 물어봤다. 면접관들이 가장 젊어서 팀이 젊구나! 싶었다. 디자인패턴은 답을 못하고, 네트워크는 싹 답해서 왜인지 서버 개발자분의 마음에 든 것 같았다. 1차를 붙어서 매우 고민했지만, 네이버를 붙은 이후로 마음이 놓여서 2차 면접은 안감.&lt;/p&gt;

&lt;p&gt;이 와중에도 나의 12학점과 매주 나오는 퀴즈와 과제들은 내 발목을 잡고 있었다. 이 기간에 몸무게가 4키로 정도 늘었고 지금도 안빠진다(ㅋㅋㅋㅋㅋ) 받은 스트레스를 모두 먹는 것으로 풀어서, 위장장애도 심했다.&lt;/p&gt;

&lt;p&gt;네이버가 가장 먼저 결과가 나왔고, 나의 체력을 최대한 아끼기 위해 그리고 다른 여러 상황을 고려해서 네이버로 결정했다. 스스로 ‘스타트업향’ 인간이라고 생각했던 나에게는 나름 큰 결정이었다.&lt;/p&gt;

&lt;h3 id=&quot;7월--8월&quot;&gt;7월 :: 8월&lt;/h3&gt;

&lt;p&gt;… 입사를 했다. 그리고 버려졌다.😨 적응할 새도 없이, 회사의 사정으로 인해 팀이 분해되었다. 매일 하는 게 팀에서 정해준 멘토님과 ‘어떤 개발을 하고 싶고’ ‘그래서 준영님은 어느 팀으로 혹은 누구를 따라갈 것인가’ 에 대한 고민을 나누는 일이었다.&lt;/p&gt;

&lt;p&gt;나는 분명 플랫폼 팀에 지원을 해서 왔지만, 서비스가 더 좋았다. 그래서 서비스를 하는 팀으로 가기로 했다. 이 과정에서 iOS 로 갈 수 있나요?!!! 했지만 서버로 와! 해서 그대로 서버 개발자가 되었다.&lt;/p&gt;

&lt;p&gt;분명히 코딩테스트도 파이썬으로 풀었는데, 어느 팀을 가든 자바랑 스프링은 쓸거라면서 먼저 스프링을 공부해두면 좋을 것이라고 추천을 받았다. 내가 포비님을 알고 있어서 다행이야. 자바지기님의 유튜브와 책을 보면서 기본적인 CRUD 게시판을 만들고, 공부를 했다.&lt;/p&gt;

&lt;h3 id=&quot;9월--12월&quot;&gt;9월 :: 12월&lt;/h3&gt;

&lt;p&gt;하지만 이게 전화위복이 될 줄이야. 좋은 팀을 만났다. 그리고 좋은 멘토님을 만났다! 😭&lt;/p&gt;

&lt;p&gt;짧은 첫 팀 생활 중에도, 인간적으로 멋지신 분이다! 하고 생각하던 분이 같이 전배를 오시고, 사수가 되어 계속 공부를 봐주셨다.&lt;/p&gt;

&lt;p&gt;정말 맘껏 공부할 수 있었고, 솔직히 어려운게 바로 풀리니까 속도가 장난아니었다.&lt;/p&gt;

&lt;p&gt;게다가 나는 조금이라도 질책을 받으면 정말 스트레스를 많이 받는 편인데, 질책이나 짜증 한번 없이 지도해주셨다. 개발자이전에 한 사람으로서 닮고 싶습니다.&lt;/p&gt;

&lt;p&gt;더불어 중간에 Notion을 알게 된 이후로는 Dev 공부노트를 쭉쭉 쌓아갔다. 모르는 건 바로 적어두고, 나중에 시간이 나면 계속해서 공부해서 노트를 한 페이지씩 적어가는 방식. (지금 49개)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-12-30/2018-12-306-9475a126-31b7-4e43-9fc6-7f247bc28b99.51.07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하던 프로젝트를 접고 새로운 프로젝트를 시작하면서, 신입인 내 코드를 프로덕션에 내볼 기회가 생겼다. 😭 대박…근데 리더님 저 스프링 공부한지 2달밖에 안됐는데요…&lt;/p&gt;

&lt;p&gt;좋은 팀을 만나, 나의 역량보다 살짝 높은 목표를 받고, 꼼꼼한 코드리뷰를 받으면서 ‘어떤 개발자가 될 것인가’ 에 대한 윤곽을 만들어나가는 중이다. 또 나름대로 ‘이 부분 관련해서는 준영님이 담당했어’ 하는 파트가 생겨서 또 나름의 뿌듯함이 있다.&lt;/p&gt;

&lt;p&gt;연차만 보면 나보다 많이 높지 않은데, 엄청난 실력 차가 느껴지는 분도 있다. 이 분을 보고 또 마음을 새롭게 다지게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;내가 몇년 뒤에 저분만큼 할 수 있을까?&lt;/code&gt; 싶어서. 계속해서 자극받고, 매일 배운다. 좋은 동료가 이렇게나 중요하구나. 그래서 하반기에는 커뮤니티를 많이 나가지 않아도 충분했다.&lt;/p&gt;

&lt;h2 id=&quot;커뮤니티&quot;&gt;커뮤니티&lt;/h2&gt;

&lt;p&gt;작년보다 참여는 적게, 운영은 더 많이 했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4월 7일  Women Techmakers Korea 운영진 : 너무 좋아서 &lt;a href=&quot;https://junebuug.github.io/2018-04-07/fastest-wtm-review&quot;&gt;후기&lt;/a&gt;도 빨리 적었다.&lt;/li&gt;
  &lt;li&gt;4월 30일 장고걸스 서울 세미나 Real Python &lt;code class=&quot;highlighter-rouge&quot;&gt;운영&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;6월 오픈핵 해커톤 디자이너로 &lt;code class=&quot;highlighter-rouge&quot;&gt;참가&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;7월 장고걸스 서울 워크샵 &lt;code class=&quot;highlighter-rouge&quot;&gt;운영&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;8월 파이콘 &lt;code class=&quot;highlighter-rouge&quot;&gt;참가&lt;/code&gt; : 파이썬 짱이야 멋있어 짜릿해 회사들도 위트넘쳐&lt;/li&gt;
  &lt;li&gt;12월 장고걸스 서울 밋업 Hello Developers &lt;code class=&quot;highlighter-rouge&quot;&gt;운영&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새해에는 새로운 커뮤니티를 꾸려나가보려고 하는데, 많은 여성분들께 개발에 입문하는 데 있어 발판이 되길 열심히 소망하는 중이다.&lt;/p&gt;

&lt;h2 id=&quot;건강&quot;&gt;건강&lt;/h2&gt;

&lt;p&gt;상반기에 지속적인 급체와 두통이나,
두번의 위장장애로 인한 쇼크 기절 - 10월에 한번, 12월에 한번 - 이런 점은 내가 스트레스에 얼마나 취약하고 관리를 못하고 있었는지를 잘 보여준다.&lt;/p&gt;

&lt;p&gt;그나마 하반기에는 운동을 병행해서 컨디션이 많이 올라갔다. (그런데 갑자기 분위기 기절 ㅜ)&lt;/p&gt;

&lt;h2 id=&quot;여행&quot;&gt;여행&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;오사카 with 보우&lt;/li&gt;
  &lt;li&gt;속초 가족 여행&lt;/li&gt;
  &lt;li&gt;후쿠오카 당일치기 ( 아이폰XS와 돌아옴)&lt;/li&gt;
  &lt;li&gt;오빠 서프라이즈 미국 탐방 : 3개월 동안 거짓말 하느라 힘들었다. 다시는 안할 것임&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;올해의-best&quot;&gt;올해의 BEST&lt;/h2&gt;

&lt;h3 id=&quot;게임&quot;&gt;게임&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단연 &lt;code class=&quot;highlighter-rouge&quot;&gt;Detroit: become human&lt;/code&gt;이다.  이런 스토리 게임은 처음 해보았다. 연수의 추천으로 5시간동안 스토리 1/3을 보고, PS4를 사게 만들었다(…)&lt;/li&gt;
  &lt;li&gt;제 5인격 : 하세요 하세요, 저같은 쫄보도 합니다. 데바데의 귀여운 버전.&lt;/li&gt;
  &lt;li&gt;저스트댄스 2019 with 플스 카메라 : 최고야…… 공간이 있는 곳에 저와 제 플스를 불러주세요&lt;/li&gt;
  &lt;li&gt;듀랑고 : 1-2월을 바쳤는데 너무 심한 노가다로 포기했다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;지름&quot;&gt;지름&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아이폰 XS.&lt;/li&gt;
  &lt;li&gt;PS4 와 플스 카메라&lt;/li&gt;
  &lt;li&gt;에어팟&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;만화&quot;&gt;만화&lt;/h3&gt;

&lt;p&gt;음식만화를 진짜 많이 봤는데, 생각나는게 별로 없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하이큐 (아껴보는 중) ,식극의 소마 ( 리액션 빼고 좋음 ㅜ,ㅜ)&lt;/li&gt;
  &lt;li&gt;녹풍당의 사계절 , 배달주문의 왕자님&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신앙&quot;&gt;신앙&lt;/h2&gt;

&lt;p&gt;2018 하반기 들어서 특히나 교회를 자주 빠지기 시작했다. 최소한의 양심이던 식기도ㅋㅋㅋ도 빼먹는 날이 생겼고, 이때 쯤 부터 가족이나 남자친구에게 화를 자주 냈다. 정말 사람이 간사한게, 좀 살만하니까 간절했던 과거의 자신을 잊는다. 부족한 저를 용서해주세요.&lt;/p&gt;

&lt;h1 id=&quot;todo&quot;&gt;TODO&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;좀더 개발 공부를 열심히 하고 싶다. 내가 평생 개발자로 살지는 모르겠지만, 지금에 최선을 다하고 파. 스터디 1개 계획 중 ( Effective Java 3E : 연락주세요)&lt;/li&gt;
  &lt;li&gt;매일 QT&lt;/li&gt;
  &lt;li&gt;건강 챙기기 : 운동, 그리고 식단. 쓰러지지 않는 것이 1차 목표다.&lt;/li&gt;
  &lt;li&gt;일본어 배우기 : 서비스가 일본향이라, 만든 걸 확인 못해서 답답해죽겠다. 간단한 일본어라도 터득하고싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;.&lt;/h2&gt;

&lt;p&gt;이렇게 일단은 2018을 마무리.&lt;/p&gt;

&lt;p&gt;일도 많고, 탈도 많고, 성장도 많았던 한 해였다.&lt;/p&gt;

&lt;p&gt;내년에도 잘 부탁드립니다.&lt;/p&gt;
</description>
            <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-30/postmortem</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-30/postmortem</guid>
            
            <category>회고</category>
            
            
        </item>
        
        <item>
            <title>Java8 Datetime 대.정.리</title>
            <description>&lt;h1 id=&quot;-준영님-이-date-무슨-형식으로-보내야해요&quot;&gt;??: 준영님 이 Date 무슨 형식으로 보내야해요?&lt;/h1&gt;

&lt;p&gt;그동안은 date는 무조건 서버에서 만들어서 넣어주는 것이어서 몰랐는데, date를 클라이언트(iOS앱) 에서 받을 일이 생겼다. DTO에는 해당 필드(createdDate라고 하자.) 가 ZonedDateTime인 건 알았는데, json 에서 어떻게 보내야하지? String 으로 말고..!&lt;/p&gt;

&lt;p&gt;이러던 와중에  최근에 LocalDateTime DTO 변환에 관한 좋은 글을 읽었던 게 생각이 났다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/361&quot;&gt;https://jojoldu.tistory.com/361&lt;/a&gt; LocalDateTime 을 json 직렬화하기! 가 궁금하다면 이 링크를 참고하자.&lt;/p&gt;

&lt;p&gt;서버에서 대응해볼 수 있는 방법을 모두 적어두었다.&lt;/p&gt;

&lt;p&gt;다행히 swagger를 쓰고 있어서, 앱에서  ‘2018-12-27T16:44:29.264+09:00’ 형태로 보내면 된다는 걸 알아냈다. 그런데 yyyy-MM-dd’T’HH:mm.ss 까지는 알겠는데 그 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;264+09:00&lt;/code&gt;은 어떻게 표현하지..?&lt;/p&gt;

&lt;p&gt;너무 너무 당황했다 😢 나는 멍청이라네 깔깔&lt;/p&gt;

&lt;h2 id=&quot;멍청이는-java-datetimeformat을-살펴보자&quot;&gt;멍청이는 Java DateTimeFormat을 살펴보자~~&lt;/h2&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html&quot;&gt;https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;심볼&lt;/th&gt;
      &lt;th&gt;뜻&lt;/th&gt;
      &lt;th&gt;예시&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;해(년)&lt;/td&gt;
      &lt;td&gt;1994&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;그 해의 몇번째 날인지&lt;/td&gt;
      &lt;td&gt;189&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;m&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;달&lt;/td&gt;
      &lt;td&gt;June; Jun; 06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;일&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;AM, PM&lt;/td&gt;
      &lt;td&gt;PM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;clock hour(12시간 기준)&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;H&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;hour of day (24시간 기준)&lt;/td&gt;
      &lt;td&gt;23; 24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;m&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;분&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;초&lt;/td&gt;
      &lt;td&gt;55&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1/1000 초 단위&lt;/td&gt;
      &lt;td&gt;978&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;time zone (text)&lt;/td&gt;
      &lt;td&gt;PST; Pacific Standard Time; UTC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Z&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;time zone 오프셋 (zone)&lt;/td&gt;
      &lt;td&gt;+0900; 09:00; Asia/Seoul&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;즉 위에서 본 ‘2018-12-27T16:44:29.264+09:00’ 은&lt;/p&gt;

&lt;p&gt;‘yyyy-MM-dd’T’HH:mm:ss’ → ‘2018-12-27T16:44:29’ 까지 매칭되고&lt;/p&gt;

&lt;p&gt;‘yyyy-MM-dd’T’HH:mm:ss.SSSZZ’ → ‘2018-12-27T16:44:29.264+09:00’ 까지 매칭된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zone: ‘Z’ outputs offset without a colon, ‘ZZ’ outputs the offset with a colon, ‘ZZZ’ or more outputs the zone id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉 Z인 경우 +0900, ZZ 인 경우 +09:00, ZZZ인 경우 “Asia/Seoul” 과 같이 붙는다는 뜻이다.&lt;/p&gt;

&lt;p&gt;참고로 offset은 GMT(UTC) 기준 더해야하는 시간이다. 서울은 GMT보다 +9시간해야하므로, +0900이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS에서는 표현이 다르다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;iOS에서는 &lt;strong&gt;yyyy-mm-dd’T’HH:mm:ss.SSSZZZZZ&lt;/strong&gt; 로 표현할 경우에 +09:00 로 표현이 되었고 이대로 json으로 보내니까 서버에서 200이 떨어졌다.  ZZZ 나 ZZ 등은 GMT가 붙고, 문제 상황에서 원하는 대로 표현이 안된다.  이와 관해서는 &lt;a href=&quot;https://stackoverflow.com/questions/28016578/how-to-create-a-date-time-stamp-and-format-as-iso-8601-rfc-3339-utc-time-zone?rq=1&quot;&gt;https://stackoverflow.com/questions/28016578/how-to-create-a-date-time-stamp-and-format-as-iso-8601-rfc-3339-utc-time-zone?rq=1&lt;/a&gt; 를 참조하도록 하자!&lt;/p&gt;

&lt;h2 id=&quot;일단-그래서-localdatetime--zoneddatetime-offsetdatetime-뭐가-다르니&quot;&gt;일단 그래서 LocalDateTime , ZonedDateTime, OffsetDateTime 뭐가 다르니&lt;/h2&gt;

&lt;p&gt;이 Time 들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;java.time&lt;/code&gt; 패키지 안에 오밀조밀 모여있다. 설명을 읽어보면,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-12-27/scrn1-7050283d-1936-40e5-84b3-01b8dc4f0c3d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;localdatetime&quot;&gt;LocalDateTime&lt;/h3&gt;

&lt;p&gt;ISO-8601 캘린더 시스템의 타임존 개념이 없는, 날짜-시간 시스템.&lt;/p&gt;

&lt;p&gt;예) 1994-06-13T11:15:30&lt;/p&gt;

&lt;p&gt;그냥 LocalDateTime을 사용하면, 해당 컴퓨터의 타임존에 맞춘 시간을 의미한다. 서울에서 new LocalDateTime()을 하면 서울의 현재시각이 나온다.&lt;/p&gt;

&lt;p&gt;ISO-8601는 날짜와 시간과 관련된 국제표준이다. ISO-8601의 핵심은 &lt;code class=&quot;highlighter-rouge&quot;&gt;- : T W Z&lt;/code&gt; 같은 정해진 문자만 써서 작성한다는 것인데, 이는 즉 Jan 13 09:00 와 같은 표현을 사용하지 않는다는 것이다. 깔끔하니 좋구만!&lt;/p&gt;

&lt;h3 id=&quot;zoneddatetime&quot;&gt;ZonedDateTime&lt;/h3&gt;

&lt;p&gt;그럼 Zone-d는? 당연히, ISO-8601 캘린더에 정의된 타임존을 포함한 날짜-시간 시스템이다.&lt;/p&gt;

&lt;p&gt;예) 1994-06-13T11:15:30+09:00 Asia/Seoul&lt;/p&gt;

&lt;p&gt;아 뭐야, Asia/Seoul 은 GMT+0900 인거 나도 알고 있는데 약간 TMI 스럽다. 0900만 있어도 되는데!&lt;/p&gt;

&lt;h3 id=&quot;offsetdatetime&quot;&gt;OffsetDateTime&lt;/h3&gt;

&lt;p&gt;그래서 있는 OffsetDateTime. UTC/그리니치 에서부터의 오프셋만을 표현해준다.&lt;/p&gt;

&lt;p&gt;예) 1994-06-13T:11:15:30+09:00&lt;/p&gt;

&lt;p&gt;즉 정보의 양은 LocalDateTime &amp;lt; OffsetDateTime &amp;lt; ZonedDateTime이라고 말할 수 있을까.&lt;/p&gt;

&lt;p&gt;오호오호, 그러면 서로 변환도 됐으면 좋겠는데?&lt;/p&gt;

&lt;p&gt;물론 아주 쉽게 된다.&lt;/p&gt;

&lt;h3 id=&quot;localdatetime의-변환&quot;&gt;LocalDateTime의 변환&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LocalDateTime객체에 atOffset(ZoneOffset offset) 메소드를 사용하면 OffsetDateTime으로 변환할 수 있다. ZoneOffset은 of(int hours) 메소드를 사용해서 만들수 있고.&lt;/li&gt;
  &lt;li&gt;LocalDateTime객체에 atZone(ZoneId zone) 메소드를 사용하면 ZonedDateTime으로 변환할 수 있다. ZoneId는 of(String zoneId) 가 되는데, 지정된 String들이 있다.
    &lt;ul&gt;
      &lt;li&gt;EST - -05:00&lt;/li&gt;
      &lt;li&gt;HST - -10:00&lt;/li&gt;
      &lt;li&gt;MST - -07:00&lt;/li&gt;
      &lt;li&gt;ACT - Australia/Darwin&lt;/li&gt;
      &lt;li&gt;AET - Australia/Sydney&lt;/li&gt;
      &lt;li&gt;AGT - America/Argentina/Buenos_Aires&lt;/li&gt;
      &lt;li&gt;ART - Africa/Cairo&lt;/li&gt;
      &lt;li&gt;AST - America/Anchorage&lt;/li&gt;
      &lt;li&gt;BET - America/Sao_Paulo&lt;/li&gt;
      &lt;li&gt;BST - Asia/Dhaka&lt;/li&gt;
      &lt;li&gt;CAT - Africa/Harare&lt;/li&gt;
      &lt;li&gt;CNT - America/St_Johns&lt;/li&gt;
      &lt;li&gt;CST - America/Chicago&lt;/li&gt;
      &lt;li&gt;CTT - Asia/Shanghai&lt;/li&gt;
      &lt;li&gt;EAT - Africa/Addis_Ababa&lt;/li&gt;
      &lt;li&gt;ECT - Europe/Paris&lt;/li&gt;
      &lt;li&gt;IET - America/Indiana/Indianapolis&lt;/li&gt;
      &lt;li&gt;IST - Asia/Kolkata&lt;/li&gt;
      &lt;li&gt;JST - Asia/Tokyo&lt;/li&gt;
      &lt;li&gt;MIT - Pacific/Apia&lt;/li&gt;
      &lt;li&gt;NET - Asia/Yerevan&lt;/li&gt;
      &lt;li&gt;NST - Pacific/Auckland&lt;/li&gt;
      &lt;li&gt;PLT - Asia/Karachi&lt;/li&gt;
      &lt;li&gt;PNT - America/Phoenix&lt;/li&gt;
      &lt;li&gt;PRT - America/Puerto_Rico&lt;/li&gt;
      &lt;li&gt;PST - America/Los_Angeles&lt;/li&gt;
      &lt;li&gt;SST - Pacific/Guadalcanal&lt;/li&gt;
      &lt;li&gt;VST - Asia/Ho_Chi_Minh&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;ZoneId.of(&quot;Asia/Tokyo&quot;)&lt;/code&gt; 하면 자동으로 도쿄로 타임존이 지정된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;zoneddatetime의-변환&quot;&gt;ZonedDatetime의 변환&lt;/h3&gt;

&lt;p&gt;ZonedDatetime은 많은 정보를 들고 있기 때문에, 빼기만 하면 변환이 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;toLocalDateTime()으로 LocalDateTime을 얻을 수 있다.&lt;/li&gt;
  &lt;li&gt;toOffsetDateTime()으로 OffsetDateTime을 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;offsetdatetime의-변환&quot;&gt;OffsetDateTime의 변환&lt;/h3&gt;

&lt;p&gt;반면 정보양이 중간인 이 친구는.. LocalDateTime은 쉽지만 ZonedDateTime은 당연히 Zone 정보를 줘야겠다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;toLocalDateTime()으로 LocalDateTime을 얻을 수 있다.&lt;/li&gt;
  &lt;li&gt;atZoneSameInstant(ZoneId zone)으로 zone정보를 붙여 ZonedDateTime을 줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;추가참고--jpa에서-offsetdatetime등을-사용한다고-바로-timestamp-로-테이블에-저장되는게-아니다&quot;&gt;추가참고 : JPA에서 OffsetDateTime등을 사용한다고 바로 timestamp 로 테이블에 저장되는게 아니다?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.popit.kr/java-8-datetime-%EC%99%80-jpahiberante-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8/&quot;&gt;https://www.popit.kr/java-8-datetime-와-jpahiberante-그리고-스프링-부트/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;결론적으로 우리 프로젝트는 스프링부트 2.1 + 를 쓰고 있기때문에 자연스럽게 되는 것이다. 이하의 버전은 추가 설정이나 hibernate가 java8를 지원하도록 하는 라이브러리 임포트를 해주어야한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고 자료들&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jojoldu.tistory.com/361&quot;&gt;https://jojoldu.tistory.com/361&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html&quot;&gt;https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/28016578/how-to-create-a-date-time-stamp-and-format-as-iso-8601-rfc-3339-utc-time-zone?rq=1&quot;&gt;https://stackoverflow.com/questions/28016578/how-to-create-a-date-time-stamp-and-format-as-iso-8601-rfc-3339-utc-time-zone?rq=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.popit.kr/java-8-datetime-%EC%99%80-jpahiberante-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8/&quot;&gt;https://www.popit.kr/java-8-datetime-와-jpahiberante-그리고-스프링-부트/&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-27/java8-datetime</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-27/java8-datetime</guid>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>쿠키, 로컬 스토리지, 세션 스토리지 5초만에 알기</title>
            <description>&lt;p&gt;&lt;img src=&quot;/img/2018-12-26/cookie.001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zerocho.com/category/HTML&amp;amp;DOM/post/5918515b1ed39f00182d3048&quot;&gt;https://www.zerocho.com/category/HTML&amp;amp;DOM/post/5918515b1ed39f00182d3048&lt;/a&gt;&lt;/p&gt;

</description>
            <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-23/web-storage</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-23/web-storage</guid>
            
            <category>Web</category>
            
            <category>Storage</category>
            
            
        </item>
        
        <item>
            <title>CORS 맨날 봐도 모르겠어</title>
            <description>&lt;p&gt;맨날맨날 봐도 맨날 맨날 헷갈리니까 정리.&lt;/p&gt;

&lt;h2 id=&quot;왜-웹에서-api-서버에-요청-안가는-거에요-&quot;&gt;왜 웹에서 API 서버에 요청 안가는 거에요? 😭&lt;/h2&gt;

&lt;p&gt;웹 개발 시에 자바스크립트로 야심차게 외부 서버 경로로 ajax 요청을 날리면 요청이 실패한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No 'Access-Control-Allow-Origin' Header is present on requested resource.
... 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;요청한 리소스, 즉 서버에서 내려준 응답에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; 이라는 헤더가 없단다.&lt;/p&gt;

&lt;p&gt;아니 이게 뭔데.. 왜..안되는 거야..? 나는 행복하고 싶었는데.. 🤢&lt;/p&gt;

&lt;h2 id=&quot;너는-같은-도메인에만-요청을-보낼-수-있다-어리석은-웹이여-sop-정책&quot;&gt;너는 같은 도메인에만 요청을 보낼 수 있다 어리석은 웹이여.. SOP 정책&lt;/h2&gt;

&lt;p&gt;이는 웹 어플리케이션 보안 모델에서 중요한 개념인 SOP (Same-Origin Policy) 때문이다.&lt;/p&gt;

&lt;p&gt;이 정책은 자바스크립트(XMLHttpRequest) 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 로 표기된 스크립트에서 생성되는 &lt;strong&gt;사이트 간 HTTP 요청&lt;/strong&gt;은 불가능 하다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;즉 Same-Origin만 가능하다는 것인데, 이때 Same-Origin은 &lt;code class=&quot;highlighter-rouge&quot;&gt;프로토콜&lt;/code&gt; (e.g. http) , &lt;code class=&quot;highlighter-rouge&quot;&gt;호스트명&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;포트&lt;/code&gt; 가 같다는 것을 의미한다. 프로토콜이 http일때는 80 포트를, https 를 쓰면 443 포트를 쓰니 포트까지 같아야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-12-20/cors-078e554b-1b60-4de4-b5fd-96bd565d6134.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹 보안을 위한 좋은 정책처럼 보이지만, 여러 도메인에 걸쳐서 구성되는 대규모 웹 프로젝트가 늘어나고, REST API를 통한 외부 호출이 늘어나는 상황에서는 귀찮은 정책이 될 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;그래서 추가로 정책을 만든 것이 CORS다.&lt;/p&gt;

&lt;h2 id=&quot;cors는-씨오알에스라고-읽나요&quot;&gt;CORS는 씨오알에스라고 읽나요&lt;/h2&gt;

&lt;p&gt;CORS(Cross-Origin Resource Sharing)은 말 그대로 다른 서버의 리소스를 사용할 수 있는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;만약 서버에서 내 웹을 허용만 해준다면, 접근이 가능하다.&lt;/p&gt;

&lt;h2 id=&quot;그럼-서버에서-설정-가능한-것인가요&quot;&gt;그럼 서버에서 설정 가능한 것인가요&lt;/h2&gt;

&lt;p&gt;CORS는 서버에서 설정을 해주어야한다.&lt;/p&gt;

&lt;p&gt;하지만 CORS를 사용하지 않고 클라이언트에서도 SOP를 우회하는 방법이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;웹 브라우저 실행 시 외부 요청 허용 옵션
    &lt;ul&gt;
      &lt;li&gt;SOP는 클라이언트인 웹 브라우저가 결정하는 것이므로, 이 과정을 살짝 넘어가면 된다.&lt;/li&gt;
      &lt;li&gt;크롬의 경우 커맨드라인 옵션으로 SOP 검사 동작을 무시할 수 있다.&lt;code class=&quot;highlighter-rouge&quot;&gt;—disable-web-security&lt;/code&gt; 옵션을 추가하면 된다.&lt;/li&gt;
      &lt;li&gt;다만 고객이 내 페이지에 들어올 때마다 이 옵션을 사용해서 들어올 순 없으므로, 개발 시 CORS 설정이 되기 전 잠깐 사용하도록 하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;외부 요청을 가능하게 해주는 플러그인 설치.
    &lt;ul&gt;
      &lt;li&gt;CORS는  &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더를 추가해주는 식으로 동작하므로, 서버의 응답을 가로채서 이 헤더를 추가해주는 플러그인이 있다.&lt;/li&gt;
      &lt;li&gt;크롬 웹스토어에서 CORS로 검색하자.&lt;/li&gt;
      &lt;li&gt;이 방법도 마찬가지로 일반 사용자는 사용할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;뭐야-결국-cors-해줘야-해-&quot;&gt;뭐야 결국 CORS 해줘야 해 ?&lt;/h2&gt;

&lt;p&gt;Proxy 하는 방법도 있다. 내 웹을 설정한 서버에서 nginx proxy를 통해서 내 도메인에 요청을 하면,&lt;/p&gt;

&lt;p&gt;해당 요청을 서버에 밀어 넣어주는 방법이다. 즉 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;[http://mydomain.com/api/users](http://mydomain.com/api/users)&lt;/code&gt; 로 요청을 했지만, nginx가 proxy하여서 실제로 요청은 &lt;code class=&quot;highlighter-rouge&quot;&gt;[http://api.otherdomain.com/api/users](http://api.otherdomain.com/api/users)&lt;/code&gt; 로 가도록 하는 것이다. 브라우저 상에서는 내 도메인에 요청을 하는 것이므로, SOP의 영향을 받지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;cors-설정을-해보자&quot;&gt;CORS 설정을 해보자&lt;/h2&gt;

&lt;p&gt;요청하려는 URL이 외부 도메인 (Same origin X) 일 경우 브라우저는 먼저 preflight 요청을 날리게 된다.&lt;/p&gt;

&lt;p&gt;preflight 요청은 실제로 요청하는 경로와 같은 URL에 대해서 &lt;strong&gt;OPTIONS&lt;/strong&gt; 메소드로 요청을 미리 날려보고 요청을 할 수 있는 권한이 있는 지 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-12-20/cors2-3d891103-45ca-4c32-8d49-4a7b38f88d5c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결국 CORS를 위해서는 사전에 클라이언트가 찔러보는 작업이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;서버에서는&quot;&gt;서버에서는&lt;/h3&gt;

&lt;p&gt;다음과 같은 요청 헤더를 줄 것인지 결정해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access-Control-Allow-Origin: 요청을 허용하는 출처. 위의 예제에서는 “http://yourdomain.com”.  출처를 상관하지않고 허용하는 경우 *&lt;/li&gt;
  &lt;li&gt;Access-Control-Allow-Credentials: 클라이언트 요청이 쿠키를 통해서 자격 증명을 해야하는 경우 true. 이 경우 클라이언트가 정해진 규격의 쿠키와 함께 요청을 보내야한다.&lt;/li&gt;
  &lt;li&gt;Access-Control-Allow-Methods: 요청을 허용하는 메소드. *일 경우 전부, 기본값은 GET, POST이다. preflight를 허용해야하므로 OPTIONS를 포함시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;나머지 값들은 많이 쓰이지 않으므로 나중에 정리하기로 한다.&lt;/p&gt;

&lt;p&gt;Spring Boot 의 경우&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WebMvcConfigurer&lt;/code&gt; 를 상속하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; 클래스를 만들고, 다음 함수를 오버라이드한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addCorsMappings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CorsRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowedOrigins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowedMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;더 이상 울지말자 CORS!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@adrenalinee31/1&quot;&gt;https://brunch.co.kr/@adrenalinee31/1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://homoefficio.github.io/2015/07/21/Cross-Origin-Resource-Sharing/&quot;&gt;https://homoefficio.github.io/2015/07/21/Cross-Origin-Resource-Sharing/&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-23/cors</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-23/cors</guid>
            
            <category>Web</category>
            
            <category>CORS</category>
            
            
        </item>
        
        <item>
            <title>자바 8의 함수형 인터페이스는 뭐에요</title>
            <description>&lt;p&gt;자바! 학교에서도 지속적으로 배우는 가장 익숙한 프로그래밍 언어 중 하나이다. 졸업때까지(2018) 만 해도  학부에서 파이썬이나 go 같은 트렌디한 언어가 아니라 자바를 한다고 하면 ??? 하고 바라보고, 고루한 언어처럼 여겨지기도 했다.&lt;/p&gt;

&lt;p&gt;자바를 제대로 처음 배울 때는 2014년이었는데, 사실 이때 Java8이 릴리즈됐다. 그러나 그때의 자바 강의는 자바의 OOP 로서의 부분에 집중해서 배웠고, 클래스, 인스턴스, 상속 … 등의 개념 등만 줄을 이었다. 붕어빵 틀과 붕어빵 예제를 몇번이나 들었는지.&lt;/p&gt;

&lt;p&gt;변하지 않고 내는 OOP임! 할 거 같던 자바는 Java 8로 엄청난 변신을 시도했다. Optional, Stream, Lambda Expression .. 즉 함수형 프로그래밍 패러다임을 도입한 것이다. 애초에 설계에 포함되어 있지 않은 패러다임을 어떻게 도입하냐고? 함수 자료형을 가져오는 과정을 객체로 바꿔버렸다.&lt;/p&gt;

&lt;h2 id=&quot;아니-일단-함수형-프로그래밍이-뭐야ㅠㅠ-쉽게-좀&quot;&gt;아니 일단 함수형 프로그래밍이 뭐야ㅠㅠ 쉽게 좀..&lt;/h2&gt;

&lt;p&gt;일반적으로 어떤 이론의 앞에 있는 말이 그 이론을 설명하고, 가장 중요한 개념이다. 즉, 함수형 프로그래밍에서도 제일 중요한 건 &lt;code class=&quot;highlighter-rouge&quot;&gt;함수&lt;/code&gt; 이다. 얼마나 중요하냐면, 함수형 프로그래밍은 함수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;1급 시민&lt;/code&gt; 으로 처리한다 !&lt;/p&gt;

&lt;p&gt;..그런데, 1급 시민이 뭐야?&lt;/p&gt;

&lt;p&gt;1급 시민은 변수에 담을 수 있고, 인자로 전달할 수 있으며, 반환값으로 전달할 수 있는 것을 의미한다. 프로그래밍 언어 입장에서는 아주 최선으로 생각한다 =  변수도 되고 인자도 되고 리턴 값도 된다 ! 라는 뜻이다.&lt;/p&gt;

&lt;p&gt;그래서, 함수형 프로그래밍은 함수를 변수에 담고, 인자로 전달하고, 반환 값으로 전달할 수 있는 프로그래밍 방식을 의미한다. 이렇게 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;고차함수&lt;/code&gt; 를 만들어서 특정 함수의 작업 내용과 결과를 2차, 3차로 고도화할 수 있다는 장점이 나온다.&lt;/p&gt;

&lt;p&gt;아래 (함수형 프로그래밍언어인) 자바스크립트 예제를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiplyResultOfMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// method의 결과 값을 곱해준다. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;함수를 인자로 쓸 수 있고, 반환 값으로 쓸 수 있기때문에 귀찮게 &lt;code class=&quot;highlighter-rouge&quot;&gt;method()&lt;/code&gt; 의 결과를 다른 변수에 &lt;strong&gt;담아줄 필요 없이&lt;/strong&gt; 고차 함수를 완성했다.&lt;/p&gt;

&lt;p&gt;OOP이던 자바 입장에서는 그동안 객체가 애지중지하던 1급시민이다. 하지만 자바 8부터는 함수형 프로그래밍의 컨셉을 가지고 오려고 람다식을 도입하게 되며, 이를 &lt;strong&gt;모던 자바&lt;/strong&gt; 라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;람다-λ-파장-아니니&quot;&gt;람다..? λ..? 파장 아니니..?&lt;/h2&gt;

&lt;p&gt;람다(Lambda)는 익명함수를 의미한다. 이름 없이 간결하게 함수를 작성할 수 있다. 핵심 역시 지울 수 있는 건 모두 지우자는 것이다.&lt;/p&gt;

&lt;p&gt;추상 메소드를 하나만 가진 &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; 인터페이스를 구현하는 아래 예제를 보자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;를 공부했습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;라고 생각합니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인터페이스 한번 구현하는데 너무 줄을 많이 차지한다. 이걸 고치고 싶다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;new Person()은 앞에서 Person을 선언해서 알 수 있다.&lt;/li&gt;
  &lt;li&gt;정작 구체적으로 선언해야 할 건 talk 메소드 뿐인데, 하나밖에 없으면 이름 생략해도 되지 않을까?&lt;/li&gt;
  &lt;li&gt;인자(word)도 순서대로 넣으면 추론 가능하지 않을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 탄생한 게 아래다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;라고 생각합니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;word 하나뿐이고, 아래도 프린트문 하나뿐이니 괄호는 지워보자.&lt;/p&gt;

    &lt;p&gt;Person person = word -&amp;gt; System.out.println(word + “라고 생각합니다.”);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;코드가 매우 많이 줄어들었다. 이것만으로도 충분한 이점이 보인다 👻&lt;/p&gt;

&lt;h2 id=&quot;함수형-인터페이스&quot;&gt;함수형 인터페이스&lt;/h2&gt;

&lt;p&gt;슬쩍 말했지만, 위에서는 &lt;strong&gt;추상 메소드가 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나&lt;/code&gt;인 인터페이스&lt;/strong&gt;를 람다로 바꾸었다. 그럼 추상 메소드가 두개면? 가차없이 안된다. 그러니까, 람다로 쉽게 만들고 싶어서 일부러 메소드를 하나만 만들었는데 다른 사람이 맘대로 추가하는 경우는 없어야한다. 그래서 아예 이런 인터페이스들에게 이름을 붙여주었다. 이게 바로 &lt;strong&gt;함수형 인터페이스&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@FunctionalInterface&lt;/code&gt; 를 붙이면 해당 인터페이스가 함수형 인터페이스임을 알려준다.&lt;/p&gt;

&lt;p&gt;그리고도 자바가 기본적으로 제공하는 함수형 인터페이스들이 있다.&lt;/p&gt;

&lt;p&gt;자주 나오고 자주 사용되는 인터페이스들 이니 한번씩 꼭 보도록 하자 =)&lt;/p&gt;

&lt;h2 id=&quot;runnable&quot;&gt;Runnable&lt;/h2&gt;

&lt;p&gt;스레드 생성 시 자주 사용되는 인터페이스이며, 기존부터 존재하던 인터페이스이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Runnable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// 인자가 없다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;supplier&quot;&gt;Supplier&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;인자가 없이, T라는 타입을 리턴하는 메서드 &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; 을 갖고 있다.&lt;/p&gt;

&lt;p&gt;인자가 없는데도 T를 제공(Supply) 하는 인터페이스.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Supplier 입니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Supplier 입니다&quot; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;consumer&quot;&gt;Consumer&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;T라는 타입의 인자를 받고, 리턴을 하지 않는 메서드 &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt;을 갖고 있다.&lt;/p&gt;

&lt;p&gt;인자를 먹어(Consume) 버리는 인터페이스.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;June&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;functiontr&quot;&gt;Function&amp;lt;T,R&amp;gt;&lt;/h2&gt;

&lt;p&gt;T 타입을 받아 R 을 리턴하는 기본적인 함수형. 메서드 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt;를 갖고 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;613&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;predicate&quot;&gt;Predicate&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;T타입을 받아 boolean을 리턴하는 인터페이스. Function에서 R이 boolean으로 고정된 것이라고 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/strong&gt;라는 메소드를 갖고 있다.&lt;/p&gt;

&lt;p&gt;Predicate이 전제 or 명제라는 뜻이므로 당연히 boolean 값을 리턴할 것 같다. (?)&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;unaryoperator&quot;&gt;UnaryOperator&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;Una- 는 하나라는 뜻이다(스페인어에서도  uno는 1 이니께)&lt;/p&gt;

&lt;p&gt;Function의 특이한 종류인지, 메서드를 똑같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&lt;/code&gt; 를 사용한다.&lt;/p&gt;

&lt;p&gt;인자를 T타입으로 받아 T타입을 리턴한다.&lt;/p&gt;

&lt;p&gt;String을 받아 String을 리턴하는 식!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UnaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;알로&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;헤이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;헤이 알로&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;binaryoperator&quot;&gt;BinaryOperator&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;동일한 타입의 인자 두개가 들어가서 동일한 타입의 리턴 타입 하나가 나온다.&lt;/p&gt;

&lt;p&gt;2 → 인터페이스 → 1 !&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BinaryOperator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;안녕,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;스키야키&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;안녕, 스키야키&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;bipredicatetu&quot;&gt;BiPredicate&amp;lt;T,U&amp;gt;&lt;/h2&gt;

&lt;p&gt;Predicate인데, 서로 다른 인자 두개를 받아서 boolean을 준다. Type은 같아도 달라도 상관없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BiPredicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;스키야키&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;스끼야끼&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;biconsumertu&quot;&gt;BiConsumer&amp;lt;T,U&amp;gt;&lt;/h2&gt;

&lt;p&gt;Consumer인데, 서로 다른 인자 두개를 받아서 먹어버린다. Type은 같아도 달라도 상관없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BiConsumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;몇인분 드세요 저는 &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;bifunctiontur&quot;&gt;BiFunction&amp;lt;T,U,R&amp;gt;&lt;/h2&gt;

&lt;p&gt;앞에 두 개(T,U) 인자를 받아서 → R 타입으로 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;호이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;12 호이&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;comparator&quot;&gt;Comparator&lt;T&gt;&lt;/T&gt;&lt;/h2&gt;

&lt;p&gt;Runnable 처럼 기존에 있던 자바 인터페이스. 객체간의 우선순위를 비교할 때 사용한다.&lt;/p&gt;

&lt;p&gt;람다의 출현으로 더욱 간결해짐!&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ab&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 정도로 자바 8의 &lt;code class=&quot;highlighter-rouge&quot;&gt;함수형 인터페이스와 람다&lt;/code&gt; 에 대해 알아보고, 메소드 레퍼런스를 비롯한 다른 특징은&lt;/p&gt;

&lt;p&gt;다른 포스트에서 정리하기로 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참고&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@kd4/12&quot;&gt;https://brunch.co.kr/@kd4/12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://multifrontgarden.tistory.com/124?category=471239&quot;&gt;http://multifrontgarden.tistory.com/124?category=471239&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://multifrontgarden.tistory.com/125&quot;&gt;http://multifrontgarden.tistory.com/125&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/java-8-new-features&quot;&gt;https://www.baeldung.com/java-8-new-features&lt;/a&gt;&lt;/p&gt;
</description>
            <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-18/java8-functional-interface</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-18/java8-functional-interface</guid>
            
            <category>Java</category>
            
            <category>Java8</category>
            
            <category>Lambda</category>
            
            
        </item>
        
        <item>
            <title>내가 처음으로 받은 Java 코드리뷰 모음</title>
            <description>&lt;p&gt;같은 실수를 반복하는 멍청이는 되지말자는 의미에서ㅎㅎ PR을 쭉 보면서 받은 코드리뷰를 정리해보았습니다.&lt;/p&gt;

&lt;p&gt;여러 번 반복해서 나오는 리뷰도 있네요.(&lt;code class=&quot;highlighter-rouge&quot;&gt;상수를 ~~제발~~ 위로 빼주세요ㅜ&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;스프링은 여태까지 했던 것 중에 제일 감을 못잡겠어서, 다른분들의 코드를 보면서 이해하고 있는데&lt;/p&gt;

&lt;p&gt;리뷰를 받으면서 틀린 거 짚어주시니까 너무 기분이 좋고 호호&lt;/p&gt;

&lt;h1 id=&quot;1--환경설정에-정보-추가&quot;&gt;#1  환경설정에 정보 추가&lt;/h1&gt;

&lt;h2 id=&quot;상황&quot;&gt;상황&lt;/h2&gt;

&lt;p&gt;모든 환경에 공통으로 쓰일 변수를 application-local, alpha, beta, real, stage.. profile에 각각 추가했다.&lt;/p&gt;

&lt;h2 id=&quot;리뷰&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;제 생각에는 환경별로 다르지 않으면 application.yml 에만 넣어도 되지 않을까 싶습니다. 환경별로 달라질 가능성이 매우 낮아 보입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2-로그아웃-기능-추가할-때&quot;&gt;#2 로그아웃 기능 추가할 때&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-1&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;(webClient에서) 이 헤더는 공통으로 넣고 있습니다. 빼도 동작하지않나요? → 공통 헤더 확인 필요&lt;/li&gt;
  &lt;li&gt;원래 api마다 전부 response객체를 만들려고 했었는데, 이 경우 DeleteReponse ㅎㅎ 공통으로 한다면… IdNoResponse로 하는게 나을것 같네요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-모두-조회하는-api&quot;&gt;#3 모두 조회하는 API&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-2&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아래 정도로 테스트 하실거면 abstractIntegrationTest 대신&lt;/p&gt;

    &lt;p&gt;@WebMvcTest(controllers = StepbookFeatureControlle.class, secure = false)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요렇게도 가능합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;component로 선언했으니까 요건 new로 하지 않고 autowired 해주는게 맞겠군요.&lt;/li&gt;
  &lt;li&gt;autowired 로 해주시고 생성자 injection으로 해주시면 좋겠습니다~&lt;/li&gt;
  &lt;li&gt;이 로직이 controller단으로 옮겨가는게 좋을것 같아요.service는 가급적 entity에 대해서만 조작하고,dto로 컨버팅하는건 컨버터가 컨트롤러에서 처리해주는게 좋을것 같습니다.(컨버터에서 서비스를 들고있게 될수있는데, 경우에 따라서 서로 순환 참조가 발생하더라고요..&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-entity-추가&quot;&gt;#4 entity 추가&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-3&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;( RepositoryImpl 생성자에서 super에 인자가 Repository.class 로 들어간 상황)  이게 예전에 어떻게 돌았는지 모르겠지만 domain.class 로 들어가야 하더라구요.지금의 경우는 (엔티티).class 를 넣어주세요~&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-웹-로그인-기능&quot;&gt;#5 웹 로그인 기능&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-4&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Constant는 가장 위로 올라가는게 좋겠네요~&lt;/li&gt;
  &lt;li&gt;테스트가 끝나고 매번 로그아웃이 필요하면, @aftereach에 넣어도 될 것 같습니다.&lt;/li&gt;
  &lt;li&gt;(web client의 request를) 사용하는 곳이 위에 getProfile뿐인 것 같은데요.private으로 바꾸고, 안쓰는 body 파라미터는 삭제해도 되겠네요~아니면 (다른 web client)쪽과 중복되는 코드를 별도 util로 뽑아내도 좋을 것 같습니다.&lt;/li&gt;
  &lt;li&gt;throw를 그대로 다시 하는 것은, 경우에 따라 안티 패턴 중 하나로 여겨집니다~&lt;a href=&quot;https://stackoverflow.com/a/44420199&quot;&gt;https://stackoverflow.com/a/44420199&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;프로필 얻기→이미지 업로드→DB에 저장인데 DB간 연관 작업이 아니라 Transactional이 필요없어 보이네요~&lt;/li&gt;
  &lt;li&gt;(long 강제 캐스팅에 대해서) 아무거나 하나만 L 붙여주시면 됩니다.&lt;/li&gt;
  &lt;li&gt;(필드 주입에 대해서) 생성자로 주입해주시면 좋겠습니다~&lt;/li&gt;
  &lt;li&gt;요건 config 쪽으로 가야 될 것 같습니다. 아마 기본 restTemplate 이 있지 않나요?@configuration 이 없으면 이 설정이 안 먹을 거에요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;6-특정-유저-정보-my-페이지-불러오기&quot;&gt;#6 특정 유저 정보 my 페이지 불러오기&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-5&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;patchEntity는 없어야 하는 거죠? (이 엔티티는) history는 패치 불가가 맞을것 같습니다 ㅋapi통한 작업은 조회만 가능한걸로..&lt;/li&gt;
  &lt;li&gt;(DTO enum에서) @enumerated(EnumType.STRING) 넣어야 할 것 같아요.&lt;/li&gt;
  &lt;li&gt;(복사된 interface 상속) 사용 안할 것 같은데~ 불필요하시면 빼주세요~ ^^&lt;/li&gt;
  &lt;li&gt;(controller url) 내꺼만 보여주는 케이스라면 {userId} 대신 my 같은 것으로 바꾸는 게 좋습니다.보안 검수 때 체크하는 항목이기도 해요~ 남의 히스토리를 조회한다거나… 하는 걸 막아야 해서../users/my/entity&lt;/li&gt;
  &lt;li&gt;테스트 코드도 있어야 하지 않을까 싶어요~ ^^&lt;/li&gt;
  &lt;li&gt;getUserId 가져오는 부분을 Optional이 아닌 Long userId 로 받고~ orElseThrow 을 사용하면 조금 더 간결하게 할 수 있을 것 같아요.&lt;/li&gt;
  &lt;li&gt;URI 에는 소문자만 사용해야 해요. 띄어야 하면 하이픈 사용하시고요. 그런데 내부적으로는 단위가 명확한 (내부 명칭)가 좋은데.. 외부 API 에는 (공식명칭)가 맞지 않나 생각이 드네요.&lt;/li&gt;
  &lt;li&gt;(테스트에 대해서)given 이 묵시적으로 진행이 되고 있어 가독성이 떨어지고, 테스트가 샘플 데이터에 의존적이어서 독립성이 떨어지는 것 같아요.// given : 이런 상태에서 (&amp;lt;– 요부분이 묵시적)// when : 이렇게 했을 때// then : 이렇게 되어야 한다.&lt;/li&gt;
  &lt;li&gt;(repository에서 querydsl 적용부분) 크게 의미는 없지만 &lt;a href=&quot;http://quserconyhistory.id/&quot;&gt;qUserconyHistory.id&lt;/a&gt;::loe이면 id로 sorting하는게 맞지 않을까요?&lt;/li&gt;
  &lt;li&gt;SecurityConfig에 path 넣는 것도 필요하겠어요~&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;7-로그인-오류-수정&quot;&gt;#7 로그인 오류 수정&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-6&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;web 에서 로그인 성공하면 (필요한 토큰이 포함된) 쿠키도 구워줘야 될것 같아요 ㅎㅎ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;8-bigdecimal&quot;&gt;#8 BigDecimal&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-7&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BigDecimal.ZERO도 있습니다~&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;9-whitelist-로직&quot;&gt;#9 whitelist 로직&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-8&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;whitelist체크하는 로직은 web가입 web로그인 둘다 막아야 할것 같아요.유저가 app에서 가입하고 들어오는 케이스도 있으니…&lt;/li&gt;
  &lt;li&gt;시간이 되시면 UserServiceTest 를 보강하시는 게 좋을 것 같아요. (Client 들은 Mock 쓰시면 되고요)&lt;/li&gt;
  &lt;li&gt;(레포지토리에서 fetch하는 로직)  삭제된 엔티티는 걸러야 할 것 같아요~&lt;/li&gt;
  &lt;li&gt;기존의 webClient 이름을 알기 좋은 이름으로 바꾸시는 게 좋을 것 같네요~ (아래 internalClient와 같은 레벨로요~)request 메서드의 파라미터 명과 동일한 것도 혼란을 줄 소지도 있고요&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;10-쿠키굽기--인코딩하기&quot;&gt;#10 쿠키굽기 , 인코딩하기&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-9&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cookie에 domain은 안줘도 되나요?&lt;/li&gt;
  &lt;li&gt;map.getFirst가 null인 경우의 예외만 잘 챙겨주시면 될 것 같습니다.redirect_uri같은 값은 constant로 위로 뽑아주시면 좋구요&lt;/li&gt;
  &lt;li&gt;보통 utils패키지에 util을 만들려면, 뭔가 공통으로 쓸수 있는 함수가 되어야 맞을것 같은데, 여기서는 정말 callback url의 redirect_url 파라미터만 인코딩 하게끔 되어있네요..그냥 callback url encoder 비스므리하게 클래스 이름과 패키지를 바꾸던지, 유저서비스 안에다 넣는게 나아보이네요아니면 여러군데서 재활용 가능하게 변형해보는게 좋을것 같습니다.ㅋ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;-11-유틸의-위치와-optional--사용&quot;&gt;# 11 유틸의 위치와 Optional  사용&lt;/h1&gt;

&lt;h2 id=&quot;리뷰-10&quot;&gt;리뷰&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;그냥 참고 삼아 말씀드리면, (다른분) 코멘트처럼 Utils에 넣기에는 일반적이지는 않은 것 같구요. (사용되는 곳에)  private으로 묶어버리니 테스트를 할 수 없는 숨은 코드가 되어버리네요 ㅎㅎ( 연관있는 DTO) 에 별도 메서드로 넣어도 괜찮을 것 같습니다~&lt;/li&gt;
  &lt;li&gt;(@jsonignore 삭제에 대해서) (이 목적이라면) @jsonproperty를 사용할 수도 있겠네요~&lt;/li&gt;
  &lt;li&gt;Query Parameter 인데~ queryName 보다는 ParamName 이 좀 더 직관적인 것 같고~ 이런 이름은 상수로 맨 위에 선언해도 좋을 것 같아요.&lt;/li&gt;
  &lt;li&gt;예외 캐치가 어려운 건은 아니긴 하지만… 인코딩 에러가 나면 후속 진행이 안되는 상황이기 때문에 re-throw를 하는 게 좋을 것 같아요.이 때, 위의 try{인코딩}catch{ rethrow } 를 별도 메서드로 빼시면, 여기 메서드가 간결해질 것 같아요.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;페어 리뷰&lt;/strong&gt;: optional.ifPresent(()→ 메소드) 식보다는 optional.map(메소드)로 이어나가는 게 stream 스러워서 깔끔할 것 같아요~&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-15/code-review-i-got</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-15/code-review-i-got</guid>
            
            <category>Java</category>
            
            <category>CodeReview</category>
            
            
        </item>
        
        <item>
            <title>URL Encoding과 Java로 URL 뜯기</title>
            <description>&lt;p&gt;별것아닌거 같은데 삽질을 했던게 바로 어제다.&lt;/p&gt;

&lt;p&gt;redirect_uri 를 인코딩해서 내리는 게 금방 될 줄 알았는데!(그래서 url in url 형태를 막고 브라우저가 명확하게 인식하도록 하는 것)&lt;/p&gt;

&lt;p&gt;삽질 과정을 정리해본다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결론: Spring-Java에서 URL 뜯고 자원별로 뜯을 거면 URLComponentBuilder 쓰세요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;첫번째-삽질---split로-query를-다-뜯어&quot;&gt;첫번째 삽질 - split(“&amp;amp;”)로 query를 다 뜯어?&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//access.line.me/oauth2/v2.1/authorize?response_type=code&amp;amp;client_id=1&amp;amp;redirect_uri=https://localhost:8080/authorize&amp;amp;scope=profile+openid+email&amp;amp;state=abcd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 url은 특정한 반복이 있어서 언뜻보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;  로 뜯으면 편해질거같이 보인다.&lt;/p&gt;

&lt;p&gt;하지만..&lt;/p&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로 뜯은 다음 arr의 몇번째에 redirect_uri가 있는지 파악해서 이를 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 로 분리한 다음, redirect_uri의 value만 인코딩해서 갈아끼운 뒤 다시 붙여줘야하는 작업이다. 생각만 해도 너무 끔찍하다.&lt;/p&gt;

&lt;p&gt;너무 과한 작업이 들어가는 데다가 이번에밖에 못쓰는 코드를 생산하고, redirect_uri 위치를 하드코딩 하거나 for 문을 돌면서 if 로 검증해줘야하는데 그정도로 길어져야할 로직은 아니라고 생각했다.&lt;/p&gt;

&lt;h1 id=&quot;두번째-삽질---uri-라는게-있네-javanet&quot;&gt;두번째 삽질 - URI 라는게 있네? (java.net)&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://access.line.me/oauth2/v2.1/authorize?response_type=code&amp;amp;client_id=1&amp;amp;redirect_uri=https://localhost:8080/authorize&amp;amp;scope=profile+openid+email&amp;amp;state=abcd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 앗 ? 이후의  쿼리만 떨어진다&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// response_type=code&amp;amp;client_id=1&amp;amp;redirect_uri=https://localhost:8080/authorize&amp;amp;scope=profile+openid+email&amp;amp;state=abcd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제점-1&quot;&gt;문제점&lt;/h2&gt;

&lt;p&gt;첫번째 삽질과 같은 문제점에 봉착하는데, query name과 value까지는 뜯어주지 않는다는 점이다.&lt;/p&gt;

&lt;p&gt;그래서 직접 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; 로 분리해서 원하는 query name을 검사하는 로직이 들어간다.&lt;/p&gt;

&lt;p&gt;host name과 쿼리를 깔끔하게 분리하는데는 성공했지만 결국 같은 일을 해야한다.&lt;/p&gt;

&lt;h1 id=&quot;마지막-삽질----uricomponentbuilder&quot;&gt;마지막 삽질  - UriComponentBuilder&lt;/h1&gt;

&lt;p&gt;마치 uri component 를 합칠때만 쓸거같은 이름의 UriComponentBuilder는 쪼갤때도 유용하다.&lt;/p&gt;

&lt;p&gt;uricomponent builder는 query 파라미터를 쪼개어 map 형태로 만들어준다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UriComponentsBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriComponentsBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UriComponentsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromUriString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// url 에서 uricomponentbuilder를 만들어낸다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MultiValueMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriComponentsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQueryParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// queryparams 를 뽑아 map으로 만든다. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 map에서 원하는 query name을 골라서 뽑기만 하면 끝인데, nullpointerexception을 피하기 위해 optional 로 뽑아준다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 하고싶은 일을 한다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnsupportedEncodingException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unable to encode callback url : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Slf4j를 사용했다. &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기에 나는 redirect_uri을 뽑아서, 인코딩한 다음 그 값을  &lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt;  하는 일까지 해야했는데 UriComponentBuilder는 이 기능까지 지원한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uriComponentsBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replaceQueryParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URLEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;끝!  명료하고 유용하다.&lt;/p&gt;

&lt;p&gt;다음에 사용할 때는 좀더 UriComponetBuilder를 잘 사용할 방법이나&lt;/p&gt;

&lt;p&gt;유틸성으로 변환할 방법을 찾아봐야겠다.&lt;/p&gt;
</description>
            <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
            <link>/2018-12-10/java-parse-url</link>
            <guid isPermaLink="true">junebuug.github.io/2018-12-10/java-parse-url</guid>
            
            <category>Java</category>
            
            <category>Uricomponentbuilder</category>
            
            
        </item>
        
        <item>
            <title>데이터베이스 기초 - 정규화와 무결성</title>
            <description>&lt;p&gt;DB 시간에 어려워서 대충 들은 부분이라 상당히 후회된다. 스키마 작성하는 중에 계속 정규화 얘기와 무결성 얘기가 오가게 되어 정리를 다시 꼭 한번 짚고 넘어가려고 한다.&lt;/p&gt;

&lt;h2 id=&quot;이상-현상anomaly을-막아주세요&quot;&gt;이상 현상(Anomaly)을 막아주세요!&lt;/h2&gt;

&lt;p&gt;스키마를 작성하다보면 특정 정보를 중복해서 저장하는 경우가 생긴다. 한쪽에도 유저 June의 전화번호가 010-1234-1234 라고 적고, 다른 쪽에도 동일하게 적어둔다고 해보자. 그런데 June의 전화번호가 010-5678-5678로 변경되었다. 이 때 정보를 한쪽만 갱신하는 경우, 동일한 정보가 분기되면서 어떤 정보가 정확한 정보인지 알 수 없게 된다. 이는 &lt;strong&gt;갱신 이상&lt;/strong&gt;이라고 한다. 이처럼 중복된 데이터로 인해 생기는 문제들을 모두 &lt;strong&gt;Anomaly&lt;/strong&gt; 라고 한다. 한국말로는 &lt;strong&gt;이상 현상&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;이상 현상에는 크게 세 가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;삭제 이상 (Delete Anomaly)&lt;/p&gt;

    &lt;p&gt;하나의 자료만 삭제하고 싶지만, 그 자료가 포함된 튜플 전체가 삭제되어 필요한 정보 역시 손실되는 현상&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;삽입 이상 (Insert Anomaly)&lt;/p&gt;

    &lt;p&gt;원하지 않는 자료가 삽입되는 현상 혹은 삽입하는 데 (자료가 부족하여) 지정하지 않은 속성값이 NULL을 갖는 현상.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;갱신 이상 (Update Anomaly)&lt;/p&gt;

    &lt;p&gt;위에서 말한 것과 같이, 데이터가 중복 저장된 상황에서 하나만 갱신할 경우 생기는 현상.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결국 이런 이상현상의 원인은 데이터를 중복 저장하게 만드는 구조이다. 이를 분해하고 독립적으로 만들어 데이터 질의와 연산을 효과적으로 하기 위해서 &lt;strong&gt;데이터 정규화&lt;/strong&gt;가 등장한다.&lt;/p&gt;

&lt;h2 id=&quot;안녕-나는-정규화-릴레이션을-뽀개러왔다&quot;&gt;안녕 나는 정규화 릴레이션을 뽀개러왔다&lt;/h2&gt;

&lt;p&gt;정규화는 하나의 릴레이션에 하나의 의미만 존재하도록 릴레이션을 분해하는 과정이다.&lt;/p&gt;

&lt;p&gt;이를 통해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이상현상을 방지&lt;/li&gt;
  &lt;li&gt;저장공간을 최소화&lt;/li&gt;
  &lt;li&gt;자료 불일치 최소화 ( 무결성 보장 )&lt;/li&gt;
  &lt;li&gt;구조의 안정화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;를 (이루고자 하고) 이룰 수 있다.&lt;/p&gt;

&lt;p&gt;정규화 과정을 보면 제 1 정규형, 제 2 정규형, 제 3 정규형 .. 등 변신로봇 혹은 디지몬 변신을 상회하는 단계를 거친다. 높은 차수의 정규형은 낮은 차수의 정규형을 기본적으로 만족하고 있어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;제 1정규형(1NF = 1 Normal Form)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;중복되는 항목이 없어야한다 (도메인이 원자값으로 되어있어야한다.)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn3-9dc83294-69ed-4edd-8f22-48ec34c2b131.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;이런 경우, 손님은 사실 여러 개의 전화번호를 가질 수 있다. 즉 ‘김준영’ 손님의 전화번호 속성에 123-112, 5562-8793 와 같은 값이 생성 될 수 있다. 이런 경우를 &lt;strong&gt;원자값을 만족하지 못했다.&lt;/strong&gt; 라고 한다.&lt;/p&gt;

    &lt;p&gt;이를 해결하는 방법으로 전화번호1, 전화번호2 등의 칼럼을 추가하는 방법이 있다. (일단 하나의 칼럼에 한 값만 들어가면 되니까!)&lt;/p&gt;

    &lt;p&gt;하지만 이 방법은&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;고객 전화번호 수를 예측할 수 없다&lt;/li&gt;
      &lt;li&gt;테이블 질의가 어렵다 (어디에 어떤 번호가 들어있는지)&lt;/li&gt;
      &lt;li&gt;고객-전화번호 간의 유일성 확보가 어려움 (123-112가 여러번 입력될 수도 있음)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;라는 문제가 발생한다.&lt;/p&gt;

    &lt;p&gt;그래서 이를 해결하기 위해서는 테이블을 본격적으로 뽀개서&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn4-868d7585-00a1-40a9-8ef9-5dd7d39bfe50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn5-756d33c3-6072-4e4c-9290-9ee6341f8b1f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;와 같이 구성하여 해결한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;제2정규형(2NF)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;부분 함수적 종속 관계를 제거해야 함&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn6-5b58f305-dd57-4c54-b8a2-29c2425cefcd.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 테이블에서 candidate key는 종업원 + 기술이다.  그런데 근무지는 종업원이 근무하는 곳이므로 항상 종업원에 종속적인 관계를 갖는다. 키의 일부에만 종속적인 관계를 가지는 것을 &lt;strong&gt;부분 함수적 종속 관계&lt;/strong&gt;라고 하며, 부분 함수적 종속 관계는 갱신이상 (Update Anomaly)을 유발할 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 종업원-근무지, 종업원-기술 테이블로 나누어 정규화 작업을 해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;제3정규형(3NF)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;이행 함수적 종속 제거 ( x→ y→ z), transitive하지 않게 하기!&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn7-aea3c4d6-0be2-4a2a-885f-acb664cb6983.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;위 테이블에서는 대회 + 연도를 키로 우승자가 결정된다. 또 우승자에 따라서 우승자 생년월일이 결정된다. 즉 x → y , y → z 인 관계를 이행 함수적 종속 이라고 한다. 이런 경우 우승자를 변경하면 불필요하게 우승자 생년 월일을 동시에 변경해야 하므로 갱신 이상 (Update Anomaly)을 유발할 수 있다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn8-02b7aeb9-0076-4b32-80ea-b888a20ac2a9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn9-8ada1c57-5f13-44ce-8259-f9adf8724ab0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;위처럼 테이블을 분리하면, 우승자를 변경해도 생년월일을 일일히 변경하지 않아도 된다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;BC(Boyce-codd) 정규형 (BCNF)&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;결정자이면서 후보키가 아닌 것을 제거하는 정규형&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;후보키 Candidate Key&lt;/strong&gt;는 각 row가 유니크하도록 만드는 column 속성의 조합이다.  예를 들어 이름과 직군으로 데이터베이스의 행을 하나하나 구분할 수 있다면 (이름,직군) 이 후보키가 된다. 후보키가 하나이고 이 키가 기본키가 되며, 3NF를 만족하면 BCNF를 만족한다.&lt;/p&gt;

        &lt;p&gt;하지만 후보키가 많은 경우라면 3NF 를 만족한다고 해도 BCNF를 만족하지 않는 경우가 존재한다. 이를 해결하기 위한 정규형이 BCNF이다.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn-0311e6fe-0d85-4f1f-9e75-4dc6a89d0d33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;각 강사는 하나의 과목만 가르친다고 하자. 위의 예제에서 기본키는 (학생,과목)이다. 하지만 &lt;strong&gt;교수&lt;/strong&gt;에 의해서 기본키에 포함된 &lt;strong&gt;과목&lt;/strong&gt;이 결정된다(결정자로서 역할). 하지만 교수는 행을 유니크하게 구분하는 후보키가 될 수는 없다.&lt;/p&gt;

        &lt;p&gt;이런 경우&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Programming Language 과목이 Alan Turing 에 의해 열렸지만, 학생이 없는 경우 삽입할  수 없다.&lt;/p&gt;

            &lt;p&gt;(삽입이상)&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;Apple이 담당하는 과목이 바뀌면 수강생의 수만큼 갱신해줘야하고 이 과정에서 데이터 불일치가 생길 여지가 있다.(갱신이상)&lt;/li&gt;
          &lt;li&gt;데자와가 수업을 드랍해서 Computer Network의 수강생이 없어지면 Hoppman이라는 교수의 정보도 아예 사라진다. (삭제이상)&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;와 같은 이상 현상이 생긴다. 3NF를 만족한 상태인데도 말이다!&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;분해하기&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;여기서 문제가 되는 건 결정자이면서 후보키가 아닌 &lt;strong&gt;교수&lt;/strong&gt;이다. 이와 관련된 항목들을 먼저 뜯어내보자. 교수 → 과목이므로 이를 뜯어내고 나머지를 뜯어내보자.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn1-5ccd5de2-5d91-43f4-aaa3-34e450ebea7f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/img/2018-11-05/scrn2-05ca20e5-e4ea-4d57-81d0-48c19d4101ee.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;즉 BCNF는 모든 결정자가 후보키가 되도록하는 구조를 만족시켜야 완성된다.&lt;/p&gt;

    &lt;p&gt;## 무결성&lt;/p&gt;

    &lt;p&gt;데이터의 무결성은 데이터의 정확성, 일관성, 유효성이 유지되는 것을 의미한다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;개체 무결성 (Entity Integrity)&lt;/p&gt;

        &lt;p&gt;모든 테이블이 기본 키로 선택된 필드를 가져야 한다. 기본키로 선택된 필드는 고유한 값을 가져야 하며, NULL은 허용하지 않는다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;참조 무결성(Referential Integrity)&lt;/p&gt;

        &lt;p&gt;참조 관계에 있는 두 테이블의 데이터가 항상 일관된 값을 갖도록 유지 되는 것을 의미한다.  A가  B를 참조하고 있을 때, 참조하고 있는 B의 데이터가 삭제되었을 때 A에서는 더 이상 존재하지 않는 데이터를 참조하게 되며 이때 참조 무결성이 깨지게 된다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;도메인 무결성(Domain Integrity)&lt;/p&gt;

        &lt;p&gt;필드의 무결성을 보장하기 위한 것으로 필드의 타입이나 NULLABLE 등의 설정을 하는 것을 말한다. 예를 들어, 주민등록번호 필드에 알파벳이 입력되는 경우는 도메인 무결성이 깨지는 경우이다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;무결성 규칙 (Integrity Rule)&lt;/p&gt;

        &lt;p&gt;데이터베이스에서 무결성 규칙은 데이터의 무결성을 지키기 위한 모든 제약 사항을 말한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;참고&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://it-ing.tistory.com/50&quot;&gt;http://it-ing.tistory.com/50&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://asfirstalways.tistory.com/341&quot;&gt;http://asfirstalways.tistory.com/341&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://gomcine.tistory.com/entry/Database-9-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A0%95%EA%B7%9C%ED%99%94-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EB%B0%A9%EB%B2%95&quot;&gt;http://gomcine.tistory.com/entry/Database-9-데이터베이스-정규화-개념-및-방법&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://yaboong.github.io/database/2018/03/10/database-normalization-2/&quot;&gt;https://yaboong.github.io/database/2018/03/10/database-normalization-2/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://untitledtblog.tistory.com/123&quot;&gt;http://untitledtblog.tistory.com/123&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
            <link>/2018-11-05/database-normalization</link>
            <guid isPermaLink="true">junebuug.github.io/2018-11-05/database-normalization</guid>
            
            <category>Database</category>
            
            <category>Normalization</category>
            
            
        </item>
        
        <item>
            <title>카프카는 작가이름 아닌가요 - 카프카 알아보기</title>
            <description>&lt;p&gt;서버가 엄청나게 성능이 좋아서 모든 일을 동기식으로 처리할 수 있으면 얼마나 좋을까! 어떤 요청이든, 큰 트래픽이 쏠려도 순식간에 일을 하고 그 결과를 바로 넘겨주는 기적의 서버.&lt;/p&gt;

&lt;p&gt;아쉽게도 그런 이데아는 찾아보기 어렵다. 결국에는 우리는 비동기적으로 일해야하고, 서버가 일을 처리하는 동안 들어온 요청은 잘 쌓아뒀다가 여유가 생길 때 차례대로 대응해야한다.&lt;/p&gt;

&lt;p&gt;그런데 요청도 일하는 서버가 계속 받는다면, 일하는 속도도 느려진다. 그래서 우리는 큐를 사용한다. 그냥 큐가 아니라 메시지를 쌓아두는 큐. 그래서 이를 Message Queue라고 부른다.&lt;/p&gt;

&lt;h2 id=&quot;activemq&quot;&gt;ActiveMQ&lt;/h2&gt;

&lt;p&gt;ActiveMQ는 전통의 메시지 큐 강자이다. Java로 만든 오픈 소스 메시지 브로커이며, 자바, C, C++, C#, 루비, 파이썬, PHP, 펄 등의 다양한 클라이언트를 지원한다.&lt;/p&gt;

&lt;p&gt;JMS(Java Message Service) API를 사용해서 통신한다.&lt;/p&gt;

&lt;h2 id=&quot;rabbitmq&quot;&gt;RabbitMQ&lt;/h2&gt;

&lt;p&gt;가볍고 큐로서의 기능이 두드러지는 메시지 큐. 다양한 메시징 프로토콜을 지원한다. 다양한 기능, 클라이언트 라이브러리, 개발 툴, 그리고 퀄리티 높은 문서가 특징이다. ActiveMQ에서 사용하는 JMS는 자바 외 어플리케이션들이 메시징할 때 불편했지만, RabbitMQ에서 사용하는 AMQP 는 언어에 관계없는 오픈 소스 메시지를 가능케한다.&lt;/p&gt;

&lt;p&gt;일반적인 메시지 브로커로서 디자인되었으며, 다양한 P2P 양상을 지원하고, request/reply  모델과 pub-sub 패턴을 모두 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;Smart Broker - Dumb Consumer 모델을 사용한다. 브로커가 컨슈머의 상태를 지속적으로 기록하여, 비슷한 속도로 메시지를 소비하는 컨슈머들에게 지속적으로 메시지를 전달한다.&lt;/p&gt;

&lt;h2 id=&quot;kafka&quot;&gt;Kafka&lt;/h2&gt;

&lt;p&gt;아예 새로운 메시징의 개념을 들고 온 것이 카프카다.&lt;/p&gt;

&lt;p&gt;카프카는 원래 Scala로 개발되었고, LinkedIn이 사내 시스템을 연결하기 위한 목적으로 만들었다. 현재 카프카는 Apache 소프트웨어 재단 생태계에 자리잡았다.&lt;/p&gt;

&lt;p&gt;볼륨이 큰 publish-subscribe 메시지와 스트림을 내구성있게, 빠르게, 확장가능하게 다룰 수 있도록 디자인되었다. 카프카는 로그처럼 내구성있는 메시지 저장을 지원하며, 서버 클러스터 내에서 돌고, &lt;code class=&quot;highlighter-rouge&quot;&gt;topic&lt;/code&gt; 별로 레코드를 저장한다.&lt;/p&gt;

&lt;p&gt;RabbitMQ와는 정반대로, dumb broker - smart consumer 구조를 사용하여 consumer가 직접 버퍼를 읽는 형식을 사용한다. 카프카 브로커는 어떤 컨슈머가 뭘 읽었는지 기록하려고 하지 않고, 일정시간 동안 모든 메시지를 들고 있는다. 어디까지 읽었는지는 컨슈머가 직접 기록해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;그래서-요약해서-뭐하는-애야&quot;&gt;그래서 요약해서 뭐하는 애야&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;💪 메시지큐나 메시징 시스템처럼, 레코드 스트림을 publish(발행) 혹은 subscribe(구독) 할 수 있게 해준다&lt;/li&gt;
  &lt;li&gt;레코드 스트림을 내구성 있고, fault가 생겨도 되돌릴 수 있는 방식으로 저장한다&lt;/li&gt;
  &lt;li&gt;레코드 스트림을 발생하는 즉시 처리한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;어디에-쓰나요&quot;&gt;어디에 쓰나요&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;시스템이나 어플리케이션 간에 안정성 있게 데이터를 가져오는 실시간 스트리밍 데이터 파이프라인 구축할 때&lt;/li&gt;
  &lt;li&gt;데이터 스트림에 따라 변하거나 대응하는 리얼타임 스트리밍 어플리케이션을 만들 때&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;여러 데이터 센터에 걸쳐있는 하나 이상의 서버 위에서 클러스터로 동작한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;topic&lt;/code&gt; 이라는 이름의 카테고리별로 레코드 스트림을 저장한다.&lt;/li&gt;
  &lt;li&gt;각 레코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; 를 갖고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;코어-api&quot;&gt;코어 API&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Producer API&lt;/code&gt; : 어플리케이션이 하나 이상의 카프카 토픽을 발행할 수 있게 해줌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Consumer API&lt;/code&gt; : 하나 이상의 토픽을 구독하고, 발생된 레코드를 처리할 수 있게 해줌&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Streams API&lt;/code&gt; : 어플리케이션이 stream processor 로 동작하여, 하나 이상의 토픽에서 오는 스트림을 소비하고 하나 이상의 아웃풋 스트림을 만들 수 있도록한다. 즉 인풋스트림을 아웃풋 스트림으로 효과적으로 변환한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Connector API&lt;/code&gt; : 재사용되는 프로듀서와 컨슈머를 만들어, 카프카 토픽을 어플리케이션 / 데이터 시스템에 연결한다. 예를 들어, RDB에 연결된 connector는 테이블의 모든 변화를 감지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;토픽-그리고-로그&quot;&gt;토픽, 그리고 로그&lt;/h2&gt;

&lt;p&gt;토픽은 레코드가 발행되는 카테고리 혹은 피드의 이름이다. 카프카에서의 토픽은 언제나 multi-subscriber 인데, 이는 하나의 토픽이 0,1, 혹은 그보다 많은 컨슈머를 가질 수 있다는 걸 말한다.&lt;/p&gt;

&lt;p&gt;각 토픽에 대해서, kafka 클러스터는 다음과 같이 파티션으로 나눠진 로그를 운영한다. 즉 각 토픽이 발행된 내용은 분산 저장된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/kafka-562e8643-9257-430e-9009-1901f697cc2e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;offset은 각 파티션 내에서 메시지를 식별하는 ID로 사용된다. topic 내에서 메시지를 식별할 때는 파티션 번호와 offset값을 동시에 쓴다.&lt;/p&gt;

&lt;h2 id=&quot;producer&quot;&gt;Producer&lt;/h2&gt;

&lt;p&gt;원하는 대로 topic을 publish 하는 존재. 어떤 토픽의 어떤 파티션에 레코드를 넣을 것인지 정하는 의무가 있다.&lt;/p&gt;

&lt;p&gt;round-robin 혹은 key값에 따라 달라질 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;consumer&quot;&gt;Consumer&lt;/h2&gt;

&lt;p&gt;컨슈머는 독립적인 프로세스일 수도 있고, 독립적인 머신일 수도 있다. topic을 구독-소비하는 주체를 의미한다.&lt;/p&gt;

&lt;p&gt;컨슈머는 스스로 consumer group name을 레이블링 할 수 있다. 만약 한 토픽을 구독하는 두 컨슈머가 있는데, 알고보니 같은 시스템에 존재한다고 해보자. 낭비를 줄이기 위해 이 두 컨슈머는 구독하던 내용을 머지하고, 한꺼번에 구독하기로 했다. 이때 consumer group을 사용한다.&lt;/p&gt;

&lt;p&gt;하나의 파티션에는 컨슈머 그룹 당 하나의 컨슈머만 접근할 수 있다. 이 컨슈머를 &lt;code class=&quot;highlighter-rouge&quot;&gt;partition owner&lt;/code&gt; 라고 부른다.&lt;/p&gt;

&lt;p&gt;그러므로,(group 내의) consumer 수 &amp;lt; partition 수 이면 하나의 컨슈머가 각각 여러 파티션을 소유하게 되고, (group 내의) consumer 수 &amp;gt; partition 수 이면 놀게 되는 consumer가 생기므로 수를 적절히 조절해야한다.&lt;/p&gt;

&lt;h2 id=&quot;왜-빠른가요&quot;&gt;왜 빠른가요&lt;/h2&gt;

&lt;p&gt;Kafka 는 기존 메시징 시스템과는 달리 메시지를 메모리 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;파일 시스템&lt;/code&gt;에 쌓아두고 관리한다.&lt;/p&gt;

&lt;p&gt;아니, 당연히 메모리보다는 파일 시스템이 훨씬 느리지 않은가요? 성능이 당연히 저하되지않나요?&lt;/p&gt;

&lt;p&gt;기존 메시징 시스템에서는 그랬다. 파일 시스템은 단지 영속성을 위해서 성능 저하를 감수하면서 사용하는 애물단지에 불과했다.&lt;/p&gt;

&lt;p&gt;Kafka에서는 파일 시스템을 메시지의 주 저장소로 사용하면서도 기존의 메시징 시스템보다 뛰어난 성능을 보여준다. 이게 어떻게 가능한 것일까?&lt;/p&gt;

&lt;p&gt;일반적으로 하드 디스크는 메모리보다 수천 수백배 느리다. 하지만 특정 조건에서는 메모리보다 10배 이내로 느리거나 심지어는 더 빠르다. 하드디스크의 순차적 읽기 성능은 메모리의 랜덤 읽기 성능보다 뛰어나며, 메모리의 순차 읽기보다는 7배 느리다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kafka의 메시지는 하드디스크로부터 순차적으로 읽혀지기때문에 빠르다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 Kafka에서는 파일 시스템에 저장된 메시지를 네트워크를 통해 consumer에 전송할 때&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;zero-copy 기법을 사용하여 데이터 전송 성능을 향상시켰다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;zero-copy는 데이터 전송 시 커널 모드에서만 처리한다.&lt;/p&gt;

&lt;p&gt;일반적인 파일 시스템 데이터 전송시, Read Buffer(커널모드) → Application Buffer(유저모드) → Socker Buffer(커널모드) → NIC(랜카드) Buffer(커널모드) 의 과정을 거친다. 이 중 유저모드에 불필요한 복사를 제거하여 좀더 빠르게 전송할 수 있는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;이제-quickstart-해볼까-근데-주키퍼는-뭐야&quot;&gt;이제 QuickStart 해볼까… 근데 주키퍼는 뭐야&lt;/h2&gt;

&lt;p&gt;주키퍼는 분산환경에서 필요한 설정, 네이밍, 분산 싱크맞추기, 그룹 서비스들을 제공하는 존재입니다.&lt;/p&gt;

&lt;p&gt;quickstart를 진행하기 위해서는 zookeeper를 먼저 실행시켜야합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka_2.11-2.0.0.tgz&quot;&gt;https://www.apache.org/dyn/closer.cgi?path=/kafka/2.0.0/kafka_2.11-2.0.0.tgz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;에서 kafka 2.11-2.0.0 버전을 받고 압축을 풀어줍니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;kafka_2.11-2.0.0 &lt;span class=&quot;c&quot;&gt;# 디렉토리로 이동&lt;/span&gt;
bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;span class=&quot;c&quot;&gt;# zookeeper 설정으로 zookeeper를 실행시킵니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;quickstart--서버-띄우고-메시지를-주고-받아보자&quot;&gt;Quickstart : 서버 띄우고 메시지를 주고 받아보자&lt;/h2&gt;

&lt;p&gt;zookeeper를 띄웠으면 터미널을 새로 띄웁니다. 디렉토리로 이동합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/zookeeper-server-start.sh config/server.properties 
# 서버를 띄운다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 서버까지 띄웠으면 토픽을 정해줄 차례입니다.&lt;/p&gt;

&lt;p&gt;파티션은 몇개 해줄 건지, 주키퍼는 어떤 녀석을 사용할 건 지 정해줍니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# test라는 이름의 topic을 생성한다. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# zookeeper는 localhost:2181 을 사용&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 파티션은 하나만 사용한다. &lt;/span&gt;

bin/kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--describe&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# test 토픽에 대한 정보를 확인한다. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 파티션 갯수와 leader 노드 등에 대한 정보가 있다. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;test라는 이름의 토픽을 생성했습니다.&lt;/p&gt;

&lt;p&gt;원하는 zookeeper, replication 갯수, 파티션 갯수와 이름을 설정할 수 있습니다.&lt;/p&gt;

&lt;p&gt;우리가 생성한 설정에서는 주키퍼가 2181 포트에 띄워져있습니다.&lt;/p&gt;

&lt;p&gt;이제 메시지를 보낼 producer와 consumer를 띄워볼 차례입니다.&lt;/p&gt;

&lt;p&gt;같은 터미널에서 producer를 띄워줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-console-producer.sh &lt;span class=&quot;nt&quot;&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# test 토픽에 대한 프로듀서를 띄운다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 생성한 test 에 대한 프로듀서를 만들었습니다. 브로커가 여럿이라면 (위에서 만든 서버) 고를 수 있는데, 우리는 지금 하나만 만들었습니다. 그리고 9092 포트를 기본으로 설정했습니다.&lt;/p&gt;

&lt;p&gt;새로 터미널을 띄우고 디렉토리로 이동합니다. 이제 consumer를 띄워줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# test 토픽을 구독할 컨슈머를 띄운다&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;부트스트랩 서버는 여기서 브로커 리스트랑 차이가 없습니다.&lt;/p&gt;

&lt;p&gt;이제 프로듀서를 띄운 터미널로 가서 메시지를 마구 입력합니다.&lt;/p&gt;

&lt;p&gt;그러면 컨슈머쪽에서 해당 메시지가 순서대로 오는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/scrn-f2d30b6d-b631-4c5c-b4bf-9e871687a415.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그러면-partition이-여러-개면&quot;&gt;그러면 partition이 여러 개면?&lt;/h2&gt;

&lt;p&gt;위에서 토픽을 생성할 때 &lt;strong&gt;partition을 한 개로&lt;/strong&gt; 생성했습니다.&lt;/p&gt;

&lt;p&gt;여러개 생성해보면 어떨까요?&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-topic.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; test3 
&lt;span class=&quot;c&quot;&gt;# 파티션을 세개 생성&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 producer를 다시 띄우고 숫자를 순서대로 입력해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/scrn1-98ddf21e-9b1a-4e86-b1bc-92c0f1f9173c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 컨슈머에서는 순서가 뒤죽박죽으로 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/scrn2-0449bc0f-fca1-40b3-8620-125498047f2f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이는 파티션을 생성했기 때문입니다. 프로듀서가 생성한 메시지는 파티션에 나뉘어서 들어가고, 컨슈머는 이 메시지를 파티션에 상관없이 읽어옵니다. 프로듀서의 생성 순서는 오로지 &lt;strong&gt;파티션 안에서만 보존됩니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;그러면-브로커가-여러개면&quot;&gt;그러면 브로커가 여러개면?&lt;/h2&gt;

&lt;p&gt;이번에는 간단합니다. server config를 복사하여 조금 손봐줍니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp config/server.properties config/server1.properties
&lt;span class=&quot;c&quot;&gt;# 서버 1 설정 복사 &lt;/span&gt;

cp config/server.properties config/server2.properties
&lt;span class=&quot;c&quot;&gt;# 서버 2 설정 복사 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vi로 복사한 설정을 연 뒤, 다음과 같은 정보들을 변경해줍니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;broker.id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;c&quot;&gt;# 1번서버는 1, 2번서버는 2&lt;/span&gt;
log.dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/kafka-logs-1 &lt;span class=&quot;c&quot;&gt;# 1번서버는 kafka-logs-1, 2번서버는 kafka-logs-2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PLIANTEXT://:9093 &lt;span class=&quot;c&quot;&gt;# 1번서버는 9093, 2번 서버는 9094&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 해당 config로 서버를 띄웁니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-server-start.sh config/server1.properties
bin/kafka-server-start.sh config/server2.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 브로커가 현재 총 3개 띄워진 상태입니다.&lt;/p&gt;

&lt;p&gt;이제 june이라는 토픽을 만듭니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bin/kafka-topics.sh &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; june
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 브로커가 여러 개일때 어떻게 메시지를 받는지 실험할 준비가 모두 끝났습니다.&lt;/p&gt;

&lt;p&gt;프로듀서를 만듭니다. 이때 broker를 9092 (0번째 브로커) 로 선택합니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-console-producer.sh &lt;span class=&quot;nt&quot;&gt;--broker-list&lt;/span&gt; localhost:9092 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; june 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨슈머를 만들어줍니다. 이때는 위에서의 브로커와 다른 브로커를 선택합니다.&lt;/p&gt;

&lt;p&gt;여기서는 &lt;a href=&quot;http://localhost:9093&quot;&gt;localhost:9093&lt;/a&gt; 즉 1번을 선택해주겠습니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-console-consumer.sh &lt;span class=&quot;nt&quot;&gt;--bootstrap-server&lt;/span&gt; localhost:9093 &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; june
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/scrn3-b56b796e-385a-4a9d-ac2d-d0ab3edbfe9e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/scrn4-00c76da7-435b-4f20-bafe-ebebba42ee6a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;완성!&lt;/p&gt;
&lt;h3 id=&quot;추가-bootstrap-서버는-뭘까&quot;&gt;추가. bootstrap 서버는 뭘까&lt;/h3&gt;

&lt;p&gt;Kafka cluster에 대해서 최초 커넥션을 만들기 위해서 필요한 host/port 페어를 말한다.&lt;/p&gt;

&lt;p&gt;전체 cluster set의 일부이며, Kafka cluster의 연결 상태와 노드들을 모두 discover하기 위한 친구들이다.&lt;/p&gt;

&lt;p&gt;1개 이상이면 좋다.(서버가 하나 죽었을 경우를 대비하여)&lt;/p&gt;
</description>
            <pubDate>Wed, 31 Oct 2018 00:01:00 +0000</pubDate>
            <link>/2018-10-31/kafka</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-31/kafka</guid>
            
            <category>Messaging Queue</category>
            
            <category>Kafka</category>
            
            <category>Log</category>
            
            
        </item>
        
        <item>
            <title>커버로스 Kerberos 프로토콜 이란</title>
            <description>&lt;p&gt;‘… 하둡에 커버로스를 붙였나요? ‘ ‘커버라이즈드 하둡이…~~~’ 하는 얘기를 들으면서, 커버로스 = 인증인데 굉장히 붙이기 까다로워서 선배님들이 싫어하시는 것이군! 하는 개념이 잡혔다. 모른채로 넘어갈 수는 없어서 한번 알아본다. 왜 케르베로스가 아니라 커버로스인지는 모르겠음.  → 케르베로스는 라틴식 발음이라고 한다. 일각에서는 케르베로스라고 부르기도 하는 모양이다.&lt;/p&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://www.letmecompile.com/kerberos-protocol/&quot;&gt;https://www.letmecompile.com/kerberos-protocol/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;서버가 적고, 이 서버를 사용하는 개발자가 몇명 안되면 수동으로 접근 가능한 유저를 추가하면 된다. A 서버에는 1,2 님, B 서버에는 2,3 님만 접근 가능하다는 식으로 말이다. 하지만 점점 서버의 숫자가 많아지고, 유저가 늘어나는 경우에는 관리에 드는 비용이 점점 커진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 서버별로 접근 가능한 사용자들의 권한을 관리해야하는 경우&lt;/li&gt;
  &lt;li&gt;서버 추가 혹은 유저가 추가/삭제 할 때마다 매번 접근 가능 유저리스트를 수정해야하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 경우, 클라이언트와 서버 외의 제 3의 인증서버(Authentication Server, AS) 를 도입한다. AS와 연동된 티켓 서비스에서 유저들에게 티켓을 발급하여, 유효한 티켓이 있는 유저만 서비스 서버(기존의 일반 서버) 에 접근할 수 있도록 제어하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;커버로스&lt;/code&gt; 프로토콜을 도입하여 편하게 관리가 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/kerberos.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;커버로스 프로토콜&lt;/code&gt; 의 동작 구조는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트가 ID/PWD 나 공개키로 클라이언트에 로그인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트가 유저 아이디를 인증서버로 전송한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;인증서버는 유저 아이디가 디비에 있는지 확인하고 다음을 클라이언트에게 던져준다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트 기반 PWD 키로 암호화한 &lt;strong&gt;TGS 세션키&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;클라이언트 ID, 주소, 유효기간, TGS 세션키를 TGS 비밀키로 암호화한 &lt;strong&gt;티켓용 티켓 (Ticket Granting Ticket, TGT)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트는 다음 두 가지를 티켓 부여 서버(TGS)에게 보내준다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;클라이언트 ID, Timestamp&lt;/strong&gt; 를 TGS  세션키로 암호화한 뭉치&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;티켓용 티켓(TGT)&lt;/strong&gt; 클라이언트는 TGS 비밀키는 모르므로 복호화해서 보낼 수 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그러면 티켓 부여 서버(TGS)는 이를 확인한 후, 티켓과 SS 세션키를 보내준다.
    &lt;ul&gt;
      &lt;li&gt;TGS 세션키로 암호화한 &lt;strong&gt;SS 세션키&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;클라이언트 ID, 주소, 유효기간, SS 세션키를 SS 비밀키로 암호화한 &lt;strong&gt;티켓 (Ticket)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트는 이제 진짜 서비스를 요청할 서비스 서버(SS)에게 다음 두가지를 알려준다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;클라이언트 ID, Timestamp&lt;/strong&gt;를 SS 세션키로 암호화한 뭉치&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;티켓&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 서버는 티켓을 확인하여 timestamp를 SS 세션키로 암호화하여 내려준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이제 클라이언트가 서비스 사용 가능 함.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 하면 대충 커버로스는 이해 가능하다.&lt;/p&gt;

&lt;p&gt;상기의 모든 내용은 참고 링크에서 따왔다.&lt;/p&gt;

</description>
            <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-31/kerberos</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-31/kerberos</guid>
            
            <category>Authentication</category>
            
            <category>Kerberos</category>
            
            <category>Security</category>
            
            
        </item>
        
        <item>
            <title>하둡 이란</title>
            <description>&lt;p&gt;팀 내에서 하둡 시스템 케이스 스터디를 보고, 또 커버로스와 하둡이야기가 계속 오가기에 늦기전에 정리해야겠다고 생각했다. 🙂 학교에서는, 코끼리 마크를 가진 분산형 파일시스템 정도로만 가르쳐주었기에 실제로는 어떻게 쓰는지 궁금해졌다.&lt;/p&gt;

&lt;p&gt;참고 &lt;a href=&quot;http://www.itworld.co.kr/print/73626&quot;&gt;http://www.itworld.co.kr/print/73626&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;왜&quot;&gt;왜?&lt;/h2&gt;

&lt;p&gt;하드 디스크의 용량은 엄청나게 증가했지만 이를 읽는 속도는 상대적으로 느리게 증가했다. 옛날에는 5분이면 디스크를 전부 읽을 수 있었지만, 이제는 2시간 반이 걸려야 다 읽을 수 있는 수준에 이르렀다.&lt;/p&gt;

&lt;p&gt;그렇다면 이 정보들을 나눠서 병렬적으로 처리하고 공유할 수 있다면 어떨까? 이러면 매우 빠른 분석이 가능하다.&lt;/p&gt;

&lt;p&gt;이런 방식으로 동작하는 것이 하둡이다.&lt;/p&gt;

&lt;h2 id=&quot;하둡은&quot;&gt;하둡은&lt;/h2&gt;

&lt;p&gt;분산환경에서 데이터를 저장하고 처리할 수 있는 오픈 소스 프레임 워크.&lt;/p&gt;

&lt;p&gt;하둡은 비관계형 DBMS에 속하지만, SQL 쿼리 언어도 사용가능하다.&lt;/p&gt;

&lt;p&gt;하둡은 몇가지 구성요소들로 이뤄져있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-31/hadoop-diagram.jpg&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하둡 프레임워크. 출처 &lt;a href=&quot;http://www.itworld.co.kr/print/73626&quot;&gt;http://www.itworld.co.kr/print/73626&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 중 가장 중요한 두가지는 &lt;strong&gt;HDFS와 맵리듀스(Map-Reduce)&lt;/strong&gt;이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;하둡 분산형 파일 시스템(Hadoop Distributed FileSystem, HDFS)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;HDFS는 하둡 네트워크에 연결된 어떤 기기에나 데이터를 밀어 넣는 분산형 파일 시스템이다. 하둡 시스템은 보드에 좋은 하드드라이브가 거의 없는 상용화 서버들이라도 활용이 가능하다. 하둡은 RDBMS 가 갖는 관리 비용을 들이지 않고, HDFS를 이용한다. 그래서 데이터를 &lt;strong&gt;다수의 기기들과 드라이브들에 저장&lt;/strong&gt;하며, 다수의 노드로 이뤄진 하둡 시스템에 &lt;strong&gt;데이터가 자동적으로 중복&lt;/strong&gt;되게 만든다.&lt;/p&gt;

    &lt;p&gt;HDFS가 하둡 네트워크에서 주로 사용되는 파일시스템이긴 하지만, 유일한 파일 시스템은 아니다. 스터디에서 말씀해주신 것 처럼, ec2에서는 하둡에 S3를 붙였다.&lt;/p&gt;

    &lt;p&gt;HDFS는&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;저장하는 파일을 블록으로 나눠&lt;/li&gt;
      &lt;li&gt;(기본) 3개로 복제 되어 다른 HDFS 노드에 분산 저장됨&lt;/li&gt;
      &lt;li&gt;네임노드 1 대(마스터) - 데이터노드 여러대 (슬레이브) 구조로,&lt;/li&gt;
      &lt;li&gt;네임노드에 저장된 메타데이터를 이용하여 클라이언트가 저장된 파일에 접근한다.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;하둡 어플리케이션은 파일을 저장하거나 읽기 위해서 HDFS 클라이언트를 사용한다.&lt;/p&gt;

    &lt;p&gt;이때 클라이언트는 API 형태로 사용자에게 제공된다.&lt;/p&gt;

    &lt;p&gt;슬레이브 역할을 하는 데이터노드들은 블록의 정보를 네임노드에 정기적으로 전송하여, 네임노드로 하여금 데이터 노드가 정상 동작하는지 확인하게 한다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-10-31/hdfs-file-save.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;파일을 저장하고자 하는 어플리케이션은 제일 먼저 네임 노드에 저장사실을 알린다. 네임노드는 경로를 찾거나 만들어 저장 가능한 데이터 노드 목록을 넘겨준다. 어플리케이션이 그 중 첫 노드에 파일 저장 요청을 하면, 데이터 노드들은 자신의 저장이 끝내고 다음 노드에 넘겨준다. 마지막 노드까지 저장을 완료하면 파일 저장 완료 리스폰스를 보낸다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-10-31/hdfs-file-read.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;읽고자 할때는 어플리케이션이 클라이언트에게 과정을 위임한다. 클라이언트는 네임노드에서 저장된 블록을 찾아 해당 블록에서 데이터를 가져온다. 이후 이 데이터를 다시 어플리케이션에 전달한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;맵리듀스(MapReduce)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;대용량 데이터 처리를 위한 분산 프로그래밍 모델. 대량의 데이터를 병렬로 분석이 가능하다. 프로그래머가 작성하는 Map 그리고 Reduce라는 두 개의 메소드로 구성되어있다. Map은 key - value의 형태로, 흩어져있는 정보를 연관성 있는 데이터 분류로 묶는 작업이다. Reduce는 Map화 한 작업 중 중복 데이터를 제거하고 원하는 데이터를 추출하는 작업이다.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/img/2018-10-31/map-reduce.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;맵리듀스가 아무데서나 실행되는 건 아니다. 맵 리듀스 시스템은 클라이언트 - 잡트래커 - 태스크 트래커의 구조를 갖는다. 클라이언트는 분석하고자 하는 정보는 잡의 형태로 잡트래커에게 넘겨준다. 잡트래커는 네임노드에 위치하면서, 하둡 클러스터의 전체 잡을 스케쥴링하고 모니터링한다. 태스크트래커는 잡을 받아 요청 받은 맵과 리듀스 개수만큼 맵 태스크와 리듀스 태스크를 생성한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
            <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-31/hadoop</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-31/hadoop</guid>
            
            <category>Distributed System</category>
            
            <category>Storage</category>
            
            <category>Log</category>
            
            <category>Hadoop</category>
            
            
        </item>
        
        <item>
            <title>Java Generic 자바 제네릭</title>
            <description>&lt;p&gt;Generic 개념을 제대로 정의하지 않고 넘어가니 계속해서 의문점이 생기는 경우가 늘어난다.&lt;/p&gt;

&lt;p&gt;ArrayList&lt;String&gt; 으로만 접한 Generic을 좀더 잘 정의해보도록 한다.&lt;/String&gt;&lt;/p&gt;

&lt;h2 id=&quot;generic-제네릭&quot;&gt;Generic (제네릭)&lt;/h2&gt;

&lt;p&gt;일반적인 자료형이라고 하면, 우리는 int, double, String 등의 기본 데이터 타입부터 생각하게 된다.&lt;/p&gt;

&lt;p&gt;제네릭이란, 이런 데이터 타입을 &lt;code class=&quot;highlighter-rouge&quot;&gt;아직 명시하지 않은 상태&lt;/code&gt; 라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;제네릭은 다음과 같은 상황에서 쓸 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;클래스명&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// public class June&amp;lt;T&amp;gt; { ... } &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;인터페이스명&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// public interface Juneterface&amp;lt;T&amp;gt; { ... }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;강제적인 형변환이 발생하지 않는다.&lt;/p&gt;

    &lt;p&gt;Generic은 Object를 사용하는 코드를 대체할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;June&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음과 같이 필드로 오브젝트를 갖는 클래스가 있다고 하자.&lt;/p&gt;

&lt;p&gt;오브젝트를 필드로 쓴 이유는 이 필드가 String 이나 Integer 등 다양한 타입을 받기를 원하기 때문이다. 🤔&lt;/p&gt;

&lt;p&gt;이 클래스를 사용하려면, 아래 과정을 거친다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;June&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;june&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;June&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;june&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;스트링을 set 해준다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;june&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;스트링을 set 해준다.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 보듯 Object 클래스를 다루기에 반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;형변환&lt;/code&gt; 이 필요하다.&lt;/p&gt;

&lt;p&gt;Generic을 사용하면 강제적인 형변환을 없앨 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;June&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;June&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;june&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;June&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;june&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;나는 스트잉이여&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;june&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;나는 스트잉이여&quot; &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 형변환 필요 없음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;반복적인 코드 절약, 코드 재사용성&lt;/p&gt;

    &lt;p&gt;만약 object와 제네릭을 둘다 사용하지 않고, 각각 들어오는 형마다 다른 게터와 세터를 설정해준다고 생각해보자. 계속해서 반복적인 코드가 쌓이게 된다. 제네릭을 사용하여 이런 점을 막을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컴파일 시 타입 오류를 체크하여 사전에 엄격한 타입체크를 가능하게 함.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;제네릭-메소드&quot;&gt;제네릭 메소드&lt;/h1&gt;

&lt;p&gt;매개 타입과 리턴 타입으로 타입 파라미터를 갖는 메소드를 말합니다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;타입파라미터&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;리턴타입&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;메소드명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;매개변수&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// public &amp;lt;T&amp;gt; Box&amp;lt;T&amp;gt; boxing(T t) { ... }&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 즉, 앞에 있는 &amp;lt;T&amp;gt; 에는 매개 변수 중에 타입파라미터를 사용하는 것이 있다는 뜻이고, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 뒤의 Box&amp;lt;T&amp;gt; 는 리턴을 Box&amp;lt;T&amp;gt; 형태로 해주겠다는 뜻인듯.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;호출-방식&quot;&gt;호출 방식&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 첫번째 &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;리턴타입&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;매개타입&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;메소드명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;매개&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Box&amp;lt;Integer&amp;gt; box = &amp;lt;Integer&amp;gt; boxing(100);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//두번째&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;리턴타입&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;메소드명&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;매개값&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Box&amp;lt;Integer&amp;gt; box = boxing(100); &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 어차피 100이 들어갔으니 boxing에 들어 갈 타입은 &amp;lt;Integer&amp;gt; 겠구나! 라고&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 타입 추정&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;호출은 위와 같은 방식으로 합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;매개값과 매개 타입을 모두 적어주거나&lt;/li&gt;
  &lt;li&gt;매개값으로 타입을 유추하게 하는 방식 두 가지 입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;요약&quot;&gt;요약&lt;/h2&gt;

&lt;p&gt;제네릭 메소드를 요약해봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-17/generic.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;T&amp;gt;&lt;/code&gt; 는 조금 헷갈릴 수 있는데요.&lt;/p&gt;

&lt;p&gt;이를 이해하려면 간단하게 June.class 의 타입은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;June&amp;gt;&lt;/code&gt; 이라는 용례만 알면 됩니다.&lt;/p&gt;

&lt;p&gt;즉 위의 코드에서 clazz라는 이름의 변수는, 어떤 클래스의 타입을 받는 것이라고 할 수 있습니다.&lt;/p&gt;
</description>
            <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-17/java-generic</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-17/java-generic</guid>
            
            <category>Generic</category>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>스프링에서는 어떻게 테스트하나요?</title>
            <description>&lt;h2 id=&quot;단위테스트는-뭔가요&quot;&gt;단위테스트는 뭔가요?&lt;/h2&gt;

&lt;p&gt;외부에 의존성이 없는 소프트웨어 단위의 테스트.&lt;/p&gt;

&lt;p&gt;단위테스트는 빨라야한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Working Efficiently with Legacy Code&lt;/em&gt; 의 저자는 테스트 실행시간이 0.1초가 넘어가면 단위테스트가 아니라고 말했다.&lt;/p&gt;

&lt;h3 id=&quot;bdd&quot;&gt;BDD&lt;/h3&gt;

&lt;p&gt;Behavior Driven Development&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Given : 조건. ~가 주어졌을 때&lt;/li&gt;
  &lt;li&gt;When: ~를 한다면 (행위)&lt;/li&gt;
  &lt;li&gt;Then: 이래야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aaa&quot;&gt;AAA&lt;/h3&gt;

&lt;p&gt;Arrange / Act / Assert&lt;/p&gt;

&lt;p&gt;먼저 세팅하고 / 행위를 진행하며 / 검증한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;미션없으면&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ranking_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;저장안함&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// given / Arrange&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Review&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;review&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReviewFixture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aNoMissionReview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reviewRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missionProductRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOpenByProductId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// when / Act&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// then / Assert&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reviewRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;review&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missionRankService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveIfNotClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;통합테스트&quot;&gt;통합테스트&lt;/h2&gt;

&lt;p&gt;둘 이상의 시스템 요소를 통합한 테스트.&lt;/p&gt;

&lt;p&gt;엄밀히 말해서는 DB 연동한 테스트 등도 통합테스트라고 할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;junit&quot;&gt;JUnit&lt;/h1&gt;

&lt;p&gt;Spring에서 제공하는 Java 테스트 도구.&lt;/p&gt;

&lt;p&gt;2018/10/05 기준 Junit5(&lt;a href=&quot;https://junit.org/junit5/&quot;&gt;https://junit.org/junit5/&lt;/a&gt;)가 나와있으며, 이 버전은 Java 8 이상을 지원한다.&lt;/p&gt;

&lt;p&gt;Junit은 단위테스트와 통합테스트를 모두 지원한다.&lt;/p&gt;

&lt;h1 id=&quot;assertj&quot;&gt;AssertJ&lt;/h1&gt;

&lt;p&gt;Junit의 기본 assert와 Hamcrest의 is 조합 대안으로 떠오르는 테스트 도구.&lt;/p&gt;

&lt;p&gt;다양한 조건의 검증 기능을 제공하고, static import 도 한번만 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://joel-costigliola.github.io/assertj/index.html&quot;&gt;AssertJ / Fluent assertions for java&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;test-double&quot;&gt;Test Double&lt;/h1&gt;

&lt;p&gt;진짜 객체는 시간이 오래 걸리며, 자원을 사용하고 전역 상태에도 영향을 준다.&lt;/p&gt;

&lt;p&gt;그래서 실제 객체를 대신할 수 있는 객체가 필요해진다. 이를 &lt;strong&gt;테스트 더블&lt;/strong&gt; 이라 한다.&lt;/p&gt;

&lt;p&gt;Mock이라고 말하는 경우도 있는데, Mock 은 좁은 의미에서는 테스트 더블 하위의 개념을 의미하고, 넓게 말할 때는 테스트 더블 그 자체를 의미한다.&lt;/p&gt;

&lt;p&gt;테스트 더블에는 다른 용도의 객체들이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stub&lt;/li&gt;
  &lt;li&gt;Mock&lt;/li&gt;
  &lt;li&gt;Fake Object&lt;/li&gt;
  &lt;li&gt;Spy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stub&quot;&gt;Stub&lt;/h2&gt;

&lt;p&gt;상태 검증에 쓰는 객체.&lt;/p&gt;

&lt;p&gt;로직 없이, 원하는 값(상태)을 반환한다. 메소드의 행동을 미리 정해두어,&lt;/p&gt;

&lt;p&gt;이 객체는 무조건 이 값을 반환한다고 가정한다.&lt;/p&gt;

&lt;p&gt;Mockito에서의 예제를 보자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// stubbing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드를 보자. 위의 객체는 0을 get하면 “first”를, 1을 get할 경우 RuntimeException을 반환하도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;stubbing&lt;/code&gt; 되어있다.&lt;/p&gt;

&lt;p&gt;stub은 작성하긴 쉽지만 불필요한 코드를 줄이기 위해서 mocking Framework를 이용하는 것이 편하다.&lt;/p&gt;

&lt;p&gt;또한 상태를 가정해서 하드코딩 된 형태이기 때문에 값의 변경은 테스트 할 수 없다.&lt;/p&gt;

&lt;h2 id=&quot;mock&quot;&gt;Mock&lt;/h2&gt;

&lt;p&gt;행위 검증에 쓰는 객체&lt;/p&gt;

&lt;p&gt;실제 객체의 행동을 따라하는 가짜 객체.&lt;/p&gt;

&lt;p&gt;대개 &lt;strong&gt;다른 객체의 행위를 테스트&lt;/strong&gt; 하기 위해서 mock object를 만들게 된다.&lt;/p&gt;

&lt;p&gt;이를 행위 검증이라고 한다. 행위의 수행 여부를  판단한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;Mockito 를 이용해서 Mock 을 사용하는 예제를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mock 객체 생성&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// List.class가 위치한 부분에 mock을 만들고 싶은 클래스를 두면 된다. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// mock 객체를 사용합니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 검증하기 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 너 이 메소드 사용했어?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mockito에서는 mock이 모든 상호작용(메소드 호출 등)을 다 기억하고 있어서, 어떤 메소드가 실행되었는지 선택적으로 검증해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;내가 짠 코드가 아니라 어떤 서비스 객체 A를 제공받았고, 그 객체가 아무것도 반환하지 않았을 때&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;메소드가 실행되었는지 체크하는 데 유용&lt;/strong&gt;하다.&lt;/p&gt;

&lt;h2 id=&quot;fake-object&quot;&gt;Fake Object&lt;/h2&gt;

&lt;p&gt;여러 상태를 대표할 수 있도록 구현된 객체, 실제 로직이 구현된 것처럼 보이게 한다.&lt;/p&gt;

&lt;p&gt;실제로 DB에 접속해서 비교할 때와 동일한 모양이 보이도록 객체 내부에 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;예를 들면, DB 대신에 미리 저장된 Hashmap 등을 참조하는 DAO 등을 사용하여 실제 보이는 정보처럼 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-11/testdouble.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FAKE OBJECT는 진짜처럼 보이는 가짜 DB객체를 쓴다&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transient&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeAccountRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       
       &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
       
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FakeAccountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;john@bmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boby@bmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdminAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
       
       &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPasswordHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPasswordHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;spy&quot;&gt;SPY&lt;/h2&gt;

&lt;p&gt;테스트에 사용되는 객체, 메소드의 사용 여부 및 정상 호출 여부를 기록하고 요청 시에 알려준다.&lt;/p&gt;

&lt;p&gt;테스트 내에서 메소드 호출 횟수가 궁금한 경우, 카운터를 해당 메소드에 추가한 후 이를 호출한다.&lt;/p&gt;

&lt;h1 id=&quot;mockito&quot;&gt;Mockito&lt;/h1&gt;

&lt;p&gt;JUnit 위에서 Mocking 과 Verification을 도와주는 프레임워크이다.&lt;/p&gt;

&lt;p&gt;위에서 Stub과 Mocking 예제는 보았다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 클래스 뿐만이 아니라 인터페이스도 mock 할 수 있다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// stubbing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// first&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Runtime exception 발생&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;verify 를 할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;anyInt()&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;anyFloat(), &lt;/code&gt;anyString()&lt;code class=&quot;highlighter-rouge&quot;&gt;, eq()&lt;/code&gt;등 으로 넘기는 값을 지정해줄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;verify&lt;/code&gt; 는 기본적으로 메소드 호출이 한번 된 것을 검증할 수 있다. 추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;times(), atLeast(), atMost(), never()&lt;/code&gt; 등을 사용하면 특정 호출 횟수 및 최소/최대 횟수를 지정해서 검증할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atLeast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최소 두번&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 호출된 적 없음 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atMost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최대 5번 &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atLeastOnce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 최소 1번 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mock-1&quot;&gt;@Mock&lt;/h2&gt;

&lt;p&gt;@Mock 애너테이션을 사용하면 좀더 간단하게 mock을 만들 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;순차적으로-값을-바꿔주는-stub&quot;&gt;순차적으로 값을 바꿔주는 Stub&lt;/h2&gt;

&lt;p&gt;Iterator-style stub 이라고한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// 체이닝&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 어떤 스트링을 넣어도&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coca&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColaException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// coca&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cola&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Cola Exception&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 여러 argument 넘기기 &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coca&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// coca&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cola&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;어떤 스트링&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cola - 마지막 값으로 고정&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;시간과-관련된-검증-timeout&quot;&gt;시간과 관련된 검증 (timeout)&lt;/h2&gt;

&lt;p&gt;timeout()을 사용해서 검증할 수 있다. times 혹은 atLeast와 함께 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;spy-1&quot;&gt;SPY&lt;/h2&gt;

&lt;p&gt;mockito에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;spy()&lt;/code&gt; 는 진짜 인스턴스를 mock하는 것이다.&lt;/p&gt;

&lt;p&gt;spy된 인스턴스를 stub할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stubbing&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// one&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 100&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Wrong use case&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// IndexOutOfBoundsException&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 진짜 인스턴스의 메소드를 호출하기때문에 Exception 발생&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// use doReturn() instead&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;stub되지 않은 메소드의 경우에는  진짜 인스턴스의 메소드를 호출하기때문에 주의할 부분이 생긴다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mockito/mockito/wiki/Mockito-features-in-Korean&quot;&gt;mockito/mockito&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위에는 1.8버전까지만 나와있다.&lt;/p&gt;

&lt;p&gt;Last Friday 기준 Mockito는 2.22.0 문서가 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://static.javadoc.io/org.mockito/mockito-core/2.22.0/org/mockito/Mockito.html#23&quot;&gt;Mockito (Mockito 2.22.0 API)&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;mockneat&quot;&gt;Mockneat&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nomemory/mockneat&quot;&gt;https://github.com/nomemory/mockneat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;임의의 데이터를 만들어주는 Java 8+ 라이브러리.&lt;/p&gt;

&lt;h1 id=&quot;fixture&quot;&gt;Fixture&lt;/h1&gt;

&lt;p&gt;호출 시에 자동으로  임의의 정보를 넣어 반환하게 만들어놓은 클래스를 의미한다.&lt;/p&gt;

&lt;p&gt;예를 들어 UserFixture는 User에 임의의 정보를 넣어 반환해준다.&lt;/p&gt;

&lt;p&gt;매번 개발자가 새로운 유저를 만들 수는 없기 때문이다.&lt;/p&gt;
</description>
            <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-11/test-in-spring</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-11/test-in-spring</guid>
            
            <category>Test</category>
            
            <category>Spring</category>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>Actuator 사용하기</title>
            <description>&lt;p&gt;Spring-boot 를 intelliJ에서 사용하면, 설정 시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actuator&lt;/code&gt; 를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;actuator는 스프링 부트 어플리케이션의 상태를 편리하게 확인할 수 있는 도구이지만,&lt;/p&gt;

&lt;p&gt;그렇기 때문에 실 서비스에서는 공격 등을 대비하여 막아두어야하는 도구이기도 합니다.&lt;/p&gt;

&lt;p&gt;오늘은 간단하게 actuator 의 명령어와, 실 배포 대비 방법을 알아봅니다.&lt;/p&gt;

&lt;h2 id=&quot;소개-및-설치&quot;&gt;소개 및 설치&lt;/h2&gt;

&lt;p&gt;Spring Boot Actuator 는 애플리케이션의 상태를 종합적으로 정리하여 제공해주는 모듈이다.&lt;/p&gt;

&lt;p&gt;서버의 상태를 볼 수 있을 뿐 아니라, 상태의 조작까지 가능한 인터페이스 형태의 서비스를 제공한다.&lt;/p&gt;

&lt;p&gt;gradle에서는 dependency에 다음과 같이 추가하여 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-starter-actuator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;자주-쓰는-endpoint&quot;&gt;자주 쓰는 endpoint&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/actuator &lt;span class=&quot;c&quot;&gt;# actuator endpoint와 설명을 볼 수 있다.&lt;/span&gt;
/actuator/up &lt;span class=&quot;c&quot;&gt;# 현재 애플리케이션 상태 &lt;/span&gt;
/actuator/configprops &lt;span class=&quot;c&quot;&gt;# 설정 파일을 자세하게 볼 수 있다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hostname&amp;gt;/actuator&lt;/code&gt; 로 접근하면 현재 사용할 수 있는 endpoint를 모두 볼 수 있다.&lt;/p&gt;

&lt;p&gt;사용가능한 endpoint는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#production-ready-endpoints&quot;&gt;https://docs.spring.io/spring-boot/docs/2.0.2.RELEASE/reference/htmlsingle/#production-ready-endpoints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 중 몇개만 쓰고 싶을 경우가 존재할텐데,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; 의 경우에는&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;management.endpoints.web.exposure.include=health,metrics&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# health 와 metrics만 사용&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;의 경우에는&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Actuator&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;management&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;endpoints.web.exposure.include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# actuator를 모두 사용함&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;과 같이 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;actuator-의-인터페이스를-사용하기&quot;&gt;Actuator 의 인터페이스를 사용하기&lt;/h2&gt;

&lt;p&gt;대표적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;HealthIndicator&lt;/code&gt; 인터페이스가 존재한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HealthIndicator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Health&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;health&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 인터페이스를 상속하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;PutMapping&lt;/code&gt; 등으로 값을 자유롭게 변경할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;actuator-에-접근할-수-있는-권한-설정하기&quot;&gt;Actuator 에 접근할 수 있는 권한 설정하기&lt;/h2&gt;

&lt;h3 id=&quot;문제상황&quot;&gt;문제상황&lt;/h3&gt;

&lt;p&gt;이번 beta api 서버(public으로 열려있음) 에서 actuator 가 동작하는 것을 발견했다.&lt;/p&gt;

&lt;h3 id=&quot;1차적-해결법&quot;&gt;1차적 해결법&lt;/h3&gt;

&lt;p&gt;nginx.conf에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/actuator&lt;/code&gt; 로의 접근을 모두 막음&lt;/p&gt;

&lt;h3 id=&quot;원론적인-방법&quot;&gt;원론적인 방법&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;management.server.port&lt;/code&gt; 나 &lt;code class=&quot;highlighter-rouge&quot;&gt;management.server.address&lt;/code&gt; 값을 수정함&lt;/p&gt;

    &lt;p&gt;이 값을 수정하여 원하는 포트나 주소로 접근한 사람에게만 열어둔다. ACL (Access Control List)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spring-security&lt;/code&gt; 를 이용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;management.endpoints.web.base-path(기본값 /actuator)&lt;/code&gt; 대한 권한을 확인한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
            <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-08/spring-boot-actuator</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-08/spring-boot-actuator</guid>
            
            <category>Spring</category>
            
            <category>library</category>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>JPA 가 뭔데 쓰는건가요?</title>
            <description>&lt;p&gt;Spring을 공부하던 중에, 멘토님께서 JPA의 중요성을 강조해주셨습니다. 
Django 는 ORM 으로 간단하게 DB를 다루고 쓸 수 있었는데, Spring에서는 어떤 식으로 DB에 접근하고 데이터를 읽어오는 지 궁금해졌습니다.&lt;/p&gt;

&lt;p&gt;설마 학교에서 하던 것 처럼 현업에서 직접 DB에 커넥션 맺고 길고 긴 코드로 가져오는 건 아닐테니 말입니다. 🤨&lt;/p&gt;

&lt;p&gt;이 포스트에서는 JPA가 무엇인지, 왜 등장했는지와 QueryDSL 에 대한 간략한 소개를 다룹니다.&lt;/p&gt;

&lt;h2 id=&quot;jpajava-persistent-api&quot;&gt;JPA(Java Persistent API)&lt;/h2&gt;

&lt;p&gt;관계형 데이터를 관리하는 자바 프로그래밍 인터페이스.&lt;/p&gt;

&lt;h2 id=&quot;이게-무슨-말이니&quot;&gt;이게 무슨 말이니?&lt;/h2&gt;

&lt;p&gt;Database에 접근해서 원하는 정보를 얻어낼 수 있게 해준다는 뜻&lt;/p&gt;

&lt;p&gt;RDB를 객체로 매핑해서 사용!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-10-08/scrn 2.png&quot; alt=&quot;&quot; style=&quot;display:block;margin-top:10px;color:#828282;font-style:normal;text-align:center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 RDB를&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// getter, setter , to String 생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같은 오브젝트로 만들어서&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;준킴&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;처럼, 자바코드에서 DB에 기록된 정보를 자유롭게 쓸 수 있게 해준다는 뜻!&lt;/p&gt;

&lt;h2 id=&quot;이전에는-어떻게-했는데&quot;&gt;이전에는 어떻게 했는데?&lt;/h2&gt;

&lt;h3 id=&quot;jdbc&quot;&gt;JDBC&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;DB connection 을 맺는다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;쿼리를 생성한다.&lt;/p&gt;

    &lt;p&gt;String query = “select id, name, password from User where id = “ + user.getId();&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;쿼리를 실행한다.&lt;/p&gt;

    &lt;p&gt;ResultSet rs = stmt.executeQuery(selectQuery);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오브젝트에 일일히 데이터 매핑&lt;/p&gt;

    &lt;p&gt;user.setId(rs.getInt(“id”);
 user.setName(rs.getString(“name”);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;DB Connection을 종료한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 방식은 SQL injection의 위험 등 보안 문제가 있다.
예를 들어 위의 user id 에 id 뿐 아니라 원하는 쿼리문을 넣으면, 해당 사용자가 원하는 정보를 빼낼 수 있다.&lt;/p&gt;

&lt;p&gt;더불어 Connection 을 맺고 끊음에 있어서, 예외처리 관련 코드가 계속 반복적으로 많이 나오게 된다.&lt;/p&gt;

&lt;h3 id=&quot;mybatis-로-대표되는-sql-mapper&quot;&gt;MyBatis (로 대표되는 SQL Mapper)&lt;/h3&gt;

&lt;p&gt;iBatis, MyBatis 로 대표되는 SQL Mapper 들은  &lt;code class=&quot;highlighter-rouge&quot;&gt;Query 와 데이터의 패러다임&lt;/code&gt; 이다.&lt;/p&gt;

&lt;p&gt;이러한 SQL 들은 별도의 XML 파일로 연결되며 파라미터와 실제 오브젝트를 연결해주는 식으로 진행된다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;insert&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;insert&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parameterType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    insert into User(id,name,age) values (#{id},#{name},#{age})
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/insert&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;JDBC에 비해서&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connection을 맺는 작업(#1), Connection Close 작업(#5)를 알아서 해줌&lt;/li&gt;
  &lt;li&gt;파라미터 매핑과 데이터 매핑도 위임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;하지만&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여전히 쿼리를 작성해야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다만 MyBatis 는 쿼리를 작성할 수 있다는 점때문에 복잡하게 쿼리를 날려서 로깅하는 경우 유용하다.&lt;/p&gt;

&lt;h2 id=&quot;그럼-orm--jpa는&quot;&gt;그럼 ORM → JPA는&lt;/h2&gt;

&lt;p&gt;ORM 은 Table이나 query 가 아닌 객체 중심의 사고를 해보자! 하고 등장한 존재이다.&lt;/p&gt;

&lt;p&gt;Connection 맺기 / 끊기 위임
쿼리를 자동 생성 실행! ( Query Method) 파라미터 매핑과 데이터 매핑은 필요도 없음&lt;/p&gt;

&lt;p&gt;모든 Domain은 변경사항이 있다.&lt;/p&gt;

&lt;p&gt;이때 코드가 짧아 변경사항이 적고 type-safe 할 수 있도록 도와준다는 큰 장점이 있음&lt;/p&gt;

&lt;h2 id=&quot;영속--준영속--비영속&quot;&gt;영속 / 준영속 / 비영속&lt;/h2&gt;

&lt;p&gt;말이 너무 어렵다!&lt;/p&gt;

&lt;p&gt;코드로 보자&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 비 영속 상태 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;준영&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;c1&quot;&gt;// 영속상태&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1차로 캐시에 저장된 상태&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 준영속상태&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 저장소에 SQL 쿼리가 적용됨.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 캐시에서 떨어져나감(Detached)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;비영속상태&lt;/code&gt;는 객체가 만들어지기만 하고 어디에도 저장되지 않은 상태&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;영속상태&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;persist&lt;/code&gt; 명령어를 통해서 1차로 캐시에 저장된 상태&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;준영속상태&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; 시점에서 저장소에 SQL 쿼리가 반영되어, 더 이상 캐시에서 다룰수는 없는 상태 를 의미함. &lt;code class=&quot;highlighter-rouge&quot;&gt;Detached&lt;/code&gt; 라는 말이 더욱 어울릴 듯함.&lt;/p&gt;

&lt;h2 id=&quot;jpa-소개&quot;&gt;JPA 소개&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;nd&quot;&gt;@column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Entity&lt;/code&gt;  : Bean객체임을 의미한다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Table&lt;/code&gt; : 매핑되는 테이블 이름을 지정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Id&lt;/code&gt; : 이 테이블의 Id임을 말함. &lt;code class=&quot;highlighter-rouge&quot;&gt;@GeneratedValue&lt;/code&gt; 는 자동으로 생성됨&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Column&lt;/code&gt; : 특별히 column의 속성을 지정해주고 싶거나 이름을 정하고 싶을 때 사용. 디폴트로는 멤버 변수명과 일치하는 데이터베이스의 칼럼을 매핑합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;repository-interface&quot;&gt;Repository Interface&lt;/h3&gt;

&lt;p&gt;Repository 인터페이스는 다음처럼 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JpaRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// JpaRepository&amp;lt;사용할Class명,해당클래스의primaryKey 타입&amp;gt; 을 상속&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Repository 를 구현하면 다음과 같은 기본 기능들을&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Save(T)&lt;/li&gt;
  &lt;li&gt;Delete(Y)&lt;/li&gt;
  &lt;li&gt;FindAll()&lt;/li&gt;
  &lt;li&gt;FindByID()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;추가 설정이나 코드 없이 바로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;CRUD 외에 다른 코드가 필요하다면 추가하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DomainEntityRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    		&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;findByNameAndEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation&quot;&gt;참고 - Spring Data JPA Reference Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 링크를 참조하면 메소드 이름 만으로 쿼리를 만들어 낼 수 있음을 알수있다.&lt;/p&gt;

&lt;p&gt;이를 &lt;strong&gt;QueryMethod&lt;/strong&gt; 라고 한다. 정확히는 JPQL 이라는 쿼리를 만들어낸다.&lt;/p&gt;

&lt;p&gt;예를 들어, Name과 email로 유저를 Select하는 쿼리를 날리고 싶다면 정해진 룰에 따라&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findBy + Name + And + Email&lt;/code&gt; 이라는 이름의 메소드를 만들기만 하면 원하는 쿼리가 만들어진다.&lt;/p&gt;

&lt;p&gt;물론 따로 쿼리를 작성할 수 도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select t from User t where name:=name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Repository 를 구성하고 사용하면된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emailUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 UserRepository 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; annotation으로 주입해준다.&lt;/p&gt;

&lt;h2 id=&quot;jqpl을-보완하는-querydsl&quot;&gt;JQPL을 보완하는 QueryDSL&lt;/h2&gt;

&lt;p&gt;JPA에서 사용하는 JQPL 질의언어는 String을 사용하기때문에 initial time에 오류를 알 수 있다.&lt;/p&gt;

&lt;p&gt;runtime에 비하면 나쁘지 않지만, compile 타임에 에러를 잡고싶었다.&lt;/p&gt;

&lt;p&gt;이를 보완하기 위해 나온 것이 QueryDSL이다.&lt;/p&gt;

&lt;p&gt;QueryDSL은 별도의 Q 객체를 사용하며, 컴파일 타임에 쿼리 에러를 잡을 수 있다는 장점이 있어서&lt;/p&gt;

&lt;p&gt;현업에서 JPA와 함께 쓰는 추세이다.&lt;/p&gt;
</description>
            <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-08/jpa-basics</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-08/jpa-basics</guid>
            
            <category>JPA</category>
            
            <category>query</category>
            
            <category>Java</category>
            
            
        </item>
        
        <item>
            <title>Code Review in Google</title>
            <description>&lt;p&gt;&lt;a href=&quot;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/80735342aebcbfc8af4878373f842c25323cb985.pdf&quot;&gt;Modern Code Review: A Case Study at Google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 문서를 요약 - 번역합니다.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;INTRODUCTION&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Peer Code Review는 코드 작성자가 아닌 동료 개발자들이 직접 코드를 검사하는 방식으로, 소프트웨어 프로젝트의 질을 향상시키는 것으로 여겨졌습니다. 최근들어 많은 기관들이 좀더 가벼운 방식의 코드 리뷰를 받아들이고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1) informal (Fagan 방식의 정반대)&lt;/p&gt;

&lt;p&gt;2) tool 기반&lt;/p&gt;

&lt;p&gt;3) async&lt;/p&gt;

&lt;p&gt;4) 코드 변경점만 리뷰하는 방식&lt;/p&gt;

&lt;p&gt;코드 리뷰는 Google에서 필수 프로세스입니다. 구글의 코드리뷰과정은 10년 이상 개선되어왔고, 25,000명 이상의 개발자가 매일 20,000 번 이상의 코드 변경하는 과정에서 적용되고 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;code-review-processes-and-contexts&quot;&gt;Code Review Processes and Contexts&lt;/h1&gt;

&lt;h2 id=&quot;code-inspection&quot;&gt;Code Inspection.&lt;/h2&gt;
&lt;p&gt;코드리뷰에서 가장 형식화된 과정중 하나입니다. 코드 검사의 목적은 작성자와 리뷰어들이 함께 모여 코드 변경점에 대해서 결함(defects)이 없는지 조사하는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;asynchronous-review-via-email&quot;&gt;Asynchronous review via email.&lt;/h2&gt;
&lt;p&gt;2000대 말에는, 대부분의 OSS가 비동기, 원격 코드 리뷰의 형태를 채택했습니다. 이는 메일링 리스트나 이슈트래킹 시스템을 사용하여 패치를 보내는 방식이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;tool-based-review&quot;&gt;Tool-based review.&lt;/h2&gt;
&lt;p&gt;패치 리뷰 과정을 좀더 짜임새 있게 만들기 위해서, OSS 등에서 여러 tool 이 등장했습니다. 이러한 툴은 리뷰 과정의 실행 과정을 돕습니다.&lt;/p&gt;

&lt;p&gt;1) 패치를 작성한 사람이 코드 리뷰 툴에 패치를 제출합니다.&lt;/p&gt;

&lt;p&gt;2) 리뷰어는 제안된 코드 변경점의 diff를 볼 수 있고&lt;/p&gt;

&lt;p&gt;3) 특정 줄에 대해서 쓰레드를 만드는 형식으로 토론할 수 있습니다.&lt;/p&gt;

&lt;p&gt;4) 작성자는 리뷰어의 코멘트에 대해서 변경점을 제안할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 피드백 사이클은 모두가 만족할 때까지 혹은 패치가 버려질때까지 계속 됩니다. 이를 위해 Microsoft는 CodeFlow를 채택합니다. Google의 Chromium project는 Gerrit을 사용합니다. Gerrit은 리뷰어들의 명시적인 승인과 이 코드 변경이 빌드를 깨지 않는다는 확인 후에만 병합됩니다. Facebook의 코드리뷰시스템인 Phabricator는 리뷰어들이 변경점에 &lt;code class=&quot;highlighter-rouge&quot;&gt;도전&lt;/code&gt; 하고 직접 커밋할 수 있도록 합니다. 물론 자동 정적 코드 리뷰 분석과 CI 툴도 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;pull-based-development-model&quot;&gt;Pull-based development model.&lt;/h2&gt;

&lt;p&gt;Github의 pull request 과정에서는, 변경하고 싶은 게 있는 사람이 레포지토리를 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; 해서 fork 된 레포지토리에서 내용을 변경합니다. 이후에 이 변경점을 pull request  를 보내는데, pull request는 누구나 볼 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;google에-던진-질문과-그에-대한-답&quot;&gt;Google에 던진 질문과 그에 대한 답&lt;/h1&gt;

&lt;h2 id=&quot;google에서의-코드-리뷰-동기는-무엇인가&quot;&gt;Google에서의 코드 리뷰 동기는 무엇인가?&lt;/h2&gt;

&lt;p&gt;Google에 코드리뷰를 최초로 도입한 사람(E라고 하자) 의 말에 따르면, 코드리뷰의 동기는 &lt;code class=&quot;highlighter-rouge&quot;&gt;다른 사람들이 알아들을 수 있는 코드를 쓰도록 하기 위해서&lt;/code&gt; 였다고 합니다. E는 코드리뷰의 도입이 빠른 프로토타이핑에 적합한 코드에서, 프로덕션에서 사용할 수 있는 코드로의 전환을 알렸다고 합니다. 또한 코드리뷰는 각 코드 조각에 대해서 한명 이상의 사람이 친숙해지도록 하여, 지식이 계속해서 회사 내부에 머무를 수 있도록 했습니다.&lt;/p&gt;

&lt;p&gt;인터뷰를 통해서, Google 개발자들이 코드리뷰를 통해 어떤 것을 기대하고 있는지 정리할 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;education&quot;&gt;education&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;코드 리뷰를 통해서 가르치거나 배우는 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;maintaining-norms&quot;&gt;maintaining norms&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;formatting이나 API 사용 패턴 등, 해당 단체가 채택하고 있는 취향을 유지 (특히 새로운 팀 멤버 등)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;gatekeeping&quot;&gt;gatekeeping&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;소스코드, 디자인적인 선택 등에 대해 경계를 만드는 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;accident-prevention&quot;&gt;accident prevention&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;버그, defect, 코드품질 저하와 관련된 모든 이슈를 막기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;google에서는-코드-리뷰를-어떻게-하는가&quot;&gt;Google에서는 코드 리뷰를 어떻게 하는가?&lt;/h2&gt;

&lt;p&gt;구글에서의 코드 리뷰는 두 컨셉과 연관되어 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ownership&lt;/code&gt; , 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;readablity&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;h3 id=&quot;ownership&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ownership&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;구글의 코드베이스는 트리 형태를 띄고 있는데, 각 디렉토리가 특정 팀이  &lt;code class=&quot;highlighter-rouge&quot;&gt;own&lt;/code&gt; 하는 방식입니다.&lt;/p&gt;

&lt;p&gt;어떤 개발자든 해당 코드에 의문을 제기할 수 있으나, 커밋되기 전에 owner가 해당 변경점을 반드시 리뷰하고 변경사항을 승인해야합니다.&lt;/p&gt;

&lt;h3 id=&quot;readability&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Readability&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;지속적인 코드 스타일과 관습들을 보장하기 위해 구글은 이 개념을 도입했습니다. 개발자들은 특정 언어의  &lt;code class=&quot;highlighter-rouge&quot;&gt;readability&lt;/code&gt; 에 대한 자격을 받을 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readability&lt;/code&gt; 리뷰어들에게 코드를 보내고, 리뷰어들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;이 사람이 코드 스타일 그리고 이 언어에 한해 가장 좋은 방식으로 접근하고 있다&lt;/code&gt;고 생각하면 해당 개발자에게  &lt;code class=&quot;highlighter-rouge&quot;&gt;readability&lt;/code&gt; 자격을 부여합니다. 구글의 모든 코드는 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;readability&lt;/code&gt; 자격을 가진 사람이 작성하거나 리뷰어로 참가해야만 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;구글의-코드리뷰-과정&quot;&gt;구글의 코드리뷰 과정&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Creating.&lt;/strong&gt; 작성자가 코드를 변경, 추가, 삭제하고 준비되면 변경점을 생성한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Previewing.&lt;/strong&gt; 작성자는  CRITIQUE를 사용하여 변경점의 diff를 보고, 자동 코드 분석기의 결과를 본다. 준비가 되면 작성자는 한명 이상의 리뷰어에게 변경점을 알린다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Commenting.&lt;/strong&gt; 리뷰어는 웹 상에서 diff를 보고, 코멘트를 남긴다. 만약 프로그램이 분석한 결과가 있다면 그 또한 리뷰어들이 볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;unresolved&lt;/code&gt; 코멘트는 작성자가 반드시 다시 다뤄야할 아이템을 의미한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;resolved&lt;/code&gt; 코멘트는 반드시 작성자가 바꾸지는 않아도 되는 추가적인 코멘트를 포함한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Addressing Feedback.&lt;/strong&gt; 작성자는 코멘트를 보고, 변경점을 업데이트하거나 코멘트에 답변한다. 변경점이 업데이트되면 작성자는 새로운 스냅샷을 업로드하고, 바뀐 점을 다시 리뷰한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Approving.&lt;/strong&gt; 모든 코멘트가 다뤄지면, 리뷰어들은 변경사항을 승인하고, LGTM(Looks Good To Me)라고 마킹한다. 변경사항을 커밋하기 위해서, 개발자는 대개 최소 한명의 리뷰어의 승인을 받아야한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;리뷰어-제안과-코드-분석-결과&quot;&gt;리뷰어 제안과 코드 분석 결과&lt;/h3&gt;

&lt;p&gt;CRITIQUE는 가장 적절한, 최소한의 리뷰어 셋을 자동으로 알아본다. 이 툴은 포함된 파일을 최근에 편집했거나 리뷰한 사람을 최우선으로 한다.&lt;/p&gt;

&lt;h3 id=&quot;구글에서의-코드리뷰-통계로-보기&quot;&gt;구글에서의 코드리뷰: 통계로 보기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;리뷰주기 및 속도.&lt;/strong&gt; 개발자들은 3 번 / 주  주기로 변경(중간값)하고, 80퍼센트의 개발자들은 7번 / 주 주기로 변경한다. 한 주에 코드리뷰하는 중간 값은 4번이고, 80퍼센트의 개발자들은 한 주에 10번 이하로 리뷰한다. 최초로 리뷰를 받기까지 작은 변경점인 경우에는 평균적으로 1시간 이하, 큰 변경점인 경우 평균적으로 5시간 걸린다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;리뷰 크기.&lt;/strong&gt; 구글에서는 35%의 변경점이 한 파일만 변경한 것이고, 90% 이상이 10파일 이하로 변경한 것이다. 10% 이상이 한줄만 변경한 경우이고, 변경된 라인의 평균값은 24이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;리뷰어와 코멘트의 수.&lt;/strong&gt;  최적의 리뷰어 수는 의견이 분분하다. 구글에서는 25% 이하 가 1명 이상의 리뷰어가 있다. 그리고 99%가 최대 5명의 리뷰어가 있고, 평균 리뷰어의 수는 1이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google-개발자들은-코드-리뷰를-어떻게-인식하는-가&quot;&gt;Google 개발자들은 코드 리뷰를 어떻게 인식하는 가.&lt;/h2&gt;

&lt;h3 id=&quot;distance&quot;&gt;Distance.&lt;/h3&gt;
&lt;p&gt;인터뷰이들은 코드리뷰에서의 거리감을 두가지로 인식했다. 지리적 (리뷰어와 작성자의 물리적 거리) / 구조적(다른 팀 혹은 다른 역할군). 이 거리감이 리뷰 과정의 딜레이로 이어지거나 혹은 오해를 부르곤 했다.&lt;/p&gt;

&lt;h3 id=&quot;social-interactions&quot;&gt;Social Interactions.&lt;/h3&gt;
&lt;p&gt;인터뷰이들은 두가지 관점에서 코드리뷰 내의 소통방식인가 문제가 될수 있다고 생각했다. tone / power . tone은 작성자들이 코멘트에 대해 리뷰할 때 감정적이 될 수 있다는 점을 의미한다. 부정적인 톤으로 코멘트를 하는 경우 덜 유용하다는 점을 발견했다. power는 어떤 한 사람이, 다른 사람의 행동을 바꾸려고 코드리뷰를 이용할 때 일어난다. 일부러 승인을 미루거나 리뷰를 질질 끄는 등의 행위를 의미한다. tone 혹은  power를 사용하는 이슈는 개발자들을 불편하거나 좌절하게 만든다.&lt;/p&gt;

&lt;h3 id=&quot;review-subjects&quot;&gt;Review Subjects.&lt;/h3&gt;
&lt;p&gt;코드리뷰를 하는 도중 가장 많은 논란을 불러일으킨 부분은 design review 였다. 어떤 사람들은 리뷰 이전에 디자인이 결정되었기를 원하고, 어떤 이들은 리뷰 중에 디자인을 변경하기를 원한다. 서로 다른 기대감이 있기때문에 과정 중에 마찰이 생기곤 했다.&lt;/p&gt;

&lt;h3 id=&quot;context&quot;&gt;Context.&lt;/h3&gt;
&lt;p&gt;(작성자와 리뷰어간) 오해는 보통, &lt;code class=&quot;highlighter-rouge&quot;&gt;왜 이런 변경을 했는가&lt;/code&gt; 에 대해서 알지 못하기 때문에 생긴다. 변경한 이유가 프로덕션 상 급한 fix 인지, 아니면 있으면 좋은 개선점인지 모르기 때문이다. 기대가 다르면, 리뷰 프로세스가 늦어지게 되거나 (한쪽 혹은 둘다) 좌절감을 안게 된다.&lt;/p&gt;

&lt;h3 id=&quot;customization&quot;&gt;Customization.&lt;/h3&gt;
&lt;p&gt;이는 툴 자체에 관한 이야기이다. 일부 팀은 코드 리뷰 조건이 다른데, CRITIQUE에서는 개별적인 커스터마이징을 제공하지 않기 때문에 불편한 부분이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;구글 개발자들은, 전반적으로 코드리뷰에 대해서 어떻게 생각하는지에 대해서는 매우 긍정적으로 답했고, CRITIQUE 툴에 대한 만족도에서도 97% 의 개발자가 만족한다고 답했다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
            <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
            <link>/2018-10-02/code-review-in-google</link>
            <guid isPermaLink="true">junebuug.github.io/2018-10-02/code-review-in-google</guid>
            
            <category>Code Review</category>
            
            <category>google</category>
            
            <category>code</category>
            
            
        </item>
        
    </channel>
</rss>
