<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://dadadamarine.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dadadamarine.github.io/" rel="alternate" type="text/html" /><updated>2019-05-10T14:48:13+00:00</updated><id>https://dadadamarine.github.io/feed.xml</id><title type="html">Push Stone’s blog</title><subtitle>An amazing website.</subtitle><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><entry><title type="html">[Spring/Project] 네이버 핵데이 준비과정 두번째</title><link href="https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4/" rel="alternate" type="text/html" title="[Spring/Project] 네이버 핵데이 준비과정 두번째" /><published>2019-05-08T09:25:28+00:00</published><updated>2019-05-08T09:25:28+00:00</updated><id>https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4</id><content type="html" xml:base="https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4/">&lt;h2 id=&quot;5월-8일--9일차&quot;&gt;5월 8일  (9일차)&lt;/h2&gt;

&lt;h3 id=&quot;먼저-해야할일을-정리하자&quot;&gt;먼저 해야할일을 정리하자&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;dummy api제작 및 springboot 셋업
Create, delete구현완료
Dummy data만든후에 cloud에서 데이터 가져오는걸로 조회 구현해보자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;api Document만들기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloud Storage 연동&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cloud Storage에 file형태의 이미지 저장 + db에 경로 저장&lt;/p&gt;

    &lt;p&gt;성능문제 잘 고려하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이미지 태깅기능, 클러스터링 기능, 개인화기능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dropbox 올려놓은 이미지 보기 
구체적으로는 드랍박스에 올려놓은 이미지와 프론트 위치정보가 매칭되야한다.
Naver map api중에 위치검색해서 좌표알려주는게있는데
그 검색어로 파일 검색해서 매칭된 파일리스트를 가져오고, 프론트에 검색어에 해당하는 좌표를 리턴할때, 지도도 같이 리턴하는 방법도 있다. (안 유용해보임)
아니면, 모든파일 이름 읽어서 그걸로 위치정보 하나씩 검색한다음에 파일- 위치 매핑해서 프론트로 보내는 방법도 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이미지 데이터 수집 자동화&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;이미지-데이터-저장방식&quot;&gt;이미지 데이터 저장방식&lt;/h3&gt;

&lt;p&gt;Cloud Storage를 사용하는데 Image를 db에 blob으로 저장하는것과 파일로 저장해서 관리하는 것의 장단점은 무엇일까?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;파일로 저장&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일의 개수가 많아질경우 느려진다. 
여러개의 파일을 한번에 접근해야 할 경우 IO비용이 많이듬. -&amp;gt; 꼭 성능비교 해보자.
db에서 폴더 + 파일명을 찾아서, 다시 파일로 접근 (2번 접근)&lt;/li&gt;
  &lt;li&gt;권한체크를 해줘야함&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Binary 파일을 Base64 인코딩하여 db에 저장&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Query Selector가 가능해짐. 파일별로 특징 부여해서 나중에 쿼리로 조회할 수 있다. 하지만 파일로 구성해도 db를 filePath와 같이 이렇게 구현하면 상관없긴 함.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;-&amp;gt; 파일로 저장하는 방식을 택한다.&lt;/p&gt;

&lt;h3 id=&quot;naver-cloud의-object-storage-사용&quot;&gt;Naver Cloud의 Object Storage 사용.&lt;/h3&gt;

&lt;h4 id=&quot;사용가이드&quot;&gt;사용가이드&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.ncloud.com/ko/storage/storage-8-1.html&quot;&gt;http://docs.ncloud.com/ko/storage/storage-8-1.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;5월-9일--10일차&quot;&gt;5월 9일  (10일차)&lt;/h2&gt;

&lt;h3 id=&quot;팀원들과의-첫-미팅-by-행아웃&quot;&gt;팀원들과의 첫 미팅 by 행아웃&lt;/h3&gt;

&lt;p&gt;팀원들과 첫 미팅을 했다. 프로젝트에 대한 개요와 협업방법, 이슈관리 방법등을 논의하였다. 즐거운 사람들인 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;object-storage-연동-적용&quot;&gt;Object Storage 연동 적용&lt;/h3&gt;

&lt;p&gt;Object Storage에 대한 연동을 완료하였다. 각 테스트를짜고, 코드를작성하는데 역시나 테스트 짜는시간이 코딩시간의 80% 정도를 차지하는것 같다. 어렵다. 테스트를 먼저짜는건 진짜 손이 많이가고 노력이 많이 드는일인것 같다.&lt;/p&gt;

&lt;p&gt;특히 컨트롤러에 대한 단위테스트는 테스트 코드가 테스트 대상 코드의 3배정도는 된다. 어렵다&lt;/p&gt;

&lt;h2 id=&quot;5월-10일--11일차&quot;&gt;5월 10일  (11일차)&lt;/h2&gt;

&lt;h3 id=&quot;팀원들과-같이-모여서-공부&quot;&gt;팀원들과 같이 모여서 공부&lt;/h3&gt;

&lt;p&gt;행아웃으로 모여서 각자 공부를 진행했다. 자극이 되어 좋은것 같다.&lt;/p&gt;

&lt;h3 id=&quot;account에-대한-crud-구현&quot;&gt;Account에 대한 CRUD 구현&lt;/h3&gt;

&lt;p&gt;Account에 대해 기본 CRUD를 모두 구현하기위해 시간을 쏟았다. ATTD는 정말.. 어렵다&lt;/p&gt;

&lt;p&gt;컨트롤러와 서비스에 메서드 하나씩을 생성하는것에&lt;/p&gt;

&lt;p&gt;AcceptanceTest, Controller Unit Test , Service Unit Test, Request -&amp;gt; Service DTO생성 및 테스트, Service -&amp;gt; Response DTO생성 및 테스트를 작성해야하다니 으으으으.. 좀더 익숙해 져야할것 같다. 아직은 진도가 안나가는것에 대해 처지는 느낌이 많다.&lt;/p&gt;

&lt;h3 id=&quot;이미지-저장-방식에-대한-재논의&quot;&gt;이미지 저장 방식에 대한 재논의&lt;/h3&gt;

&lt;p&gt;이미지를 api에서 클라이언트로 보내주는 방식에 대한 논의를 하였다.&lt;/p&gt;

&lt;p&gt;처음에 file을 직접 보내주는 방식을 생각하고 구현하였지만 금새 코드를 엎어야 했다.&lt;/p&gt;

&lt;p&gt;먼저 Storage에서 수많은 이미지를 받아서 파일 각각을 byteStream으로 변환해줘야한다. 여기서 서버 성능저하가 초래될 것이 예상되었다. 이를 클라이언트에 uri를 전송해서 클라이언트에서 이미지를 각각 가져온다면, 통신에 대한 비용과 성능을 클라이언트쪽과 분담할 수 있는 장점이있다.&lt;/p&gt;

&lt;p&gt;그러한 이유로 DB에는 이미지가 저장된 uri를, 클라이언트에서 ajax로 이미지를 요청하는것으로 구조를 변경하였다.&lt;/p&gt;

&lt;h3 id=&quot;기분&quot;&gt;기분&lt;/h3&gt;

&lt;p&gt;외롭다. 외롭다. 혼자 공부하는 것이 특히 외롭다. 혼자 코딩하는 것이 외롭다. 같이 코딩을 마음껏 해줄 수 있는 친구가 없는 것이 외롭다. 정말 외롭다.&lt;/p&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">5월 8일 (9일차)</summary></entry><entry><title type="html">[Spring/Project] 네이버 핵데이 그리고 준비과정 1번째</title><link href="https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4/" rel="alternate" type="text/html" title="[Spring/Project] 네이버 핵데이 그리고 준비과정 1번째" /><published>2019-05-07T09:25:28+00:00</published><updated>2019-05-07T09:25:28+00:00</updated><id>https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4</id><content type="html" xml:base="https://dadadamarine.github.io/life/%EC%9D%BC%EA%B8%B0-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%84%A4%EC%9D%B4%EB%B2%84-%ED%95%B5%EB%8D%B0%EC%9D%B4/">&lt;h2 id=&quot;5월-2일-1일차&quot;&gt;5월 2일 (1일차)&lt;/h2&gt;

&lt;p&gt;“저.. 제가요?”&lt;/p&gt;

&lt;p&gt;네이버 핵데이에 선정되었다. 약간은 얼떨떨하기도 하고 최근에 지원한것중에 합격문자가 적힌 메일을 처음 받다보니 감격스럽기도 하였다. 연이은 불합격 소식에 마음을 내려놓고 지내고 있었는데 지금까지 한 노력들이 인정받는거 같아서 다행이었다.&lt;/p&gt;

&lt;p&gt;진행중이었던 CI(배포 자동화)실습을 마무리 짓고 네이버 핵데이 준비를 시작해야겠다.&lt;/p&gt;

&lt;h2 id=&quot;5월-3일-2일차&quot;&gt;5월 3일 (2일차)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/Users/dadadamarine/Desktop/study/blog/dadadamarine.github.io/_posts/assets/images/image-20190505213643883.png&quot; alt=&quot;image-20190505213643883&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마음이 붕 - 떠서 지금껏 재미있게 하던 공부들이 손에 잡히지 않는다. 천천히 하고싶은대로 하는 스프링 공부도 재미있었고, 스터디에서 하는 스프링 실습 단계별 프로젝트도 재미있었는데. 지금은 둘중 어느것도 차분하게 즐길수가 없다.&lt;/p&gt;

&lt;p&gt;슬슬 핵데이를 준비해야겠다고 생각했다. 진행중이던 스터디 3단계는 어제 오늘에 거쳐서 해결했고 새벽 12시쯤에 얼추 마무리 지을 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;5월-4일-3일차&quot;&gt;5월 4일 (3일차)&lt;/h2&gt;

&lt;p&gt;“부담된다.”&lt;/p&gt;

&lt;p&gt;핵데이 팀원들과 첫 인사를 나누니 점점 실감이 나기 시작했다. 프로젝트 주제는 아직 아무것도 모르겠고, 기술스택인 React는 걱정되기만 한다.&lt;/p&gt;

&lt;p&gt;걱정되는 마음을 안고 핵데이 준비겸 기술스택 사용준비겸 해서 새 프로젝트를 시작했다. 혹시 모르니 빌드툴은 처음써보는 Gradle로 준비를 하고, 간단한 기능부터 시작하였다.&lt;/p&gt;

&lt;p&gt;“이거 괜찮을까..?”&lt;/p&gt;

&lt;p&gt;gradle은 처음 사용은 maven보다 약간 복잡한듯 하다. 아니 사실 조금 많이 복잡했다. React는 어떻게 해야할지 도저히 모르겠다. 그래서 마음을 다잡기 위해 간단한 일부터 시작했다. 그래도 가장 자신있던 RestAPI CRUD를 ATDD로 구현하기 시작했다. 모델을 간단히 설계하고 acceptanceTest 추상 클래스를 만들고, create와 delete 통합테스트를 작성하고, 컨트롤러 서비스에 대한 단위테스트를 각각 작성했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;벌써부터 삐그덕댄다. maven을 통해 사용하던 모듈을 gradle에서 사용하려다 보니 scope설정부터 헷갈린다. 테스트로 사용하던 Assertions.assertThat은 import가 안된다. @Autowired된 객체는 null이기 일쑤이다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아차 싶었다. 겨우 테스트를 작성하는데 거의 하루를 모두 써버린거 같다. 다른 것 보다 당황스러움이 컸다.&lt;/p&gt;

&lt;p&gt;테스트는 수도없이 작성해 보았다. 프로젝트를 처음부터 만들어본 경험도 있다. 만들면서 사용한 라이브러리, 모듈에 대해 나름 치열하게 공부하고 학습하고 정리했다. 그런데도 온갖 것에서 실수를 낸다.&lt;/p&gt;

&lt;p&gt;이제 깨달았다. 공부하는것과 숙달되는것은 또 다르구나. 내가 공부한 모든것을 기억하고 있지는 않구나.&lt;/p&gt;

&lt;p&gt;이번 핵데이 준비기간이 스프링 숙달을 위한 기회가 될 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;5월-5일-4일차&quot;&gt;5월 5일 (4일차)&lt;/h2&gt;

&lt;p&gt;기능의 추가이며 어제의 반복을 한다.&lt;/p&gt;

&lt;p&gt;비즈니스 로직과 컨트롤러를 완성해서 테스트를 통과하고 예외를 추가하고 이것을 처리할 ControllerAdvice를 추가한다. 컨트롤러 단위테스트에 주입해서 테스트를 성공했다.&lt;/p&gt;

&lt;p&gt;약간 슬프기 시작했다.&lt;/p&gt;

&lt;p&gt;하루하루 즐거웠던 스프링 공부였는데, 핵데이라는 목적이 생긴 순간 짐이 된거 같다.&lt;/p&gt;

&lt;p&gt;React에 대한 실습을 했다.&lt;/p&gt;

&lt;p&gt;document를 열고 파일 구조에 대해 분석했다. 처음엔 전혀 모르겠다가도 그래도 계속 뒤져보니 어떤 구조인지 조금씩 알 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;5월-6일-5일차&quot;&gt;5월 6일 (5일차)&lt;/h2&gt;

&lt;h3 id=&quot;react앱으로-지도-띄우기&quot;&gt;React앱으로 지도 띄우기&lt;/h3&gt;

&lt;p&gt;드디어 React app으로 지도를 띄우는데 성공하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/dadadamarine/Desktop/study/blog/dadadamarine.github.io/_posts/assets/images/image-20190506112823100.png&quot; alt=&quot;image-20190506112823100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계속 이런 로그가 나오길래. 해당 react 모듈이 예전버전이라 그런줄 알았는데… key에러였다. 정확히는 key와 request요청을 보낸 IP가 매칭이 안되서 그런거였다.&lt;/p&gt;

&lt;p&gt;Key를 수정하니 단박에 되버린것&lt;/p&gt;

&lt;p&gt;이제 프론트와 백엔드의 기본 프로젝트 초기화를 완료했으니 기능들을 구현해보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/Users/dadadamarine/Desktop/study/blog/dadadamarine.github.io/_posts/assets/images/KakaoTalk_Image_2019-05-06-12-09-09.jpeg&quot; alt=&quot;KakaoTalk_Image_2019-05-06-12-09-09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용이 예상되는 주요기능들을 4가지로 분류하였다. 이에 각각 구현해보고 학습을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;이미지-springboot-서버에-저장하는-기능&quot;&gt;이미지 Springboot 서버에 저장하는 기능&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;리액트 앱의 서버와 api서버간에 이미지 저장을 어떻게 처리할까 조사하다가. Proxy라는 단어가 계속 나오는 것을 발견했다. 검색해보니 정확하게 내가 사용해야할 기술이었다. (포트포워딩 비슷한개념) 비슷한 기능을 nginx에서 했었던 것도 깨달았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;InitBinder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링 에서 file Data를 받을경우 @RequestBody로는 DTO와 매핑이 되지않는다. @RequestBody는 MediaType을 Json또는 xml데이터로 가정하기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RequestBody&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 에러가 났다. 이는 주요 &lt;strong&gt;HttpMessageConverter&lt;/strong&gt;에 해당타입을 처리해주는 컨버터가 없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jongmin92.github.io/2018/03/02/Spring/spring-requestbody-responsebody/&quot;&gt;HttpMessageConverter&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpMediaTypeNotSupportedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multipart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=----&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebKitFormBoundarywY7ByvgonAjDoaCT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supported&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;파일업로드 예제&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pangsblog.tistory.com/72&quot;&gt;Spring boot Rest API  파일 업로드 다운, 다중 파일업로드 포함&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.callicoder.com/spring-boot-file-upload-download-jpa-hibernate-mysql-database-example/&quot;&gt;Spring Boot File Upload / Download with JPA, Hibernate, and MySQL database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;[https://devbox.tistory.com/entry/Spring-파일업로드-처리](https://devbox.tistory.com/entry/Spring-%ED%8C%8C%EC%9D%BC%EC%97%85%EB%A1%9C%EB%93%9C-%EC%B2%98%EB%A6%AC)&quot;&gt;파일 업로드 처리 5가지 방법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@RequestParam&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kimyhcj.tistory.com/259&quot;&gt;@RequestParam vs @RequestBody vs @ModelAttribute&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://elfinlas.github.io/2018/02/18/spring-parameter/&quot;&gt;컨트롤러의 전달인자 @RequestParam vs @PathVariable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kimyhcj.tistory.com/259&quot;&gt;https://kimyhcj.tistory.com/259&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/38156646/using-requestparam-for-multipartfile-is-a-right-way&quot;&gt;@RequestParm으로 uri가 아닌 폼 데이터를 받는것에 대한 설명&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sticky32.tistory.com/m/entry/SpringMVC-ModelAttribute-RequestBody-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C&quot;&gt;@ModelAttribute의 좀더 심화 설명 by 댓글&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MultipartFile 객체&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://winmargo.tistory.com/102&quot;&gt;MultipartFile 객체의 메서드와 사용법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/31178160/spring-boot-doesnt-use-commonsmultipartresolver&quot;&gt;SpringBoot에서 multipartResolver 빈을 등록하지 않아도 되는 이유&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;예제 &lt;a href=&quot;https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/&quot;&gt;https://www.callicoder.com/spring-boot-file-upload-download-rest-api-example/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/dadadamarine/Desktop/study/blog/dadadamarine.github.io/_posts/assets/images/image-20190506174035803.png&quot; alt=&quot;image-20190506174035803&quot; /&gt;&lt;/p&gt;

&lt;p&gt;와 드디어!!!!!!! 와 ㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ&lt;/p&gt;

&lt;p&gt;드디어드디어 저장을 성공했다!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;너무 DTO 매핑에 집중해서 acceptanceTest가 아닌 실제 테스트로 진행을 하였다. 이에 해당하는 AcceptanceTest를 만들어야겠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5월-7일--6일차&quot;&gt;5월 7일  (6일차)&lt;/h2&gt;

&lt;h3 id=&quot;이미지-저장에-대한-acceptancetest만들기&quot;&gt;이미지 저장에 대한 acceptanceTest만들기&lt;/h3&gt;

&lt;p&gt;안된다… jackson에서 에러가 나는데 원인을 알수 없다.&lt;/p&gt;

&lt;p&gt;실제이미지를 전송할때는 에러가 안나는데, MockMultipartFile를 통해서 테스트하려고 할경우 에러가 난다.&lt;/p&gt;

&lt;p&gt;Controller Test는 수정완료하였으나, acceptance Test는 아직 모르겠다.&lt;strong&gt;구현해야함&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원인&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forgiveall.tistory.com/427&quot;&gt;https://forgiveall.tistory.com/427&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RestTemplate의 기본 MessageConverter는 InputStream에 대한 직렬화를 제공하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codeday.me/ko/qa/20190402/223420.html&quot;&gt;https://codeday.me/ko/qa/20190402/223420.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;직렬화를 제공하지 않는이유&lt;/p&gt;

&lt;p&gt;Stream은 이미 직렬화 되어있는 값임. &lt;code class=&quot;highlighter-rouge&quot;&gt;직렬화는 객체를 바이트 시퀀스로 또는 바이트 시퀀스로 변환하는 과정&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coderanch.com/t/278938/java/serialize-InputStream-OutputStream-object&quot;&gt;https://coderanch.com/t/278938/java/serialize-InputStream-OutputStream-object&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;먼저 &lt;a href=&quot;http://tutorials.jenkov.com/java-json/jackson-annotations.html#jsonsetter&quot;&gt;http://tutorials.jenkov.com/java-json/jackson-annotations.html#jsonsetter&lt;/a&gt; Jackson 문서에서  직렬화방식을 확인하였다.&lt;/p&gt;

&lt;h3 id=&quot;이미지-가져오기&quot;&gt;이미지 가져오기&lt;/h3&gt;

&lt;p&gt;mysql에 인코딩되서 저장된 이미지스트림을 불러와서 react 앱에서 이미지를 띄우는 기능을 구현한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;구현해야함&lt;/strong&gt;&lt;/p&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">5월 2일 (1일차)</summary></entry><entry><title type="html">[Spring/Project] 권한 체크를 건너뛰는 AcceptanceTest 작성</title><link href="https://dadadamarine.github.io/java/spring/spring-controller-test4/" rel="alternate" type="text/html" title="[Spring/Project] 권한 체크를 건너뛰는 AcceptanceTest 작성" /><published>2019-05-03T09:25:28+00:00</published><updated>2019-05-03T09:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/spring-controller-test4</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/spring-controller-test4/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;h2 id=&quot;interceptor를-이용한-권한-통과-테스트&quot;&gt;Interceptor를 이용한 권한 통과 테스트&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web Basic authentication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/basic-authentication/_static/image1.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;center&gt; Basic Authentication의 흐름&lt;/center&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/basic-authentication&quot;&gt;참조 자료&lt;/a&gt; , &lt;a href=&quot;https://hamait.tistory.com/416&quot;&gt;HTTP 기본인증 (Basic authentication)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basic authentication은 HTTP프로토콜이 제공하는 자체적인 인증 기능이다. 이는 HTTP헤더 내의 제어 헤더의 내용으로 ‘인증’ 기능을 제공하는 것이다.&lt;/p&gt;

&lt;p&gt;이 내용을 응용한다. 테스트상에서  request의 Authrization 헤더를 설정하고, 인증정보를 전송하면 스프링에선 Intercepter에서 Session에 유저의 정보를 등록 (로그인) 시켜줄 수 있다. 즉 컨트롤러 실행전에 로그인을 실행해 주는것이다. 이는 따로 로그인을 하지 않아도 로그인 된채로 컨트롤러를 실행 시킬수 있음을 의미한다.&lt;/p&gt;

&lt;p&gt;설정해야 하는 내용은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;테스트에서 BasicAuthentication을 헤더에 담아 전송하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt;에 해당하는 테스트 코드 작성&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BasicAuthentication 헤더정보를 가지고 컨트롤러 실행전에 Session에 정보를 등록해줄 BasicAuthenticationIntercepter생성&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;부모클래스-acceptancetest&quot;&gt;부모클래스 AcceptanceTest&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트 방법론의 내용은 블로그 &lt;a href=&quot;https://dadadamarine.github.io/java/spring/spring-boot-validation/#&quot;&gt;[Spring/번역] 컨트롤러 테스트 가이드 in Spring Boot&lt;/a&gt;를 참조하시길 바랍니다.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;@SpringBootTest&lt;/strong&gt; 어노테이션을 사용할 경우 실제 웹서버를 동작시켜 테스트를 진행할수 있다.&lt;/p&gt;

&lt;p&gt;이때 Application Context(정확히는 child WebApplicationContext)에 TestRestTemplate이 빈으로 등록된다.&lt;/p&gt;

&lt;p&gt;이 글에선 &lt;strong&gt;TestRestTemplate&lt;/strong&gt;클래스의 메서드인 &lt;strong&gt;withBasicAuth&lt;/strong&gt;메서드를 사용하여 위 설정의 &lt;strong&gt;1번&lt;/strong&gt; 내용을 구현한다.&lt;/p&gt;

&lt;h2 id=&quot;acceptancetestclass&quot;&gt;AcceptanceTest.class&lt;/h2&gt;

&lt;p&gt;먼저 다른 AcceptanceTest에서 상속받아 사용할 부모클래스를 정의한다.&lt;/p&gt;

&lt;p&gt;이 클래스는 TestRestTemplate를 이용하여 BasicAuth Request생성하는 것을 정의한 클래스이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RANDOM_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AcceptanceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_MANAGER_ACCOUNT_EMAIL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin@admin.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withBasicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_MANAGER_ACCOUNT_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;UnAuthenticationException:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
       
   &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPostWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createHttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;코드 설명&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 AcceptanceTest는 다른 AcceptanceTest에서 상속받아 사용해야한다. 따라서 생성자가 아닌 @Autowired로 빈을 주입하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Account를 파라미터로 넘기지 않을경우, 객체에 등록된 default manager정보를 바탕으로 repository에서 Account를 찾아서 파라미터로 전달해준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withBasicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드만봐서는 withBasicAuth메서가 TestRestTemplate 인스턴스의 속성을 변경해서 Auth를 구현하는지 새로운 TestRestTemplate 인스턴스를 반환하는지 알기어렵다. 전자라면 문제가 된다. 확인해보자&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TestRestTemplate.withBasicAuth&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withBasicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplateBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplateCustomizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;messageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uriTemplateHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUriTemplateHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpClientOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setErrorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrorHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TestRestTemplate.withBasicAuth&lt;/strong&gt;메서드는 새로운 template인스턴스를 생성해서 리턴해준다.&lt;/p&gt;

&lt;p&gt;따라서 withBasicAuth 메서드로 인해 TestRestTemplate 인스턴스의 속성이 변하는 것을 걱정하지 않아도 되겠다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createHttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendPostWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exchange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createHttpEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 기본 template을 사용하던 소스를 basicAuthTemplate를 사용하게 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/basic-authentication/_static/image1.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원래 사진의 위 request처럼 동작하던 코드를 아래처럼 변환하였다.&lt;/p&gt;

&lt;p&gt;basicAuthTemplate은 헤더에 Authorization와 그 값을 추가하여 request를 보내준다.&lt;/p&gt;

&lt;h1 id=&quot;basicauthinterceptor&quot;&gt;BasicAuthInterceptor&lt;/h1&gt;

&lt;p&gt;자 이제 아래처럼 보내지는 request요청을 가로채서 그 유저를 세선에 담아 로그인 된것처럼 동작하게 하는 코드를 작성해본다.&lt;/p&gt;

&lt;h2 id=&quot;what-is-interceptor&quot;&gt;What is Interceptor?&lt;/h2&gt;

&lt;p&gt;HandlerInterceptorAdapter은 언제 어떻게 동작하는것인지 먼저 알아보자. &lt;a href=&quot;https://stackoverflow.com/questions/41645084/why-doesnt-dispatcherservlet-invoke-my-handlerinterceptor&quot;&gt;그림 출처&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/huiyV.jpg&quot; alt=&quot;enter image description here&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring MVC 프레임워크의 구조에서 Hanlder Interceptor는 Dispatcher Servlet에서 컨트롤러로 보내는 요청을 가로채서 처리하는 방식으로 동작한다.&lt;/p&gt;

&lt;p&gt;이에 대한 추상클래스인 HandlerInterceptorAdapter는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncHandlerInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterConcurrentHandlingStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;preHandle, postHandle, afterComplete 메서드는 각자 컨트롤러에게 요청을 넘길때, view 랜더링 전, view 렌더링후에 실행된다.&lt;/p&gt;

&lt;p&gt;마지막 afterConcurrentHandlingStarted는 비동기 서블릿 관련 메서드이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 글에서는 preHandle메서드를 사용해서 컨트롤러로 전달되기 전에 Authorization이 되도록 구현할 예정이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997A3B3A5B642F6E01&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sjh836.tistory.com/163&quot;&gt;그림 출처&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;더 자세한 순서를 보여주는 그림이 있어 첨부하였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet에서 HandlerMapping에 이 request를 처리할 컨트롤러 + 메서드 를 찾는일을 위임하고 답을 받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 전달받은 타겟 컨트롤러에게 이 request를 처리하도록 위임한다.&lt;/li&gt;
  &lt;li&gt;이때 이 request를 Interceptor의 가로채서 처리한다. preHandle메서드에서 true를 반환할경우 컨트롤러로 가로챈 요청을 다시 보내준다.&lt;/li&gt;
  &lt;li&gt;컨트롤러에서 돌아온 response도 마찬가지로 가로채서 처리한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;basicauthinterceptorclass&quot;&gt;BasicAuthInterceptor.class&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicAuthInterceptor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerInterceptorAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;구현하는 Interceptor는 추상클래스 HandlerInterceptorAdapter를 상속받아 구현한다.&lt;/p&gt;

&lt;p&gt;BasicAuthentication의 구현 방법은 http header에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&quot; : &quot;Basic {인코딩된 userId:password 값}&lt;/code&gt;를 추가하는 것이다.&lt;/p&gt;

&lt;p&gt;따라서 Interceptor 코드의 흐름은&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;이 http header를 가져와서 값을 디코딩하여 Id와 password를 도출해낸다.&lt;/li&gt;
  &lt;li&gt;그 후 id와 password가 체크되면 이를 세션에 담아 “로그인 됨”을 구현하여 컨트롤러로 request를 보낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 로직으로 코드를 짠다.&lt;/p&gt;

&lt;p&gt;구현전에 먼저 구현할 Interceptor에 대한 테스트를 작성하자.&lt;/p&gt;

&lt;h3 id=&quot;tdd-basicauthinterceptortest-작성&quot;&gt;TDD. BasicAuthInterceptorTest 작성&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BasicAuthInterceptorTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@InjectMocks&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasicAuthInterceptor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basicAuthInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandleTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: header에 Authorizatin이 담긴 request 인스턴스를 생성한다.&lt;/span&gt;
        
        
        &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: preHandle(request, null, null) 메서드를 호출한다.&lt;/span&gt;
        
        
        &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: 이후 preHandle의 처리대로 request의 session에 유저 정보가 들어갔는지 확인한다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MokitoJUnitRunner를 사용했으므로 따로 init을 해줄필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;basicAuthHttpRequest 메서드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Authorization이 담긴 request를 생성하는 메서드를 구현해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockHttpServletRequest&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthHttpRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedBasicAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s:%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MockHttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockHttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedBasicAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;userId, password 데이터를 userId:password형태로 묶어 인코딩한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;request 인스턴스 (MockHttpServletRequest)를 생성하고, 그 헤더를 추가한다.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;BasicAuthentication의 구현 방법은 http header에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&quot; : &quot;Basic {인코딩된 userId:password 값}&lt;/code&gt;를 추가하는 것이다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;TODO 구현&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandleTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: header에 Authorizatin이 담긴 request 인스턴스를 생성한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MockHttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basicAuthHttpRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AccountLoginDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginAccountDTO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountLoginDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loginAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manager@email.net&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: preHandle(request, null, null) 메서드를 호출한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;basicAuthInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO: 이후 preHandle의 처리대로 request의 session에 유저 정보가 들어갔는지 확인한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loginAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;basicauthinterceptor-작성&quot;&gt;BasicAuthInterceptor 작성&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;따라서 Interceptor 코드의 흐름은&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;이 http header를 가져와서 값을 디코딩하여 Id와 password를 도출해낸다.&lt;/li&gt;
    &lt;li&gt;그 후 id와 password가 체크되면 이를 세션에 담아 “로그인 됨”을 구현하여 컨트롤러로 request를 보낸다.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;이 로직으로 코드를 짠다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;HttpServletRequest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;request는 다음과 같이 구성되어있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190502181347228.png&quot; alt=&quot;image-20190502181347228&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;preHandle 메서드&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;base64Credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getEncodedCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentialValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDecodedCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentialValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentialValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password : {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnAuthenticationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEncodedCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnAuthenticationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Basic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDecodedCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDecoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base64Credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Charset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;UnAuthenticationException:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matchPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USER_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;getEncodedCredentials&lt;/strong&gt; : 인코딩된 Credentials 스트링을 반환함 (userId:password의 형태). 만약 BasicAuth 헤더가 없거나 올바른 값이 아닐경우 return true (컨트롤러로 넘김)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;getDecodedCredentials&lt;/strong&gt;: 디코딩된 Id와 password를 배열로 반환함.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;login&lt;/strong&gt;: session에 등록하여 로그인된 상태로 만듬.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;try - catch&lt;/strong&gt; : 동작중에 에러 발생시 컨트롤러로 넘어감.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;interceptor-unit-test-결과&quot;&gt;Interceptor Unit Test 결과&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190503024916024.png&quot; alt=&quot;image-20190503024916024&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuration-수정&quot;&gt;Configuration 수정&lt;/h2&gt;

&lt;p&gt;이제 구현한 Interceptor를 등록해 주어야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebMvcConfigurer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasicAuthInterceptor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;basicAuthInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BasicAuthInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addInterceptors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterceptorRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicAuthInterceptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;굳이 @Bean어노테이션을 붙인 basicAuthInterceptor()를 구현한 이유&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@Bean으로 인해 스프링에서 BasicAuthInterceptor인스턴스를 빈으로 관리한다. (Inversion of Control)&lt;/p&gt;

&lt;p&gt;IOC되지 않은 객체는 스프링에서 @Autowired를 스캔해서 CategoryAcceptanceTest에서 빈을 주입해줄때 생성된 target bean이 없어 주입되지 않는다.&lt;/p&gt;

&lt;p&gt;즉. @Bean으로 선언해야 Autowired된 BasicAuthInterceptor를 사용할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;categoryacceptancetest&quot;&gt;CategoryAcceptanceTest&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;다른 AcceptanceTest들은 정의해둔 AcceptanceTest.class 상속해서 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190503025624232.png&quot; alt=&quot;image-20190503025624232&quot; /&gt;&lt;/p&gt;

&lt;center&gt;category RestAPI에서 비즈니스 로직에 권한체크를 구현한 이후 깨지는 메서드들.&lt;/center&gt;

&lt;h2 id=&quot;categoryacceptancetest-수정&quot;&gt;CategoryAcceptanceTest 수정&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANDOM_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryAcceptanceTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AcceptanceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CategoryAcceptanceTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuCategoryRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BCryptPasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;api_create_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 자식&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setParentId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ResponseEntity&amp;lt;MenuCategory&amp;gt; response = sendPost(&quot;/api/menuCategory&quot;, category, MenuCategory.class);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;sendPostWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 자식&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;api_create_category_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ResponseEntity&amp;lt;MenuCategory&amp;gt; response = sendPost(&quot;/api/menuCategory&quot;, category, MenuCategory.class);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;sendPostWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;api_delete_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 삭제된 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ResponseEntity&amp;lt;MenuCategory&amp;gt; responseByPost = sendPost(&quot;/api/menuCategory&quot;, category, MenuCategory.class);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ResponseEntity&amp;lt;MenuCategory&amp;gt; responseByDelete = sendDelete(&quot;/api/menuCategory/&quot; + responseByPost.getBody().getId(), MenuCategory.class);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseByPost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;sendPostWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseByDelete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;sendDeleteWithDefaultManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseByPost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseByDelete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseByDelete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;새로운 삭제된 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각 request들을 BasicAuth를 포함한 request로 수정해준다.&lt;/p&gt;

&lt;h2 id=&quot;테스트결과&quot;&gt;테스트결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190503033013675.png&quot; alt=&quot;image-20190503033013675&quot; /&gt;&lt;/p&gt;

&lt;p&gt;성공!&lt;/p&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">개요</summary></entry><entry><title type="html">[Spring/Project] Spring WEb MVC 구조</title><link href="https://dadadamarine.github.io/java/spring/spring-MVC-%EA%B5%AC%EC%A1%B0/" rel="alternate" type="text/html" title="[Spring/Project] Spring WEb MVC 구조" /><published>2019-05-02T06:25:28+00:00</published><updated>2019-05-02T06:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/spring-MVC-%EA%B5%AC%EC%A1%B0</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/spring-MVC-%EA%B5%AC%EC%A1%B0/">&lt;h1 id=&quot;spring-framework-의-구조&quot;&gt;Spring Framework 의 구조&lt;/h1&gt;

&lt;p&gt;Spring Framework 의 전체구조는 아래와 같다. &lt;a href=&quot;http://www.increpas.pe.kr/worker_course1.html?num=2&amp;amp;c_type=3&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://increpas.com/ems/upload/images/springframework.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;spring-web-mvc&quot;&gt;Spring Web MVC&lt;/h2&gt;

&lt;h3 id=&quot;spring-mvc-구조&quot;&gt;Spring MVC 구조&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;내가 자주 보아왔던 아래의 사진은 사실 Spring Web MVC의 구조에 해당한다. 스프링 프레임워크 전체로 보았을때 정말 빙산의 일각에 불과하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9934E4335A0E8EA01F&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring RESTful의 구조는 다음과 같다. &lt;a href=&quot;https://jeong-pro.tistory.com/96&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F609335A0E8EA010&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc의-처리-순서&quot;&gt;Spring MVC의 처리 순서&lt;/h3&gt;

&lt;p&gt;위의 두가지 구조에서 가장 중점적인 역할을 하는것은 DispatcherServlet이다.  DispatcherServlet이 어떤 역할을 하는지 자세히 알아보자.&lt;/p&gt;

&lt;p&gt;처리 순서에 대해 잘 설명되어 있는 &lt;a href=&quot;https://jeong-pro.tistory.com/96&quot;&gt;참조&lt;/a&gt;사이트를 참조하였다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Servlet Container에서 들어오는 모든 Request를 가로챈다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;에게 어떤 컨트롤러에게 요청을 위임할지 물어본다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;매핑된 컨트롤러가 있다면, @RequestMapping을 타고가 요청을 처리할 메서드로 보낸다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤러는 해당 요청을 처리할 서비스를 주입(DI)받아 비즈니스로직 처리를 Service에 위임한다.&lt;/li&gt;
  &lt;li&gt;Service는 데이터베이스 관련 처리를 DAO에게 위임한다.
…&lt;/li&gt;
  &lt;li&gt;이렇게 다시 돌아와 결과를 받은 컨트롤러는 Model객체와 함께 어떤 View를 보여줄지에 대한 정보(ModelAndView)를 담아 Dispatcher Servlet로 전달한다.&lt;/li&gt;
  &lt;li&gt;Dispatcher Servlet은 ViewResolver에게 전달받은 뷰의 정보를 넘긴다.&lt;/li&gt;
  &lt;li&gt;ViewResolver는 해당 View(템플릿 파일)을 찾아 DispatcherServlet에게 알려준다. 
(servlet-context.xml에서 suffix, prefix를 통해 /WEB-INF/views/index.jsp 이렇게 만들어주는 것도 ViewResolver)&lt;/li&gt;
  &lt;li&gt;Dispatcher Servlet은 응답할 View에게 Render를 시키고, View는 응답 로직을 처리해서 돌려준다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet이 클라이언트에게 렌더링된 Response객체를 보낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;각각에 대한 자세한 설명은 다음 &lt;a href=&quot;https://www.baeldung.com/spring-dispatcherservlet&quot;&gt;참조글&lt;/a&gt;에 잘 나와있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;dispatcherservlet&quot;&gt;DispatcherServlet&lt;/h3&gt;

&lt;p&gt;** DispatcherServlet의 구성**&lt;/p&gt;

&lt;p&gt;Spring MVC framework의 DispatcherServlet은 단순히 request를 전달하는 것 이상의 기능을 한다. Spring IoC 컨테이너와 완전이 합쳐져서 스프링의 특징등을 이용할 수 있게 해준다. &lt;a href=&quot;https://minwan1.github.io/2018/05/28/2018-05-28-spring-mvc/&quot;&gt;출처1&lt;/a&gt;, &lt;a href=&quot;https://minwan1.github.io/2017/10/08/2017-10-08-Spring-Container,Servlet-Container/&quot;&gt;출처2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/IUf4orm.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PlDF42i.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ContextLoaderListener는 root-context.xml에 등록된 SpringContainer를 구동한다. 이때 비즈니스 로직과, DAO등의 객체들(Web환경에 독립적인 객체들)이 생성되어 Root WebApplicationContext에 빈으로 등록된다. DispatcherServlet은 WebApplicationContext를 생성하여 자신이 직접 사용하는 컨트롤러를 포함한 웹 관련 빈을   등록한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DispatcherServlet의 생성시점&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 컨테이너(supports servlet. tomcat같은)는 사용자의 요청에 대해 request와 response 객체를 생성한다. 그리고 앞에서 살펴본것처럼 배포서술자를 통해 어떤 DispatcherServlet가 처리할지를 알아낸다. 만일 해당 클래스가 한번도 실행된 적이 없다면, 새로 인스턴스를 생성하고, 초기화를 한다. 이때 관련 빈들도 같이 초기화해준다. &lt;a href=&quot;https://jess-m.tistory.com/15&quot;&gt;참조   Spring MVC - DispatcherServlet 동작 원리&lt;/a&gt; . 동작 원리에 대한 더 자세한 설명 또한 이 글에 나와있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Root and child contexts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;한개의 Web Application은 여러 DispatcherServlet를 사용 할 수 있다. 이때 각 DispatcherServlet은 각각 자신의 Application context를 가진다. Root WebApplicationContext는 전역적으로 선언되어 각 child WebApplicationContext는 이 Root context의 값을 참조 할 수 있다. 반대는 불가능 하다. &lt;a href=&quot;https://howtodoinjava.com/spring-mvc/contextloaderlistener-vs-dispatcherservlet/&quot;&gt;참조&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-mvc의-외부&quot;&gt;Spring MVC의 외부&lt;/h3&gt;

&lt;p&gt;좀더 크게 거시적으로 바라본 Spring MVC의 모습은 어떨까? &lt;a href=&quot;https://jojoldu.tistory.com/28&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2236F14757BBD25119&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spring MVC는 Servlet들의 생명주기를 관리하는 Servlet Contrainer에 포함된 Servlet중 하나이다. &lt;a href=&quot;https://jojoldu.tistory.com/28&quot;&gt;참조&lt;/a&gt;, &lt;a href=&quot;https://minwan1.github.io/2017/10/08/2017-10-08-Spring-Container,Servlet-Container/&quot;&gt;서블릿 컨테이너의 역할과 서블릿의 생명주기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebApplicationContext vs ApplicationContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/276A9339579B5CDB2C&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WebApplicaionContext는  ApplicationContext를 상속받은 인터페이스이다. 웹 어플리케이션을 위한 ApplicationContext로 사용되고, ApplicationContext에 추가적으로 Bean 영역(bean scope)를 정의하고 있다. &lt;a href=&quot;https://jojoldu.tistory.com/28&quot;&gt;출처&lt;/a&gt;&lt;/p&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">Spring Framework 의 구조 Spring Framework 의 전체구조는 아래와 같다. 출처 Spring Web MVC Spring MVC 구조 내가 자주 보아왔던 아래의 사진은 사실 Spring Web MVC의 구조에 해당한다. 스프링 프레임워크 전체로 보았을때 정말 빙산의 일각에 불과하다. Spring RESTful의 구조는 다음과 같다. 출처 Spring MVC의 처리 순서 위의 두가지 구조에서 가장 중점적인 역할을 하는것은 DispatcherServlet이다. DispatcherServlet이 어떤 역할을 하는지 자세히 알아보자. 처리 순서에 대해 잘 설명되어 있는 참조사이트를 참조하였다. Servlet Container에서 들어오는 모든 Request를 가로챈다. HandlerMapping에게 어떤 컨트롤러에게 요청을 위임할지 물어본다. 매핑된 컨트롤러가 있다면, @RequestMapping을 타고가 요청을 처리할 메서드로 보낸다. 컨트롤러는 해당 요청을 처리할 서비스를 주입(DI)받아 비즈니스로직 처리를 Service에 위임한다. Service는 데이터베이스 관련 처리를 DAO에게 위임한다. … 이렇게 다시 돌아와 결과를 받은 컨트롤러는 Model객체와 함께 어떤 View를 보여줄지에 대한 정보(ModelAndView)를 담아 Dispatcher Servlet로 전달한다. Dispatcher Servlet은 ViewResolver에게 전달받은 뷰의 정보를 넘긴다. ViewResolver는 해당 View(템플릿 파일)을 찾아 DispatcherServlet에게 알려준다. (servlet-context.xml에서 suffix, prefix를 통해 /WEB-INF/views/index.jsp 이렇게 만들어주는 것도 ViewResolver) Dispatcher Servlet은 응답할 View에게 Render를 시키고, View는 응답 로직을 처리해서 돌려준다. DispatcherServlet이 클라이언트에게 렌더링된 Response객체를 보낸다. 각각에 대한 자세한 설명은 다음 참조글에 잘 나와있다. DispatcherServlet ** DispatcherServlet의 구성** Spring MVC framework의 DispatcherServlet은 단순히 request를 전달하는 것 이상의 기능을 한다. Spring IoC 컨테이너와 완전이 합쳐져서 스프링의 특징등을 이용할 수 있게 해준다. 출처1, 출처2 ContextLoaderListener는 root-context.xml에 등록된 SpringContainer를 구동한다. 이때 비즈니스 로직과, DAO등의 객체들(Web환경에 독립적인 객체들)이 생성되어 Root WebApplicationContext에 빈으로 등록된다. DispatcherServlet은 WebApplicationContext를 생성하여 자신이 직접 사용하는 컨트롤러를 포함한 웹 관련 빈을 등록한다. DispatcherServlet의 생성시점 웹 컨테이너(supports servlet. tomcat같은)는 사용자의 요청에 대해 request와 response 객체를 생성한다. 그리고 앞에서 살펴본것처럼 배포서술자를 통해 어떤 DispatcherServlet가 처리할지를 알아낸다. 만일 해당 클래스가 한번도 실행된 적이 없다면, 새로 인스턴스를 생성하고, 초기화를 한다. 이때 관련 빈들도 같이 초기화해준다. 참조 Spring MVC - DispatcherServlet 동작 원리 . 동작 원리에 대한 더 자세한 설명 또한 이 글에 나와있다. Root and child contexts 한개의 Web Application은 여러 DispatcherServlet를 사용 할 수 있다. 이때 각 DispatcherServlet은 각각 자신의 Application context를 가진다. Root WebApplicationContext는 전역적으로 선언되어 각 child WebApplicationContext는 이 Root context의 값을 참조 할 수 있다. 반대는 불가능 하다. 참조 Spring MVC의 외부 좀더 크게 거시적으로 바라본 Spring MVC의 모습은 어떨까? 출처 Spring MVC는 Servlet들의 생명주기를 관리하는 Servlet Contrainer에 포함된 Servlet중 하나이다. 참조, 서블릿 컨테이너의 역할과 서블릿의 생명주기 WebApplicationContext vs ApplicationContext WebApplicaionContext는 ApplicationContext를 상속받은 인터페이스이다. 웹 어플리케이션을 위한 ApplicationContext로 사용되고, ApplicationContext에 추가적으로 Bean 영역(bean scope)를 정의하고 있다. 출처</summary></entry><entry><title type="html">[Spring/Project] 스프링부트 logback 설정하기</title><link href="https://dadadamarine.github.io/java/spring/spring-logging-xml/" rel="alternate" type="text/html" title="[Spring/Project] 스프링부트 logback 설정하기" /><published>2019-05-01T06:25:28+00:00</published><updated>2019-05-01T06:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/spring-logging-xml</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/spring-logging-xml/">&lt;h1 id=&quot;what-is-logback&quot;&gt;What is logback?&lt;/h1&gt;

&lt;p&gt;SLF4J의 native 구현체. 왜 SLF4J를 함께 사용해야 하는지에 대한 내용은 &lt;a href=&quot;https://inyl.github.io/programming/2017/05/05/slf4j.html&quot;&gt;참조&lt;/a&gt;의 글을, 이 원리에 대한 내용은 &lt;a href=&quot;https://gmlwjd9405.github.io/2019/01/04/logging-with-slf4j.html&quot;&gt;참조&lt;/a&gt;의 글을 추천드립니다.&lt;/p&gt;

&lt;p&gt;logback-core, hogback-classic, logback-access의 모듈로 구성&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maven dependency&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.rakugakibox.spring.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logback-access-spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.7.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.slf4j&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;slf4j-api&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;logback-설정파일&quot;&gt;logback 설정파일&lt;/h1&gt;

&lt;h3 id=&quot;설정파일의-위치-및-종류&quot;&gt;설정파일의 위치 및 종류&lt;/h3&gt;

&lt;p&gt;src/main/resources/ 아래에 위치한다.  Spring boot 에서는 logback.xml로 설정하면 스프링 부트에대한 설정전에 로그백 설정이 되므로 제어 할 수가 없다.&lt;/p&gt;

&lt;p&gt;따라서 logback-spring.xml을 이용하던지 property의 logging.config = classpath:logback-${spring.profiles.active}.xml을 통해 각 프로파일별로 logback 설정파일을 관리하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;logback의-설정-항목&quot;&gt;logback의 설정 항목&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Level&lt;/strong&gt;
TRACE - DEBUG - INFO - WARN - ERROR 순으로 오른쪽으로 갈수록 높은레벨.
출력 레벨 이상의 로그만 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appendar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이벤트마다 로그를 기록하는 기능을 처리하는 객체. 로그의 출력위치, 출력 형식등을 설정한다. logback-core모듈에는 3가지 기본 Appender이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ConsoleAppender : 로그를 콘솔에 출력&lt;/li&gt;
  &lt;li&gt;FileAppender : 로그를 지정 파일에 기록&lt;/li&gt;
  &lt;li&gt;RollingFileAppender : FileAppender을 상속. 날짜와 용량등을 설정해서 패턴에 따라 로그가 각기 다른파일에 기록되게 할 수 있음.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Loback-classic 모듈을 이용하면 원격에 로그를 기록할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;실제 로그 기능을 수행하는 객체. 각 Logger마다 name을 통해 구분한다. 최상위 로거인 Root Logger를 설정하면 이를 계층적으로 활용 할 수 있다.&lt;/p&gt;

&lt;p&gt;이에 대한 자세한 내용과 설정항목에 대한 더 자세한 내용은 &lt;a href=&quot;https://thinkwarelab.wordpress.com/2016/11/18/java%EC%97%90%EC%84%9C-logback%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B9%85logging-%EC%82%AC%EC%9A%A9%EB%B2%95/&quot;&gt;참조&lt;/a&gt;에 자세히 나와있습니다.&lt;/p&gt;

&lt;h1 id=&quot;logback-설정&quot;&gt;logback 설정&lt;/h1&gt;

&lt;p&gt;property로 logging의 config를 선택해서 불러오도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring.profiles.active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;logging.config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;classpath:logback-${spring.profiles.active}.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 소스는 빌드시에 기본적으로 local profile이 active되어 logback-local.xml 파일이 logback 설정으로 적용되도록 하였다.&lt;/p&gt;

&lt;p&gt;배포환경에서는 argument로 prod를 제공하여 logback-prod.xml 파일로 설정하도록 한다. 즉 빌드파일 실행시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar -Dspring.profiles.active=prod&lt;/code&gt; 를 적용한다.&lt;/p&gt;

&lt;h3 id=&quot;로컬-환경&quot;&gt;로컬 환경&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;logback-local.xml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scanPeriod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30 seconds&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS}[%-5level] : %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;배포-환경&quot;&gt;배포 환경&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;logback-prod.xml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scanPeriod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30 seconds&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS}[%-5level] : %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLLING&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;level&amp;gt;&lt;/span&gt;INFO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/level&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;mylog.txt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- rollover daily --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;mylog-%d{yyyy-MM-dd}.%i.txt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;timeBasedFileNamingAndTriggeringPolicy&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- or whenever the file size reaches 100MB --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;maxFileSize&amp;gt;&lt;/span&gt;100MB&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxFileSize&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/timeBasedFileNamingAndTriggeringPolicy&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;[%-5level] %d{HH:mm:ss.SSS} %logger{36} - %msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLLING&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;콘솔에는 모든 log정보를 출력한다.&lt;/p&gt;

&lt;p&gt;filter를 사용하여 INFO이상의 로그만 파일에 분산하여 저장하도록 하였다.&lt;/p&gt;

&lt;p&gt;참조&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://thinkwarelab.wordpress.com/2016/11/18/java%EC%97%90%EC%84%9C-logback%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A1%9C%EA%B9%85logging-%EC%82%AC%EC%9A%A9%EB%B2%95/&quot;&gt;JAVA에서 LogBack을 이용한 로깅(logging) – 사용법&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">What is logback?</summary></entry><entry><title type="html">[Spring/Project] Jenkins : 배포 자동화</title><link href="https://dadadamarine.github.io/java/spring/notification/project/Jenkins-deploy-%EC%9E%90%EB%8F%99%ED%99%94/" rel="alternate" type="text/html" title="[Spring/Project] Jenkins : 배포 자동화" /><published>2019-04-28T06:25:28+00:00</published><updated>2019-04-28T06:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/notification/project/Jenkins-deploy-%EC%9E%90%EB%8F%99%ED%99%94</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/notification/project/Jenkins-deploy-%EC%9E%90%EB%8F%99%ED%99%94/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;현재 &lt;strong&gt;서버 환경구축&lt;/strong&gt;과, Jenkins를 활용하여 &lt;strong&gt;테스트, 빌드 자동화&lt;/strong&gt;까지 설정하였다.&lt;/p&gt;

&lt;p&gt;이제 배포 자동화를 구현하여 로컬에서 github로 push한 내용이 &lt;strong&gt;자동으로 배포&lt;/strong&gt; 서버로 적용되는 CI환경과, nginx를 이용한 &lt;strong&gt;무중단 배포&lt;/strong&gt;를 구현하도록 하자.&lt;/p&gt;

&lt;h1 id=&quot;jenkins-자동배포-설정&quot;&gt;Jenkins 자동배포 설정&lt;/h1&gt;

&lt;h2 id=&quot;로컬-어플리케이션-설정&quot;&gt;로컬 어플리케이션 설정&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;pom.xml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;groupId&amp;gt;com.pushstone&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;DailyNotificationServer&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;0.0.2-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;name&amp;gt;DailyNotificationServer&amp;lt;/name&amp;gt;
&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
&amp;lt;description&amp;gt;Demo project for Spring Boot&amp;lt;/description&amp;gt;

...

&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;exclusions&amp;gt;
        &amp;lt;exclusion&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
        &amp;lt;/exclusion&amp;gt;
    &amp;lt;/exclusions&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dependency의 scope&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;는 기본값이 compile이다. 즉 spring-boot-starter-web이 설정되어 있다면 굳이 tomcat의존성을 나눠서 추가할 필요가 없다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 사용해도 똑같은 의존성이 설정된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;scope는 compile(default), provided, runtime, test 4가지가 있다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;compile : compile이 설정된 의존성은 모든 빌드 작업에서 사용 가능하다.&lt;/p&gt;

  &lt;p&gt;provided : 이 의존성은 runtime시에 JDK나 컨테이너에서 제공되어야 한다.&lt;/p&gt;

  &lt;p&gt;runtime : 이 의존성은 런타임 시에는 필요하지만, compile시점에는 필요하지 않다.&lt;/p&gt;

  &lt;p&gt;test : 이 의존성은 runtime시에는 필요하지 않고, 테스트 목적으로만 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;패키징 방식을 jar로 설정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 또한 설정하지 않을경우 default로 maven은 jar로 패키징합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.port=80
server.compression.enabled=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;jenkins-설정&quot;&gt;Jenkins 설정&lt;/h2&gt;

&lt;p&gt;deploy 플러그인은 여러가지가 있다.&lt;/p&gt;

&lt;p&gt;war 배포시에는 Deploy to container도 이용가능하지만, jar 파일 배포를 위해&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Publish+Over+SSH+Plugin&quot;&gt;Publish Over SSH Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/SSH2Easy+Plugin&quot;&gt;SSH2Easy Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두가지 &lt;a href=&quot;https://yookeun.github.io/tools/2018/04/14/jenkins-remote/&quot;&gt;젠킨스(Jenkins)에서 원격(Remote)으로 배포하기&lt;/a&gt;글의 추천대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish Over SSH Plugin&lt;/code&gt; 를 이용하겠다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jenkins 플로그인 - 설치가능 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;publish over ssh&lt;/code&gt;를 검색하여 다운로드 (재시작 후 설치 클릭)&lt;/li&gt;
  &lt;li&gt;시스템 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Publish over SSH&lt;/code&gt;칸 작성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2번까지는 &lt;a href=&quot;https://yookeun.github.io/tools/2018/04/14/jenkins-remote/&quot;&gt;참고&lt;/a&gt; 블로그를 참조하시면 쉽게 따라하실 수 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;해당 item의 구성으로 가서 &lt;code class=&quot;highlighter-rouge&quot;&gt;빌드환경&lt;/code&gt;작성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dadadamarine/dadadamarine.github.io/blob/master/assets/images/image-20190428001204636.png&quot;&gt;&lt;img src=&quot;https://github.com/dadadamarine/dadadamarine.github.io/raw/master/assets/images/image-20190428001204636.png&quot; alt=&quot;image-20190428001204636&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Source files : jar파일의 위치. maven의 경우 이 파일은는 target 폴더 하위에 위치합니다.&lt;/p&gt;

  &lt;p&gt;Remove prefix : 소스 파일 앞부분 경로. 여기서는 target이다.&lt;/p&gt;

  &lt;p&gt;Remote directory : 업로드할 경로. 시스템 설정에서 지정한 Remote Directory를 포함한다. 즉 /usr이라는 경로를 지정했었으면 /usr 하위의 폴더로 경로가 이어진다.&lt;/p&gt;

  &lt;p&gt;Exec command : 실행할 명령어를 적는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;name 부분의 고급설정에 가서 해당 부분을 체크하고 서버의 계정/패스워드를 입력한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dadadamarine/dadadamarine.github.io/blob/master/assets/images/image-20190428001527001.png&quot;&gt;&lt;img src=&quot;https://github.com/dadadamarine/dadadamarine.github.io/raw/master/assets/images/image-20190428001527001.png&quot; alt=&quot;image-20190428001527001&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;에러수정&quot;&gt;에러수정&lt;/h2&gt;

&lt;p&gt;MongoDB로 환경설정을 한 이후여서 테스트 에러가 납니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=localhost:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 Jenkins서버에는 MongoDB가 설치되어 있지않기때문에 연결되지 않습니다.&lt;/p&gt;

&lt;p&gt;따라서 테스트시에 h2 DB를 사용하도록하여 젠킨스 서버에서 테스트 코드가 돌아갈 수 있게 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;외부설정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어플리케이션 에서 사용하는 설정값들을 어플리케이션 안팎에 정의하는 것. 또한 이 properties간에는 우선순위가 존재한다.&lt;/p&gt;

&lt;p&gt;테스트에서 이 값을 바꾸는(오버라이딩) 방법&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dadadamarine/dadadamarine.github.io/blob/master/assets/images/image-20190428020046250.png&quot;&gt;&lt;img src=&quot;https://github.com/dadadamarine/dadadamarine.github.io/raw/master/assets/images/image-20190428020046250.png&quot; alt=&quot;image-20190428020046250&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;test/resources에 application.properties를 만듭니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Project Structure(command + ;)의 module에서 source -&amp;gt; test -&amp;gt; resources 폴더를 누르고, 중간의 test resources버튼을 눌러 등록합니다.&lt;/p&gt;

    &lt;p&gt;빌드시에 src밑에 파일들을 classpath에 먼저 넣고 넣고. 테스트코드를 컴파일하고 classpath에 넣음. 그때 application.properties파일이 덮어씌워진다.&lt;/p&gt;

    &lt;p&gt;하지만 이 방법은 test의 properties파일이 덮어쓴 값때문에 원래 소스의 properties 값을 참조하는 곳에서 값이 없다는 에러가 발생할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른방법 : 파일명을 상이하게 저장하여(필자는 application-test.properties로 설정) test의 resource에 넣어두고&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@TestPropertySource(locations = &quot;classpath:/application-test.properties&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어노테이션을 Test클래스 위에 설정하여 통해 그 properties를 읽어 추가로 사용한다. ( 이때는 같은 property key가 있을때만 오버라이딩함 &amp;amp; 이렇게 설정한 값들은 프로퍼티 우선순위가 2번째로 높음)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사실상 embedded mongo는 properties를 따로 설정하지 않아도 테스트 시에 embedded mongo로 테스트를 진행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;embeded mongo&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;de.flapdoodle.embed&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;de.flapdoodle.embed.mongo&amp;lt;/artifactId&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;scope를 test로 설정하면, 테스트시에 자동으로 내장 DB로 실행한다.&lt;/p&gt;

&lt;h2 id=&quot;실행결과&quot;&gt;실행결과&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dadadamarine/dadadamarine.github.io/blob/master/assets/images/image-20190428063143147.png&quot;&gt;&lt;img src=&quot;https://github.com/dadadamarine/dadadamarine.github.io/raw/master/assets/images/image-20190428063143147.png&quot; alt=&quot;image-20190428063143147&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jenkins상에서 build가 성공한 모습&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dadadamarine/dadadamarine.github.io/blob/master/assets/images/image-20190428064130723.png&quot;&gt;&lt;img src=&quot;https://github.com/dadadamarine/dadadamarine.github.io/raw/master/assets/images/image-20190428064130723.png&quot; alt=&quot;image-20190428064130723&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;왼쪽은 Jenkins 자동배포가 성공한 모습 / 오른쪽은 실제 서버에 빌드된 파일이 배포된 모습&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws서버에 배포&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다른 프로젝트를 aws서버에 젠킨스를 통해 배포할시에는 key 등록, 권한문제등 추가적인 설정이 필요했으나 전체적으로 비슷하였다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[&lt;a href=&quot;https://osc131.tistory.com/67&quot;&gt;Jenkins] 자동배포 설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.leafcats.com/178&quot;&gt;spring boot jar 파일로 배포하기(deploy)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jeong-pro.tistory.com/168&quot;&gt;메이븐(Maven)은 알고 스프링(Spring)을 쓰는가?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/maven-dependency-scopes&quot;&gt;Maven Dependency Scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;주석&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;이 의존성이 적용되는 지점을 설정하는 것. &lt;a href=&quot;https://www.baeldung.com/maven-dependency-scopes&quot;&gt;참조&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">개요</summary></entry><entry><title type="html">[Spring/Project] nginx로 무중단 배포 세팅하기</title><link href="https://dadadamarine.github.io/java/spring/notification/project/server-nginx-setting/" rel="alternate" type="text/html" title="[Spring/Project] nginx로 무중단 배포 세팅하기" /><published>2019-04-28T06:25:28+00:00</published><updated>2019-04-28T06:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/notification/project/server-nginx-setting</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/notification/project/server-nginx-setting/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;개발환경 : ubuntu , spring boot, maven&lt;/p&gt;

&lt;p&gt;지금 &lt;strong&gt;CI(Continuous Integration)&lt;/strong&gt; 환경 구축까지 완료하였다.&lt;/p&gt;

&lt;p&gt;이제 nginx를 사용하여한 &lt;strong&gt;무중단 배포&lt;/strong&gt;를 구현하도록 하자.&lt;/p&gt;

&lt;p&gt;무중단 배포에 관한 내용은 jojoldu님의 &lt;a href=&quot;https://jojoldu.tistory.com/267&quot;&gt;Nginx를 활용한 무중단 배포 구축하기&lt;/a&gt;글을 참조해가며 구축하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;무중단-배포란&quot;&gt;무중단 배포란?&lt;/h1&gt;

&lt;p&gt;기존 CI까지 구축한 내용은 배포하는 시간동안 새로운 Jar실행 전까지 기존 Jar을 종료시켜 놓기때문에 서비스가 되지 않습니다.&lt;/p&gt;

&lt;p&gt;또한 이렇게 서버를 종료하고 배포하는 방식은 롤백하기도 어렵습니다.&lt;/p&gt;

&lt;p&gt;무중단 배포를 구현하는 방법에는 여러가지가 있습니다.&lt;/p&gt;

&lt;p&gt;종류마다 구현방식도 약간씩 다릅니다.&lt;/p&gt;

&lt;p&gt;이 글에서는 nginx를 이용하여 무중단 배포를 구현하겠습니다.&lt;/p&gt;

&lt;p&gt;nginx의 내용과 작동방식은 위의 김동욱님 블로그를 참고하시면 쉽게 이해하실 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;무중단-배포-구축하기&quot;&gt;무중단 배포 구축하기&lt;/h1&gt;

&lt;p&gt;먼저 서버에 nginx를 설치합니다.&lt;/p&gt;

&lt;h2 id=&quot;nginx-설치&quot;&gt;Nginx 설치&lt;/h2&gt;

&lt;p&gt;직접 소스를 받아 컴파일 하는 방식도 있지만, 편의성을 위해 package를 통한 설치를 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제대로 설치되었는지 버전을 확인해 봅니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
nginx version: nginx/1.14.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Nginx를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 실행되었는지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nginx
root      90247      1  0 05:50 ?        00:00:00 nginx: master process /usr/sbin/nginx &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; daemon on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; master_process on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
www-data  90248  90247  0 05:50 ?        00:00:00 nginx: worker process
pushsto+  90417  89366  0 06:03 pts/0    00:00:00 &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auto nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버에 접속해보면 다음과 같은 화면이 보여집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/dadadamarine/Desktop/study/blog/dadadamarine.github.io/_posts/assets/images/image-20190428150505674.png&quot; alt=&quot;image-20190428150505674&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nginx-리버스-프록시-설정&quot;&gt;Nginx 리버스 프록시 설정&lt;/h2&gt;

&lt;p&gt;현재 Nginx가 배포한 스프링부트 프로젝트를 바라 볼 수 있도록 설정합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;리버스 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;리버스 프록시란?&lt;/p&gt;

&lt;p&gt;가짜 서버에 request가 들어왔을때, 프록시 서버가 배후 서버(reverse server)로 데이터를 요청해서 가져오는 것.&lt;/p&gt;

&lt;p&gt;기본적으로 nginx는 비동기 처리방식을 채택하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yReDKjj.png&quot; alt=&quot;ì¤í¬ë¦°ì·, 2017-07-03 20-49-56&quot; /&gt;&lt;/p&gt;

&lt;center&gt;출처 : https://whatisthenext.tistory.com/123&lt;/center&gt;

&lt;p&gt;장점&lt;/p&gt;

&lt;p&gt;Reverse 서버에 request에 대한 응답대기 프로세스를 생성하지 않아도 되는 장점이 생긴다.&lt;/p&gt;

&lt;p&gt;보안상의 이점 : 또한 외부 사용자로부터 실제 내부망에 있는 서버의 존재와 정보를 숨길 수 있다.&lt;/p&gt;

&lt;p&gt;로드밸런싱 : proxy서버가 내부 서버의 정보를 알고 관리하므로, 부하 여부에 따라 요청을 분배 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nginx 환경설정 수정&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;참조 : &lt;a href=&quot;https://whatisthenext.tistory.com/123&quot;&gt;설정파일의 요소에 대한 자세한 설명&lt;/a&gt; , &lt;a href=&quot;https://opentutorials.org/module/384/4529&quot;&gt;Nginx 가상 호스트에 대한 설명&lt;/a&gt; , &lt;a href=&quot;https://medium.com/sjk5766/nginx-reverse-proxy-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-e11e18fcf843&quot;&gt;순방향 vs 역방향 프록시&lt;/a&gt; , &lt;a href=&quot;https://sarc.io/index.php/nginx/61-nginx-nginx-conf&quot;&gt;Nginx 주요 설정&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nginx 설정파일을 열어서 Virtual Host에 대한 설정을 해준다.&lt;/p&gt;

&lt;p&gt;nginx는 nginx.conf 파일에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; 지시어를 사용하여 요청을 배분한다.&lt;/p&gt;

&lt;p&gt;conf 파일에 가상 호스트 설정(server{})을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;html -&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	...

    server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            listen           80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 					&lt;span class=&quot;c&quot;&gt;# 기본 포트는 80&lt;/span&gt;
            server_name      localhost&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            root /home/pushstone/NotificaionServer  &lt;span class=&quot;c&quot;&gt;# document root 설정&lt;/span&gt;

            location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# proxy_pass 설정. 특정 확장자 요청을 넘기는 설정&lt;/span&gt;
                    proxy_pass http://localhost:8080&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
   	...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#mail {&lt;/span&gt;
	...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Proxy_pass : 요청이 올 경우 http://localhost:8080로 요청을 전달합니다.&lt;/p&gt;

&lt;p&gt;proxy_set_header XXX : 실제 요청 데이터를 header의 각 항목에 할당하는 역할&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;참조&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;주석&lt;/p&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">개요</summary></entry><entry><title type="html">[Spring/Project] 서버환경 세팅</title><link href="https://dadadamarine.github.io/java/spring/notification/project/myproject-server-setting/" rel="alternate" type="text/html" title="[Spring/Project] 서버환경 세팅" /><published>2019-04-27T06:25:28+00:00</published><updated>2019-04-27T06:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/notification/project/myproject-server-setting</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/notification/project/myproject-server-setting/">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;서버환경 : Ubuntu (bionic 18.04)&lt;/p&gt;

&lt;h1 id=&quot;docker-설치&quot;&gt;Docker 설치&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Docker CE  vs Docker EE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;전자는 개인이나 소규모 팀이 컨테이너 기반의 앱들을 실험할 수 있는 버젼으로 무료입니다.&lt;/p&gt;

&lt;p&gt;후자는 엔터프라이즈급의 개발을 하는 용도로 설계된 버젼으로 유료입니다.&lt;/p&gt;

&lt;p&gt;이 글에선 CE(Community Edition)을 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;도커를 설치하는 3가지 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;도커 CE를 설치하는 방법은 여러가지가 있고, 각 블로그마다 정리된 방법이 상이합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;Docker 문서&lt;/a&gt;에 따르면 세가지 방식이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;도커 저장소를 사용하는 방법. 설치와 업그레이드가 용이한 방법으로 추천하는 방법이다.&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;DEB (Ubuntu 파일 확장자, debian package)를 다운받아 설치와 업그레이드를 수동으로 관리하는 방법. 이 방법은 인터넷접근이 되지않는 air-gapped system&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;에 도커를 설치할때 유용하다.&lt;/li&gt;
    &lt;li&gt;일부 유저는 테스팅과 개발환경에서 자동화된 &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script&quot;&gt;스크립트&lt;/a&gt;를 사용하여 도커를 설치합니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;저장소를 사용해 설치하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker CE를 설치하기전에 도커 저장소를 설정해야 합니다. 그 후에 설정한 저장소로부터 도커를 업데이트 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;저장소 설정하기&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;apt 패키지를 update합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;apt가 HTTPS를 통해 저장소를 사용할 수 있도록 패키지를 설치합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gnupg-agent &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;도커의 공식 GPG key를 추가합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fingerprint로 key를 확인합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; unknown] Docker Release &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CE deb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;docker@docker.com&amp;gt;
sub   rsa4096 2017-02-22 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;S]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88&lt;/code&gt;가 나와야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;안정적인 저장소 사용을 위해 다음 명령을 실행합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;각 컴퓨터의 architecture에 맞춰 명령어를 실행하시면 됩니다.&lt;/p&gt;

&lt;p&gt;우분투의 architecture는 &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -m&lt;/code&gt;명령어로 확인 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Docker CE 설치&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;최신버전의 Docker CE와 Containerd&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install docker-ce docker-ce-cli containerd.io 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 도커 저장소가 여러개가 있을 때,  &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get update&lt;/code&gt;명령어에 버젼을 명시하지 않으면 가장 최신의 version을 설치합니다. 
특정 버전의 Docker CE를 설치하는 방법은 &lt;a href=&quot;&quot;&gt;Docker document&lt;/a&gt; 에 자세히 나와있습니다. 여기서는 생략하도록 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;설치된-도커-사용하기&quot;&gt;설치된 도커 사용하기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Docker CE 버전확인&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker version
Client:
 Version:           18.09.5
 API version:       1.39
 Go version:        go1.10.8
 Git commit:        e8ff056
 Built:             Thu Apr 11 04:43:57 2019
 OS/Arch:           linux/amd64
 Experimental:      &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;Got permission denied &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/version: dial unix /var/run/docker.sock: connect: permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;사용자 도커 그룹에 추가하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;도커는 설치시에 docker 그룹을 자동으로 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/group
...
docker:x:999:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재는 그룹에 등록된 사용자가 없습니다.&lt;/p&gt;

&lt;p&gt;gpasswd 또는 usermod 명령어로 그룹에 &lt;strong&gt;현재 사용자&lt;/strong&gt;를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpasswd &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/group
...
docker:x:999:pushstone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자가 추가된 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이제 도커를 재시작 하면 sudo명령어 없이 도커를 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service docker restart&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;sudo 권한 에러&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run hello-world
docker: Got permission denied &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.39/containers/create: dial unix /var/run/docker.sock: connect: permission denied.
See &lt;span class=&quot;s1&quot;&gt;'docker run --help'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;계정을 아예 로그아웃 하고 다시 로그인하면 정상작동합니다.&lt;/p&gt;

&lt;p&gt;저의 경우 ssh connection을 종료시키고 다시 연결했습니다.&lt;/p&gt;

&lt;h1 id=&quot;docker-mongo-설치&quot;&gt;Docker mongo 설치&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dadadamarine.github.io/java/spring/project/spring-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/&quot;&gt;로컬환경 설정 및 배포환경 설정&lt;/a&gt; 글에 따라 mongo이미지를 설치하고 컨테이너를 실행시킵니다.&lt;/p&gt;

&lt;p&gt;이미지를 다운받고, 백그라운드에서 컨테이너 실행후, 접속합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull mongo
docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mongo &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 27017:27017 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mongo
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; mongo /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;spring-boot-환경설정&quot;&gt;Spring Boot 환경설정&lt;/h1&gt;

&lt;h2 id=&quot;보안-그룹-설정&quot;&gt;보안 그룹 설정&lt;/h2&gt;

&lt;p&gt;현재 docker는 docker라는 그룹으로 관리되고 있습니다.&lt;/p&gt;

&lt;p&gt;어플리케이션 사용을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;springNotification&lt;/code&gt;그룹과 git 사용을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;그룹을 생성하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;groupadd springNotification
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;groupadd git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;openjdk-8-설치&quot;&gt;openjdk 8 설치&lt;/h2&gt;

&lt;p&gt;현재 서버엔 openJDK 8 버전이 설치되어있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt;
openjdk version &lt;span class=&quot;s2&quot;&gt;&quot;1.8.0_191&quot;&lt;/span&gt;
OpenJDK Runtime Environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 1.8.0_191-8u191-b12-2ubuntu0.18.04.1-b12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
OpenJDK 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;build 25.191-b12, mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러개의 자바 버전이 설치되어 있다면&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/sbin/alternatives &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어를 통해 버전을 변경 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;git-설치&quot;&gt;git 설치&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PPA&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; (Personal Package Archive) 사용&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu 설치 후 아래의 명령어를 통해 PPA를 사용가능하게 만든다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install python-software-properties
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Git repository 등록&amp;amp;업데이트 후 설치&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:git-core/ppa
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install git-core
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;설치 확인&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git version
git version 2.21.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SSH 공개키 만들기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;해당 내용은 http프로토콜을 사용하신다면 넘기셔도 무관합니다.&lt;/p&gt;

&lt;p&gt;참조 : &lt;a href=&quot;https://git-scm.com/book/ko/v1/Git-%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C&quot;&gt;Git 프로토콜&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;사용자의 SSH 키들은 기본적으로 사용자의 ~/.ssh 디렉토리에 저장합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# git 사용자로 로그인한 상태&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .ssh 
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .ssh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;ssh-keygen 프로그램으로 키 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;명령어 입력시 경로를 입력하고, 패스워드를 두번 입력합니다.
(암호를 비울시 키 사용시에 암호를 묻지 않습니다.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/pushstone/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: id_rsa
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 
Enter same passphrase again: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;확인&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;.pub 파일이 공개키 입니다. 이제 .pub파일의 내용을 복사해서 Git 서버관리자에게 보내면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;id_rsa  id_rsa.pub  known_hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;ssh-agent에 추가&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ssh-agent를 백그라운드로 시작한 후에 방금 생성한 id_rsa를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;공개키 등록&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;git hub 내 계정 profile 아래 Settings에 들어가 ssh를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi ./.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 파일로 들어가 내용을 복사해서 붙여넣으시면됩니다. 앞뒤의 내용 (ex. ssh-rsa )까지 포함해서 복사해줍니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;먼저 config설정을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;useremail@email.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -T git@github.com

Hi dadadamarine! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 메세지가 뜨신다면 성공입니다.&lt;/p&gt;

&lt;h1 id=&quot;tomcat&quot;&gt;Tomcat&lt;/h1&gt;

&lt;p&gt;Spring boot는 내장 서블릿 컨테이너인 톰캣이 자동적으로 설정된다. 이는 ServletWebServerFactoryAutoConfiguration클래스가 담당한다.&lt;/p&gt;

&lt;p&gt;또한 기존에 web.xml에서 설정했던 DispatcherServlet 관련 설정은 DispatcherServletAutoConfiguration클래스를 통해 처리한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://engkimbs.tistory.com/755&quot;&gt;참조&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;끝&quot;&gt;끝&lt;/h1&gt;

&lt;p&gt;다음 내용은 jenkins 서버에서 notification 서버로 자동 배포를 설정하겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;참조&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.bsidesoft.com/?p=7820&quot;&gt;[Docker] 도커 소개와 우분투에 Docker CE 설치하기&lt;/a&gt; - 도커 사용법 뿐 아니라 간단한 소개도 있는 글&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://firework-ham.tistory.com/1&quot;&gt;Ubuntu(우분투) 16.04 git 설치하기&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;주석&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.wired.com/2014/12/hacker-lexicon-air-gap/&quot;&gt;HACKER LEXICON: WHAT IS AN AIR GAP?&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;도커의 컨테이너 런타임 포맷. &lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=alice_k106&amp;amp;logNo=220972654815&amp;amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot;&gt;참조&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;최신 버전의 패키지 다운로드를 위한 저장소등록 &lt;a href=&quot;https://webdir.tistory.com/197&quot;&gt;참조&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Minseok Jeong</name><email>dadadamarine@gmail.com</email></author><summary type="html">개요</summary></entry><entry><title type="html">[Spring/Project] Annotationed Parameter가 있는 Controller에 대한 단위테스트 작성법</title><link href="https://dadadamarine.github.io/java/spring/spring-controller-test3/" rel="alternate" type="text/html" title="[Spring/Project] Annotationed Parameter가 있는 Controller에 대한 단위테스트 작성법" /><published>2019-04-26T09:25:28+00:00</published><updated>2019-04-26T09:25:28+00:00</updated><id>https://dadadamarine.github.io/java/spring/spring-controller-test3</id><content type="html" xml:base="https://dadadamarine.github.io/java/spring/spring-controller-test3/">&lt;blockquote&gt;
  &lt;p&gt;이전 Controller 단위테스트 코드와 설명 2 글에서 통합테스트가 아닌 Controller에 대한 단위테스트로 방향을 전환한후 후, 어떻게 어노테이션이 달린 파라미터가 있는 컨트롤러 메서드에 대한 테스트를 작성할 것인지에 대한 방법을 적은 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ApiMenuCategoryController&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ManagerAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeCreatedResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 컨트롤러에 @ManagerAccount 라는 어노테이션이 붙은 경우, 어떻게 컨트롤러에 대한 단위테스트를 구현 할 수 있을까? 에 관한 글입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;컨트롤러 테스트의 원론에 대한 설명은 블로그 글 &lt;a href=&quot;https://dadadamarine.github.io/java/spring/spring-boot-validation/&quot;&gt;[Spring/번역] 컨트롤러 테스트 가이드 in Spring Boot&lt;/a&gt; 을 추천드립니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;요약 : 컨트롤러에 대한 단위테스트는 크게 세 방법으로 나눌 수 있습니다.&lt;/strong&gt;&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Standalone Mode의 MockMVC테스트
      &lt;ul&gt;
        &lt;li&gt;해당 Controller외에 어떠한 빈도 띄우지 않습니다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;WebApplicationContext[^1]와 함께하는 MockMVC테스트
      &lt;ul&gt;
        &lt;li&gt;ControllerAdvice, Filter와 환경 빈들과 함께 테스트합니다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Real Web Server로 진행하는 SpringBootTest (사실상 Integration Test)
      &lt;ul&gt;
        &lt;li&gt;RestTemplate을 이용한 Outside-Server Test를 진행합니다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;테스트-작성-및-코드설명&quot;&gt;테스트 작성 및 코드설명&lt;/h1&gt;

&lt;p&gt;이 단위테스트에서는 1번방법인 MockitoJUnitRunner를 이용하여&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ManagerAccountHandlerMethodArgumentResolver&lt;/code&gt;를 Mocking하여 Auth를 통과한 컨트롤러 로직만을 단위테스트 할 예정입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;테스트 코드&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiMenuCategoryControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiMenuCategoryControllerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URI_MENU_CATEGORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Spy&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManagerAccountHandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JacksonTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonMenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@InjectMocks&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiMenuCategoryController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiMenuCategoryController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JacksonTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ObjectMapper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standaloneSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiMenuCategoryController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setControllerAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionHandlerExceptionResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomArgumentResolvers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리1의 하위 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteCategoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;supportsParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelAndViewContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeWebRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MockHttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URI_MENU_CATEGORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 테스트는 ManagerAccountHandlerMethodArgumentResolver를 Spy로 등록하여 어노테이션 체크인 supportsParameter() 메서드는 원래대로 동작합니다.&lt;/p&gt;

&lt;p&gt;반면 resolveArgument() 메서드를 Mocking 하여 원래 진행하던 권한체크를 넘기고 바로 Account를 리턴하여 컨트롤러 로직이 동작하도록 작성하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ManagerAccountHandlerMethodArgumentResolver 코드&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagerAccountHandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;supportsParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasParameterAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManagerAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;n&quot;&gt;ModelAndViewContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndViewContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;n&quot;&gt;NativeWebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nativeWebRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;n&quot;&gt;WebDataBinderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDataBinderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserFromSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nativeWebRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnAuthorizedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You're not manager!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행결과&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190426202049695.png&quot; alt=&quot;image-20190426202049695&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;하지만 예상과는다르게 SessionUtils의 isLogin메서가 실행되었고, NullPointerException이 발생했습니다. 이는 resolveArgument() 메서드에 대한 mocking이 되지 않았단 뜻입니다.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;처음엔 이렇게 예상했었으나, 에러가 발생한 지점이 Test코드인 것으로 보아, ArgumentResolver을 Mocking하는 When메서드에서 에러가 났다고 생각할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Spy를 @Mock 으로 바꾼후. supportsParameter()메서드도 Mocking해주니 정상적으로 작동하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteCategoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;managerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;supportsParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MockHttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URI_MENU_CATEGORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;결과&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190426204115776.png&quot; alt=&quot;image-20190426204115776&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;하지만 @Spy로 다시 변경할경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190426204450219.png&quot; alt=&quot;image-20190426204450219&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 디버깅 포인트까지 넘어가지도 못하고 when()에서 에러가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;필자 생각&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이는 @Spy 어노테이션이 동작할때 Mocking 하기 전 기존의 코드들도 모두 정상적으로 동작해야 한다는 것을 뜻합니다.&lt;/p&gt;

&lt;p&gt;하지만 서블릿이 온전하지 못한 상태에서 resolveArgument() 메서드의 파라미터로 null이 전달되게 되고, 이는 spy빈이 제대로 동작하지 못한다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;그래서 when 메서드에서 이 스파이빈은 정상적으로 동작하지 않는다는 에러를 내보내는 것으로 생각됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 내용은 확실히 공부한 뒤에 보강해서 업로드 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;다른-방식의-테스트-작성-및-코드설명&quot;&gt;다른 방식의 테스트 작성 및 코드설명&lt;/h1&gt;

&lt;p&gt;테스트와 관련된 공부를 하다가 Mocking을 다르게 구현할 수 있는 방법을 찾았습니다.&lt;/p&gt;

&lt;p&gt;거기다가 이 방법이 더 옳은방법이라는 설득력도 충분한 글이었습니다.&lt;/p&gt;

&lt;p&gt;해당 글을 소개함과 함께 현재 테스트 코드를 이 방식으로 적용하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이동욱 님의 &lt;a href=&quot;https://jojoldu.tistory.com/320&quot;&gt;@SpyBean @MockBean 의도적으로 사용하지 않기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테스트 코드 내부에 원래 argumentResolver를 상속하는 MockManagerArgumentResolver를 만든후에 원래 메서드를 @Override하는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ApiMenuCategoryControllerTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockManagerArgumentResolver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManagerAccountHandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;ModelAndViewContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndViewContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;NativeWebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nativeWebRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;WebDataBinderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDataBinderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MockitoJUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiMenuCategoryControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiMenuCategoryControllerTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URI_MENU_CATEGORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api/menuCategory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategoryService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//@Mock&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//private ManagerAccountHandlerMethodArgumentResolver managerArgumentResolver;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockManagerArgumentResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockManagerArgumentResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockManagerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JacksonTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonMenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@InjectMocks&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiMenuCategoryController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiMenuCategoryController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JacksonTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ObjectMapper:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvcBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;standaloneSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiMenuCategoryController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setControllerAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionHandlerExceptionResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;//.setCustomArgumentResolvers(managerArgumentResolver)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCustomArgumentResolvers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockManagerArgumentResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리1의 하위 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fstCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!Password1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manager@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MANAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createCategoryTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//given&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menuCategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MenuCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//when&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MockHttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URI_MENU_CATEGORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonMenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MenuCategoryDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;카테고리2의 하위 카테고리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContentAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockManagerArgumentResolver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManagerAccountHandlerMethodArgumentResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveArgument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodParameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;ModelAndViewContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndViewContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;NativeWebRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nativeWebRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;WebDataBinderFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webDataBinderFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;managerByMock@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!Password1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;manager@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MANAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;실행결과&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image-20190426211507115.png&quot; alt=&quot;image-20190426211507115&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mocking한 return값인 &lt;code class=&quot;highlighter-rouge&quot;&gt;managerByMock@Gmail.com&lt;/code&gt;이 파라미터로 전달된 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 방법을 사용하면 Spring 프레임워크의 기능을 덜 사용하