<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[FunDev Studio]]></title>
			<link>https://blog.naver.com/pistolcaffe</link>
			
				<image>
					<url><![CDATA[https://blogpfthumb-phinf.pstatic.net/MjAxODA2MTBfMTk2/MDAxNTI4NTkzNjEzMzk3.r0nKPtqT88UlYkl0zLSywe8SOY4wyWGvPxCrc_OXllcg.VfYMTsP83Ja0xtKYbAj9nxqPOcDmiettmyfoLhOH1Isg.JPEG.pistolcaffe/profileImage.jpg?type=m2]]></url>
					<title><![CDATA[FunDev Studio]]></title>
					<link>https://blog.naver.com/pistolcaffe</link>
				</image>
			
			<description><![CDATA[Fundev Studio. instagram : @pistolcaffe #android #kotlin]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Tue, 14 May 2019 09:52:55 +0900</pubDate>

			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (MockupWidget Framework 구현)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221336846651</link>
					<guid>https://blog.naver.com/pistolcaffe/221336846651</guid>
					<description><![CDATA[이번 포스팅 부터는 Protodream 에서 제공하는 위젯의 목록구성, 선택, 스타일 적용 까지의 모든것이 구현 되어있는 MockupWidget Framework 구현에 대해 정리 하려고 한다.아직 ProtoDream 에서는 지원가능한 위젯이 그렇게 많지 않다. 기본 위젯말고도 편의성을 위해 커스터마이징을 하여 추가로 제공 할 기본 위젯들을 작업 하고 있다. 현재 ProtoDream 에서는 9개의 기본 widget 과 4개의 shape 를 제공 하고 있다. &lt;Widget&gt; 1. TextView 2. EditText 3. Button 4. CardView 5. Switch 6. CheckBox 7. Seekbar 8. RadioButton 9 TitleBar &lt;Shape&gt; 1. Rectangle 2. Circle 3. Vertical Line 4. Horizontal Line나는 앱에서 지원하.......]]></description>
					<pubDate>Sat, 11 Aug 2018 12:36:40 +0900</pubDate>
					<tag><![CDATA[ProtoDream,개발일기,개인앱]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (Touch Framework 구현 - 마지막)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221335470679</link>
					<guid>https://blog.naver.com/pistolcaffe/221335470679</guid>
					<description><![CDATA[베타버전을 릴리즈 한지 일주일이 흘렀다. 짧은시간이지만 많은 오류들이 리포트 되었고, 수정버전을 재배포하느라 바쁜 시간을 보내고 있다. 왠만하면 릴리즈 횟수를 줄이고 최대한 stable 버전을 간간히 배포하는 정도로 하고싶었지만 아직 베타버전이다 보니 크리티컬한 이슈들이 많아서 아마 당분간은 지금처럼 자주 릴리즈를 하게 될 것 같다. 지난번 포스팅에서 Translate (위치이동) 동작을 위해 설계한 최초 구조를 되짚어 보자면, 1. A 라는 특정 위젯이 Translate 를 시작한다. 2. A가 Translate 중일 때 다른 위젯들은 A 의 위치정보(x,y,width,height) 값을 전달 받는다. 3. 각 위젯들은 자신의 left, top, right, bottom position 에.......]]></description>
					<pubDate>Thu, 09 Aug 2018 11:02:40 +0900</pubDate>
					<tag><![CDATA[개발일기,개인앱,ProtoDream]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (Touch Framework 구현 - 3)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221334242896</link>
					<guid>https://blog.naver.com/pistolcaffe/221334242896</guid>
					<description><![CDATA[파워포인트를 보면 이웃간 개체가 접근 할 경우 side 경계선 간의 정렬선을 보여주거나 정렬선 기준으로 서로 스냅이 되는 기능을 볼 수 있다. 또한 프로토타이핑 도구에서 기본으로 제공하는 기능으로써, 앱에서 원하는 위젯을 추가 한뒤 배치하는 과정에서 위와 같은 정렬 및 스냅 기능을 구현해야 했다.위와 같이 A,B,C 3개의 버튼을 사용자가 선택 해서 배치 했다고 가정해보자. 그리고 A 버튼이 현재 선택 되어 있고 사용자가 롱클릭을 통해 재배치를 하려고 한다. 정렬선 및 스냅기능을 위해 어떤 방식으로 접근하면 좋을까? A 가 움직일 때 B 와 C 에게 A 가 움직이고 있다는 것을 A 의 이동중인 위치(x, y, left, top, right, bottom) 값.......]]></description>
					<pubDate>Tue, 07 Aug 2018 15:02:21 +0900</pubDate>
					<tag><![CDATA[android,kotlin,protodream]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (Touch Framework 구현 - 2)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221333452366</link>
					<guid>https://blog.naver.com/pistolcaffe/221333452366</guid>
					<description><![CDATA[View 계층에 따라 위젯이 서로 겹쳐서 가려지더라도, 선택 된 위젯의 ResizeTool 은 가려지지 않고 최상단에 표시 되어야 했다. 이 문제를 기반으로 비록 아직 기술검토 단계 이지만 구체적인 구조를 잡아서 개발할 필요성이 생겼다.ProtoDream 앱에서는 아래와 같은 커스텀 ViewGroup 을 구현했다. · MockupInteractiveAlignContainer · MockupInteractiveAlignMasterContainer · MockupFlexibleContainer 각 커스텀 ViewGroup 의 역할과 구현한 이유를 정리해보겠다. 모든 Container 의 부모 클래스가 되는 Container 를 먼저 구현 했다. 여기서 Container 란, 선택 된 위젯을 감싸고 있는 ViewGroup 을 의미한다. 즉, 앱에서는 모든 위젯은 단.......]]></description>
					<pubDate>Mon, 06 Aug 2018 12:14:44 +0900</pubDate>
					<tag><![CDATA[android,kotlin,androidapplication,appdevelopement,androiddevelopment,androiddeveloper,protodream,mockuptool,mockup,framework]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (Touch Framework 구현 - 1)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221330715448</link>
					<guid>https://blog.naver.com/pistolcaffe/221330715448</guid>
					<description><![CDATA[프로젝트가 시작 되었다. 시작은 반 이라던가... 뭔가 흥분이 되었다(?) 기획을 끄적여 보기 시작 했다. 그런데 얼마 지나지 않아 머리가 혼미해지기 시작했다.이거.. 뭐 부터 만들어야 되지?일단 대충이라도 어떤 기능이 필요한지 노트에 써내려가기 시작했다. · 위젯 드래그, 배치, 변형(Translate), 스타일 적용 · 프로젝트 생성, 저장, 복구 · Ctrl+z (undo) , Ctrl+Shift+z (redo) · 위젯 배치 할 때 정렬선, 이웃 위젯 스냅 기능 · 위젯 그룹, 그룹해제 · 위젯 복사 · 위젯 삭제 · drawing order (맨앞, 앞으로, 뒤로, 맨뒤로) · 안드로이드 아이콘 셋 제공 · 과부하 이것말고도 기본적으로 있어야 될 것 같은 기능 목록이 수십가지가 더 있.......]]></description>
					<pubDate>Wed, 01 Aug 2018 14:58:25 +0900</pubDate>
					<tag><![CDATA[android,kotlin,application,googleplay,androidapplication,applicationdeveloper,applicationdevelopment,개발일기,codinglife,protodream]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[ProtoDream.io]]></category>
					<title><![CDATA[ProtoDream.io 개발일기 (프로젝트 선정)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221330598000</link>
					<guid>https://blog.naver.com/pistolcaffe/221330598000</guid>
					<description><![CDATA[나는 안드로이드를 2011년에 처음 접한 이후 줄곧 안드로이드만 고수해왔다. 한 분야만 고수해온것이 다른관점에서 볼 때 매너리즘에 빠진것이 아니냐 라고 할 수도 있겠지만, 해를 거듭하면서 계속해서 안드로이드 API, 라이브러리, 솔루션 등이 진화되고 이러한 것들을 끊임없이 습득하려고 하다보니 아직도 안드로이드에 대해 조심스럽지만 "자신있는 분야" 라고 말하기 힘든 부분이 있다. 그래서 이만큼 했으면 다른 것도 해봐야 겠다 라는 생각을 쉽사리 할 수가 없었다. 사실 그동안 다른 분야로 넘어가야할 동기부여 또한 스스로 찾지 못했다. 이제야 크로스 플랫폼에 관심을 두고 Flutter, Xamarin 등을 써보고 있다. 그동안 회사생활도.......]]></description>
					<pubDate>Wed, 01 Aug 2018 11:51:19 +0900</pubDate>
					<tag><![CDATA[android,kotlin,application,googleplay,androidapplication,applicationdeveloper,applicatiodevelopment,개발일기,codinglife,protodream]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android databinding - ViewStub 에 적용하기 (kotlin)]]></title>
					<link>https://blog.naver.com/pistolcaffe/221300398175</link>
					<guid>https://blog.naver.com/pistolcaffe/221300398175</guid>
					<description><![CDATA[앞선 포스팅에서 databinding library 의 전반적인 내용을 살펴 보았습니다. 이번시간에는 2부에서 생략하였던 databinding 을 ViewStub 에 적용하는 방법에 대해 포스팅 하고자 합니다. databinding 1, 2 부에 대한 내용은 아래 링크를 참조하세요. ViewStub 은 최초에는 레이아웃 프로세스에 포함되지 않고 보이지 않는 상태로 존재하다가, inflate() 호출하는 시점에 view 계층에 포함되어지는 특수한 View 입니다. 주로 빈도수가 많지 않고 선택적으로 사용자에게 노출 될 view 의 경우 ViewStub 으로 처리하는 경우가 일반적입니다. 그렇다면 이러한 특성을 갖는 ViewStub 에 DataBinding 을 적용 하는 방법에 대해 예제를 통해 본격적으로.......]]></description>
					<pubDate>Sun, 17 Jun 2018 00:10:11 +0900</pubDate>
					<tag><![CDATA[kotlin,android,databinding,androiddatabinding,ViewStub,ViewStubProxy]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android DataBinding Library for kotlin - 2]]></title>
					<link>https://blog.naver.com/pistolcaffe/221300333141</link>
					<guid>https://blog.naver.com/pistolcaffe/221300333141</guid>
					<description><![CDATA[계속해서 databinding 에 대해 알아보도록 하겠습니다. 1편은 아래 링크를 참조 해주세요. 기본적으로는 databinding 에서 임의의 데이터 객체를 사용하여 레이아웃과 바인딩을 구현 할 수 있지만 바인딩 하고 있는 객체의 값이 변경 되어도 UI 가 업데이트 되진 않습니다. 데이터가 변경 되었을 때 이를 알려주는 기능을 데이터 객체에 부여하면 databinding 의 장점을 극대화 시킬 수 있습니다. databinding 은 데이터 변경에 대응하기 위한 세 가지 메커니즘을 제공 합니다. 차례대로 살펴보도록 하겠습니다. ● Observable Objects바인딩 하려는 객체에 android.databinding.Observable 인터페이스를 구현하면 해당 객체에 단일 리스너를 연.......]]></description>
					<pubDate>Sat, 16 Jun 2018 22:14:13 +0900</pubDate>
					<tag><![CDATA[kotlin,android,databinding,BindingAdapter,BindingConversion,BindingMethod]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android DataBinding Library for kotlin - 1]]></title>
					<link>https://blog.naver.com/pistolcaffe/221295255976</link>
					<guid>https://blog.naver.com/pistolcaffe/221295255976</guid>
					<description><![CDATA[이번 포스팅은 DataBinding Library 에 대해 다뤄보려고 합니다. DataBinding Library 는 유연성과 폭넓은 호환성을 제공하여 선언적 레이아웃을 작성 가능하게끔 지원해줌으로써, 어플리케이션 로직과 레이아웃을 바인딩 하는데 유용하게 사용 할 수 있습니다. 가이드 문서를 기반으로 작성 할 예정이며 보충설명이 필요한 부분에 대해서 별도로 언급 하여 진행 하려고 합니다. 다뤄야 할 내용이 많아 1,2 부로 나눠서 포스팅할 예정이며 마지막으로 RecyclerView 에 적용해보는 예제로 마무리 해보겠습니다. 먼저 DataBinding 사용을 위한 프로젝트 설정법을 살펴봅시다. 모듈 수준의 build.gradle 에서 다음과 같이 설정 합니다.java 언어로 사.......]]></description>
					<pubDate>Sat, 09 Jun 2018 18:23:53 +0900</pubDate>
					<tag><![CDATA[fundevstudio,pistolcaffe,android,databinding,androiddatabinding,kotlin]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[Android ConstraintLayout 분석 - 2]]></title>
					<link>https://blog.naver.com/pistolcaffe/221290283458</link>
					<guid>https://blog.naver.com/pistolcaffe/221290283458</guid>
					<description><![CDATA[ConstraintLayout 분석 두번째 포스팅 입니다. 지난번 포스팅에서 ConstraintLayout 의 기본 특성에 대해 알아보았습니다. v1.1 이 release 되면서 가이드 문서에 추가 된 내용들에 대해 정리해보려고 합니다 1. WRAP_CONTENT : enforcing constraints 2. MATCH_CONSTRAINT dimension 3. Margins and chains 4. Optimizer 5. Group 6. Barrier 7. Placeholder 8. Circular Positioning ConstraintLayout 첫번째 분석 글은 아래 링크를 참고하세요. ConstraintLayout 에서 특정 constraint 를 적용 하기 위해서는 위젯의 width 혹은 height 를 MATH_CONSTRAINT 로 설정 해야 했습니다. 반대로 말하면 WRAP_CONTENT 로 설정 시 layout 시점에서 결.......]]></description>
					<pubDate>Sun, 03 Jun 2018 00:13:33 +0900</pubDate>
					<tag><![CDATA[android,constraintlayout,match_constraint,layout]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[framework]]></category>
					<title><![CDATA[[android framework] setContentView() 에 관하여]]></title>
					<link>https://blog.naver.com/pistolcaffe/221285539895</link>
					<guid>https://blog.naver.com/pistolcaffe/221285539895</guid>
					<description><![CDATA[이번 포스팅은 setContentView() 에 대해 분석해보고, 어플리케이션이 실행 된 후 어떠한 흐름을 통해 화면에 보여지게 되는지 살펴보고자 합니다우리가 Activity 클래스를 작성할때, 일반적으로 setContentView() 를 가장 먼저 호출 할 것입니다 setContentView() 는 3개의 오버로드 메소드가 구현 되어 있습니다. 본론에 앞서 간략히 알아보도록 하겠습니다. 1. layout resource 를 인자로 받습니다. 이후 LayoutInflater 를 통해 inflate 되어지고 이후 최상단 뷰에 add 될 것 입니다. 2. view 를 인자로 받습니다. 특정 view 로 content 를 구성 하고 싶을 경우 사용 될 것입니다. 한가지 주의사항으로는 인자로 사용 될 view 의 width, heig.......]]></description>
					<pubDate>Sun, 27 May 2018 23:24:18 +0900</pubDate>
					<tag><![CDATA[android,androidframework,setContentView,PhoneWindow,kotlin]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[BottomSheetDialog]]></title>
					<link>https://blog.naver.com/pistolcaffe/221027282730</link>
					<guid>https://blog.naver.com/pistolcaffe/221027282730</guid>
					<description><![CDATA[BottomSheetDialog 는 design support library 23.2.0 에 추가 된 클래스 입니다. 이번 포스팅은 BottomSheetDialog 사용법에서부터, 이 클래스가 어떤 구조로 구현되어있는지 간단히 살펴 보려 합니다. &lt;사용법&gt;BottomSheetDialog 사용법은 간단합니다. Dialog 에 표시 될 View 를 setContentView() 메소드를 호출하여 설정 한뒤 show() 를 호출 하면 되는데요. Dialog 타이틀과 메세지를 갖는 간단한 view 를 작성하여 알아보겠습니다. [gradle dependencies] Dialog 에 표시 될 View 를 설정 하기 위해 세가지 메소드를 사용 할 수 있습니다. 먼저 Dialog 에 들어갈 dialog_content.xml 레이아웃을 작성 하였습니다. 이제 BottomSheetDi.......]]></description>
					<pubDate>Mon, 12 Jun 2017 13:51:12 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,designsupportlibrary,BottomSheetDialog,BottomSheetBehavior]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[JAVA]]></category>
					<title><![CDATA[Collection 정렬 알고리즘 - TimSort]]></title>
					<link>https://blog.naver.com/pistolcaffe/221020950346</link>
					<guid>https://blog.naver.com/pistolcaffe/221020950346</guid>
					<description><![CDATA[안드로이드 에서 사용하는 JDK 의 Collection Framework 에 대해 학습 하던 중, Collection 내부에서 sort 알고리즘을 TimSort 를 사용 하고 있는 것을 알게 되었다. 실제로는 mergeSort , TimSort 사용에 대해 분기가 되어있지만, 내부 코드를 더 찾아 들어가보면 MergeSort 는 사용하지 않도록 구현 되어 있었다. 개인적으로 머리가 나빠서 어떤 알고리즘을 (특히 정렬 같은) 분석 하는 것이 쉽지 않아서 코드를 이틀정도 들여다봐도 아직 자세히 이해를 하진 못했지만, 아는데 까지 한번 정리 해보려고 한다. Timsort 에 대해 한마디로 간단히 요약 하자면, 안정적인 하이브리드 정렬 알고리즘 이라고 한다. 상황에 따라 binary search 를 이.......]]></description>
					<pubDate>Sat, 03 Jun 2017 19:46:33 +0900</pubDate>
					<tag><![CDATA[JAVA,Collection,CollectionFramework,TimSort,sort]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[Collection]]></category>
					<title><![CDATA[[Collection<List>] ArrayList - 1]]></title>
					<link>https://blog.naver.com/pistolcaffe/221019498243</link>
					<guid>https://blog.naver.com/pistolcaffe/221019498243</guid>
					<description><![CDATA[ArrayList 는 개발 중에 가장 많이 쓰는 컬렉션 구현체 중 하나이다. Collection Framework 에는 여러 Collection Interface 가 있고, 이 Interface 를 통해 범용적으로 쓸 수 있는 몇가지 구현체를 제공하는데, ArrayList 가 그 중 하나이다. ArrayList 의 주요 메소드의 내부 동작 구조를 알아보자. 1. Add(), AddAll() 2. remove(), removeAll(), removeIf()1. Add(), AddAll()ArrayList 는 내부에서 element 배열을 기반으로 구현 되어 있다. 생성자를 통해 직접 element 배열의 capacity 를 설정 할 수 있으며, 기본 Capacity 는 10 이다. ArrayList 는 add 동작 시 필요한 minCapacity 값을 기준으로, 현재 element 배열의 length 와 비교.......]]></description>
					<pubDate>Thu, 01 Jun 2017 18:19:34 +0900</pubDate>
					<tag><![CDATA[자바,java,Collection,ArrayList,LIst,CollectionFramework,컬렉션]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[CollapsingToolbarLayout 분석]]></title>
					<link>https://blog.naver.com/pistolcaffe/221017061017</link>
					<guid>https://blog.naver.com/pistolcaffe/221017061017</guid>
					<description><![CDATA[우리는 CollapsingToolbarLayout 을 사용하여 AppBarLayout 과 함께 툴바의 Collapsing , contentScrim, parallax 등의 기능을 구현 할 수 있습니다. 이번 포스 팅은 CollapsingToolbarLayout 에 대해 다뤄 보려고 하는데, 단순 사용법 부터 실제 CollapsingToolbarLayout 의 내부 코드를 살펴 보면서 구조적인 부분과 주의해야 할 점에 대해서 알아보겠습니다. 1. AppBarLayout 와의 의존성AppBarLayout 이 CoordinatorLayout 의 child 로 사용 되어야 하듯, CollapsingToolbarLayout 은 AppBarLayout 의 child 로 사용 해야 하는데요. (AppBarLayout 분석 글은 아래 링크를 참조 하세요) http://blog.naver.com/pistolcaffe/221016672922 그 이.......]]></description>
					<pubDate>Mon, 29 May 2017 20:37:55 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,designsupportlibrary,CollapsingToolbarLayout,AppBarLayout,layout_collapseMode]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[AppBarLayout 에 대한 고찰]]></title>
					<link>https://blog.naver.com/pistolcaffe/221016672922</link>
					<guid>https://blog.naver.com/pistolcaffe/221016672922</guid>
					<description><![CDATA[머티리얼 디자인이 도입 된 후, 우리는 AppBarLayout 을 자주 사용 하고 있습니다. 이미 프로젝트 생성 단계 부터, 특정 프로젝트를 생성하면 AppBarLayout 이 기본 layout xml 에 포함 되어있는걸 볼 수 있죠. 일반적으로 AppBarLayout 에 하단에 위치 하게 될 위젯에 우리는 layout_behavior=@string/appbar_scrolling_view_behavior 속성을 추가 하여 사용 합니다. 그런데, AppBarLayout 이 무엇이고 어떤 이유로 저렇게 특정 behavior 를 명시 해놓고 써야 하는 걸까요? 이번 포스팅은 단순 AppBarLayout 의 기능 설명 보다도 AppBarLayout 이 코드상으로 어떤 컨셉으로 구현 되있는지 분석 해보면서 사용상의 유의사항이나 고유 특성에 대해.......]]></description>
					<pubDate>Mon, 29 May 2017 12:44:04 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,DesignSupportLibrary,AppBarLayout,Behavior,scrollingviewbehavior,layout_behavior]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[Android ConstraintLayout 분석 - 1]]></title>
					<link>https://blog.naver.com/pistolcaffe/221010983726</link>
					<guid>https://blog.naver.com/pistolcaffe/221010983726</guid>
					<description><![CDATA[이번 글은 ConstraintLayout 에 대한 분석 내용입니다. ConstraintLayout 은 지난 2016 년 개최 되었던 Google I/O 에 공개 된 레이아웃 에디터에 상호연관 시키기 위해 도입 된 Layout 입니다. 언뜻보면 RelativeLayout 과 비슷해보이기도 하는데, ConstraintLayout 만의 강력한 기능으로 좀 더 유연하고 빠른 레이아웃을 구성할 수 있습니다. 레이아웃 에디터를 이용하면 ConstraintLayout 안의 widget 간의 관계를 쉽게 파악할 수 있으므로 좀더 편리한 UI 작업을 할 수 있습니다. 그러나 기존의 XML 만 이용하여 UI 작업을 하셨던 분들도 충분히 ConstraintLayout 에 익숙해 질 수 있습니다. ConstraintLayout 의 특성에 대해 알아보고, Re.......]]></description>
					<pubDate>Sun, 21 May 2017 22:46:04 +0900</pubDate>
					<tag><![CDATA[안드로이드,Android,Constraintlayout,RelativeLayout,supperlibrary]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[기타]]></category>
					<title><![CDATA[Android Instant App SDK 체험기]]></title>
					<link>https://blog.naver.com/pistolcaffe/221009529807</link>
					<guid>https://blog.naver.com/pistolcaffe/221009529807</guid>
					<description><![CDATA[얼마전 Android Instant App SDK 가 공개 되었습니다. 아직 Instant App 을 사용할수 있는 디바이스가 굉장히 한정적이고, 몇 가지 제한 되는 기능들도 있으나 많은 이점을 가져다 줄것으로 기대되는 솔루션 인데요. 오늘은 Instant App SDK 를 이용한 개발 체험기에 대해 써보려 합니다. * Instant App에 대해서는 정리가 잘 되있는 글들이 있어서 따로 설명하지 않고 링크를 공유할게요. http://blog.ab180.co/google-io-in-marketer-perspective/?utm_source=Facebook&amp;utm_medium=Group%20post&amp;utm_content=Firebase&amp;utm_campaign=Blogpost#.V0u2IzksWWw.link 현재 InstantApp 에서 지원하지 않는 기능은 아래와 같습니다. Long-r.......]]></description>
					<pubDate>Fri, 19 May 2017 16:06:00 +0900</pubDate>
					<tag><![CDATA[안드로이드,인스턴트앱,InstantApp,SDK]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[잡담]]></category>
					<title><![CDATA[VIEWTY 앱 게시]]></title>
					<link>https://blog.naver.com/pistolcaffe/221009336973</link>
					<guid>https://blog.naver.com/pistolcaffe/221009336973</guid>
					<description><![CDATA[https://play.google.com/store/apps/details?id=com.pistolcaffe.viewty Youtube API 를 예전에 몇번 써봤었지만 제대로 써본것이 아니였고, 국내 뷰투버나 정보등을 통해 뷰티 문화를 알리기 위해 시작한 프로젝트 입니다.국내 뷰튜버 들이 리스트 되있고 (앱 내부에서 뷰튜버 영상을 플레이 시키지 않습니다.) 뷰티 정보, 연관키워드 정보를 제공합니다.지금은 국내 사용자층을 대상으로 컨텐츠를 구성하였으나 다른나라에서도 볼수 있도록 확대해나갈 예정입니다. Youtube API, Naver Open 검색 API 등이 사용 되었고 앞으로도 많이 발전시켜 보려고해요!]]></description>
					<pubDate>Fri, 19 May 2017 12:03:37 +0900</pubDate>
					<tag><![CDATA[뷰티,앱개발,VIEWTY]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[기타]]></category>
					<title><![CDATA[람다표현식]]></title>
					<link>https://blog.naver.com/pistolcaffe/220729293102</link>
					<guid>https://blog.naver.com/pistolcaffe/220729293102</guid>
					<description><![CDATA[람다 표현식은 한 번이든 여러 번이든 나중에 실행할 수 있게 전달하는 코드 블록이다. 자바는 거의 모든 것이 객체인 객체 지향 언어이며 자바에는 함수 타입이 없다.대신 함수를 객체로 표현한다. 다시 말해서 특정 인터페이스를 구현하는 클래스의 인스턴스로 표현한다. 람다 표현식은 이런 인스턴스를 생성하는 아주 편리한 문법을 제공한다. 정렬에 사용 되는 Comparator 를 생각해보자. 123456Comparator&lt;String&gt; comp = new Comparator&lt;String&gt;() { @Override public int compare(String first, String second) { return first.length() - second.length(); } };Colored by Color Scriptercs 이를 람다 표현식으로 쓰면 아래.......]]></description>
					<pubDate>Mon, 06 Jun 2016 22:46:52 +0900</pubDate>
					<tag><![CDATA[JAVA,Lamda,람다표현식]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[Toolbar - 2]]></title>
					<link>https://blog.naver.com/pistolcaffe/220638412162</link>
					<guid>https://blog.naver.com/pistolcaffe/220638412162</guid>
					<description><![CDATA[지난 포스팅에 이어 Toolbar 에 대해 좀더 살펴보겠습니다.ActionbarDrawerToggle 을 사용하여, Toolbar 와 DrawerLayout 의 연동하는 예제를 살펴보겠습니다. 우선, DrawerLayout 과 Navigation 을 사용한 예제는 이전에 포스팅 하였고 하기 페이지에서 확인 하실수 있습니다.http://blog.naver.com/pistolcaffe/220628110384 먼저 레이아웃에 NavigationView, DrawerLayout 을 추가 합니다. 이 부분은 위 포스팅에서 참고 할 수 있으니 별도로 코드를 첨부하진 않겠습니다. [Activity 클래스 작성]12345678910111213141516171819202122232425262728293031 private Toolbar mToolbar; private DrawerLayout mDrawerLayout; private NavigationVi.......]]></description>
					<pubDate>Fri, 26 Feb 2016 00:01:34 +0900</pubDate>
					<tag><![CDATA[안드로이드,Android,MaterialDesign,Toolbar,NavigationView,DrawerLayout,DesignSupportLibrary]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[Toolbar - 1]]></title>
					<link>https://blog.naver.com/pistolcaffe/220636278396</link>
					<guid>https://blog.naver.com/pistolcaffe/220636278396</guid>
					<description><![CDATA[지금까지는 design support library 위주로 포스팅을 진행 하였습니다.CoordinatorLayout, AppbarLayout 등 아직 다뤄야할 내용이 남아있으나, 해당 내용들을 알아보기 전에 먼저 Toolbar 에 대하여 알아보겠습니다. Toolbar 는 안드로이드 5.0 버전에 도입 된 신규 widget 이며, support v7 에도 추가 되었습니다.구현하기에 따라 Bottom toolbar, Floating Toolbar 등으로 사용하거나 ActionBar 로써 사용 될 수도 있는 다재다능한 위젯 입니다.Actionbar 와 유사한 측면이 있지만, Actionbar 는 Activity 에서 사용가능하지만 Toolbar 는 ViewGroup 을 상속받고 있으며 일반 View 로써 사용될 수도 있습니다. Toolbar 에서는 하기와 같은 요소.......]]></description>
					<pubDate>Wed, 24 Feb 2016 00:45:36 +0900</pubDate>
					<tag><![CDATA[안드로이드,Android,DesignSupportLibrary,MaterialDesign,Toolbar,AppCompatActivity,supportLibrary]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android design support library - TabLayout]]></title>
					<link>https://blog.naver.com/pistolcaffe/220629248791</link>
					<guid>https://blog.naver.com/pistolcaffe/220629248791</guid>
					<description><![CDATA[이번 포스팅은 TabLayout 에 대한 내용입니다. 탭은 android 에서 앱의 최상위 탐색 수단 및 앱 내의 컨텐츠를 그룹화 할 수단으로 흔히 사용되고 있습니다. 디자인 라이브러리의 TabLayout 은 고정 탭을 지원합니다. 즉 각 뷰의 폭을 균등하게 나누어 탭을 배치하는 것입니다. 또한 탭 메뉴가 많아질경우 스크롤이 가능한 탭도 지원합니다. 이번 예제에서는 3개의 Fragment 을 갖는 ViewPager 를 추가하고 Tab 과 연동되어 동작시키는 예제로 진행 하겠습니다. 그럼, 사용법에 대해 알아보겠습니다.[Gradle Dependencies 추가]dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) testCompile 'junit:junit:4.12' compile 'com.a.......]]></description>
					<pubDate>Tue, 16 Feb 2016 23:56:36 +0900</pubDate>
					<tag><![CDATA[안드로이드,Android,DesignSupportLibrary,MaterialDesign,TabLayout]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android design support library - NavigationView]]></title>
					<link>https://blog.naver.com/pistolcaffe/220628110384</link>
					<guid>https://blog.naver.com/pistolcaffe/220628110384</guid>
					<description><![CDATA[이번 포스팅은 NavigationView 에 대해 알아보도록 하겠습니다. NavigationView 는 서랍방식의 창으로써 앱의 각 부분을 탐색할 수 있게 해줍니다. 이는 완벽히 스타일이 지정된 일종의 서랍이며, 헤더만 추가하면 프로그램 또는 메뉴 리소스 파일을 통해 탐색 메뉴를 구성 할 수 있습니다. NavigationView 는 일반적으로 DrawerLayout 안에 구현됩니다. 참고로 언급하자면, NavigationView 를 open/close 시키는 주체는 DrawerLayout 입니다. NavigationView 은 고유의 open/close 기능이 있는 것이 아니고, 단지 이러한 탐색창을 유용하게 구현 할 수 있도록 만들어진 VIew 입니다 이번 예제는 Github 의 cheesesquare 프로젝트를 참고하여 작.......]]></description>
					<pubDate>Mon, 15 Feb 2016 23:16:11 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,DesignSupportLibrary,MaterialDesign,NavigationView,DrawerLayout]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android design support library - TextInputLayout]]></title>
					<link>https://blog.naver.com/pistolcaffe/220626098602</link>
					<guid>https://blog.naver.com/pistolcaffe/220626098602</guid>
					<description><![CDATA[이번 포스팅은 TextInputLayout 에 대해 알아보도록 하겠습니다. TextInputLayout 은 텍스트 줄바꿈을 하고 편집하여 항상 화면에 나타나는 힌트 텍스트를 표시하며, setMaxLength 를 통해 입력 된 글자 수를 표시하거나 setError 메소드를 사용해 오류 텍스트를 간편하게 표시하는 용도로 사용할 수 있습니다. 이제 사용법에 대해 알아보겠습니다.[Gradle Dependencies 추가]dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) testCompile 'junit:junit:4.12' compile 'com.android.support:design:23.1.1' }compile 'com.android.support:design:23.1.1'design library gradle dependency 입니다. 이후, 해당 Activity 에서 A.......]]></description>
					<pubDate>Sat, 13 Feb 2016 21:55:02 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,DesignSupportLibrary,TextInputLayout]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android design support library - Snackbar]]></title>
					<link>https://blog.naver.com/pistolcaffe/220625388603</link>
					<guid>https://blog.naver.com/pistolcaffe/220625388603</guid>
					<description><![CDATA[이번 포스팅은 android design support library 에 포함 된 Snackbar 에 대해 소개하겠습니다. Snackbar 는 사용자에게 간단한 피드백을 제시할 때 유용합니다. Toast 메시지와 달리 Snacbar 는 UI의 인터랙티브 부분이므로 Snackbar 에 선택 작업을 추가하거나 사용자가 스와이프해서 스낵바를 없애도록 할 수 있습니다. 따라서 스낵바는 중요한 작업 중간중간에 유용하게 배치할 수 있습니다. 예컨대 실행취소 작업을 삽입하면 골칫거리를 줄이는 한편, 다이얼로그를 띄우는 것보다 훨씬 간편하게 작업 할 수 있습니다. 이제 사용법에 대해 알아보겠습니다.[Gradle Dependencies 추가]dependencies { compile fileTree(dir: 'libs', include: [.......]]></description>
					<pubDate>Sat, 13 Feb 2016 00:34:05 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,MaterialDesign,Snackbar]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[API]]></category>
					<title><![CDATA[android design support library - FloatingActionButton]]></title>
					<link>https://blog.naver.com/pistolcaffe/220624325972</link>
					<guid>https://blog.naver.com/pistolcaffe/220624325972</guid>
					<description><![CDATA[이번 포스팅은 android design support library 에 있는 FloatingActionButton 에 대해 살펴보고자 합니다. 이 작고 동그란 위젯은 머티리얼 디자인이 도입되면서, 흔히 볼수 있는 UI 입니다. FloatingActionButton 은 UI 의 주요 작업에 가장 적합합니다. 또한, 기본 크기 뿐만 아니라 작은 크기로도 제공 되므로 다른 요소와 어울려야 할 때 요긴하게 사용 될 수 있습니다. ImageButton 을 상속받고 있으며, 내부적으로 CircularBorderDrawable 을 통해 circle 형태로 나타내고 있습니다. 먼저, 사용법에 대해 간단히 알아보겠습니다. [Gradle Dependencies 추가]dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) testCompil.......]]></description>
					<pubDate>Fri, 12 Feb 2016 01:15:24 +0900</pubDate>
					<tag><![CDATA[android,안드로이드,FloatingActionButton,DesignSupportLibrary]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[기타]]></category>
					<title><![CDATA[안드로이드 Log 출력을 위한 Logger 클래스 작성하기]]></title>
					<link>https://blog.naver.com/pistolcaffe/220621617526</link>
					<guid>https://blog.naver.com/pistolcaffe/220621617526</guid>
					<description><![CDATA[안드로이드 개발 시 우리는 디버깅용이나 올바르게 구현이 되고 있는지 확인하기 위해 로그를 출력하여 확인합니다.스마트폰은 우리가 사용하지 않는 상태에서도 백그라운드 상의 수많은 코드가 동작하고 있습니다. [logcat 에서 확인 가능한 로그 메세지들] Log 는 개발자의 성향에 따라 다양하게 사용이 되고 있으나 보통 이 로그가 어떤 클래스의 어떤 메소드에서 호출되는지 확인하기 위해 관련 정보를 입력하기도 하고,코드의 라인수를 넣어 확인하기도 합니다. 또한, 디버그 버전에선 로그가 출력되게 하고 배포버전에선 로그가 출력되지 않도록 하기도 합니다.따라서 Log 를 좀더 효율적으로 사용할수 있도록 하기의 조건을 만족하는 Logg.......]]></description>
					<pubDate>Mon, 08 Feb 2016 20:18:17 +0900</pubDate>
					<tag><![CDATA[안드로이드,Android,Log,Logger,디버깅]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[기타]]></category>
					<title><![CDATA[Volley 라이브러리에 DiskLruCache 를 접목시켜 사용하기 - 2]]></title>
					<link>https://blog.naver.com/pistolcaffe/220611993889</link>
					<guid>https://blog.naver.com/pistolcaffe/220611993889</guid>
					<description><![CDATA[지난 포스팅에 이어 2부를 진행 하겠습니다. 4. DiskLruImageCache class 작성 실제 DiskLruCache 를 사용하여 캐시 작업이 이루어지는 class 입니다. (구글링을 통해 참고한 자료로 만들어진 예제 코드인데 출처가 기억이 나질 않네요.. 추후 업데이트 하도록 하겠습니다.) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141public class DiskLruImageCache.......]]></description>
					<pubDate>Fri, 29 Jan 2016 03:16:48 +0900</pubDate>
					<tag><![CDATA[Android,안드로이드,이미지캐시,ImageCache,Volley,DiskLruCache,LruCache,ImageLoader,NetworkImageView]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[기타]]></category>
					<title><![CDATA[Volley 라이브러리에 DiskLruCache 를 접목시켜 사용하기 - 1]]></title>
					<link>https://blog.naver.com/pistolcaffe/220611958664</link>
					<guid>https://blog.naver.com/pistolcaffe/220611958664</guid>
					<description><![CDATA[몇달전 SNS 형태의 앱을 개발하면서 적용해보았던 메모리 캐시 구조에 대하여 포스팅 하고자 합니다.기본적인 Cache 초기화 부분, 그리고 Volley 와의 연동, 마지막으로 CircleNetworkImageView Custom Widget 을 통한 예제를 가지고 포스팅 내용을 구성할 것입니다. 코드가 첨부됨으로 내용이 좀 길어질것 같아서 2부로 포스팅을 진행하겠습니다. 이 구조에서 사용 된 라이브러리는 Volley 와 Jakewharton 개발자의 DiskLruCache 라이브러리 입니다. Jakewharton-DiskLruCachehttps://github.com/JakeWharton/DiskLruCache 또한, 구조 적용에 있어서 참고 자료로 검토 하였던 예제 프로젝트 주소 입니다.실제로 설명할 예제코드의 상당수 부분이.......]]></description>
					<pubDate>Fri, 29 Jan 2016 01:41:48 +0900</pubDate>
					<tag><![CDATA[Android,안드로이드,이미지캐시,ImageCache,Volley,DiskLruCache,LruCache,ImageLoader,NetworkImageView]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[라이브러리 리뷰]]></category>
					<title><![CDATA[[Github] android-shape-imageview]]></title>
					<link>https://blog.naver.com/pistolcaffe/220607427672</link>
					<guid>https://blog.naver.com/pistolcaffe/220607427672</guid>
					<description><![CDATA[포스팅이 좀 늦어졌네요.이번 포스팅은 android-shape-imageview 에 대해 작성하고자 합니다. siyamed 라는 개발자가 개발한 이 라이브러리는 사진을 circle, roundrect, bubble, start 등등의 모양으로 나타내는 목적의 라이브러리 이며, 기본 모형 외에 다각형, 하트 등의 다양한 모형을 제공 합니다. 먼저, 라이브러리 github 주소 입니다.https://github.com/siyamed/android-shape-imageview 사용법에 대해 알아보도록 하죠.Gradle dependency:compile 'com.github.siyamed:android-shape-imageview:0.9.+@aar'Gradle dependency 입니다. 지원하는 shape 종류가 많은데, Bubble, Circle , Star 세 가지의 예제코드만 첨부하겠습니다.(해당 프.......]]></description>
					<pubDate>Sun, 24 Jan 2016 22:18:04 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,bitmap,CircleImageView,ShapeImageView,BitmapShader]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[라이브러리 개발]]></category>
					<title><![CDATA[[라이브러리 개발] PistolRecyclerView]]></title>
					<link>https://blog.naver.com/pistolcaffe/220589858849</link>
					<guid>https://blog.naver.com/pistolcaffe/220589858849</guid>
					<description><![CDATA[* 개발목적 개인의뢰를 받고 앱개발을 진행 하던중에, RecycleerView 를 사용해 리스트를 구성하고, 하단에 오른쪽, 왼쪽 버튼을 클릭 시 이전/다음 리스트가 보여지는 UI 를 작성하게 되었습니다. 만들어 놓고보니, 이와같은 UI 가 추후에도 많이 사용 되어질수 있겠다 생각이 들었고, 라이브러리화 하여 배포하자는 생각을 하게 되었습니다. * 구조 기본 RecyclerView 에 하단에 오른쪽/왼쪽 버튼과 페이지 인덱스 텍스트를 삽입한 View 를 가진 통합 View의 구조로 구성되어있습니다. * 주요기능 1. 하단 왼쪽/오른쪽 버튼 클릭 시 로딩 UI 제공 2. 하단 왼쪽/오른쪽 버튼 클릭 시 페이지 인덱스 변경 3. 기본 RecyclerView 는 public 하게 사.......]]></description>
					<pubDate>Wed, 06 Jan 2016 23:36:42 +0900</pubDate>
					<tag><![CDATA[안드로이드,android,RecyclerView]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[라이브러리 리뷰]]></category>
					<title><![CDATA[[GitHub] SmoothProgressBar 소개]]></title>
					<link>https://blog.naver.com/pistolcaffe/220580064418</link>
					<guid>https://blog.naver.com/pistolcaffe/220580064418</guid>
					<description><![CDATA[오늘은 안드로이드에서 로딩 UI 를 위해 사용 되는 ProgressBar 중에 Antonie Merle 라는 분이 개발하신 SmoothProgressBar 라이브러리에 대해 리뷰 하도록 하겠습니다. 먼저, SmoothProgressBar Github 페이지 입니다.https://github.com/castorflex/SmoothProgressBar 그럼, 사용법에 대해 알아볼까요? SmoothProgressBar 와 CircularProgressBar 두가지의 기능을 지원 하고 있고,SmoothProgressBar 는 API 7 (android 2.1 Eclair) 이상,CircularProgressBar 는 API 14 (android 4.0 Ice Cream Sandwich) 이상 사용 가능 합니다. 라이브러리 사용을 위해 Gradle 에 하기 값을 추가 해야 합니다 해당 라이브러리 GitHub 페이지에 가보니,compile.......]]></description>
					<pubDate>Sun, 27 Dec 2015 19:37:09 +0900</pubDate>
					<tag><![CDATA[Android,안드로이드,Progressbar,SmoothProgressBar]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[자료구조]]></category>
					<title><![CDATA[[자료구조-JAVA] 스택 구현하기]]></title>
					<link>https://blog.naver.com/pistolcaffe/220579926479</link>
					<guid>https://blog.naver.com/pistolcaffe/220579926479</guid>
					<description><![CDATA[스택을 구현하는 방법은 동적배열과 연결리스트 두가지가 있는데, 통상적으로 동적배열이 연결리스트에 비해 빠른편이라고 하며, 구현의 용이성은 연결리스트가 편한 것 같다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.util.Iterator;import java.util.NoSuchElementException; public class SDStack implements Iterable { private Node mLastNode; private int mSize = 0; public void push(Object value) { Node newNode = new Node(value); Node oldLast = mLastNode; mLastNode = newNode; if (mSize &gt; 0) { mLas.......]]></description>
					<pubDate>Sun, 27 Dec 2015 16:21:26 +0900</pubDate>
					<tag><![CDATA[자료구조,스택,Stack,JAVA,자바]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[라이브러리 리뷰]]></category>
					<title><![CDATA[Github 라이브러리 리뷰 게시판 입니다.]]></title>
					<link>https://blog.naver.com/pistolcaffe/220579509204</link>
					<guid>https://blog.naver.com/pistolcaffe/220579509204</guid>
					<description><![CDATA[안드로이드를 5년 째 개발해오면서 이런저런 라이브러리를 접할 수 있었습니다. 특정 라이브러리들은 프로젝트 시 반드시 사용 할 정도로 빈번히 사용하고 있으며, 개발에 많은 효율을 가져다 주고 있습니다. 제가 접한 라이브러리들이 갯수로 따지면 많은 편은 아니지만, 유용하다 생각했던 라이브러리를 하나씩 리뷰 하여 여러분들께 공유 드리고자 합니다. 꼭 Github 에 올라온 라이브러리 외에, 기타 안드로이드 개발 시 유용하다 생각되는 라이브러리가 있으면 리뷰 하도록 하겠습니다. 많이 기대해주세요!]]></description>
					<pubDate>Sat, 26 Dec 2015 23:19:57 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>pistolcaffe</author>
					<category><![CDATA[자료구조]]></category>
					<title><![CDATA[[자료구조-JAVA] 연결리스트 구현하기]]></title>
					<link>https://blog.naver.com/pistolcaffe/220579505034</link>
					<guid>https://blog.naver.com/pistolcaffe/220579505034</guid>
					<description><![CDATA[연결리스트 구현시 주의할점은, Head 와 다음노드의 갱신 이다.그 외에 연결리스트 개념에 대해 실제 구현은 크게 어려움은 없었다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137public class SDLinkedList { private Node mHead, mTail; private int mSize = 0; public void addFirst(Object value) { if (value == null) throw new NullPointerException(); if (m.......]]></description>
					<pubDate>Sat, 26 Dec 2015 23:14:16 +0900</pubDate>
					<tag><![CDATA[첫글,자료구조,연결리스트,LinkedList]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
