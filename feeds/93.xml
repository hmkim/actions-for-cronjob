<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 김덕주 on Medium]]></title>
        <description><![CDATA[Stories by 김덕주 on Medium]]></description>
        <link>https://medium.com/@darkzeus86?source=rss-45ce953e23b6------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*TFlPQyzz-1nik4VZ.</url>
            <title>Stories by 김덕주 on Medium</title>
            <link>https://medium.com/@darkzeus86?source=rss-45ce953e23b6------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 22:11:46 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@darkzeus86" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[함수형 프로그래밍 번역(진행중)]]></title>
            <link>https://medium.com/@darkzeus86/%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%98%A4%EB%8A%98%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%EC%9D%B4%EC%95%BC-%EB%82%B4%EA%BF%88%EC%9D%80-%EB%82%B4%EA%BF%88%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%AC%ED%96%89-%EB%8D%95%EC%B9%B4%EC%B8%84-62dfa9e7f60c?source=rss-45ce953e23b6------2</link>
            <guid isPermaLink="false">https://medium.com/p/62dfa9e7f60c</guid>
            <category><![CDATA[translate-to-korean]]></category>
            <dc:creator><![CDATA[김덕주]]></dc:creator>
            <pubDate>Sat, 19 Aug 2017 15:34:50 GMT</pubDate>
            <atom:updated>2017-08-20T12:50:01.532Z</atom:updated>
            <content:encoded><![CDATA[<p>Functional Programming in Java 8 (Part 0): Motivation<br>자바8의 함수형 프로그래밍 : 동기부여</p><p>As I’ve seen in my previous post, the interest in functional programming is high.<br>나의 이전 포스트를 보았다면, 함수형 프로그래밍이 많이 흥미로롭다.<br>This is the reason I want to write an introduction about it.<br>나는 함수형 프로그래밍에 관하여 소개하고픈 이유다.<br>I work a lot in Haskell and Java in my free time.<br>나는 나의 여유시간에 자바와 하스켈로 많이 사용(일)을 한다.<br>The idea to combine both of these languages in Java was a dream come true. <br>하스켈과 자바이 둘다 합쳐진 아이디어가 자바에서 실현되었다.<br>After this introduction, I hope you will feel the same.<br>이소개 이후에 나는 너가 어떠한것을 느끼길 바란다.</p><p>What is functional programming, really?<br>무엇이 정말로 함수형 프로그래밍일까?</p><p>You might have heared about functional programming (fP) and how great it is to reduce your LOC and to enhance the readability of your code. <br>너는 함수형 프로그래밍에 대해서 들어봤을것이다. 함수형 프로그래밍이 어떤식으로 너의 LOc을 많이 줄일 수 있는지 그리고 너의 코드를 읽기 쉽게 만들 수 있는지<br>But what does it really mean to program functional and what are the main differences to OOP?<br>그러나 함수형 프로그래밍이 정말 의미하는것이 무엇일까? 그리고 객체지향 패턴과 가장 다른점이 무엇일까?</p><ol><li>All variables are final<br>1. 모든 변수들은 상수다.</li></ol><pre>public String greet(List&lt;String&gt; names) {<br>    String greeting = &quot;Welcome &quot;;<br>    for(String name : names) {<br>        greeting += name + &quot; &quot;; // We don&#39;t care about the last space right now.<br>    }<br>    greeting += &quot;!&quot;;<br>    return greeting;<br>}</pre><p>This is a perfectly valid function to create such a greet String in Java.<br>이것은 자바에서 이러한 환영 문자열을 만들기 위한 완벽한 유효한 함수이다.<br>But if you you are fP, this won’t work.<br>그러나 너가 함수형 프로그래밍이라면, 이렇게 하지 않았다.<br>You change the state of greeting, which is not allowed in fP.<br>너는 환영인사의 상태를 변경하는걸 함수형 프로그래밍은 허락하지 않는다.<br>So if you try to make greeting final, you would get an error. Every time you use += with that String, you change its state.<br>그리고 만약에 너가 최종 인삿말을 만들때 너는 에러를 보게 될것이다. 너는 매번 문자열 타입에 += 연산자를 함께 사용 한다. 너는 이것의 상태를 변경한다.<br>What you basically do in fP is the concatination of all names in one line into one String.<br>너가 함수형 프로그래밍에서 근복적으로 하려는것은 모든 이름들을 문자열 타입 안에 한줄로 연결 하는거다.</p><pre>public String greet(List&lt;String&gt; names) {<br>    final String reducedString = &quot;Welcome &quot; + names.get(0) + &quot; &quot; + names.get(1) + &quot; &quot; + ...<br>            + names.get(names.size()-1) + &quot; &quot;;<br>    return reducedString + &quot;!&quot;;<br>}</pre><p>If you think that this looks nasty, you’re right! But there is a fP function to make this nicer.<br>만약 너의 생각에 이게 좋지 않게 보여진다면, 너가 맞아!. 그러나 함수형 메서드는 이걸 멋지게 만든다.</p><p>I will give you the right fP function here. Don’t worry if you don’t understand it now, we will talk about all of this in part 3<br>나는 너에게 여기있는 옳바른 함수형 프로그램을 알려주겠다. 걱정마 너가 지금 이해하지 못하더라도, 우리는 이부분에 대한 전체를 3파트에서 이야기 할것이다.<br>The good think about final variables is that their value is always the same.<br>최종 변수들에 대한 좋은 생각은 그들의 값이 항상 같다라는것이다.<br>This makes debugging and testing so much easier!<br>이처럼 디버깅과 쉽게 테스트 할 수 있게 만든다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=62dfa9e7f60c" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>