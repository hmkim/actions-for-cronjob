<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://seryuncheon.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://seryuncheon.github.io//" rel="alternate" type="text/html" /><updated>2019-03-06T18:59:25+00:00</updated><id>https://seryuncheon.github.io//feed.xml</id><title type="html">👩🏻‍💻 Seryun Cheon</title><subtitle>Junior Web Developer</subtitle><entry><title type="html">Node.js강의 -4. Node.js의 기본 모듈3</title><link href="https://seryuncheon.github.io//Nodejs_4/" rel="alternate" type="text/html" title="Node.js강의 -4. Node.js의 기본 모듈3" /><published>2019-03-07T00:00:00+00:00</published><updated>2019-03-07T00:00:00+00:00</updated><id>https://seryuncheon.github.io//Nodejs_4</id><content type="html" xml:base="https://seryuncheon.github.io//Nodejs_4/">&lt;h2 id=&quot;학습목표&quot;&gt;학습목표&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.스트림에서 이벤트와 데이터를 다룰 수 있습니다.
2.URL 모듈로 URL을 분석하고 생성할 수 있습니다.
3.querystring 모듈로 쿼리 문자열을 다룰 수 있습니다.
4.클러스터 모듈을 이용해서 클러스터링의 장점을 활용할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;스트림&quot;&gt;스트림&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;스트림: 데이터의 전송 흐름임(데이터 입력 부분과 출력 부분사이의 흐름~~~)
    &lt;ul&gt;
      &lt;li&gt;콘솔 입출력, 파일 읽기쓰기, 서버/클라이언트끼리의 데이터전송에 쓰임&lt;/li&gt;
      &lt;li&gt;스트림모듈은 이러한 위의 기능들을 가능하게 하는 추상인터페이스임 이걸 이용해서 잘 쓰면 됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스트림종류
    &lt;ul&gt;
      &lt;li&gt;읽기 스트림 : Readable Stream&lt;/li&gt;
      &lt;li&gt;쓰기 스트림 : Writable Stream&lt;/li&gt;
      &lt;li&gt;읽기/쓰기 : Duplex&lt;/li&gt;
      &lt;li&gt;변환 : Transform&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Node.js" /><summary type="html">기본모듈, 파일을다루는 path,fs모듈, 이진데이터를 다루는 버퍼모듈 사용 및 예제</summary></entry><entry><title type="html">Node.js강의 -3. Node.js의 기본 모듈2</title><link href="https://seryuncheon.github.io//Nodejs_3/" rel="alternate" type="text/html" title="Node.js강의 -3. Node.js의 기본 모듈2" /><published>2019-03-06T00:00:00+00:00</published><updated>2019-03-06T00:00:00+00:00</updated><id>https://seryuncheon.github.io//Nodejs_3</id><content type="html" xml:base="https://seryuncheon.github.io//Nodejs_3/">&lt;h1 id=&quot;이번강의-학습목표&quot;&gt;이번강의~ 학습목표~~~&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.자주 사용하는 기본 모듈에 대해서 알 수 있습니다.
2.파일을 다루기 위해 path, fs 모듈을 사용할 수 있습니다.
3.이진 데이터를 다루는 버퍼 모듈을 사용할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p style=&quot;text-align:center&quot;&gt; 강의 스타토.&lt;/p&gt;

&lt;h1 id=&quot;1경로다루기&quot;&gt;1.경로다루기&lt;/h1&gt;

&lt;h3 id=&quot;경로를-다루는모듈은-path라는-모듈임-아래와-같이-모듈로딩해줌&quot;&gt;경로를 다루는모듈은 ‘path’라는 모듈임. 아래와 같이 모듈로딩해줌.&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var pathUtil = require(‘path’);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;경로를 다루기 전에 가장 먼저 ‘현재 실행하고 있는 파일의 경로’ 와 ‘폴더의 경로’를 알아야함&lt;/li&gt;
  &lt;li&gt;‘__filename’ ‘ __dirname’ 이 두개의 전역객체로 파악 가능.&lt;/li&gt;
  &lt;li&gt;같은 폴더 내 이미지 경로는, &lt;code class=&quot;highlighter-rouge&quot;&gt;var path = __dirname + '/image.png';&lt;/code&gt; 이렇게 파악&lt;/li&gt;
  &lt;li&gt;경로를 다듬는 함수: &lt;code class=&quot;highlighter-rouge&quot;&gt;path.nomalize()&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;pathUtil.normalize(‘/user/tmp/../local///bin/');&lt;/code&gt; 이렇게 해주면 `		/user/local/bin/`이렇게 깔끔해진 경로를 return해 줌&lt;/li&gt;
  &lt;li&gt;경로를 구성할 시, ‘..’ 이건 부모 폴더 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;점 한 번은 같은 폴더&lt;/li&gt;
  &lt;li&gt;경로 구성요소얻는 방법은,&lt;/li&gt;
  &lt;li&gt;path.basename() : 파일 이름, 경로 중 마지막 요소&lt;/li&gt;
  &lt;li&gt;path.dirname() : 파일이 포함된 폴더 경로&lt;/li&gt;
  &lt;li&gt;path.extname() : 확장자
  -예제코드~~
    &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                var path = '/foo/bar/baz/asdf/quux.html';		
                pathUtil.dirname(path); // 결과값: /foo/bar/baz/asdf
                pathUtil.basename(path); // 결과값: quux.html	
                pathUtil.extname(path); // 결과값: .html
    &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;그리고 구지 위처럼 안하고 ‘parse’라는 함수 이용해서 객체에 담아서 쉽게 해당 정보 빼내 올 수 있음. 어떻게? 아래와 같이.
               &lt;code class=&quot;highlighter-rouge&quot;&gt;var info = path.parse('/home/user/dir/file.txt')&lt;/code&gt;
 &lt;br /&gt;이렇게 하면, 아래와같은 정보가 그 객체에 담겨지게 됨.&lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
               {
                root : &quot;/&quot;,
                dir : &quot;/home/user/dir&quot;,
                base : &quot;file.txt&quot;,
                ext : &quot;.txt&quot;,
                name : &quot;file&quot;
                }
     &lt;/code&gt;
 그래서, 객체에서 바로 정보 얻기 가능(ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;info.base나 info.name&lt;/code&gt;이렇게)&lt;/li&gt;
  &lt;li&gt;경로 만드는 함수는.&lt;/li&gt;
  &lt;li&gt;pathUtil.sep 이용법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname +pathUtil.sep + ‘image.png';&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;pathUtil.join() 이용법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;pathUtil.join('/foo', 'bar', 'baz/asdf', 'quux', '..')&lt;/code&gt; 이렇게 하면 리턴값으로  ‘/foo/bar/baz/asdf’ 를 뱉어냄.&lt;/li&gt;
  &lt;li&gt;pathUtil.format()&lt;/li&gt;
  &lt;li&gt;예제~~~
  &lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53786399-fc11a000-3f5e-11e9-8197-1d65421d6348.JPG&quot; alt=&quot;node_8&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2파일시스템-다루기&quot;&gt;2.파일시스템 다루기&lt;/h1&gt;

&lt;h3 id=&quot;파일시스템-다루기&quot;&gt;파일시스템 다루기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;앞전 강의에서부터 이미 디뤘지만, fs모듈을 로딩하는거는 역시 require함수로 모듈로딩해서 객체화시켜야함 &lt;code class=&quot;highlighter-rouge&quot;&gt;var fs = requitre('fs);&lt;/code&gt; 이렇게.&lt;/li&gt;
  &lt;li&gt;주요기능은,&lt;/li&gt;
  &lt;li&gt;파일 생성/읽기/쓰기/삭제&lt;/li&gt;
  &lt;li&gt;파일 접근성/속성&lt;/li&gt;
  &lt;li&gt;디렉토리 생성/읽기/삭제&lt;/li&gt;
  &lt;li&gt;파일 스트림&lt;/li&gt;
  &lt;li&gt;fs모듈은 좀 그 기능적 특징이 특이하다함(강사님 말로는,,,). 왜냐 비동기,동기 방식 함수 모두제공하기 때문,,,&lt;/li&gt;
  &lt;li&gt;비동기식함수는: callback사용하고, non-block 방식임. 즉 실행이 끝날 때 까지 기다리지 않취.&lt;/li&gt;
  &lt;li&gt;비동기식 API 사용방법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'textfile.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;비동기식 API 에러 처리 방법 :콜백 함수의 에러 파라미터 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                        &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'none_exist.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Readfile error '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// 정상 처리&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;동기식함수는: 이름끝이sync로 끝나고, 블록방식이고, 반환값을 이용함.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동기식 API 사용방법&lt;/p&gt;

    &lt;pre&gt;&lt;code class=&quot;language-javascriptjavascript&quot;&gt;        fs.readFile('textfile.txt', 'utf8', function(error, data)
        {
                       });
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;동기식 API 에러 처리 방법 :try~catch 사용
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'none_exist.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Readfile Error : '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;파일시스템-다루기-1&quot;&gt;파일시스템 다루기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파일은 파일디스크립터 &amp;amp; 파일경로로 다룰 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53879674-5e979880-4052-11e9-9661-71cb5bcfa349.JPG&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FileDescription으로 파일 다루기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 fs.read(fd, buffer, offset, length, position, callback)
                 fs.readSync(fd, buffer, offset, length, position)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일디스크립션 얻기:  ‘open’ 함수 사용~&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;저기서 안에 들어가는 플래그는 다양한 종류가 있는데 이따가 예제를 통해 좀더 알아볼거임. 일단 r은 읽기 w는 쓰기 a는 추가라는 것만 기억해두!  read, write, add의 약어인듯 아마도?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일닫는거는, ‘fs.close(fd,callback)’, ‘fs.closeSync(fd)’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 경로로 파일 다루기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   fs.readFile(filename[, options], callback)
                     fs.readFileSync(filename[, options])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;파일 내용 읽기는 아래와같은 함수들 사용~ 그때 그때 알맞게
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  	  fs.read(fd, buffer, offset, length, position, callback)
     fs.readFile(filename[, options], callback)
     fs.readFileSync(filename[, options])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;파일종류별로 얻어지는 데이터가 다른데, 문자열을 읽을 때는 인코딩 정보를 이용해서 읽고 바이너리코드면 ‘buffer’를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;파일-읽기-예제&quot;&gt;파일 읽기 예제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기 예제 - ‘동기’식으로 파일디스크립터를 사용시!&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
                 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 동기니까 끝에 synce가붙어있음. 오픈함수로 파일디스크립션 얻기. 두번쨰 파라미터인 플래그에 r = read를 뜻함 즉 파일 읽겠단 소리~~&lt;/span&gt;
                 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 버퍼 뉴연산자로 생성해서 10바이트 크기의 객체 생성&lt;/span&gt;

                 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//뭔뜻이냐면,  fd를 아까 생성한 10바이트 크기의 버퍼객체에 담아준다라는 뜻임&lt;/span&gt;
                 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'File Contenst:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'utf-8));

                 fs.closeSync(fd); //파일 디스크립터 닫기~
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기 예제 ‘비동기’식으로 파일디스크립터를 사용시!&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;epen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 콜백함수 시작&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fd2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;byteRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;//파일의 0번쨰부터 20바이트만큼 읽겠단 소리임&lt;/span&gt;
                          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'File Read'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;byteRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bytes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'File Content:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                         &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;자보면, 알겠지만 동기식은  return값으로 처리, 비동기는 callback함수로 처리한다는거 차이점 알겠지??&lt;/li&gt;
  &lt;li&gt;파일디스크립터말고, ‘파일경로’이용해서 파일읽기를 ARABOZA&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기 예제 - ‘동기’식으로 파일경로이용
   ```javascript
                     console.log(‘File Reading, with Encoding’);
                     var data = fs.readFileSync(file ‘utf-8’);//파일 읽기, 인코딩
                     console.log(date);&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 var imageData = fs.readFileSync('./image.jpg');//바이너리 파일 읽기
                 console.log('Read Image File');
                 console.log(imageData);
             ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기 예제 - ‘비동기’식으로 파일경로이용
   ```javascript
                     fs.readFile(file, ‘UTF-8’, function(err, data){
                      if(err){
                       console.error(‘File Read Error:’, err); 
                       return;
                      }&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                  conol.log('Read Text File, UTF-8 Encoding');
                  console.log(data);

                 })

             ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한눈에 정리~~
   ```javascript
                      var fs = require(‘fs’);&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 // 동기식
                 try {
                    var data = fs.readFileSync('none_exist.txt', 'utf-8');
                 }
                 catch ( exception ) {
                    console.error('Readfile Error : ', exception);
                 }

                 // 비동기식
                 fs.readFile('none_exist.txt', 'utf-8', function(err, data) {
                     if ( err ) {
                         console.error('Readfile error ', err);
                     }
                     else {
                         // 정상 처리        
                     }   
                 });


                 console.log('에러가 발생해도, 애플리케이션이 크래쉬되지 않고 동작한다.');
             ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fs모듈에는 파이리 상태를 확이해서 에러를 다뤄주는 함수들도 있음 그거 알아볼거임~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파일존재 확인하는 함수
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fs.access(Sync)
fs.stat(Sync)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;사용방법을 ARABOZA
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 비동기&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//동기&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저 모드라는건 아래와 같은 기능을 쓰려고 사용됨&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fs.F_OK: 존재확인용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;fs.R_OK, W_OK, X_OK: 읽기 쓰기 실행여부호가인용 ( &lt;del&gt;새삼 함수이름 되게 직관적으로 지었다는 생각이 든다 ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ 오키오키 ㅋㅋㅋ&lt;/del&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;‘동기’식코드로 파일 접근 여부를 확인하는 코드 예제 알아보자~
   &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                    try{
                    fs.acessSync(file, fs.F_OK)
                    console.log('파일 접근 가능ㅇㅋ');
                    var data = fs.readFileSync(file, 'utf-8');
                    console.log('파일내용:', data);    
                    }
                    catch( exception){
                    //파일이 없으면~
                    console.log('no FIle!', exception);
                    }
                 &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;‘비동기’식코드로 파일 접근 여부를 확인하는 코드 예제 알아보자~
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                    &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;F_OK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                      &lt;span class=&quot;c1&quot;&gt;//에러처리 코드 쓰셈~~&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                      &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                       &lt;span class=&quot;c1&quot;&gt;//에러 처리!~~&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;자 이때까지 우리는 access함수를 이용해서 비동기,동기로 파일접근여부 확인하고 에러 처리 하는거 알아봤음. 아까 내가 위에서 언급한 stat도 똑같이 비동기,동기로 파일다루는거 가능~~!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;똑같이, 파일 상태 얻는거는 아래와 같은 방법으로 얻음
               &lt;code class=&quot;highlighter-rouge&quot;&gt;
                fs.stat(path, callback)// 콜백함수 있으니까 당연히 모다? 비동기식이다~
                fs.statSync(path) // 이름( Sync)애서 부터 알 수 있는 동기식 스멜.
              &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;암튼 저렇게 stat함수 이용해서 얻어낸 객체에서는 파일 디렉터리여부, 파일크기, 생성일/접근일/수정일등의 정보 얻어내기가 가능~~~~ 아래의 예제로 ARABOZA&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stat으로 파일상태확인 : ‘동기’ -동기의 에러잡는법은 역시 트라이캐치문 이용합니다~
  &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                    try{
                        var stats = fs.statSync(file)
                        console.log('Create : ', stats.birthtime);
                        console.log('size : ', stats.size);
                        console.log('isFile : ', stats.isFile());
                        console.log('isDirectory : ', stats.isDirectory());
                    }
                    catch ( err ) {
                        console.error(‘파일 접근 에러', err);
                        }
             &lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;stat으로 파일상태확인 : 비동기’ -비동기는 역시 콜백함수.
   &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                    fs.stat(file, finction(err,stats){
                        if(err){
                        conole.error('File Stats Error', err);
                        return;
                       }
                        console.log('Create : ', stats.birthtime);
                        console.log('size : ', stats.size);
                        console.log('isFile : ', stats.isFile());
                        console.log('isDirectory : ', stats.isDirectory());
                    }
               &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 상태 확인 후 읽기.
  &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                fs.stat(path, function(err, stats){
                  if(stats.isFile()){
                    fs.readFile(path, 'utf-8', function(err, data){
                      console.log('파일 읽기:', data);
                    })
                  }
                })
           &lt;/code&gt;
자 다시한번 파일 읽기에서 사용하는것들을 한 눈에 정리하면 아래와같음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기, 동기~~&lt;/p&gt;

    &lt;p&gt;```javascript
                          var fs = require(‘fs’);&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 var file = 'helloWorld.txt';

                 try {
                    fs.accessSync(file, fs.F_OK)
                    console.log('파일 존재');
                 }
                 catch ( err ) {
                    // 파일이 없을 때, 종료   
                    console.log('파일 존재하지 않음');
                    process.exit(1);   
                 }
                 // 파일에 내용 읽기
                 try {
                    var stats = fs.statSync(file)
                    // console.log(stats);
                    console.log('Create : ', stats['birthtime']);
                    console.log('size : ', stats['size']);
                    console.log('isFile : ', stats.isFile());
                    console.log('isDirectory : ', stats.isDirectory());
                    console.log('isBlockDevice : ', stats.isBlockDevice());

                    // 파일 읽기
                    if ( stats.isFile() ) {
                       var data = fs.readFileSync(file, 'utf-8');
                       console.log('File Contents : ', data);
                    }
                 }
                 catch ( err ) {
                    console.error('File Error : ', err);
                 }
            ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 읽기, 비동기~~&lt;/p&gt;

    &lt;p&gt;```javascript
                 var fs = require(‘fs’);&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;             var file = 'helloWorld.txt';

             fs.access(file, fs.F_OK, function(err) {
                if ( err ) {
                   console.log('파일 없음');
                   process.exit(1);      
                }
                else {
                   console.log('파일 존재');

                   fs.stat(file, function(err, stats) {
                      if ( err ) {
                         console.error('File Stats Error', err);
                         return;
                      }

                      console.log('Create : ', stats['birthtime']);
                      console.log('size : ', stats['size']);
                      console.log('isFile : ', stats.isFile());
                      console.log('isDirectory : ', stats.isDirectory());
                      console.log('isBlockDevice : ', stats.isBlockDevice());

                      if ( stats.isFile() ) {
                         fs.readFile(file, function(err, data) {
                            if ( err ) {
                               console.error('File Read Error', err);
                               return;
                            }
                            // encoding을 작성하지 않으면 Buffer로
                            var str = data.toString('utf-8');
                            console.log('File Contents : ', str);
                         });               
                      }      
                   });         
                }   
             });


		```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#### 파일에 저장&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파일에 데이터 저장하는 방법은 아래와 같음.&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                         fs.write(fd, data[, position[, encoding]], callback)
                         fs.writeFile(filename, data[, options], callback)
                         fs.writeFileSync(filename, data[, options])
    ```

* fd, filename에는 파일 디스크립터, 파일경로를,  data에는 집어넣으려는 문자열 혹은 바이너리라면 Bufffer를, encoding에는 문자열 저장시 의 인코딩 정보를 셋팅해주면됨 ㅇㅇ
* 예제를 통해 알아보자.

   ```javascript
                             fs.writeFile('./textData.txt', 'Hello World', function(err) {
                                 if ( err ) {
                                     console.error('파일 저장 실패 : ', err);
                                     return;
                                 }
                             console.log('파일 저장 성공');
                             });
    ```

 - 이외에도 기존파일에 내용을 추가하는 'appendFile'함수, 파일을 삭제하는 'unlink'함수,  파일이름을 변경하고이동하는 'rename'함수등이 있다. 모두 함수명끝에 Sync를 덧 붙이면 동기고 없으면 비동기다. 비동기 동기의 에러처리 방법들은 앞서 살펴본 것과 거의 그 형태가 같다.(들어가는 파라미터등이 좀 다를 뿐. 그건 그 때 그때 필요할떄 문서 보고 찾아서 쓰면됨,) 여기서 주목할 것은 ==비동기는 역시 콜백, 동기는 트라이캣치==를 사용한다는 것(트라이 캣치구문은 자바에서는 자동생성 권유가 되는데 자바스크립트에서도 그런지 아직 웹앱을 만들어보지 않아서 알수없다
 - 역시 파일 스트림 만드는 api도 있는디, 아래와 같다.&amp;lt;br&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                 fs.createReadStream(path[, options])
                 fs.createWriteStream(path[, options])    ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3버퍼드뎌-버퍼&quot;&gt;3.버퍼(드뎌 버퍼….)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;잘 아시다시피, javascript 언어는 문자열을 다루는 기능은 만흐나 ‘바이너리데이터’를 다루는 기능이 없음 그래서 ‘Buffer’라는 모듈을 이용해서(글로벌 이라 모듈로딩 필요 ㄴㄴ) 바이너리 파일 읽음&lt;/li&gt;
  &lt;li&gt;버퍼 얻어오는 방법은 아래의 두가지!
   &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript
                          파일에서 읽기
                     var fileBuffer = fs.readFileSync(‘image.jpg');
                     네트워크에서 얻기
                     socket.on(‘data’, function(data) {
                     // data - buffer
                     });
          &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;내가 새로  버퍼를 생성할 때는 아래와 같이 만드는데, 생성후 크기 변경 불가함 ㅇㅇ.
         &lt;code class=&quot;highlighter-rouge&quot;&gt;
         	    new Buffer(size)
                 new Buffer(array)
                 new Buffer(str[, encoding])
        &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;버퍼에서 제공하는 ‘모듈함수’들은 아래와 같음~~
    &lt;ul&gt;
      &lt;li&gt;바이트 길이 - &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer.byteLength(string[, encoding])&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;비교 - &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer.compare(buf1, buf2)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;붙이기 - &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer.concat(list[, totalLength])&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;버퍼 확인 - &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer.isBuffer(obj)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;인코딩 - &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer.isEncoding(encoding)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그리고 이런 버퍼를 ‘객체’에담아 사용하면 아래와 같은 기능 사용가능.
    &lt;ul&gt;
      &lt;li&gt;길이 - &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer.length&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;채우기 - &lt;code class=&quot;highlighter-rouge&quot;&gt;buf.fill(value[, offset][, end])&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;자르기 - &lt;code class=&quot;highlighter-rouge&quot;&gt;buf.slice([start[, end]])&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;비교하기 - &lt;code class=&quot;highlighter-rouge&quot;&gt;buf.compare(otherBuffer)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;복사하기 - &lt;code class=&quot;highlighter-rouge&quot;&gt;buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제코드로 알아보장&lt;/p&gt;

    &lt;p&gt;```javascript
              			console.log(‘engian : ‘, require(‘os’).endianness());&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            		 var buffer = new Buffer(6);

            		 buffer.writeInt8(1, 0); // 01
            		 buffer.writeUInt8(0xFF, 1); // FF
            		 buffer.writeUInt16LE(0xFF, 2); // FF 00
             		buffer.writeUInt16BE(0xFF, 4); // 00 FF

             		console.log('HEX : ', buffer.toString('hex'));

             		console.log(buffer.readInt8(0)); // 1
             		console.log(buffer.readUInt8(1)); // 255
             		console.log(buffer.readUInt16LE(2)); // 255
             		console.log(buffer.readUInt16BE(4)); // 255

                 ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
오늘 배운거 정리해보잡. 우리 오늘 뭐 배웠나용, 아래를 배움. 물론 지금 당장 외워서 다 쓸 수 없겠지만 어차피 프로젝트하면서 자연스럽게 타이핑 무진장하며 익숙해질 것이고, 오늘은 개념 및 그 활용법만 간단히 새겨 가장 ㅇㅇ. 암튼 이걸 배움 우리는 오늘.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;경로 다루기&lt;/strong&gt;
파일이나 디렉토리를 다루려면 경로를 먼저 알아야 했습니다.
경로 모듈을 이용해서 경로 정보를 상세하게 얻어낼 수 있었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;파일 시스템&lt;/strong&gt;
파일 시스템 모듈을 이용해서 파일과 디렉토리를 다룰 수 있었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;버퍼&lt;/strong&gt;
2진 데이터를 다루는 타입인 버퍼를 사용해 봤습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Node.js" /><summary type="html">기본모듈, 파일을다루는 path,fs모듈, 이진데이터를 다루는 버퍼모듈 사용 및 예제</summary></entry><entry><title type="html">이번 주에 읽은 ARTICLE - 30 Things About Life Everyone Should Learn Before Turning 30</title><link href="https://seryuncheon.github.io//30-things-about-life-everyone-should-learn-before-turning-30/" rel="alternate" type="text/html" title="이번 주에 읽은 ARTICLE - 30 Things About Life Everyone Should Learn Before Turning 30" /><published>2019-03-06T00:00:00+00:00</published><updated>2019-03-06T00:00:00+00:00</updated><id>https://seryuncheon.github.io//30-things-about-life-everyone-should-learn-before-turning-30</id><content type="html" xml:base="https://seryuncheon.github.io//30-things-about-life-everyone-should-learn-before-turning-30/">&lt;p&gt;&lt;a href=&quot;https://artplusmarketing.com/30-things-about-life-everyone-should-learn-before-turning-30-eb58162e0b72&quot;&gt;출처: ART+Marketing웹사이트&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2560/1*xdnYrZjSKEpITsRO5ETB_Q.jpeg&quot; alt=&quot;source&quot; /&gt;&lt;/p&gt;
&lt;style&gt;
div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 10px;}
&lt;/style&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Life is full of lessons. Some lessons are learned in an instant — like when you touch a hot stove. Others take time to fully understand — for example, what it truly means to be in love. But regardless of the size of the lesson, there are 30 important ones everyone should know before exiting young adulthood and entering the next phase of their life.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;self-development&quot;&gt;Self-development&lt;/h2&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your habits can make or break you.&lt;/strong&gt; Every action is a brick, meaning it’s what you do on a daily basis that determines the house you end up with. You are the house you build.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You are what you read.&lt;/strong&gt; If your body is a reflection of what you eat, then your mind is a reflection of what you read and study. Fill it with good stuff — not candy, like social media.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You cannot compare your path with anyone else’s.&lt;/strong&gt; We each have our own struggles, and we each have our own triumphs. Your path is your path for a reason. Pay attention to the lessons meant for you and you only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your inner circle is your “dream team.”&lt;/strong&gt; If you surround yourself with negative people, your dream will die. If you surround yourself with positive and driven people, your dream will thrive. It’s on you to build your “dream team” accordingly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your life is a reflection of how well you know yourself.&lt;/strong&gt; It always comes back to self-awareness. The more willing you are to address your fears, shortcomings, and points of conflict, the more self-awareness you will have and the happier you will be.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;productivity&quot;&gt;Productivity&lt;/h2&gt;
&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How you invest your time is a reflection of how you invest your money.&lt;/strong&gt; The smart and wealthy know the value of their time. They see each minute, hour, day, week, month, and so on as an opportunity to invest wisely in themselves. You must do the same.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;To be productive, you have to remove distractions.&lt;/strong&gt; Productivity is not about multitasking. It’s actually the opposite. It’s about trying to do less, so that you can ultimately do more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;If you aren’t getting done what needs to get done, there is a fear.&lt;/strong&gt;  We avoid the things we don’t want to do — or worse, wonder if we can do at all. This is why startup plans and book ideas get pushed to the back burner so often. To get the work done, you have to confront what’s holding you back.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Efficiency is a process.&lt;/strong&gt; It doesn’t happen the first or second time you do something. Which means in order to be productive in the fullest sense, you have to commit to the process of always looking for ways to improve over the long term.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Failure to prepare means preparing to fail.&lt;/strong&gt; You can’t expect yourself to move through things quickly and effectively if you haven’t set yourself up for success. What you do today impacts where you start tomorrow.
&lt;br /&gt;&lt;br /&gt;
    &lt;h2 id=&quot;relationships&quot;&gt;Relationships&lt;/h2&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The most important relationship in your life is the one you have with yourself.&lt;/strong&gt; Without a positive relationship with yourself, every other relationship in your life will suffer. It always starts with you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Friendships and relationships are collaborations.&lt;/strong&gt; They are not one-way streets. Healthy relationships make both parties better.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Trust is built through actions, not words.&lt;/strong&gt; You can’t pay attention to what people say or promise, only what they ultimately do. The way someone acts will tell you everything you need to know.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A real relationship is built on vulnerability.&lt;/strong&gt; It doesn’t matter if it’s a friendship, a significant other, or even a business connection, the best exchanges are rooted in some level of vulnerability. At the end of the day, we’re all exploring life together. We want to have genuine connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Every relationship has its ups and downs.&lt;/strong&gt; Conflicts and disagreements are inevitable. What matters is how each conflict is resolved. And the key is to always maintain a level of respect and benefit of the doubt, so that both parties can be heard and mutually understood.
&lt;br /&gt;&lt;br /&gt;
    &lt;h2 id=&quot;health&quot;&gt;Health&lt;/h2&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your body is your temple.&lt;/strong&gt; Treat it well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Too much sugar and you’ll crash.&lt;/strong&gt; Candy diets and processed food binges aren’t part of a healthy lifestyle. Your body is a reflection of who you are, your habits, how you treat yourself, everything. Cut out the bad stuff.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Lack of sleep is not a trophy.&lt;/strong&gt; Bragging about only getting three hours of sleep last night is not something to be proud of. What it shows is a severe lack of balance and an unsustainable workflow. Life is a marathon, not a sprint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Physical activity is crucial to personal wellness.&lt;/strong&gt; No matter how busy you get, or how hectic things are, you always have to make time to take care of your physical body. Exercise is key. If you don’t, you’ll pay for it later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Coffee is good, but too much coffee is bad.&lt;/strong&gt;  When your entire diet becomes “red eye” after “red eye,” it’s time to address the sleep problem.
&lt;br /&gt;&lt;br /&gt;
    &lt;h2 id=&quot;career&quot;&gt;Career&lt;/h2&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You don’t get anywhere fast trying to cut the line.&lt;/strong&gt; There are no shortcuts. Throwing someone under the bus on your way up will only come back to bite you. Focus on investing in yourself and your skill sets and let the rest fall into place.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your reputation is everything.&lt;/strong&gt; Above all, you always want former employers, co-workers, partners, and collaborators to speak highly of you. Upholding your reputation is everything when it comes to building a successful career for yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It’s not about what you’ve done, but what you’re currently doing.&lt;/strong&gt; Especially in our new world of digital media and personal branding, people want to know whose attention you are commanding today. What impact you are having today.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Humility goes a whole lot further than bravado.&lt;/strong&gt; It’s not about convincing everyone how much you know. It’s about showing that you’re a team player by being willing to listen, learn, and add value where you can. No one likes a spotlight searcher.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Becoming a leader has nothing to do with a formal leadership position.&lt;/strong&gt; Just because you have a big fancy title does not mean people will listen to you, or even take you seriously. To lead a team effectively, it starts with holding yourself to the highest standard and leading by example.
&lt;br /&gt;&lt;br /&gt;
    &lt;h2 id=&quot;success&quot;&gt;Success&lt;/h2&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You aren’t aiming for perfect. You’re aiming for perfect practice.&lt;/strong&gt; It’s not about tunnel-visioning on the shiny idea of the final product. It’s about treating each step of the way with intention. That’s how you create something worth presenting to the world in the end.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;External rewards are fleeting and unfulfilling.&lt;/strong&gt; They’re fun, sure, but they are not the end goal — not by a long shot. What holds far more value, and defines the quality of your life, is how many people’s lives you impact for the better. However you choose to do that is up to you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Believing your own hype is dangerous.&lt;/strong&gt; No matter what you achieve, or how externally successful you get, you have to always remember the kid that started out on his or her path out of pure curiosity. You should never lose that childlike sense of wonder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;==You are only as good as the last risk you took.==&lt;/strong&gt; If you have to rely on your last home run (which may have happened a long time ago) to speak for your current talents, you have fallen stagnant. Success over the long term is about constantly pushing yourself to take the next big risk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Somewhere, someone much younger than you is practicing his or her heart out, coming for your spot.&lt;/strong&gt; Just remember that. Anyone can reach the top of the mountain. The hard part is staying there.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article originally appeared on Inc. Magazine.&lt;/p&gt;</content><author><name></name></author><category term="EnglishArticle" /><summary type="html">Life is full of lessons. Some lessons are learned in an instant — like when you touch a hot stove. Others take time to fully understand — for example, what it truly means to be in love. But regardless of the size of the lesson, there are 30 important ones everyone should know before exiting young adulthood and entering the next phase of their life.</summary></entry><entry><title type="html">[무라카미 하루키] 직업으로서의 소설가 -07회, 한 없이 개인적이고 피지컬한 業</title><link href="https://seryuncheon.github.io//HARUKI_1/" rel="alternate" type="text/html" title="[무라카미 하루키] 직업으로서의 소설가 -07회, 한 없이 개인적이고 피지컬한 業" /><published>2019-03-06T00:00:00+00:00</published><updated>2019-03-06T00:00:00+00:00</updated><id>https://seryuncheon.github.io//HARUKI_1</id><content type="html" xml:base="https://seryuncheon.github.io//HARUKI_1/">&lt;p&gt;&lt;img src=&quot;https://static01.nyt.com/images/2011/10/23/magazine/23murakami1_span/23murakami1_span-jumbo.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;직업으로서의 소설가의 175p~ 발췌.&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;
   소설을 쓴다는 것은 밀실 안에서 이루어지는 한없이 개인적인 일입니다. 혼자 서재에 틀어박혀 책상을 마주하고(대부분의 경우) 아무것도 없었던 지점에서 가고으이 이야기를 일궈내고 그것을 문장의 형태로 바꿔나갑니다. 형상을 갖고 있지 않았던 주관적인 일들을 형상이 있는 객관적인 것으로(적어도 객관성을 추구하는 것으로)변환해가는 - 극히 간단히 정의하자면 그것이 우리 소설가가 일상적으로 행하는 작업입니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   “아니, 나는 서재 같은 대단한 건 없는데요”라는 사람도 아마 계시겠지요. 나도 소설을 처음 쓰기 시작할 무렵에는 서재 따위는 없었습니다. 센다가야의 하토노모리하치만 신사 근처의 좁은 아파트에서 주방 식탁을 마주하고 아내가 잠들어버린 한밤중에 나 혼자 원고지에 사각사각 글을 썼습니다. 그렇게 “바람의 노래를 들어라”와 “1973년의 핀볼”, 처음 두 권의 소설을 써냈습니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(……중략….)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   그리고 그 계기가 어떤 것이든 일단 소설을 쓰기 시작하면 소설가는 외톨이가 욉니다. 아무도 그/ 그녀를 도와주지 않습니다. 사람에 따라서는 리서처가 붙는 일도 있을지 모르지만 그 역할은 단지 자료나 재료를 수집하는 것 뿐입니다. 아무도 그/그려의 머릿속을 정리해주지 않고 아무도 적합한 단어를 어딘가에서 찾아와주지 않습니다. &lt;strong&gt;일단 스스로 시작한 일은 스스로 추진해나가고 완성해내야합니다.&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   이를테면, 이건 어디까지나 내 경우가 그렇다는 것인데, 장편 소설 한 편을 쓰려면 일 년 이상(이 년, 때로는 삼 년)을 서재에 틀어박혀 책상 앞에서 혼자 꼬박꼬박 원고를 쓰게 됩니다. 새벽에 일어나 매일 다섯 시간에서 여섯 시간, 의식을 집중해서 집필합니다. 그만큼 필사적으로 뭔가를 생각하다 보면 뇌는 일종의 과열 상태에 빠져서(문자 그대로 두피가 뜨거워지기도 합니다) 한참 동안 머리가 멍해집니다. 그래서 오후에는 낮잠을 자거나 음악을 듣거나 그리 방해가 되지 않는 책을 읽기도 합니다. 그렇게 살다 보면 아무래도 운동 부족에 빠지기 쉬워서 날마다 한 시간 정도는 밖에 나가 운동을 합니다. 그리고 다음날의 작업에 대비합니다. 날이면 날마다 판박이처럼 똑같은 짓을 반복합니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   고독한 작업, 이라고 하면 너무도 범속한 표현이지만 소설을 쓴다는 것은 - 특히 긴 소설을 쓰는 경우에는 - 실제로 상당히 고독한 작업입니다. 때때로 깊은 우물 밑바닥에 혼자 앉아 있는 듯한 기분이 듭니다. 아무도 구해주러 오지 않고 아무도 “오늘 아주 잘했어”라고 어깨를 토닥이며 위로해주지도 않습니다. 그 결과물인 작품이 누군가에게 칭찬을 받는 일도 있지만(물론 잘되면), 그것을 써내는 작업 그 자체에 대해 사람들은 딱히 평가해주지 않습니다. &lt;strong&gt;그건 작가 혼자서 묵묵히 짊어지고 가야 할 짐입니다.&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   나는 그런 쪽의 작업에 관해서는 상당히 인내심 강한 성격이라고 생각하지만, 그래도 때로는 지긋지긋하고 싫어질 때가 있습니다. 하지만 다가오는 날들을 하루 또 하루, 마치 기와 직인이 기와를 쌓아가듯이 참을성 있게 꼼꼼히 쌓아가는 것에 의해 이윽고 어느 시점에 ‘그래, 뭐니뭐니 해도 나는 작가야’라는 실감을 손에 쥘 수 있습니다. 그리고 그런 실감을 ‘좋은 것’, ‘축하 할 것’으로서 받아들일 수 있습니다. 미국의 금주 단체 표어에 ‘One day at a time’이라는 게 있는데, 그야 말로 그것입니다. ==리듬이 흐트러지지 않게 다가오는 날들을 하루하루 꾸준히 끌어당겨 자꾸자꾸 뒤로 보내는 수 밖에 없습니다==.== 그렇게 묵묵히 게속하다 보면 어느 순간 내 안에서 ‘뭔가’가 일어납니다.== 하지만 그것이 일어나기까지 어느 정도 시간이 걸립니다. 당신은 그것을 참을성 있게 기다려야만 합니다. ==하루는 어디까지나 하루씩입니다.== 한꺼번에 몰아 이틀 사흘씩 해치울 수는 없습니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그런 작업을 인내심을 갖고 꼬박꼬박 해나가기 위해서는 무엇이 필요한가.&lt;br /&gt;
&lt;strong&gt;말할 것도 없이 지속력입니다.&lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
   책상 앞에 앉아 의식을 집중하는 건 사흘이 한도, 라는 사람은 도저히 소설가는 될 수 없습니다. 사흘이면 단편소설은 쓸 수 있다, 라고 하는 사람도 있을지 모릅니다. 분명 맞는 말입니다. 사흘이면 단편소설 한 편쯤은 쓱싹 써낼 수도 있겠지요. 하지만 사흘 걸려 단편소설 한 편을 쓴 다음에 의식을 일단 제.로.상.태.로 털어버리고 새로운 태세를 갖춰 다시 사흘 걸려 다음 단편소설을 한 편 쓴다, 라는 식의 사이클은 길게 반복할 수 있는 게 아닙니다. 그런 짤막짤막하게 끊기는 작업을 계속하다가는 아마 글을 쓰는 사람의 몸이 우선 당해내지 못합니다. 단편소설을 전문으로 하는 사람이라도 직업 작가로서 먹고사는 이상, 흐름이 어느 정도 연결되어야 합니다. 긴 세월 동안 창작 활동을 이어가려면 장편소설 작가든 단편소설 작가든 지속적인 작업을 가능하게 해줄 만한 지속력이 반드시 필요합니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 그러면 지속력이 몸에 배도록 하기 위해서는 어떻게 하면 되는가.&lt;br /&gt;
 거기에 대한 내 대답은 단 한 가지, 아주 심플합니다 &lt;br /&gt;- &lt;em&gt;기초 체력이 몸에 배도록 할 것. 다부지고 끈질긴, 피지컬한 힘을 획득할 것. 자신의 몸을 한편으로 만들 것.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-wB0_5cUQ0UY/WZB9JQWdthI/AAAAAAAAB48/85FGvNeKsL07f_AK2LKzma7FqRo9Q5UFwCK4BGAYYCw/s1600/169086_13075624_o_1.png.jpeg&quot; alt=&quot;haruki&quot; title=&quot;novelist as a vocation&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="어나더라이프" /><category term="무라카미하루키" /><category term="직업으로서의소설가" /><summary type="html"></summary></entry><entry><title type="html">Node.js강의 -1. Node.js의 개요</title><link href="https://seryuncheon.github.io//Nodejs_1/" rel="alternate" type="text/html" title="Node.js강의 -1. Node.js의 개요" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://seryuncheon.github.io//Nodejs_1</id><content type="html" xml:base="https://seryuncheon.github.io//Nodejs_1/">&lt;h1 id=&quot;nodejs&quot;&gt;Node.js&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;**노드제이에스 기본개념부터 설치, 가동환경 구성.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;nodejs-1&quot;&gt;Node.js?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;라이언 달이 2009년도에 처음소개한 프레임워크&lt;/li&gt;
  &lt;li&gt;자바스크립트 언어를 응용프로그램에서 사용가능하도록 만든 하나의 프레임워크&lt;/li&gt;
  &lt;li&gt;웹브언어를 사용해서 서버용 어플제작이 가능.  크롬V8엔진이 큰 역할을 함&lt;/li&gt;
  &lt;li&gt;특징&lt;/li&gt;
  &lt;li&gt;‘싱글쓰레드를 기반’으로 ‘비동기 I/O(입출력)’을 사용함&lt;/li&gt;
  &lt;li&gt;‘이벤트를 기반으로 동작’. 그래서 ‘네트워크를 사용하는 어플리케이션에 적당함’.&lt;/li&gt;
  &lt;li&gt;인터넷을 이용하여 서비스 하는 분야에 서버 작성시 잘 쓰임.&lt;/li&gt;
  &lt;li&gt;동기식 I/O를 사용하는 경우 멀티쓰레드를 사용하여 다수의 클라이언트의 요청을 처리하는데, 노드제이에스는 싱글스레드로 작성하기에 코드가 작성하기 쉬워지는 장점이 생김. 대신 비동기 I/O 를 이용함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비동기io&quot;&gt;비동기I/O&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I/O를 이용하여 우리는
    &lt;ol&gt;
      &lt;li&gt;하드디스크 접근(파일 읽어오기)&lt;/li&gt;
      &lt;li&gt;데이터베이스 서버(접속해서 사용자가 원하는 정보 얻어오기)&lt;/li&gt;
      &lt;li&gt;네트워크를 이용해서 다른 서비스 접근 등을 함.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;그런데 이 때, 동기식으로 I/O를 사용하면, 이런 과정동안 계속 “대기”를 하게 됌.&lt;/li&gt;
  &lt;li&gt;이렇게 조금씩 대기가 자주 발생하면 성능적으로 좀 불리.( 리퀘스트 마다 처리하는 시간 상승 ex.아파치 서버)&lt;/li&gt;
  &lt;li&gt;비동기 I/O는 끝날 때 까지 ‘대기하지 않음’ = 성능이 유리.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nodejs-장점&quot;&gt;Node.js 장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;싱글 쓰레드로작성&lt;/li&gt;
  &lt;li&gt;비동기 I/O&lt;/li&gt;
  &lt;li&gt;간단한 구조의 경량 프레임워크와 풍부한 라이브러리&lt;/li&gt;
  &lt;li&gt;서버와 클라이언트에서 사용하는 언어가 같다(자바스크립트)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;노드제이에스-권장분야&quot;&gt;노드제이에스 권장분야&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실시간 소셜 네트워크 서비스&lt;/li&gt;
  &lt;li&gt;데이터 중심의 서비스&lt;/li&gt;
  &lt;li&gt;IoT기기 연동&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;노트제이에스-아키텍처-구조&quot;&gt;노트제이에스 아키텍처 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53720695-babcba00-3ea4-11e9-8d23-d8cfaf2c8aec.JPG&quot; alt=&quot;node_1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상위레벨 - 자바스크립트&lt;/li&gt;
  &lt;li&gt;로우레벨 - C언어로 작성&lt;/li&gt;
  &lt;li&gt;바인딩&lt;/li&gt;
  &lt;li&gt;v8 엔진&lt;/li&gt;
  &lt;li&gt;libev : Event&lt;/li&gt;
  &lt;li&gt;libeio : I/O&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;프로그래밍-모델&quot;&gt;프로그래밍 모델&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;프로그래밍-모델-1&quot;&gt;프로그래밍 모델&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;동기식은 A행위 다 끝나고 B행위를 실행하지만, 비동기는 a끝날때까지 기다리지 않고 바로 B시행이 가능.
    &lt;h3 id=&quot;동기식과-비동기식-코드의--차이점&quot;&gt;동기식과 비동기식 코드의  차이점&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;동기식
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53723654-8ac4e500-3eab-11e9-97df-fc50e156a969.JPG&quot; alt=&quot;sysnc_1&quot; /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;동기식은 결과값을 갖고 진행됨. 그래서 동기식 함수에 ‘return’사용. 결과값을 받은 ‘후’ 다음 단계 코드가 진행됨&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;비동기
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53723655-8ac4e500-3eab-11e9-913f-3781fdce1b91.JPG&quot; alt=&quot;unsync_1&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;결과값은 있으나. 리턴을 사용하지않음 ‘callback’함수에다 결과값을 넣어줌.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;콜백함수 형태
    &lt;ul&gt;
      &lt;li&gt;비동기 함수의 ‘에러’ 처리는, ‘콜백 함수’의 ‘파라미터’로 에러가 전달됨&lt;/li&gt;
      &lt;li&gt;대부분 비동기 API에는 APi마다 다르지만 첫 번째 파라미터를 에러로 설정함.
 &lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53723885-0b83e100-3eac-11e9-8a46-fad80e0084e0.JPG&quot; alt=&quot;error_1&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;nodejs-개발-환경&quot;&gt;Node.js 개발 환경&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;nodejs.org에서 각자의 플랫폼에 맞는 설치 파일 다운로드해서 설치 할 것 ㅇㅇ.&lt;/li&gt;
  &lt;li&gt;설치 잘 됐는지 확인할려면 커맨드라인 창에 node -v 쳐서 버전정보와함께 설치유무 확인할 것.
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53726753-00cc4a80-3eb2-11e9-9e69-725a2a252a1c.JPG&quot; alt=&quot;node_2&quot; /&gt;
ㅎㅎ 잘 설치함.&lt;/li&gt;
  &lt;li&gt;명령어&lt;/li&gt;
  &lt;li&gt;-v는 버전 확인&lt;/li&gt;
  &lt;li&gt;-help 각명령어 별로 쫙 설명과 그 사용법 나옴.&lt;/li&gt;
  &lt;li&gt;-e, p는 스크립트 평가&lt;/li&gt;
  &lt;li&gt;-c는 실행하지 않고 문법 체크&lt;/li&gt;
  &lt;li&gt;-r은 모듈을 미리 로동
 &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;REPL 커맨드라인에서 노드코드 쳐서 코드 실행이 가능( 참고만 할 것. 우리는 에디터 쓸거임)&lt;/li&gt;
  &lt;li&gt;우리는 비쥬얼스튜디오코드 사용할거임( 잘모르겠지만 이클립스는 노드제이에스용으로 잘 안쓰나보지,,,?)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'세륜 테스트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;실행 결과 확인하려면, Cmd창에다가 ‘node 해당파일명’ 칠 것.
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53731366-e5673c80-3ebd-11e9-810d-583fc17f21c1.JPG&quot; alt=&quot;node_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;웹서버를 실행하는 코드&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
3000번포트에서 서비스하겠다는 소리임 ㅇㅇ&lt;br /&gt;
작성 후, cmd라인에서 해당 파일 실행하고, 웹브라우저 가서 ‘127.0.0.1:3000’실행 해보면,
웹브라우저에 ‘Hello World’ 라고 잘 출력됨 ㅇㅇ.&lt;/p&gt;

&lt;h1 id=&quot;도큐먼트&quot;&gt;도큐먼트&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;노드제이에스를 잘 활용하려면 도큐먼트를 잘 볼 줄 알아야함&lt;/li&gt;
  &lt;li&gt;사실상 노드제이에스는 필요한 모듈을 잘 찾아서 잘 조립하는 거라고 보면됨. 모듈은 일종의 부품.&lt;/li&gt;
  &lt;li&gt;Node.js는 간단한구조, 필요한 모듈을 로딩한다. 모듈:다른 언어의 라이브러리에 해당&lt;/li&gt;
  &lt;li&gt;노드홈페이지 접근해서 Docs에서 API문서 잘 볼 것.&lt;/li&gt;
  &lt;li&gt;신규생성 API도 있고, 더이상 사용자제부탁드리는 API도있고(deprecated된 api)&lt;/li&gt;
  &lt;li&gt;stability의 레벨로 구분하자면, 0:deprecated, 1:실험적 단계, 2:검증된 안정적 단계, 3:no more변경. 숫자가 높을 수록 믿고쓸수있는 api.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모듈-사용하기&quot;&gt;모듈 사용하기.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;모듈 문서 보는 법을 알아보쟈.
 &lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53731873-72f75c00-3ebf-11e9-9b78-f199d5531f56.JPG&quot; alt=&quot;node_4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이거 보면 ReadLine이라는 모듈에는 이렇게 4개로 구성돼어있음. 차례로, 클래스:인터페이스, 메소드, 이벤트. 모듈함수임.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;모듈을 사용하려면 ‘모듈을 로딩’ 하는 과정을 거쳐야함. 그럴려면 require이라는 함수이용. 파라미터로 모듈이름을 넣음.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var readline = require('readline');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;이렇게 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;모듈은 기본모듈(기본 라이브러리에 내장돼있음)/ 확장모듈 두 가지로 나뉨(npm을 이용하여 별도로 설치해야 함. 이 확장모듈은 소스코드와 같은 폴더 또는 상위 폴더 또는 node_module이름의 폴더에 놓이게 됨)&lt;/li&gt;
  &lt;li&gt;모듈로딩 하면 객체 생성 가능.new 연산자로 생성할 수 도 있지만 대부분 모듈은 객체 생성하는 코드가 있음. 예를들어 read line의 경우 아래의 1번째 줄로 모듈 로딩, 2번째 줄로 객체 생성 한다고 보면됨.
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'readline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;&lt;br /&gt;
저 위의 인풋 아웃풋은 option으로 파라미커로 멕이는 것들.  암튼 이렇게 객체 를 생성하고 나면, 해당 객체에 있는 메소드 사용가능~~~
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
    &lt;h3 id=&quot;이벤트&quot;&gt;이벤트&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;이벤트 코드 갱장히 마니 쓰임.&lt;/li&gt;
  &lt;li&gt;문서 잘보면 이벤트에 대하여 이벤트핸들러 함수가 잘 서술돼있음.&lt;/li&gt;
  &lt;li&gt;이벤트 사용하는것은 ‘설정해놓은 객체이름.on’형식으로 사용하게됨. 즉,
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;rl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'line'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'You just typed: '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 코드처럼 사용하고 여기서 ‘line’은 수 많은 이벤트 들 중 하나임. 이벤트 쓰고싶으면 저렇게 첫번 째 파라미터로 이벤트이름을 멕일 것.&lt;/li&gt;
  &lt;li&gt;그 다음으로 들어오는 함수의 형태는 해당 이벤트의 이벤트핸들어에 서술된 함수의 형태를 그대로 따라가면 됨~~~&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모듈함수&quot;&gt;모듈함수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;객체 생성없이 바로 모듈에서 사용할 수 있는것들을 모듈함수라고 부름. 로딩 후 바로 사용가능 ㅇㅇ&lt;/li&gt;
  &lt;li&gt;사용방법 간단. 모듈 로딩후, 바로 객체애다가 사용하듯이 함수쓰면 됨
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'readline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cursorTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;이렇게 ㅇㅇ&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Node.js" /><summary type="html">개념소개, 프로그래밍모델 비교, 개발환경 셋팅, helloworld출력, 도큐먼트보기, 모듈 로딩하고 사용하는 방법, 이벤트 사용 방법</summary></entry><entry><title type="html">Eng vid) Cleaning &amp;amp; Organizing My Life Together 😀 Self Care Routine-ish(Youtube) -1</title><link href="https://seryuncheon.github.io//EngVideo_Rowena-Tsai/" rel="alternate" type="text/html" title="Eng vid) Cleaning &amp; Organizing My Life Together 😀 Self Care Routine-ish(Youtube) -1" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://seryuncheon.github.io//EngVideo_Rowena%20Tsai</id><content type="html" xml:base="https://seryuncheon.github.io//EngVideo_Rowena-Tsai/">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/sDzNkWIqvww&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;hey how u guys doin’? So before we get started I wanna first show u guys something. This is what i do evey weekend when i ndeed to film. I put evthing that was on my dest on the floor, so that it”s out of frame, so that it looks claen and nice behind me. When I film from this angle exactly a little behind the scenes. SO today I’m going to really put my house and my outer world in order. So that i can really put my inner world in order as well . Hopefully this is the last cleaning vlog I make for a while bcuz the goal of this tiding and organizing session is to keeep my apartment this way. not just for two hours before the weeks to come&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First thig I like doing is to put evthing back where they belong. This is sth that 콘 마뤼(미니멀리스트) talks as well of grouping all the things together. So I hava a lot of skin-care products outside in my hallway bcuz I’m a host on “beauty within”, which is a skin-care and beauty channel so there’s a lot of products i need to try out bcuz it’s a part of my job. It’s a little excessive, actually It’s very excessive, the amount of the skincare I currently have. This is just the one part of it. So the thing is, when I saw all of this I got very overwhelmed. I didn’t wanna deal whith this. So instead of dealing with it, I put it off for later and I did sth else that I really wannted to do which is the vaccum. I already talked about how much i love this dyson-wireless vacum so, I’m not gonna get into it too much but. It’s kind of like, if u dont wanna do sth and u know you donyt wanna do tit, find sth else that u know… u would be happy with doing it. Alright that all i could do on Saturday. I spend the rest of day, reading and catching up on just a lot of things that I’ve been into catch up on, specifically reading bcuz I just haven’t had time so you know? I’m making timme&lt;br /&gt;&lt;br /&gt;
So this is Sunday I’m going through every single article of clothing that i have. Taking everything out, putting on the bed, touching eevery single thing I’ve own and seeing every single that i own. I feel like psychologicallu it really helps to see how much you actually own, throw everything on your bed or whatever it is that you’re cleaning and this is actually sth that i haven’t done in ad really long time. maybe over a year? I 콘 마뤼(동사로쓰임. 마치 구글을 구글링하다 동사로 쓰듯), probably every season but I haven’t actually removed all my clothings from the racks in a really long time&lt;/p&gt;</content><author><name></name></author><category term="EnglishVideo" /><category term="DailyVlog" /><category term="딕테이션&amp;필사" /><summary type="html">A youtube video from Rowena Tsai(Daily v-log's youtuber)</summary></entry><entry><title type="html">Node.js강의 -2. Node.js의 기본 모듈1</title><link href="https://seryuncheon.github.io//Nodejs_2/" rel="alternate" type="text/html" title="Node.js강의 -2. Node.js의 기본 모듈1" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>https://seryuncheon.github.io//Nodejs_2</id><content type="html" xml:base="https://seryuncheon.github.io//Nodejs_2/">&lt;h1 id=&quot;1기본모듈&quot;&gt;1.기본모듈&lt;/h1&gt;
&lt;h3 id=&quot;기본모듈&quot;&gt;기본모듈?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Node.js와 함께 설치&lt;/li&gt;
  &lt;li&gt;별도의 설치 과정 불필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;주요기본모듈&quot;&gt;주요기본모듈&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스 환경에 대한 모듈 ‘os, process, cluster’&lt;/li&gt;
  &lt;li&gt;파일과 경로, URL을 다루는 모듈 ‘fs, path, URL, querystring, stream’&lt;/li&gt;
  &lt;li&gt;네트워크 모듈 ‘http, https, net, dgram, dns’&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2전역객체&quot;&gt;2.전역객체&lt;/h1&gt;

&lt;h3 id=&quot;전역객체global&quot;&gt;전역객체(global)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;글로벌 모듈에 속한 것들&lt;/li&gt;
  &lt;li&gt;주요전역객체&lt;/li&gt;
  &lt;li&gt;process&lt;/li&gt;
  &lt;li&gt;console&lt;/li&gt;
  &lt;li&gt;Buffer (클래스)&lt;/li&gt;
  &lt;li&gt;require&lt;/li&gt;
  &lt;li&gt;__filename, __dirname&lt;/li&gt;
  &lt;li&gt;module&lt;/li&gt;
  &lt;li&gt;exports&lt;/li&gt;
  &lt;li&gt;Timeout 함수 등.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;갑자기 느끼는건데 진짜 자바스크립트문법이랑 똑같네..전역변수 이런것들도 그렇고 함수도 그렇고 라고 생각하다 보니 노드제이에스는 원래 자바스크립트 기반 프레임워크였지…(숙연)&lt;/del&gt;
&lt;br /&gt;암튼 전격객체중 몇가지를 좀 자세히 살펴보자~&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전역객체: process  노드제이에스 앱이 실행되는 프로세스 실행정보에 대해 제공하는 모듈임. 아래와 같은 정보를 알려줌.&lt;/li&gt;
  &lt;li&gt;env : 애플리케이션 실행 환경. 아래는 실행결과임.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;process.env:
{ TERM_PROGRAM: 'iTerm.app',
SHELL: '/bin/bash',
TERM: 'xterm-256color',
PWD: '/Users/wannabewize/Projects/TAcademy/Node-Samples/BasicModules',
ITERM_PROFILE: 'Default',
HOME: '/Users/wannabewize',
LOGNAME: 'wannabewize',
LC_CTYPE: ‘UTF-8' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;version : Node.js 버전 정보&lt;/li&gt;
  &lt;li&gt;arch, platform : CPU와 플랫폼 정보
&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53736808-28c9a700-3ece-11e9-9af1-0cc8a018e168.JPG&quot; alt=&quot;node_5&quot; /&gt;
 이렇게 js파일 열어서 콘솔함수로 프로세스모듈에있는 env나 arch나 platform정보에대해 출력하라 서술하고 저장 후 커맨드라인에서 해당 폴더가 있는 위치로 cd해서 간다음, ‘node 파일명’하면,&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53736809-28c9a700-3ece-11e9-8045-b4637d0e00fe.JPG&quot; alt=&quot;node_6&quot; /&gt;
 이렇게 커맨드라인에 해당정보들 출력됨.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;argv : 실행 명령 파라미터에 대한 정보
 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ node processAdd.js 3 5&lt;/code&gt;
를 실행하면,
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 	// 0, 1은 node, processAdd.js
 var i = process.argv[2]; //3이 대입됨.
 var j = process.argv[3]; //5가 대입됨.
 var sum = parseInt(i) + parseInt(j);
 console.log(sum); // 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;process가 제공하는 이벤트로는,&lt;/li&gt;
  &lt;li&gt;exit : 애플리케이션 종료 이벤트&lt;/li&gt;
  &lt;li&gt;beforeExit : 종료 되기 전에 발생하는 이벤트&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;uncaughtException : 예외 처리되지 않은 예외 이벤트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;함수는,
    &lt;ul&gt;
      &lt;li&gt;exit : 애플리케이션 종료&lt;/li&gt;
      &lt;li&gt;nextTick : 이벤트 루프 내 동작을 모두 실행 후 콜백 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3타이머&quot;&gt;3.타이머&lt;/h1&gt;
&lt;p&gt;&lt;del&gt;타이머라니..! 한창 자바스크립트로 게임만들 때 자주사용하던 함순데, 7개월만에 다시보니 반갑다???&lt;/del&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;타이머함수&quot;&gt;타이머함수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;지연동작: setTimeout
  셋타임아웃함수는 1번쨰 파라미터로 콜백함수, 2번째로 delay( 몇초나 지연할거냐/ 단위는 milli sec), 3번째로 그 해당 콜백함수에 멕이게되는 파라미터 값이 들어가게됨.&lt;br /&gt;
  ‘ setTimeout(callback, delay, arg, …)’ &lt;br /&gt;
예제코드를 보장
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 3초뒤dp 콘솔에 hello world출력됨.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;타이머 취소하는 함수는 clearTimeout()이고  파라미터는 취소시킬 타임아웃함수를 담은 객체를 멕이면 됨. &lt;br /&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;반복동작: setInterval.  사용방법은 타임아웃함수랑 똑같음. ㅇㅇ
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayGoodbay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Good bye'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayGoodbay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Friend'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-콘솔&quot;&gt;4. 콘솔&lt;/h1&gt;
&lt;h3 id=&quot;콘솔이란&quot;&gt;콘솔이란&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;로그남기기 가능&lt;/li&gt;
  &lt;li&gt;실행시간을 측정하는것 가능
다음과 같이 사용가능.&lt;/li&gt;
  &lt;li&gt;console.log(‘log’, ‘log message’);&lt;/li&gt;
  &lt;li&gt;console.info(‘info’, ‘info message’);&lt;/li&gt;
  &lt;li&gt;console.warn(‘warn’, ‘warn message’);&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;console.error(‘error’, ‘error message’);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;값출력 간단하게,
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;intValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'int Value '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;객체형으로,
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'천세륜'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Web-Developer'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'obj : '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//더하기연산자 사용하면 문자열로 결합됨.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'obj : '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//그래서 ',콤마'를 사용하여 출력하는 것을 권유함.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;커스텀콘솔&quot;&gt;커스텀콘솔&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;콘솔타입로딩&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var Console = require('console').Console
  new Console(stdout[, stderr])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;stdout : 표준 출력 스트림, info, log&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;stderr : 에러 출력. warn, error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;파일로 로그 남기는 커스텀 콘솔&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var output = fs.createWriteStream('./stdout.log');
 var errorOutput = fs.createWriteStream('./stderr.log');
 var logger = new Console(output, errorOutput);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;실행시간-측정&quot;&gt;실행시간 측정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;콘솔객체로 실행시간 측정하깅&lt;/li&gt;
  &lt;li&gt;시작시점 설정은 ‘console.time(TIMER_NAME) ‘&lt;/li&gt;
  &lt;li&gt;종료시점. 걸린 시간 계산해서 출력은, ‘console.timeEnd(TIMER_NAME)’&lt;/li&gt;
  &lt;li&gt;예제코드로 볼까~~~&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;// 시간 측정 시작&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SUM’);
 var sum = 0;
 for(var i = 1 ; i &amp;lt; 10000 ; i++ ){
 sum += i;}
// 시간 측정 시작
console.timeEnd(‘SUM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 주목할 것은 타임함수에 쓰인값과 타임엔드함수에쓰인 문자열 값이 똑같다는 것 기억하기.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;예제 customConsole.js작성하고 커맨드라인에 실행하면?&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'stdout.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error.log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'console'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;utput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'info message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'log message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'warning'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와같이 로그를 남길 수 있느 파일이 두 개 생김( 정보알려주는 stdout파일이랑 error파일)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53740143-db9e0300-3ed6-11e9-945c-d3c7f47c9fce.JPG&quot; alt=&quot;node_7&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;5유틸리티-모듈&quot;&gt;5.유틸리티 모듈&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;유틸리티 모듈이란 주요한 기능으로 ‘문자열만드는’ 기능, ‘클래스를 상속’해주는 기능 등이 있음&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;전역 모듈이 아니니까. require함수 이요해서 모듈로딩해서 변수에 담아서 씀.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var util = require(‘util’);&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;문자열 포맷 부터 알아보자. 사용방법은,
  &lt;code class=&quot;highlighter-rouge&quot;&gt;util.format()&lt;/code&gt; 저 괄호 안에 플레이스 홀더를 넣는데 그 종류로는&lt;/li&gt;
  &lt;li&gt;%s, %d, %j가 있음 각각 문자, 숫자, JSON타입임&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예제코드
  &lt;code class=&quot;highlighter-rouge&quot;&gt;var str1 = util.format('%d + %d = %d', 1, 2, (1+2));&lt;/code&gt;&lt;br /&gt;
  실행결과: =&amp;gt; 1 + 2 = 3 &lt;br /&gt;&amp;gt;&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;var str2 = util.format('%s %s', 'Hello', ‘World');&lt;/code&gt;&lt;br /&gt;
  실행결과: =&amp;gt; Hello World &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;상속기능은 inherit함수를 사용함.( 오…자스에도 상속기능이 있네,,, 당연한건가,,?)
 &lt;code class=&quot;highlighter-rouge&quot;&gt;util.inherits(constructor, superConstructor)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;파라미터로 첫번 째는 자식클래스 생성자함수, 두번 째는 부모클래스의 생성자함수를 넣음.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;util.inherits(ChildClassFunction, ParentClassFunction);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;예제코드
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello. from Parent Class'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;자식클래스가, 부모클래스를 상속한다~라는 뜻으로 차일드클래스는 위와같이 설정해놓으면 부모클래스 안에 정의돼있는 ‘sayHello’ 라는 함수를 호출하고 사용가능.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;예제코드 2&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'util'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello World, from Parent Class!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 상속&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;util.inherits(Child, Parent);&lt;/code&gt;이 한줄 만으로 상속이 가능.&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6이벤트&quot;&gt;6.이벤트&lt;/h1&gt;

&lt;p&gt;###이벤트모듈&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이벤트를 다루는것은 EventEmitter(타입임)임. 얘가 이벤트를 다루는 기능을 제공함.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;노드제이에스로-만든-앱에서-자주-쓸-이벤트들의-예&quot;&gt;노드제이에스로 만든 앱에서 자주 쓸 이벤트들의 예&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트 접속 요청도 하나의 이벤트&lt;/li&gt;
  &lt;li&gt;소켓에 데이터 도착도 하나의 이벤트&lt;/li&gt;
  &lt;li&gt;파일을 오픈/읽기도 이벤트&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;이벤트-처리&quot;&gt;이벤트 처리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;는 비동기로 처리되고 리스너함수에 등록하면됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;타입에-정의된-이벤트-다루는-법&quot;&gt;타입에 정의된 이벤트 다루는 법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;이벤트 리스너 함수 등록하면 됨 아래의 이 3개 함수로 이벤트 등록.(주로 On을 젤 마니씀)&lt;/li&gt;
  &lt;li&gt;emitter.addListener(event, listener)&lt;/li&gt;
  &lt;li&gt;emitter.on(event, listener)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emitter.once(event, listener) - 이벤트 단 한번만 반응하게 하려할때 사용.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이벤트 리스너 등록 예제 코드~~~
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'occur exit event'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 한번만 동작&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'occur exit event'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;이벤트 리스너 삭제하는 함수는,&lt;/li&gt;
  &lt;li&gt;emitter.removeListener(event, listener)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emitter.removeAllListeners([event])&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이벤트 리스너는 최대 10개 등록가능&lt;/li&gt;
  &lt;li&gt;emitter.setMaxListeners(n)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;emitter.getMaxListeners()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이벤트 강제로 발생시키는 함수는 ‘emit’&lt;/li&gt;
  &lt;li&gt;emitter.emit(event[, arg1][, arg2][, …])
 	  - event : 이벤트 이름
    &lt;ul&gt;
      &lt;li&gt;arg : 리스너 함수의 파라미터&lt;/li&gt;
      &lt;li&gt;emit 함수 호출 결과 : true(이벤트 처리), false(이벤트 처리 안됨)
 &lt;code class=&quot;highlighter-rouge&quot;&gt;process.emit(‘exit'); process.emit('exit', 0); // 리스너 함수의 파라미터로 0 전달&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;커스텀 이벤트도 제작 가능&lt;/li&gt;
  &lt;li&gt;EventEmitter 객체에 커스텀 이벤트
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//이벤트 이미터함수로 객체 를 하나 만들어야 저 emit함수도 on함수도 사용가능함 ㅇㅇ&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;customEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'occur custom event'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;customEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;커스텀이벤트도 당연 상속 가능쓰 ㅎ
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){};&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 상속&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'); //유틸모듈 리콰이어함수로 모듈로딩하고,
 var EventEmitter = require(‘events'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//이벤트이미터타입으로 모듈객체도 생성하고&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inherits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EventEmitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//상속이 가능함. 유틸의 인헤리트 함수로.&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// 객체&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'howAreYou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Fine, Thank you and you?’)
 }); //하와유라는 우리가 직접만든 커스텀함수를 on으로 이벤트 실행 가능.
 p.emit('&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;howAreYou&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;');// emit함수로 하와유 함수 강제 실행.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;예제코드: 정의하지않은 이벤트에 대해 에러가 나는 상황에서 ‘uncaughtException’ 이벤트핸들러로 함수작동하게 하는 법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  	&lt;span class=&quot;c1&quot;&gt;// uncaughtException 예외 처리&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'uncaughtException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'uncaughtException Event : '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 정의되지 않은 함수 호출 - uncaughtException 발생&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게하면, 노드가 종료돼지않고, 예외처리를 할 수 있음&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;더-araboja&quot;&gt;더 ARABOJA&lt;/h1&gt;
&lt;p&gt;### 모든 리스너 함수의 첫 번째 파라미터는 ‘에러’&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;에러처리는 다음과 같이 합니당~~~
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 에러 처리&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 정상 처리&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;마지막으로-학습정리&quot;&gt;마지막으로 학습정리~~~&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본 모듈
별도의 설치 과정 없이 사용할 수 있는 모듈로 Node.js와 함께 설치된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;전역객체
global 모듈에 속하는 객체와 함수로 모듈 로딩 과정 없이 사용할 수 있다. console, timeout, __dirname, process 등이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;타이머
타이머 함수인 setTimeout()이나 setInterval() 함수를 이용해서 일정 시간 뒤에 동작하거나, 주기적으로 동작하는 기능을 작성할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;콘솔
콘솔(Console)을 이용해서 콘솔 화면에 내용을 출력할 뿐만 아니라 실행 시간을 측정할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;유틸리티
유틸리티 모듈을 이용해서 형식 문자열을 작성할 수 있었다. 그리고 클래스 간에 상속 관계를 만들 수 있다.( 유틸리티 모듈, 모듈로딩과정 반.드.시. 필요!)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이벤트
이벤트를 다루는 ‘EventEmitter’의 특징과 이벤트를 다루는 방법을 알아봤다. 그리고 유틸리티 모듈의 상속을 이용해서 커스텀으로 작성한 타입에서도 이벤트를 다룰 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Node.js" /><summary type="html">모듈 시스템 이해, 전역객체 개념및 사용방법, 콘솔&amp;유틸리티 모듈 사용, 이벤트가 동작하는 원리</summary></entry><entry><title type="html">스프링프레임워크 -3</title><link href="https://seryuncheon.github.io//SpringLecture_3/" rel="alternate" type="text/html" title="스프링프레임워크 -3" /><published>2019-03-03T00:00:00+00:00</published><updated>2019-03-03T00:00:00+00:00</updated><id>https://seryuncheon.github.io//SpringLecture_3</id><content type="html" xml:base="https://seryuncheon.github.io//SpringLecture_3/">&lt;h1 id=&quot;ioc&quot;&gt;IoC&lt;/h1&gt;

&lt;h3 id=&quot;1ioc의개념&quot;&gt;1.IoC의개념&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;IoC(제어권의 역전)이란, 객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미. 그 제어권은 프레임워크 컨테이너가 쥐고있게됨. 즉 프레임워크에서 제공하는 컨테이너가 객체를 생성하고 객체의 생명주기(lifecycle)관리까지 다 해줌.&lt;/li&gt;
  &lt;li&gt;또 컴포넌트간의 의존관계도 설정이 가능함. ( Configuration) 즉 프레임워크에서 한번 어떤 컴포넌트를 설정하면 자바에서 어노테이션방식으로 해당코드를 주입받는게 가능함.&lt;/li&gt;
  &lt;li&gt;아무튼, 스프링도 이 IoC컨테이너를 제공한다는 소리.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2ioc분류&quot;&gt;2.IoC분류&lt;/h3&gt;
&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;IoC는 크게 DL, DI 이 두 개로 분류됨. DL은 특정컨테이너에 종속되는 api를 쓰기 때문에 주로 DL보다는 DI를 사용함.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ul&gt;
          &lt;li&gt;스프링프레임워크는 DI, DL기능 모두 제공함.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DI(Dependency Injection)은 각 클래스간의 의존관계를 빈 설정정보(Bean defintion)(주로 ‘xml’이나 ‘annotation’방식으로 설정)를 바탕으로 컨테이너가 자동으로 연결해주는 것을 말함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;DI를 주입하는 방법은 아래의 세가지가 있음.&lt;/li&gt;
  &lt;li&gt;Setter인젝션. 세터를 통해 해당 컴포넌트를 주입받는 것.&lt;/li&gt;
  &lt;li&gt;Constructor injection(생성자사용) 개발자가 클래스내에 생성자를 설정해서 컴포넌트를 주입받는것&lt;/li&gt;
  &lt;li&gt;Method Injection. 일반적인 자바 메소드하나를 만들어서 설정하는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spring-di-컨테이너의-개념&quot;&gt;Spring DI 컨테이너의 개념&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;스프링 DI 컨테이너가 관리하는 객체를 bean이라고 하고, 이 빈들을 관리하는 의미로 컨테이너를 Bean Factory빈팩토리 라고 부름.&lt;/li&gt;
  &lt;li&gt;이 Bean Factory에 여러 컨테이너 기능을 좀더 추가하여 만든게 ApplicationContext임 즉 어플컨텍이 DI컨테이너가 역할을 한다고 보면됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;… 이어서 6강부터 강의를 20강가까이 들었는데 하나하나 타이핑하자니 시간이 너무오래걸리고, 개인공부용이기에 다 담지 않기로 결정했다. 혹시나 이 블로그를 보고 T아카데미의 스프링강의를 들으실 분이 있을지도 모르니,&lt;br /&gt;
다시 보니 좋았던 것, 단점이라기엔 좀 아쉬웠던점을 열거해본다면()&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;좋았던점&lt;/li&gt;
  &lt;li&gt;기본개념을 빠르게 훓으며 지나갈 수 있다. 데이터소스의 종류들, 의존성주입을 해주는 것에 대해 프로퍼티값으로 일일이 ㅣ정해주는 방법도 있지만, 이렇게 @auotowired태그를 사용하는 방법도 있다 등 의외로 세세히 알려준다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;토비의 스프링 책을 보신 분들이 계실지 모르지만, 아주아주 좋은 책이나 빠른기간에 통달(?) 습득하기에는 벅차다. 아주 상세하고, 자상한(?)화법으로 세세하게 개념도 또 세세하게 쪼개서 말씀해주시기에, 그 분량이 어마어마(?)하다.(경영학 전공생들은 알만한 아주 두꺼운 회계원리 원서분량과 비슷한 분략으로 책이 두 권이다.) 그런데 이 강의는 상대적으로 짧고 (30분강의 28강 정도) 그마저도 뒷부분은 RESTful API를 어떻게 적용하는지에 대해 나와있다. 초보자라면 그강의도 들어도 아주 유익하고 좋지만, 구글링으로 혼자 독학가능하다. 하지만 만약 스프링으로 게시판? 웹앱을 한번도 만들어 본 적이 없는 분이라면 이 강의만 들어도 충분히 아주아주 작은 웹앱을 작성할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;아쉬웠던점&lt;/li&gt;
  &lt;li&gt;모든 부분에 대해 당연히 서술하지 않는다는 점? 예를 들면 DataSourceDriver의 종류도 더 많고, 그 프로퍼티 값에 대하여 더 많은 유의미한(?) 작성할 만한 속성들이 있지만, 해당강의에서 알려주지 않는다. ‘그러나’, 그정도는 구글에 “스프링 + datasource”라고만 키워드 검색해도 다양한 종류로 나올것이다. 누리꾼들이 어떤건 이게좋고 어떤건 저게좋다 까지 알아서 다들 잘 분석해놨기에, 그냥 데이타소스가 뭐하는 앤지, 어떤 역할을 하는지만 알아도 충분하다.&lt;/li&gt;
  &lt;li&gt;SPring JDBC 설정하는 부분이 조금 올드하다라고 느껴졌다.&lt;/li&gt;
  &lt;li&gt;Dao부분 맵퍼설정도 훨씬? 간편한 xml과 짝꿍시키는 방법이 있는데 그걸 다 서술하진 않는 것 같다.&lt;/li&gt;
  &lt;li&gt;뭐 이정도,,,?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요즘은 전공자들도 학교에서 스프링프레임워크를 배우는지 모르지만, 나는 국비지원교육으로 6개월간 자바기반의 웹앱을 만드는 과정을 배울 때 해당 개념을 배웠다. 그때 아주 빠른 속도+아주 방대한 개념을 순식간에 뇟속에 집어 넣었기에 스프링에 관해서는 중간중간 머릿속에 꼬여있는 부분들이 많다. 이 강의는 ‘이미 한번 스프링을 배운사람이 스윽- 쉽고,간편하게  그 개념을 복습할 때’ 좋은 것 같다. 나로서는 꽤 쏠쏠하고 좋았다. AOP위빙부분이나, 여타 개념들을 다시 정리하기에도!&lt;/p&gt;

&lt;p&gt;빠르게 복습했으니, 이제는 노드제이에스_뤼액트+뷰를 활용한 웹앱프로젝트를 작성하기 위해 노드강의를 배우러 떠나겠습니다.&lt;/p&gt;</content><author><name></name></author><category term="maven" /><category term="spring" /><category term="STS" /><category term="AOP" /><category term="DI" /><summary type="html">IoC/ DI/ Spring DI 컨테이너...그리고 종료!</summary></entry><entry><title type="html">스프링프레임워크 -2강</title><link href="https://seryuncheon.github.io//SpringLecture_2/" rel="alternate" type="text/html" title="스프링프레임워크 -2강" /><published>2019-03-02T00:00:00+00:00</published><updated>2019-03-02T00:00:00+00:00</updated><id>https://seryuncheon.github.io//SpringLecture_2</id><content type="html" xml:base="https://seryuncheon.github.io//SpringLecture_2/">&lt;h1 id=&quot;스프링프레임워크&quot;&gt;스프링프레임워크&lt;/h1&gt;

&lt;h3 id=&quot;1sprign-framework&quot;&gt;1.Sprign Framework?&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;Java엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크이다.&lt;/li&gt;
  &lt;li&gt;어션프레임워크: 특정 계층, 분야에 국한되지 않고 전 영역을 포괄하는 범용적 프레임워크&lt;/li&gt;
  &lt;li&gt;경량급프레임워크 : 단순하 웹컨테이너에서도 엔터프라이즈 개발의 고급기술을 대부분 사용 가능&lt;/li&gt;
  &lt;li&gt;Spring은 OpenSourde의 장점을 충분히 취하면서 동시에 OpenSource 제품의 단점과 한계를 잘 극복한다.&lt;/li&gt;
  &lt;li&gt;Portable Service Abstraction, DI, AOP, POJO&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2spring-framework-특징&quot;&gt;2.SPring Framework 특징&lt;/h3&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;스피링컨테이너는 자바객체의 LifeCycle을 관리하며, 컨테이너로부터 필요한 객체를 가져와 사용할 수 있다( 우리 예전에 수업시간 때 dao나 서비스 객체 하나 만들어서 bean으로 등록하고 가져다사용할 수 있던거 ㅇㅇ 기억하면됨)&lt;/li&gt;
  &lt;li&gt;DI(Dependency Injection)지원. 스프링은 설정 파일이나 어노테이션을 통해서 객체 간의 의존관계를 설정할 수 있도록 하고 있다.&lt;/li&gt;
  &lt;li&gt;AOP(Aspect Oriendted Programming)지원. 스프링은 트랜잭션이나 로깅, 보안과같이 공통적으로 필요로 하는 모듈들을 실제 핵심 모듈에서 분리해서 적용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;ul&gt;
          &lt;li&gt;그러니까, 보통의 객체지향 코딩은 위에서부터 아래로 차례대로 컴파일러가 읽어가며 코드를 수행하지만, 이 AOP는 관점지향프로그래밍이 가능해서 중간중간 로그인과같이 중요한 보안사항을 처리해야하는 기능들을 수행하고 싶을 때, 옆에서 치고 빠지는게 가능하다. 한 마디로, 위에서 아래로 흐르는 폭포가 있다면 폭포 ‘옆’에 서있는 관리자가 옆에서 중요한 사항들을 하나씩 폭포수에 찔러넣기가 가능하다는 뜻.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POJO(Plain Old Java Object)지원. 스프링 컨테이너에 저장되는 자바객체는 득정한 인터페이스를 구현하거거나, 특정 클래스를 상속 받지 않아도 된다. 즉, 기존의 자바 함수와 자바내장 클래스들 모~두 사용가능하단 얘기.&lt;/li&gt;
  &lt;li&gt;트랜잭션 처리를 위한 일관된 방법을 지원. JDBC, JTA등 어떤 트랜잭션을 사용하던 설정을 통해 정보를 관리하므로 트랜잭션 구현에 상관없이 동일한 코드 사용가능&lt;/li&gt;
  &lt;li&gt;영속성(persistence)과 관련된 다양한 API 지원. Spring은 MyBatis, Hibernate 등 데이터베이스 처리를 위한 ORM(Object Relational Mapping) 프레임워크들과의 연동 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spring-프레임워크를-구성하는-기능-요소&quot;&gt;Spring 프레임워크를 구성하는 기능 요소&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53680170-e0b65300-3d1a-11e9-85ac-521c59e80b35.JPG&quot; alt=&quot;스프링프레임워크기능요소&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;core컨테이너:&lt;/li&gt;
  &lt;li&gt;spring프레임워크의 기본기능을 제공한다.&lt;/li&gt;
  &lt;li&gt;이 모듈에 있는 BeanFactory는 스프링 기본 컨테이너이면서 스프링 BI의 기반이다.\&lt;/li&gt;
  &lt;li&gt;AOP:&lt;/li&gt;
  &lt;li&gt;AOP 모듈을 통해 Aspect 지향 프로그래밍을 지원한다.&lt;/li&gt;
  &lt;li&gt;AOP모듈은 스프링 애플리케이션에서 Aspect를 개발할 수 있는 기반을 지원한다.&lt;/li&gt;
  &lt;li&gt;ORM:&lt;/li&gt;
  &lt;li&gt;MyBatis, Hibernate, JPA 등 널리 사용되는 ORM 프레임워크와의 연결고리를 제공한다.&lt;/li&gt;
  &lt;li&gt;ORM 제품들을 Spring의 기능과 조합해서 사용할 수 있도록 해준다.&lt;/li&gt;
  &lt;li&gt;DAO:&lt;/li&gt;
  &lt;li&gt;JDBC에 대한 추상화 게층으로 JDBC 코딩이나 예외처리 하는 부분을 간편화 시켰으며, AOP 모듈을 이용해 트랜잭션 관리 서비스도 제공한다.&lt;/li&gt;
  &lt;li&gt;WebMVC:&lt;/li&gt;
  &lt;li&gt;Mdodel, View, Controlller의 약어. 사용자 인터페이스가 애플리케이션 로직과 분리되는 웹 애플리케이션을 만드는 경우에 일반적으로 사용되는 패러다임이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sts소개-및-제공하는-기능&quot;&gt;STS소개 및 제공하는 기능&lt;/h1&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;stsspring-tool-suite&quot;&gt;STS(Spring Tool suite)&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681731-11a18280-3d31-11e9-95e9-4a1f605a91ff.JPG&quot; alt=&quot;spring_1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sprimg 개발업체인 SpringSource가 직접 만들어 제공하는 이클립스의 확장판으로 최신 이클립스를 기반으로 주요한 spring지원 플러그인과 관련된 도구를 모아서 Spring개발에 최적화 되도록 만들어진 IDE이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sts가-제공하는-기능&quot;&gt;STS가 제공하는 기능&lt;/h3&gt;
&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Bean클래스 이름 자동완성(완전,, 꿀기능 프젝 할때 왜 자동완성 되나 했더니 STS덕분이었구나…)&lt;br /&gt;현재 프로젝트의 모든 Source와 라이브러리, JDK안의 모든 클래스중에서 첫 글자가 SDD로 시작하는 클래스를 자동으로 보여줌
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681732-123a1900-3d31-11e9-95b4-4a886e1908e3.JPG&quot; alt=&quot;spring_2&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;xml 설정 파일초기 생성시 생성 위저드 제공&lt;br /&gt; Bean 설정파일 생성 위저드중 사용할 Namespace와Schema 버전을 선택하는 화면을 제공
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681733-123a1900-3d31-11e9-8ec1-84ddac3d860c.JPG&quot; alt=&quot;spring_3&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bean 의존관계 그래프&lt;br /&gt;Spring IDE는 XML 설정파일을 읽어서 자동으로 그래프 그려줌&lt;br /&gt;각 Bean이 어떻게 참조되고, 어떤 Property를 갖는지 알 수 있음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681734-123a1900-3d31-11e9-8a4d-6f6746f78a01.JPG&quot; alt=&quot;spring_4&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;AOP적용 대상 표시&lt;br /&gt; Spring IDE의 XML 설정파일 편집기를 이용하면 AOP의 적용대상을 손쉽게 확인할 수 있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681735-12d2af80-3d31-11e9-958a-0f260e7536c8.JPG&quot; alt=&quot;spring_5&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;maven과-library-관리&quot;&gt;Maven과 Library 관리&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;maven&quot;&gt;Maven?&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;http://maven.apache.org 라이브러리 관리 + 빌드 툴&lt;/li&gt;
  &lt;li&gt;편리한 Dependent Library 관리가 가능하고 여러 프로젝트에서 프로젝트 정보나 jar파일들을 공유하기 쉬우며 모든 프로젝트의 빌드 프로세스를 일관되게 가져갈 수 있음&lt;/li&gt;
  &lt;li&gt;한마디로 pom.xml에 서술하는거만 편집하면 maven의존성 라이브러리 관리가 가능! 저장 하면 바로 빌드까지 됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pomxml&quot;&gt;pom.xml?&lt;/h3&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Maven 프로젝트를 생성하면 pom.xml 파일이 생성된다.&lt;/li&gt;
  &lt;li&gt;pom.xml 파일은 Project Object Model 정보를 담고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681846-76111180-3d32-11e9-9c0c-5b0bdab6883f.JPG&quot; alt=&quot;pom_1&quot; /&gt;
&lt;br /&gt;
    &lt;h3 id=&quot;pomxml에-의존관계디펜던시-추가하는-법핵간단&quot;&gt;Pom.xml에 의존관계(디펜던시) 추가하는 법!(핵간단)&lt;/h3&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;http://mvnrepository.com 접근한다.&lt;/li&gt;
  &lt;li&gt;org.springframework로 검색한다.&lt;/li&gt;
  &lt;li&gt;spring-jdbc 모듈과 spring-web 모듈을 추가한다.(이외에도 아주 다양한 모듈 및 api  추가가능 ex.구글에서제공하는 json모듈이라던가, 다양한 모듈등!)&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681847-76111180-3d32-11e9-8f6e-6c9bdbaa8755.JPG&quot; alt=&quot;pom_2&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;그리고 아래와 같이 추가된 디펜던시 목록이 확인 가능하고 하이어라키(어떤 상하관계 구조로 이루어져있나) 확인 가능하다.
&lt;img src=&quot;https://user-images.githubusercontent.com/30023840/53681845-75787b00-3d32-11e9-8935-7c0ece6dc209.JPG&quot; alt=&quot;pom_3&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;스프링-프로젝트-시작해볼까&quot;&gt;스프링 프로젝트 시작해볼까?&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;핵간단하니까, 글로만 서술해보도록 하겠음. 이클립스 기준으로,&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java Project -&amp;gt; Convert to Maven Project -&amp;gt; Add Spring Project Nature&lt;/li&gt;
  &lt;li&gt;pom.xml 파일에 dependency 추가 (필요한 모듈들은 죄다 추가하시길! 구글검색하면서, 내가 원하는 어떠한 웹앱을 만들때 반드시 어떠한 모듈등이 필요하다~하면, 대부분 &lt;a&gt;https://mvnrepository.com&lt;/a&gt;여기에 다 있음. 찾아서 복붙하면 됨.)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="maven" /><category term="spring" /><category term="STS" /><category term="AOP" /><category term="DI" /><summary type="html">주요 개념소개/ STS소개 및 제공하는 기능, Maven과 Library, 프로젝트 시작</summary></entry><entry><title type="html">TIL시작</title><link href="https://seryuncheon.github.io//TIL1/" rel="alternate" type="text/html" title="TIL시작" /><published>2019-03-02T00:00:00+00:00</published><updated>2019-03-02T00:00:00+00:00</updated><id>https://seryuncheon.github.io//TIL1</id><content type="html" xml:base="https://seryuncheon.github.io//TIL1/">&lt;h2 id=&quot;딱-한달-잡고-nodejs와-리액트를-독학하여-프로젝트를-하나-더-만들기로-했다&quot;&gt;딱 한달 잡고 Node.js와 리액트를 독학하여 프로젝트를 하나 더 만들기로 했다.&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;그 전에, 날라져가는 스프링프레임워크 지식을 꾸역꾸역 다시 뇟속에 집어 넣기 위해서 스프링강의를 2틀에 걸쳐 듣고있는 중이다(WIP)이틀동안 쫙 복습하고 해당내용은 스프링프레임워크 메뉴에 기고 예정.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;우연히 창천향로 개발자님의 블로그글, 그리고 초보몽키개발자님의 블로그글을 보게됐다. 6개월간 매일 꾸준히 무언가를 한 그들이 얻어낸 결과물, 결실은 놀라웠다. 나는 6개월을 잡고 이번 TIL을 하는건 아니지만(?), 적어도 한달이상을 목표로 잡고있다. 왜냐. 한달동안 새 프로젝트를 만든 후, 포트폴리오를 다듬어서 다시 취업전선에 뛰어들 것이기 때문.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1년에 책을 40권도 넘게 읽던 시절도 있었는데(내게는 많은 수준) 지난 1년간 읽은 책은 우습게도 개발서적외에는 10권이 채 안된다. 그러다 보니 문장력, 독해력이 고등학생의 그것보다 못하게 떨어졌다. 억지로라도, 그리고 그보다는 자발적인 의지로 어나더라이프카테고리(주로 타인이 create한 책,신문기사,영화,에세이,인터뷰 등에 대해 올릴 용도로 만든 메뉴)에 한 장 이상 필사(?)라고 하긴 뭐하고 고대로 타이핑해서 글을 올릴 계획이다. 아무래도 직접 연필로 필사하는 것이 가장 좋긴 하나, 효율적으로 살기위하여(라고쓰고 사실은 게을러서) 키보드 타이핑으로 대체한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;약 한달간 많은 것이 바뀔수도 있고, 바뀌지 않을 수도 있다. 그러나 학원 수료 후 조금은 놓고있었던 나의 개발습관이 다시 다 돌아온다고만 해도 반은 성공이다. 동적SQL 및 쿼리문도 스스로 촥촥 짜고 구글링해서 어떤 api도 적용하고, 스프링 aop의 개념도 싹 다 이해하고 DB간에 외래키도 적용해서 erd전개도도 만들었던 그때 그 시절(?)의 나로 돌아가자. 할 수 있다. 인간은 마음먹은 만큼 성장한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;한달 후 쯤인 4월 중반엔, 분주하게 면접준비를 하고 두근거리는 마음으로 취업준비를 할 나를 그리며 TIL시작.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;어제인 3월1일 한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;지킬블로그를 구글검색엔진에 걸리게 설정함.&lt;a href=&quot;https://gmlwjd9405.github.io/2017/10/20/include-blog-in-a-GoogleSearchEngine.html&quot;&gt;참고한 블로그&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링강의를 듣고  정리한 포스팅을 1개함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아쉬운점: 현재 이 깃허브 블로그가 내가 제작한 테마로 만든 지킬블로그가 아니라, 아무리 매일 매번 commit을 해도 나의 깃허브에 1일 커밋으로 적용되지 않는다. 조만간 새로 블로그를 하나 파야하지 싶다 ㅜㅜ&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="TIL" /><category term="취준하며공부하는블로그" /><summary type="html">취업의지다질겸/공부복습겸/사생활적는 블로그</summary></entry></feed>