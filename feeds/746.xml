<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beomi's Tech Blog</title>
    <description>Beomi의 기술 블로그</description>
    <link>https://beomi.github.io/</link>
    <atom:link href="https://beomi.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 21 Apr 2019 15:26:22 +0900</pubDate>
    <lastBuildDate>Sun, 21 Apr 2019 15:26:22 +0900</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>AWS Lambda Layers로 함수 공통용 Python 패키지 재사용하기</title>
        <description>&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;올해 AWS Re:Invent에서 새로 발표된 기능 중 AWS Lambda에 새로운 전환점을 가져오는 기능이 발표되었습니다.&lt;/p&gt;

&lt;p&gt;바로 &lt;a href=&quot;https://aws.amazon.com/ko/about-aws/whats-new/2018/11/aws-lambda-now-supports-custom-runtimes-and-layers/&quot;&gt;Custom Runtime 지원과 Layers 지원이 추가&lt;/a&gt;된 것인데요, 
이번 글에서는 두가지 기능 중 “Layers” 기능에 대해 알아봅니다.&lt;/p&gt;

&lt;h2 id=&quot;lambda-layers가-무엇인가요&quot;&gt;Lambda Layers가 무엇인가요?&lt;/h2&gt;

&lt;p&gt;사실 아직까지 많은 정보가 나오지는 않았는데요, &lt;a href=&quot;https://aws.amazon.com/ko/about-aws/whats-new/2018/11/aws-lambda-now-supports-custom-runtimes-and-layers/&quot;&gt;Lambda Layers 추가 소개 문서&lt;/a&gt;를 살펴보면 
어떤 방식으로 동작하는지 대략적인 감을 잡을 수 있습니다.&lt;/p&gt;

&lt;p&gt;아래 글은 위 링크 내용 중 Lambda Layers에 대한 간략한 소개 부분입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lambda Layers are &lt;strong&gt;a new type of artifact that can contain arbitrary code and data&lt;/strong&gt;, and may be referenced by zero, one, or more functions at the same time. Lambda functions in a serverless application typically share common dependencies such as SDKs, frameworks, and now runtimes. With layers, you can centrally &lt;strong&gt;manage common components across multiple functions&lt;/strong&gt; enabling better code reuse. To use layers, you simply put your common code in a zip file, and upload it to Lambda as a layer. You then configure your functions to reference it. When a function is invoked, the layer contents become available to your function code. We are also providing a layer which includes the popular NumPy and SciPy scientific libraries for Python. … Read more about Lambda Layers in the &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&quot;&gt;AWS Lambda documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;핵심적인 부분을 &lt;strong&gt;bold&lt;/strong&gt; 처리 해 두었는데요, 위 내용은 다음과 같이 요약할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Lambda에 코드 만들어 올릴 때 매번 패키지(pip 패키지 등) 세트 만들어 올리는거 귀찮았지? 같은 Dependency 가지는 함수라면 코드만 따로 빼고 의존성 패키지는 Layers라는 곳으로 빼서 사용해!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 굉장히 편리해진 요소가 추가된 것이죠. 그렇다면 Layers는 어떻게 동작할까요?&lt;/p&gt;

&lt;h2 id=&quot;그래서-뭐가-바뀐건가요&quot;&gt;그래서 뭐가 바뀐건가요?&lt;/h2&gt;

&lt;h3 id=&quot;기존-lambda-packaging의-한계&quot;&gt;기존 Lambda Packaging의 한계&lt;/h3&gt;

&lt;p&gt;AWS에 익숙한 분이시라면 이미 아시겠지만 AWS Lambda는 굉장히 많은 제약을 가지고 있습니다. 서버리스라는 인프라 구조적 한계부터 시작해, &lt;strong&gt;코드 용량(현재 max 250MB)의 압박, I/O의 제약(/tmp에만 500MB)&lt;/strong&gt;, 그리고 Ram용량(3G)의 한계와 실행시간(15분)의 한계까지 굉장히 많은 한계가 있습니다.&lt;/p&gt;

&lt;p&gt;방금 언급한 부분 중 &lt;strong&gt;코드 용량(현재 max 250MB)의 압박, I/O의 제약(/tmp에만 500MB)&lt;/strong&gt;으로 인해 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;를 이용한 패키지 설치 등이 불가능하고, 동시에 운영체제에 의존해 빌드가 필요한 패키지 등의 경우는 사용이 굉장히 까다롭기까지 합니다. 그렇다면 지금까지는 어떻게 이 문제를 회피해 왔을까요?&lt;/p&gt;

&lt;p&gt;지금까지는 아래 과정을 통해 문제를 피해왔습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;한 폴더를 지정하고, 해당 폴더 내에 모든 패키지를 넣어본다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;로 설치한 &lt;code class=&quot;highlighter-rouge&quot;&gt;site-packages&lt;/code&gt;폴더를 통으로 프로젝트에 넣는다.) 단, 250MB 이내여야 한다.&lt;/li&gt;
  &lt;li&gt;만약 실패할 경우(C의존 라이브러리 등) Docker나 EC2를 이용해 AmazonLinux 운영체제에서 빌드한 뒤 해당 의존성 패키지들을 한 폴더에 같이 넣는다.&lt;/li&gt;
  &lt;li&gt;위 상황에서 압축 해제시 250MB가 넘는다면 strip등을 이용해 필요없는 파일을 제거하거나 파일 용량을 압축하는 등 용량을 줄인다.&lt;/li&gt;
  &lt;li&gt;그래도 용량이 넘친다면 패키지를 반으로 쪼개고, Lambda 함수가 실행될 때 s3에서 두번째 패키지를 다운받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;에 압축을 풀어 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사실 AWS Lambda Layers가 추가된 지금도 여전히 위 제약들은 그대로 살아있습니다. ㅠㅠ&lt;/p&gt;

&lt;p&gt;하지만 위 과정에서 필요했던 여러 과정을 줄일 수 있게 됩니다. 예를들어 한 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;라는 라이브러리를 사용하고 있었고, 다른 함수에서도 해당 라이브러리를 사용하려고 한다고 가정해 봅시다. 
기존에는 Lambda 함수를 만들 때 마다 해당 라이브러리 코드와 의존성 모듈들을 소스코드와 함께 묶어 업로드를 진행해야 했습니다. 상당히 귀찮은 일이죠.&lt;/p&gt;

&lt;p&gt;그런데 Lambda Layers가 나오면서 이런 이슈가 엄청나게 줄어들었습니다. 그렇다면 Lambda Layers가 대체 어떤 일을 해주기에 일이 줄어든 걸까요?&lt;/p&gt;

&lt;h3 id=&quot;lambda-layers는-어떻게-작동하나요&quot;&gt;Lambda Layers는 어떻게 작동하나요?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&quot;&gt;공식 문서: Lambda Layers 설정하기&lt;/a&gt;에서는 Lambda Layers가 아래와 같이 작동한다고 말합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Layers are extracted to the /opt directory&lt;/strong&gt; in the function execution environment. Each runtime looks for libraries in a different location under /opt, depending on the language. Structure your layer so that function code can access libraries without additional configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가장 중요한 부분은 “Layers가 하나의 ‘압축 파일’이며, &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt; 폴더에 압축해제되는 것”입니다. 즉, Layers가 뭔가 특별한 것이 아니라 압축파일 하나를 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt; 폴더에 풀어준다는 것 뿐입니다. 이렇게 말만 들으면 기존 방식가 뭐가 다르지? 하는 의문이 생길 수 있습니다. 하지만 앞서 나온 소개와 맞물리며 이야기가 조금 달라집니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Layers let you keep your deployment package small, which makes development easier. You can avoid errors that can occur when you install and package dependencies with your function code. For Node.js, Python, and Ruby functions, &lt;strong&gt;you can develop your function code in the Lambda console as long as you keep your deployment package under 3 MB&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;작년 Amazon이 &lt;code class=&quot;highlighter-rouge&quot;&gt;c9.io&lt;/code&gt; 서비스를 인수하며 Lambda 서비스 업데이트에 추가되었던 기능 중 하나가 바로 &lt;strong&gt;Lambda 콘솔에서 곧바로 코드 수정이 가능&lt;/strong&gt;해졌다는 것입니다. 
하지만 이 방식으로 코드를 수정하려면 해당 Lambda 함수의 패키지 크기가 3MB 이하여야 했다는 점인데요, 
기존 방식으로 모든 의존성 패키지들을 압축해서 사용한다면 3MB는 정말 작고도 작은 크기입니다. 
단순히 typo 하나 수정을 위해서 패키지를 빌드하는 과정을 다시 반복해야 하는 것은 개발자에게 굉장한 고통으로 다가오는 것인데,
용량을 조금 많이 사용하기 위해서 패키징을 했더니 Lambda console에서 코드 수정이 불가능해진 것이죠.&lt;/p&gt;

&lt;p&gt;심지어 기존에는 코드와 모듈들을 합쳐서 압축한 zip파일 크기가 50MB가 넘어가는 경우에는 AWS Console상에서 업로드 하는 것도 불가능해서 S3에 올린 뒤 해당 S3의 경로를 Lambda 콘솔에 붙여넣기 해주어야 했습니다. 
(심지어 자동완성도 불가능해서 매번 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;s3://~~~&lt;/code&gt;하는 주소를 복사-붙여넣기 해야 했죠!)&lt;/p&gt;

&lt;p&gt;그렇다면 Lambda Layers가 등장하면 어떻게 바뀌는 것일까요?&lt;/p&gt;

&lt;p&gt;우선 의존성 패키지를 압축하는 것은 동일합니다. 단, 기존에는 &lt;strong&gt;소스코드를 함께 패키징&lt;/strong&gt;했다면 이제는 &lt;strong&gt;의존성 모듈만 패키징&lt;/strong&gt;하게 된다는 것이 가장 달라지는 점입니다.&lt;/p&gt;

&lt;p&gt;이렇게 되면 소스코드는 처음 업로드 할 때만 zip파일로 압축해 업로드하고 이후 수정시에는 AWS Lambda Console에서 곧바로 수정 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;lambda-layers는-어떻게-사용하나요&quot;&gt;Lambda Layers는 어떻게 사용하나요?&lt;/h2&gt;

&lt;h3 id=&quot;lambda-함수로-만들-코드-작성하기&quot;&gt;Lambda 함수로 만들 코드 작성하기&lt;/h3&gt;

&lt;p&gt;아주아주 간단하고 심플한 크롤링 코드를 Lambda에 올려 사용한다고 가정해봅시다. 해당 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;bs4&lt;/code&gt;라는 모듈을 사용합니다. 
이 블로그를 긁어 &lt;code class=&quot;highlighter-rouge&quot;&gt;h1&lt;/code&gt;태그 하나의 글자를 가져와봅시다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# TODO implement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://beomi.github.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog_title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로컬에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bs4&lt;/code&gt;가 설치된 상태에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda_handler&lt;/code&gt; 함수를 실행시 결과는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Beomi's Tech Blog&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 아무런 준비 없이 AWS Lambda 콘솔에서 위 코드를 저장하고 실행하면 아래와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;No module named 'requests'&lt;/code&gt; 에러가 납니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Response:
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;errorMessage&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Unable to import module 'lambda_function'&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

...

Unable to import module &lt;span class=&quot;s1&quot;&gt;'lambda_function'&lt;/span&gt;: No module named &lt;span class=&quot;s1&quot;&gt;'requests'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 에러 메시지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;라는 모듈을 찾을 수 없다는 파이썬 에러입니다. 당연히 설치되어있지 않기 때문에 에러가 발생합니다. Lambda Layers를 이용해 이 이슈를 해결해봅시다.&lt;/p&gt;

&lt;h3 id=&quot;크롤링-의존-패키지들-lambda-layers로-만들기&quot;&gt;크롤링 의존 패키지들 Lambda Layers로 만들기&lt;/h3&gt;

&lt;p&gt;이제 AWS Lambda Console을 켜 줍시다. Lambda 서비스 항목 중 “계층” 혹은 Layers를 누르고 “계층 생성”을 눌러줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.03.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 새로운 Lambda Layer를 생성하는 창이 뜹니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.13.12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;bs4&lt;/code&gt;가 들어있는 zip 압축파일을 업로드해야 하는데요, 크롤링을 위한 패키지가 아래 Github Repo에 준비되어 있습니다. 아래 Direct Download 링크를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;pack.zip&lt;/code&gt;파일을 받아 업로드 해주세요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Github Repo: &lt;a href=&quot;https://github.com/Beomi/aws-lambda-py3&quot;&gt;https://github.com/Beomi/aws-lambda-py3&lt;/a&gt;&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requests&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;bs4&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;lxml&lt;/code&gt; ; &lt;a href=&quot;https://media.githubusercontent.com/media/Beomi/aws-lambda-py3/master/requests_bs4_lxml/pack.zip&quot;&gt;Direct Download&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 Runtime으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;python3.6&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;python3.7&lt;/code&gt;를 선택해 줍시다. (여러분이 Layer를 만들때는 해당 Layer가 사용될 환경을 모두 선택해주세요.)&lt;/p&gt;

&lt;p&gt;업로드가 성공하면 아래와 같이 새로운 Lambda Layer가 생성됩니다. 참고로 각각의 Layer는 버전별로 수정이 불가능하고 만약 수정이 필요하다면 zip파일을 다시 올리고 새로운 리비전이 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.13.59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lambda-function-생성--layers-붙이기&quot;&gt;Lambda Function 생성 + Layers 붙이기&lt;/h3&gt;

&lt;p&gt;아래와 같은 방식으로 함수를 만들었다고 가정해 봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.17.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;함수 생성이 성공하면 다음과 같은 화면이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.18.37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Layers&lt;/code&gt;를 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;계층 추가&lt;/code&gt;를 눌러줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.19.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계층 추가를 진행시 다음과 같이 ‘런타임 호환’에서 선택한 뒤 방금 만들어준 Layer의 이름 + 버전(첫 버전이라 1)을 선택하고 연결을 눌러줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.22.37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Layer를 추가한 뒤에는 Console의 우측 상단의 저장 버튼을 눌러야만 Lambda Function이 저장됩니다.&lt;/p&gt;

&lt;p&gt;이제 Lambda 함수 코드를 수정해봅시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.25.45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기존에는 아래와 같은 샘플 코드가 들어있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# TODO implement&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello from Lambda!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;당연히 실행은 잘 되지만, 우리가 원하는 코드는 위에서 사용한 크롤링 코드입니다. 하지만 아래 버전은 제대로 동작하지 않습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;No module ~~&lt;/code&gt;이라고 하는 에러가 발생하게 되죠. 파이썬 모듈들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# TODO implement&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://beomi.github.io'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'html.parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blog_title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬은 기본적으로 현재 폴더, 그리고 실행하는 파이썬이 참고하는 PYTHON PATH들을 참고해 여러 패키지와 라이브러리를 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;합니다. 
Lambda Layers가 압축 해제된 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt&lt;/code&gt;폴더는 해당 PATH에 들어있지 않아 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;할 때 Python이 탐색하는 대상에 포함되지 않습니다.
대신, 우리가 방금 다운받은 패키지지 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; 폴더가 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/python&lt;/code&gt;에 압축이 해제되고 해당 폴더는 &lt;code class=&quot;highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; 환경변수 내에 포함되게 됩니다.&lt;/p&gt;

&lt;p&gt;이제 다시 더미 테스트를 실행해보면 다음과 같이 결과가 잘 나오는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-11-30%2018.35.13.png&quot; alt=&quot;테스트성공&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;맺으며&quot;&gt;맺으며&lt;/h2&gt;

&lt;p&gt;이번 글에서는 굉장히 가벼운 패키지들만 사용했지만 당장 &lt;code class=&quot;highlighter-rouge&quot;&gt;selenium&lt;/code&gt;을 이용하기 위해 PhantomJS 바이너리를 포함하는 경우 총 패키지 크기가 13MB를 넘어가게 됩니다. 
또한 AWS Lambda의 ‘250MB’ 크기 제약은 여전히 “한 함수의 소스코드 크기 + Layers 크기 합”으로 되어있기 때문에 Layer를 쪼개더라도 총 합이 ‘250MB’로 걸린다는 점은 아쉽습니다. (얼른 용량을 늘려라 AWS 일해라 AWS)&lt;/p&gt;

&lt;p&gt;다만 일상적인 수정이 필요한 경우, 그리고 Proof of concept 같은 상황에서 Lambda 환경을 테스트하기 위해서는 이 글에서 소개한 AWS Lambda Layers를 적극 활용해 보는 것이 좋을 것 같습니다. :)&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Nov 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/11/30/using-aws-lambda-layers-on-python3/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/11/30/using-aws-lambda-layers-on-python3/</guid>
        
        
        <category>aws</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>GPU EC2 스팟 인스턴스에 Cuda/cuDNN와 Tensorflow/PyTorch/Jupyter Notebook 세팅하기</title>
        <description>&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;Tensorflow나 PyTorch등을 사용하며 딥러닝 모델을 만들고 학습을 시킬 때 GPU를 사용하면 CPU만 사용하는 것에 비해 몇배~몇십배에 달하는 속도향상을 얻을 수 있다는 것은 누구나 알고 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 비싼 GPU를 사용하고 낯선 리눅스 환경을 이용하기도 합니다. 하지만 실제로 GPU, 특히 Cuda를 이용한 GPU가속을 세팅하고 cuDNN등을 통해 각 머신러닝 라이브러리에서 속도를 향상시키려고 할 때는 항상 무언가 문제가 발생합니다. 물론 Floydhub혹은 AWS SageMaker와 같이 이미 GPU 가속 환경이 마련되어있는 경우는 필요가 없지만, GPU 인스턴스의 시간당 요금 자체가 상당히 높습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;k80&lt;/code&gt; GPU를 제공하는 경우 시간당 약 1~2달러의 비용이 발생합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;조금이라도 저렴하게 GPU를 사용하고, 한번 설정된 GPU 인스턴스를 그대로 유지하기 위해 스팟 인스턴스를 사용해 봅시다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;오늘자(2018.03.18)기준 p2.xlarge(CPU 4 Core / RAM 60GB / GPU k80) 스팟 인스턴스 가격은 시간당 0.4395달러입니다. (원래 1.4650달러로, 70% 저렴하게 사용 가능합니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;만들기&quot;&gt;만들기!&lt;/h2&gt;

&lt;p&gt;이번 글에서는 Ubuntu 16.04 LTS 위에 아래 패키지와 라이브러리들을 설치하는 내용을 다룹니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python 3.5&lt;/li&gt;
  &lt;li&gt;Tensorflow 1.6.0 (GPU)&lt;/li&gt;
  &lt;li&gt;PyTorch 0.3.1 (GPU)&lt;/li&gt;
  &lt;li&gt;CUDA 9.0&lt;/li&gt;
  &lt;li&gt;cuDNN 7.0.5 (for CUDA 9.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;우분투-업데이트&quot;&gt;우분투 업데이트&lt;/h3&gt;

&lt;p&gt;우선 EC2를 처음 띄웠으니 패키지들을 모두 최신버전으로 업데이트 해 줍시다. 만약 작업 중 Dependencty 패키지의 버전을 업데이트 할 것이냐는 질문이 나오면 ‘로컬 버전 사용하기’를 눌러줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2017.06.44.png&quot; alt=&quot;sudo apt-get&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 스크린샷과 같이 아래 명령어를 입력하고 잠시 기다리면 우분투 패키지가 모두 업데이트됩니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pip3-설치하기&quot;&gt;pip3 설치하기&lt;/h3&gt;

&lt;p&gt;Ubuntu16.04에는 Python3이 기본적으로 설치되어있지만 pip3은 설치되어있지 않습니다. 아래 명령어로 설치해 사용해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cuda-gpu-확인하기-optional&quot;&gt;CUDA GPU 확인하기 (Optional)&lt;/h3&gt;

&lt;p&gt;현재 ubuntu에 붙어있는 GPU가 있는지 확인하려면 아래 명령어를 이용해 확인해 볼 수 있습니다. 물론 AWS p2 인스턴스로 띄우셨다면 당연히 CUDA를 지원하는 그래픽 카드가 붙어 있습니다 :)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lspci | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; nvidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 아래 스크린샷과 같이 GPU가 나온다면 이 환경에서는 Cuda 가속을 이용할 수 있습니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2017.29.33.png&quot; alt=&quot;CUDA 지원GPU 확인하기&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cuda-toolkit-90-설치하기&quot;&gt;CUDA Toolkit 9.0 설치하기&lt;/h3&gt;

&lt;p&gt;CUDA를 사용하기 위해서 CUDA Toolkit 9.0을 설치해야 합니다. 아래 명령어를 하나씩 입력해 실행해주세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nvidia Debian package Repo 등록 패키지 다운로드&lt;/span&gt;
wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.0.176-1_amd64.deb
&lt;span class=&quot;c&quot;&gt;# Nvidia APT 키 등록하기&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key adv &lt;span class=&quot;nt&quot;&gt;--fetch-keys&lt;/span&gt; http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
&lt;span class=&quot;c&quot;&gt;# Nvidia Repo APT 등록하기&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; cuda-repo-ubuntu1604_9.0.176-1_amd64.deb
&lt;span class=&quot;c&quot;&gt;# Cuda 9.0 설치하기&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install cuda-9-0
&lt;span class=&quot;c&quot;&gt;# Cuda ToolKit 설치하기 (nvcc)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install nvidia-cuda-toolkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;한줄씩 입력하면 약간의 시간이 지난 뒤 CUDA 9.0 설치가 끝납니다. 그리고 작업 중 추가적으로 그래픽카드 드라이버 최신버전도 함께 설치되기 때문에 그래픽 드라이버는 따로 설치하지 않아도 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 무언가 문제가 발생한다면 &lt;a href=&quot;https://developer.nvidia.com/cuda-90-download-archive?target_os=Linux&amp;amp;target_arch=x86_64&amp;amp;target_distro=Ubuntu&amp;amp;target_version=1604&amp;amp;target_type=debnetwork&quot;&gt;Nvidia CUDA Toolkit 9.0 Downloads&lt;/a&gt;를 참고하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cudnn-705-설치하기&quot;&gt;cuDNN 7.0.5 설치하기&lt;/h3&gt;

&lt;p&gt;cuDNN을 사용하기 위해서는 Nvidia Developer Membership에 가입해야 합니다. 가입은 nvidia 개발자 사이트에서 진행할 수 있으며, &lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot;&gt;cuDNN Download Page&lt;/a&gt;에서 바로 가입하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;이미 계정이 있다면 &lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot;&gt;cuDNN Download Page&lt;/a&gt;에서 cuDNN 7.0.5 for CUDA 9.0을 클릭해 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2017.45.59.png&quot; alt=&quot;cuDNN 7.0.5 클릭&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 아래 스크린샷처럼 cuDNN v7.0.5 Library for Linux를 클릭해 주시면 파일이 다운로드 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2017.47.46.png&quot; alt=&quot;클릭 후&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 우리는 cuDNN을 서버에서 사용할 것이기 떄문에 해당 링크 주소를 복사해 사용해야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 단순히 링크를 복사해 사용하면 403 Forbidden 에러가 뜹니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2017.52.11.png&quot; alt=&quot;cuDNN download url 복사하기&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서 위와 같이 파일의 다운로드 경로를 복사해옵시다. 경로를 복사하면 아래와 같이 복잡한 문자열이 붙은 URL이 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 예시 URL&lt;/span&gt;
http://developer.download.nvidia.com/compute/machine-learning/cudnn/secure/v7.0.5/prod/9.0_20171129/cudnn-9.0-linux-x64-v7.tgz?t8V0cLo2oAM-UT86ONPbFAF6Gae61AEK5a9KdkSzG9M5slquBxMffldmWEC8cNHOKiCpQWJx9WXgt6mKaFnDpq_zGVxVGTNyajaGQv4nQef2W0CBpe8Y9NKRycBGUF8k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 얻어온 URL을 이용해 cuDNN을 서버에 다운로드 받아줍시다. 아래 명령어로 위 링크를 다운로드받아줍시다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget 위에서_받아온_URL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다운로드가 완료되면 아래 명령어를 차례대로 입력해 주세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv cudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; cudnn.tgz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzvf&lt;/span&gt; cudnn.tgz
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cp cuda/include/cudnn.h /usr/local/cuda/include
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;cp cuda/lib64/libcudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/cuda/lib64
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Tensorflow와 PyTorch를 설치해줍시다.&lt;/p&gt;

&lt;h3 id=&quot;tensorflow-gpu-설치하기&quot;&gt;Tensorflow-GPU 설치하기&lt;/h3&gt;

&lt;p&gt;Tensorflow의 GPU버전도 pip3으로 쉽게 설치할 수 있습니다. 아래 명령어를 입력해 Tensorflow를 설치해주세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install tensorflow-gpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pytorch-gpu-설치하기&quot;&gt;PyTorch-GPU 설치하기&lt;/h3&gt;

&lt;p&gt;PyTorch 역시 pip3으로 설치할 수 있습니다. 아래 명령어를 통해 PyTorch를 설치해주세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install http://download.pytorch.org/whl/cu90/torch-0.3.1-cp35-cp35m-linux_x86_64.whl 
pip3 install torchvision &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jupyter-notebook-설치-및-설정&quot;&gt;Jupyter Notebook 설치 및 설정&lt;/h3&gt;

&lt;p&gt;SSH만으로 작업하는 대신 Jupyter Notebook 서버를 띄워 이용해봅시다.&lt;/p&gt;

&lt;h4 id=&quot;설치&quot;&gt;설치&lt;/h4&gt;

&lt;p&gt;아래 명령어로 Jupyter Notebook을 설치해주세요.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install jupyter &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;서버-설정&quot;&gt;서버 설정&lt;/h4&gt;

&lt;p&gt;Jupyter를 띄우고 패스워드로 접속하기 위해서는 아래 스크린샷처럼 설정파일을 만든 뒤 패스워드를 생성해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2018.30.44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설정 파일 생성은 다음 명령어로 쉽게 만들 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook &lt;span class=&quot;nt&quot;&gt;--generate-config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 원격 서버에서 접속할 때는 Jupyter Notebook의 토큰을 확인하기 어렵기 때문에 토큰 대신 지정한 패스워드를 이용하도록 바꿔줍시다.&lt;/p&gt;

&lt;p&gt;먼저 패스워드를 생성해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jupyter Notebook은 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;에서의 요청만을 받습니다. 즉, 원격 브라우저에서의 접속이 기본적으로 되어있습니다. 따라서 이 설정값을 바꿔줍시다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# localhost가 아닌 모든 ip를 듣기 &lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/#c.NotebookApp.ip = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/c.NotebookApp.ip = '&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; ~/.jupyter/jupyter_notebook_config.py
&lt;span class=&quot;c&quot;&gt;# 자동으로 브라우저 켜는 기능 끄기&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/#c.NotebookApp.open_browser = True/c.NotebookApp.open_browser = False/'&lt;/span&gt; ~/.jupyter/jupyter_notebook_config.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;jupyter-notebook-데몬-서비스화&quot;&gt;Jupyter Notebook 데몬 서비스화&lt;/h4&gt;

&lt;p&gt;이제 Jupyter Notebook 설정이 끝났습니다. 하지만 매번 서버를 켤 때마다 터미널에서 Jupyter Notebook을 켜고 작업하기는 귀찮으니 Deamon화를 해 봅시다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkdir /usr/lib/systemd/system
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;touch /usr/lib/systemd/system/jupyter.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt; 등 편집기를 이용해 아래 내용을 넣어줍시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Jupyter Notebook

[Service]
Type=simple
PIDFile=/run/jupyter.pid
ExecStart=/home/ubuntu/.local/bin/jupyter-notebook --config=/home/ubuntu/.jupyter/jupyter_notebook_config.py
User=ubuntu
Group=ubuntu
WorkingDirectory=/home/ubuntu/
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 아래 네가지 명령어를 입력해주시면 Jupyter Notebook이 서비스로 띄워진 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;jupyter.service
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart jupyter.service
systemctl &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ec2-접속해-확인하기&quot;&gt;EC2 접속해 확인하기&lt;/h3&gt;

&lt;p&gt;이제 해당 EC2로 들어가봅시다. 처음에 비밀번호를 입력하라고 뜨면 위에서 Jupyter Notebook 패스워드로 설정해준 값을 넣어 들어가봅시다.&lt;/p&gt;

&lt;p&gt;GPU 가속까지 설정이 잘 된 것을 볼 수 있습니다. Yeah!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2019.07.06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 만든 EC2에 &lt;code class=&quot;highlighter-rouge&quot;&gt;8888&lt;/code&gt; 포트를 Security Group에서 열어줘야 접근이 가능합니다. 혹시 접근이 되지 않는다면 Security Group을 확인하세요! 기본적으로 부여되는 Security Group은 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;커스텀-ami-만들기&quot;&gt;커스텀 AMI 만들기&lt;/h2&gt;

&lt;p&gt;EC2를 새로 생성할 때는 커스텀 AMI를 사용해 띄울 수 있습니다. 커스텀 AMI는 EC2 볼륨 스냅샷을 기반으로 생성됩니다. 우리가 사용할 GPU 가속된 딥러닝 환경이 모두 세팅되었으니 이제 이 인스턴스의 볼륨을 스냅샷으로 찍어 새로 만드는 볼륨은 항상 이 스냅샷에서 시작하도록 만들어줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2019.10.28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 스냅샷을 생성해 줍시다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2019.11.04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스냅샷 생성이 끝나면 AMI를 만들어줘야 합니다. 만들어진 스냅샷에 우측클릭을 하고 ‘이미지 생성’을 눌러주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2021.17.02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 ‘이름’을 적어주고, ‘가상화 유형’은 &lt;code class=&quot;highlighter-rouge&quot;&gt;하드웨어 보조 가상화&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;hvm&lt;/code&gt;을 선택하신 뒤 ‘생성’을 눌러주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2021.19.14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;주의: 가상화 유형에서 반가상화 (PV)를 선택하시면 EC2 인스턴스를 띄우실 수 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;시간이 조금 소요된 후 AMI가 성공적으로 생성되면 아래와 같이 ‘내 AMI’ 목록에 방금 만들어준 이미지가 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2021.28.40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 생성된 AMI는 다음과 같이 새로운 온디맨드 EC2를 실행하거나 혹은 스팟 인스턴스를 요청하는데 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-03-18%2021.29.55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;맺으며&quot;&gt;맺으며&lt;/h2&gt;

&lt;p&gt;이번 글에서는 AWS의 스팟 인스턴스를 통해 저렴한 (1/3도 안되는) 가격에 딥러닝을 위한 GPU 인스턴스를 띄우고 CUDA와 cuDNN, 그리고 Tensorflow와 PyTorch를 GPU 가속이 가능한 상태로 만드는 과정을 진행했습니다.&lt;/p&gt;

&lt;p&gt;마지막 AMI를 만드는 과정까지 진행하시면 필요할 때 마다 온디맨드 혹은 스팟 요청을 통해 새로운 EC2를 켜더라도 이미 모델 개발을 위한 환경이 구축된 상태로 작업을 진행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다만 스팟 요청은 EC2가 생성될 경우 매번 새로운 EBS(스토리지)를 생성하기 때문에 저 상태에서 사용했던 데이터가 유실됩니다. 따라서 재사용하고자 하는 데이터의 종류에 따라 다른 선택을 해야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자주 사용하는 패키지를 모두 깔아두고 싶으신 경우:
앞서 진행했던 ‘스냅샷 생성’ =&amp;gt; ‘AMI 생성’ 과정을 진행하기 전, 미리 패키지를 모두 깔아 두신 뒤 스냅샷과 AMI를 생성하시면 됩니다.
사용한 데이터셋과 모델 파일 등은 유실되지만 패키지를 재설치할필요는 없습니다.&lt;/li&gt;
  &lt;li&gt;데이터도 보존하고 싶은 경우:
현재 EC2를 만들 때 기존의 볼륨을 루트 디바이스로 붙이지는 못합니다. 또한 스팟 인스턴스에는 남는 볼륨(EBS)도 붙이지 못하기 때문에 이런 경우에는 스팟 인스턴스 대신 다른 전략을 사용해야 합니다. 
즉, 일반 온디맨드 EC2로 켜야 합니다. 다만 온디맨드 인스턴스에는 CloudWatch를 이용해 n분 이상 idle 상태인 경우 인스턴스를 중지시켜 요금을 줄이는 방법이 있습니다.&lt;/li&gt;
  &lt;li&gt;데이터도 보존하고싶고 스팟인스턴스도 사용하고 싶은 경우:
매 종료 전 AMI를 새로 생성하고 종료하면 되지만, s3 공간을 낭비하고 이 시간 자체가 비용이 되기 때문에 추천하지 않습니다 :(&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/03/18/Create_GPU_spot_EC2_for_ML/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/03/18/Create_GPU_spot_EC2_for_ML/</guid>
        
        
        <category>python</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Django: Truncated or oversized response headers received from daemon process 에러 해결법</title>
        <description>&lt;h2 id=&quot;문제-발생-환경&quot;&gt;문제 발생 환경&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;OS: Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;Python 3.5.2&lt;/li&gt;
  &lt;li&gt;Django 2.0.2&lt;/li&gt;
  &lt;li&gt;Apache HTTPd 2.4&lt;/li&gt;
  &lt;li&gt;numpy / Pandas / pymssql 등 사용중&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제의-발생&quot;&gt;문제의 발생&lt;/h2&gt;

&lt;p&gt;장고 배포를 마친 뒤 배포 서버에 접속시 화면이 뜨지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt;에러가 났던 상황.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Timeout when reading response headers from daemon process &lt;span class=&quot;s1&quot;&gt;'djangoproject'&lt;/span&gt;: /home/ubuntu/djangoproject/djangoproject/wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 로그로 살펴보면 위와 같이 “Timeout when reading response headers from daemon process”이라는 문제가 발생했다.&lt;/p&gt;

&lt;h2 id=&quot;문제-원인&quot;&gt;문제 원인&lt;/h2&gt;

&lt;p&gt;Numpy나 Pandas와 같은 C 의존 라이브러리들은 파이썬 인터프리터 중 메인 인터프리터에서 사용해야 한다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_wsgi&lt;/code&gt;등을 통해 생성된 서브 인터프리터를 사용할 경우 GIL로 인한 Deadlock이 발생하거나 정확하지 않은 결과, 혹은 파이썬 인터프리터의 예기치 못한 종료를 유발할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;해결법&quot;&gt;해결법&lt;/h2&gt;

&lt;p&gt;따라서 WSGI Application에서 사용할 파이썬 인터프리터에다 시스템의 메인 인터프리퍼를 지정해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/apache2.conf&lt;/code&gt; 경로의 파일 제일 아래에 아래 코드를 추가해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WSGIApplicationGroup %{GLOBAL}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 추가해 준 뒤 Apache2를 재시작(&lt;code class=&quot;highlighter-rouge&quot;&gt;service apache2 restart&lt;/code&gt;)한다.&lt;/p&gt;

&lt;h2 id=&quot;refs&quot;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverfault.com/questions/844761/wsgi-truncated-or-oversized-response-headers-received-from-daemon-process&quot;&gt;(Serverfault) WSGI : Truncated or oversized response headers received from daemon process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40413171/django-webfaction-timeout-when-reading-response-headers-from-daemon-process/40414207#40414207&quot;&gt;(Stackoverflow) Django Webfaction ‘Timeout when reading response headers from daemon process’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverfault.com/questions/514242/non-responsive-apache-mod-wsgi-after-installing-scipy/514251#514251&quot;&gt;(Serverfault) Non-responsive apache + mod_wsgi after installing scipy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/archive/p/modwsgi/wikis/ApplicationIssues.wiki#Python_Simplified_GIL_State_API&quot;&gt;(Google Code) summary Common problems with WSGI applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Mar 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/03/09/Truncated_or_oversized_response_headers_received_from_daemon_process_django_wsgi/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/03/09/Truncated_or_oversized_response_headers_received_from_daemon_process_django_wsgi/</guid>
        
        
        <category>python</category>
        
        <category>django</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>PySpark: 손상된 parquet파일 무시하기</title>
        <description>&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;PySpark를 이용해 파일을 읽어와 DataFrame 객체로 만드는 경우 읽어오는 파일이 parquet 파일이라면 이 파일이 어떤 형식으로 되어있는지(어떤 Column/Type으로 이루어져있는지)에 대한 정보를 필요로 합니다.&lt;/p&gt;

&lt;p&gt;보통 parquet파일에 이 파일에 대한 스키마가 저장되어있어 파일을 읽고 쓰는데 지장이 없습니다. 하지만 간혹 parquet파일이 깨져있는 경우가 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# spark 는 SparkSession 객체&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/brokenfile.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Broken!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parquet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# SparkException!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 코드를 실행할 경우 아래와 같이 깨진 파일이 속한 parquet파일들을 읽으려 할 경우 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.spark.SparkException&lt;/code&gt;이 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-02-26 PM 2.54.19.png&quot; alt=&quot;SparkException&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로그를 살펴보면 “Could not read footer for file” 이라는 문구가 보입니다. 즉, parquet파일의 footer가 손상되어 파일을 읽어오지 못합니다. 하지만 이 파일 하나만 문제가 있다 하더라도 전체 과정이 멈춰버립니다. 더 심각한 문제는 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;*path&lt;/code&gt;중 첫 번째 파일의 footer가 정상적이었다면 저 &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; 리스트 중 한 파일이 문제가 있다 하더라도 Spark의 lazy loading, lazy computing으로 인해 &lt;code class=&quot;highlighter-rouge&quot;&gt;.show()&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;.count()&lt;/code&gt;와 같이 실제 데이터가 필요한 코드를 실행하기 전까지는 데이터를 불러오지 않고 메타게이터만 연결된 DataFrame 객체를 사용하기 때문에 파이썬 코드들이 정상적으로 작동하더라도 실제 parquet파일이 깨졌다는 사실을 알 수가 없다는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal1.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 정상&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal2.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal3.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/brokenfile.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Broken!&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal4.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parquet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 정상적으로 실행된다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;우선 손상된 parquet파일을 무시하고 나머지 정상적인 파일이라도 불러와 DataFrame을 만들어봅시다.&lt;/p&gt;

&lt;p&gt;아래 설정은 스파크 세션을 생성할 때 설정값으로 넣거나, 혹은 세션을 만든 뒤 만들어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;spark&lt;/code&gt;와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;SparkSession&lt;/code&gt;객체에 설정으로 진행해도 됩니다. 이번에는 이미 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;spark&lt;/code&gt; 객체에 설정값을 바꿔 사용해봅니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;.read.parquet(*path)&lt;/code&gt;를 실행하기 전에 아래와 같이 설정을 넣어줍시다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.sql.files.ignoreCorruptFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 코드를 만들어 줍시다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal1.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 정상&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal2.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal3.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/brokenfile.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Broken!&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'s3a://some-bucket/normal4.parquet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spark.sql.files.ignoreCorruptFiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parquet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 정상적으로 실행된다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 무시된 파일의 데이터는 제외하고 나머지 파일의 데이터로 이루어진 정상적인 DataFrame객체가 생성됩니다.&lt;/p&gt;

&lt;h2 id=&quot;남은-문제&quot;&gt;남은 문제&lt;/h2&gt;

&lt;p&gt;만약 parquet파일의 리스트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;가 모두 손상된 파일로 이루어졌다면 아래와 같은 &lt;code class=&quot;highlighter-rouge&quot;&gt;AnalysisException&lt;/code&gt; 에러가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-02-26 PM 2.51.24.png&quot; alt=&quot;AnalysisException&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreCorruptFiles&lt;/code&gt; 옵션을 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 설정하고 작업을 진행할 경우 에러가 있는 파일 부분은 읽지 않아 만약 위와 같이 단 하나의 파일만 읽을 경우 빈 Spark DataFrame객체가 생성되는데, 이때 DataFrame의 Scheme이 없기 때문에(읽은 파일이 없으니까!) ‘Unable to infer schema for Parquet. It must be specified manually.;’ 라는 에러가 발생하게 됩니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Feb 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/02/26/PySpark-Read-Parquet-ignoreCorruptedFiles/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/02/26/PySpark-Read-Parquet-ignoreCorruptedFiles/</guid>
        
        
        <category>python</category>
        
        <category>pyspark</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>DjangoORM에서 SQL Driver 지정해 Query &amp; Pandas DataFrame 얻어내기</title>
        <description>&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;

&lt;p&gt;장고의 매력적인 기능 중 하나는 ORM을 통해 SQL을 직접 작성하지 않아도 된다는 점입니다. 즉, 우리가 파이썬 코드를 작성하면 모델 매니저와 SQL Driver를 거쳐 실제로 SQL문으로 만들어주는 일을 장고가 대신해줍니다.&lt;/p&gt;

&lt;p&gt;그리고 장고가 DB를 바라보는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;파일 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;DATABASE&lt;/code&gt;설정 통합니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;로 설정된 데이터베이스를 참고해 ORM을 제공합니다. 하지만 이점은 장고 프로젝트 하나에서 여러 데이터베이스를 바라보며 사용할 경우 문제가 발생합니다.&lt;/p&gt;

&lt;p&gt;만약 단순하게 모델의 특정 클래스만을 특정 데이터베이스를 바라보게 하려면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;를 작성할 수 있습니다.&lt;/p&gt;

&lt;p&gt;장고의 데이터베이스가 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherdb&lt;/code&gt;로 두개가 있다고 가정해 봅시다. &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;는 MySQL을, &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherdb&lt;/code&gt;는 MSSQL을 사용합니다. (SQL 문법이 비슷하지만 약간 다릅니다.)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# MYSQL&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'MYSQLDB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dbuser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dbpassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'OPTIONS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'sql_mode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'STRICT_TRANS_TABLES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'anotherdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sql_server.pyodbc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# MSSQL&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1.23.4.56'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'anotheruser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'anotherpassword'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같은 경우 모델 클래스별로 다른 DB를 사용하도록 커스텀 데이터베이스 라우터를 만들어 줄 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# settings.py 내&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;db_for_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_DATABASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;db_for_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_DATABASE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allow_relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_list&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_list&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allow_migrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASE_ROUTERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DatabaseRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;파일에서는 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;_DATABASE&lt;/code&gt;속성을 넣어주는 방법으로 라우터를 이용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# someapp/models.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_DATABASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'anotherdb'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 없으면 자동으로 'default' Fallback&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; 모델의 모델매니저를 통해 액세스 할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherdb&lt;/code&gt;를 이용하게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# anotherdb로 연결&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;하지만 문제가 발생하는 부분이 있습니다. 만약 Queryset을 통해 실제 동작하는 query와 params를 알아내 pandas에서 SQL Query를 읽어 DataFrame 객체로 바꾸는 경우에는 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;queryset.query&lt;/code&gt;로 쿼리에 접근하게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# QuerySet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_with_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# df는 Pandas의 DataFrame가 된다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'anotherdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; 모델의 속성중 &lt;code class=&quot;highlighter-rouge&quot;&gt;_DATABASE&lt;/code&gt;를 통해 커스텀 데이터베이스 라우터로 &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherdb&lt;/code&gt;를 바라보도록 만들어주었지만 실제 쿼리를 출력해 볼 경우 MSSQL 쿼리 대신 MySQL 쿼리로 나오는 것을 볼 수 있습니다. 따라서 동작시 에러가 발생합니다.&lt;/p&gt;

&lt;h2 id=&quot;해결법&quot;&gt;해결법&lt;/h2&gt;

&lt;p&gt;쿼리셋을 만들고 query 객체에 접근한 뒤 &lt;code class=&quot;highlighter-rouge&quot;&gt;.sql_with_params()&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;.as_sql()&lt;/code&gt;메소드를 이용해 &lt;code class=&quot;highlighter-rouge&quot;&gt;compiler&lt;/code&gt;옵션에 해당 데이터베이스의 SQLCompiler 클래스를 직접 전달해주거나 혹은 문자열로 경로를 지정해준 뒤, &lt;code class=&quot;highlighter-rouge&quot;&gt;connection&lt;/code&gt;에 실제 사용할 데이터베이스 명칭(&lt;code class=&quot;highlighter-rouge&quot;&gt;DATABASES&lt;/code&gt;의 키값, 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;가 됩니다.)을 넣어줍니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sql_server.pyodbc.compiler.SQLCompiler'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'anotherdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'anotherdb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 &lt;code class=&quot;highlighter-rouge&quot;&gt;df&lt;/code&gt;에 정상적으로 데이터가 들어온 DataFrame 객체가 만들어집니다.&lt;/p&gt;

&lt;h2 id=&quot;편하게-씁시다-함수-만들기&quot;&gt;편하게 씁시다, 함수 만들기&lt;/h2&gt;

&lt;p&gt;매번 저렇게 커넥션을 처리해주는 것도 사실 귀찮은 일입니다. 그래서 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;to_df&lt;/code&gt;라는 함수를 만들어 세가지 인자를 넣으면 처리할 수 있도록 해줍시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;queryset&lt;/code&gt;: 장고의 QuerySet 혹은 raw SQL(str)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt;에 등록한 DB이름(‘default’, ‘anotherdb’등)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compiler&lt;/code&gt;: 해당 DB의 SQLCompiler, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;를 통해 가져온 실제 SQLCompiler 클래스 혹은 해당 경로의 문자열&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.exceptions&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyResultSet&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# SQL이 문자열로 그대로 들어올 경우&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 어떤 DB를 사용할지 지정한다면..&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;con&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 어떤 SQLCompiler를 사용할지 지정한다면..&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;con&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_with_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyResultSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 만약 쿼리셋의 결과가 비어있다면 빈 DataFrame 반환&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 어떤 DB를 사용할지 지정했다면 해당 DB connection 이용&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_sql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 19 Feb 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/02/19/django_orm_for_multiple_db_with_sqldriver/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/02/19/django_orm_for_multiple_db_with_sqldriver/</guid>
        
        
        <category>django</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>user mode로 설치한 pip 패키지 PATH에 등록하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이번 글은 macOS 기준입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pip-유저모드&quot;&gt;pip 유저모드?&lt;/h2&gt;

&lt;p&gt;파이썬 패키지 매니저인 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;를 사용할 때 종종 이용하는 옵션이 &lt;code class=&quot;highlighter-rouge&quot;&gt;--user&lt;/code&gt;, 즉 사용자 디렉토리에 패키지 패키지를 설치하는 방법을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;처럼 권한 상승 없이 패키지들을 설치해 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이때 차이가 나는 부분은 저 패키지들이 어떤 디렉토리(폴더)에 설치되는지입니다.&lt;/p&gt;

&lt;p&gt;여러분이 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;를 통해 python3을 설치했다면 아래와 같이 파이썬이 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;에 설치되어있는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2018-02-12PM1.09.36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install ...&lt;/code&gt;와 같은 방식을 통해 패키지를 설치한다면 패키지들의 바로가기들이 저 폴더에 자리잡게 됩니다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;은 시스템 환경변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;에 기본적으로 등록되어있기 때문에 추가적인 설정 없이도 명령어들, 예를들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;fabric3&lt;/code&gt;을 설치했다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;fab&lt;/code&gt;와 같은 명령어들을 사용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;뭐가-문제인가요&quot;&gt;뭐가 문제인가요?&lt;/h2&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;--user&lt;/code&gt; 옵션을 통해 설치할 경우 패키지가 설치되는 경로는 위 경로 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Python/3.6/bin&lt;/code&gt;에 설치됩니다. (python3.6기준)&lt;/p&gt;

&lt;p&gt;하지만 해당 경로는 시스템 환경변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;에 등록되어있지 않아 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;fabric3&lt;/code&gt;을 설치했지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;fab&lt;/code&gt;명령어를 사용할 수 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/gif_2018-02-12-Add-packages-installed-with-pip-usermode-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;어떻게-해결하나요&quot;&gt;어떻게 해결하나요?&lt;/h2&gt;

&lt;p&gt;해결 방법은 간단합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Python/3.6/bin&lt;/code&gt;를 시스템 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 환경 변수에 추가해주면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;zsh를-사용하신다면&quot;&gt;zsh를 사용하신다면&lt;/h3&gt;

&lt;p&gt;zsh를 사용한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;파일에서 아래와 같이 입력해주면 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python3.5나 3.4를 사용한다면 숫자 &lt;code class=&quot;highlighter-rouge&quot;&gt;3.6&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;3.5&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;3.4&lt;/code&gt;로 버전에 맞게 바꿔 사용하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;/Users/$(whoami)/Library/Python/3.6/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bash를-사용하신다면&quot;&gt;bash를 사용하신다면&lt;/h3&gt;

&lt;p&gt;zsh를 사용한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;파일에서 아래와 같이 입력해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export PATH=&quot;/Users/$(whoami)/Library/Python/3.6/bin:$PATH&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 터미널을 종료한 뒤 다시 켜면 &lt;code class=&quot;highlighter-rouge&quot;&gt;fab&lt;/code&gt;등 명령어가 잘 실행되는 것을 볼 수 있습니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Feb 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/02/12/Add-packages-installed-with-pip-usermode/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/02/12/Add-packages-installed-with-pip-usermode/</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>ubuntu16에 pyldap 설치하기</title>
        <description>&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyldap&lt;/code&gt;라이브러리를 이용해 AD Proxy/LDAP서버에 연결하기 위해서는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;로만 설치하는 것 외에 사전으로 설치해야 하는 항목이 있다.&lt;/p&gt;

&lt;p&gt;만약 설치가 되어있지 않으면 아래와 같이 에러가 난다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In file included from Modules/LDAPObject.c:8:0:
Modules/errors.h:7:18: fatal error: lber.h: No such file or directory
compilation terminated.
error: &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x86_64-linux-gnu-gcc'&lt;/span&gt; failed with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;status 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install python3-dev &lt;span class=&quot;c&quot;&gt;# python3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install python3-pip &lt;span class=&quot;c&quot;&gt;# python3 pip3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install build-essential &lt;span class=&quot;c&quot;&gt;# for c/cpp build&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install libsasl2-dev
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install libldap2-dev
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;로 위 라이브러리 설치 후 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3&lt;/code&gt;으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;pyldap&lt;/code&gt;을 설치하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install pyldap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Feb 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/02/07/pyldap-on-ubuntu16/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/02/07/pyldap-on-ubuntu16/</guid>
        
        
        <category>ubuntu</category>
        
        <category>tips</category>
        
        <category>ldap</category>
        
      </item>
    
      <item>
        <title>django에 MSSQL 연결하기</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이번 글은 macOS에서 개발하는 경우입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Django와 MSSQL, 그리고 개발 환경이 macOS라면 상당히 연결해 사용하기 어려운 조합입니다.&lt;/p&gt;

&lt;p&gt;Django에서 MSSQL을 지원하는 라이브러리는 몇가지 있지만 &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/databases/#third-party-notes&quot;&gt;Django 공식 문서&lt;/a&gt;에서 MSSQL을 지원하는 ORM 라이브러리로 소개하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django-mssql&lt;/code&gt;의 경우 django 1.8까지만 지원하는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 현재(2018-02-02 기준) 가장 최신 장고 버전은 무려 &lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.2&lt;/code&gt;입니다. 상당히 오래된 버전만을 지원한다는 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 다른 라이브러리를 사용할 필요가 있습니다. 이번에는 Python3와 Django2.0을 모두 지원하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django-pyodbc-azure&lt;/code&gt;를 사용합니다.&lt;/p&gt;

&lt;h2 id=&quot;django-pyodbc-azure-설치하기&quot;&gt;django-pyodbc-azure 설치하기&lt;/h2&gt;

&lt;p&gt;django-pyodbc-azure는 pip를 통해 아래와 같이 설치할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install django-pyodbc-azure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;django-pyodbc-azure는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pyodbc&lt;/code&gt;라이브러리를 기반으로 장고 ORM을 이용할 수 있도록 만들어주는데, ODBC는 Native 드라이버를 필요로 하기 때문에 다음과 같이 여러 라이브러리를 설치해줘야 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이번 설치는 HomeBrew를 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install unixodbc
brew install freetds &lt;span class=&quot;nt&quot;&gt;--with-unixodbc&lt;/span&gt;

brew tap microsoft/msodbcsql https://github.com/Microsoft/homebrew-mssql-release
brew update
brew install &lt;span class=&quot;nt&quot;&gt;--no-sandbox&lt;/span&gt; msodbcsql
brew install mssql-tools
brew install autoconf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Django 프로젝트에 MSSQL을 연결해 사용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;django-settingspy-파일에-db-설정하기&quot;&gt;django settings.py 파일에 DB 설정하기&lt;/h2&gt;

&lt;p&gt;위에서 설치해준 django-pyodbc-azure는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sql_server.pyodbc&lt;/code&gt;라는 엔진 이름으로 django와 연동할 수 있습니다. 아래처럼 settings.py 파일 내 &lt;code class=&quot;highlighter-rouge&quot;&gt;DATABASE&lt;/code&gt;부분을 수정해주세요.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# settings.py 파일&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 앞뒤 코드 생략&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DataBase이름'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sql_server.pyodbc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DB의 IP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DB접근 ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'DB접근 PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 DB에 정상적으로 액세스 할 수 있다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;migrate&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;runserver&lt;/code&gt;등 장고 명령어가 성공적으로 실행됩니다.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Feb 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/02/02/Connect-django-to-MSSQL/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/02/02/Connect-django-to-MSSQL/</guid>
        
        
        <category>django</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>macOS 터미널에서 사용자이름 숨기기</title>
        <description>&lt;h2 id=&quot;before&quot;&gt;Before&lt;/h2&gt;

&lt;p&gt;우리가 macOS를 사용하고 터미널을 켜면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;username@computername&lt;/code&gt;와 같은 형식으로 나타납니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/2018-01-30-Hide-username-on-MAC-terminal/before.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이처럼 계정과 컴퓨터 이름이 나오는 경우 SSH와 같은 원격 접속시에는 어떤 계정으로 어떤 기기에 접속했는지 알 수 있기 때문에 편리하지만 로컬 개발 컴퓨터같은 경우에는 위와같은 정보가 터미널 앞에 붙어있으면 명령어가 길어질 경우 한 줄 내에 나오지 않을 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;macOS의 터미널 기본 너비는 80자(영문)입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;after&quot;&gt;After&lt;/h2&gt;

&lt;p&gt;위의 이유로 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 표시만 나오게 하면 좀 더 사용에 편리합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/2018-01-30-Hide-username-on-MAC-terminal/after.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;만약 여러분이 “beomi”라는 계정명을 사용중이라면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일에 코드를 추가해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/Screenshot%202018-02-04%2015.30.44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# DEFAULT_USER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;beomi&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 여러분이 계정명이 무엇인지 알지 못한다면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일에 코드를 추가해주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/Screenshot%202018-02-04%2015.34.43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# DEFAULT_USER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;whoami&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러분이 터미널을 종료하고 다시 켜면 After의 스크린샷처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;만 터미널에 나오게 됩니다.&lt;/p&gt;

</description>
        <pubDate>Tue, 30 Jan 2018 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2018/01/30/Hide-username-on-MAC-terminal/</link>
        <guid isPermaLink="true">https://beomi.github.io/2018/01/30/Hide-username-on-MAC-terminal/</guid>
        
        
        <category>macos</category>
        
        <category>tips</category>
        
      </item>
    
      <item>
        <title>2017년 회고 &amp; 블로그 연말정산</title>
        <description>&lt;h2 id=&quot;올해-2017년&quot;&gt;올해, 2017년.&lt;/h2&gt;

&lt;p&gt;올해는 정말 내게 큰 변화가 있던 한해였다. 특히 개발/프로그래밍쪽으로 다양한 기회를 여러가지 받게 되었고, 정말 많은 성장을 했다고 느낀다.&lt;/p&gt;

&lt;p&gt;올해를 월별로 정리해보자면…&lt;/p&gt;

&lt;h4 id=&quot;1월-djangogirls-seoul&quot;&gt;1월, DjangoGirls Seoul&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dgseoul-transparent-orange.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1월, 장고걸스 서울에 운영진으로 함께 시작하고 ‘나만의 웹크롤러 만들기’ 시리즈 연재를 시작했다. 그리고 작년 12월에 시작한 TDD 스터디도 함께 진행했다.&lt;/p&gt;

&lt;h4 id=&quot;2월-스터디--첫-외주&quot;&gt;2월, 스터디 &amp;amp; 첫 외주&lt;/h4&gt;

&lt;p&gt;2월, 장고를 이용해 교대 학생 대상으로 새로운 서비스를 오픈했다. 토이 프로젝트로 실제 배포까지 이뤄본 케이스. 이때 Vue를 처음 듣고 이용해보았다. 그리고 데이터분석 관련한 스터디도 진행해 데이터분석 분야에도 관심을 갖기 시작했다. 장고걸스 서울에서 장고 스터디를 운영하는 등 스터디를 다양하게 진행했다. 그리고 장고를 사용한 웹 사이트 개발을 하는 외주를 하나 받기도 했다. 처음으로 돈을 받고 개발을 하는 것이라 굉장한 부담이 되었지만 지금 생각해보면, 이때 약간의 자신감을 얻었다.&lt;/p&gt;

&lt;h4 id=&quot;3월-개강&quot;&gt;3월, 개강!&lt;/h4&gt;

&lt;p&gt;3월, 블로그 테마를 현재 테마로 바꾸고 웹 크롤러 시리즈를 조금씩 더 쌓아갔다. 그리고 React 기초를 조금씩 배워보려고 시작했다가, JS에 대해 이해가 없어(ES6와 Babel이 뭔지도 모르는 상황) 전혀 진도를 내지 못했다. 게다가 개강이 겹쳐 일정을 내기가 상당히 힘들어졌었다. TDD 스터디도 조금씩 사람이 빠져 3월에는 더이상 진행하지 못하고 마무리 되었다.&lt;/p&gt;

&lt;h4 id=&quot;4월-9xd&quot;&gt;4월, 9XD&lt;/h4&gt;

&lt;p&gt;4월, 9XD 8회 모임을 DevSisters에서 가지게 되었다. 사람들과 이야기를 나누며 느꼈던 것이 작년 말과 이때 내가 공부한 것과 만든 것의 큰 차이가 없다는 것이어서 약간 아쉬웠지만..(1Q에 대체 뭘했나..하던 생각) 그래도 글을 쓰고있는 지금 돌아보니 한 것이 조금은 있는것 같아보인다. :) 9XD 모임에서 발표하는 사람들을 보고 ‘아, 나도 저렇게 발표할 수 있을만큼 실력이 되면 좋겠다’ 라고 생각도 해보고 GraphQL에 대해 알게 되는 계기가 되기도 했다. 그리고 4월말 장고걸스 서울에서 격월 Meetup을 토즈에서 열었는데 생각보다 반응이 좋았다! 내가 사회를 맡았는데 진행에 사람들의 집중을 모으는 것이 어려워 약간 아쉬웠지만 전체적으로 굉장히 즐거운 모임이었다.&lt;/p&gt;

&lt;h4 id=&quot;5월-eth&quot;&gt;5월, ETH&lt;/h4&gt;

&lt;p&gt;5월, 학교 내 오버워치 대회를 마무리 했다. 우리과 친구들이 (나빼고) 다 잘해서 우승! 그리고 베를린 필하모닉 유로파 콘서트를 보고왔다.(메가박스에서 실시간 스트리밍으로 보여준다. 짱짱.) 그리고 3학년 1학기 실습도 다녀왔다. 학교 생활에 바빴던 5월. 이 기간에 비트코인과 이더리움이 급상승하고 주변에서 아는 사람들은 비트코인과 이더리움을 이야기하기 시작했다.(이때 샀어야 했는데) 이때 가격과 지금 가격이 10배 차이(…) 그리고 5월에 있었던 4회 파이썬 격월 세미나에서 “굥대생의 Hello World!”라는 제목으로 발표를 진행했다. 이 발표는 ‘내가 어떻게 개발을 시작하게 되었나’ 였는데, 지금 글을 쓰는 12월에 돌아보면 이 사이에 정말 많은 성장의 기회를 가졌다는 체감이 된다. 7개월이 아니라 마치 1년 7개월 전의 일 같은 기분.&lt;/p&gt;

&lt;h4 id=&quot;6월-터닝포인트&quot;&gt;6월, 터닝포인트&lt;/h4&gt;

&lt;p&gt;6월, 아는 분의 추천으로 키움증권에서 Python강의를 몇차례 진행했다. 종강 직후 학교 동아리 친구들과 3일정도 일본에 여행을 다녀왔다. 이때 에어팟을 사려고 재고를 미친듯이 찾아다니다 귀국하는 날 아침에 애플스토어에 재고가 들어온 것을 보고 체크아웃하기 직전에 뛰어가 구매했다.(이 에어팟은 지금도 잘 쓰고 다닌다.) 그리고 6월에는 장고걸스 행사 중 가장 큰 행사인 워크숍을 열었다. 이때 MS에서 장소 제공과 Azure Credit을 제공해줘 이 가이드로 수정 가이드를 만들었는데, 블로그에 올려뒀던 가이드에 약간 문제가 있어서 정신없이 뛰어다녔던 기억이 난다.&lt;/p&gt;

&lt;p&gt;그리고 6월에는 정말 큰 이벤트가 있었다. 바로 우아한형제들에서 &lt;strong&gt;우아한테크캠프 인턴&lt;/strong&gt;을 모집했던 것. 이때 지원하면서 내가 얻고싶었던 것은 바로 ‘내가 개발을 해도 될까?’라는 질문에 대한 답이었다. 사실 이 질문은 아직도 내가 품고있는 질문이다. &lt;strong&gt;‘나는 과연 개발자로 살아갈 수 있는 사람일까?’&lt;/strong&gt; 그래도 굉장히 멋진 기회(코드스쿼드에서 교육을 진행했다!)라고 생각해 떨어질 때 떨어지더라도 지원을 하자! 라는 생각으로 지원서를 넣었고 운좋게 서류와 코딩테스트를 통과했지만 마지막 면접에서 제대로 대답을 하지 못했는지 최종적으로는 불합격 메일을 받았다. 사실 이때 나는 ‘아, 그냥 이길이 내 길이 아닌 것을 빨리 알게 되어서 다행이다.’ 라는 생각을 했다. 말 그대로 취미로 개발을 하더라도 직업으로 삼지는 못하겠구나, 라고 생각하던 중…. 전화가 왔다. 자리가 났는데 혹시 아직 올 생각이 있냐는 전화. 바로 네 라고 대답하고 아, 그래도 문 닫고 들어왔구나.. 하고 생각했다. 그리고 이때 참여하기로 결정한 것은 정말 &lt;strong&gt;최고의 선택&lt;/strong&gt;이었다.&lt;/p&gt;

&lt;h4 id=&quot;7월-우아한테크캠프&quot;&gt;7월, 우아한테크캠프&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/woowa_techcamp_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7월, 우아한테크캠프에서 웹 프론트 트랙에 들어가 JS에 대해 정말 친숙하게 되었다. 그전까지는 잘 쓰지도 못하면서 투덜댔다면 지금은 잘 쓰지는 못하더라도 조금은 알고 투털대는 수준이 되었다. 코드스쿼드 윤지수마스터님이 메인으로 진행해주시고 김정마스터님과 정호영마스터님이 진행하신 트랙도 정말 재미있게 들었다. 그리고 알고리즘의 ㅇ 도 모르던 내가 4차례 정도 진행한 김범준CTO님의 수업을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;nlogn&lt;/code&gt;이 뭔지, 그리고 문제 해결 능력에 대해 다시한번 생각해보게 되었다.&lt;/p&gt;

&lt;p&gt;그뿐만 아니라 7월에는 정말 다양한 제의가 들어왔다. 인프런에서 크롤링 온라인 강의 제안과 패스트캠퍼스에서 크롤링 강의제안을 받았다. 어디서 보셨나 물으니 블로그 글을 보고 연락을 주셨다고 했다. 게다가 출판사에서 집필 제의까지 들어왔다. 정말 믿기지 않을 정도로 좋은 제의를 해주셔서 정말 감사한 마음으로 받았다. (지금 생각해도 놀라운 기회들이다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여러분 블로깅하세요, 꼭 하세요!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;8월-파이콘&quot;&gt;8월, 파이콘&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/pyconkr-2017-cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8월, 우아한테크캠프에서 팀별로 프로젝트를 진행했다. 웹 프론트에서 CSS가..(한숨) 정말로 까다롭다는 것을 다시한번 느끼게 되었다. 그리고 혼자 개발하는 것이 아니라 여럿이서 팀으로 개발을 한다는 것에서 협업에 대해 많은 경험을 하고 여러가지 생각을 하는 기회가 되었다.&lt;/p&gt;

&lt;p&gt;그리고 파이콘 튜토리얼을 신청한 것을 진행하기 위한 사전 준비모임을 갔다가, 발표할 기회까지 얻게 되었다.(원래는 파이콘 발표 신청을 했다가 떨어졌었다.) 준비할 시간이 몇주 없었지만 작년 파이콘을 보며 올해 이루고 싶었던 목표 중 하나였던 &lt;strong&gt;파이콘 발표하기&lt;/strong&gt;를 할 수 있게 된 것이 굉장히 기뻤다. 파이콘 전날 리허설을 하니 딱 45분이 맞았는데, 행사 당일에도 시간이 잘 맞아 다행이었다. 사실 행사장이 2층이라 사람들이 많이 안올까 걱정했는데 사람들이 의자를 다 채우는 것도 모자라 바닥에 앉고 뒤에 가득가득 서있는 모습을 보고 ‘세상에…’ 라는 생각을 했다. 그리고 이 발표는 또다른 기회들을 불러왔다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여러분 커뮤니티하세요, 꼭 하세요!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;9월-휴학&quot;&gt;9월, 휴학!!&lt;/h4&gt;

&lt;p&gt;9월, &lt;strong&gt;휴학하기로 마음먹었다.&lt;/strong&gt; 사실 이 결정을 하기까지 굉장히 많은 고민을 거쳤다. 교대에서는 휴학을 웬만하면 하지 않고 4년을 쭉 다니다 임용고시를 치른 뒤 졸업하는 것이 일반적이기 때문. 하지만 나에게 주어진 수많은 기회들을 손끝사이로 흘려보내고 싶지 않았다. 욕심이라고 말할 수 있지만, 이 멋진 기회들을 모두 잡고 싶었다. 그래서 휴학을 하기로 결정했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;휴학하면 여유로울 줄 알았더니…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사실 휴학하고 나서 잠시 여유로웠지만 여유로울 새도 없이 금새 바빠졌다. 크롤링 강의를 진행할 때 만약 이때 학교를 다니고 있었다면 패캠에서 첫기 강의를 망칠 뻔 했다. 강의자료가 모두 준비된 상태가 아니라 매주 2회차씩 강의자료를 준비했더니.. 매주 두번 마감에 쫓기는 기분으로 4주를 보냈던 것 같다. 그러다가 파이콘에서 받은 제의가 하나가 나왔다. 넥슨에서 아르바이트 형식으로 웹 개발 하기.&lt;/p&gt;

&lt;h4 id=&quot;10월-넥슨&quot;&gt;10월, 넥슨&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/nexon-kr.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;넥슨 인텔리전스랩스 어뷰징탐지TF 팀장님이 파이콘에서 10월~12월에 짧게라도 웹 개발(주로 프론트)을 해보지 않겠냐는 제의를 해 주셨다. 내가 과연 회사에서 개발을 할 수 있는 실력이 될까-하는 약간의 두려움이 있었지만 제의를 받기로 결정했다. 우아한형제들에서 인턴을 진행했지만 실무에 대한 경험은 아니었기 때문에 &lt;strong&gt;‘나는 과연 개발자로 살아갈 수 있는 사람일까?’&lt;/strong&gt;에 대한 답을 명확히 얻지는 못했기 때문이다. 우아한테크캠프에서 배운 프론트와 기존에 하던 백엔드 지식을 기반으로 개발을 나름 열심히 진행했다. 작지만 조금씩 서비스를 만들어가며 기존에 사용하지 않던 스택(&lt;code class=&quot;highlighter-rouge&quot;&gt;PySpark&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Hadoop&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;EMR&lt;/code&gt;와 같은 분산처리 등)도 알게 되고 딥러닝 등을 이용한 데이터 분석을 하는 모습을 바로 옆에서 지켜보니 자연스럽에 데이터분석 분야에도 관심을 갖게 되었다.&lt;/p&gt;

&lt;p&gt;그리고 10월에는 메이커페어 이벤트가 있었다. &lt;strong&gt;GEEKHUB&lt;/strong&gt;이라는 이름을 가진 모임에서 ‘공대탈출’이라는 이름으로 부스를 열고 운영도 해보며 친구들과 함께 무언가를 진행했다는 것에 뿌듯함을 느끼기도 했다.&lt;/p&gt;

&lt;h4 id=&quot;11월-다시django&quot;&gt;11월, 다시:Django&lt;/h4&gt;

&lt;p&gt;11월 초에는 장고걸스 서울에서 세미나를 열었다. AskDjango의 진석님이 Azure+크롤링을, Hannal님이 장고Admin을, 허신영님이 Kaggle에 대한 강의를 해주셔서 굉장히 높은 퀄리티의 세미나가 되었다. 그리고 처음으로 100명을 염두에 둔 행사이기도 했다. (보통 장고걸스 서울에서 연 행사는 워크숍을 제외하고는 30명 내 규모로 이뤄졌다.) 이때 장고걸스 서울이라는 커뮤니티가 굉장히 많이 성장했다는 생각이 들었다.&lt;/p&gt;

&lt;h4 id=&quot;12월-개발자로의-삶을-고민하다&quot;&gt;12월, 개발자로의 삶을 고민하다&lt;/h4&gt;

&lt;p&gt;12월 첫날부터 Vuetiful Korea 세미나가 있었다. Vue를 많이 사용하지는 않지만 그래도 관심은 지속적으로 가지고 있기 때문에 이번에도 참석. 그리고 바로 다음주에 파이썬 연말 세미나가 있었다. ‘헛된꿈’이라는 간단한 투표 웹 사이트가 있었는데 재미로 ‘좋아요’수를 눌리는 코드를 짜보기도 했다.(재미있다)&lt;/p&gt;

&lt;p&gt;그러다 굉장히 멋진 제의가 들어왔다. 넥슨에 계속 다니지 않겠냐는 제의로, 내년부터 &lt;strong&gt;정직원&lt;/strong&gt;으로 다니지 않겠냐는 것. 사실 이 제의를 받고 &lt;strong&gt;‘나는 과연 개발자로 살아갈 수 있는 사람일까?’&lt;/strong&gt;에 대한 답을 조금은 찾은 듯한 느낌이 들었다. 어쩌면, 나는 개발자로 살아가도 괜찮지 않을까 하는 그런 작은 자신감. 코딩 테스트와 면접을 거쳐 내년에도 지금 있는 팀에 계속 다니기로 이야기가 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;정말 좋은 기회들이 다가왔다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;나는 운이 좋다. 정말로 좋은 편이다. 지금까지 한 선택, 멀게는 교대 진학을 선택한 것부터 올해의 중요한 선택들에서 굉장히 좋은 선택지들을 골라왔다고 생각한다. 물론 아직 모르는 것이 한참 많은 늅늅이지만, 그래도 이제 어디 가서 ‘개발해요’라고 말은 하고 다닐 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;올 한해는 정말 1년이 아니라 3년을 보낸 것 같은 기분이다. 수많은 멋진 기회들이 주어지고 그 기회들을 통해 성장했다. 작년보다 성장한 올해, 올 한해는 지금까지 내 삶에서 최고점을 주고싶다. 내년에도 올해와 같이 즐기며 성장할 수 있길 꿈꾼다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어제보다 나은 오늘의 내가 되기를.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;올해의 후기를 마무리짓고 이제 블로그 이야기를 조금 더 해보려 한다.&lt;/p&gt;

&lt;h2 id=&quot;블로그-이야기&quot;&gt;블로그 이야기&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/blog_2017.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;어떻게-블로그를-시작하게-되었나&quot;&gt;어떻게 블로그를 시작하게 되었나?&lt;/h3&gt;

&lt;p&gt;기술과 관련된 블로그를 시작한 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;wordpress.com&lt;/code&gt;에서 만든 블로그였다. 2014년 7월부터 사용했고, 이때가 Pogoplug에 ArchLinux/Debian을 설치해가며 커스텀 NAS를 만들고 사용했던 시기였다. 그래서 Nginx가 무엇이고, 웹서버가 무엇이며 FTP가 뭔지, 그리고 웹 상에서 동작하는게 무엇인지 보고 php라는것도 설치해 사용하고 뭔지 모르겠지만 Wordpress도 받아 설치해보고 MySql와 phpMyAdmin등도 사용해보았다. 이때도 “블로그를 쓰면 좋다더라..”라는 막연히 ‘카더라’ 식의 블로그 찬양설을 듣다 그냥 하나씩 해본 것을 정리해보는 식으로 블로그를 작성했다. 윈도에서 RDP를 어떻게 쓰는게 좋나, iptime NAS에 커스텀 리눅스를 어떻게 까나 등등… 이런 개발적인데 비개발적인, 마치 “코딩이랑 무관합니다만,”에 올라올 것 같은 글들을 하나씩 정리해갔다.&lt;/p&gt;

&lt;h3 id=&quot;왜-github-pages에-블로그를-옮겼나&quot;&gt;왜 Github Pages에 블로그를 옮겼나?&lt;/h3&gt;

&lt;p&gt;그러다가 2016년 6월 즈음 구글 검색을 하다가 보게 된 것이 바로 아래 사진의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Syntax Highlighter&lt;/code&gt;였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-25%2020.49.35.png&quot; alt=&quot;Syntax Highlighting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;블로그에 코드를 적을 때 단순하게 흰색에 고정폭 글씨만 쓰는 것이 아니라 더 다양하고 보기 좋은(개발할 맛이 나는) 코드 하이라이팅을 적용하는 것을 보았던 것!&lt;/p&gt;

&lt;!-- ![이건 꼭 사야해](http://upload2.inven.co.kr/upload/2017/04/06/bbs/i15270847522.jpg) --&gt;

&lt;p&gt;이걸 보고 바로 뽐뿌가 와버려 내 블로그에 적용하려 했지만…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-25%2020.55.38.png&quot; alt=&quot;CSS수정은 유료랍니다 호갱님&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CSS 수정은 유료 플랜에서만 사용할 수 있었다. 그래서 어떤 것을 사용해야하나, 티스토리를 사용해야하나 등 고민을 했다.&lt;/p&gt;

&lt;p&gt;그러다가 Jekyll + Github Pages의 조합으로 블로그를 만들 수 있다는 사실을 보고, 마크다운 문법만 조금 공부하면 되겠다는 생각으로 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt;라는 Jekyll 테마 모음 사이트에서 적당히 예뻐보이는 사이트 하나를 골라 zip파일을 받은 뒤 기초적인 사이트 정보 수정만 하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;beomi.github.io&lt;/code&gt; 레포에 커밋을 하고 올렸더니 블로그가 완성이 되었다!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이때 내가 뭔가를 많이 하지 않았는데도(심지어 Jekyll을 설치도 하지 않았음) 블로그를 수정하고 올릴 수 있어서 Jekyll에 거부감 없이 시작할 수 있었다. 만세! 참고로 예전에 사용한 테마는 &lt;a href=&quot;http://jekyllthemes.org/themes/hagura/&quot;&gt;hagura&lt;/a&gt;라는 테마.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이때 단순히 글 목록만 보이는 테마였지만 그래도 꽤 예뻐 보여서 글쓰는 맛을 즐겼다.&lt;/p&gt;

&lt;h3 id=&quot;왜-테마를-바꿨나&quot;&gt;왜 테마를 바꿨나?&lt;/h3&gt;

&lt;p&gt;지금 사용하고 있는 테마인 &lt;a href=&quot;https://github.com/thomasvaeth/trophy-jekyll&quot;&gt;trophy&lt;/a&gt;라는 테마를 선택하게 된 것은 구글링을 하다 이 테마가 ‘카테고리’를 지원한다는 사실에 선택을 한 것이 컸다. ‘나만의 웹 크롤러 만들기’ 시리즈를 연재하다가 연재본이 하나로 엮여있는 공간을 마련하기 귀찮아 그냥 테마가 카테고리를 지원하면 좋겠다는 생각에 이것을 선택하게 되었고, 이 테마는 지금도 만족도가 매우 높은 상태다.&lt;/p&gt;

&lt;p&gt;물론 테마 색깔이나 레이아웃 등등 일부 CSS/SCSS파일을 수정해 사용하고 있고, 이 테마를 쓰면서 가장 큰 문제는 글 쓰기 전에 글의 메인 이미지인 고해상도이미지를 만드는 것이다. (지금은 보통 1920x1080px로 만들고, 100kb내외로 만든다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사실 이 작업이 생각보다 귀찮아서 이 블로그를 보는 분들이 무작정 예쁘다고 이 테마를 선택하지는 않기를 바라는 사소한 마음… 만들다 보면 ‘아 내가 메인 이미지를 만드는 센스가 없구나’ 라는걸 깨닫게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;올해-블로그-성과는-어땠나&quot;&gt;올해 블로그 성과는 어땠나?&lt;/h3&gt;

&lt;p&gt;사실 깃헙에 블로그를 만들고 시작한 것이 2016년 5월이고 본격적으로 방문자 유입이 된 것은 올해라고 볼 수 있다.(구글이 그렇다고 한다.)&lt;/p&gt;

&lt;p&gt;우선 올해 사용자부터 보면.. 약 6만명이 이용한 것으로 보인다. Adblock등을 이용해 GA를 차단한 경우는 수집하지 못하기 때문에 GA가 차단된 경우는 제외된 수치니 이것보다는 약간 더 많지 않을까 싶다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.10.23.png&quot; alt=&quot;올해사용자&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 올해 페이지 뷰는 약 17만 8천뷰정도가 나온 것으로 보인다.(사용자 수가 많을 수록 당연히 페이지 뷰수도 높다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.13.18.png&quot; alt=&quot;올해페이지뷰&quot; /&gt;&lt;/p&gt;

&lt;p&gt;방문자 유입은 주로 Google 검색을 통해 들어오는 것으로 보인다. 혹은 어딘가에서 링크로 들어오거나, 페이스북에 글을 올린 날은 페이스북에서 유입이 급격히 늘어나기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.15.49.png&quot; alt=&quot;방문자유입소스&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소스별 이탈율과 평균 세션 시간을 살펴보면 구글 검색등으로 들어온 경우가 가장 긴 세션시간(글 읽는 시간)을 유지하고 있다는 것을 볼 수 있다. 소셜공유, 즉 페이스북을 통해 들어온 경우에는 1분내외의 짧은 시간에 글을 훑어보고 바로 나가버리는 형태의 사용 패턴이 나타나는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.18.50.png&quot; alt=&quot;소스별이탈률&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전체적으로 고정 방문자수/페이지 뷰수에 큰 영향을 미치는 것은 검색엔진을 통해서 유입된 것임을 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;그렇다면-구글-검색결과에는-얼마나-많이-떴을까&quot;&gt;그렇다면 구글 검색결과에는 얼마나 많이 떴을까?&lt;/h3&gt;

&lt;p&gt;구글에는 Search Console을 통해 웹 사이트에 구글 검색을 통해 얼마나 유입이 이뤄졌는지 볼 수 있다. 다만 1년치를 보지는 못하고 최근 90일만 조회 가능하기 때문에 최근 90일을 조회해보면 검색 화면에 노출된 수는 약 20만회, 그리고 클릭으로 이어진 경우는 약 2만9천회임을 볼 수 있다. 당연히 노출이 많이 될수록 클릭 수도 올라간다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.23.22.png&quot; alt=&quot;Search Console 그래프&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 사람들이 어떤 키워드로 검색해 들어왔을까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d1sr4ybm5bj1wl.cloudfront.net/img/dropbox/2017-12-30%2002.24.52.png&quot; alt=&quot;검색한 단어&quot; /&gt;&lt;/p&gt;

&lt;p&gt;역시 크롤링에 관련한 단어가 최상위권을 모두 차지하고 있다. 평균 게재 순위가 높을수록 상위에 노출되고 5위 안으로 들어갈 경우 해당 검색 결과에서 유의미한 유입이 이뤄지는 것을 알 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;맺으며&quot;&gt;맺으며..&lt;/h2&gt;

&lt;p&gt;2017년은 본격적으로 블로그를 페이스북에 올리는 등의 방법으로 홍보를 시작했습니다.&lt;/p&gt;

&lt;p&gt;사실 블로그를 작성하며 가장 많이 드는 고민이 “세상에 이미 이 자료들이 있고, 검색하면 나오는데 굳이 내가 작성할 필요가 있을까?” 라는 고민입니다.&lt;/p&gt;

&lt;p&gt;하지만 저는 블로그를 단순한 코드 조각이 아니라 내가 아는 지식들을 꿰어진 구슬처럼 유의미한 가이드로 사용할 수 있도록 재가공해 제공한다는 측면에서 의미가 있다고 생각하고 지속적으로 글을 작성합니다. 지식이 많은 것도 중요하지만, 누군가에게 내 글이 답답한 부분을 뚫어주는 글이 될 수 있기를 바라며 글을 씁니다. 블로그 글에서 이번 &lt;strong&gt;가이드&lt;/strong&gt;는 이라고 표현하는 이유가 단순히 ‘글’ 이 아니라 ‘가이드’의 역할을 할 수 있기를 바라며 작성하기 때문입니다.&lt;/p&gt;

&lt;p&gt;이 글을 읽으신 분들도 블로그를 시작하시고, 커뮤니티를 시작하시면 좋겠습니다.&lt;/p&gt;

&lt;p&gt;앞으로도 커뮤니티에서 많은 분들을 뵙고 더 성장할 수 있으면 좋겠습니다.&lt;/p&gt;

&lt;p&gt;긴 글 읽어주셔서 감사합니다.&lt;/p&gt;

</description>
        <pubDate>Sat, 30 Dec 2017 00:00:00 +0900</pubDate>
        <link>https://beomi.github.io/2017/12/30/Blog-1Year-2017/</link>
        <guid isPermaLink="true">https://beomi.github.io/2017/12/30/Blog-1Year-2017/</guid>
        
        
        <category>life</category>
        
      </item>
    
  </channel>
</rss>
