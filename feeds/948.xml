<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
>

<channel>
	<title>PROINLAB</title>
	<atom:link href="https://proinlab.com/feed" rel="self" type="application/rss+xml" />
	<link>https://proinlab.com</link>
	<description>by Younghun, Chae</description>
	<lastBuildDate>
	Thu, 04 Apr 2019 16:03:35 +0000	</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.1.1</generator>

<image>
	<url>https://i2.wp.com/proinlab.com/wp-content/uploads/2016/04/blog-ico.jpg?fit=32%2C32&#038;ssl=1</url>
	<title>PROINLAB</title>
	<link>https://proinlab.com</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">54849888</site>	<item>
		<title>하이브리드앱 개발 (1) &#8211; Ionic Framework 개발환경 구축</title>
		<link>https://proinlab.com/archives/2348</link>
				<comments>https://proinlab.com/archives/2348#comments</comments>
				<pubDate>Thu, 04 Apr 2019 15:24:46 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Application / Framework]]></category>
		<category><![CDATA[Android]]></category>
		<category><![CDATA[webapp]]></category>
		<category><![CDATA[ionic]]></category>
		<category><![CDATA[ios]]></category>
		<category><![CDATA[cordova]]></category>

		<guid isPermaLink="false">https://proinlab.com/?p=2348</guid>
				<description><![CDATA[Ionic Framework는 Cordova 기반의 WebApp 개발 도구이다. Web 기반이라고 하지만 GPS, 카메라 등 스마트폰의 하드웨어에 접근하거나, 알림 등 시스템에 접근이 가능하기 때문에, 굳이 Native로 앱을 개발하지 않아도 다양한 어플리케이션 개발에 사용 될 수 있다. 현재 최신 버전은 v4 이고 Angular2 기반으로 UI 컴포넌트가 구성되어 있다. 동일한 코드로 UI 개발을 해도 안드로이드의 경우 Material Design, 아이폰의 경우 iOS Flat Design 기반으로 UI를 생성해준다. 주요 다룰 이슈는 아래와 같다. 웹 브라우저를 통한 개발환경 구축 (네트워킹 문제 포함) CORS (Cross Origin Resource Sharing) 관련 이슈 Ionic Framework UI 컴포넌트 구성 Ionic Framework Native API Ionic Framework와 Cordova 기반 개발환경의 차이 Ionic Framework 개발환경 구축 Ionic을 사용하기 위해서는 필요한 소프트웨어 패키지는 아래와 같다. Node.js Cordova Android Studio (안드로이드 앱 빌드), Xcode (iOS 앱 빌드) Gradle WebStorm 또는 Atom, VScode 등 에디터 Firefox 또는 Chrome Ionic은 Cordova 기반으로 모바일 어플리케이션을 빌드한다. Cordova는 Node.js로 만들어진 프로젝트로 NPM을 통해 설치 할 수 있다. 먼저 Node.js를 설치 한 후 아래 명령어를 통해 Ionic CLI를 설치한다. 위의 명령어를 실행하면 터미널에서 ionic 명령어를 사용하여 프로젝트를 생성하고 빌드 할 수 있다. 만약 리눅스나 Mac에서 설치가 안된다면, Node.js Global 라이브러리의 경로의 권한을 사용자에 맞게 변경하거나 sudo 명령어를 사용하여 ionic 명령어를 실행한다. Ionic 설치가 정상적으로 되었다면 위의 명령어를 실행하여 프로젝트를 생성한다. 위의 명령어는 myApp 이라는 이름으로 tab UI를 사용하는 프로젝트를 생성한다. UI 종류로는 blank / tabs / sidemenu 가 있는데, blank로 생성 한 후 직접 탭 또는 사이드메뉴를 구성 할 수도 있지만, 명령어를 통해 구성하면 기본 구조를 생성해주기 때문에 본인이 사용할 UI 구성에 따라 선택해서 사용하면 편리하다. 명령어를 통해 프로젝트를 생성하였다면 프로젝트 루트 경로로 이동하여 ionic serve 명령어를 실행한다. serve 명령어를 실행하면 웹 브라우저를 통해 개발하는 UI를 확인해 볼 수 있다. ionic serve &#8211;lab 명령어를 사용하면 운영체제에 따라 보이는 화면을 브라우저를 통해 확인 할 수 있다. 그냥 serve로 실행된 경우 http://localhost:8100, lab의 경우 http://localhost:8200 에 접속하여 화면을 볼 수 있다. Lab을 사용하면 한번에 운영체제별로 보이는 화면을 확인 할 수 있지만, UI 오류를 확인하거나 요소검사가 불편하기 때문에 기본 serve를 사용하고 웹 브라우저에서 개발자모드에서 제공하는 device toolbar 기능을 사용하는 것을 추천한다. 웹 브라우저에서는 Cross Origin 문제로 인해 외부 서버에 접근하여 데이터를 로딩하는 것이 불가능하다. 본인이 구축한 서버에 접근하는 경우 CORS 설정을 통해 웹 서버의 리소스에 접근 할 수 있지만, 외부 서버의 API 등을 이용할 때는 접근이 불가능하다. Cordova에서 사용되는 웹뷰의 경우 Cross Origin을 무시하기 때문에 다른 도메인의 정보를 불러 올 수 있지만, 웹 브라우저에서는 접근이 안되기 때문에 개발 할 때 불편함이 있다. 이러한 문제의 경우 FireFox 브라우저의 CORS Everywhere 플러그인 설치를 통해 해결 할 수 있다. 하지만 Ionic v4부터는 Angular2 사용을 위해 Cordova와 별개의 웹뷰를 사용하는데, 이 경우 Cross Origin 문제가 발생한다. 이와 관련된 내용은 다음 글을 통해 해결 방법을 설명할 예정이다. Ionic CLI 살펴보기 Ionic CLI를 통해 할 수 있는 작업들 중 중요한 내용을 살펴본다. 자세한 CLI 명령어는 공식 문서에서 확인하거나 &#8211;help 옵션을 통해 볼 수 있다. ionic cordova platform 명령어는 모바일 운영체제에 따른 어플리케이션을 빌드하기 위해 사용하는 명령어이다. 이 명령어를 실행하면 플랫폼에 따라 프로젝트가 생성된다. ionic cordova build 명령어를 통해 운영체제별로 앱을 빌드하여 설치파일을 생성 할 수 있다. 안드로이드의 경우 Android Studio가 설치되어 있어야하고, Android Studio와 별개로 Gradle을 설치해야한다. Android Studio 내에 Gradle이 &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2348" class="more-link">더 보기<span class="screen-reader-text"> "하이브리드앱 개발 (1) &#8211; Ionic Framework 개발환경 구축"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2348/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2348</post-id>	</item>
		<item>
		<title>Kubernetes StorageClass</title>
		<link>https://proinlab.com/archives/2308</link>
				<comments>https://proinlab.com/archives/2308#comments</comments>
				<pubDate>Tue, 23 Oct 2018 15:40:46 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[kubernetes]]></category>
		<category><![CDATA[storageclass]]></category>
		<category><![CDATA[block storage]]></category>

		<guid isPermaLink="false">https://proinlab.com/?p=2308</guid>
				<description><![CDATA[Kubernetes를 효율적으로 운영하기 위해서는 Dynamic Volume Provisioning 기능을 활성화해야한다. Dynamic Volume Provisioning을 사용하기 위해서는 StorageClass를 정의하여 블록 스토리지와 연동해야한다. 이 글에서는 StorageOS와 연계하는 StorageClass를 설정하는 방법을 소개한다.]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2308/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2308</post-id>	</item>
		<item>
		<title>Kubernetes Installation with Dashboard</title>
		<link>https://proinlab.com/archives/2262</link>
				<comments>https://proinlab.com/archives/2262#comments</comments>
				<pubDate>Wed, 17 Oct 2018 16:30:48 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Kubernetes]]></category>
		<category><![CDATA[kubernetes]]></category>
		<category><![CDATA[virtualization]]></category>

		<guid isPermaLink="false">https://proinlab.com/?p=2262</guid>
				<description><![CDATA[Kubernetes는 Google에서 운영하는 컨테이너 오케스트레이션 오픈소스이다. 이 글에서는 Kubernetes 개념에 대해 소개하고,&#160;Ubuntu 18.04 버전을 기준으로 설치하는 방법을 정리하였다. 관련 키워드: Docker, Kubernetes Kubernetes Architecture Kubernetes는 Master-Slave 구조의 클러스터로 구성된다. Master Node에서 API를 통해 Kubernetes 클러스터에 접근하여 컨테이너를 생성하고 관리한다. Slave Node는 컨테이너가 생성되어 운영되는 노드이다. Kubernetes 클러스터에서는&#160; GlusterFS, Openstack Cinder 등 원격 스토리지와 연결하여 동적으로 디스크를 할당하여 컨테이너를 운영 할 수 있다. Kubernetes Concepts Kubernetes를 이해하기 위해 필수적인 개념에 대해 간략히 소개한다.&#160; 개념에 대해서 자세하게 이해하고 싶다면&#160;Kubernetes Docs를 참고하면 된다. Pods Pod는 클러스터에서 실행되는 프로세스를 의미한다. Kubernetes는 컨테이너 운영을 위해 Docker를 사용하는데, Pod의 개념이 Docker의 컨테이너라고 생각하면 된다. Pod를 통해서 어플리케이션 컨테이너, 스토리지 리소스, 네트워크 IP 관리 등의 기능을 캡슐화 할 수 있다. [Network] 각각의 Pod는 고유한 IP 주소가 할당되고, 네트워크 포트를 포함하여 네트워크 네임스페이스를 공유한다. 서로 다른 노드에 존재하는 Pod 간에는 공유된 네트워크 네임 스페이스를 통해 통신이 가능하다. Pod의 네트워크는 Master Node에서 설정된 네트워크 정책을 통해 관리되는데, 공인 IP가 아닌 사설망을 구축하여 운영되기 때문에 외부와 통신을 위해서는 Master Node에서 포트포워딩을 통해 접근하여야 한다. [Volume] Pod에는 공유 스토리지 볼륨을 설정하여 Pod간의 데이터를 공유하여 사용 할 수 있다. 또한 볼륨을 사용하여 컨테이너를 재실행해야 하는 경우에도 컨테이너의 데이터를 영구적으로 유지 할 수 있다. Storage 스토리지는 컨테이너의 데이터를 영구적으로 유지하기 위해 사용되는 기능이다. GlusterFS, Openstack Cinder 등의 오픈소스 프로젝트와, AWS, Google Cloud 등에서 제공하는 스토리지와 연동하여 사용 할 수 있다. [Persistent Volume (PV)] PV은 Kubernetes 클러스터에서 관리되는 저장소이다. PV은 Pod와 독립적으로 수명주기가 관리되어 Pod가 재실행되더라도 데이터가 유지된다. [Persistent Volume Claims (PVC)] PVC는 PV를 추상화하여 사용 가능하도록 만들어주는 기능이다. PVC를 통해 Pod에서 필요한 용량을 지정하여 동적으로 볼륨을 할당 할 수 있다. PV를 지정하지 않고 동적으로 PVC를 사용하기 위해서는 GlusterFS 등과 연계된 StorageClass를 생성해야 한다. Kubernetes Installation 먼저 Kubernetes 클러스터를 운영할 서버를 준비한다. 클러스터 구성을 위해 준비한 서버 모두에서 설치 과정을 진행한다.&#160;이 글에서는 설치를 위해 Ubuntu 18.04 서버 4개를 설치하였다. 서버의 hostname과 IP는 아래와 같다. Kubernetes에서는 클러스터에 노드를 추가 할 때 hostname을 참조하기 때문에 설치를 진행하기 전에 적절한 hostname 설정이 필요하다. kube-master (192.168.5.1) kube-slave-1&#160;(192.168.5.2) kube-slave-2&#160;(192.168.5.3) kube-slave-3 (192.168.5.4) 먼저 Docker를 설치해야 한다. Docker 설치가 완료되었다면 kubeadm, kubelet, kubectl의 설치를 위해 아래의 명령어를 순차적으로 실행한다. 편리한 설치를 위해 먼저 root 권한으로 변경하여 진행한다. 설치가 완료되었다면 docker 정보를 확인하여 kubernetes의 설정을 변경하여준다. 파일을 편집 모드로 열었다면 Environment 항목에 아래와 같이 한줄을 추가한다. Master Node 설정 Master Node로 사용할 서버에 다음과 같은 명령어를 수행한다. 기존에 설정되었던 Master Node를 재설정하기 위해서는 reset 명령어를 수행한 후 진행한다. 아래의 명령어는 Master Node 초기 설정을 하고 네트워크 구성을 설정하는 과정을 포함하고 있다.&#160; kubeadm init 명령어를 실한한 결과에는 &#8220;kubeadm join 192&#8230;&#8221; 이라는 항목이 출력되는데, 이 명령어는 나중에 Slave Node를 설정하기 위해 필요하기 때문에 복사해 놓는다. https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network 네트워크 구성은 위의 링크에서 확인 할 수 있다. Calico, Canal, Cilium 등 다양한 설정 방법이 있는데, 클러스터 마다 하나의 방법만 적용이 가능하다. 네트워크 구성 방식에 따라 IP Subnet(&#8211;pod-network-cidr)을 적절하게 설정해야한다. 이 글에서는 canal을 사용하여 네트워크를 설정하였다. Slave Node 설정 Slave Node의 설정은 Master Node를 설정할 때 복사해 놓은 명령어를 Slave Node 서버에서 실행하면 설정이 완료된다. join 명령어는 위와 같이 구성되는데, 토큰과 hash 정보는 Master Node에서 아래의 명령어를 통해 확인 할 수 있다. 기본적으로 포트의 경우 6443을 사용한다. 토큰의 &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2262" class="more-link">더 보기<span class="screen-reader-text"> "Kubernetes Installation with Dashboard"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2262/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2262</post-id>	</item>
		<item>
		<title>Node.js Async &#038; Await를 활용하여 콜백 탈출하기</title>
		<link>https://proinlab.com/archives/2138</link>
				<comments>https://proinlab.com/archives/2138#respond</comments>
				<pubDate>Sun, 23 Apr 2017 10:36:48 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Node.js]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2138</guid>
				<description><![CDATA[Javascript로 프로그래밍을 할 때 가장 골치인 것이 비동기 콜백 함수를 사용할 때이다. 비동기 함수가 유용할 때도 있지만, 크롤링 등의 작업을 할 때는 순차적으로 프로세스를 진행해야하는데 비동기 함수로 인해 코드 리딩이 어려워진다. Node.js 버전 7부터는 Async/Await 기능이 추가되어 이러한 비동기 콜백 문제를 직관적으로 해결 할 수 있게 되었다. 관련 키워드: Node.js, Async/Await, 비동기 콜백, 콜백 지옥 Async / Await 문법 Async / Await 문법은 ES7에서 새롭게 지원하는 문법으로, Node.js v7에서부터 지원된다. 현재 LTS 버전은 6 버전이지만 크롤러와 같은 단일 프로그램을 작성할 때에는 Stable 버전인 7로 사용하는 것을 추천한다. 현재 브라우저 등에서는 ECMA6는 지원 중이지만 7이 지원되려면 시간이 한참 걸릴 것 같다. Async / Await 를 사용하면, 기존 async 라이브러리나 Promise를 사용하지 않고도 비동기 콜백 지옥을 효과적으로 해결 할 수 있다. 물론 Async/Await 를 사용하려면 Promise 함수가 사용되기 때문에 사전에 Promise 사용 방법을 이해해야한다. http://proinlab.com/archives/2086 Promise를 잘 모른다면 위의 글을 먼저 읽는 것을 추천한다. Await를 위한 Promise 함수 선언 Await를 사용하기 위해서는 먼저 Promise 함수를 정의하여야한다. setTimeout 함수로 비동기 함수 2개를 만들어보자. 위의 함수는 각각 1000ms, 500ms 후에 메세지를 출력하고 결과를 리턴하는 함수이다. 먼저 기존의 방식으로 비동기 함수를 호출해보자. 위와 같이 단순 호출할 경우 결과는 아래와 같다. 결과를 보면 두 함수가 병렬로 동작하여 2번째 함수가 먼저 출력을하고 1번째 함수가 출력을한다. 이 함수를 순차적으로 실행하기 위해서는 Promise를 사용하여 코드를 구성해야한다. 위의 코드를 실행해보면 Promise 함수의 결과를 받아서 처리 할 수 있고 순차적으로 결과가 출력되는 것을 확인 할 수 있다. Async 함수 선언 Promise를 사용하면 비동기 함수를 순차적으로 사용 할 수 있지만, 코드의 직관성이 떨어지고 함수가 많아지면 편집이 어려워진다. 이를 해결하기 위해서 최신 문법에서는 Async 문법을 만들어서 코드를 효율적으로 짜는 것이 가능해졌다. Async 함수는 위와 같이 정의된다. await 문법은 Async 함수 안에서만 사용이 가능하고, async 내에서라고 해도 함수 안에 선언된 경우 사용이 불가하다. 예를 들면, 위와 같은 코드는 동작할 수 없다. fn 이라는 함수 안에서 await 문법은 문법적 오류가 발생하며 아래와 같은 에러 로그가 출력된다. 이러한 구조를 실행하기 위해서는 fn 함수 또한 async 함수로 만들어야한다. async 함수 또한 생성되면 Promise 함수로 정의된다. 따라서 실행시 동기 시키려면 await를 앞에 붙여주어야한다. 결론 Promise 개념을 이해한 후 Async / Await 문법을 잘 사용하면 순차적 작업이 필요한 단일 프로그램을 효율적으로 작성할 수 있다. 기존 다른 언어의 문법과 같이 await를 사용하면 순차적이고 직관적으로 보이게 되므로 익숙한 방식으로 비동기 문제 해결이 가능하다. 하지만 Node.js 7 버전이 아니라면 사용이 안되기 때문에 현재 LTS로 제공되는 6버전에서는 사용이 안되고, 라이브러리로 만들었을 때에는 오류를 발생시키는 원인이 될 수 있다. 또한 콜백 지옥은 피할 수 있지만, 기존 콜백의 병렬 프로세싱과 같은 장점 또한 사용이 안되므로 사용 목적에 따라 유연하게 사용해야한다. (무작정 사용하게 되면 성능 저하의 원인이 될 수 있다. 예를 들면, 웹 서버를 구축할 때 비동기 함수를 await로 사용한다면, 사용자가 동시에 접속하여 병목 현상이 발생 할 때 대응하기가 더 힘들다.)]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2138/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2138</post-id>	</item>
		<item>
		<title>k-Means Clustering</title>
		<link>https://proinlab.com/archives/2134</link>
				<comments>https://proinlab.com/archives/2134#respond</comments>
				<pubDate>Sun, 23 Apr 2017 08:08:40 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Machine Learning]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2134</guid>
				<description><![CDATA[k-Means 클러스터링은 비지도 학습(Unsupervised Learning) 알고리즘 중 하나로 데이터를 유사도를 바탕으로 k개의 그룹으로 구분하는 알고리즘이다. 레이블이 없는 데이터 집합에서 분류 작업을 할 때 유용하게 사용된다. 이 글에서는 k-Means의 기초적인 개념을 바탕으로, 간단하게 구현하는 과정을 소개한다. 관련 키워드: k-Means, 클러스터링, 기계학습, node.js k-Means 알고리즘이란? k-Means 알고리즘은 비지도 학습(Unsupervised Learning)의 한 종류로 레이블 되어있지 않은 데이터를 k개의 군집으로 클러스터링해주는 알고리즘이다. k-Means의 장점 구현하기가 비교적 간단하다 사전 레이블된 학습 데이터가 필요하지 않다 (클러스터링의 일반적인 장점) 새로운 데이터의 클러스터를 찾을 때 계산량이 적다 k-Means의 단점 초기에 군집 수를 설정하기 때문에 k의 값에 따라 정확도가 달라진다 학습 후 초기 학습한 군집 수를 변경이 불가능하기 때문에 데이터 증가에 따라 새로운 클러스터를 형성하는 것은 불가능하다 nodeml을 사용한 k-Means 알고리즘 실험 아래의 코드는 nodeml 라이브러리를 사용하여 kMeans 알고리즘을 사용하는 예제이다. 'use strict'; const {sample, kMeans, evaluate} = require('nodeml'); const bulk = sample.iris(); let kmeans = new kMeans(); kmeans.train(bulk.dataset, {k: 3}); result = knn.test(bulk.dataset); console.log(result); k-Means 구현하기 k-Means 알고리즘은 아래와 같은 순서로 진행된다. 클러스터 중심점 초기화 Expectation Maximazation 왜곡 측정 (J) J 값이 최소화 될 때 까지 2~4 반복 이 과정 중 Expectation과 Maximazation 과정을 EM 알고리즘이라고 한다. 클러스터의 중심점을 초기화 하는 방법은 여러가지가 있지만, 현재 nodeml에는 데이터 집합에서 무작위 선택으로 초기화하는 방법만 구현해놓았다. 데이터 집합 과정을 살펴보기 위해 iris 데이터 집합을 사용한다. nodeml을 설치한후 내장되어있는 iris 데이터 집합을 불러온다. 'use strict'; const {sample} = require('nodeml'); const dataset = sample.iris().dataset; 클러스터 중심점 초기화 위키를 참조하면 Random Partition, Forgy, MacQueen, Kaufman 등 클러스터 중심점을 초기화 하는 기법들이 다양하게 존재하는 것을 확인 할 수 있다. 이 글에서는 단순히 무작위로 초기 중심점을 설정하여 학습하는 방법으로 kMeans를 구현할 예정이다. const k = 3; let center = []; let preRand = {}; // 중복된 center가 존재하지 않도록 점검 while(true) { // k개의 데이터가 선택될 때까지 실행 let rand = Math.floor(Math.random() * dataset.length); if(preRand[rand]) continue; if(dataset[rand]) { center.push(dataset[rand]); preRand[rand] = true; } if(center.length == k) break; } console.log(center); 위의 코드를 실행해보면 3개의 중심점이 랜덤으로 선택되어 출력되는 것을 확인 할 수 있다. 거리 측정 함수 expectation 과정을 수행하기 위해서는 중심점과 데이터의 거리 측정 함수가 필요하다. 거리를 측정하는 방법에는 여러가지가 있지만 간단히 Euclidean Distance를 측정하는 함수를 만들어 사용하도록한다. let distance = (x, y)=&#62; { let sum = 0; let keys = {}; for(let key in x) keys[key] = true; for(let key in y) keys[key] = true; for(let key in keys) { let xd = x[key] ? x[key] * 1 : 0; let yd = y[key] ? y[key] * 1 : 0; sum += (xd - yd) * (xd - yd); } return Math.sqrt(sum); }; Expectation Expectation 과정은 선정된 k개의 중심점으로부터 데이터와의 거리를 측정하여 각 데이터들이 어느 클러스터에 소속되는지를 찾는 과정이다. 아래는 r[n]을 n번째 데이터의 기대값으로 설정하여 전체 데이터의 기대값을 갱신하는 코드이다. let r = []; for(let n = 0 ; n &#60; dataset.length ; n++) { let x = dataset[n]; let minDist = -1, rn = 0; for(let k = 0 ; k &#60; center.length ; k++) { let dist = distance(dataset[n], center[k]); if(minDist === -1 &#124;&#124; minDist &#62; dist) { minDist = dist; rn = k; } } r[n] = rn; } 유클리드 거리 계산법을 사용하여 &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2134" class="more-link">더 보기<span class="screen-reader-text"> "k-Means Clustering"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2134/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2134</post-id>	</item>
		<item>
		<title>kNN (k-Nearest Neighbor) 알고리즘</title>
		<link>https://proinlab.com/archives/2125</link>
				<comments>https://proinlab.com/archives/2125#respond</comments>
				<pubDate>Thu, 16 Mar 2017 12:34:22 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Machine Learning]]></category>
		<category><![CDATA[nodejs]]></category>
		<category><![CDATA[knn]]></category>
		<category><![CDATA[machine-learning]]></category>
		<category><![CDATA[classification]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2125</guid>
				<description><![CDATA[k-NN 알고리즘은 분류 알고리즘의 하나로 로직이 간단하여 구현하기 쉽다. 하지만 학습 모델이 따로 없고, 전체 데이터를 스캔하여 데이터를 분류하기 때문에 데이터의 양이 많아지면 분류 속도가 현저하게 느려진다. k-NN 알고리즘은 단순 분류 작업 이외에도 협업 필터링을 구현 할 때 사용되기도 한다 (참고: https://github.com/guymorita/recommendationRaccoon). 관련 키워드: kNN, 분류, 기계학습, node.js k-NN 알고리즘이란? k-NN 알고리즘은 지도 학습(Supervised Learning)의 한 종류로 레이블이 있는 데이터를 사용하여 분류 작업을 하는 알고리즘이다. 알고리즘의 이름에서 볼 수 있듯이 데이터로부터 거리가 가까운 k개의 다른 데이터의 레이블을 참조하여 분류하는 알고리즘이다. 주로 거리를 측정할 때 유클리디안 거리 계산법을 사용하여 거리를 측정하는데, 벡터의 크기가 커지면 계산이 복잡해진다. kNN의 장점 알고리즘이 간단하여 구현하기 쉽다 수치 기반 데이터 분류 작업에서 성능이 좋다 kNN의 단점 학습 데이터의 양이 많으면 분류 속도가 느려진다 (사실 사전 계산을 할 수 없기 때문에 학습 과정이 따로 없기 때문에 분류 속도가 느리다) 차원(벡터)의 크기가 크면 계산량이 많아진다 nodeml을 사용한 kNN 알고리즘 실험 아래의 코드는 nodeml 라이브러리를 사용하여 kNN 알고리즘을 사용하는 예제이다. nodeml에는 유클리드 거리를 사용하여 k 개의 유사 데이터를 찾고, 가중치 모델을 적용하여 kNN이 구현되어 있다. 'use strict'; const {sample, kNN, evaluate} = require('nodeml'); const bulk = sample.iris(); knn.train(bulk.dataset, bulk.labels); result = knn.test(bulk.dataset, 5); let evaluation = evaluate.accuracy(bulk.labels, result); console.log(evaluation.micro.PRECISION, evaluation.macro.PRECISION); kNN 구현하기 이 글에서는 node.js를 사용하여 kNN의 구현 방법을 소개하고, 몇 가지 문제 사항에 대한 해결 방법을 다룰 예정이다. 다룰 문제를 요약하면 아래와 같다. 벡터 계산시 속도 문제 개선 방법 유사 데이터 서칭 속도 개선 방법 가중치 모델을 사용한 정확도 개선 알고리즘 구현 순서는 아래와 같다. 알고리즘을 구현하는 과정에서 위의 문제점들을 해결하는 방법을 설명한다. 사전 학습 과정 유사 데이터 검색 및 k개의 데이터 선택 정답 레이블 선정 사전 학습 과정 kNN을 단순하게 구현하면 각 데이터를 분류할때마다 전체 데이터를 탐색해야하기 때문에 데이터가 조금만 커져도 속도가 상당히 느려진다. 학습 데이터에 대해 사전에 사전을 구축하여 유사 데이터를 먼저 검색 할 수 있으면 속도를 개선 할 수 있다. 수치화 된 데이터를 학습할 때에는 벡터 크기가 고정되어 있지만, 텍스트와 같은 데이터를 분류할 때는 벡터가 크고, 데이터에서 대부분의 벡터의 값이 0인 경우가 많다 (값이 존재하는 경우가 희소하다). 이러한 데이터를 전체를 탐색하여 계산하게 될 경우 계산량만 많아지고 정확도는 떨어 질 수도 있다. 이 글에서는 희소 행렬의 경우에 중복되는 feature를 가지고 있는 데이터를 우선 탐색하여, 탐색된 데이터에 대해서만 거리를 계산하여 결과를 도출하는 방법을 사용한다. [ { "삼성": 1, "갤럭시": 3, "노트": 5 }, { "갤럭시": 3, "노트": 5 , "폭발": 3}, { "LG": 1, "G4": 1, "스마트폰": 1 }] 예를들어 위와 같은 데이터가 있다고 하자. &#8220;삼성 갤럭시 노트&#8221;를 포함한 데이터는 &#8220;LG G4 스마트폰&#8221;을 포함한 데이터 보다는 &#8220;갤럭시 노트 폭발&#8221;과 관련이 있을 확률이 높다. 이 때 각 거리는 &#8220;삼성 갤럭시 노트&#8221;-&#8220;갤럭시 노트 폭발&#8221;의 거리는 1+(0+0)+9이고, &#8220;삼성 갤럭시 노트&#8221;-&#8220;LG G4 스마트폰&#8221;의 거리는 (1+9+25)+(1+1+1)이다 (거리 계산시 루트는 제외한 유클리드 거리값으로 표현하였다). 여기서 굵게 표시한 부분은 &#8220;삼성 갤럭시 노트&#8221;의 feature가 계산된 부분이다. 두번째 계산과 같이 중복되는 feature가 없는 경우에는 기본적으로 자신의 크기만큼을 가지고 다른 데이터의 크기를 추가적으로 가지게된다. 따라서 다른 데이터가 자신의 feature를 가지고 있을 때 거리가 가까울 가능성이 높다. let itemBase = {}; let featureBase = {}; for (let i = 0; i &#60; data.length; i++) { let item = data[i]; if (!itemBase[i]) itemBase[i] = {}; for (let feature in &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2125" class="more-link">더 보기<span class="screen-reader-text"> "kNN (k-Nearest Neighbor) 알고리즘"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2125/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2125</post-id>	</item>
		<item>
		<title>추천 알고리즘 구현하기 (User-based Collaborative Filtering)</title>
		<link>https://proinlab.com/archives/2103</link>
				<comments>https://proinlab.com/archives/2103#respond</comments>
				<pubDate>Sat, 11 Mar 2017 09:00:30 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Machine Learning]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2103</guid>
				<description><![CDATA[추천 시스템은 보유하고 있는 데이터에 따라 다양한 방법으로 접근하여 구현이 가능하다. 아마존, 넷플릭스와 같이 사용자의 행위 데이터를 분석하여 맞춤형 추천이 가능하고, 뉴스 데이터 등의 텍스트 데이터의 내용을 분석하여 유사도 계산을 통해 추천하는 것도 가능하다. 이 글에서는 추천 시스템의 종류에 대한 소개와 협업 필터링을 통해 간단한 추천 알고리즘을 소개한다. 관련 키워드: 협업 필터링, Collaborative Filtering, Content-based Recommendation, Item-based Recommendation, User-based Recommendation, Inner Product Matrix Similarity 추천 시스템 종류 및 장단점 User-based CF (Collaborative Filtering) 사용자간의 유사도를 계산하여 다른 사용자의 리스트를 추천해주는 방식이다. 아이템에 대한 사용자의 평가 데이터가 존재할 때 행렬을 구성하여 사용자간 유사도 계산이 가능하다. 따라서 서비스 초창기 데이터가 별로 없거나 신규 사용자에 대해서는 추천 정확도가 떨어진다. 사용 예시 장점 &#8211; 아이템 자체의 정보 없이 추천이 가능 &#8211; 알고리즘이 간단하여 구축하기가 쉬움 단점 &#8211; 유저-아이템의 양이 많아질 수록 연산이 복잡해지고 컴퓨팅 자원 소모가 많아짐 &#8211; 신규 가입자의 경우 선택된 아이템이 없어 유저간 유사도를 구할 수 없음 Item-based CF User-based CF와 달리 아이템 간의 유사도를 측정하여 사용자가 아이템을 조회했을 때 유사 상품을 보여주는 방식이다. Usage Example 장점 &#8211; 아이템 자체의 정보 없이 추천이 가능 &#8211; 아이템에 대한 평가를 가지고있지 않은 신규 사용자에 대해서 추천이 가능 단점 &#8211; 유저-아이템의 양이 많아질 수록 연산이 복잡해지고 컴퓨팅 자원 소모가 많아짐 &#8211; 초기 서비스시 데이터 양이 적을 때 추천 정확도가 떨어짐 Content-based Filtering Item-based CF와 마찬가지로 아이템간 연관성을 분석하여 연관 아이템을 찾아 보여주는 방법이다. CF 방식과 달리 아이템의 정보를 바탕으로 아이템의 유사도를 분석하여 추천해준다. 주로 텍스트 정보를 바탕으로 형태소분석, 키워드 추출, 연관단어 검색의 과정을 거쳐 아이템을 추천하고, Word2Vec 등을 사용하여 콘텐츠를 분석할 수 있다. Usage Example &#8211; 뉴스 추천 장점 &#8211; 사용자의 정보 없이 보유한 데이터만 가지고 추천 정확도를 높일 수 있음 단점 &#8211; 과정이 복잡하고 학습 시간이 오래걸림 Evaluation 추천 시스템의 성능 평가는 분류 등 다른 작업과는 평가 방식이 다르다. 실험 데이터에서 정답은 존재하지만 단순히 Precision, Recall을 통해 평가하기에는 정확도 비교가 어렵다. 따라서 사용자의 만족도 등을 고려한 지표를 만들어 사용하는데 이 글에서는 Normalized Discounted Cumulative Gain (NDCG) 지표를 사용하여 평가하는 방식을 소개한다. CF 추천 알고리즘 구현 이 글에서는 CF를 통해 간단한 추천 시스템을 만들어 볼 것이다. Content-based 방식은 추후 다른 글에서 다룰 예정이다. nodeml 라이브러리 nodeml은 요즘 기계학습 실험을 진행하면서 관련 알고리즘을 정리하며 만든 node.js용 기계학습 라이브러리이다. 현재 Bayes, CNN 등의 분류 알고리즘과 User-based CF 알고리즘을 라이브러리 형태로 구현해 놓았고, Yeast, bbc의 공개된 데이터셋과 개인적으로 수집해놓았던 사용자별 영화 평가 데이터 220만건을 샘플 데이터로 이용 할 수 있게 해놓았다. 라이브러리 설치는 node.js 프로젝트 경로에서 아래의 명령어를 통해 설치가 가능하다. npm install --save nodeml nodeml을 이용한 추천 시스템 코드 아래의 코드는 영화 데이터를 nodeml을 사용하여 사용자별 40개씩 추천한 후 ndcg를 계산한 코드이다. const {sample, CF, evaluation} = require('nodeml'); const movie = sample.movie(); // 영화 데이터셋 {movie_id: no, user_id: no, rating: num, like: num} let train = [], test = []; for (let i = 0; i &#60; movie.length; i++) { if (Math.random() &#62; 0.8) test.push(movie[i]); else train.push(movie[i]); } const cf = new CF(); cf.maxRelatedItem = 40; cf.maxRelatedUser = 40; cf.train(train, 'user_id', 'movie_id', 'rating'); let gt = cf.gt(test, 'user_id', 'movie_id', 'rating'); let result = cf.recommendGT(gt, 40); let ndcg = evaluation.ndcg(gtr, result); console.log(ndcg); 영화 데이터셋 nodeml에 있는 영화 데이터는 &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2103" class="more-link">더 보기<span class="screen-reader-text"> "추천 알고리즘 구현하기 (User-based Collaborative Filtering)"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2103/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2103</post-id>	</item>
		<item>
		<title>Javascript Promise 객체 활용 &#8211; Value 처리</title>
		<link>https://proinlab.com/archives/2086</link>
				<comments>https://proinlab.com/archives/2086#comments</comments>
				<pubDate>Wed, 21 Dec 2016 07:26:46 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Node.js]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2086</guid>
				<description><![CDATA[Javascript 코딩을 할 때 Promise를 사용하여 비동기 함수를 체계적으로 활용 할 수 있다. Promise를 잘 사용하면 Async 보다 깔끔하게 코드 정리가 가능하다. 예제 코드는 여기에서 확인 할 수 있다. Promise 객체 new Promise()를 선언할 때 지시된 함수가 실행되기 때문에 Promise 객체는 함수로 Wrapping 하여 사용한다. 'use strict' let add = (arg1, arg2)=&#62; new Promise((resolve)=&#62; { setTimeout(()=&#62; { console.log('add executed'); resolve({result: arg1+arg2}); }, 1000); }); let sub = (arg1, arg2)=&#62; new Promise((resolve)=&#62; { setTimeout(()=&#62; { console.log('sub executed'); resolve({result: arg1-arg2}); }, 500); }); 위의 코드는 비동기 함수인 setTimeout를 Promise를 통해 간단하게 구현해본 코드이다. add, sub 함수는 각각 1000ms, 500ms 후에 arg1, arg2를 더하거나 뺀 값을 돌려준다. add(1, 2); sub(3, 4); 위와 같이 두 함수를 실행하면 sub는 500ms 후, add는 1000ms 후에 결과를 돌려주기 때문에 sub가 먼주 출력되고 add가 출력된다. add와 sub를 순차적으로 실행하기 위해서는 아래와 같이 사용한다. add(1, 2) .then((data)=&#62; sub(data.result, 4)) .then((data)=&#62; { console.log(data); }); add 함수가 실행된 후 sub 함수를 실행하기 위해서는 add 함수를 호출한뒤 then 함수를 호출하여 순차적으로 작업을 진행 할 수 있다. then의 콜백 함수에서는 promise의 결과값을 반환해 주고 return을 통해 다음 작업을 지정 할 수 있다. Promise 결과값 처리 Promise A, B, C를 선언 한 후, C에서 A의 결과값을 필요로 할 때가 있다. 이러한 경우 Promise에서 이전 결과에 대한 접근을 제공하지 않기 때문에 전역으로 활용할 수 있는 변수를 선언하여 각각을 저장해 놓아야한다. 하지만 전역 변수로 선언하면 다른 변수와 overwrite되는 등의 문제가 발생한다. Promise.values = []; Promise.id = 0; Promise.exec = (promise)=&#62; { let thisId = Promise.id; if(promise) { promise.then((data)=&#62; { Promise.values[thisId] = data; resolve(data); }); Promise.id++; return promise; } Promise.id = 0; return new Promise((resolve)=&#62; resolve()); } 이 글에서는 이러한 문제를 Promise에 변수 및 함수를 추가하여 해결하였다. Promise 함수를 Promise.exec를 통해 wrapping하여 사용하고, 이 때 각각의 결과를 id를 지정하여 Promise.value에 저장한다. let A = (arg1, arg2)=&#62; new Promise((resolve)=&#62; { console.log('A Executed'); setTimeout(()=&#62; { resolve({result: arg1 + arg2}); }, 500); }); let B = (arg1, arg2)=&#62; new Promise((resolve)=&#62; { console.log('B Executed'); setTimeout(()=&#62; { resolve({result: arg1 - arg2}); }, 500); }); let C = (arg1, arg2)=&#62; new Promise((resolve)=&#62; { console.log('C Executed'); setTimeout(()=&#62; { resolve({result: arg1 * arg2}); }, 500); }); 함수 실행을 위해 A, B, C 함수를 선언하였다. 각각 setTimeout 후에 파라미터를 +, -, * 로 계산하여 {result: } 의 형태로 반환해주는 Promise 객체이다. 선언한 A, B, C 함수를 순차적으로 실행하기 위해서는 아래와 같이 코드를 사용하면 된다. Promise.exec() .then(()=&#62; Promise.exec(A(1, 2))) .then((data)=&#62; Promise.exec(B(data.result, 4))) .then((data)=&#62; Promise.exec(C(Promise.values[0].result, Promise.values[1].result))) .then((data)=&#62; { // Promise A result console.log(Promise.values[0]); // Promise B result console.log(Promise.values[1]); // Promise C result console.log(data); // or console.log(value[2]); }); Promise.exec 함수에 Promise 객체를 지정하지 않고 실행하면 Promise.id를 0으로 초기화하고 Dummy Promise 객체를 반환한다. 이 후 A, B, C를 각각 Promise.exec를 통해 실행하면 Promise.values에 0부터 순차적으로 값이 대입된다. 3번째로 실행되는 C에서 이전 두개의 결과값을 사용하기 위해서는 Promise.values[0], Promise.values[1]을 사용해서 이전 변수값을 불러 올 수 있다. P.S. Promise를 사용할 때, 맨 처음 실행시 사용하려는 Promise 객체를 바로 호출하기보다는 Dummy Promise 객체를 생성하여 실행하는 것이 좋다. Dummy 객체를 사용하지 않으면 A, B, C의 함수를 순차적으로 실행하도록 하였다가, B, C, A의 순으로 변경하여 실행할 때 코드를 바꾸기가 다소 번거롭다. 하지만 시작시 Dummy 객체를 사용하면 &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2086" class="more-link">더 보기<span class="screen-reader-text"> "Javascript Promise 객체 활용 &#8211; Value 처리"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2086/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2086</post-id>	</item>
		<item>
		<title>Docker 시작하기</title>
		<link>https://proinlab.com/archives/2073</link>
				<comments>https://proinlab.com/archives/2073#respond</comments>
				<pubDate>Sat, 17 Dec 2016 05:49:15 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Docker]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=2073</guid>
				<description><![CDATA[참고자료: https://docs.docker.com/engine/getstarted/step_four Docker는 VMWare 등과 같은 운영체제 가상화 프로그램이다. docker가 설치되어있다면 개발 환경을 설정할 필요 없이 이미지를 통해 설치하여 바로 실행이 가능하기 때문에 서버 운영, 웹 어플리케이션 배포 등을 간편히 해준다. 최근 Saturn이라는 Web IDE를 개발하면서 쉽게 배포하기 위해 Docker를 사용해보았는데, 프로그래밍 교육용 프레임워크 배포에도 유용하게 사용될 것 같다. 이 글에서는 웹 어플리케이션을 Docker 이미지로 패키징하고 Docker Hub에 배포하는 방법을 작성하였다. Dockerfile 프로젝트 폴더 생성 $ mkdir mydocker $ cd mydocker $ touch Dockerfile $ touch run.sh 파일 편집 Dockerfile FROM node:latest MAINTAINER Yeonghun Chae &#60;proin@proinlab.com&#62; ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 COPY run.sh / RUN chmod 755 /run.sh RUN npm install express-generator -g RUN express --view=jade myapp &#38;&#38; \ cd myapp &#38;&#38; \ npm install WORKDIR /myapp EXPOSE 3000 CMD ["/run.sh"] run.sh 파일 #!/usr/bin/env bash cd /myapp DEBUG=myapp:* npm start bash 파일의 경우 #!/usr/bin/env bash를 상단에 필수적으로 입력해주어야한다. 일반적인 리눅스 시스템에서는 위의 옵션이 없어도 실행이 가능하지만 Docker 이미지의 경우 실행해주려면 bash 환경을 지정해주어야한다. 이 태그가 없으면 콘테이너 실행시 Panic 에러가 발생한다. Dockerfile 구조 Base Image FROM node:latest 생성할 이미지의 Base 이미지를 FROM을 통해 지정할 수 있다. 이 글에서는 node 기반의 express 서버를 생성할 것이기 때문에 node 이미지의 최신 버전을 사용하였다. 생성된 이미지는 빌드시 다운받아진다. MAINTAINER MAINTAINER Yeonghun Chae &#60;proin@proinlab.com&#62; 관리자에 대한 정보를 입력한다. COPY COPY run.sh / 현재 경로의 파일을 Image의 특정 경로로 복사해준다. 위의 코드는 run.sh 파일을 이미지의 루트 경로로 복사해준다. RUN RUN npm install express-generator -g 이미지에서 해당 명령어를 실행한다. 데비안 계열의 이미지를 Base로 사용한다면 apt-get 등의 명령어 또한 실행 가능하다. WORKDIR WORKDIR /myapp RUN을 실행할 작업 경로를 지정해준다. Etc. https://docs.docker.com/engine/reference/builder 에서 Dockerfile에 관련된 추가적인 내용을 확인할 수 있다. Build Dockerfile Build 빌드시 Dockerfile의 내용을 바탕으로 명령어가 실행된다. 실행하는 명령어가 많을 경우 build 시간이 꽤 오래걸린다. $ docker build -t express . 생성된 Image 확인 빌드 후 images 명령어를 실행해보면 아래와 같이 express 이미지가 생성된 것을 확인 할 수 있다. FROM을 통해 지정한 base 이미지 또한 함께 설치된다. $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE express latest 64415d5bbfa4 23 seconds ago 667.4 MB node latest 36dc1bb7a52b 9 days ago 655.5 MB Docker 실행 Docker 실행과 관련된 명령어는 docker run --help를 통해 확인할 수 있다. 이 글에서는 생성한 이미지를 host의 포트로 포워딩하여 실행하는 방법에 대해 작성하였다. Image를 Container로 실행 Container 실행 $ docker run -it --name express -p 3000:3000 express 생성된 Image를 실행하기 위해서는 위의 명령어를 통해 실행하면 된다. Ctrl-C 를 입력하면 프로세스가 종료된다. 실행 옵션의 역할은 아래와 같다. -i: interactive mode -t: tty mode --name: Container 이름 지정 -p: host:container, container의 port를 host로 포워딩한다. Container 제거 프로세스가 종료되더라도 Container는 사라지지 않고 남아있다. docker ps 명령어를 입력하면 종료된 Container는 표시되지 않는데 -a 옵션을 사용하여 모든 Container를 확인 할 수 있다. $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 8b44a5dcc923 express "/run.sh" 12 seconds ago Exited express docker rm 명령어를 통해 Container를 제거할 수 있다. $ docker rm express 백그라운드로 실행 Container 실행 백그라운드로 프로세스를 실행하기 위해서는 -d 옵션을 사용하면 된다. -v 옵션을 통해 호스트와 파일을 공유해서 웹 서버 페이지를 변경 할 수 있고 Container를 제거하고 다시 실행해도 최신 상태를 저장 할 수 있다. $ docker &#8230; <p class="link-more"><a href="https://proinlab.com/archives/2073" class="more-link">더 보기<span class="screen-reader-text"> "Docker 시작하기"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/2073/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">2073</post-id>	</item>
		<item>
		<title>How to Manage Visitor Log in Express.js</title>
		<link>https://proinlab.com/archives/1969</link>
				<comments>https://proinlab.com/archives/1969#respond</comments>
				<pubDate>Thu, 01 Dec 2016 02:30:11 +0000</pubDate>
		<dc:creator><![CDATA[proin]]></dc:creator>
				<category><![CDATA[Node.js]]></category>
		<category><![CDATA[Application / Framework]]></category>

		<guid isPermaLink="false">http://proinlab.com/?p=1969</guid>
				<description><![CDATA[example code in here Overview Pre Install lwot saturn Define Libraries // visitor count example // use '127.0.0.1:port' for this app // this app didn't save log, if you want to maintain the log, you must have to save the log as file or database. const moment = require('moment'); const express = require('express'); const expressLess = require('express-less'); const jade = require('jade'); const app = express(); // express middleware const session = require('express-session'); const cookieParser = require('cookie-parser'); const PORT = 5001; const access = {}; Graph for Access Log Stream (Saturn) /* * in real server, this is not needed! * * graph will be updated * when somebody visit http://115.88.201.7:5001 or http://115.88.201.7:5001/subpage * * you can use for updating example graph by below bash script #!/bin/bash for i in {1..10} do number=$RANDOM if [ $number -gt 16000 ] then curl http://115.88.201.7:5001 else curl http://115.88.201.7:5001/subpage fi done */ visualize = ()=&#62; { // line color in graph const color = [ 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)' ]; // Maxium log size for display (sec) const MAX_LOG_DISPLAY = 60; // add your page for logging access let pages = ['/', '/subpage']; // select access data, this will be changed to connecting database let times = []; for(let date in access) times.push(date); // for performance in testing maintainance, remove past access log for(let i = 0 ; i &#60; times.length - MAX_LOG_DISPLAY; i++) delete access[times[i]]; // select recent data times.splice(0, times.length - MAX_LOG_DISPLAY); // select display time, even if when visitor is zero let startTime = new Date(times[0]); let endTime = new Date(times[times.length - 1]); let timeShift = []; while(startTime.getTime() &#60;= endTime.getTime()) { timeShift.push(moment(startTime).format('YYYY-MM-DD HH:mm:ss')); startTime = new Date(startTime.getTime() + 1000); } times = timeShift; times.splice(0, times.length - 60); // create chart data let chartData = { labels: times, datasets: [] }; // create chart.js dataset for(let j = 0 ; j &#60; pages.length ; j++) { let page = pages[j]; chartData.datasets.push({ label: page, fill: false, borderColor: color[j % 6], borderWidth: 1, pointRadius: 0, data: [] }); } // add visit count to chart.js dataset for(let i = 0 ; i &#60; times.length ; i++) { let date = times[i]; for(let j = 0 ; j &#60; pages.length ; j++) { let page = pages[j]; if(access[date]) chartData.datasets[j].data.push(access[date][page] ? access[date][page] : 0); else chartData.datasets[j].data.push(0); } } // update chart in saturn let chart = { id: 'visitor-log', width: 600, height: 300, type: 'line', data: chartData, options: { scales: { ticks: { beginAtZero: true } } } }; console.graph(chart); } Log Handling using Express Middleware /* * update access log when every connection * by using express middleware */ app.use((req, res, next)=&#62; { // this will update access log in memory // for maintaining log, you have to change this to inserting database let today = moment().format('YYYY-MM-DD HH:mm:ss'); if(!access[today]) access[today] = {}; if(!access[today][req.path]) access[today][req.path] = 0; access[today][req.path]++; // in real server, this is not needed visualize(); &#8230; <p class="link-more"><a href="https://proinlab.com/archives/1969" class="more-link">더 보기<span class="screen-reader-text"> "How to Manage Visitor Log in Express.js"</span></a></p>]]></description>
						<wfw:commentRss>https://proinlab.com/archives/1969/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
						<post-id xmlns="com-wordpress:feed-additions:1">1969</post-id>	</item>
	</channel>
</rss>
