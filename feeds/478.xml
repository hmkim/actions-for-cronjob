<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>송은우의 Dev Blog</title>
    <link>https://rampart81.github.io/</link>
    <description>Recent content on 송은우의 Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>KO</language>
    <lastBuildDate>Sat, 07 Jul 2018 22:10:13 +0900</lastBuildDate>
    
	<atom:link href="https://rampart81.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform Proejct Directory Structure Best Practice</title>
      <link>https://rampart81.github.io/post/terraform-directory-structure/</link>
      <pubDate>Sat, 07 Jul 2018 22:10:13 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/terraform-directory-structure/</guid>
      <description>다른 프로젝트와 마찬가지로 terraform도 프로젝트 디렉토리 구조를 잘 잡는것이 중요하다. 하지만 terraform의 HCL (HashiCorp Configuration Language)은 Python이나 Java같은 프로그래밍 언어가 아니라 말 그대로 설정 언어이기 때문에 (YAML 같은) 어떻게 프로젝트 구조를 잡아야 좋을지 감이 쉽게 오지 않을수 있다.
이미 언급한대로 HCL은 설정언어 이다. 즉 terraform의 HCL 코드 repository는 여러 설정파일 들을 모아놓은 repository라고 생각할 수 있다. 그렇다면 잠시 생각의 범위를 넓혀서 생각해보자. 시스템 설정파일 이나 여러 DevOps task들은 꼭 terraform을 사용할 필요는 없다.</description>
    </item>
    
    <item>
      <title>MySQL: Row의 순위값 구하기</title>
      <link>https://rampart81.github.io/post/mysql_get_row_position/</link>
      <pubDate>Sun, 18 Feb 2018 01:53:00 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/mysql_get_row_position/</guid>
      <description>MySQL은 ranking 함수가 없다. 그래서 row의 순위 값을 구할려면 variable를 사용하거나 count를 사용한 sub query를 사용해서 구하는 방식이 일반적으로 사용되고 있다.
Variable를 사용해서 순위 값 구하기 SELECT id, value, ranking FROM ( SELECT t.id, t.value, @rownum := @rownum + 1 AS ranking FROM TABLE t JOIN (SELECT @rownum := 0) r ORDER BY t.value )  
Count와 Sub Query를 사용해서 순위 값 구하기 SELECT t.id, (SELECT COUNT(*) FROM table WHERE value &amp;lt;= t.</description>
    </item>
    
    <item>
      <title>리더의 조건</title>
      <link>https://rampart81.github.io/book/the_21_dispensible_quality_of_leader/</link>
      <pubDate>Sun, 21 Jan 2018 19:03:43 +0900</pubDate>
      
      <guid>https://rampart81.github.io/book/the_21_dispensible_quality_of_leader/</guid>
      <description>저자: John Maxwell 출간일: 1999년 출간 책의 주제: 리더쉽의 대가 John Maxwell이 제시하는 진정한 리더의 21가지 자격  John Maxwell은 자타가 공인하는 리더쉽의 대가 이다. 20년이 넘도록 리더쉽에 관한 다양한 책을 출간 했고 많은 강의 와 컨설팅을 하고 있다. 리더쉽에 관해 John Maxwell 보다 더 넓고 깊은 insight를 가지고 있는 사람이 전세계를 통틀어 몇이나 될까? 그의 오랜 경험과 지혜를 바탕으로 훌륭한 리더가 가져야 하는 리더쉽의 자질 혹은 본질들을 21가지로 정리해서 알려준다.</description>
    </item>
    
    <item>
      <title>자주쓰는 Dockerfile instruction들</title>
      <link>https://rampart81.github.io/post/dockerfile_instructions/</link>
      <pubDate>Wed, 16 Aug 2017 22:11:55 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/dockerfile_instructions/</guid>
      <description>FROM FROM instruction을 사용하여 base image를 지정한다. 주로 ubuntu 같은 OS를 지정하게 된다. Base image를 지정할때는 ubuntu:16.04 처럼 OS와 버젼까지 정확히 지정해주는것이 좋다.
FROM ubuntu:16.04  RUN package를 인스톨 한다든지 등등의 shell command를 해당 docker image에 실행시킬때 사용한다. 예를 들어, 해당 docker image에 nginx를 설치하고 싶다고 한다면 아래와 같이 dockerfile에 명시하면 된다:
RUN [&amp;quot;apt-get&amp;quot;, &amp;quot;install&amp;quot;, &amp;quot;-y&amp;quot;, &amp;quot;nginx&amp;quot;]  RUN instruction은 bin/sh -c command 통해서 주어진 커맨드들을 실행시킨다. 그러므로 만일 shell이 없는 platform에서 커맨드를 실행시켜야 한다면 exec instruction을 사용해야 한다.</description>
    </item>
    
    <item>
      <title>Docker Image 구조</title>
      <link>https://rampart81.github.io/post/docker_image/</link>
      <pubDate>Wed, 16 Aug 2017 22:11:51 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/docker_image/</guid>
      <description>Docker Images Docker image는 파일시스템들의 layer로 만들어져 있다. 가장 base layer는 boot filesystem bootfs로 일반적인 Linux boot 파일시스템으로 되어있다. Docker 유저가 직접적으로 boot filesystem을 사용할 일은 없으며, 실제로 container가 부팅이 되면 메모리로 옴겨지고 boot 파일시스템은 unmount된다.
Boot layer 다음에는 rootfs 라고 하는 root 파일 시스템 layer이다. Root 파일 시스템은 실제 OS 가 설치된다(예를 들어 Debian 이나 Ubuntu). 원래 리눅스에서는 root filesystem은 처음 mount될때는 read-only로 mount가 된후 integrity check후 read-write으로 바뀐다.</description>
    </item>
    
    <item>
      <title>Docker Introduction</title>
      <link>https://rampart81.github.io/post/docker_introduction/</link>
      <pubDate>Tue, 15 Aug 2017 15:00:33 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/docker_introduction/</guid>
      <description>Docker는 이미 많이 알려져있고 쓰이는 기술이다. 해외는 물론이고 국내에도 Docker 사용자가 늘고 있다. 그리고 docker를 소개하는 글은 넘치고 넘친다. 그럼에도 불구하고 docker 소개글을 쓰는 이유는 최근에 나에게 docker에 대해서 물어보시는 분들이 많이 생겨서 이 글을 쓰게 된다.
Docker는 무엇인가? Docker 라는 회사가 container virtualization 을 개발하였고 그래서 docker가 container virtualization 기술의 또다른 이름으로 오해하시는 분들이 있는데 container virtualization은 docker 이전에 이미 개발되어 존재 하고 있었다. Docker는 가상화 컨테이너에 application 배포를 자동화 시켜주는 오픈소스 엔진이다.</description>
    </item>
    
    <item>
      <title>자주 쓰는 docker commands</title>
      <link>https://rampart81.github.io/post/docker_commands/</link>
      <pubDate>Tue, 15 Aug 2017 15:00:33 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/docker_commands/</guid>
      <description>실행중인 docker container에 shell 접속하기  -i: doccker 컨테이너의 STDIN을 open한다. -t: doccker 컨테이너에 psuedo tty를 지정해준다. 위의 두 옵션을 사용하여 실행중인 doccker 컨테이너에 shell 접속을 할 수 있다.
  docker run -i -t ubuntu /bin/bash  Docker ps  현재 실행중인 docker container들을 볼 수 있다. (마치 ps 커맨드 처럼) -a 옵션을 설정하면 실행되었다 멈춘 컨테이너 들도 나열된다. -l 옵션을 설정하면 가장 최근의 컨테이너 정보가 나열된다 (가장 최근에 시작되었거나 멈추어진 컨테이너).</description>
    </item>
    
    <item>
      <title>The mythical man month</title>
      <link>https://rampart81.github.io/book/mythical_man_month/</link>
      <pubDate>Mon, 14 Aug 2017 19:28:47 +0900</pubDate>
      
      <guid>https://rampart81.github.io/book/mythical_man_month/</guid>
      <description>저자: Frederick Brooks 출간일: 1975년 (second edition: 1995년) 책의 주제: 소프투웨어 엔지니어링과 프로젝트 매니지먼트에 관한 내요을 담은 책으로서 여러 가지 내용을 다루고 있지만 가장 중심 주제는 단순히 더 많은 사람을 프로젝트에 투입한다고 해서 개발기간이 단축 되지 않고 오히려 증가한다는 것이다. 이것을 브룩스의 법칙이라고 한다.  The mythical man month (한국말로는 맨먼스 미신 )는 computer science 분야에서는 고전중에 고전인 책이다. 가장 유명한 책 중 하나이기도 하며, 출간 된지 50년이 넘은 책인데도 불구하고 아직까지도 널리 읽히는 책이다.</description>
    </item>
    
    <item>
      <title>Primary Key - Surrogate Key VS Natural Key</title>
      <link>https://rampart81.github.io/post/surrogate_key_vs_natural_key/</link>
      <pubDate>Mon, 14 Aug 2017 16:41:09 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/surrogate_key_vs_natural_key/</guid>
      <description>DB 테이블의 primary key를 surroage key를 사용할것이냐 아니면 natural key(bussiness key라고도 함) 를사용할것이냐는 질문은 개발자나 DB 관리자들 사이에서는 고전적인 주제다. 고전적인 주제 임에도 불구하고, 주관적인 선호도가 작용할수 있는 여지가 많은 주제이기 때문에 계속해서 이야기되는 주제이기도 하다.
Surrogate key는 business 적인 의미가 전혀 없이 단순히 해당 row를 나타내기 위한 생성한 key 이다. 글로 설명하기에는 명확하지 않을수 있지만 예제를 보면 아주 단순하다. 예를 들어 아래의 create table 구문에서
CREATE TABLE stock ( id INT NOT NULL AUTO_INCREMENT, ticker VARCHAR(20) NOT NULL, price DECIMAL(35, 4), PRIMARY KEY (ID) );  id가 바로 surrogate key의 전형적인 예 이다.</description>
    </item>
    
    <item>
      <title>Docker로 OpenVPN 쉽게 설치하기</title>
      <link>https://rampart81.github.io/post/openvpn_aws/</link>
      <pubDate>Sat, 12 Aug 2017 18:46:05 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/openvpn_aws/</guid>
      <description>AWS를 사용하여 infrastructure를 구성할때 널리 사용되는 보안 패턴중 하나가 중요 서버들을 private VPC에 구성하여 외부에서는 접속이 불가능 하도록 설정한후 bastion host를 통해서만 접속할수 있도록 하는것이다. Bastion host에 대해 간단히 설명하자면 내부 네트워크와 외부 네트워크 사이에 위치한 접속용 서버라고 생각하면 쉽다 (이보다 훨씬 복잡한 구조로 될 수도 있지만 아마 많은 스타트업 과 중견기업은 이정도 개념으로 사용하는 곳이 많을 것이다). 내부 서버들은 외부 접속은 모두 막고 bastion host를 통해서만 접속 가능하게 설정한후 bastion host는 접속이 허용된 유저들만 접속할수 있도록 설정함으로서 내부 서버가 직접적으로 외부에 노출되는 것을 막아준다.</description>
    </item>
    
    <item>
      <title>파이썬 package 배포 하기</title>
      <link>https://rampart81.github.io/post/python_package_publish/</link>
      <pubDate>Fri, 21 Jul 2017 18:46:05 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/python_package_publish/</guid>
      <description>Python은 가장 널리 쓰이는 언어중 하나고 오픈소스 라이브러리도 너무나 많으므로 당연히 오픈소스 배포과정이 쉽게 정리가 잘되어있을을것 같지만 의외로 헛갈리는 점들이 몇가지 있다. 알고나면 어렵지 않지만 처음 해보는 사람에게는 약간 혼동될수 있는 경우도 있으므로 정리를 해보기로 한다.
Steps 1 - setup.py 설정
setup.py파일을 프로젝트의 root 디렉토리에에 생성한다. 대부분의 빌드 설정을 setup.py 통해서 한다. setup.py파일을 통해 할수 있는 설정들은 여러가지가 있는데 그 중 가장 자주 쓰이는 설정들은 아래와 같다:
 name: 프로젝트 이름 version: 배포 버젼 description: 프로젝트 설명 author: 프로젝트 저자 author_email: 저자의 이메일 url: 프로젝트 사이트 주소.</description>
    </item>
    
    <item>
      <title>Terraform으로 Application Load Balancer 설정하기</title>
      <link>https://rampart81.github.io/post/lb_terraform/</link>
      <pubDate>Wed, 19 Jul 2017 18:49:05 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/lb_terraform/</guid>
      <description>AWS에서 제공하는 load balancer 서비스에는 2가지가 있는데 ALB(Application Load Balancer)와 ELB(Elastic Load Balancer)이다. 예전에는 AWS에서 ELB만 제공했었다. ELB는 굉장히 기본적인 load balancing 기능 밖에 제공하지 않았다. 예를 들어 url path에 따라 routing을 하는 기능 같은 것은 제공되지 않아서 많은 유저들이 ELB를 쓰지 않고 nginx나 HAProxy 등을 직접 운영하는 경우도 많았었다. ELB의 부족한 기능을 보완한것이 ALB이다. Url path 기반의 routing을 할수도 있고 최근에는 host-based routing 기능도 추가되었다. Terraform을 사용하여 ALB 설정을 구현해보자.</description>
    </item>
    
    <item>
      <title>Terraform으로 AWS Security Group 설정하기</title>
      <link>https://rampart81.github.io/post/security_group_terraform/</link>
      <pubDate>Tue, 18 Jul 2017 16:54:13 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/security_group_terraform/</guid>
      <description>Seucrity Group(보안그룹) 은 하나 이상의 인스턴스에 대한 트래픽을 제어하는 가상 방화벽 이다. 이전 post 에서는 VPC를 사용하여 큰그림의 전체적인 네트워크를 구현했다면 Security Group을 사용해서 더 세부적으로 (서버별로) 네트워크 트래픽을 제어할수 있다. Security Group을 사용하여 해당 인스턴스에 접속 할수 있는 소스 IP, Protocol 와 해당 인스턴스가 보낼수 있는 outbound 트래픽까지 설정할수 있다. 이전 post에서 구현했던 네트워크 아키텍쳐를 기반으로 security group 아키텍쳐를 구현해보자.
Security Group Architecture 간단한 security group 구성이다. 아래와 같은 보안그룹 법칙이 적용되어 있다.</description>
    </item>
    
    <item>
      <title>Terraform으로 VPC 설정하기</title>
      <link>https://rampart81.github.io/post/vpc_confing_terraform/</link>
      <pubDate>Mon, 17 Jul 2017 16:50:04 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/vpc_confing_terraform/</guid>
      <description>VPC(Virtual Private Cloud) 는 논리적으로 독립된 가상의 네트워크 이다. 즉 클라우드 상에서 논리적으로 분리된 네트워크 이다. 데이터센터 에서 직접 서버를 운영하면 네크워크 분리를 하기위해 네트워크 장비를 사용하여 실제 물리적으로 네트워크들을 용도에 맞게 구분하고 분리하게 되는데, 이를 클라우드 상에서 가상으로 구현 가능하게 한게 VPC이다. VPC를 이용하여 네트워크 아키텍쳐를 구현하기 위해선 아래의 개념들을 이해해야 한다.
 서브넷(subnet): 기본 서브넷 마스크를 사용하여 클래스로 묶여진 네트워크를 그보다 작은 네트워크로 나눈것. 즉 VPC의 경우 VPC를 더 상세하게 나눈 것.</description>
    </item>
    
    <item>
      <title>Five Wealth Secrets By Craig Hilll</title>
      <link>https://rampart81.github.io/book/five_wealth_secrets/</link>
      <pubDate>Thu, 06 Jul 2017 13:48:20 +0900</pubDate>
      
      <guid>https://rampart81.github.io/book/five_wealth_secrets/</guid>
      <description>저자: Craig Hill 출간일: 2013년 9월 26일 출간 책의 주제: 대부분의 사람들은 모르고 소수의 사람들만 인지하고 있는 부의 5가지 비결을 성경의 가르침을 기반으로 해설하고 있다. 단순한 자기개발서 나 돈을 버는 공식이 아닌 기독교인이 가져야 하는 건강한 재정적 개념을 알려준다.  서점에 가면 비슷한 제목의 책들이 넘쳐난다. 쉽게 빠른 시간안에 돈을 벌수 있다든가 부자 들만 아는 부자되는 비결이라 든가 등등의 유혹적인 제목의 책들이 많다. 처음에는 이 책도 그러한 종류의 책들중 하나인줄 알았다.</description>
    </item>
    
    <item>
      <title>Terraform으로 IAM 계정 설정하기</title>
      <link>https://rampart81.github.io/post/iam_config_terraform/</link>
      <pubDate>Wed, 05 Jul 2017 16:37:50 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/iam_config_terraform/</guid>
      <description>Terraform을 사용해서 IAM 계정을 설정하기 위해서 필요한 terraform resource들은 아래와 같다:
 aws_iam_user
 aws_iam_user_login_profile
 aws_iam_group
 aws_iam_group_policy
 aws_iam_group_membership
  위의 resource 들을 설정해서 새로운 IAM 유저를 생성하고 login profile을 설정해주고 그룹과 그룹에 해당하는 접근 권한들을 설정한후 유저를 그룹에 추가해줄수 있다. 주로 IAM 계정들은 개발자들을 위해 생성해주는 경우가 많은데 개발자들에게 제한된 접근권한을 제공하는 경우가 많다. 그리고 많은 경우, 대부분의 개발자들은 동일하거나 비슷한 접근권한 (예를 들어 EC2 권한)을 제공받는 경우가 많다.</description>
    </item>
    
    <item>
      <title>S3로 Terraform State file 관리하기</title>
      <link>https://rampart81.github.io/post/terraform-remote-state-file/</link>
      <pubDate>Wed, 28 Jun 2017 21:09:25 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/terraform-remote-state-file/</guid>
      <description>Terraform을 실행하여 인프라를 생성시킬때마다 terraform은 Terraform state file 이라는 파일(terraform.tfstate)에 실행한 작업들에 관한 정보를 저장한다. 예를 들어, terraform apply 커맨드를 사용하여 새로운 서버를 생성했다면 그에 관한 정보가 terraform.tfstate 파일에 저장이 된다. 이 파일은 JSON 포멧으로 되어 있는데, 유저가 설정해논 테라폼 설정들과 실제 클라우드 상에서의 상태간의 mapping을 기록해놓은 파일이다. 테라폼을 실행시킬때 마다 테라폼은 AWS 에서 (혹은 연결되어 있는 다른 provider에서) 최신 상태를 조회하여 state file을 업데이트 한다. 그리하여 새로 변경된 점들이 있는지 확인하여 실행시키는 것이다.</description>
    </item>
    
    <item>
      <title>Terraform 소개</title>
      <link>https://rampart81.github.io/post/what-is-terraform/</link>
      <pubDate>Wed, 28 Jun 2017 18:58:41 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/what-is-terraform/</guid>
      <description>2000년 초반까지만 하더라도 많은 소프트웨어 개발 회사들은 많은 비용과 시간을 서버 등등의 하드웨어를 빌드 하는데 사용했다. 시스템 엔지니어 혹은 ops 팀이라고 하는 서버 관리 팀이 따로 있는게 대부분 이었다. 개발자들이 빌드한 애플리케이션을 ops팀에게 넘기면 ops팀이 서버에 디플로이하는 과정을 담당했었다. 그리고 이러한 과정은 많은 부분이 수동 작업이었다. 당연히 비용과 시간이 많이 걸렸으며 문제도 많이 생겼었다. 개발자가 자기 dev box에서는 다 작동하는걸 확인하고 ops 팀에 넘겼는데 실제 프로덕션 서버에서는 문제가 발생했던 적은 예전에는 흔치 않게 겪었던 일이다.</description>
    </item>
    
    <item>
      <title>Vim &amp; Tmux에서 Mac/리눅스 클립보드(clipboard)로 copy &amp; paste 하기</title>
      <link>https://rampart81.github.io/post/vim-clipboard-share/</link>
      <pubDate>Fri, 23 Jun 2017 16:33:07 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/vim-clipboard-share/</guid>
      <description>Vim을 처음 사용하는 유저들은 몇가지 불편한점들이 있는데 그 중 가장 자주 언급되는것이 바로 vim에서 다른 프로그램(예를 들어, 크롬 브라우저)으로 텍스트 복사나 붙이기가 안된다는 것이다. Vim에서 y키로 yank를 해도 크롬 브라우저에서 paste가 안되거나 크롬 브라우저에서 코드를 복사해도 vim상에서 p로 paste가 안되는것이다. (Macvim 이나 Gvim 처럼 해당 OS 호환성을 높인 vim에서는 command+c 나 command+c 같은 해당 OS의 복사나 붙이기 키를 사용하는 우회적인 방법이 있기는 하다.)
Vim에서 다른 프로그램으로 복사 및 붙이기가 안되는 이유는 vim이 자체 레지스터를 가지고 있기 때문이다.</description>
    </item>
    
    <item>
      <title>오만과 편견(Pride and Prejudice)를 읽고</title>
      <link>https://rampart81.github.io/book/pride_and_prejudice/</link>
      <pubDate>Fri, 23 Jun 2017 15:40:13 +0900</pubDate>
      
      <guid>https://rampart81.github.io/book/pride_and_prejudice/</guid>
      <description>저자: 제인 오스틴 출간일: 1813년 1월 28일 출간 책의 주제: 8 ~ 19세기 영국을 무대로 여성의 결혼과 오해와 편견에서 일어나는 사랑의 엇갈림을 그린 연애 소설. 섣부른 편견이 사람의 의도, 그리고 나아가서는 성품, 에 대해 얼마나 많은 오해를 초래할수 있는지를 18~19세기 영국을 무대로 한 남녀의 연애 이야기로 풀어낸다.  Warning: 스포일러가 있을수 있습니다!
오만과 편견은 단순한 연애소설이라고는 할 수 없다. 한 남녀의 연애 스토리를 중심으로 이야기가 이루어지기 때문에 연애소설 이라는 타이틀이 틀린 말은 아니지만 흔히 볼 수 있는 가벼운 연애 이야기는 아니다.</description>
    </item>
    
    <item>
      <title>일본 제일부자 손정의를 읽고</title>
      <link>https://rampart81.github.io/book/richest_in_japan_mr_son/</link>
      <pubDate>Fri, 02 Jun 2017 15:40:13 +0900</pubDate>
      
      <guid>https://rampart81.github.io/book/richest_in_japan_mr_son/</guid>
      <description>저자: 이노우에 아쓰오 출간일: 2006년 7월 4일 출간 책의 주제: 일본의 최고 부자중 한명인 제일교포 손정의의 성장기와 성공하기 까지 도전 과정들을 기록한 책. 손정의의 인간적인 면을 부각한 책이다.  성공한 사람들의 전기를 읽으면서 항상 느끼는 점이지만 크게 성공한 사람들은 공통점이 있다. 바로 꿈이 크다는 거다. 목표를 굉장히 크게 잡는다. 종종 주변 사람들이 불가능하거나 허왕되다고 말할정도의 목표를 잡는다. 여기서 바로 일반 사람들과 가장 큰 차이점이 생기는것 같다. 사람의 크기는 그의 목표의 크기에 비례한다고 하지 않나?</description>
    </item>
    
    <item>
      <title>Python을 위한 ctags 세팅</title>
      <link>https://rampart81.github.io/post/python-ctags/</link>
      <pubDate>Fri, 21 Apr 2017 14:49:46 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/python-ctags/</guid>
      <description>Vim과 ctags를 같이 사용하면 왠만한 IDE 부럽지 않은 생산성을 낼수 있다. 나 같은 경우에는 Scala 코드를 짤때도 오직 Vim만 사용하는데, ctags를 사용해서 code navigation를 하고 있다. 파이썬 또한 ctags를 사용해서 쉽게 코드 navigation을 할수 있다. 예를 들어, C-] 커맨드를 사용하여 클라스 나 함수의 정의 부분으로 점프 할수 있다. 같은 이름의 함수 나 클라스가 여러게가 있다면 g]커맨드를 사용하여 리스트를 생성시키고 그 중 하나를 골라서 점프 할수도 있다.
ctags를 사용하여 멋지고 생상선 높은 파이썬 코딩을 하기 위해선 첫번째로 ctags를 설치한다 (ctags가 아직 설치 되어 있지 않다면).</description>
    </item>
    
    <item>
      <title>한국 스타트업 생태계</title>
      <link>https://rampart81.github.io/post/korean-startup-environments/</link>
      <pubDate>Mon, 02 Mar 2015 14:49:42 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/korean-startup-environments/</guid>
      <description>최근에 동생 결혼식이 있어서 한국에 다녀왔다. 한국에 간김에 한국의 스타트업과 IT 환경을 더 이해하고자 Startup Alliance Korea 에서 주최하는 수요 아침 모임 도 다녀오고 한국 스칼라 개발자 모임에도 참가했었다. 그리고 그곳에서 만난 개발자님 덕분에 한국의 유명한 IT 기업들인 NAVER, 카카오톡, 그리고 SK Planet 의 분당 판교 office 에 private 견학(?)을 할수 있는 기회가 있었다. 판교의 여러 회사들을 직접 들어가보고 그곳에서 일하시는 개발자님들을 만나서 여러 이야기들을 나누어 보고 느낀것은 한국 개발자의 근무환경이 생각보다 훨씬 좋았다는 것이었다.</description>
    </item>
    
    <item>
      <title>Digital Worship</title>
      <link>https://rampart81.github.io/post/digital_worship/</link>
      <pubDate>Sat, 02 Jun 2012 14:46:56 +0900</pubDate>
      
      <guid>https://rampart81.github.io/post/digital_worship/</guid>
      <description>나는 전에 가끔 주일예배를 가기전에 고민하던것이 한가지가 있었다. 그것은 바로 성경책을 가져갈것이냐 말것이냐 였다. 아니 이게 무슨 말도 안되는 소리인가 하시는 분들도 있을수 있겠다. 예배를 가는데 성경책을 가지고 가지 않다니? 군인이 전쟁에 총알 없이 나가는 것이나 마찬가지 아닌가? 내가 이런 고민을 했던 이유는 바로 내가 갖고있는 iPhone 에 성경 애플리케이션이 있기때문이다. 즉 아이폰 으로 성경책을 볼수 있는데 굳이 성경책을 또 들고갈 필요가 있나 라는 고민을 했었다. 물론 난 항상 그래도 성경책을 가져갔던거 같다.</description>
    </item>
    
  </channel>
</rss>