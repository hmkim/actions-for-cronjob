<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/rss2full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" version="2.0"><channel><atom:id>tag:blogger.com,1999:blog-6060875800282210631</atom:id><lastBuildDate>Thu, 07 Mar 2019 23:20:58 +0000</lastBuildDate><category>소프트웨어이야기</category><category>개발문화</category><category>사람과 기술</category><category>i18n</category><category>개발자</category><category>국제화</category><category>기반시스템/소스코드관리</category><category>개발조직</category><category>프로젝트/요구사항분석</category><category>개발프로세스</category><category>문화</category><category>스펙</category><category>프로젝트/국제화</category><category>소프트웨어</category><category>프로세스</category><category>리뷰</category><category>소프트웨어 개발</category><category>기반시스템</category><category>문서</category><category>분석</category><category>채용</category><category>프로젝트</category><category>L10n</category><category>공유</category><category>설계</category><category>Peer Review</category><category>SRS</category><category>소스코드관리</category><category>svn</category><category>기반시스템/빌드/릴리즈</category><category>빌드</category><category>소프트웨어 공학</category><category>요구사항</category><category>경력</category><category>일정</category><category>프로젝트/일정</category><category>SCM</category><category>merge</category><category>기반시스템/버그관리</category><category>기업문화</category><category>번역</category><category>스타트업</category><category>아이디어</category><category>야근</category><category>유지보수</category><category>프로젝트/설계</category><category>프로젝트/품질관리</category><category>회의</category><category>CTO</category><category>GIT</category><category>cvs</category><category>review</category><category>subversion</category><category>릴리즈</category><category>버그관리</category><category>소스코드</category><category>소스코드관리시스템</category><category>소프트웨어공학</category><category>아키텍트</category><category>영어</category><category>외주</category><category>이슈관리</category><category>이직</category><category>인터뷰</category><category>조직</category><category>컨설팅</category><category>코딩테스트</category><category>테스트</category><category>프로젝트/구현</category><category>프로젝트/커뮤니케이션</category><category>협업</category><category>8시간근무</category><category>Agile</category><category>Branch</category><category>CEO</category><category>CMMI</category><category>Domain지식</category><category>NIH</category><category>SI</category><category>STAGE</category><category>Teamwork</category><category>UML</category><category>VSS</category><category>개발자트랙</category><category>거짓말</category><category>경영자</category><category>고참</category><category>관료화</category><category>관리</category><category>관리자</category><category>날짜</category><category>다국어</category><category>문서화</category><category>변경</category><category>변화</category><category>보고서</category><category>보상</category><category>보안</category><category>빌드자동화</category><category>스마트폰</category><category>시스템</category><category>실리콘밸리</category><category>아이폰</category><category>알고리즘</category><category>엑셀</category><category>요구사항분석</category><category>자동화</category><category>전략</category><category>조직문화</category><category>지식</category><category>지역화</category><category>창의성</category><category>커뮤니케이션</category><category>코드리뷰</category><category>토론</category><category>투자</category><category>평가</category><category>포상</category><category>프로젝트/리스크관리</category><category>한국어</category><category>한글</category><category>할아버지</category><category>혁신</category><category>후배</category><category>3WayMerge</category><category>BOM</category><category>Baseline</category><category>Bugzilla</category><category>Career Path</category><category>ClearQuest</category><category>Configuration</category><category>Conflict</category><category>Diffly</category><category>Feedburner</category><category>FireFighting</category><category>Firefighter</category><category>Flowchart</category><category>Follo up</category><category>IDE</category><category>Jira</category><category>KPI</category><category>MAC</category><category>Mamp;A</category><category>Mantis</category><category>New Year</category><category>Patch</category><category>RC</category><category>RSS</category><category>Refine</category><category>Requirement</category><category>Resolution</category><category>SI회사</category><category>SW교육</category><category>Syncro</category><category>System</category><category>TAG</category><category>TCL</category><category>TortoiseSVN</category><category>UTF-8</category><category>Wiki</category><category>allofsoftware</category><category>build</category><category>dfd</category><category>diff</category><category>feed</category><category>google groups</category><category>hotfix</category><category>hr</category><category>locale</category><category>mailing list</category><category>mis</category><category>opensource</category><category>prototype</category><category>qa</category><category>release</category><category>risk</category><category>spec</category><category>trac</category><category>xcode</category><category>가정</category><category>가치</category><category>각서</category><category>갑을</category><category>강연</category><category>개구리</category><category>개발단계</category><category>개발방법론</category><category>개발자채용</category><category>개발팀</category><category>개발팀장</category><category>개발환경</category><category>개성</category><category>객체지향</category><category>검토</category><category>게임</category><category>게임개발자</category><category>결정</category><category>경쟁</category><category>경쟁력</category><category>경험</category><category>계약</category><category>계획</category><category>고객</category><category>고객지원</category><category>공지</category><category>과거</category><category>관리자트랙</category><category>관행</category><category>교육</category><category>구글</category><category>구현</category><category>군대</category><category>권리</category><category>글로벌</category><category>기능</category><category>기법</category><category>기초체력</category><category>노트</category><category>다이어그램</category><category>달력</category><category>대기업</category><category>대박</category><category>대우</category><category>도자기</category><category>독립도메인</category><category>동료</category><category>동종업계취업금지</category><category>두뇌</category><category>똑똑한개발자</category><category>램프</category><category>레퍼런스</category><category>리더</category><category>리스크</category><category>마케터</category><category>마케팅</category><category>만능개발자</category><category>맥북</category><category>메모</category><category>모짜르트</category><category>목표</category><category>미래</category><category>미분류</category><category>방법론</category><category>방해</category><category>방해요인</category><category>백업</category><category>버그추적</category><category>베이스라인</category><category>베타</category><category>보고</category><category>보스</category><category>복사</category><category>부품</category><category>브랜치</category><category>비기능</category><category>사람과기술</category><category>사실</category><category>사전</category><category>상벌</category><category>생존력</category><category>성능</category><category>성장</category><category>세계최초</category><category>세미나</category><category>소스관리</category><category>소스코드트리</category><category>소스트리</category><category>소프트웨어국제화</category><category>소프트웨어사업</category><category>소프트웨어전문가</category><category>수학</category><category>숙청</category><category>슈퍼맨3</category><category>스파이</category><category>습관</category><category>시간</category><category>시행착오</category><category>신규입사</category><category>신기술</category><category>신입</category><category>신참</category><category>실천</category><category>아웃소싱</category><category>안드로이드폰</category><category>안정성</category><category>알파</category><category>앱</category><category>앱스토어</category><category>약어</category><category>업계동향</category><category>업그레이드</category><category>에버노트</category><category>여자</category><category>역량</category><category>연봉</category><category>영웅</category><category>요구분석</category><category>위기</category><category>유머</category><category>은탄환</category><category>의견</category><category>의무</category><category>이슈처적</category><category>이인자</category><category>인수</category><category>인질범</category><category>인프라스트럭쳐</category><category>일본어</category><category>임금</category><category>입사</category><category>자기계발</category><category>재택근무</category><category>전문가</category><category>정부과제</category><category>정치판</category><category>제품화</category><category>조삼모사</category><category>조선</category><category>주먹구구</category><category>주석</category><category>중박</category><category>집중</category><category>창업공신</category><category>처우</category><category>추적</category><category>추측</category><category>축구</category><category>캐리어</category><category>캐리어패스</category><category>컨설턴트</category><category>컴포넌트</category><category>코딩</category><category>테스트케이스</category><category>테스트팀</category><category>투표</category><category>팀웍</category><category>파벌</category><category>파이</category><category>파킨슨의법칙</category><category>패치</category><category>표현</category><category>피아노</category><category>피어리뷰</category><category>피처폰</category><category>한방</category><category>핫픽스</category><category>형상관리</category><category>호칭</category><category>혹사</category><category>휴가</category><category>히딩크</category><title>All of Software</title><description>전규현의 소프트웨어 이야기</description><link>http://www.allofsoftware.net/</link><managingEditor>noreply@blogger.com (전규현)</managingEditor><generator>Blogger</generator><openSearch:totalResults>402</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/allofsoftware" /><feedburner:info uri="allofsoftware" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><feedburner:emailServiceId>allofsoftware</feedburner:emailServiceId><feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4908102534875844208</guid><pubDate>Fri, 05 Oct 2018 07:10:00 +0000</pubDate><atom:updated>2018-10-05T16:11:14.146+09:00</atom:updated><title>이우소프트에서 함께 일할 동지를 찾습니다.</title><description>AI 개발, Application 개발, Project Manager 등 다양한 분야에서 같이 일할 직원을 찾습니다.&lt;br /&gt;많은 지원 부탁합니다.&lt;br /&gt;&lt;br /&gt;여기를 클릭 =&amp;gt;&amp;nbsp;&lt;a href="http://www.saramin.co.kr/zf_user/jobs/relay/view?view_type=search&amp;amp;rec_idx=34745738&amp;amp;isMypage=no&amp;amp;gz=1&amp;amp;recommend_ids=eJxNjrkNwDAMA6dJb1ESKdUZJPtvERcGrPJw4ONBZiY%2BIh69HjKRdtE36cuuYwnyIiGsgbVy2AiVD%2BvYSNhpNu9hq7zqWnobRlbqHpjw8Wp3ae%2FyZCMpGzZg87N6zc%2FWrIvOZIwsztAPsJRA7w%3D%3D&amp;amp;t_ref=search&amp;amp;t_ref_content=generic&amp;amp;searchType=search&amp;amp;searchword=%EC%9D%B4%EC%9A%B0%EC%86%8C%ED%94%84%ED%8A%B8&amp;amp;paid_fl=n#seq=0"&gt;&lt;span style="color: blue;"&gt;채용 공고 URL&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;기간은 10월 15일까지 입니다.&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/BWnzrEEf8Tw" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/BWnzrEEf8Tw/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2018/10/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4341662782308918121</guid><pubDate>Fri, 20 Apr 2018 14:00:00 +0000</pubDate><atom:updated>2018-04-20T23:00:19.442+09:00</atom:updated><title>프로세스가 개발 문화를 이기기 어려운 이유</title><description>&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;우리나라의 많은 기업들은 글로벌 수준의 소프트웨어 개발 역량 확보에 실패했다. 10년 전쯤부터는 막대한 자본을 투입해서 개발자 확보 및 소프트웨어 개발에 투자를 하더니 이제는 소프트웨어는 실패했다는 자성을 하고 있다. 돈과 사람을 아무리 투자해도 10년이라는 단기간(?) 내에는 글로벌 수준의 소프트웨어 개발 역량 확보는 쉽지 않다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;많은 기업들이 소프트웨어 개발 역량 확보를 위해서 주로 선택한 방법은 세계적인 방법론과 프로세스의 도입, 직원들에 대한 교육이다. 글로벌 소프트웨어 회사들이 하는 방식과 비슷하게 프로세스를 따르고 문서를 만들고 개발 환경도 비슷하게 갖추었다. 카페 같은 환경도 만들어서 자유롭게 일할 수 있도록 한 회사도 있다. 하지만 그 결과 그럭저럭 소프트웨어 프로젝트의 결과는 나왔으나 소프트웨어 개발은 더 비효율적으로 바뀌었다. 이유는 무엇일까?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;감당할 수 없는 수준의 프로세스는 오히려 독이 된다. 10년이라는 짧은 시간에 아직 역량이나 문화가 성숙되지 않은 상황에서 도입한 과도한 프로세스는 소프트웨어를 효율적으로 개발하게 하기 보다는 프로세스가 주인이 되어서 효율성은 되려 떨어지게 되었다. 이런 과정에서 문제가 생기면 이를 해결하기 위해서 프로세스는 더욱 복잡해져만 갔다. 모든 회사가 그런 것은 아니지만 많은 회사가 걸어온 길이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;소프트웨어를 가장 효율적으로 개발하는 방법은 프로세스에 상관없이 가장 적절한 과정으로 그냥 개발하는 것이다. 그 적절한 과정이라는 것은 성숙된 개발 문화 속에서는 자연스럽게 선택이 된다. 하지만 회사들은 이런 애매모호한 방법을 선택할 수는 없다. &amp;nbsp;이런 방법은 이미 개발자들의 역량이 충분히 확보가 되고 성숙된 개발 문화를 갖췄을 때만 가능하다. 그래서 많은 회사들은 이런 애매하고 어려운 개발 문화 발전 보다는 명백하고 따라하기 쉬워 보이는 개발 프로세스 정교화에 집중해왔다. 그결과 큰 사고는 줄어들었지만 과거에 주먹구구식으로 개발을 할 때보다 오히려 개발 효율성은 훨씬 떨어졌다. 가끔은 프로세스의 구멍 때문에 큰 사고가 나기도 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;프로세스를 아무리 잘 정해도 효율적인 개발 과정을 정의하기 어려운 이유는 뭘까? 아래 대화를 보자. 수십년간 소프트웨어 실전적으로 개발을 해온 전문가에게 질문을 하면 아래와 같이 답을 할 것이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 모든 소스코드는 코드리뷰를 다 해야 하나요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A. 아니요, 그때 그때 달라요.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 코드리뷰에 꼭 포함해야 하는 필수 리뷰어는 누구 인가요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 스펙은 꼭 작성해야 합니까?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 스펙을 작성할 때 가장 중요한 부분은 어디 인가요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 설계서는 꼭 작성해야 하나요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 효율적으로 설계서를 작성하는 방법은 무엇인가요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A.&amp;nbsp;그때 그때 달라요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 매번 경우마다 다른데 개발 프로세스는 어떻게 정하죠?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A. 그래서 프로세스를 너무 자세히 정하면 안됩니다. 최소한으로 정하고 개발자들의 판단을 믿어야 합니다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 대기업은 그래서 프로세스 테일러링을 통해서 프로젝트마다 적절히 프로세스를 간소화해서 산출물도 줄이는 등 개발 프로세스를 효율적으로 적용하려고 노력하고 있습니다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A. 이 또한 하다하다 안되니까 형식적으로 진행하는 겁니다. 심지어는 개발을 잘 모르는 사람들이 테일러링하기도 합니다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;Q. 알아서 하라고 하면 과거처럼 스펙도 없고, 공유도 안하고 주먹구구식으로 하지 않을까요?&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;A. 그렇기 때문에 역량과 문화가 중요합니다. 문화가 아무리 좋아도 역량이 안되면 공염불입니다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;일반적으로 프로세스는 복잡할수록 손해다. 문제만 없다면 프로세스가 없는 것이 제일 좋다. 문제가 있기 때문에 최소한의 제약을 가하는 것이다. 개발 문화의 성숙도가 높을수록 프로세스는 간단하다.&amp;nbsp;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;하지만 왜 이렇게 프로세스에 목을 맬까? 프로세스 도입은 쉽고, 개발문화 변화는 어렵기 때문이다. 골프채를 바꾸는 것은 쉬워도, 몸에 완전히 베어버린 골프 스윙을 바꾸는 것은 엄청나게 어렵다. 한사람의 생각과 행동을 바꾸기도 어려운데 전직원을 바꾸는 것은 정말 어렵다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;프로세스는 최소화로 정의하고 성숙된 개발문화를 만들어 가는데 집중하는 것이 좋다. 둘은 보완 관계이기도 하지만, 앙숙관계이기도 해서 프로세스를 너무 강조하는 환경에서는 개발문화를 발전시키기가 어렵다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;개발 문화에는 정보/지식 공유, 스펙 작성, 수평적인 조직, 전문가주의, 경력 보장, 상호 리뷰, 자율, 문서 작성 등 수많은 것들이 있다. 일일이 나열할 수는 없지만 일하는 속에서 이런 것들이 구성원들에게 자연스럽게 스며들도록 제도, 프로세스를 정의하고 독하게 추진을 해야 한다. 그래야 개발문화가 조금씩 바뀌어 나간다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;" /&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;이렇게 개발문화와 프로세스가 잘 조화를 이룰 때 소프트웨어 개발 역량이 세계적인 수준이 될 수 있다. 개발에 문제가 있다고 복잡한 프로세스를 도입해서 단기적으로 해결해보려는 시도는 장기적으로는 대부분 실패할 것이다.&amp;nbsp;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13.2px;"&gt;이글은&amp;nbsp;&lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20180409080059" style="color: #888888; text-decoration-line: none;"&gt;ZDNet Korea&lt;/a&gt;에 기고한 칼럼입니다.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/1BNstQ94Jdw" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/1BNstQ94Jdw/blog-post_20.html</link><author>noreply@blogger.com (전규현)</author><thr:total>2</thr:total><feedburner:origLink>http://www.allofsoftware.net/2018/04/blog-post_20.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4127672978205036639</guid><pubDate>Tue, 30 Jan 2018 08:39:00 +0000</pubDate><atom:updated>2018-02-07T18:02:17.069+09:00</atom:updated><title>소프트웨어 공학 공개 특강을 실시합니다. (설문 종료)</title><description>&lt;span style="font-size: large;"&gt;아래 설문에 응해주신 많은 분들께 감사드립니다. 설문 결과를 바탕으로 특강 계획을 세워서 곧 공지하도록 하겠습니다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;--------------------------------------------------------------------------------------------------------------------&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;이우소프트의 김익환 CTO와 전규현 CEO가 소프트웨어 공학 특강을 실시합니다. 특강은 실리콘밸리 회사들의 소프트웨어 개발 방법 등 소프트웨어를 효율적으로 개발하는데 필요한 핵심 노하우들로 구성이 되어 있습니다.&lt;br /&gt;&lt;br /&gt;특강 대상은 &lt;span style="color: blue;"&gt;개발자&lt;/span&gt;, &lt;span style="color: blue;"&gt;소프트웨어 회사의 경영자&lt;/span&gt;, &lt;span style="color: blue;"&gt;관리자&lt;/span&gt; 등 &lt;span style="color: blue;"&gt;소프트웨어 관련 종사자&lt;/span&gt;이며 &lt;span style="color: blue;"&gt;소프트웨어를 배우고 있는 학생&lt;/span&gt;도 포함합니다. 좀더 효율적인 특강을 진행하기 위헤서 사전에 몇가지를 설문 조사하려고 합니다.&lt;br /&gt;&lt;br /&gt;설문 조사 결과를 토대로 주제, 시간대 등을 결정하여 특강을 진행할 예정이니 많은 설문 참여 부탁합니다.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-size: large;"&gt;&lt;a href="https://docs.google.com/forms/d/1My7AYWhK5H2ppU5cPM0N-t_ptdaJubAfz707tUvDVX0"&gt;설문 참여하기&amp;gt;&amp;gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;강사 프로필은 아래 블로그에서 볼 수 있습니다.&lt;br /&gt;김익환&amp;nbsp; - &lt;a href="http://www.ikwisdom.com/"&gt;http://www.ikwisdom.com&lt;/a&gt;&lt;br /&gt;전규현 -&amp;nbsp; &lt;a href="http://www.allofsoftware.net/"&gt;http://www.allofsoftware.net&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;특강 장소는 양재역에 있는 사무실입니다.&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/fKMfqzsu0UQ" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/fKMfqzsu0UQ/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>3</thr:total><feedburner:origLink>http://www.allofsoftware.net/2018/01/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-7556075423937728380</guid><pubDate>Fri, 01 Dec 2017 00:01:00 +0000</pubDate><atom:updated>2017-12-01T10:08:22.956+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">조삼모사</category><title>한국 회사와 불가리아 회사</title><description>&lt;div&gt;필자는 꽤 오래 전에 비슷한 일을 하는 두 회사를 접했다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;두 회사 모두 웹프레임워크를 개발하는 회사였다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;한국 회사는 웹프레임워크를 솔루션 형태로 개발해서 3~5천만원을 받고 약간의 SI를 더해서 한국 회사들을 대상으로 영업을 하고 있었다. 고객 중에는 외국회사도 있었고, 매출을 꽤 일으키고 있었다. 보유 기술 자체는 좋았다. 하지만 기획, 스펙, 설계 같은 것은 제대로 된 것이 없었다. 고객이 생기면 고객의 요구사항대로 만들고 고쳐서 구축해주기 급급했다. 그렇게 여러 프로젝트들이 동시에 진행되고 있었다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그렇게 회사를 운영하면 곧 망할 것이 확실했지만 워낙 희망에 차 있어서 그렇게 말해줄 수가 없었다. 현재 회사가 눈에 띄지 않는 것으로 보아 없어진 것으로 예상된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;비슷한 시기에 불가리아 회사에서 개발한 웹프레임워크를 인터넷으로 접하게 되었다. 가격은 약 100만원 수준이었다. 데모 사이트가 너무 잘 구축되어 있어서 내가 필요한 것들이 다 제공되는지 쉽게 확인할 수 있었다. 여러 개발 언어를 지원하며 메뉴얼이 매우 잘 만들어져 있었다. 커스터머 서비스는 온라인으로만 진행이 되었다. 서비스 데스크 시스템이 잘 구축되어 질문을 하면 온라인으로 바로 답변이 왔다. 한국회사의 솔루션에 비해서 가격은 엄청나게 싸지만 성장 가능성은 엄청나 보였다. 직원이 많지도 않지만 이 회사는 곧 세계적인 회사가 될 것이라고 생각했다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이 회사는 Telerix라는 회사다. 2014년에 Progress software라는 회사에 2억6천만불(약 3천억) 에 인수되었다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;여기서 조삼모사의 교훈을 다시 생각해본다. 물론 조삼모사도 역량이 있어야 가능하다. 역량이 없다면 조사모삼 밖에는 할 수가 없다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt; &lt;br /&gt;&lt;div&gt;이 두 회사만의 현상은 아니다. 한국과 외국의 여러 소프트웨어 회사를 대표해서 보는 것 같아서 씁쓸하다.&amp;nbsp;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/jPuK4wAdSdg" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/jPuK4wAdSdg/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/12/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-2136802911574784809</guid><pubDate>Tue, 19 Sep 2017 12:01:00 +0000</pubDate><atom:updated>2017-10-19T09:00:58.918+09:00</atom:updated><title>SW회사 '사수 부사수 시스템'의 문제점</title><description>&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;우리나라 회사에서 후배를 키우는 가장 흔한 방법은 '사수 부사수 시스템'이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;필자도 오래 전부터 사수 부사수 시스템을 많이 봐왔고&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;지금도 매우 일반적인 방식이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이 용어는 군대에서 유래했다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;. M60&amp;nbsp;&lt;/span&gt;기관총 등 중화기들은 대부분 2명 이상이 운용해야 하고 사수와 부사수가 같이 장비를 다룬다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;영화 속 람보는 M60 기관총을 혼자서 양손에 하나씩 두개를 들고 쐈지만&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;원래는 2명이 쏴야 하는 무기다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이런 사수 부사수 시스템에서는 사수는 주업무를 하고 부사수가 보조 업무를 하며 업무를 익힌다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;. 1, 2&lt;/span&gt;년 후에는 부사수가 사수가 되어 또 다시&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&amp;nbsp;&lt;/span&gt;부사수를 교육하는 시스템이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;소프트웨어 회사에서도 비슷한 시스템을 가지고 있는 경우가 많다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;공식적이든 비공식적이든 사수 부사수 시스템을 가지고 있는 소프트웨어 회사에서는 신입개발자가 들어오면 회사에서 사수를 지정해준다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;사수 옆자리나 근처에 자리를 배정하여 사수와 많은 시간을 보내면서 하나씩 업무를 배워나갈 수 있도록 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;사수는 부사수에게 개발하고 있는 소프트웨어의 구조부터 기능&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;소스코드&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;빌드 방법&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;업무지식&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;회사의 시스템 사용법 등 많은 것을 가르쳐준다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div class="sub_view_cont_img" style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; margin: 0px; padding: 0px;"&gt;&lt;div class="align_center" style="margin: 30px 0px 40px; padding: 0px; position: relative; text-align: center;"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-AgFgnn4AOo0/WcB-0bdi9GI/AAAAAAACSGk/sYsYHUj7pWQhzcwjgPhwWo5y9E9ALneCgCLcBGAs/s1600/paikshow_bX9daHxv6kq.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="388" data-original-width="550" height="225" src="https://4.bp.blogspot.com/-AgFgnn4AOo0/WcB-0bdi9GI/AAAAAAACSGk/sYsYHUj7pWQhzcwjgPhwWo5y9E9ALneCgCLcBGAs/s320/paikshow_bX9daHxv6kq.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; line-height: 1.6; padding: 0px;"&gt;&lt;span style="color: #222222;"&gt;&lt;span style="font-size: 15px;"&gt;사수 부사수 시스템이 장점이 없는 것은 아니지만 많은 문제점을 가지고 있다. 어떤 문제를 가지고 있는지 알아보자. 정확하게는 사수 부사수의 문제라기 보다는 후배에게 지식을 전수할 준비가 안되어 있어서 주먹구구식으로 진행되는 사수 부사수 시스템의 문제이다.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s3" style="vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;● 사수, 즉&lt;span class="s2" style="vertical-align: top;"&gt;&amp;nbsp;&lt;/span&gt;선배가 후배 교육에 너무 많은 시간을 소비해야 한다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;후배 교육은 회사 입장에서 투자이기도 하지만 큰 비용이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;선배는 오랜 기간동안 지속적으로 시간을 빼앗긴다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;후배 교육은 꼭 필요하지만 문제는 시간이 많이 들어간다는 것이다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s3" style="vertical-align: top;"&gt;&lt;/span&gt;● 후배가 제대로 일을 하기까지 교육을 하는데 시간이 너무 많이 걸려서 현장 투입이 늦어진다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;회사마다 개인마다 다르기는 하지만 작게는 몇주부터 몇달이 걸리곤 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;부사수는 교육과 훈련을 어느 정도 받기 전까지는 제대로 일을 하기 힘들다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이때까지는 한사람의 개발자가 들어온 것이 아니고 0.5 또는 0.3 인원이기도 하고&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;심지어는 사수의 시간을 너무 많이 빼앗어서 마이너스 인력이 경우도 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;즉&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;후배가 없을 때보다 전체 개발 기간을 더 지연시키기도 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s3" style="vertical-align: top;"&gt;&lt;/span&gt;● 후배가 들어올 때마다 매번 반복적으로 가르쳐야 한다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;부사수가 다시 사수가 되어 후배를 가르치려면 상당한 시간이 걸리기 때문에 여전히 고참 개발자가 교육을 계속 해야 하고 시간 간격을 두고 5명의 개발자가 입사를 하면 교육 시간이&amp;nbsp;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;5&lt;/span&gt;배 들어간다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;● 사수도 많은 정보를 잊어버려서 제대로 교육을 하기가 쉽지 않다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;사수는 핵심 개발도 하고 교육도 하느라고 바빠서&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;개발을 하면서 문서를 제대로 작성할 시간도 없다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;그래서 악순환이 반복된다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;아무리 후배를 교육해도 결국 모든 문제 해결 요청은 고참에게 몰려서 고참은 여전히 더 바쁘다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;● 부사수는 너무 자주 물어보면 사수의 시간을 빼앗는 것 같아 미안해서 잘 물어보지 않게 된다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;뻔뻔한 후배는 궁금한 것이 있을 때마다 잘 물어보겠지만&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;사수가 얼마나 바쁜지를 매일 보게 되면 사수의 시간을 빼앗는 것을 미안해하곤 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;그래서 일을 그르쳐 문제를 만들고 나중에는 사수의 시간을 더 빼앗곤 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;strong&gt;■ 사수-부사수 한계 극복하려면 개발때 분석-설계 제대로 해야&lt;/strong&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;경영자는 그동안 문서가 너무 없어서 이런 일이 벌어진다고 생각하고 기존 소프트웨어의 문서를 만들라고 하는데 이미 개발된 시스템의 문서를 나중에 많는 것은 헛수고다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;문서는 원래 개발 전에 만들어야 제대로 만들 수 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;개발 후 만드는 문서는 필요한 정보의 10%나 제대로 적을 수 있을까 의문이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;또한&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;제대로 분석&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계를 하지 않고 이미 만들어진 소프트웨어는 시간을 아무리 많이 준다고 하더라도 다시 문서로 정리하기 어려운 구조로 되어 있는 경우가 많다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;그래서 악순환이 계속되고 사수 부사수 시스템에서 영원히 벗어나기 어렵게 된다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이런 사수 부사수 시스템을 계속 유지하는 한 기업은 현재 수준에서 벗어나기 어렵다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;회사를 조금만 키워도 개발 효율성은 점점 떨어져서&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;경쟁력 저하를 가져온다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;사수 부사수 시스템을 유지하는 회사에서의 후배에게 정보를 전달하는 방법의 비율을 보면 다음과 같다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s4" style="vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s4" style="vertical-align: top;"&gt;문서&lt;/span&gt;/&lt;span class="s4" style="vertical-align: top;"&gt;시스템&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span class="s4" style="vertical-align: top;"&gt;직접&lt;/span&gt;&amp;nbsp;&lt;span class="s4" style="vertical-align: top;"&gt;교육&lt;/span&gt;/&lt;span class="s4" style="vertical-align: top;"&gt;코칭&lt;/span&gt;&amp;nbsp;= 2:8&amp;nbsp;&lt;span class="s4" style="vertical-align: top;"&gt;또는&lt;/span&gt;&amp;nbsp;1:9&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;즉&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;문서나 시스템을 통해서는 10~20% 정도의 정보밖에 전달을 못하고 나머지는 사수가 직접 가르쳐야 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;이상적인 비율은 반대가 되어야 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;즉&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;, 8:2&amp;nbsp;&lt;/span&gt;정도가 되는 것이 좋다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;대부분의 정보는 문서나 시스템을 통해서 얻어야 하고&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;문서를 봐도 잘 모르겠는 정보는 멘토나 선배에게 물어보는 것이 좋다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;이것을 10:0 또는 9:1로 만드는 것은 거의 불가능하다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;오히려 더 비효율적이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="sub_view_cont_img" style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; margin: 0px; padding: 0px;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-uoV8BgN4DQA/WcB-_Fpv98I/AAAAAAACSGo/rikWHrDw3GARyNEBKZJTvO4O_RohiU4MQCLcBGAs/s1600/2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="366" data-original-width="550" height="212" src="https://2.bp.blogspot.com/-uoV8BgN4DQA/WcB-_Fpv98I/AAAAAAACSGo/rikWHrDw3GARyNEBKZJTvO4O_RohiU4MQCLcBGAs/s320/2.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;8:2&amp;nbsp;&lt;/span&gt;정도만 되면 위에서 언급한 문제점의 대부분이 해결된다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;고참 개발자의 시간을 너무 많이 빼앗지 않게 되고&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;신규 입사자가 아무리 못해도 마이너스 인력이 되지는 않는다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;스스로 공부를 할 수 있으니 후배의 노력에 따라서 얼마든지 빨리 배울 수도 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;또한 입사 후 실전 개발에 투입되는 시간은 훨씬 빨라진다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;그럼 사수 부사수 시스템을 탈피하는 방법은 무엇일까&lt;span class="s2" style="vertical-align: top;"&gt;?&amp;nbsp;&lt;/span&gt;분석&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계를 제대로 해서 개발을 하는 것이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;말은 참 쉽다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;하지만 실제는 정말 어렵다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;물론 이슈관리시스템이나 위키시스템 등 소프트웨어 회사에 필수적으로 필요한 시스템은 잘 구축되어 있어야 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;분석&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계 문서는 SW를 개발하는데도 필요하면 이 문서들은 나중에서 신입 사원을 교육시키는데도 매우 유용하다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;이런 체계를 갖춘 회사에서는 신입개발자가 입사를 해도 바로 개발에 투입이 가능하다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;물론 개발 능력을 갖춘 신입개발자여야 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;개발 능력 자체가 부족하다면 얘기가 안된다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;한사람 몫을 하려면 상당히 시간이 걸리기는 하겠지만 고참을 그렇게 많이 방해하지는 않는다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;궁금한 것이 있으면 문서나 시스템을 통해서 스스로 배울 수도 있고&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계가 잘 된 시스템에서는 개발을 할 때 알아야 할&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;정보의 범위가 작다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;자신이 개발해야 할 시스템의 인터페이스와 요구사항만 알면 된다&lt;span class="s2" style="vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" style="vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;대부분의 외부 인터페이스가 잘 정의 되어 있고&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;유닛 테스트는 이미 작성이 되어 있는 경우도 많다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;신입 개발자에게 시스템 내부의 하위 설계는 직접 맡기는 경우도 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;또는 고참 개발자가 내부 설계까지 해주고 내용만 채우도록 하는 경우도 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;시스템이 작은 서브시스템으로 잘 나눠져 있기 때문에 신입 개발자라도 개발에 참여하기 쉽고 문제가 생겨도 전체 시스템에 큰 영향을 주지는 않는다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;물론 이렇게 하려면 분석&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계를 매우 잘해야 한다&lt;span class="s2" style="vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;모든 회사가 성숙도와 역량이 달라서 회사마다 벌어지는 현상은 다르다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;필자는 상당한 성숙도를 가진 회사를 기준으로 설명을 하고 있다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;이우소프트도 그러한 방향을 향해 발전해 가고 있는 진행형이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;아직 제대로 된 시스템도 구축이 안되어 있고 분석&lt;span class="s2" style="vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계 문서도 제대로 쓴적이 없는 회사라면 어떻게 할까&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;?&lt;/span&gt;한번에 극복할 수는 없다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;새로운 제품부터 분석&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계를 하나씩 제대로 하는 습관을 들여야 한다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;방법론과는 상관이 없이 분석&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;,&amp;nbsp;&lt;/span&gt;설계를 적절히 제대로 하는 것은 소프트웨어 개발의 기본이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&amp;nbsp;&lt;/span&gt;이렇게 하나씩 제대로 해나가면 지식정보가 축적되고 점차 사수 부사수 시스템에서 벗어날 수 있을 것이다&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;이 글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20170918134302"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/span&gt;&lt;br /&gt;&lt;span class="s2" rel="background-color: initial;" style="background-color: initial; vertical-align: top;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/qx9960zlurw" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/qx9960zlurw/sw.html</link><author>noreply@blogger.com (전규현)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-AgFgnn4AOo0/WcB-0bdi9GI/AAAAAAACSGk/sYsYHUj7pWQhzcwjgPhwWo5y9E9ALneCgCLcBGAs/s72-c/paikshow_bX9daHxv6kq.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/09/sw.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-5938834621523398658</guid><pubDate>Mon, 04 Sep 2017 23:44:00 +0000</pubDate><atom:updated>2017-09-05T08:44:16.628+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">문화</category><category domain="http://www.blogger.com/atom/ns#">회의</category><title>나쁜 회의가 회사를 망친다</title><description>&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;나쁜 회의 문화가 회사를 망친다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;잦은 회의와 장시간 회의 때문에 일 할 시간이 없다고 하소연하는 사람이 많다. 특히, 고참 개발자들에게는 그 폐해가 더 크다. 개발과 회의는 두뇌의 모드가 완전히 달라서 섞어서 하게 되면 개발 효율이 나지 않고, 많은 회의에 끌려 다니다 보면 어느새 개발자로서의 정체성을 잃어버리게 된다. 이런 시간이 지속되면 개발자의 경력에서 벗어나 돌아올 수 없는 어정쩡한 관리자의 길을 걷게 된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;그럼, 우리 주변에서 흔히 볼 수 있는 회의의 나쁜 증상들을 살펴보자.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“여러분, 회의 좀 합시다.”&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;상급자의 요구에 의해서 수시로 소집되는 회의 유형이다. 갑자기 소집을 하기 때문에 주제와 내용이 회의 참석자들에게 충분히 공유되지 않고, 참석자들은 각자의 업무 계획이 있었는데 갑작스런 회의 때문에 일정도 틀어지고, 부족한 준비로 회의 진행도 부실하게 된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“직급이 깡패.” 회의를 하면서 서로 합리적으로 논의하여 결정을 못하고 상명하복식으로 무조건 윗사람이 결정하는 회의 유형이다. “편하게 얘기들 해보세요”라고는 하지만 편하게 얘기할 수 없고 결국에는 윗사람이 독단적으로 결정한 것을 통보하는 회의가 되곤한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div class="sub_view_cont_img" style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; margin: 0px; padding: 0px;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-p1JZionnA7Y/Wa3lIK3sj5I/AAAAAAACRBg/6TnabuisP1gC40cLU_B8cV7HBKdkWFdygCLcBGAs/s1600/paikshow_S1avru479Fp.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="309" data-original-width="550" height="223" src="https://4.bp.blogspot.com/-p1JZionnA7Y/Wa3lIK3sj5I/AAAAAAACRBg/6TnabuisP1gC40cLU_B8cV7HBKdkWFdygCLcBGAs/s400/paikshow_S1avru479Fp.jpg" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;​&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“그럼, 네가 한번 해봐." 아이디어를 꺼내면 얘기를 꺼낸 사람이 일을 떠맡는 유형. 그러다 보니 해야할 얘기나 아이디어가 있어도 쉽사리 얘기를 꺼내지 못하게 된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“설명 좀 해 줘봐.” 상급자가 모르는 내용이 있거나 업무를 파악하기 위해서 실무자나 팀장들을 소집해서 브리핑을 받는 회의 유형. 업무 내용파악을 위해 수시로 실무자들을 불러서 시간을 낭비한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“언제 끝날지 모르는 마라톤 회의.” 어려운 주제를 일단 회의시간에 만나서 끝장을 보려고 진행하는 회의 유형. 사전 의논이나 조율없이 달랑 회의에 참석해서 난상토론을 하면서 몇시간을 훌쩍 넘기는 회의. 그렇게 장시간 회의를 하고 결론을 짓지 못하고 다음에 결정하자고 하기도 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;“회의는 회의.” 회의에서 나온 결론이나 업무들이 추적이 안되는 유형, 회의는 열심히 하는데 그 뒤에 어떻게 처리가 되는지 추적이 잘 안되는 경우가 많다. 이를 확인하기 위해서 다시 회의를 소집하기도 한다. 또한, 회의에서 결정된 사항들이 제대로 기록되고 관리가 안돼서 나중에 회의 참석자들끼리 회의 내용에 대해서 다툼을 하기도 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이외에도 비효율적인 회의 유형은 다 나열 할 수 없을 만큼 많다. 많은 회사에서 중간 관리자, 고참 개발자들은 회의에 불려다니느라고 낮에는 일을 못하고 어쩔 수 없이 밤에 일을 하고 있다. 그러다 보면 고참 개발자들은 개발할 시간이 점점 부족해져서 결국에는 개발과는 멀어지게 된다. 회사 입장서는 중요한 개발 자원을 잃게 되는 것이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이우소프트에서는 5,6년에 걸쳐서 회의 문화 개선을 위해서 노력을 해왔고, 이제는 어느 정도 정착이 되어가고 있다. 이를 몇가지만 간단히 소개하려고 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;strong&gt;■ 가능하면 짧게…최소 24시간 전에 아젠다 공지&lt;/strong&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;첫째, 가급적 회의는 하지 않는다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;회의의 관행을 바꾸는 가장 중요한 요소다. 불필요하거나 다른 것으로 대체 가능한 회의는 최대한 줄여야 한다. 회의의 비용은 상상 이상으로 엄청나다. 회의를 하면서 소모하는 비용도 크지만, 기회 비용은 그보다 더 크다. 무조건 회의는 1/10로 줄인다는 생각으로 시작하자. 진행하는 일을 모두 온라인 시스템으로 공유하면, 회의는 획기적으로 줄일 수 있다. 정보 공유, 업무 진행상황 확인, 업무 지시 등과 관련된 거의 모든 회의는 할 필요가 없고 온라인 시스템을 통하면 된다. 꼭 필요할 때만 회의를 통해서 논의를 하면 회의를 최소화할 수 있다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;둘째, 최소 24시간 전에 상세한 Agenda와 함께 회의를 초청한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;그래도 회의를 하는 것이 효율적일 때는 미리 회의를 초청한다. 이때 상세한 Agenda를 공유하고 발표자료나 참고자료는 미리 같이 배포를 해서 참석자들이 완전히 숙지를 하고 들어올 수 있게 한다. 덜렁덜렁 내용도 모르고 회의에 참석하는 것은 금기다. 회의 시간에 자료를 발표하거나 낭독하는 것은 시간 낭비다. 이렇게 하면 회의 때문에 업무에 지장을 초래하는 일이 줄어들고 회의 시간도 짧아진다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;피치 못하게 급작스럽게 소집되는 회의도 시스템을 통해서 Agenda와 회의 자료를 등록 후 회의를 소집한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;셋째, 회의시간은 가능하면 짧게 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;보통 30분을 넘기지 않도록 하고 길어야 1시간을 넘기지 않도록 한다. 그러기 위해서 회의 참석자들은 회의 주제와 내용을 사전에 모두 파악하고 빠른 결론을 내기 위해서 노력을 한다. 모두 회의에 집중해야 하며, 중간에 전화를 받거나 잠깐 나갔다 오는 행동은 금지되어 있다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;넷째, 회의록은 실시간으로 작성한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;가급적 회의록은 회의를 하면서 동시에 작성한다. 작성되고 있는 회의록은 회의 참석자 모두가 볼 수 있게 해서 즉석에서 수정하도록 한다. 또한 회의록에는 2가지가 꼭 적힌다. 결정사항과 “Action Items”다. 회의에서 어떠한 결론을 냈는지는 별도의 항목에 정리를 하고 회의 이후에 해야 할 일들은 “Action Items”로 따로 정리한다. 회의 참석자들은 실시간으로 내용을 확인해서 동의를 해야 한다. “Action Items”에는 꼭 담당자와 Due date를 지정한다. 회의 후에 바로 이슈관리시스템에 Task를 생성해서 모든 관련자들이 실시간으로 “Action Items”의 진행을 추적할 수 있도록 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;다섯째, 회의록은 전직원에게 공유된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;회의록은 회의 참석자 외에도 전직원에게 공유하는 것이 좋다. 회의록 공유는 성숙된 공유 문화의 중요한 요소다. 실시간으로 공유된 회의록에는 누구나 회의 내용에 질문을 하거나 의견을 줄 수가 있다. 또한 회의 내용이 모두에게 공유가 되면서 업무는 투명하게 진행이 된다. 정보는 독점을 할 때보다 공유를 할 때 더 큰 힘을 발휘한다. 이우소프트는 회의록을 위키시스템을 통해서 작성하고 있다. 따라서 모든 회의록은 손쉽게 검색이 가능하여 회의 내용에 대한 다툼이 없다. 해야 할 일은 이슈관리시스템과 연계돼서 회의와 관련된 모든 업무가 추적된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;회의는 매우 중요하다. 잘하면 약이 되고 잘못하면 독이 된다. 회의 문화의 변화는 회의 이전에 정보 공유 시스템을 통한 공유 문화가 우선되어야 한다. 그래야 회의가 줄어들면서 회의 문화가 개선되기 시작한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20170904151925"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/YfuECT1z828" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/YfuECT1z828/blog-post.html</link><author>noreply@blogger.com (전규현)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-p1JZionnA7Y/Wa3lIK3sj5I/AAAAAAACRBg/6TnabuisP1gC40cLU_B8cV7HBKdkWFdygCLcBGAs/s72-c/paikshow_S1avru479Fp.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/09/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4589106769055416704</guid><pubDate>Sat, 19 Aug 2017 02:57:00 +0000</pubDate><atom:updated>2017-08-19T11:57:00.259+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">스펙</category><category domain="http://www.blogger.com/atom/ns#">아키텍트</category><title>소프트웨어 스펙은 왜 쓰기 어려운가?</title><description>&lt;div&gt;스펙을 잘 쓰는 것은 소프트웨어 프로젝트를 성공하기 위한 가장 중요한 요소중 하나라는 것은 이미 수차례 강조한 얘기다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;스펙을 적절히 제대로 작성하지 않았다는 얘기는 건설에서 설계도를 제대로 만들지 않고 건설을 하는 것과 같이 소프트웨어 프로젝트에서도 여러가지 문제를 야기시킨다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;프로젝트가 종료 일정을 지키지 못할 가능성이 높다.&lt;/li&gt;&lt;li&gt;소프트웨어 아키텍쳐가 엉망이 될 가능성이 높다.&lt;/li&gt;&lt;li&gt;소프트웨어 품질을 보장하기 어렵다.&lt;/li&gt;&lt;li&gt;개발자들이 야근에 내몰려 혹사를 당하기 쉽다.&lt;/li&gt;&lt;li&gt;개발에 관련된 지식 축적이 어렵다.&lt;/li&gt;&lt;li&gt;추후 요구사항이 변경되어도 소프트웨어에 어떠한 파급효과가 있는지 예측하기 어렵다.&lt;/li&gt;&lt;li&gt;업그레이드 프로젝트를 효과적으로 진행하기 어렵다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;실제로 많은 회사들에서는 소프트웨어 스펙을 잘 쓰기 위해서 많은 투자를 한다. 그럼에도 왜 스펙을 잘 쓰기 어려운가? 또한 개발자들이 분석 설계를 잘 할 수 있는 뛰어난 아키텍트로 성장이 잘 안되는가? &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;많은 개발자들은 독학을 통해서 뛰어난 프로그래머가 되기도 한다. 하지만 왜 스펙 작성은 독학으로 잘 안되는가? 스펙은 프로그래밍보다 훨씬 많은 측면으로 분석을 해야 하고 복잡하기 때문이다. 스펙 작성은 골프와 피아노에 비견되곤 한다. 그래서 스펙 작성을 골프와 피아노에 비교를 해보았다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table style="border-collapse: collapse; table-layout: fixed; width: 100%;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 24.585987261146496%; padding: 10px; width: 24.585987261146496%;"&gt;&lt;div style="text-align: center;"&gt;소프트웨어 스펙 작성 &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 30.4578025477707%; padding: 10px; width: 30.4578025477707%;"&gt;&lt;div style="text-align: center;"&gt;골프&amp;nbsp; &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 24.58797770700637%; padding: 10px; width: 24.58797770700637%;"&gt;&lt;div style="text-align: center;"&gt;피아노 &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 20.25278662420382%; padding: 10px; width: 20.25278662420382%;"&gt;&lt;div style="text-align: center;"&gt;효과 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;책을 보고 스스로 공부해서 스펙을 적는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;골프 잘치는 책을 보고 혼자서 연습한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;피아노 교본을 보고 혼자서 연습한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;역효과 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;강연을 듣고 필요성을 절감해서 스펙을 적는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;타이거 우즈 특강 모임에서 깨달은 바가 있다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;피아노 잘치는 법이라는 강연을 듣는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;미미한 효과 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;인터넷에서 좋다는 Template을 구해서 각 항목을 채운다.&amp;nbsp; &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;좋다는 골프채를 구매해서 골프를 친다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;좋은 피아노를 사서 열심히 연습한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;미미한 효과 또는 역효과 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;일하면서 뛰어난 선배들이 작성한 스펙을 본다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;골프 연습장에 골프를 잘치는 프로가 많아서 수시로 골프 치는 것을 볼 수 있다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;피아노 교습소에 뛰어난 피아니스트가 있어서 연주를 수시로 볼 수 있다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;좋은 환경 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;스스로 스펙을 작성하고 뛰어난 아키텍트 선배의 리뷰를 받는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;골프 코치에게 골프를 배우고 연습을 반복한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;피아노 선생님에게 피아노 치는 것을 배우고 연습을 반복한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;발전 가능성이 높은 환경 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;수년간 지속적으로 스스로 스펙을 작성하고&amp;nbsp;뛰어난 아키텍트 선배의 리뷰를 받는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;수년간 실전 골프를 치면서 지속적으로 골프 코치에게 스윙을 교정받고 배운다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;수년간 피아노를 치면서 지속적으로&amp;nbsp;선생님에게 피아노 치는 것을 배운다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;발전 가능성이 가장 높은 방법 &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;본인 스스로도 타 프로젝트의 수많은 스펙의 리뷰에 참여한다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; padding: 10px;"&gt;&lt;div&gt;후배들의 골프 스윙도 봐주면서 이론적으로도 지식을 쌓는다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;후배들이 피아노를 치는 것을 봐주면서 조언을 해준다. &lt;/div&gt;&lt;/td&gt;&lt;td style="border: 1px solid rgb(219, 219, 219); margin: 0px; min-width: 65px; padding: 10px; width: 65px;"&gt;&lt;div&gt;발전 가능성이 가장 높은 방법 &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이쯤 설명하면 많은 회사들이 왜 스펙을 잘 작성하기 어려운지 이해가 될 것이다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;개인관점으로 보면 좋은 환경을 갖춘 곳에서 일하는 것이 가장 좋다고 할 수 있다. 회사입장에서는 회사를 좋은 환경으로 만들고 좋은 관행을 만들어야 한다. 그럼 회사가 가져야 할 좋은 관행이란 무엇이 있을까? &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;뛰어난 아키텍트를 여러명 보유한다.&lt;/li&gt;&lt;li&gt;작은 프로젝트라도 스펙을 제대로 작성하고 개발하는 문화를 만든다.&lt;/li&gt;&lt;li&gt;철저한 정보 공유, 투명한 개발 환경&lt;/li&gt;&lt;li&gt;경영진을 비롯하여 많은 프로젝트 관련자들이 스펙을 충분히 리뷰한다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;그럼 반대로 이를 저해하는 나쁜 관행들은 무엇이 있을까? &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;빠르게 개발한다는 명목하게 주먹구구식 개발을 신봉한다.&lt;/li&gt;&lt;li&gt;원칙보다 기법에 현혹되어 여러 방법론을 기웃거린다.&lt;/li&gt;&lt;li&gt;복잡한 프로세스가 문제를 해결해 줄것으로 맹신하고 강요한다.&lt;/li&gt;&lt;li&gt;코딩이 가장 중요하다고 생각한다.&lt;/li&gt;&lt;li&gt;작성된 스펙에 관심들이 없어서 리뷰에 소홀하다가 개발 후에 부담없이 변경을 요구한다.&lt;/li&gt;&lt;li&gt;상명하복의 조직문화&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt; &lt;br /&gt;&lt;div&gt;이런 문화에서는 뛰어난 아키텍트가 있다고 하더라도 무용지물일 뿐이다. 회사는 좋은 관행을 만들어가고 개인들은 좋은 습관을 가지도록 노력할 때 수년 후에는 스펙을 제대로 작성할 수 있는 역량을 갖추고 소프트웨어 개발 역량이 글로벌 회사들과 경쟁할 중요한 기초 역량을 갖추어 가고 있다고 할 수 있다.&amp;nbsp;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/xgfDJIkCv8A" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/xgfDJIkCv8A/blog-post_19.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/08/blog-post_19.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-1579908377592329243</guid><pubDate>Sat, 12 Aug 2017 23:09:00 +0000</pubDate><atom:updated>2017-08-13T08:09:36.608+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">관행</category><category domain="http://www.blogger.com/atom/ns#">문화</category><category domain="http://www.blogger.com/atom/ns#">아키텍트</category><title>핵심은 아키텍트다</title><description>&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;우리나라에는 뛰어난 프로그래머가 참 많다. 우리나라에서 연봉 4천만원 받는 개발자의 능력과 하는 일을 보고 외국의 억대 연봉 개발자가 입이 떡 벌어졌다는 우스개 소리가 인터넷에 떠돌고 있다. 전혀 근거가 없는 얘기는 아니다. 우리나라에서는 개발자가 많은 분야의 일을 해야 하고 밤을 지새면서 엄청난 양의 일을 소화하곤 하기 때문에 일단 많이 배우고 매우 빠르고 숙달되어 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;하지만 이것도 잠깐이다. 세월이 흘러 10년차, 20년차 개발자가 되고 나면 외국의 억대 연봉을 받았던 개발자와 비교해서 분석, 설계 역량에서 많이 뒤떨어지게 된다. 결국 연봉 값을 하게 된다. 이는 개발자들의 기본적인 재능이 아니라 환경차이 때문에 벌어지는 일이다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;우리나라에서는 빨리빨리 문화, 상명하복 문화를 비롯해서 여러가지 환경 때문에 아무리 좋은 프로세스를 도입한다고 해도 개발자들에게 분석, 설계 역량이 차근차근 축적이 되어서 10년, 20년 후에 뛰어난 아키텍트로 성장하기가 매우 어렵다.&lt;/span&gt;&lt;/div&gt;&lt;div class="sub_view_cont_img" style="background-color: white; color: #222222; font-size: 15px; margin: 0px; padding: 0px;"&gt;&lt;div class="align_center" style="margin: 30px 0px 40px; padding: 0px; position: relative; text-align: center;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;img alt="[사진=Pixabay]" src="http://image.zdnet.co.kr/2017/08/10/imc_P2rki8zDbthim62a.jpg" height="367px" style="border: 0px; vertical-align: top;" width="550px" /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class="bottom" style="background: url(&amp;quot;../img/cover2.png&amp;quot;) 0px 0px repeat; bottom: 0px; color: white; font-size: 12px; left: 317px; letter-spacing: -1px; line-height: 1.6; margin-left: -275px; padding: 8px 13px; position: absolute; text-align: left; width: 524px;"&gt;&lt;span style="vertical-align: top;"&gt;&lt;span style="font-family: inherit;"&gt;[사진=Pixabay]&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;그럼에도 불구하고 우리나라에서는 아키텍트라는 단어에 많이 집착한다. 소프트웨어업계에 아키텍트가 부족하여 발전이 안된다고 하기도 하고, 너도나도 회사에서 아키텍트라는 타이틀을 만들어 남발하기도 한다. 이렇게 아키텍트에 집착하는 것은 여전히 뛰어난 아키텍트가 많이 없어 그에 따른 갈증이 있기 때문으로 해석된다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;이런 현상은 비단 소프트웨어 업계만의 문제는 아니다. 우리나라는 여러 산업분야에서 선진국을 빠르게 따라 잡으면서 실행력은 앞서기도 한다. 하지만 시스템 설계 능력은 겉모습을 보고 따라잡을 수 있는 것이 아니다. 선배에서 후배로 여러 세대를 거치면서 축적된 경험과 노하우가 전승되어 와야 하는 것이라서 우리끼리 독학으로 따라잡을 수는 없는 것이 당연하다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;strong&gt;&lt;span style="font-family: inherit;"&gt;■ 비즈니스 이해해야 좋은 아키텍처 나와&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;소프트웨어 아키텍트는 어떤 사람을 말하는 것인가?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;한마디로 정의하면 소프트웨어 시스템을 설계하는 사람이다. 소프트웨어 시스템을 작은 모듈까지 축소하면 대부분의 개발자들은 아키텍트이기도 하지만 이슈가 되는 것은 상당히 커다란 시스템을 설계할 수 있는 능력을 가진 사람이 아키텍트다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;누구나 하기도 하고 누구나 잘할 수 있을 것 같은 소프트웨어 분석 설계가 어려운 이유는 아키텍트는 일반 개발자 또는 프로그래머와는 완전히 다른 역량을 요구하기 때문이다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;좋은 아키텍처는 비즈니스에 대한 이해에서 나온다. 대부분은 현재뿐만 아니라 미래 비즈니스 전략도 잘 알아야 한다. 또한 기술적으로도 상당 수준이어야 한다. 업무에 빠삭한 도메인전문가(업무전문가)와는 또 다르다. 문서로 소프트웨어 스펙이나 설계서를 작성할 수 있어야 하고 다른 사람이 이 문서를 보고 소프트웨어를 개발 할 수 있어야 한다. 의외로 이런 역량을 고루 갖추고 있는 뛰어난 소프트웨어 아키텍트는 흔하지 않다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;우리나라는 도메인 전문가가 나름 그 역할을 하고 있다. 업무는 모르는 것이 없이 잘 알지만 분석, 설계 역량은 떨어지고 문서로 스펙과 설계를 작성해서 다른 사람에게 일을 시키지 못하기 때문에 옆에 붙어서 설명을 너무 많이 해줘야 하고, 개발 도중 문제가 생길 때마다 해박한 업무 지식으로 문제를 해결해 나간다. 물론 개발 효율성은 떨어질 수 밖에서 없다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;왜 소프트웨어 회사에 뛰어난 아키텍트가 필요한가?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;개발자 3~4명이 진행하는 소규모 프로젝트는 어떻게 개발을 하든지 소프트웨어 개발이 가능하다. 각 개발자들의 프로그래밍 역량이 뛰어나다면 매우 훌륭한 소프트웨어도 만들 수 있다. 하지만 규모가 점점 커지면 개별 프로그래머들의 역량이 뛰어나다고 성공적으로 소프트웨어를 만들기는 어렵다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;개발 복잡도는 소프트웨어 규모에 기하급수로 비례해서 복잡해진다. 또한, 어찌어찌 소프트웨어 개발에 성공을 했다고 하더라도 몇 년 안에 더 큰 문제가 나타난다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;설계가 제대로 되지 않은 소프트웨어는 업그레이드를 할수록 아키텍처가 복잡해지고 곧 유지보수가 새로 개발하는 것보다 어려운 시점이 오게 된다. 물론 회사에 뛰어난 아키텍트가 있는 경우에도 프로젝트&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;일정이나 복잡한 프로세스에 밀려서 아키텍처를 소홀히 하곤 한다. 그 대가는 미래에 꼭 몇배로 치르게 되어 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;strong&gt;&lt;span style="font-family: inherit;"&gt;■ "국내엔 축적된 노하우 계승해줄 선배들 부족"&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;그럼, 왜 우리나라에는 소프트웨어 아키텍트가 부족한가?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;빨리 빨리 개발 문화부터 상명하복 조직 문화 등 간접적인 원인도 너무나 많지만 가장 큰 원인은 축적된 아키텍처링 노하우를 계승 시켜줄 선배들이 부족하기 때문이다. 그러다 보니 개발 기술은 발달을 하는데 커다란 소프트웨어 시스템을 설계해서 수십, 수백명이 체계적으로 일을 나눠서 문서를 보고 개발을 하는 경험을 해볼 환경이 거의 없다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;소프트웨어 설계에 관련된 좋은 책은 많지만 골프 책이 아무리 많다고 골프 코치가 없으면 소용이 없다. 프로그래밍은 코치가 없어도 책을 보고 배울 수 있는 분야다. 하지만 분석과 설계는 코치 없이 배우는 것이 불가능하다. 또한, 몇 개월 가지고는 부족하다. 수년간 같이 일하면서 노하우를 전승 받아야 한다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;아키텍트를 양성하기 위해서 회사들은 어떤 노력들을 하고 있는가?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;대학에서 요구공학이나 소프트웨어 아키텍처 디자인 관련된 강좌 코스에 직원들을 보내기도 하고, 강사를 초빙해서 강의를 듣기도 한다. 물론 다 도움이 되는 일이지만 기대만큼 빠른 성과가 나지는 않는다. 시험을 통해서 아키텍트 양성 후보를 선발하기도 한다. 알고리즘 시험을 보기도 하는데 그런 방법은 고참 개발자는 아키텍트 후보가 된다는 이상한 공식이 성립하기도 한다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;이렇게 자생적으로 소프트웨어 아키텍트를 양성하기 위해서 피나는 노력을 하지만 기대만큼 단기간에 성과가 나고 있지 않다. 물론&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;수십년 동안 노력을 한다면 분명히 성과가 있겠지만, 수십년을 기다릴 만큼 인내심을 가진 회사는 거의 없다. 결국 제도와 프로세스로 강제화를 하지만 이 문제는 그렇게 해결이 되지 않는다. 오히려 방해가 된다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;그럼 아키텍트는 어떻게 양성해야 하는가?&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;교육도 좋고 뛰어난 아키텍트를 영입하는 것도 좋은 방법이다. 하지만 가장 좋은 것은 좋은 관행들을 지속적으로 유지하는 것이다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;strong&gt;&lt;span style="font-family: inherit;"&gt;■ 아키텍트를 양성하는 세 가지 방법&lt;/span&gt;&lt;/strong&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;첫째, 소프트웨어를 개발할 때 분석, 설계를 제대로 해서 진행하는 것이다. 물론 문서로 제대로 작성하고 서로 리뷰하고 진행해야 한다. 이런 경험들이 축적되어야 한다. 급하다고 빨리 코딩부터 시작하는 경우가 있는데 그러면 프로젝트는 더 오래 걸리고 노하우가 축적되지 않는다. 물론 학습비용이 필요하기 때문에 처음에는 코딩부터 빨리 시작하는 것이 더 빨리 개발하는 방법일 수도 있다. 하지만 시간이 흐를수록 프로젝트는 더 오래 걸릴 것이다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;둘째, 아키텍트 그룹을 운영하는 것이다. 보통은 가상 조직으로서 Technical Steering Committee나 Architect Group과 같은 이름을 가진다. 회사의 중요한 기술적인 이슈를 논의하고 결정하는 위원회이며 분석, 설계 문서를 집중적으로 리뷰하기도 한다. 아키텍트 후보로 선발된 인원은 이 조직에 참여하여 수년간의 훈련을 받으면 자연스럽게 아키텍트로 성장하게 된다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;셋째, 아키텍트 후보를 선발하는 것이다. 앞으로 아키텍트로 성장할 가능성이 높은 개발자를 후보로 선발하여 수년간 훈련을 시켜야 한다. 물론, 아키텍트는 우수하고 일반 프로그래머는 우수하지 않다는 것이 아니다. 성향이 다를 뿐이다. 그리고 성향에 따라서 적합한 일이 좀 다를 뿐이다. 아키텍트로 성장하려면 다음과 같은 성향이나 소질이 있어야 한다. 글을 잘 쓰고, 다른 사람의 얘기를 잘 들어주고, 창의력이 좋고, 분석적으로 사고를 하고, 정보를 잘 조직화하고, 꼼꼼하며, 논리적인 사고를 하고, 문제의 핵심을 잘 찾고, 인내심이 좋아야 한다. 이를 모두 만족하는 사람은 없지만 몇가지가 일치하면 후보로 선발하여 키워야 한다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;막상 얘기를 해보면 회사에 꼭 필요한 아키텍트를 키우는 데는 기가 막힌 방법이 없다. 골프를 잘 배워서 잘 치는데 기가 막힌 방법이 없는 것과 같다. 물론 잘못 배워서 잘못치는 방법은 부지기수로 많다. 좋은 환경에서 뛰어난 선배들이 좋은 관행을 유지하며 꾸준히 후배들을 가르쳐 주는 것이 가장 보편적인 방법이다. 이렇게 실무를 통해서 배우는 것이 학교에서 수업을 배우는 것보다 몇십배 더 많은 것을 배울 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;​&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;조급하다고 되는 것도 아니고, 프로세스로 강제화 한다고 되는 것도 아니다. 뛰어난 소프트웨어 아키텍트를 여러 명 보유하는 것은 회사의 미래를 결정짓는 결정적인 요소이기 때문에 무시할 수도 없다. 꾸준한 투자를 해야 한다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20170810153934"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/M16rI_-VKiE" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/M16rI_-VKiE/blog-post_13.html</link><author>noreply@blogger.com (전규현)</author><thr:total>2</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/08/blog-post_13.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-8508480550489851687</guid><pubDate>Wed, 09 Aug 2017 13:46:00 +0000</pubDate><atom:updated>2017-10-16T16:00:13.060+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">스펙</category><category domain="http://www.blogger.com/atom/ns#">요구사항</category><category domain="http://www.blogger.com/atom/ns#">요구사항분석</category><category domain="http://www.blogger.com/atom/ns#">프로젝트</category><title>소프트웨어 프로젝트는 왜 실패하는가?</title><description>&lt;div&gt;우리는 주변에서 실패한 소프트웨어 프로젝트를 보는 것이 그리 어려운 일은 아니다. 프로젝트의 규모가 커지고 기간이 길어지며 많은 인원이 투입될수록 프로젝트 실패 확률은 증가한다.&amp;nbsp; &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;프로젝트 성공을 위해서는 프로젝트를 제대로 진행하는 방법을 연구하는 것도 필요하지만 프로젝트가 왜 실패했는지 살펴보는 것도 도움이 될 것이다. 프로젝트 실패에 대한 기준은 제각각이다. 그래서 어떤 경우에 프로젝트가 실패했다고 할 수 있는지 알아보자. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;약속된 일정 내에 제품 또는 서비스를 출시 못했다.&lt;/li&gt;&lt;li&gt;소프트웨어가 시장에서 요구되는 품질을 충족하지 못했다. (요구사항, 성능, 안정성, 사용성 등)&lt;/li&gt;&lt;li&gt;프로젝트에 꼭 필요한 기술 개발에 실패했다.&amp;nbsp;&lt;/li&gt;&lt;li&gt;아키텍처가 엉망진창이 되어서 유지보수가 어렵게 됐다.&lt;/li&gt;&lt;li&gt;프로젝트에 계획된 예산보다 많은 비용을 지출했다.&lt;/li&gt;&lt;li&gt;프로젝트 내내 야근을 거듭하여 조직의 사기가 떨어지고 퇴사자가 많이 발생했다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;직접적인 실패와 억지로 일정을 맞추려다 보니 다른 문제를 야기하는 간접적인 실패까지 예로 들어봤다. 이런 저런 이유로 실패하는 프로젝트는 매우 많다. 또한 실패하는 이유도 매우 다양한다. 필자는 이 중에서 가장 중요하다고 생각하는 하나에 대해서 얘기를 하려고 한다. 우선은 프로젝트를 왜 실패하는지 다양한 원인을 알아보자.&amp;nbsp; &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;고객의 요구사항을 충분히 파악하지 못함&lt;/li&gt;&lt;li&gt;제품의 방향을 빨리 정하지 못하고 우왕좌왕하면서&amp;nbsp;프로젝트 앞부분에서 상당부분의 시간을 소모하여 개발 기간이 부족하게 됨&lt;/li&gt;&lt;li&gt;스펙/설계를 제대로 작성하지 않고 코딩을 시작해서 엉뚱한 방향으로 개발을 함&lt;/li&gt;&lt;li&gt;작성된 스펙을 관련자들이 충분히 리뷰 하지 않아 잘못된 스펙으로 개발함&lt;/li&gt;&lt;li&gt;프로젝트를 진행할수록 새로운 요구사항이 계속 발견되어서 프로젝트가 한없이 늘어짐&lt;/li&gt;&lt;li&gt;변경된 요구사항을 제대로 관리하지 않아서 프로젝트 팀원들이 서로 다른 기준으로 개발을 함&lt;/li&gt;&lt;li&gt;상명하복식으로 지정된 출시 일정을 맞추기 위해서 급하게 코딩부터 시작함. 나중에 잘못된 코드를 고치느라고 시간이 더 소요됨&lt;/li&gt;&lt;li&gt;충분히 훈련되지 않은 개발자들을 투입하여 초반에 우왕좌왕함&lt;/li&gt;&lt;li&gt;일정관리를 대충 해서 프로젝트가 지연되고 있다는 징후를 눈치채지 못함&lt;/li&gt;&lt;li&gt;리스크 관리를 하지 않아서 리스크로 인해서 프로젝트를 실패함&lt;/li&gt;&lt;li&gt;프로젝트 막판에 경영진이나 주요 고객이 프로젝트 방향을 완전히 틀어서 거의 처음부터 다시 개발해야 함&lt;/li&gt;&lt;li&gt;프로젝트 팀원들의 팀웍에 문제가 있어서 지속적으로 불화가 발생하여 프로젝트는 산으로 감&lt;/li&gt;&lt;li&gt;도입한 외부 필수 기술이 기대처럼 동작하지 않는다.&lt;/li&gt;&lt;li&gt;테스트 팀에 제대로 된 스펙을 전달하지 못해서 테스트 준비를 제대로 하지 못함&lt;/li&gt;&lt;li&gt;회사의 표준 프로세스를 강요하여 문서를 너무 많이 만들다 보니 정작 개발에는 소홀해짐&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이외에도 실패 원인은 끝도 없이 많을 것이다. 이를 간단히 분류해보면 스펙, 프로젝트팀, 프로젝트 관리, 고객, 기술 등 다양하다. 필자는 이중에서 가장 중요하게 생각하는 요인을 “스펙"이라고 생각한다.&amp;nbsp; &lt;/div&gt;&lt;div&gt;다른 영역도 중요한 것이 사실이지만 스펙을 적는 것은 소프트웨어를 개발하는데 가장 중요하면서 가장 어렵다. 스펙을 적는 것을 “분석” 또는 “분석/설계”라고 한다. 설계가 여기에 왜 포함되었는지 의아한 사람도 있을 텐데, 분석 시에 상위 설계의 상당부분이 포함이 되는 경우가 많고 프로젝트에 따라서 다르지만 분석과 설계는 그 경계가 모호하기 때문에 같이 다루는 경우가 많다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;프로젝트가 아주 작다면 스펙을 제대로 적지 않고 요구사항 몇 줄로 개발해 나가면서 소프트웨어가 무사히 완성을 하기도 한다. 소수의 경험이 많은 개발자가 개발을 주도하는 경우 요구사항을 대충 알려줘도 개발을 잘하기도 한다. 수백명이 투입되는 대규모 프로젝트에서는 매우 잘 정리된 스펙 문서가 필요한 경우가 일반적이다. 외국에 외주를 줄 경우 자세히 적힌 스펙 문서와 테스트 문서도 전달하기도 한다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;소규모 프로젝트에서의 성공의 경험을 대규모 프로젝트에 적용해서 실패를 하기도 하고, 대규모 프로젝트의 방법론이 중소규모 프로젝트에서 실패의 원인이 되기도 한다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;요구사항이 누락되거나 충분히 분석이 안된 스펙도 문제지만 너무 자세히 적거나 많은 문서를 적는 것도 문제가 된다. 대규모 방법론을 따르는 회사들에서는 이런 함정에 종종 빠진다. 개발은 문서대로 되지도 않을 뿐만 아니라 수시로 바뀌는 요구사항을 문서가 너무 많아서 문서에 반영도 제대로 못한다. &lt;/div&gt;&lt;div&gt;&amp;nbsp; &lt;/div&gt;&lt;div&gt;따라서 엄격한 프로세스로 규제를 하는 것도 어렵다. 자율에 맡겨도 쉽지 않다. 필자가 생각하는 가장 좋은 방법은 원칙만 지킬 수 있는 최소한의 프로세스가 있는 환경에서 좋은 문화를 가지는 것이다. 빨리빨리 문화를 지양하고 적절히 분석하고 설계를 한 후 프로젝트를 진행하는 것이 더 빠르다는 인식을 공유해야 한다. 실제로 가장 빠른 방법이다. 모든 관련자들이 스펙을 철저히 리뷰하고 쉽게 요구사항을 바꾸지 않아야 한다. 이런 문화와 관행을 만들어가는 것이 프로세스보다 더 중요하다. 그래야 회사에 역량이 축적된다. 그렇게 좋은 문화와 축적된 역량이 충분해야 어떠한 프로젝트라도 성공으로 이끌 수 있다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;좋은 환경이 있어도 스펙을 제대로 적을 수 있는 역량이 부족하다면 말짱 공염불일 뿐이다. 스펙을 제대로 적는 역량은 소프트웨어를 개발하는데 있어서 가장 어려운 역량이며 소질이 있는 개발자도 제대로 하려면 10년 이상의 경험과 노력이 필요하다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt; &lt;br /&gt;&lt;div&gt;이 방대한 얘기를 짧은 글로 어떻게 소개할 수 있을지 걱정은 되지만, 개발자가 어떻게 하면 소프트웨어 분석, 설계 역량을 가질 수 있으며 회사는 어떻게 그런 역량을 축적할 수 있는지 다음에 몇 개의 글을 통해서 조금 더 자세히 얘기를 해보고자 한다.&amp;nbsp;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/7_waEEfwX38" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/7_waEEfwX38/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/08/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-7622598387488974452</guid><pubDate>Mon, 26 Jun 2017 07:12:00 +0000</pubDate><atom:updated>2017-06-27T10:39:50.423+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">공유</category><category domain="http://www.blogger.com/atom/ns#">문화</category><title>소프트웨어 회사에서 '공유'가 진짜 어려운 이유</title><description>&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;많은 사람들이 소프트웨어 회사에서 가장 중요한 기업 문화 중 하나로 '공유 문화'를 꼽는다. 비단 소프트웨어 회사만의 이슈는 아닐 것이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;공유에 문화라는 이름이 붙으려면 구성원 대부분이 자연스럽고 일상적으로 정보를 공유해야 한다. 공유가 중요한 이유는 소프트웨어 개발은 집단지성이 작동해야 하는 대규모 지식 산업이기 때문이다. 정보와 지식이 한사람의 머리 속에 머무르지 않고 시스템에 저장되고 효율적으로 관리되어야 비로소 경쟁력을 가질 수 있다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;소수의 슈퍼 개발자가 주도해서 성공한 소프트웨어 회사들이 벽을 못 넘는 이유 중 하나도 '공유문화' 부족이라고 볼 수 있다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;많은 회사들이 “공유문화”를 정착시키기 위해서 당근과 채찍을 동원하지만 제대로 된 '공유문화'를 가지고 있는 회사가 그렇게 많지는 않다. 필자가 경영을 하고 있는 이우소프트도 아직 완벽하지는 않지만 '공유문화' 정착을 위해서 5~6년간 치열한 노력을 해오고 있다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;직원들에게 “공유를 잘하자”라고 말하는 것은 “착하게 살자”라는 정도밖에 들리지 않는다. '공유 문화'가 정착되지 않은 회사에서는 직원들 자율에 맡겨 놔도 '공유 문화'가 정착되기는 어렵고, 프로세스로 강제화해서는 더욱 어렵다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;'공유 문화' 정착이 어려운 이유는 '죄수 딜레마'와 같다. 또한 '교차로 꼬리 물기'와 비슷하다. 교차로에서 신호가 끊겼는데도 바짝 따라붙으면 이로 인해서 다른 방향의 차들은 소통이 안되고 연속으로 차들이 꼬리 물기를 해서 교차로가 꽉 막힌다. 교차로 꼬리 물기를 해결하고 교차로에서 가장 많은 차들이 통과되는 비법은 모든 차들이 꼬리 물기를 하지 않는 것이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-x3wsXVCmlMQ/WVCzpeg6DzI/AAAAAAACQFk/qyA5lTLYQMY6KLNwXux4fLBfBb7kvvjzgCLcBGAs/s1600/sini_GVa1y6v1jdvOYHn.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="390" data-original-width="550" height="226" src="https://1.bp.blogspot.com/-x3wsXVCmlMQ/WVCzpeg6DzI/AAAAAAACQFk/qyA5lTLYQMY6KLNwXux4fLBfBb7kvvjzgCLcBGAs/s320/sini_GVa1y6v1jdvOYHn.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;하지만, 아무리 캠페인을 해도 '교차로 꼬리 물기'가 사라지지 않는 이유는 모두다 규칙을 잘 지키면 서로 혜택을 누릴 수 있지만 누구는 지키고 누구는 지키지 않는 상황에서는 규칙을 지키는 사람이 더 손해를 보기 때문이다. 규칙을 지키지 않아서 이익을 보는 사람은 계속 이익을 보고 규칙을 지켜서 손해를 보는 사람은 계속 손해를 본다면 사람들은 자연스럽게 규칙을 지키지 않는 쪽으로 넘어온다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;게다가 '공유를 하지 않는 행동'은 '교차로 꼬리 물기'처럼 눈에 잘 보이지는 않는다. 제대로 공유를 안해도 공유를 안하고 있다는 사실을 완전히 눈치채기는 쉽지 않다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;또한, 자신이 알고 있는 정보를 모두에게 공유하는 것은 자신이 없어도 회사가 돌아간다는 의미로 해석이 되어 매우 불안한 일이 아닐 수 없다. 그래서 어쩔 수 없이 꼭 공유해야 하는 소량의 정보만 공유를 하고 핵심 지식 정보는 공유를 안하기도 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;'공유 문화'에 대해서 서로 얘기를 해도 생각하는 정도가 달라서 잘하고 있는 것인지 개선할 것이 많이 필요한지 판단하기는 매우 어렵다. 그래서 필자가 간단한 평가표를 만들었다. 10점 만점에 8점이상이면 공유 문화가 매우 잘 정착된 회사라고 생각된다. 그 이하라면 심각하게 '공유 문화' 개선에 대해서 생각해봐야겠다. 평가방법은 아래 각 항목당 1점으로 계산하면 된다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;내가 지금 이 순간 회사에서 없어져도 내가 하던 일은 즉시 누군가가 이어받아서 문제없이 진행된다.&lt;/li&gt;&lt;li&gt;어제 회사에 있었던 크고 작은 모든 회의의 회의록이 시스템에 등록되어 있고 누구나 열람이 가능하다.&lt;/li&gt;&lt;li&gt;모든 개발자들(직원)이 서로 다른 나라에서 뿔뿔이 흩어져 있어도 지장없이 일할 수 있다.&lt;/li&gt;&lt;li&gt;나는 회사 Email 시스템에 저장된 모든 Email이 지금 즉시 사라져도 일하는데 전혀 지장이 없다.&lt;/li&gt;&lt;li&gt;나는 지금 이 순간 시스템을 열어서 나의 팀, 부서 모든 인원이 하고 있는 일과 그 통계를 1분안에 알 수 있다.&lt;/li&gt;&lt;li&gt;나는 공유를 위해서 별도로 문서를 작성하지는 않는다. 일을 하다 보면 필요한 문서는 자연스럽게 생성된다.&lt;/li&gt;&lt;li&gt;나를 비롯한 모든 직원에게 회사의 99% 이상의 정보가 실시간으로 공유된다. 공유가 안되는 정보는 극소수에 불과하다.&lt;/li&gt;&lt;li&gt;내가 지금 하고 있는 모든 일은 시스템에 등록되어 있고 계획, 진행상황, 결과가 실시간으로 기록된다.&lt;/li&gt;&lt;li&gt;필요한 정보를 찾기 위해서 이 파일, 저 파일 뒤질 필요 없어 몇개의 검색어로 몇 분 안에 원하는 정보를 찾을 수 있다.&lt;/li&gt;&lt;li&gt;상급관리자나 경영진에게 보고를 하기 위해서 일을 하는 것과는 별도로 PPT를 이용해서 보고서를 만드는 일은 거의 없다.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;필자의 회사도 5~6년 전에는 0점에 가까웠지만 꾸준한 노력 끝에 지금은 8~9점으로 평가할 수 있다. 증상에 따라서 처방이 다르기는 하지만 필자가 경험한 몇가지 공유 문화 개선 방법을 제시하고자 한다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;이슈관리시스템, Wiki 등 공유와 협업을 위한 최소한의 시스템을 구축하고 내제화해야 한다. 수단 없이 문화를 이룩하기는 매우 어렵다.&lt;/li&gt;&lt;li&gt;전화나 구두로 논의하고 지시하는 것은 가급적 삼가해야 한다. 메신저도 마찬가지다. 그런 방식은 공유도 안되고 추적도 안된다. 구두로 지시한 것도 시스템에 등록하고 업무를 진행해야 한다. 예외가 있어서는 안된다.&lt;/li&gt;&lt;li&gt;이메일은 안쓰는 것이 좋다. 과거에는 이메일이 업무 혁신의 선두에 있었다면 이제는 골치 덩어리다. 이메일을 정보 보관 수단으로 사용하기 때문에 문제인 것이다. 이메일을 금지하면 자연스럽게 정보는 공유 시스템에 저장된다. 파격적이지만 이우소프트에서는 직원간 이메일이 금지되어 있다. 이메일은 외부용이다.&lt;/li&gt;&lt;li&gt;회의는 10%로 축소해야 한다. 회의가 많은 것은 공유가 잘 안되고 있다는 증거다. 회의를 통제하면 어쩔 수 없이 시스템을 통해서 의논을 하게 된다. 회의는 꼭 필요할 때만 해야 한다.&lt;/li&gt;&lt;li&gt;보고서는 최소화 해야 한다. 지금의 90%는 폐지한다는 생각을 해보자. 보고서가 많다는 것은 공유가 잘 안되고 있다는 증거다. 경영진도 모든 구성원과 동일한 입장에서 시스템을 통해서 공유를 받고 꼭 필요한 경우에만 보고를 받는 것이 좋다.&lt;/li&gt;&lt;li&gt;수평적 사고가 필요하다. 상하 조직 구조에 따른 정보 쏠림 현상을 방지해야 한다. 경영자라고 정보 특별 대우가 없다. 누구에게나 모든 정보가 공유되어야 하며, 의견도 마음껏 개진할 수 있어야 한다.&lt;/li&gt;&lt;li&gt;“공유”를 위해 프로세스를 강제화하기 보다는 인식 전환을 위해서 더 힘써야 한다. 강제적인 추진은 부작용만 부른다. 적절한 강제 조치도 필요하지만 마인드를 바꾸는데 더 힘써야 한다.&lt;/li&gt;&lt;li&gt;정보의 홍수를 경계해야 한다. 정보가 너무 많으면 방관자가 될 수도 있으므로 필수 관련자를 잘 구분하여 필수 인원이 방관자가 되지 않도록 해야 한다. 너무 많은 정보가 쏟아지만 정보는 쓰레기가 된다. 수많은 정보 중에서 자신이 추적, 관여할 정보들을 추리고 체계적으로 볼 수 있는 시스템이 필요하다.&lt;/li&gt;&lt;li&gt;공유를 위해서 정보를 생성하는 것도 중요하지만 내용이 바뀌면 업데이트하고 자연스럽게 흩어진 정보를 모으고 정리하며, 적절히 삭제하는 것도 중요하다. 이런 노력을 들여야 공유의 효율성이 올라가고 잘못된 정보로 인한 문제를 방지한다. 이런 활동을 조직내에 심기 위해서는 끊임없는 코칭이 필요하다.&lt;/li&gt;&lt;li&gt;공유 문화가 어느 정도 수준에 오르면 효율적인 글쓰기가 얼마나 중요한지 알게 될 것이다. 직원들을 뽑을 때 지식이 많은 직원도 좋지만 글도 잘 쓰는 직원을 뽑아야 한다. 개발자도 예외는 아니다. 감동을 주는 글을 적어야 한다는 것이 아니고 자신의 생각을 정확하게 전달할 수 있도록 짧고 명료하게 글을 쓸 수 있는 능력이 필요하다.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이 글을 보면 비법을 공개했다고 회사 관계자들은 걱정할지 모르겠지만 비법은 별것이 없다. 골프를 잘 치는 방법은 책에 모두 나와 있지만 끊임없이 제대로 노력을 해야 골프를 잘 칠 수 있다. 다같이 노력해서 대한민국에 좋은 공유문화를 가진 회사가 많아지면 좋겠다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;문화는 '집단의 습관'이다. 구성원들끼리 더이상 공유하라는 얘기를 안할 때 “문화”가 된 것이다. 한번 자유를 맛 본 사람들은 자유를 박탈당한 환경에서 살기 어렵듯이 진정한 공유 문화를 맛보고 나면 과거로 돌아가는 것은 거의 불가능하다. “공유”가 숨쉬는 것처럼 자연스러워질 때 비로서 글로벌 회사들과 경쟁을 한다고 명함을 내밀 수 있을 것이다.&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #222222; font-family: 돋움, &amp;quot;맑은 고딕&amp;quot;, tahoma, sans-serif; font-size: 15px; line-height: 1.6; padding: 0px;"&gt;이글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20170623155728"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/SPltrMcbsp0" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/SPltrMcbsp0/blog-post_26.html</link><author>noreply@blogger.com (전규현)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-x3wsXVCmlMQ/WVCzpeg6DzI/AAAAAAACQFk/qyA5lTLYQMY6KLNwXux4fLBfBb7kvvjzgCLcBGAs/s72-c/sini_GVa1y6v1jdvOYHn.jpg" height="72" width="72" /><thr:total>4</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/06/blog-post_26.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4197181683391982111</guid><pubDate>Tue, 06 Jun 2017 10:00:00 +0000</pubDate><atom:updated>2017-08-13T16:15:20.624+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">개발문화</category><category domain="http://www.blogger.com/atom/ns#">개발자트랙</category><category domain="http://www.blogger.com/atom/ns#">개발조직</category><title>이우소프트에 대한 오해와 진실</title><description>&lt;div&gt;&lt;span style="font-family: inherit;"&gt;가끔은 “이우소프트가 개발자에게 그렇게 좋은 회사라면서요?”라는 말을 종종 듣는다. 이 말은 맞기도 하고 틀리기도 하다. &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;입사지원자에게 듣기도 하고 지인들에게 듣기도 한다. 몇몇 얘기를 듣고 과도하게 확대해석하기도 하고 오해하기도 한다. 모든 현상이 그렇듯이 몇줄의 글을 통해서 상황을 정확히 설명하기란 매우 어렵다. 하지만 내 블로그의 글을 보고 많은 개발자들이 이우소프트에 지원을 하기 때문에 좀더 정확한 설명이 필요하다. &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;일단 이우소프트는 “개발자가 일하기 좋은 회사”를 만드는 것이 목적인 회사는 아니다. &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;이우소프트의 비전은 “글로벌 경쟁력을 갖추고 세계 1등의 Software를 만들어 내는 것”이다. 거의 모든 것은 여기에 맞춰져 있다. 이를 위해 행해지는 것들이 개발자에게 좋을 수도 있고 나쁠 수도 있다. 또한 어떤 개발자에게는 좋은 것이 어떤 개발자에게는 나쁜 것이 될 수도 있다.&amp;nbsp; &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: inherit;"&gt;퇴근 후 개인 시간이 거의 보장된다.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;퇴근 후 개인 시간을 보장해야 하는 이유는 생산선 향상 때문이다. 어차피 하루 8시간 이상은 몰입이 어렵다. 또한 퇴근 후에 영어, 운동, 신기술습득, 문화활동 등 장기적으로 성장하기 위한 활동을 해야한다. 그리고 야근이 없다는 오해도 있는데 야근은 있다. 최대한 합리적으로 프로젝트를 진행하려고 하지만 야근에 내몰리는 경우도 종종 있다. 또한 자발적으로 야근을 하는 개발자도 있다. &lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;span style="font-weight: bold;"&gt;개발일정은 개발자가 정한다.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;기본적으로 맞다. 하지만 여유로운 개발일정을 정하는 것은 절대 아니다. 프로젝트마다 일정의 중요도가 다르기 때문에 프로젝트마다 다른 기준에 따라서 일정이 정해진다. 개발자가 산정한 일정을 가장 우선시하지만 가끔은 고정된 일정에 개발자가 맞춰야 할 때도 있다. 이때는 합리적으로 조정하려고 노력한다. 부족한 일정만큼 개발자를 더 투입하거나, 외주를 투입하거나, 기능을 축소하거나, 단계별로 기능을 제공하거나, QA를 더 투입하거나, 상용 라이브러리를 구매하는등 여러 수단을 동원한다. 스펙을 철저히 쓰고 그렇게 합리적으로 진행하더라도 예상치 못한 Task가 추가로 생기는 등의 변수로 인해서 어려움에 봉착하기도 한다. 이를 해결하기 위해서 PM(Project Manager)과 TL(Technical Leader)은 머리를 맞대고 해결책을 고민한다. 최대한 합리적으로 계획을 세우고 해결책을 수립해도 프로젝트에는 어려움이 닥친다. &amp;nbsp;PM과 TL은 노하우를 쌓아서 이런 상황을 최소화 해나가고 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: inherit;"&gt;개발자 캐리어는 확실히 보장한다.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;개발자는 확실히 개발만 하게 한다. 그래야 효율성이 높기 때문이다. 전문 PM이 별도로 있어서 관리는 PM이 전담한다. PM 또한 대단한 전문성을 요구한다. 개발자에게는 개발만 요구하기 때문에 개발자로서 확실한 실력을 보여줘야 한다. 끊임없이 공부하고 노력해서 연차에 걸맞는 실력을 보여줘야 한다. 그렇지 않으면 신입 개발자들에게 밀리는 일이 발생한다. 사람들과의 관계와 공력으로 버티는 개발자들은 살아남기 힘든 환경이다. 야근이 별로 없다고 하더라도 퇴근 후에 해야 할 공부가 많다. 개발자는 평생 공부해야 한다고 하지만 성향에 따라서는 쉬운 일이 아니다. 나조차도 종종 고3때보다 공부를 더 하는 것 아닌가 생각할 때가 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: inherit;"&gt;모든 것을 공유해야 한다.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;공유하지 않는 것은 거의 없다고 보면 된다. 오늘 내가 한 모든 것이 온라인 시스템을 통해서 공개되고 공유된다고 보면 된다. 서로 만나서 말로 논의하고 끝나는 경우가 없다. 10분짜리 회의라도 Wiki 시스템에 기록이 남고 ITS(Issue tracker system)을 통해서 모든 이슈(버그, 개선, 신기능, Task 등)는 시스템에 기록되고 온라인으로 논의한다. 개발외에도 모든 업무가 온라인을 통해서 진행된다. 모든 직원이 당장 떨어져서 일해도 전혀 어려움이 없는 상황이다.&amp;nbsp;글로 적는 습관과 실력이 없는 사람들은 보통 곤역스러운 일이 아니다. &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;이것은 회사에게는 큰 장점이다. 직원이 하나 갑자기 빠져나가도 회사는 문제 없이 돌아간다. 하지만 개발자에게는 좋기도 하고 나쁘기도 하다. 열심히 일한 개발자는 자신이 과거해 해놓은 일에 발목을 잡혀서 새로운 일을 못하지 않는다. 언제든지 다른 사람들에게 유지보수를 맡기도 새로운 일을 할 수 있다. 하지만 의도치 않게 자신의 지식과 정보를 숨겨서 이를 자신의 존재가치로 삼는 개발자에게는 아주 안좋은 환경이다. 이런 회사는 개발자가 중요한 자산이기도 하지만 Risk가 되기도 한다. &lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;자연스럽게 모든 정보를 시스템에 남기는 형태로 일하는 것은 습관이 되기 전에는 매우 곤역스러운 일이다. 따라서 모든 개발자에게 꼭 좋은 환경이라고 볼 수는 없다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h3&gt;&lt;span style="font-weight: bold;"&gt;&lt;span style="font-family: inherit;"&gt;개발을 위한 신입사원 교육이 없다.&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;신입사원 교육이 있기는 하지만 회사의 일반에 관련된 내용이고 개발을 하기 위한 신입사원 교육이 없다. 이는 좋기도 하고 나쁘기도 하다. 신입사원은 입사하자마자 이슈(버그, 신기능, 개선 등)를 할당 받기 때문에 알아서 개발을 해야 한다. 단, 시스템에 거의 모든 정보가 있기 때문에 정보를 찾아가면서 개발을 해야 하고 멘토나 팀장이 가끔 가이드를 해준다. 하지만 옆에 끼고 가르치는 것은 없다. 고참들은 신입사원이 많이 들어와도 이들을 가르치기 위해서 시간을 빼앗기지 않는다. 신입들은 아무도 가르쳐주는 사람이 없어서 막막하겠지만 시스템을 검색해보면 필요한 정보가 거의 다 있기 때문에 본인의 능력여하에 따라서 훨씬 빨리 배울 수 있다. 또한 자연스럽게 본인들도 공유하는 습관을 가지게 된다. &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;이렇게 어떤 개발자에게는 좋은 환경이기도 하고 어떤 개발자에게는 매우 나쁜 환경이 되기도 한다. 하지만 이런 과정을 통해서 모든 프로젝트는 일정을 지키며 개발자들의 생산성은 매우 높다. 개발자는 글로벌 회사의 개발자들과 다를바 없는 수준으로 꾸준히 회사와 같이 성장할 수 있도록 노력하고 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;!--?xml version="1.0" encoding="UTF-8"?--&gt; &lt;br /&gt;&lt;div&gt;&lt;span style="font-family: inherit;"&gt;막연히 좋은 점만 상상을 했다면 이우소프트는 그런 모습은 아니다. 회사가 글로벌 회사들과 경쟁하는 것이 목표이며 이를 위해 필요한 모습을 갖추고 있을 뿐이다. 성향이나 적성이 일치하다면 좋은 환경이지만 그렇지 않다면 적응하기가 쉽지 않다. 물론 신입개발자들은 대체로 적응을 잘한다. 백지에는 무엇이든지 잘 써지기 때문이다.&lt;/span&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/xMbZt4vZ9M8" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/xMbZt4vZ9M8/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/06/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-3666868401495743193</guid><pubDate>Mon, 01 May 2017 04:03:00 +0000</pubDate><atom:updated>2017-05-01T13:03:26.713+09:00</atom:updated><title>이우소프트에서 신입, 경력직 공채를 실시합니다.</title><description>&lt;span style="background-color: white; color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;5/9까지 이우소프트의 그룹사 차원에서 공동으로 신입, 경력직 공채를 진행중입니다&lt;/span&gt;&lt;br /&gt;&lt;div style="background-color: white; color: #202326; font-family: 나눔고딕, NanumGothic, 돋움, Dotum, Helvetica, sans-serif; letter-spacing: -1px; line-height: 36px; margin: 0px; padding: 0px; text-size-adjust: 100%;"&gt;&lt;span style="background-color: white; color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;많은 지원 부탁합니다.&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: white; color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;이우소프트에서는 SW개발, AI개발, AI마케팅, SW제품기획, Project Management 분야 등 다양 포지션의 직원을 채용하고 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;div style="background-color: white; line-height: 36px; margin: 0px; padding: 0px; text-size-adjust: 100%;"&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif;"&gt;&lt;span style="letter-spacing: -0.24px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif;"&gt;&lt;span style="letter-spacing: -0.24px;"&gt;채용 지원 접수하기 :&amp;nbsp;https://recruit.vatech.co.kr/vrecruit/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #202326; font-family: 나눔고딕, NanumGothic, 돋움, Dotum, Helvetica, sans-serif; letter-spacing: -1px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #202326; font-family: 나눔고딕, NanumGothic, 돋움, Dotum, Helvetica, sans-serif; letter-spacing: -1px;"&gt;소개 기사 : &lt;/span&gt;&lt;a href="http://www.edaily.co.kr/news/NewsRead.edy?SCD=JC61&amp;amp;newsid=01846646615899400&amp;amp;DCD=A00306&amp;amp;OutLnkChk=Y" style="background-color: white; font-family: 나눔고딕, NanumGothic, 돋움, Dotum, Helvetica, sans-serif; letter-spacing: -1px;"&gt;사진부착·스펙기재·방문 없앤 3無 채용 실시&lt;/a&gt;&lt;br /&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;회사 블로그 소개글 :&amp;nbsp;&lt;/span&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; letter-spacing: -0.24px;"&gt;http://vatechblog.com/220995421174&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #1d2129; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif;"&gt;&lt;span style="letter-spacing: -0.24px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/AVu8UKHvrIQ" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/AVu8UKHvrIQ/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/05/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4215733234690440369</guid><pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate><atom:updated>2018-06-17T18:35:43.998+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">문화</category><title>  이우소프트에는 이것이 있다 vs. 없다</title><description>&lt;!--StartFragment--&gt;   &lt;!--EndFragment--&gt;&lt;br /&gt;&lt;h3&gt;개발자 캐리어 보장이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;개발자가 원하면 영원히 개발자로서의 경력을 보장해준다.&lt;/li&gt;&lt;li&gt;개발자에게 나이가 많다고 관리를 강요하거나 권유하지 않고 본인의 적성과 역량에 따라서 진로를 결정하면 된다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;남녀 차별이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;남여에 따른 역할,대우의 차이가 전혀 없다.&lt;/li&gt;&lt;li&gt;100% 역량에 따른 차이 밖에 없다.&lt;/li&gt;&lt;li&gt;결혼, 육아에 따른 차별이 없다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;아키텍트가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;SW아키텍트가 있고 스펙, 설계와 기술적인 이슈 해결을 담당한다. 코딩도 한다.&lt;/li&gt;&lt;li&gt;무조건 고참이라고 아키텍트가 되는 것은 아니다.&lt;/li&gt;&lt;li&gt;아키텍트가 되기 위한 까다로운 자격을 충족해야 한다.&lt;/li&gt;&lt;li&gt;아키텍트는 사원부터 수석 연구원까지 있다.&lt;/li&gt;&lt;li&gt;여자 아키텍트도 있다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;관리만 하는 개발팀장이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;개발팀장이 있기는 한데 휴가 결재가 하는 일의 대부분이다.&lt;/li&gt;&lt;li&gt;개발팀장은 Technical leader로서 개발만 잘하면 된다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;전문가가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;자신의 일에 전문가가 되지 않으면 살아남을 수 없다.&lt;/li&gt;&lt;li&gt;하지만 전문가라면 의견이 존중되는 수평적인 조직이다.&lt;/li&gt;&lt;li&gt;비전문가가 감놔라 대추놔라 하지 못한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;영어 이름이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;모든 직원이 서로 영어 이름을 부르고 한국 이름은 사용이 금지되어 있다.&lt;/li&gt;&lt;li&gt;팀장님과 같은 직책으로 부르는 것도 금지되어 있다.&lt;/li&gt;&lt;li&gt;수평적인 생각을 정착하기 위해서 영어 이름을 사용하며 모두 동일한 존칭을 사용한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/h3&gt;&lt;h3&gt;직급에 따른 서열이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;개발자들은 직급이 아무것도 말해주지 않는다.&lt;/li&gt;&lt;li&gt;역량에 맞게 일을 분배하고 개발을 할 뿐이다.&lt;/li&gt;&lt;li&gt;아키텍트가 따로 있고 PM이 일을 분배할 뿐이다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;잔디밭이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;8층 사무실 문을 열고 나가면 하늘 정원의 잔디밭이다. &amp;nbsp;&lt;/li&gt;&lt;li&gt;잔디밭에 누워서 햇볕을 쐬면서 머리를 식히자.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6OObasT53rc/WCQqfJWNzMI/AAAAAAACMAo/E8QEgW_qI2YAtB17keKsp1oeZc8zoYZSACLcB/s1600/G4.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-6OObasT53rc/WCQqfJWNzMI/AAAAAAACMAo/E8QEgW_qI2YAtB17keKsp1oeZc8zoYZSACLcB/s1600/G4.jpg" /&gt;&lt;/a&gt;&lt;a href="https://3.bp.blogspot.com/-mDIRJ7SsLTQ/WCQoTVYDlgI/AAAAAAACL_k/iGIhm2Xz7vkXLFFHn_9SAfcxisfokw1QgCLcB/s1600/14681751_1149526128471355_4697642446091563534_n.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-mDIRJ7SsLTQ/WCQoTVYDlgI/AAAAAAACL_k/iGIhm2Xz7vkXLFFHn_9SAfcxisfokw1QgCLcB/s1600/14681751_1149526128471355_4697642446091563534_n.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: start;"&gt;&lt;h3&gt;운동 시설이 있다.&lt;/h3&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;체육관, GX, 웨이트 트레이닝, 골프 등의 시설이 직원들에게 제공된다.&lt;/li&gt;&lt;li&gt;건강관리를 위해서 꾸준히 운동을 할 것을 권장하며 여러 종목의 코치를 채용하여 운동을 지도하고 있다. 물론, 자기 계발과 운동을 할 수 있는 시간을 보장한다.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-_FjvH3C1KWE/WCQqe-by2eI/AAAAAAACMAk/m2Swr60sHWYz_F8AB3j8f8r3n-7MJaOBwCLcB/s1600/G3.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-_FjvH3C1KWE/WCQqe-by2eI/AAAAAAACMAk/m2Swr60sHWYz_F8AB3j8f8r3n-7MJaOBwCLcB/s1600/G3.jpg" /&gt;&lt;/a&gt;&lt;a href="https://2.bp.blogspot.com/-duxtFnIE3mQ/WCQqeg2bJcI/AAAAAAACMAg/blPA5E8KBIss4p-DJ5FHPcpz6uqQHaF4wCLcB/s1600/G2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-duxtFnIE3mQ/WCQqeg2bJcI/AAAAAAACMAg/blPA5E8KBIss4p-DJ5FHPcpz6uqQHaF4wCLcB/s1600/G2.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-ldj7LZeQu24/WCQrlYyd6ZI/AAAAAAACMAs/ndw1gYp_Yi4AQqPJTws75RMKJjU1jA2ngCLcB/s1600/G6.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-ldj7LZeQu24/WCQrlYyd6ZI/AAAAAAACMAs/ndw1gYp_Yi4AQqPJTws75RMKJjU1jA2ngCLcB/s1600/G6.jpg" /&gt;&lt;/a&gt;&lt;a href="https://2.bp.blogspot.com/-j3z4_R4dcH8/WCQqehhaSgI/AAAAAAACMAc/c8NH5OSALDwU0gTt4BZd3sBLZB-aAGNagCLcB/s1600/G1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-j3z4_R4dcH8/WCQqehhaSgI/AAAAAAACMAc/c8NH5OSALDwU0gTt4BZd3sBLZB-aAGNagCLcB/s1600/G1.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;파티션이 없다.&lt;/h3&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;파티션이 전혀 없이 책상들끼리 붙이 있다.&amp;nbsp;&lt;/li&gt;&lt;li&gt;모든 직원이 한눈에 보인다.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-2xdM8D6nmkc/Vxmt8cxzYJI/AAAAAAACIx0/VENcZr8Xj_gWgXgl7RDy7PnNscty1838ACLcB/s1600/12801373_10206056240060460_2955706275427665657_n.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="150" src="https://4.bp.blogspot.com/-2xdM8D6nmkc/Vxmt8cxzYJI/AAAAAAACIx0/VENcZr8Xj_gWgXgl7RDy7PnNscty1838ACLcB/s200/12801373_10206056240060460_2955706275427665657_n.jpg" width="200" /&gt;&lt;/a&gt;&lt;a href="https://4.bp.blogspot.com/-rodGNuj-g-s/WCQoqIrVGTI/AAAAAAACL_o/VUbYlU-b5vES6Dq2VtI_iisZ0C0-LbgwgCLcB/s1600/01_2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-rodGNuj-g-s/WCQoqIrVGTI/AAAAAAACL_o/VUbYlU-b5vES6Dq2VtI_iisZ0C0-LbgwgCLcB/s1600/01_2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;어린이집이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;직원에게는 무료로 제공되는 어린이집이 있다.&lt;/li&gt;&lt;li&gt;출생 6개월부터 초등학교 입학 전까지 보육을 할 수 있다.&lt;/li&gt;&lt;li&gt;자녀와 같이 출퇴근을 할 수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-BIsZjQvcHqQ/WCQufhmVfmI/AAAAAAACMBw/6NVLAiuUPVE5jdyTxAEV13PXdEV7L7VSQCLcB/s1600/K5.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-BIsZjQvcHqQ/WCQufhmVfmI/AAAAAAACMBw/6NVLAiuUPVE5jdyTxAEV13PXdEV7L7VSQCLcB/s1600/K5.jpg" /&gt;&lt;/a&gt;&lt;a href="https://1.bp.blogspot.com/-dcMgCGrwH3k/WCQueu-vWfI/AAAAAAACMBs/vKb7kN6-ig0Sd3wlSpgROsIHtUaOXMdJgCLcB/s1600/K1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-dcMgCGrwH3k/WCQueu-vWfI/AAAAAAACMBs/vKb7kN6-ig0Sd3wlSpgROsIHtUaOXMdJgCLcB/s1600/K1.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-CDM0bTYemw4/WCQudfVHbLI/AAAAAAACMBk/g-50sLfJ0-YImW7YqAxSMegquqHuis6awCLcB/s1600/K2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-CDM0bTYemw4/WCQudfVHbLI/AAAAAAACMBk/g-50sLfJ0-YImW7YqAxSMegquqHuis6awCLcB/s1600/K2.jpg" /&gt;&lt;/a&gt;&lt;a href="https://4.bp.blogspot.com/-ILzeZ0_p-ac/WCQud2SeuPI/AAAAAAACMBo/kTfDRq8NfQUUnqHkGCyySwMkHj4hHJ4SQCLcB/s1600/K3.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-ILzeZ0_p-ac/WCQud2SeuPI/AAAAAAACMBo/kTfDRq8NfQUUnqHkGCyySwMkHj4hHJ4SQCLcB/s1600/K3.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-botunU-0Mgg/WCQugdBefVI/AAAAAAACMB0/uTeXUl7GsWsvXBqrXW1NuVi55117Bcf8QCLcB/s1600/K4.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-botunU-0Mgg/WCQugdBefVI/AAAAAAACMB0/uTeXUl7GsWsvXBqrXW1NuVi55117Bcf8QCLcB/s1600/K4.jpg" /&gt;&lt;/a&gt;&lt;a href="https://3.bp.blogspot.com/-CW9TcZrKGoQ/WCQugZMI99I/AAAAAAACMB4/OeWh8svtRkMv6c3ktFDfZBcCgKZt-LsxwCLcB/s1600/K6.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-CW9TcZrKGoQ/WCQugZMI99I/AAAAAAACMB4/OeWh8svtRkMv6c3ktFDfZBcCgKZt-LsxwCLcB/s1600/K6.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;회의록이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;모든 회의가 하나도 빠짐없이 기록이 된다.&lt;/li&gt;&lt;li&gt;회의록은 거의 실시간으로 기록되고 모든 직원에게 공유된다.&lt;/li&gt;&lt;li&gt;회의에 참석하지 않은 사람도 언제든지 모든 회의록을 볼 수 있다.&lt;/li&gt;&lt;li&gt;그리고 결정된 사항은 모두 철저히 추적 관리가 된다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;코리안 타임이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;회의시간이 1초도 늦는 직원은 없다.&lt;/li&gt;&lt;li&gt;1초라도 늦은 직원은 회의 참석자 전원에게 커피를 사야하고 2번째 늦을 때는 전직원에게 피자를 사야 한다.&lt;/li&gt;&lt;li&gt;커피는 얻어 먹었지만 아직 피자는 못얻어 먹었다. 언제 피자를 먹을 수 있을지 기다리고 있다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;전문 PM이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;전문PM이 합리적으로 일정,리스크 등 프로젝트 관리를 한다.&lt;/li&gt;&lt;li&gt;억지를 부리지 않는다.&lt;/li&gt;&lt;li&gt;그렇게 해서 최단 시간에 프로젝트를 끝내고 있다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;일정 강요가 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;경영진이 말도 안되는 일정을 억지로 밀어붙이지 않는다.&lt;/li&gt;&lt;li&gt;1,2일 단위로 개발자가 산정하며 개발자가 예측한 일정을 다른 사람이 무시하지 않는다.&lt;/li&gt;&lt;li&gt;그래도 일정이 부족하면 PM은 온갖 방법을 동원해서 일정 단축 전술을 구사하고 그래도 부족하면 일정을 연기한다.&lt;/li&gt;&lt;li&gt;필요 시 일정은 구현 시작 전에 연기하므로 비즈니스 부서에서는 일정을 조율하는데 큰 문제가 없다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;몰입이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;하루 8시간 업무에 완전히 몰입해야 한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;야근이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;강요된 야근이 없다.&lt;/li&gt;&lt;li&gt;일정을 합리적으로 결정하고 몰입해서 일해야 하기 때문에 야근이 필요 없다.&lt;/li&gt;&lt;li&gt;가끔 스스로 선택해서 야근을 하는 사람들이 있기는 하지만 강요는 없고 본인이 선택하는 것이다.&lt;/li&gt;&lt;li&gt;강요된 야근은 장기적으로 SW의 품질을 떨어뜨리고 기업 문화를 퇴보 시킨다.&lt;/li&gt;&lt;li&gt;PM이 야근 카드를 꺼내는 경우는 정말 피치 못할 때이고 단기적으로 사용해야 한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;스펙이 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;소프트웨어를 개발할 때는 항상 스펙을 작성한다.&lt;/li&gt;&lt;li&gt;큰 프로젝트는 SRS를 작성하고 작은 프로젝트나 프로토타입 개발 시에는 One-pager를 작성하다.&lt;/li&gt;&lt;li&gt;SRS가 완료되면 모든 Stakeholder의 대표들이 서명을 한다.&lt;/li&gt;&lt;li&gt;프로젝트 계획은 스펙을 기초로 합리적으로 수립한다.&lt;/li&gt;&lt;li&gt;스펙은 변경되면 문서를 업데이트해서 최신 버전을 유지한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;일정이 지연되는 프로젝트가 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;지연되는 프로젝트가 하나도 없다.&lt;/li&gt;&lt;li&gt;합리적인 일정 수립과 철저한 프로젝트 관리를 통해서 일정은 무조건 지킨다.&lt;/li&gt;&lt;li&gt;일정은 협력사와의 약속이므로 목숨처럼 지킨다.&lt;/li&gt;&lt;li&gt;출시 일정은 SRS가 끝날 때 확정한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;60세 개발자가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;나이는 개발자인지를 결정하는데 아무런 영향을 주지 않는다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;보고서가 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;개발자에게 보고서 강요가 없다. 주간보고도 없다.&lt;/li&gt;&lt;li&gt;개발자는 개발만 하면 된다.&lt;/li&gt;&lt;li&gt;문서는 개발문서만 쓰면 된다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;재택근무가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;회사에서 자격을 부여한 개발자는 재택근무를 선택할 수 있다.&lt;/li&gt;&lt;li&gt;가끔 회사에 나와서 회의를 하고 커뮤니케이션은 거의 이슈관리시스템을 이용한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;서울에도 스마트워크 센터가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;본사에 동탄에 있는만큼 서울 북부 거주자 등 지역적인 어려움이 있는 직원들은 서울에 있는 스마트워크 센터에서 일할 수 있다.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-uQH0dRrZ_kI/WCRo_8bioaI/AAAAAAACMCU/S0UxEotoR7oq5Wm_SVNMbCowX6ZpPq9cwCLcB/s1600/AF1QipMvStnxmCZCrkQhwruc6uxy7fnPy_YdL3Lds6nN%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-uQH0dRrZ_kI/WCRo_8bioaI/AAAAAAACMCU/S0UxEotoR7oq5Wm_SVNMbCowX6ZpPq9cwCLcB/s1600/AF1QipMvStnxmCZCrkQhwruc6uxy7fnPy_YdL3Lds6nN%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;a href="https://3.bp.blogspot.com/-G0ILfow5cYY/WCRo_7oennI/AAAAAAACMCQ/c5V3mk3B4gMlm_Lc1FNeWjIU5TGFXVF7wCLcB/s1600/AF1QipO7ymVVxkbrUobReq4WMCSd1ubuBYNeKsuCesv5%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-G0ILfow5cYY/WCRo_7oennI/AAAAAAACMCQ/c5V3mk3B4gMlm_Lc1FNeWjIU5TGFXVF7wCLcB/s1600/AF1QipO7ymVVxkbrUobReq4WMCSd1ubuBYNeKsuCesv5%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-n41GSOq3lkU/WCRptfucszI/AAAAAAACMCk/Uu9fLLpz0REMFs3cYAAuxdMJa-KV3PEkQCLcB/s1600/AF1QipNKARXJulFSC1Tc_qRVKBaZSPrbckRcsYOM74av%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-n41GSOq3lkU/WCRptfucszI/AAAAAAACMCk/Uu9fLLpz0REMFs3cYAAuxdMJa-KV3PEkQCLcB/s1600/AF1QipNKARXJulFSC1Tc_qRVKBaZSPrbckRcsYOM74av%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;a href="https://2.bp.blogspot.com/-udK8j7Dfb34/WCRptXZYkFI/AAAAAAACMCg/ofUvq4euieoo0hgq6h8nQtGg4_Tzqr4_wCLcB/s1600/AF1QipPCSkaFCguq_fgWWbhvQf1MCQicAHspE3MdkIMb%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-udK8j7Dfb34/WCRptXZYkFI/AAAAAAACMCg/ofUvq4euieoo0hgq6h8nQtGg4_Tzqr4_wCLcB/s1600/AF1QipPCSkaFCguq_fgWWbhvQf1MCQicAHspE3MdkIMb%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;E-mail이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;모든 커뮤니케이션은 이슈관리시스템을 이용한다.&lt;/li&gt;&lt;li&gt;E-mail은 주로 외부인과만 주고 받는다.&lt;/li&gt;&lt;li&gt;내부 모든 커뮤니케이션은 기록이 되고 공유가 되며 추적이 된다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;개발자에게는 가장 빠른 PC가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;회사가 감당할 수 있는 한도 내에서 개발자에게 가장 빠른 PC를 지급한다.&lt;/li&gt;&lt;li&gt;빠른 CPU와 SSD를 장착하여 빌드 속도를 2배 빠르게 한다.&lt;/li&gt;&lt;li&gt;그만큼 개발자는 일을 더 많이 해야 한다. 그리고 정시 퇴근해라.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-xWYrfNxNV-Q/WCRq2zUkFsI/AAAAAAACMC0/Gm7xCt0fL1wIGKWjSfrr9wzvfouIzIG2QCLcB/s1600/AF1QipMz7GAXRssk9OzK4PGclXEs7zxSNHi22u_1048b%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://1.bp.blogspot.com/-xWYrfNxNV-Q/WCRq2zUkFsI/AAAAAAACMC0/Gm7xCt0fL1wIGKWjSfrr9wzvfouIzIG2QCLcB/s1600/AF1QipMz7GAXRssk9OzK4PGclXEs7zxSNHi22u_1048b%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3&gt;피어 리뷰가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;개발자가 작성하는 코드 대부분을 리뷰한다. 리뷰를 통해서 버그를 찾고 공유, 학습을 한다.&lt;/li&gt;&lt;li&gt;더 중요한 것은 스펙, 설계 리뷰다.&lt;/li&gt;&lt;li&gt;개발자는 자신의 업무시간의 20%는 동료를 위한 리뷰에 사용해야 한다.&lt;/li&gt;&lt;li&gt;시니어 개발자는 20% 이상을 리뷰에 할애한다.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;마시고 죽자는 회식이 없다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;원치 않는 음주 회식에 참여해서 끌려 다닐 필요가 없다.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-ojakpJwuLFk/WCRrqt77S7I/AAAAAAACMDA/uQR6VHAF8ysRctm2mjqV2NQCyZoFetBZACLcB/s1600/AF1QipMLLbwcNL9zjXziFZrF_Nb2RiBuMMPnnh6XGu6H%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-ojakpJwuLFk/WCRrqt77S7I/AAAAAAACMDA/uQR6VHAF8ysRctm2mjqV2NQCyZoFetBZACLcB/s1600/AF1QipMLLbwcNL9zjXziFZrF_Nb2RiBuMMPnnh6XGu6H%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;a href="https://3.bp.blogspot.com/-Z9oKCEZN0_0/WCRrq2UdSdI/AAAAAAACMDE/wI9uRGC1GE0Go1dyLcUsTwkx_gAtg8t6gCLcB/s1600/AF1QipN8zcjGnh7gnImQ-ovfb8JlKuHIX9NXeWU0AGx_%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-Z9oKCEZN0_0/WCRrq2UdSdI/AAAAAAACMDE/wI9uRGC1GE0Go1dyLcUsTwkx_gAtg8t6gCLcB/s1600/AF1QipN8zcjGnh7gnImQ-ovfb8JlKuHIX9NXeWU0AGx_%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-iRGO9HNVbkQ/WCRrrEk-uaI/AAAAAAACMDM/ICEYd8KZkYwzigRlmdxbZW1Z83SJHrI9ACLcB/s1600/AF1QipPejxU3UJx9Dn4tlnhUrfGu0rVQ5lOmQIMLpuRw%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-iRGO9HNVbkQ/WCRrrEk-uaI/AAAAAAACMDM/ICEYd8KZkYwzigRlmdxbZW1Z83SJHrI9ACLcB/s1600/AF1QipPejxU3UJx9Dn4tlnhUrfGu0rVQ5lOmQIMLpuRw%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;a href="https://3.bp.blogspot.com/-9MKTDdMUopI/WCRrq72uXcI/AAAAAAACMDI/EIjLQbRf1cswlHyKK9ScNx2YaNrJh_cDQCLcB/s1600/AF1QipPI6KWq3FmKyEfCoqnm1tbbxNO8g6_xMgXV9iEB%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-9MKTDdMUopI/WCRrq72uXcI/AAAAAAACMDI/EIjLQbRf1cswlHyKK9ScNx2YaNrJh_cDQCLcB/s1600/AF1QipPI6KWq3FmKyEfCoqnm1tbbxNO8g6_xMgXV9iEB%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;즉석 라면이 있다.&lt;/h3&gt;&lt;h3&gt;&lt;ul style="font-weight: normal;"&gt;&lt;li&gt;&lt;span style="font-size: small;"&gt;회사 식당에서 제공하는 아침 메뉴 중에는 즉석 라면이 있다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: small;"&gt;요리사가 별도로 맛을 낸 해장 라면을 즉석에서 끓여주고 충무김밥이 제공된다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt; &lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-muF1mWjEIcE/WCRqV2qGLgI/AAAAAAACMCs/cKIc8BUPCzsAPtSOQMG9TpyceZTl8a4UACLcB/s1600/AF1QipPZc4ZhrEqczmm5SviH9YxcG8u4KRv38XtG7jRl%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://4.bp.blogspot.com/-muF1mWjEIcE/WCRqV2qGLgI/AAAAAAACMCs/cKIc8BUPCzsAPtSOQMG9TpyceZTl8a4UACLcB/s1600/AF1QipPZc4ZhrEqczmm5SviH9YxcG8u4KRv38XtG7jRl%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;a href="https://2.bp.blogspot.com/-fOHa7KJCNSU/WCRqVkXBa-I/AAAAAAACMCo/5x2tCsX5WQMz6J-Wh-SOhIc4oIYdytMPgCLcB/s1600/AF1QipMYCA1Cefio6CNsp0Lj7JPqJR4w_4UckPU1V7Kl%253DI-U.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-fOHa7KJCNSU/WCRqVkXBa-I/AAAAAAACMCo/5x2tCsX5WQMz6J-Wh-SOhIc4oIYdytMPgCLcB/s1600/AF1QipMYCA1Cefio6CNsp0Lj7JPqJR4w_4UckPU1V7Kl%253DI-U.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/h3&gt;&lt;h3&gt;꼭 지켜야 하는 문화가 있다.&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;공유, 협업, 커뮤니케이션이 꼭 지켜야 하는 문화다.&lt;/li&gt;&lt;li&gt;공유와 협업을 철저히 하지 않으면 같이 일을 할 수 없다.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/rBrwCrkFbTg" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/rBrwCrkFbTg/vs.html</link><author>noreply@blogger.com (전규현)</author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-6OObasT53rc/WCQqfJWNzMI/AAAAAAACMAo/E8QEgW_qI2YAtB17keKsp1oeZc8zoYZSACLcB/s72-c/G4.jpg" height="72" width="72" /><thr:total>4</thr:total><feedburner:origLink>http://www.allofsoftware.net/2015/12/vs.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-4384041088134918732</guid><pubDate>Sat, 11 Feb 2017 05:37:00 +0000</pubDate><atom:updated>2017-02-11T14:37:54.649+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">개발문화</category><category domain="http://www.blogger.com/atom/ns#">개발프로세스</category><title>개발 프로세스가 개발 문화를 이기기 어려운 이유</title><description>&lt;div&gt;&lt;span&gt;우리나라의 많은 기업들은 SW 개발에 실패를 했다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;그뒤 선진 소프트웨어 개발 방법을 배우고자 노력을 많이 했고, 그 결과 개발 방법론, 프로세스를 도입하였다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;하지만 그 결과 SW개발은 더욱 비효율적으로 바뀌게 되었다. 그 이유는 무엇일까?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;SW 개발에 있어서 정교한 프로세스를 정하면 프로세스에 매몰되고 프로세스가 점점 복잡해져 간다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;완벽한 프로세스는 없는 것이 당연하고 문제는 계속 생긴다. 이때마다 이를 해결하기 위한 프로세스를 계속 만들어가면 괴물 프로세스가 탄생하게 된다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;SW를 가장 효과적으로 개발하는 방법은 프로세스에 상관없이 가장 적절한 과정으로 개발하는 것이다. 그 적절한 과정은 성숙한 개발 문화 속에 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;하지만 많은 회사들은 애매하고 어려운 개발 문화보다는 명백하고 따라하기 쉬운 개발 프로세스에 집중해왔다. 그 결과 주먹구구식을 개발할 때보다 개발 효율성은 더 떨어졌다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;프로세스를 통해서 효율적인 개발 과정을 제대로 정의하기 어려운 이유는 아래 대화를 보자. 최고의 소프트웨어 실전 전문가에게 질문을 하면 아래와 같이 답을 할 것이다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 모든 소스코드는 코드리뷰를 다 해야 하나요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A. 아니요, 그때 그때 달라요.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 코드리뷰에 꼭 포함해야 하는 필수 리뷰어는 누구 인가요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 스펙은 꼭 작성해야 합니까?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 스펙을 작성할 때 가장 중요한 부분은 어디 인가요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 설계서는 꼭 작성해야 하나요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A.&amp;nbsp;그때 그때 달라요.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 효율적으로 설계서를 작성하는 방법은 무엇인가요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A.&amp;nbsp;그때 그때 달라요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 매번 경우마다 다른데 개발 프로세스는 어떻게 정하죠?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A. 그래서 프로세스를 너무 자세히 정하면 안됩니다. 최소한으로 정하고 개발자들의 판단력을 믿어야 합니다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 대기업은 그래서 프로세스 테일러링을 통해서 프로젝트마다 적절히 프로세스를 간소화해서 산출물도 줄이는 등 개발 프로세스를 효율적으로 적용하려고 노력하고 있습니다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A. 이 또한 하다하다 안되니까 형식적으로 진행하는 겁니다. 심지어는 개발도 잘 모르는 사람들이 테일러링을 합니다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Q. 알아서 하라고 하면 과거처럼 스펙도 없고, 공유도 안하고 주먹구구식으로 하지 않을까요?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;A. 그렇기 때문에 역량과 문화가 중요합니다. 문화가 아무리 좋아도 역량이 안되면 공염불입니다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;프로세스는 복잡할수록 손해다. 문제만 없다면 프로세스가 없는 것이 제일 좋다. 문제가 있기 때문에 최소한의 제약을 가하는 것이다. 프로세스가 간단할수록 성숙도가 높다. 물론 주먹구구라서 프로세스가 없거나 간단한 회사는 예외다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;하라고 해서 억지로 하는 상황이라면 효과를 기대하기는 어렵다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;문화라고 하는 것은 "왜"가 아니고 "그냥 그렇게" 하는 거다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;그냥 스펙을 적절히 작성하는 것이고, 그냥 필요한 만큼 설계를 하며, 그냥 코드 리뷰를 한다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;모든 직원이 그냥 그렇게 할 수 있을 때 문화로 정착되었다고 할 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;그렇게 되면 과거로 돌아가자고 해도 모두 반대한다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;프로세스는 절대로 문화를 이기기 어렵다. 효율성이 몇배 차이가 난다. 10배 이상 차이가 날 때도 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;프로세스 보다는 SW 개발의 원리를 깨우쳐야 한다.&amp;nbsp;각 분야에 전문가들이 최소의 프로세스 하에서 최선의 판단을 해서 진행하면 된다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;잘 안된다고 프로세스를 점점 복잡하게 하고 너무 과하게 적용한다면 문제는 점점 커질 것이다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;개발 문화가 점점 성숙해 질수록 프로세스는 만들었다가 간소화 시켰다가 없앴다가를 반복하게 될 것이다. 그래도 신입직원을 위해서 읽을만한 프로세스 문서는 존재하게 된다. 하지만 기존 직원들은 숨쉬는 것처럼 익숙해지고 원리를 깨우쳤기 때문에 프로세스 문서를 계속 보거나 프로세스를 따라하기 위해서 억지로 행하지는 않게 된다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;이쯤되면 SW를 좀 개발할 수 있게 됐다고 자신 있게 말할 수 있다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/ktT3BuYNNdc" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/ktT3BuYNNdc/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>3</thr:total><feedburner:origLink>http://www.allofsoftware.net/2017/02/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-5897983876048043193</guid><pubDate>Wed, 26 Oct 2016 05:09:00 +0000</pubDate><atom:updated>2016-10-31T20:46:36.138+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">조직문화</category><title>SW회사에는 왜 수평적인 조직문화가 필요한가?</title><description>&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;한국 소프트웨어 개발 환경이 이렇게 열악하고 기업의 소프트웨어 경쟁력이 미천한 이유의 핵심은 글로벌 소프트웨어 회사와는 엄청나게 다른 개발문화, 기업문화 때문이라고 생각한다. 그래서 필자는 지속적으로 글로벌 개발 문화를 소개해 왔고 이제는 실제 한국의 소프트웨어 회사에 적용된 사례도 공유하고 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;이번에는 소프트웨어 회사에 왜 수평적인 조직문화가 꼭 필요한지 설명하려고 한다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;한국 대기업을 다니는 외국인 직원이나 외국에 있는 한국 회사에 다니는 외국인들의 한국 회사에 대한 평가는 인터넷에 많이 올라온다. '글래스도어'도 그 중에 하나고 필자는 대기업에서 일하고 있는 외국인 개발자들을 인터뷰하기도 했었다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;좋은 얘기도 많지만, 문제를 찾아야 하는 입장에서 문제점으로 지적된 것을 봐야 한다. 그 중에 대표적인 것은 한국 기업은 '군대'와 비슷하다는 것이다. 군대식 상하 조직이 한국 사람들에게는 상당히 자연스러운데 이런 조직 문화는 소프트웨어를 개발하는데 있어서는 심각한 걸림돌이 된다. '까라면 까라'로 대표되는 군대식 상명하복 문화를 가지고는 글로벌 회사들과 경쟁하기 어렵다. 어렵사리 글로벌 시장에 진출하여 세계 상위권에 올라섰다고 하더라도 곪은 문제는 언젠간 터지게 마련이고 나락으로 떨어지는 것은 한 순간이다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;소프트웨어는 인류가 만들어 낸 가장 복잡한 지식 산업이다. 물론 상명하복식 조직 문화가 매우 효과적인 산업 분야도 있다. 하지만 창의적인 지식 산업인 소프트웨어 분야에서는 상명하복식으로 성장할 수 있는 데는 한계가 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;상급자가 모든 것을 알 수는 없다. 경영자도 소프트웨어 개발에 대한 모든 것을 알 수가 없다. 그런데도 경영이나 영업 관점으로 목표를 제시하고 '까라면 까라는 식'으로 일을 추진하면 시한폭탄을 계속 심는 것과 다를 바가 없다. 개발에 1년이 걸릴 프로젝트를 시장 상황 때문에 6개월안에 개발을 하려면 전문가들이 머리를 맞대고 합리적인 단축 방법을 찾을 수도 있다. 하지만 합리적인 해결책은 무시하고 명령식으로 압박을 하면 프로젝트는 어찌어찌 진행이 되지만 중요한 핵심 프로세스들이 생략될 수밖에 없다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;코딩은 빼먹을 수가 없으니, 스펙을 대충 정하거나 분석도 하지 않고 코딩을 시작해야 하며, 설계도 없거나 부실하고, QA도 대충할 수 밖에 없다. 어떻게든 결과가 나왔다고 하더라도 출시 후에 더 큰 비용을 치르거나 또 하나의 시한폭탄을 심어 놓은 상황이 된다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;이런 일이 벌어지는 이유는 상하관계가 확실하고 윗사람이 거의 생사여탈권에 가까운 평가권과 인사권을 가지고 있고 아랫사람은 윗사람과 특히 최고 경영자의 눈치를 심하게 봐야 하는 기업 문화 때문이다. 이런 조직에서 성장해온 관리자들은 어렵게 획득한 막강한 권한을 내려 놓기는 쉽지 않다. 자신 혼자 내려 놓을 수 있는 것도 아니다. 그래서 기존 조직, 특히 대기업이나 중견기업이 수평적인 조직으로 바뀌는 것은 거의 불가능하다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;수평적인 조직이란 모든 직원이 평등하다는 것을 말하는 것이 아니다. 각자 전문가로서 역할을 할 수 있어야 하며, 전문가로서 목소리를 낼 수 있어야 하며, 전문가로서 제시한 의견을 존중 받아야 한다는 의미다. 이때 직급, 나이, 경력은 의미가 없다. 상하 관계가 아닌 전문가로서의 의견이 잘 조율돼서 조직이 할 수 있는 최선의 결정을 내릴 수 있어야 경쟁력을 갖출 수 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;그럼 필자가 CEO로 있는 이우소프트의 수평적인 조직문화에 대해서 소개를 하겠다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;수평적인 조직문화는 다른 모든 조직 문화를 떠받치는 기초와 같다. 자율, 토론, 차근차근, 전문가 존중 등 이우소프트가 지향하는 기업 문화는 상명하복 문화가 철저한 조직에서는 잘 작동하지 않는다. 그래서 수평적인 조직 문화를 정착하기 위해서 많은 노력을 했다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;첫째, 모두 영어 이름을 부른다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;영어 이름을 부르는 것은 단순히 유행을 따르는 것은 아니다. 호칭은 사람의 생각을 지배하고 존칭과 하대가 섞인 대화에서는 상하 관계가 떠오를 수밖에 없다. 그래서 많은 회사들이 호칭 개혁을 하려고 '~님', '~프로' 등 다양한 시도를 하지만 제대로 정착된 곳이 많지는 않다. 하지만 영어 이름을 부르는 것은 이미 검증된 방법이다. 영어이름을 부르면 직급을 부르지 않아도 되고, 제3자가 보더라도 상하 관계를 읽을 수가 없다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;그래서 이우소프트에서는 서로 영어 이름을 부르고 있고 영어 이름을 부를 때 존칭을 사용하는 것은 금지되어 있다. 모든 사람이 서로 존대를 하되 '~께서'라고 부르는 것도 금지되어 있다. 내 영어 이름은 레이몬드(Raymond)인데, "레이몬드께서 그렇게 말씀 하셨습니다."는 금지된 표현이고 "레이몬드가 그렇게 말했습니다."가 허용된 표현이다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;직책을 부르는 것도 금지되어 있다. 팀장님, 대표님과 같은 호칭도 부르지 못하도록 되어 있다. 적응하는데 시간이 꽤 걸렸고, 한국 이름을 부르거나 직책을 부르면 1,000원씩 벌금을 내야 하고, 이제는 완전히 정착이 되었다. 그렇게 모인 벌금은 연말에 불우이웃 돕기를 하기로 되어 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;특히, 신입 사원들은 가장 빨리 적응을 했다. 각자 직급은 나눠져 있기는 하지만 부르지 않기 때문에 서로의 그레이드(Grade)를 잘 모르고 있다. 회사에 외국인 개발자는 점점 늘고 있고, 영어 사용이 늘고 있어서 영어 호칭이 도움이 되고 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;둘째, 상하 관계로 의사 결정을 하지 않는다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;즉, 전문가를 존중한다. 수평적으로 나뉜 역할에 의해서 대부분의 결정을 한다. 소프트웨어 회사에는 수많은 전문 역할이 있다. 소프트웨어 엔지니어(Software Engineer), 소프트웨어 아키텍트(Software Architect), CTO, 프로젝트 매니저(Project Manager), 프로덕트 매니저(Product Manager), 리스크 매니저(Risk Manager), 빌드 엔지니어(Build Engineer), 테크니컬 라이터(Technical writer), 마케터(Marketer), UI 디자이너, QA 엔지니어, 형상 관리자(Configuration Manager) 등 여러 역할이 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;물론 작은 회사는 한 사람이 여러 역할을 하며 이 모두를 다하기도 한다. 하지만, 회사가 조금만 커져도 역할을 나누며 각각 전문성을 높여 나간다. 그리고 전문가의 의견을 최대한 존중하고 상하 관계로 의사결정의 뒤엎지 않는다. 자신의 전문 역할이 아니라도 의견을 제시할 수는 있고 토론을 할 수는 있지만 무리하게 남의 전문영역에 침범을 하면 안 된다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;"전권을 주면 내가 프로젝트를 성공시켜보겠다"라고 말하는 사람들이 있다. 이우소프트에서는 이런 말은 통하지 않는다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;제품의 기능을 결정할 때는 세일즈, 마케팅, 개발팀, 경영진의 의견은 대부분 상충된다. 이때 직급의 힘으로 의사 결정을 하지 않는다. 각자 전문가로 역할을 수행하며 논쟁을 하고 경영진은 회사의 비전과 프로젝트의 목표에 알맞게 균형을 맞추고 조율하는 일을 주로 한다. 직원을 채용할 때도 신입이나 주니어 급 직원은 상관없지만 경험이 많은 직원을 채용할 때는 권위의식이 있는지 상명하복에 익숙한지 잘 살핀다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;셋째, 허락 받고 일하기 보다는 자율적으로 일한다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;상사가 일을 시키고 하급자는 시키는 일을 하는 구조가 아니다. 대부분은 스스로 일을 찾고, 스스로 할 일을 정해서 한다. 물론 시켜서 하는 일도 있다. 하지만 능동적으로 스스로 일을 찾아서 하는 것을 권장하고 있고, 하는 일은 모두 시스템에 등록을 하기 때문에 팀장이나 동료들이 모두 모니터링을 할 수 있다. 가끔 일이 잘못 진행되거나 우선순위 조절에 문제가 생기기도 하지만 모니터링을 하다가 바로 잡아주면 된다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;업무의 자율성을 높이기 위해서는 뭔가 잘못되었을 때 처벌을 강조하면 안 된다. 처벌이 강할수록 수동적으로 바뀐다. 그리고 문제가 생겼을 때는 여러 사람의 공동책임이다. 시스템에 일을 너무 늦게 공유를 했거나, 모니터링을 소홀히 했을 수가 있다. 프로세스를 잘못 이해하고 있을 수도 있다. 처벌보다는 원인을 찾아서 개선을 해야 한다. 고의로 잘못을 한 것이 아니라면 직원의 일방적인 책임은 아니다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;이런 방식이 허락 받고 일하거나 시키는 것 위주로 일하는 것보다는 훨씬 생산성이 높다. 기본적으로 시키는 일보다는 자신이 선택한 일이 더 재미있고 집중도도 높다. 또한 자율성, 창의성이 향상되므로 업무 효율성은 훨씬 높아진다. 물론 모든 직원이 다 적극적이고 능동적인 것은 아니다. 여러 성격의 직원들이 섞여 있지만, 능동적인 직원들의 발전이 더 빠르다. 시키는 일만을 위주로 회사가 돌아간다면 창의적인 지식산업이 소프트웨어가 노동 산업으로 전락할 수가 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;이우소프트가 이렇게 수평적인 조직문화를 잘 정착한 데는 이유가 있다. 실리콘밸리에서 20년동안 개발을 한 CTO와 수평적인 문화를 당연하게 받아들이는 경영진이 있어서 가능했다. 오히려 직원들이 수평적인 조직문화에 적응하는데 시간이 걸렸다. 한국 대기업들이 수평적이고 자율적인 문화로 조직문화를 탈바꿈하는 것이 쉽지 않은 이유다. 마음만 먹는다고 바뀌는 것도 아니고 경영진은 여전히 무소불위의 권력을 행사하면서 직원들끼리 수평적인 조직문화를 만들 수는 없다. 문화란 대물림이 되고 바뀌기 매우 어렵기 때문에 외국인을 채용하거나 외국 회사를 흡수 합병해도 그들의 문화는 사라지고 기존의 상명하복 문화에 억지로 적응해야 하는 상황이 벌어진다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;​&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;수평적인 조직문화는 다른 문화의 기반이 되기 때문에 특히 더 중요하다. 수평적인 조직문화 하에서 공유와 협업이 더 잘되며 전문가로서 캐리어를 꾸준히 유지하기도 쉽다. 사규를 만든다고 되는 것도 아니다. 모두의 생각이 바뀌어야 한다. 경영진들이 먼저 수평적인 조직문화에 완전히 적응을 해야 직원들이 따라 올 수 있다.&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="color: #222222; font-family: 돋움, '맑은 고딕', tahoma, sans-serif; line-height: 1.6; padding: 0px;"&gt;이 글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20161026091515"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/T5OXcZ_SRXk" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/T5OXcZ_SRXk/sw.html</link><author>noreply@blogger.com (전규현)</author><thr:total>1</thr:total><feedburner:origLink>http://www.allofsoftware.net/2016/10/sw.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-7619577325642167136</guid><pubDate>Tue, 04 Oct 2016 03:01:00 +0000</pubDate><atom:updated>2016-10-06T18:34:46.333+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">개발문화</category><category domain="http://www.blogger.com/atom/ns#">경영자</category><title>소프트웨어 회사에서 경영자가 하면 안되는 것들</title><description>&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;필자는 23년 경력의 개발자이며 이우소프트의 CEO다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;과거 8년 동안 소프트웨어 공학 컨설턴트로서 소프트웨어 개발에 관한 글을 써왔다. 우리나라의 열악한 소프트웨어 개발 환경의 핵심이 개발문화 때문이라고 생각해서 글로벌 개발 문화를 소개해 왔고&lt;span style="line-height: normal;"&gt;&amp;nbsp;&lt;/span&gt;이제는 실제 한국의 소프트웨어 회사에 적용된&lt;span style="line-height: normal;"&gt;&amp;nbsp;&lt;/span&gt;사례 소개하고 있다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;오늘은 소프트웨어 회사에서 경영자가 하면 안 되는 것들을 소개하려고 한다. 물론, 회사마다 기업문화가 달라서 사람에 따라서는 괴리감을 있을 수 있다. 문화란 원래 경험하지 않은 사람은 괴상하다고 생각할 수도 있고 현실성이 없다고 느낄 수도 있다. 하지만 우리 회사에서는 당연하게 생각되는 것들이고 이런 문화가 글로벌 소프트웨어 기업들과 경쟁하기 위해서 필요하고 생각하기 때문에 소개를 한다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;첫째, 개발자들의 개발 기간 예측(Estimation)을 무시하기&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;많은 회사에서 벌어지고 있는 일이고 일방적으로 경영자의 잘못으로 치부하기도 힘들다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;사례는 워낙 많지만 개발자들이 1년 이하로는 도저히 개발할 수 없다고 주장하는 프로젝트를 경영자가 6개월안에 무조건 끝내라고 하는 경우는 매우 흔하다. 이유도 여러 가지다. 개발자의 주장을 믿지 않기도 하고, 프로젝트가 늦어질 것을 감안하여 필요 일정보다 무조건 당겨서 끝내라고 하기도 한다. 또한, 이렇게 개발자를 강하게 압박하지 않으면 개발자들이 야근도 안하고 열심히 일을 안 한다고 생각하는 경영자도 많다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;당장은 이렇게 해서 몇몇 프로젝트가 성공할 수도 있고 개발 일정도 당겨지고 이익을 보기한다. 하지만, 이런 행위가 관행처럼 굳어지면 결국에는 개발자, 경영자 모두가 손해를 본다. 또한 회사의 개발 문화도 한참 후퇴한다. 경영자가 일정을 무조건 줄이면 개발자는 다음부터 어쩔 수 없이 예상보다 조금씩 늘려서 얘기를 하곤 한다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;개발자도 경영자가 납득할만한 근거를 가지고 적절한 개발 기간을 제시하지 못하는 문제도 벌어진다. 그래서 경영자는 개발자가 제시한 일정을 납득하지 못하고 무조건 일정을 줄이고 본다. 이 싸움은 누구도 승자가 될 수 없는 싸움이다. 개발자는 아키텍처가 망가지는 고통 속에서 야근을 거듭하고 경영자는 프로젝트의 예측 가능성이 낮아져서 비즈니스를 수시로 그르치게 된다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;먼저, 개발자는 잘 분석된 스펙을 바탕으로 납득할 수 있는 일정을 제시해야 한다. 그리고 경영자는 개발자가 예측한 일정을 믿어주는 신뢰관계가 필요하다. 그래야 개발자는 항상 최선을 다해서 정확한 일정을 산정하려고 노력한다. 개발자가 제시한 일정을 단축해야 하는 경우에는 합리적인 수단을 사용해야 한다. 야근도 하나의 방법이기는 하지만 습관적인 야근은 이익보다 손실이 큰 방법이다. 합리적인 수단이란 기능 축소, 핵심 기능에 집중, 단계별 개발, 전문 컨설턴트 투입, 일부 상용 모듈 구매 등 여러 가지가 있다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;이런 개발자와 경영자 간의 신뢰 관계는 개발 방법론과 상관없이 필요하며 정착하는데 상당한 기간이 필요하다. 그리고 이렇게 개발하는 방법이 소프트웨어를 가장 빨리 개발하는 방법이라는 것을 깨달아야 한다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;둘째, 합의된 요구사항을 경영자의 취향대로 바꾸기&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;우리나라 회사들은 경영자가 무엇이든지 뒤집을 수 있는 막강한 권력을 가진 경우가 많다. 출시 임박한 제품의 모양을 경영자가 갑자기 바꾸거나, 취향대로 색깔을 바꾸기도 한다. 소프트웨어 분야에서도 흔히 벌어진다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;프로젝트에서 경영자의 역할은 프로젝트마다 다르다. 하지만 경영자가 프로젝트에서 절대 권력자는 아니다. 한 명의 Stakeholder일 뿐이다. 대부분의 프로젝트에서 경영자의 역할은 비전과 전략을 담당한다. 빌게이츠는 초창기 프로젝트의 기술적인 내용까지 깊숙이 간섭을 했는데 이는 경영자로서가 아니고 Chief Architect로서의 역할을 한 것이다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;프로젝트에서 경영자는 경영자 관점에서 비전과 전략 요구사항을 전달해야 한다. 그것도 초기에 제시해야 한다. 전략이 바뀌면 프로젝트는 엄청나게 바뀌는 것이므로 가능하면 초기의 전략이 유지되는 것이 좋다. 전략이 바뀌더라도 합리적인 변경을 해야 한다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;경영자가 프로젝트 막바지에 뒤늦게 관여를 해서 감 놔라 대추 놔라 하는 것은 금기사항이다. 이런 일이 벌어지면 아키텍처는 완전히 엉망이 되고 개발자들의 사기는 땅에 떨어지면 신뢰관계는 금이 간다. 우리 회사에서는 스펙이 Close 된 후에는 경영자가 요구사항을 바꾸려고 해도 Change Control Process를 통과해야 한다. Change Control Board에서 변경이 거부되면 아무리 경영자가 요구한 내용이라고 변경이 불가능하다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;이래야 경영자도 프로젝트에서 자신의 역할을 제대로 수행하기 위해서 최선을 다한다. 뒤늦게 아무 때나 간섭할 수 있다는 생각은 하지 않게 된다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;셋째, 개발자에게 아무 때나 가서 말을 시키거나 지시하기&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;우리 회사에서는 경영자뿐만 아니라 누구도 개발자에게 아무 때나 말을 걸고 개발을 방해하지 않는다. 개발자가 개발에 집중을 하고 있는 경우에 중간에 방해를 하면 엄청난 손해가 발생한다. 피플웨어에서는 30분 정도의 손실이 발생한다고 한다. 이런 방해가 하루에 3,4번 벌어지면 하루를 망친다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;개발자와 면담을 할 것이 있으면 몇 시간 전이나 하루 전에 미리 시간을 Arrange해야 한다. 급하게 할 얘기가 있으면 개발자가 집중을 하고 있는지 조심스럽게 살핀다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;그래서 우리 회사에는 메신저도 금지되어 있고 근무 중에는 카카오톡도 무음 설정을 해야 한다. 개발자가 집중해서 일을 하고 있는데 메신저가 부르거나 "까똑" 거리면 집중해서 일할 수가 없다. 개발자에게 전화를 거는 일도 거의 없다. 대신에 근무 시간에 최대한 집중을 하고 야근은 되도록 하지 않는다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;b&gt;넷째, 수시로 보고서를 요구하기&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;공유 문화가 잘 정착되어 있는 회사에서는 진행되는 거의 모든 일이 온라인 시스템에 잘 기록되어 있다. 그래서 별도의 보고서가 없어도 경영자는 거의 모든 내용을 실시간으로 모니터링이 가능하다. 그래서 특수한 경우가 아니면 시스템에 있는 정보를 다시 정리해서 보고하라고 하지 않아야 한다. 보고서는 경영자의 시간을 약간 절약해 주지만 직원들은 수십, 수백 배의 시간을 소모해야 한다. 일보다 보고서 작성에 더 많은 시간을 쏟기도 한다. 또한 보고서만으로 업무를 파악하면 가공과정을 거치면서 내용이 왜곡되곤 한다. 시간이 허용하는 한 최대한 많은 정보를 직접 보는 것이 좋다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;보고서는 꼭 필요한 경우에만 작성해야 한다. 이것이 가능 하려면 공유 문화가 완전히 정착되어 있어야 한다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;지금까지 네 가지 경영자가 하면 안 되는 일을 소개했다. 그럼 경영자는 별로 할 일이 없는가? 경영자는 회사의 비전, 전략을 정하고 목표를 설정해야 한다. 인재를 채용하고 직원을 코칭, 육성해야 하며 회사의 규칙을 만들고 문화를 만들어가야 한다. 이외에도 경영자가 해야 할 일은 수없이 많다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;필자는 CEO일 뿐만 아니라 아키텍트의 역할도 일부 수행하며 또한&lt;span style="line-height: normal;"&gt;&amp;nbsp;&lt;/span&gt;소프트웨어 국제화 전문가이다. 그래서 소프트웨어 공학, 아키텍처, 국제화 관련 이슈에도 전문가로서 직접 관여를 한다. 하지만 그 외의 것은 위에서 얘기한 것처럼 Stakeholder로서 의논에 참여를 하고 의견을 제시하지만 결정에 과도한 압력을 가하거나 합의된 결정을 뒤집지는 않는다. 합의를 바꾸려면 정해진 절차를 따른다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;글로벌 수준의 개발 문화 속에서 경영자와 개발자가 각자의 전문 역할을 충실히 수행할 때 글로벌 소프트웨어 회사들과 비로소 경쟁을 시작할 수 있을 것이다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="line-height: normal;"&gt;&lt;span style="font-family: inherit;"&gt;개발 문화는 후진적인데 개발자 하나하나가 선진적이고 뛰어나다고 해서 소프트웨어가 경쟁력을 갖출 수 없다. 개발 문화라는 것이 반바지를 입는다고 공짜 점심을 준다고 좋은 공학툴이나 방법론을 도입한다고 해서 제대로 정착되는 것은 아니다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt; 모든 구성원의 마음과 습관을 바꾸는 것이 핵심인데 매우 어려운 과정이며 경영자부터 바뀌지 않으면 안 된다&lt;span style="line-height: normal;"&gt;.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;; line-height: normal;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: &amp;quot;times new roman&amp;quot;;"&gt;이 글은 &lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20161004095905"&gt;ZDNet Korea&lt;/a&gt;에 기고한 글입니다.&lt;/span&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/allofsoftware/~4/fD7uVdigOao" height="1" width="1" alt=""/&gt;</description><link>http://feedproxy.google.com/~r/allofsoftware/~3/fD7uVdigOao/blog-post.html</link><author>noreply@blogger.com (전규현)</author><thr:total>0</thr:total><feedburner:origLink>http://www.allofsoftware.net/2016/10/blog-post.html</feedburner:origLink></item><item><guid isPermaLink="false">tag:blogger.com,1999:blog-6060875800282210631.post-3503559784447430458</guid><pubDate>Tue, 20 Sep 2016 11:36:00 +0000</pubDate><atom:updated>2016-09-21T17:46:25.975+09:00</atom:updated><category domain="http://www.blogger.com/atom/ns#">개발팀장</category><category domain="http://www.blogger.com/atom/ns#">관리</category><title>왜 이우소프트에는 개발팀장이 필요없는가?</title><description>&lt;div style="line-height: normal; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;내가 CEO로 있는 이우소프트에는 우리나라에서 흔히 얘기하는 개발팀장이 없다. 정확히 말하면 개발팀장이라는 포지션이 있기는 한데 일반적인 개발팀장은 아니다. 관리를 전혀 하지 않는 개발팀장이다. 평가 등 몇몇 행정적인 역할이 필요하기 때문에 개발팀장 포지션이 있기는 하다.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;회사마다 개발팀장의 역할이 다르고 뭐가 옳고 뭐가 그르다라고 할 수는 없다. 하지만 대부분의 소프트웨어 회사에서 조금 또는 많은 시간을 관리에 할애를 해야 하는 개발팀장과 다르게 이우소프트에서는 개발팀장이 관리를 전혀 하지 않는다. 이우소프트에서는 이렇게 하는 것이 가장 효율적이라고 생각을 하기 때문에 개발자에게는 지위고하를 막론하고 관리를 전혀 시키지 않는다.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 12px; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;개발팀장이 관리를 전혀 하지 않는 다는 것은 크게 두 가지 의미가 있다&lt;span style="line-height: normal;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; min-height: 11px; text-align: justify;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style="line-height: normal; text-align: justify;"&gt;&lt;span style="fo