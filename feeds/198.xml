<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Epiloum 개발노트</title>
	<atom:link href="http://dev.epiloum.net/feed" rel="self" type="application/rss+xml" />
	<link>http://dev.epiloum.net</link>
	<description>웹개발자 분투기</description>
	<lastBuildDate>Fri, 22 Mar 2019 13:39:11 +0000</lastBuildDate>
	<language>ko-KR</language>
		<sy:updatePeriod>hourly</sy:updatePeriod>
		<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=4.0</generator>
	<item>
		<title>PHP에서 데이터를 파일로 캐싱(Caching)하기</title>
		<link>http://dev.epiloum.net/1689</link>
		<comments>http://dev.epiloum.net/1689#comments</comments>
		<pubDate>Fri, 22 Mar 2019 13:39:11 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[Cache]]></category>
		<category><![CDATA[Caching]]></category>
		<category><![CDATA[File Cache]]></category>
		<category><![CDATA[Filesystem Functions]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[Serialize]]></category>
		<category><![CDATA[Time to Live]]></category>
		<category><![CDATA[TTL]]></category>
		<category><![CDATA[배열]]></category>
		<category><![CDATA[연관배열]]></category>
		<category><![CDATA[직렬화]]></category>
		<category><![CDATA[캐시]]></category>
		<category><![CDATA[캐싱]]></category>
		<category><![CDATA[파일시스템 함수]]></category>
		<category><![CDATA[파일캐시]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1689</guid>
		<description><![CDATA[성능좋은 인프라와 빠른 속도의 DB Query로 아무리 구성하고자 노력한다 하더라도, 캐싱은 여전히 웹프로그램의 성능을 향상시키기 위한 가장 고전적이면서 가장 가성비 높은 해법입니다. PHP에서는 APC와 같은 모듈을 활용하는 것이 일반적이지만, 특정 웹페이지에서 사용하는 데이터를 핀포인트로 캐싱할 때는 이를 직접 구현해보는 것도 선택가능한 대안입니다. 이번 포스팅에서는 일반적으로 PHP에서 변수에 담긴 데이터를 파일로 캐싱하는 방법을 다양한 예제코드를 통해 설명합니다. 이 과정에서 실무에 적용가능한 수준의 예제코드를 몇 가지 선보이고자 합니다. 마지막 단계에서는 PHP의 파일시스템 함수들을 <a class="more-link" href="http://dev.epiloum.net/1689">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1689/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PHP 예제로 살펴보는 즉시실행함수의 필요성과 구현방법</title>
		<link>http://dev.epiloum.net/1498</link>
		<comments>http://dev.epiloum.net/1498#comments</comments>
		<pubDate>Wed, 06 Feb 2019 07:45:36 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[anonymous functions]]></category>
		<category><![CDATA[data corruption]]></category>
		<category><![CDATA[global variables]]></category>
		<category><![CDATA[IIFE]]></category>
		<category><![CDATA[Immediate Invoked Execution Functions]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[variable name conflicts]]></category>
		<category><![CDATA[데이터 오염]]></category>
		<category><![CDATA[변수명 충돌]]></category>
		<category><![CDATA[익명함수]]></category>
		<category><![CDATA[전역변수]]></category>
		<category><![CDATA[즉시실행함수]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1498</guid>
		<description><![CDATA[즉시실행함수(IIFE, Immediately-Invoked Function Expression)는 소스코드 중간에 익명함수를 실행하여, 임시로 사용할 변수들을 지역변수로 선언하여 사용하는 디자인 패턴을 말합니다. 즉시실행함수가 즐겨 활용되어 온 대표적인 언어는 자바스크립트이지만, 최근에 PHP에서도 7버전에 익명함수가 등장하면서 사용이 가능해졌습니다. 이번 포스팅에서는 먼저 전역변수의 위험성을 살펴봄으로써, 즉시실행함수가 왜 필요한지를 설명합니다. 이어서 자바스크립트와 PHP7에서 작성한 소스코드를 통해 즉시실행함수의 사용방법에 대하여 설명합니다. 마지막으로 즉시실행함수를 사용할 수 없는 PHP5 및 PHP4에서 유사한 효과를 가질 수 있는 소스코드를 소개할 것입니다. &#160; 변수명 충돌의 위험성 자바스크립트와 PHP는 <a class="more-link" href="http://dev.epiloum.net/1498">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1498/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>PHP 소스코드에서 R 스크립트 실행하기</title>
		<link>http://dev.epiloum.net/1641</link>
		<comments>http://dev.epiloum.net/1641#comments</comments>
		<pubDate>Thu, 13 Sep 2018 13:32:02 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Data Mining]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[R]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[R script]]></category>
		<category><![CDATA[실행]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1641</guid>
		<description><![CDATA[데이터와 통계분석에 활용되는 R을 웹 언어에서 실행한다면, 강력한 시너지 효과를 기대할 수 있을 것입니다. 그러나 많은 개발자들의 도전에도 불구하고 이것은 쉽지 만은 않은 과제였는데, 그 이유는 바로 R을 Input File 없이 커맨드라인에서 실행할 수 있는 방법이 녹록치 않았기 때문입니다. 이번 포스팅에서 소개하는 PHP 클래스는, 인자로 받은 R 스크립트를 임시파일로 만들어 쉘 커맨드로 R을 실행한 결과를 반환합니다. 이를 통해서 PHP에서 R 스크립트를 문자열로 만들어 그대로 실행할 수 있습니다. 본 클래스는 리눅스 OS에서 <a class="more-link" href="http://dev.epiloum.net/1641">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1641/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>퀴즈로 풀어보는 CSS z-index 속성의 3가지 포인트</title>
		<link>http://dev.epiloum.net/904</link>
		<comments>http://dev.epiloum.net/904#comments</comments>
		<pubDate>Fri, 27 Oct 2017 23:51:42 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[CSS]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[CSS3]]></category>
		<category><![CDATA[front-end]]></category>
		<category><![CDATA[HTML]]></category>
		<category><![CDATA[HTML5]]></category>
		<category><![CDATA[position]]></category>
		<category><![CDATA[web development]]></category>
		<category><![CDATA[z-index]]></category>
		<category><![CDATA[웹개발]]></category>
		<category><![CDATA[프론트앤드]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=904</guid>
		<description><![CDATA[웹 페이지가 다이나믹해지고 요소들의 배치가 자유로워지면, 때때로 서로의 위치가 겹치는 요소들이 생기기 마련입니다. 이 때 어느 것을 위에 표시할 것인가를 제어하는 CSS 속성이 다름 아닌 z-index입니다. 그만큼 자주 접하게 되는 속성입니다만, 한편으로는 오해하기 쉬운 몇가지 특징을 가진 속성이기도 합니다. 이번 포스팅에서는 z-index에 대한 중요한 포인트를 3가지 퀴즈를 통해 알아봅니다. (이 질문은 제가 신입 개발자들을 교육할 때 실제로 사용하고 있는 질문이기도 합니다.) 이 3가지 질문에 대해 정확하게 답을 하고 원리를 설명하실 수 있다면, <a class="more-link" href="http://dev.epiloum.net/904">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/904/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>코멧(Comet) #3 – Ajax 롱폴링(Ajax Long polling) 채팅방 예제로 배우기</title>
		<link>http://dev.epiloum.net/1453</link>
		<comments>http://dev.epiloum.net/1453#comments</comments>
		<pubDate>Sat, 28 Jan 2017 04:08:19 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[Ajax]]></category>
		<category><![CDATA[Comet]]></category>
		<category><![CDATA[long polling]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[reverse ajax]]></category>
		<category><![CDATA[server push]]></category>
		<category><![CDATA[롱폴링]]></category>
		<category><![CDATA[서버푸시]]></category>
		<category><![CDATA[자바스크립트]]></category>
		<category><![CDATA[채팅방]]></category>
		<category><![CDATA[코멧]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1453</guid>
		<description><![CDATA[코멧을 구현하는 두 번째 방법은 롱폴링(Long Polling)이라고 하는 기법으로, 그 중에서도 금번 포스팅에서는 Ajax를 기초로 한 롱폴링 기법을 소개합니다. 이것은 지난 포스팅에서 소개한 Ajax 폴링 기법에서 일부분을 변형하여서, HTTP 통신이 일어나는 빈도를 줄인 것입니다. Ajax 폴링과 이 기법 사이의 결정적인 차이점은 서버측에서 특정한 상태값이 변하기 전까지는 응답을 미루는 것이라고 할 수 있습니다. 금번 포스팅에서는 지난 포스팅에서 Ajax 폴링으로 구현한 채팅방 예제를 롱폴링으로 수정하여, Ajax 폴링과 대조되는 롱폴링의 작동원리를 살펴볼 것입니다. 따라서 지난 포스팅을 읽어보지 <a class="more-link" href="http://dev.epiloum.net/1453">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1453/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>10분 만에 살펴보는 R 기초문법</title>
		<link>http://dev.epiloum.net/1546</link>
		<comments>http://dev.epiloum.net/1546#comments</comments>
		<pubDate>Wed, 11 May 2016 12:23:13 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Data Mining]]></category>
		<category><![CDATA[R]]></category>
		<category><![CDATA[기초문법]]></category>
		<category><![CDATA[데이터마이닝]]></category>
		<category><![CDATA[통계]]></category>
		<category><![CDATA[튜토리얼]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1546</guid>
		<description><![CDATA[R은 통계적인 계산과 데이터 분석에 특화되어 있는 프로그래밍 언어입니다. 빅데이터의 대두와 함께 주목받아 그 이름이 널리 알려지게 되었지요. 새로운 언어를 공부하는 가장 좋은 방법은 책 한 권을 정독하거나, 혹은 그 언어의 공식 매뉴얼을 앞에서부터 따라가며 익히는 것입니다. 다만 이처럼 정석대로 단계 단계를 짚어가며 익힐 수 있는 여유를 가지지 못한 분들도 계실 것입니다. 이번 포스팅은 기존에 1가지 이상 익숙한 프로그래밍 언어를 가진 분들이 R의 가장 기초적인 부분을 10분 전후의 짧은 시간에 <a class="more-link" href="http://dev.epiloum.net/1546">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1546/feed</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>Epiloum Slider &#8211; 간결한 HTML 마크업을 기반으로 하는 jQuery 애니메이션 슬라이더</title>
		<link>http://dev.epiloum.net/1495</link>
		<comments>http://dev.epiloum.net/1495#comments</comments>
		<pubDate>Mon, 02 May 2016 14:11:25 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[jQuery]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[Animation]]></category>
		<category><![CDATA[HTML]]></category>
		<category><![CDATA[Library]]></category>
		<category><![CDATA[Module]]></category>
		<category><![CDATA[slider]]></category>
		<category><![CDATA[라이브러리]]></category>
		<category><![CDATA[모듈]]></category>
		<category><![CDATA[슬라이더]]></category>
		<category><![CDATA[슬라이드]]></category>
		<category><![CDATA[슬라이드쇼]]></category>
		<category><![CDATA[애니메이션]]></category>
		<category><![CDATA[자바스크립트]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1495</guid>
		<description><![CDATA[이번 포스팅에서는 제가 작성한 jQuery 애니메이션 슬라이더(Slider) 모듈인 &#8220;Epiloum Slider&#8221;를 소개합니다. 웹 상에서 찾을 수 있는 수많은 자바스크립트 또는 jQuery 슬라이더는 필요 이상의 복잡한 HTML 태그 구조를 요구하거나, 사전에 CSS 작업 상당 부분 필요한 경우가 많습니다. 이처럼 애니메이션이라는 UX적인 부분을 위해 마크업을 희생하는 것은 의미론적 마크업의 철학에 위배되는 것이기도 합니다. Epiloum Slider는 그와 같은 상황에 대한 안타까움으로부터 만들어졌습니다. 본 모듈의 가장 큰 특징은 1개의 &#60;ul&#62; 또는 &#60;ol&#62; 태그와, 그 아래에 나열된 <a class="more-link" href="http://dev.epiloum.net/1495">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1495/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Linux에 Django 설치하기</title>
		<link>http://dev.epiloum.net/1440</link>
		<comments>http://dev.epiloum.net/1440#comments</comments>
		<pubDate>Mon, 20 Jul 2015 15:04:24 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Django / Python]]></category>
		<category><![CDATA[Django]]></category>
		<category><![CDATA[Install]]></category>
		<category><![CDATA[Linux]]></category>
		<category><![CDATA[Python]]></category>
		<category><![CDATA[Setup]]></category>
		<category><![CDATA[리눅스]]></category>
		<category><![CDATA[설치]]></category>
		<category><![CDATA[장고]]></category>
		<category><![CDATA[파이썬]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1440</guid>
		<description><![CDATA[Django는 Python을 언어로 사용하는 웹개발 프레임워크입니다. 금번 포스팅에서는 제가 Linux에서 Django를 설치하고, 첫 프로젝트를 생성했던 과정을 소개하고자 합니다. 금번 설치과정을 거친 서버는 운영체제로 CentOS 6.5를 사용하고 있으며, LAMP 환경의 웹서버가 이미 작동하고 있는 서버였음을 먼저 밝힙니다. 아울러 이 글에서 소개하는 Linux 명령어는 모두 root 계정에서 실행되었음을 첨언하여 두고자 합니다. &#160; Step #1. Python 및 setuptools 모듈 설치 yum install python yum install python-setuptools yum install sqlite yum install sqlite-devel Django를 설치하기 위해서는 <a class="more-link" href="http://dev.epiloum.net/1440">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1440/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>코멧(Comet) #2 – Ajax 폴링(Ajax polling) 채팅방 예제로 배우기</title>
		<link>http://dev.epiloum.net/1395</link>
		<comments>http://dev.epiloum.net/1395#comments</comments>
		<pubDate>Sun, 31 May 2015 10:50:19 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[PHP]]></category>
		<category><![CDATA[Web Development]]></category>
		<category><![CDATA[Ajax]]></category>
		<category><![CDATA[ajax polling]]></category>
		<category><![CDATA[ajax 폴링]]></category>
		<category><![CDATA[Comet]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[reverse ajax]]></category>
		<category><![CDATA[server push]]></category>
		<category><![CDATA[서버푸시]]></category>
		<category><![CDATA[자바스크립트]]></category>
		<category><![CDATA[채팅방]]></category>
		<category><![CDATA[코멧]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1395</guid>
		<description><![CDATA[코멧을 구현하는 첫 번째 방법은 Ajax 폴링(Ajax Polling)이라고 하는 기법입니다. 이 기법은 모든 코멧 방법론 중에서 가장 직관적이고 구현이 간단하여, 코멧 방법론에 입문할 때에 처음 만나게 되는 기법입니다. 기본적인 아이디어는 일정시간마다 Ajax 통신을 하여 서버의 상태를 가져오는 것이라고 요약할 수 있습니다. 이 포스팅에서는 자바스크립트와 더불어 PHP, MySQL로 구현한 간단한 채팅방 예제를 통해 Ajax 폴링을 구현하는 방법을 알아봅니다. Ajax 폴링 채팅방 예제코드 (다운로드) 금번에 소개하는 예제는 Ajax 폴링 기법으로 최소한의 기능만을 갖춘 채팅방을 구현한 <a class="more-link" href="http://dev.epiloum.net/1395">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1395/feed</wfw:commentRss>
		<slash:comments>25</slash:comments>
		</item>
		<item>
		<title>시장지배적 기업의 인증은 표준이 된다: 알리바바의 QR코드 투자에 담긴 포석</title>
		<link>http://dev.epiloum.net/1405</link>
		<comments>http://dev.epiloum.net/1405#comments</comments>
		<pubDate>Wed, 27 May 2015 14:37:36 +0000</pubDate>
		<dc:creator><![CDATA[epiloum]]></dc:creator>
				<category><![CDATA[Essay]]></category>
		<category><![CDATA[IT Service]]></category>
		<category><![CDATA[QR Code]]></category>
		<category><![CDATA[QR코드]]></category>
		<category><![CDATA[Varification]]></category>
		<category><![CDATA[인증]]></category>
		<category><![CDATA[표준]]></category>

		<guid isPermaLink="false">http://dev.epiloum.net/?p=1405</guid>
		<description><![CDATA[중국 최대의 전자상거래 기업인 알리바바가 스타트업에 투자해온 것은 어제오늘 일이 아니지만, 이번에 투자를 받은 이스라엘의 스타트업 Visualhead은 많은 의문과 해석들을 낳고 있습니다. Visualhead는 QR코드 리더로 읽을 수 있지만 코드 뒤에 이미지나 동영상 삽입이 가능한 Dotless visual codes 생성기술을 보유한 스타트업입니다. QR코드를 비롯한 O2O(Online To Offlin) 기술은 태생 자체가 과도기적 기술입니다. 이것은 생명력이 어디까지 갈지 알 수 없다는 것을 의미합니다. 여기에 QR코드는 난이도 있는 기술도 아니어서, 이것으로 거액의 투자를 성사시켰다는 뉴스가 쉽게 받아들여지지 <a class="more-link" href="http://dev.epiloum.net/1405">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
		<wfw:commentRss>http://dev.epiloum.net/1405/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
