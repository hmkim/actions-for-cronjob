<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[GONI]]></title>
			<link>https://blog.naver.com/ehdrhs1004</link>
			
				<image>
					<url><![CDATA[https://blogpfthumb-phinf.pstatic.net/MjAxNzExMTdfMjE1/MDAxNTEwOTIwNzAwMzcx.UFtFz1Nvqte8aOlGwOPHym6H8Cqif7lqcW8OobH2fv4g.QrUy1m8WfxyRZ6auf48gYVPYpS6yLz8IXOpH5fjBV3Ig.JPEG.ehdrhs1004/profileImage.jpg?type=m2]]></url>
					<title><![CDATA[GONI]]></title>
					<link>https://blog.naver.com/ehdrhs1004</link>
				</image>
			
			<description><![CDATA[ㅋㅋ]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Tue, 14 May 2019 18:03:30 +0900</pubDate>

			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[[db] type(n)]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221369406472</link>
					<guid>https://blog.naver.com/ehdrhs1004/221369406472</guid>
					<description><![CDATA[http://intomysql.blogspot.com/2010/12/tinyint-smallint-int-bigint.html]]></description>
					<pubDate>Tue, 02 Oct 2018 11:06:46 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Real MySQL]]></category>
					<title><![CDATA[목차]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221336948597</link>
					<guid>https://blog.naver.com/ehdrhs1004/221336948597</guid>
					<description><![CDATA[소개 MySQL 소개 왜 MySQL인가? 설치와 설정 MySQl 다운로드 MySQl 서버 설치 리눅스에 설치 윈도우에 설치(MSI) 서버 설정 설정 파일의 구성 MySQL 시스템 변수의 특징 글로벌 변수와 세션 변수 동적 변수와 저어적 변수 my.cnf 설정 파일 MySQL 서버의 시작과 종료 시작과 종료 서버 연결 테스트 MySQL 복제 구축 설정 준비 복제 계정 준비 데이터 복사 복제 시작 권한 관리 사용자의 식별 권한 예제 데이터 적재 전문 검색을 위한 MySQL 설치 MySQL의 내장 전문 검색 엔진 MySQl 5.0 버전의 트리톤 설치 MySQl 5.1 버전의 mGroonga 설치 아키텍처 MySQL 아키텍처 MySQL의 저너체 구조 MySQL 쓰레딩 구조 메모리 할당 및 사용 구조 플러그인 스.......]]></description>
					<pubDate>Sat, 11 Aug 2018 16:24:02 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Linux]]></category>
					<title><![CDATA[TODO]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221302896474</link>
					<guid>https://blog.naver.com/ehdrhs1004/221302896474</guid>
					<description><![CDATA[실행 권한(리눅스 퍼미션) vim 사용법 명령어(자주 사용하는 것들 + 옵션)]]></description>
					<pubDate>Wed, 20 Jun 2018 13:45:55 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Linux]]></category>
					<title><![CDATA[자주 사용하는 명령어]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221302894725</link>
					<guid>https://blog.naver.com/ehdrhs1004/221302894725</guid>
					<description><![CDATA[권한 확인하기 ls -al 환경변수 설정, 적용디렉토리 &amp; 디렉토리 안에 있는 파일 같이 삭제하기 rm -rf directoryName]]></description>
					<pubDate>Wed, 20 Jun 2018 13:43:43 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[CMD]]></category>
					<title><![CDATA[[CMD] Windows 명령줄 참조 온라인 도움말]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221200892673</link>
					<guid>https://blog.naver.com/ehdrhs1004/221200892673</guid>
					<description><![CDATA[https://technet.microsoft.com/ko-kr/library/cc772390(v=ws.10).aspx]]></description>
					<pubDate>Sun, 04 Feb 2018 16:51:40 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[DB]]></category>
					<title><![CDATA[[MySQL] VARCHAR 들어간 컬럼 메모리]]></title>
					<link>https://blog.naver.com/ehdrhs1004/221020503084</link>
					<guid>https://blog.naver.com/ehdrhs1004/221020503084</guid>
					<description><![CDATA[INT, INT, INT INT, VARCHAR(30), INT]]></description>
					<pubDate>Fri, 02 Jun 2017 23:49:06 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[정도전_...]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220983509689</link>
					<guid>https://blog.naver.com/ehdrhs1004/220983509689</guid>
					<description><![CDATA[이방원 : 어째서 당하고만 계시는겁니까? 이성계 : 무시기라? 이방원 : 아버님의 힘으로 못하실게 뭡니까? 이런 약해빠진 나라따위 능히 무너뜨릴 수 있지 않으십니까? 썩을데로 썩은 나라입니다. 망쪼든 나라란말입니다. 이성계 : 주먹 펍 ~ (돌탑)퍼퍼퍽~~ 이성계 : 무너트린 힘 없어서 참는거 아이다. 무너트리고 나면 다시 쌓아야 하는데 내사 그걸 배워두지 못했다.]]></description>
					<pubDate>Fri, 14 Apr 2017 21:11:34 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Util]]></category>
					<title><![CDATA[procdump]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220981078539</link>
					<guid>https://blog.naver.com/ehdrhs1004/220981078539</guid>
					<description><![CDATA[procdump 서비스는 올라가 있을 때 서버 문제가 생기면(무한루프 or 어디선가 이상이 있는 거 같다) 현재 실행 중인 process dump만들 때 사용 windows7 이상에서는 작업관리자에서 오른쪽버튼 눌러 덤프 만들 수 있다고 함 -ma Write a dump file with all process memory. The default dump format only includes thread and handle information. -s Consecutive seconds before dump is written (default is 10). https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx]]></description>
					<pubDate>Wed, 12 Apr 2017 02:05:07 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[CMD]]></category>
					<title><![CDATA[[CMD] FORFILES]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220958975884</link>
					<guid>https://blog.naver.com/ehdrhs1004/220958975884</guid>
					<description><![CDATA[FORFILES [/P pathname] [/M searchmask] [/S] [/C command] [/D [+ | -] {yyyy-MM-dd | dd}] 자세한 설명은 FORFILES /? 예제 FORFILES /D - 7 /S /M *.log /C "CMD /C DEL /Q"]]></description>
					<pubDate>Wed, 15 Mar 2017 20:10:50 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[DB]]></category>
					<title><![CDATA[[mysql] DATE(날짜)+0]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220958970777</link>
					<guid>https://blog.naver.com/ehdrhs1004/220958970777</guid>
					<description><![CDATA[SELECT DATE(NOW())+0; 20170315 같은 형식으로 리턴해줌 서버에서는 이거를 정수로 받아오면서 비교할 날짜랑 계산하면 끝 DATE(NOW())+15 // 31일이 넘을 경우 41, 32, 59, 99 처럼 정수 더하기 연산됨]]></description>
					<pubDate>Wed, 15 Mar 2017 20:02:43 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[주석 오류]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220955255957</link>
					<guid>https://blog.naver.com/ehdrhs1004/220955255957</guid>
					<description><![CDATA[// [0]TIME [1]CCU [2]CENSUS [3]* [4]CPU [5]DB [6] IDLEST [7]* [8]DBH [9]DBQ [10]DBWAIT [11]* [12]TCPQ [13]UDP1Q [14]UDP2Q [15]NETFAIL [16]* [17]LSTMSG [18]LSTDB [19]* [20] ASYNC [21] * [22]DBHS [23]LOGDBQ [24]* // 포멧 // TIME : %12s 0729 150522 // 07.29. 15:05:22 // CCU : %5s // CENSUS : %7s // FRAME : %10s // world thread run count per 5 sec // DB FINISHED : %12s // 종료된 DB 요청 // IDLEST : %7s // IDLE 스레드 상태 // DBH : %4s // DB Thread Count // DBQ : %5s // DB Queue Count // DBWAIT : %7s // DB Wait Count // LAST NM : %8s // Last Network Message Header Type // LAST DB : %8s // Last DB R.......]]></description>
					<pubDate>Sat, 11 Mar 2017 01:29:54 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[CMD]]></category>
					<title><![CDATA[[cmd] 파일에서 찾는 문자열 출력]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220941957301</link>
					<guid>https://blog.naver.com/ehdrhs1004/220941957301</guid>
					<description><![CDATA[findstr c:/"찾는문자" "찾을 파일 이름" &gt; "출력 할 파일이름.txt" findstr /c:"이름" "log_*.txt" &gt; "이름을 찾았다.txt" // 찾는 문자열이 있는 줄을 출력파일로 복사 // "&gt; 출력파일" 안 적으면 cmd창에 출력]]></description>
					<pubDate>Wed, 22 Feb 2017 16:57:19 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[std::string 클래스 버퍼]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220904079821</link>
					<guid>https://blog.naver.com/ehdrhs1004/220904079821</guid>
					<description><![CDATA[string 클래스 _Buf : 기본 버퍼 _Ptr : 기본 버퍼 사이즈보다 큰 사이즈의 데이터를 저장할 때 새로운 메모리를 할당 후 할당한 메모리의 주소를 저장하는 포인터 string temp; for(int i = 0 ; i &lt; 1000000; i++) { // _Ptr 주소 값을 보면 달라진다. // 즉, 이전에 포인터는 해제하고, 새로운 메모리 공간을 만드는 작업을 하게 된다. // 메모리 할당, 해제 계속 일어남 = 메모리 단편화 = 사용 못하는 메모리 생길 수 있음 temp.append(“a”); }]]></description>
					<pubDate>Fri, 06 Jan 2017 09:54:18 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[visual studio 2015 UTF-8 문자열]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220898515144</link>
					<guid>https://blog.naver.com/ehdrhs1004/220898515144</guid>
					<description><![CDATA[char* utfString = u8"유티에프문자열"; UTF-8 사이즈에 맞게 저장됨.]]></description>
					<pubDate>Fri, 30 Dec 2016 13:37:58 +0900</pubDate>
					<tag><![CDATA[u8,UTF8,리터럴]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[C++11 STL tuple]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220858286538</link>
					<guid>https://blog.naver.com/ehdrhs1004/220858286538</guid>
					<description><![CDATA[std::tuple&lt;bool, string&gt; test = make_tuple(true, “a”); auto testVal = get&lt;0&gt;(teset); auto a = make_tuble(“dfdf”, 1, 1, 1); // std::tuple&lt;string, int, int, int&gt; auto b = get&lt;0&gt;(a); // std::tuple&lt;string, int, int, int&gt;]]></description>
					<pubDate>Thu, 10 Nov 2016 15:37:50 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[const, #define]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220744083340</link>
					<guid>https://blog.naver.com/ehdrhs1004/220744083340</guid>
					<description><![CDATA[namespace::class::func 와 같이 문장이 길어지고 가독성이 떨어질 수 있다면 #define이나 const type 을 사용 const// 메모리 공간 할당, const가 붙었으니까 상수, 값을 바꾸려 하면 에러 const int val = 1; #define// 컴파일 할 때 DEFAULT_DATA_SIZE가 있다면 32로 변환 #define DEFAULT_DATA_SIZE 32 디버깅이 필요한 경우 const 사용 namespace::class::func... 과 같이 긴 문장 문장의 가독성을 높이고 싶다면 #define // type에 대한 가독성 문제나 다른 플랫폼으로 이식 문제가 걱정된다면 #typedef으로]]></description>
					<pubDate>Thu, 23 Jun 2016 17:13:52 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[01_나는 왜 기획자를 그만뒀을까??]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220734513830</link>
					<guid>https://blog.naver.com/ehdrhs1004/220734513830</guid>
					<description><![CDATA[나는 게임공학과에서 기획 공부를 하며 어떻게 해야 기획을 잘 할 수 있을지 기획이라는 분야가 뭔지도 객관적으로 판단할 수 없다고 생각했다. (나는 누군인가?, 여긴 어디인가?) 대학교 졸업 후(3개월 다른 회사에서 일했지만) '엘타임게임즈' 라는 회사에 처음으로 입사해서 객관적이고 올바른 판단을 할 수 있는 생각을 가질 수 있는 능력이 생겼다고 생각한다.(물론 내 능력이 부족하고 상황이 어려워 이런 상황에서도 불필요하고 어리석은 행동을 할 때가 있었다. 하지만 이 때 객관적인 생각을 가질 수 있다는건 분명하다.) 이런 생각을 가질 수 있었던 이유는 나의 사수(PD and 사장)이 있었기에 가능했다.(존경합니다.__) 이런 과정에서.......]]></description>
					<pubDate>Sun, 12 Jun 2016 23:11:20 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[입이 쩍 벌어지는 게임계 대사건 5]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220730725099</link>
					<guid>https://blog.naver.com/ehdrhs1004/220730725099</guid>
					<description><![CDATA[http://m.post.naver.com/viewer/postView.nhn?volumeNo=4304098&amp;memberNo=1076328&amp;mainMenu=GAMEAPP]]></description>
					<pubDate>Wed, 08 Jun 2016 13:44:11 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[git]]></category>
					<title><![CDATA[2016년 6월 1일 오전 10시 26분에 저장한 글입니다.]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220724715395</link>
					<guid>https://blog.naver.com/ehdrhs1004/220724715395</guid>
					<description><![CDATA[https://backlogtool.com/git-guide/kr/]]></description>
					<pubDate>Wed, 01 Jun 2016 10:26:48 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[git]]></category>
					<title><![CDATA[2016년 6월 1일 오전 0시 4분에 저장한 글입니다.]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220724488074</link>
					<guid>https://blog.naver.com/ehdrhs1004/220724488074</guid>
					<description><![CDATA[https://rogerdudler.github.io/git-guide/index.ko.html]]></description>
					<pubDate>Wed, 01 Jun 2016 00:04:25 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[git]]></category>
					<title><![CDATA[사용법]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220724448038</link>
					<guid>https://blog.naver.com/ehdrhs1004/220724448038</guid>
					<description><![CDATA[http://blog.naver.com/mcpelee/220710300178]]></description>
					<pubDate>Tue, 31 May 2016 23:18:49 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[1982년 5월 31일 우리나라 첫 인터넷 구축]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220724370384</link>
					<guid>https://blog.naver.com/ehdrhs1004/220724370384</guid>
					<description><![CDATA[http://blog.naver.com/nvr_design/220718809989]]></description>
					<pubDate>Tue, 31 May 2016 21:52:32 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[git]]></category>
					<title><![CDATA[github 폴더 삭제]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220723548603</link>
					<guid>https://blog.naver.com/ehdrhs1004/220723548603</guid>
					<description><![CDATA[git rm -r --cached 폴더명git commit -m "remove a directory"git push origin master]]></description>
					<pubDate>Tue, 31 May 2016 00:26:10 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[OSI 7계층]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220720582019</link>
					<guid>https://blog.naver.com/ehdrhs1004/220720582019</guid>
					<description><![CDATA[========= OSI 7계층 ========= A:Application, O:OS, H:HW ---------------------- A ----------------------------------------------------------------- Application : 응용프로세스에게 네트워크 접근 수단 제공 이동 패킷 만듬 | 패킷 해석Presentation : 전송 데이터의 구문과 의미에 대한 처리를 담당, 암호화, 암호화도 해주고 | 암호화 풀어주고----------------------------------------------------------------- A, O ----------------------------------------------------------------- Session : 세션의 설정 및 유지, 종료 : SOCKET 어떤 플레이어한테 보낼지 확인해주고 | 누가 보냈는지 확인해보고 SessionManager(push:접속.......]]></description>
					<pubDate>Fri, 27 May 2016 11:47:06 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[2016년 5월 25일 오후 6시 16분에 저장한 글입니다.]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220719139641</link>
					<guid>https://blog.naver.com/ehdrhs1004/220719139641</guid>
					<description><![CDATA[http://www.joinc.co.kr/w/Site/Network_Programing/AdvancedComm/HTTP#s-1]]></description>
					<pubDate>Wed, 25 May 2016 18:16:16 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[C++11]]></category>
					<title><![CDATA[unique_ptr]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220713318972</link>
					<guid>https://blog.naver.com/ehdrhs1004/220713318972</guid>
					<description><![CDATA[unique_ptr로 생성된 객체는 하나의 포인터로만 가리킬 수 있음힙에 생성(동적 할당)소유권이라는 단어로 표현되었음 https://msdn.microsoft.com/ko-kr/library/hh279676.aspx]]></description>
					<pubDate>Wed, 18 May 2016 22:17:08 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[TCP/IP 소켓 프로그래밍]]></category>
					<title><![CDATA[2장 네트워크의 기본 이론]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220713143265</link>
					<guid>https://blog.naver.com/ehdrhs1004/220713143265</guid>
					<description><![CDATA[네트워크와 인터넷 네트워크란 "두 대 이상의 정보 단말기가 연결을 이루기 위해서 쓰이는 기기, 선로 등으로 구성되는 일체의 전송 매채"로 정의 할 수 있다. 인터네트워킹 장치(라우터, 게이트웨이 등)에 의해 두 개 이상 연결된 것을 인터넷(internet)이라고 한다. 네트워크의 물리적 구성 요소 네트워크는 다음과 같은 물리적 구성요소로 이루어져 있다. 이더넷 카드, 허브, 스위치, 라우터, UTP케이블 이 외에도 중계기와 브리지 등이 있을 수 있고 각각의 기능은 아래와 같다. 정보 단말기 네트워크를 사용하는 실질적인 주체로서 다른 말로 호스트(host)라고 부른다. NIC Network Interface Card의 줄임말로 각 단말기에 연결되는데, 유선.......]]></description>
					<pubDate>Wed, 18 May 2016 18:20:26 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[C++11]]></category>
					<title><![CDATA[std::thread]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220708732064</link>
					<guid>https://blog.naver.com/ehdrhs1004/220708732064</guid>
					<description><![CDATA[// 예제void threadFunc1() { cout &lt;&lt; "thread Func1" &lt;&lt; endl; auto num = 10000000000; for (auto i = 0; i &lt; num; i++) { } cout &lt;&lt; "thread Func1 out" &lt;&lt; endl; }void threadFunc2(int arg1, int arg2) { cout &lt;&lt; "thread func2" &lt;&lt; endl; }int threadFunc3(int a1) { cout &lt;&lt; "thread func3" &lt;&lt; endl; cout &lt;&lt; a1 * a1 &lt;&lt; endl; while (true) { } return 0; }int main() {// std::thread 클래스를 사용해 스레드 생성 std::thread t1(threadFunc1); //t1.join(); std::thread t2(threadFunc2, 1, 2); std::thread t4(threadFunc3, 1); t1.join(); // 이 함수를 호출한 스.......]]></description>
					<pubDate>Fri, 13 May 2016 15:15:19 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[윈도우10]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220708244866</link>
					<guid>https://blog.naver.com/ehdrhs1004/220708244866</guid>
					<description><![CDATA[http://it.donga.com/22260/ 윈도우 키 + Tab : 작업 보기 윈도우 키 + Ctrl + D : 새 가상 데스크톱 만들기 윈도우 키 + Ctrl + F4 : 현재 가상 데스크톱 닫기 윈도우 키 + Ctrl + ← 또는 → : 가상 데스크톱 전환하기]]></description>
					<pubDate>Thu, 12 May 2016 23:54:26 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[ioctl약자]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220706656532</link>
					<guid>https://blog.naver.com/ehdrhs1004/220706656532</guid>
					<description><![CDATA[Input Output Control(입출력 제어)https://ko.wikipedia.org/wiki/Ioctl]]></description>
					<pubDate>Wed, 11 May 2016 11:10:37 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[10장 동기 및 비동기 장치 I/O]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220703478005</link>
					<guid>https://blog.naver.com/ehdrhs1004/220703478005</guid>
					<description><![CDATA[확장성 있는 애플리케이션이란 적은 수의 동시 작업을 수행하는 것만큼이나 효율적으로 많은 수의 동시 작업을 처리할 수 있는 애플리케이션을 말한다. 서비스 애플리케이션의 경우 동시 작업이란 예측 불가능한 시점에 들어오는 클라이언트의 요청을 처리하는 것을 의미하므로 이를 위해 어느 정도의 처리 능력이 필요할지 예측할 수가 없다. 이러한 클라이언트 요청은 대부분 디스크와 같은 다른 장치에 대한 부가적인 I/O를 필요로 한다. 마이크로소프트 윈도우는 스레드를 이용하여 작업을 세분화할 수 있는 훌륭한 기능을 제공하고 있다. 각 스레드는 단일의 프로세서에 의해 구동되기 때문에 다수의 프로세서를 가진 머신에서는 여러 개의.......]]></description>
					<pubDate>Sat, 07 May 2016 16:28:49 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[9장 커널 오브젝트를 이용한 스레드 동기화]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220703476467</link>
					<guid>https://blog.naver.com/ehdrhs1004/220703476467</guid>
					<description><![CDATA[유저 모드 동기화의 최대 장점은 빠르다는 것이다. 스레드의 수행 성능이 중요한 경우라면 항상 유저모드 스레드 메커니즘을 가장 먼저 고려해 보아야 한다. 유저 모드 스레드 동기화 메커니즘이 최상의 성능을 제공하기는 하지만 나름대로 한계점이 있으며, 복잡한 작업을 수행하기에는 적절하지 않은 부분이 상당 부분 있는 것도 사실이다. 예를 들어 인터락 계열의 함수들은 단지 하나의 값만을 처리할 수 있으며, 스레드를 대기 상태로 변경하지 못한다. 크리티컬 섹션을 이용하면 스레드를 대기 상태로 변경할 수 있지만, 이 또한 단일 프로세스 내의 스레드들 사이에서만 동기화를 수행할 수 있을 뿐이다. 뿐만 아니라 크리티컬 섹션을 사.......]]></description>
					<pubDate>Sat, 07 May 2016 16:26:20 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[8장 유저 모드에서의 스레드 동기화]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220695896618</link>
					<guid>https://blog.naver.com/ehdrhs1004/220695896618</guid>
					<description><![CDATA[마이크로소프트 윈도우는 모든 스레드가 상호 통신 없이 각자의 작업을 수행할 때 최고의 성능을 발휘한다. 하지만 이와 같이 스레드가 독립적으로 수행되는 경우는 거의 없다. 일반적으로 스레드는 임의의 작업을 수행하기 위해 생성되고, 작업이 완료되면 그 사실을 다른 스레드에 알려줘야 한다. 시스템에서 수행되는 모든 스레드들은 힙, 시리얼 포트, 파일, 윈도우 와 같이 셀 수 없이 많은 종류의 시스템 리소스에 접근하게 된다. 어떤 스레드가 특정 시스템 리소스에 베타적으로 접근하게 되면 동일 리소스를 사용해야 하는 다른 스레드들은 작업을 계속 할 수 없게 된다. 스레드가 수행되는 데 필요한 리소스는 항상 접근이 가능한 것은.......]]></description>
					<pubDate>Thu, 28 Apr 2016 16:34:19 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[C#을 사용하면 잊어버리는?(사용하지 않게 되는) C++문법]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220695680857</link>
					<guid>https://blog.naver.com/ehdrhs1004/220695680857</guid>
					<description><![CDATA[#include C#에서는 절대 나오지 않는다 매크로 #include를 하지 않기 때문에 #pragma once, comment는 당연히 사용하지 않게 된다.(C#에 있는지도 모르것다) C#에서 가끔 #if _DEBUG를 사용하기는 하지만 그 외에 다른 전처리 명령은 사용해본 기억이 없다 소멸자 C#에서도 소멸자를 만들수는 있지만 사용해본 기억이 없다. 그렇기 때문에 C++에 소멸자에 대해서 조금씩 잊어버리게된다. 특히 C++에서 상속을 이용하는 경우에 virtual ~소멸자는 중요한 역할을 하는데 이것마저 기억이 가물가물해짐 delete C++은 동적 할당을 하고 사용하지 않는 메모리는 delete를 해주어야 하지만 C#은 가비지컬렉터가 이 역할을 수행하기 때문에 delete를 하.......]]></description>
					<pubDate>Thu, 28 Apr 2016 12:53:03 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[7장 스레드 스케줄링, 우선순위, 그리고 선호도]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220695027142</link>
					<guid>https://blog.naver.com/ehdrhs1004/220695027142</guid>
					<description><![CDATA[선점형(preemptive) 운영체제는 어떤 스레드가 언제 그리고 얼마만큼 오랫동안 스케줄링될지를 결정하기 위한 알고리즘을 반드시 가지고 있기 마련이다. 이번 장에서는 마이크로소프트 윈도우 비스타가 사용하는 스케줄링 알고리즘에 대해 알아보고자 한다. 윈도우는 매 20밀리초 정도마다 모든 스레드 커널 오브젝트 중 스케줄 가능 상태에 있는 스레드 커널 오브젝트를 검색하고, 이 중 하나를 선택하여 스레드 컨텍스트 구조체 내에 저장된 레지스터 값을 CPU레지스터로 로드한다. 이러한 작업을 컨텍스트 전환(context switch)이라고 한다. 윈도우는 각 스레드들이 얼마나 많이 수행될 수 있는 기회를 부여받았는지에 대한 정보를 유지하고 있.......]]></description>
					<pubDate>Wed, 27 Apr 2016 18:15:57 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[6장 스레드의 기본]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220694056184</link>
					<guid>https://blog.naver.com/ehdrhs1004/220694056184</guid>
					<description><![CDATA[프로세스는 2개의 요소(프로세스 커널오브젝트와 주소 공간)로 구성되어 있는데, 이와 유사하게 스레드도 두 개의 요소로 구성되어 있다. 운영체제가 스레드를 다루기 위해 사용되는 스레드 커널 오브젝트. 스레드 커널 오브젝트는 시스템이 스레드에 대한 통계 정보를 저장하는 공간이기도 하다. 스레드가 코드를 수행할 때 함수의 매개변수와 지역변수를 저장하기 위한 스레드 스택 프로세스는 어떤 것도 수행할 수 없으며 단순히 스레드의 저장소로 볼 수도 있다. 스레드는 항상 프로세스의 컨텍스트 내에 생성되며, 프로세스 안에서만 살아 있을 수 있다. 즉, 스레드는 프로세스의 주소공간 내에 있는 코드를 수행하고 데이터를 다룬다. 따라.......]]></description>
					<pubDate>Tue, 26 Apr 2016 18:25:31 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[4장 프로세스]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220693815666</link>
					<guid>https://blog.naver.com/ehdrhs1004/220693815666</guid>
					<description><![CDATA[이번 장에서는 시스템이 수행 중인 애플리케이션을 어떻게 관리하는지에 대해 알아볼 것이다. 먼저 프로세스란 무엇인지 그리고 프로세스를 관리하기 위해 필요한 프로세스 커널 오브젝트를 시스템이 어떻게 생성하는지를 설명하는 것으로 시작한다. 다음으로, 프로세스 커널 오브젝트를 이용하여 프로세스를 어떻게 사용하는지에 대해서도 알아본다. 다음으로, 프로세스의 다양한 속성과 특성에 대해 알아보고 이러한 속성을 알아내거나 변경할 수 있는 함수에 대해서도 알아볼 것이다. 또한 시스템 내에서 추가적으로 프로세스를 생성하는 방법을 확인해 볼 것이다. 프로세스를 어떻게 종료하는지도 알아본다. 프로세스는 일반적으로 수행중인.......]]></description>
					<pubDate>Tue, 26 Apr 2016 14:28:22 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[회사에서 컴퓨터 부수는 사람은 되지 맙시다 ㅋㅋㅋㅋㅋ]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220693175342</link>
					<guid>https://blog.naver.com/ehdrhs1004/220693175342</guid>
					<description><![CDATA[그냥 사람같지가 않네요 ㅋㅋㅋ아~욕도 사용하지 않는걸 추천합니다 천박해 보입니다 ㅋㅋㅋ]]></description>
					<pubDate>Mon, 25 Apr 2016 20:37:36 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[3장 커널 오브젝트]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220693096865</link>
					<guid>https://blog.naver.com/ehdrhs1004/220693096865</guid>
					<description><![CDATA[이번 장은 커널 오브젝트(kernel object)와 그 핸들(handle)을 다루는 마이크로소프트 윈도우 애플리케이션 프로그래밍 인터페이스(API)에 대한 설명부터 시작한다. 커널 오브젝트란 무엇인가? 윈도우 소프트웨어 개발자는 항시 커널 오브젝트를 생성하고, 열고, 조작하는 등의 작업을 수행한다. 운영체제는 액세스 토큰 오브젝트(access token object), 이벤트 오브젝트(event object), 파일 오브젝트(file object), 파일-매핑 오브젝트(file-mapping object), I/O컴플리션 포트 오브젝트(I/O completion port object), 잡 오브젝트(job object), 메일슬롯 오브젝트(mailslot object), 뮤텍스 오브젝트(mutex object), 파이프 오브젝트(pipe obj.......]]></description>
					<pubDate>Mon, 25 Apr 2016 18:55:21 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[2장 문자와 문자열로 작업하기]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220692891197</link>
					<guid>https://blog.naver.com/ehdrhs1004/220692891197</guid>
					<description><![CDATA[애플리케이션은 다양한 함수를 통해 국가별 특성을 획득할 수 있고, 제어판 설정 정보를 통해 사용자의 기본 설정 값을 확인할 수도 있으며, 애플리케이션별로 서로 다른 폰트를 사용할 수도 있다. 버퍼 오버런(buffer overrun) 에러는 애플리케이션과 운영체제의 보안 취약점을 공격하는 주요 방법이다. 이번 장에서는 C런타임 라이브러리에서 제공하는 새로운 함수에 대해 다루고 있는데, 이 함수를 사용하면 문자열을 다룰 때 발생할 수 있는 버퍼 오버런을 미연에 방지할 수 있다. 유니코드가 아닌 문자를 이용하여 코드를 작성하고 있었다면 유니코드 기반으로 코드를 바꾸는 것이 좋다. 이렇게 함으로써 애플리케이션의 수행성능을 향상시.......]]></description>
					<pubDate>Mon, 25 Apr 2016 15:28:29 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[1장 에러 핸들링]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220692691690</link>
					<guid>https://blog.naver.com/ehdrhs1004/220692691690</guid>
					<description><![CDATA[윈도우 함수를 호출하면 호출된 함수는 먼저 전달된 인자의 유효성을 확인하고 함수의 기능을 수행하려 한다. 만일 전달된 인자가 유효하지 않거나 다른 이유로 인해 해당 기능을 수행할 수 없으면 함수는 실패를 반환한다. [표 1-1]에 대부분의 윈도우 함수가 사용하고 있는 반환 자료형을 나타내었다. 자료형실패했을 때의 값VOID이 함수는 절대로 실패하지 않는다. 아주 적은 수의 윈도우 함수만이 VOID,형의 자료형을 가진다.BOOL함수가 실패하면 0을 반환한다. 성공 시에는 0이 아닌 값을 반환한다. 반환 값을 TRUE와 비교해서는 안된다. 함수의 성공 여부를 확인하기 위해 FALSE인지 아닌지를 비교하는 것이 가장 좋은 방법이다.HANDLE 함.......]]></description>
					<pubDate>Mon, 25 Apr 2016 11:51:41 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Windows VIA]]></category>
					<title><![CDATA[목차]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220690286621</link>
					<guid>https://blog.naver.com/ehdrhs1004/220690286621</guid>
					<description><![CDATA[1부. 준비하기 1장. 에러 핸들링 2장 문자와 문자열로 작업하기 3장 커널 오브젝트 2부.목표 달성 4장 프로세스 5장 잡 6장 스레드의 기본 7장 스레드 스케줄링, 우선순위, 그리고 선호도 8장 유저 모드에서의 스레드 동기화 9장 커널 오브젝트를 이용한 스레드 동기화 10장 동기 및 비동기 장치 I/O 11장 윈도우 스레드 풀 12장 파이버 3부.메모리 관리 13장 윈도우 메모리의 구조 14장 가상 메모리 살펴보기 15장 애플리케이션에서 가상 메모리 사용 방법 16장 스레드 스택 17장 메모리 맵 파일 18장 힙 4부. 다이내믹 링크 라이브러리(DLL) 19장 DLL의 기본 20장 DLL의 고급 기법 21장 스레드 지역 저장소(TLS) 22장 DLL 인젝션과 API 후킹 5부.......]]></description>
					<pubDate>Fri, 22 Apr 2016 11:50:57 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[c++에서는 왜 오버라이딩도 virtual키워드를 쓰는걸까요?]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220688974024</link>
					<guid>https://blog.naver.com/ehdrhs1004/220688974024</guid>
					<description><![CDATA[오버라이딩을 할꺼면 override와 같은 키워드가 더 직관적일텐데 왜 c++에서는 virtual키워드를 통해 오버라이딩을 하는걸까요 ㅡ,.ㅡ;; 누구 스트룹 아저씨와 친한 사람 있으시면 물어봐줄래요??]]></description>
					<pubDate>Wed, 20 Apr 2016 23:24:51 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[5장 I/O 모델]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685883007</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685883007</guid>
					<description><![CDATA[윈속은 I/O를 처리하기 위한 몇 가지 소켓 모드(socket mode)와 소켓 I/O 모델(socket I/O model)을 제공한다. 소켓에서 모델은 응용프로그램에서 I/O를 다루는 방법과 과정을 말하기도 한다. 윈속에는 블로킹(blocking)과 넌블로킹(non-blocking)으로 두 가지 소켓 모드가 있다. Windows 플랫폼은 기본적으로 블로킹과 넌블로킹 모드의 소켓을 지원한다. 하지만 모든 I/O모델이 모든 플랫폼에서 작동하는 것은 아니다. OSBlockingNon-blocking SelectWSAAsync SelectWSAEvent SelectOverlappedCompletion PortWindows CEOOXXXXWindows 95 (Winsock 1)OOOXXXWindows 95 (Winsock 2)OOOOOXWindows 98OOOOOXWindows MeOOOOOXWindows NTOOOOOOWindow.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:27:23 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[4장 윈속에서 지원되는 프로토콜]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685882152</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685882152</guid>
					<description><![CDATA[윈속을 이용하여 여러가지 프로토콜로 통신하기 위해서는 각 프로토콜별로 주소를 지정하는 방법을 알아야 한다. 이번 장에서는 윈속이 지원하는 다른 프로토콜들(IrDA, IPX/SPX, NetBIOS, AppleTalk, ATM)에 대해서 알아보고 주소를 지정하기 위한 기본적인 방법에 대해서 알아본다. 적외선통신(Infrared Sockets) 적외선통신 소켓은 적외선 포트(infrared serial port)를 이용하여 두 대의 PC간 통신이 가능하도록 하는 기술이다. 적외선통신 소켓의 설계는 일반적인 소켓과는 다른데, 그 이유는 적외선 통신 소켓이 포터블 컴퓨터가 사용하는 동적 네트웍을 고려하여 만들어졌기 때문이다. 주소 지정(Addressing) 대부분의 IrDA(Infrared Data.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:26:14 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[3장 Internet Protocol]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685881900</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685881900</guid>
					<description><![CDATA[이번 장에서는 IPv4와 IPv6의 배경지식과 주소 지정 방법(addressing) 그리고 윈속의 스팩 중 IP에 관련된 부분을 알아 볼 것이다. 그리고 마지막으로는 IP의 버전에 관계없이 동작하는 응용프로그램을 만드는 방법을 알아볼 것이다. IPv4 IPv4는 미국방성의 ARPA(U.S. Department of Defense's Advanced Research Project Agency)에 의하여 개발되었다. 개발 초기인 1960년대엔느 실험적인 패킷 스위칭 네트웍(packet switching network)으로 개발되었던 이 무거운 프로토콜이 1970년대 중반에 좀더 향상된 프로토콜로 개발되었고 TCP와 같은 기능을 가진 IPv4로 완성되었다. 주소 체계(Addressing) IPv4에서 컴퓨터의 주소는 IPv4 어드레스(IPv.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:25:57 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[2장 윈속 디자인]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685881561</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685881561</guid>
					<description><![CDATA[이번 장에서는 전체 시스템 구조 속의 윈속의 위치와 윈속 내부에 대해서 알아보게 된다. 또한 프로토콜의 특성과 프로토콜을 나열하는 방법도 알아보게 된다. 또한 socket과 WSASocket을 이용한 소켓 생성의 자세한 부분과 윈속 카탈로그(Winsock catalog)와의 상호작용도 알아보게 된다. 시스템 구조(System Architecture) 시스템 전반에 걸친 구조를 이해하는 것은 윈속 응용프로그램을 제작하는데 있어서 중요하다. 대부분의 윈속 API들은 WINSOCK2.H에 설언되어 있고 WS2_32.DLL에 구현되어 있다. TransmiteFile과 AcceptEx와 같은 마이크로소프트의 윈속 확장 함수들은 MSWSOCK.DLL에 구현되어 있다. 이런 확장 함수들은 스팩의 일부가 아.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:25:29 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[1장 윈속에 대한 소개]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685881301</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685881301</guid>
					<description><![CDATA[윈속은 하나 이상의 응용프로그램들(혹은 프로세스들)이 같은 장치 내에서 혹은 네트웍을 통해서 통신하기 위한 프로그래밍 인터페이스(API)이며 주로 네트웍을 통하여 데이터를 통신하기 위한 목적으로 디자인되었다. 윈속은 TCP/IP나 IPX와 같은 네트웍 프로토콜에 대한 프로그래밍 인터페이스를 제공한다. 윈속의 헤더와 라이브러리 Windows CE를 제외한 모든 윈도우 플랫폼에서 윈속은 윈속1과 윈속2로 프로그래밍이 가능하다. WINSOCK2.H로 프로그래밍을 할 때는 WS2_32.LIB 파일을 링크시켜야 한다. 헤더파일을 include하고 필요한 라이브러리를 링크했다면 윈속을 초기화하기 위한 준비가 끝난 것이다. 윈속 초기화 모든 윈속 응용프로그.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:25:10 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[네트워크프로그래밍윈도우즈]]></category>
					<title><![CDATA[목차]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220685880619</link>
					<guid>https://blog.naver.com/ehdrhs1004/220685880619</guid>
					<description><![CDATA[Chapter 1 윈속에 대한 소개 윈속의 헤더와 라이브러리 윈속 초기화 에러 검출과 처리(Error Checking and Handling) 프로토콜의 주소 지정(Addressing a Protocol) 소켓 생성 연결지향 통신(Connection-Oriented Communication) 기타 다른 API들 Windows CE 결론 Chapter 2 윈속 디자인 시스템 구조(System Architecture) 프로토콜들의 특성 윈속 카탈로그(Winsock Catalog) 결론 Chapter 3 Internet Protocol IPv4 IPv6 IPv6의 관리용 프로토콜들 이름 해석과 주소 변환(Address and Name Resolution) IP 버전에 독립적인 프로그램 만들기 결론 Chapter 4 윈속에서 지원되는 프로토콜들 적외선통신(Infrared Sockets) IPX/SPX NetBIOS AppleTal.......]]></description>
					<pubDate>Sun, 17 Apr 2016 20:24:21 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>ehdrhs1004</author>
					<category><![CDATA[Log]]></category>
					<title><![CDATA[2016년 4월 16일 오후 2시 17분에 저장한 글입니다.]]></title>
					<link>https://blog.naver.com/ehdrhs1004/220684898965</link>
					<guid>https://blog.naver.com/ehdrhs1004/220684898965</guid>
					<description><![CDATA[WSA : Windows Socket Api]]></description>
					<pubDate>Sat, 16 Apr 2016 14:14:13 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
