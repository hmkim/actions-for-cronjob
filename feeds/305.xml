<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pluu Dev</title>
    <description>Android Developer Site</description>
    <link>http://pluu.github.io/</link>
    <atom:link href="http://pluu.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 12 May 2019 11:35:39 +0000</pubDate>
    <lastBuildDate>Sun, 12 May 2019 11:35:39 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Blog: [번역] DroidKaigi 2018 ~ Android 앱 개발에서의 도메인 주도 설계를 하는 이야기</title>
        <description>&lt;p&gt;본 포스팅은 &lt;a href=&quot;http://y-anz-m.blogspot.com/2018/02/android.html&quot;&gt;DroidKaigi 2018 ~ Android アプリの開発でドメイン駆動設計に取り組む話&lt;/a&gt; 을 기본으로 번역하여 작성했습니다&lt;/p&gt;

&lt;p&gt;제 일본어 실력으로 인하여 오역이나 오타가 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;일부 이미지는 이해를 돕고자 한국어로 수정했습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;http://y-anz-m.blogspot.jp/2017/03/droidkaigi-2017_9.html&quot;&gt;지난번&lt;/a&gt;에 이어 연설 원고와 함께 공개합니다.&lt;/p&gt;

&lt;p&gt;(강연에서는 애드립도 있으므로 원고와는 약간 다른 것을 양해 바랍니다)&lt;/p&gt;

&lt;p&gt;추가 : &lt;a href=&quot;http://y-anz-m.blogspot.jp/2017/03/droidkaigi-2017_9.html&quot;&gt;이전의 내용&lt;/a&gt;을 읽지 않은 분은 먼저 이전 내용을 읽어보세요.&lt;/p&gt;

&lt;h3 id=&quot;1p&quot;&gt;1p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-WwHiFW5VUT0/Wn1dhlSd3QI/AAAAAAAAtV0/0lv25kjHKtkFJtz1mD4LIMzyI65vvnyGgCLcBGAs/s320/DroidKaigi2018_2.002.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2p&quot;&gt;2p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-_QX1ax7B3Ko/Wn1d32HUETI/AAAAAAAAtV8/XdCJcTkoCHUTVBFSdIchU5Nhen5FIowrACLcBGAs/s320/DroidKaigi2018_2.003.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이전 복습&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이전 DroidKaigi에서 저는 “도메인 주도 설계이란 무엇인가”라는 이야기를 했습니다.&lt;/p&gt;

&lt;p&gt;사실 이전 CfP를 제출할 시점에서 Android 앱 개발에서의 구현 이야기도 넣을까 했지만, 도메인 주도 설계가 무엇인가를 제대로 설명하는 것만으로도 벅찼습니다.&lt;/p&gt;

&lt;p&gt;이번에는 지난번에 후속편이므로, 간단하게 복습부터 하려 합니다. 이전의 이야기의 완전판은 저의 블로그에 적혀있으므로 꼭 읽어 보시기 바랍니다.&lt;/p&gt;

&lt;h3 id=&quot;3p&quot;&gt;3p&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0216-ddd/DroidKaigi2018_2.004.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이전 설명을 복습하면, 도메인 주도 설계란&lt;/p&gt;

&lt;p&gt;도메인 전문가의 말을 관찰하고 도메인을 구성하는 유비쿼터스 언어를 찾아 유비쿼터스 언어를 사용하여 도메인을 적절하게 반영한 소프트웨어에 도움되는 모델을 만들고, 만든 도메인 모델을 정확하게 표현하도록 코드를 구현하고 이것을 반복해서 도메인 모델과 구현 모두를 세련시키는 설계 방법입니다.&lt;/p&gt;

&lt;h3 id=&quot;4p&quot;&gt;4p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-DK0ao7ndR0U/Wn1d38ifGaI/AAAAAAAAtWA/sXwMzVyiQRQLrEBMB4usyr0lkV084zOnACLcBGAs/s320/DroidKaigi2018_2.005.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전략적 설계 / 전술적 설계&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 주도 설계에서는 실천하기 위한 다양한 방법이 나옵니다. 주로 전략적 설계 및 전술 설계의 두 가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;5p&quot;&gt;5p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-_MS01-DJjWE/Wn1d4n0TWhI/AAAAAAAAtWI/jeiKS-G5NEIZBhEDviqK9RV10YJx3Jv9wCLcBGAs/s320/DroidKaigi2018_2.006.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도메인 모델을 만드는데 도움이 되는 방법이 전략적 설계, 도메인 모델에서 그것을 표현한 구현을 하는데 도움이 방법이 전술적 설계입니다.&lt;/p&gt;

&lt;h3 id=&quot;6p&quot;&gt;6p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-_MS01-DJjWE/Wn1d4n0TWhI/AAAAAAAAtWI/jeiKS-G5NEIZBhEDviqK9RV10YJx3Jv9wCLcBGAs/s320/DroidKaigi2018_2.007.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전략적 설계의 유비쿼터스 언어, Bounded Context, Context Map에 대해서 이전에 이야기했습니다.&lt;/p&gt;

&lt;h3 id=&quot;7p&quot;&gt;7p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-_MS01-DJjWE/Wn1d4n0TWhI/AAAAAAAAtWI/jeiKS-G5NEIZBhEDviqK9RV10YJx3Jv9wCLcBGAs/s320/DroidKaigi2018_2.008.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 전술적 설계를 이야기합니다.&lt;/p&gt;

&lt;h3 id=&quot;8p&quot;&gt;8p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-_MS01-DJjWE/Wn1d4n0TWhI/AAAAAAAAtWI/jeiKS-G5NEIZBhEDviqK9RV10YJx3Jv9wCLcBGAs/s320/DroidKaigi2018_2.009.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도메인 주도 설계에서는 도메인 모델을 그대로 표현하도록 구현합니다.&lt;/p&gt;

&lt;p&gt;궁극적으로는 코드를 읽으면 그 도메인 모델을 알고, 그 도메인 모델을 이해하고 있다면 엔지니어가 아니어도 대략 테스트 코드를 읽을 수 있는 상황입니다.&lt;/p&gt;

&lt;p&gt;그럼 구체적으로 어떻게 하면, 도메인 모델을 그대로 표현한 것을 구현할 수 있느냐는 생각이 드네요.&lt;/p&gt;

&lt;h3 id=&quot;9p&quot;&gt;9p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-aqYG4aXKZrs/Wn1d5xNW_SI/AAAAAAAAtWY/6C7W5fb9pxc-9uGkJxSiTTz8nguZ4GiPQCLcBGAs/s320/DroidKaigi2018_2.010.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전술적 설계&lt;/p&gt;

  &lt;p&gt;“이렇게 구현하면 제대로 도메인 모델을 표현했어”라는 구현 패턴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;10p&quot;&gt;10p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-Do7zBSEajmo/Wn1d6BjcLbI/AAAAAAAAtWc/EYbxb7hV3dUg9cypCsRec2bhPfYfu3KoQCLcBGAs/s320/DroidKaigi2018_2.011.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전술적 설계&lt;/p&gt;

  &lt;p&gt;Value Object, Entity, Domain Service, Domain Event, Application Service, Factory, Repository, …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;전술적 설계로 많은 패턴이 소개되어 있는데, 이것들을 도입하지 않아도 도메인 모델을 잘 표현한 구현을 할 수 있다면, 그것은 제대로 도메인 주도 설계입니다.&lt;/p&gt;

&lt;p&gt;예를 들어 Domain Event는 에릭 에반스의 책이 출판된 후에 추가되었습니다.&lt;/p&gt;

&lt;p&gt;전술적 설계 패턴은 많이 있기 때문에, 모든 Android 앱의 구현에 도움이 되지는 않습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 도메인 주도 설계 구현은 MongoDB와 Spring의 예가 나오는 패턴이 있는데, Android 앱 개발로 대체해서 생각하는 것은 꽤 어렵다.&lt;/p&gt;

&lt;p&gt;따라서, 이 강연에서는 이들을 포괄적으로 소개하진 않습니다.&lt;/p&gt;

&lt;h3 id=&quot;11p&quot;&gt;11p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-poBcN8DTmYs/Wn1d6WS4OKI/AAAAAAAAtWg/pjmlf3ygj7oboLajmExr2yrlPypBlTqyACLcBGAs/s320/DroidKaigi2018_2.012.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 강연에서는&lt;/p&gt;

&lt;h3 id=&quot;12p&quot;&gt;12p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-qEZSY1pIqW4/Wn1d67W5UvI/AAAAAAAAtWk/DDMIUpwDV70uEZcnXz5VdQpVeGFW-2NsACLcBGAs/s320/DroidKaigi2018_2.013.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대상자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오랫동안 개발에서 크고 복잡하게 된 Android 앱에 도메인 주도 설계의 본질을 포함하고 싶지만, 어디서부터 시작하면 좋을지 잘 모르겠다는 사람을 위해서&lt;/p&gt;

&lt;h3 id=&quot;13p&quot;&gt;13p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-SgCIuaPaUx8/Wn1d64DWP_I/AAAAAAAAtWo/01X1N4qf2ekCdlrgCmNnU028f9PV2onVQCLcBGAs/s320/DroidKaigi2018_2.014.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 주도 설계를 염두하고 &lt;strong&gt;기존 Android 앱을 리팩토링&lt;/strong&gt;해서 이것은 좋았다&lt;/p&gt;

  &lt;p&gt;전술적 설계 패턴 &amp;amp; 구체적으로 어떻게 할지의 사례&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;최근 1년 반, 내가 도메인 주도 설계를 염두에 두고, 기존의 Android 앱 구현을 리팩토링해서 좋았다는 전술적 설계 패턴과 어떻게 도입했는지의 사례를 소개합니다.&lt;/p&gt;

&lt;p&gt;새로 만들 때의 이야기는 아닙니다.&lt;/p&gt;

&lt;p&gt;지금까지 5개 이상의 앱에서 도메인 주도 설계를 어떻게 활용할지 시행착오를 거쳐 왔습니다.&lt;/p&gt;

&lt;p&gt;복잡하게 얽힌 앱의 코드를 조금씩 풀고 UI에 숨겨져 있던 도메인 모델을 구현으로 어떻게 표현했는지 이야기입니다.&lt;/p&gt;

&lt;h3 id=&quot;14p&quot;&gt;14p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-p1tCHYC8qxw/Wn1d7LBM86I/AAAAAAAAtWs/hPh1s682QckKmJkWYWE0_0bIYGjLrCiuwCLcBGAs/s320/DroidKaigi2018_2.015.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전제 상황&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Android 앱 개발&lt;/li&gt;
    &lt;li&gt;릴리즈 후 1년 이상 지속적으로 개발&lt;/li&gt;
    &lt;li&gt;마스터 데이터는 서버에 있고, 앱은 서버와 API를 경유해서 주고받음&lt;/li&gt;
    &lt;li&gt;복수 인원으로 개발&lt;/li&gt;
    &lt;li&gt;서버 측은 다른 팀&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;좀 더 전제 조건 상황을 이야기하겠습니다.&lt;/p&gt;

&lt;p&gt;이런 방법이 좋았어라고 하면 무조건 모두 적용할 수 있는 것은 아닙니다. 어떤 상황일 때 좋았는지를 정해 두지 않으면 서로 불행해집니다.&lt;/p&gt;

&lt;p&gt;특히 도메인 주도 설계는 다양한 소프트웨어 개발에서 사용되고 있기 때문에, 동일한 전술적 설계 패턴이라도 해당 도메인뿐만 아니라 플랫폼 및 프레임워크에서 최적의 구현이 다른 것입니다.&lt;/p&gt;

&lt;p&gt;이 강연에서 소개하는 구현 예는 다음의 상황을 전제로 하고 있습니다.&lt;/p&gt;

&lt;p&gt;먼저 Android 앱 개발에 대한 이야기입니다. iOS 앱과 서버측 개발에는 참고가 되지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음으로 적어도 1년 이상 지속적으로 개발하고 있는 앱을 전제로 하고 있습니다.&lt;/p&gt;

&lt;p&gt;이것은 ‘‘어느 정도 모델다운 것이 구성원의 공감대를 가지고, 코드에도 모델이 있는데, 도메인 모델로서 코드에 잘 표현되어 있지 않다” 라는 상황이 되기 위해서는 1년 정도 필요하다고 생각했기 때문입니다. 실제로는 더 기간이 지난 앱을 담당하고 있습니다.&lt;/p&gt;

&lt;p&gt;그리고 중요한 전제 조건이 서버와 API를 통해 상호 작용하는 일반적인 클라이언트 앱이라는 점입니다. 게임 앱 등에는 그다지 참고가 되지않을지도 모릅니다.&lt;/p&gt;

&lt;p&gt;서버 측이 다른 팀이라는 것은 지난번 이야기한 Bounded Context에 관련된 부분입니다. 서버 및 앱에서 다른 Bounded Context가 되어있는 상황입니다.&lt;/p&gt;

&lt;p&gt;그럼, 즉시 본론으로 들어갑시다.&lt;/p&gt;

&lt;h3 id=&quot;15p&quot;&gt;15p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-hcDg8_z1qMg/Wn1d7rJ_VqI/AAAAAAAAtWw/3F5CBTxzXLEljQQLz_KG83ksRiflpwBfgCLcBGAs/s320/DroidKaigi2018_2.016.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인을 분리한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;첫 번째 전술적 설계 패턴은 “도메인 분리”입니다.&lt;/p&gt;

&lt;p&gt;이전의 이야기에서 “도메인 분리”한다는 것은&lt;/p&gt;

&lt;h3 id=&quot;16p&quot;&gt;16p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-gRHowVqFg0Q/Wn1d76WTokI/AAAAAAAAtW0/KUJfNwjzbdw3zCUaFqJbu7ebd_7PuuMQwCLcBGAs/s320/DroidKaigi2018_2.017.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;비즈니스 로직을 도메인 모델로 분리한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“비즈니스 로직을 도메인 모델로 분리한다”라고 이야기했습니다.&lt;/p&gt;

&lt;h3 id=&quot;17p&quot;&gt;17p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-GC998NenD3E/Wn1d8CfT_OI/AAAAAAAAtW4/bUpkTRQ3dYkNnRuOCgSIKsGBD4Ubzra2wCLcBGAs/s320/DroidKaigi2018_2.018.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;왜 분리하는가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책에는 다음과 같이 적혀있습니다.&lt;/p&gt;

&lt;h3 id=&quot;18p&quot;&gt;18p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-ldEwY2mQyI4/Wn1d8yaMZFI/AAAAAAAAtW8/SlvgqmQ0KjAm_qLZozJ2x4Z4KzEm01RHACLcBGAs/s320/DroidKaigi2018_2.019.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“도메인 로직이 프로그램외의 관심사가 섞여있으면, &lt;strong&gt;설계와 구현을 일치시키는&lt;/strong&gt; 것이 현실적이지 않다”&lt;/p&gt;

&lt;p&gt;여기에 도메인 로직은 도메인 모델에 속하는 로직입니다. 도메인 모델에 대한 로직, 도메인이 가지고 있는 로직이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 도메인 모델에 속하는 로직이 UI에 쓰여있으며 도메인 모델을 그대로 표현해 구현할 수 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;19p&quot;&gt;19p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-TX_OQ2BV83Y/Wn1d9RwWbSI/AAAAAAAAtXA/lxX8Q2OVQvoiZ-Amfno6yLZz7It8-sJFwCLcBGAs/s320/DroidKaigi2018_2.020.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 분리하는가?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설계와 구현을 일치시키기 위해 분리한다는 것을 알 수 있었습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 다음은 어떻게 분리할 것인가입니다.&lt;/p&gt;

&lt;p&gt;책에서는 다음과 같이 적혀 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;20p&quot;&gt;20p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-QjwcdfxYg6U/Wn1d9YMvvRI/AAAAAAAAtXE/NnqBuu6a07IMxPbLUpLY9A3xYA1KkFVqQCLcBGAs/s320/DroidKaigi2018_2.021.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 레이어를 분리한 상태를 유지할 수 있다면, &lt;strong&gt;어떤 방법이라도 괜찮다&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;21p&quot;&gt;21p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-GoEch6u1AI8/Wn1d9jCZ7sI/AAAAAAAAtXI/V5QgQiW8vpMNZVk7lGDhTns75NSf6Xi8ACLcBGAs/s320/DroidKaigi2018_2.022.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“DDD의 큰 이점의 하나가 &lt;strong&gt;특정 아키텍쳐에 의존하지 않는다&lt;/strong&gt;라는 것이다”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문장은 이전에도 소개했습니다.&lt;/p&gt;

&lt;h3 id=&quot;22p&quot;&gt;22p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-D3viE7yGWs0/Wn1d-PgBsXI/AAAAAAAAtXM/A6vbxZcQuEABMH9ucWDl-7KsFSBcNDbxwCLcBGAs/s320/DroidKaigi2018_2.023.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;방법은 상관없다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉 도메인을 분리하는 방법은 상관없다는 것입니다.&lt;/p&gt;

&lt;p&gt;원하는 방식으로 하면 됩니다. 그래서 지난번에는 구체적인 방법은 소개하지 않았습니다.&lt;/p&gt;

&lt;p&gt;에릭 에반스의 도메인 주도 설계를 읽은 분이라면, 그럼 저건 뭐야, 라고 생각할지도 모릅니다.&lt;/p&gt;

&lt;h3 id=&quot;23p&quot;&gt;23p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-CBAHZ58BOIA/Wn1d-YDuTcI/AAAAAAAAtXQ/-AeLZ-n-IMcsjdjOX0qPLj4ffkzBDapHgCLcBGAs/s320/DroidKaigi2018_2.024.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Layered Architecture&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇습니다. Layered Architecture입니다&lt;/p&gt;

&lt;h3 id=&quot;24p&quot;&gt;24p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-g7n3cW7sGss/Wn1d-V4C9WI/AAAAAAAAtXU/v2bKmzDi9scxE-KljschGHQpobUsHk4zACLcBGAs/s320/DroidKaigi2018_2.025.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;왜 에릭 에반스의 도메인 주도 설계에서는 Layered Architecture가 소개되었는가&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;방법은 상관없다고 말하는데 소개하고 있으니 그 이유는 간단합니다.&lt;/p&gt;

&lt;h3 id=&quot;25p&quot;&gt;25p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-nMqtHRrbeVQ/Wn1d-4-lX8I/AAAAAAAAtXY/i-5gyN2tQ1QH1LKWg8NsAy9A5ZPofDHrQCLcBGAs/s320/DroidKaigi2018_2.026.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 할지 잘 모르겠다는 사람도 있기 때문에 도메인을 분리할 수 있는 예로서 Layered Architecture가 소개되었다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;단순히 예입니다.&lt;/p&gt;

&lt;p&gt;갑자기 도메인을 분리하라고 말해도, 구체적인 예가 없으면 이해하기 어렵습니다.&lt;/p&gt;

&lt;p&gt;즉, 도메인을 분리할 수 있을 것 같은 설계로 이런 것이 있다는 예로서 Layered Architecture가 소개되고 있다는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;26p&quot;&gt;26p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-6YnIUPnnMRA/Wn1d_CXwFGI/AAAAAAAAtXc/hS714cYyydsccKT0GHipKYWqphXf_zfNQCLcBGAs/s320/DroidKaigi2018_2.027.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;목적은&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;도메인을 분리한다&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;방법은 상관없다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;어디까지나 목적은 도메인을 분리하는 것입니다. 그것이 가능하면 어떤 방법이라도 상관없다.
하지만 방법은 다음과 같이 적혀 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;27p&quot;&gt;27p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-9vyv7XN81xE/Wn1d_W0wIxI/AAAAAAAAtXg/qT4dWPmTNMw0hANVJ4KFv6fEQp4xWkShwCLcBGAs/s320/DroidKaigi2018_2.028.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아키텍쳐가 &lt;strong&gt;도메인에 관련하는 코드를 분리&lt;/strong&gt;해서 응축도가 높은 도메인 설계가 &lt;strong&gt;시스템의 다른 부분과 느슨한 결합&lt;/strong&gt;이 되어있다면 그 아키텍쳐는 아마도 도메인 주도 설계를 유지할 수 있을 터이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;단순히 두는 곳을 나누면 된다는 것은 아니고 다른 부분과 느슨한 결합할 수 있게 할 필요가 있다는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;28p&quot;&gt;28p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-CvFuuzlyPE4/Wn1d_71YGnI/AAAAAAAAtXk/GT5sAV2oZ_YadXRqrS7heuy5Bnzvl35sACLcBGAs/s320/DroidKaigi2018_2.029.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;목적은&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;도메인을 분리한다&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;시스템의 다른 부분과 느슨한 결합할 수 있는 방법으로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정리하면, 시스템의 다른 부분과 느슨한 결합할 수 있는 방법으로 도메인을 격리하는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;29p&quot;&gt;29p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-ze5N7iFPun8/Wn1eALcX7YI/AAAAAAAAtXo/sWmmRBtF56sep7FtW_-eib08uGlKVO2qQCLcBGAs/s320/DroidKaigi2018_2.030.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android 앱에서 도메인을 분리하고 싶다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Android 앱에서도 도메인을 격리하고 싶어졌습니다.&lt;/p&gt;

&lt;h3 id=&quot;30p&quot;&gt;30p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-vATlMH2KGZ8/Wn1eAGFbH9I/AAAAAAAAtXs/1l4fDyjuSf0Ov3-mQrwpgSqFiZJw3szrQCLcBGAs/s320/DroidKaigi2018_2.031.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;앱 개발은 똑똑한 UI가 되기 쉽다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이전에 이야기했지만, 우리는 UI에 도메인의 개념과 지식, 비즈니스 로직을 담게 됩니다.&lt;/p&gt;

&lt;p&gt;똑똑한 UI에서 벗어나기 위해서 꼭 도메인을 분리하고 싶습니다&lt;/p&gt;

&lt;h3 id=&quot;31p&quot;&gt;31p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-NRgMfxhyrq0/Wn1eAURZAEI/AAAAAAAAtXw/naKjj9KOzD4nWUXriQ8kPAygiyVV8XGxwCLcBGAs/s320/DroidKaigi2018_2.032.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 분리할까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇게 되면 문제는 어떻게 분리하는가? 입니다&lt;/p&gt;

&lt;h3 id=&quot;32p&quot;&gt;32p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-_n0ZugCb7KY/Wn1eA87tWlI/AAAAAAAAtX0/jYA3p16op2EmpDG3NoMwhX8D7UmsvUI4QCLcBGAs/s320/DroidKaigi2018_2.033.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;UI는 도메인을 알지만, 도메인은 UI를 모르게 하고 싶다
      &lt;ul&gt;
        &lt;li&gt;UI가 도메인에 의존&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;의존 방향을 강제하고 싶다
      &lt;ul&gt;
        &lt;li&gt;주의할 기준이라면 모르도록 하는 것&lt;/li&gt;
        &lt;li&gt;컴파일 에러로 강제&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;하고 싶은 것은,&lt;/p&gt;

&lt;p&gt;UI는 도메인을 알고 있지만, 도메인은 UI를 모르게 하고 싶은 것,&lt;/p&gt;

&lt;p&gt;도메인과 다른 부분을 느슨하게 하고 싶은 것,&lt;/p&gt;

&lt;p&gt;그리고 그것을 강제하고자 하는 것입니다.&lt;/p&gt;

&lt;p&gt;단순히 패키지를 나누는 것만 아니라 도메인에서 UI의 클래스를 보려고 하면 보입니다.&lt;/p&gt;

&lt;p&gt;보지 않도록 조심하기 위해 모르게 합니다. 멤버가 바뀌었을 때 뿐만 아니라 릴리즈에 맞추기 위해서 이번 만큼은 특별히 같은 것을 쉽게 상상할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;33p&quot;&gt;33p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-K7Fy_GFEXhU/Wn1eBPH5F9I/AAAAAAAAtX4/BKkL8uJaqlwZIVNjKhftUNFjGtZWhSDIQCLcBGAs/s320/DroidKaigi2018_2.034.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인을 별도 모듈로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 도메인용으로 별도 모듈을 만들기로 했습니다.&lt;/p&gt;

&lt;p&gt;이 모듈은 gradle 모듈입니다&lt;/p&gt;

&lt;h3 id=&quot;34p&quot;&gt;34p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-j4arwPARvxI/Wn1eBRlUvUI/AAAAAAAAtX8/CgmMMJgl9yszXhLU2gpl_I0JT0WreX0qACLcBGAs/s320/DroidKaigi2018_2.035.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;별도 모듈로 하면&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;도메인이 UI를 알지 못하도록 강제할 수 있다&lt;/li&gt;
    &lt;li&gt;단순한 로직 부분이므로 테스트를 적기 쉬워진다&lt;/li&gt;
    &lt;li&gt;도메인 부분의 동작을 유지한 채 UI만 변경할 수 있다&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;이러한 구성으로 하면 도메인이 UI를 모르게 하도록 강제할 수 있으며, 순수한 로직 부분만으로 되기 때문에 테스트 쓰기가 쉽습니다.&lt;/p&gt;

&lt;p&gt;또한 UI를 변경해도 도메인 부분에 변경이 없으므로, 그 부분의 작동을 담보할 수 있으며, 도메인 모듈을 다시 빌드하지 않기 때문에 조금 빌드가 빨라집니다.&lt;/p&gt;

&lt;h3 id=&quot;35p--37p&quot;&gt;35p ~ 37p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-6h2H5PXzzIY/Wn1eCS3YYGI/AAAAAAAAtYI/GXRxFNEGB3wdY2pwXs69gMyBjsZMdrEiQCLcBGAs/s320/DroidKaigi2018_2.038.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;도메인을 분리한다 → domain module&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;도메인 모델을 찾아서(?) 계속 넣는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼, 도메인 모델이 위치할 것이 결정되었습니다.&lt;/p&gt;

&lt;p&gt;그리고 여기에 도메인 모델을 넣어갑니다만,&lt;/p&gt;

&lt;p&gt;무엇을 넣으면 좋을지 잘 모르겠다고 생각이 들지 않나요?&lt;/p&gt;

&lt;p&gt;아니, 넣는 것은 도메인 모델이라는 것은 알고 있어요.&lt;/p&gt;

&lt;p&gt;모르는 것은 자신의 코드 중에서 어느 것이 도메인 모델이어야 하는지, 어디에서부터 찾아가면 좋을지 …&lt;/p&gt;

&lt;p&gt;그래서 도움이 되는 것이 다음의 전술적 설계 패턴 “Value Object”입니다.&lt;/p&gt;

&lt;h3 id=&quot;38p&quot;&gt;38p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-bwenKZAgAKc/Wn1eCuBtV1I/AAAAAAAAtYM/q-Svdh_agbwJ3mOKsh10sOBKw1TJRptlwCLcBGAs/s320/DroidKaigi2018_2.039.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Value Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 도메인 주도 설계 책에서 Value Object에 대해 뭐라 하는지 살펴보자.&lt;/p&gt;

&lt;h3 id=&quot;39p&quot;&gt;39p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-qzIg8ObovSA/Wn1eC5bxYaI/AAAAAAAAtYQ/CONHnvsFj6IQeL0siZjFSrUgrsAH2qJtgCLcBGAs/s320/DroidKaigi2018_2.040.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“어느 Object가 도메인의 기술적인 측면을 표현하고 개념적인 동일성이 없는 경우, 그러한 Object는 Value Object로 불린다.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;개념적인 동일성을 가지지 않는다는 것은 고유하게 식별할 필요가 없고, 구별할 필요가 없다는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;40p&quot;&gt;40p&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0216-ddd/DroidKaigi2018_2.041.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 색상은 Value Object의 하나입니다.
같은 색깔을 가진 Color 객체를 구별할 필요가 없겠지요.&lt;/p&gt;

&lt;p&gt;도메인 모델 중 일부는 이러한 “무엇인가? 만 문제가 되고 누구인지 어떤 것이든 상관없는 요소”가 나옵니다.
이러한 Value Object로 구현하는 것으로 도메인 모델을 표현한 구현이 됩니다.&lt;/p&gt;

&lt;p&gt;Value Object의 다른 면도 보시죠.&lt;/p&gt;

&lt;h3 id=&quot;41p&quot;&gt;41p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-PSsx0GO42jQ/Wn1eDSCmQNI/AAAAAAAAtYY/hH32bVUU88Ax4FSU8YgTZim_kNJmFwP-ACLcBGAs/s320/DroidKaigi2018_2.042.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Value Object를 &lt;strong&gt;불변&lt;/strong&gt;으로 다루는 것”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 주도 설계에서는 Value Object를 불변으로 권장합니다.&lt;/p&gt;

&lt;p&gt;불변이라면 자유롭게 복사 및 공유할 수 있고 여러 스레드에서 안전하게 사용할 수 있습니다. 또한 인수 또는 반환 값으로 다른 객체에 전달해도 그곳에서 변경되지 않기 때문에 설계 단순화에 도움이 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;42p&quot;&gt;42p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-TtBKw3sX5W0/Wn1eD5ErbeI/AAAAAAAAtYc/xRuzaWaYoXoLrUPST7O0WtwEtuzANWWWQCLcBGAs/s320/DroidKaigi2018_2.043.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Color가 불변이 아니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예를 들어 Color 객체라면 이처럼 내부적으로 유지하는 색상 값을 조정하는 것은 추천할 수 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;43p&quot;&gt;43p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-pKLlAVUQjRY/Wn1eEEibeGI/AAAAAAAAtYg/tirIUfw4OmMW39Hun59QCOGvi8NQKboQQCLcBGAs/s1600/DroidKaigi2018_2.044.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Color는 불변이므로 변경할 수 있다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이와 같이 Color 객체는 불변이고 색 변경 시에는 Color 객체 자체를 교체해야 합니다.&lt;/p&gt;

&lt;p&gt;이 말을 듣고 왠지 들어 본 적이 있다고 생각하신 분들이 계실거라고 생각합니다. Immutability 이야기는 Effective Java에서도 소개되고 있습니다.&lt;/p&gt;

&lt;p&gt;또 다른 부분도 보도록 하죠.&lt;/p&gt;

&lt;h3 id=&quot;44p&quot;&gt;44p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-1bk87dl2yf4/Wn1eEWk-VgI/AAAAAAAAtYk/8epRAnDtdZc9cRmsrY4tigReFFhAJqKvwCLcBGAs/s320/DroidKaigi2018_2.045.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Value Object를 구성하는 속성은 &lt;strong&gt;개념적인 통일체&lt;/strong&gt;를 형성해야 한다”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;개념적인 통일체 … 좀 어렵네요.&lt;/p&gt;

&lt;h3 id=&quot;45p&quot;&gt;45p&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0216-ddd/DroidKaigi2018_2.046.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 사용자에 연결된 정보로 ID와 이름 외에 우편 번호, 도시, 나머지 주소가 있다고 합니다.&lt;/p&gt;

&lt;p&gt;이때 우편 번호, 도시, 나머지 주소는 사용자의 별도 속성이 아닌 주소는 통일체를 형성하는 속성입니다.&lt;/p&gt;

&lt;p&gt;따라서 이 3가지로 형성되는 주소라는 Value Object를 제공하고 사용자는 주소를 갖도록 합니다.&lt;/p&gt;

&lt;h3 id=&quot;46p&quot;&gt;46p&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0216-ddd/DroidKaigi2018_2.047.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Value Object는 도메인 주도 설계에서 도메인 모델을 구성하는 기본 요소입니다. 엔티티와 도메인 서비스 등 다른 전술적 설계 패턴은 모두 Value Object를 이용합니다.&lt;/p&gt;

&lt;p&gt;즉 Value Object가 되는 도메인 모델을 찾는데서 시작하는 것이 최선이라는 것입니다.&lt;/p&gt;

&lt;p&gt;그렇게 말해도 Color는 Android 프레임워크에 있고, Value Object로 할만한 것을 찾을 수 있을까?&lt;/p&gt;

&lt;p&gt;그런 당신을 위해 이번에는 Android 앱 개발에 Value Object로 모델링한 예를 많이 준비했습니다.&lt;/p&gt;

&lt;h3 id=&quot;47p&quot;&gt;47p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-52fOavtqFII/Wn1eFHBOaaI/AAAAAAAAtYw/db5kWp3QxnUQXVpPeeYw4VEoErOoV016wCLcBGAs/s320/DroidKaigi2018_2.048.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android 앱에서 Value Object를 구현한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예를 소개하기 전에, Android 앱에서 Value Object를 어떻게 구현할까요&lt;/p&gt;

&lt;h3 id=&quot;48p--49p&quot;&gt;48p ~ 49P&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-Td4Lf5DEdvU/Wn1eFsobniI/AAAAAAAAtY4/Q1IvLg3WENkAZH8nCj_AkyAUdf-gm5nxwCLcBGAs/s320/DroidKaigi2018_2.050.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Value Object란&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;상태를 불변으로 유지&lt;/li&gt;
    &lt;li&gt;값이 같은지 아닌지 비교 가능&lt;/li&gt;
    &lt;li&gt;전체를 완전히 대체 가능&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;→ Kotlin 이라면 data class + val property가 최적&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구현 요구 사항이다&lt;/p&gt;

&lt;p&gt;상태를 불변으로 유지, 즉 불변이 가능&lt;/p&gt;

&lt;p&gt;값이 같은지 비교 가능&lt;/p&gt;

&lt;p&gt;전체를 완전히 대체 가능&lt;/p&gt;

&lt;p&gt;에 주목하면,&lt;/p&gt;

&lt;p&gt;Kotlin의 data class 가 좋습니다. 불변 객체로 하고 싶기 때문에 속성은 val 이죠.&lt;/p&gt;

&lt;p&gt;Java라면 필드를 모두 final로 정의 equals()과 hashCode()를 override하거나 AutoValue 등의 라이브러리를 사용하는 방법도 있습니다. 하지만 이를 계기로 Kotlin를 도입해 보면 어떻습니까.&lt;/p&gt;

&lt;h3 id=&quot;50p&quot;&gt;50p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-0KXyO_zlvhM/Wn1eGF2n5zI/AAAAAAAAtY8/4wo8G7VgucoBhz_ijot1W93UacIZvI4XACLcBGAs/s320/DroidKaigi2018_2.051.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Android 앱에서 Value Object를 찾자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 Android 앱에서 Value Object를 찾아봅시다&lt;/p&gt;

&lt;h3 id=&quot;51p&quot;&gt;51p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-fN3E1YlcAUQ/Wn1eGXL8WJI/AAAAAAAAtZA/IEfPUWocbfI5ms8o9IonAG-tEtN_hzsKQCLcBGAs/s320/DroidKaigi2018_2.052.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ID는 Value Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;52p--53p&quot;&gt;52p ~ 53p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-pSPURq1eVYg/Wn1eG3pUpuI/AAAAAAAAtZI/94P_XV0m-SwV9QXg-rQusx2gvvwFBrO5QCLcBGAs/s320/DroidKaigi2018_2.054.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ID를 문자열인 채로 다루지 않나요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UserId, ItemId, ProductId, OrderId 등 앱에서 하나 정도 ID를 다루고 있습니다.&lt;/p&gt;

&lt;p&gt;ID를 문자열로 처리하고 있지 않습니까? ID를 Value Object로 하면 어떻게 될지 첫 번째 예를 살펴봅시다&lt;/p&gt;

&lt;h3 id=&quot;54p&quot;&gt;54p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-0wXnpVi14Mg/Wn1eHFGPz0I/AAAAAAAAtZM/Hs1Y_0k3gdkKpmxNkcp8YsxGLG3bSYepQCLcBGAs/s320/DroidKaigi2018_2.055.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예시 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;55p--58p&quot;&gt;55p ~ 58p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-TOPPJ8OZNI4/Wn1eIc2yghI/AAAAAAAAtZc/fue_HkqKufYGBFpcaV2TBqc6jwKmwyYSgCLcBGAs/s1600/DroidKaigi2018_2.059.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;userId는 어떻게 넘기면 좋을까요?&lt;/p&gt;

  &lt;p&gt;Profile Class가 가지는 id는 여기에 넘겨도 괜찮던가?&lt;/p&gt;

  &lt;p&gt;빈 문자열을 던지면 어떻게 되지? 호출 전에 매번 체크해?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용자 ID에서 팔로워 목록을 검색하는 API입니다.&lt;/p&gt;

&lt;p&gt;팔로워 목록 화면을 만들 때, 이 API를 호출 쪽도 호출되는 쪽도 같은 사람이 구현하면 무엇을 건네면 좋을지 알고 있기 때문에 String 이어도 특별히 문제없이 구현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;나중에 다른 사람이 다른 곳에서 이 API를 호출하거나 기능을 변경하면 다음과 같은 문제가 나옵니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;userId는 어디에 있는 id이지?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Profile 클래스가 가지고 있는 id는 여기에 전달해도 괜찮던가?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;빈 문자열은 안되죠? 호출하기 전에 확인해야? 
userId가 빈 문자열일리가 없지만 그래도 Profile이 가지고 있는 id에 빈 문자열이 들어가지 않는다는 것은 다른 부분을 읽지 않으면 보장할 수 없다 …&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;59p&quot;&gt;59p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-Qu-2RG0fu5k/Wn1eIqNN0zI/AAAAAAAAtZg/1xsTx3clzVM_9E_-eIfPjnrJepR2PCw7gCLcBGAs/s1600/DroidKaigi2018_2.060.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;String에서 UserId로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그래서 UserId를 Value Object로 합시다.&lt;/p&gt;

&lt;p&gt;UserId의 인스턴스가 있다면 그것이 가지는 문자는 절대로 빈 문자열일리가 없다고 보장할 수 있는 상태로 합니다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 사용 측은 안심하고 getFollower() API를 호출할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Profile 클래스가 가지고 있는 id를 UserId 형이라면 이 API에 전달해도 되는 ID 인 것이 분명합니다.&lt;/p&gt;

&lt;p&gt;또한 String으로부터 UserId 형으로 변경하는 것으로 어디에서 이용되는지를 정적으로 분석할 수 있고, 리팩토링시의 영향 범위도 조사도 쉬워집니다.&lt;/p&gt;

&lt;h3 id=&quot;60p--62p&quot;&gt;60p ~ 62p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-3Xa4xLLG6kM/Wn1eJaROrSI/AAAAAAAAtZs/u_VZTfqKRiwvzgenNIPKJ6gTXf7p4I5ygCLcBGAs/s320/DroidKaigi2018_2.063.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;같은 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Value Object로 ID를 표현한다는 것은 유비쿼터스 언어의 성장에도 연결됩니다.&lt;/p&gt;

&lt;p&gt;예를 들어 앱에서 categoryId라는 것이 있어서 Value Object로 하려고 생각해서 사용처를 조사했더니&lt;/p&gt;

&lt;p&gt;genreId라는 것도 있는 것을 눈치채고 말았습니다. 차근차근 이야기를 들으면&lt;/p&gt;

&lt;p&gt;이 둘은 같은 것이었습니다.&lt;/p&gt;

&lt;p&gt;이 ID용 Value Object를 제공하는 클래스의 이름이 필요합니다. 이 이름은 유비쿼터스 언어가 될 것입니다.&lt;/p&gt;

&lt;p&gt;그래서 둘 중 누구를 유비쿼터스 언어로 할지는 논의해서 GenreId 통일하자로 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;63p&quot;&gt;63p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-pTI4mGugMKI/Wn1eJ3vH3KI/AAAAAAAAtZw/P-8bckSyyO4fpw82S5pu4xE10uTpgoFOwCLcBGAs/s320/DroidKaigi2018_2.064.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GenreId = 유비쿼터스 언어&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GenreId를 Value Object로 하면 이렇게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;64p&quot;&gt;64p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-YTQbRuwy_t4/Wn1eKA4yvaI/AAAAAAAAtZ0/DEHki86c8wcEo48l9GsoeeI83WNLE1qEQCLcBGAs/s320/DroidKaigi2018_2.065.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위화감&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GenreId 변수가 categoryId 인게 굉장히 위화감있지요.&lt;/p&gt;

&lt;p&gt;ID를 Value Object가 안되는지 생각함으로써 언어의 문제에 주의해, 팀으로 새로운 유비쿼터스 언어를 찾을 수 있었습니다. 헷갈리는 변수 이름이 붙여지는 것을 방지할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;65p&quot;&gt;65p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-P3WmpWh1UCQ/Wn1eKKJcirI/AAAAAAAAtZ4/47__x50q9qkjgpuKC9kzKTIsSXZGYk6PACLcBGAs/s320/DroidKaigi2018_2.066.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예시 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;66p--67p&quot;&gt;66p ~ 67p&lt;/h3&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0216-ddd/DroidKaigi2018_2.068.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제품 ID가 브랜드의 ID와 브랜드내 코드로 구성되어있습니다.&lt;/p&gt;

&lt;p&gt;제품 화면에서 브랜드 목록 화면으로 이동하기 위해 제품 ID 문자열을 처리하여 브랜드 ID 부분을 꺼낼 수 있게 되어있었습니다.&lt;/p&gt;

&lt;p&gt;id가 빈 문자열이거나 : 을 포함하지 않는 문자열이라면, 의도하지 않은 값으로 BrandActivity가 열리게 된다는 문제도 있습니다만,&lt;/p&gt;

&lt;p&gt;여기에서 가장 큰 문제는 UI가 알아서는 안되는 제품 ID의 형식이 노출되고 있는 것입니다.&lt;/p&gt;

&lt;p&gt;이제 잘 알겠죠&lt;/p&gt;

&lt;h3 id=&quot;68p&quot;&gt;68p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-Ji9mukxLzYE/Wn1eLMFwApI/AAAAAAAAtaE/JPkSHNFprcoQNHO5ydaBdDgGGohG09zbwCLcBGAs/s320/DroidKaigi2018_2.069.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ProductId를 준비&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Value Object로 ProductId를 준비합시다.&lt;/p&gt;

&lt;p&gt;올바른 형식으로 ProductId가 구성되는 것을 보장할 수 있으며, UI 측은 제품 ID 문자열 표현이 어떻게 되어있는지 몰라도 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;69p&quot;&gt;69p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-f-cKyZ8PeHE/Wn1eLmk_N1I/AAAAAAAAtaI/2b7X5jzNIKgwjm4qXiHAUQmbCqRIa4aewCLcBGAs/s320/DroidKaigi2018_2.070.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;종류 구별은 Value Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Value Object를 찾는 방법을 아셨나요?&lt;/p&gt;

&lt;p&gt;그럼 다음 예로 이동합니다.&lt;/p&gt;

&lt;h3 id=&quot;70p&quot;&gt;70p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-iVuucabZJpE/Wn1eLmjGMsI/AAAAAAAAtaM/7vp2uhJ9nPcK9wsVOEfvZVpJ9pFBQVtxwCLcBGAs/s320/DroidKaigi2018_2.071.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“등록화면을 만들 수 있나요? 등록 API는 이겁니다”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용자 등록 화면의 작성을 의뢰받았습니다.&lt;/p&gt;

&lt;p&gt;성별과 생년월일을 전달해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;71p&quot;&gt;71p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-XrRXDroZCf0/Wn1eMF6BW5I/AAAAAAAAtaQ/UK65SMpDZ2cXWjERyL1C2kf7hhX1ncZEwCLcBGAs/s320/DroidKaigi2018_2.072.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;성별은 어떤 문자열을 전달하면 좋지? 애초에 성별은 모델이지 않나??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만들기 시작하고서 깨달았습니다.&lt;/p&gt;

&lt;p&gt;성별은 어떤 문자열 보내면 좋을까요?&lt;/p&gt;

&lt;p&gt;그것보다 원래 다루고 싶은 것은 성별 자체이며, 성별을 표현한 문자열이 아니지요. 그러면 성별은 모델이 아닌가…&lt;/p&gt;

&lt;p&gt;같은 성별이라면, 성별로 구분할 필요가 없기 때문에 이것도 Value Object입니다.&lt;/p&gt;

&lt;h3 id=&quot;72p&quot;&gt;72p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-dx2cyrI8sic/Wn1eMryX7AI/AAAAAAAAtaU/XNIoPV_Av20cNtY82LTpJm0Zc92UC3NHgCLcBGAs/s320/DroidKaigi2018_2.073.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 다룰 수 있는 상태가 한정된 Value Object는 enum으로 표현할 수 있지요.&lt;/p&gt;

&lt;h3 id=&quot;73p&quot;&gt;73p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-ivd_GDZXWXI/Wn1eM2gdvZI/AAAAAAAAtaY/BNVrxI-SFRUBT6pihW6dapZsslH8IrqngCLcBGAs/s320/DroidKaigi2018_2.074.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;성별 문자열에 대해 UI가 알지 않아도 되었습니다.&lt;/p&gt;

&lt;p&gt;하지만 여전히 문제가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;74p&quot;&gt;74p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/--y40rZNlwjA/Wn1eNOEKY1I/AAAAAAAAtac/UT5Vxbp_mls2gR3auQgq1F3IrasRh5QYwCLcBGAs/s320/DroidKaigi2018_2.075.png&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;날짜는 Value Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;75p&quot;&gt;75p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-x-kzUo4DcEs/Wn1eNqeqiHI/AAAAAAAAtag/5VLsUOetPeMJ2uN1sPr61V-m2GIJfuIrgCLcBGAs/s320/DroidKaigi2018_2.076.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;생일 문자열은 어떤 포맷?&lt;/p&gt;

  &lt;p&gt;yyyy-MM-dd? 혹은 yyyy/MM/dd 일려나?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;생일도 어떤 문자열을 보내면 좋을지 모르겠네요.&lt;/p&gt;

&lt;p&gt;이쪽도 생각해 봅시다.&lt;/p&gt;

&lt;p&gt;같은 날을 가리키는 날짜는 구별할 필요가 없기 때문에 값 객체로 표현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;생일 등 특별한 의미를 가진 날짜는 도메인 모델입니다.&lt;/p&gt;

&lt;h3 id=&quot;76p&quot;&gt;76p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-goHSPUxtdvU/Wn1eN0edsQI/AAAAAAAAtak/8pi336Aa9XIblSEHArZm7VmU5UTG_ilqQCLcBGAs/s320/DroidKaigi2018_2.077.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DateOfBirth 클래스로 구현하면 이렇게 될 것입니다.&lt;/p&gt;

&lt;p&gt;어떤 포맷으로 하는 문자열인지는 UI로부터 은폐할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;77p&quot;&gt;77p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-uo3Cei9ONRs/Wn1eN8XcfTI/AAAAAAAAtao/gTuoDzAJzcABx5EENnpx4PRtO8-YDZbHQCLcBGAs/s320/DroidKaigi2018_2.078.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파라매터 형태로 DateOfBirth을 사용하면 무엇을 건네면 좋을지 분명하게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;78p&quot;&gt;78p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-C6fPB0Oj1QY/Wn1eOf1JIbI/AAAAAAAAtas/j_hT32GZwgQxvBGXgLdqhSukevzc1rhaACLcBGAs/s320/DroidKaigi2018_2.079.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 모델을 벗어나 도메인 모델로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음의 사례로 가겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;79p&quot;&gt;79p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-4sH6bDil1vs/Wn1eOpO7WEI/AAAAAAAAtaw/Hkr-I_qF1wkbCnnLw7YiCummOKG_WVQzgCLcBGAs/s320/DroidKaigi2018_2.080.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ImageView에 Load&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미지의 가로/세로 크기와 URL을 가진 Image라는 객체가 있습니다. 이미지의 가로세로 비율이 4:3보다 가로로 길다, 예를 들어 16:9라면, wide용 placeholder를 사용한다는 사양입니다.&lt;/p&gt;

&lt;h3 id=&quot;80p&quot;&gt;80p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-6Q0Y7F-qonA/Wn1eOzLsmCI/AAAAAAAAta0/GhwdegR_gTo-m6BPp8Z9oiG9erzFRZvCgCLcBGAs/s320/DroidKaigi2018_2.081.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image 가로 세로 비율 (width : height)이 4:3보다 가로로 길다면 wide용 placeholder를 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;UI 에 로직이 적혀있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 코드의 문제는 wide 여부의 판단 처리가 UI에 작성되어 있는 것입니다. ImageView에 이미지를 로드하는 곳마다 동일한 처리의 코드가 적혀있을 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;81p&quot;&gt;81p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-PL_BlJ2vfZI/Wn1ePVmEYnI/AAAAAAAAta8/yh1tcg7I1dkR3-MqQVE0groK8Jv9IQdKwCLcBGAs/s320/DroidKaigi2018_2.083.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image가 단순한 데이터 모델&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Image 클래스가 단순한 데이터 모델이 되었다는 점입니다. 이러한 상태를 도메인 모델 빈혈증이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;82p&quot;&gt;82p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-iPbAF6xP4WU/Wn1ePuBC5LI/AAAAAAAAtbA/y9OfH8o_1-Ucf0p4wl6zN7H-OCHmVJLaQCLcBGAs/s320/DroidKaigi2018_2.084.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image에 로직을 가지게 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;wide 여부의 판단은 도메인 모델, 즉 Image에 속하는 로직이므로, Image에 갖게 합시다.&lt;/p&gt;

&lt;p&gt;로직이 누구의 책임인지 생각하기 어렵네요. 저도 헤매는 경우가 종종 있습니다. 이 예제에서도 wide인지 여부의 정보는 placeholder를 용도에 맞게 사용하기 위해 쓰이고 있기 때문에, UI 로직이며 도메인 로직은 아니지 않을까?라고 생각할지도 모릅니다.&lt;/p&gt;

&lt;p&gt;이 예제에서는 Image에 뒀지만, 표현하는 도메인 모델이 다르면 다른 구현이 될 것입니다. 획일적인 판단 기준이 아니라 머릿속 도메인 모델에 있어서 자연스러운지 아닌지 일 뿐입니다. wide 여부라는 속성은 Image라는 도메인 모델에게 자연스러운가.&lt;/p&gt;

&lt;p&gt;처음부터 마음에 드는 구현이 되지 않는 경우는 많습니다. 중요한 것은 그 구현으로 고정화하지 않고 더 좋은 방법이 생각났을 때 리팩토링할 수 있도록 해 두는 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;83p&quot;&gt;83p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-eWDEH7cDJ6U/Wn1eQNZC29I/AAAAAAAAtbE/waJfQNgaBjMvg2VdapeIZJv4cpo_X92wQCLcBGAs/s320/DroidKaigi2018_2.085.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서버 응답 형식에 얽매이지 않기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음의 사례로 가겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;84p&quot;&gt;84p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-nFHvQ6HX9RU/Wn1eQTyegaI/AAAAAAAAtbI/LBx4HhQqFu4iQtAARmSQjVECEUt9wrYkACLcBGAs/s320/DroidKaigi2018_2.086.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버 API를 호출해서 JSON 등의 응답을 받아 그것을 객체에 매핑하는 작업은 많은 Android 앱에서 하고 있습니다.&lt;/p&gt;

&lt;p&gt;이때, JSON 또는 XML 구성을 그대로 반영해서 클래스화하지 않았습니까?&lt;/p&gt;

&lt;h3 id=&quot;85p&quot;&gt;85p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-l22APUNCm6k/Wn1eQaCMw5I/AAAAAAAAtbM/U9jjQO5UHbI-nSG4tdPWMTIWneLZl6mMgCLcBGAs/s320/DroidKaigi2018_2.087.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, 제품 정보를 취득하는 API에서 이와 같은 응답이 돌아온다고 가정하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;86p&quot;&gt;86p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-EMuMyak7q54/Wn1eQ9aXpwI/AAAAAAAAtbQ/O7qiaabAGEAIswtiDSieXSWF__YV3eNhACLcBGAs/s320/DroidKaigi2018_2.088.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;동일한 이미지의 사이즈 차이&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 images 배열에는 같은 이미지에 다양한 크기의 URL이 포함되어 앱에서는 표시 영역의 크기에 따라서 이 중에서 적절한 것을 사용하는 사양으로 되어있습니다.&lt;/p&gt;

&lt;h3 id=&quot;87p&quot;&gt;87p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/---tn9McSYgg/Wn1eRC7k7GI/AAAAAAAAtbU/73D__srdrHQ20-uYRcoZ5OXXApnSPNTBgCLcBGAs/s320/DroidKaigi2018_2.089.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 JSON을 그대로 매핑하면 이러한 클래스가 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;88p&quot;&gt;88p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-NdTy5w9k0KA/Wn1eRbOUvvI/AAAAAAAAtbY/gA4CHs__cJgPxOdesSZQgmXWRwiILBWnACLcBGAs/s320/DroidKaigi2018_2.090.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;표시하는 영역의 크기에 따라 적절한 Image를 선택하는 로직을 어디에 둘까요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;앱은 표시 영역의 크기에 따라 이 중에서 적절한 것을 골라서 사용하는 사양으로 되어있기 때문에 어떤 Image를 사용할지 판단하는 로직이 필요합니다.&lt;/p&gt;

&lt;p&gt;그럼, 이 로직을 어디에 두어야 할까요?&lt;/p&gt;

&lt;h3 id=&quot;89p&quot;&gt;89p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-orDbR7sz9hY/Wn1eRhFLzFI/AAAAAAAAtbc/JtXZ0FCTnWwNmIg6q8fIWqvmmQDWPo7ugCLcBGAs/s320/DroidKaigi2018_2.091.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여러 곳에서 같은 것을 하므로 UI에 로직을 두는 것은 좋지 않다는 등의 이유로 이러한 유틸리티 클래스에 배치될 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;90p&quot;&gt;90p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-kUV3gAlFYn0/Wn1eSMPA-AI/AAAAAAAAtbg/cUvRiT4J1JUQkWpnxHEizPj_ry1YUinzwCLcBGAs/s320/DroidKaigi2018_2.092.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델 빈현증&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 경우 Item 클래스는 값을 가지고 있을 뿐, 그 데이터를 사용한 판단 또는 가공 처리는 다른 곳에서 합니다.&lt;/p&gt;

&lt;p&gt;이러한 상태는 이전과 같은 도메인 모델 빈혈증이네요.&lt;/p&gt;

&lt;h3 id=&quot;91p&quot;&gt;91p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-wLaS8OOunds/Wn1eSeW2QaI/AAAAAAAAtbk/wJL5EdTfkUEt0cjlXsFn5HwR2OihNnSlQCLcBGAs/s320/DroidKaigi2018_2.093.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Item에 로직을 둬봤습니다만&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Item이 빈혈이므로 Item에 이 로직을 둬봤습니다.&lt;/p&gt;

&lt;p&gt;그런데 문제가 발생합니다.&lt;/p&gt;

&lt;h3 id=&quot;92p&quot;&gt;92p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-QrxmN04Azds/Wn1eSr47K-I/AAAAAAAAtbo/AJAdfbgP7jM3tLid3ahVUD4tMNiG78hSgCLcBGAs/s320/DroidKaigi2018_2.094.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;중복&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Item 이외에 Category에서도 Image를 선택하는 과정이 필요했습니다.&lt;/p&gt;

&lt;p&gt;Item 및 Category에 동일한 로직이 중복되어 좋지 않습니다.&lt;/p&gt;

&lt;h3 id=&quot;93p&quot;&gt;93p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-psZq9cmkqiA/Wn1eTMx45UI/AAAAAAAAtbs/_W7WajVH6QUGi7Ohyv-HBjoIIQ_VxUaAQCLcBGAs/s320/DroidKaigi2018_2.095.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“표현하는 영역의 크기에 따라 적절한 Image를 선택하는 로직”은 누구의 책임인가요?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그럼 어떻게 할까요?&lt;/p&gt;

&lt;p&gt;JSON의 형식을 일단 잊어두고 “표시 영역의 크기에 따라 적절한 Image를 선택하는 로직”은 누구의 책임인가를 생각합시다.&lt;/p&gt;

&lt;p&gt;정말 Item의 책임일까요?&lt;/p&gt;

&lt;h3 id=&quot;94p&quot;&gt;94p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-rGkpWl7vLMo/Wn1eTaL9O4I/AAAAAAAAtbw/Pj-A5Z2RMKQzzw4rQVIPVWZdf27qhvb3QCLcBGAs/s320/DroidKaigi2018_2.096.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Item과 Category의 책임이 아니라, Image의 집합이라는 다른 도메인 모델의 책임이 아닐까요&lt;/p&gt;

&lt;h3 id=&quot;95p&quot;&gt;95p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-PG__Huzt7yk/Wn1eTklUBAI/AAAAAAAAtb0/o1tH0K_F-E0f_V2h69AjzBMuG9EyrO4egCLcBGAs/s320/DroidKaigi2018_2.097.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image 집합이라는 도메인 모델&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Image의 집합을 표현하는 도메인 모델로 Images 클래스를 도입해 보면 어떨까요.&lt;/p&gt;

&lt;p&gt;적절한 Image를 선택하는 로직을 둘 곳으로 자연스러운 느낌이 들지 않나요?&lt;/p&gt;

&lt;h3 id=&quot;96p&quot;&gt;96p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-XR_PJ5lSfOI/Wn1eTyjnoQI/AAAAAAAAtb4/l1_Jk9dPj9EjJEp0uYv3FppS5GMGaG-LwCLcBGAs/s320/DroidKaigi2018_2.098.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서버의 응답 형식에 얽매이지 않고 도메인 모델을 생각&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;서버의 응답 형식에 얽매이지 않고, 다른 도메인 모델이 있는 것은 아닐까&lt;/p&gt;

&lt;p&gt;도메인 모델을 적절히 표현하는 Value Object가 있는 것은 아닐까 생각해 보세요.&lt;/p&gt;

&lt;h3 id=&quot;97p&quot;&gt;97p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-EAPq5I9wnqc/Wn1eUEPaTEI/AAAAAAAAtb8/uDz0oaFIgXsy8u2Z3m1cxiuqn_YUolFVgCLcBGAs/s320/DroidKaigi2018_2.099.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음의 사례로 가겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;98p&quot;&gt;98p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-REgkZoztGls/Wn1eUeuluQI/AAAAAAAAtcA/fufBnPoaQaQHWD-WY6kwucdoI8zlL9iWQCLcBGAs/s320/DroidKaigi2018_2.100.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 소식 목록을 받았을 때의 응답입니다.&lt;/p&gt;

&lt;p&gt;각 소식에는 배너가 포함된 경우가 있고, 배너에는 표시 기간의 시작/종료 일시가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;99p&quot;&gt;99p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-tmu2B-O-VPU/Wn1eU_RF-bI/AAAAAAAAtcE/Y0QN_X1b6W0eKfDaQzNv2B5KsaSJ2k5XACLcBGAs/s320/DroidKaigi2018_2.101.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것을 그대로 매핑하면 이러한 클래스입니다.&lt;/p&gt;

&lt;p&gt;이것을 사용한다면 어떨까요?&lt;/p&gt;

&lt;p&gt;bannerImageUrl은 null이 아니지만, bannerStartDate가 null인 경우는 어떻게 할까요? 라고 생각하지 않습니까?&lt;/p&gt;

&lt;h3 id=&quot;100p&quot;&gt;100p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-J_OCKhBlTmE/Wn1eVAkbWLI/AAAAAAAAtcI/EmGjxq63x3UTmVYkKelo41M0fx1Zv3sigCLcBGAs/s320/DroidKaigi2018_2.102.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;banner에 관한 3개 속성으로 개념적인 통일체&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 banner 관한 3가지 속성은 각각 소식에 속하는 것이 아니라, 이 3개로 개념적 통일체를 구성하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;101p&quot;&gt;101p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-a-jjnhhwALo/Wn1eVW24WNI/AAAAAAAAtcM/J5jdGH7ptCYGkhP6yspKdwGSAxXfqEc8gCLcBGAs/s320/DroidKaigi2018_2.103.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;즉, 이 3가지 속성을 가진 Value Object가 필요합니다. 그것을 Banner 클래스로 한다면 이렇게 됩니다.&lt;/p&gt;

&lt;p&gt;banner 인스턴스가 있으면 url도 날짜도 갖추어져 있다는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;102p&quot;&gt;102p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-aWzW4QigusM/Wn1eVtpUoRI/AAAAAAAAtcQ/wnl6MINVmxcVhza7-AuHDJVS6_yaRXpDACLcBGAs/s320/DroidKaigi2018_2.104.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사전조건과 로직을 가지게 한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;추가저긍로 시작 시간이 종료 시간 이전임을 사전 조건으로 보장 가능하며, 오늘이 표시 기간 내인가 판단하는 로직을 넣어둘 곳으로도 자연스럽습니다.&lt;/p&gt;

&lt;h3 id=&quot;103p&quot;&gt;103p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-WIZIrYUYujQ/Wn1eV8eMJdI/AAAAAAAAtcU/pWbUbcFywoQhRwhBGb4n0izZ6auSOw8WwCLcBGAs/s320/DroidKaigi2018_2.105.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음의 사례로 가겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;104p&quot;&gt;104p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-qUVPPtLmUHU/Wn1eWN5y_4I/AAAAAAAAtcY/6-9TbeJYoCcYT8PJUCX93IASfAnPc0d0QCLcBGAs/s320/DroidKaigi2018_2.106.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 앱에는 사용자가 사용할 수 있는 전자 상품이 있습니다.&lt;/p&gt;

&lt;p&gt;상품에는 로그인하지 않고도 사용 가능한 것과 로그인이 필요한 것, 유료 회원만 사용할 수 있는 것 등이 있고, 서버에서 여러 상태가 반환됩니다.&lt;/p&gt;

&lt;p&gt;예전에는 2종류 밖에 없었다지만 역사적인 경위라든지 확장 등으로, 이런 응답으로 되어있습니다.&lt;/p&gt;

&lt;h3 id=&quot;105p&quot;&gt;105p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-71d-GCncM58/Wn1eWo6dU9I/AAAAAAAAtcc/dkjMeSFfEtI-YJQX_nMssfz4flMGC4hpgCLcBGAs/s320/DroidKaigi2018_2.107.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금까지의 이야기의 흐름에서 상상할 수 있듯이 이런 클래스에 매핑되어 있습니다.&lt;/p&gt;

&lt;p&gt;UI 쪽에서 if 문을 사용한 처리가 되리라는 것은 쉽게 상상할 수 있습니다.&lt;/p&gt;

&lt;p&gt;여기에서도 일단 응답 형식의 잊도록 합시다.&lt;/p&gt;

&lt;p&gt;상품을 도메인 모델로 생각하면, 상품의 속성으로 자연스러운 것은 개별 Boolean보다, 어떤 상품인가라는 종류입니다.&lt;/p&gt;

&lt;h3 id=&quot;106p--107p&quot;&gt;106p ~ 107p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-wnpchQ7ZXZE/Wn1eXDoX8VI/AAAAAAAAtck/7jFs1hHWUu8naiuzJiguA-qBA6u142qwACLcBGAs/s320/DroidKaigi2018_2.109.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 전문가와 이야기&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;로그인하지 않고도 사용할 수 있는 상품&lt;/li&gt;
    &lt;li&gt;로그인하면 사용할 수 있는 상품&lt;/li&gt;
    &lt;li&gt;유료회원만 사용할 수 있는 상품&lt;/li&gt;
    &lt;li&gt;상품을 구입한 사람이 사용할 수 있는 상품&lt;/li&gt;
    &lt;li&gt;상품을 구입한 사람 혹은 유료회원이라면 사용할 수 있는 상품&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;(※ &lt;code class=&quot;highlighter-rouge&quot;&gt;상품을 구입한 사람&lt;/code&gt;은 원문에서는 都度料金으로 기술했습니다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇게 되면 다음은 어떤 종류가 있는가이지만, 여기에서는 아무것도 생각하지 말고 Boolean 4개의 조합이므로 2의 4승인 16가지 있구나로해서는 안됩니다.&lt;/p&gt;

&lt;p&gt;다음에 할 것은 도메인 전문가와 이야기하는 것입니다.&lt;/p&gt;

&lt;p&gt;어떤 종류의 상품이 있다고 인식하고 있는지 물어보면 결국은 5종류밖에 없는 것으로 밝혀졌습니다.&lt;/p&gt;

&lt;h3 id=&quot;108p&quot;&gt;108p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-0eAp8bmBiWw/Wn1eXiub4YI/AAAAAAAAtco/HGpp2TvsccMkwksIQptJQt_w8I_y6-yyACLcBGAs/s320/DroidKaigi2018_2.110.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 5가지를 enum으로하면 좋겠네요.&lt;/p&gt;

&lt;p&gt;Boolean 조합은 16 패턴이 있는데 상품은 5종류 밖에 없다는 것은, 있을 수 없는 조합이나 이미 사라진 조합이 있다는 것입니다.&lt;/p&gt;

&lt;p&gt;판명된 종류를 바탕으로, 서버 팀에 어떨 때 어떤 값이 돌아오는지 확인합시다.&lt;/p&gt;

&lt;h3 id=&quot;109p&quot;&gt;109p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-rMiXVp90ka0/Wn1eXtbRyiI/AAAAAAAAtcs/LSSYXdv0_Kooe2p_Umg3maN0pFgruXGvgCLcBGAs/s320/DroidKaigi2018_2.111.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;isMemberUsable은 isPurchaseRequired가 true일 때에만 의미가 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;isPurchaseRequired가 true의 경우는 isLoginNeeded와 isMembershipRequired는 의미 없기 때문에 무시하세요.&lt;/p&gt;

&lt;p&gt;등의 정보를 얻을 수 있었습니다.&lt;/p&gt;

&lt;h3 id=&quot;110p&quot;&gt;110p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-NrrxqMra9ZE/Wn1eYVSsS3I/AAAAAAAAtc0/mSy6icqd_OE8rG9p_zVEW5gD9NgEnOyUACLcBGAs/s320/DroidKaigi2018_2.113.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후는 얻은 정보로 enum으로 변환합시다.&lt;/p&gt;

&lt;h3 id=&quot;111p&quot;&gt;111p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-RH6rJ18Dj_E/Wn1eYr6pAZI/AAAAAAAAtc4/kd2oiOj8ChURRYb-eNBwVehEm4enjMVigCLcBGAs/s320/DroidKaigi2018_2.114.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어디서 변환할까요?&lt;/p&gt;

&lt;p&gt;Anticorruption Layer 입니다. 이전에 나왔습니다.&lt;/p&gt;

&lt;h3 id=&quot;112p&quot;&gt;112p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-Bc3opZE9QCk/Wn1eY0Wis3I/AAAAAAAAtc8/iw4Hq0juaeQBcvWP7kW3g5oZax3ULsW_ACLcBGAs/s320/DroidKaigi2018_2.115.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Entity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;동일한 속성값을 갖는다면 구분이 필요 없다는 모델이 있고, 그것을 Value Object로 표현하는 방법을 여러 가지 소개했습니다.&lt;/p&gt;

&lt;p&gt;그러나 모델에는 동일한 속성값이라도 구별할 필요가 있을 수 있습니다. 예를 들어, A와 B가 같은 야마다 타로라는 이름이라도 다른 사람으로 구별이 필요합니다.&lt;/p&gt;

&lt;p&gt;이러한 모델을 표현하는 객체로서 도메인 주도 설계에는 Entity라는 전술적 설계 패턴이 있습니다.&lt;/p&gt;

&lt;p&gt;책에서는 이렇게 쓰여있습니다.&lt;/p&gt;

&lt;h3 id=&quot;113p&quot;&gt;113p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-3mqOcgd2SR8/Wn1eZfRxy3I/AAAAAAAAtdA/z7Cvc2tFFEINiWGSZLbr6m1OD4EH4bDpACLcBGAs/s320/DroidKaigi2018_2.116.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“주로 &lt;code class=&quot;highlighter-rouge&quot;&gt;동일성&lt;/code&gt; 으로 정의되는 객체는 Entity로 부른다,”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;114p&quot;&gt;114p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-Vbv4ldYvrz4/Wn1eZviYajI/AAAAAAAAtdE/eC6l2QCE7PA8Gr5gEy-NhbDWxfgcjX_AwCLcBGAs/s320/DroidKaigi2018_2.117.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“생명주기에서 Entity의 형태와 내용은 근본적으로 바뀔 수 있지만, 연속성의 관계는 유지되어야 한다.”&lt;/p&gt;

&lt;p&gt;Entity는 생명주기가 있습니다. 사람이 일생동안 변화하는 것처럼 생명주기동안 Entity의 내용은 변경될 수 있습니다. 그 때 새로 만들어지는 것이 아니라 이전의 내용이 바뀌었다는 연속성이 유지될 필요가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;115p&quot;&gt;115p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-JYN7bnyZZfw/Wn1eaohaZLI/AAAAAAAAtdQ/ZvKfDILvvt0A7eM8hnoyceaVLK_HpwZLwCLcBGAs/s320/DroidKaigi2018_2.120.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;연속성 (→ 영속화)과 동일성 (→ 식별자 발행)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 연속성과 동일성을 소프트웨어에서 표현할 때 문제가 되는 것은 연속성을 유지하기 위해 어떻게 영속화하는가와 동일성을 가지기 위해 식별자를 어떻게 발행할지입니다.&lt;/p&gt;

&lt;p&gt;이것들은 기술적인 제약과 관계 있을 수도 있고, 에릭 에반스의 도메인 주도 설계에서도 도메인 주도 설계 구현에서도 구체적인 구현을 내놓고 논의되고 있습니다.&lt;/p&gt;

&lt;p&gt;Android 앱에서도 독립적으로 마스터 데이터를 앱 내의 데이터베이스에 저장하는 경우에는 이를 어떻게 구현하느냐가 문제가 됩니다.&lt;/p&gt;

&lt;p&gt;그러나 마스터 데이터가 서버에 저장되고 식별자도 서버에서 발행되는 클라이언트 앱에서는 이러한 앱 쪽에서 할 수 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;116p&quot;&gt;116p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-Zci7r7EhtEw/Wn1ea6VesNI/AAAAAAAAtdU/YrR5OAVAgrcBOayuI3VRgN73donKYenzQCLcBGAs/s320/DroidKaigi2018_2.121.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;현재 Android 앱에서 Entiy가 내가 말할 수 있는 것은 식별자를 사용하여 객체를 비교하도록 구현해야 한다는 것뿐입니다.&lt;/p&gt;

&lt;p&gt;UserId에서 유일하게 식별해야 할 User라면 UserId로 식별하도록 equals()와 hashCode()를 override 해야 합니다.&lt;/p&gt;

&lt;p&gt;Android 앱에서 Entity의 취급은 아직 시행착오 중이고, 예를 들면 SharedPreferences에 저장하는 최초 실행 여부 플래그 및 알림을 받을지 여부 설정은 Entity인지 등의 고민은 없습니다.&lt;/p&gt;

&lt;p&gt;이 이야기는 기회가 된다면 다음에 할 수 있으면 좋겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;117p&quot;&gt;117p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-eLmmxT38a_E/Wn1ea-pcmyI/AAAAAAAAtdY/e8yJutsM_PsZeIbuy6OiL43G93gzpWhMACLcBGAs/s320/DroidKaigi2018_2.122.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 정리입니다&lt;/p&gt;

&lt;h3 id=&quot;118p&quot;&gt;118p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-DPoGoGTQkgw/Wn1ebq-zY4I/AAAAAAAAtdc/8030xuIAAwEZ4T7K1qCI34-aRdSBnYW_wCLcBGAs/s320/DroidKaigi2018_2.123.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;도메인을 격리할 목적으로 Android에서는 gradle 모듈로 나누는 방법이 있다&lt;/li&gt;
    &lt;li&gt;Value Object를 활용합시다
      &lt;ul&gt;
        &lt;li&gt;불변으로 한다&lt;/li&gt;
        &lt;li&gt;로직을 가진다&lt;/li&gt;
        &lt;li&gt;조건을 포함할 경우에 인스턴스화한다&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인을 격리하는 목적에 대해 gradle 모듈로 나누는 방법을 소개했습니다. 모듈로 나누는 것으로 의존 방향을 강제할 수 있고 도메인인가 UI 등의 기타 부분을 모르는 상태로 격리할 수 있습니다.&lt;/p&gt;

&lt;p&gt;동일한 속성값을 가지고 있다면 구별할 필요가 없는 모델은 Value Object로 표현할 수 있는 것을 소개했습니다.&lt;/p&gt;

&lt;p&gt;속성은 불변으로 하고 Value Object자체를 교체함으로 변경에 대응합시다.&lt;/p&gt;

&lt;p&gt;모델에 속해야하는 로직을 갖게 합시다. 모델의 표현으로서 조건을 충족하는 경우에만 인스턴스화합시다.&lt;/p&gt;

&lt;h3 id=&quot;119p&quot;&gt;119p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://2.bp.blogspot.com/-Iahd7e2WPY4/Wn1eb23XYmI/AAAAAAAAtdg/KrFB9fjdMB0CcJ7NIpmFNeMJbKOLesRSACLcBGAs/s320/DroidKaigi2018_2.124.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;문자열로 관리한 요소가 Value Object이지 않은가 생각합시다
      &lt;ul&gt;
        &lt;li&gt;ID, 종류, 날짜, 크기 …&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;서버의 응답 형식으로부터 자유로워지자&lt;/li&gt;
    &lt;li&gt;데이터 모델에서 도메인 모델로&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;문자열로 처리하는 요소가 Value Object가 아닌가 생각합시다. ID, 종류, 날짜, 크기 등은 Value Object를 도입하는 좋은 출발점입니다.&lt;/p&gt;

&lt;p&gt;서버의 응답 형식은 어떤 경우는 모델을 잘 표현하지 않을 수 있습니다. 그것에 끌려가서 도메인 모델 빈혈증이 되지 않았나요? 일단 응답 형식이라는 것은 잊고, 어떤 모델이 있어야 할지를 생각합시다.&lt;/p&gt;

&lt;h3 id=&quot;120p&quot;&gt;120p&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/--1Z33jTGRxU/Wn1eb6f6DCI/AAAAAAAAtdk/mWjRS0mr-8kn7DuShiSQxaQ1rEi9LIXFACLcBGAs/s320/DroidKaigi2018_2.125.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다. 들어 주셔서 감사합니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 May 2019 12:00:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/droidkaigi/2019/05/01/droidkaigi-ddd/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/android/droidkaigi/2019/05/01/droidkaigi-ddd/</guid>
        
        <category>Android</category>
        
        <category>DroidKaigi</category>
        
        
        <category>blog</category>
        
        <category>Android</category>
        
        <category>DroidKaigi</category>
        
      </item>
    
      <item>
        <title>Blog: Activity#1.0.0-alpha06에서 OnBackPressedCallback 관련 업데이트 훑어보기</title>
        <description>&lt;p&gt;2019년 4월초 AndroidX의 많은 부분이 업데이트 되었습니다.&lt;/p&gt;

&lt;p&gt;그 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity#1.0.0-alpha06&lt;/code&gt;의 변경 중에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedCallback&lt;/code&gt;의 변경에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;androidx-componentactivity&quot;&gt;AndroidX ComponentActivity&lt;/h2&gt;

&lt;p&gt;먼저 소개할 내용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentActivity&lt;/code&gt; 클래스입니다.&lt;/p&gt;

&lt;p&gt;ComponentActivity는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity#1.0.0-alpha01&lt;/code&gt; 부터 추가되었으며 기존에 있던 &lt;code class=&quot;highlighter-rouge&quot;&gt;SupportActivity&lt;/code&gt; 의 새로운 이름으로 변경한 형태로 보입니다. 이 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;FragmentActivity&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppComatActivity&lt;/code&gt;의 상위 클래스입니다.&lt;/p&gt;

&lt;p&gt;이번에 이야기하는 ComponentActivity는 &lt;code class=&quot;highlighter-rouge&quot;&gt;androidx.activity&lt;/code&gt;에 있는 클래스이며, androidx.core.app에 동일한 이름의 ComponentActivity는 아닙니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ComponentActivity&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelStoreOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SavedStateRegistryOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Activity 및 Fragment의 Back Key 처리시 내부적으로 호출 및 작업되는 클래스가 바로 ComponentActivity라고 보시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/2019-04-20-backpress-01.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;activity100-alpha01&quot;&gt;Activity#1.0.0-alpha01&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/jetpack/androidx/releases/activity#1.0.0-alpha01&quot;&gt;Activity#1.0.0-alpha01 Release Note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-alpha01&lt;/code&gt; 부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;onBackPressed&lt;/code&gt; 호출 시 추가적인 BackPressed 판단 가능한 기능이 추가되었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;addOnBackPressedCallback&lt;/code&gt; 라는 메소드 입니다. 덕분에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fragment&lt;/code&gt; 에서도 손쉽게  &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedCallback&lt;/code&gt; 인터페이스를 이용해 BackKey 처리가 가능해졌습니다.&lt;/p&gt;

&lt;h3 id=&quot;기본-형태&quot;&gt;기본 형태&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.activity.OnBackPressedCallback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.fragment.app.Fragment&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// OnBackPressedCallback 정의
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHandled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;doAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Activity에 BackPressedCallback 등록
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Activity에 BackPressedCallback 제거
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lifecycle-사용-형태&quot;&gt;Lifecycle 사용 형태&lt;/h3&gt;

&lt;p&gt;기본 형태와 다른 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;addOnBackPressedCallback&lt;/code&gt;를 호출 시 파라매터로 &lt;code class=&quot;highlighter-rouge&quot;&gt;LifecycleOwner&lt;/code&gt;를 전달하는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;componentactivity--100-alpha01&quot;&gt;ComponentActivity ~ 1.0.0-alpha01&lt;/h3&gt;

&lt;p&gt;좀 더 &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentActivity&lt;/code&gt; 의 내부를 확인해보면 동작을 쉽게 이해할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/support/+/8514bc0f4d930b5470435aa365719b2a6a3ad2f3/activity/src/main/java/androidx/activity/ComponentActivity.java&quot;&gt;ComponentActivity&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ComponentActivity&lt;/span&gt; 
		&lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelStoreOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// OnBackPressedCallback Listener를 보관할 Cache&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LifecycleAwareOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CopyOnWriteArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;    
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;    
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 등록한 순차적으로 OnBackPressedCallback#handleOnBackPressed() 를 실행&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Add, OnBackPressedCallback &amp;amp; 현재 Activity의 LifecycleOwner 사용&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Add, OnBackPressedCallback &amp;amp; LifecycleOwner 사용&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// LifecycleOwner의 Lifecycle을 체크&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DESTROYED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 최근에 추가한 Callback이 우선 순위를 갖도록 가장 앞에 추가&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleAwareOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Remove, OnBackPressedCallback&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LifecycleAwareOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LifecycleAwareOnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackToRemove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LifecycleAwareOnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Callback 비교&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;callbackToRemove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbackToRemove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Lifecycle 구독 해지&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;callbackToRemove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onRemoved&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Cache 목록에서 Callback 제거&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callbackToRemove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity#1.0.0-alpha06&lt;/code&gt; 이전까지 OnBackPressedCallback은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ComponentActivity&lt;/code&gt; 내부의 Add/Remove를 이용해서 관리했습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;activity100-alpha06&quot;&gt;Activity#1.0.0-alpha06&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/jetpack/androidx/releases/activity#1.0.0-alpha06&quot;&gt;Activity#1.0.0-alpha06 Release Note&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.0-alpha01&lt;/code&gt; 에 추가되었던 ComponentActivity#&lt;code class=&quot;highlighter-rouge&quot;&gt;addOnBackPressedCallback&lt;/code&gt; 의 기능이 &lt;code class=&quot;highlighter-rouge&quot;&gt;deprecated&lt;/code&gt; 가 되었습니다.&lt;/p&gt;

&lt;p&gt;그 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedDispatcher&lt;/code&gt; 를 이용하는 형태로 변경되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;기본-형태-1&quot;&gt;기본 형태&lt;/h3&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.activity.OnBackPressedCallback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.arch.core.util.Cancellable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.fragment.app.Fragment&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 취소 가능한 Interface
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;backPressedCancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// OnBackPressedCallback 정의
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHandled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;doAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// onBackPressedDispatcher#addCallback 호출 시
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Cancellable 인터페이스를 구현한 OnBackPressedCancellable 가 반환
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;backPressedCancellable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;backPressedCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lifecycle-사용-형태-1&quot;&gt;Lifecycle 사용 형태&lt;/h3&gt;

&lt;p&gt;기본 형태와 다른 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;addOnBackPressedCallback&lt;/code&gt;를 호출 시 파라매터로 &lt;code class=&quot;highlighter-rouge&quot;&gt;LifecycleOwner&lt;/code&gt;를 전달하는 것과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cancellable&lt;/code&gt; Callback을 이용해 BackPressedDispatcher 구독을 취소하는 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// onBackPressedDispatcher#addCallback 호출 시
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Cancellable 인터페이스를 구현한 LifecycleOnBackPressedCancellable 가 반환
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;backPressedCancellable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;onbackpresseddispatcher&quot;&gt;OnBackPressedDispatcher&lt;/h3&gt;

&lt;p&gt;위쪽에서 언급한 OnBackPressedDispatcher의 내부를 한 번 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnBackPressedDispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WeakerAccess&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* synthetic access */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayDeque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayDeque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;OnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 기본 형태로 Callback 추가시 호출 됨&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnBackPressedCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Lifecycle을 사용하는 형태로 Callback 추가시 호출 됨&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DESTROYED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CANCELLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LifecycleOnBackPressedCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// descendingIterator 형태의 iterator를 이용해서 handleOnBackPressed 체크&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;descendingIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// 단순 형태의 OnBackPressedCancellable&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnBackPressedCancellable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;OnBackPressedCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// OnBackPressedDispatcher의 mOnBackPressedCallbacks에서 제거&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Lifecycle을 참조하는 OnBackPressedCancellable&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LifecycleOnBackPressedCancellable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericLifecycleObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;LifecycleOnBackPressedCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mLifecycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStateChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON_START&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              	&lt;span class=&quot;c1&quot;&gt;// ON_START, OnBackPressedDispatcher의 mOnBackPressedCallbacks에 추가&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON_STOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// ON_STOP, 현재 Cancellable 객체가 유효한 경우 cancel 처리&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 최종적으로 OnBackPressedCancellable#cancel 이 호출&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ON_DESTROY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              	&lt;span class=&quot;c1&quot;&gt;// ON_DESTROY, cancel 처리&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Lifecycle을 미참조&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mLifecycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              	&lt;span class=&quot;c1&quot;&gt;// Cancel 처리&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 최종적으로 OnBackPressedCancellable#cancel 이 호출&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mCurrentCancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새롭게 추가된 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedDispatcher&lt;/code&gt; 클래스는 기존 ComponentActivity에서 관리하던 OnBackPressedCallback 을 가져와서  관리하는 형태로 변경되습니다.&lt;/p&gt;

&lt;p&gt;그리고, 기본 형태인 OnBackPressedCancellable와 Lifecycle을 참조하는 LifecycleOnBackPressedCancellable 로 좀 더 명확히 분리되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;componentactivity--100-alpha06&quot;&gt;ComponentActivity ~ 1.0.0-alpha06&lt;/h3&gt;

&lt;p&gt;다음으로 1.0.0-alpha06부터 변경된 ComponentActivity의 내부를 먼저 살펴보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComponentActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;androidx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ComponentActivity&lt;/span&gt; 
		&lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelStoreOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SavedStateRegistryOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedDispatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// deprecated&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeakHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbackCancellables&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeakHashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// BackPressedDispatcher에서 &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mOnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedDispatcher&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Deprecated&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// OnBackPressedDispatcher에서 생성된 Cancellable을 추가&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbackCancellables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;getOnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Deprecated&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleOwner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// OnBackPressedDispatcher에서 생성된 Cancellable을 추가&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbackCancellables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;getOnBackPressedDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Deprecated&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// onBackPressedCallback을 Cache Map에서 가져와서 cancel 처리 수행&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Cancellable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mOnBackPressedCallbackCancellables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressedCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancellable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cancellable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;activity-100-alpha01-vs-100-alpha06-차이점&quot;&gt;Activity 1.0.0-alpha01 vs 1.0.0-alpha06 차이점&lt;/h3&gt;

&lt;p&gt;기존 버전과 호환을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;addOnBackPressedCallback&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;removeOnBackPressedCallback&lt;/code&gt; 는 그대로 유지하고 있습니다.&lt;/p&gt;

&lt;p&gt;가장 큰 차이점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedDispatcher&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedCallback&lt;/code&gt;의 동작을 관리하는 변화입니다.&lt;/p&gt;

&lt;p&gt;추가적인 차이점은 아래와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본 형태로 OnBackPressedDispatcher에 OnBackPressedCallback 추가 시 Lifecycle을 미체크&lt;/li&gt;
  &lt;li&gt;OnBackPressedCallback을 보관하는 Wrapper Class 변경
    &lt;ul&gt;
      &lt;li&gt;CopyOnWriteArrayList → ArrayDeque&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cancellable Callback을 보관하는 Wrapper Class 변경 : &lt;code class=&quot;highlighter-rouge&quot;&gt;mOnBackPressedCallbackCancellables&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Lifecycle과 기본 형태의 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedCallback&lt;/code&gt; 가 각자 가지는 동작을 분리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;좀 더 자세한 차이점은 아래의 Review 링크를 참고해주세요/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Separate onBackPressed handling from ComponentActivity&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/c/platform/frameworks/support/+/922523/5/activity/src/main/java/androidx/activity/ComponentActivity.java&quot;&gt;ComponentActivity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://android-review.googlesource.com/c/platform/frameworks/support/+/922523/5/activity/src/main/java/androidx/activity/OnBackPressedDispatcher.java&quot;&gt;OnBackPressedDispatcher&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;이번 글을 통해서 Back Key 선택 시의 동작과 새로운 변경 점을 알아보았습니다.&lt;/p&gt;

&lt;p&gt;1.0.0-alpha06 과 1.0.0-alpha01의 차이는 더 명확하게 구현을 분리한 형태가 된듯 합니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Apr 2019 11:01:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/2019/04/20/android-backpress/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/android/2019/04/20/android-backpress/</guid>
        
        <category>Android</category>
        
        <category>AndroidX</category>
        
        
        <category>blog</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Blog: DroidKnights 2019 ~ MotionLayout 무릎까지 담궈보기</title>
        <description>&lt;hr /&gt;

&lt;p&gt;2019년 4월 5일&lt;/p&gt;

&lt;p&gt;“DroidKnights 2019”에서 발표한 &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout 무릎까지 담궈보기&lt;/code&gt; 자료입니다.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e4aeedd0af7c40029b8f09fe7aab375a&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bHp-pIpm92s&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 07 Apr 2019 09:30:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/2019/04/07/droidknights-motionlayout/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/android/2019/04/07/droidknights-motionlayout/</guid>
        
        <category>Android</category>
        
        <category>MotionLayout</category>
        
        
        <category>blog</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Blog: DroidKaigi 2019에서 들은 세션</title>
        <description>&lt;p&gt;DroidKaigi 2019에서 들은 세션 리스트 정리이다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;day-1&quot;&gt;Day 1&lt;/h2&gt;

&lt;h3 id=&quot;マルチモジュールなプロジェクトでテストはどう変わる&quot;&gt;マルチモジュールなプロジェクトでテストはどう変わる？&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;304e7e2a50524905aeb33e3d886e26cb&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;optimize-builds-with-android-plugin-for-gradle-330&quot;&gt;Optimize Builds with Android Plugin for Gradle 3.3.0+&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;작년 영상 : &lt;a href=&quot;https://www.youtube.com/watch?v=onz5t29oBcU&quot;&gt;https://www.youtube.com/watch?v=onz5t29oBcU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Santa Tracker : &lt;a href=&quot;https://github.com/google/santa-tracker-android&quot;&gt;https://github.com/google/santa-tracker-android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zRjerXLqP8A&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;livedata-と-coroutines-で実装する-ddd-の戦術的設計&quot;&gt;LiveData と Coroutines で実装する DDD の戦術的設計&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;발표 자료: &lt;a href=&quot;https://y-anz-m.blogspot.com/2019/02/droidkaigi-2019-livedata-coroutines-ddd.html&quot;&gt;https://y-anz-m.blogspot.com/2019/02/droidkaigi-2019-livedata-coroutines-ddd.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FIMMeIwHpjk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;ぼくのかんがえた最強のusecaseの作り方あるいはビジネスロジックとはなにかという1つの回答&quot;&gt;ぼくのかんがえた最強のUsecaseの作り方~あるいはビジネスロジックとはなにかという1つの回答~&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;bd75758490674c4799d0d0a0aa99f988&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bw8bckLSKiM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-good-and-bad-of-modern-app-architecture&quot;&gt;The good and bad of modern app architecture&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0gEwwXSmbww&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;understanding-kotlin-coroutines-コルーチンで進化するアプリケーション開発&quot;&gt;Understanding Kotlin Coroutines: コルーチンで進化するアプリケーション開発&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;04c1f0ae0be14ec199e573ba94cb9fb3&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AWIn6VeWVuA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;exoplayer-in-recyclerview-a-proposal&quot;&gt;ExoPlayer in RecyclerView(*), a proposal&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;b981bd5abcd44d228a8cc3717023a965&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ulHYE4qavj0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;

&lt;h3 id=&quot;外部デバイスと密に連携するandroidアプリに最適なアーキテクチャとは&quot;&gt;外部デバイスと密に連携するAndroidアプリに最適なアーキテクチャとは？&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;6cb1e51ec4ce4c55abfec03844471964&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Wz9IG1nh-Og&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;gradle-bom-importでライブラリバージョン管理&quot;&gt;Gradle BOM importでライブラリバージョン管理&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;570b7c72b22144f59ae91a115f6b7e0c&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bm_szoMkzMo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;deep-dive-into-motionlayout&quot;&gt;Deep dive into MotionLayout&lt;/h3&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3b3cw4znveNOGN&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/hagikuratakeshi/deep-dive-into-motionlayout&quot; title=&quot;Deep dive into MotionLayout&quot; target=&quot;_blank&quot;&gt;Deep dive into MotionLayout&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/hagikuratakeshi&quot; target=&quot;_blank&quot;&gt;Takeshi Hagikura&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/r8cYDlBOPaA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;android-studio設定見直してみませんか&quot;&gt;Android Studio設定見直してみませんか？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;발표 자료 : https://shiraji.hatenablog.com/entry/2019/02/08/131843&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/MV14DDxv6DE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;lifecycle-livedata-viewmodels---the-inner-wiring&quot;&gt;Lifecycle, LiveData, ViewModels - The inner wiring&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VY8ovjWIp1M&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;multi-module-androidアプリケーション&quot;&gt;multi-module Androidアプリケーション&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;82ae9414e1fc4bb6a693a03c671c0864&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/F2qG8wWi3z0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;navigation-architecture-component-によるアプリ内遷移の管理&quot;&gt;Navigation Architecture Component によるアプリ内遷移の管理&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;3f5f5bb9f90e4117ba36334f03868a10&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sbp5tf4KPpc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;ああ素晴らしきtdd-アプリとエンジニアの心に安寧を&quot;&gt;ああ、素晴らしきTDD ~アプリとエンジニアの心に安寧を~&lt;/h3&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/IyZFcsnVGZytS4&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/SaikiIijima/tdd-130994383&quot; title=&quot;ああ、素晴らしきTDD ~アプリとエンジニアの心に安寧を~&quot; target=&quot;_blank&quot;&gt;ああ、素晴らしきTDD ~アプリとエンジニアの心に安寧を~&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/SaikiIijima&quot; target=&quot;_blank&quot;&gt;Saiki Iijima&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1eK_RBdqFMo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;buildgradlektsに移行しよう&quot;&gt;build.gradle.ktsに移行しよう&lt;/h3&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;393bf5a183014b50b8a430c2eb2f8d98&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_s-0MbA5Gvw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 14 Feb 2019 16:50:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/owner/droidkaigi/2019/02/14/droidkaigi-insert-session/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/owner/droidkaigi/2019/02/14/droidkaigi-insert-session/</guid>
        
        <category>주인장 이야기</category>
        
        <category>DroidKaigi</category>
        
        
        <category>blog</category>
        
        <category>Owner</category>
        
        <category>DroidKaigi</category>
        
      </item>
    
      <item>
        <title>Blog: DroidKaigi 2019 참가 후기</title>
        <description>&lt;p&gt;올해로 3번째로 다녀온 DroidKaigi 2019년 행사 후기이다.&lt;/p&gt;

&lt;h2 id=&quot;droidkaigi&quot;&gt;DroidKaigi?!&lt;/h2&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/01.JPG&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DroidKaigi는 엔지니어가 주인공인 Android 컨퍼런스입니다.
Android 기술 정보 공유와 커뮤니케이션을 목적으로 2019년 2월 7일 (목), 8일 (금) 2일간 개최합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;올해는 약 1000명의 참석자 / 87개 세션의 세션으로 구성되었으며, 총 9개의 방에서 세션과 codelab이 진행되었다.&lt;/p&gt;

&lt;h2 id=&quot;facilities&quot;&gt;Facilities&lt;/h2&gt;

&lt;p&gt;DroidKaigi 는 매번 새로운 것을 시도해보려는 생각한다는 것을 느낄 수 있었다.&lt;/p&gt;

&lt;p&gt;첫 번째, 라이브 스트리밍&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;약 2개의 룸을 선정하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Youtube 라이브 스트리밍&lt;/code&gt;을 시도했다. 이것으로 실제 행사에 참석하지 못한 다른 지인들도 발표를 들을 수 있어서 좋았다고 들었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두 번째, 동시통역&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1개의 세션 룸에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;일본어 to 영어, 영어 to 일본어 동시통역&lt;/code&gt;이다. 덕분에 영어권 발표자가 발표하더라도 영어가 불편한 사람에게도 편하게 세션 내용을 즐길 수 있는 경험을 할 수 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;세 번째, 전 세션 녹화&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;총 9개의 룸 중 8개의 세션을 녹화하는 것은 쉬운 작업이 아니다. 나조차 GDG 행사 시에 쉬운 것이 아니라서 결정을 내리기도 어려운 항목이다. 이런 결정한 부분에 대해서는 언제나 DroidKaigi 운영진들이 많은 고생을 한다는 것을 느낄 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네 번째, 아침 식사&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2일날 가벼운 샌드위치와 음료를 제공하는 조식을 제공했다. 나는 호텔에서 조식을 먹긴 했지만, 아침 10시경부터 진행되는 행사로 인해 아침을 거른 사람을 위해 제공하는 모습에 감명을 받았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스폰서&quot;&gt;스폰서&lt;/h2&gt;

&lt;p&gt;DroidKaigi는 다양한 형태의 스폰서들과 함께한다. 총 39개의 스폰서가 참석했다고 한다. 간단하게 나열을 해본다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 및 트래픽 기술 지원&lt;/li&gt;
  &lt;li&gt;점심 식사&lt;/li&gt;
  &lt;li&gt;전력 지원 (Power Supply)&lt;/li&gt;
  &lt;li&gt;음료 지원&lt;/li&gt;
  &lt;li&gt;간식 지원&lt;/li&gt;
  &lt;li&gt;Platinum / Gold / Supporters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;droidkaigi-app&quot;&gt;DroidKaigi App&lt;/h2&gt;

&lt;p&gt;작년 DroidKaigi 2018 총괄을 담당했던 &lt;a href=&quot;https://twitter.com/new_runnable&quot;&gt;Takahirom&lt;/a&gt;님이 올해도 총괄을 담당하셨다. 오프닝 당시 310개의 이슈가 있었고, 그중 33개만 오픈 상태이며 작년보다 20% 이상 증가한 수치라고 한다. 500개 이상의 PR / 2054개의 Commit으로 작년보다 20% 이상의 수치였다.&lt;/p&gt;

&lt;p&gt;올해는 2개의 이슈를 해결했으며, 1개의 Android Studio 관련 처리를 도왔다.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-slide=&quot;41&quot; data-id=&quot;ec87519331484282bbea8a82cbddcca3&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/mhidaka/droidkaigi-2019-welcometalk&quot;&gt;DroidKaigi 2019 WelcomeTalk&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/mhidaka&quot;&gt;Masahiro Hidaka&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;행사-참가시-받은-물건&quot;&gt;행사 참가시 받은 물건&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/02.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/03.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/04.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/05.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;작년과 같이 사전에 이메일로 받은 QR 코드를 통해서 입장 처리가 되었다. QR 코드가 읽혔을 때 내 명찰이 있는 위치를 알려준다. 명찰 줄은 작년보다 재질이 더 좋아졌지만, 명찰 자체는 작년보다는 인쇄상태가 선명하지 않았다. 그래도 사전에 입력받은 정보를 통해서 나만의 명찰이 생기는 것은 여전히 좋다.&lt;/p&gt;

&lt;p&gt;안내 책자에는 일본어 / 영어로 적힌 내용이 풀컬러로 인쇄되었다.&lt;/p&gt;

&lt;h2 id=&quot;세션&quot;&gt;세션&lt;/h2&gt;

&lt;p&gt;먼저 올해 오프닝 영상을 구경하자.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4suIJHROcK0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;올해는 일본어 58개 / 영어 16개 / 일본어+영어 14개의 세션이 준비되었다. 그 중 몇개의 세션은 취소도 되었다. 세션 사진은 많이 찍지 않았다. 사실 찍어야한다는 생각도 나중에 했다. 그 중 몇개의 세션 사진을 올려본다.&lt;/p&gt;

&lt;p&gt;세션은 전반적으로 영어로 발표되는 세션 수가 많이 늘었고, 실제로 일본외의 나라에서 온 개발자들도 많았다. 유명한 라이브러리 제작자부터 Googler 까지 매년 스피커의 규모가 대단하다고 느껴진다.&lt;/p&gt;

&lt;h3 id=&quot;주요-세션&quot;&gt;주요 세션&lt;/h3&gt;

&lt;p&gt;그리고, 전반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-Module&lt;/code&gt; 에 대한 발표가 다수 존재했다. 여기에 대해서 어떻게 생각하는지 물어봤다. 이유는 몇가지가 존재했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째로 빌드 시간 개선을 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Multi-Module&lt;/code&gt; 을 적용했다고 한다.&lt;/li&gt;
  &lt;li&gt;두 번째로 앱은 덩치가 점점 커지지 절대로 줄어들지 않는다. 그럼으로 각 &lt;code class=&quot;highlighter-rouge&quot;&gt;Feature&lt;/code&gt;의 크기와 지식에 대한 형태가 분리가 필요하다고 한다. 우리가 Class/Method를 분리하는 것처럼 더 큰 형태로 분리가 필요하다고 느끼는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/06.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/07.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/08.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/09.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/10.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/11.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/12.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/13.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/14.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/15.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;즐길거리&quot;&gt;즐길거리&lt;/h2&gt;

&lt;h3 id=&quot;도시락&quot;&gt;도시락&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/32.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/33.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;도시락은 … 이하 생략 (개인적인 취향이므로)&lt;/p&gt;

&lt;h3 id=&quot;전시룸&quot;&gt;전시룸&lt;/h3&gt;

&lt;p&gt;전시룸에는 각 부스와 음식/음료, 발표 후의 Q&amp;amp;A가 이루어졌다. 간단하게 스냅샷을 찍었다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/20.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/34.jpeg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/22.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/23.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/30.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/31.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;먹을거리&quot;&gt;먹을거리&lt;/h3&gt;

&lt;p&gt;대충 찍었다. 쉬는 시간마다 갔던 기억이 있는데, 항상 음료와 간식은 풍족하게 준비되었다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/21.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/35.jpeg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/36.jpeg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/37.jpeg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/38.jpeg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;부스에서의-즐길거리-극소수&quot;&gt;부스에서의 즐길거리 (극소수)&lt;/h3&gt;

&lt;p&gt;Kotlin Puzzle 과 Android 개발에 관련된 투표도 진행되었다.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/25.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/26.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/27.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/28.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/29.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/17.jpg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/18.jpg&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;사심을-담은-사진&quot;&gt;사심을 담은 사진&lt;/h3&gt;

&lt;p&gt;뒤에서 MotionLayout 관련으로 질문하는 장면 / &lt;a href=&quot;https://twitter.com/chethaase&quot;&gt;Chet Haase&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/romainguy&quot;&gt;Romain Guy &lt;/a&gt; / &lt;a href=&quot;https://twitter.com/camaelon&quot;&gt;Nicolas Roard&lt;/a&gt; / &lt;a href=&quot;https://twitter.com/johnhoford&quot;&gt;John Hoford&lt;/a&gt; 도 같이 찍혀있다.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/16.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;party&quot;&gt;Party&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/39.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/40.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/41.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/42.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/43.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/44.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/45.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/46.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/47.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/48.JPG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/droidkaigi/49.JPG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;행사 첫날 저녁부터 2시간가량 네트워킹 파티를 행사 전원이 참가할 수 있었다. 초밥, 케익, 저녁거리, 맥주, 음료 등 다양한 먹을거리가 제공되었다.&lt;/p&gt;

&lt;h2 id=&quot;etc&quot;&gt;Etc&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;DroidKaigi 2019를 준비하는 기간동안 연락한 일본 개발자들과 만날 수 있는 시간이 되어서 즐거웠다&lt;/li&gt;
  &lt;li&gt;Googler가 한번에 같은 시간대에 발표하는 것때문에 듣지못하는 세션이 생기는 건 좀 아쉬웠다. 여러시간대로 나눠서 많은 사람들이 들을 수 있는 기회가 있었으면 좋았을 것 같다.&lt;/li&gt;
  &lt;li&gt;행사장에서 &lt;a href=&quot;https://twitter.com/chrisbanes&quot;&gt;Chris Banes&lt;/a&gt; 을 봤다. 행사 운영 담당자에게서는 DroidKaigi 2019 CFP에서 떨어졌다는 이야기를 들었다. […]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;내년에도 가자&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 14 Feb 2019 16:00:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/owner/droidkaigi/2019/02/14/droidkaigi-review/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/owner/droidkaigi/2019/02/14/droidkaigi-review/</guid>
        
        <category>주인장 이야기</category>
        
        <category>DroidKaigi</category>
        
        
        <category>blog</category>
        
        <category>Owner</category>
        
        <category>DroidKaigi</category>
        
      </item>
    
      <item>
        <title>Blog: [번역] AndroidX에서 Back Key 제어</title>
        <description>&lt;p&gt;본 포스팅은 &lt;a href=&quot;http://androhi.hatenablog.com/entry/2019/01/31/201235?fbclid=IwAR1PM8uktDYu-1830JwQIrOtkhacTU-tIlYRcEwLgGWefcV2xcNAflP0ukU&quot;&gt;AndroidXでのバックキー制御&lt;/a&gt; 을 번역한 글입니다.&lt;/p&gt;

&lt;p&gt;제 일본어 실력으로 인하여 오역이나 오타가 발생할 수 있습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;androidx-이전&quot;&gt;AndroidX 이전&lt;/h3&gt;

&lt;p&gt;지금까지 Back Key 제어라고 하면 예를 들어 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity#onBackPressed()&lt;/code&gt; 로 했습니다&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Back Key 이벤트로 Fragment에서 무언가를 하고 싶을 때
&lt;/span&gt;    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findFragmentByTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HogeFragment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Stack에 쌓인 Fragment를 1개 전으로 돌리고 싶을 때
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backStackEntryCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;supportFragmentManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popBackStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BackStack은 아직 괜찮지만, Fragment측의 처리를 호출하고 싶을 때 등은 Activity에 특정 Fragment의 의존이 들어가버려, 아쉬웠습니다.&lt;/p&gt;

&lt;h3 id=&quot;androidx-이후&quot;&gt;AndroidX 이후&lt;/h3&gt;

&lt;p&gt;AndroidX에서 제공하는 Activity에는 Version 1.0.0-alpha01에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity#addOnBackPressedCallback()&lt;/code&gt; 라는 메소드가 추가되었고 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnBackPressedCallback&lt;/code&gt; 인터페이스를 통해 Back Key 이벤트를 받을 수 있게 되었습니다.&lt;/p&gt;

&lt;p&gt;즉 Fragment 내부에서 Back Key 제어 로직을 넣을 수 있다는 것입니다. 개인적으로는 최고입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/jetpack/androidx/releases/activity?hl=ja#1.0.0-alpha01&quot;&gt;Activity ~ Android Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 형태로 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.activity.OnBackPressedCallback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.fragment.app.Fragment&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이것만으로도 기쁘지만, Reference를 보면 Architecture Component의 Lifecycle에도 대응하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/androidx/activity/ComponentActivity.html?hl=ja#addOnBackPressedCallback(androidx.lifecycle.LifecycleOwner,%20androidx.activity.OnBackPressedCallback)&quot;&gt;ComponentActivity ~ Android Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;즉, 위의 샘플 코드는 아래와 같은 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.activity.OnBackPressedCallback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;androidx.fragment.app.Fragment&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onActivityCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOnBackPressedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OnBackPressedCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleOnBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이걸로 add한 callback의 개방을 신경 쓸 필요가 없어졌습니다. 코드량도 적어지고 읽기 쉽습니다. (OnBackPressedCallback 은 Java로 구현되어 SAM 변환도 가능하고 실제로는 더욱 코드량을 줄일 수 있습니다.)&lt;/p&gt;

&lt;p&gt;이것을 발견했을 때 AndroidX로 옮겨서 좋았다고 마음속으로 생각했습니다. AndroidX 최고입니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Feb 2019 11:50:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/2019/02/03/androidx-backkey/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/android/2019/02/03/androidx-backkey/</guid>
        
        <category>Android</category>
        
        <category>AndroidX</category>
        
        
        <category>blog</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Blog: Yanolja + MotionLayout #Part2 ~ CollapsibleToolbar</title>
        <description>&lt;p&gt;Yanolja + MotionLayout #Part1 ~ MotionLayout 에서는 MotionLayout에 대한 간단한 이야기와 기본적인 적용에 관해 설명했습니다. Part2에서는 야놀자 서비스에 도입된 &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar&lt;/code&gt; 내용을 더 설명하겠습니다. 실제로 Part2에 해당하는 내용으로 많은 트러블 슈팅을 했습니다.&lt;/p&gt;

&lt;p&gt;좀 더 MotionLayout을 다뤄보겠습니다.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;constraint&quot;&gt;Constraint&lt;/h2&gt;

&lt;p&gt;먼저 리스트 화면에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Expand/Collapsing&lt;/code&gt; 되었을 때의 차이는 아래와 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Expand&lt;/th&gt;
      &lt;th&gt;Collapsing&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0118-motionlayout/01.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0118-motionlayout/02.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;항목&lt;/th&gt;
      &lt;th&gt;위치 변화&lt;/th&gt;
      &lt;th&gt;크기 변화&lt;/th&gt;
      &lt;th&gt;노출 변화&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;전체 높이&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타이틀 텍스트&lt;br /&gt;(CollapsingToolbarLayout 과 동일)&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Home 버튼&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Search 버튼&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;요일 텍스트&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;인원 텍스트&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;쿠폰 버튼&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;필터 버튼&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;맵 버튼&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar&lt;/code&gt; 의 ViewGroup 아래에 다양한 항목 및 그에 따른 처리를 하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;트러블-슈팅-1-collapsibletoolbar-특성-문제&quot;&gt;트러블 슈팅 #1 CollapsibleToolbar 특성 문제&lt;/h2&gt;

&lt;p&gt;Collapsing 을 지원하는 View인 경우 높이가 변한다는 것을 추측할 수 있습니다.&lt;/p&gt;

&lt;p&gt;일반적으로 ConstraintLayout 작업시 대부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Top-To-Bottom&lt;/code&gt; 방식으로 위에서 아래로 Anchor를 처리하면서 레이아웃을 구성하는 방식을 사용합니다. 그러나,  &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar&lt;/code&gt; 사용 시에는 동일하게 Start/End에 대한 처리를 해서 동작시켜보시면 실제로 원하던 동작을 하지 않습니다. MotionLayout의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Show Path&lt;/code&gt;를 활성시 움직이는 궤적도 원하던 형태가 아닐 것입니다.&lt;/p&gt;

&lt;p&gt;정확한 이유는 파악하지 못했지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar&lt;/code&gt; 를 사용하는 소스를 보면 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bottom-To-Top&lt;/code&gt; 형태로 레이아웃을 구성되어 있는 것을 볼 수 있습니다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;Top-To-Bottom&lt;/code&gt; 로 안되는 이유는 AppBarLayout이 줄어들 때 상단 부분이 사라지는 기능의 연장선이라고 추측하고 있습니다. (개인적인 생각입니다)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Bottom-To-Top&lt;/th&gt;
      &lt;th&gt;Top-To-Bottom&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0118-motionlayout/03.png&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0118-motionlayout/04.png&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 결과는 다음 소스를 수정한 결과입니다&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/googlesamples/android-ConstraintLayoutExamples/blob/master/motionlayout/src/main/res/xml/scene_09.xml&quot;&gt;https://github.com/googlesamples/android-ConstraintLayoutExamples/blob/master/motionlayout/src/main/res/xml/scene_09.xml&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AppBarLayout + CollapsibleToolbar 사용시에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bottom-To-Top&lt;/code&gt; 로 레이아웃 구성하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;트러블-슈팅-2-텍스트-크기-변경&quot;&gt;트러블 슈팅 #2 텍스트 크기 변경&lt;/h2&gt;

&lt;p&gt;헤더에서 사용하는 타이틀은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Expand/Collapsing&lt;/code&gt; 시의 텍스트 크기가 다릅니다. MotionLayout의 Start/End 부분에 다른 텍스트 사이즈를 정의하는 것이 빠른 접근이지만, 실제로 동작 시에는 텍스트의 렌더링이 매끄럽게 그려지지 않습니다. 이 부분은 TextView의 Size 변경 시 일어나는 내부 처리로 인해 일어납니다.&lt;/p&gt;

&lt;p&gt;실제 텍스트 사이즈 변경 시에는 TextView는 아래 작업을 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Resources 취득&lt;/li&gt;
  &lt;li&gt;현재 텍스트 사이즈와 다른지 비교&lt;/li&gt;
  &lt;li&gt;텍스트 뷰 내부 필드 Null 처리&lt;/li&gt;
  &lt;li&gt;requestLayout() 호출&lt;/li&gt;
  &lt;li&gt;invalidate() 호출&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고 : &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/jb-mr0-release/core/java/android/widget/TextView.java#2244&quot;&gt;https://android.googlesource.com/platform/frameworks/base/+/jb-mr0-release/core/java/android/widget/TextView.java#2244&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;실제로 View 처리 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;에 해당하는 항목이 가장 큰 부하가 걸리는 항목입니다. TextView 사이즈가 최소~최대 사이즈의 0.0 ~ 1.0 의 비율로 적용되므로 스크롤 시마다 위의 1~5번 항목이 매번 처리됩니다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Scale&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Pivot&lt;/code&gt; 을 이용해 부하를 줄이는 방법으로 빠르게 렌더링할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/assets/img/blog/2019/0118-motionlayout/05.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고 : &lt;a href=&quot;https://blog.stylingandroid.com/motionlayout-collapsing-toolbar-part-1/&quot;&gt;MotionLayout – Collapsing Toolbar – Part 1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;트러블-슈팅-3-텍스트-변경-시-레이아웃-갱신-문제&quot;&gt;트러블 슈팅 #3 텍스트 변경 시 레이아웃 갱신 문제&lt;/h2&gt;

&lt;p&gt;MotionLayout 이 포함된 뷰의 내용을 변경할 경우에 레이아웃이 갱신되지 않습니다. 이 이유는 MotionLayout의 내부 로직을 보면 좀 더 알 수 있습니다. MotionLayout은 빠른 렌더링을 위해서 View와 각 View에 설정된 MotionController을 임시 저장해서 사용하고 있습니다. 그리고 MotionController 에 정의된 필드조차 많으며 컨트롤에 많은 처리를 해준다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionLayout&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConstraintLayout&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NestedScrollingParent2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFrameArrayList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupMotionViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSetup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mFrameArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layoutWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChildAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;MotionController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mFrameArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mSetup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCurveFitType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionPaths&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mStartMotionPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionPaths&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mEndMotionPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionConstrainedPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mStartPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionConstrainedPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionConstrainedPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MotionConstrainedPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurveFit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSpline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurveFit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mArcSpline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stagger_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stagger_scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mInterpolateVariables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mInterpolateData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mInterpolateVelocity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCycleData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmCycleVelocity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAttributeInterpCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_DIMENSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MotionPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMotionPaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDrawPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mVelocity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mKeyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeCycleSplineSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTimeCycleAttributesMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SplineSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAttributesMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyCycleOscillator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCycleMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyTrigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mKeyTriggers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributeTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;핵심은, &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout#setupMotionViews&lt;/code&gt; 의 내부 리소스가 갱신되도록 호출해주는 방법입니다. 버전에 따라 더 빠른 처리가 가능하겠지만, alpha2 작업시는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout#setTransition&lt;/code&gt; 를 MotionLayout Setup을 재호출하여 문제를 해결할 수 있습니다. 그로 인해 MotionScene 및 레이아웃의 대대적인 작업도 동반되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MotionLayout의 셋업처리를 미리 알았다면 많은 트러블 슈팅이 줄었을 텐데… 눈물이 흐릅니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;트러블-슈팅-4-elevation-문제&quot;&gt;트러블 슈팅 #4 Elevation 문제&lt;/h2&gt;

&lt;p&gt;안드로이드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;elevation&lt;/code&gt; 은 그림자를 노출하는 역할을 합니다. 아쉽게도 &lt;code class=&quot;highlighter-rouge&quot;&gt;elevation&lt;/code&gt; 은 Android 5.0부터 추가되었습니다. (&lt;del&gt;많은 안드로이드 개발자들의 애증이 담긴 기능입니다.&lt;/del&gt;) 보통 4.x의 단말에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;elevation&lt;/code&gt; Field에 값을 부여하더라도 서비스가 죽는 경우는 없습니다. 그림자 효과가 노출이 되지 않을 뿐 특별히 문제가 되는 경우는 적습니다.&lt;/p&gt;

&lt;p&gt;그러나, &lt;code class=&quot;highlighter-rouge&quot;&gt;Samsung 4.4.x&lt;/code&gt; 에서 MotionLayout 사용시는 이야기가 다릅니다. 결과부터 이야기드리면 100% Crash입니다. 더 슬픈 것은 현재 이슈가 해결 혹은 진행 중인 상태가 아닙니다. 그러니 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android 4.x를 포기&lt;/code&gt;하는 것이 해결법입니다. MotionLayout 내부 문제로 단시간에 해결될 것으로는 보이지 않습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://issuetracker.google.com/issues/119271613&quot;&gt;Issue Tracker &amp;gt; ConstraintLayout 2.0.0-alpha2 broke compatability&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;결과-화면-ver-slow&quot;&gt;결과 화면 (Ver. Slow)&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pGofoAJf4Is&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;실제로 위의 영상은 추가적인 MotionLayout 처리와 + Custom Behavior 를 이용한 화면입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;장단점&quot;&gt;장단점&lt;/h2&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Start/End의 상태가 있는 경우, Layout 애니메이션 처리시에 작업 난이도가 낮다 (★★★★)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아직 Alpha 버전이므로 도입의 용기가 필요합니다. 언제 정식 버전이 될지는 알 수 없습니다.&lt;/li&gt;
  &lt;li&gt;MotionLayout Editor가 없어, 실제로 빌드 후 실행하면서 정상적으로 움직임을 체크해야한다&lt;/li&gt;
  &lt;li&gt;MotionLayout 내의 데이터가 변경되지 않는다면 추천합니다. 그러나, View의 사이즈/Visibility가 갱신된다면 레이아웃 구성을 변경하거나 Transition 갱신해야지만 올바르게 노출됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout&lt;/code&gt;을 실제 프로덕션에 적용해볼 기회가 있어서 좋았습니다. Alpha 버전을 넣을 수 있는 경험도 했습니다. 그리고, 아직 안정 버전이 아니라서 생기는 다양한 트러블 슈팅과 버그로 수많은 고통도 함께했습니다.&lt;/p&gt;

&lt;p&gt;Android 개발 시 애니메이션 처리에 대해 아쉬움이 있었지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout&lt;/code&gt; 을 이용해 더 쉽게 애니메이션을 적용할 수 있어 기대되는 라이브러리입니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jan 2019 15:02:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/2019/01/17/motionlayout-part2/</link>
        <guid isPermaLink="true">http://pluu.github.io/blog/android/2019/01/17/motionlayout-part2/</guid>
        
        <category>Android</category>
        
        <category>ConstraintLayout</category>
        
        <category>MotionLayout</category>
        
        
        <category>blog</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Blog: Yanolja + MotionLayout #Part1 ~ MotionLayout</title>
        <description>&lt;p&gt;2019월 1월 15일 야놀자 7.0.0 버전이 출시되었습니다. 해외 숙박과 홈 개편을 메인이지만, 사용하시면 다양한 부분의 개선이 되었다는 것을 느끼셨을 겁니다. 이번 업데이트 중 리스트의 상단 헤더 부분에 적용된 &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout&lt;/code&gt; 에 대해서 이야기해보려고 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;공유 가능한 부분만 소개해보려 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;motionlayout&quot;&gt;MotionLayout?&lt;/h2&gt;

&lt;p&gt;ConstraintLayout 2.0부터 도입된 MotionLayout에 대해서 알고 계시는가요?&lt;/p&gt;

&lt;p&gt;MotionLayout은 작년 Google I/O 2018에서 발표되었습니다.&lt;/p&gt;

&lt;p&gt;간단하게 앱 내에서 레이아웃 및 프로퍼티 변경 시 더 자연스러운 애니메이션을 위해서 태어났습니다.&lt;/p&gt;

&lt;p&gt;MotionLayout에 대한 자세한 설명은 아래의 자료를 추천합니다.&lt;/p&gt;

&lt;h4 id=&quot;medium&quot;&gt;Medium&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/introduction-to-motionlayout-part-i-29208674b10d&quot;&gt;Introduction to MotionLayout (part I)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/introduction-to-motionlayout-part-ii-a31acc084f59&quot;&gt;Introduction to MotionLayout (part II)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/introduction-to-motionlayout-part-iii-47cd64d51a5&quot;&gt;Introduction to MotionLayout (part III)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-developers/defining-motion-paths-in-motionlayout-6095b874d37&quot;&gt;Defining motion paths in MotionLayout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;youtube&quot;&gt;Youtube&lt;/h4&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ytZteMo4ETk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s new with ConstraintLayout and Android Studio design tools (Google I/O ‘18)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;constraintlayout-sample&quot;&gt;ConstraintLayout Sample&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/googlesamples/android-ConstraintLayoutExamples&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;작업 당시에는 MotionLayout에 대한 정보를 얻을 수 있는 곳이 Youtube / Medium / Google Sample이 95% 정도의 자료입니다. &lt;del&gt;(정말 😭)&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;도입-계기&quot;&gt;도입 계기&lt;/h2&gt;

&lt;p&gt;먼저 이번 야놀자 7.0.0 프로젝트에 도입된 MotionLayout이 도입된 화면을 먼저 감상하겠습니다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AxUVJ1XZQos&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;프로젝트 작업 중 자연스러운 애니메이션을 적용해야 하는 미션이 생겼습니다.  &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsingToolbarLayout&lt;/code&gt; 느낌을 주면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Expand/Collapsing&lt;/code&gt;시에 각 뷰의 위치/노출 처리가 필요한 스펙이었습니다. 복수 뷰를 제어하는 처리라면 CollapsingToolbarLayout로는 해결할 수 없습니다.&lt;/p&gt;

&lt;p&gt;이 상황에서 제가 선택해야 할 수 있는 카드는 2가지입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CollapsingToolbarLayout 과 비슷한 Custom View 적용&lt;/li&gt;
  &lt;li&gt;MotionLayout 적용&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;나열한 2가지 모두 어려운 항목일 겁니다.&lt;/p&gt;

&lt;p&gt;Custom View를 만드는 것은 복수 View의 위치/노출 등의 처리가 필요하며, 화면마다 노출되는 기능에 맞게 매번 Custom View를 만들어야 하는 이슈가 있죠. 그리고 실제로 해야 하는 작업량과 기반 처리들이 상상 이상일 것입니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Custom View는 어렵기도하며 기간에 대한 예측이 전혀 가늠하기 어려운 것으로 판단했습니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 MotionLayout을 사용한다면?? 이것을 고민할 당시에는 Alpha2, 현재는 Alpha3입니다. 구글의  &lt;code class=&quot;highlighter-rouge&quot;&gt;Alpha&lt;/code&gt; 버전을 사용해 보신 분들이라면 짐작할 수 있으실테지만, 정식 버전까지 어떻게 변경될지, 언제 정식으로 될지 등 불투명합니다. ConstraintLayout 도 Google I/O 2016에서 1.0.0 Alpha1을 처음 발표한 후 약 2년 가까이 지난 뒤 1.0.0 정식 버전을 발표했습니다. Beta라면 100번 양보해서 사용을 고려 가능합니다. 그러나, DAU가 일정 수준의 서비스이며 주요 리스트 화면에서 적용한다는 것은 큰 도박입니다.&lt;/p&gt;

&lt;p&gt;결국 쉬운 수정, 작업 난이도를 고려해 최종적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout&lt;/code&gt;을 선택하게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;실제-사용하기&quot;&gt;실제 사용하기&lt;/h2&gt;

&lt;p&gt;MotionLayout 작업시 간단한 레이아웃이라면 아래의 흐름을 추천합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start/End ConstraintLayout 작성&lt;/li&gt;
  &lt;li&gt;MotionLayout 작성 (Path 노출을 추천)&lt;/li&gt;
  &lt;li&gt;MotionScene 작성&lt;/li&gt;
  &lt;li&gt;실행 후 움직여보기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 설명을 기준으로 이야기를 진행하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;startend-constraintlayout-정의&quot;&gt;Start/End ConstraintLayout 정의&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- motion_start.xml / motion_end.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;android.support.constraint.ConstraintLayout&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 다양한 뷰 정의 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/android.support.constraint.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;자세한 구성은 생략합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MotionLayout의 Start/End시에 그려질 레이아웃을 준비합니다.&lt;/p&gt;

&lt;p&gt;Start/End에 대한 레이아웃의 id 및 ViewType이 동일하도록 정의합니다. 만약 id가 다르다면 애니메이션 처리 시 View 맵핑이 되지 않아 원하던 노출을 할 수 없을 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;motionlayout-작성&quot;&gt;MotionLayout 작성&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;android.support.design.widget.CoordinatorLayout&lt;/span&gt; 
	&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;android.support.design.widget.AppBarLayout&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.google.androidstudio.motionlayoutexample.utils.CollapsibleToolbar&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;app:layoutDescription=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@xml/scene_sample&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;tools:showPaths=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/android.support.design.widget.AppBarLayout&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/android.support.design.widget.CoordinatorLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 보시면 MotionLayout 에 대한 정의는 보이지 않아 갸우뚱하셨을 겁니다. 실제 여기서 중요한 부분은 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar&lt;/code&gt; 입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsibleToolbar &lt;/code&gt; 는 MotionLayout을 상속한 Custom View이며 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppBarLayout#OnOffsetChangedListener&lt;/code&gt; 을 이용하여 CollapsingToolbarLayout 과 같은 효과를 주도록 설계되었습니다. CollapsingToolbarLayout을 대체하여 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Google MotionLayout의 샘플 코드에 있는 기능을 그대로 사용했습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/googlesamples/android-ConstraintLayoutExamples/blob/master/motionlayout/src/main/java/com/google/androidstudio/motionlayoutexample/utils/CollapsibleToolbar.kt&quot;&gt;https://github.com/googlesamples/android-ConstraintLayoutExamples/blob/master/motionlayout/src/main/java/com/google/androidstudio/motionlayoutexample/utils/CollapsibleToolbar.kt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;motionscene-작성&quot;&gt;MotionScene 작성&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- scene_sample.xml --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;MotionScene&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Transition&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app:constraintSetEnd=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/motion_end&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app:constraintSetStart=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/motion_start&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app:duration=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/MotionScene&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;실행-후-움직여보기&quot;&gt;실행 후 움직여보기&lt;/h3&gt;

&lt;p&gt;위 작업 후 실행하는 것으로 MotionLayout을 적용하여 Animation을 얻을 수 있습니다.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/L7HKXlxZ2x8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;[야놀자 앱 &amp;gt; 홈 &amp;gt; 내 주변 쿠폰] 화면 샘플 화면&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MotionLayout&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppBarLatout&lt;/code&gt; 을 함께 사용함으로써 기존 &lt;code class=&quot;highlighter-rouge&quot;&gt;CollapsingToolbarLayout&lt;/code&gt; 으로는 할 수 없는 다양한 뷰의 애니메이션 효과를 얻을 수 있습니다. 실제로 위와 같은 결과는 추가적인 처리가 더 필요합니다.&lt;/p&gt;

&lt;p&gt;좀 더 트러블 슈팅에 대한 내용은 Part2 에서 이어서 소개하도록 하겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jan 2019 15:01:00 +0000</pubDate>
        <link>http://pluu.github.io/blog/android/20