<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>조대협의 블로그</title>
<link>https://bcho.tistory.com/</link>
<description>평범하게 살고 싶은 월급쟁이
기술적인 토론 환영합니다.같이 이야기 하고 싶으시면 부담 말고 연락주세요:이메일-bwcho75골뱅이지메일 닷컴.</description>
<language>ko</language>
<pubDate>Sun, 12 May 2019 22:06:06 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>조대협</managingEditor>
<image>
<title>조대협의 블로그</title>
<url>http://cfile23.uf.tistory.com/image/2248683657C3CCED025E92</url>
<link>https://bcho.tistory.com</link>
<description>평범하게 살고 싶은 월급쟁이
기술적인 토론 환영합니다.같이 이야기 하고 싶으시면 부담 말고 연락주세요:이메일-bwcho75골뱅이지메일 닷컴.</description>
</image>
<item>
<title>SRE #3-SRE의 주요 지표 SLI/SLO (Service Level Indicatior, Service Level Objectives)</title>
<link>https://bcho.tistory.com/1328</link>
<description>SRE #3-SRE 주요 지표 (SLI/SLO) 조대협 (http://bcho.tistory.com) 이글은 앞글 (https://bcho.tistory.com/1327)과 연결 됩니다. 앞에 까지 SRE가 무엇이고, SRE가 하는일은 무엇이며, 어떻게 그 일을 수행 하는지에 대해서 알아보았다. SRE 프랙티스 에서는 의사 결정을 데이터에(data based decision) 따라 하기 때문에, 데이타 즉 지표를 정의하는 것이 중요하다. 그러면 SR..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>운영 &amp; Devops</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1328</guid>
<comments>https://bcho.tistory.com/1328#entry1328comment</comments>
<pubDate>Sun, 12 May 2019 00:39:12 +0900</pubDate>
</item>
<item>
<title>SRE #2-SRE는 어떻게 일하는가?</title>
<link>https://bcho.tistory.com/1327</link>
<description>SRE는 어떻게 일하는가? 조대협 (http://bcho.tistory.com) 이글은 앞의 글 &quot;SRE/DEOPS의 개념과 SRE는 무엇을 하는가?&quot; (https://bcho.tistory.com/1325) 와 연결된 글입니다. How SRE does Devops? 그럼 SRE들은 이런한 일들을 어떤 방법으로 수행할까? 앞에서 SRE가 해야 하는 일에 대해서 설명하면서 각각에 대해서 일부를 언급했지만, 다시 SRE가 해야하는 일을 하기 위해서는 어..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>운영 &amp; Devops</category>
<category>DevOps</category>
<category>Site Reliability engineering</category>
<category>SRE</category>
<category>SRE How to</category>
<category>강좌</category>
<category>데브옵스</category>
<category>소개</category>
<category>조대협</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1327</guid>
<comments>https://bcho.tistory.com/1327#entry1327comment</comments>
<pubDate>Fri, 10 May 2019 23:42:24 +0900</pubDate>
</item>
<item>
<title>AutoEncoder vs Variant AutoEncoder</title>
<link>https://bcho.tistory.com/1326</link>
<description>AutoEncoder vs Variant AutoEncoder 조대협 (http://bcho.tistory.com) Abnormal AutoEncoder는 입력값을 기반으로 여기서 특징을 뽑아내고, 뽑아낸 특징으로 다시 원본을 재생하는 네트워크이다. 이미지 합성이나 압축, Abnormal Detection 등 여러 유스케이스에 사용이 될 수 있지만, 특히 추출된 특징 (latent coding)은 데이타의 특징을 이해하는데도 유용하게 사용될 수 있다..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>머신러닝</category>
<category>abnormally detection</category>
<category>AE</category>
<category>AE vs VAE</category>
<category>auto encoder</category>
<category>latent coding</category>
<category>Latent space</category>
<category>latent space visualization</category>
<category>VAE</category>
<category>Variant auto encoder</category>
<category>딥러닝</category>
<category>비교</category>
<category>소개</category>
<category>오토인코더</category>
<category>이상거래 감지</category>
<category>이상거래 검출</category>
<category>차이</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1326</guid>
<comments>https://bcho.tistory.com/1326#entry1326comment</comments>
<pubDate>Fri, 10 May 2019 22:30:00 +0900</pubDate>
</item>
<item>
<title>SRE - #1 SRE/DEVOPS의 개념과 SRE는 무엇을하는가?</title>
<link>https://bcho.tistory.com/1325</link>
<description>Site Reliability Engineering(SRE) #1 SRE/DEVOPS의 개념 조대협 (http://bcho.tistory.com) 배경 Devops는 운영팀과 개발팀을 하나의 팀으로 묶어놓고 전체적인 개발 사이클을 빠르게 하고자 하는 조직 구조이자 문화이다. 이 Devops라는 컨셉이 소개된지는 오래되었지만, Devops의 개념 자체는 명확하지만 이 Devops를 어떻게 실전에 적용할것인 가는 여전히 어려운 문제였다.(예전에 정리한 ..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>운영 &amp; Devops</category>
<category>Automation</category>
<category>DevOps</category>
<category>google</category>
<category>Site Reliability engineering</category>
<category>SRE</category>
<category>강좌</category>
<category>구글</category>
<category>데브옵스</category>
<category>문화</category>
<category>설명</category>
<category>소개</category>
<category>자동화</category>
<category>조대협</category>
<category>코드</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1325</guid>
<comments>https://bcho.tistory.com/1325#entry1325comment</comments>
<pubDate>Fri, 10 May 2019 01:05:59 +0900</pubDate>
</item>
<item>
<title>구글의 Devops 운영 모델 SRE (Site Reliability Engineering)</title>
<link>https://bcho.tistory.com/1324</link>
<description>SRE는 구글의 Devops의 프랙티스 로 구글의 서비스에 대한 배경과 철학을 읽을 수 있다. SRE의 기본 사상중의 하나는 서비스의 안정성이 완벽할 수 없으며, (아니 완벽하지 않게 만들며) 장애를 허용하는 모델이다. 고 가용/고 성능 시스템을 만들기 위해서는 그만큼 많은 개발에 대한 노력이 소요되는데, 이로 인해서 기능 개발에 대한 속도가 느려지기 때문에, 사용자가 납득할만한 수준의 가용성을 제공하되 개발의 속도를 유지하는 철학이다. 배경을 살펴..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>운영 &amp; Devops</category>
<category>DevOps</category>
<category>google</category>
<category>Site Reliabilty Engineering</category>
<category>SRE</category>
<category>구글</category>
<category>데브옵스</category>
<category>운영</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1324</guid>
<comments>https://bcho.tistory.com/1324#entry1324comment</comments>
<pubDate>Fri, 03 May 2019 00:18:16 +0900</pubDate>
</item>
<item>
<title>서버리스 오픈소스 - knative #2 비동기 처리를 위한 Eventing</title>
<link>https://bcho.tistory.com/1323</link>
<description>Serveless를 위한 오픈소스 KNative #2 Eventing 조대협 (http://bcho.tistory.com) knative의 다른 모듈로써는 비동기 메세지 처리를 위한 eventing 이라는 모듈이 있다. 카프카나, 구글 클라우드 Pub/Sub, AWS SQS와 같은 큐에서 메시지를 받거나 또는 Cron과 같은 타이머에서 이벤트가 발생하면 이를 받아서 처리할 수 있는 비동기 메커니즘을 제공하는 모듈이라고 보면 된다.  메시지 큐나 cr..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>도커 &amp; 쿠버네티스</category>
<category>async</category>
<category>event</category>
<category>eventing</category>
<category>KNative</category>
<category>kubernetess</category>
<category>serverless</category>
<category>강좌</category>
<category>비동기</category>
<category>서버리스</category>
<category>소개</category>
<category>이벤트</category>
<category>이벤팅</category>
<category>조대협</category>
<category>쿠버네티스</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1323</guid>
<comments>https://bcho.tistory.com/1323#entry1323comment</comments>
<pubDate>Wed, 24 Apr 2019 23:39:52 +0900</pubDate>
</item>
<item>
<title>서버리스 오픈소스 - knative #1 소개 &amp; Serving</title>
<link>https://bcho.tistory.com/1322</link>
<description>Serveless를 위한 오픈소스 KNative 조대협(http://bcho.tistory.com) 배경 근래에 들어서 컨테이너를 사용한 워크로드 관리는 쿠버네티스 de-facto 표준이 되어가고 있는데, 쿠버네티스 자체가 안정되어가고 있지만, 이를 현업에 적용하기 위해서는 아직까지 여러가지 챌린지가 있다. 컨테이너 기반의 쿠버네티스 서비스가 지향하는 바는, 셀프서비스 기반의 데브옵스 모델로 인프라와 이를 자동화하는 플랫폼을 인프라엔지니어가 개발하여..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>도커 &amp; 쿠버네티스</category>
<category>AWS</category>
<category>Istio</category>
<category>k native</category>
<category>KNative</category>
<category>lamda</category>
<category>serverless</category>
<category>serving</category>
<category>강좌</category>
<category>람다</category>
<category>서버리스</category>
<category>소개</category>
<category>오픈소스</category>
<category>조대협</category>
<category>컨테이너</category>
<category>쿠버네티스</category>
<category>튜토리얼</category>
<category>표준</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1322</guid>
<comments>https://bcho.tistory.com/1322#entry1322comment</comments>
<pubDate>Tue, 23 Apr 2019 21:48:26 +0900</pubDate>
</item>
<item>
<title>로깅 시스템 #7-스택드라이버로 로그 백앤드 구축하기</title>
<link>https://bcho.tistory.com/1321</link>
<description>스택 드라이버 로그로 로그 백앤드 구축하기 조대협 (http://bcho.tistory.com) 앞의 글에서까지 로그를 남기는 방법에 대해서 알아보았다. 이번 글에서는 로컬에 남긴 로그를 중앙으로 수집하여 모니터링할 수 있는 도구에 대해서 알아보고자 한다. 보통 로그 시스템은 오픈소스 기반의 ELK (Elastic search + Logstash + Kibana)를 많이 사용한다. 좋은 시스템이기는 하지만 러닝 커브가 있고, 구축과 운영에 노력이 들..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>대용량 아키텍쳐</category>
<category>Elastic Search</category>
<category>ELK</category>
<category>fluentd</category>
<category>Log</category>
<category>logging</category>
<category>Stack driver</category>
<category>구글</category>
<category>로그</category>
<category>로깅 시스템</category>
<category>스택드라이버</category>
<category>에이전트</category>
<category>조대협</category>
<category>클라우드</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1321</guid>
<comments>https://bcho.tistory.com/1321#entry1321comment</comments>
<pubDate>Mon, 15 Apr 2019 19:45:05 +0900</pubDate>
</item>
<item>
<title>티스토리가 개편후 더 이상한듯</title>
<link>https://bcho.tistory.com/1320</link>
<description>티스토리가 근래에 오랜만에 개편이 되고, 에디터도 대폭 개선이된데다가 마크다운 에디터까지 지원하는 것은 좋은데, 사용자 경험을 그전 호환성을 유지해야 하는데, 이번에는 좀 문제가 있지 않나 싶다. 티스토리 에디터가 너무 불편해서 글쓰기가 어려워서 그간 여러 방법을 고민하다가 내린 결론이 구글닥스를 이용해서 글을 다 쓴 후에, 복붙으로 붙이는 방식을 사용했는데, 잘되다가 얼마전 부터, 글을 써 붙이니 포맷이 모조리 깨져 버린다. 코드블록도 프로그램언어..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<author>조대협</author>
<guid>https://bcho.tistory.com/1320</guid>
<comments>https://bcho.tistory.com/1320#entry1320comment</comments>
<pubDate>Sun, 14 Apr 2019 22:49:16 +0900</pubDate>
</item>
<item>
<title>로깅 시스템 #6-Spring Boot에서 Zipkin을 이용한 분산 시스템 로깅</title>
<link>https://bcho.tistory.com/1319</link>
<description>Spring Boot + slf4j + MDC + Zipkin 조대협 (http://bcho.tistory.com) 아래 예제는 MDC를 이용해서 여러 메서드간의 컨텍스트를 연결하는 것을 확장해서, 서로 다른 프로세스와 서버간에 로그를 연결하는 방법이다. 서로 다른 프로세스 또는 서버간에 컨텍스트를 전달하려면 HTTP 헤더등을 통해러 리모트로 컨텍스트를 전달해야 하는데, 이를 가능하게 하는 오픈소스로 Zipkin이 있다. (자세한 설명은 이글을 참고..&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:inline-block;width:468px;height:60px&quot;
     data-ad-client=&quot;ca-pub-9839391690674707&quot;
     data-ad-slot=&quot;4153002673&quot;
        &gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;</description>
<category>대용량 아키텍쳐</category>
<category>Log</category>
<category>logging</category>
<category>MicroService</category>
<category>MSA</category>
<category>slf4j</category>
<category>springboot</category>
<category>zipkin</category>
<category>로깅</category>
<category>마이크로서비스</category>
<category>분산로그</category>
<author>조대협</author>
<guid>https://bcho.tistory.com/1319</guid>
<comments>https://bcho.tistory.com/1319#entry1319comment</comments>
<pubDate>Sun, 14 Apr 2019 22:42:29 +0900</pubDate>
</item>
</channel>
</rss>