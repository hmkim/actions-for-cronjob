<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>준환이형님쩜넷 - 따뜻하게 즐기는 코딩 한 잔~♪</title>
<link>https://topnanis.tistory.com/</link>
<description>Jun-hwan KIM. SW engineer
(topnanis@naver.com)</description>
<language>ko</language>
<pubDate>Tue, 14 May 2019 20:37:55 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>준환이형님</managingEditor>
<image>
<title>준환이형님쩜넷 - 따뜻하게 즐기는 코딩 한 잔~♪</title>
<url>https://tistory3.daumcdn.net/tistory/527101/attach/5b4a1828d18140878210ef1eca1f67d9</url>
<link>https://topnanis.tistory.com</link>
<description>Jun-hwan KIM. SW engineer
(topnanis@naver.com)</description>
</image>
<item>
<title>C# - 표준 rand()함수보다 유용한 랜덤 생성 알고리즘 – MT, WELL</title>
<link>https://topnanis.tistory.com/226</link>
<description>&lt;p&gt;게임 프로그래밍중 좋은 포스팅이 있어 공유합니다&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;출처 : 알콜코더 : http://www.gamedevforever.com/114&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;article&quot; style=&quot;width: 740px; margin: 5px 5px 0px; overflow: hidden; font-family: Dotum, Verdana, AppleGothic, sans-serif; color: rgb(102, 102, 102);&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;안녕하세요. 알콜코더 민군입니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;현재 제작 중인 게임에서, 랜덤 시드 값을 일치 시켜서, 랜덤 결과를 서로 다른 클라이언트끼리 동기화 시키는 작업을 진행 하였습니다. 랜덤 시드값만 서로 일치시키면, 이후에 생성되는 랜덤 함수의 결과값들은 모두 일치가 되기 때문에, 예전에 스타크래프트와 같은 패키지 게임에서 자주 사용했던 테크닉입니다. ^^; 서로 다른 클라이언트끼리 처음 시드값만 일치 시키면, 이후의 랜덤값은 정해져 있기 때문에, 그 랜덤값을 사용한 이벤트등의 동기화에 사용하는 것이죠.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;이런 테크닉은 패키지 게임 시절에는 리플레이 저장이나 네트워크 동기화등에서 상당히 많이 사용하였습니다. 하지만 온라인 게임으로 넘어오면서, 대부분 서버에서 랜덤값을 직접 생성하여 넘겨주기 때문에, 이 테크닉 쓸일이 거의 없었는데… 이번 상황은 랜덤값이 게임의 결과에 전혀 영향을 끼치 않고, 단지 연출에만 영향을 끼치기 때문에 이 테크닉을 사용하기로 하였습니다. (서버 부담을 줄여달라는 서버쪽의 간절한 요청 때문에.. 아흑..OTL)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;일반적으로 랜덤 함수라면 C++ 표준 rand() 함수를 사용하게 됩니다. 뭐.. 일반적인 랜덤값을 사용하는 경우에는 사실 이 표준 함수를 사용해도, 별 문제는 없습니다. ^^; 하지만 위와 같은 테크닉을 사용할 때는 rand() 함수를 사용하면 안됩니다!&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;왜냐하면, C++의 표준 rand() 함수는 아래와 같은 약간의 문제점을 가지고 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse; background-color: rgb(253, 233, 217);&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 637px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding-left: 7px; padding-right: 7px; border: 0.5pt solid;&quot;&gt;&lt;ol style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;&lt;div&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;rand() 함수의 분포는 그리 고르지 않다. 특히 작은 표본을 사용할때는 더욱 그렇다.&amp;nbsp;&lt;br /&gt;&lt;/strong&gt;즉, 이말은 1~10까지 랜덤을 1억번쯤 돌리면, 확률이 다들 비슷하게 나오긴 하지만, 10번 정도만 돌릴때에는 1 하나만 10번이 나온다거나 하는 가능성이 있다는 것입니다.&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;rand() 함수는 전역 함수이다. 어디서든 사용이 가능하다&lt;br /&gt;&lt;/strong&gt;이 함수는 표준 함수이기 때문에, 코드의 어디에서도 호출이 가능합니다. 그래서 호출 되는 경우를 제어할 수 가 없습니다.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/160182394F48B84114&quot; style=&quot;border: 0px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;color: rgb(31, 73, 125); font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;&amp;lt; 즉 이런 기적의 확률이 나올수도 있는거임.. ㅠ.ㅠ &amp;gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;저의 경우에 문제가 되는 것은 1번이 아니라, 2번입니다. 같은 랜덤 시드값으로 서로 다른 클라이언트에서, 싱크를 맞추기 위해서는 랜덤 호출 횟수가 정확히(!) 일치하여야 합니다! 내가 랜덤함수를 5번 호출했으면, 상대방도 5번 호출해야 같은 결과 값이 나와서 싱크가 일치하게 됩니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;그런데 만약? 내가 작성한 코드가 아니라 어딘가 다른 코드에서 그것도 한쪽 클라이언트에서만 그 사이에 rand()를 호출하게 되면 어떻게 될까요? 넵. 당연히 그 다음부터는 모든 싱크가 아작이 나게됩니다…(그리고 이 경우에는 어디서부터 문제가 발생 했는지 찾는 것도 거의 불가능)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;전역 함수라는 특징 때문에, 어디서 어떻게 불리울지 모르기 때문에, 언제 호출 횟수가 어긋날지 모른다는 문제가 발생하기 때문에, 랜덤 시드로 씽크를 맞추는 이 테크닉에서는 rand() 함수를 사용하는 것은 불가능 합니다. (내 코드에서는 절대 그럴리가 없어! 라고 해도… 다른 사람이 작성한 코드에서 과연 부르지 않는다는 보장이 있을까요…)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;그래서 따로 랜덤 생성 클래스를 만들어 사용하게 됩니다. 랜덤 클래스를 만들고 그 인스턴스만을 사용하게 되면, 호출 횟수가 어긋나는 문제를 해결할 수 있으니까요. ^^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;저의 경우가 바로 이런 경우라서, 랜덤 생성 알고리즘을 한번 찾아 봤습니다. 랜덤 생성 알고리즘은 &quot;난수 생성기(Random Number Generator)&quot;, 혹은 &quot;의사 난수 생성기&quot; 등으로 불리웁니다. (그냥 저는 편의를 위해.. 이후 '랜덤 생성기'라고 칭하겠습니다. 이게 걍 편해요…)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;이렇게 따로 랜덤 생성기를 이용해서, 랜덤 생성 클래스를 만들어 사용하면, 위와 같이 코드의 다른곳에서 랜덤값이 불리우는 경우를 제어할 수 있습니다. 물론 그렇다고 랜덤 생성 알고리즘을 혼자 고급 수학책이나 물리책 펴놓고 만들어서 쓰라는 이야기는 아닙니다. 친절하게도 이런 알고리즘은 전문 수학자 분들이 편하게 갖다 쓸수 있도록 편하고도 멋지게 만들어 두었습니다. (아이구~ 이런 감사할때가….)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕;&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;이런 랜덤 생성기중에서 가장 유명하고 널리 쓰이는 알고리즘이 바로&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 102, 255); font-size: 12pt;&quot;&gt;&lt;strong&gt;[메르센 트위스터(MT.Mersenne Twister)]&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;와&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(0, 102, 255); font-size: 12pt;&quot;&gt;&lt;strong&gt;[WELL]&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;이라는 랜덤 생성기입니다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;그리고 이 랜덤 생성기들은 위와 같은 테크닉에 사용할 수 있는 용도 외에도 다음과 같은 뛰어난 장점들을 가지고 있습니다&lt;/span&gt;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse; background-color: rgb(219, 229, 241);&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 637px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding-left: 7px; padding-right: 7px; border: 0.5pt solid;&quot;&gt;&lt;ol style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;&lt;div&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;표준 함수보다 랜덤 분포가 훨씬 고르다&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;표준 함수의 경우 2^32승의 period를 가지는데 반해, MT의 경우는 2^19937-1를 가집니다. 그리고 623차원까지 동일분포 되어 있습니다. (자세한건 아래 링크 참조)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;표준 함수보다 훨씬 속도가 빠르다.&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;MT의 경우에 비트 연산만으로 구현되어 있어서, 표준 rand()보다 약 4배가 빠르다고 합니다. 그리고 WELL 같은 경우에는 MT보다 40%가 더 빠르다고 합니다.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 637px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding-left: 7px; padding-right: 7px; border: 0.5pt solid;&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 0px; padding: 0px; font-size: 1.6em;&quot;&gt;&lt;span style=&quot;color: black; font-size: 19pt;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: black; font-size: 10pt;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;위키백과&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;우리&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;모두의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;백과사전&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: black; font-size: 11pt;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(Mersenne Twister)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/wiki/1997%EB%85%84&quot; title=&quot;1997년&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;1997&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;년에&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%A7%88%EC%B8%A0%EB%AA%A8%ED%86%A0_%EB%A7%88%EC%BD%94%ED%86%A0&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;마츠모토 마코토 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%A7%88%EC%B8%A0%EB%AA%A8%ED%86%A0_%EB%A7%88%EC%BD%94%ED%86%A0&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;마츠모토 마코토 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;마츠모토&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;마코토&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: 바탕;&quot;&gt;松本&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 바탕;&quot;&gt;眞&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;와&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%8B%88%EC%8B%9C%EB%AC%B4%EB%9D%BC_%EB%8B%A4%EC%BF%A0%EC%A7%80&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;니시무라 다쿠지 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%8B%88%EC%8B%9C%EB%AC%B4%EB%9D%BC_%EB%8B%A4%EC%BF%A0%EC%A7%80&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;니시무라 다쿠지 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;니시무라&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;다쿠지&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: 바탕;&quot;&gt;西村&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: 바탕;&quot;&gt;拓士&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;개발한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EC%9C%A0%EC%82%AC%EB%82%9C%EC%88%98_%EC%83%9D%EC%84%B1%EA%B8%B0&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;유사난수 생성기 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;유사난수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기&lt;span style=&quot;color: black;&quot;&gt;이다&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A9%94%EB%A5%B4%EC%84%BC_%ED%8A%B8%EC%9C%84%EC%8A%A4%ED%84%B0&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: black;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;동일한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;저자들이&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;개발한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=TT800&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;TT800 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;TT800&lt;/span&gt;&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;개선판으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;기존&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기들의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;문제점들을&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;피하면서&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;매우&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;질이&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;좋은&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수를&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;빠르게&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성할&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있도록&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;설계되었다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: black; font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;이름은&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;반복&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;주기가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A9%94%EB%A5%B4%EC%84%BC_%EC%86%8C%EC%88%98&quot; title=&quot;메르센 소수&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A9%94%EB%A5%B4%EC%84%BC_%EC%86%8C%EC%88%98&quot; title=&quot;메르센 소수&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;소수&lt;span style=&quot;color: black;&quot;&gt;인&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;데에서&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;유래했다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;그&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;속도와&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;품질&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;때문에&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;점점&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;많은&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;곳에서&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;채택되고&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있으며&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;흔히&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;주기가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 'Times New Roman';&quot;&gt;2&lt;sup&gt;19937&lt;/sup&gt;&amp;nbsp;− 1&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;인&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;MT19937&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;을&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;사용한다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;. MT19937&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;과&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;같으나&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성해&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;내는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;32&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;비트가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;아닌&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;64&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;비트인&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;MT19937-64&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;도&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;쓰이며&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/2006%EB%85%84&quot; title=&quot;2006년&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;2006&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;년에&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;동일한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;저자들이&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;발표한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/wiki/SIMD&quot; title=&quot;SIMD&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;SIMD&lt;/span&gt;&lt;/a&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;기반&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;MT19937&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;에&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;비해&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;대략&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;두&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;배&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;정도&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;빠른&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;것으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;알려져&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: black; font-size: 11pt;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;품질에도&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;불구하고&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;메르센&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;트위스터는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EC%95%94%ED%98%B8%ED%95%99%EC%A0%81%EC%9C%BC%EB%A1%9C_%EC%95%88%EC%A0%84%ED%95%9C_%EC%9C%A0%EC%82%AC%EB%82%9C%EC%88%98_%EC%83%9D%EC%84%B1%EA%B8%B0&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;암호학적으로 안전한 유사난수 생성기 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EC%95%94%ED%98%B8%ED%95%99%EC%A0%81%EC%9C%BC%EB%A1%9C_%EC%95%88%EC%A0%84%ED%95%9C_%EC%9C%A0%EC%82%AC%EB%82%9C%EC%88%98_%EC%83%9D%EC%84%B1%EA%B8%B0&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;암호학적으로 안전한 유사난수 생성기 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;암호학적으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;안전한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;유사난수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기&lt;span style=&quot;color: black;&quot;&gt;가&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;아니다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;즉&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;특성&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;주기&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;범위&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;을&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;알고&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있을&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;때&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;유한한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;이&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;경우&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;624&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;개&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;만으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;현재&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;상태를&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;알아&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;낼&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있으며&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;그&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;뒤에&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;나올&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수를&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;예측해&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;낼&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;암호학적으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;안전한&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;유사난수&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기를&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;얻기&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;위해서는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98&quot; title=&quot;해시 함수&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98&quot; title=&quot;해시 함수&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(11, 0, 128);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;해시&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;함수&lt;span style=&quot;color: black;&quot;&gt;를&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;사용해야&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;하지만&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;난수의&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;속도가&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;낮아진다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;또는&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%B8%94%EB%A3%B8_%EB%B8%94%EB%A3%B8_%EC%8A%99&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;블룸 블룸 슙 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;color: rgb(165, 88, 88);&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;블룸&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;블룸&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;슙&lt;/span&gt;&lt;span style=&quot;color: black;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;(BBS)&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;과&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;같이&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;암호학적으로&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;안전하게&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;설계된&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;생성기를&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;쓸&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;수도&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;있다&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ko.wikipedia.org/w/index.php?title=%EB%B8%94%EB%A3%B8_%EB%B8%94%EB%A3%B8_%EC%8A%99&amp;amp;action=edit&amp;amp;redlink=1&quot; title=&quot;블룸 블룸 슙 (없는 문서)&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&amp;nbsp;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A9%94%EB%A5%B4%EC%84%BC_%ED%8A%B8%EC%9C%84%EC%8A%A4%ED%84%B0&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&amp;lt; 출처 : 위키피디아 &amp;gt;&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;메르센 트위스터는 현재도 가장 널리 사용되고 있는 랜덤 생성기입니다&lt;strong&gt;. C++에서는 Boost에도 이 MT 랜덤 생성기가 구현 되어 있습니다&lt;/strong&gt;. 또한&amp;nbsp;&lt;strong&gt;MATLAB, Ruby, Python&lt;/strong&gt;등의 언어에서도 기본 난수 알고리즘으로 채택되어서 사용 되고 있습니다. 뭐 물론 단점이 없는 건 아니지만, 장점이 훨씬 더 크기 때문에 표준으로 채택이 되었겠죠. ^^&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;그리고 가장 큰 장점은 특별히 따로 구현하지 않아도, Boost에 포함되어 있기 때문에, Boost만 있다면 바로 사용이 가능하다는 장점이 있습니다. 사용 방법에 관해서는 하단의 참조 링크에서 확인하실 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕;&quot;&gt;&lt;span style=&quot;font-size: 24pt;&quot;&gt;&lt;strong&gt;WELL&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;WELL은 위 MT의 디자이너가 10년후에 고안한 난수 발생 알고리즘 입니다. 그의 주장에 따르면 MT보다 40% 빠르고 코드도 더 간단합니다. WELL은 분포도에 따라서 WELL512, WELL1024, WELL19947, WELL44497의 종류가 있습니다. 숫자가 클수록 분포도가 높긴 하지만, 게임에서 사용하기엔 512나 1024만으로도 충분할 것 같습니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;WELL의 구현 코드는&lt;a href=&quot;http://www.iro.umontreal.ca/~panneton/WELLRNG.html&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&amp;nbsp;이곳에서 받을 수 있습니다&lt;/a&gt;. 실제로 보면 정말 구현은 간단합니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;아래가 WELL512의 구현 코드입니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/120583384F48B84134&quot; style=&quot;border: 0px;&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;이게 다입니다. Period는 이름 그대로 2^512입니다. 그렇다 해도 일반 PC로 저걸 세는데 10^100년이 걸린다고 하는군요. 초나 분이 아니라 년 말입니다. (googol years라고 부른다고 하는군요)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;사용법은 위의 state만 적절히 초기화 해주고, 함수를 호출하면 32비트 정수(난수)가 리턴됩니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: 나눔고딕; font-size: 11pt;&quot;&gt;간단한 시물레이터로 두 난수 발생기를 시뮬레이팅 해 보았을 때의 차이를 보여드리겠습니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://bingsoo.com/blog/wp-content/uploads/2010/07/rand.png&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/195A233C4F48B84210&quot; style=&quot;border: 0px;&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;br /&gt;&lt;span id=&quot;callbacknestwwwgamedevforevercom1148152&quot; style=&quot;width: 1px; height: 1px; float: right;&quot;&gt;&lt;/span&gt;C/C++의 rand함수&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://bingsoo.com/blog/wp-content/uploads/2010/07/well512.png&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/171612364F48B84236&quot; style=&quot;border: 0px;&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;br /&gt;WELL512 알고리즘&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://bingsoo.com/blog/?p=3246&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&amp;lt;이미지 출처 : binsoo Blog &amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;일반적으로 게임 개발할때는 이런 랜덤 생성기까지 필요 하지 않을지도 모릅니다. 그러나 MMORPG와 같이 랜덤이 게임의 밸런스에 큰 영향을 끼치는 경우에는, 서버 측에서 이런 고성능의 랜덤 생성기가 필요한 경우가 많습니다. 유저나 해커가 랜덤값을 함부로 예측해서는 안되니까요. ^^; 그리고 저의 경우 처럼 랜덤 시드를 이용해서 이벤트 동기화를 맞추는 경우에는 전역 함수인 rand()를 사용할 수 없기 때문에 꼭 이런 랜덤 함수가 별도로 필요합니다. 그런 경우에 굳이 이런 좋은 난수 알고리즘들을 놔두고 새로 짜는 고생은 안하는게 낫겠죠.(그렇다고 내가 만든 알고리즘이 저것보다 좋을리는 택도 없을 테니…=ㅅ=;)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 637px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;padding-left: 7px; padding-right: 7px; border: 0.5pt solid;&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&amp;lt; 참고 자료 &amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EB%A9%94%EB%A5%B4%EC%84%BC_%ED%8A%B8%EC%9C%84%EC%8A%A4%ED%84%B0&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;위키피디아 : 메르센 트위스터&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&amp;nbsp;[한글]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://bingsoo.com/blog/?p=3246&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 0px; padding: 0px; font-size: 1.2em; line-height: 1.2em;&quot;&gt;&lt;span style=&quot;color: blue; font-family: 나눔고딕; font-size: 11pt; text-decoration: underline;&quot;&gt;&lt;a href=&quot;http://bingsoo.com/blog/?p=3246&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;Generating random numbers in game.&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;[한글]&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://createcode.tistory.com/14&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;Boost 라이브러리의 랜덤 함수 이용&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&amp;nbsp;[한글]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.iro.umontreal.ca/~panneton/WELLRNG.html&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;WELL Random number generator&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: black; font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;&amp;nbsp;[영문]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.lomont.org/Math/Papers/2008/Lomont_PRNG_2008.pdf&quot; style=&quot;color: rgb(90, 81, 148);&quot;&gt;&lt;span style=&quot;font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;Random Number Generation&lt;/strong&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: black; font-family: 나눔고딕; font-size: 11pt;&quot;&gt;&lt;strong&gt;&amp;nbsp;[영문]&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>3_ 담백한알고리즘</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/226</guid>
<comments>https://topnanis.tistory.com/226#entry226comment</comments>
<pubDate>Fri, 11 Apr 2014 22:21:55 +0900</pubDate>
</item>
<item>
<title>리팩토링(Software Cord Refactoring)</title>
<link>https://topnanis.tistory.com/225</link>
<description>&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;이번에 다녀온 교육에 대한 잘 정리된&amp;nbsp;내용이 있어 공유합니다&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;- 출처 : 최성민님 블로그 (http://forclack.egloos.com/523040)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;- 그림출처 : 돼지고기님 블로그 (http://please261.tistory.com/entry/%EB%A6%AC%EB%B7%B0-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%EC%BD%94%EB%93%9C-%ED%92%88%EC%A7%88%EC%9D%84-%EA%B0%9C%EC%84%A0%ED%95%98%EB%8A%94-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%82%AC%EA%B3%A0%EB%B2%95-%EB%A6%AC%EB%B7%B0)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234); text-align: center;&quot;&gt;&lt;img id=&quot;irc_mi&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/1158B43F517B536438&quot; class=&quot;irc_mut&quot; width=&quot;488&quot; height=&quot;619&quot; style=&quot;margin-top: 3px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;1. Refactoring 개요&lt;br /&gt;&lt;br /&gt;&amp;nbsp;1-1 Refactoring 의 정의&lt;br /&gt;&amp;nbsp;&amp;nbsp;리팩토링은 소프트웨어 시스템의 원래 기능은 그대로 두면서 내부의 구조를 개선하는 것을 의미한다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;그것은 버그의 가능성을 최소화하기 위해서 코드를 깔끔하게 정리하는 엄정한 방법이다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;한마디로 리팩토링을 한다는 것은 이미 작성된 코드의 설계를 나중에 개선하는 것이다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&quot;코드가 작성된 후에 디자인을 개선한다.&quot;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;1-2 왜 Refactoring을 해야 하는가&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링은 소프트웨어의 디자인을 개선시킨다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링은 소프트웨어를 더 이해하기 쉽게 만든다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링은 버그를 찾도록 도와준다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링은 프로그램을 빨리 작성하도록 도와준다.&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&quot;나는 훌륭한 프로그래머는 아니다. 그냥 훌륭한 습관을 가지고 있는 좋은 프로그래머이다. - Kent Beck&quot;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;1-3. 언제 Refactoring을 해야 하는가&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 삼진 규칙(세 번째로 비슷한 것을 하게 되면 리팩토링 한다.).&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 기능을 추가할 때 리팩토링을 하라.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 버그를 수정해야 할 때 리팩토링을 하라.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 코드 검토(code review)를 할 때 리팩토링을 하라.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;여기서 또 Kent Beck의 '리팩토링이 작동하는 이유'라는 글이 나온다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&quot;프로그램은 두 종류의 가치를 가지고 있는데 하나는 오늘 당장을 위한 것, 하나는 내일을 위한 것이라고 한다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;오늘 할일은 확실하지만 내일 할일은 알 수 없다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;하지만 오늘만을 위해서 일한다면 내일은 전혀 일을 할 수 없을 지도 모른다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;리팩토링은 이런 상황에서 빠져 나오는 방법이다. &quot;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;1-4. Refactoring을 할 때의 문제&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 데이터베이스&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 인터페이스 변경&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링이 어려운 디자인 변경&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 언제 리팩토링을 하지 말아야 하는가?&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;1-5. Refactoring과 디자인&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;1.5.1 리팩토링이 없다면?&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- 초기 디자인을 할 때 완벽하게 하려고 많은 시간과 노력을 들이게 된다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- 다시 디자인을 변경하는 것은 비용이 너무 크다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;1.5.2 리팩토링의 장점&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- 초기 디자인을 할 때 부담이 없다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- 단순한 디자인을 가지고 시작하게 된다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&quot;시스템이 어떻게 돌아가는지 정확하게 알고 있다 하더라도,&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp; 추측만 하지 말고 실제로 퍼포먼스를 측정해보라.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp; 무엇인가 배울 것이고, 십중팔구는 추측이 틀렸을 것이다.&quot;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;1-6. Refactoring과 퍼포먼스&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 소프트웨어를 더 이해하기 쉽게 만들기 위한 수정은 종종 프로그램을 더 느리게 하기도 한다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링을 해 놓으면 코드가 잘 분해되어 있으므로 기능을 더 빨리 추가할 수 있어 퍼포먼스 튜닝에만 집중할 수 있도록 한다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링을 해 놓으면 프로그램이 잘 분해되어 있으므로 퍼포먼스 분석시 좀 더 세밀한 분석이 가능하도록 한다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링을 하는 동안 단기적으로는 소프트웨어를 느리게 하지만, 최적화 단계에서는 소프트웨어를 튜닝하는 것을 더 쉽게 한다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;2. Bad Smells in Code&lt;br /&gt;&lt;br /&gt;&amp;nbsp;2.1 리팩토링이 동작하는 매커니즘을 아는 것 만큼 중요한 것은, 언제 리팩토링을 적용할까 하는 것이다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;2.2 어떠한 리팩토링을 해야 할 지 확신할 수 없을때 이 부분을 참조하라.&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 중복된 코드 (Duplicated Code)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 긴 메소드 (Long Method)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 거대한 클래스 (Large Class)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 긴 파라미터 리스트 (Long Parameter List)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 확산적 변경 (Divergent Change)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 산탄총 수술 (Shotgun Surgery)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 기능에 대한 욕심 (Feature Envy)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 데이터 덩어리 (Data Clumps)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 기본타입에 대한 강박관념(Primitive Obsession)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Switch Statements&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 게으른 클래스 (Lazy Class)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 추측성 일반화 (Speculative Generality)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 임시 필드 (Temporary Field)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Message Chains&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Middle Man&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 다른 인터페이스를 가진 대체 클래스 (Alternative Classes with Different Interfaces)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 불완전한 라이브러리 클래스 (Incomplete Library Class)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Data Class&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 거부된 유산 (Refused Bequest)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 주석 (Comments)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;3. Refactoring과 Test Code (by Kent Beck)&lt;br /&gt;&amp;nbsp;3.1 선행조건&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 리팩토링을 위한 필수적인 선행조건은 견고한 테스트를 하는 것이다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 좋은 테스트는 프로그래밍 속도를 비약적으로 향상시킨다는 것을 발견했다. ( Kent Beck )&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;3.2 The Value of Self-testing Code ( Kent Beck )&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 모든 테스트가 자동화되었는지 확인하고 테스트들의 결과를 테스트 코드 스스로 체크하도록 해라.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- test suite는 버그를 찾는 시간을 줄여주는 강력한 버그 탐지기이다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 테스팅 코드는 Extreme Programming 의 중요한 부분이다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;4. Refactoring 방법&lt;br /&gt;&amp;nbsp;4-1. 메소드 정리 (Composing Methods)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Extract Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;그룹으로 함께 묶을 수 있는 코드 조각이 있으면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 코드의 목적이 잘 드러나도록 메소드의 이름을 지어 별도의 메소드로 뽑아낸다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; void printOwing( double amount ) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;printBanner();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;// print details&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println( &quot;name:&quot; + _name);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println( &quot;amount&quot; + amount);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; void printOwing(double amount){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;printBanner();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;printDetails( amount );&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; void printDetails (double amount){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println( &quot;name:&quot; + _name);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println( &quot;amount&quot; + amount);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Inline Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;메소드의 몸체가 메소드의 이름 만큼이나 명확할 때는&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 호출하는 곳에 메소드의 몸체를 넣고, 메소드를 삭제하라.&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int getRating() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (moreThanFiveLateDeliveries())?2:1;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boolean moreThanFiveLateDeliveries(){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _numberOfLateDeliveries &amp;gt; 5;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int getRating(){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (_numberOfLateDeliveries&amp;gt;5)?2:1;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Inline Temp&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;간단한 수식의 결과값을 가지는 임시변수가 있고, 그 임시변수가 다른 리팩토링을 하는데 방해가 된다면,&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 이 임시변수를 참조하는 부분을 모두 원래의 수식으로 바꿔라.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double basePrice = anOrder.basePrice();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (basePrice &amp;gt; 1000)&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (anOrder.BasePrice() &amp;gt; 1000)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Temp with Query&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;어떤 수식의 결과값을 저장하기 위해서 임시변수를 사용하고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 수식을 뽑아내서 메소드로 만들고, 임시변수를 참조하는 곳을 찾아 모두 메소드 호출로 바꾼다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 새로 만든 메소드는 다른 메소드에서도 사용될 수 있다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double basePrice = _quantity * _itemPrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( basePrice &amp;gt; 1000)&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return basePrice * 0.95;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return basePrice&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( basePrice() &amp;gt; 1000)&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return basePrice() * 0.95;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return basePrice() * 0.98;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double basePrice() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _quantity * _itemPrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Introduce Explaining Variable&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;복잡한 수식이 있는 경우에는&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 수식의 결과나 또는 수식의 일부에 자신의 목적을 잘 설명하는 이름으로 된 임시변수를 사용하라.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( (platform.toUpperCase().indexOf(&quot;MAC&quot;) &amp;gt; -1) &amp;amp;&amp;amp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(browser.toUpperCase().indexOf(&quot;IE&quot;) &amp;gt; -1) &amp;amp;&amp;amp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;wasInittialized() &amp;amp;&amp;amp; resize &amp;gt; 0)&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;final boolean isMacOs = platform.toUpperCase().indexOf(&quot;MAX&quot;) &amp;gt; -1;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;final boolean isIEBrowser = browser.toUpperCase().indexOf(&quot;IE&quot;) &amp;gt; -1);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;final boolean wasResized = resize &amp;gt; 0; &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( isMaxOs &amp;amp;&amp;amp; isIEBrowser &amp;amp;&amp;amp; wasResized ) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Split Temprorary Variable&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;루프 안에 있는 변수나 collecting temporary variable도 아닌 임시변수에 값을 여러 번 대입하는 경우에는&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 각각의 대입에 대해서 따로따로 임시변수를 만들어라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;double temp = 2 * (_height + _width);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println (temp);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;temp = _height * _width;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(temp);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;final double perimeter = 2 * (_height + width);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(perimeter);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;final dougle area = _height * _width;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(area);&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Remove Assignments to Parameters&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;파라미터에 값을 대입하는 코드가 있으면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 대신 임시변수를 사용하도록 하라.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;int descount ( int inputVal, int Quantity, int yearToDate) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (inputVal &amp;gt; 50) inputVal -= 2;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;int descount ( int inputVal, int Quantity, int yearToDate) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int result = inputVal;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (inputVal &amp;gt; 50) result -= 2;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Method with Method Object&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;긴 메소드가 있는데, 지역변수 때문에 Extract Method를 적용할 수 없는 경우에는&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 메소드를 그 자신을 위한 객체로 바꿔서 모든 지역변수가 그 객체의 필드가 되도록 한다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 이렇게 하면 메소드를 같은 객체 안의 여러 메소드로 분해할 수 있다.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; class Order ...&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double price() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double primaryBasePrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double secondaryBasePrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double teriaryBasePrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // long computation;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; class Order ...&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double primaryBasePrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double secondaryBasePrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double teriaryBasePrice;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double price() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // long computation;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Substititude Algorithm&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;알고리즘을 보다 명확한 것으로 바꾸고 싶을 때는&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 메소드의 몸체를 새로운 알고리즘으로 바꾼다. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;String foundPerson(String[] people) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; people.length; i++) {&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (people[i].equals (&quot;Don&quot;)) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &quot;Don&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (people[i].equals (&quot;John&quot;)){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &quot;John&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (people[i].equals (&quot;Kent&quot;)){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &quot;Kent&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &quot;&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String foundPerson(String[] people) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ListCandidates = Arrays.asList(new String[] {&quot;Don&quot;, John&quot;, &quot;Kent&quot;});&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; people.length; i++)&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (candidates.contains(people[i]))&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return people[i];&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &quot;&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;4-2. 객체간의 기능 이동 (Moving Features Between Objects)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 객체 디자인에서 가장 기본이 되는 것 중의 하나(원칙은 아닐지라도)는 책임을 어디에 둘지를 결정하는 것이다.&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 종종 이런 문제는 Move Method와 Move Field를 사용해서 동작을 옮김으로써 간단히 해결할 수 있다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Move Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Move Field&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Extract Class&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Inline Class&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Hide Delegate&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Remove Middle Man&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Introduce Foreign Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Introduce Local Extension&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;4-3. 데이터 구성 (Organizing Data)&lt;br /&gt;&amp;nbsp;&amp;nbsp;- 종종 간단한 데이터 값으로 시작했다가 나중에 객체가 더 편리할 것이라고 깨닫게 되면&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 멍청한 데이터를 똑똑한 객체로 바꿀 수 있게 한다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Self Encapsulate Field&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;필드에 직접 접근하고 있는데 필드에 대한 결합이 이상해지면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 그 필드에 대한 get/set 메소드를 만들고 항상 이 메소드를 사용하여 필드에 접근하라.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private int _low, _high;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boolean includes (int arg){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return arg &amp;gt;= _low &amp;amp;&amp;amp; arg &amp;lt;= _high;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private int _low, _high;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boolean includes (int arg){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return arg &amp;gt;= getLow() &amp;amp;&amp;amp; arg &amp;lt;= getHigh();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int getLow() {return _low;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int getHigh() {return _high;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Array with Object&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;배열의 특정 요소가 다른 뜻을 가지고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 배열을 각각의 요소에 대한 필드를 가지는 객체로 바꿔라.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String[] row = new String[3];&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;row [0] = &quot;Liverpool&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;row [1] = &quot;15&quot;;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Performance row = new Performance();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;row.setName(&quot;Liverpool&quot;);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;row.setWins(&quot;15&quot;);&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Magic Number with Symbolic Constant&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;특별한 의미를 가지는 숫자 리터럴이 있으면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 상수를 만들고, 의미를 잘 나타내도록 이름을 지은다음, 숫자를 상수로 바꾸어라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double potentialEnergy(double mass, double height){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return mass * 9.91 * height;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double potentialEnergy(double mass, double height){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return mass * GRAVITATION_CONSTNAT * height;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; static final double GRAVITATIONAL_CONSTANT = 9,81;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Encapsulate Field&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;public 필드가 있는 경우&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 그 필드를 private으로 만들고, 접근자를 제공하라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String _name;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String _name;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getName() {return _name;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void setName(String arg) { _name = arg;}&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Data Value with Object&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Change Value to Reference&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Change Reference to Value&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Duplicate Observed Data&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Change Unidirectional Association to Bidirectional&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Change Bidirectional Association to Unidirectional&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Encapsulate Collection&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Record with Data Class&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Type Code with Class&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Type Code with Subclasses&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Type code with State/Strategy&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Subclass with Fields&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;4-4. 조건문의 단순화 (Simplifying Conditional Expressions)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Decompose Conditional&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;복잡한 조건문(if-then-else)이 있는 경우&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 조건, then 부분, 그리고 else 부분에서 메소드를 추출하라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (data.before( SUMMER_START ) || data.after(SUMMER_END))&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge = quantity * _winterRate + _winterServeceCharge;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else charge = quantity * _summerRate;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (notSummer(date))&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;charge = winterCharge(quantity);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else charge = summerCharge(quatity);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Consolidate Conditional Expression&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;같은 결과를 초래하는 일련의 조건 테스트가 있는 경우&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 그것을 하나의 조건 식으로 결합하여 뽑아내라.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;double disabilityAmount() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (_seniority &amp;lt; 2) return 0;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( _monthsDisabled &amp;gt; 12) return 0;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( _isPartTime) return 0;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// compute the disability amount&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double disabilityAmount() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if( isNotEligableForDisability()) return 0;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// compute the disability amount;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Consolidate Duplicate Conditional Fragments&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;동일한 코드 조각이 조건문의 모든 분기 안에 있는 경우&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 동일한 코드를 조건문 밖으로 옮겨라. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (isSpecialDeal()){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; total = price * 0.95;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; send();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; total = price * 0.98;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; send();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (isSpecialDeal())&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; total = price * 0.95&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; total = price * 0.98;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;send();&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Nested Conditional with Guard Clauses&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;메소드가 정상적인 실행 경로를 불명확하게 하는 조건 동작을 가지고 있는 경우&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 모든 특별한 경우에 대해서 보호절(guard clause)을 사용하라. &amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getPayAmount(){&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double result;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( _isDead) result = deadAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (_isSeparated) result = separatedAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_isRetried) result = retiredAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else result = normalPayAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return result;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getPayAmount() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_isDead) return deadAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_isSeparated) return separatedAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_isRetried) return retiredAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return normalPayAmount();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Conditional with Polymorphism&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;객체의 타입에 따라 다른 동작을 선택하는 조건문을 가지고 있는 경우&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 조건문의 각 부분을 서브클래스에 있는 오버라이딩 메소드로 옮겨라.&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 그리고 원래 메소드를 abstract로 만들어라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getSpeed() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;switch (_type) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case EUROPEAN:&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return getBaseSpeed();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case AFRICAN:&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return getBaseSpeed() - getLoadFactor() * _numberofCoconuts;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case NORWEGIAN_BLUE:&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (_isNailed) ? 0 : getBaseSpeed(_voltage);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new RuntimeException (&quot;Should be unreachable&quot;);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Introduce Null Object&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;null 체크를 반복적으로 하고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ null 값을 null 객체로 대체하라.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (customer == null) plan = BillingPlan.basic();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else plan = customer.getPlan();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Introduce Assertion&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;코드의 한 부분이 프로그램의 상태에 대하여 어떤 것을 가정하고 있으며&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ assertion을 써서 가정을 명시되게(explicit) 만들어라. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getExpenseLimit() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//should have eigher expense limit or a primary project&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (_expenseLimit != NULL_EXPENSE)?&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_expenseLimit:&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_primaryProject.getMemberExpenseLimit();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getExpenseLimit() {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assert.isTrue(_expenseLimit != NULL_EXPENSE || _primaryProject != null);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (_expenseLimit != NULL_EXPENSE)?&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_expenseLimit:&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_primaryProject.getMemberExpenseLimit();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;4-5. 메소드 호출의 단순화 (Making Method Calls Simpler)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Paramter with Explicit Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;파라미터의 값에 따라서 다른 코드를 실행하는 메소드가 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 각각의 파라미터 값에 대한 별도의 메소드를 만들어라.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void setValue (String name, int value) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (name.equals(&quot;height&quot;))&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_height = value;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (name.equals(&quot;width&quot;))&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_width = value;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assert.shouldNeverReachHere();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void setHeight (int arg) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_height = arg;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;void setWidth (int arg) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_width = arg;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Preserve Whole Object&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;어떤 객체에서 여러 개의 값을 얻은 다음 메소드를 호출하면서 파라미터로 넘기고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 대신 그 객체를 파라미터로 넘겨라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int low = daysTempRange().getLow();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int high = days.TempRange().getHight();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withinPlan = plan.withinRange (low, high);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;withinPlan = plan.withinRange (daysTempRange());&amp;nbsp;&lt;br /&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Parameter with Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;객체가 메소드를 호출한 다음, 결과를 다른 메소드에 대한 파라미터로 넘기고 있다. 수신자 또한 이 메소드를 호출할 수 있다면&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 그 파라미터를 제거하고 수신자가 그 메소드를 호출하도록 하라.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int basePrice = _quantity * _itemPrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;discountLevel = getDiscountLevel ();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double finalPrice = discountedPrice (basePrice, discountLevel);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int basePrice = _quantity * _itemPrice;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double finalPrice = discountedPrice (basePrice);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Replace Constructor with Factory Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;객체를 생성할 때 단순히 생성하는 것 이외에 다른 작업도 하고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 생성자를 팩토리 메소드로 대체하라. &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Emplyee (int type) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_type = type;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static Emplyee create (int type) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new Emplyee (type);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Encapsulate Downcast&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;메소드가 그 호출부에서 다운캐스트 될 필요가 있는 객체를 리턴하고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 다운캐스트 하는 것을 메소드 안으로 옮겨라. &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object lastReading () {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return readings.lastElement ();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reading lastReading () {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (Reading) readings.lastElement ();&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Error Code with Exception&lt;br /&gt;&amp;nbsp;&amp;nbsp;메소드가 에러를 나타내는 특별한 코드를 가지고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞ 대신 예외를 던져라.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;int withdraw(int amount) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (amount &amp;gt; _balance)&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return ?1;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_balance -= amount;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;void withdraw(int amount) throws BalanceException {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(amount &amp;gt; balance) throw new BalanceException();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _balance -= amount;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Replace Exception with Test&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;호출부에서 먼저 검사할 수 있는 조건에 대해 예외를 던지고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 호출부가 먼저 검사하도록 바꿔라.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getValueForPeriod(int periodNumber) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _values[periodNumber];&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch(ArrayIndexOutOfBoundsException e) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;double getValueForPeriod(int periodNumber) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (periodNumber &amp;gt;= _values.length) return 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return _values[periodNumber];&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Introduce Parameter Object&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Rename Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Add Parameter&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Remove Parameter&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Separate Query from Modifier&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Parameterize Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Remove Setting Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Hide Method&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;4-6. 일반화 다루기(Dealing With Generalization)&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;4.6.1 정의&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- 일반화(generalization)는 하나의 리팩토링 군을 만드는데, 주로 상속 구조에서 메소드를 옮기는 것을 다룬다.&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;4.6.2 일반화 정리&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Pull Up Constructor Body&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;서브클래스들이 대부분 동일한 몸체를 가진 생성자를 가지고 있다면&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞ 수퍼클래스에 생성자를 만들고 서브클래스 메소드에서 이것을 호출하라.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class Manager extends Employee...&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Manager (String name, String id, int grade) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _name = name;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _id = id;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _grade = grade;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;☞&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Manager (String name, String id, int grade) {&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super (name, id);&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _grade = grade;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Pull Up Field&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Pull Up Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Push Down Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Push Down Field&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Extract Subclass&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Extract Superclass&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Extract Interface&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Collapse Hierarchy&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Form Template Method&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Replace Inheritance with Delegation&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;- Replace Delegation with Inheritance&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;&amp;nbsp;4-7. 대규모 리팩토링 (Big Refactorings)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&amp;nbsp;- Tease Apart Inheritance&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Convert Procedural Design to Objects&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Separate Domain from Presentation&lt;br /&gt;&amp;nbsp;&amp;nbsp;- Extract Hierarchy&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;5. 결론 - 하나로 합치기 by Kent Beck&lt;br /&gt;&amp;nbsp;- 목표를 잡는데 익숙하라.&lt;br /&gt;&amp;nbsp;- 확실하지 않을 때는 멈추어라.&lt;br /&gt;&amp;nbsp;- 왔던 길로 되돌아가기. (Backtrack)&lt;br /&gt;&amp;nbsp;- 듀엣 (Duets)&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&lt;br /&gt;1. 다음코드의 문제점은 ???&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;for (int index = 0; index &amp;lt; list.size(); index++) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;list.remove(index);&lt;br /&gt;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;☞&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;for (int index = list.size() - 1; index &amp;gt;= 0; index--) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;list.remove(index);&lt;br /&gt;&amp;nbsp;}&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;☞&lt;/p&gt;&lt;p style=&quot;color: rgb(102, 102, 102); font-family: gulim, 굴림, sans-serif; font-size: 13px; line-height: 20.799999237060547px; background-color: rgb(251, 250, 234);&quot;&gt;&amp;nbsp;list = new ArrayList();&lt;/p&gt;</description>
<category>Cord lab</category>
<category>Refactoring</category>
<category>리팩토링</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/225</guid>
<comments>https://topnanis.tistory.com/225#entry225comment</comments>
<pubDate>Fri, 28 Feb 2014 12:40:42 +0900</pubDate>
</item>
<item>
<title>[C#강좌] 01.C#의 발전 / 02.Hello World C# - 기본 개념의 이해</title>
<link>https://topnanis.tistory.com/224</link>
<description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;출처 :&amp;nbsp;&lt;span style=&quot;color: rgb(48, 116, 165); font-family: Dotum, sans-serif, AppleGothic; line-height: normal; text-align: justify; white-space: nowrap; background-color: transparent; font-size: 9pt;&quot;&gt;SuYoung Kim(김수영)&lt;/span&gt;&lt;span style=&quot;background-color: transparent; font-size: 9pt; line-height: 1.5;&quot;&gt;&amp;nbsp;님 - http://www.sqler.com/393874&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent; font-size: 9pt; line-height: 1.5;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;01. C#의 발전&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); line-height: 1.6; font-family: Dotum, sans-serif, AppleGothic; text-align: justify; background-color: transparent; font-size: 9pt;&quot;&gt;&lt;span style=&quot;color: rgb(149, 16, 21);&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); line-height: 1.6; font-family: Dotum, sans-serif, AppleGothic; text-align: justify; background-color: transparent; font-size: 9pt;&quot;&gt;&lt;span style=&quot;color: rgb(149, 16, 21);&quot;&gt;[1~20 강좌 전체 소스]&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;readBody&quot; style=&quot;color: rgb(85, 85, 85); margin-top: 20px; font-family: Dotum, sans-serif, AppleGothic; line-height: normal; text-align: justify;&quot;&gt;&lt;div class=&quot;contentBody&quot;&gt;&lt;div class=&quot;document_393874_258434 xe_content&quot; style=&quot;line-height: 1.6; overflow: hidden; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;a href=&quot;http://www.sqler.com/?module=file&amp;amp;act=procFileDownload&amp;amp;file_srl=400645&amp;amp;sid=3b28c6e6b0fb1caecbb6cded2c6ed488&quot;&gt;SqlerCSharp_SRC.zip&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;2000년 6월 Microsoft PDC(Professional Developers Conference) 2000 에서 Microsoft가 닷넷(.NET) 전략에 대해 발표한 이후 Microsoft의 제품들은 계속해서 닷넷과 통합이 이루어 지고 있다. (SQL Server, Office, Sharepoint 등) 특히 C#은 닷넷 전략이 발표 되면서 기존의 언어와는 다른 닷넷 환경에 최적화된 언어의 필요성에 의해 새롭게 탄생된 언어이다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;img src=&quot;http://www.sqler.com/files/attach/images/368176/874/393/2c8a3dcb03a8e2fe6a75d2738234d33b.png&quot; alt=&quot;2c8a3dcb03a8e2fe6a75d2738234d33b.png&quot; title=&quot;2c8a3dcb03a8e2fe6a75d2738234d33b.png&quot; class=&quot;iePngFix&quot; rel=&quot;xe_gallery&quot; style=&quot;border: 0px; margin: 0px; padding: 0px; cursor: pointer;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;[닷넷 프레임워크 버전별 변화]&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;닷넷을 지원하는 언어는 Visual Studio에서 기본으로 지원하는 C#과 더불어 Visual Basic, Visual C++, F# 이외에 Delphi, Cobol, Iron Ruby, Iron Python 등 다양한 서드파티(3rd Party)에서 지원을 하고 있다. (&lt;a href=&quot;http://www.dotnetlanguages.net/DNL/Resources.aspx&quot;&gt;http://www.dotnetlanguages.net/DNL/Resources.aspx&lt;/a&gt;) 하지만, 닷넷을 지원하는 다양한 언어들이 이미 예전에 개발된 컴파일러 및 언어적 특성을 닷넷을 지원하기 위해 적절히 수정하여야 했고, 닷넷의 장점을 십분 발휘하기 쉽지 않았다. C#은 탄생부터 닷넷을 위해 설계가 되었으며, 닷넷의 개발 장점을 가장 잘 가지고 있는 언어가 아닌가 생각 한다.&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;닷넷 개발시 많은 곳에서 C#을 기본 언어로 사용하고 있으며, C++의 강력한 성능과 Visual Basic, Java와 같은 유연함을 함께 가지고 있는 훌륭한 언어라고 볼 수 있다. 또한&lt;/span&gt;&amp;nbsp;C#은 Standard ECMA-334 (&lt;a href=&quot;http://www.ecma-international.org/publications/standards/Ecma-334.htm&quot;&gt;http://www.ecma-international.org/publications/standards/Ecma-334.htm&lt;/a&gt;), ISO/IEC 23270:2006 (&lt;a href=&quot;http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=42926&quot;&gt;http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=42926&lt;/a&gt;)의 표준으로 등록이 되어 있다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;img src=&quot;http://www.sqler.com/files/attach/images/368176/874/393/81dc8f875040002b5a349fe697d03687.png&quot; alt=&quot;81dc8f875040002b5a349fe697d03687.png&quot; title=&quot;81dc8f875040002b5a349fe697d03687.png&quot; class=&quot;iePngFix&quot; rel=&quot;xe_gallery&quot; style=&quot;border: 0px; margin: 0px; padding: 0px; cursor: pointer;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;[C# 버전별 주요 특징]&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;C# 1.0&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;과거 CS(Clinet-Server) 환경에서 웹 기반 솔류션(Solution)으로 빠르게 이동이 되면서, 기존 프로그램 언어와 플랫폼으로는 시장의 빠른 흐름에 대응하기에는 한계점을 가지고 있었다. Microsoft는 이러한 문제점을 해결하기 위하여&amp;nbsp;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;닷넷 프레임워크 1.0과 C# 1.0, Visual Studio 2002를 시작으로 닷넷이 세상과 첫 만나게 된다. 기존 개발자가 모든 상황에 대한 처리 코드를 작성해야 했다면, 닷넷으로 넘어 오면서 메모리 관리는 가비지 컬렉션(Garbage Collection) 으로, DLL Hell은 전역 어셈블리를 통한 버전 관리 등과 같이 프레임워크 차원에서 관리되는 형태로 변화 되었다. 그만큼 개발자는 비즈니스를 구현하는데 집중을 할 수 있게 되었다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;C# 2.0&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;현재 가장 많이 사용 되고, 현재 닷넷 기술의 기틀이 자리 잡은 중요한 시기이다. 가장 큰 특징은 제네렉(Generic) 지원이다. 이전에는 모든 컬렉션(Collection)이 오브젝트(object) 형식만 지원하여 값 형식(Value type)을 컬렉션에서 사용할 경우 참조 형식(Reference type)으로 변환하고 다시 원본 형식으로 캐스팅 하는 박싱(Boxing), 언박싱(Unboxing) 작업으로 성능에 안 좋은 영향을 미쳤었다. 하지만 제네릭 형식 선언 및 사용으로 좀더 강력한 형식 확인을 통하여 런타임 오류 및 잦은 형 변환에 따른 오버헤드를 줄 일 수 있게 되었다. 그리고 이터레이터(Iterator)를 쉽게 구현할 수 있는 yield, 델리게이트 사용이 간편해진 익명메서드(Anonymous Method), 값 형식의 널 형식(Nullable Type) 지원 및 널 형식의 기본값 설정을 쉽게 할 수 있는 &quot;??&quot; 연산자를 지원 하고 있다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;C# 3.0&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;여러 데이터원본(Object, DB, XML, 컬렉션 등)에서 데이터 처리를 위한 통합 인프라인 LINQ(Language INtegration Query)를 지원해 주고 있다. 그리고 많은 추가된 기능들이 LINQ와 연관을 맺고 있다. 조회데이터의 유연한 사용을 위한 Local variable type(var), 익명 형식(Anonymous type), 기존 객체의 소스 변경 없이 기능을 확장 할 수 있는 확장메서드(Extension Method), 좀더 간결한 코드로 객체 및 컬렉션 초기화를 위한 Object &amp;amp; Collection Initializer, 익명 메서드(Anonymous Method)를 더 쉽게 사용할 수 있는 람다식(Lambda)을 들 수 있다. 닷넷&lt;/span&gt;&amp;nbsp;프레임워크 3.0은 상당히 시기적으로 아쉬운 점이 있다. 닷넷 프레임워크 2.0 기반에 획기적인 응용기술을 선보였으나 개발툴인 Visual Studio가 뒷받침을 해 주지 않아 특히 WPF 개발에 있어서는 Visual Studio 2008(개발 코드명 Orcas) 출시 전까지는 닷넷 프레임워크 3.0 개발에 있어서 어려움이 많았다. Visual Studio 2005에서는 Extension previews 형태로 지원하다 Visual Studio 2008 CTP, Beta 출시 이후에는 Beta 툴로 정식 프레임워크의 기술을 개발하는 상황 발생이 발생한 것이다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;margin-left: 40pt;&quot;&gt;&lt;li&gt;C# 4.0&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;닷넷 프레임워크(.NET Framework) 4.0으로 오면서 CLR(Common Language Runtime), Visual Studio, C# 모든 것이 새롭게 탄생 되었다.&lt;span style=&quot;font-family: '맑은 고딕';&quot;&gt;C# 4.0은 다이나믹(dynamic)을 기본 컨셉으로 Dynamic lookup(dynamic), Named and Optional Parameters, COM Interop, 공변성(Variance) 그리고 병렬처리와 같은 기술이 추가 되었다.&amp;nbsp;&lt;/span&gt;C# 4.0에 대한 언어적인 세부 정보는 MSDN에서 다운로드 가능하다. (&lt;a href=&quot;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=dfbf523c-f98c-4804-afbd-459e846b268e&quot;&gt;http://www.microsoft.com/downloads/en/details.aspx?FamilyID=dfbf523c-f98c-4804-afbd-459e846b268e&lt;/a&gt;)&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;span style=&quot;color: rgb(192, 0, 0);&quot;&gt;&lt;strong&gt;델리게이트(delegate)를 통해 본 C#의 변화 실 예제&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;C# 버전별로 어떻게 변화가 이루어 졌는지 일례로 델리게이트(delegate) 사용 방법 변화를 통해서 살펴 보자. 혹 현재 C#을 처음 접하게 되어 아래 내용이 이해가 잘 되지 않는다면, 먼저 다른 C# 주제를 먼저 학습한 후 읽어도 좋을 것이다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;우리나라 말로 델리게이트를 위임이라고 표현한다. 뜻 그대로 나 대신 일을 처리해 주는 것이다. 개발 측면에서는 가장 많이 사용하는 것이 이벤트(Event) 와 함께 사용이 된다. 스래드(Thread)를 사용하려면 ThreadStart라는 델리게이트에 위임 받을 메서드를 설정 하여 사용하게 된다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 615px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;border: 0.5pt solid; padding-left: 7px; padding-right: 7px;&quot;&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;public delegate void ThreadStart()&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;public Thread( ThreadStart start )&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;C# 1.0 에서는 일반적인 컴파일러 언어의 특징처럼 명시적으로 모든 것을 선언한다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 615px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;border: 0.5pt solid; padding-left: 7px; padding-right: 7px;&quot;&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;//C# 1.0 명시적(Explicitly) 선언&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;ThreadStart tStart = new ThreadStart(DoWork);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Thread thread1 = new Thread(tStart);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;C# 2.0 에서는 2가지 변화를 가진다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;하나는 구문을 간소화 할 수 있는 부분, 그리고 무명 메서드를 통하여 명시적으로 메서드를 선언 하지 않아도 구문을 작성 할 수 있도록 되어 있다. 좀더 유연한 프로그램을 가능하게 해 준다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 615px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;border: 0.5pt solid; padding-left: 7px; padding-right: 7px;&quot;&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;// C# 2.0 묵시적(Implicitly) 선언&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;ThreadStart tStart = DoWork;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Thread thread1 = new Thread(tStart);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;//C# 2.0 무명 메서드(Anonymous Method) 이용&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Thread thread1 = new Thread&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;delegate()&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Console.WriteLine(&quot;Do work&quot;);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;C# 3.0은 무명 메서드에서 좀더 발전된 람다 표현식(Lambda Expression)을 통해서 델리게이트를 선언 할 수 있다. 특히 Func, Action 이란 특수 델리게이트 들을 통해서 확장 가능한 프로그램 작성이 가능하다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;table border=&quot;0&quot; style=&quot;border-collapse: collapse;&quot;&gt;&lt;colgroup&gt;&lt;col style=&quot;width: 615px;&quot;&gt;&lt;/colgroup&gt;&lt;tbody valign=&quot;top&quot;&gt;&lt;tr&gt;&lt;td style=&quot;border: 0.5pt solid; padding-left: 7px; padding-right: 7px;&quot;&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;// C# 3.0 람다 표현식(Lambda Expression)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Thread thread1 = new Thread&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;() =&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;{&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;Console.WriteLine(&quot;Do work&quot;);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;);&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;언어의 발전 방향을 살펴 보면 작성되는 코드를 좀더 적게 작성하면서, 직관적인 구문 형태로 변화 되는 것을 볼 수 있을 것이다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(149, 16, 21);&quot;&gt;[스레드 각 버전별 처리 예]&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;/p&gt;&lt;table cellspacing=&quot;1&quot; style=&quot;background-color: rgb(204, 204, 204); background-position: initial initial; background-repeat: initial initial;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;background-color: rgb(255, 255, 255); background-position: initial initial; background-repeat: initial initial;&quot;&gt;&lt;td&gt;&lt;pre style=&quot;font-family: 'Anonymous Pro'; color: black;&quot;&gt;&lt;span style=&quot;color: blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;System;
&lt;span style=&quot;color: blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;System.Collections.Generic;
&lt;span style=&quot;color: blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;System.Linq;
&lt;span style=&quot;color: blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;System.Text;
&lt;span style=&quot;color: blue;&quot;&gt;using&lt;/span&gt;&amp;nbsp;System.Threading;
 
&lt;span style=&quot;color: blue;&quot;&gt;namespace&lt;/span&gt;&amp;nbsp;SqlerCSharp.Ch01_01
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Program&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;Main(&lt;span style=&quot;color: blue;&quot;&gt;string&lt;/span&gt;[]&amp;nbsp;args)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;1.0&amp;nbsp;명시적(Explicitly)&amp;nbsp;선언&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;1.0&amp;nbsp;에서는&amp;nbsp;스레드&amp;nbsp;실행시&amp;nbsp;파라미터를&amp;nbsp;직접&amp;nbsp;넘길&amp;nbsp;수&amp;nbsp;없으므로&amp;nbsp;별도&amp;nbsp;처리가&amp;nbsp;필요&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ThreadExample&lt;/span&gt;&amp;nbsp;tExam&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ThreadExample&lt;/span&gt;(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;C#&amp;nbsp;1.0&amp;nbsp;명시적(Explicitly)&amp;nbsp;선언&quot;&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ThreadStart&lt;/span&gt;&amp;nbsp;tStart&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ThreadStart&lt;/span&gt;(tExam.DoWork);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;&amp;nbsp;thread1&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;(tStart);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread1.Start();
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;2.0&amp;nbsp;묵시적(Implicitly)&amp;nbsp;선언&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;2.0&amp;nbsp;부터&amp;nbsp;ParameterizedThreadStart&amp;nbsp;가능&amp;nbsp;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ParameterizedThreadStart&lt;/span&gt;&amp;nbsp;tStart2&amp;nbsp;=&amp;nbsp;DoWork2;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;&amp;nbsp;thread2&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;(tStart2);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread2.Start(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;C#&amp;nbsp;2.0&amp;nbsp;묵시적(Implicitly)&amp;nbsp;선언&quot;&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;2.0&amp;nbsp;무명&amp;nbsp;메서드(Anonymous&amp;nbsp;Method)&amp;nbsp;이용&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;&amp;nbsp;thread3&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;delegate&lt;/span&gt;(&lt;span style=&quot;color: blue;&quot;&gt;object&lt;/span&gt;&amp;nbsp;data)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color: blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;10;&amp;nbsp;i++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;{0}&amp;nbsp;:&amp;nbsp;{1}&quot;&lt;/span&gt;,&amp;nbsp;data,&amp;nbsp;i);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread3.Start(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;C#&amp;nbsp;2.0&amp;nbsp;무명&amp;nbsp;메서드(Anonymous&amp;nbsp;Method)&amp;nbsp;이용&quot;&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: green;&quot;&gt;//C#&amp;nbsp;3.0&amp;nbsp;람다&amp;nbsp;표현식(Lambda&amp;nbsp;Expression)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;&amp;nbsp;thread4&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Thread&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(data)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color: blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;10;&amp;nbsp;i++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;{0}&amp;nbsp;:&amp;nbsp;{1}&quot;&lt;/span&gt;,&amp;nbsp;data,&amp;nbsp;i);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread4.Start(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;C#&amp;nbsp;3.0&amp;nbsp;람다&amp;nbsp;표현식(Lambda&amp;nbsp;Expression)&quot;&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;DoWork2(&lt;span style=&quot;color: blue;&quot;&gt;object&lt;/span&gt;&amp;nbsp;data)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color: blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;10;&amp;nbsp;i++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;{0}&amp;nbsp;:&amp;nbsp;{1}&quot;&lt;/span&gt;,&amp;nbsp;data,&amp;nbsp;i);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;ThreadExample&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;_Data&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;&quot;&lt;/span&gt;;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;ThreadExample(&lt;span style=&quot;color: blue;&quot;&gt;string&lt;/span&gt;&amp;nbsp;data)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;this&lt;/span&gt;._Data&amp;nbsp;=&amp;nbsp;data;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;DoWork()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;for&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color: blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0;&amp;nbsp;i&amp;nbsp;&amp;lt;&amp;nbsp;10;&amp;nbsp;i++)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color: rgb(43, 145, 175);&quot;&gt;Console&lt;/span&gt;.WriteLine(&lt;span style=&quot;color: rgb(163, 21, 21);&quot;&gt;&quot;{0}&amp;nbsp;:&amp;nbsp;{1}&quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color: blue;&quot;&gt;this&lt;/span&gt;._Data,&amp;nbsp;i);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&lt;/pre&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px;&quot;&gt;&lt;span style=&quot;font-family: 'Anonymous Pro'; white-space: pre;&quot;&gt;}&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;orphans: 2; text-align: justify; widows: 2; &quot;&gt;&lt;font face=&quot;Gulim&quot; size=&quot;3&quot;&gt;&lt;span style=&quot;line-height: 19px;&quot;&gt;&lt;b&gt;02.Hello World C# - 기본 개념의 이해&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;C#으로 작성된 어플리케이션은 크게 클래스(Class), 네임스페이스(Namespace), 어셈블리(Assembly)와 같은 요소로 구성되어 있다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;클래스(Class)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;프로그램 내에서 독립적으로 존재할 수 있는 최소 단위. 멤버로 메소드(Method), 프로퍼티(Property), 이벤트(Event), 델리게이트(Delegate) 등을 가진다.&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;네임스페이스(Namespace)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;여러 개의 클래스들이 모인 논리적 그룹 단위.&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;어셈블리(Assembly)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;클래스, 네임스페이스가 모여 생성된 물리적 파일. 간단히 말하면 빌드 후 생성되는 DLL 혹은 EXE 파일이라고 생각하면 된다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;이렇게 작성된 코드를 빌드하게 되면 MSIL(Microsoft Intermediate Language)이라고 하는 기계어 직전 단계의 언어로 구성된 어셈블리가 생성이 된다. 바로 바이너리(Binary) 형식이 아닌 MSIL 형태로 생성을 하게 되는 이유는 자바와 마찬가지로 플랫폼에 종속적이 않고, 다양한 플랫폼에 이식 가능하도록 하기 위해서 이다. 현재 Mono 프로젝트(&lt;a href=&quot;http://www.mono-project.com/Main_Page&quot;&gt;http://www.mono-project.com/Main_Page&lt;/a&gt;)를 통해서 다양한 플랫폼에 적용 가능하다. 이렇게 MSIL 형태로 존재하는 어셈블리는 실행되는 시점에 Just-In-Time (JIT) 컴파일러(compiler)가 각 플랫폼에 맞는 코드로 컴파일 되며 실행이 된다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;이러한 런타임 환경에서 일어나는 다양한 일들은 닷넷 프레임워크에서 제공해 주며, 다음과 같은 구성 요소를 가지고 있다.&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;CLS(Common Language Specification)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;닷넷 프레임워크는 다양한 언어로 개발이 가능하다. 하지만 문제는 각 언어별로 특별히 지원하는 스펙이 존재할 것이다. 모든 프로젝트다 특정 하나의 언어로만 생성된 어셈블리만 사용하면 상관이 없으나, 개발을 하게 되면 다양한 언어로 개발된 어셈블리를 참조하게 될 것이다. 만약 참조된 어셈블리에서 지원하는 자료형 등이 해당 언어에서 지원이 되지 않는다면? 난감한 상황이 발생하게 된다. 이러한 문제점을 줄이고, 다양한 언어들 간에 호환성을 놓이기 위해 닷넷 프레임워크를 지원하는 최소한의 스펙을 정의하고 있는데 그것이 바로 CLS이다. CLS 규칙을 따르는 것은 개발 시점에서는 약간의 제약사항이 발생을 하게 되지만 다른 언어들 간의 상호 운영성은 증대하게 된다.&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;CTS(Common Type System)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;CLS를 포함하여, 닷넷에서 사용하게 되는 필드(Field), 메소드 등 모든 스펙이 정의된 것을 가리킨다.&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;CLR(Common Language Runtime)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;실행되는 프로그램의 메모리 관리, 보안 등 실제 운영되는 환경을 관리하게 되는 핵심 요소 이다.&lt;/p&gt;&lt;ul style=&quot;color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify; margin-left: 40pt;&quot;&gt;&lt;li&gt;GC(Garbage Collector)&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;닷넷 프레임워크는 예전의 비관리 코드(Unmanaged Code)로 작성되던 시기에 개발자가 직접해주던 메모리 관리를 GC를 통해서 자동으로 하게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19px; orphans: 2; text-align: justify; widows: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;span style=&quot;line-height: 19px; font-family: '맑은 고딕'; color: rgb(85, 85, 85); font-size: 13px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C# 강좌 목록]&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;a href=&quot;http://www.sqler.com/372579&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 00.프롤로그 – C# 4.0&lt;/span&gt;&lt;/a&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(0, 0, 0); font-family: Dotum, sans-serif, AppleGothic; line-height: 19.200000762939453px; text-align: justify;&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;font size=&quot;2&quot; face=&quot;'Anonymous Pro'&quot;&gt;&lt;a href=&quot;http://www.sqler.com/393874&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 01.C#의 발전&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393885&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 02.Hello World C# - 기본 개념의 이해&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393887&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 03.C# 기본 구문&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393894&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 04.Data Type 1 - 값 형식&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393896&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 05.Data Type 2 - 참조 형식, 변수, 상수&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393903&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 06.조건식&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/393906&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 07.반복문&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394042&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 08.예외 처리&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394044&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 09.배열&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394047&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 10.문자열 다루기&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394049&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 11.클래스 1 - 선언하기&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394051&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 12.클래스 2 - 다양한 클래스 선언&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394054&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 13.프로퍼티&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394056&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 14.인덱서(Indexer)&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394058&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 15.메소드&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394060&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 16.확장 메소드, Optional-Named 파라미터&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394063&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 17.델리게이트, 이벤트&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394065&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 18.Func, Action&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394067&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 19.익명 형식&lt;/span&gt;&lt;span style=&quot;color: rgb(85, 85, 85); text-decoration: underline;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;http://www.sqler.com/394069&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-family: Gulim;&quot;&gt;[C#강좌] 20.컬랙션&lt;/span&gt;&lt;/a&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;</description>
<category>Cord lab</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/224</guid>
<comments>https://topnanis.tistory.com/224#entry224comment</comments>
<pubDate>Tue, 04 Feb 2014 09:36:04 +0900</pubDate>
</item>
<item>
<title>“아이폰5S 속도 31%↑…64비트 A7 파워”</title>
<link>https://topnanis.tistory.com/220</link>
<description>&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: #ff5e00&quot;&gt;갤럭시S3 살때까지만 해도 아이폰 덧정 없어졌었는데.. 이렇게 A사의 새 제품이 나올때마다&amp;nbsp;예전 그녀&amp;nbsp;소식을&amp;nbsp;듣는거&amp;nbsp;마냥 흔들리는 이 마음은.. &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: #ff5e00&quot;&gt;다른 회사가 아무리 비싼 HW로 무장해도&amp;nbsp;느린건 어쩔수 없는&amp;nbsp;[검증되지 않은 코드 누적 시스템]의&amp;nbsp;태생적인 문제 때문이 아닐까요&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: #ff5e00&quot;&gt;제 생각에.. 쿼드코어, 옥타코어는&amp;nbsp;정말 자랑해서는 안되는 것이,&amp;nbsp;배터리든 발열문제건 비용문제건&amp;nbsp;코어 수가 올라간다는 것은 단말 컴퓨터에&amp;nbsp;큰 낭비가 아닐수 없어요. 오히려 같은 프로그램을&amp;nbsp;첫번째 실행할때랑 두번째 실행할때 속도가 동일하도록. 첫날 실행 할 때랑 한달 뒤에 실행 할 때 속도와 안정성과 배터리 소모&amp;nbsp;편차가 동일하도록 노력해주었으면 하는 것이 바람입니다&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: #ff5e00&quot;&gt;프로그래머의 어플리케이션을&amp;nbsp;매번 불친절하고 깐깐하게 따지는 A사가&amp;nbsp;참 답답하다가도, 결국엔&amp;nbsp;고개가 끄덕여지는 까닭은&amp;nbsp;HW와 SW가 모이는 단말PC라는 물을&amp;nbsp;최대한 흐리지&amp;nbsp;않고 사용자에게&amp;nbsp;마실 수있게&amp;nbsp;하자는 원칙이 옳기 때문입니다&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: #ff5e00&quot;&gt;오늘 나온 A7 기사들이 사실과 얼마나 맞아 떨어질지 모르지만 블로그에 포스팅 해봅니다&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;출처 : 씨넷코리아 &lt;A href=&quot;http://www.cnet.co.kr/view/21510&quot;&gt;http://www.cnet.co.kr/view/21510&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;조세일보&amp;nbsp;&lt;A href=&quot;http://www.joseilbo.com/news/htmls/2013/08/20130817192090.html&quot;&gt;http://www.joseilbo.com/news/htmls/2013/08/20130817192090.html&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:413px;WIDTH: 413px; HEIGHT: 387px;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/24101938521ABD4E0E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IPHONE23.png&quot; height=&quot;387&quot; style=&quot;WIDTH: 413px; HEIGHT: 387px&quot; width=&quot;413&quot;/&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;“아이폰5S의 A7 칩은 전작 A6 대비 31% 빠르다. 듀얼코어는 유지했지만 64비트로 무장했다.”&lt;/P&gt;
&lt;P&gt;25일(이하 현지시간) 폭스뉴스 앵커 클레이튼 모리스가 본인 &lt;FONT color=#0066cc&gt;&lt;SPAN style=&quot;COLOR: #333333&quot;&gt;트위터&lt;/SPAN&gt;&lt;/FONT&gt;&lt;SPAN style=&quot;COLOR: #333333&quot;&gt;를&lt;/SPAN&gt; 통해 전한 내용이다. 그는 애플 소식에 정통한 것으로 유명하다.&lt;/P&gt;
&lt;P&gt;아이폰5S는 내달 초 애플이 발표 예정인 차세대 아이폰 제품군 중 고급형의 이름이다. 애플의 공식 언급은 없었지만 유력한 이름으로 업계에 인식돼왔다.&lt;/P&gt;
&lt;P&gt;모리스에 따르면 아이폰5S는 세간에 알려진 것처럼 A7 칩을 탑재했으며, 애플리케이션 처리 속도가 아이폰5의 A6 대비 31% 빠르다. 애플 내부 소식통이 최근의 시험 결과라며 모리스에게 전한 내용이다.&lt;/P&gt;
&lt;P&gt;또, A7은 A6와 같이 코어가 두 개, 곧 듀얼코어 방식을 유지했지만 64비트를 지원한다. A6는 32비트 지원 칩이다.&lt;/P&gt;
&lt;P&gt;64비트 A7 칩이라면 애플이 최신 운영체제(OS) ‘iOS7’으로 보이려 한 더 부드럽고 투명한 그래픽 지원에 용이할 것이라고 외신들은 내다봤다. &lt;/P&gt;
&lt;P&gt;최근 밍치 궈 KGI증권 애널리스트도 “애플이 아이폰5S에 ARM의 최신 ARMv8 기반 A7 칩을 탑재했다”며 “A6 칩과 비교해 연산능력과 그래픽 처리 속도가 2배 이상 향상됐다”고 말한 바 있다.&lt;/P&gt;
&lt;P&gt;이어 “64비트가 A7 칩으로 구현될지 여부는 불확실하지만 가능성은 충분한 시나리오”라고 전망했다.&lt;/P&gt;
&lt;P&gt;모리스가 소식통을 통해 얻었다는 A7 칩 관련 소식은 그간 애널리스트들과 외신들이 제기한 내용과 상당 부분 일치한다는 설명이다.&lt;/P&gt;
&lt;P&gt;흥미롭게도 앞서 1일 나인투파이브맥은 “iOS7 베타4 코드를 분석한 결과 삼성전자 A7이 아이폰5에 탑재됐다”며 “관련 코드(S5l8960X)에 ‘SAMSUNG’이라는 글자가 보인다”고 보도한 바 있다.&lt;/P&gt;
&lt;P&gt;한편, 모리스는 아이폰5S 카메라에 대한 부분도 언급했다. 새로운 동작인식 센서를 내장, 어떤 형태로든 카메라 기능을 업그레이드 할 것이라고 그는 주장했다.&lt;/P&gt;
&lt;P&gt;이 역시 아이폰5S가 초당 120프레임의 비디오 캡처를 지원하는 이른바 ‘초고속 카메라’를 탑재할 것이라는 기존 보도를 연상케 하는 대목이다.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:225px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/212DC133521AC4B92A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;A7-Chip.png&quot; height=&quot;256&quot; width=&quot;225&quot;/&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;아이폰 5S, A7 프로세서 64비트 적용…효율 20% 높아져&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;9월10일 발표 예정이라는 소문이 돌고 있는 애플의 아이폰5S가 단순한 A7프로세서가 아닌 한층 향상된 64비트 아키텍쳐를 적용한다는 소식이다.&lt;/P&gt;
&lt;P&gt;영국의 저명한 IT전문 보도매체인 더 레지스터는 아이폰5S에 적용할 상세한 사양을 소개하면서 많은 부분에서 향상이 이루어지게 되었지만 많은 관심을 받고 있는 지문인식 시스템보다 특히 중요한 것은 새로운 64비트 프로세서라고 16일(현지시간) 보도했다.&lt;/P&gt;
&lt;P&gt;매체는 아이폰5S에는 128GB 내부저장용 옵션과 저조도에서의 촬영 기능을 강화한 듀얼(2개) LED 플래시와 f2.0 카메라 및 LPDDR2에서 LPDDR3로 바뀌는 램 등 많은 부분이 달라질 것이라고 덧붙였다.&lt;/P&gt;
&lt;P&gt;또한 애플 전문 매체인 애플인사이더를 인용 아이폰5S에는 ARMv8 아키텍처에 기반의 64비트 A7프로세서가 채택될 것이라며 아이폰5에 적용된 32비트 A6보다 더욱 빠른 성능을 구현할 것이라고 강조했다.&lt;/P&gt;
&lt;P&gt;1GB(기가바이트)의 메모리 용량은 늘리지 않으면서 A의 빠른 성능을 지원하기 위해 대역폭이 더 넓은 램(메모리)도 LPDDR2에서 LPDDR3로 교체할 것으로 알려졌다.&lt;/P&gt;
&lt;P&gt;KGI증권의 쿼 밍치는 “애플은 하드웨어와 운영체제(OS) 모두를 직접 개발하기 때문에 최적화를 통한 메모리 용량의 최소화가 가능하다”면서 “1GB의 메모리 용량만으로 모든 소프트웨어를 구현하는데 부족함이 없을 것”이라고 주장했다.&lt;/P&gt;
&lt;P&gt;또한 그는 “A7 프로세서를 적용한 아이폰5S는 A6가 탑재된 아이폰5보다 최소한 20% 이상 효율성이 증가할 것”이라고 덧붙였다.&lt;/P&gt;
&lt;P&gt;그러나 1280만 화소 카메라는 채택되지 않을 것이 점차 확실해지고 있다. 씨넷에 이어 상당수 매체들이 같은 보도를 하고 있으며 최근 유출된 부품들을 통해서도 일부 확인되고 있기 때문이다.&lt;/P&gt;
&lt;P&gt;다만 이를 보완하기 위해 듀얼 LED 플래시를 탑재하고 카메라의 감도를 향상시킨 f2.0 렌즈를 적용할 것이라는 소문이 돌고 있다.&lt;/P&gt;
&lt;P&gt;이외에도 기존 흰색과 검은색에서 색상을 다양화해 출시할 예정이라는 것도 변화된 모습이다. 이를 증명하듯 프랑스의 애플관련 블로그 미디어인 맥보티는 황금색이 선명한 아이폰 프레임 사진 여러 장을 16일(현지시간)공개했다.&lt;/P&gt;
&lt;P&gt;애플은 아이폰5S와 아이폰5C를 삼성전자가 갤럭시노트3를 발표하는 9월4일 일주일 뒤인 9월10일 발표할 예정인 것으로 알려지고 있다. 삼성전자를 다분히 의식한 대응으로 보인다.&lt;/P&gt;
&lt;P&gt;업계관계자는 “삼성전자와 애플의 싸움이 갈수록 점입가경”이라며 “A7 프로세서의 성능이 올 가을 양사의 승패를 가를 중요한 계기가 될 수도 있을 것으로 보인다”고 말했다.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</description>
<category>2_ 매콤한컴퓨터세상</category>
<category>A7 apple</category>
<category>CPU A7</category>
<category>아이폰5S</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/220</guid>
<comments>https://topnanis.tistory.com/220#entry220comment</comments>
<pubDate>Mon, 26 Aug 2013 11:58:47 +0900</pubDate>
</item>
<item>
<title>[C#] 메세지 박스(MessageBox)</title>
<link>https://topnanis.tistory.com/219</link>
<description>&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;font-size: 9pt; line-height: 1.5;&quot;&gt;출처 : Fehu, Gebo (http://blog.naver.com/PostView.nhn?blogId=kst7132&amp;amp;logNo=140165075952)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;메시지 박스는 사용자에게 짧은 문자열 메시지를 출력하는 조그만 대화상자로서 안내문이나 에러&lt;span&gt;, 간단한 질문 등을 할 수 있다. 메서드 호출문 하나로 사용자에게 정보를 출력할 수 있는 가장 간단한 장치이다. 또한 실행중에 변수나 프로그램의 현재 상태를 확인하고 제어의 흐름을 잠시 차단할 수 있어 디버깅용으로도 흔히 애용된다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;메시지 박스는&lt;span&gt;&amp;nbsp;MessageBox 클래스로 표현한다. 이 클래스는 생성자가 없기 때문에 객체를 생성할 수 없고 프로퍼티나 이벤트도 가지지 않으며 오로지 Show 정적 메서드 하나만 가진다. 아주 간단한 클래스라고 할 수 있는데 대신 Show 메서드가 무려 21개나 오버로딩되어 있다. 이중 다음 형태가 가장 자주 사용된다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a9&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;public static DialogResult Show (string text [,string caption,MessageBoxButtons buttons])&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;첫 번째 인수&lt;span&gt;&amp;nbsp;text는 메시지 박스의 중앙에 표시할 메시지 문자열이며 두 번째 인수 caption은 메시지 박스의 타이틀 바에 출력할 캡션 문자열이다. 세 번째 인수는 메시지 박스에 나타날 버튼의 종류를 지정하는데 생략시 확인 버튼만 나타난다. 첫 번째 인수는 반드시 전달해야 하며 나머지 인수는 필요없을 경우 생략할 수 있다. 다음이 호출 예이다.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;MessageBox.Show(&quot;사용자에게 전달할 메시지입니다.&quot;);&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;MessageBox.Show(&quot;사용자에게 전달할 메시지입니다.&quot;, &quot;알립니다&quot;);&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;메시지 내용은 동일하며&lt;span&gt;&amp;nbsp;caption 인수 지정 여부만 다르다. 두 실행문에 의해 다음과 같은 메시지 박스가 각각 출력된다.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;lt;v:f eqn=&quot;if lineDrawn pixelLineWidth 0 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;sum @0 1 0 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;sum 0 0 @1 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @2 1 2 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @3 21600 pixelWidth &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @3 21600 pixelHeight &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;sum @0 0 1 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @6 1 2 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @7 21600 pixelWidth &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;sum @8 21600 0 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;prod @7 21600 pixelHeight &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;v:f eqn=&quot;sum @10 21600 0 &quot;&amp;gt;&amp;lt;/v:f&amp;gt;&amp;lt;o:lock v:ext=&quot;edit&quot; aspectratio=&quot;t&quot;&amp;gt;&amp;lt;/o:lock&amp;gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;메시지 문자열만 지정하면 타이틀 바에 아무 것도 출력되지 않지만 두 번째 인수에 캡션을 출력하면 타이틀 바에 이 문자열이 나타난다&lt;span&gt;. 메시지 박스의 타이틀 바를 썰렁하게 비워두는 것보다는 보통 &quot;에러&quot;, &quot;경고&quot;, &quot;알림&quot; 등 메시지의 의미에 대한 짧은 문자열이나 또는 메시지를 출력하는 응용 프로그램의 이름을 쓰는 것이 좋다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;이런 메시지 박스는 확인 버튼만 나타나기 때문에 사용자에게 정보를 제공할 수만 있으며 질문을 할 수는 없다&lt;span&gt;. 사용자는 단지 메시지 내용을 읽고 확인 버튼을 누르기만 할 수 있다. Show 메서드의 세 번째 인수 buttons를 지정하면 메시지 박스에 어떤 버튼들이 나타날 것인가를 지정할 수 있다. 버튼의 종류는 MessageBoxButtons 열거형으로 지정하며 다음과 같은 멤버들이 정의되어 있다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; style=&quot;border-collapse: collapse; color: rgb(95, 94, 66); font-size: 12px; line-height: 18px; border: medium none; margin-left: 11.35pt;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border-bottom-color: windowtext; border-width: 1.5pt medium 0.5pt; border-style: solid none; padding: 0cm 4.95pt; width: 76.95pt; border-top-color: windowtext;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;열거&lt;/span&gt;&amp;nbsp;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;멤버&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border-bottom-color: windowtext; border-width: 1.5pt medium 0.5pt; border-style: solid none; padding: 0cm 4.95pt; width: 216pt; border-top-color: windowtext;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;설명&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;OK&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;확인&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼만&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;OKCancel&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;확인&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;취소&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼이&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;YesNo&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;예&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;아니오&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼이&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;YesNoCancel&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;예&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;아니오&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;취소&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼이&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;RetryCancel&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;재시도&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;취소&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼이&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border-bottom-color: windowtext; border-width: medium medium 0.5pt; border-style: none none solid; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;AbortRetryIgnore&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;288&quot; style=&quot;border-bottom-color: windowtext; border-width: medium medium 0.5pt; border-style: none none solid; padding: 0cm 4.95pt; width: 216pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;중단&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;재시도&lt;/span&gt;&lt;span&gt;,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;무시&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼이&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;나타난다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;이 인수에 따라 메시지 박스에 나타나는 버튼의 묶음이 달라지는데 질문의 종류에 맞게 버튼을 배치하면 된다&lt;span&gt;. 예를 들어 질문을 통해 긍정 또는 부정의 응답을 받고 싶다면 YesNo 버튼을 배치하면 되고 여기에 취소 응답도 가능하다면 YesNoCancel 버튼을 배치하면 된다. Show 메서드는 사용자가 어떤 버튼을 눌렀는가를 나타내는 DialogResult 열거형 값중 하나를 리턴한다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; style=&quot;border-collapse: collapse; color: rgb(95, 94, 66); font-size: 12px; line-height: 18px; border: medium none; margin-left: 11.35pt;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border-bottom-color: windowtext; border-width: 1.5pt medium 0.5pt; border-style: solid none; padding: 0cm 4.95pt; width: 76.95pt; border-top-color: windowtext;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;열거&lt;/span&gt;&amp;nbsp;&lt;/b&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;멤버&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border-bottom-color: windowtext; border-width: 1.5pt medium 0.5pt; border-style: solid none; padding: 0cm 4.95pt; width: 231.65pt; border-top-color: windowtext;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;설명&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;OK&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;확인&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Cancel&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;취소&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Yes&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;예&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;No&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;아니오&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Abort&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;중지&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Ignore&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;무시&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Retry&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border: medium none; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;재시도&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼을&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;눌렀다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td valign=&quot;top&quot; width=&quot;103&quot; style=&quot;border-bottom-color: windowtext; border-width: medium medium 0.5pt; border-style: none none solid; padding: 0cm 4.95pt; width: 76.95pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span&gt;Nothing&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; width=&quot;309&quot; style=&quot;border-bottom-color: windowtext; border-width: medium medium 0.5pt; border-style: none none solid; padding: 0cm 4.95pt; width: 231.65pt;&quot;&gt;&lt;p class=&quot;a0&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; line-height: 1.5;&quot;&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;아무&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;버튼도&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;누르지&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;않았다&lt;/span&gt;&lt;span&gt;.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: 굴림;&quot;&gt;대화상자가&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;계속&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-family: 굴림;&quot;&gt;실행중이다&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;이 리턴값을 조사해 보면 사용자가 질문에 어떻게 응답했는지를 알 수 있다&lt;span&gt;. 메시지 박스로 질문을 했다면 리턴값을 점검해야 하므로 Show 메서드는 보통 if문과 함께 사용된다. 다음 코드는 사용자에게 질문 후 그 응답 결과에 따라 처리를 달리한다.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: center;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:311px;color: rgb(51, 51, 51); text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2561BF3F520E0A3C2C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;제목 없음.png&quot; height=&quot;203&quot; style=&quot;color: rgb(51, 51, 51); text-align: center;&quot; width=&quot;311&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 2em; padding: 0px; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(95, 94, 66);&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 2em; padding: 0px; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;color: rgb(95, 94, 66);&quot;&gt;&amp;nbsp; //&amp;nbsp;&lt;/span&gt;&lt;font color=&quot;#5f5e42&quot;&gt;using System.Windows.Forms;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;b&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if (MessageBox.Show(&quot;안녕하세요?&quot;, &quot;질문&quot;, MessageBoxButtons.YesNo)&lt;/font&gt;&lt;span style=&quot;color: rgb(95, 94, 66); font-size: 9pt; line-height: 1.5;&quot;&gt;&amp;nbsp; == DialogResult.Yes)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 네&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; else&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // 아니요&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; text-align: justify;&quot;&gt;&lt;font color=&quot;#5f5e42&quot;&gt;&lt;b&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;이 코드에 의해 다음과 같은 메시지 박스가 출력된다&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;메시지 문자열이 중앙에 출력되어 있고 캡션에는 메시지의 의미를 짧게 설명하는&lt;span&gt;&amp;nbsp;&quot;질문&quot;(사실 협박이라고 써도 될 것 같다) 문자열이 출력되어 있다. 그리고 메시지의 아래쪽에는 예, 아니오 두 개의 버튼을 배치하여 사용자가 두 버튼 중 하나를 눌러 질문에 답할 수 있도록 한다. Show 메서드 호출 결과 사용자가 누른 버튼이 Yes일 때와 그렇지 않을 때 응답에 따라 다르게 처리할 수 있다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;이 정도면 사용자에게 정보를 전달할 수 있고 질문도 할 수 있으므로 일반적인 용도로 메시지 박스를 활용하는 데는 충분하다&lt;span&gt;. 좀 더 다양한 형태의 메시지 박스를 쓰고 싶다면 훨씬 더 복잡한 형태의 Show 메서드를 사용해야 한다. 가장 인수가 많고 완벽한 Show 메서드를 보자.&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;public static DialogResult Show (&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IWin32Window owner,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string text,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string caption,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MessageBoxButtons buttons,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MessageBoxIcon icon,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MessageBoxDefaultButton defaultButton,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MessageBoxOptions options,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;string helpFilePath,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HelpNavigator navigator,&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Object param&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p class=&quot;a2&quot; style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-right: 0px; margin-left: 0px; padding: 0px; color: rgb(95, 94, 66); text-align: justify;&quot;&gt;무려&lt;span&gt;&amp;nbsp;10개의 인수를 취하는데 부모 윈도우를 지정할 수 있고 메시지 박스에 아이콘을 표시할 수도 있다. 특정 버튼을 디폴트 버튼으로 지정하여 Enter키만 누르면 이 버튼을 누른 것처럼 만들 수도 있고 도움말 파일의 경로를 지정하여 사용자가 메시지 자체에 대해 도움말을 요청할 때 이 파일을 열도록 할 수도 있다. C#에 디폴트 인수 기능이 없기 때문에 Show 메서드가 과다하게 오버로딩되어 있는 편이다.&lt;/span&gt;&lt;/p&gt;</description>
<category>C# and Visual C++</category>
<category>메시지박스 c#</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/219</guid>
<comments>https://topnanis.tistory.com/219#entry219comment</comments>
<pubDate>Fri, 16 Aug 2013 14:03:10 +0900</pubDate>
</item>
<item>
<title>마우스 기능별 6종 제품 평가</title>
<link>https://topnanis.tistory.com/218</link>
<description>&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;예전부터 가지고 싶었던 마우스(로지텍 Performance Mouse M950)를 샀습니다. &lt;/P&gt;
&lt;P&gt;(제품정보 : &lt;A style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot; href=&quot;http://shopping.naver.com/detail/detail.nhn?cat_id=40002622&amp;amp;nv_mid=5496070974&amp;amp;frm=NVSCMOD&amp;amp;query=logitech%20950&quot;&gt;http://shopping.naver.com/detail/detail.nhn?cat_id=40002622&amp;amp;nv_mid=5496070974&amp;amp;frm=NVSCMOD&amp;amp;query=logitech%20950&lt;/A&gt;)&lt;/P&gt;
&lt;P&gt;몇 년 전부터 M705 를 사용해 보고 손이 무척 편해서 계속 사용하였었는데 거리가 멀어지면 감도가 약해지거나 재질에 따라 버벅거릴때가 있었습니다.&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;세달마다 배터리를 교체해야해서 무척&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt; 번거로웠던지라.. &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;가장 마음에 들었던건 배터리 충전기능 &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;주문을 하고.. 기다리던 포장을 뜯어 사용해보니 &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;손이 큰 편이라 묵직하고 큰 마우스가 편하다는 생각이 듭니다&lt;/SPAN&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: left; FLOAT: none; CLEAR: none&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:852px;WIDTH: 852px; HEIGHT: 209px;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/22577943520E0B8203&quot; filemime=&quot;image/jpeg&quot; filename=&quot;mouses.png&quot; height=&quot;209&quot; style=&quot;WIDTH: 852px; HEIGHT: 209px&quot; width=&quot;852&quot;/&gt;&lt;/span&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P style=&quot;TEXT-ALIGN: center; FLOAT: none; CLEAR: none&quot;&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P style=&quot;FLOAT: none; CLEAR: none&quot;&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;로지텍(Logitech)이 워낙 알려진 메이커라 그런지 바가지가 심하고, 가성비가 더 좋은 유사한 제품도 많이 나오고 있지만, 오래두고 사용하는 제품이라 생각하면 제품이 나쁘지 않습니다.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;마우스를 살때 저는 컨트롤이 어렵지 않고 손이 편한 크고, 무거운 무선 마우스를 선호합니다. 컴퓨터 작업이 많아서 그립감(조작 편안함)부분을 많이 보게 되는 것 같아요.&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;&lt;br /&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;구매를 생각하시는 분들이 계실 것 같아 지금까지 제가 사용해 본 마우스들을 비교해 보고자 합니다 (저의 주관적, 제품군 상대적인 기준입니다)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;■&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;일반 삼성 마우스(유선) &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;SMH-210U USB &lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;: 가장 기본적인 마우스.&amp;nbsp;나쁘지 않아요. 버벅거리는 무선보다 시원시원하고 클릭감도 좋구요&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;&lt;br /&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;가성비 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (만원정도)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;그립감 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (은근 편하지 않나요? 클릭 소리도 마음에 들고)&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;디자인 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;■&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;무선 Arc Touch Mouse 1, 2&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;: 제가 무척 사고 싶어했었던 마우스인 데.. 불편한 건 어쩔수 없는 것 같아요. 익숙해서 이 마우스만 사용하는 친구도 있지만..&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;쭉~펴서 노트북 가방에 넣기 좋은 아름다운 &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;콩벌레 &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;마우스 &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;가성비 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; (비싸죠. 7,8 만원이었었나)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;그립감 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (아.. 적응 안됨)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;디자인 :&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt; &lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (커피숍과 도서관에 자주 갈일이 있다면 이걸 사겠습니다. 휴대성도 만점)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;&lt;B&gt;■ Apple Magic Mouse / Apple Mighty Mouse&lt;/B&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;: 시간이 지나도 질리지 않을 심플한 디자인, 아름다움의 결정체. 마우스에까지 애플의 철학이 담겨있다는 점이 신기할 따름&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;가성비 : &lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★★&lt;/SPAN&gt; (비싸요. 무선 7~9 만원)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;그립감 : &lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★★&lt;/SPAN&gt; (불편해요. 특유의 인터페이스가 편한분들도 있다고 하더군요. 감질맛나는 마이티마우스 트랙볼 느낌은 좋아요)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;디자인 : &lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★★★★★+&lt;/SPAN&gt; (보고만 있어도 흐뭇)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;■&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;마이크로소프트 Explorer Touch Mouse (리뷰 : &lt;/SPAN&gt;&lt;A style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot; href=&quot;http://topnanis.tistory.com/149&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;http://topnanis.tistory.com/149&lt;/SPAN&gt;&lt;/A&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;)&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;: 그립감과 디지털로 제어되는 터치 스크롤 기능이 아쉬운 마우스 &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;인식률이 나쁘지 않고 2년째 사용하면서 &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;배터리를 한번도 갈지 않은건 놀라워요&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;가성비 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (5만원 정도)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;그립감 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (아.. 적응 안됨)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;디자인 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; (깔끔해서 한번 만져 보고픈 마음이 들어요)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;■&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;로지텍 M705&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;: 단점이 없다면 계속 사용해도 좋을 마우스라고 할까요. 무선 거리가 멀지 않고, 마우스패드 있고, 배터리 바꾸는 것도 크게 불편하지 않다면야.. 지금까지 사용 했던 마우스 중에서 저는 가장 좋았어요. 감도는 사용하다보면 조금 별로. 동글을 마우스 본체에 탈착이 가능한 것도 좋아요&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;가성비 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (6만원 선)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;그립감 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (크기가 약간 작아요 )&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;디자인 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; (개인 주관이지만 기능중심의 디자인이라고 생각해요)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;&lt;B&gt;■ 로지텍 M950&lt;/B&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;COLOR: rgb(0,0,0)&quot;&gt;: 비싸다는 단점을 뭘로 보완해야 되나.. 거의 유일하게 배터리 충전 기능이 있습니다. 감도도 좋구요. 기능버튼 지원&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;가성비 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★&lt;/SPAN&gt; (11만원)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;그립감 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(255,0,0)&quot;&gt;★+&lt;/SPAN&gt; (손이 큰 사람에게 더 편한 그립감이 있을까 싶네요. 트랙볼 마우스를 사용하는 느낌)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt;디자인 : &lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(255,0,0); FONT-SIZE: 9pt&quot;&gt;★&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(0,0,0); FONT-SIZE: 9pt&quot;&gt; (기능중심)&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;□ 결론 &lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;B&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;- 가격 / 디자인 / 그립감(+기능성) 중에서 선택&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;B style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;- &lt;/SPAN&gt;&lt;/B&gt;&lt;B&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;편한 그립감, 기능중심이면 로지텍이 나쁘지 않음(단, 마우스만)&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;B style=&quot;LINE-HEIGHT: 1.5; FONT-SIZE: 9pt&quot;&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;- &lt;/SPAN&gt;&lt;/B&gt;&lt;B&gt;&lt;SPAN style=&quot;COLOR: rgb(71,102,0)&quot;&gt;로지텍이 무리하게 높은 가격인지라 최근 유사한 디자인 높은 가성비의 여러 제품들이 있음&lt;/SPAN&gt;&lt;SPAN style=&quot;LINE-HEIGHT: 1.5; COLOR: rgb(71,102,0); FONT-SIZE: 9pt&quot;&gt; &lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;
&lt;P&gt;&lt;br /&gt;&lt;/P&gt;</description>
<category>2_ 매콤한컴퓨터세상</category>
<category>logitech mouse</category>
<category>m905 performance</category>
<category>로지텍 마우스</category>
<category>마우스비교</category>
<category>마우스평가</category>
<category>태그를 입력해 주세요.</category>
<author>준환이형님</author>
<guid>https://topnanis.tistory.com/218</guid>
<comments>https://topnanis.tistory.com/218#entry218comment</comments>
<pubDate>Tue, 13 Aug 2013 22:58:48 +0900</pubDate>
</item>
<item>
<title>Mashup Service와 OpenAPI</title>
<link>https://topnanis.tistory.com/217</link>
<description>&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0px; TEXT-INDENT: 0px; FONT: 12px/18px 돋움; WHITE-SPACE: normal; MARGIN-BOTTOM: 0px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;예전부터 글을 쓰고 싶던 주제였는데.. 회사에서 스터디&amp;nbsp;자료를 만들게 되어 블로그에도&amp;nbsp;함께 포스팅을 하게 되었습니다.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0px; TEXT-INDENT: 0px; FONT: 12px/18px 돋움; WHITE-SPACE: normal; MARGIN-BOTTOM: 0px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;여기에서&amp;nbsp;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;서비스의 개념, 정의와 개발하시는 분들을 위해 소스를 포함한 활용 실습까지 간단하게 해보려합니다.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0px; TEXT-INDENT: 0px; FONT: 12px/18px 돋움; WHITE-SPACE: normal; MARGIN-BOTTOM: 0px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0pt; TEXT-INDENT: 0px; unicode-bidi: embed; FONT: 12px/18px 돋움; DIRECTION: ltr; WHITE-SPACE: normal; MARGIN-BOTTOM: 0pt; LETTER-SPACING: normal; COLOR: rgb(51,51,51); MARGIN-LEFT: 0in; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;&lt;b&gt;&lt;/b&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0pt; TEXT-INDENT: 0px; unicode-bidi: embed; FONT: 12px/18px 돋움; DIRECTION: ltr; WHITE-SPACE: normal; MARGIN-BOTTOM: 0pt; LETTER-SPACING: normal; COLOR: rgb(51,51,51); MARGIN-LEFT: 0in; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;&lt;b&gt;&lt;span style=&quot;FONT-FAMILY: '맑은 고딕'; COLOR: black; FONT-SIZE: 12pt&quot;&gt;&lt;span style=&quot;font-family: Dotum, 돋움; color: rgb(65, 116, 217);&quot;&gt;둘 이상을 합쳐 새로운 하나로 만드는 혼합&lt;/span&gt;&lt;span style=&quot;font-family: Dotum, 돋움; color: rgb(65, 116, 217);&quot; class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Dotum, 돋움; color: rgb(65, 116, 217); font-size: 12pt;&quot;&gt;서비스 - MashUp&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;TEXT-TRANSFORM: none; MARGIN-TOP: 0pt; TEXT-INDENT: 0px; unicode-bidi: embed; FONT: 12px/18px 돋움; DIRECTION: ltr; WHITE-SPACE: normal; MARGIN-BOTTOM: 0pt; LETTER-SPACING: normal; COLOR: rgb(51,51,51); MARGIN-LEFT: 0in; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px&quot;&gt;&lt;span style=&quot;FONT-FAMILY: '맑은 고딕'; COLOR: black; FONT-SIZE: 10pt&quot;&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;웹&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot; class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: '맑은 고딕'; COLOR: black; FONT-SIZE: 10pt&quot;&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;상으로 제공되고 있는 정보나 서비스를&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot; class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: '맑은 고딕'; COLOR: black; FONT-SIZE: 10pt&quot;&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;융합하여&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot; class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot;&gt;새로운&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움&quot; class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움; COLOR: black; FONT-SIZE: 10pt&quot;&gt;소프트웨어나 서비스&lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: Dotum,돋움; COLOR: black; FONT-SIZE: 10pt&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;FONT-FAMILY: '맑은 고딕'; COLOR: black; FONT-SIZE: 10