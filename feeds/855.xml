<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Holywater Jeong</title>
    <description>개발자 정성수의 기술(?) 블로그</description>
    <link>http://holywater-jeong.github.io/</link>
    <atom:link href="http://holywater-jeong.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Sep 2018 12:47:22 +0000</pubDate>
    <lastBuildDate>Mon, 24 Sep 2018 12:47:22 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      
      <item>
        <title>Vue.js를 Django 템플릿에서 사용해보자</title>
        <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	블로그를 다시 억지로라도 써야할 것 같아서 포스팅한다.
	역시나 사내 기술에 익숙해지느라 사이드 프로젝트를 할 겨를이 없어서 크게 작성할 만한 주제가 나오지 못했다.
	그래서 사내에서 실험(?)했던 내용을 기술하고자 한다!
	바로 Vue.js를 Django Template과 결합하여 사용하는 것이다.
	이 부분에서 조금 벙쪘던 포인트가 있는데
	1. 자바스크립트 프레임워크/라이브러리를 Webpack 빌드 하는 방법 외에는 써본 적이 없고
	2. Node.js(자바스크립트)의 MVC 프레임워크가 아닌 Python의 Django의 템플릿으로 작성을 해본 적도 없었다. (이건 당연하지, 장고가 처음이니까..?)
	이런 상황에서 여러모로 도전일 수 밖에 없는 상황이었는데 결론적으로는 뭐 생각보다 그리 어렵지 않았다.
	1. Vue를 script로 호출 했을 때 문법과 작성방법이 크게 달라지는 것은 없었고
	2. Node.js Express의 ejs, jade(pug)를 사용하는 것과 DTL을 사용하는 방법 자체가 다르진 않았기 때문이다.
&lt;/p&gt;
&lt;h3&gt;작성 방법&lt;/h3&gt;
&lt;p&gt;
	이번 포스팅은 간단하게 두 개의 포인트를 가져가고자 한다. DTL(장고 템플릿) 내에서 어떻게 Vue를 작성할 것인가? 그리고 Webpack이 아닌 Script 방식에서 컴포넌트를 만들 때 어떻게 템플릿을 구성 것인가?
&lt;/p&gt;
&lt;h3&gt;1. Vue와 DTL 구분자&lt;/h3&gt;
&lt;p&gt;
	일단 Vue 템플릿에서는 Vue의 변수를 호출할 때
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;{{ 변수명 }}&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
	이렇게 작성한다.
	그런데 공교롭게도 DTL에서도 장고 내의 변수를 호출할 때 같은 방법을 취한다.
	어떻게 처리해야할까?
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;delimiters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'${'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 작성해주면 문제 해결!
	저렇게 구분이 될 뿐만 아니라 장고 변수와 Vue의 변수를 결합하여 응용이 가능해진다.
&lt;/p&gt;
&lt;h3&gt;2. 장고 템플릿으로 레이아웃 구성할 때 Vue 컴포넌트 작성법&lt;/h3&gt;
&lt;p&gt;
	장고 템플릿으로 구성하게 될 때 각 페이지마다 Vue가 선언이 되어야하는 구조가 된다.
	그렇게 되면 Vue로 공통 레이아웃을 작성할 수 없을 것만 같은 느낌적인 느낌이 들고는 하는데 역시나 간단한 해결 방법이 있다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mixins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 1(&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	출처: &lt;a href=&quot;https://kr.vuejs.org/v2/api/index.html#mixins&quot; target=&quot;_blank&quot;&gt;https://kr.vuejs.org/v2/api/index.html#mixins&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
	위와 같이 mixin 기능을 사용하게 된다면 걱정 없다.
	공통 레이아웃에서 new Vue를 선언하고 mixin을 선언하며 자식(컨텐츠가 담긴) 컴포넌트에서 mixin을 작성하면 된다.
	물론 자식 컴포넌트의 스크립트가 공통 레이아웃 컴포넌트의 new Vue 선언보다 앞서 호출될 수 있도록 작성은 해야하지만 말이다.
	그런 부분은 DTL의 extends와 block을 사용한다면 어떻게 작성해야할지 쉽게 이해할 수 있을 것이다. &lt;a target=&quot;_blank&quot; href=&quot;https://docs.djangoproject.com/en/2.1/ref/templates/language/&quot;&gt;(공식 링크)&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	블로그를 다시 억지로라도 써야할 것 같아서 포스팅한다.
	역시나 사내 기술에 익숙해지느라 사이드 프로젝트를 할 겨를이 없어서 크게 작성할 만한 주제가 나오지 못했다.
	그래서 사내에서 실험(?)했던 내용을 기술하고자 한다!
	바로 Vue.js를 Django Template과 결합하여 사용하는 것이다.
	이 부분에서 조금 벙쪘던 포인트가 있는데
	1. 자바스크립트 프레임워크/라이브러리를 Webpack 빌드 하는 방법 외에는 써본 적이 없고
	2. Node.js(자바스크립트)의 MVC 프레임워크가 아닌 Python의 Django의 템플릿으로 작성을 해본 적도 없었다. (이건 당연하지, 장고가 처음이니까..?)
	이런 상황에서 여러모로 도전일 수 밖에 없는 상황이었는데 결론적으로는 뭐 생각보다 그리 어렵지 않았다.
	1. Vue를 script로 호출 했을 때 문법과 작성방법이 크게 달라지는 것은 없었고
	2. Node.js Express의 ejs, jade(pug)를 사용하는 것과 DTL을 사용하는 방법 자체가 다르진 않았기 때문이다.
&lt;/p&gt;
&lt;h3&gt;작성 방법&lt;/h3&gt;
&lt;p&gt;
	이번 포스팅은 간단하게 두 개의 포인트를 가져가고자 한다. DTL(장고 템플릿) 내에서 어떻게 Vue를 작성할 것인가? 그리고 Webpack이 아닌 Script 방식에서 컴포넌트를 만들 때 어떻게 템플릿을 구성 것인가?
&lt;/p&gt;
&lt;h3&gt;1. Vue와 DTL 구분자&lt;/h3&gt;
&lt;p&gt;
	일단 Vue 템플릿에서는 Vue의 변수를 호출할 때
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;{{ 변수명 }}&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
	이렇게 작성한다.
	그런데 공교롭게도 DTL에서도 장고 내의 변수를 호출할 때 같은 방법을 취한다.
	어떻게 처리해야할까?
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;delimiters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'${'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 작성해주면 문제 해결!
	저렇게 구분이 될 뿐만 아니라 장고 변수와 Vue의 변수를 결합하여 응용이 가능해진다.
&lt;/p&gt;
&lt;h3&gt;2. 장고 템플릿으로 레이아웃 구성할 때 Vue 컴포넌트 작성법&lt;/h3&gt;
&lt;p&gt;
	장고 템플릿으로 구성하게 될 때 각 페이지마다 Vue가 선언이 되어야하는 구조가 된다.
	그렇게 되면 Vue로 공통 레이아웃을 작성할 수 없을 것만 같은 느낌적인 느낌이 들고는 하는데 역시나 간단한 해결 방법이 있다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mixins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 1(&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	출처: &lt;a href=&quot;https://kr.vuejs.org/v2/api/index.html#mixins&quot; target=&quot;_blank&quot;&gt;https://kr.vuejs.org/v2/api/index.html#mixins&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
	위와 같이 mixin 기능을 사용하게 된다면 걱정 없다.
	공통 레이아웃에서 new Vue를 선언하고 mixin을 선언하며 자식(컨텐츠가 담긴) 컴포넌트에서 mixin을 작성하면 된다.
	물론 자식 컴포넌트의 스크립트가 공통 레이아웃 컴포넌트의 new Vue 선언보다 앞서 호출될 수 있도록 작성은 해야하지만 말이다.
	그런 부분은 DTL의 extends와 block을 사용한다면 어떻게 작성해야할지 쉽게 이해할 수 있을 것이다. &lt;a target=&quot;_blank&quot; href=&quot;https://docs.djangoproject.com/en/2.1/ref/templates/language/&quot;&gt;(공식 링크)&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Mon, 24 Sep 2018 00:45:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/vue-django/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/vue-django/</guid>
        
        
        <category>javascript</category>
        
        <category>vue</category>
        
        <category>python</category>
        
        <category>django</category>
        
      </item>
      
    
      
      <item>
        <title>Vue.js의 SSR 프레임워크인 Nuxt.js를 알아보자</title>
        <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	블로그를 작성에 있어서 조금 뜸했다.
	다름이 아니라 얼마 전 새 직장에 들어가게 돼서 정신이 없었다.
	새 직장에서 일을 하게 됐는데 &lt;b&gt;Vue&lt;/b&gt;를 사용하고 있다.
	&lt;br /&gt;
	먼저 간략하게 소개를 하자면 필자는 가장 처음 웹을 시작 할 때 jQuery와 BootStrap으로 시작을 했고, 신규 프로젝트로 SPA(Single Page Application)를 만들기 위해 Angular.js를 사용했었다.
	그리고 지난 몇년 간 관심을 주로 가지던 쪽은 React였고 최근에는 React의 SSR을 편하게 구현할 수 있는 Next.js를 사용해보는 등 JS UI 라이브러리/프레임워크 중에선 나름 깊게 학습해본 것 같다.
	&lt;br /&gt;
	이것 저것 해봐서 그런지 Vue를 당장 이해하는 것에 있어서 어려움은 없지만 &lt;b&gt;편하게 개발하는 것을 중요하게 생각하는 사람&lt;/b&gt;으로서 &lt;b&gt;React의 Next.js 같은 프레임워크&lt;/b&gt;인 &lt;b&gt;Vue 진영의 SSR 프레임워크인 Nuxt.js&lt;/b&gt;를 사용해보게 되었다.
&lt;/p&gt;
&lt;h3&gt;What is Nuxt.js?&lt;/h3&gt;
&lt;p&gt;
	백문이 불여일견.
	먼저 &lt;a href=&quot;https://ko.nuxtjs.org/&quot;&gt;공식 페이지&lt;/a&gt;부터 방문해보자.
	첫 인상부터 좋다.
	&lt;b&gt;한글 문서도 제공&lt;/b&gt;한다.
	소개 문구를 보면 다음과 같다.
	&lt;span class=&quot;italic quote block&quot;&gt;
		&quot;2016년 10월 25일, zeit.co의 개발팀은 서버사이드 렌더링 React 애플리케이션을 위한 프레임워크인 Next.js 프레임워크를 발표했습니다. 발표 몇 시간 뒤, Next.js처럼 서버사이드 렌더링 Vue.js 애플리케이션을 위한 프레임워크를 만들자는 생각이 들었고, 그렇게 Nuxt.js 가 탄생했습니다.&quot;
	&lt;/span&gt;
	그렇다.
	소개글이 &lt;b&gt;React의 Next.js와 비슷한 역할을 한다고 말할 수 있는 이유&lt;/b&gt;이다.
	실제로 Next.js를 사용하면서 라우팅과 같은 여러 과정이 상당히 편하다고 생각이 드는데 필자가 간단하게 접해본 바로는 Next.js보다는 Nuxt.js가 조금 더 편한 것 같다는 생각이 들기도 한다.
	오늘은 소개하는 차원에서 간단하게만 알아보도록 하자.
&lt;/p&gt;
&lt;h3&gt;전체적인 동작 방식과 특징&lt;/h3&gt;
&lt;p&gt;
	역시나 먼저는 &lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%A9%EB%8B%88%EA%B9%8C-&quot;&gt;공식 문서&lt;/a&gt;를 보는 것이 좋긴하다.
	Nuxt.js는 &lt;b&gt;Vue 2를 기반&lt;/b&gt;으로해서 &lt;b&gt;Vue Router, Vuex(선택), Vue Server Renderer(spa 모드 제외), Vue-meta&lt;/b&gt;를 포함한다고 한다.
	원래는 직접 구현해야하는 부분을 Nuxt가 간단하게 구현할 수 있도록 도와준다.
	특징을 한 번 보면 &lt;b&gt;SSR, HMR, Head 요소 관리, 비동기 데이터 기반 라우팅 시스템, ES6/ES7 지원&lt;/b&gt; 등이 눈에 띈다.
	&lt;br /&gt;
	다른 요소야 개발자 입장에서 Next.js와 크게 다르다고 느끼진 못 할수도 있지만 한가지를 꼽자면 &lt;b&gt;Head 요소&lt;/b&gt;가 있다.
	Next.js에서 Head 요소를 관리하는 방법은 Next에서 Head 컴포넌트를 불러와서 작성을 하는 것이지만 &lt;b&gt;Nuxt.js는 nuxt.config.js에서 json 형식으로 작성&lt;/b&gt;하는 것이 조금 다르다고 볼 수 있다.
	관련 된 내용은 아래 링크한 문서를 참고하자.
	&lt;br /&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/api/configuration-head&quot;&gt;nuxt.config.js 에서 Head 프로퍼티 관리&lt;/a&gt;, 
	&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/api/pages-head&quot;&gt;*.vue 파일에서 head 메소드로 요소 관리&lt;/a&gt;,
&lt;/p&gt;
&lt;h3&gt;라우팅&lt;/h3&gt;
&lt;p&gt;
	라우팅 기능이 확실히 조금 편해보인다.
	pages라는 디렉토리 내에 example.vue 파일을 만든다면 자동으로 /example로 라우팅 하게 된다.
	pages 디렉토리 내에 user라는 디렉토리를 만들고 info.vue 파일을 생성하면 /user/info 로 라우팅이 된다.
	파라미터가 필요한 경우에는 _{원하는 파라미터 명}.vue로 만들어서 /{원하는 파라미터}? 로 라우팅을 할 수 있다.
	이 부분도 &lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide/routing&quot;&gt;문서&lt;/a&gt;로 친절하게 설명이 되어있으니 참고하도록 하자.
&lt;/p&gt;
&lt;h3&gt;Vuex&lt;/h3&gt;
&lt;p&gt;
	Vuex는 부모에서 자식 컴포넌트를 왔다갔다 하면서 데이터를 관리하는 것이 어려울 경우 사용하면 좋은 &lt;b&gt;데이터 관리 라이브러리&lt;/b&gt;이다.
	Vuex를 아직 깊게 보진 못했으나 Redux와 비슷한 구석이 많아서 당장 기능을 구현하는데 큰 어려움은 없다.
	역시나 Nuxt.js 프로젝트 내에 store라는 디렉토리를 만들고 파일을 만들면 쉽게 호출이 가능하도록 해놨다.
	상황에 맞게 적절히 활용한다면 좋은 툴이 될 수 있다.
	먼저 Nuxt에서 Vuex를 사용하는 방법은 클래식 방식과 모듈 방식이 있는데&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide/vuex-store&quot;&gt;공식 문서&lt;/a&gt;를 참고하면 쉽게 이해가 가능하고 다음에 더 자세한 내용으로 포스팅할 예정이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;

</description>
        
          <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	블로그를 작성에 있어서 조금 뜸했다.
	다름이 아니라 얼마 전 새 직장에 들어가게 돼서 정신이 없었다.
	새 직장에서 일을 하게 됐는데 &lt;b&gt;Vue&lt;/b&gt;를 사용하고 있다.
	&lt;br /&gt;
	먼저 간략하게 소개를 하자면 필자는 가장 처음 웹을 시작 할 때 jQuery와 BootStrap으로 시작을 했고, 신규 프로젝트로 SPA(Single Page Application)를 만들기 위해 Angular.js를 사용했었다.
	그리고 지난 몇년 간 관심을 주로 가지던 쪽은 React였고 최근에는 React의 SSR을 편하게 구현할 수 있는 Next.js를 사용해보는 등 JS UI 라이브러리/프레임워크 중에선 나름 깊게 학습해본 것 같다.
	&lt;br /&gt;
	이것 저것 해봐서 그런지 Vue를 당장 이해하는 것에 있어서 어려움은 없지만 &lt;b&gt;편하게 개발하는 것을 중요하게 생각하는 사람&lt;/b&gt;으로서 &lt;b&gt;React의 Next.js 같은 프레임워크&lt;/b&gt;인 &lt;b&gt;Vue 진영의 SSR 프레임워크인 Nuxt.js&lt;/b&gt;를 사용해보게 되었다.
&lt;/p&gt;
&lt;h3&gt;What is Nuxt.js?&lt;/h3&gt;
&lt;p&gt;
	백문이 불여일견.
	먼저 &lt;a href=&quot;https://ko.nuxtjs.org/&quot;&gt;공식 페이지&lt;/a&gt;부터 방문해보자.
	첫 인상부터 좋다.
	&lt;b&gt;한글 문서도 제공&lt;/b&gt;한다.
	소개 문구를 보면 다음과 같다.
	&lt;span class=&quot;italic quote block&quot;&gt;
		&quot;2016년 10월 25일, zeit.co의 개발팀은 서버사이드 렌더링 React 애플리케이션을 위한 프레임워크인 Next.js 프레임워크를 발표했습니다. 발표 몇 시간 뒤, Next.js처럼 서버사이드 렌더링 Vue.js 애플리케이션을 위한 프레임워크를 만들자는 생각이 들었고, 그렇게 Nuxt.js 가 탄생했습니다.&quot;
	&lt;/span&gt;
	그렇다.
	소개글이 &lt;b&gt;React의 Next.js와 비슷한 역할을 한다고 말할 수 있는 이유&lt;/b&gt;이다.
	실제로 Next.js를 사용하면서 라우팅과 같은 여러 과정이 상당히 편하다고 생각이 드는데 필자가 간단하게 접해본 바로는 Next.js보다는 Nuxt.js가 조금 더 편한 것 같다는 생각이 들기도 한다.
	오늘은 소개하는 차원에서 간단하게만 알아보도록 하자.
&lt;/p&gt;
&lt;h3&gt;전체적인 동작 방식과 특징&lt;/h3&gt;
&lt;p&gt;
	역시나 먼저는 &lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide#%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%A9%EB%8B%88%EA%B9%8C-&quot;&gt;공식 문서&lt;/a&gt;를 보는 것이 좋긴하다.
	Nuxt.js는 &lt;b&gt;Vue 2를 기반&lt;/b&gt;으로해서 &lt;b&gt;Vue Router, Vuex(선택), Vue Server Renderer(spa 모드 제외), Vue-meta&lt;/b&gt;를 포함한다고 한다.
	원래는 직접 구현해야하는 부분을 Nuxt가 간단하게 구현할 수 있도록 도와준다.
	특징을 한 번 보면 &lt;b&gt;SSR, HMR, Head 요소 관리, 비동기 데이터 기반 라우팅 시스템, ES6/ES7 지원&lt;/b&gt; 등이 눈에 띈다.
	&lt;br /&gt;
	다른 요소야 개발자 입장에서 Next.js와 크게 다르다고 느끼진 못 할수도 있지만 한가지를 꼽자면 &lt;b&gt;Head 요소&lt;/b&gt;가 있다.
	Next.js에서 Head 요소를 관리하는 방법은 Next에서 Head 컴포넌트를 불러와서 작성을 하는 것이지만 &lt;b&gt;Nuxt.js는 nuxt.config.js에서 json 형식으로 작성&lt;/b&gt;하는 것이 조금 다르다고 볼 수 있다.
	관련 된 내용은 아래 링크한 문서를 참고하자.
	&lt;br /&gt;
	&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/api/configuration-head&quot;&gt;nuxt.config.js 에서 Head 프로퍼티 관리&lt;/a&gt;, 
	&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/api/pages-head&quot;&gt;*.vue 파일에서 head 메소드로 요소 관리&lt;/a&gt;,
&lt;/p&gt;
&lt;h3&gt;라우팅&lt;/h3&gt;
&lt;p&gt;
	라우팅 기능이 확실히 조금 편해보인다.
	pages라는 디렉토리 내에 example.vue 파일을 만든다면 자동으로 /example로 라우팅 하게 된다.
	pages 디렉토리 내에 user라는 디렉토리를 만들고 info.vue 파일을 생성하면 /user/info 로 라우팅이 된다.
	파라미터가 필요한 경우에는 _{원하는 파라미터 명}.vue로 만들어서 /{원하는 파라미터}? 로 라우팅을 할 수 있다.
	이 부분도 &lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide/routing&quot;&gt;문서&lt;/a&gt;로 친절하게 설명이 되어있으니 참고하도록 하자.
&lt;/p&gt;
&lt;h3&gt;Vuex&lt;/h3&gt;
&lt;p&gt;
	Vuex는 부모에서 자식 컴포넌트를 왔다갔다 하면서 데이터를 관리하는 것이 어려울 경우 사용하면 좋은 &lt;b&gt;데이터 관리 라이브러리&lt;/b&gt;이다.
	Vuex를 아직 깊게 보진 못했으나 Redux와 비슷한 구석이 많아서 당장 기능을 구현하는데 큰 어려움은 없다.
	역시나 Nuxt.js 프로젝트 내에 store라는 디렉토리를 만들고 파일을 만들면 쉽게 호출이 가능하도록 해놨다.
	상황에 맞게 적절히 활용한다면 좋은 툴이 될 수 있다.
	먼저 Nuxt에서 Vuex를 사용하는 방법은 클래식 방식과 모듈 방식이 있는데&lt;a target=&quot;_blank&quot; href=&quot;https://ko.nuxtjs.org/guide/vuex-store&quot;&gt;공식 문서&lt;/a&gt;를 참고하면 쉽게 이해가 가능하고 다음에 더 자세한 내용으로 포스팅할 예정이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Fri, 13 Jul 2018 23:10:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/vue-nuxt/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/vue-nuxt/</guid>
        
        
        <category>javascript</category>
        
        <category>vue</category>
        
      </item>
      
    
      
      <item>
        <title>컨테이너 기반의 가상화 기술인 Docker를 알아보자</title>
        <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker/docker.png&quot; /&gt;
	&lt;br /&gt;
	필자의 개발자로서 &lt;b&gt;&quot;나중에 덜 귀찮기 위해 지금 귀찮아야한다&quot;&lt;/b&gt;는 마인드를 가지고 있다.
	그러기 위해 프로그래밍 영역에서 모듈화 부분에 대해서도 많이 신경을 쓰고, 개발 언어도 다양한 영역(클라이언트, 서버, 앱)에서 최대한 많은 것들을 공유할 수 있는 Javascript(React, Node.js)에 관심을 크게 두고 있다.
	요즘에는 개발환경에 대해서도 어떻게 구성해야 더 효율적으로 개발할 수 있는지를 고민하는데 그런 의미에서 &lt;b&gt;Docker&lt;/b&gt;라는 기술에 아주 큰 관심을 가지고 있다.
	오늘은 &lt;b&gt;컨테이너를 기반으로 하는 가상화 플랫폼 Docker&lt;/b&gt;라는 기술이 어떤 것인지 알아보도록 하자.
&lt;/p&gt;
&lt;h3&gt;컨테이너란?&lt;/h3&gt;
&lt;p&gt;
	컨테이너는 흔히 말하는 가상 머신(VM, Virtual Machine)이랑은 다르다.
	&lt;b&gt;공통점이라면 일단 가상화를 목적&lt;/b&gt;으로 한다는 것이 있겠다.
	그렇다면 각각의 특징이 무엇인지 알아보자.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;여러 개 컨테이너가 한 OS&lt;/b&gt;에 올라가지만 &lt;b&gt;VM&lt;/b&gt;은 작업 영역 분리 시 &lt;b&gt;각각의 Guest OS&lt;/b&gt;가 필요하다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;VM&lt;/b&gt;은 &lt;b&gt;Host OS와 상관 없이 OS를 자유롭게 선택&lt;/b&gt; 가능하지만 가상화 컨테이너는 그렇지 않다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;이미지를 기반으로하여 동일한 개발환경 구성과 배포에 용이&lt;/b&gt;하지만 VM은 비교적 쉽지 않다&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;보안에 취약&lt;/b&gt;하다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너가 VM에 비해 성능이 좋다&lt;/b&gt;(물론, 둘 다 Host OS보다는 떨어진다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	위와 같이 둘 다 장단점이 존재한다.
	그래서 꼭 &quot;컨테이너가 가상머신을 대체할 것이다.&quot;라는 관점보다는 &lt;b&gt;서로 상호 보완할 수 있는 존재&lt;/b&gt;로 여기는 게 좋지 않을까 싶다.
&lt;/p&gt;
&lt;h3&gt;도커와 VM의 기술적인 차이&lt;/h3&gt;
&lt;p&gt;
	&lt;b&gt;도커&lt;/b&gt;는 &lt;b&gt;컨테이너 기술의 대표주자&lt;/b&gt;이기 때문에 도커가 거의 대명사처럼 불린다.
	그래서 이번에는 도커와 VM이 어떤 형태로 구성이 되어있는지를 알아보자.
	&lt;br /&gt;
	&lt;img src=&quot;/assets/img/blog/docker/docker-vm.png&quot; /&gt;
	&lt;br /&gt;
	&lt;i&gt;
		image 출처 &lt;a href=&quot;https://blog.docker.com/2016/07/the-10-most-common-questions-it-admins-ask-about-docker/&quot;&gt;docker blog&lt;/a&gt;
	&lt;/i&gt;
	&lt;br /&gt;
	VM은 &lt;b&gt;Host OS &amp;gt; HyperVisor &amp;gt; Guest OS(여러 개 나뉘기 시작) &amp;gt; Bins/Libs &amp;gt; App&lt;/b&gt; 이런 순서로 나뉜다.
	도커는 &lt;b&gt;Host OS &amp;gt; Docker Engine &amp;gt; Bins/Libs &amp;gt; App&lt;/b&gt; 순서로 나뉜다.
	차이는 &lt;b&gt;VM&lt;/b&gt;은 &lt;b&gt;Host OS 위에 Guest OS로 분리&lt;/b&gt; 되지만 &lt;b&gt;도커&lt;/b&gt;에서는 &lt;b&gt;Host OS 하나만 존재하고 Docker Engine에서 작업 영역이 격리&lt;/b&gt;된다는 것이다.
	그래서 &lt;b&gt;도커가 성능에서 더 좋은 퍼포먼스&lt;/b&gt;를 보여주는 것이다.
	반대로 &lt;b&gt;도커는 한 컨테이너만 보안적인 이슈가 생겨도 나머지 컨테이너와 Host까지 위험&lt;/b&gt;할 수 있지만 &lt;b&gt;VM은 한 영역의 공격은 한 영역에서 끝&lt;/b&gt;난다.
	그래서 &lt;b&gt;VM은 여러가지 OS에서 애플리케이션을 띄워야 하는 경우&lt;/b&gt;에 용이하다고 볼 수 있고 &lt;b&gt;도커는 한 컨테이너 내에서 애플리케이션을 여러 개 띄울 경우 좋은 케이스&lt;/b&gt;가 될 수 있겠다. 
&lt;/p&gt;
&lt;h3&gt;도커의 중요한 개념. 이미지와 컨테이너&lt;/h3&gt;
&lt;p&gt;
	도커에는 중요한 개념인 &lt;b&gt;이미지&lt;/b&gt;와 &lt;b&gt;컨테이너&lt;/b&gt;가 있다.
	&lt;b&gt;이미지&lt;/b&gt;를 먼저 알아보자면 &lt;b&gt;컨테이너를 구동하기 위한 기능과 환경설정 등이 포함&lt;/b&gt;되어 있다.
	이런 것들은 &lt;b&gt;사용자 정의를 통해서 재구성도 가능&lt;/b&gt;하다.
	기본적으로 &lt;b&gt;Dockerfile에 정의&lt;/b&gt;해서 사용한다.
	&lt;b&gt;컨테이너&lt;/b&gt;는 위에서도 말했지만 &lt;b&gt;OS로 분리되지 않는다.&lt;/b&gt;
	&lt;b&gt;프로세스가 격리&lt;/b&gt;된다고 보면 되겠다.
&lt;/p&gt;
&lt;h3&gt;의존성과 링크 기능을 제공하는 Docker Compose&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker/docker-compose.png&quot; /&gt;
	&lt;br /&gt;
	Docker를 사용하면서 한 애플리케이션만 올리는 경우는 별로 없을 것이다.
	그래서 &lt;b&gt;애플리케이션을 여러 개 띄울 때 순서대로 띄우거나 링크 기능이 필요한 경우&lt;/b&gt;도 있다.
	그럴 때 사용하는 것이 &lt;b&gt;Docker Compose&lt;/b&gt;다.
	Docker Compose로 &lt;b&gt;여러 개의 컨테이너를 한 번에 구동시킬 수 있는 편리성 제공&lt;/b&gt;이 우선이다.
	여러 개의 컨테이너를 정의한 &lt;b&gt;docker-compose.yml을 작성&lt;/b&gt;한 후 &lt;b&gt;&quot;docker-compose up&quot;&lt;/b&gt; 명령어 하나면 쉽게 구동이 가능하다.
	그리고 한 컨테이너가 먼저 구동되고 다른 컨테이너에서 실행이 되는 &lt;b&gt;depends_on&lt;/b&gt; 기능, 다른 컨테이너에서 명시적으로 호출할 수 있는 &lt;b&gt;link&lt;/b&gt; 기능으로 명시적인 url이나 ip를 사용하지 않고 호출 가능하다.
&lt;/p&gt;
&lt;h3&gt;Docker Orchestration&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker/docker-swarm.png&quot; /&gt;
	&lt;br /&gt;
	서비스가 커지면 커질 수록 물리적인 서버 한 대로 커버하기 힘들 것이다.
	그럴 때 Docker 또한 자유롭지 못하다.
	그래서 &lt;b&gt;Docker Orchestration&lt;/b&gt;라는 개념이 존재한다.
	&lt;b&gt;물리적으로 분리된 여러 대의 서버에서도 Docker를 사용하고자 할 때&lt;/b&gt; 사용하는 기술이다.
	그 도커 오케스트레이션에서 가장 유명한 기술이 &lt;b&gt;Docker Swarm&lt;/b&gt;이다.
	이 부분은 공부를 자세히 하지 않아 모르겠어서 자세히 언급하지 않겠다.
&lt;/p&gt;
&lt;h3&gt;Next.js와 Docker&lt;/h3&gt;
&lt;p&gt;
	Next.js를 공부하고 있다보니 이것을 어떻게 Docker에 잘 적용시킬 수 있을지를 고민한다.
	Production 서비스의 경우 큰 문제는 없다.
	&lt;b&gt;Development에서는 HMR 기능을 사용하게 되는데 이 부분을 Docker에서도 사용할 수 있는지&lt;/b&gt; 파악 중이다.
	&lt;a target=&quot;_blank&quot; href=&quot;http://www.summa.com/blog/docker-for-developers-hot-module-reloading-live-editing-in-containers&quot;&gt;일반적인 기술 사용에서 HMR에 대한 글&lt;/a&gt;은 있지만 Next.js HMR 기능과 Docker에 연관되어 쓰여진 글을 본 적이 없다.
	이 부분을 연구해서 블로그 포스팅을 해보는 게 목표다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker#excerpt/docker.png&quot; /&gt;
	&lt;br /&gt;
	필자의 개발자로서 &lt;b&gt;&quot;나중에 덜 귀찮기 위해 지금 귀찮아야한다&quot;&lt;/b&gt;는 마인드를 가지고 있다.
	그러기 위해 프로그래밍 영역에서 모듈화 부분에 대해서도 많이 신경을 쓰고, 개발 언어도 다양한 영역(클라이언트, 서버, 앱)에서 최대한 많은 것들을 공유할 수 있는 Javascript(React, Node.js)에 관심을 크게 두고 있다.
	요즘에는 개발환경에 대해서도 어떻게 구성해야 더 효율적으로 개발할 수 있는지를 고민하는데 그런 의미에서 &lt;b&gt;Docker&lt;/b&gt;라는 기술에 아주 큰 관심을 가지고 있다.
	오늘은 &lt;b&gt;컨테이너를 기반으로 하는 가상화 플랫폼 Docker&lt;/b&gt;라는 기술이 어떤 것인지 알아보도록 하자.
&lt;/p&gt;
&lt;h3&gt;컨테이너란?&lt;/h3&gt;
&lt;p&gt;
	컨테이너는 흔히 말하는 가상 머신(VM, Virtual Machine)이랑은 다르다.
	&lt;b&gt;공통점이라면 일단 가상화를 목적&lt;/b&gt;으로 한다는 것이 있겠다.
	그렇다면 각각의 특징이 무엇인지 알아보자.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;여러 개 컨테이너가 한 OS&lt;/b&gt;에 올라가지만 &lt;b&gt;VM&lt;/b&gt;은 작업 영역 분리 시 &lt;b&gt;각각의 Guest OS&lt;/b&gt;가 필요하다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;VM&lt;/b&gt;은 &lt;b&gt;Host OS와 상관 없이 OS를 자유롭게 선택&lt;/b&gt; 가능하지만 가상화 컨테이너는 그렇지 않다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;이미지를 기반으로하여 동일한 개발환경 구성과 배포에 용이&lt;/b&gt;하지만 VM은 비교적 쉽지 않다&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너&lt;/b&gt;는 &lt;b&gt;보안에 취약&lt;/b&gt;하다.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;컨테이너가 VM에 비해 성능이 좋다&lt;/b&gt;(물론, 둘 다 Host OS보다는 떨어진다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	위와 같이 둘 다 장단점이 존재한다.
	그래서 꼭 &quot;컨테이너가 가상머신을 대체할 것이다.&quot;라는 관점보다는 &lt;b&gt;서로 상호 보완할 수 있는 존재&lt;/b&gt;로 여기는 게 좋지 않을까 싶다.
&lt;/p&gt;
&lt;h3&gt;도커와 VM의 기술적인 차이&lt;/h3&gt;
&lt;p&gt;
	&lt;b&gt;도커&lt;/b&gt;는 &lt;b&gt;컨테이너 기술의 대표주자&lt;/b&gt;이기 때문에 도커가 거의 대명사처럼 불린다.
	그래서 이번에는 도커와 VM이 어떤 형태로 구성이 되어있는지를 알아보자.
	&lt;br /&gt;
	&lt;img src=&quot;/assets/img/blog/docker#excerpt/docker-vm.png&quot; /&gt;
	&lt;br /&gt;
	&lt;i&gt;
		image 출처 &lt;a href=&quot;https://blog.docker.com/2016/07/the-10-most-common-questions-it-admins-ask-about-docker/&quot;&gt;docker blog&lt;/a&gt;
	&lt;/i&gt;
	&lt;br /&gt;
	VM은 &lt;b&gt;Host OS &amp;gt; HyperVisor &amp;gt; Guest OS(여러 개 나뉘기 시작) &amp;gt; Bins/Libs &amp;gt; App&lt;/b&gt; 이런 순서로 나뉜다.
	도커는 &lt;b&gt;Host OS &amp;gt; Docker Engine &amp;gt; Bins/Libs &amp;gt; App&lt;/b&gt; 순서로 나뉜다.
	차이는 &lt;b&gt;VM&lt;/b&gt;은 &lt;b&gt;Host OS 위에 Guest OS로 분리&lt;/b&gt; 되지만 &lt;b&gt;도커&lt;/b&gt;에서는 &lt;b&gt;Host OS 하나만 존재하고 Docker Engine에서 작업 영역이 격리&lt;/b&gt;된다는 것이다.
	그래서 &lt;b&gt;도커가 성능에서 더 좋은 퍼포먼스&lt;/b&gt;를 보여주는 것이다.
	반대로 &lt;b&gt;도커는 한 컨테이너만 보안적인 이슈가 생겨도 나머지 컨테이너와 Host까지 위험&lt;/b&gt;할 수 있지만 &lt;b&gt;VM은 한 영역의 공격은 한 영역에서 끝&lt;/b&gt;난다.
	그래서 &lt;b&gt;VM은 여러가지 OS에서 애플리케이션을 띄워야 하는 경우&lt;/b&gt;에 용이하다고 볼 수 있고 &lt;b&gt;도커는 한 컨테이너 내에서 애플리케이션을 여러 개 띄울 경우 좋은 케이스&lt;/b&gt;가 될 수 있겠다. 
&lt;/p&gt;
&lt;h3&gt;도커의 중요한 개념. 이미지와 컨테이너&lt;/h3&gt;
&lt;p&gt;
	도커에는 중요한 개념인 &lt;b&gt;이미지&lt;/b&gt;와 &lt;b&gt;컨테이너&lt;/b&gt;가 있다.
	&lt;b&gt;이미지&lt;/b&gt;를 먼저 알아보자면 &lt;b&gt;컨테이너를 구동하기 위한 기능과 환경설정 등이 포함&lt;/b&gt;되어 있다.
	이런 것들은 &lt;b&gt;사용자 정의를 통해서 재구성도 가능&lt;/b&gt;하다.
	기본적으로 &lt;b&gt;Dockerfile에 정의&lt;/b&gt;해서 사용한다.
	&lt;b&gt;컨테이너&lt;/b&gt;는 위에서도 말했지만 &lt;b&gt;OS로 분리되지 않는다.&lt;/b&gt;
	&lt;b&gt;프로세스가 격리&lt;/b&gt;된다고 보면 되겠다.
&lt;/p&gt;
&lt;h3&gt;의존성과 링크 기능을 제공하는 Docker Compose&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker#excerpt/docker-compose.png&quot; /&gt;
	&lt;br /&gt;
	Docker를 사용하면서 한 애플리케이션만 올리는 경우는 별로 없을 것이다.
	그래서 &lt;b&gt;애플리케이션을 여러 개 띄울 때 순서대로 띄우거나 링크 기능이 필요한 경우&lt;/b&gt;도 있다.
	그럴 때 사용하는 것이 &lt;b&gt;Docker Compose&lt;/b&gt;다.
	Docker Compose로 &lt;b&gt;여러 개의 컨테이너를 한 번에 구동시킬 수 있는 편리성 제공&lt;/b&gt;이 우선이다.
	여러 개의 컨테이너를 정의한 &lt;b&gt;docker-compose.yml을 작성&lt;/b&gt;한 후 &lt;b&gt;&quot;docker-compose up&quot;&lt;/b&gt; 명령어 하나면 쉽게 구동이 가능하다.
	그리고 한 컨테이너가 먼저 구동되고 다른 컨테이너에서 실행이 되는 &lt;b&gt;depends_on&lt;/b&gt; 기능, 다른 컨테이너에서 명시적으로 호출할 수 있는 &lt;b&gt;link&lt;/b&gt; 기능으로 명시적인 url이나 ip를 사용하지 않고 호출 가능하다.
&lt;/p&gt;
&lt;h3&gt;Docker Orchestration&lt;/h3&gt;
&lt;p&gt;
	&lt;img src=&quot;/assets/img/blog/docker#excerpt/docker-swarm.png&quot; /&gt;
	&lt;br /&gt;
	서비스가 커지면 커질 수록 물리적인 서버 한 대로 커버하기 힘들 것이다.
	그럴 때 Docker 또한 자유롭지 못하다.
	그래서 &lt;b&gt;Docker Orchestration&lt;/b&gt;라는 개념이 존재한다.
	&lt;b&gt;물리적으로 분리된 여러 대의 서버에서도 Docker를 사용하고자 할 때&lt;/b&gt; 사용하는 기술이다.
	그 도커 오케스트레이션에서 가장 유명한 기술이 &lt;b&gt;Docker Swarm&lt;/b&gt;이다.
	이 부분은 공부를 자세히 하지 않아 모르겠어서 자세히 언급하지 않겠다.
&lt;/p&gt;
&lt;h3&gt;Next.js와 Docker&lt;/h3&gt;
&lt;p&gt;
	Next.js를 공부하고 있다보니 이것을 어떻게 Docker에 잘 적용시킬 수 있을지를 고민한다.
	Production 서비스의 경우 큰 문제는 없다.
	&lt;b&gt;Development에서는 HMR 기능을 사용하게 되는데 이 부분을 Docker에서도 사용할 수 있는지&lt;/b&gt; 파악 중이다.
	&lt;a target=&quot;_blank&quot; href=&quot;http://www.summa.com/blog/docker-for-developers-hot-module-reloading-live-editing-in-containers&quot;&gt;일반적인 기술 사용에서 HMR에 대한 글&lt;/a&gt;은 있지만 Next.js HMR 기능과 Docker에 연관되어 쓰여진 글을 본 적이 없다.
	이 부분을 연구해서 블로그 포스팅을 해보는 게 목표다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Wed, 20 Jun 2018 23:10:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/docker/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/docker/</guid>
        
        
        <category>docker</category>
        
      </item>
      
    
      
      <item>
        <title>Next.js에서 Redux 적용해보기</title>
        <description>&lt;h3&gt;들어가기 전에 이 글에서 사용하는 기술&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Node.js(v8) &amp;amp; Express MVC Framework(v4)&lt;/li&gt;
	&lt;li&gt;React(v16) &amp;amp; Next.js(v6)&lt;/li&gt;
	&lt;li&gt;Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
위와 같은 기술을 사용할 예정입니다. 다른 언어, 다른 서버 MVC Framework에서 Next.js를 사용하는 방법을 제시하지는 못합니다.
(추후에 Python Django와 React의 조합을 계획 중에 있습니다.)&lt;br /&gt;
양해 부탁드립니다 :)
&lt;/p&gt;
&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	요즘 Next.js로 프로젝트를 진행하면서 Redux를 어떻게 적용해야 하는지 고민하고 계속 수정하며 방법을 찾아봤다.
	기존에 Next.js를 사용하지 않는 React SSR(Server Side Rendering)을 개발해봤지만 Next.js는 나름대로의 규격을 따라줘야하는 프레임워크다.
	그렇기에 이런 규격 내에서 어떻게 개발을 하면 좋을지 Next.js의 GitHub의 이슈 페이지와 Example, 국내외 블로그 등 수 많은 글들을 참고했다.
	그러면서 어떻게 개발을 해야할지 나름대로의 방식을 터득한 것 같아서 뿌듯한 상태에서 포스팅을 해보고자 한다.
	이런 과정 중에 &lt;b&gt;Next.js의 default 페이지&lt;/b&gt; 격인 &lt;b&gt;_document.js, _error.js, _app.js&lt;/b&gt; 중 &lt;b&gt;_app.js&lt;/b&gt;를 어찌 활용하면 좋을지 조금이나마 팁을 얻을 수 있다.
	&lt;b&gt;다만 이 것이 정답은 아니다. 수 많은 방법 중 하나의 방법으로 참고하는 용도로 본다면 좋다.&lt;/b&gt;
&lt;/p&gt;
&lt;h3&gt;간단한 세팅.&lt;/h3&gt;
&lt;p&gt;
	필자의 이전 포스트인 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;&quot;React의 SSR Framework인 Next.js로 간단하게 프로젝트 생성하기(Node.js Express)&quot;&lt;/a&gt; 글을 참고한 사람이라면 거기서 시작해도 상관 없다.
	먼저 필자는 패키지매니저를 &lt;b&gt;yarn&lt;/b&gt;으로 사용하기에 yarn을 주로 언급할 예정이다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn add react-redux redux redux-thunk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 &lt;b&gt;react-redux, redux, redux-thunk&lt;/b&gt;를 설치한다.
	&lt;b&gt;react-redux&lt;/b&gt;는 React에서 Redux를 사용할 수 있도록 기능을 제공해준다.
	&lt;b&gt;redux&lt;/b&gt;는 더 설명할 것 없이 Redux 기능 그 자체이다.
	&lt;b&gt;redux-thunk&lt;/b&gt;는 Redux에서 비동기 통신을 위해 사용하는 라이브러리이다.
	Next.js 프로젝트를 처음부터 구성해야하는 사람이라면 &lt;b&gt;next, react, react-dom&lt;/b&gt;도 패키지매니저로 설치해주어야 한다.
	하지만, Next.js와 Redux를 동시에 검색한 분들이라면 기본적으로 Next.js를 설치하고 프로젝트를 간단하게나마 구성한 사람으로 생각이 들기에 기본적인 구성은 마쳤다는 가정을 하고 포스팅을 하겠다.
	간단한 프로젝트 생성에 관해서는 위에서도 언급한 필자의 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;직전 포스트&lt;/a&gt;를 참고한다면 좋을 것이다.
&lt;/p&gt;
&lt;h3&gt;예제 시작. 간단한 Redux 스토어부터 만들기&lt;/h3&gt;
&lt;p&gt;
	아주 간단한 Redux 예제를 만들며 시작한다.
	이번 글에서는 Redux의 구조를 자세히 다루거나 설명하지는 않을 예정이다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* ./stores.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-thunk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalCreateStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalCreateStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* reducer, ./reducers/index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./members'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 여러 Reducer를 묶는다. 현재 예제는 하나이지만 추후에 여러 개 Reducer를 생성 예정이라면 아래와 같이 사용하면 된다. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* reducer, ./reducers/members.js */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkSignInStatus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* action, ./actions/members.js */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkSignInStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqDataObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkSignInStatus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqDataObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;checkSignInStatus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위의 코드의 의미를 간단하게 설명하자면 로그인 데이터 정보를 세션으로부터 받아와서 관리하기 위한 로직이라고 보면 되겠다.
	Express Session 데이터를 가져오는 로직은 이번 포스팅에서 다루지 않을 것이다.
	아무튼 이렇게 하나의 매우 간단한 Redux 스토어를 만들었다.
	이것을 그러면 어떻게 적용시켜야 할까?
&lt;/p&gt;
&lt;h3&gt;_app.js를 활용하라&lt;/h3&gt;
&lt;p&gt;
	일반적으로 SSR을 구현 시, Redux를 적용시킬 때 클라이언트에서는 흔히 &lt;b&gt;app.js&lt;/b&gt;라고 이름들을 짓는 &lt;b&gt;Webpack 번들링 엔트리 파일&lt;/b&gt;에 적용시키는 것이 일반적이다.
	서버 단에서는 &lt;b&gt;Rendering&lt;/b&gt;하는 부분에서 적용시킨다.
	그런데 Next.js 프로젝트를 시작하고 app.js와 같은 파일을 찾아볼 수 없어 당황스러울 수 있다.
	하지만 이런 기능을 구현할 수 있는 방법이 없는 게 아니라 &lt;b&gt;default 파일로 숨겨져 있을 뿐&lt;/b&gt;이다.
	그 중 하나인 &lt;b&gt;_app.js를 활용하면 이 부분을 쉽게 해결&lt;/b&gt;할 수 있다.
	먼저 &lt;b&gt;./pages 디렉토리&lt;/b&gt;에 &lt;b&gt;_app.js를 생성&lt;/b&gt;하고 아래와 같이 코드를 작성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'next/app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../store'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Container&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이게 끝이다.
	default 구조를 기반으로 해서 추가해준 구문은 코드의 &lt;b&gt;3, 4 line과 Container 태그 안의 Provider 태그&lt;/b&gt; 밖에 없다.
	필요에 따라 mapStateToProps 함수를 만들어서 해당 컴포넌트에서 직접 호출하며 활용하면 될 것이다.
	&lt;b&gt;_app.js&lt;/b&gt;는 이렇게 사용자가 커스터마이징을 통해 전역적인 관리가 가능하다.
	기본 먼저 default 값을 호출하고 사용자가 정의한 부분 중 바뀐 부분을 변경 적용하는 것으로 알고 있다.
	&lt;b&gt;_document.js&lt;/b&gt;도 글로벌한 페이지 관리에 있어서 활용을 할 수 있다.
	&lt;b&gt;head 태그&lt;/b&gt;나 &lt;b&gt;전역적인 스타일 관리&lt;/b&gt;에 있어서 사용하는 것이 좋은 것으로 보인다.
	하지만 &lt;a target=&quot;_blank&quot; href=&quot;https://zeit.co/blog/next6#app-component&quot;&gt;공식 문서&lt;/a&gt;를 참고했을 때 &lt;b&gt;data fetching과 runtime Lifycycle은 _app.js 안에서만&lt;/b&gt; 처리가 가능하다고 하니 참고하도록 하자.
	&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js#custom-app&quot;&gt;깃 허브&lt;/a&gt; 또한 custom _app.js, custom _document.js에 대한 언급이 있다.
	간단히 설명하자면 &lt;b&gt;_document.js는 server 렌더링에서 작동&lt;/b&gt;하고, &lt;b&gt;_app.js는 페이지 변경 간의 레이아웃 유지, 네비게이팅 상태에 있어서 유지&lt;/b&gt;할 수 있다고 언급되어 있다.
	이런 특징들을 잘 숙지하여 필요한 기능에 있어서 글로벌한 처리가 필요한 부분을 _document.js와. _app.js로 잘 활용해보도록 하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* ./pages/index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../components/Nav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Guest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 ./pages 디렉토리의 페이지 파일에서 connect를 해준다면 끝.
	아래와 같은 화면을 볼 수 있다.
	여기서 member.id의 값을 dispatch로 값을 입력해주는 함수가 있다면 Guest가 아닌 원하는 id의 값을 볼 수가 있을 것이다.
	(아래 화면과 관련된 코드의 자세한 내용은 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;전 글&lt;/a&gt;에서 확인 가능합니다.)
	&lt;img src=&quot;/assets/img/blog/next-js-redux/home.png&quot; /&gt;
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;h3&gt;들어가기 전에 이 글에서 사용하는 기술&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Node.js(v8) &amp;amp; Express MVC Framework(v4)&lt;/li&gt;
	&lt;li&gt;React(v16) &amp;amp; Next.js(v6)&lt;/li&gt;
	&lt;li&gt;Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
위와 같은 기술을 사용할 예정입니다. 다른 언어, 다른 서버 MVC Framework에서 Next.js를 사용하는 방법을 제시하지는 못합니다.
(추후에 Python Django와 React의 조합을 계획 중에 있습니다.)&lt;br /&gt;
양해 부탁드립니다 :)
&lt;/p&gt;
&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	요즘 Next.js로 프로젝트를 진행하면서 Redux를 어떻게 적용해야 하는지 고민하고 계속 수정하며 방법을 찾아봤다.
	기존에 Next.js를 사용하지 않는 React SSR(Server Side Rendering)을 개발해봤지만 Next.js는 나름대로의 규격을 따라줘야하는 프레임워크다.
	그렇기에 이런 규격 내에서 어떻게 개발을 하면 좋을지 Next.js의 GitHub의 이슈 페이지와 Example, 국내외 블로그 등 수 많은 글들을 참고했다.
	그러면서 어떻게 개발을 해야할지 나름대로의 방식을 터득한 것 같아서 뿌듯한 상태에서 포스팅을 해보고자 한다.
	이런 과정 중에 &lt;b&gt;Next.js의 default 페이지&lt;/b&gt; 격인 &lt;b&gt;_document.js, _error.js, _app.js&lt;/b&gt; 중 &lt;b&gt;_app.js&lt;/b&gt;를 어찌 활용하면 좋을지 조금이나마 팁을 얻을 수 있다.
	&lt;b&gt;다만 이 것이 정답은 아니다. 수 많은 방법 중 하나의 방법으로 참고하는 용도로 본다면 좋다.&lt;/b&gt;
&lt;/p&gt;
&lt;h3&gt;간단한 세팅.&lt;/h3&gt;
&lt;p&gt;
	필자의 이전 포스트인 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;&quot;React의 SSR Framework인 Next.js로 간단하게 프로젝트 생성하기(Node.js Express)&quot;&lt;/a&gt; 글을 참고한 사람이라면 거기서 시작해도 상관 없다.
	먼저 필자는 패키지매니저를 &lt;b&gt;yarn&lt;/b&gt;으로 사용하기에 yarn을 주로 언급할 예정이다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn add react-redux redux redux-thunk&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 &lt;b&gt;react-redux, redux, redux-thunk&lt;/b&gt;를 설치한다.
	&lt;b&gt;react-redux&lt;/b&gt;는 React에서 Redux를 사용할 수 있도록 기능을 제공해준다.
	&lt;b&gt;redux&lt;/b&gt;는 더 설명할 것 없이 Redux 기능 그 자체이다.
	&lt;b&gt;redux-thunk&lt;/b&gt;는 Redux에서 비동기 통신을 위해 사용하는 라이브러리이다.
	Next.js 프로젝트를 처음부터 구성해야하는 사람이라면 &lt;b&gt;next, react, react-dom&lt;/b&gt;도 패키지매니저로 설치해주어야 한다.
	하지만, Next.js와 Redux를 동시에 검색한 분들이라면 기본적으로 Next.js를 설치하고 프로젝트를 간단하게나마 구성한 사람으로 생각이 들기에 기본적인 구성은 마쳤다는 가정을 하고 포스팅을 하겠다.
	간단한 프로젝트 생성에 관해서는 위에서도 언급한 필자의 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;직전 포스트&lt;/a&gt;를 참고한다면 좋을 것이다.
&lt;/p&gt;
&lt;h3&gt;예제 시작. 간단한 Redux 스토어부터 만들기&lt;/h3&gt;
&lt;p&gt;
	아주 간단한 Redux 예제를 만들며 시작한다.
	이번 글에서는 Redux의 구조를 자세히 다루거나 설명하지는 않을 예정이다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* ./stores.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-thunk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./reducers/index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalCreateStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalCreateStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* reducer, ./reducers/index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./members'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* 여러 Reducer를 묶는다. 현재 예제는 하나이지만 추후에 여러 개 Reducer를 생성 예정이라면 아래와 같이 사용하면 된다. */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* reducer, ./reducers/members.js */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkSignInStatus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* action, ./actions/members.js */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkSignInStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqDataObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkSignInStatus'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reqDataObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;checkSignInStatus&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위의 코드의 의미를 간단하게 설명하자면 로그인 데이터 정보를 세션으로부터 받아와서 관리하기 위한 로직이라고 보면 되겠다.
	Express Session 데이터를 가져오는 로직은 이번 포스팅에서 다루지 않을 것이다.
	아무튼 이렇게 하나의 매우 간단한 Redux 스토어를 만들었다.
	이것을 그러면 어떻게 적용시켜야 할까?
&lt;/p&gt;
&lt;h3&gt;_app.js를 활용하라&lt;/h3&gt;
&lt;p&gt;
	일반적으로 SSR을 구현 시, Redux를 적용시킬 때 클라이언트에서는 흔히 &lt;b&gt;app.js&lt;/b&gt;라고 이름들을 짓는 &lt;b&gt;Webpack 번들링 엔트리 파일&lt;/b&gt;에 적용시키는 것이 일반적이다.
	서버 단에서는 &lt;b&gt;Rendering&lt;/b&gt;하는 부분에서 적용시킨다.
	그런데 Next.js 프로젝트를 시작하고 app.js와 같은 파일을 찾아볼 수 없어 당황스러울 수 있다.
	하지만 이런 기능을 구현할 수 있는 방법이 없는 게 아니라 &lt;b&gt;default 파일로 숨겨져 있을 뿐&lt;/b&gt;이다.
	그 중 하나인 &lt;b&gt;_app.js를 활용하면 이 부분을 쉽게 해결&lt;/b&gt;할 수 있다.
	먼저 &lt;b&gt;./pages 디렉토리&lt;/b&gt;에 &lt;b&gt;_app.js를 생성&lt;/b&gt;하고 아래와 같이 코드를 작성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'next/app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../store'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Provider&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Container&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이게 끝이다.
	default 구조를 기반으로 해서 추가해준 구문은 코드의 &lt;b&gt;3, 4 line과 Container 태그 안의 Provider 태그&lt;/b&gt; 밖에 없다.
	필요에 따라 mapStateToProps 함수를 만들어서 해당 컴포넌트에서 직접 호출하며 활용하면 될 것이다.
	&lt;b&gt;_app.js&lt;/b&gt;는 이렇게 사용자가 커스터마이징을 통해 전역적인 관리가 가능하다.
	기본 먼저 default 값을 호출하고 사용자가 정의한 부분 중 바뀐 부분을 변경 적용하는 것으로 알고 있다.
	&lt;b&gt;_document.js&lt;/b&gt;도 글로벌한 페이지 관리에 있어서 활용을 할 수 있다.
	&lt;b&gt;head 태그&lt;/b&gt;나 &lt;b&gt;전역적인 스타일 관리&lt;/b&gt;에 있어서 사용하는 것이 좋은 것으로 보인다.
	하지만 &lt;a target=&quot;_blank&quot; href=&quot;https://zeit.co/blog/next6#app-component&quot;&gt;공식 문서&lt;/a&gt;를 참고했을 때 &lt;b&gt;data fetching과 runtime Lifycycle은 _app.js 안에서만&lt;/b&gt; 처리가 가능하다고 하니 참고하도록 하자.
	&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js#custom-app&quot;&gt;깃 허브&lt;/a&gt; 또한 custom _app.js, custom _document.js에 대한 언급이 있다.
	간단히 설명하자면 &lt;b&gt;_document.js는 server 렌더링에서 작동&lt;/b&gt;하고, &lt;b&gt;_app.js는 페이지 변경 간의 레이아웃 유지, 네비게이팅 상태에 있어서 유지&lt;/b&gt;할 수 있다고 언급되어 있다.
	이런 특징들을 잘 숙지하여 필요한 기능에 있어서 글로벌한 처리가 필요한 부분을 _document.js와. _app.js로 잘 활용해보도록 하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* ./pages/index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-redux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../components/Nav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Fragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Guest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.Fragment&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;members&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStateToProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	위와 같이 ./pages 디렉토리의 페이지 파일에서 connect를 해준다면 끝.
	아래와 같은 화면을 볼 수 있다.
	여기서 member.id의 값을 dispatch로 값을 입력해주는 함수가 있다면 Guest가 아닌 원하는 id의 값을 볼 수가 있을 것이다.
	(아래 화면과 관련된 코드의 자세한 내용은 &lt;a href=&quot;/blog/react-ssr-next-js&quot;&gt;전 글&lt;/a&gt;에서 확인 가능합니다.)
	&lt;img src=&quot;/assets/img/blog/next-js-redux#excerpt/home.png&quot; /&gt;
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Sun, 17 Jun 2018 00:45:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/next-js-redux/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/next-js-redux/</guid>
        
        
        <category>javascript</category>
        
        <category>react</category>
        
        <category>nodejs</category>
        
      </item>
      
    
      
      <item>
        <title>React의 SSR Framework인 Next.js로 간단하게 프로젝트 생성하기(Node.js Express)</title>
        <description>&lt;h3&gt;들어가기 전에 이 글에서 사용하는 기술&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Node.js(v8) &amp;amp; Express MVC Framework(v4)&lt;/li&gt;
	&lt;li&gt;React(v16) &amp;amp; Next.js(v6)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
위와 같은 기술을 사용할 예정입니다. 다른 언어, 다른 서버 MVC Framework에서 Next.js를 사용하는 방법을 제시하지는 못합니다.
(추후에 Python Django와 React의 조합을 계획 중에 있습니다.)&lt;br /&gt;
양해 부탁드립니다 :)
&lt;/p&gt;
&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	앞서 &lt;a href=&quot;/blog/react-ssr&quot;&gt;React의 SSR(Server Side Rendering)&lt;/a&gt;에 대해서 포스팅한 적이 있다.
	React에서 SSR은 &lt;b&gt;&quot;react-dom&quot;&lt;/b&gt;의 server 기능을 이용해서 작성하는데 &lt;b&gt;Next.js&lt;/b&gt;를 이용하면 방식이 사뭇 다르게 느껴질 수 있다.
	하지만 결국 &lt;b&gt;Next.js도 &quot;react-dom&quot;&lt;/b&gt;을 기반으로 하여 작동한다.
	그래서 이번 포스팅에서는 Next.js를 간단히 알아보고 이를 이용하여 SSR을 구현하는 방법을 알아보고자 한다.
	&lt;b&gt;(이 글은 일단 무작정 따라해보며 감을 잡고 싶은 사람에게 좋을 수 있다.)&lt;/b&gt;
&lt;/p&gt;
&lt;h3&gt;What is Next.js?&lt;/h3&gt;
&lt;p&gt;
	Next.js는 React 전용 SSR 프레임워크이다.
	그와 비슷한 예를 찾자면 Vue.js의 SSR을 구현하는 프레임워크 Nuxt.js가 있다.
	필자는 기존에 개인적인 프로젝트를 진행할 때 React의 &quot;react-dom&quot;으로 서버 사이드 렌더링 기능을 직접 구현했으나,
	솔직히 작성하는데 있어서 마냥 편하진 않은 것이 사실이다.
	Redux 코드까지 추가되면서 페이지가 많아질수록 복잡성이 증가하는 것 같다는 느낌적인 느낌이랄까.
	그런 의미에서 &quot;react ssr tool&quot;을 구글에 검색해서 발견 하게된 Next.js는 확실히 구성하고 관리하기 편리하다.
	HMR(Hot Module Replacement) 기능까지 따로 구현하거나 설정할 필요 없이 development 환경에서 실행만하면 된다.
	나머지 기능에 있어서는 간단한 예제를 만들면서 알아보자.
&lt;/p&gt;
&lt;h3&gt;간단한 세팅.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn global add create-next-app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	먼저 패키지 매니저는 yarn으로 사용하겠다.
	create-react-app 처럼 Next.js를 간단하게 구성할 수 있는 라이브러리를 사용하면 기본 디렉터리 구현에 있어서 편하게 된다.
	이 툴을 사용하면 example 파일을 가져오는데도 편리하게 가져올 수 있다.
	그래서 제목에 쓴 것 같이 Node.js Express 웹서버를 기반으로 SSR을 구현하기 위해 예제를 가져오겠다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn create next-app &lt;span class=&quot;nt&quot;&gt;--example&lt;/span&gt; with-next-routes next-app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이렇게하면 &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js/tree/canary/examples/with-next-routes&quot;&gt;with-next-routes&lt;/a&gt;의 예제를 next-app 이라는 디렉토리에 가져온다.
	이 상태에서 바로 yarn dev를 실행시킨다면 localhost 3000포트에서 간단한 Next.js 기반의 Node.js Express Server Application이 구동된다.
	특별히 이 예제는 라우팅을 Next.js의 기본 방법보다도 더 쉽게 작성할 수 있는 &lt;b&gt;next-routes&lt;/b&gt;라는 라이브러리를 사용하는 예제이다.
	지금부터는 잠깐의 조정과 함께 디렉토리를 살펴보겠다.
&lt;/p&gt;
&lt;h3&gt;예제 시작&lt;/h3&gt;
&lt;p&gt;
	먼저 몇 가지 작업을 하려고 한다.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;root 디렉토리에 components 디렉토리 생성&lt;/li&gt;
	&lt;li&gt;routes.js 하단의 예시처럼 바꾸기&lt;/li&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'next-routes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
name: Router에서 링크로 바로 직접 호출하지 않고 name을 호출하여 라우팅
pattern: url 패턴을 의미한다.
page: pages 디렉토리의 어떤 파일을 바라볼 것인지(.js, .jsx 등의 확장자는 생략)
*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;li&gt;pages/ 디렉토리 내 index.js와 about.js 제외하고 삭제 및 inex.js와 about.js 아래와 같이 수정&lt;/li&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* about.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/ul&gt;
&lt;p&gt;
	이 상태에서 yarn dev를 실행시킨다면 localhost:3000에서 아래와 같은 페이지를 확인할 수 있을 것이다.
	&lt;img src=&quot;/assets/img/blog/react-ssr-next-js/index.png&quot; /&gt;
	그러나 여기서 끝난다면 about 페이지를 확인할 수 없다. 내비게이션을 만들어보자.
&lt;/p&gt;
&lt;p&gt;
	앞서 만든 components 디렉토리에 공통적으로 사용할 파일을 생성하면 된다. 먼저 Nav.js를 생성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../routes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;about&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	그리고는 앞서 만든 index.js와 about.js에 import해서 사용한다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js, about.js도 같은 방식으로 import하자 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../components/Nav'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이러면 홈 화면에서 아래와 같이 나올 것이다.
	&lt;img src=&quot;/assets/img//blog/react-ssr-next-js/nav-index.png&quot; /&gt;
	그리고 about 링크를 눌러 페이지를 확인하면
	&lt;img src=&quot;/assets/img//blog/react-ssr-next-js/nav-about.png&quot; /&gt;
	이렇게 나온다. 이런 식으로 응용을 하자면 next에서 제공하는 next/head 기능을 이용하여 공통적인 head 태그 파일을 저장할 수 있겠다.
	next/head는 &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js/#populating-head&quot;&gt;링크&lt;/a&gt;를 참고하자
&lt;/p&gt;
&lt;h3&gt;파라미터 처리는?&lt;/h3&gt;
&lt;p&gt;
	역시 라우팅 관련해서 파라미터 관련된 내용을 안 짚고 넘어갈 수는 없다.
	역시나 next-routes 기능에서 손쉽게 처리 가능하다.
	일단 routes.js에서 route.add로 아래와 같이 추가하자.
	(추후에 이 소스를 기반으로 포스팅을 진행한다면 이 부분은 임시로 설명하기 위한 부분이기에 삭제하고 진행할 것이다.
	이번 포스팅에서만 설명을 위해서 추가한다.)
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/user/:id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 추가된 라인*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	그리고 pages 디렉토리에 user.js를 추가하고 코드는 아래와 같이 작성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../components/Nav'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	마지막으로 Nav.js를 손보자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;/* 생략 ... */
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;params=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;User Hi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;params=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;User Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
/* 생략 ... */&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	url을 호출 시 deprecated 기능이라고 언급되어 있다.
	추후 업데이트 시 주의하자.
&lt;/p&gt;
&lt;h3&gt;그 밖에 알아두면 좋은 것들&lt;/h3&gt;
&lt;p&gt;
	next로 빌드하게 되면 .next 디렉토리가 생성되는데 그 안에 보면 글로벌한 페이지 관리를 하는 &lt;b&gt;_document.js&lt;/b&gt;,
	에러 페이지를 구현할 수 있는 &lt;b&gt;_error.js&lt;/b&gt; 등이 있다.
	아무래도 이런 내용은 &lt;a target=&quot;_blank&quot; href=&quot;https://nextjs.org/docs/#setup&quot;&gt;Next.js 공식문서&lt;/a&gt;를 한 번 읽어보는 게 좋을 것이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;h3&gt;들어가기 전에 이 글에서 사용하는 기술&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Node.js(v8) &amp;amp; Express MVC Framework(v4)&lt;/li&gt;
	&lt;li&gt;React(v16) &amp;amp; Next.js(v6)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
위와 같은 기술을 사용할 예정입니다. 다른 언어, 다른 서버 MVC Framework에서 Next.js를 사용하는 방법을 제시하지는 못합니다.
(추후에 Python Django와 React의 조합을 계획 중에 있습니다.)&lt;br /&gt;
양해 부탁드립니다 :)
&lt;/p&gt;
&lt;h3&gt;들어가며&lt;/h3&gt;
&lt;p&gt;
	앞서 &lt;a href=&quot;/blog/react-ssr&quot;&gt;React의 SSR(Server Side Rendering)&lt;/a&gt;에 대해서 포스팅한 적이 있다.
	React에서 SSR은 &lt;b&gt;&quot;react-dom&quot;&lt;/b&gt;의 server 기능을 이용해서 작성하는데 &lt;b&gt;Next.js&lt;/b&gt;를 이용하면 방식이 사뭇 다르게 느껴질 수 있다.
	하지만 결국 &lt;b&gt;Next.js도 &quot;react-dom&quot;&lt;/b&gt;을 기반으로 하여 작동한다.
	그래서 이번 포스팅에서는 Next.js를 간단히 알아보고 이를 이용하여 SSR을 구현하는 방법을 알아보고자 한다.
	&lt;b&gt;(이 글은 일단 무작정 따라해보며 감을 잡고 싶은 사람에게 좋을 수 있다.)&lt;/b&gt;
&lt;/p&gt;
&lt;h3&gt;What is Next.js?&lt;/h3&gt;
&lt;p&gt;
	Next.js는 React 전용 SSR 프레임워크이다.
	그와 비슷한 예를 찾자면 Vue.js의 SSR을 구현하는 프레임워크 Nuxt.js가 있다.
	필자는 기존에 개인적인 프로젝트를 진행할 때 React의 &quot;react-dom&quot;으로 서버 사이드 렌더링 기능을 직접 구현했으나,
	솔직히 작성하는데 있어서 마냥 편하진 않은 것이 사실이다.
	Redux 코드까지 추가되면서 페이지가 많아질수록 복잡성이 증가하는 것 같다는 느낌적인 느낌이랄까.
	그런 의미에서 &quot;react ssr tool&quot;을 구글에 검색해서 발견 하게된 Next.js는 확실히 구성하고 관리하기 편리하다.
	HMR(Hot Module Replacement) 기능까지 따로 구현하거나 설정할 필요 없이 development 환경에서 실행만하면 된다.
	나머지 기능에 있어서는 간단한 예제를 만들면서 알아보자.
&lt;/p&gt;
&lt;h3&gt;간단한 세팅.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn global add create-next-app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	먼저 패키지 매니저는 yarn으로 사용하겠다.
	create-react-app 처럼 Next.js를 간단하게 구성할 수 있는 라이브러리를 사용하면 기본 디렉터리 구현에 있어서 편하게 된다.
	이 툴을 사용하면 example 파일을 가져오는데도 편리하게 가져올 수 있다.
	그래서 제목에 쓴 것 같이 Node.js Express 웹서버를 기반으로 SSR을 구현하기 위해 예제를 가져오겠다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;yarn create next-app &lt;span class=&quot;nt&quot;&gt;--example&lt;/span&gt; with-next-routes next-app&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이렇게하면 &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js/tree/canary/examples/with-next-routes&quot;&gt;with-next-routes&lt;/a&gt;의 예제를 next-app 이라는 디렉토리에 가져온다.
	이 상태에서 바로 yarn dev를 실행시킨다면 localhost 3000포트에서 간단한 Next.js 기반의 Node.js Express Server Application이 구동된다.
	특별히 이 예제는 라우팅을 Next.js의 기본 방법보다도 더 쉽게 작성할 수 있는 &lt;b&gt;next-routes&lt;/b&gt;라는 라이브러리를 사용하는 예제이다.
	지금부터는 잠깐의 조정과 함께 디렉토리를 살펴보겠다.
&lt;/p&gt;
&lt;h3&gt;예제 시작&lt;/h3&gt;
&lt;p&gt;
	먼저 몇 가지 작업을 하려고 한다.
&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;root 디렉토리에 components 디렉토리 생성&lt;/li&gt;
	&lt;li&gt;routes.js 하단의 예시처럼 바꾸기&lt;/li&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'next-routes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
name: Router에서 링크로 바로 직접 호출하지 않고 name을 호출하여 라우팅
pattern: url 패턴을 의미한다.
page: pages 디렉토리의 어떤 파일을 바라볼 것인지(.js, .jsx 등의 확장자는 생략)
*/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

	&lt;li&gt;pages/ 디렉토리 내 index.js와 about.js 제외하고 삭제 및 inex.js와 about.js 아래와 같이 수정&lt;/li&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* about.js */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/ul&gt;
&lt;p&gt;
	이 상태에서 yarn dev를 실행시킨다면 localhost:3000에서 아래와 같은 페이지를 확인할 수 있을 것이다.
	&lt;img src=&quot;/assets/img/blog/react-ssr-next-js#excerpt/index.png&quot; /&gt;
	그러나 여기서 끝난다면 about 페이지를 확인할 수 없다. 내비게이션을 만들어보자.
&lt;/p&gt;
&lt;p&gt;
	앞서 만든 components 디렉토리에 공통적으로 사용할 파일을 생성하면 된다. 먼저 Nav.js를 생성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../routes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;about&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	그리고는 앞서 만든 index.js와 about.js에 import해서 사용한다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* index.js, about.js도 같은 방식으로 import하자 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../components/Nav'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	이러면 홈 화면에서 아래와 같이 나올 것이다.
	&lt;img src=&quot;/assets/img//blog/react-ssr-next-js#excerpt/nav-index.png&quot; /&gt;
	그리고 about 링크를 눌러 페이지를 확인하면
	&lt;img src=&quot;/assets/img//blog/react-ssr-next-js#excerpt/nav-about.png&quot; /&gt;
	이렇게 나온다. 이런 식으로 응용을 하자면 next에서 제공하는 next/head 기능을 이용하여 공통적인 head 태그 파일을 저장할 수 있겠다.
	next/head는 &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/zeit/next.js/#populating-head&quot;&gt;링크&lt;/a&gt;를 참고하자
&lt;/p&gt;
&lt;h3&gt;파라미터 처리는?&lt;/h3&gt;
&lt;p&gt;
	역시 라우팅 관련해서 파라미터 관련된 내용을 안 짚고 넘어갈 수는 없다.
	역시나 next-routes 기능에서 손쉽게 처리 가능하다.
	일단 routes.js에서 route.add로 아래와 같이 추가하자.
	(추후에 이 소스를 기반으로 포스팅을 진행한다면 이 부분은 임시로 설명하기 위한 부분이기에 삭제하고 진행할 것이다.
	이번 포스팅에서만 설명을 위해서 추가한다.)
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;routes&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/about'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'about'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/user/:id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 추가된 라인*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	그리고 pages 디렉토리에 user.js를 추가하고 코드는 아래와 같이 작성하자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../components/Nav'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Nav&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	마지막으로 Nav.js를 손보자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;/* 생략 ... */
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;params=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;User Hi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;params=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&amp;gt;&lt;/span&gt;User Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
/* 생략 ... */&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	url을 호출 시 deprecated 기능이라고 언급되어 있다.
	추후 업데이트 시 주의하자.
&lt;/p&gt;
&lt;h3&gt;그 밖에 알아두면 좋은 것들&lt;/h3&gt;
&lt;p&gt;
	next로 빌드하게 되면 .next 디렉토리가 생성되는데 그 안에 보면 글로벌한 페이지 관리를 하는 &lt;b&gt;_document.js&lt;/b&gt;,
	에러 페이지를 구현할 수 있는 &lt;b&gt;_error.js&lt;/b&gt; 등이 있다.
	아무래도 이런 내용은 &lt;a target=&quot;_blank&quot; href=&quot;https://nextjs.org/docs/#setup&quot;&gt;Next.js 공식문서&lt;/a&gt;를 한 번 읽어보는 게 좋을 것이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Tue, 12 Jun 2018 00:45:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/react-ssr-next-js/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/react-ssr-next-js/</guid>
        
        
        <category>javascript</category>
        
        <category>react</category>
        
        <category>nodejs</category>
        
      </item>
      
    
      
      <item>
        <title>Node.js에서 mysql을 async/await으로 작성하기</title>
        <description>&lt;p&gt;
	Node.js로 코드를 작성하다보면 분명히 한 번 이상은 겪게 되는 비동기 코드 문제. 일명 Callback Hell이라고 불리우는 코드 구조를 본다면 진짜 지옥의 구렁텅이로 빠져드는 것만 같다. 다행히도 여러가지의 비동기 코드를 작성하는 방법이 제시되고는 한다. 몇 가지 예를 들자면 async 라이브러리, ES2015의 기능 Promise, ES2017의 기능 async/await, RxJS 등이 있다. 필자는 주로 Promise를 사용했는데 얼마전 사용해본 ES2017의 async/await가 가장 편한 것 같다. 기존까지는 Mysql DB Connection에 있어서 Promise로 작성하던 것을 async/await로 싹 바꿨는데 async/await를 활용하는 방법에 대해 잠깐 소개하고자 한다. (자신의 Node.js 버젼이 async/await이 사용 가능한 버젼인지 찾아보고 참고하길 바란다. &lt;a target=&quot;_blank&quot; href=&quot;https://node.green/&quot;&gt;node 버젼 별 기능 확인&lt;/a&gt;)
&lt;/p&gt;
&lt;h3&gt;설치&lt;/h3&gt;
&lt;p&gt;
	먼저 &lt;b&gt;mysql2&lt;/b&gt;라는 모듈이 필요하다. Promise를 적용할 수 있는 mysql 라이브러리이다. npm이나 yarn으로 설치를 하면 된다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm i &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; mysql2  or  yarn add mysql2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 1. DB Pool 생성&lt;/h3&gt;
&lt;p&gt;
	설치를 마쳤다면 바로 예제로 넘어가자. 먼저 &lt;b&gt;&quot;mysql2/promise&quot;&lt;/b&gt;를 require한다. mysql2만 호출하면 기존과 다를바가 없이 Promise 기능을 사용할 수가 없다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	DB Pool 방식으로 소개하려고 한다. 일단 기본적으로 기존 &lt;b&gt;mysql&lt;/b&gt;에서 방법과 유사하다. createPool 함수로 Pool을 생성한다.
&lt;/p&gt;
&lt;h3&gt;Step 2. Pool에서 Connection 가져오기&lt;/h3&gt;
&lt;p&gt;
	백문이 불여일견 주석 Step 2 이후로 추가된 코드를 먼저 살펴보자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	먼저 dbTest 함수에 async가 추가된 것이 보일 것이다. &lt;b&gt;async&lt;/b&gt; 함수로 선언되어야 원하는 순서대로 흘러가는 함수를 만들 수 있다. 함수 안에서 &lt;b&gt;pool.getConnection&lt;/b&gt; 함수는 connection을 가져오는 함수이다. &lt;b&gt;&quot;mysql2/promise&quot;&lt;/b&gt; github에서 코드를 참고해보면 &lt;b&gt;getConnection&lt;/b&gt; 함수에는 필수적으로 콜백 함수를 실행시켜 connection을 반환한다. 그래서 그 콜백 함수를 이용해야 한다. &lt;b&gt;getConnection&lt;/b&gt; 함수 앞에 await만 선언해서 끝나는 것이 아니고, 그 안의 callback 함수도 async 처리를 해야하는 것이 관건이다. 이렇게 async 함수 내에서 또 async한 작업이 필요하면 꼭 안에 있는 함수에도 선언해야하는 것을 기억하고 넘어가자.
&lt;/p&gt;
&lt;h3&gt;Step 3. 쿼리&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;cm&quot;&gt;/* Step 3. */&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INSERT INTO MEMBERS_INFO(ID, PW) VALUES(?, ?)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Query Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	&lt;b&gt;connection.query&lt;/b&gt; 함수로 쿼리를 실행시키고 결과를 반환 받는데 위와 같이 작성한다. (역시나 await를 써서 해당 결과가 반환 될 때 까지 기다린다.) 배열로 반환 받는 이유는 &lt;b&gt;mysql2/promise&lt;/b&gt; 라이브러리에서 쿼리 결과를 반환 받을 때 저렇게 반환 받게 되어있기 때문에 저렇게 작성한다. [rows, fields] 로 선언 시 fields에 대한 정보도 같이 반환 받을 수 있다. error catch의 경우는 try, catch 로 감싸서 처리해준다면 더욱 좋은 코드가 될 것이다. 그리고 connection을 다 활용했을 경우 &lt;b&gt;connection.release&lt;/b&gt; 함수를 호출하여 커넥션을 반환한다.
&lt;/p&gt;
&lt;h3&gt;etc. Transaction&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;cm&quot;&gt;/* Step 3. */&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// START TRANSACTION&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INSERT INTO MEMBERS_INFO(ID, PW) VALUES(?, ?)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// COMMIT&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ROLLBACK&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Query Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	트랜잭션을 사용할 경우 기존 mysql 라이브러리와 동일하다. &lt;b&gt;beginTransaction&lt;/b&gt; 함수를 호출해주고, 성공시 &lt;b&gt;commit&lt;/b&gt;을 실패 시 &lt;b&gt;rollback&lt;/b&gt;을 사용하면 된다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;p&gt;
	Node.js로 코드를 작성하다보면 분명히 한 번 이상은 겪게 되는 비동기 코드 문제. 일명 Callback Hell이라고 불리우는 코드 구조를 본다면 진짜 지옥의 구렁텅이로 빠져드는 것만 같다. 다행히도 여러가지의 비동기 코드를 작성하는 방법이 제시되고는 한다. 몇 가지 예를 들자면 async 라이브러리, ES2015의 기능 Promise, ES2017의 기능 async/await, RxJS 등이 있다. 필자는 주로 Promise를 사용했는데 얼마전 사용해본 ES2017의 async/await가 가장 편한 것 같다. 기존까지는 Mysql DB Connection에 있어서 Promise로 작성하던 것을 async/await로 싹 바꿨는데 async/await를 활용하는 방법에 대해 잠깐 소개하고자 한다. (자신의 Node.js 버젼이 async/await이 사용 가능한 버젼인지 찾아보고 참고하길 바란다. &lt;a target=&quot;_blank&quot; href=&quot;https://node.green/&quot;&gt;node 버젼 별 기능 확인&lt;/a&gt;)
&lt;/p&gt;
&lt;h3&gt;설치&lt;/h3&gt;
&lt;p&gt;
	먼저 &lt;b&gt;mysql2&lt;/b&gt;라는 모듈이 필요하다. Promise를 적용할 수 있는 mysql 라이브러리이다. npm이나 yarn으로 설치를 하면 된다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm i &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; mysql2  or  yarn add mysql2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;Step 1. DB Pool 생성&lt;/h3&gt;
&lt;p&gt;
	설치를 마쳤다면 바로 예제로 넘어가자. 먼저 &lt;b&gt;&quot;mysql2/promise&quot;&lt;/b&gt;를 require한다. mysql2만 호출하면 기존과 다를바가 없이 Promise 기능을 사용할 수가 없다.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	DB Pool 방식으로 소개하려고 한다. 일단 기본적으로 기존 &lt;b&gt;mysql&lt;/b&gt;에서 방법과 유사하다. createPool 함수로 Pool을 생성한다.
&lt;/p&gt;
&lt;h3&gt;Step 2. Pool에서 Connection 가져오기&lt;/h3&gt;
&lt;p&gt;
	백문이 불여일견 주석 Step 2 이후로 추가된 코드를 먼저 살펴보자.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	먼저 dbTest 함수에 async가 추가된 것이 보일 것이다. &lt;b&gt;async&lt;/b&gt; 함수로 선언되어야 원하는 순서대로 흘러가는 함수를 만들 수 있다. 함수 안에서 &lt;b&gt;pool.getConnection&lt;/b&gt; 함수는 connection을 가져오는 함수이다. &lt;b&gt;&quot;mysql2/promise&quot;&lt;/b&gt; github에서 코드를 참고해보면 &lt;b&gt;getConnection&lt;/b&gt; 함수에는 필수적으로 콜백 함수를 실행시켜 connection을 반환한다. 그래서 그 콜백 함수를 이용해야 한다. &lt;b&gt;getConnection&lt;/b&gt; 함수 앞에 await만 선언해서 끝나는 것이 아니고, 그 안의 callback 함수도 async 처리를 해야하는 것이 관건이다. 이렇게 async 함수 내에서 또 async한 작업이 필요하면 꼭 안에 있는 함수에도 선언해야하는 것을 기억하고 넘어가자.
&lt;/p&gt;
&lt;h3&gt;Step 3. 쿼리&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;cm&quot;&gt;/* Step 3. */&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INSERT INTO MEMBERS_INFO(ID, PW) VALUES(?, ?)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Query Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	&lt;b&gt;connection.query&lt;/b&gt; 함수로 쿼리를 실행시키고 결과를 반환 받는데 위와 같이 작성한다. (역시나 await를 써서 해당 결과가 반환 될 때 까지 기다린다.) 배열로 반환 받는 이유는 &lt;b&gt;mysql2/promise&lt;/b&gt; 라이브러리에서 쿼리 결과를 반환 받을 때 저렇게 반환 받게 되어있기 때문에 저렇게 작성한다. [rows, fields] 로 선언 시 fields에 대한 정보도 같이 반환 받을 수 있다. error catch의 경우는 try, catch 로 감싸서 처리해준다면 더욱 좋은 코드가 될 것이다. 그리고 connection을 다 활용했을 경우 &lt;b&gt;connection.release&lt;/b&gt; 함수를 호출하여 커넥션을 반환한다.
&lt;/p&gt;
&lt;h3&gt;etc. Transaction&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql2/promise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 1, create DB Pool */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DB_PW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DBNAME'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Step 2. get connection */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;cm&quot;&gt;/* Step 3. */&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HELLO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'WORLD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// START TRANSACTION&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'INSERT INTO MEMBERS_INFO(ID, PW) VALUES(?, ?)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// COMMIT&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ROLLBACK&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Query Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DB Error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
	트랜잭션을 사용할 경우 기존 mysql 라이브러리와 동일하다. &lt;b&gt;beginTransaction&lt;/b&gt; 함수를 호출해주고, 성공시 &lt;b&gt;commit&lt;/b&gt;을 실패 시 &lt;b&gt;rollback&lt;/b&gt;을 사용하면 된다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Fri, 08 Jun 2018 19:45:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/node-mysql-async-await/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/node-mysql-async-await/</guid>
        
        
        <category>javascript</category>
        
        <category>nodejs</category>
        
        <category>ecmascript</category>
        
      </item>
      
    
      
      <item>
        <title>React에서 SSR(Server Side Rendering)을 알아보자</title>
        <description>&lt;p&gt;
	최근 1~2년 간 React에 관심을 많이 가졌다. 그래서 그에 관한 포스트를 가장 처음으로 해보고자 한다. 먼저 React는 Facebook이 만든 Javascript(이하 JS) 라이브러리라는 점 부터 매력적이다. 또한 그 것을 직접 자사 서비스에도 적용시키고 에어비앤비에서도 적극 활용하는 모습을 보여주기에 기술을 따라가는데 있어서 명분이 있다. 그리고 React 커뮤니티는 굉장히 핫하고 여러 라이브러리가 그것도 아주 많이 나온다는 점에서도 취미로 삼기도 좋아 보인다. 더 나아가서는 React Native라는 네이티브 앱을 구현할 수 있는 라이브러리까지 내놓았다. 기존에 React Web Application을 구현하는 것과 같은 방식으로 할 수 있다는 것이 웹 개발자, JS 개발자에게 굉장히 큰 매력으로 다가온다. 물론, 앱에 대한 기본적인 이해가 있을 때 빛이 나는 기술인 것은 맞는 것 같다.
&lt;/p&gt;
&lt;p&gt;
	개발하는 입장에서 보자면 JSX로 UI Component를 작성하고 그 컴포넌트들을 재사용 가능하게 구성하는 점, 그 컴포넌트들을 조합하여 사용하기 용이하다는 점이 매력적이다. 그리고 SSR(Server Side Rendering) 기능이 생소했었던 상황에서 React로 SSR을 구현해보며 개념을 이해할 수 있었다. 또한 MVC 아키텍쳐의 단점을 보완하기 위해 직접 Facebook이 만든 단방향 Data Flow의 Flux 아키텍쳐와 그 구현체인 Redux에 대해서도 알아보며 React와 접목시켜 새로운 영역에 대한 지식을 쌓을 수 있는 계기가 됐다. 그 이후 요즘 흥미를 끄는 것은 React의 SSR을 구현하는 Next.js라는 라이브러리이다.
&lt;/p&gt;
&lt;h3&gt;SSR(Server Side Rendering)&lt;/h3&gt;
&lt;p&gt;
	그래서 앞서 몇 번 언급된 SSR이 무엇인지 알아보자. 서버 사이드 렌더링은 문자 그대로 렌더링을 서버에서부터 하는 것이다. 일반적으로 JS 라이브러리/프레임워크를 사용하면 서버에서는 거의 빈 껍데기만을 제공하고 클라이언트에서부터 페이지를 그리는 것이 일반적이다. 그러나 JS 라이브러리/프레임워크에서 서버 사이드 렌더링이란 개념은 서버에서 JS 라이브러리/프레임워크를 이용하여 미리 페이지를 그려 클라이언트에 보내고, 클라이언트 단에서 바뀔 부분이나 클라이언트에서만 존재하는 기능에 관한 작업을 하게 된다. 이 때 가상DOM을 활용하여 바뀐 부분만 바꿔주는 등 클라이언트에서의 부하는 최소화한다.
&lt;/p&gt;
&lt;h3&gt;SSR 장점&lt;/h3&gt;
&lt;p&gt;
	어느 부분에서나 장단점은 있다. 장점은 SEO(Search Engine Optimization, 검색 엔진 최적화)이다. JS 라이브러리/프레임워크를 사용하면서 고질적인 문제는 SEO이다. 앞서 말했듯이 그냥 미리 그려지지 않고 빈 껍데기만 제공된다면 검색엔진이 당연하게도 내용을 검색하는데 어려움이 있다.(모든 검색 엔진이 검색하지 못 하는 것은 아니다) 하지만 SSR을 이용한다면 서버에서부터 페이지를 제공할 때 컨텐츠가 담겨있기 때문에 SEO에 대한 걱정을 덜어내게 되는 것이다. 그리고 초기 로딩 속도 이슈에 대한 문제가 해결된다. 브라우저에서 빈 화면을 오랫동안 보여주는 일은 사용자 입장에서 유쾌한 일은 아니다. 그러나 SSR을 사용한다면 미리 그려진 페이지를 제공하기 때문에 처음 사용자가 페이지를 열었을 때 비교적 빠른 시간 내로 컨텐츠가 담긴 페이지를 이용할 수 있다.
&lt;/p&gt;
&lt;h3&gt;SSR 단점&lt;/h3&gt;
&lt;p&gt;
	SSR이 앞서 말한 장점을 제공하는 만큼 사용하는데에 있어서 어려움과 번거로움이 생기는 것이 사실이다. 먼저 서버 코드에 있어서도 JSX를 사용할 수 있도록 빌드나 변환하는 과정이 필요해진다. 또한 JS 기반인 서버 플랫폼, Node.js로 서버를 할 때, 같은 JS라고 할지라도 클라이언트와 서버가 모든 것을 같이 공유할 수는 없다.(DOM, Document의 URL 등) 이런 부분에 대한 예외 처리는 물론이며 특히 여러가지 라이브러리를 같이 사용하게 되는 경우 더더욱 복잡도는 증가한다. 또한 클라이언트의 부하를 줄였지 서버의 부하는 당연히 일반적인 렌더링보다 더 생긴다. 그래서 웹 서버와 API 서버를 따로 두는 등의 부하를 줄일 작업이 필요할 것으로 생각된다. 결론은 SSR이 만능열쇠는 아니란 소리.
&lt;/p&gt;
&lt;h3&gt;다음 포스팅 예고&lt;/h3&gt;
&lt;p&gt;
	그래도 SSR을 사용해보겠다고 마음을 먹었다면 이 번거롭고 귀찮은 SSR을 기왕이면 쉽게 개발하는 것이 당연히 좋을 것이다. 그런 의미에서 Next.js라는 라이브러리가 그 부분을 어느 정도 해결해주는 것 같다. 물론 기존에 'react-dom'의 서버 관련 기능을 이용하여 구성하는 방법과 조금은 다르게 느껴지기 때문에 이 부분이 어떻게 다른지 조금 비교해보며 포스팅을 해볼 예정이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;p&gt;
	최근 1~2년 간 React에 관심을 많이 가졌다. 그래서 그에 관한 포스트를 가장 처음으로 해보고자 한다. 먼저 React는 Facebook이 만든 Javascript(이하 JS) 라이브러리라는 점 부터 매력적이다. 또한 그 것을 직접 자사 서비스에도 적용시키고 에어비앤비에서도 적극 활용하는 모습을 보여주기에 기술을 따라가는데 있어서 명분이 있다. 그리고 React 커뮤니티는 굉장히 핫하고 여러 라이브러리가 그것도 아주 많이 나온다는 점에서도 취미로 삼기도 좋아 보인다. 더 나아가서는 React Native라는 네이티브 앱을 구현할 수 있는 라이브러리까지 내놓았다. 기존에 React Web Application을 구현하는 것과 같은 방식으로 할 수 있다는 것이 웹 개발자, JS 개발자에게 굉장히 큰 매력으로 다가온다. 물론, 앱에 대한 기본적인 이해가 있을 때 빛이 나는 기술인 것은 맞는 것 같다.
&lt;/p&gt;
&lt;p&gt;
	개발하는 입장에서 보자면 JSX로 UI Component를 작성하고 그 컴포넌트들을 재사용 가능하게 구성하는 점, 그 컴포넌트들을 조합하여 사용하기 용이하다는 점이 매력적이다. 그리고 SSR(Server Side Rendering) 기능이 생소했었던 상황에서 React로 SSR을 구현해보며 개념을 이해할 수 있었다. 또한 MVC 아키텍쳐의 단점을 보완하기 위해 직접 Facebook이 만든 단방향 Data Flow의 Flux 아키텍쳐와 그 구현체인 Redux에 대해서도 알아보며 React와 접목시켜 새로운 영역에 대한 지식을 쌓을 수 있는 계기가 됐다. 그 이후 요즘 흥미를 끄는 것은 React의 SSR을 구현하는 Next.js라는 라이브러리이다.
&lt;/p&gt;
&lt;h3&gt;SSR(Server Side Rendering)&lt;/h3&gt;
&lt;p&gt;
	그래서 앞서 몇 번 언급된 SSR이 무엇인지 알아보자. 서버 사이드 렌더링은 문자 그대로 렌더링을 서버에서부터 하는 것이다. 일반적으로 JS 라이브러리/프레임워크를 사용하면 서버에서는 거의 빈 껍데기만을 제공하고 클라이언트에서부터 페이지를 그리는 것이 일반적이다. 그러나 JS 라이브러리/프레임워크에서 서버 사이드 렌더링이란 개념은 서버에서 JS 라이브러리/프레임워크를 이용하여 미리 페이지를 그려 클라이언트에 보내고, 클라이언트 단에서 바뀔 부분이나 클라이언트에서만 존재하는 기능에 관한 작업을 하게 된다. 이 때 가상DOM을 활용하여 바뀐 부분만 바꿔주는 등 클라이언트에서의 부하는 최소화한다.
&lt;/p&gt;
&lt;h3&gt;SSR 장점&lt;/h3&gt;
&lt;p&gt;
	어느 부분에서나 장단점은 있다. 장점은 SEO(Search Engine Optimization, 검색 엔진 최적화)이다. JS 라이브러리/프레임워크를 사용하면서 고질적인 문제는 SEO이다. 앞서 말했듯이 그냥 미리 그려지지 않고 빈 껍데기만 제공된다면 검색엔진이 당연하게도 내용을 검색하는데 어려움이 있다.(모든 검색 엔진이 검색하지 못 하는 것은 아니다) 하지만 SSR을 이용한다면 서버에서부터 페이지를 제공할 때 컨텐츠가 담겨있기 때문에 SEO에 대한 걱정을 덜어내게 되는 것이다. 그리고 초기 로딩 속도 이슈에 대한 문제가 해결된다. 브라우저에서 빈 화면을 오랫동안 보여주는 일은 사용자 입장에서 유쾌한 일은 아니다. 그러나 SSR을 사용한다면 미리 그려진 페이지를 제공하기 때문에 처음 사용자가 페이지를 열었을 때 비교적 빠른 시간 내로 컨텐츠가 담긴 페이지를 이용할 수 있다.
&lt;/p&gt;
&lt;h3&gt;SSR 단점&lt;/h3&gt;
&lt;p&gt;
	SSR이 앞서 말한 장점을 제공하는 만큼 사용하는데에 있어서 어려움과 번거로움이 생기는 것이 사실이다. 먼저 서버 코드에 있어서도 JSX를 사용할 수 있도록 빌드나 변환하는 과정이 필요해진다. 또한 JS 기반인 서버 플랫폼, Node.js로 서버를 할 때, 같은 JS라고 할지라도 클라이언트와 서버가 모든 것을 같이 공유할 수는 없다.(DOM, Document의 URL 등) 이런 부분에 대한 예외 처리는 물론이며 특히 여러가지 라이브러리를 같이 사용하게 되는 경우 더더욱 복잡도는 증가한다. 또한 클라이언트의 부하를 줄였지 서버의 부하는 당연히 일반적인 렌더링보다 더 생긴다. 그래서 웹 서버와 API 서버를 따로 두는 등의 부하를 줄일 작업이 필요할 것으로 생각된다. 결론은 SSR이 만능열쇠는 아니란 소리.
&lt;/p&gt;
&lt;h3&gt;다음 포스팅 예고&lt;/h3&gt;
&lt;p&gt;
	그래도 SSR을 사용해보겠다고 마음을 먹었다면 이 번거롭고 귀찮은 SSR을 기왕이면 쉽게 개발하는 것이 당연히 좋을 것이다. 그런 의미에서 Next.js라는 라이브러리가 그 부분을 어느 정도 해결해주는 것 같다. 물론 기존에 'react-dom'의 서버 관련 기능을 이용하여 구성하는 방법과 조금은 다르게 느껴지기 때문에 이 부분이 어떻게 다른지 조금 비교해보며 포스팅을 해볼 예정이다.
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Mon, 04 Jun 2018 11:05:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/react-ssr/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/react-ssr/</guid>
        
        
        <category>javascript</category>
        
        <category>react</category>
        
      </item>
      
    
      
      <item>
        <title>깃허브 블로그 첫 개시</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
	깃허브 블로그를 시작하게 됐다. 다른 플랫폼에서도 몇 번 시도를 해봤지만 개발자는 개발자처럼 사는 게 편한 듯 싶다. &quot;마크다운까지 활용하며 쓰고 싶은대로 쓰리라!&quot;, &quot;광고 수익이 주 목적은 절대 아니다!&quot; 하는 다짐으로 넘어온 만큼 꾸준히 써보고 싶지만 다짐이 언제까지 갈지는 모르겠다. 가능한 주기적인 포스팅을 하고자 하는데 한 번에 많은 것을 하려고 하기보다는 조금씩 자세하게 포스팅하는 것이 목표이다.
&lt;/p&gt;
&lt;p&gt;
	잘 해낼 수 있기를 :)
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
	깃허브 블로그를 시작하게 됐다. 다른 플랫폼에서도 몇 번 시도를 해봤지만 개발자는 개발자처럼 사는 게 편한 듯 싶다. &quot;마크다운까지 활용하며 쓰고 싶은대로 쓰리라!&quot;, &quot;광고 수익이 주 목적은 절대 아니다!&quot; 하는 다짐으로 넘어온 만큼 꾸준히 써보고 싶지만 다짐이 언제까지 갈지는 모르겠다. 가능한 주기적인 포스팅을 하고자 하는데 한 번에 많은 것을 하려고 하기보다는 조금씩 자세하게 포스팅하는 것이 목표이다.
&lt;/p&gt;
&lt;p&gt;
	잘 해낼 수 있기를 :)
&lt;/p&gt;
&lt;h2&gt;끝.&lt;/h2&gt;
</description>
        
        <pubDate>Sun, 27 May 2018 22:15:00 +0000</pubDate>
        <link>http://holywater-jeong.github.io/blog/github-blog-first-post/</link>
        <guid isPermaLink="true">http://holywater-jeong.github.io/blog/github-blog-first-post/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
