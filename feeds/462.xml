<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Developer's Delight</title>
<link>https://sonseungha.tistory.com/</link>
<description>Linux System Programmer.

Tizen Framework Programmer.

linuxias@gmail.com

https://github.com/linuxias/

https://linuxias.gitbooks.io/

https://www.linkedin.com/in/seungha-son-a97a02b3/</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 06:37:11 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>Linuxias</managingEditor>
<image>
<title>Developer's Delight</title>
<url>https://tistory1.daumcdn.net/tistory/1135772/attach/789073b7b20d4abbac3d4ee7d94fb25e</url>
<link>https://sonseungha.tistory.com</link>
<description>Linux System Programmer.

Tizen Framework Programmer.

linuxias@gmail.com

https://github.com/linuxias/

https://linuxias.gitbooks.io/

https://www.linkedin.com/in/seungha-son-a97a02b3/</description>
</image>
<item>
<title>User Namespace(1)</title>
<link>https://sonseungha.tistory.com/520</link>
<description>&lt;h1&gt;User Namespace&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;먼저 이 글에서 사용한 코드는 linux kernel 4.16 임을 알려드립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;User namespace는 시큐리티와 관련된 식별자 및 속성을 분리하며, 특히 User ID와 Group ID, 루트 디렉토리, Key, Capability를 분리합니다. 프로세스의 User, Group ID는 user namespace 내,외부적으로 다를수 있습니다. 특히 프로세스는 User namespace 외부에 권한이 없는 정상적인 User ID를 가질 수 있으며, 동시에 namepsace 내부에 User ID 0을 가질 수 있습니다. 즉, 프로세스에는 user namespace 내의 작업에 대한 전체 권한이 있지만 namespace 외부 작업에 대한 권한이 없습니다.&lt;/p&gt;
&lt;h2&gt;Nested namespaces, Namespace membership&lt;/h2&gt;
&lt;p&gt;User namespace는 PID namespace 처럼 중첩되어 질 수 있습니다. 이 말은 root namespace를 제외하고 각 User namespace는 부모 user namespace를 가질 수 있다는 것입니다. 다른 관점에서 본다면 User namespace는 0개 또는 그 이상의 자식 User namespace를 가질 수 있습니다. 부모 User namespace는 &lt;strong&gt;CLONE_NEWUSER&lt;/strong&gt; flag를 사용한 &lt;strong&gt;unshare(2)&lt;/strong&gt; 또는 &lt;strong&gt;clone(2)&lt;/strong&gt; 시스템콜을 통해 user namespace를 생성하는 프로세스의 namespace입니다. 음, 새로 생성된 namespace는 그 namespace를 생성하는 프로세스의 namespace를 부모 namespace로 가진다는 의미입니다.&lt;/p&gt;
&lt;p&gt;커널은 이렇게 중첩할 수 있는 user namespace의 레벨을 32개로 제한하고 있습니다.&lt;/p&gt;
&lt;p&gt;아래 &lt;strong&gt;struct user_namespace&lt;/strong&gt;를 살펴보시죠. 아래 line.61에 &lt;strong&gt;int level;&lt;/strong&gt; 구조체 멤버변수가 보이시나요? user namespace 는 이처럼 레벨을 관리하고 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt; File path : include/linux/user_namespace.h

 55 struct user_namespace {
 56     struct uid_gid_map  uid_map;
 57     struct uid_gid_map  gid_map;
 58     struct uid_gid_map  projid_map;
 59     atomic_t        count;
 60     struct user_namespace   *parent;
 61     int         level;
 62     kuid_t          owner;
 63     kgid_t          group;
 64     struct ns_common    ns;
 65     unsigned long       flags;
 66
 67     /* Register of per-UID persistent keyrings for this namespace */
 68 #ifdef CONFIG_PERSISTENT_KEYRINGS
 69     struct key      *persistent_keyring_register;
 70     struct rw_semaphore persistent_keyring_register_sem;
 71 #endif
 72     struct work_struct  work;
 73 #ifdef CONFIG_SYSCTL
 74     struct ctl_table_set    set;
 75     struct ctl_table_header *sysctls;
 76 #endif
 77     struct ucounts      *ucounts;
 78     int ucount_max[UCOUNT_COUNTS];
 79 } __randomize_layout;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 limit을 초과하게 되면 &lt;strong&gt;EUSERS&lt;/strong&gt; 에러가 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;모든 프로세스들은 User namespace 중 하나에 속합니다. 여러분들이 프로세스 생성에 많이 사용하는 &lt;strong&gt;fork(2)&lt;/strong&gt;, &lt;strong&gt;clone(2)&lt;/strong&gt;을 사용할 때 flag로 &lt;strong&gt;CLONE_NEWUSER&lt;/strong&gt;를 전달하지 않는다면 해당 시스템 콜을 호출한 프로세스의 User namespace에 속하게 됩니다. 싱글스레드 프로세스는 &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템 콜을 사용하여 다른 user namespace로 포함될 수 있습니다. 조건은 &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템 콜을 호출하는 프로세스가 &lt;strong&gt;CAP_SYS_ADMIN&lt;/strong&gt; Capability를 가지고 있어야 합니다.&lt;/p&gt;
&lt;p&gt;여기서 주의할 점은 멀티스레드 프로세스에서는 &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템 콜을 호출한 스레드만 namespace가 변경되어 버립니다. 그럼, 이상한 문제점들이 발생하게 될겁니다.&lt;/p&gt;
&lt;p&gt;하나의 스레드만 적용되는 이유는 아래 코드에서 확인할 수 있습니다. &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템 콜을 호출하게 되면 아래 함수가 수행됩니다. 여기서 line.268을 확인해보시면 현재 task_struct를 가져오게되고, line.283에서 task_struct를 가져와 namespace를 생성하게 되는데, 스레드는 각각의 task_struct를 가지고 있기에, 해당 thread에 대해서만 변경이 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;  File path : kernel/nsproxy.c
  266 SYSCALL_DEFINE2(setns, int, fd, int, nstype)
  267 {
  268     struct task_struct *tsk = current;
  269     struct nsproxy *new_nsproxy;
  270     struct file *file;
  271     struct ns_common *ns;
  272     int err;
  273
  274     file = proc_ns_fget(fd);
  275     if (IS_ERR(file))
  276         return PTR_ERR(file);
  277
  278     err = -EINVAL;
  279     ns = get_proc_ns(file_inode(file));
  280     if (nstype &amp;amp;&amp;amp; (ns-&amp;gt;ops-&amp;gt;type != nstype))
  281         goto out;
  282
  283     new_nsproxy = create_new_namespaces(0, tsk, current_user_ns(), tsk-&amp;gt;fs);
  284     if (IS_ERR(new_nsproxy)) {
  285         err = PTR_ERR(new_nsproxy);
  286         goto out;
  287     }
  288
  289     err = ns-&amp;gt;ops-&amp;gt;install(new_nsproxy, ns);
  290     if (err) {
  291         free_nsproxy(new_nsproxy);
  292         goto out;
  293     }
  294     switch_task_namespaces(tsk, new_nsproxy);
  295
  296     perf_event_namespaces(tsk);
  297 out:
  298     fput(file);
  299     return err;
  300 }&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Capability&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CLONE_NEWUSER&lt;/strong&gt; flag를 이용하여 &lt;strong&gt;clone(2)&lt;/strong&gt; 시스템 콜로 생성된 자식 프로세스는 새로운 User namespace에서 완전한 Capability 집합을 가지고 실행됩니다. 마찬가지로 &lt;strong&gt;unshare(2)&lt;/strong&gt;, &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템 콜도 마찬가지로 Namepsace 내부에서 Capability의 전체 집합을 가지게 됩니다.&lt;/p&gt;
&lt;p&gt;반면에, 새로운 네임 스페이스가 생성 되더라도 그 프로세스는 부모 네임 스페이스 (클론 (2)의 경우) 또는 이전 (&lt;strong&gt;unshare(2)&lt;/strong&gt; 및 &lt;strong&gt;setns(2)&lt;/strong&gt;의 경우) User namepsace의 CCapability를 갖지 않습니다 또는 루트 사용자 (즉, Root User namepsace에서 사용자 ID가 0 인 프로세스)에 의해 조인됩니다.&lt;/p&gt;
&lt;p&gt;다른 경우로서, &lt;strong&gt;execve(2)&lt;/strong&gt;를 호출하면 프로세스의 기능이 일반적인 방법으로 재계산됩니다 이 방식은 이 글의 범위를 벗어나기 때문에 다루지 않겠습니다. 관심있으신 분은 &lt;strong&gt;capabilites(7)&lt;/strong&gt; 을 참조해주세요결과적으로 Namespace 내에 프로세스의 사용자 ID가 0이 아니거나 실행 가능 파일에 비어 있지 않은 상속 기능 마스크가 있으면 프로세스가 모든 기능을 잃게됩니다. 음, 자세한 내용은 아래에서 다시 다루겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;clone(2)&lt;/strong&gt; 또는 &lt;strong&gt;unshared(2)&lt;/strong&gt; 를 이용해 새로운 IPC, mount, network, PID, UTS namespace를 생성할 때 커널은 새로운 Namespace에 대해 생성한 프로세스의 User namespace를 기록합니다. 새로운 Namespace의 프로세스가 나중에 Namespace 내에 격리된 전역 리소스에서 작동하는 권한 작업을 수행하면 커널이 새 Namespace와 연결된 User namespace의 프로세스 Capability에 따라 검사가 수행됩니다. 즉 Namepsace의 Capability는 User namespace와 상호작용하며 체크하게 된다는 것입니다.&lt;/p&gt;
&lt;h2&gt;Restrictions on mount namespaces&lt;/h2&gt;
&lt;p&gt;mount namespace 관련하여 정리한 내용입니다.&lt;/p&gt;
&lt;p&gt;mount namespace는 owner user namespace를 가지고 있습니다. owner user namespace가 상위 mount namespace의 owner user namespace와 다른 mount namespace는 권한이 낮은 mount namespace로 간주됩니다. 낮은 권한의 mount namespace가 생성될 때 공유 마운트는 슬레이브 마운트로 축소됩니다. 이렇게하면 권한이 낮은 mount namespace에서 수행 된 매핑이보다 많은 권한을 가진 mount namespace로 전파되지 않습니다.&lt;/p&gt;
&lt;p&gt;더 많은 권한을 가진 마운트에서 하나의 단위로 나오는 마운트는 함께 잠기고 특권이 적은 mount namespace에서 분리되지 않을 수 있습니다.&lt;/p&gt;
&lt;p&gt;파일 및 디렉토리에 대해서는 다른 namespace 마운트 지점이 아닌 하나의 namespace의 마운트 지점인 파일 또는 디렉터리는 마운트 지점이 아닌 mount namespace에서 이름을 변경하거나 연결 해제하거나 제거(rmdir(2))할 수 있다.&lt;br&gt;다른 mount namespace에서 마운트 포인트의 파일, 디렉토리를 삭제, rename, unlink를 시도하게 되면 &lt;strong&gt;EBUSY&lt;/strong&gt; 에러가 나타납니다. 이런 결과는 특권이 많은 사용자로부터 DoS 공격을 막기 위한 방안입니다.&lt;/p&gt;
&lt;p&gt;User Namespace의 추가적인 사항은 다음 글에서 이어서 작성하겠습니다. 감사합니다.&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Container</category>
<category>Linux</category>
<category>Mount Namespace</category>
<category>namespace</category>
<category>Network namespace</category>
<category>PID namespace</category>
<category>User namespace</category>
<category>UTS namespace</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/520</guid>
<comments>https://sonseungha.tistory.com/520#entry520comment</comments>
<pubDate>Wed, 08 May 2019 11:02:12 +0900</pubDate>
</item>
<item>
<title>PID Namespace</title>
<link>https://sonseungha.tistory.com/519</link>
<description>&lt;h1&gt;PID Namespace&lt;/h1&gt;
&lt;p&gt;PID namespace는 프로세스 ID 공간을 격리 시킵니다. 이 말인 즉, 다른 PID namespace의 프로세스들은 같은 PID를 가질 수도 있음을 의미합니다. PID namespace들은 프로세스 집합의 종료, 재시작과 같은 기능을 제공하기 위한 컨테이너를 허용합니다. 또한 컨테이너를 새로운 호스트로 마이그레이션하는 등의 기능을 컨테이너가 제공할 수 있도록 해줍니다.&lt;/p&gt;
&lt;p&gt;PID namepsace의 특이한 점은 새로운 PID namespace의 PID는 1 부터 시작한다는 것입니다. standalone 시스템과 동일하게 각 namespace의 시작 프로세스는 pid를 1번을 가지게됩니다. PID namespace를 사용하기 위해선 &lt;strong&gt;CONFIG_PID_NS&lt;/strong&gt; 커널 옵션을 설정해야 합니다.&lt;/p&gt;
&lt;h3&gt;The namespace init process&lt;/h3&gt;
&lt;p&gt;CLONE_NEWPID flag를 파라미터로 한 unshare(2) 시스템 콜을 호출한 이후, 또는 clone(2) 시스템 콜의 flag로 CLONE_NEWPID를 전달하여 생성한 프로세스는 새로운 Namespace의 첫 번째 프로세스가 됩니다. 이 말인 즉, 이 프로세스의 PID가 1번이라는 것입니다.&lt;/p&gt;
&lt;p&gt;조금 혼란스러울 수 있습니다. 리눅스에서 PID는 고유하며, 프로세스의 식별자로 사용이 되는데, 새로운 Namespace의 첫 번째 프로세스의 PID가 1번이라면, 중복될테니까요. 그 이후 이 프로세스에 자식 프로세스들도 2,3,4... 와 같은 PID를 가질 수 있다는 말이됩니다. 식별자로써의 가치가 사라지게 되는 것일까요? 조금씩 정리해보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;새로운 PID namespace의 첫 번째 프로세스의 PID가 1번이라고 말씀드렸습니다. 그 의미는 해당 namespace를 위한 init process가 된다는 의미입니다. 아래 그림처럼 새로운 namespace는 PID 1번부터 시작하게 됩니다. 뭔가 속임수 같나요?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uploads.toptal.io/blog/image/674/toptal-blog-image-1416487554032.png&quot; alt=&quot;Parent PID namespace&quot;&gt;&lt;/p&gt;
&lt;p&gt;그림 출처 : &lt;a href=&quot;https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces&quot;&gt;https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;만약 8,1 두 개의 PID를 가진 프로세스에서 &lt;strong&gt;getpid(2)&lt;/strong&gt; 시스템 콜을 호출하게 되면, 어떤 결과가 리턴 될까요? 결과는 1입니다. PID를 이용해 동작하는 시스템 콜들은 항상 호출자의 PID namespace 내에 표시되는 PID를 사용하게 됩니다. 그렇기 때문에 child PID namespace에서 표시되는 1이 반환됩니다.&lt;/p&gt;
&lt;p&gt;namespace 동작 중에 init process가 종료되면 어떻게 될까요? 만약 PID namespace 내의 init process가 종료된다면, 커널은 &lt;strong&gt;SIGKILL&lt;/strong&gt; 시그널을 통해 해당 namespace 내에 모든 프로세스를 종료시키게 됩니다. 이 의미는 PID namespace가 정상적으로 동작하기 위해선 PID 1의 init process가 필수적이란 의미입니다.&lt;/p&gt;
&lt;p&gt;init process에 시그널을 보낼 수 있는 경우는 시그널 핸들러에 등록한 시그널들만 PID namespace의 다른 프로세스들에 의해 전달될 수 있습니다. 이러한 제한은 권한이 있는 프로세스들에게도 해당되며 실수로 init process가 PID namespace 내의 다른 멤버 프로세스에 의해 종료되는 것을 막아주게됩니다. 마찬가지로 상위 PID namespace의 프로세스는 자식 PID namespace의 init process가 등록한 시그널 &lt;strong&gt;kill(2)&lt;/strong&gt;을 호출하여 전달할 수 있습니다. 여기서 &lt;strong&gt;SIGKILL&lt;/strong&gt;과 &lt;strong&gt;SIGSTOP&lt;/strong&gt;은 예외적으로 처리되는데요, 상위 PID namespace에서 시그널을 전달하면 init process에서는 처리할 수 없기에, 해당 시그널이 처리되어 프로세스 종료 및 중지가 발생하게 됩니다.&lt;/p&gt;
&lt;h3&gt;Nesting PID namespace&lt;/h3&gt;
&lt;p&gt;PID Namespace는 중첩해서 사용이 가능합니다. 그 말은, 각 PID namespace는 상위(부모) namespace를 가지고 있습니다.(root PID namespace는 제외입니다 :D) PID namepsace의 부모 namespace는 &lt;strong&gt;clone(2)&lt;/strong&gt; 또는 &lt;strong&gt;unshare(2)&lt;/strong&gt;를 사용하여 namespace를 생성한 프로세스의 PID namepsace가 됩니다. 이러한 구조는 PID namespace가 트리 자료구조 형태로 이루어져 있습니다. 모든 namepsace는 자신의 상위 namespace들(root namespace 포함)을 언제든 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;특정 Namespace에 속한 프로세스는 해당 namespace에 속한 프로세스들과, 상위 모든(root namespace로 가는 경로의) namespace 프로세스들에게 보여집니다. 보여진다는 의미는 해당 프로세스를 타겟으로 작업을 진행할 수 있다는 의미입니다. 하지만 반대로 자식 PID namespace에서는 부모나 제거된 상위 namespace의 프로세스들을 볼 수 없습니다. 정리하면, 프로세스는 오직 자신의 PID namsepace의 프로세스들이나 자식 namespace들의 프로세스들만 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;특정 PID namespace내의 프로세스들은 가끔 namespace 외부에 부모 프로세스를 가지는 경우가 있습니다. 첫 번째는 위에서 살펴보았듯이, Namespace가 생성된 후 첫 프로세스는 자신을 생성한 프로세스가 부모프로세스가 됩니다. 이 경우엔 부모와 자식 프로세스가 각각 다른 PID namespace에 존재하게 됩니다. 두 번째로 &lt;strong&gt;setns(2)&lt;/strong&gt; 시스템콜을 이용하여 특정 PID namespace로 조인하게 되는 경우입니다. 조인할 수 있는 PID namespace는 자식 PID namespace으로만 가능합니다. 완전 다른 방향의 namespace로는 불가능합니다. 잘 생각하셔야 할게 지금 설명드리는 부분은 namespace간 부모, 자식 관계가 아닌 프로세스의 부모, 자식 관계입니다.&lt;/p&gt;
&lt;h3&gt;/proc 파일시스템과 PID namespace&lt;/h3&gt;
&lt;p&gt;/proc 파일시스템은 /proc 파일시스템이 다른 Namespace에서 보여지더라도 마운트를 수행한 프로세스의 PID namespace에 보이는 프로세스만 보여줍니다. 새 PID namespace를 만든 후에는 ps (1)와 같은 툴이 정상적으로 작동하도록 /proc 파일시스템에 새로운 procfs 인스턴스를 마운트하고 루트 디렉토리를 변경하는 것이 좋습니다. clone (2) 또는 unshare(2)의 flags에 CLONE_NEWNS를 포함하여 새로운 마운트 네임 스페이스를 동시에 생성하면 루트 디렉토리를 변경할 필요가 없습니다. 새로운 procfs 인스턴스를 /proc에 직접 마운트 할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;mount -t proc proc /proc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PID namespace는 container에서 유용하게 사용되는 기술 중 하나입니다. 추가적인 내용들은 정리되는대로 갱신하겠습니다. 글 읽어주셔서 감사합니다.&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;p&gt;참조 :&lt;br&gt;&lt;a href=&quot;https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces&quot;&gt;https://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Container</category>
<category>container</category>
<category>IPC namespace</category>
<category>Linux</category>
<category>Mount Namespace</category>
<category>namespace</category>
<category>Network namespace</category>
<category>PID namespace</category>
<category>User namespace</category>
<category>UTS namespace</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/519</guid>
<comments>https://sonseungha.tistory.com/519#entry519comment</comments>
<pubDate>Fri, 03 May 2019 18:48:23 +0900</pubDate>
</item>
<item>
<title>Namespace Overview</title>
<link>https://sonseungha.tistory.com/518</link>
<description>&lt;h1&gt;Namespace&lt;/h1&gt;
&lt;p&gt;namespace 기술은 cgourp(Control Group)과 함께 컨테이너(Container) 솔루션을 구성하는 기술 중 하나입니다. 이번 글에서는 namespcae에 대해 정리한 후linux에서 제공하는 namespcae의 종류에 대해 정리하고자 합니다.&lt;/p&gt;
&lt;p&gt;namespace는 전역 시스템 리소스를 추상화하여 전역 리소스의 자체 격리 인스턴스가있는 namespace 내의 프로세스에 표시 되도록합니다. 전역 리소스에 대한 변경은 namespace의 멤버, 즉 동일한 namespace를 가진 다른 프로세스에서 볼 수 있지만 다른 namespace를 가진 프로세스에서는 보이지 않습니다. namespcae를 사용하는 것은 컨테이너를 구현하는 것입니다.&lt;/p&gt;
&lt;h3&gt;namespace의 종류&lt;/h3&gt;
&lt;p&gt;리눅스에서 제공하는 namespace 들은 아래와 같습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Namespace&lt;/th&gt;
&lt;th&gt;Constant&lt;/th&gt;
&lt;th&gt;Isolates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;IPC&lt;/td&gt;
&lt;td&gt;CLONE_NEWIPC&lt;/td&gt;
&lt;td&gt;System V IPC, POSIX message queues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;CLONE_NEWNET&lt;/td&gt;
&lt;td&gt;Network devices, stacks, ports, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mount&lt;/td&gt;
&lt;td&gt;CLONE_NEWNS&lt;/td&gt;
&lt;td&gt;Mount points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PID&lt;/td&gt;
&lt;td&gt;CLONE_NEWPID&lt;/td&gt;
&lt;td&gt;Process IDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;CLONE_NEWUSER&lt;/td&gt;
&lt;td&gt;User and group IDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UTS&lt;/td&gt;
&lt;td&gt;CLONE_NEWUTS&lt;/td&gt;
&lt;td&gt;Hostname and NIS domain name&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;namespace API&lt;/h2&gt;
&lt;p&gt;namespace API에는 아래의 시스템 콜과 함께 /proc 파일이 포함됩니다.&lt;br&gt;먼저 system call에 대해 설명드립니다.&lt;/p&gt;
&lt;h3&gt;시스템 콜&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;setns(2)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;setns 시스템 콜은 호출하는 프로세스가 존재하는 namespace에 조인합니다. 조인하고자 하는 namespace는 /proc/[pid]/ns 디렉토리 아래 존재하는 하나의 namespace 파일디스크립터(fd) 를 이용합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clone(2)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;clone(2) 시스템 콜은 새로운 프로세스를 생성합니다. 시스템 콜 호출 시 &lt;strong&gt;flags&lt;/strong&gt; argument로 &lt;strong&gt;CLONE_NEW*&lt;/strong&gt; flag를 하나 이상 전달합니다. CLONE_NEW* flag는 위에서 설명한 바 있습니다. 그럼 각 flag에 해당하는 새로운 namespace가 생성되며 그 namepsaces의 멤버로 자식 프로세스가 생성됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unshare(2)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;unshare() 시스템 콜을 호출한 프로세스를 새로운 namespace로 이동시킵니다. 만약 &lt;strong&gt;flags&lt;/strong&gt; argutment가 &lt;strong&gt;CLONE_NEW*&lt;/strong&gt; flag를 입력한다면, 새로운 namespace가 생성되고, 해당 namespace의 멤버로 이동합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;여기서 유의할 점은 clone(2) 와 unshare(2) 시스템 콜을 사용하여 새로운 namespace들을 생성하기 위해선 **CAP_SYS_ADMIN** capability가 필요합니다. user namespace 생성은 예외적으로 privilege가 필요하지 않습니다.&lt;/p&gt;
&lt;h3&gt;/proc/[pid]/ns 디렉토리&lt;/h3&gt;
&lt;p&gt;그럼 /proc 파일시스템에서 namespace에 대해 간략히 정리하겠습니다. 모든 프로세스들은 /proc/[pid]/ns 디렉토리가 존재합니다. 아래 ns 디렉토리에 여러 namespace가 존재하는 것을 확인할 수 있습니다. 이 namespace는 setns(2) 시스템 콜을 이용해 namespace를 변경하고자 할 때 변경을 원하는 namespace의 fd로 사용됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l /proc/$$/ns
total 0
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 ipc -&amp;gt; ipc:[4026531839]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 mnt -&amp;gt; mnt:[4026531840]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 net -&amp;gt; net:[4026531956]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 pid -&amp;gt; pid:[4026531836]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 user -&amp;gt; user:[4026531837]
lrwxrwxrwx. 1 mtk mtk 0 Jan 14 01:20 uts -&amp;gt; uts:[4026531838]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;각 namespace 별 proc 파일은 다음과 같습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;namespace&lt;/th&gt;
&lt;th&gt;/proc file&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;IPC namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/ipc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mount namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/mount&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/net&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PID namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/pid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uts namespace&lt;/td&gt;
&lt;td&gt;/proc/[pid]/ns/uts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;Namespace 간략 정리&lt;/h2&gt;
&lt;p&gt;각 Namespace의 상세내용은 다른 글로 정리하고자 하며, 여기서는 간략하게 정리하고자 합니다.&lt;/p&gt;
&lt;h3&gt;IPC namespace (CLONE_NEWIPC)&lt;/h3&gt;
&lt;p&gt;IPC namespace는 특정 IPC 자원들(System V IPC,와 POSIX message queue)을 격리시킵니다. 특정 IPC 자원들의 공통적인 특징은 IPC 객체가 파일시스템 경로명 외의 메커니즘으로 식별된다는 것입니다. System V IPC에는 메시지 큐, 세마포어, 공유메모리를 가리킵니다.&lt;/p&gt;
&lt;h3&gt;Network namespace (CLONE_NEWNET)&lt;/h3&gt;
&lt;p&gt;Network namespace는 네트워크와 관련된 시스템 자원의 격리, 고립을 제공합니다. 해당되는 시스템 자원으로는 네트워크 디바이스들, IPv4, IPv6 프로토콜 스택, IP routing tables, 방화벽, /proc/net 디렉토리, /sys/class/net 디렉토리, 포트 번호 등등이 있습니다. 물리적 네트워크 장치는 정확히 하나의 네트워크 네임스페이스를 가질 수 있습니다. 가상 네트워크 장치는 네트워크 namespace 간에 터널을 생성하는데 사용할 수 있는 추상화된 파이프를 제공합니다.&lt;/p&gt;
&lt;p&gt;Network namespace가 해제되면, 물리 네트워크 장치는 초기 Network namespace로 변경됩니다. Network namespace를 사용하기 위해선 &lt;strong&gt;CONFIG_NET_NS&lt;/strong&gt; 커널 옵션이 설정되어 있어야 합니다.&lt;/p&gt;
&lt;h3&gt;Mount namespaces (CLONE_NEWNS)&lt;/h3&gt;
&lt;p&gt;Mount namespace는 파일시스템 마운트 지점의 집합을 고립, 격리합니다. 즉, 서로 다른 Mount namespace의 프로세스가 파일 시스템 구조에 대해 다른 뷰를 가질 수 있습니다. &lt;strong&gt;mount(2)&lt;/strong&gt;, &lt;strong&gt;umount(2)&lt;/strong&gt; 를 이용해 Mount namespace 내에 마운트 집합들을 수정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;/proc/[pid]/mounts 파일은 현재 프로세스의 Mount namespace에 마운트된 모든 파일시스템을 나열합니다. 이 파일의 포맷은 &lt;strong&gt;fstab(5)&lt;/strong&gt;를 참고해주세요.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seunghason@linuxias$cat /proc/self/mounts
sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
udev /dev devtmpfs rw,nosuid,relatime,size=16413672k,nr_inodes=4103418,mode=755 0 0

...

binfmt_misc /proc/sys/fs/binfmt_misc binfmt_misc rw,relatime 0 0
tmpfs /run/user/1000 tmpfs rw,nosuid,nodev,relatime,size=3288548k,mode=700,uid=1000,gid=1000 0 0
gvfsd-fuse /run/user/1000/gvfs fuse.gvfsd-fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=1000 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/proc/[pid]/mountstat 파일은 프로세스의 Mount namespace의 마운트 지점에 대한 정적, 설정 정보들을 보여줍니다. 보여지는 정보에 대한 것은 아래를 참고해주세요.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;device /dev/sda7 mounted on /home with fstype ext3 [statistics]
(       1      )            ( 2 )             (3 ) (4)
The fields in each line are:
(1)  The name of the mounted device (or &amp;quot;nodevice&amp;quot; if there is no corresponding device).
(2)  The mount point within the filesystem tree.
(3)  The filesystem type.
(4)  Optional statistics and configuration information.
     Currently (as at Linux 2.6.26), only NFS filesystems export information via this field.&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;PID namespace&lt;/h3&gt;
&lt;p&gt;PID namespace는 프로세스 ID 공간을 격리 시킵니다. 이 말인 즉, 다른 PID namespace의 프로세스들은 같은 PID를 가질 수도 있음을 의미합니다. PID namespace들은 프로세스 집합의 종료, 재시작과 같은 기능을 제공하기 위한 컨테이너를 허용합니다. 또한 컨테이너를 새로운 호스트로 마이그레이션하는 등의 기능을 컨테이너가 제공할 수 있도록 해줍니다.&lt;/p&gt;
&lt;p&gt;PID namepsace의 특이한 점은 새로운 PID namespace의 PID는 1 부터 시작한다는 것입니다. standalone 시스템과 동일하게 각 namespace의 시작 프로세스는 pid를 1번을 가지게됩니다.&lt;/p&gt;
&lt;p&gt;PID namespace를 사용하기 위해선 &lt;strong&gt;CONFIG_PID_NS&lt;/strong&gt; 커널 옵션을 설정해야 합니다.&lt;/p&gt;
&lt;h3&gt;User namespace&lt;/h3&gt;
&lt;p&gt;User namespace는 시큐리티와 관련된 식별자 및 속성을 분리하며, 특히 User ID와 Group ID, 루트 디렉토리, Key, Capability를 분리합니다. 프로세스의 User, Group ID는 user namespace 내,외부적으로 다를수 있습니다. 특히 프로세스는 User namespace 외부에 권한이 없는 정상적인 User ID를 가질 수 있으며, 동시에 namepsace 내부에 User ID 0을 가질 수 있습니다. 즉, 프로세스에는 user namespace 내의 작업에 대한 전체 권한이 있지만 namespace 외부 작업에 대한 권한이 없습니다. 자세한 내용은 다른 글로 살펴보겠습니다.&lt;/p&gt;
&lt;h3&gt;UTS namespace&lt;/h3&gt;
&lt;p&gt;UTS namespace는 두개의 시스템 식별자를 고립, 격리시킵니다. 두 개의 시스템 식별자는 hostname과 NIS domain name입니다. 이 식별자들은 &lt;strong&gt;sethostname(2)&lt;/strong&gt;, &lt;strong&gt;setdomainname(2)&lt;/strong&gt;으로 설정가능합니다. UTS namespace의 사용은 &lt;strong&gt;CONFIG_UTS_NS&lt;/strong&gt; 커널 옵션을 설정해야 합니다.&lt;/p&gt;
&lt;p&gt;이상으로 Namespace에 대해 간단히 정리해보았습니다. 다음 글에서 각 namespace의 사용 및 예제에 대해 다뤄보겠습니다.&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;p&gt;참고 :&lt;br&gt;linux manual page - namespaces&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Container</category>
<category>container</category>
<category>IPC namespace</category>
<category>Linux</category>
<category>Mount Namespace</category>
<category>namespace</category>
<category>Network namespace</category>
<category>PID namespace</category>
<category>User namespace</category>
<category>UTS namespace</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/518</guid>
<comments>https://sonseungha.tistory.com/518#entry518comment</comments>
<pubDate>Fri, 03 May 2019 00:22:44 +0900</pubDate>
</item>
<item>
<title>[Opengrok] java heap space Problem</title>
<link>https://sonseungha.tistory.com/516</link>
<description>&lt;h2&gt;java heap space Problem&lt;/h2&gt;
&lt;p&gt;잘 사용하던 Opengrok에서 java heap space 문제가 발생하였습니다.&lt;br&gt;&lt;br&gt;&lt;br&gt;매우 큰 프로젝트, 예를 들어 안드로이드 같은 경우에는 JVM의 heap 사이즈로는 메모리에 로드하기 어려움으로써 발생하는 문제입니다.&lt;br&gt;&lt;br&gt;&lt;br&gt;저는 Opengrok을 Tomcat/Apache을 사용하기 때문에 아래와 같은 방법으로 해결하였습니다.&lt;br&gt;HTTP 헤더 사이즈의 제한을 변경하시면 됩니다.&lt;br&gt;&lt;br&gt;&lt;br&gt;/etc/tomcat/server.xml을 아래와 같이 수정해 줍니다.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Connector port=&amp;quot;8888&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot;
           connectionTimeout=&amp;quot;20000&amp;quot;
           maxHttpHeaderSize=&amp;quot;65536&amp;quot;
           redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;

&lt;p&gt;Opengrok service를 동작시키는 다양한 환경에 따라 조치하는 방법이 다양합니다.&lt;br&gt;&lt;br&gt;&lt;br&gt;해당 방법은 아래 링크를 참조해 주세요.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oracle/opengrok/wiki/Tuning-for-large-code-bases&quot;&gt;Tuning for large code bases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;감사합니다.&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/516</guid>
<comments>https://sonseungha.tistory.com/516#entry516comment</comments>
<pubDate>Tue, 30 Apr 2019 16:06:23 +0900</pubDate>
</item>
<item>
<title>[S/W Architecture] Hierarchical Software Architecture</title>
<link>https://sonseungha.tistory.com/515</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Hierarchical Software Architecture, 한국어로 계층적 소프트웨어 아키텍처라 불리는 아키텍처에 대해 정리하겠습니다.&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Hierarchical Architecture는&amp;nbsp;전체 시스템을 계층 구조적으로 나뉘어져 있으며 계층적으로 서로 다른 레벨의 서브시스템으로 구성되어 있습니다. Hierarchical Software Architecture는 매우 다양한 곳에서 사용되고 있습니다. 운영체제, 네트워크 프로토콜 계층들, 인터프리터, 그 외 다양한 곳에서 사용되고 있는데요, 이 아키텍처의 가장 대표적인 구조로서 여러분들이 가장 많이 접해본 아키텍처의 한 예가&amp;nbsp;안드로이드 일 것 같습니다.&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://t1.daumcdn.net/cfile/tistory/9985F7365C9A34E51B' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://t1.daumcdn.net/cfile/tistory/9985F7365C9A34E51B' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F9985F7365C9A34E51B' width=&quot;500&quot; height=&quot;406&quot; style=&quot;width: 500px; height: 406px;&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위 안드로이드 아키텍처를 보시면 Applications, Application Framework, Libraries, Linux Kernel 까지 여러 개의 서브시스템이 계층적으로 구성되어 하나의 시스템을 이루고 있습니다. 각 서브시스템은 상위 시스템이 하위 시스템을 호출하는 구조, 즉 Call-and-Return 연결 구조를 가집니다. 서로 다른 계층 레벨들은 Method Invocation에 의해 연결되어 있으며 하위 레벨의 서브시스템이 상위 레벨 서브시스템에게 필요한 서비스를 제공하는 방식으로 구성됩니다.&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이런 Hierarchical Software Architecture 스타일을 가지는 여러 아키텍처들이 존재합니다. 각 아키텍처에 대해서는 다른 글로 다룰 예정이니 참고 바랍니다.&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;- Master - Slave Architecture&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;- Layered Architecture&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;- Virtual Machine Architecture&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;- Plug-in Architecture&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;- Micro-kernel Architecture&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Hierarchical Software Architecture를 적용하기 위해서 몇 가지 주의해야 할 부분들이 있습니다. 먼저, 계층을 나누는 기준이 명확해야 합니다. 각 계층은 하위 계층만을 의존해야 하며, 각 계층을 명확하고 특정적인 태스크를 처리하도록 분리해야 합니다. 다음으로 계층을 몇 개로 나눌지도 고민해야 합니다. 무조건 많거나 무조건 적다고 좋은 것이 아닌 본인이 설계하는 시스템에 가장 접합한 계층의 수를 정의해야합니다. 세 번째로 각 계층에 대한 인터페이스를 정의해야 합니다. 인터페이스를 잘 정의해야 계층의 수정사항이 발생하여도 다른 계층에 영향을 주지 않도록 정의되어야 합니다. 마지막으로 각 계층에서 발생한 에러를 어떻게 처리할 지 고민해야 합니다. 해당 에러를 그 계층에서 처리할 지 아니면, 상위 계층에게 전달할지에 대한 부분도 잘 정의해야합니다.&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Hierarchical Software Architecture에 대해 간단히 정리해 보았습니다. 감사합니다.&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;
&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Architecture</category>
<category>hierarchical</category>
<category>Hierarchy Architecture</category>
<category>layered</category>
<category>Master-Slave</category>
<category>MicroKernel</category>
<category>Plug-In</category>
<category>software</category>
<category>virtual machine</category>
<category>계층구조적</category>
<category>아키텍처</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/515</guid>
<comments>https://sonseungha.tistory.com/515#entry515comment</comments>
<pubDate>Tue, 26 Mar 2019 23:55:35 +0900</pubDate>
</item>
<item>
<title>[S/W Architecture] Process Control Architecture</title>
<link>https://sonseungha.tistory.com/512</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;Process Control Architecture는 Data Flow Architecture 분류에 속하는 아키텍처입니다. 해당 분류에 속하는 아키텍처는 이전에 다뤘던 Batch Sequential, Pipe and Filter Architecture가 있습니다. 자세한 내용은 아래 링크 참고 부탁드립니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://sonseungha.tistory.com/507&quot; target=&quot;_blank&quot;&gt;2019/03/10 - [Developer's Delight/Software Architecture] - [S/W Architecture] Data Flow Software Architectures&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://sonseungha.tistory.com/508&quot; target=&quot;_blank&quot;&gt;2019/03/10 - [Developer's Delight/Software Architecture] - [S/W Architecture] Batch Sequential Architecture&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://sonseungha.tistory.com/510&quot; target=&quot;_blank&quot;&gt;2019/03/14 - [Developer's Delight/Software Architecture] - [S/W Architecture] Pipe and Filter Architecture&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Process Control Architecture에 대해 간략히 정리해보겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Process Control의 가장 큰 특징은 데이터의 흐름이 프로세스의 실행을 제어하는 변수 집합이라는 것입니다. 한 번에 이해하기 어려운 말인 것 같습니다. 좀 더 살펴보겠습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Process Control Architecture는 임베디드 시스템에서 많이 사용됩니다. 시스템이 프로세스를 제어할 수 있는 변수에 의해 조작되는 시스템에 알맞는 아키텍처입니다. 많은 임베디드 시스템은 연속적으로 동작해야 합니다. 안정된 상태에 대한 출력 데이터를 유지하는게 가장 중요한 시스템입니다. 예를 들어 크루즈나 화장실 변기를 많이 예시로 듭니다. 화장실 변기 물을 내리면 다시 물이 차오릅니다. 그 때 차오르는 물의 높이는 항상 일정합니다. 이러한 시스템은 물의 높이 즉 출력 데이터를 안정화 시키기 위해 프로세스가 데이터를 제어하게 되는 구조가 됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;해당 시스템을 구성하는 몇 개의 서브시스템이 있는데 각 서브시스템은 아래와 같습니다.&lt;/p&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;ul style=&quot;list-style-type: square;&quot;&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Controlled Variable :&amp;nbsp;기본 시스템에 대한 값을 제공하며 센서에 의해 측정되어지는 값&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Input Variable :&amp;nbsp;프로세스에 대한 입력 값&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Manipulated Variable :&amp;nbsp;컨트롤러에 의해 조정되거나 변경되는 값&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Process :&amp;nbsp;변수를 조작하기 위한 메커니즘&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Sensor :&amp;nbsp;시스템 제어와 같련된 변수의 값을 구하며 조작된 변수를 재계산 하기 위한 피드백으로 사용&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Set Point :&amp;nbsp;이 값은 제어된 변수에 대한 원하는 값&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;Control Algorithm :&amp;nbsp;프로세스 변수 조작 방법을 결정하는데 사용함&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:577px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F9913CF335C924CC920F84C&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9913CF335C924CC920&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2019-03-20 23-22-50.png&quot; height=&quot;437&quot; width=&quot;577&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(140, 140, 140);&quot;&gt;출처 : &lt;/span&gt;&lt;span style=&quot;font-size: 10pt; color: rgb(140, 140, 140);&quot;&gt;https://www.cs.cmu.edu/afs/cs/project/tinker-arch/www/html/Tutorial_Slides/Soft_Arch/base.097.html&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;위 그림은 Cruise Control 시스템의 예제입니다. 자동차의 크루즈 모드는 일정한 속도를 유지하기 위한 시스템입니다. 원하는 속도가 입력 값이 되고 컨트롤러에 의해 Throttle이 설정됩니다. 해당 Throttle은 엔진을 동작하게 만들고 엔진은 바퀴를 회전시킵니다. 바퀴의 회전은 센서에 의해 측정되고 Controller에게 전달됩니다. Controller는 Desired Speed에 도달할 때 까지 지속적으로 Throttle을 설정하게됩니다.&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;위 와 같은 시스템이 Process Control Architecture를 적용한 시스템이라고 보시면 됩니다. 바퀴의 회전을 센서로 다시 컨트롤러에게 전달되는데요, 이처럼 출력 데이터가 다시 컨트롤러의 입력으로 전달되어 Close-loop 형태를 뛰는 구조들이 있습니다. 만약 출력 데이터가 다시 피드백 되지 않는다면 Open-loop 형태라고 합니다. Close-loop Feedback은 Open-loop보다 출력 데이터를 제어하는데 훨씬 좋은 구조라는 것을 알 수 있을겁니다.&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;이상으로 Process Control Architecture에 대해 정리해보았습니다.&lt;/div&gt;&lt;div style=&quot;line-height: 2;&quot;&gt;감사합니다.&lt;/div&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Close-loop Feedback</category>
<category>Process Control Architecture</category>
<category>S/W Architecture</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/512</guid>
<comments>https://sonseungha.tistory.com/512#entry512comment</comments>
<pubDate>Wed, 20 Mar 2019 23:28:55 +0900</pubDate>
</item>
<item>
<title>[Python] 문자열에 문자열 리스트의 요소가 포함되어 있는지 찾기</title>
<link>https://sonseungha.tistory.com/511</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;많은 사람들이 문자열에 특정 문자열이 존재하는지, 또는 문자열 리스트에서 특정 문자열이 존재하는지를 많이 확인합니다. 이번에는 문자열에 문자열 리스트의 요소가 포함되어 있는지 찾는 방법에 대해 알아 보겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;아래와 같은 문자열 리스트&amp;nbsp;이 있다고 가정합시다. 그리고 해당 리스트의 요소가 특정 문자열 내에 포함되는지를 알고 싶습니다. 가장 단순하게 생각했을 때 아래와 같이 찾을 수 있을 것 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;file_format&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;[&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'son'&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'seungha'&lt;/span&gt;&amp;nbsp;]&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;file_name&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'My&amp;nbsp;name&amp;nbsp;is&amp;nbsp;seungha'&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;file_format:&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;file_name:&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;)&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;python의 any method를 사용하면 다른 방식으로 문제를 해결할 수 있습니다.&lt;/div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;file_format&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;[&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'son'&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'seungha'&lt;/span&gt;&amp;nbsp;]&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;file_name&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#63a35c&quot;&gt;'My&amp;nbsp;name&amp;nbsp;is&amp;nbsp;seungha'&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;any(&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;file_name&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;file_format):&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color:#066de2&quot;&gt;format&lt;/span&gt;)&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;p&gt;&lt;span style=&quot;color: white; font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;cs&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;두 개의 코드는 동일한 동작을 합니다. any의 동작은 검색해 보시면 많이 나오니 참고 부탁드립니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;감사합니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Python</category>
<category>any</category>
<category>python</category>
<category>문자열에 리스트 요소 찾기</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/511</guid>
<comments>https://sonseungha.tistory.com/511#entry511comment</comments>
<pubDate>Wed, 20 Mar 2019 20:14:35 +0900</pubDate>
</item>
<item>
<title>[S/W Architecture] Pipe and Filter Architecture</title>
<link>https://sonseungha.tistory.com/510</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Data flow Architecture에는 Batch Sequential, Pipe and Filter, Process Control Architecture 로 3가지로 분류할 수 있습니다. 그 중 Pipe and Filter Architecture에 대해 정리해보려 합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Pipe and Filter Architecture는 데이트 스트림을 처리하는&amp;nbsp;시스템을 위한 구조를 제공합니다. 데이터를 처리하는 각 프로세싱 단계는 Filter 컴포넌트 내부에 포함되어 있습니다. 데이터는 Filter 사이를 Pipe를 통해 전달되게됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;width: 600px; height: 75px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile2.uf.tistory.com%2Fimage%2F99545C3F5C89238C0A5135&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99545C3F5C89238C0A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;캡처.PNG&quot; height=&quot;75&quot; original=&quot;yes&quot; style=&quot;width: 600px; height: 75px;&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이러한 구조로 인해 Pipe and Filter Architecture는 Batch Sequential Architecture와 많이 비교됩니다. Batch Sequential Architecture에 대해에서는 아래 글을 참조해주세요.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://sonseungha.tistory.com/508&quot; target=&quot;_blank&quot;&gt;2019/03/10 - [Developer's Delight/Software Architecture] - [S/W Architecture] Batch Sequential Architecture&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Pipe and Filter 구조의 구성요소는 크게 3가지 입니다. 데이터 스트림, 필터, 그리고 파이프입니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;데이터 스트림은 XML이나 Json 파이트 스트림 등 first-in / first-out 버퍼를 가지고 있습니다. 특정 시스템에서는 마샬링, 언마샬링도 사용합니다. 다음 구성요소인 필터는 Pipe and Filter Architecture에서 독립적으로 데이터 스트림을 처리하는 구성요소입니다. 입력 데이터 스트림으로부터 데이터를 읽고, 읽어들인 데이터를 처리한 후 다음 필터로 전달하도록 파이프로 데이터를 전달합니다. Pipe and Filter는 데이터가 연결된 파이프를 통해 전달되면 그 즉시 처리를 하고 다음 필터로 전달합니다. 필터를 독립적으로 동작하므로 시스템에서 자유롭게 교체 및 추가가 가능합니다. 여기서 필터는 2가지 타입으로 다시 분류할 수 있습니다. Active(능동형) 필터와 Passive(수동형) 필터입니다. 먼저 능동형 필터는 데이터를 가져오고 전달하는 것을 필터에서 처리하고 수동형 필터는 파이프가 필터로부터 데이터를 가져오고, 다음 필터로 전달합니다. 즉 능동형 필터는 수동형 파이프와 함께 동작하고 수동형 필터는 능동형 파이프와 함께 동작합니다. 마지막 구성요소인&amp;nbsp;파이프는 필터 사이에 데이터 스트림을 이동하는 경로입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Pipe and Filter 구조는 리눅스 사용자라면 많이 사용하는 파이프를 생각하시면 편합니다.&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;$cat example.txt | grep 'test'&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;위와 같은 예제는 쉽게 이해할 수 있습니다. cat을 이용해 example.txt 내부 문자열들을 파이프를 통해 grep에게 전달되고 처리하게 됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이러한 Pipe and Filter Architecture의 장점은 Concurrency(동시성), Reusability(재사용), Modifiability(변경용이성), Simplicity(단순성), Flexibility(유연함)입니다. Concurrency는 과도한 데이터 처리에 대해 각 필터가 독립적으로 동작하여 높은 처리량을 얻을 수 있습니다. Reusability는 각 필터가 독립적으로 동작되며 다른 필터와의 종속성이 없으므로 각 필터를 다른 시스템에 재사용이 가능합니다.&amp;nbsp;Modifiability는 필터 간 종속성이 낮기에 새로운 필터를 추가하거나 수정, 제거했을때에도 시스템에 다른 수정을 최소화 할 수 있습니다. 두 필터 사이의 파이프가 존재한다는 매우 단순한 구조를 가지고 있으며 각 해당 시스템의 데이터를 Sequential하게 Parallel하게 수행이 가능함으로 유연한 구조를 만들 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;하지만, Pipe and Filter 구조에도 여러 단점이 있습니다. 데이터 스트림 형태가 고정된 형태의 구조이기에 동적으로 데이터 포맷을 변경하는 구조에는 알맞지 않습니다. 만약 A 필터로 이미지가 입력되었는데 출력으로는 XML 포맷으로 출력하고 B 필터는 XML을 입력받아 Character Stream으로 출력한다면, 이 구조의 장점인 변경용이성, 유연함을 잃어버리게 됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이런 장점과 단점을 이해하고 정확하게 필요한 곳에 구조를 적용하는 연습이 필요할 것 같습니다. 마지막으로 많이 비교되는 Batch Sequential Architecture와의 차이점을 정리하고 글을 끝맺겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;Batch Sequential 과의 차이점&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위에서 정리한 내용을 보면 Batch Sequential Architecture와 매우 유사해 보이지만 큰 차이점을 가지고 있습니다. Batch Sequential은 데이터가 처리되고 다음 데이터 처리 단계로 넘어가기 위해선 이전 데이터 처리가 모두 완료되어야 합니다. 즉 A에서 B 처리 단계로 데이터가 전달되기 위해선 모든 데이터가 A처리가 완료된 이후 B로 입력됩니다. 하지만 Pipe And Filter Architecture는 데이터 스트림 처리를 위한 구조로서 A 단계에서 모든 데이터가 처리되고 B의 입력이 되는 것이 아닌 A 단계에서 먼저 처리된 데이터는 바로 B의 입력으로 Pipe를 통해 전달됩니다. 100개의 데이터가 있을 때 Batch Sequential은 100개가 모두 처리된 이후 다음 스텝으로 입력되지만, Pipe And Filter는 100개 중 처리된 데이터는 B로 전달됩니다. 이 점이 가장 큰 차이입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;감사합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Data flow architecture</category>
<category>Filter</category>
<category>pipe</category>
<category>pipe and filter</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/510</guid>
<comments>https://sonseungha.tistory.com/510#entry510comment</comments>
<pubDate>Thu, 14 Mar 2019 00:27:29 +0900</pubDate>
</item>
<item>
<title>[python] isinstance</title>
<link>https://sonseungha.tistory.com/509</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;isinstance() 의 설명은 아래와 같습니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;Return whether an object is an instance of a class or of a subclass thereof.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;A tuple, as in isinstance(x, (A, B, ...)), may be given as the target to check against. This is equivalent to isinstance(x, A) or isinstance(x, B) or ... etc.&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;해석하면 객체&lt;/span&gt;&lt;span style=&quot;font-family: Helvetica, &amp;quot;Apple SD Gothic Neo&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;가 클래스의 인스턴스인지 하위 클래스의 인스턴스인지 여부를 반환합니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;font face=&quot;Helvetica, Apple SD Gothic Neo, sans-serif&quot;&gt;&lt;br /&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;font face=&quot;Helvetica, Apple SD Gothic Neo, sans-serif&quot;&gt;예를 들어 아래와 같이&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;font face=&quot;Helvetica, Apple SD Gothic Neo, sans-serif&quot;&gt;isinstance(1, int) 라는 코드는 True를 반환합니다.&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;font face=&quot;Helvetica, Apple SD Gothic Neo, sans-serif&quot;&gt;isinstance(1.4, string) 이라는 코드는 False를 반환합니다.&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;test = Test()&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;isinstance(test, Test) 는 True입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;사용법은 간단하니 다양하게 사용할 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Python</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/509</guid>
<comments>https://sonseungha.tistory.com/509#entry509comment</comments>
<pubDate>Tue, 12 Mar 2019 16:28:35 +0900</pubDate>
</item>
<item>
<title>[S/W Architecture] Batch Sequential Architecture</title>
<link>https://sonseungha.tistory.com/508</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Batch Sequential Architecture에 대해 정리해보겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Batch Sequential Architecture는 이전 글에서 정리한 Data Flow Software Architecture 중 하나입니다. 참고가 필요하신 분은 해당 글을 확인해주세요.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://sonseungha.tistory.com/507&quot; target=&quot;_blank&quot;&gt;2019/03/10 - [Developer's Delight/Software Architecture] - [S/W Architecture] Data Flow Software Architectures&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Batch Sequential Architecture는 1950~70년대에 많이 사용된 데이터 처리 모델입니다. 데이터는 하나의 서브시스템에서 다음 서브시스템으로 데이터로 전달됩니다. 각 데이터 전송 서브시스템 또는 모듈은 이전 서브시스템의 데이터 처리가 끝나기 전에는 스스로 시작할 수 없습니다. 정리하자만 A-B 로 연결된 Batch Sequential Architecture에서 B는 A가 모든 데이터 처리를 완료한 후 결과 데이터가 출력되기 전까지 스스로 독립적으로 시작할 수 없습니다. 데이터를 분리해 중간중간 처리가 아닌 하나의 서브시스템이 데이터를 처리한 전체 결과를 출력해야만 다음 서브시스템이 시작할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Batch Sequential Architecture를 구성하는 컴포넌트는 Program과 Data store입니다. 각 프로그램의 연결은 단방향 파이프로써 데이터 셋을 전달합니다. 아래와 같은 형태로 Batch Sequential Architecture가 구성됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;입력 =&amp;gt; FILTER -&amp;gt; FILTER -&amp;gt; FILTER -&amp;gt; FILTER -&amp;gt; FILTER =&amp;gt; 출력&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Batch Sequential Architecture는 서브시스템들이 단순하게 분리되어 있고 입력 데이터와 출력 데이터에 맞춘 서브시스템의 교체도 가능합니다. 서브시스템간 연결은 오직 데이터 이므로 데이터만 맞추면 된됩니다. 하지만 외부에서 서브시스템을 제어하기 위한 구현에서는 부적합하며 인터렉션을 위한 인터페이스를 제공할 수가 없다. 오직 데이터만이 입력과 출력이기 때문입니다. 또한 동시성을 지원하지 않기 때문에 낮은 성능과 높은 Latency를 가지는게 이 아키텍처의 한계입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이상 Batch Sequential Architecture에 대해 정리해보았습니다. 감사합니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/508</guid>
<comments>https://sonseungha.tistory.com/508#entry508comment</comments>
<pubDate>Sun, 10 Mar 2019 20:20:20 +0900</pubDate>
</item>
<item>
<title>[S/W Architecture] Data Flow Software Architectures</title>
<link>https://sonseungha.tistory.com/507</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;Data Flow Software Architecture에 대해 정리해보고, 해당 아키텍처에 속하는 이키텍처들을 정리해 보려합니다. 주제에서 알 수 있듯이 데이터의 흐름에 대한 소프트웨어 아키텍처입니다.&amp;nbsp;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Data Flow Software Architecture는&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;전체 소프트웨어 시스템을 연속적인 데이터 집합에 대한 일련의 변환&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;으로 봅니다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;소프트웨어 시스템은 데이터가 데이터 연산 처리 순서를 지시하고 제어하는 데이터 처리 요소로 분리 될 수 있습니다. 각 컴포넌트는 입력으로 데이터를 받고, 출력으로 연산된 데이터를 출력합니다. 이렇게 출력된 연산 데이터는 다음 컴포넌트의 입력이 됩니다. 이 부분이 Data Flow Software Architecture 들의 가장 큰 특징입니다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;데이터를 처리하는 각 서브시스템 컴포넌트들 사이의 연결은 I/O 스트림, I/O 파일, 버퍼나 파이프등 다양한 방법이 있습니다. 이 아키텍처에서 트리 구조에서는 사이클이 없는&amp;nbsp;선형적인 구조를 가지고 있으며, 그래프 토폴로지와 같은 데이터 흐름에서는 사이클이 발생할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;Data Flow Software Architecture에 속하는 대표적인 구조 3가지는 아래와 같습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; Batch Sequential Architecture&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; Pipe and Filter Architecture&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; Process Control Architecture&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;Data Flow Software Architecture의 장점은 변경용이성과 재사용성입니다. 서브시스템은 서로간 독립적으로 구성되어 있습니다. 각 서브시스템은 서로간의 어떠한 영향없이 새로운 서브시스템으로 교체가 가능하며 중간에 새로운 서브시스템의 추가도 쉽기 때문에 아키텍처의 변경이 용이하고 각 서브시스템은 다른 아키텍처에서 재사용이 쉽습니다. 한 가지 유의점은 서브시스템 추가 시 출력되는 데이터 형태가 다음 서브시스템의 입력과 일치해야 합니다. A에서 B 모듈로 파일을 이용해 입출력을 하는 아키텍처에서 중간에 S 서브시스템을 추가한다고 합시다. 이때 S 서브시스템의 출력은 파일이 아니라 Buffer 형태를 사용한다면 추가가 불가능 합니다. 이런 점은 유의해야 합니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;위와 같은 특징을 생각했을 때 전통적인 절차지향적 구조라는 생각이 듭니다. Data Flow Software Architecture는 컴파일러나 Batch 데이터 처리 등에서 많이 사용합니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;다음 글에서 Batch Sequential, Pipe and Filter, Process Control을 순서대로 정리해보겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;감사합니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>archtecture</category>
<category>batch sequential</category>
<category>data</category>
<category>data flow</category>
<category>pipe and filter</category>
<category>process control</category>
<category>software architecture</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/507</guid>
<comments>https://sonseungha.tistory.com/507#entry507comment</comments>
<pubDate>Sun, 10 Mar 2019 19:42:32 +0900</pubDate>
</item>
<item>
<title>[Requirements Engineering]  #3 Feasibility</title>
<link>https://sonseungha.tistory.com/505</link>
<description>&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;Feasibility Study&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Why a Feasibility Study?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;Feasibility(실행가능성)는 시스템 개발 프로젝트를 할 수 있는지 없는지는 판단하기 위함입니다. 프로젝트 시작 전 이 프로젝트를 우리가 할 수 있는가? 다른 가능한 대안이 있는가?에 대해 질문을 던지는 것입니다. 위 질문을 답하기 위해 충분한 정보를 수집하여 알고있어야 합니다. Feasibility Study 이후에 이 프로젝트의 START/STOP 여부를 결정하게 됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Content of Feasibility Study(실행가능성 판단을 위한 컨텐츠)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;Feasibility 판단을 위해 파악해야 할 항목은 여러 가지입니다. 항목은 아래 리스트를 참고하세요.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 존재하는 시스템들&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 현재 시스템의 문제&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 새로운 시스템을 위한 목표와 기타 요구사항&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 제한사항 : NFR 포함&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 가능한 대체방안 : 문제 해결을 위한 다른 방안&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;- 대체 방안의 강점과 약점&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Four Types of Feasibility&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;위 4가지 항목이 Feasibility를 확인 시 확인해야 할 요소들 입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;b&gt;Technical feasibility&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;현재 기술로 이 프로젝트 진행이 가능한다. 기술적 위험은 무엇이 있는가 등을 파악합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;b&gt;Schdule feasibility&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;제 때에 솔루션 제공이 가능한가? 일정 지연에 영향을 미치는 요소는 무엇인가? 일정 상 어떤 제약사항이 있는가 등을 확인합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;b&gt;Economic feasibility&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;주어진 자원(예산 등) 제한 내에 프로젝트 진행이 가능한가? 프로젝트 진행 시 이익이 무엇인가? 등을 확인합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;b&gt;Operational feasibility&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;만약 시스템이 개발되었다고 가정하에 사용자들이 사용할 것인가? 사회적, 인간적 문제들을 파악해야 합니다. 관리적인 측면이나 사회적으로 받아들일 수 있는 프로젝트인지, 법적인 문제는 없는지 등을 확인합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;Feasibility는 프로젝트를 시작하기 전 진행을 할지 말지에 대한 여부를 결정하기에 중요한 단계 중 하나입니다. 꼭 필요한 정보를 충분히 수집한 이유 검토가 필요함을 명심하시면 좋을 것 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;감사합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Feasibility</category>
<category>re</category>
<category>Requirements Engineering</category>
<category>요구공학</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/505</guid>
<comments>https://sonseungha.tistory.com/505#entry505comment</comments>
<pubDate>Fri, 11 Jan 2019 09:27:33 +0900</pubDate>
</item>
<item>
<title>[Requirements Engineering]  #1 Overview</title>
<link>https://sonseungha.tistory.com/503</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;시스템 아키텍쳐에서 필수적인 것이 무엇을 설계할 것인가 입니다. 막연히 뭘 설계 개발해야할지 모르는 상황에서 컴퓨터 앞에 앉는 행위는&amp;nbsp;어리석은 행동입니다. 클라이언트가 어떠한 것을 요청하는지 파악해야 설계를 할 수 있습니다. 아래는 많이 보셨을 그림입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;width: 400px; height: 1112px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F9985CB435C35FCD21BC963&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9985CB435C35FCD21B&quot; filemime=&quot;image/gif&quot; filename=&quot;나무_그네_그림.gif&quot; height=&quot;1112&quot; original=&quot;yes&quot; style=&quot;width: 400px; height: 1112px;&quot; width=&quot;400&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;고객이 설명한 것을 시스템에 관련된 이해관계자들이 이해하고 만들어나가는 과정입니다. 실제로 고객이 원하는건 나무에 타이어 하나 매달아 그네를 쓰고자 했는데 결과물은 전혀 다른 것이 나왔습니다. 이 그림은 시스템 개발 시 발생할 수 있는 문제를 웃음으로 승화시킨 그림인데요, 정말 웃고 지나갈만한 일일까요? 위와 같은 문제는 자주 발생할 수 있습니다. 이러한 문제를 방지하고 영향을 최소화 하기위해 요구공학이란 학문이 존재합니다.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;실제로 클라이언트와의 미팅 이후 요구사항 분석, 설계, 구현, 테스트 등을 진행하다 보면 문제가 발생할 수 있습니다. 여러분이 구현 후 테스트하는 단계에서 문제를 발견하였다고 합시다. 해당 문제가 발생한 부분이 구현 시 발생한 것과 아니면 클라이언트의 요구사항을 잘못 분석한 문제라고 할 때 어떤 문제가 에러 수정에 큰 비용이 들어갈까요? 당연히 클라이언트의 요구사항을 잘못 분석한 문제가 매우 큰 영향을 끼치게됩니다. 잘못하게되면 설계 자체를 수정해야하는 문제가 발생할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;1-10-100 Rule&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;1-10-100 Rule 이란 것이 있습니다. 프로젝트에서 발견하지 못한 에러를 수정하는 드는 비용에 관련된 것입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;table class=&quot;txc-table&quot; width=&quot;824&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot; style=&quot;border:none;border-collapse:collapse;;font-family:&quot; 맑은=&quot;&quot; 고딕&quot;,=&quot;&quot; sans-serif;font-size:16px&quot;=&quot;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0); background-color: rgb(230, 230, 230); color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Project Stage&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-top: 1px solid rgb(0, 0, 0); background-color: rgb(230, 230, 230); color: rgb(0, 0, 0);&quot;&gt;&lt;p&gt;Relative Repair Cost&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Requirements Analysis&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;1-2&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Design&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;5&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Coding&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;10&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Unit Testing&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;20&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;System Testing&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;50&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); border-left: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;Maintenance&lt;/p&gt;&lt;/td&gt;
&lt;td style=&quot;width: 412px; height: 24px; border-bottom: 1px solid rgb(0, 0, 0); border-right: 1px solid rgb(0, 0, 0); background-color: transparent; color: rgb(0, 0, 0);&quot;&gt;&lt;p style=&quot;text-align: center;&quot;&gt;200&amp;nbsp;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;&lt;/table&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Requirements Analysis 단계의 문제를 늦게 발견하면 할수록 그 문제를 해결하기 위해 필요한 비용이 매우 크다는 것을 알 수 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;Requirements Engineering&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위와 같은 문제를 해결하기 위해 요구공학 이란 학문이 존재하는 것을 알게되었습니다. 그럼 이 학문이 정확히 무엇인지 정리해보고자 합니다. 먼저 위키피디아에 요구공학은 아래와 같이 정의되어 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); padding: 10px; text-align: justify;&quot;&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;Apple SD Gothic Neo&amp;quot;, arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;요구공학&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;b style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;Apple SD Gothic Neo&amp;quot;, arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;Requirements engineering&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-size: 12pt;&quot;&gt;, RE)은 시스템&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;Apple SD Gothic Neo&amp;quot;, arial, sans-serif;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;요구&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-size: 12pt;&quot;&gt;사항 문서를 생성, 검증, 관리하기 위하여 수행되는 구조화된 활동의 집합이다.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt; text-align: start;&quot;&gt;요구사항 엔지니어링은 소프트웨어 집약적 시스템의 목적 및 이 시스템이 사용될 맥락을 식별하고 전달하는 것과 관련된 일련의 활동입니다. 따라서, 요구공학 (이하 RE)는 사용자, 고객 및 소프트웨어 시스템의 영향을 받는 기타 요소의 실제 요구와 소프트웨어 집약적 기술이 제공하는 능력과 기회 사이의 다리 역할을 합니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;쉽게 설명하면 RE는 시스템에서&amp;nbsp;고객의 요구하는 서비스와 이 시스템을 개발함에 있어서 존재하는 제한사항을 찾아내는 절차입니다. 요구공학에서 말하는 요구(Requirements)는 요구공학 절차 시 생성되는 서비스와 제한사항의 명세라고 생각하시면 됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;요구사항 분석(Requirements Analysts)&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;그럼 요구사항 분석을 무엇을 하는 걸까요, 요구사항 분석은 &lt;b&gt;문제&lt;/b&gt;와 그 문제를 해결하기 위한 &lt;b&gt;해결책&lt;/b&gt;을 찾는것입니다. 실제로 이 프로젝트를 진행할지에 대한 분석부터 시작하여 이해관계자 정의와 클라이언트는 왜 이 문제 해결을 원하는가, 어떻게 소프트웨어 시스템으로 문제 해결에 도움을 줄 수 있는가 등 여러가지 관점으로 접근하게 됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;RE는&amp;nbsp;무조건 Sequential하게&amp;nbsp;프로세스를 진행할 필요는 없습니다. RE 활동은 개발 프로세스에서 지속적으로 진행될수도 있습니다. 문제 상태는 항상 불완전합니다. 요구사항 분석은 추후에 발생할 위험을 줄이기 위함이지 완벽하게 문제 상황을 해결할 수 없을 수도 있습니다. 소프트웨어는 지속적으로 변경될 것이며 문제가 발생할 수 있습니다. 그러한 문제에 대해 조금이라도 줄이고자 하는 활동이 RE라고 생각하시면 될 것 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;감사합니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>re</category>
<category>Requirements Engineering</category>
<category>software architect</category>
<category>System Architect</category>
<category>요구공학</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/503</guid>
<comments>https://sonseungha.tistory.com/503#entry503comment</comments>
<pubDate>Wed, 09 Jan 2019 23:14:04 +0900</pubDate>
</item>
<item>
<title>[Design Pattern] Adapter Patter</title>
<link>https://sonseungha.tistory.com/502</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Adapter Pattern은 wrapper라고도 많이 불립니다. 어댑터라는 용어는 많이 들어보셨을 겁니다. '돼지코' 를 크게 예로 들 수 있을텐데요. 위키피디아에 설명된 정의는 아래와 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px; text-align: justify;&quot;&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b style=&quot;color: rgb(34, 34, 34); font-family: sans-serif; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;어댑터 패턴&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;(Adapter pattern)은&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%81%B4%EB%9E%98%EC%8A%A4&quot; class=&quot;mw-disambig&quot; title=&quot;클래스&quot; style=&quot;color: rgb(11, 0, 128); background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; font-family: sans-serif; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;클래스&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;의&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9A%A9%EC%9E%90_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; title=&quot;사용자 인터페이스&quot; style=&quot;color: rgb(11, 0, 128); background-image: none; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; font-family: sans-serif; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;인터페이스&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;color: rgb(34, 34, 34); font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;를 사용자가 기대하는 다른 인터페이스로 변환하는 패턴으로, 호환성이 없는 인터페이스 때문에 함께 동작할 수 없는 클래스들이 함께 작동하도록 해준다.&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Adapter 패턴은 기존에 지원하는 인터페이스 이외 다른 인터페이스 형태로 맞춰주기 위해 자주 사용됩니다. 클라이언트가 사용하는 타겟 인터페이스와 다른 인터페이스를 제공하는 모듈을 사용하고자 할 때 중간에 Adapter를 추가하여 기존에 사용하던 인터페이스와 동일한 형태로 제공받아 사용할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;클라이언트는 어댑터를 타겟 인터페이스를 사용하기 위해 어댑터의 메소드를 호출하는 방식으로 사용하고 어댑터는 하나 또는 그 이상의 메소드 콜을 이용해 클라이언트의 요청을 처리합니다. 클라이언트는 어댑터가 변환해준 결과를 받게되지만 내부에 대해선 전혀 알지 못합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;b&gt;Client -&amp;gt; Target Interface -&amp;gt; Adaptee Interface&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;다시 정리하면 어댑터 패턴은 클라이언트가 사용하려는 툴킷이나 라이브러리가 호환이 되지 않을 때나 라이브러리의 권한이 없어 수정할 수 없는 경우 어댑터 패턴을 사용하여 클라이언트에서 사용할 수 있습니다. 만약 라이브러리 수정 권한이 주어져있다고하여도 안정화된 라이브러리에 대해 코드 수정은 불필요하며 좋지 않은 결과를 야기시킬 수 있기에 어댑터 패턴을 사용합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;어댑터는 클래스 어댑터와 오브젝트 어댑터 두 부분으로 생각할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:474px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile2.uf.tistory.com%2Fimage%2F99129F3D5C34976A0E186C&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99129F3D5C34976A0E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Adapter1.png&quot; height=&quot;261&quot; style=&quot;&quot; width=&quot;474&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify; clear: none; float: none;&quot;&gt;위는 클래스 어댑터의 클래스 다이어그램입니다. 클래스 어댑터는 다중상속을 지원하는 언어에서 주로 사용하는데요, Adapter 클래스가 Target과 Adaptee 클래스를 모두 상속받고 있습니다. 그럼으로 타겟 인터페이스의 메소드를 Adapter 내에서 쉽게 구현할 수 있습니다.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:479px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F9933163D5C34976A091D11&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9933163D5C34976A09&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Adapter2.png&quot; height=&quot;260&quot; style=&quot;&quot; width=&quot;479&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위는 오브젝트 어댑터의 클래스 다이어그램입니다. Composition과 Delegation을 이용합니다. Adapter는 Target Interface를 Implements 하고 Adaptee에 대해 Composition 관계 가짐으로써 Adapter는 Adaptee에 대한 메소드 콜로 Wrapping됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;메소드 네임이나 아규먼트가 변경되는 수준은 매우 단순한 어댑터가 될 수 있지만, 그 외 복잡한 어댑터가 구현될 수 있습니다. 지금까지 말씀드린건 단방향의 어댑터인데요, 양방향의 복잡한 어댑터 구조도 충분히 가능합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;마지막으로 정리한다면 어댑터 패턴은 서로 상이한 인터페이스를 가진 클래스들이 서로 협력하지 못하고 한 쪽 클래스에 맞춰 변경이 어려운 경우 클라이언트가 중간에 어댑터를 둠으로써 쉽게 사용할 수 있도록 지원하는 것입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;감사합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>adapter pattern</category>
<category>Design Pattern</category>
<category>구조 패턴</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/502</guid>
<comments>https://sonseungha.tistory.com/502#entry502comment</comments>
<pubDate>Tue, 08 Jan 2019 21:34:44 +0900</pubDate>
</item>
<item>
<title>[Design Pattern] Decorator Pattern</title>
<link>https://sonseungha.tistory.com/501</link>
<description>&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Decorator Pattern의 SOLID의 OCP(Open Closed Principle)을 원칙으로 하는 Pattern입니다. Decorator Pattern은 예시로 바로 살펴보도록 하겠습니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;아래 UML을 보시면 음료를 상속받아&amp;nbsp;각 커피를 구현하고 있는 형태입니다. 이 구조를 Decorator Pattern이 접목되며 변화하는 과정을 살펴보려합니다. Beverage 추상클래스를 상속받아 각 커피 클래스 만들었습니다. 이제 판매만 하면 될까요?&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; line-height: 2; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:575px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile27.uf.tistory.com%2Fimage%2F99CFBE4C5C33362C1CC5B6&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99CFBE4C5C33362C1C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Descorator1.png&quot; height=&quot;294&quot; width=&quot;575&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;점점 고객들의 요구가 많아지고 있습니다. 우유를 추가해달라는 고객, 휘핑크림을 넣어달라는 고객 등 여러 요구사항에 맞춰주고 가격을 따로 받으려 합니다. 그럼 어떻게 해야하나요? 가장 단순한 방법은 아래와 같은 구조가 되는 것입니다. 아래 UML은 휘핑크림 추가에 대한 클래스들만 추가되었지만, WithMilk WithMilkAndWhip 등등의 클래스도 추가가 되어야 합니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; line-height: 2; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:672px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile5.uf.tistory.com%2Fimage%2F9960703F5C3338042A5C22&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9960703F5C3338042A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Decorator2.png&quot; height=&quot;414&quot; width=&quot;672&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;이런 방식으로 점점 추가되는 구조는 끔찍할 것 같습니다. 커피에 추가되는 첨가료를 더하거나 뺄때마다 경우의 수가 너무 많아집니다. 모든 커피를 Beverage 클래스에서 상속받아 구현하는 것 말고 다른 방법을 생각해봐야겠습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;아래는 다음 접근방법 입니다. Beverage 클래스에서 milk, soy, mocha, whip 데이터를 가지고있으며 has, setter 메소드를 지원합니다. cost() 메소드 내부에서 각 첨가물의 has 여부에 따라 cost가 누적될 것 입니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; line-height: 2; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:626px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile1.uf.tistory.com%2Fimage%2F99B5974F5C33391316225C&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99B5974F5C33391316&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Decorator3.png&quot; height=&quot;436&quot; width=&quot;626&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;코드로 구현하면 아래와 같은 형태가 되겠네요.&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;23&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;24&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;25&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;26&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;27&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;28&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;package&lt;/span&gt;&amp;nbsp;example.designpattern;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;*&amp;nbsp;Created&amp;nbsp;by&amp;nbsp;linuxias&amp;nbsp;on&amp;nbsp;19.&amp;nbsp;1.&amp;nbsp;7.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;&amp;nbsp;*/&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;class&lt;/span&gt;&amp;nbsp;Beverage&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;String&lt;/span&gt;&amp;nbsp;description;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;milk;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;soy;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;mocha;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;boolean&lt;/span&gt;&amp;nbsp;whip;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;float&lt;/span&gt;&amp;nbsp;cost()&amp;nbsp;{&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;float&lt;/span&gt;&amp;nbsp;condimentCost&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0099cc&quot;&gt;0.&lt;/span&gt;&lt;span style=&quot;color:#0099cc&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasMilk())&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condimentCost&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;milkCost;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasSoy())&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condimentCost&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;soyCost;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasMocha())&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condimentCost&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;mochaCost;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;if&lt;/span&gt;&amp;nbsp;(hasWhip())&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condimentCost&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;whipCost;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;return&lt;/span&gt;&amp;nbsp;condimentCost;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;}&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;위 코드의 문제점은 무엇일까요?&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; margin-left: 2em;&quot;&gt;1. 가격변화가 있을 때 Beverage class가 변경됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; margin-left: 2em;&quot;&gt;2. 새로운 첨가물이 추가됬을 경우에도 Beverage class가 수정됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; margin-left: 2em;&quot;&gt;3. 새로운 beverage가 milk, soy등이 필요없을 때 상속받는 건 문제가 있어보입니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; margin-left: 2em;&quot;&gt;4. 고객이 mocha를 두번 원할 때는 어떻게 해야할까요? 지금구조로는 불가능할 것 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Beverage Class는 많은 음료 클래스들이 상속받고 있는 슈퍼클래스로서 수정을 최소한으로 해야합니다. 만약 수정될 시 영향을 받는 클래스들이 매우 많아 전체 클래스를 다시 테스트해야 되는 불상사까지 발생할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Decorator Pattern 설명을 위해 도입부에 OCP에 대해 언급하였는데요, OCP를 다시 한번 정리하고 넘어가면 좋을 것 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px;&quot;&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;b&gt;Open Cloased Principle&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Classes should be open for extension, buf closed for modification.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Allow classes to be easily extended to incorporate new behavior without modifying existing code.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Caution : Don't try applying the Open-Cloased Principle to every signle case. Keep simple designs if possible!&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;위 원칙을 상기시키고 다시 구조를 생각해봅시다. Whip, Milk 등의 첨가물이 추가나 제거되어도 구조에 영향을 주지 않도록 하는 방법이 무엇이 있을까요?&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Decorator Pattern의 UML은 아래와 같습니다. Decorator 추상 클래스가 Component를 상속받고 있으면서도, Association관계를 가지고 있습니다. 만약 상속구조가 없으면 어떻게 될까요? 한번 생각해보시기 바랍니다. Composition 과 Delegation을 이용한 구조란 것만 이해하시면 좋을 것 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; line-height: 2; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:475px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile23.uf.tistory.com%2Fimage%2F999E84495C334B7B159F90&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/999E84495C334B7B15&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Decorator4.png&quot; height=&quot;325&quot; width=&quot;475&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Decorator Pattern과 유사한 패턴으로는 Adapter Pattern과 Proxy Pattern이 있습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Adaptor Pattern은 다른 인터페이스를 제공하는 패턴으로 클라이언트가 요구하는 타겟 인터페이스를 맞춰주고 서비스해주는 패턴입니다. Proxy 패턴은 Subject와 동일한 인터페이스를 제공합니다. Decorator 패턴은 향상된 인터페이스를 제공하게됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Decorator의 디자인 원칙은 OCP였습니다. Decorator의 중요한 메커니즘은 Composition과 Delegation이였던 것 기억나시나요?&amp;nbsp; Decorator패턴은 추가적인 책임을 동적으로 객체에 붙여줄 수 있으며 유연하고 확장적인 구조를 가질 수 있다는 장점이 있습니다. 그에 반해 단점은 Decorator 자체가 객체가 되기 때문에 무수히 많은 객체가 생성될 수 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Decorator pattern</category>
<category>Design Pattern</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/501</guid>
<comments>https://sonseungha.tistory.com/501#entry501comment</comments>
<pubDate>Mon, 07 Jan 2019 22:03:38 +0900</pubDate>
</item>
<item>
<title>[Design Pattern] Mediator Pattern</title>
<link>https://sonseungha.tistory.com/500</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Mediator Pattern의 목적은 명확합니다. 중간 관리자를 하나두어 문제를 해결하겠다는 것입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;서로 커뮤니케이션하고자하는 객체들이 있을 때&amp;nbsp;상호작용하려는 객체들의 집합의 구조가 복잡할 때 복잡성을 해소하면서 커뮤니케이션이 가능하도록 하는 목적의 패턴입니다. 매우 복잡한 커뮤니케이션 관계가 존재할 때 중앙집중적인 관리가 필요할 때 사용된다고 보시면 됩니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이러한 Mediator Pattern의 공항 관제탑을 생각하시면 좀 더 이해가 쉬울 것 같습니다. 인천공항에 이,착률 하려는 모든 항공사의 항공기간 서로 커뮤니케이션을 직접적으로 하는것이 아니라 중앙에 위치한 관제탑에서 정보를 수집하고 데이터를 전달함으로써 이,착륙 시 발생할 수 있는 많은 문제를 해결하고 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위 예시와 같이 Mediator Pattern 구조에서는 커뮤니케이션에 참여한 모든 객체간 직접적인 커뮤니케이션을 절대 발생하지 않는다는 것입니다. 만약 상호 커뮤니케이션이 직접 발생하게 된다면, Mediator Pattern의 장점이 사라지게 됩니다. 중간에 위치한 Mediator는 인터커넥션을 캡슐화하여 스스로 커뮤니케이션 허브역할을 합니다. 매우 복잡한 커뮤니케이션 플로우도 캡슐화 되어 외부로 오픈되지 않기때문에 커뮤니케이션 플로우를 이해하기 매우 쉽습니다. Mediator를 통해서 커뮤니케이션이 되는 것이기 때문입니다. 모든 커뮤니케이션 로직이 Mediator 내에 캡슐화 되기에 통신을 참여한 여러 객체간의 결합도를 매우 낮추게 됩니다. 이런 특징 때문에 GUI Component에서 많이 사용됩니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;단점으로는 Mediator Pattern의 경우 Mediator 자체의 재사용성이 매우 낮습니다. 복잡한 커뮤니케이션 로직을 Mediator가 떠안는 형태이기 때문에 특정 프로젝트에 사용한 Mediator를 다른 프로젝트에 재사용할 수 있는 확률은 매우 낮습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이 전에 살펴본 Observer Pattern 기억나시나요? Observer pattern도 Object들 간의 커뮤니케이션을 위한 구조였습니다. 두 패턴의 차이는 &lt;b&gt;명확&lt;/b&gt;합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;Observer Pattern&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Observer와 Subject 객체들로 커뮤니케이션이 분산되어 있으며 재사용성이 매우 높습니다. 하지만 커뮤니케이션 플로우를 이해하기 어렵다는 단점이 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;Mediator Pattern&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Mediator는 커뮤니케이션이 캡슐화되어 있습니다. Mediator가 모두 떠안는 구조이기에 재사용하기 어려우나 커뮤니케이션 플로우를 이해하기 매우 쉽습니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Design Pattern</category>
<category>mediator pattern</category>
<category>Observer Pattern</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/500</guid>
<comments>https://sonseungha.tistory.com/500#entry500comment</comments>
<pubDate>Mon, 07 Jan 2019 20:13:37 +0900</pubDate>
</item>
<item>
<title>[Design Pattern] Iterator Pattern</title>
<link>https://sonseungha.tistory.com/499</link>
<description>&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;Iterator Pattern&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Iterator Pattern은 여러 객체를 보관하고 있는 Aggregate Object가 있을 때 각 구성요소 하나 씩 방문하고자 할때 사용됩니다. 이 때 각 Element 내부를 접근하는 등의 표현은 외부로 노출되지 않습니다. 여기서 Aggregate Object에 대해 정리를 하자면 특정&amp;nbsp;객체를 하나의 단위로 그룹화 할 목적으로 다른 객체를&amp;nbsp;포함하는 객체를 입니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Iterator Pattern은 구성요소들의 순회가 필요하거나 순회를 위한 일관된 인터페이스가 필요할 때 사용합니다. 또한 전체&amp;nbsp;구성요소에 대해 모두 알 필요없이 각 구성요소에 접근하기 위해서 사용되기도 합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;'Head First Design Pattern' 도서에서 소개하고 있는 예시를 사용해 설명하려 합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Problem&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;&lt;/b&gt;마을에 인접한 두 식당이 하나로 합치기로 하였습니다. 각 식당의 사장님들은 메뉴의 통일성을 위해 메뉴판을 새로 작성하게 되었습니다. 메뉴판에는 메뉴의 이름, 설명, 채식자를 위한 식단인지, 가격을 포함시키기로 하였습니다. A식당은 지금까지 메뉴를 ArrayList를 이용하여 관리했으며 B 식당은 Array를 이용하여 관리하고 있었습니다. 메뉴에 포함될 내용만 통일하였지 각자 사용하던 방식은 그대로 유지하려 합니다. 이 때 새로이 고용된 웨이터는 각 메뉴를 알기 위해 ArrayList와 Array로 관리되던 각각의 메뉴를 모두 각 콜렉션의 형태를 익혀서 사용해야만 합니다. 위 상황에 대해서 처음 구현된 상황을 보시죠. 코드는&amp;nbsp;아래 URL에 있습니다.&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/linuxias/DesignPattern/tree/master/Iterator/Problem/src/example/designpattern&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;&quot;&gt;Iterator Problem&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;Main.java에도 명시해 놓았듯이 해당 프로젝트의 문제는 무엇인가요? 다시 정리해보겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;1. 이 프로젝트는 인터페이스로 구현되어 있지않습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;2. 만약 MenuItem을 관리하는 방식이 Array에서 HashTable 등으로 변경된다면 해당 수정이 웨이터에게 직접적인 영향을 줌으로서 문제가 발생합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;3. 메뉴를 출력하는 웨이터는 어떻게 각 메뉴를 보여줄 수 있을지 내부 콜렉션의 구조를 알아야 합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; margin-left: 2em;&quot;&gt;4. 중복된 코드들이 존재합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;위와 같은 문제들이 있습니다. 글의 처음에 설명드렸듯이 MenuItem이란 특정 객체를 출력하기 위해 순회하고자 합니다. 다시 한번 말씀드리면&amp;nbsp;&lt;span style=&quot;text-align: justify;&quot;&gt;Iterator Pattern은 구성요소들의 순회가 필요하거나 순회를 위한 일관된 인터페이스가 필요할 때 사용합니다. 또한 전체&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&amp;nbsp;구성요소에 대해 모두 알 필요없이 각 구성요소에 접근하기 위해서 사용되기도 합니다. 웨이터는&amp;nbsp;ArrayList, Array, HashTable 등 아무것도 관심없고 MenuItem만 알고 출력해 주고싶을 뿐입니다. 이런 경우 Iterator Pattern을 사용하면 구조를 개선할 수 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;아래 Iterator Pattern을 적용한 개선된 구조에 대한 코드입니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;b&gt;&lt;i&gt;&lt;a href=&quot;https://github.com/linuxias/DesignPattern/tree/master/Iterator/Solving/src/example/designpattern&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Iterator Solving&lt;/a&gt;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Iterator 인터페이스를 이용하였으며 각 식당은 자신에게 맞는 Iterator를 생성해서 웨이터에게 전달해줍니다. 웨이터는 Iterator 인터페이스만 알 뿐 이제 Array,&amp;nbsp;ArrayList 등에 대해 알 필요가 없어졌습니다. 만약 HashTable로 변경한다하여도 영향이 없습니다. 또한 순회도 가능하며 메뉴출력을 위한 중복된 코드도 제거되었습니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;Iterator 패턴에서 가장 중요하게 SRP(Single Responsibility Principle), 단일책임의 원칙입니다. 앞선 예제에서는 각 클래스가 Aggregate와 Iteration을 위한 2개의 책임을 가지고 있었다면 Iterator Solving 예제에선 각 책임을 분리함으로서 Cohesion을 높였습니다.&amp;nbsp;Java 언어에서는 내부적으로 Iterator 인터페이스를 제공하기에 해당 인터페이스를 사용하여 구현하여도 무방합니다. 이와 같은 디자인패턴은 정해진 것이 아니라 항상 변형가능하고 융통성있게 사용할 수 있어야 합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;지금까지 간략히 Iterator Pattern에 대해 정리하였습니다. 읽어주셔서 감사합니다.&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify; line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Design Pattern</category>
<category>iterator pattern</category>
<category>Single Responsibility Principle</category>
<category>SRP</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/499</guid>
<comments>https://sonseungha.tistory.com/499#entry499comment</comments>
<pubDate>Tue, 18 Dec 2018 22:45:56 +0900</pubDate>
</item>
<item>
<title>소프트웨어 설계의 부패</title>
<link>https://sonseungha.tistory.com/498</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;소프트웨어 설계는 무엇일까? 소스코드 작성하기 전 UML 다이어그램을 작성하는 것? 가끔 몇몇 개발자 분들과 이야기를 할 때 설계는 UML 다이어그램을 작성하는 것이라는 말을 듣는다. 그럼 설계는 UML 다이어그램과 동일 시 할 수 있는가에 대해서 고민해보면 그렇지 않다 라는 결론이 나올 수 있다. 다이어그램은 설계에서 부수적인 부분일 뿐 설계 그 자체가 될 수는 없다고 생각한다. 소프트웨어 설계는 매우 추상적인 것이라 생각한다. 사용자 요구사항부터 시나리오, 모듈, 클래스, 메소드와 더불어 어떠한 형태와 구조를 가질 것인지 프로그램 전체의 형태, 구조와도 관련이 있다고 생각한다.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;과거에 프로젝트를 개발할 때 가끔 머리속으로 설계에 대한 그림이 그려질 때가 있었다. 내 머리속에 들어있는 설계의 청사진이 옳다고 생각하고 한 번에 첫 번째 릴리즈까지 가능한 적이 있었다. 그 순간은 매우 뿌듯하고 기분 좋았으나 점차 내 머리속의 설계는 잘못되었고 설계가 부패한 고기처럼 썩어있다는 걸 확인할 수 있다. 외형적으로 매우 신선해보였으나 내부를 살펴보니 곪고 또 곪아서 어떻게 할 수가 없는 상태가 된 적도 있다. 재설계를 하려해도, 시간적 소모와 지속적인 사용자의 요구사항으로 인해 새로운 설계안도 설계와 동시에 썩어들어가는 기분을 느꼈다.&amp;nbsp;&amp;nbsp;그럼 언제 내 설계가 잘못되었는지 알 수 있는 방법이 없을까? 부패하고 있다는 느낌이 들때가 언제인지 고민을 하다 로버트 마틴의 '클린 소프트웨어' 란 도서에서 잘 정리해둔 것 같아 인용하여 정리해보려 한다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;지금부터 아래와 같은 조짐이 보이면 그 설계는 부패하고 있다고 판단할 수 있다. 누구나 알고있으면서 쉽게 놓치고 있는 부분이라 생각한다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;경직성&lt;/span&gt;&lt;/b&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;시스템의 변경이 어려운 상태이다. 변경을 하려보니 다른 여러 부분들까지 변경되어야 하는 구조이다. 단순한 방법으로 변경하려 해보지만 쉽게 변경이 어렵다. 즉 의존성으로 인해 하나의 변경이 의존된 다른 부분까지 모두 영향을 미치게 되는 형태이다. 이런 파급효과는 개발자를 지치게하고 이런 모듈의 변경사항이 많아질수록 설계는 유연성을 점점 잃어간다. 새로운 요구사항이 발생하였을 때 해당 요구사항에 대해 분석하고 추가, 수정의 범위 등 작업량을 산출해 내지만 실제 해당 작업을 하다보면 예상하지 못한 부분에서 변경이 필요한 부분이 있다는 것을 깨닫게 된다. 산출한 작업량보다 잘못하면 2, 3배 이상의 작업량 추정이 발생할 수 있다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;취약성&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;특정 부분 설계 변경 시 전혀 상관관계가 없는 부분까지 영향을 미쳐 망가지게 된다. 위의 경직성과 다르게 의존성이 없는데도 그러한 경우가 있다. 변경사항의 영향이 전혀 관계없는 부분까지 망가뜨리게 된다면 개발자는 어떠한 생각이 들까? 문제가 문제를 만들어내는 최악의 경우가 될 것이다. 어떤 모듈의 취약성이 점점 심해질수록 전혀 관계없는 부분에서 계속 문제가 발생하게 되고 그럴 가능성은 점점 커진다. 이슈는 계속 생기게되고 개발자는 지쳐간다. 개발자 중 이슈가 발생했을 때 '이 부분은 내가 수정한 부분이 아니에요, 내 이슈가 아니에요' 라고 말하는 개발자들이 가끔 있다. 안타까운 일이다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;부동성&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;움직이지 않는 컴포넌트, 음&amp;nbsp;움직일 수 없는 컴포넌트가 더 어울리는 말인 것 같다.&amp;nbsp;설계한 시스템에서 다른 시스템에서 재사용할 수 있는 부분은 재사용하는게 가장 좋다. 하지만 가끔 설계한 소프트웨어에서 재사용가능한 부분을 전혀 찾지 못하는 경우가 있다. 다른 시스템에서도 충분히 유용하게 사용할 수 있지만 분리해낼 수 없는 부분들, 분리해내려하면 많은 시간적 소모와 분리 시 발생할 수 있는 위험으로 인해 쉽게 설계를 변경할 수 없는 경우를 말한다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;점착성&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;점착성이란 간단히 말하면 다른 물질에 끈끈히 달라붙는 성질을 말한다. 설계에서 점착성은 소프트웨어의 점착성과 환경의 점착성이라는 2가지 형태로 나뉠 수 있다. 변경사항이 발생했을 때 개발자들은 변경할 수 있는 여러가지 방법들을 찾게된다. 설계가 유지된 형태일 수도 아닐수도 있다. 설계를 유지한 상태에서 변경하는 방법이 설계를 변경하는 방법보다 어렵다면 그 설계는 점착성이 매우 높은 것이다. 서로 간 너무 끈끈히 붙어있어 수정이 매우 어려운 상황이다. 환경의 점착성은 개발환경에서 비롯된다. 주변 개발환경으로 인해 좀 더 빠른 개발을 위해 설계를 변경하고 싶을 때가 있다. 하지만 설계의 유지는 생각치 않고 잘못된 유혹에 빠져 설계가 변경된다면 옳은 동작을 하지 못할 수도 있다. 개발환경의 개선이 설계까지 영향을 미치는 잘못된 상황을 말이다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;불필요한 복잡성&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;설계를 하다보면 직접적으로 전혀 쓸모없는 구조가 설계에 포함되어 있을 수 있다. 설계하는 과정에선 전혀 발견하지 못하다가 리뷰를 하다보면 그러한 경우를 발견을 할 때도 있고 소스코드 작성 중에 발견할 수 도 있다. 나중에 필요하겠지 란 생각으로 일단 설계해놓고 전혀 불필요한 구조가 들어가 있는 것은 복잡성만 증가시키는 행위이다. 개발자 스스로 미래의 발생할 수 있는 요구사항에 대해 너무 고민한 나머지, 오버엔지니어링을 발생시킬 수 있다. 처음엔 뿌듯할 수 있다. 나중에 이런 요구사항이 왔을 때 내 설계는 유지된 상태에서 제공을 할 수 있다고, 분명 그 말도 맞는 말이다. 미래의 변경을 대비할 수 있다면 설계의 유연성과 추후 변경사항을 방지해줄 수 있다. 하지만 예상했던 효과와 다른 악영향을 미칠 수도 있음을 항상 고려해야 한다. 지금 전혀 사용하지 않는 구조로 인해 설계는 점점 복잡해져가고 미래의 원하는 성과도 얻지 못할 수 있다. 그런 경우를 더 많이 보았다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;불필요한 반복&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;단일 추상 개념으로 통합할 수 있는 반복적인 구조가 설계에 포함되어 있다. 주변 개발자분들 중 가끔 필요한 내용을 Ctrl C + V를 이용해 붙여넣는 경우가 있다. 빠른 기능구현을 위해 '복붙'은 매우 유용하지만 사용할 때와 사용하지 말아야할 때를 인식해야 한다. 그렇게 붙여넣은 기능이 여러 곳일 때 문제 발생 시 모든 곳을 찾아다니며 수정하는 경우를 보았다. 리뷰 패치가 올라왔을 때 동일한 수정이 수 십 곳이 되는 경우도 있었다. 중복된 기능은 왜 계속 중복되는 꼭 복붙으로만 해결할 수 있는지에 대한 고민을 한번이라도 했으면 그런 구조는 나오지 않았을거란 아쉬움이 남는다. 적절한 추상화를 통해 반복되는 부분을 없애는 일은 최우선 순위는 아니지만 그 일을 행함으로서 매우 유지보수가 쉬운 소프트웨어 구조를 가질 수 있다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;불투명성&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;전혀 이해하기 어려운 애매모호한 구조가 있다. 어떠한 의도인지 이해가 쉽지 않은 구조들은 명료하지 않기에 더욱 변경사항에 유연하게 대처하기 어려운 경향이 있다. 처음엔 명료한 구조였지만 추후 점차 불투명성이 커지는 구조가 될 수도 있다. 지속적으로 명료한 구조를 가지기 위해 노력해야 한다. 시간이 지남에 따라 불투명성으로 인해 구조가 점점 부패해지는 경우를 막아야 할 것이다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;위와 같이 소프트웨어 설계가 썩어들어가는 여러 신호들이 있다. 이를 무시하지 말고 융통성있게 대처할 수 있어야 할 것 같다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;참고 : 로버트 C 마틴 | 클린 소프트웨어&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>설계</category>
<category>소프트웨어 아키텍쳐</category>
<category>클린 소프트웨어</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/498</guid>
<comments>https://sonseungha.tistory.com/498#entry498comment</comments>
<pubDate>Sun, 16 Dec 2018 15:54:05 +0900</pubDate>
</item>
<item>
<title>[Design Pattern] Template Method Pattern</title>
<link>https://sonseungha.tistory.com/497</link>
<description>&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;Template method pattern&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;어느 식당에 들어가서 주문을 하려합니다. 이 식당에는 음식을 세트로 판매하고 있습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;white-space: pre; font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;세트 = 밥 + 국 + 메인반찬 + 추가반찬&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;위와 같이 세트는 4가지 메뉴로 구성이 되어있습니다. 밥 과 추가반찬은 동일하며 각 세트마다 국과 메인반찬이 변경된다고 합시다.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;예를 들어 아래와 같이 세트들이 구성된다고 합시다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;white-space: pre; font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;제육세트 = 밥 + 된장국 + 제육볶음 + 추가반찬,&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;white-space: pre; font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;생선세트 = 밥 + 된장국 + 생선구이 + 추가반찬,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;white-space: pre; font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;해장세트 = 밥 + 콩나물해장국 + 해장에좋은반찬 + 추가반찬&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;여러분들이 각 세트를 선택함에 따라 국과 메인반찬이 변경됨을 알 수 있습니다.&lt;/span&gt;&lt;span style=&quot;white-space: pre; font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;	&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;위 상황을 여러분들이 디자인하고 구현한다고 생각해보시죠. 각 세트메뉴가 클래스가 되고&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;밥, 국, 메인반찬, 추가반찬을 위한 메소드를 모두 구현하면 될 것 같습니다.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;readySet() 라는 메소드를 만들어 그 내부에서 각 메뉴를 쟁반에 올려주면 되겠네요!&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;그럼 이번에 계절메뉴로 새로운 세트가 생겼다고 합시다. 또 밥, 국, 메안반찬, 추가반찬을 쟁반에 놓으면 되나요?&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;각 세트에서 변경없이 반복되는게 밥과 추가반찬인데요, 이 중복된 음식을 따로 분리해 내면 더 좋을 것 같습니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;아래 URL에 예제 (Problem / Solving) 이 있습니다. 해당 예제는 Head First Design Pattern 도서를 참고하였습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;https://github.com/linuxias/DesignPattern/tree/master/Template&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Template Pattern Example&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;Design Principle : Hollywood principle&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;em style=&quot;font-family: &amp;quot;Malgun Gothic&amp;quot;; font-size: medium;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&quot;Don't call us, we'll call you&quot;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;상위 모듈이 먼저 하위 모듈에게 연락하기 전에는 하위 모듈이 상위 모듈에게 연락하는 일이 없도록 해야한다는 의미입니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;Template method pattern은 Strategy pattern과 유사하여 자주 비교되곤 합니다.&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;원하는 것을 낮은 결합도(Loose coupling)로 변경할 수 있다는 장점과 알고리즘 군의 변경은 유사한데요,&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;Strategy pattern의 경우 전체 알고리즘을 변경하는 것이고, Template method pattern은&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;알고리즘 집합에서 내부의 몇몇 로직을 변경할 수 있다는 차이가 있을 뿐입니다. :D&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 12pt; font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;감사합니다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Software Architecture</category>
<category>Design Pattern</category>
<category>Template</category>
<category>template method</category>
<category>Template Pattern</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/497</guid>
<comments>https://sonseungha.tistory.com/497#entry497comment</comments>
<pubDate>Sat, 15 Dec 2018 17:34:33 +0900</pubDate>
</item>
<item>
<title>[inotify] inotify로 watch 중인 파일을 vi(vim)나 gedit으로 수정 시 문제</title>
<link>https://sonseungha.tistory.com/496</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;inotify API들을 이용해 파일이벤트들을 Watch 하는 과정에서 vi나 gedit으로 수정하면 IN_MODIFY 이벤트가 발생할 거라고 생각하시는 분들이 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;vim 또는 gedit은 swap 파일을 생성하고 수정 후 파일을 대체하는 방식으로 진행하기에 vi나 gedit으로 수정 시 IN_MODIFY가 아니라 IN_IGNORED 이벤트가 발생합니다. Manual page에서 확인 시 아래와 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px; line-height: 2;&quot;&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;IN_IGNORED&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;Watch &amp;nbsp;was &amp;nbsp;removed &amp;nbsp;explicitly &amp;nbsp;(inotify_rm_watch(2)) &amp;nbsp;or &amp;nbsp;automatically &amp;nbsp;(file &amp;nbsp;was &amp;nbsp;deleted, &amp;nbsp;or filesystem was&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;unmounted). &amp;nbsp;See also BUGS.&lt;/span&gt;&lt;span style=&quot;font-family: Menlo, Monaco, Consolas, monospace;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;이벤트를 확인하려는 파일이 만약 vim이나 gedit에서 수정이 된다면 IN_IGNORED 이벤트 발생 시 다시 inotify_add_watch()를 하시면 됩니다.&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>System Programming</category>
<category>gedit</category>
<category>inotify</category>
<category>inotify_add_watch</category>
<category>IN_IGNORED</category>
<category>Linux</category>
<category>SWAP</category>
<category>vim</category>
<category>watch 중인 파일 vim 으로 수정</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/496</guid>
<comments>https://sonseungha.tistory.com/496#entry496comment</comments>
<pubDate>Mon, 10 Dec 2018 15:12:10 +0900</pubDate>
</item>
<item>
<title>[정보보호개론] 웹 주요 취약점</title>
<link>https://sonseungha.tistory.com/495</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;국제웹보안표준기구에서는 각 분야별 주요 취약점들을 발표하고 있습니다. 그 중 몇 가지 리스트로 작성해보면 아래와 같습니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;1. Injection&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;클라이언트의 요청을 처리하기 위해 전달받은 인수에 특정 명령을 실행하는 코드를 포함시켜 공격하는 방법입니다. 이런 Injection 공격은 SQL, OS,&amp;nbsp;LDAP 등 웹을 통해 명령을 전달하는 어떠한 경우에도 적용될 수 있습니다. 이를 필터링 하는 방법등을 준비해 놓지 않는다면 문제가 발생할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;2. 인증 및 세션 관리 취약점 &lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;(Broken Authentication and Session Management&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;인증이나 세션 기능이 미흡하다면 공격자가 허가되지 않은 여러 서비스에 접근하고 사용할 수 있습니다. 가장 대표적인 문제로 패스워드 설정으로서 패스워드를 취약하게 설정한 경우입니다. 사용자 데이터를 이용한 인증 취약점의 경우 서버에서 로그인된 사용자를 인증하기 위한 값으로 쿠키와 같은 세션 값을 클라이언트에게 전달합니다. 이 때 공격자는 이 값을 이용해 연결하게 됨으로서 실제 사용자의 요청인지 공격자의 요청인지 구별하기 어렵습니다. 이런 문제는 최초 인증 후에는 인증과 신분 증명을 위한 역할을 클라이언트에게 위임했기에 발생하는 문제입니다. 서버가 통제해야 할 기능과 정보를 편의를 위해 클라이언트에게 전달함으로서 위험한 결과를 초래할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;3. XSS 취약점 (Cross-Site Scripting&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;XSS 취약점은 공격자가 작성한 악성 스크립트가 다른 사용자에게 서버를 통해 전달되는 것입니다. 다른 사용자들은 웹 브라우저 내에서 검증없이 해당 스크립트가 수행되므로 많은 문제를 야기할 수 있습니다. XSS 취약점이 존재하는 서버에 공격자가 스크립트를 작성하여 저장하게 됩니다. 해당 웹 서비스를 이용하는 사용자는 자신이 게시글의 글을 읽는 등의 활동을 하며 인지도 하지 못한 채 스크립트 코드에 접근하게 됩니다. 웹 서버는 요청에 의해 코드가 포함된 데이터를 사용자에게 전달하고 시스템에선 전달받은 스크립트를 수행하게 되는 것입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;4. 취약한 접근 제어 (Broken Access Control)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;인증된 사용자라 할지라도 접근하지 못하는 페이지들이 있습니다. 하지만 취약한 제어는 사용자가 접근할 수 없어야 하는 페이지도 접근할 수 있게 만드는 것입니다. 공격자는 이런 방법을 이용해 다양한 문제를 일으킬 수 있습니다. 권한 없는 기능을 사용할 수 있다는 것은 강력한 무기를 가지게 된것입니다. 관리자 페이지에 접근을 했는데 URL만 알고 있으면 접근이 가능하거나 관리자가 사용할 수 있는 모든 기능을 일반 사용자도 할 수 있는 등의 취약점입니다. 이러만 문제를 막기 위해 세션 값을 확인하는 방안이 필요합니다. 페이지 뿐만아니라 파일에도 적용됩니다. 웹 페이지 주소에서 확인 가능한 경로를 탐색하여 특정 파일을 다운로드 할 수도 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;5. 보안 설정 오류 (Security Misconfiguration)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;웹 브라우저에서 웹 서버의 특정 디렉토리에 접근하게 되면 모든 파일 리스트를 확인할 수 있는 경우가 있습니다. 관리자가 의도하는 경우도 있지만 대부분 관리자의 인지하지 못하여 발생하는 문제가 대다수입니다. 또한 개발자가 백업 파일이나 임시 파일을 삭제하지 않고 방치함으로써 내부 정보를 획득할 수도 있습니다. 미흡한 주석관리도 문제가 될 수 있습니다. 웹은 누구나 볼 수 있기에 주석에 주요 로직이나 구조, 데이터를 작성해 놓게 되면 문제가 발생할 수 있습니다. 웹 서버에 어떠한 파일이라도 업로드 할 수 있도록 방치하는 것도 공격자에게 공격을 위한 빌미를 제공하는 것입니다. 악성 파일을 전송하여 서버에서 실행하게 된다면 내부 침투가 가능하게 됩니다. 이런 악성 파일 업로드를 통해 리버스 텔넷 공격등도 가능해집니다. 대부분 서버는 텔넷등의 포트로 서버에 접속하지 못하도록 방화벽을 사용하는데, 인바운드만 신경쓰게 되고 아웃바운드에 대해선 인식이 미흡하다면 악성 프로그램 업로드로 서버에서 공격자에게 텔넷을 연결하도록 할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;6 민감한 데이터 노출 (Sensitive Data Exposure)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;사용자의 주요 정보를 암호화하지 않고 다룸으로서 데이터 유출 시 추가적인 문제가 발생할 수 있습니다. 정보를 서버-클라이언트 간 송수신하는 경우에도 암호화 알고리즘이 미흡한 경우에도 공격 대상이 될 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;7. 공격 방어 취약점 (Insufficient Attack Protection)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;웹 어플리케이션 레벨에서 기본적인 유효성 검사나 침입 탐지, 로깅, 공격 차단등의 로직을 포함해야 합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;8. &lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;CSRF 취약점 (Cross-Site Request Forgery)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;CSRF는 불특정 대상에게 공격자가 원하는 작업을 수용하도록 만드는 공격방법입니다. 은행을 이용하는 불특정 대상에서 자신도 모르는 사이 공격자에게 돈을 송금하는 등의 행위를 하게 합니다. 위에서 살펴본 XSS 공격과 매우 유사하지만 스크립트가 사용자가 아닌 서버에서 수행되도록 하는 구조적 차이가 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;9. 취약점이 있는 컴포넌트 사용 (Using Components with Known Vulnerabilities&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;웹 개발자들은 다양한 오픈소스 라이브러리, 프레임워크 등을 사용하게 됩니다. 본인이 알지못하는 취약점이 있는 컴포넌트들을 사용함으로서 문제를 발생시킬 수 있습니다. 충분한 보안측면에서의 검토가 필요합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;10. 취약한 API (Underprotected APIs&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;)&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;웹 서비스 간의 연동이 점점 많아지게 되고 이런 상호작용은 각 서비스에서 제공하는 API를 이용하여 이루어지는 경우가 많습니다. 이 경우에도 취약점이 있는 컴포넌트와 마찬가지로 문제가 발생할 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: right;&quot;&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;참고 : 정보 보안 개론 3판 | 양대일 지음&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Security</category>
<category>security</category>
<category>web security</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/495</guid>
<comments>https://sonseungha.tistory.com/495#entry495comment</comments>
<pubDate>Tue, 04 Dec 2018 16:25:27 +0900</pubDate>
</item>
<item>
<title>[정보보호개론] Session Hijacking 공격</title>
<link>https://sonseungha.tistory.com/494</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;세션 하이재킹 공격은 세션을 가로채서 공격하는 방법입니다. 세션은 사용자와 컴퓨터 또는 컴퓨터 간 연결상태가 활성화 된 상태를 위해 사용하는 방법입니다. 클라이언트-서버 간 연결되어 있거나 사용자가 특정 컴퓨터에 로그인되어 있는 상태들을 말합니다. 이러한 세션을 가로채서 공격하는 방법입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;이 중 TCP 세션 하이재킹의 경우 공격자가 공격대상자의 세션을 하이재킹함으로서 본인이 세션을 유지하고 있도록 하는 방법입니다. TCP 세션 하이재킹은 TCP가 가진 고유한 취약점을 이용하게 됩니다. TCP는 클라이언트-서버간 통신 시 패킷의 연속성을 보장하기 위해 시퀀스 넘버를 사용합니다. 각 패킷에 번호를 붙여 패킷의 순서를 알 수 있도록 하는 것이죠. 클라이언트, 서버에 잘못된 시퀀스 넘버를 전달함으로서 연결된 세션에 혼란을 준 뒤 그 틈을 이용해 중간에 끼어들어가는 방식입니다. 중간에 끼어들어가 클라이언트 - 공격자 - 서버 의 순서로 모든 패킷이 공격자를 지나가도록 하는 방법입니다. 공격자는 서버에게 RST 패킷을 전달하여 연결을 리셋하고, 다시 3-Way handshaking을 통해 서버와 연결됩니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;위 방법을 이용해 공격자는 클라이언트가 열어놓은 세션을 하이재킹 할 수 있습니다. 특히 텔넷 등의 취약한 프로토콜은 쉽게 하이재킹 당할 수 있습니다. SSH와 같은 인증 수준이 좀 더 높은 프로토콜을 사용하는 것을 추천드립니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;감사합니다.&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Security</category>
<category>attack</category>
<category>Hijacking</category>
<category>security</category>
<category>session</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/494</guid>
<comments>https://sonseungha.tistory.com/494#entry494comment</comments>
<pubDate>Tue, 04 Dec 2018 14:40:46 +0900</pubDate>
</item>
<item>
<title>Slack Bot (작성중)</title>
<link>https://sonseungha.tistory.com/492</link>
<description>&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;토이프로젝트로 Slack Bot을 만들어보려고 합니다. 관심있는 블로그나 저널의 RSS feed를 받아 Slack에 Notification을 해주는 단순한 형태가 될 것 같습니다. 구현할 언어는 python 버전 3.7을 사용하려 합니다.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이 글은 프로젝트를 진행해가는 과정을 하나씩 기록으로 남기고자 작성하는 것입니다. 만약 필요한 부분이 있어 방문해주신 분들은 부족한 부분이 많을테니 참고 부탁드리고, 언제든지 좋은 방향에 대한 커멘트와 논의는 환영입니다 :D&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;1. RSS feed 정보 받아오기.&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;RSS feed는 feedparser(https://pypi.org/project/feedparser/)를 이용합니다. 2018년 11월 16일 기준으로 feedparser는 5.2.1버전까지 릴리즈되었습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:600px;width: 600px; height: 409px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile22.uf.tistory.com%2Fimage%2F9980F54B5BED8DAC031D82&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9980F54B5BED8DAC03&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2018-11-16 00-15-37.png&quot; height=&quot;409&quot; original=&quot;yes&quot; style=&quot;width: 600px; height: 409px;&quot; width=&quot;600&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px; line-height: 2; text-align: justify;&quot;&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;$ sudo pip3.7&amp;nbsp;install feedparser&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;설치하였다면 간단한 테스트 코드를 작성하여 확인해보세요. 저는 제 블로그 rss를 이용했습니다 ^^&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;txc-textbox&quot; style=&quot;border-style: solid; border-width: 1px; border-color: rgb(203, 203, 203); background-color: rgb(255, 255, 255); padding: 10px; line-height: 2; text-align: justify;&quot;&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;justify&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding: 6px; border-right: 2px solid rgb(229, 229, 229); height: 220px;&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;5&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;6&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;7&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;9&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;11&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;12&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;13&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;14&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;15&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding: 6px 0px; height: 220px;&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;import&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;feedparser&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;f&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;feedparser.parse(&lt;/span&gt;&lt;span style=&quot;color: rgb(99, 163, 92); font-size: 11pt;&quot;&gt;'https://sonseungha.tistory.com/rss'&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 153); font-size: 11pt;&quot;&gt;#&amp;nbsp;Print&amp;nbsp;feed&amp;nbsp;tags&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;tag&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;f:&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(6, 109, 226); font-size: 11pt;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;(tag)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 153); font-size: 11pt;&quot;&gt;#&amp;nbsp;Print&amp;nbsp;all&amp;nbsp;feed&amp;nbsp;tags&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;feed&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;f[&lt;/span&gt;&lt;span style=&quot;color: rgb(99, 163, 92); font-size: 11pt;&quot;&gt;'feed'&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;]:&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(6, 109, 226); font-size: 11pt;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;(feed)&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(153, 153, 153); font-size: 11pt;&quot;&gt;#&amp;nbsp;Print&amp;nbsp;all&amp;nbsp;title&amp;nbsp;in&amp;nbsp;entries&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;feed&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(167, 29, 93); font-size: 11pt;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;f[&lt;/span&gt;&lt;span style=&quot;color: rgb(99, 163, 92); font-size: 11pt;&quot;&gt;'entries'&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;]:&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: rgb(6, 109, 226); font-size: 11pt;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;(feed.title)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;&lt;span style=&quot;font-size: 11pt;&quot;&gt;Colored by Color Scripter&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align: bottom; padding: 0px 2px 4px 0px; height: 220px;&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 11pt; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;b&gt;2. Slack bot 만들기&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;b&gt;&lt;/b&gt;Slack bot을 만들기 위해서 Slack에서 제공하는 Slacker를 이용하기로 하였습니다.&amp;nbsp; Slack bot이란 사용자들과 인터렉션을 하기위해 디자인된 Slack App 입니다. Bot도 하나의 Slack app이라고 보시면 됩니다. Bot도 메시지를 보내거나 파일을 업로드하거나 Channel로 초대하거나 퇴장시킬 수 있습니다.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;아래 페이지에서 상세한 내용을 살펴보실 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;&lt;a href=&quot;https://github.com/os/slacker&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Slacker github&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify; margin-left: 2em;&quot;&gt;&lt;a href=&quot;https://api.slack.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Slacker API&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Slacker API 페이지를 접속하면&amp;nbsp;아래와 같은 페이지를 볼 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile27.uf.tistory.com%2Fimage%2F99D2133C5BED913A029658&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/99D2133C5BED913A02&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2018-11-16 00-30-52.png&quot; height=&quot;394&quot; style=&quot;&quot; width=&quot;860&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;그 중에 우리가 원하는 건 Bot를 만드는 겁니다. 아래로 내리시다 보면 App features 카테고리에 Building bots란 메뉴가 보입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:650px;width: 650px; height: 545px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F9931FB465BED91A60ED19A&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/9931FB465BED91A60E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2018-11-16 00-32-42.png&quot; height=&quot;545&quot; style=&quot;width: 650px; height: 545px;&quot; width=&quot;650&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;Slack bot을 개발하기 전에 Slack app을 먼저 생성해야 합니다.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:500px;width: 500px; height: 288px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile28.uf.tistory.com%2Fimage%2F991FCD485BED92F11173B0&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/991FCD485BED92F111&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2018-11-16 00-38-13.png&quot; height=&quot;288&quot; style=&quot;width: 500px; height: 288px;&quot; width=&quot;500&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;아래로 내리시다보면 위와 같은 Create your Slack app 버튼이 나타납니다. 클릭하여 아래와 같이 Slack app을 생성해주세요.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:450px;width: 450px; height: 380px;;height:auto;max-width:100%&quot;&gt;&lt;img srcset=&quot;https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=http%3A%2F%2Fcfile30.uf.tistory.com%2Fimage%2F999E304B5BED941D108F15&quot; src=&quot;https://t1.daumcdn.net/cfile/tistory/999E304B5BED941D10&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot from 2018-11-16 00-42-51.png&quot; height=&quot;380&quot; style=&quot;width: 450px; height: 380px;&quot; width=&quot;450&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;전 App의 이름은 RssFeedBotForMyPresent라고 길게 지었습니다 하하. 생성하고 나면 여러가지 항목이 보이는데 먼저 '&lt;b&gt;Add features and functionality' &lt;/b&gt;에서 Bots를 선택해줍니다. 선택하면 이름을 지을 수 있는 화면이 나오는데요, Display name와 Default username을 지어줍니다. 그리고 저장합니다. 다음 &lt;b&gt;'OAuth &amp;amp; Permissions'&lt;/b&gt;&amp;nbsp;메뉴를 선택하여 Install App to Team 버튼을 클릭합니다. 그 후 나타나는 2개의 토큰을 잘 저장해두었습니다. 이 Token은 나중에 Slacker API를 사용할 때 사용될 것 같습니다. 그리고 아래로 내려와 변경사항을 저장합니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;이제 Slacker를 이용하여 python 코드를 작성해 보려합니다. Slacker API를 테스트해본 후 Rss feed 기능을 붙일 계획입니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: justify;&quot;&gt;&lt;b&gt;&lt;/b&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Project</category>
<category>Bot</category>
<category>feed</category>
<category>RSS</category>
<category>slack</category>
<category>Slack Bot</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/492</guid>
<comments>https://sonseungha.tistory.com/492#entry492comment</comments>
<pubDate>Fri, 16 Nov 2018 00:57:19 +0900</pubDate>
</item>
<item>
<title>RSS feed parsing 하기</title>
<link>https://sonseungha.tistory.com/490</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;feedparser를 이용하여 feed를 파싱할 수 있다. 만약 feedparser가 설치되어 있지 않다면 pip를 이용해 설치해 준다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;RSS구조에 대해서는 아래 URL을 참고하자&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;a href=&quot;http://sonseungha.tistory.com/489&quot; target=&quot;_blank&quot;&gt;2018/11/15 - [Developer's Delight/ETC] - RSS 에 대해서&lt;/a&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;간단한 소스코드이다. 파싱한 정보에는 RSS 구조에 맞춰 다양한 정보들이 있다. 필요한 정보를 사용하면 될 것 같다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color: rgb(1, 1, 1); overflow: auto; font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace !important; position: relative !important; line-height: 2;&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;import&lt;/span&gt;&amp;nbsp;feedparser&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;f&amp;nbsp;&lt;span style=&quot;color:#0086b3&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;=&lt;/span&gt;&amp;nbsp;feedparser.parse(&lt;span style=&quot;color:#63a35c&quot;&gt;'https://sonseungha.tistory.com/rss'&lt;/span&gt;)&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;#&amp;nbsp;Print&amp;nbsp;feed&amp;nbsp;tags&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;&amp;nbsp;tag&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;f:&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(tag)&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;#&amp;nbsp;Print&amp;nbsp;all&amp;nbsp;feed&amp;nbsp;tags&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;&amp;nbsp;feed&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;f[&lt;span style=&quot;color:#63a35c&quot;&gt;'feed'&lt;/span&gt;]:&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(feed)&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#999999&quot;&gt;#&amp;nbsp;Print&amp;nbsp;all&amp;nbsp;title&amp;nbsp;in&amp;nbsp;entries&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&lt;span style=&quot;color:#a71d5d&quot;&gt;for&lt;/span&gt;&amp;nbsp;feed&amp;nbsp;&lt;span style=&quot;color:#a71d5d&quot;&gt;in&lt;/span&gt;&amp;nbsp;f[&lt;span style=&quot;color:#63a35c&quot;&gt;'entries'&lt;/span&gt;]:&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#066de2&quot;&gt;print&lt;/span&gt;(feed.title)&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;&lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- tistory --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-2972201602312138&quot;
     data-ad-slot=&quot;6065133484&quot;
     data-ad-format=&quot;auto&quot;
     data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;&lt;/div&gt;</description>
<category>Python</category>
<category>feed</category>
<category>feedparser</category>
<category>parser</category>
<category>python</category>
<category>RSS</category>
<category>RSS Feed</category>
<author>Developer&#039;s Delight Linuxias</author>
<guid>https://sonseungha.tistory.com/490</guid>
<comments>https://sonseungha.tistory.com/490#entry490comment</comments>
<pubDate>Thu, 15 Nov 2018 23:07:14 +0900</pubDate>
</item>
<item>
<title>RSS 에 대해서</title>
<link>https://sonseungha.tistory.com/489</link>
<description>&lt;p style=&quot;line-height: 2;&quot;&gt;이번에 토이 프로젝트로 제가&amp;nbsp;관심있는 블로그들의 RSS 피드를 기반으로 Slack으로 메신저를 보내주는 간단한 프로그램을 만들어보려고 합니다. 오랜만에 RSS를 사용하려니 리마인드 겸 RSS가 무엇인지와 구조에 대해 정리하고 시작하고자 이 글을 작성합니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;RSS&lt;/span&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;란?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;RSS란&amp;nbsp;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt; color: rgb(0, 0, 0);&quot;&gt;Really Simple Syndication&lt;/span&gt;의 약자로 웹 콘텐츠 표현 방식이자 통신 포맷입니다. XML 1.0 version에 정의된 데이터를 공유하기 위한 포맷입니다. RSS는 웹 사이트에서 제공하는 정보나 뉴스를 컴퓨터가 처리할 수 있는 형식으로 가져올 수 있습니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;RSS는 어떻게 동작하는가?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;뉴스기사나 블로그 글을 배포하기 위한 RSS 시스템은 매우 단순합니다. 본인의&amp;nbsp;글이나 기사들이&amp;nbsp;다른 웹사이트에서&amp;nbsp;표시되기를 원하는 웹 페이지들이 있을 것입니다. 이러한 페이지들의 집합을 RSS 피드라고 합니다. RSS 피드를 정의하는 파일은 XML파일형태이며 이 파일 내에는 URL, title, 그리고 각 페이지에서 보여주고자하는 내용들이 포함되어 있습니다. 자신의 컴퓨터에서 RSS 피드를 읽기 원하는 사람은 그 RSS 피드를 추가하고 RSS Reader 또는 브라우저를 사용하여 볼 수 있습니다. 콘텐츠 제공자(다른 웹사이트에서 페이지 정보를 보이길 원하는)로부터&amp;nbsp;RSS 파일을 로드하고 페이지의 URL을 추출하고 Title과 Summary를 표시합니다. 누군가가 해당 웹페이지에 방문하면 콘텐츠 제공자의 웹사이트에서 RSS 파일을 불러와 데이터를 표시해줍니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;RSS는 XML파일이며 제공받을 파일을 분석하여 표시해주는 것이라고 간단히 생각하면 될 것 같습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;b&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;RSS의 구조는?&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;RSS는&amp;nbsp;XML 파일입니다. RSS 내에는 최소 하나 이상의 Channel을 가지고 있어야 합니다. 채널은 이 RSS파일을 제공하는 웹사이트의 정보가 포함되어 있습니다.&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;제 블로그의 RSS를 이용해서 분석해 보겠습니다. 주소는 아래와 같습니다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;span style=&quot;font-size: 14pt;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;https://sonseungha.tistory.com/rss&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;처음 들어가면 펼쳐져 있지만, 모두 접은 상태에서부터 시작해보겠습니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;가장 먼저 rss version이 보이고 channel이 보입니다. rss는 global&amp;nbsp; container이며 channel은 배포하는 채널의 정보가 담겨있습니다. 내부에는 또 많은 항목들이 포함되어 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;rss&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0a9989&quot;&gt;version&lt;/span&gt;=&lt;span style=&quot;color:#df5000&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span style=&quot;color:#0a9989&quot;&gt;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;channel&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;channel&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;rss&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;channel 내부를 확인해 보시죠. channel 내부에는 title, link, description, language, pubDate, generator, managingEditor, image와 여러가지 item 들이 포함되어 있는걸 볼 수 있습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;12&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;13&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;14&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;15&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;16&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;17&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;18&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;19&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;20&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;21&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;22&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;23&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;24&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;25&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;26&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;padding:6px 0&quot;&gt;&lt;div style=&quot;margin:0; padding:0; color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;rss&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#0a9989&quot;&gt;version&lt;/span&gt;=&lt;span style=&quot;color:#df5000&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span style=&quot;color:#0a9989&quot;&gt;&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;channel&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;title&lt;/span&gt;&amp;gt;Developer's&amp;nbsp;Delight&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;link&lt;/span&gt;&amp;gt;http://sonseungha.tistory.com/&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux&amp;nbsp;System&amp;nbsp;Programmer.&amp;nbsp;Tizen&amp;nbsp;Framework&amp;nbsp;Programmer.&amp;nbsp;linuxias@gmail.com&amp;nbsp;https://github.com/linuxias/&amp;nbsp;https://linuxias.gitbooks.io/&amp;nbsp;https://www.linkedin.com/in/seungha-son-a97a02b3/&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;language&lt;/span&gt;&amp;gt;ko&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;language&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;pubDate&lt;/span&gt;&amp;gt;Wed,&amp;nbsp;14&amp;nbsp;Nov&amp;nbsp;2018&amp;nbsp;22:06:38&amp;nbsp;+0900&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;pubDate&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;generator&lt;/span&gt;&amp;gt;TISTORY&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;generator&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;managingEditor&lt;/span&gt;&amp;gt;Linuxias&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;managingEditor&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;image&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;title&lt;/span&gt;&amp;gt;Developer's&amp;nbsp;Delight&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;https://tistory4.daumcdn.net/tistory/1135772/attach/789073b7b20d4abbac3d4ee7d94fb25e&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;link&lt;/span&gt;&amp;gt;http://sonseungha.tistory.com&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;link&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Linux&amp;nbsp;System&amp;nbsp;Programmer.&amp;nbsp;Tizen&amp;nbsp;Framework&amp;nbsp;Programmer.&amp;nbsp;linuxias@gmail.com&amp;nbsp;https://github.com/linuxias/&amp;nbsp;https://linuxias.gitbooks.io/&amp;nbsp;https://www.linkedin.com/in/seungha-son-a97a02b3/&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;image&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;channel&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div style=&quot;padding:0 6px; white-space:pre; line-height:130%&quot;&gt;&amp;lt;/&lt;span style=&quot;color:#066de2&quot;&gt;rss&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align:right; margin-top:-13px; margin-right:5px; font-size:9px; font-style:italic&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: rgb(229, 229, 229);&quot;&gt;Colored by Color Scripter&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;td style=&quot;vertical-align:bottom; padding:0 2px 4px 0&quot;&gt;&lt;a href=&quot;http://colorscripter.com/info#e&quot; target=&quot;_blank&quot; style=&quot;color: white;&quot;&gt;&lt;span style=&quot;font-size: 9px; word-break: normal; background-color: rgb(229, 229, 229); border-radius: 10px; padding: 1px;&quot;&gt;cs&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;하나씩 정리해보겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;title&lt;/b&gt; : channel의 타이틀입니다. 'Developer's Delight'는 제 블로그의 제목입니다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;link &lt;/b&gt;: 이 채널을 제공하는 웹사이트의 URL입니다. 제 블로그 주소네요.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;description &lt;/b&gt;: 웹사이트의 간략한 정보들입니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;language &lt;/b&gt;: 별도로 설명이 필요없겠죠?&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;pubDate &lt;/b&gt;: 배포 일자입니다.&lt;br /&gt;&amp;nbsp; &lt;b&gt;image &lt;/b&gt;: 웹사이트에서 사용하는 이미지 정보가&amp;nbsp; 포함되어 있습니다. 지금은 스킨으로 인해 가려져있지만, 기본적으로 제 사진을 추가해 놓았습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&amp;nbsp; &lt;b&gt;item &lt;/b&gt;: 컨텐츠에 대한 태그입니다. channel에 하나 이상의 item이 포함되어 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;원하는 컨테츠를 정보는 item 태그 내에 존재하는 것 같습니다. 하나만 펼쳐서 확인해 보겠습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;라인 14~36을 보시면 제일 첫번째 item 내용을 볼 수 있습니다.&lt;/p&gt;&lt;p style=&quot;line-height: 2;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;colorscripter-code&quot; style=&quot;color:#010101; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; position:relative !important; overflow:auto&quot;&gt;&lt;table class=&quot;colorscripter-code-table&quot; style=&quot;margin:0; padding:0; border:none; background-color:#fafafa; border-radius:4px;&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;padding:6px; border-right:2px solid #e5e5e5&quot;&gt;&lt;div style=&quot;margin:0; padding:0; word-break:normal; text-align:right; color:#666; font-family:Consolas, 'Liberation Mono', Menlo, Courier, monospace !important; line-height:130%&quot;&gt;&lt;div style=&quot;line-height:130%&quot;&gt;1&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;2&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;3&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;4&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;5&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;6&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;7&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;8&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;9&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;10&lt;/div&gt;&lt;div style=&quot;line-height:130%&quot;&gt;11&lt;/div&gt;&lt;div style=&quot;line-height:130