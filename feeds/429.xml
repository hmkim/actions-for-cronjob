<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>컴맹 : 진화의 시작</title>
<link>https://jybaek.tistory.com/</link>
<description>무언가 이유는 있지만 
말이 마음을 담지 못할때, 
우리는 '그냥'이라고 한다.</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 19:41:45 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>Jaeyeon Baek</managingEditor>
<image>
<title>컴맹 : 진화의 시작</title>
<url>https://tistory1.daumcdn.net/tistory/410732/attach/23ccd1075458408d84ac14acf3b00808</url>
<link>https://jybaek.tistory.com</link>
<description>무언가 이유는 있지만 
말이 마음을 담지 못할때, 
우리는 '그냥'이라고 한다.</description>
</image>
<item>
<title>Google I/O Cloud Hero</title>
<link>https://jybaek.tistory.com/792</link>
<description>&lt;p&gt;4월에 &lt;span style=&quot;color: #f41a18;&quot;&gt;Next'19 Cloud Hero&lt;/span&gt;를 놓쳐서 아쉬워하던차에 5월에 진행된 I/O에도 Cloud Hero 게임이 오픈되었다. 뒤늦게 알아차려서 7일은 넘어갔지만 모든 날짜에 진행되는 게임 내용은 같다. 쉽게 이야기하자면 점수가 각 날자별로 다르게 측정된다고 생각하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/ciT6Qq/btqu9nshZ0S/OvMKMZgQuJChNcoYqDplJ1/img.png' data-lightbox='lightbox' data-alt='Cloud Hero Game on!'&gt;&lt;img src='https://k.kakaocdn.net/dn/ciT6Qq/btqu9nshZ0S/OvMKMZgQuJChNcoYqDplJ1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FciT6Qq%2Fbtqu9nshZ0S%2FOvMKMZgQuJChNcoYqDplJ1%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;Cloud Hero Game on!&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;게임은 전세계에 있는 모든 사람들과 경쟁하는 시스템이고 &lt;a href=&quot;https://www.qwiklabs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;퀵랩(Qwiklabs)&lt;/a&gt;에서 진행된다. 다만 일반적인 링크가 아닌 Cloud Hero 게임을 위한 링크가 제공되고 그 위에서 미션을 진행하는 시스템이 되겠다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/dVWwy0/btqu9lOEdLY/lNi5LRy0BiK98rAreCkfu0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/dVWwy0/btqu9lOEdLY/lNi5LRy0BiK98rAreCkfu0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FdVWwy0%2Fbtqu9lOEdLY%2FlNi5LRy0BiK98rAreCkfu0%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그 미션은 아래와 같다. 총 세 가지 미션이 주어지는데 모두 Google Cloud Platform 위에서 서비스를 만들어가는 것인데 기본적인 것은&amp;nbsp; GCS(Google Cloud Storage)를 생성하고, 생성한 storage에 모든 유저가 public하게 접근할 수 있도록 롤을 수정하는 정도가 되겠다. 조금 더 복잡한 미션은 클라우드 펑션을 등록하고 pub/sub쪽에 트리거를 건다거나, k8s cluster를 생성하고 deploy하는 정도까지 되겠다. &lt;b&gt;각 미션은 빠르게 처리할수록 높은 점수가 주어지고 동일한 미션을 총 다섯번까지 수행할 수 있다.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bxtXZn/btqvbP86qve/g1coxFLcXAkB9GpJg5KFW0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bxtXZn/btqvbP86qve/g1coxFLcXAkB9GpJg5KFW0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbxtXZn%2FbtqvbP86qve%2Fg1coxFLcXAkB9GpJg5KFW0%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;순위 경쟁 시스템이다보니 보상이 주어지는데 각 게임별 3위까지는 퀵랩 크레딧이 100씩 주어지고, 모든 참여자에게는 퀵랩 뱃지와 50 크레딧등이 주어지겠다. 사실 이런 보상을 떠나서 현재 &lt;b&gt;GDG Cloud Korea챕터의 organizer로 활동&lt;/b&gt;하고 있는만큼 순위에 이름을 등록해두고 싶은 욕심이 생겼다. 그래서.. 잔뜩 독기를 품고 퀘스트를 수행했는데, 빠르게 미션을 클리어하기 위해서 웬만한건 Cloud console이 아닌 Cloud Shell에서 커맨드라인을 통해서 처리했다. 말하자면 미션 하나를 처리하기위한 셸 스크립트를 만들어놓고 퀵랩 실행과 동시에 스크립트를 붙여넣기해서 실행시키면 끝. 이렇게 노가다 몇 번 했더니 다행스럽게도 &lt;span style=&quot;color: #f41a18;&quot;&gt;순위에 이름&lt;/span&gt;을 올릴 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/nv0Pp/btqu9P2PIwQ/xdRzx0oE2oSyCHYPI6ela1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/nv0Pp/btqu9P2PIwQ/xdRzx0oE2oSyCHYPI6ela1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fnv0Pp%2Fbtqu9P2PIwQ%2FxdRzx0oE2oSyCHYPI6ela1%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;나름 &lt;span style=&quot;color: #f41a18;&quot;&gt;세계랭킹 3위&lt;/span&gt;에 랭크되었지만 참여자가 생각보다 많지 않았던게 아쉽다. 또한 나름 얕지만 넓게 알고 있다고 생각했던 클라우드 분야에 모르는것 투성이라는 사실을 다시 한번 깨닫게 되었고 조금 더 스스로를 채찍질 할 수 있는 좋은 계기가 된 것 같다.&amp;nbsp;&lt;/p&gt;</description>
<category>Cloud (GCP)</category>
<category>Cloud Hero</category>
<category>GCP</category>
<category>Google IO</category>
<category>I/O</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/792</guid>
<comments>https://jybaek.tistory.com/792#entry792comment</comments>
<pubDate>Fri, 10 May 2019 23:47:31 +0900</pubDate>
</item>
<item>
<title>nvidia-docker로 개발환경 한방에 세팅하기</title>
<link>https://jybaek.tistory.com/791</link>
<description>&lt;p&gt;&lt;b&gt;GPU를 사용하는 머신러닝 환경을 구축&lt;/b&gt;하기 위해서는 virtualenv, anaconda 등 파이썬의 가상환경을 통한 다양한 방법이 제시되는데 이와 같은 환경에는 문제가 하나 있다. 바로 다양한 버전의 CUDA를 사용하는데 상당히 제한적이라는 것인데, 이게 왜 문제가 되는가 하면 여려가지 전제를 이야기 할 필요가 있다. 보통 다양한 버전의 CUDA를 필요로 하는 경우는 여러개의 프로젝트를 병행으로 개발하는 상태이고 한개의 워크스테이션(혹은 클라우드 인스턴스)에 여러명의 엔지니어가 접속해서 작업을 진행하게 된다. 이때 A라는 엔지니어가 잘못 건드린 글로벌한 CUDA 설정이 B 개발자에게까지 영향을 줄 수 있는 상황이 충분히 존재한다. 이건 혼자 사용하는 머신이라도 마찬가지다.&lt;/p&gt;
&lt;p&gt;참담하게도 이런경우에는 시스템에 전체적으로 CUDA 설치를 다시해주거나 꼬여버린 PATH를 다시 잡아주는 등 여러 사람이 고통을 분담해서 겪게된다. 정말이다. &lt;span style=&quot;color: #f41a18;&quot;&gt;심한경우에는 다양하게 설치되어 있는 CUDA를 모조리 새로 설치해야 할 수도&lt;/span&gt; 있다.&lt;/p&gt;
&lt;p&gt;서론이 조금 길었는데 여기서는 GPU 개발환경을 파이썬의 가상환경이 아닌 도커로 그 해답을 제시하고자 한다. 우선 &lt;b&gt;nvidia-docker&lt;/b&gt;를 사용할 수 있다는 전제하에 이야기하도록 한다. 우리가 흔히 아는 docker 명령처럼 다음과 같이 컨테이너를 생성 해보자. 이때 &lt;b&gt;base image(nvidia/cuda:10.0-base)&lt;/b&gt;는 현재 로컬에 존재하지 않기 때문에 최초에는 서버에서 다운로드 받아지게 된다.&lt;/p&gt;
&lt;pre id=&quot;code_1557275499833&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;nvidia-docker run -d --shm-size 2G -it --name &amp;lt;CONTAINER_NAME&amp;gt; \
nvidia/cuda:10.0-base /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기서는 두 가지만 알면 되는데 &lt;b&gt;첫 번째&lt;/b&gt;로 cuda:10.0 뒤에 붙은 &lt;span style=&quot;color: #f41a18;&quot;&gt;base&lt;/span&gt;의 의미다. base 이외에도 아래와 같이&lt;b&gt; runtime, devel&lt;/b&gt;을 사용할 수 있는데 단순하게 CUDA만 사용하는 프로젝트라면 base로도 충분하지만 CUDA에 존재하는 라이브러리를 사용한다거나 header 파일을 참조해서 뭔가 컴파일해야 하는 프로젝트의 경우에는 runtime, devel이 각각 필요할 수 있겠다. 무조건 devel로 하면 속편한거 아닌가? 라고 할 수 있겠지만 그 용량 차이를 무시할 수 없다. &lt;span style=&quot;color: #f41a18;&quot;&gt;base 이미지의 경우에는&amp;nbsp;135MB, devel의 경우에는 2.36GB이니 약 20배 가까운 차이&lt;/span&gt;를 나타내기 때문이다. (사실 이미지를 통해 만들어지는 컨테이너들의 용량 문제가 제일 심각하다)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bKIYat/btqu3rnsJ3T/iLl6nrr7kAkb2gxrSrlps0/img.png' data-lightbox='lightbox' data-alt='https://github.com/NVIDIA/nvidia-docker/wiki/CUDA#description'&gt;&lt;img src='https://k.kakaocdn.net/dn/bKIYat/btqu3rnsJ3T/iLl6nrr7kAkb2gxrSrlps0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbKIYat%2Fbtqu3rnsJ3T%2FiLl6nrr7kAkb2gxrSrlps0%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;https://github.com/NVIDIA/nvidia-docker/wiki/CUDA#description&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;두 번째&lt;/b&gt;로는 &lt;span style=&quot;color: #f41a18;&quot;&gt;--shm-size&lt;/span&gt;인데, 생성되는 이미지를 사용하는 컨테이너에서 사용하게 되는 shared memory 공간이다. 머신러닝에서 이 영역이 충분하지 못하면 여러가지 에러를 만날 수 있기 때문에 적당한 크기로 설정이 필요하다. 일반적으로 도커환경이 아닌 우리 시스템의 경우 /dev/shm은 tmpfs라는 이름으로 수십 GB까지 할당이 되니 든든하게 챙기면 되겠다.&lt;/p&gt;
&lt;p&gt;이미지 다운로드가 끝나면 &lt;i&gt;docker images&lt;/i&gt; 명령어로 아래와 같이 다운로드 된 이미지 확인이 가능하다.&lt;/p&gt;
&lt;pre id=&quot;code_1557290831529&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nvidia/cuda         10.0-devel          30648438f8b8        4 weeks ago         2.36GB
nvidia/cuda         10.0-base           a55b7fc6f6a0        4 weeks ago         135MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 해당 이미지를 통해 생성된 컨테이너는&amp;nbsp;&lt;i&gt;docker ps&amp;nbsp;&lt;/i&gt;를 통해 확인된다.&lt;/p&gt;
&lt;pre id=&quot;code_1557290964907&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;$ docker ps -a
CONTAINER ID        IMAGE                     COMMAND             CREATED             STATUS                      PORTS               NAMES
395d76bfc213        nvidia/cuda:10.0-devel    &quot;/bin/bash&quot;         27 hours ago        Up 27 hours                                     test1
78db93f63ec3        nvidia/cuda:10.0-base     &quot;/bin/bash&quot;         3 weeks ago         Exited (0) 3 weeks ago                          test2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;정상적으로 &lt;span style=&quot;color: #f41a18;&quot;&gt;cuda:10.0-base&lt;/span&gt;를 다운로드 받고 컨테이너가 생성되었으면 이제 컨테이너에 접속해서 필요한 기본 패키지를 설치해주면 되겠다. 여기서 이야기하는 기본패키지는 우리가 &lt;span style=&quot;color: #f41a18;&quot;&gt;프로젝트를 진행하기 위해서 필요한 최소한의 것들&lt;/span&gt;이 되겠다. 예를들면 그게 git 일수도 있고, vim일수도 있고. 일단 현재 상태는 컨테이너가 시작(start)되어 있는 상태인데 그렇지 않다면 start 시켜주도록 하자. 자, 아래와 같이 컨테이너에 접속을 하고,&lt;/p&gt;
&lt;pre id=&quot;code_1557291113412&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;docker exec -it &amp;lt;CONTAINER_NAME&amp;gt; bash&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;다음과 같이 기본적으로 필요한 패키지를 다운로드 받을 수 있도록 sources.list를 세팅을 해준다.&lt;/p&gt;
&lt;pre id=&quot;code_1557291195691&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;sed -i 's/archive.ubuntu.com/ftp.daumkakao.com/g' /etc/apt/sources.list
apt-get update 
apt-get dist-upgrade -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;세팅이 끝났으면 필수 패키지를 설치해주도록 한다. 개인적으로 생각하는 필수 패키지 목록이니 각자의 환경에 맞도록 변경해주면 되겠다.&lt;/p&gt;
&lt;pre id=&quot;code_1557291289150&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;apt-get install -y wget vim git gcc  build-essential&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;현재 컨테이너에는 python3이 설치되지 않은 상태인데 필요하다면 conda로 잡아주는게 여러모로 편하다. 굳이 python3를 기본으로 사용하겠다고 alias를 잡아주는 등의 액션이 취해졌을 때 어느순간 발생하는 side-effect로 고통받지 않으려면.. 아래와 같이 conda3을 다운로드 받고 설치해주도록 한다.&lt;/p&gt;
&lt;pre id=&quot;code_1557291379151&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;wget https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
bash Anaconda3-2019.03-Linux-x86_64.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자, 이제 개인적으로 생각하는 공통 환경 세팅이 끝났다. 본인의 프로젝트에 맞는 머신러닝 프레임워크를 설치해서 막힘없이 개발하실 수 있기를 바란다. :-)&lt;/p&gt;</description>
<category>docker</category>
<category>Anaconda</category>
<category>Container</category>
<category>CUDA</category>
<category>docker</category>
<category>nvidia-docker</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/791</guid>
<comments>https://jybaek.tistory.com/791#entry791comment</comments>
<pubDate>Tue, 07 May 2019 16:58:13 +0900</pubDate>
</item>
<item>
<title>한글 자모 분리</title>
<link>https://jybaek.tistory.com/790</link>
<description>&lt;p&gt;한글&amp;nbsp;자소분리를&amp;nbsp;처리하기&amp;nbsp;위해서는&amp;nbsp;Unicode에&amp;nbsp;대한&amp;nbsp;이해가&amp;nbsp;필요합니다. 우선&amp;nbsp;위키피디아에&amp;nbsp;정의되어&amp;nbsp;있는&amp;nbsp;한글&amp;nbsp;음절에&amp;nbsp;대해&amp;nbsp;살펴보도록 하시죠.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/한글_음절&quot;&gt;https://ko.wikipedia.org/wiki/한글_음절&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;우선 여기서 잘 확인하고 넘어가야 하는 부분이 초성, 중성, 종성을 이루는 문자들과 그 개수입니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;초성&lt;/b&gt; &lt;b&gt;:&lt;/b&gt;&amp;nbsp;ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ&amp;nbsp;(19개)&lt;br /&gt;&lt;b&gt;중성&lt;/b&gt; &lt;b&gt;:&lt;/b&gt;&amp;nbsp;ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ&amp;nbsp;(21개)&lt;br /&gt;&lt;b&gt;종성&lt;/b&gt; &lt;b&gt;:&lt;/b&gt;&amp;nbsp;ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ&amp;nbsp;(28개)&lt;/p&gt;
&lt;p&gt;종성의 경우에는 종성이&amp;nbsp;없는&amp;nbsp;경우를 위해서 빈 문자도&amp;nbsp;포함해서&amp;nbsp;28로&amp;nbsp;취급합니다. 예를들면&amp;nbsp;&quot;가&quot;,&amp;nbsp;&quot;우&quot;,&amp;nbsp;&quot;소&quot;&amp;nbsp;등이&amp;nbsp;종성이&amp;nbsp;없는&amp;nbsp;경우가 있겠죠.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bXWmLo/btquYpcvLFN/2D2Eh3jHJ62m7X4NgoKWkK/img.png' data-lightbox='lightbox' data-alt='이 그림을 참고해서 아래 설명을 보세요'&gt;&lt;img src='https://k.kakaocdn.net/dn/bXWmLo/btquYpcvLFN/2D2Eh3jHJ62m7X4NgoKWkK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbXWmLo%2FbtquYpcvLFN%2F2D2Eh3jHJ62m7X4NgoKWkK%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;이 그림을 참고해서 아래 설명을 보세요&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;또한 위 링크에서 확인한 한글문자코드의&amp;nbsp;범위는&amp;nbsp;&lt;b&gt;0xAC00(가)&amp;nbsp;~&amp;nbsp;0xD7A3(힣)&lt;/b&gt;로&amp;nbsp;나타납니다. 예를들어&amp;nbsp;가(0xAC00)&amp;nbsp;다음에&amp;nbsp;나오는&amp;nbsp;까(0xAE4C)는&amp;nbsp;가부터&amp;nbsp;시작해서&amp;nbsp;모든&amp;nbsp;&lt;b&gt;중성&lt;/b&gt;과&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;의&amp;nbsp;조합을&amp;nbsp;지나서&amp;nbsp;나오게&amp;nbsp;되는데&amp;nbsp;위에서&amp;nbsp;이야기한것처럼&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;의&amp;nbsp;개수는&amp;nbsp;21개,&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;의&amp;nbsp;개수는&amp;nbsp;28개입니다.&amp;nbsp;쉽게&amp;nbsp;이야기를&amp;nbsp;해봅시다.&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;이&amp;nbsp;붙지&amp;nbsp;않은&amp;nbsp;&quot;가&quot;부터&amp;nbsp;&lt;b&gt;종&lt;/b&gt;성(즉 받침)을&amp;nbsp;붙여나가면&amp;nbsp;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #0051a1;&quot;&gt;가,&amp;nbsp;각,&amp;nbsp;갂,&amp;nbsp;갃,&amp;nbsp;간,&amp;nbsp;갅,&amp;nbsp;갆,&amp;nbsp;갇,&amp;nbsp;갈,&amp;nbsp;갉,&amp;nbsp;갊,&amp;nbsp;갋,&amp;nbsp;갌,&amp;nbsp;갍,&amp;nbsp;갎,&amp;nbsp;갏,&amp;nbsp;감,&amp;nbsp;갑,&amp;nbsp;값,&amp;nbsp;갓,&amp;nbsp;갔,&amp;nbsp;강,&amp;nbsp;갖,&amp;nbsp;갗,&amp;nbsp;갘,&amp;nbsp;같,&amp;nbsp;갚,&amp;nbsp;갛&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;이렇게&amp;nbsp;총&amp;nbsp;28개가&amp;nbsp;나옵니다.&amp;nbsp;이렇게&amp;nbsp;모든&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;을&amp;nbsp;훑었으면&amp;nbsp;&lt;b&gt;중성&lt;/b&gt;을&amp;nbsp;바꿔줍니다.&amp;nbsp;&quot;ㅏ&quot;&amp;nbsp;~&amp;gt;&amp;nbsp;&quot;ㅐ&quot;&amp;nbsp;로&amp;nbsp;변경하고&amp;nbsp;다시&amp;nbsp;28종류의&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;(종성이&amp;nbsp;없는&amp;nbsp;경우&amp;nbsp;포함)을&amp;nbsp;훑어주면&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #0051a1;&quot;&gt;개,&amp;nbsp;객,&amp;nbsp;갞,&amp;nbsp;갟,&amp;nbsp;갠,&amp;nbsp;갡,&amp;nbsp;갢,&amp;nbsp;갣,&amp;nbsp;갤,&amp;nbsp;갥,&amp;nbsp;갦,&amp;nbsp;갧,&amp;nbsp;갨,&amp;nbsp;갩,&amp;nbsp;갪,&amp;nbsp;갫,&amp;nbsp;갬,&amp;nbsp;갭,&amp;nbsp;갮,&amp;nbsp;갯,&amp;nbsp;갰,&amp;nbsp;갱,&amp;nbsp;갲,&amp;nbsp;갳,&amp;nbsp;갴,&amp;nbsp;갵,&amp;nbsp;갶,&amp;nbsp;갷&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;다시&amp;nbsp;이렇게&amp;nbsp;28종류가&amp;nbsp;나옵니다.&amp;nbsp;이제 자연스럽게 반복문이 되겠죠? &lt;b&gt;중성&lt;/b&gt;(21개)을&amp;nbsp;모든&amp;nbsp;&lt;b&gt;종성&lt;/b&gt;(28개)만큼&amp;nbsp;반복해주면&amp;nbsp;588이라는&amp;nbsp;수치가&amp;nbsp;나오는데&amp;nbsp;&lt;b&gt;가(0xAC00)&lt;/b&gt;에&amp;nbsp;588을&amp;nbsp;더해주면 &lt;b&gt;까(0xAE4C)&lt;/b&gt;,&amp;nbsp;위에서&amp;nbsp;미리&amp;nbsp;확인한&amp;nbsp;초성의&amp;nbsp;두번째&amp;nbsp;인덱스에&amp;nbsp;들어있는&amp;nbsp;&quot;ㄲ&quot;을&amp;nbsp;만나게&amp;nbsp;됩니다.&amp;nbsp;마찬가지로&amp;nbsp;다시&amp;nbsp;한번&amp;nbsp;588을&amp;nbsp;더해주면 &lt;b&gt;나(0xB098)&lt;/b&gt;,&amp;nbsp;즉&amp;nbsp;세번째&amp;nbsp;초성으로&amp;nbsp;만들&amp;nbsp;수&amp;nbsp;있는&amp;nbsp;첫&amp;nbsp;문자가&amp;nbsp;출력됩니다.&amp;nbsp;이쯤&amp;nbsp;되면&amp;nbsp;대충&amp;nbsp;느낌이&amp;nbsp;옵니다.&amp;nbsp;&lt;b&gt;가(0xAC00)&lt;/b&gt;에&amp;nbsp;588(21 x 28)을&amp;nbsp;초성의&amp;nbsp;인덱스만큼&amp;nbsp;곱셈해주면&amp;nbsp;원하는&amp;nbsp;초성으로&amp;nbsp;시작하는&amp;nbsp;위치를&amp;nbsp;찾을&amp;nbsp;수&amp;nbsp;있게 된다는 겁니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;이게&amp;nbsp;글로&amp;nbsp;표현하면&amp;nbsp;참&amp;nbsp;어렵죠.&amp;nbsp;반대로&amp;nbsp;특정&amp;nbsp;문자의&amp;nbsp;유니코드가&amp;nbsp;주어지고&amp;nbsp;그&amp;nbsp;문자를&amp;nbsp;초성,&amp;nbsp;중성,&amp;nbsp;종성으로&amp;nbsp;분리하는&amp;nbsp;공식을&amp;nbsp;확인해보면&amp;nbsp;이해에&amp;nbsp;도움이 됩니다. 문자&amp;nbsp;유니코드로&amp;nbsp;부터&amp;nbsp;초성,&amp;nbsp;중성,&amp;nbsp;종성의&amp;nbsp;인덱스를&amp;nbsp;찾는&amp;nbsp;아래와&amp;nbsp;같은&amp;nbsp;공식을&amp;nbsp;살펴봅시다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;초성의&amp;nbsp;인덱스&amp;nbsp;:&lt;/b&gt;&amp;nbsp;(문자&amp;nbsp;-&amp;nbsp;0xAC00)&amp;nbsp;/&amp;nbsp;21&amp;nbsp;/&amp;nbsp;28&lt;br /&gt;&lt;b&gt;중성의&amp;nbsp;인덱스&amp;nbsp;:&lt;/b&gt;&amp;nbsp;(문자&amp;nbsp;-&amp;nbsp;0xAC00&amp;nbsp;-&amp;nbsp;(초성&amp;nbsp;인덱스&amp;nbsp;*&amp;nbsp;21&amp;nbsp;*&amp;nbsp;28))&amp;nbsp;/&amp;nbsp;28&amp;nbsp;&lt;br /&gt;&lt;b&gt;종성의&amp;nbsp;인덱스&amp;nbsp;:&lt;/b&gt;&amp;nbsp;(문자&amp;nbsp;-&amp;nbsp;0xAC00&amp;nbsp;-&amp;nbsp;(초성&amp;nbsp;인덱스&amp;nbsp;*&amp;nbsp;21&amp;nbsp;*&amp;nbsp;28)&amp;nbsp;-&amp;nbsp;(중성&amp;nbsp;인덱스&amp;nbsp;*&amp;nbsp;28))&lt;br /&gt;&lt;br /&gt;이&amp;nbsp;공식이&amp;nbsp;잘&amp;nbsp;이해가&amp;nbsp;되지&amp;nbsp;않는다면&amp;nbsp;아래&amp;nbsp;링크를&amp;nbsp;브라우저에&amp;nbsp;열어놓고&amp;nbsp;들여다보면&amp;nbsp;도움이&amp;nbsp;될겁니다.&lt;br /&gt;&lt;a href=&quot;https://www.unicode.org/charts/PDF/UAC00.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.unicode.org/charts/PDF/UAC00.pdf&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;이걸 파이썬&amp;nbsp;코드로&amp;nbsp;구현보면&amp;nbsp;다음과&amp;nbsp;같습니다. 어느분께는 도움이 되시길 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jybaek/jamos-toolkit&quot;&gt;https://github.com/jybaek/jamos-toolkit&lt;/a&gt;&lt;/p&gt;</description>
<category>python</category>
<category>유니코드</category>
<category>자모</category>
<category>자모분리</category>
<category>한글</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/790</guid>
<comments>https://jybaek.tistory.com/790#entry790comment</comments>
<pubDate>Thu, 02 May 2019 16:39:45 +0900</pubDate>
</item>
<item>
<title>Next'19 Extended Korea 뒷이야기</title>
<link>https://jybaek.tistory.com/789</link>
<description>&lt;p&gt;작년 Next'18 Extended에서 발표를 한게 엊그제 같은데 벌써 1년이 지났다. 매년 구글은 샌프란시스코에서 Google Cloud에 새로운 기술을 공식적으로 발표하고&amp;nbsp;announce하는데 그것이 세계 각지에서 Extended라는 이름의 행사로 다시 태어난다. 대개는 GDG, 혹은 &lt;a href=&quot;https://www.facebook.com/groups/googlecloudkorea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;사용자 그룹 커뮤니티&lt;/a&gt;에 의해서인데 이번 &lt;a href=&quot;https://cloud.withgoogle.com/next/sf/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Next'19&lt;/a&gt; 직후 세계 Extended 현황을 보면 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bf9huj/btquSh7m6S2/6o9TTb79zLg9Jp7qWihF61/img.png' data-lightbox='lightbox' data-alt='Next'19 Extended'&gt;&lt;img src='https://k.kakaocdn.net/dn/bf9huj/btquSh7m6S2/6o9TTb79zLg9Jp7qWihF61/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fbf9huj%2FbtquSh7m6S2%2F6o9TTb79zLg9Jp7qWihF61%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;Next'19 Extended&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;작년에는 발표자로 참석했었는데 올해는 GDG Cloud Korea의 organizer로 행사 준비와 발표를 동시에 진행하게 되었고, 그로인해서 여러가지 것들을 신경써야 했고 더 뜻 깊게 보낼 수 있었던 것 같다. 준비하는 과정에서 스트레스가 없었다면 그건 거짓말이지만 결과적으로 순조롭게 행사를 잘 마무리 할 수 있었고 소중한 경험으로 남게 되었다.&lt;/p&gt;
&lt;p&gt;한편, 위의 지도에 Extended 행사를 표기하기 위해서는 Google Next에서 제공하는 설문지를 작성해야 했는데 어떤 이유인지 설문을 작성했음에도 지도에 정상적으로 표기되지 않아서 애를 태우기도... 다행히 Google DevRel팀의 도움으로 결국은 지도에 Next'19 Extended Korea를 찍을 수 있었다. (이 문제로 꽤나 칭얼거렸는데 오히려 너무 적극적으로 도와주셔서 다시 한번 감사의 인사를 남긴다)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/HXMTv/btquTSsvJQj/5HYSWhHx9ecOEqj1RUNmCk/img.jpg' data-lightbox='lightbox' data-alt='등록 및 입장을 도와드리기 위해 페스타 공부중'&gt;&lt;img src='https://k.kakaocdn.net/dn/HXMTv/btquTSsvJQj/5HYSWhHx9ecOEqj1RUNmCk/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FHXMTv%2FbtquTSsvJQj%2F5HYSWhHx9ecOEqj1RUNmCk%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;등록 및 입장을 도와드리기 위해 페스타 공부중&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;약&amp;nbsp;한달전부터&amp;nbsp;행사장소를&amp;nbsp;섭외를&amp;nbsp;위해&amp;nbsp;고군분투&amp;nbsp;했으나&amp;nbsp;원하던&amp;nbsp;코엑스는&amp;nbsp;이미&amp;nbsp;예약이&amp;nbsp;잡혀있었고&amp;nbsp;차선으로&amp;nbsp;생각했던&amp;nbsp;캠퍼스서울도&amp;nbsp;다른&amp;nbsp;GDG&amp;nbsp;챕터의&amp;nbsp;행사가&amp;nbsp;잡혀있었다.&amp;nbsp;어쩔수&amp;nbsp;없이&amp;nbsp;멀리&amp;nbsp;양재aT센터로&amp;nbsp;장소를&amp;nbsp;정했는데&amp;nbsp;어쩌면&amp;nbsp;그&amp;nbsp;선택으로&amp;nbsp;인해&amp;nbsp;더&amp;nbsp;다양한&amp;nbsp;분들을&amp;nbsp;뵐&amp;nbsp;수&amp;nbsp;있었는지&amp;nbsp;모르지만&amp;nbsp;처음부터&amp;nbsp;여러모로&amp;nbsp;쉽지&amp;nbsp;않다는&amp;nbsp;생각을&amp;nbsp;하게&amp;nbsp;됐다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cJHZPc/btquTa8fPqw/COPNEHGrPIcK2NRw33mH6k/img.jpg' data-lightbox='lightbox' data-alt='트랙1을 위한 공간'&gt;&lt;img src='https://k.kakaocdn.net/dn/cJHZPc/btquTa8fPqw/COPNEHGrPIcK2NRw33mH6k/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcJHZPc%2FbtquTa8fPqw%2FCOPNEHGrPIcK2NRw33mH6k%2Fimg.jpg' data-filename=&quot;Image from iOS.jpg&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;트랙1을 위한 공간&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;비슷한&amp;nbsp;시기에&amp;nbsp;행사를&amp;nbsp;빛내줄&amp;nbsp;발표자를&amp;nbsp;공개모집했지만&amp;nbsp;사실&amp;nbsp;클라우드라는&amp;nbsp;범위의&amp;nbsp;경계가&amp;nbsp;애매한것도&amp;nbsp;있고&amp;nbsp;AWS나&amp;nbsp;Azure에&amp;nbsp;비해&amp;nbsp;사용자층이&amp;nbsp;얕은&amp;nbsp;GCP에서&amp;nbsp;연사를&amp;nbsp;모집하는&amp;nbsp;것은&amp;nbsp;쉽지&amp;nbsp;않았다.&amp;nbsp;다행히&amp;nbsp;우리&amp;nbsp;스태프&amp;nbsp;모두가&amp;nbsp;발표에&amp;nbsp;뜻이&amp;nbsp;있었고&amp;nbsp;요즘&amp;nbsp;핫한&amp;nbsp;기술인&amp;nbsp;Kubernetes쪽으로&amp;nbsp;연사자분들이&amp;nbsp;합류,&amp;nbsp;거기에&amp;nbsp;구글러&amp;nbsp;두분까지&amp;nbsp;가세되어&amp;nbsp;발표자 모집은 자연스럽게 해결되었다.&amp;nbsp;아, 함께&amp;nbsp;오거나이저를&amp;nbsp;하셨던&amp;nbsp;분들까지&amp;nbsp;적극적으로&amp;nbsp;합류.&amp;nbsp;천군만마가&amp;nbsp;따로&amp;nbsp;없었다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bMfzxI/btquSztGGZ6/EPtCsIFfkoRUN5u42PYKz0/img.jpg' data-lightbox='lightbox' data-alt='효율적으로 ML model을 서비스화 해보자는 오지연님의 세션'&gt;&lt;img src='https://k.kakaocdn.net/dn/bMfzxI/btquSztGGZ6/EPtCsIFfkoRUN5u42PYKz0/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbMfzxI%2FbtquSztGGZ6%2FEPtCsIFfkoRUN5u42PYKz0%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;효율적으로 ML model을 서비스화 해보자는 오지연님의 세션&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/ciS5kS/btquWM5uald/HhaPyuGumfslI0TY2sFcK0/img.jpg' data-lightbox='lightbox' data-alt='Next'19 샌프란시스코에 다녀오신 박정운님의 세션'&gt;&lt;img src='https://k.kakaocdn.net/dn/ciS5kS/btquWM5uald/HhaPyuGumfslI0TY2sFcK0/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FciS5kS%2FbtquWM5uald%2FHhaPyuGumfslI0TY2sFcK0%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;Next'19 샌프란시스코에 다녀오신 박정운님의 세션&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;커뮤니티&amp;nbsp;행사다보니&amp;nbsp;정해진&amp;nbsp;예산&amp;nbsp;안에서&amp;nbsp;많은걸을&amp;nbsp;준비하는게 사실&amp;nbsp;쉽지&amp;nbsp;않았다.&amp;nbsp;더욱이&amp;nbsp;공간&amp;nbsp;대관이&amp;nbsp;무료가&amp;nbsp;아닌&amp;nbsp;상황에서&amp;nbsp;욕심이&amp;nbsp;많아&amp;nbsp;다양한&amp;nbsp;세션을&amp;nbsp;준비했는데&amp;nbsp;점심시간&amp;nbsp;이전부터&amp;nbsp;행사가&amp;nbsp;진행되었음에도&amp;nbsp;참석자들을&amp;nbsp;대접할&amp;nbsp;다과가&amp;nbsp;부족한&amp;nbsp;것이&amp;nbsp;너무&amp;nbsp;안타까웠다.&amp;nbsp;부디&amp;nbsp;&amp;ldquo;구글&amp;rdquo;이&amp;nbsp;차린&amp;nbsp;행사인줄&amp;nbsp;아시고&amp;nbsp;차려진게&amp;nbsp;없었다고&amp;nbsp;불평하시는&amp;nbsp;분들은&amp;nbsp;없으셨기를&amp;nbsp;바랄뿐이다. (GDG와 사용자그룹의 콜라보 결과입니다)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bT24rK/btquVhyn5t2/OAI5RnYMrSHHVGF9q4Ismk/img.jpg' data-lightbox='lightbox' data-alt='세션 진행도중에도 복도를 지켜주고 계시는 Heroes'&gt;&lt;img src='https://k.kakaocdn.net/dn/bT24rK/btquVhyn5t2/OAI5RnYMrSHHVGF9q4Ismk/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbT24rK%2FbtquVhyn5t2%2FOAI5RnYMrSHHVGF9q4Ismk%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;세션 진행도중에도 복도를 지켜주고 계시는 Heroes&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;행사&amp;nbsp;당일 별다른&amp;nbsp;이슈는&amp;nbsp;없었다.&amp;nbsp;대부분의&amp;nbsp;스태프분들과는 이미 다른 행사에서 여러차례&amp;nbsp;합을&amp;nbsp;맞춰본&amp;nbsp;경험이 있었기에 충분히 스스로 알아서&amp;nbsp;제&amp;nbsp;역할을&amp;nbsp;수행해주셨다.&amp;nbsp;참가자&amp;nbsp;입장과 등록은&amp;nbsp;11시로&amp;nbsp;정해놓고&amp;nbsp;우리&amp;nbsp;스태프는&amp;nbsp;9시~10시&amp;nbsp;사이에 행사장에 도착하자고&amp;nbsp;공지를&amp;nbsp;날렸고 일찍&amp;nbsp;자리한&amp;nbsp;사람들끼리는&amp;nbsp;행사장&amp;nbsp;지하의&amp;nbsp;커피숍에서&amp;nbsp;여유롭게&amp;nbsp;모닝커피&amp;nbsp;한잔을&amp;nbsp;하기도.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/0gUkz/btquVgTLT2n/aNcWK01ozkqlwyYnMOVvHK/img.jpg' data-lightbox='lightbox' data-alt='행사 시작 2시간 전에 커피숍에서 최종 회의라고 쓰고 굿즈 구경중'&gt;&lt;img src='https://k.kakaocdn.net/dn/0gUkz/btquVgTLT2n/aNcWK01ozkqlwyYnMOVvHK/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2F0gUkz%2FbtquVgTLT2n%2FaNcWK01ozkqlwyYnMOVvHK%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;행사 시작 2시간 전에 커피숍에서 최종 회의라고 쓰고 굿즈 구경중&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cSPDXx/btquTSMMvjv/ekQgDmrJs0U6dVwywyeajk/img.jpg' data-lightbox='lightbox' data-alt='행사를 후원해주신 이스트소프트. 알약 인형이 최고 인기였다고.'&gt;&lt;img src='https://k.kakaocdn.net/dn/cSPDXx/btquTSMMvjv/ekQgDmrJs0U6dVwywyeajk/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcSPDXx%2FbtquTSMMvjv%2FekQgDmrJs0U6dVwywyeajk%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;행사를 후원해주신 이스트소프트. 알약 인형이 최고 인기였다고.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;스폰서&amp;nbsp;부스를&amp;nbsp;챙겨주고&amp;nbsp;등록데스크와&amp;nbsp;현수막을&amp;nbsp;세팅하면&amp;nbsp;얼추 행사 준비전 대부분의&amp;nbsp;일이&amp;nbsp;끝난다.&amp;nbsp;이번&amp;nbsp;행사의&amp;nbsp;경우&amp;nbsp;페스타로&amp;nbsp;처리했는데&amp;nbsp;스태프용 페스타 QR코드 사용법을&amp;nbsp;각자에게&amp;nbsp;숙지시켜 드리고&amp;nbsp;발표용&amp;nbsp;노트북까지&amp;nbsp;점검하면 정말로 준비 끝.&amp;nbsp;여유롭게&amp;nbsp;참가자를&amp;nbsp;입장시켰으며&amp;nbsp;첫&amp;nbsp;세션부터&amp;nbsp;마지막&amp;nbsp;엔딩세션까지&amp;nbsp;큰&amp;nbsp;이슈&amp;nbsp;없이&amp;nbsp;마무리&amp;nbsp;할&amp;nbsp;수&amp;nbsp;있었다.&amp;nbsp;그리고&amp;nbsp;홀가분한&amp;nbsp;마음으로&amp;nbsp;단체사진까지.&amp;nbsp;오신&amp;nbsp;분들은&amp;nbsp;어떤&amp;nbsp;마음으로&amp;nbsp;돌아가셨을까.&amp;nbsp;:-)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/crdnuc/btquS99ljdV/MnEGsHj9Cm7PK6h7UPApf0/img.jpg' data-lightbox='lightbox' data-alt='행사 끝나고 고생해주신 분들과 함께 단체 사진'&gt;&lt;img src='https://k.kakaocdn.net/dn/crdnuc/btquS99ljdV/MnEGsHj9Cm7PK6h7UPApf0/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fcrdnuc%2FbtquS99ljdV%2FMnEGsHj9Cm7PK6h7UPApf0%2Fimg.jpg' &gt;&lt;/span&gt;&lt;figcaption&gt;행사 끝나고 고생해주신 분들과 함께 단체 사진&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;이번&amp;nbsp;익스텐디드&amp;nbsp;행사는&amp;nbsp;나를&amp;nbsp;포함한&amp;nbsp;오거나이저&amp;nbsp;3명과&amp;nbsp;스태프,&amp;nbsp;스폰서&amp;nbsp;부스와&amp;nbsp;참가자를&amp;nbsp;모두&amp;nbsp;합쳐&amp;nbsp;200명&amp;nbsp;정도&amp;nbsp;다녀가셨는데&amp;nbsp;어떻게&amp;nbsp;하면&amp;nbsp;이렇게&amp;nbsp;모인&amp;nbsp;사람들이&amp;nbsp;더&amp;nbsp;즐겁게&amp;nbsp;행사를&amp;nbsp;즐길&amp;nbsp;수&amp;nbsp;있을지는&amp;nbsp;앞으로&amp;nbsp;계속 고민해야 할 과제가&amp;nbsp;되겠다.&lt;/p&gt;
&lt;p&gt;다음에도 잘 부탁드립니다. :-)&amp;nbsp;&lt;/p&gt;</description>
<category>리뷰</category>
<category>2019</category>
<category>Cloud</category>
<category>extended</category>
<category>GDG Cloud</category>
<category>Google Cloud</category>
<category>Google Next</category>
<category>사용자그룹</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/789</guid>
<comments>https://jybaek.tistory.com/789#entry789comment</comments>
<pubDate>Mon, 29 Apr 2019 13:35:52 +0900</pubDate>
</item>
<item>
<title>링크드인에 코세라 자격증 추가하기</title>
<link>https://jybaek.tistory.com/788</link>
<description>&lt;p&gt;본 포스팅에서는 링크드인에 코세라 자격증을 추가하는 방법을 알아보도록 합니다. 우선 코세라에 본인 계정으로 로그인 후에 &lt;b&gt;[나의 강좌]&lt;/b&gt;로 이동합니다. 그리고 아래 이미지처럼 &lt;b&gt;&quot;성취도&quot;&lt;/b&gt;로 표시되어 있는 카테고리를 선택하도록 합니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cyxkgA/btquJHLLg5C/I0rsZAaIKLr5Lc8GUkYxk0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cyxkgA/btquJHLLg5C/I0rsZAaIKLr5Lc8GUkYxk0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcyxkgA%2FbtquJHLLg5C%2FI0rsZAaIKLr5Lc8GUkYxk0%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;해당 페이지에서는 그동안 본인이 이수했던 강좌 목록을 확인할 수 있습니다. 많이 보이시나요? 아니면 더 분발해야겠다는 생각이 드시나요? 일단 여기서는 제가 수료한 Launching into Machine Learning 강좌를 예로 들겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bCKkbm/btquJtAdOID/XLcA32Mm8EFIJDeWq3bqlk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bCKkbm/btquJtAdOID/XLcA32Mm8EFIJDeWq3bqlk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbCKkbm%2FbtquJtAdOID%2FXLcA32Mm8EFIJDeWq3bqlk%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #333333;&quot;&gt;이제 링크드인에 게시할 강좌에&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;b&gt;&quot;LinkedIn에 추가&quot;&lt;/b&gt;&lt;span style=&quot;color: #333333;&quot;&gt;를 선택합니다. 그럼 아래와 같이 링크드인에 자격정보 등록을 위해 필요한 입력 값들이 모두 출력됩니다. 이제 이 값들을 링크드인에 하나씩 복사해서 붙여넣기 해주시면 됩니다.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/zsq4C/btquK91RBYa/ufrqvyj6GXBT15eJ6Cposk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/zsq4C/btquK91RBYa/ufrqvyj6GXBT15eJ6Cposk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fzsq4C%2FbtquK91RBYa%2Fufrqvyj6GXBT15eJ6Cposk%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;위에서 복사한 값들을 &lt;a href=&quot;https://www.linkedin.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;링크드인&lt;/a&gt;으로 접속해서 자격정보를 아래와 같이 추가해보도록 합시다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/dqOUCp/btquKeWSklI/7O5JTFfY6zDFdkYRdtiDXk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/dqOUCp/btquKeWSklI/7O5JTFfY6zDFdkYRdtiDXk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FdqOUCp%2FbtquKeWSklI%2F7O5JTFfY6zDFdkYRdtiDXk%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;이제 저장 버튼을 눌러주면 아래와 같이 자격정보란에 &lt;span style=&quot;color: #333333;&quot;&gt;Launching into Machine Learning&lt;span&gt;가&lt;/span&gt;&lt;/span&gt;&amp;nbsp;추가된 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/dHFkfS/btquI0ZhEww/240SONtgr0twL3kkO9OraK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/dHFkfS/btquI0ZhEww/240SONtgr0twL3kkO9OraK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FdHFkfS%2FbtquI0ZhEww%2F240SONtgr0twL3kkO9OraK%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;축하드립니다. 링크드인에 이력 한줄이 추가되셨습니다. 간단한 과정이지만 누군가에게는 도움이 되기를 바랍니다.&lt;/p&gt;</description>
<category>길 잃은 게시물</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/788</guid>
<comments>https://jybaek.tistory.com/788#entry788comment</comments>
<pubDate>Tue, 23 Apr 2019 13:55:23 +0900</pubDate>
</item>
<item>
<title>[Coursera] Launching into Machine Learning</title>
<link>https://jybaek.tistory.com/787</link>
<description>&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bYHLIr/btquMCPGZpe/tEOQL06PvPtqeGezaBgVNk/img.jpg' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bYHLIr/btquMCPGZpe/tEOQL06PvPtqeGezaBgVNk/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbYHLIr%2FbtquMCPGZpe%2FtEOQL06PvPtqeGezaBgVNk%2Fimg.jpg' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;구글 스터디잼 중에서 머신러닝 중급 과정을 통해 코세라 강의를 한달동안 무료로 수강할 수 있는 기회를 얻었습니다. 이번에 학습하게된 코스는 &lt;a href=&quot;https://www.coursera.org/learn/launching-machine-learning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Launching into Machine Learning&lt;/a&gt;&amp;nbsp; 으로 해당 과정에서는 머신러닝의 역사적인 이야기부터 모델, 하이퍼파리미터, GCP Datalab, 빅쿼리 등 폭 넓은 내용을 다루고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/0CG6u/btquHaUYMIK/sLKVpLL172ebpTNVUtbuuk/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/0CG6u/btquHaUYMIK/sLKVpLL172ebpTNVUtbuuk/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2F0CG6u%2FbtquHaUYMIK%2FsLKVpLL172ebpTNVUtbuuk%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;코스중에는&amp;nbsp;&lt;a href=&quot;https://playground.tensorflow.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tensorflow 홈페이지에서 제공되는 playground&lt;/a&gt;를 통해서 다양한 하이퍼파라미터와 hidden layers를 설정하면서 여러가지 현실적인 문제를 직접 경험할 수 있도록 유도하는 과정도 있습니다. 그 과정에서 자연스럽게 하이퍼파라미터 튜닝의 중요성을 깨우치게 될 것으로 기대됩니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bkLQ11/btquGWo9wGD/YXF0eFbd9h7bmiFSYCuwG1/img.png' data-lightbox='lightbox' data-alt='https://playground.tensorflow.org'&gt;&lt;img src='https://k.kakaocdn.net/dn/bkLQ11/btquGWo9wGD/YXF0eFbd9h7bmiFSYCuwG1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbkLQ11%2FbtquGWo9wGD%2FYXF0eFbd9h7bmiFSYCuwG1%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;https://playground.tensorflow.org&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;batch size에 따라서 loss가 어떻게 변화하는지 상세하게 다룹니다. 여기서 이야기하는 배치사이즈는 우리가 작성하는 모델에 한번에 얼만큼의 양을 학습시킬 것인지를 결정하는 파라미터인데 배치사이즈가 작으면 loss가 민감하게 움직이고 반대로 큰 배치는 부드러운 그래프를 나타냅니다. 하지만 너무 커져버리면 정상적으로 글로벌 미니멈에 도달하지 못할수도 있고 큰 메모리를 필요로 하기 때문에 부담스럽게 됩니다. ML 엔지니어들이 항상 고민하는 부분이겠죠.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/mFJgT/btquI2aSgfV/cvWaCUKZyHOeKC7HsCo9l1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/mFJgT/btquI2aSgfV/cvWaCUKZyHOeKC7HsCo9l1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FmFJgT%2FbtquI2aSgfV%2FcvWaCUKZyHOeKC7HsCo9l1%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;사실 머신러닝의 절반 이상은 데이터를 다루는 일이라고 볼 수 있는데 &lt;span style=&quot;color: #333333;&quot;&gt;아래 nips에 등재되어 있는 페이퍼가 그런 내용을 잘 나타내주고 있습니다.&amp;nbsp;&lt;/span&gt;이 코스는 데이터를 다루는 과정에도 충실합니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cit8WQ/btquMBwBFsk/6PnO28ob1TNogIDEAFJLZ1/img.png' data-lightbox='lightbox' data-alt='http://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf'&gt;&lt;img src='https://k.kakaocdn.net/dn/cit8WQ/btquMBwBFsk/6PnO28ob1TNogIDEAFJLZ1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fcit8WQ%2FbtquMBwBFsk%2F6PnO28ob1TNogIDEAFJLZ1%2Fimg.png' &gt;&lt;/span&gt;&lt;figcaption&gt;http://papers.nips.cc/paper/5656-hidden-technical-debt-in-machine-learning-systems.pdf&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Google Cloud Platform 위에 datalab을 설치하고 BigQuery를 통해 데이터를 다루는 데모를 퀵랩에서 실습하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/y6Jog/btquLa0xozI/GNYjZYC7wL6nqHksrDfTaK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/y6Jog/btquLa0xozI/GNYjZYC7wL6nqHksrDfTaK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fy6Jog%2FbtquLa0xozI%2FGNYjZYC7wL6nqHksrDfTaK%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;머신러닝에 입문하기 위해 대부분의 사람들이 흔히 이야기하는 필독서나 영상들이 몇 개 있는데 무엇을 먼저 보든 그것은 자유일겁니다. 하지만 분명한건 그런 리스트에 포함되기에 코세라의 본과정 Launching&amp;nbsp;into&amp;nbsp;Machine&amp;nbsp;Learning는 충분한 구성을 갖추고 있습니다. 기회가 된다면 꼭 한번 들어보시는걸 추천드립니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/SF8xu/btquLbFdnVG/lLybTlOIbyqFz1ElLtjKT0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/SF8xu/btquLbFdnVG/lLybTlOIbyqFz1ElLtjKT0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FSF8xu%2FbtquLbFdnVG%2FlLybTlOIbyqFz1ElLtjKT0%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;모든 랩을 수행하면&amp;nbsp;&lt;b&gt;[나의 강좌]&lt;/b&gt;에서 수료한 강좌를 클릭해서 수료증을 확인할 수 있습니다. 그럴싸한 오답으로 우리를 유혹하는 퀴즈를 모두 풀어내고 취득한 수료증이기 때문에 더 뿌듯하게 느껴집니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cijg1e/btquJulyD9e/anNLRpjMCcA3vKLslarCRK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cijg1e/btquJulyD9e/anNLRpjMCcA3vKLslarCRK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fcijg1e%2FbtquJulyD9e%2FanNLRpjMCcA3vKLslarCRK%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;위에서 확인한 수료증은 링크드인에 게시할 수 있는데 관련 내용은 아래 링크를 통해 확인해보세요.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jybaek.tistory.com/788&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jybaek.tistory.com/788&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;또한 스터디잼에 대한 공지, 소식과 정보는 아래 페이스북 그룹을 통해 얻으실 수 있습니다. 잼 진행간의 문제나 질문등을 통해 다양한 인사이트를 얻으실 수 있을 것으로 기대됩니다.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/groups/studyjamkorea/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.facebook.com/groups/studyjamkorea/&lt;/a&gt;&lt;/p&gt;</description>
<category>리뷰</category>
<category>구글</category>
<category>머신러닝</category>
<category>스터디잼</category>
<category>코세라</category>
<category>퀵랩</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/787</guid>
<comments>https://jybaek.tistory.com/787#entry787comment</comments>
<pubDate>Mon, 22 Apr 2019 13:55:28 +0900</pubDate>
</item>
<item>
<title>ImportError: numpy.core.xxx failed to import</title>
<link>https://jybaek.tistory.com/786</link>
<description>&lt;pre id=&quot;code_1555659170771&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
ModuleNotFoundError: No module named 'numpy.core._multiarray_umath'
ImportError: numpy.core.multiarray failed to import

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &quot;&amp;lt;frozen importlib._bootstrap&amp;gt;&quot;, line 968, in _find_and_load
SystemError: &amp;lt;class '_frozen_importlib._ModuleLockManager'&amp;gt; returned a result with an error set
ImportError: numpy.core._multiarray_umath failed to import
ImportError: numpy.core.umath failed to import
2019-04-19 16:29:29.263208: F tensorflow/python/lib/core/bfloat16.cc:675] Check failed: PyBfloat16_Type.tp_base != nullptr
Abort trap: 6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;오픈소스 프로젝트를 진행하기 위해 콘다 가상환경에 소스코드를 GitHub에서 내려받고 r&lt;span style=&quot;color: #333333;&quot;&gt;equirements.txt&lt;/span&gt;의 설치를 진행했습니다.&lt;/p&gt;
&lt;pre id=&quot;code_1555659266040&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 학습을 위해 Train 을 진행한 순간 에러가 발생했는데요, 의아해서 python 프롬프트로 접속해서 tensorflow 를 import 해보니 위와 같은 에러가 발생을 하네요. 설치된 numpy와 tensorflow의 버전 호환문제로 생각되는데 r&lt;span style=&quot;color: #333333;&quot;&gt;equirements.txt&lt;/span&gt;의 내용을보면 다음과 같습니다.&lt;/p&gt;
&lt;pre id=&quot;code_1555659389568&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;...
tensorflow
numpy==1.13.3
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;numpy는 버전이 명시되어 있는 반면에 tensorflow는 버전이 따로 명시되어 있지 않네요. 그렇기 때문에 tensorflow는 stable한 최신버전이 설치되었고 호환성에서 문제가 발생되었습니다. 이 문제의 해결방법은 간단합니다. numpy를 삭제하고 다시 설치해주면 되겠죠&lt;/p&gt;
&lt;pre id=&quot;code_1555659500839&quot; class=&quot;python&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;pip uninstall numpy
pip install numpy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이런 문제를 미연에 방지하기 위해서는 requirements.txt 를 작성할 때 신경써야겠습니다.&lt;/p&gt;</description>
<category>기계학습</category>
<category>Import</category>
<category>importError</category>
<category>numpy</category>
<category>requirements.txt</category>
<category>tensorflow</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/786</guid>
<comments>https://jybaek.tistory.com/786#entry786comment</comments>
<pubDate>Fri, 19 Apr 2019 16:40:27 +0900</pubDate>
</item>
<item>
<title>RuntimeError: DataLoader worker (pid 13881) is killed by signal: Bus error.</title>
<link>https://jybaek.tistory.com/785</link>
<description>&lt;p&gt;&lt;i&gt;docker&lt;/i&gt;&amp;nbsp;&lt;i&gt;container&lt;/i&gt;&amp;nbsp;내부에서 &lt;i&gt;pytorch&lt;/i&gt; 로 기계학습을 진행하는 도중에 아래와 같은 에러메시지가 발생되는 경우가 있습니다.&lt;/p&gt;
&lt;pre id=&quot;code_1555289077212&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;RuntimeError: DataLoader worker (pid 13881) is killed by signal: Bus error.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 에러는 도커로 컨테이너를 생성하게 되면 호스트와 컨테이너는 공유하는 메모리 공간이 생기게 되는데 이 공간에 여유가 없어서 발생되는 에러입니다. 리눅스의 경우에는 컨테이너 내부에서 아래와 같이 &lt;i&gt;df&lt;/i&gt;&amp;nbsp; 명령어로 확인이 가능합니다.&lt;/p&gt;
&lt;pre id=&quot;code_1555289206535&quot; class=&quot;html xml&quot; data-ke-type=&quot;codeblock&quot;&gt;&lt;code&gt;(base) root@2a48ab5fd651:~/ml# df -h
Filesystem      Size  Used Avail Use% Mounted on
overlay         427G   59G  347G  15% /
tmpfs            64M     0   64M   0% /dev
tmpfs            95G     0   95G   0% /sys/fs/cgroup
/dev/bcache0     15T  108G   14T   1% /raid
/dev/sda3       427G   59G  347G  15% /etc/hosts
shm             2.0G  579M  1.5G  29% /dev/shm
tmpfs            95G   12K   95G   1% /proc/driver/nvidia
tmpfs            19G  2.3M   19G   1% /run/nvidia-persistenced/socket
udev             95G     0   95G   0% /dev/nvidia1
tmpfs            95G     0   95G   0% /proc/asound
tmpfs            95G     0   95G   0% /proc/acpi
tmpfs            95G     0   95G   0% /proc/scsi
tmpfs            95G     0   95G   0% /sys/firmware&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;shared memory&lt;/i&gt; 를 나타내는 &lt;i&gt;shm&lt;/i&gt; 부분을 살펴보면 되는데 컨테이너를 생성하면 기본으로 128MB가 할당됩니다. 호스트의 메모리에 따라 &lt;i&gt;shm&lt;/i&gt; 을 충분히 설정할 수 있는데 컨테이너 생성시에&amp;nbsp;&lt;span style=&quot;color: #f41a18;&quot;&gt;&lt;i&gt;--shm-size&lt;/i&gt;&lt;/span&gt; 옵션을 통해 지정할 수 있습니다. 위에 예제는 &lt;i&gt;--shm-size 2G&lt;/i&gt; 로 지정한 경우입니다.&lt;/p&gt;
&lt;p&gt;누군가에게는 도움이 되셨기를 바랍니다.&lt;/p&gt;</description>
<category>docker</category>
<category>Bus</category>
<category>Container</category>
<category>docker</category>
<category>error</category>
<category>shm-size</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/785</guid>
<comments>https://jybaek.tistory.com/785#entry785comment</comments>
<pubDate>Mon, 15 Apr 2019 09:50:13 +0900</pubDate>
</item>
<item>
<title>[책] 실습과 그림으로 배우는 리눅스 구조</title>
<link>https://jybaek.tistory.com/784</link>
<description>&lt;p&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793&amp;amp;tid=review&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[부제: 개발자가 알아야 하는 OS와 하드웨어 기초]&lt;/a&gt; 제목과 책 표지만 놓고 보면 초보들이나 읽는 그런 책으로 치부될 수 있겠다는 생각이 들었다. 이 책은 스마트폰에서 클라우드까지 우리 사회에 IT가 있는 곳이라면 상당히 많은 곳에 침투해있는 리눅스의 구조를 다루는 책이다. 그림과 C 언어 코드로 쉽게 설명하고 있지만 배경지식이 전혀 없는 이들에게는 다소 어려울 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/baoOb9/btqubeRqoRX/828KxqEpB0X6Uke5mdjBd0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/baoOb9/btqubeRqoRX/828KxqEpB0X6Uke5mdjBd0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FbaoOb9%2FbtqubeRqoRX%2F828KxqEpB0X6Uke5mdjBd0%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;리눅스를 접해본 사용자라면 다들 겪는 명쾌한 답이 없는 문제인데 free 영역은 사용자 관점에서&amp;nbsp;available 영역인지, OS 관점에서&amp;nbsp;available 에 대한 부분이 있겠다. 책에서는 이 문제에 대해 그림으로 가볍게 다뤄주고 있겠다. OS 레벨에서 free 는 buff / cached 를 포함하고 있지 않지만 필요하다면 언제든지 가져다 사용할 수 있도록 설계되어 있다. 그림 한장으로 꽤 명쾌하게 풀이되고 있다고 할 수 있겠다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/zRwRo/btquc3ajIF6/j9BIGUtfKIMZ0PW1Zy3Wb1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/zRwRo/btquc3ajIF6/j9BIGUtfKIMZ0PW1Zy3Wb1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FzRwRo%2Fbtquc3ajIF6%2Fj9BIGUtfKIMZ0PW1Zy3Wb1%2Fimg.png' data-filename=&quot;blob&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;여기 또 한장의 대표되는 그림을 가져왔는데 리눅스에서 페이지와 가상메모리의 관계에 대한 설명이다. 프로세스가 취하는 메모리가 실제 메모리의 pysical address 가 아닌&amp;nbsp;virtual address 에 매핑되고 있으며 그 매핑되는 정보는 페이지 테이블에 기록되어 있다는 그림이다. 이런 부분은 사실 우리가 평소에 신경 쓸 필요가 전혀 없게 느껴지지만 정작 로우 레벨의 프로그래밍이나 롱런( 꺼지지 않고 계속 메모리에 상주해야 하는 데몬 )해야 하는 프로그램을 개발하다보면 결국 어느순간 들여다봐야 하는 부분이다. 아주 작은 메모리 누수가 언제 우리 발등을 찍을지 모르니까.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/AaljQ/btqubfCMgga/j9FYpWpKF2sGOXnOm35VVK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/AaljQ/btqubfCMgga/j9FYpWpKF2sGOXnOm35VVK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FAaljQ%2FbtqubfCMgga%2Fj9FYpWpKF2sGOXnOm35VVK%2Fimg.png' &gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;마무리&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;본인은 이 책을 대부분 복습과 정리하는 느낌으로 훌훌 읽어볼 수 있었지만 갓 리눅스에 입문하는 사람에게 권할 수 있겠느냐는 질문에는 글쎄. C 언어를 완전히 무시하고는 보기 힘든 책일수도 있다. 또한 한번이라도 리눅스를 다뤄봤어야 조금은 편하게 읽어볼 수 있겠다. 시스템콜을 설명하기 위해 어쩔 수 없이 작성되어 있는 C 코드를 모두 무시하고 그냥 감으로 책을 읽겠다는 사람에게는 추천 할 수도 있다. 하지만 코드를 한줄한줄 다 파악해야 직성이 풀리는 독자에게는 권하지 않는다. 반대로 리눅스도 살짝 다뤄봤고, C 언어 코드도 스윽 보면 느낌오는 독자에게 이 책은 배경지식을 한층 더 업그레이드 해 줄 것이 분명하며 리눅스를 더 깊이 있게 다룰 수 있게 될 것이라고 확신하며 추천한다.&lt;/p&gt;</description>
<category>책</category>
<category>나는리뷰어다</category>
<category>책</category>
<category>한빛미디어</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/784</guid>
<comments>https://jybaek.tistory.com/784#entry784comment</comments>
<pubDate>Mon, 08 Apr 2019 09:32:37 +0900</pubDate>
</item>
<item>
<title>Usage TPU in Google Colaboratory</title>
<link>https://jybaek.tistory.com/783</link>
<description>&lt;p&gt;Colab의 사용권한을 신청하고 accept 되어야만 사용할 수 있었던 시절이 있었는데 이제는 너무나 보편화 되었고 K80 GPU는 물론 TPU까지 마음껏 굴려볼 수 있는 상태가 되었습니다. 참고글: &lt;a href=&quot;https://jybaek.tistory.com/686&quot;&gt;Google Colaboratory를 아시나요?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/PTHsX/btqt1kqildf/g2kKo37l09uE4MMul6RU9K/img.png' data-lightbox='lightbox' data-alt='Colab 신청이 accept 되었다는 메일. 호랑이 담배 피던 시절.'&gt;&lt;img src='https://k.kakaocdn.net/dn/PTHsX/btqt1kqildf/g2kKo37l09uE4MMul6RU9K/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FPTHsX%2Fbtqt1kqildf%2Fg2kKo37l09uE4MMul6RU9K%2Fimg.png' width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;Colab 신청이 accept 되었다는 메일. 호랑이 담배 피던 시절.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;하지만 막상 찾아보면 TPU 사용예제가 많이 안보이는데 TensorFlow 공식 예제가 너무 잘되어 있기 때문일까요? 아무튼 한글 자료는 턱없이 부족한데 도움이 될 누군가를 위해 메모로 남겨두도록 합니다. 이 글은 tf 1.13 버전을 기반으로 하고 있기 때문에 keras가 공식적으로 tensorflow 안에 모듈로 자리 잡고 있는 상태입니다. 다음은 &lt;a href=&quot;https://www.tensorflow.org/tutorials&quot;&gt;TensorFlow 공식 홈페이지에 있는 MNIST 예제코드&lt;/a&gt;입니다.&lt;/p&gt;
&lt;pre class=&quot;stylus&quot;&gt;&lt;code&gt;import tensorflow as tf
mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(512, activation=tf.nn.relu),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제를 Colaboratory에서 TPU를 사용해서 돌려볼텐데 우선 Colab의 런타임 환경을 TPU로 변경해줘야합니다. 상단 메뉴바에서 [런타임 -&amp;gt; 런타임 설정]을 찾아서 클릭하도록 합니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/xXaa2/btqt3Iwt7KL/oCZ3IVktkAbDKJ9CKADyi0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/xXaa2/btqt3Iwt7KL/oCZ3IVktkAbDKJ9CKADyi0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FxXaa2%2Fbtqt3Iwt7KL%2FoCZ3IVktkAbDKJ9CKADyi0%2Fimg.png' width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;이후 출력되는 팝업에서 하드웨어 가속기를 TPU로 설정해줍니다.&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/Kp4EG/btqt4zTB9oQ/WIfq6dc4nTgSwQAOEYLsC0/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/Kp4EG/btqt4zTB9oQ/WIfq6dc4nTgSwQAOEYLsC0/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FKp4EG%2Fbtqt4zTB9oQ%2FWIfq6dc4nTgSwQAOEYLsC0%2Fimg.png' width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;이제 준비가 끝났으니 코드를 약간 수정해주도록 합니다. keras 의 경우에 하드웨어에 GPU 존재 유무에 따라서 자동으로 하드웨어 가속기를 잡아주지만 TPU 같은 경우에는 별도로 잡아줘야 하는 사소한 불편함이 있습니다. 무슨이야기인지 모르시는 분들을 위해 조금 더 부연설명을 하자면 위에 MNIST 예제 코드가 GPU가 없는 환경에서는 CPU로 모델 학습이 진행되고, GPU가 있는 환경에서는 GPU를 이용해서 학습을 진행된다는 이야기 입니다. 아무튼 TPU 사용을 위해 소스코드 일부를 수정해야 하는건 그 강력함에 비하면 소소하겠죠.&lt;/p&gt;
&lt;p&gt;일단 위에서 &lt;i&gt;&lt;code&gt;tf.keras.models.Sequential&lt;/code&gt;&lt;/i&gt; 로 생성한 &lt;i&gt;&lt;code&gt;model&lt;/code&gt;&lt;/i&gt; 을 tpu 모델로 변경해줘야 합니다. 아래처럼 말이죠.&lt;/p&gt;
&lt;pre class=&quot;stylus&quot;&gt;&lt;code&gt;import os
tpu_model = tf.contrib.tpu.keras_to_tpu_model(
    model,
    strategy=tf.contrib.tpu.TPUDistributionStrategy(
        tf.contrib.cluster_resolver.TPUClusterResolver(tpu='grpc://' + os.environ['COLAB_TPU_ADDR'])
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위에 코드는 그대로 복사 붙여넣기해서 사용해도 됩니다. &lt;i&gt;model&lt;/i&gt; 이라는 변수 이름만 유효하다면요. 그리고 그 다음에는 학습과 평가를 위한 &lt;i&gt;model.fit()&lt;/i&gt;, &lt;i&gt;model.evaluate()&lt;/i&gt; 도 위에서 변경해준 &lt;i&gt;tpu_model&lt;/i&gt; 을 사용하도록 변경해줍니다. 정말 다른 부분은 아무것도 수정하지 않고 &lt;i&gt;model&lt;/i&gt; -&amp;gt; tpu_model 로 다시 잡아줬을 뿐입니다.&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;&lt;code&gt;tpu_model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

tpu_model.fit(x_train, y_train, epochs=5)
tpu_model.evaluate(x_test, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 모델을 돌려볼까요?&lt;/p&gt;
&lt;pre class=&quot;less&quot;&gt;&lt;code&gt;WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.
For more information, please see:
  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md
  * https://github.com/tensorflow/addons
If you depend on functionality not listed there, please file an issue.

INFO:tensorflow:Querying Tensorflow master (grpc://10.46.73.154:8470) for TPU system metadata.
INFO:tensorflow:Found TPU system:
INFO:tensorflow:*** Num TPU Cores: 8
INFO:tensorflow:*** Num TPU Workers: 1
INFO:tensorflow:*** Num TPU Cores Per Worker: 8
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:CPU:0, CPU, -1, 4055455857912207420)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:XLA_CPU:0, XLA_CPU, 17179869184, 3842762595509406304)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:0, TPU, 17179869184, 5241287887114469441)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:1, TPU, 17179869184, 12764949589812289195)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:2, TPU, 17179869184, 1400418604524209240)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:3, TPU, 17179869184, 9299367928412358572)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:4, TPU, 17179869184, 4679910220033700852)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:5, TPU, 17179869184, 12582914926270259941)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:6, TPU, 17179869184, 9862471167866310413)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU:7, TPU, 17179869184, 18013826450553126883)
INFO:tensorflow:*** Available Device: _DeviceAttributes(/job:worker/replica:0/task:0/device:TPU_SYSTEM:0, TPU_SYSTEM, 17179869184, 4154843896672514673)
WARNING:tensorflow:tpu_model (from tensorflow.contrib.tpu.python.tpu.keras_support) is experimental and may change or be removed at any time, and without warning.
Epoch 1/5
INFO:tensorflow:New input shapes; (re-)compiling: mode=train (# of cores 8), [TensorSpec(shape=(4,), dtype=tf.int32, name='core_id0'), TensorSpec(shape=(4, 28, 28), dtype=tf.float32, name='flatten_input_10'), TensorSpec(shape=(4, 1), dtype=tf.int32, name='dense_1_target_10')]
INFO:tensorflow:Overriding default placeholder.
INFO:tensorflow:Cloning Adam {'lr': 0.0010000000474974513, 'beta_1': 0.8999999761581421, 'beta_2': 0.9990000128746033, 'decay': 0.0, 'epsilon': 1e-07, 'amsgrad': False}
INFO:tensorflow:Remapping placeholder for flatten_input
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/tpu/python/tpu/keras_support.py:302: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.
Instructions for updating:
Use tf.cast instead.
INFO:tensorflow:KerasCrossShard: &amp;lt;tensorflow.python.keras.optimizers.Adam object at 0x7f41cce154a8&amp;gt; []
INFO:tensorflow:Started compiling
INFO:tensorflow:Finished compiling. Time elapsed: 1.2388334274291992 secs
INFO:tensorflow:Setting weights on TPU model.
INFO:tensorflow:CPU -&amp;gt; TPU lr: 0.0010000000474974513 {0.001}
INFO:tensorflow:CPU -&amp;gt; TPU beta_1: 0.8999999761581421 {0.9}
INFO:tensorflow:CPU -&amp;gt; TPU beta_2: 0.9990000128746033 {0.999}
INFO:tensorflow:CPU -&amp;gt; TPU decay: 0.0 {0.0}
WARNING:tensorflow:Cannot update non-variable config: epsilon
WARNING:tensorflow:Cannot update non-variable config: amsgrad
60000/60000 [==============================] - 22s 374us/sample - loss: 0.2207 - acc: 0.9344
Epoch 2/5
60000/60000 [==============================] - 18s 299us/sample - loss: 0.0972 - acc: 0.9702
Epoch 3/5
60000/60000 [==============================] - 18s 308us/sample - loss: 0.0686 - acc: 0.9781
Epoch 4/5
60000/60000 [==============================] - 19s 309us/sample - loss: 0.0541 - acc: 0.9824
Epoch 5/5
60000/60000 [==============================] - 19s 314us/sample - loss: 0.0420 - acc: 0.9864
INFO:tensorflow:New input shapes; (re-)compiling: mode=eval (# of cores 8), [TensorSpec(shape=(4,), dtype=tf.int32, name='core_id_10'), TensorSpec(shape=(4, 28, 28), dtype=tf.float32, name='flatten_input_10'), TensorSpec(shape=(4, 1), dtype=tf.int32, name='dense_1_target_10')]
INFO:tensorflow:Overriding default placeholder.
INFO:tensorflow:Cloning Adam {'lr': 0.0010000000474974513, 'beta_1': 0.8999999761581421, 'beta_2': 0.9990000128746033, 'decay': 0.0, 'epsilon': 1e-07, 'amsgrad': False}
INFO:tensorflow:Remapping placeholder for flatten_input
INFO:tensorflow:KerasCrossShard: &amp;lt;tensorflow.python.keras.optimizers.Adam object at 0x7f41cce5b390&amp;gt; []
INFO:tensorflow:Started compiling
INFO:tensorflow:Finished compiling. Time elapsed: 0.5766003131866455 secs
 9952/10000 [============================&amp;gt;.] - ETA: 0s - loss: 0.0649 - acc: 0.9808INFO:tensorflow:New input shapes; (re-)compiling: mode=eval (# of cores 8), [TensorSpec(shape=(2,), dtype=tf.int32, name='core_id_10'), TensorSpec(shape=(2, 28, 28), dtype=tf.float32, name='flatten_input_10'), TensorSpec(shape=(2, 1), dtype=tf.int32, name='dense_1_target_10')]
INFO:tensorflow:Overriding default placeholder.
INFO:tensorflow:Remapping placeholder for flatten_input
INFO:tensorflow:KerasCrossShard: &amp;lt;tensorflow.python.keras.optimizers.Adam object at 0x7f41cce5b390&amp;gt; []
INFO:tensorflow:Started compiling
INFO:tensorflow:Finished compiling. Time elapsed: 0.41895103454589844 secs
10000/10000 [==============================] - 4s 411us/sample - loss: 0.0646 - acc: 0.9809
[0.06464320362857542, 0.9809]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TF2.0 에서는 &lt;i&gt;contrib&lt;/i&gt; 모듈이 탑재되지 않을 예정이라고 하네요. 지금 당장은 아무 문제가 없죠. worker 1개가 동작하고 있고 안에서 9개의 TPU Core가 돌고 있습니다. 어마어마하지만 사실 위의 예제에서는 빛을 보지 못합니다. 대략 epoch당 18-22초 정도 걸렸는데 Colab GPU(k80)의 경우 8-9초 안에 끝냅니다. 더 슬픈건 CPU의 경우에는 16초에 끝나네요. 오히려 TPU처리가 느린건 병렬처리 연산에 드는 비용이 MNIST의 행렬연산에 드는 비용보다 더 비싸기 때문인데 이 부분에 대한 언급은 글의 의도와 맞지 않기 때문에 넘어가도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;자, 이걸로 Colab에서 TPU 사용해보는 예제는 끝입니다. 정말 심플하죠? 혹시라도 요즘 Colab에 TPU가 핫하다는데 덜컥 사용해보지 못하고 계셨던 분들이 있었다면 도움이 되셨기를 바랍니다. :-)&lt;/p&gt;</description>
<category>기계학습</category>
<category>Colaboratory</category>
<category>Google</category>
<category>GPU</category>
<category>keras</category>
<category>tensorflow</category>
<category>TPU</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/783</guid>
<comments>https://jybaek.tistory.com/783#entry783comment</comments>
<pubDate>Wed, 03 Apr 2019 00:20:51 +0900</pubDate>
</item>
<item>
<title>Hello web assembly</title>
<link>https://jybaek.tistory.com/782</link>
<description>&lt;p&gt;오래전에 &lt;b&gt;&lt;i&gt;C/C++&lt;/i&gt;&lt;/b&gt; 로 만든 모듈을 &lt;i&gt;python&lt;/i&gt; 에서 가져다 사용할 수 있는 것을 보고 깜짝 놀랐던 기억이 있는데 이제는 웹에서도 그렇게 할 수 있다는 사실에 한번 더 깜짝 놀랐습니다. 사실 web assembly 기술은 새로울 것도 없지만 마침 사용할 일이 있어서 파내다 보니 이제서야 신세계를 맛보는중이겠습니다. 자 지금부터 &lt;code&gt;web assembly&lt;/code&gt;의 첫 걸음을 떼고 &lt;code&gt;hello world&lt;/code&gt;를 출력해봅시다.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://emscripten.org/index.html&quot;&gt;Emscripten&lt;/a&gt; 설치&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;C/C++&lt;/i&gt; 로 작성한 모듈을 웹 어셈블리로 컴파일 하기 위해서는 여러가지 툴이 논의 될 수 있겠지만 여기서는 &lt;a href=&quot;https://emscripten.org/index.html&quot;&gt;Emscripten&lt;/a&gt;을 소개하고 사용해보기로 합니다. 우선 &lt;i&gt;Emscripten SDK (emsdk)&lt;/i&gt; 를 GitHub 에서 다운로드 받도록 합니다.&lt;/p&gt;
&lt;pre class=&quot;crmsh&quot;&gt;&lt;code&gt;git clone https://github.com/emscripten-core/emsdk.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다운로드 받은 디렉터리로 이동합니다.&lt;/p&gt;
&lt;pre class=&quot;bash&quot;&gt;&lt;code&gt;cd emsdk&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;우리는 방금 소스코드를 &lt;code&gt;clone&lt;/code&gt; 받은 상태라 아래 과정은 필요 없지만 혹시 이미 받아놓은게 있다면 최신 소스코드로 갱신하도록 합니다.&lt;/p&gt;
&lt;pre class=&quot;ebnf&quot;&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래 명령어를 통해 &lt;i&gt;SDK&lt;/i&gt; 툴을 다운로드 하고 설치까지 진행하도록 합시다.&lt;/p&gt;
&lt;pre class=&quot;cmake&quot;&gt;&lt;code&gt;./emsdk install latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;현재 사용자의 환경에서 SDK를 사용할 수 있도록 활성화시켜줍니다. SDK를 자주 사용해야 한다면 아래 두 라인을 &lt;code&gt;.bash_profile&lt;/code&gt;에 추가하는 것도 나쁘지 않겠습니다. 물론 이때는 &lt;code&gt;emsdk&lt;/code&gt; 의 절대경로를 줘야합니다. ( &lt;i&gt;/hoem/user/path/to/emsdk&lt;/i&gt; 처럼 )&lt;/p&gt;
&lt;pre class=&quot;vim&quot;&gt;&lt;code&gt;./emsdk activate latest
source ./emsdk_env.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;hello.c&lt;/h3&gt;
&lt;p&gt;이제 &lt;code&gt;Emscripten SDK&lt;/code&gt;가 준비되었으니 간단한 C코드를 작성해보도록 합니다.&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(void)
{
  printf(&quot;Hello World\n&quot;);
  return 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;emcc&lt;/h3&gt;
&lt;p&gt;GCC 등을 생각해봤을 때 &lt;code&gt;emcc&lt;/code&gt;는 &lt;i&gt;EMscripten C Compiler&lt;/i&gt; 의 약어가 아닐까 싶습니다. 아무튼 &lt;code&gt;emcc&lt;/code&gt;를 통해 앞서 작성한 &lt;code&gt;hello.c&lt;/code&gt;를 컴파일하도록 합시다.&lt;/p&gt;
&lt;pre class=&quot;groovy&quot;&gt;&lt;code&gt;$ emcc hello.c -o hello.html
cache:INFO: generating system library: libdlmalloc.bc... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/libdlmalloc.bc&quot; for subsequent builds)
cache:INFO:  - ok
cache:INFO: generating system library: libpthreads_stub.bc... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/libpthreads_stub.bc&quot; for subsequent builds)
cache:INFO:  - ok
cache:INFO: generating system library: libc.bc... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/libc.bc&quot; for subsequent builds)
cache:INFO:  - ok
cache:INFO: generating system library: libcompiler_rt.a... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/libcompiler_rt.a&quot; for subsequent builds)
cache:INFO:  - ok
cache:INFO: generating system library: libc-wasm.bc... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/libc-wasm.bc&quot; for subsequent builds)
cache:INFO:  - ok
cache:INFO: generating system asset: generated_struct_info.json... (this will be cached in &quot;/Users/caley/.emscripten_cache/asmjs/generated_struct_info.json&quot; for subsequent builds)
cache:INFO:  - ok&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;최초 컴파일에는 수초 이상 소요되며 그 이후로 &lt;code&gt;hello.c&lt;/code&gt;가 변경되지 않는 이상 캐시를 그대로 사용하기 때문에 1초 이내로 컴파일이 완료됩니다. 컴파일이 완료되면 아래와 같이 목적어 파일로 지정한 &lt;code&gt;hello.html&lt;/code&gt; 이외에 &lt;code&gt;hello.js&lt;/code&gt;, &lt;code&gt;hello.wasm&lt;/code&gt; 파일이 추가로 생성되어 있습니다. 안에 기본 골격을 보면 &lt;code&gt;hello.html&lt;/code&gt; --&amp;gt; &lt;code&gt;hello.js&lt;/code&gt; --&amp;gt; &lt;code&gt;hello.wasm&lt;/code&gt; 을 순서대로 호출하는 구조를 갖고 있으며 웹 브라우저에서 방금 컴파일한 &lt;code&gt;hello.html&lt;/code&gt;을 호출해보려면 아래와 같이 실행해주면 되겠습니다. ( 예제의 골격일뿐, 항상 그렇게 사용해야 하는것이 강제되지는 않습니다 )&lt;/p&gt;
&lt;pre class=&quot;css&quot;&gt;&lt;code&gt;emrun hello.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;단순하게 &lt;code&gt;open hello.html&lt;/code&gt;처럼 그냥 html 파일 자체를 열게되면 스크립트 내부에서 사용하는 &lt;i&gt;Download&lt;/i&gt; 로 인해 정상적인 출력을 보지 못하게됩니다. 일단 안에 구조는 천천히 살펴보고 &lt;code&gt;emrun&lt;/code&gt;을 통해 예제를 실습하도록 합시다. 자, 축하합니다. 아래와 같이 &lt;code&gt;Heloo World&lt;/code&gt; 가 출력되었기를 바랍니다. :)&lt;/p&gt;
&lt;p&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/u6ji6/btqt0bfwsGE/gLYDpctioFIEUuKgQYCBzK/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/u6ji6/btqt0bfwsGE/gLYDpctioFIEUuKgQYCBzK/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fu6ji6%2Fbtqt0bfwsGE%2FgLYDpctioFIEUuKgQYCBzK%2Fimg.png' width=&quot;100%&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;본 글을 작성하는 테스트 환경에서는 emsdk를 위한 python, node, cmake 등의 패키지들이 이미 다 설치되어 있습니다. 혹시 설치에 어려움이 있으시다면 댓글 남겨주세요. 같이 고민하고 풀어나가보도록 합시다.&lt;/p&gt;</description>
<category>길 잃은 게시물</category>
<category>emscripten</category>
<category>web assembly</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/782</guid>
<comments>https://jybaek.tistory.com/782#entry782comment</comments>
<pubDate>Mon, 01 Apr 2019 21:22:44 +0900</pubDate>
</item>
<item>
<title>[python] 사용자 데이터셋 셔플</title>
<link>https://jybaek.tistory.com/781</link>
<description>&lt;p&gt;이미 잘 구현되어 있는 소스코드와 데이터를 사용한 머신러닝의 경우에는 모델 내에&amp;nbsp;&lt;i&gt;shuffle&lt;/i&gt;&amp;nbsp;자체가&amp;nbsp;구축되어 있는 반면에&amp;nbsp;데이터 수집과 정제, 모델 구축까지 밑바닥에서부터 쌓아 올리다보면 여러가지 난관에 봉착하게 된다. &lt;i&gt;python&lt;/i&gt; 을 친숙하게 다루는 사람이라면 데이터를 다루는데 어려움이 없겠으나 수학적 지식이나 모델링쪽만 전문으로 했던 사람에게는 &lt;i&gt;shuffle&lt;/i&gt; 자체도 쉬운게 아닐 것이다. &lt;i&gt;random.shuffle&lt;/i&gt; 예제를 살펴보면 대부분 1차원 &lt;i&gt;array&lt;/i&gt; 를 섞는것 뿐이라 우리의&lt;i&gt;&amp;nbsp;(x, y)&lt;/i&gt;&amp;nbsp;데이터&amp;nbsp;쌍에서는 일반적인 방식으로는 사용할 수 없다. 여기서는 이런 상황에서 데이터셋을 &lt;i&gt;shuffle&lt;/i&gt; 하는 방법 하나를 제시한다.&lt;/p&gt;&lt;p&gt;예를들어 손글씨 인식을 할 때 사용하는 대표적인 &lt;i&gt;MNIST&lt;/i&gt; 의 데이터를 우리가 직접 수집한다고 생각해보자 ( 요즘은 프레임워크가 너무 잘 되어 있어서 &lt;i&gt;x_train, y_train, x_test, y_tes&lt;/i&gt;t 모조리 다 뽑아주고 분리까지해 준다 ). 여러가지 경로로 이미지를 수집했고 다행스럽게 아래와 같은 형식으로 훈련데이터와 라벨을&amp;nbsp;&lt;i&gt;array&lt;/i&gt; 에 잘 적재 했다고 치자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x_train = [1,2,3,4,5]
&amp;gt;&amp;gt;&amp;gt; y_train = [6,7,8,9,0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제로 사용하는 데이터의&amp;nbsp;구조는 더욱 복잡해질 수 있을 것이지만 여기서는 &lt;i&gt;x_train&lt;/i&gt; 을 이미지 데이터, &lt;i&gt;y_train&lt;/i&gt; 을 이미지에 해당하는 라벨 데이터로 생각하면 되겠다. 이제 데이터를 잘 수집 했으니 학습을 시켜야되는데 기본적으로 모델을 평가할 때 사용하는 데이터는 &lt;i&gt;train&lt;/i&gt; 데이터와 분리하는 것이 좋다고 많은 논문과 글에서 소개되고 있기 때문에 나누도록 하자. 가만, 어떤 기준으로 나눠야하지? 애초에 잘 섞여있는 데이터였다면 상관없지만 그렇지 않은 경우에 8:2의 비율로 배열을 인덱스로 잘라버리면 &lt;i&gt;train&lt;/i&gt; 데이터에는&amp;nbsp;손글씨 0~7까지, 라벨 데이터에는 8~9가 담겨버리게 된다. 이런 참사를 막으려면 훈련 데이터와 평가 데이터를 나누기 전에 데이터를 잘 섞어줘야 한다. 파이썬은 마침 &lt;i&gt;random.shuffle&lt;/i&gt; 처럼 괜찮은 라이브러리를 지원하기 때문에 적극적으로 사용해주면 되겠다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; random.shuffle(x_train)
&amp;gt;&amp;gt;&amp;gt; random.shuffle(y_train)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;단순하게 이렇게 진행해도 될까? 안된다.&lt;i&gt; x_train&lt;/i&gt; 과 &lt;i&gt;y_train&lt;/i&gt; 는&amp;nbsp;훈련데이터와 라벨 관계로 인덱스가 묶여있다. 즉,&lt;i&gt; x_train[0]&amp;nbsp;&lt;/i&gt;의 정답은 &lt;i&gt;y_train[0]&amp;nbsp;&lt;/i&gt;이고 &lt;i&gt;x_train[1]&amp;nbsp;&lt;/i&gt;은 &lt;i&gt;y_train[1]&amp;nbsp;&lt;/i&gt;과 관련이 있다. 이 인덱스 관계를 무시하고 막연하게 섞어버리면 훈련데이터와 라벨의 관계가 무너지게 된다. 이 글에서는 두 개의 관계를 유지하면서 섞을 수 있는 방법을 제시한다.&lt;/p&gt;&lt;p&gt;개념은 사실 굉장히 간단하다. &lt;i&gt;x_train&lt;/i&gt; 과 &lt;i&gt;y_train&lt;/i&gt; 을 배열로 묶어주고 그걸 &lt;i&gt;shuffle&lt;/i&gt; 해준다. 그리고 그 결과를 다시 &lt;i&gt;x_train&lt;/i&gt;, &lt;i&gt;y_train&amp;nbsp;&lt;/i&gt;으로 나누면 끝. 코드는 다음과 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; tmp = [[x,y] for x, y in zip(x_train, y_train)]
&amp;gt;&amp;gt;&amp;gt; tmp
[[1, 6], [2, 7], [3, 8], [4, 9], [5, 0]]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;잘 묶인 것을 확인하고, &lt;i&gt;shuffle&lt;/i&gt; 시작.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import random
&amp;gt;&amp;gt;&amp;gt; random.shuffle(tmp)
&amp;gt;&amp;gt;&amp;gt; tmp
[[3, 8], [5, 0], [2, 7], [1, 6], [4, 9]]&lt;/code&gt;&lt;/pre&gt;
인덱스 관계가 유지되면서 잘 섞인 것을 확인했으니 다시&lt;i&gt; x_train, y_train&amp;nbsp;&lt;/i&gt;으로 나눠준다.
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x_train = [n[0] for n in tmp]
&amp;gt;&amp;gt;&amp;gt; y_train = [n[1] for n in tmp]&lt;/code&gt;&lt;/pre&gt;
그리고 확인해보자. 
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; x_train
[3, 5, 2, 1, 4]
&amp;gt;&amp;gt;&amp;gt; y_train
[8, 0, 7, 6, 9]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;잘 나누어진 것이 확인된다. 사실 이렇게 2차원 이상의 배열에서 인덱스 관계를 유지하면서 &lt;i&gt;shuffle&lt;/i&gt; 하는 방법은 다양하게 제시되고 있지만&amp;nbsp;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;Beautiful is better than ugly &lt;/span&gt;&lt;/i&gt;라는 &lt;i&gt;&lt;a href=&quot;https://jybaek.tistory.com/780&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;ZEN&lt;/a&gt;&amp;nbsp;&lt;/i&gt;의 첫 항목을 떠올려보면 이건 꽤 괜찮은 방법이라고 생각된다. 누군가에게는 도움이 되었기를 바란다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>python</category>
<category>2차원</category>
<category>array</category>
<category>IMAGE</category>
<category>MNIST</category>
<category>Python</category>
<category>random</category>
<category>shuffle</category>
<category>데이터셋</category>
<category>라벨링</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/781</guid>
<comments>https://jybaek.tistory.com/781#entry781comment</comments>
<pubDate>Wed, 20 Mar 2019 23:00:00 +0900</pubDate>
</item>
<item>
<title>[python] The Zen of Python</title>
<link>https://jybaek.tistory.com/780</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A73E3F5C89265935&quot; filemime=&quot;image/jpeg&quot; filename=&quot;python-logo@2x.png&quot; height=&quot;164&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;파이선에만 국한된 이야기가 아닙니다. 매번 읽을 때 마다 새롭게 다가오네요. :-)&amp;nbsp;&lt;/p&gt;</description>
<category>python</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/780</guid>
<comments>https://jybaek.tistory.com/780#entry780comment</comments>
<pubDate>Thu, 14 Mar 2019 00:47:25 +0900</pubDate>
</item>
<item>
<title>Use multiple versions of CUDA</title>
<link>https://jybaek.tistory.com/779</link>
<description>&lt;div style=&quot;text-align:left&quot;&gt;&lt;p&gt;우리가 작업하는 다양한 소스코드는 때로는 서로 다른 버전의 &lt;i&gt;cuda&lt;/i&gt; 를 사용하기도 합니다. 그리고 물리적으로 한 대의 머신을 공유해서 사용한다고 했을 때 여러 버전의 &lt;i&gt;cuda&lt;/i&gt; 를 이용하는 것은 매우 당연한 일이겠습니다. 이번 글에서는 어떻게 그것이 가능한지에 대한 이야기를 짧게 공유합니다. &lt;br /&gt;&lt;/p&gt;&lt;h2&gt;1. cuda 설치 (&amp;nbsp;&lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://developer.nvidia.com/cuda-downloads&lt;/a&gt; )&lt;/h2&gt;&lt;p&gt;링크에 접속해서 &lt;i&gt;cuda&lt;/i&gt; 를 다운로드 받습니다. OS 부터 하나씩 선택해나가면 최종적으로 아래와 같은 화면을 볼 수 있습ㄴ다. 이 글이 작성된 시점 기준으로는 &lt;i&gt;cuda 10.1&lt;/i&gt; 이 최신버전이라 위에 링크에 접속하면 다음&amp;nbsp;버전으로 가이드가 됩니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99990D395C865EAC03&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-03-11 오후 10.11.41.png&quot; height=&quot;528&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;다운로드 받은 cuda 는 위에 설명에 있는 것처럼 터미널에서 실행해주면 되겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sudo sh cuda_10.1.105_418.39_linux.run&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;몇 가지 질문이 이어지는데 대부분 default 를 선택해도 좋습니다. 단, &lt;i&gt;/usr/local/cuda&lt;/i&gt; 로 &lt;i&gt;symbolic link&lt;/i&gt; 를 만들겠냐는 질문에는 신중할 필요가 있습니다. 메인으로 쓸 쿠다를 제외하면 굳이 심볼릭 링크를 생성 할 필요가 없기 때문입니다. 말하자면 여러 버전은 다음과 같은 경로에&amp;nbsp;설치됩니다.&lt;/p&gt;&lt;p&gt;/usr/local/cuda-10.0&lt;br /&gt;/usr/loca/cuda-9.0&lt;br /&gt;/usr/loca/cuda-x.0&lt;/p&gt;&lt;h2&gt;2. cuDNN library 설치&lt;/h2&gt;&lt;p&gt;다음 링크의 중간부분을 참고해서 &lt;i&gt;cuDNN&lt;/i&gt; 을 설치하도록 합니다. 중간에 &lt;i&gt;LD_LIBRARIY_PATH&lt;/i&gt; 까지 잘 잡아주도록 합시다.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://jybaek.tistory.com/778&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://jybaek.tistory.com/778&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;3 export CUDA_HOME&lt;/h2&gt;&lt;p&gt;필요하다면&lt;i&gt; cuda&lt;/i&gt; 를 사용할 때 환경에 따라 &lt;i&gt;CUDA_HOME&lt;/i&gt;&amp;nbsp;환경변수의 경로를 다르게 잡아줘야 합니다. 예를들면 다음과 같습니다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;export CUDA_HOME=&quot;/usr/local/cuda&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Now enjoy multi cuda. :-)&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>기계학습</category>
<category>CUDA</category>
<category>cuDNN</category>
<category>nVidia</category>
<category>환경</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/779</guid>
<comments>https://jybaek.tistory.com/779#entry779comment</comments>
<pubDate>Mon, 11 Mar 2019 23:42:45 +0900</pubDate>
</item>
<item>
<title>ImportError: libcudnn.so.7: cannot open shared object file: No such file or directory</title>
<link>https://jybaek.tistory.com/778</link>
<description>&lt;div style=&quot;text-align:left&quot;&gt;&lt;p&gt;
아래와 같이&lt;i&gt; tensorflow-gpu &lt;/i&gt;를 설치하였고,
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;pip install tensorflow-gpu==1.9&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;코드상에서&lt;i&gt; import&lt;/i&gt; 를 하려고하니 에러가 발생했습니다. &lt;br /&gt;
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;(tensorflow_p36) $ python
Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56)
[GCC 7.2.0] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;import tensorflow as tf&lt;/span&gt;
Traceback (most recent call last):
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow.py&quot;, line 58, in &lt;module&gt;
from tensorflow.python.pywrap_tensorflow_internal import *
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow_internal.py&quot;, line 28, in &lt;module&gt;
_pywrap_tensorflow_internal = swig_import_helper()
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow_internal.py&quot;, line 24, in swig_import_helper
_mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/imp.py&quot;, line 243, in load_module
return load_dynamic(name, filename, file)
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/imp.py&quot;, line 343, in load_dynamic
return _load(spec)
ImportError: libcudnn.so.7: cannot open shared object file: No such file or directory

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/__init__.py&quot;, line 22, in &lt;module&gt;
from tensorflow.python import pywrap_tensorflow # pylint: disable=unused-import
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/__init__.py&quot;, line 49, in &lt;module&gt;
from tensorflow.python import pywrap_tensorflow
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow.py&quot;, line 74, in &lt;module&gt;
raise ImportError(msg)
ImportError: Traceback (most recent call last):
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow.py&quot;, line 58, in &lt;module&gt;
from tensorflow.python.pywrap_tensorflow_internal import *
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow_internal.py&quot;, line 28, in &lt;module&gt;
_pywrap_tensorflow_internal = swig_import_helper()
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/tensorflow/python/pywrap_tensorflow_internal.py&quot;, line 24, in swig_import_helper
_mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/imp.py&quot;, line 243, in load_module
return load_dynamic(name, filename, file)
File &quot;/home/caley/anaconda3/envs/tensorflow_p36/lib/python3.6/imp.py&quot;, line 343, in load_dynamic
return _load(spec)
&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;ImportError: libcudnn.so.7: cannot open shared object file: No such file or directory&lt;/span&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/module&gt;&lt;/stdin&gt;&lt;/module&gt;&lt;/module&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;위에 보이는 &lt;i&gt;cuDNN&lt;/i&gt;&amp;nbsp;는 &lt;i&gt;cuda&lt;/i&gt; 와는 별개의 라이브러리라서&amp;nbsp;따로 설치를 해줘야 하는데 아래 링크에서 파일을 내려받고 설치가 가능합니다. &lt;br /&gt;&lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://developer.nvidia.com/rdp/cudnn-download&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;링크에 들어가서 파일을 다운로드 받기 위해서는 &lt;i&gt;NVIDIA&lt;/i&gt; 에 가입해야 하는데 과정이 어렵지 않으니 가입을 진행하고 파일을 다운로드 받도록 합시다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995118455C865C9F18&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-03-11 오후 10.02.47.png&quot; height=&quot;457&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;안에서 OS의 종류에 따라 &lt;i&gt;Deb&lt;/i&gt; 파일 등도 제공하지만 왜인지 tgz로 설치하는게 개인적으로는 안심이되기 때문에 여기서는 &lt;i&gt;cuDNN Library for Linux&lt;/i&gt;&amp;nbsp;파일을 내려 받았다는 가정으로 설치 방법을 공유합니다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995216375C865CFE16&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-03-11 오후 10.04.36.png&quot; height=&quot;610&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;파일을 다운로드 받고 아래와 같이 진행하도록 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ tar -xzvf cudnn-9.0-linux-x64-v7.tgz
$ sudo cp cudnn-9.0/include/cudnn.h /usr/local/cuda/include 
$ sudo cp cudnn-9.0/lib64/libcudnn* /usr/local/cuda/lib64 
$ sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 아래와 같은 예시로 &lt;i&gt;LD_LIBRARY_PATH&lt;/i&gt; 를 잡아줘야 한다. &lt;i&gt;cuda-9.0&lt;/i&gt; 에 대한 예시입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-9.0/lib64/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;이렇게 설치가 끝났으면 다시 &lt;i&gt;python&lt;/i&gt; 프롬프트를 접속해서 정상적으로 &lt;i&gt;tensorflow&amp;nbsp;&lt;/i&gt;가 &lt;i&gt;import&lt;/i&gt; 되는 것을 확인해주면 됩니다. 
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ python
Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56)
[GCC 7.2.0] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
&amp;gt;&amp;gt;&amp;gt; tf.__version__
'1.9.0'
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;깔끔하게 성공 :-)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>기계학습</category>
<category>CUDA</category>
<category>cuDNN</category>
<category>tensorflow</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/778</guid>
<comments>https://jybaek.tistory.com/778#entry778comment</comments>
<pubDate>Mon, 11 Mar 2019 22:07:19 +0900</pubDate>
</item>
<item>
<title>AI with Google</title>
<link>https://jybaek.tistory.com/777</link>
<description>&lt;p&gt;지난주에 다녀온 &lt;i&gt;AI with Google&lt;/i&gt; 행사의 한박자 늦은 후기를 적어본다. 아니, 후기라고 하기에는 거창하고 참석하지 못한 사람들을 위해 행사장 사진 공유를 통해 행사를 들여다보자. 행사는 3호선 동대입구역에 있는 신라호텔에서 진행되었는데 행사장에는 촬영 나온 미디어 기자들로 가득차 있었다. 아마도 오전 세션은 초대받은 사람들과 기자들만 출입이 가능한 느낌이었고 오후부터는 현장 등록까지 가능하게 여러 세션이 준비 된 느낌. 말하자면 오전은 미디어 홍보를 위한 자리라는 생각이 들었다.&amp;nbsp;본인은 운좋게 초대장을 구해서 오전부터 참석할 수 있었다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C352435C84C6AF16&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5512.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;얼추 행사 시작인 10시에 맞춰서 도착했는데 이미 인산인해를 이루고 있었다. 데모 부스와 다과, 커피까지 다양한 먹거리가 준비되어 있었다. 일단 따뜻한 아메리카노 한잔으로 몸을 녹이고 천천히 둘러봤다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994672435C84C6B11B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5513.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;참석한 사람들의 등록이 한창이다. 출입할 때 &quot;기자세요?&quot;라는 질문을 정말 많이 받았는데 이건 내 복장이 그래보였던건 아니고 그만큼 기자 신분으로 참석한 사람들이 많았다는 의미다. ( 저는 그냥 평범한 엔지니어 차림으로 갔어요 )&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9951DB435C84C6B224&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5514.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;코엑스나 킨택스 같은 더 큰 행사장도 많이 가봤지만 이렇게 화려하게 꾸며진 행사는 아마도 처음인 듯 하다. 행사장 테이블 주변을 가득 채운 기자들과 사방에 대포 카메라가 즐비. 정면에 커브드 화면은 또 어떠한가. 구글이 아주 작정을 했구나하는 느낌을 받았다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994B18435C84C6B41B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5515.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;잠시 후 코리안타임&lt;sup class=&quot;footnote&quot;&gt;&lt;a id=&quot;footnote_link_777_1&quot; href=&quot;#footnote_777_1&quot; onmouseover=&quot;tistoryFootnote.show(this,777,1)&quot; onmouseout=&quot;tistoryFootnote.hide(777,1)&quot; style=&quot;color:#f9650d;font-family:Verdana,Sans-serif;display:inline;&quot;&gt;&lt;span style=&quot;display:none&quot;&gt;[각주:&lt;/span&gt;1&lt;span style=&quot;display:none&quot;&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;으로 시작 시간이 되어 구글 코리아 &lt;i&gt;John Lee&lt;/i&gt; 사장의 환영사가 이어졌다. &lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9945A8435C84C6B51B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5516.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;환영사에 특별한 내용은 없었지만 중간에 &lt;i&gt;Google&lt;/i&gt; 스터디잼 관련된 내용이 나와서 깜짝 놀랐다. 일전에 관련된 홍보 영상을 구글 코리아에 방문해서 촬영한 적이 있었는데 이렇게 큰 행사에서 노출될 줄이야 :) &lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9935E4435C84C6B71C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5517.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;너무 어색해서 웃기지만 기록을 위해&amp;nbsp;영상을 공유한다.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pE8LVwaZbvM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;스터디잼은 참여하는 사람들의 편의를 위해 매회 발전하고 있으니 구글의 강력한 기술을 배워보고 싶다면 참여해보기를 권장한다. 대부분의 학습은 퀵랩이나 코세라 강의로 이어지는데 이 모든 과정이 무료이다. &lt;i&gt;Awesome&lt;/i&gt; !! ( 참고: &lt;a href=&quot;https://jybaek.tistory.com/736&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;구글 클라우드 스터디잼&lt;/a&gt;&amp;nbsp;)&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9933D1435C84C6B91C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5520.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;뜬금 없지만 국회의원의 축사도 이어졌다.&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994F5C455C84C6BB15&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5521.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;축사가 한 분 더 이어졌다. 아마도 사회에서&amp;nbsp;AI 에 대한 관심이 얼마나 대단한지 눈여겨볼 수 있지 않았을까 생각된다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99166C455C84C6BD17&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5522.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;축사가 끝나고 &lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;모두를 위한 AI &lt;/span&gt;라는 주제로 홍준성님의 세션이 시작되었다. 이때부터 사실상 제대로 된 세션의 시작이라고 볼 수 있었는데&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998B8D455C84C6BE1D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5523.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;AI 의 기본적인 소개가 ML 까지 이어졌다.&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E552455C84C6C119&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5524.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;구글 클라우드를 통해 다양한 AI 를 다룰 수 있는 방법이 소개되었다. 사용자는 &lt;i&gt;TensorFlow&lt;/i&gt; 나 &lt;i&gt;Cloud&lt;/i&gt; &lt;i&gt;ML&lt;/i&gt; 을 통해 직접 모델을 학습할 수도 있고 이미 잘 학습되어진 상태로 제공되는 API 를 가져다 쓸 수도 있다. 다만 이 행사에서 &quot;비용&quot;에 대한 이야기는 언급되지 않는다. :-)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997CD9455C84C6C31E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5525.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;Google AI&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;&amp;nbsp;의 원칙&lt;/span&gt;에 대한 이야기인데 세번째 항목에 주목할 필요가 있다. &quot;결과를 설명할 수 있고 제어할 수 있어야 합니다&quot; 요즘 머신러닝은 블랙박스라는 표현을 많이 사용하는데 사실 그게 그렇게 끝나면 되는 이야기가 아니다. 딥마인드가 알파고를 만들고 이세돌 9단과의 대국 후에 모델이 어떻게 동작 하는지 그들도 정확히 이해 못한다는 말을 우리는 100% 믿어야 할까? 당신이 그냥 그런 마케터라면 그렇게 받아드려도 좋지만 엔지니어라면 글쎄. :)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E5BC455C84C6C419&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5526.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음으로 프로덕트 매니저의 의료서비스를 위한 AI라는 세션이 이어졌다. 이 세션에서는 의료분야에 AI가 필요한 이유에 대한 설명이 잘 이어졌다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C392455C84C6C61B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5530.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;AI를 통한 성과가 이미 인간을 뛰어넘고 있으며 의료기술이 부족한 나라에 AI가 탑재된 프로덕트의 필요성에 대한 언급이 계속된다. 이쯤부터 어떤 분야가 AI에 의해 정복되기 시작할지 본격적으로 상상해보기 시작한다. 사실 이미 많은 분야가 정복 되었지만.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9994C04A5C84C6C81F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5531.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음 &lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;사용자를 위한 AI&lt;/span&gt;에서는 구글홈과 구글미니의 제품 홍보(!)가 이어졌다. 그동안 그저 인공지능 스피커 쯤으로 생각하고 있었던 모델의 시연까지 볼 수 있었던 자리라서 꽤 유익했다. 아마도 안드로이드 기기를 많이 다루는 사람들이 더 많은 기능을 누릴 수 있을 것으로 예상된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E6FD4A5C84C6CA0A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5532.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이게 바로 구글 어시스턴트에 대한 시연이다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B9AE4A5C84C6CE1E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5535.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이어서 구글 홈에 대한 시연도 이어졌다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992A214A5C84C6D024&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5536.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;보이스매치는 생각보다 흥미로왔는데 화자를 인식하는 기능이다. 즉 여러사람의 목소리를 구분해서 그에 맞는 응답을 한다는 내용인데, 분명 여러 분야에서 욕심내고 있고 활발히 연구하고 있는 분야이다. 이미 구글은 앞서가고 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99D3144A5C84C6D11D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5537.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음으로 &lt;i&gt;AI for&lt;/i&gt;&amp;nbsp;&lt;i&gt;startup &lt;/i&gt;&amp;nbsp;로 다양한 스타트업의 구글 기술 사용 사례가 소개되었다. 개인적으로는 이때부터&amp;nbsp;본격적인 흥미 촉이 유발되지 않았나 싶었다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DA8A4A5C84C6D31D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5538.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;첫 번째로 소개된 디플리는 아이의 울음소리를 듣고 그 이유를&amp;nbsp;&amp;nbsp;판별하는 서비스를 제공한다. 흥미로운점은 언어를 습득하기 전에 유아의 목소리가 서비스의 입력이기&amp;nbsp;때문에 전 세계 공통으로 사용 가능한 서비스라는 점. 하지만 어떻게 정답을 학습 시켰을 지는 의문이다. :) 그게 기술이겠지.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992214435C84C6D513&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5539.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;정확도가 무려 95.0~98.1%라는 놀라운 수치를 공개했다. 이정도면 초보 엄마보다 훨씬 나은 정화도다. 많은 사람들이 이용할 수 있을듯.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99FEA5435C84C6D91E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5541.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음으로 소개된 스타트업은 매스프레소. 수학 선생님과 학생을 매치시켜준다는 컨셉으로 학생이 수학문제를 촬영하면 그에 대한 부분을 &lt;i&gt;OCR&lt;/i&gt; 로 인식하고 선생님이 풀어서 해답을 제공해준다는 내용이다. 디플리와 마찬가지로 꽤 젊은 분들로 구성된 회사였고 저런 모델이 과연 많이 쓰일까 싶었지만 놀라운 수치가 공개되었으니.. 하루 쏟아지는 질문만 수십만건이고 이미 등록되어 있는 질문이 억단위였다는... 학생들 사이에서는 과연 핫 한 애플리케이션이겠다. ( 어렴풋한 기억이라 수치가 왜곡 되었을수도 있습니다. )&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E26C435C84C6DA1F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5542.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음은 하이퍼커넥트의 기술 소개가 이어졌다. 여기는 이미 많은 사람들이 알고 있는 아자르를 서비스하고 있는 회사인데 본인은 아자르를 사용해보지 않았음에도 꽤 흥미로웠다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997D9E435C84C6DC18&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5543.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;재밌는건 내가 생각하는 스타트업의 올바른 방향에 대한 이야기인데 하이퍼커넥트가 좋은 예시이다. 스타트업은 일단 하이레벨 API를 통해서 빠르게 서비스를 론칭하고 업계에서 입지를 굳혀야 한다고 생각한다. 그러기 위해서 당장 원천기술이 없더라도 일단 서비스를 시작하고 차차 알맹이를 우리 것으로 채우면 된다는 것이다. 그 서비스가 성공할지, 실패할지는 시장에서 냉정하게 평가되는데 우리가 쌓아올린 원천기술이 무쓸모일 수 있기 때문에. 다시 말하자면 실컷 땅을 파다가 &quot;여기가 아닌가벼&quot;하고 돌아서는 꼴이 될 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995E43435C84C6DD1A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5544.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;아무튼 재미있는 이야기를 다양하게 들을 수 있었는데 엔지니어링적인 이야기가 많이 소개되었다. 클라우드 기반 AI가 아닌 온디바이스 AI를 구현해냄에 따라서 얻을 수 있는 장점들이 이야기 되었다. 장점으로는 &lt;i&gt;prediction&lt;/i&gt; 을 위한 네트워크 비용이 발생하지 않는다는점, 수집된 정보가 디바이스에서 처리되고 벗어나지 않기 때문에 보안이나 정책적으로 얻을 수 있는 이점 등이 있겠다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995F43435C84C6DF1A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5545.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;온디바이스 &lt;i&gt;AI&lt;/i&gt; 를 위한 &lt;i&gt;TensorFlow Lite&lt;/i&gt; 소개까지 해주셨다. 아마도 엔지니어와 거리가 있으신 분들은 퍽 지루 했겠지만 내게는 꽤 알찬 세션이었다. 사실 새롭게 알게된 내용은 없지만 뭔가 요즘 생각하고 있는 다양한 것들을 잘 정리할 수 있었던 느낌이랄까.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99A1C0505C84C6E10E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5546.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;끝으로 &lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;비즈니스를 위한 Cloud AI&amp;nbsp;&lt;/span&gt;세션에서는 국내 불굴의 기업들에서 사용하고 있는 구글의 기술에 대한 내용들이 소개되었는데, 물론 클라우드의 힘 없이도 성공할 수 있겠지만 빠르게 나아가려면 어쩔 수 없이 그 위에 올라타야 하는 상황인건 맞겠다. 아래는 1) 삼성전자에서 갤럭시 펜에 탑재되어 단어를 검색해주는 기능에 대한 설명 2) 신한카드에서 &lt;i&gt;Dialogflow&amp;nbsp;&lt;/i&gt;를 통해 챗봇을 구현한 사례 3) 넷마블에서 어뷰징 유저를 검출하기 위해 사용된 &lt;i&gt;BigQuery&amp;nbsp;&lt;/i&gt;와 &lt;i&gt;Cloud ML&amp;nbsp;&lt;/i&gt;에 대한 설명이었다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E62D505C84C6E717&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5550.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음은 이래도 AI 도입 안할꺼야? 라며 찍어 누르는 듯한 장표. 2020년에 &quot;시험 사용&quot; 이라는 말에 함정이 있기는 하지만 AI 붐에 대해 부정할수는 없다. 아니, 이건 단순한 붐이 아니라 새로운 시대로 가는 기로에 서있다고 볼 수 있겠다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998A0A505C84C6EA0F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;IMG_5551.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;&lt;b&gt;마무리&lt;/b&gt;&lt;/h3&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;시끌벅적한 마케팅 행사 느낌이 크게 들었지만 한편으로는 다양한 스타트업의 사례를 확인 할 수 있었고 여러 아이디어를 떠올려 볼 수 있는 시간이 되었다. &lt;i&gt;AI, Cloud&lt;/i&gt; 이 두 가지를 잘 활용하는게 이 시대에 가장 빠르게 성공 할 수 있는 길로 가는 치트키인건 절대 부정할 수 없겠다. 원천기술 확보는 적당히 궤도에 올라탄 다음 이야기다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes&quot;&gt;
&lt;li id=&quot;footnote_777_1&quot;&gt;약간 늦는 사람들을 위해 배려하는 시간 &lt;a href=&quot;#footnote_link_777_1&quot;&gt;[본문으로]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
<category>리뷰</category>
<category>Ai</category>
<category>Cloud</category>
<category>CloudML</category>
<category>GCP</category>
<category>Google Cloud Platform</category>
<category>리뷰</category>
<category>컨퍼런스</category>
<category>행사</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/777</guid>
<comments>https://jybaek.tistory.com/777#entry777comment</comments>
<pubDate>Sun, 10 Mar 2019 22:00:00 +0900</pubDate>
</item>
<item>
<title>[Kaldi] voxforge online demo</title>
<link>https://jybaek.tistory.com/776</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993E2A3E5C7DFF4640&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-07 오후 9.19.22.png&quot; height=&quot;215&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://kaldi-asr.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(61, 179, 158); font-family: &amp;quot;Noto Sans&amp;quot;, sans-serif; font-size: 16px; text-align: center;&quot;&gt;http://kaldi-asr.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이 글을 읽고 있다는 것은 &lt;i&gt;sample&lt;/i&gt; 스크립트 학습을 끝냈다는 이야기인데 일단 축하드립니다. 이번 글에서는 학습시킨 데이터를 기반(은 이미 공개되어 있는 모델셋)으로 &lt;i&gt;demo&lt;/i&gt; 를 해볼텐데 &lt;i&gt;kaldi&lt;/i&gt; 에 있는 &lt;i&gt;voxforge&lt;/i&gt; 에서는 두 가지 방식으로 데모를 지원합니다. 여기에는&amp;nbsp;1)&amp;nbsp;&lt;i&gt;microphone&lt;/i&gt; 의 입력에 따라 실시간으로 음성을 &lt;i&gt;text&lt;/i&gt; 로 변환하는 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;live&lt;/span&gt;&lt;/i&gt; 모드와 2)&amp;nbsp;음성파일을 &lt;i&gt;text&lt;/i&gt;로 변환하는 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;simulated&lt;/span&gt;&lt;/i&gt;&amp;nbsp;모드가 있습니다.&lt;/p&gt;&lt;p&gt;일단 &lt;i&gt;egs/voxforge&lt;/i&gt; 로 이동해서 보면 다음과 같이 세 개의 디렉터리가 존재합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ tree -L 1
.
├── gst_demo
├── online_demo
└── s5

3 directories, 0 files&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;s5&lt;/i&gt; 는 학습시킬 때 확인 했고 나머지가 데모 관련된 디렉터리인데 &lt;i&gt;gst_demo&amp;nbsp;&lt;/i&gt;는 &lt;i&gt;GUI&lt;/i&gt; 를 통해 데모를 확인 할 수 있도록 해줍니다. 다만 앞선 글의 연장선으로 이 글에서는 &lt;i&gt;Mac&lt;/i&gt; 을 기준으로 설명하고 있으며 &lt;i&gt;MacOS&lt;/i&gt; 에서 &lt;i&gt;gst_demo&lt;/i&gt; 를 돌리는건 녹록치 않기 때문에 &lt;i&gt;online_demo&lt;/i&gt; 를 소개하도록 합니다. ( 원하신다면 &lt;i&gt;gst_demo&lt;/i&gt; 를 여러방면으로 시도해볼 수 있겠지만 정확히 알 수 없는 여러가지 패키지가 설치 되어 여러분의 &lt;i&gt;Mac&lt;/i&gt; 이 너저분해질&amp;nbsp;수 있습니다 )&lt;/p&gt;&lt;p&gt;자, 그러 &lt;i&gt;online_demo&lt;/i&gt;&amp;nbsp;디렉터리로 이동해서 내용을 살펴봅시다. &lt;i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;run.sh&lt;/span&gt;&lt;/i&gt; 은 데모를 실행시켜주는데 &lt;i&gt;test-mode argument&lt;/i&gt; 로 &lt;i&gt;live&amp;nbsp;&lt;/i&gt;와 &lt;i&gt;simulated&lt;/i&gt; 를 넘길 수 있습니다. &lt;i&gt;live&lt;/i&gt; 는 &lt;i&gt;mic&lt;/i&gt; 를 통한 테스트를 진행할 수 있고, &lt;i&gt;simulated&lt;/i&gt; 는 사전에 정의된 &lt;i&gt;wav&lt;/i&gt; 파일( &lt;i&gt;online-data/audio/*wav&lt;/i&gt; )을 대상으로 테스트 할 수 있습니다. 여기서 ... 스크립트를 실행하면 바로 &lt;i&gt;microphone&lt;/i&gt; 데모( &lt;i&gt;Mac&lt;/i&gt; 기준이니 당연히 &lt;i&gt;mic&lt;/i&gt; 를 사용할 수 있다고 가정합니다 )를 볼 수 있지만 아마도 다음과 같은 에러를 만나게 될 겁니다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cd online_demo 
$ ./run.sh --test-mode live
...
...생략
online-gmm-decode-faster command not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;데모를 돌리기 위해 필요한 패키지가 설치 되어 있지 않기 때문인데 &lt;i&gt;kaldi&lt;/i&gt; 홈에서 다음 디렉터리로 이동하고 패키지를 설치하도록 합시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd /path/to/kaldi/tools&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;패키지를 설치하도록 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./install_portaudio.sh&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;관련된 모듈을 컴파일해줘야 하기 때문에 &lt;i&gt;src&lt;/i&gt; 경로로 이동해서 아래와 같이 &lt;i&gt;make&lt;/i&gt; 를 실행해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;cd /path/to/kaldi/src
$ make ext&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 모든 준비는 끝났습니다. 다시 &lt;i&gt;online_demo&lt;/i&gt; 로 이동해서 테스트 해봅시다. 아래 영상은 &lt;a href=&quot;https://www.youtube.com/watch?v=dMGcCkfLvCA&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;CNN 방송&lt;/a&gt;을 대상으로 테스트한 결과 입니다.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pc8Fu_52tOE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;div&gt;&lt;br /&gt;&lt;h3&gt;마무리&lt;/h3&gt;&lt;p&gt;데모 성공을 축하드립니다. 인식률은 다소 떨어지지만 &lt;i&gt;kaldi&lt;/i&gt; 를 처음 다루는 예제로 훌륭하다고 생각됩니다. 이제 다양하고 더 많은 데이터를 기반으로 모델을 학습시키고 &lt;i&gt;Kaldi&lt;/i&gt; 기반의&amp;nbsp;&lt;i&gt;speech recognition&lt;/i&gt; 를 도전해 볼 수 있겠군요. :-)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>기계학습</category>
<category>kaldi</category>
<category>mac</category>
<category>Opensource</category>
<category>Speech Recognition</category>
<category>VoxForge</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/776</guid>
<comments>https://jybaek.tistory.com/776#entry776comment</comments>
<pubDate>Tue, 05 Mar 2019 13:47:12 +0900</pubDate>
</item>
<item>
<title>[GitHub] fork repository 최신 버전으로 유지하기</title>
<link>https://jybaek.tistory.com/775</link>
<description>&lt;h3&gt;# TL;DR&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git remote add upstream &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git&lt;/span&gt;
git fetch upstream
git merge upstream/master&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;# 들어가며&lt;/h3&gt;&lt;p&gt;GitHub 에서 좋은 프로젝트를 발견했고 유용하게 사용을 하다보면 &lt;i&gt;Contribution&lt;/i&gt;&amp;nbsp;하고 싶은 상황이&amp;nbsp;생깁니다. 개발자라면 보통 그래요. 이제 &lt;i&gt;Contribution&lt;/i&gt; 을 마음먹었으니 프로젝트를 &lt;i&gt;fork&lt;/i&gt; 하고 열심히 수정을 합니다. 그리고 &lt;i&gt;Pull Request&lt;/i&gt; 를 날리겠죠. 며칠 후에 기분 좋은 메일이 왔습니다. &lt;i&gt;Merged&lt;/i&gt; 되었다는 내용이죠 :-)&lt;/p&gt;&lt;p&gt;여기까지는 좋습니다. 그리고 시간이 흘러 같은 프로젝트에 또 &lt;i&gt;Contribution&lt;/i&gt; 하고 싶은게 생기게 됩니다. 여기서 문제가 생기게 되는데요. 원본 소스는 많은 개발자들에 의해 계속 소스코드가 발전해나갔지만 내가 &lt;i&gt;fork&lt;/i&gt; 해놓은 브랜치는 예전 상태 그대로 멈춰있다는 것이죠.&amp;nbsp;&amp;nbsp;아래 그림을 봅시다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991CD64B5C5D1F893B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-08 오후 3.19.22.png&quot; height=&quot;597&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;내가 기여한 이후에 다른 누군가에 의해 원본 소스는 계속 변화되었습니다. 결국 내가 갖고 있는 소스는 오래된 것이 되버린 것이죠. 이 상황에서 소스를 수정하고 &lt;i&gt;Pull Request&lt;/i&gt; 를 하게 되면 &lt;i&gt;conflict&lt;/i&gt; 의 늪에 빠지게 될 겁니다. 요즘은 &lt;i&gt;GitHub&lt;/i&gt; 이 잘 되어 있어서 브라우저 상에서&amp;nbsp;&lt;i&gt;conflict&lt;/i&gt; 를 풀어내는게 가능은 하지만 너무 많은 변화가 있었다면 이것도 쉽지는 않을 겁니다.&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이때 필요한 것이&lt;i&gt; 1) upstream &lt;/i&gt;등록&amp;nbsp;&lt;i&gt;2) upsream &lt;/i&gt;으로부터 소스코드 동기화 입니다. ( 아, 물론 &lt;i&gt;fork&lt;/i&gt; 했던 레포를 날려버리고 새롭게 &lt;i&gt;fork&lt;/i&gt; 해도 상당히 깔끔합니다. 내 깃헙에서 작업했던 히스토리가 중요하지 않다면요 )&lt;/p&gt;&lt;h3&gt;&lt;i&gt;# upstream 등록&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;보통 원본 소스코드가 있는 곳의 위치를 upstream 이라고 명명합니다. 이 이름으로 원본소스의 위치를 등록해줘야 합니다. 아래 &lt;i&gt;&lt;a href=&quot;https://github.com/jybaek/kaldi&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Kaldi&lt;/a&gt;&lt;/i&gt; 예제를 통해 살펴보겠습니다. 미리 &lt;i&gt;Kaldi&lt;/i&gt; 를 &lt;i&gt;GitHub&lt;/i&gt; 의 &lt;i&gt;jybaek&lt;/i&gt; 의 공간에 &lt;i&gt;fork &lt;/i&gt;해뒀고 이를 &lt;i&gt;clone&lt;/i&gt;&amp;nbsp;했습니다. 일반적인 과정입니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ git remote -v
origin	https://github.com/jybaek/kaldi.git (fetch)
origin	https://github.com/jybaek/kaldi.git (push)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기에 &lt;i&gt;upstream&lt;/i&gt; 이라는 이름으로 원본 소스코드의 위치를 추가시켜봅시다. 여기 빨간 부분만 여러분에게 필요한 경로를 지정해주면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git remote add upstream &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;https://github.com/kaldi-asr/kaldi.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;제대로 추가 되었는지도 확인해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ git remote -v
origin	https://github.com/jybaek/kaldi.git (fetch)
origin	https://github.com/jybaek/kaldi.git (push)
upstream	https://github.com/kaldi-asr/kaldi.git (fetch)
upstream	https://github.com/kaldi-asr/kaldi.git (push)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;잘 등록 되었죠? 혹시 주소를 잘못 저장했어도 걱정하지마세요. 아래처럼 삭제하고 다시 추가해주면 되니까요.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git remote remove upstream&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아무튼 이제 &lt;i&gt;upstream&lt;/i&gt; 이 등록되었고, 이 주소로부터 소스코드를 동기화 하도록 합니다.&lt;/p&gt;&lt;h3&gt;&lt;i&gt;#&lt;/i&gt; &lt;i&gt;동기화&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;일단 &lt;i&gt;fetch&lt;/i&gt; 명령어를 통해 원본 소스코드의 내용을 로컬에 내려 받습니다. 사용법은 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git fetch upstream&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 사용해보고 터미널에 출력되는 내용을 확인해볼까요?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ git fetch upstream
remote: Enumerating objects: 34, done.
remote: Counting objects: 100% (34/34), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 38 (delta 27), reused 32 (delta 27), pack-reused 4
Unpacking objects: 100% (38/38), done.
From https://github.com/kaldi-asr/kaldi
 * [new branch]          5.0                      -&amp;gt; upstream/5.0
 * [new branch]          5.1                      -&amp;gt; upstream/5.1
 * [new branch]          5.2                      -&amp;gt; upstream/5.2
 * [new branch]          5.3                      -&amp;gt; upstream/5.3
 * [new branch]          5.4                      -&amp;gt; upstream/5.4
 * [new branch]          cudnn                    -&amp;gt; upstream/cudnn
 * [new branch]          jtrmal-patch-1           -&amp;gt; upstream/jtrmal-patch-1
 * [new branch]          master                   -&amp;gt; upstream/master
 * [new branch]          multitree                -&amp;gt; upstream/multitree
 * [new branch]          reorthonormalize-cleaned -&amp;gt; upstream/reorthonormalize-cleaned
 * [new branch]          revert-3018-pr           -&amp;gt; upstream/revert-3018-pr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;와, 짧은 시간동안 많이 바뀌었네요. 아직 끝이 아닙니다. 내려받은 소스코드를 실제 내&amp;nbsp;&lt;i&gt;repository&lt;/i&gt; 에 &lt;i&gt;merge&lt;/i&gt; 시켜줘야 합니다. 다음과 같이 진행하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git merge upstream/master&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
자, 위에 커맨드를&amp;nbsp;터미널에서 실행해보죠.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ git merge upstream/master
Updating 05d9a3d5e..afc5e78c2
Fast-forward
 .gitignore                                             |   1 +
 egs/babel/s5d/conf/lang/404-georgian.FLP.official.conf |   4 +--
 egs/babel/s5d/local/make_L_align.sh                    |  14 +++++++---
 egs/heroico/s5/cmd.sh                                  |   1 +
 egs/heroico/s5/local/heroico_download.sh               |  37 --------------------------
 egs/heroico/s5/local/subs_prepare_data.pl              |   2 +-
 egs/heroico/s5/run.sh                                  |  22 +++++++++++-----
 egs/voxforge/s5/local/voxforge_prepare_dict.sh         |   2 +-
 src/base/kaldi-error.cc                                |   8 ++++--
 src/decoder/grammar-fst.cc                             | 124 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 src/decoder/grammar-fst.h                              |  17 ++++++------
 src/doc/grammar.dox                                    |   2 +-
 src/feat/mel-computations.h                            |   2 +-
 src/online/online-feat-input.h                         |  38 +++++++++++++++++++++++----
 14 files changed, 203 insertions(+), 71 deletions(-)
 delete mode 100755 egs/heroico/s5/local/heroico_download.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 내쪽 &lt;i&gt;repository&lt;/i&gt; 와 원본코드가 존재하는 &lt;i&gt;repository&lt;/i&gt; 가 동기화 되었습니다. 빠르게 변하는 프로젝트일수록 동기화는 매우 중요합니다. 코드를 수정하거나 반영하기 전에 항상 동기화 해주는 습관이 필요하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>버전관리시스템</category>
<category>Fetch</category>
<category>fork</category>
<category>github</category>
<category>merge</category>
<category>upstream</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/775</guid>
<comments>https://jybaek.tistory.com/775#entry775comment</comments>
<pubDate>Sat, 09 Feb 2019 05:30:00 +0900</pubDate>
</item>
<item>
<title>[책] 파이썬으로 배우는 머신러닝 교과서</title>
<link>https://jybaek.tistory.com/774</link>
<description>&lt;div style=&quot;text-align:left&quot;&gt;&lt;p&gt;한빛미디어에서 번역된 머신러닝 도서가 출간되었다. 제목부터 심상치 않은데 &lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B8718279503&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;파이썬으로 배우는 머신러닝의 &lt;/a&gt;&lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=B8718279503&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;교과서&lt;/a&gt;란다. 춘추전국시대 같은 머신러닝 시장에 당당히 교과서 타이틀을 쟁취할만한지 한빛미디어 나는리뷰어다를 통해 책을 지원 받고 살펴보았다. &lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9912724E5C50F2562E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190130093905.783.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;책은 보통의 머신러닝 입문서 정도의 두께이고 안에 내용은 쥬피터 노트북의 설치부터 파이썬의 기본적인 활용으로 이어진다. 그리고 4장은 언제든 필요할 때 펼쳐서 볼 수 있도록 머신러닝에 필요한 수학 지식을 차곡차곡 담아놨다. 또한 아래처럼 노트북상에 그래프 표기를 위해 사용하는 &lt;i&gt;matplotlib&lt;/i&gt; 설명이 잘 되어 있어서 많은 도움을 받았다.   ​&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99876C345C50F25A32&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190130093905.31.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;4장에서는 다양한 수학을 다뤘지만&amp;nbsp;그렇다고 쉽다는 이야기는 아니다. 미분, 편미분, 편차 등 다양한 개념을 소개하고 공식을 대입하는 과정을 친절히 설명해주고 있지만 수포자라면 당연히 어려움을 겪을 수밖에 없다. 수학적 개념을 위해 다른 책의 도움도 일정부분 필요하다는 이야기다. &lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993BF03A5C50F25E30&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190130093906.179.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;아래정도 들어가면 까마득해진다. 하지만 너무 걱정말고 넘어가도 좋다. 관련된 지식이 필요할 때 다시 되돌아와서 보면 되니까.&amp;nbsp;&lt;/p&gt;&lt;p&gt;​&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995737485C5136BE24&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190130143131.248.jpg&quot; height=&quot;615&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;책의 절반을 넘기고 나면 드디어 머신러닝의 입문에 들어서게 된다. 뉴런에 대한 설명부터 시작해서 지도학습을 중점적으로 다루게 된다. 강화학습은 이 책의 과정에 포함되지 않는다.​&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9980EC3F5C5136C120&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190130143131.747.jpg&quot; height=&quot;616&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;7장은 신경망을 소개하는 차원으로 지나가고 8장에서는 딥러닝의 입문 필수코스인 손글씨 인식( &lt;i&gt;MNIST&lt;/i&gt; )에 대한 설명이 이어진다. 끝으로 9장은 비지도 학습에 대한 이야기를 풀어내고 있는데, 이 책은 머신러닝을 딥다이브 하지는 않는다. 어쩌면 그렇기 때문에 더욱 이 책이 머신러닝 입문 서적으로 안성맞춤이다. 사실 교과서라는게 그렇지 않은가? 파이썬을 잘 몰라도 괜찮다. 머신러닝을 시작하고자 한다면 이 책을 두드려보자.&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&amp;nbsp;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>책</category>
<category>나는리뷰어다</category>
<category>리뷰</category>
<category>머신러닝</category>
<category>미분</category>
<category>책</category>
<category>파이썬</category>
<category>한빛미디어</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/774</guid>
<comments>https://jybaek.tistory.com/774#entry774comment</comments>
<pubDate>Wed, 30 Jan 2019 09:39:58 +0900</pubDate>
</item>
<item>
<title>아나콘다 가상환경</title>
<link>https://jybaek.tistory.com/773</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:797px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99EC5E4F5C6D002617&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-20 오후 4.21.21.png&quot; height=&quot;176&quot; style=&quot;&quot; width=&quot;797&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://conda.io/en/master/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://conda.io/en/master/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;python&lt;/i&gt; 을 가상환경으로 사용할 수 있도록 지원하는 프로젝트중 하나인 &lt;i&gt;conda&lt;/i&gt; 를 실무에서&amp;nbsp;빠르게 사용 할 수 있도록 살펴보도록 합니다. ( 또 다른 가상환경&amp;nbsp;프로젝트인 &lt;i&gt;virtualenv&lt;/i&gt; 는 &lt;a href=&quot;https://jybaek.tistory.com/676&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이쪽&lt;/a&gt;을 참고하세요&amp;nbsp;)&lt;/p&gt;
&lt;p&gt;우선 우리가 사용하는 &lt;i&gt;OS&lt;/i&gt; 에 맞게 다음 링크에서 아나콘다를 다운로드 받도록 합니다&lt;br /&gt;&lt;a href=&quot;https://www.anaconda.com/download/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.anaconda.com/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;설치가 끝나면 터미널에서 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;conda&lt;/span&gt;&lt;/i&gt; 명령어를 통해서 모든 조작이 가능한데 필수적인 옵션을 하나씩 살펴보도록 합시다. ( 실행 화면 등이 포함되어 있기 때문에 PC 버전에서 최적화 되어 있습니다 )&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;# 버전 확인&lt;/b&gt;&lt;br /&gt;: 사용하고 있는 &lt;i&gt;conda&lt;/i&gt; 패키지의 버전을 확인한다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ conda --version
conda 4.5.12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 업데이트&lt;/b&gt;&lt;br /&gt;: 사용하고 있는 &lt;i&gt;conda&lt;/i&gt; 패키지를 업데이트 할 때 사용한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 가상환경 생성&lt;/b&gt;&lt;br /&gt;: 가상환경을 생성한다. 이때 &lt;i&gt;package_spec&lt;/i&gt; 을 명시해서 필요한 패키지를 가상환경 생성시에 한번에 설치&amp;nbsp;할 수 있다. 아래는 가상환경을 생성할 때 &lt;i&gt;python&lt;/i&gt; 을 특정 버전으로 지정하고, 머신러닝 툴킷인 &lt;i&gt;tensorflow&lt;/i&gt; 와 &lt;i&gt;keras&lt;/i&gt; 를 설치하는 예제이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda create --name &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;YOUR_ENV_NAME&lt;/span&gt; python=3.6.5 tensorflow keras&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위에 예제처럼 패키지의 특정 버전을 직접 명시하거나 생략 가능하니 필요에 따라 사용하면 된다. 실행에 대한 결과 예시는 다음과 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ conda create --name keras_p36 python=3.6.5 tensorflow keras
Solving environment: done

## Package Plan ##

  environment location: /Users/caley/anaconda3/envs/keras_p36

  added / updated specs:
    - keras
    - python=3.6.5
    - tensorflow


The following packages will be downloaded:

    package                    |            build
    ---------------------------|-----------------
    markdown-3.0.1             |           py36_0         107 KB
    keras-applications-1.0.6   |           py36_0          49 KB
    c-ares-1.15.0              |       h1de35cc_1          81 KB
    hdf5-1.10.4                |       hfa1e0ec_0         4.5 MB
    tensorflow-1.12.0          |mkl_py36h2b2bbaf_0           4 KB
    protobuf-3.6.1             |   py36h0a44026_0         608 KB
    scipy-1.2.0                |   py36h1410ff5_0        15.8 MB
    absl-py-0.7.0              |           py36_0         156 KB
    keras-2.2.4                |                0           5 KB
    pyyaml-3.13                |   py36h1de35cc_0         160 KB
    grpcio-1.14.1              |   py36h9011c5e_0         885 KB
    tensorflow-base-1.12.0     |mkl_py36h70e0e9a_0        85.6 MB
    gast-0.2.2                 |           py36_0         138 KB
    _tflow_select-2.3.0        |              mkl           3 KB
    keras-preprocessing-1.0.5  |           py36_0          52 KB
    h5py-2.9.0                 |   py36h3134771_0         971 KB
    keras-base-2.2.4           |           py36_0         457 KB
    six-1.12.0                 |           py36_0          22 KB
    libprotobuf-3.6.1          |       hd9629dc_0         3.8 MB
    werkzeug-0.14.1            |           py36_0         423 KB
    astor-0.7.1                |           py36_0          43 KB
    tensorboard-1.12.2         |   py36haf313ee_0         3.1 MB
    termcolor-1.1.0            |           py36_1           7 KB
    ------------------------------------------------------------
                                           Total:       116.9 MB

...
Proceed ([y]/n)? y


Downloading and Extracting Packages
markdown-3.0.1       | 107 KB    | ############################################### | 100%
keras-applications-1 | 49 KB     | ############################################### | 100%
c-ares-1.15.0        | 81 KB     | ############################################### | 100%
hdf5-1.10.4          | 4.5 MB    | ############################################### | 100%
tensorflow-1.12.0    | 4 KB      | ############################################### | 100%
protobuf-3.6.1       | 608 KB    | ############################################### | 100%
scipy-1.2.0          | 15.8 MB   | ############################################### | 100%
...
# To activate this environment, use
#
#     $ conda activate keras_p36
#
# To deactivate an active environment, use
#
#     $ conda deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;# 가상환경 활성화&lt;/b&gt;&lt;br /&gt;: 설치되어 있는 가상환경으로 접속한다. ( 엄밀히 이야기하면 내부적으로&amp;nbsp;현재 터미널의 &lt;i&gt;PATH&lt;/i&gt; 와 같은 환경변수를 가상환경으로 설정해주는 과정이 포함된다 )&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda activate &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;YOUR_ENV_NAME&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;# 가상환경 비활성화&lt;/b&gt;&lt;br /&gt;: 접속되어 있는 가상환경으로부터 빠져나온다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda deactivate&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 가상환경 목록 확인&lt;/b&gt;&lt;br /&gt;: 현재 서버에 설치되어 있는 가상환경 목록을 출력한다. 아래는 &lt;i&gt;AWS P Type Instance &lt;/i&gt;에서의 명령어 실행 결과이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ conda env list
# conda environments:
#
base                  *  /home/ubuntu/anaconda3
caffe2_p27               /home/ubuntu/anaconda3/envs/caffe2_p27
caffe_p27                /home/ubuntu/anaconda3/envs/caffe_p27
caffe_p35                /home/ubuntu/anaconda3/envs/caffe_p35
chainer_p27              /home/ubuntu/anaconda3/envs/chainer_p27
chainer_p36              /home/ubuntu/anaconda3/envs/chainer_p36
cntk_p27                 /home/ubuntu/anaconda3/envs/cntk_p27
cntk_p36                 /home/ubuntu/anaconda3/envs/cntk_p36
mxnet_p27                /home/ubuntu/anaconda3/envs/mxnet_p27
mxnet_p36                /home/ubuntu/anaconda3/envs/mxnet_p36
python2                  /home/ubuntu/anaconda3/envs/python2
python3                  /home/ubuntu/anaconda3/envs/python3
pytorch_p27              /home/ubuntu/anaconda3/envs/pytorch_p27
pytorch_p36              /home/ubuntu/anaconda3/envs/pytorch_p36
tensorflow_p27           /home/ubuntu/anaconda3/envs/tensorflow_p27
tensorflow_p36           /home/ubuntu/anaconda3/envs/tensorflow_p36
theano_p27               /home/ubuntu/anaconda3/envs/theano_p27
theano_p36               /home/ubuntu/anaconda3/envs/theano_p36&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 가상환경 삭제&lt;/b&gt;&lt;br /&gt;: 사용하지 않는 가상환경을 정리할 때 사용한다. 현재 접속되어 있는 가상환경은 삭제 할 수 없으니 참고하도록 하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda remove --name &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;YOUR_ENV_NAME&lt;/span&gt; --all&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 가상환경 추출&lt;/b&gt;&lt;br /&gt;: 모든 세팅이 되어 있는 가상환경을 다른 머신으로 복사하고 싶을 때 사용하면 된다. 아래 명령어는 현재 환경을 &lt;i&gt;environment.yml&lt;/i&gt; 파일로 저장한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda env export --name &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;YOUR_ENV_NAME&lt;/span&gt; &amp;gt; environment.yml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;# 추출한 가상환경으로 새로운 가상환경 생성&lt;/b&gt;&lt;br /&gt;: 앞서 추출한 &lt;i&gt;environment.yml &lt;/i&gt;로 가상환경을 생성한다. 설치되어 있던 모든 패키지가 자동으로 설치된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;conda env create -f ./environment.yml&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;마무리&lt;/h2&gt;&lt;p&gt;실무에서 당장 사용할법한 옵션들을 위주로 콘다의 사용 방법을 예제와 함께&amp;nbsp;살펴보았습니다. 막상 다양한 가상환경을 설치해서 사용하다보면 겪게되는 불편중에 하나가 가상환경 간에 이동인데, 은근히 타이핑이 어렵고 손이 많이갑니다&amp;nbsp;( 외워야 하는 것도 많고 ). 그래서 아래와 같이 &lt;i&gt;Conda connector&lt;/i&gt; 를 제공하도록 합니다. 동일한 불편을 겪은 분들은 이용해보시는 것도 좋을 듯.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jybaek/conda_connector&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/jybaek/conda_connector&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>python</category>
<category>conda</category>
<category>Python</category>
<category>가상환경</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/773</guid>
<comments>https://jybaek.tistory.com/773#entry773comment</comments>
<pubDate>Fri, 25 Jan 2019 15:42:54 +0900</pubDate>
</item>
<item>
<title>[Kaldi] Run sample script on Mac</title>
<link>https://jybaek.tistory.com/772</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992659335C5C226618&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-07 오후 9.19.22.png&quot; height=&quot;215&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://kaldi-asr.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://kaldi-asr.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이번 글에는 &lt;i&gt;&lt;a href=&quot;https://github.com/kaldi-asr/kaldi&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Kaldi&lt;/a&gt;&lt;/i&gt; 에서 제공하는 샘플 스크립트를 통해 기본적인 테스트를 진행하는 과정을 살펴봅니다. 테스트를 진행하기 전에 잠깐 &lt;i&gt;Kaldi&lt;/i&gt;&amp;nbsp;의 디렉터리 구조를 살펴볼 필요가 있는데요, 소스코드를 내려받고 살펴보면 아래와 같은 구조를 확인할 수 있습니다.
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ tree -L 1
.
├── COPYING
├── INSTALL
├── README.md
├── egs/
├── misc/
├── scripts/
├── src/
├── tools/
└── windows/

6 directories, 3 files&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6개의 디렉터리와 3개의 파일로 구성되어 있군요. &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;파일&lt;/span&gt;은 설치 과정이 메모되어 있는 &lt;i&gt;&lt;b&gt;INSTALL&lt;/b&gt;&lt;/i&gt; 과 프로젝트 소개가 있는 &lt;b&gt;&lt;i&gt;README.md&lt;/i&gt;,&lt;/b&gt; 그리고 카피라이트인 &lt;i&gt;&lt;b&gt;COPYING&lt;/b&gt;&lt;/i&gt; 가 있습니다. &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;디렉터리&lt;/span&gt;는 앞서 살펴본&lt;i&gt; &lt;b&gt;src&lt;/b&gt;, &lt;b&gt;tools&lt;/b&gt; &lt;/i&gt;를 제외하고 살펴봅시다. &lt;i&gt;&lt;b&gt;windows&lt;/b&gt;&lt;/i&gt;&amp;nbsp;는&amp;nbsp;윈도우즈 사용자를 위한 설치를 위한 방법과 파일들로 구성되어 있습니다. 넘어가도록 하죠. 이제 &lt;i&gt;&lt;b&gt;scripts&lt;/b&gt;&lt;/i&gt; 디렉터리와 &lt;i&gt;&lt;b&gt;egs&lt;/b&gt;&lt;/i&gt; 가 남았는데 &lt;i&gt;egs&lt;/i&gt; 가 중요합니다.&amp;nbsp;&lt;/p&gt;&lt;h3&gt;&lt;i&gt;egs&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;&lt;i&gt;&lt;b&gt;egs&lt;/b&gt;&lt;/i&gt; 는&amp;nbsp;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;eg&lt;/span&gt;&amp;nbsp;&lt;/i&gt;( 라틴어로 &lt;i&gt;exempli gratia&lt;/i&gt;, 영어로는 &lt;i&gt;for example&lt;/i&gt; )와 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;s&lt;/span&gt;cripts&lt;/i&gt;&amp;nbsp;의 합성어로 예제 스크립트를 모아놓은 디렉터리라는 뜻이겠습니다.
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ls egs/
README.txt		fisher_english		sre08
aishell			fisher_swbd		sre10
aishell2		gale_arabic		sre16
ami			gale_mandarin		svhn
an4			gp			swahili
apiai_decode		heroico			swbd
aspire			hkust			tedlium
aurora4			hub4_english		thchs30
babel			hub4_spanish		tidigits
babel_multilang		iam			timit
bentham			iban			tunisian_msa
bn_music_speech		ifnenit			uw3
callhome_diarization	librispeech		voxceleb
callhome_egyptian	lre			voxforge
chime1			lre07			vystadial_cz
chime2			madcat_ar		vystadial_en
chime3			madcat_zh		wsj
chime4			mini_librispeech	yesno
chime5			multi_en		yomdle_fa
cifar			ptb			yomdle_korean
commonvoice		reverb			yomdle_russian
csj			rimes			yomdle_tamil
dihard_2018		rm			yomdle_zh
fame			sitw			&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;zeroth_korean&lt;/span&gt;
farsdat			sprakbanken
fisher_callhome_spanish	sprakbanken_swe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다양한 예제가 보이는데 이중에는 놀랍게도&amp;nbsp;한글 예제도 존재합니다. 바로 &lt;i&gt;zeroth_korean&lt;/i&gt; 인데요, &lt;a href=&quot;https://github.com/goodatlas/zeroth&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;이쪽&lt;/a&gt;을 통해서 해당 프로젝트를 살펴볼 수 있습니다. 하지만 여기서는 더이상 논의하지 않도록 합니다. 왜냐하면 &lt;i&gt;zeroth_korean&lt;/i&gt;&amp;nbsp;은 그쪽 &lt;i&gt;Repo&lt;/i&gt; 를 통해 사용법을 쉽게 확인할 수 있기 때문입니다. &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;우리는&amp;nbsp;&lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Kaldi&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 의 일반적인 샘플을 돌려보고&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;새롭게 프로젝트를 추가해보는 &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;것이 최종 목표&lt;/span&gt;입니다. 일단 &lt;i&gt;egs/README.txt &lt;/i&gt;를 통해 &lt;i&gt;egs&lt;/i&gt; 를 어떻게 접근해야되는지&amp;nbsp;들여다봅시다.
&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cat README.txt

This directory contains example scripts that demonstrate how to
use Kaldi.  Each subdirectory corresponds to a corpus that we have
example scripts for.

Note: we now have some scripts using free data, including voxforge,
vystadial_{cz,en} and yesno.  Most of the others are available from
the Linguistic Data Consortium (LDC), which requires money (unless you
have a membership).

If you have an LDC membership, probably rm/s5 or wsj/s5 should be your first
choice to try out the scripts.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;읽어보니 샘플에서 사용하는 모든 데이터가 무료는 아닌걸로 보이네요. 무료 데이터를 제공하는건 &lt;i&gt;&lt;a href=&quot;http://www.voxforge.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;voxforge&lt;/a&gt;, vystadial_{cz,en}, yesno&lt;/i&gt; 가 있습니다. 일단 어떤 샘플로 테스트를 해볼지 안에 디렉터리를 봅시다. ( &lt;i&gt;LDC&lt;/i&gt; 멤버라면 &lt;i&gt;Resource Management,&lt;/i&gt; 혹은 월스트리트 저널의 말뭉치인 &lt;i&gt;wsj&lt;/i&gt; 를 먼저 돌려보는 것이 좋다고 합니다 )&amp;nbsp;&lt;/p&gt;&lt;p&gt;무료 샘플을 살펴보기 위해 각 디렉터리 하위가 어떻게 생겼는지 확인해봅시다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ls voxforge/ vystadial_* yesno/
&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;voxforge&lt;/span&gt;/:
gst_demo	online_demo	s5

vystadial_cz:
README.txt	online_demo	s5		s5b

vystadial_en:
README.txt	online_demo	s5

yesno/:
README.txt	s5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;구성을 보니, &lt;i&gt;online_demo&lt;/i&gt; 와 &lt;i&gt;gst_demo&lt;/i&gt; 가 있는 &lt;i&gt;&lt;a href=&quot;http://www.voxforge.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;voxforge&lt;/a&gt;&lt;/i&gt; 가 눈에 들어옵니다. &lt;i&gt;voxforge&lt;/i&gt; 를 바로 사용해보도록&amp;nbsp;합니다.&lt;/p&gt;&lt;h3&gt;&lt;i&gt;&lt;a href=&quot;http://www.voxforge.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;voxforge&lt;/a&gt;&lt;/i&gt;&lt;/h3&gt;&lt;p&gt;디렉터리 안에 있는 &lt;i&gt;{gst, online}_demo&lt;/i&gt; 는 일단 무시하고 &lt;i&gt;s5&lt;/i&gt; 로 이동합시다. &lt;i&gt;egs&lt;/i&gt; 안에 있는 모든 &lt;i&gt;s5&lt;/i&gt;&amp;nbsp;디렉터리는 아래와&amp;nbsp;유사한 구성을 띄고 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ls -al
total 48
drwxr-xr-x  10 caley  staff   320  1 24 11:50 .
drwxr-xr-x   5 caley  staff   160  1 24 11:50 ..
-rw-r--r--   1 caley  staff   904  1 24 11:50 cmd.sh
drwxr-xr-x   4 caley  staff   128  1 24 11:50 conf
-rwxr-xr-x   1 caley  staff   932  1 24 11:50 getdata.sh
drwxr-xr-x  14 caley  staff   448  1 24 11:50 local
-rwxr-xr-x   1 caley  staff   841  1 24 11:50 path.sh
-rwxr-xr-x   1 caley  staff  9364  1 24 11:50 run.sh
lrwxr-xr-x   1 caley  staff    18  1 24 11:50 steps -&amp;gt; ../../wsj/s5/steps
lrwxr-xr-x   1 caley  staff    18  1 24 11:50 utils -&amp;gt; ../../wsj/s5/utils&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 실습 순서는 다음과 같이 진행됩니다. 1) &lt;i&gt;path.sh &lt;/i&gt;의 일부를 수정 할 텐데 후에 데이터를 다운로드 하게 될 디렉터리인 &lt;i&gt;DATA_ROOT&lt;/i&gt; 를 지정해주고, 2) &lt;i&gt;getdata.sh&lt;/i&gt; 을 실행해서 데이터를 다운로드 합니다. 3) 미리 필요한 환경 구축을 합니다. 이 과정은 &lt;i&gt;run.sh&lt;/i&gt; 을 실행할 때 발생되는 각종 예외를 잡는 단계이기 때문에 매우 중요한 과정입니다. 4) 끝으로&amp;nbsp;&lt;i&gt;run.sh&lt;/i&gt; 을 통해 실제 학습을 진행합니다.&amp;nbsp;&lt;/p&gt;&lt;h3&gt;1) path.sh&lt;/h3&gt;&lt;p&gt;자, 아래 &lt;i&gt;path.sh&lt;/i&gt; 의 일부를 가져왔습니다. &lt;i&gt;vim&lt;/i&gt; 이나 &lt;i&gt;emacs&lt;/i&gt; 등의 편집기로 &lt;i&gt;path.sh&lt;/i&gt; 을 열고 &lt;i&gt;export&lt;/i&gt; 앞에 있는 셸 스크립트의 주석 기호인&amp;nbsp;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;#&lt;/span&gt; 을 제거해줍니다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;# VoxForge data will be stored in:
# export DATA_ROOT=&quot;$KALDI_ROOT/egs/voxforge/s5/voxforge&quot;    # e.g. something like /media/secondary/voxforge&lt;/pre&gt;&lt;p&gt;편집이 끝났으면&lt;i&gt; path.sh&lt;/i&gt; 을 실행해서 &lt;i&gt;DATA_ROOT&lt;/i&gt; 를 적용시켜 줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sh path.sh&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2) getdata.sh&lt;/h3&gt;&lt;p&gt;다음으로 학습 데이터 다운로드 스크립트를 실행 할 텐데 다운로드 되는 데이터( 대략 20-25GB )를 위해 디스크의 여유공간을 확보하고 &lt;i&gt;getdata.sh&lt;/i&gt; 을 실행 시킵니다.&amp;nbsp;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./getdata.sh
--- Starting VoxForge data download (may take some time) ...
--2019-01-31 21:01:44--  http://www.repository.voxforge1.org/downloads/SpeechCorpus/Trunk/Audio/Main/16kHz_16bit
Resolving www.repository.voxforge1.org (www.repository.voxforge1.org)... 74.208.236.70
Connecting to www.repository.voxforge1.org (www.repository.voxforge1.org)|74.208.236.70|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: http://www.repository.voxforge1.org/downloads/SpeechCorpus/Trunk/Audio/Main/16kHz_16bit/ [following]
--2019-01-31 21:01:45--  http://www.repository.voxforge1.org/downloads/SpeechCorpus/Trunk/Audio/Main/16kHz_16bit/
Reusing existing connection to www.repository.voxforge1.org:80.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
Saving to: '/Users/caley/work/kaldi/egs/voxforge/s5/../../../egs/voxforge/s5/voxforge/tgz/16kHz_16bit.tmp'

16kHz_16bit.tmp                           [            &amp;lt;=&amp;gt;                                                         ] 993.03K   347KB/s    in 2.9s

Last-modified header missing -- time-stamps turned off.
2019-01-31 21:01:49 (347 KB/s) - '/Users/caley/work/kaldi/egs/voxforge/s5/../../../egs/voxforge/s5/voxforge/tgz/16kHz_16bit.tmp' saved [1016862]

Removing /Users/caley/work/kaldi/egs/voxforge/s5/../../../egs/voxforge/s5/voxforge/tgz/16kHz_16bit.tmp since it should be rejected.

--2019-01-31 21:01:50--  http://www.repository.voxforge1.org/downloads/SpeechCorpus/Trunk/Audio/Main/16kHz_16bit/?C=N;O=D
Reusing existing connection to www.repository.voxforge1.org:80.
HTTP request sent, awaiting response... 200 OK
Length: unspecified [text/html]
...
...
zlp-20100110-wwn.tgz                  100%[=======================================================================&amp;gt;]   1.40M  2.34MB/s    in 0.6s

2019-01-31 23:12:51 (2.34 MB/s) - '/Users/caley/work/kaldi/egs/voxforge/s5/../../../egs/voxforge/s5/voxforge/tgz/zlp-20100110-wwn.tgz' saved [1464469/1464469]

FINISHED --2019-01-31 23:12:51--
Total wall clock time: 2h 11m 7s
Downloaded: 6250 files, 10G in 1h 45m 21s (1.69 MB/s)
--- Starting VoxForge archives extraction ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래 명령어로 전체 데이터 중에 얼마나 다운로드가 완료 되었는지 중간중간 확인이 가능합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ du -sh voxforge/
25G	voxforge/&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3) 필요한 환경 구축&lt;/h3&gt;&lt;p&gt;
다운로드를 기다리는 동안 아래 있는 패키지들을 미리 설치해둡니다. 다른건 에러가 발생하면 그때그때 설치해도 되지만 &lt;i&gt;coreutils&lt;/i&gt; 의 경우에는 미리 설치 하지 않으면 여러가지 귀찮은 일이 생깁니다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ brew install gawk &amp;amp;&amp;amp; brew install coreutils &amp;amp;&amp;amp; brew install swig &amp;amp;&amp;amp; brew install flac&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
뒤에서 발생할 에러를 미리 잡아두기 위해 아래와 같이 &lt;i&gt;alias&lt;/i&gt; 도 잡아줘야 하는데 우리가&amp;nbsp;&lt;i&gt;MacOS&lt;/i&gt; 환경이기 때문에 필요한 내용입니다. 대부분의 &lt;i&gt;*NIX&lt;/i&gt; 시스템에는 &lt;i&gt;readlink&lt;/i&gt; 패키지가 기본 설치 되어 있으므로 무시해도 되는 과정입니다만,&amp;nbsp;&lt;i&gt;MacOS&lt;/i&gt; 에서 확인되는 &lt;i&gt;readlink&lt;/i&gt; 는 &lt;i&gt;kaldi &lt;/i&gt;에 필요한 옵션( -f )이 없습니다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ alias readlink=greadlink&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;code&gt;
&lt;p&gt;자, 다음은&amp;nbsp;&lt;i&gt;kaldi root&lt;/i&gt;&amp;nbsp;디렉터리로 이동해서&amp;nbsp;&lt;i&gt;tools&lt;/i&gt;&amp;nbsp;에 있는&lt;i&gt;&amp;nbsp;install_srilm.sh&amp;nbsp;&lt;/i&gt;을 실행시켜줍니다. 여기서 중요한건&amp;nbsp;&lt;i&gt;tools&lt;/i&gt;&amp;nbsp;디렉터리에 들어가서 실행시켜줘야 합니다. ( 그렇지 않은 경우 디렉터리를 이동하라는 에러가 발생합니다 )&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./install_srilm.sh
Installing libLBFGS library to support MaxEnt LMs
--2019-02-01 09:07:30--  https://github.com/downloads/chokkan/liblbfgs/liblbfgs-1.10.tar.gz
Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113
Connecting to github.com (github.com)|192.30.255.112|:443... connected.
...
...
This script cannot install SRILM in a completely automatic
way because you need to put your address in a download form.
Please download SRILM from http://www.speech.sri.com/projects/srilm/download.html
put it in ./srilm.tgz, then run this script.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;뭔가 다운로드 받고 설치 되는 듯 보이더니 마지막&amp;nbsp;문구가 눈에 띄네요.&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.speech.sri.com/projects/srilm/download.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;http://www.speech.sri.com/projects/srilm/download.html&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;이쪽 사이트에 방문해서 직접 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;SRILM&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt; 을 다운로드&lt;/span&gt; 받고 스크립트를 실행시켜야 한답니다. 미리 말씀드리자면 아무리 무료라고하지만 데이터를 다운로드 받기 위해서는 몇 가지 정보를 입력하고 라이선스에 동의해야 하기 때문인데요. 브라우저를 열고 페이지에 방문하면 중간쯤에 아래와 같은 내용이 보입니다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:730px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9975C7385C53905627&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-01 오전 9.18.00.png&quot; height=&quot;377&quot; width=&quot;730&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;적절하게 정보를 입력하고&amp;nbsp;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;I accept the License&lt;/span&gt;&lt;/i&gt;&amp;nbsp;버튼을 클릭하면 데이터 다운로드가 시작됩니다. 다운로드가 완료되면 (이 글을 쓰는 시점에는) 파일명이 &lt;i&gt;install_srilm.sh&lt;/i&gt; 에 고정되어 있는 이름과 다르기 때문에 변경해서 &lt;i&gt;tools/&lt;/i&gt; 디렉터리 밑으로 이동시켜줘야 합니다. 아래처럼 진행하도록 합시다.&lt;br /&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ mv ~/Downloads/srilm-1.7.2.tar.gz ./srilm.tgz&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고나서 다시&lt;i&gt;&amp;nbsp;install_srilm.sh&lt;/i&gt;&amp;nbsp;을 다시 실행시켜주면 됩니다.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./install_srilm.sh
...
...
Installation of SRILM finished successfully
Please source the tools/env.sh in your path.sh to enable it&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;code class=&quot;bash&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;설치가 끝나면&lt;/span&gt;&lt;i style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif;&quot;&gt;&amp;nbsp;install_sequitur.sh&lt;/i&gt;&lt;font face=&quot;맑은 고딕, sans-serif&quot;&gt;&amp;nbsp;도 미리 실행시켜줍니다. 일반적인 순서로 진행하게 되면 발생하는 에러를 미리 처리하는 과정입니다. 혹시 아래 스크립트를 실행하는데 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;readlink: illegal option -- f &lt;/span&gt;&lt;/i&gt;이런&amp;nbsp;내용이 출력된다면 위에서 &lt;i&gt;alias&lt;/i&gt; 했던걸 다시 적용해줍니다. 이전과 다른 셸에서 진행하게 되면 &lt;i&gt;alias&lt;/i&gt;가 반영이 안되어 있기 때문에 그럴 수 있습니다. ( .&lt;i&gt;bash_profile&lt;/i&gt; 등에 넣어두는 것도 좋은 방법입니다 )&lt;/font&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./extras/install_sequitur.sh
...
...
Installation of SEQUITUR finished successfully
Please source tools/env.sh in your path.sh to enable it&lt;/code&gt;&lt;/pre&gt;&lt;/code&gt;&lt;/div&gt;&lt;p&gt;이제 &lt;i&gt;egs/voxforge/s5&lt;/i&gt; 디렉터리로 돌아와서&amp;nbsp;&lt;i&gt;./local/voxforge_prepare_dict.sh&lt;/i&gt; 파일을 수정해줘야 합니다. 편집기를 열고 아래와 같은 라인을 찾읍시다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sequitur=$KALDI_ROOT/tools/sequitur&lt;/code&gt;&lt;/pre&gt;
그리고 다음과 같이 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;-g2p&lt;/span&gt;&lt;/i&gt; 를 추가해주도록 합니다. 이부분은, 빠르게 변하는&amp;nbsp;&lt;i&gt;kaldi&lt;/i&gt;&amp;nbsp;의 업그레이드를 구석에 있는 예제 셸스크립트가&amp;nbsp;따라가지 못한 겁니다. 이 글이 쓰이는 시점 이후에 &lt;i&gt;kaldi&lt;/i&gt; 를 최신으로 받았다면 아래 내용은 이미 반영되어 있을 겁니다. 제가 여러분을 위해&amp;nbsp;&lt;i&gt;&lt;a href=&quot;https://github.com/kaldi-asr/kaldi/pull/3017&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;kaldi&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/kaldi-asr/kaldi/pull/3017&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; 프로젝트에 &lt;/a&gt;&lt;a href=&quot;https://github.com/kaldi-asr/kaldi/pull/3017&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;i&gt;Pull Request&lt;/i&gt; 해서 &lt;i&gt;Merge&lt;/i&gt;&lt;/a&gt; 가 됐거든요.&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;sequitur=$KALDI_ROOT/tools/sequitur&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;-g2p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 끝으로 &lt;i&gt;cmd.sh&lt;/i&gt; 을 수정해줄 차례입니다. &lt;i&gt;cmd.sh&lt;/i&gt; 안에는&amp;nbsp;&lt;i&gt;train_cmd,&amp;nbsp;decode_cmd,&amp;nbsp;mkgraph_cmd&lt;/i&gt; 가&amp;nbsp;&lt;i&gt;queue.pl&lt;/i&gt; 로 설정되어 있는데 이 부분을 &lt;i&gt;run.pl&lt;/i&gt; 로 변경해줍니다. 이는&amp;nbsp;&lt;i&gt;GridEngine&lt;/i&gt; 이 없거나 단일 컴퓨터 안에서 모든 것을 처리하려고 할 때 설정해주는 부분인데 정확히 우리 상황과 일치합니다.&amp;nbsp;&lt;i&gt;GridEngine&lt;/i&gt; 를 설치하는 것 조차 &lt;i&gt;MacOS&lt;/i&gt; 에서는 쉽지 않으니까요. 아무튼 아래처럼 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;모든 &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;i&gt;queue.pl&lt;/i&gt; 을 &lt;i&gt;run.pl&lt;/i&gt; 로 변경&lt;/span&gt;해줍시다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;-export train_cmd=&quot;queue.pl --mem 2G&quot;
-export decode_cmd=&quot;queue.pl --mem 4G&quot;
-export mkgraph_cmd=&quot;queue.pl --mem 8G&quot;
+export train_cmd=&quot;run.pl --mem 2G&quot;
+export decode_cmd=&quot;run.pl --mem 4G&quot;
+export mkgraph_cmd=&quot;run.pl --mem 8G&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4) run.sh&lt;/h3&gt;&lt;p&gt;이제 최종단계입니다.&amp;nbsp;&lt;i&gt;path.sh&lt;/i&gt; 를 통해 환경변수를 다시 잡아주고&amp;nbsp;&lt;i&gt;run.sh&lt;/i&gt; 스크립트를 실행시켜줍니다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bahs&quot;&gt;$ ./path.sh &amp;amp;&amp;amp; ./run.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 과정에서 다운로드 받은 데이터를 &lt;i&gt;train&lt;/i&gt; 세트로 묶는등의 작업이 이루어집니다. 이제 거의 다 됐습니다&amp;nbsp;&lt;/p&gt;&lt;p&gt;조금 여유를 갖고 기다려줍시다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./run.sh
=== Starting VoxForge subset selection(accent: ((American)|(British)|(Australia)|(Zealand))) ...
*** VoxForge subset selection finished!
=== Starting to map anonymous users to unique IDs ...
--- Mapping the &quot;anonymous&quot; speakers to unique IDs ...
*** Finished mapping anonymous users!
=== Starting initial VoxForge data preparation ...
--- Making test/train data split ...
    2003 data/local/tmp/speakers_all.txt
    1983 data/local/tmp/speakers_train.txt
      20 data/local/tmp/speakers_test.txt
    2003 total
--- Preparing test_wav.scp, test_trans.txt and test.utt2spk ...
--- Preparing test.spk2utt ...
--- Preparing train_wav.scp, train_trans.txt and train.utt2spk ...
Illegal or empty gender (u) for &quot;anonymous0107-20080905-tvm&quot; - assuming m(ale) ...
Illegal or empty gender (p) for &quot;anonymous0354-20091027-coy&quot; - assuming m(ale) ...
Illegal or empty gender (u) for &quot;anonymous0532-20100612-ojf&quot; - assuming m(ale) ...
Illegal or empty gender (p) for &quot;anonymous0728-20110406-opo&quot; - assuming m(ale) ...
Illegal or empty gender (p) for &quot;anonymous0764-20110719-rxx&quot; - assuming m(ale) ...
Illegal or empty gender (p) for &quot;anonymous1208-20140513-nmn&quot; - assuming m(ale) ...
Illegal or empty gender (u) for &quot;guilherme-20080123-pfh&quot; - assuming m(ale) ...
Illegal or empty gender (u) for &quot;ridgey-20080620-zrx&quot; - assuming m(ale) ...
...
...
%WER 52.33 [ 2337 / 4466, 28 ins, 1036 del, 1273 sub ]
%SER 90.00 [ 450 / 500 ]
exp/mono/decode/wer_15
%WER 53.83 [ 2404 / 4466, 25 ins, 1100 del, 1279 sub ]
%SER 90.60 [ 453 / 500 ]
exp/mono/decode/wer_16
%WER 54.88 [ 2451 / 4466, 19 ins, 1152 del, 1280 sub ]
%SER 90.80 [ 454 / 500 ]
...
...
steps/train_deltas.sh: training pass 13
steps/train_deltas.sh: training pass 14
steps/train_deltas.sh: training pass 15
steps/train_deltas.sh: training pass 16
steps/train_deltas.sh: training pass 17
steps/train_deltas.sh: training pass 18
...
...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/code&gt;&lt;/code&gt;&lt;h3&gt;마무리&lt;/h3&gt;&lt;p&gt;&lt;i&gt;Kaldi&lt;/i&gt; 는&amp;nbsp;&lt;i&gt;Speech Recognition Toolkit&lt;/i&gt; 의 강자 답게 누구나 쉽게 접근할 수 있습니다. 다만 이번 예제를 진행하면서 아쉬웠던 점은 예제를 진행하기 위한 &lt;i&gt;dependencies&lt;/i&gt; 를 체크할 수 있었다면 여러 삽질을 피해갈 수 있지 않았을까 하는 점입니다. 사실 이 부분은 한번 환경을 구축하면 다시 볼 일이 없기 때문에 굉장히 사소한 부분이기도 하지만요. 아무튼 이제 사용자의 데이터를 학습시킬 수 있는 환경 구축은 끝났습니다. 위 스크립트가 실제로 완료되는 것을 기다리려면 시스템의 절전모드 등을 꺼주세요. 대략 며칠 정도 걸립니다.&lt;/p&gt;&lt;p&gt;자, 그럼 다음편에서는 &lt;i&gt;Kaldi&lt;/i&gt; 디렉터리와 스크립트의 세부사항을 확인하고 본격적으로 &lt;i&gt;Kaldi&lt;/i&gt; 를 다뤄보겠습니다.&lt;/p&gt;&lt;p&gt;(*) 어쩌면 제 환경에는 다른 프로젝트를 진행하며 설치했던 패키지가 사전에 준비되어 있어서 문제가 안됐던 부분이 있을 수도 있습니다. 이를테면 &lt;i&gt;numpy&lt;/i&gt; 같은 것들이요. 샘플 스크립트&amp;nbsp;진행에&amp;nbsp;어려움이 있다면 주저하지 말고 연락주세요. 도움 드릴 수 있는 부분은 같이 고민하고 해결해보면 재미있을 것 같습니다. :-)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>기계학습</category>
<category>kaldi</category>
<category>mac</category>
<category>Opensource</category>
<category>Speech Recognition</category>
<category>VoxForge</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/772</guid>
<comments>https://jybaek.tistory.com/772#entry772comment</comments>
<pubDate>Fri, 25 Jan 2019 15:05:03 +0900</pubDate>
</item>
<item>
<title>[Kaldi] install ( feat. on Mac )</title>
<link>https://jybaek.tistory.com/771</link>
<description>&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9914DC3B5C5C22871F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-02-07 오후 9.19.22.png&quot; height=&quot;215&quot; style=&quot;&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;http://kaldi-asr.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://kaldi-asr.org/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kaldi-asr/kaldi&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Kaldi Speech Recognition Toolkit&lt;/a&gt;&amp;nbsp;의 동작에 대한 기본 테스트를 &lt;i&gt;MacOS&lt;/i&gt; 에서 진행한 경험을 기록 합니다. 보통의 오픈소스를 살펴보면 &lt;i&gt;READMD.md&lt;/i&gt; 와 같은 파일을 두고 그 안에서 설치 가이드를 제공하고 있는데 &lt;i&gt;Kaldi&lt;/i&gt; 는 &lt;i&gt;README&lt;/i&gt;&amp;nbsp;에서 그런 언급을 하지 않고&amp;nbsp;대신 &lt;i&gt;INSTALL ( plain-text )&lt;/i&gt; 파일을 제공합니다.&amp;nbsp;그럼 이제&amp;nbsp;INSTALL 파일을 확인하고 설치를 진행해보도록 합니다.&lt;/p&gt;&lt;p&gt;우선 &lt;i&gt;GitHub&lt;/i&gt; 을 통해 공개되어 있는 &lt;i&gt;Kaldi&lt;/i&gt; 소스코드를 내려 받습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git clone https://github.com/kaldi-asr/kaldi.git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;소스 디렉터리 홈에 있는 &lt;i&gt;INSTALL&lt;/i&gt; 파일을 열어보면 다음과 같은 내용이&amp;nbsp;쓰여 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;This is the official Kaldi INSTALL. Look also at INSTALL.md for the git mirror installation.
[for native Windows install, see windows/INSTALL]

(1)
go to tools/  and follow INSTALL instructions there.

(2)
go to src/ and follow INSTALL instructions there.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파일의 내용을 순서대로 실행하면 되는데 우선 (1) 에서 안내해주는 &lt;i&gt;tools/INSTALL&lt;/i&gt; 파일을 확인하도록 합니다.&lt;/p&gt;&lt;h2&gt;&lt;i&gt;(1) tools/INSTALL&lt;/i&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;To check the prerequisites for Kaldi, first run

  extras/check_dependencies.sh

and see if there are any system-level installations you need to do. Check the
output carefully. There are some things that will make your life a lot easier
if you fix them at this stage. If your system default C++ compiler is not
supported, you can do the check with another compiler by setting the CXX
environment variable, e.g.

  CXX=g++-4.8 extras/check_dependencies.sh

Then run

  make

which by default will install ATLAS headers, OpenFst, SCTK and sph2pipe.
OpenFst requires a relatively recent C++ compiler with C++11 support, e.g.
g++ &amp;gt;= 4.7, Apple clang &amp;gt;= 5.0 or LLVM clang &amp;gt;= 3.3. If your system default
compiler does not have adequate support for C++11, you can specify a C++11
compliant compiler as a command argument, e.g.

  make CXX=g++-4.8

If you have multiple CPUs and want to speed things up, you can do a parallel
build by supplying the &quot;-j&quot; option to make, e.g. to use 4 CPUs

  make -j 4

In extras/, there are also various scripts to install extra bits and pieces that
are used by individual example scripts.  If an example script needs you to run
one of those scripts, it will tell you what to do.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;안에 내용은 크게 두 가지로 나눌 수 있는데, 첫 번째는 &lt;i&gt;Kaldi&lt;/i&gt; 에 필요한 &lt;i&gt;dependencies&lt;/i&gt; 확인하는 내용이고, 두 번째는 필요한 패키지를 컴파일 하는 내용입니다. 일단 &lt;i&gt;dependencies&lt;/i&gt; 를 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;check_dependencies.sh&lt;/span&gt;&lt;/i&gt; 스크립트를 통해 다음과 같이 확인합니다. ( 실제 스크립트의 결과에는 &quot;\&quot; 가 없이 한줄에 표현됩니다. 여기서는 편의상 한눈에 볼 수 있도록 &quot;\&quot; 문자와 함께 개행을 추가했습니다. 뒤에 나오는 모든 결과도 마찬가지로 처리 됩니다. )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ extras/check_dependencies.sh
extras/check_dependencies.sh: automake is not installed.
extras/check_dependencies.sh: autoconf is not installed.
extras/check_dependencies.sh: neither libtoolize nor glibtoolize is installed
extras/check_dependencies.sh: python2.7 is installed, but the python2 binary does not exist.&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;\&lt;/span&gt;
                              Creating a symlink and adding this to tools/env.sh
extras/check_dependencies.sh: WARNING python 2.7 is not the default python. We fixed this by&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;\&lt;/span&gt;
                              adding a correct symlink more prominently on the path.
extras/check_dependencies.sh: If you really want to use python 3.6.5 as default, add an empty&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;\&lt;/span&gt; 
                              file /Users/caley/work/kaldi/tools/python/.use_default_python &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;\&lt;/span&gt;
                              and run this script again.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;내용을 확인해보면 설치되지 않은 패키지들이 보입니다. 먼저 여기서는 &lt;i&gt;python3&lt;/i&gt; 을 기본으로 사용할 것이기 때문에 가이드대로 &lt;i&gt;kaldi/tools/python/.use_default_python&lt;/i&gt; 파일을 다음과 같이 생성해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ touch /Users/caley/work/kaldi/tools/python/.use_default_python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;brew &lt;/i&gt;를 통해 &lt;i&gt;automake&lt;/i&gt; 를 설치합니다. ( &lt;i&gt;brew&lt;/i&gt; 가 Mac 에 설치되어 있지 않다면 다음 링크를 참고하세요 :&amp;nbsp;&lt;a href=&quot;https://brew.sh/index_ko&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://brew.sh/index_ko&lt;/a&gt; )&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ brew install automake
Updating Homebrew...
==&amp;gt; Auto-updated Homebrew!
Updated 3 taps (homebrew/core, homebrew/cask and adoptopenjdk/openjdk).
==&amp;gt; Updated Formulae
bash                  coreutils             kubernetes-helm       
libvterm              nuxeo                 puzzles               swiftlint
chronograf            gitlab-runner         libbi                 libxml2               
platformio            quex                  wireguard-tools
==&amp;gt; Deleted Formulae
liblastfm

==&amp;gt; Installing dependencies for automake: autoconf
==&amp;gt; Installing automake dependency: autoconf
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/autoconf-2.69.high_sierra.bottle.4.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring autoconf-2.69.high_sierra.bottle.4.tar.gz
==&amp;gt; Caveats
Emacs Lisp files have been installed to:
  /usr/local/share/emacs/site-lisp/autoconf
==&amp;gt; Summary
   /usr/local/Cellar/autoconf/2.69: 71 files, 3.0MB
==&amp;gt; Installing automake
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/automake-1.16.1_1.high_sierra.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring automake-1.16.1_1.high_sierra.bottle.tar.gz
   /usr/local/Cellar/automake/1.16.1_1: 131 files, 3.4MB
==&amp;gt; Caveats
==&amp;gt; autoconf
Emacs Lisp files have been installed to:
  /usr/local/share/emacs/site-lisp/autoconf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;libtool&lt;/i&gt;&amp;nbsp;도 마찬가지로 &lt;i&gt;brew&lt;/i&gt; 를 통해 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ brew install libtool
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/libtool-2.4.6_1.high_sierra.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring libtool-2.4.6_1.high_sierra.bottle.tar.gz
==&amp;gt; Caveats
In order to prevent conflicts with Apple's own libtool we have prepended a &quot;g&quot;
so, you have instead: glibtool and glibtoolize.
==&amp;gt; Summary
   /usr/local/Cellar/libtool/2.4.6_1: 71 files, 3.7MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;prerequisites&lt;/i&gt; 에 명시된 필요한 패키지를 모두 설치해줬으니 &lt;i&gt;check_dependencies.sh &lt;/i&gt;를 다시 실행시켜봅니다. 다음과 같이 모든 &lt;i&gt;dependencies&lt;/i&gt; 패키지가 정상적으로 설치되어 있는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ extras/check_dependencies.sh
extras/check_dependencies.sh: all OK.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음으로는 &lt;i&gt;tools&lt;/i&gt;&amp;nbsp;하위에 있는 모듈들을 &lt;i&gt;빌드&lt;/i&gt;&amp;nbsp;해야 합니다. 컴파일은&amp;nbsp;&lt;i&gt;make&lt;/i&gt;&amp;nbsp;로 진행되며 명령어를 멀티코어로 돌리기 위해 우선 &lt;i&gt;CPU&lt;/i&gt; 의 개수를 확인해야 합니다. &lt;i&gt;MacOS&lt;/i&gt; 에서 &lt;i&gt;CPU&lt;/i&gt; 개수는 다음과 같이 확인할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ sysctl -n hw.ncpu
12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;12 코어로 확인되었으니 &lt;i&gt;make&amp;nbsp;-j&lt;/i&gt; 옵션에 12 를 &lt;i&gt;parameter&lt;/i&gt; 로&amp;nbsp;넘겨서 &lt;i&gt;make&lt;/i&gt; 가 12개의 &lt;i&gt;jobs&lt;/i&gt; 으로 동작되도록&amp;nbsp;해줍니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make -j 12
...
make[5]: Nothing to be done for `install-exec-am'.
make[5]: Nothing to be done for `install-data-am'.
make[4]: Nothing to be done for `install-exec-am'.
make[4]: Nothing to be done for `install-data-am'.
make[3]: Nothing to be done for `install-exec-am'.
make[3]: Nothing to be done for `install-data-am'.
rm -f openfst
ln -s openfst-1.6.7 openfst
-e


Warning: IRSTLM is not installed by default anymore. If you need IRSTLM
Warning: use the script extras/install_irstlm.sh
All done OK.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;모든 과정이 완료될 때까지 잠시 기다리고, 다음 단계로 넘어갑니다.&lt;/p&gt;&lt;h2&gt;&lt;i&gt;(2) src/INSTALL&lt;/i&gt;&lt;/h2&gt;&lt;p&gt;&lt;i&gt;src/INSTALL&lt;/i&gt; 파일의 내용을 확인해보면 일반적인 오픈소스의 컴파일 순서처럼 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;configure, make depend, make &lt;/span&gt;&lt;/i&gt;세 가지 단계로 동일하게 처리 됩니다.&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;
These instructions are valid for UNIX-like systems (these steps have
been run on various Linux distributions; Darwin; Cygwin).  For native Windows
compilation, see ../windows/INSTALL.

You must first have completed the installation steps in ../tools/INSTALL
(compiling OpenFst; getting ATLAS and CLAPACK headers).

The installation instructions are

  ./configure --shared
  make depend -j 8
  make -j 8

Note that we added the &quot;-j 8&quot; to run in parallel because &quot;make&quot; takes a long
time.  8 jobs might be too many for a laptop or small desktop machine with not
many cores.

For more information, see documentation at http://kaldi-asr.org/doc/
and click on &quot;The build process (how Kaldi is compiled)&quot;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그럼 우선 &lt;i&gt;configure&lt;/i&gt; 를 먼저 실행해주고,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ./configure --shared
Configuring ...
Checking compiler g++ ...
Checking OpenFst library in /Users/caley/work/kaldi/tools/openfst ...
Checking cub library in /Users/caley/work/kaldi/tools/cub ...
Doing OS specific configurations ...
On Darwin: Checking for Accelerate framework ...
Configuring for OS X version 10.13 ...
Successfully configured for Darwin with Accelerate framework.
CUDA will not be used! If you have already installed cuda drivers
and cuda toolkit, try using --cudatk-dir=... option.  Note: this is
only relevant for neural net experiments
SUCCESS
To compile: make clean -j; make depend -j; make -j
 ... or e.g. -j 10, instead of -j, to use a specified number of CPUs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;make depend &lt;/i&gt;를 실행합니다. 앞에 (1) 번과 동일하게 현재 &lt;i&gt;CPU&lt;/i&gt; 가 12 &lt;i&gt;core&lt;/i&gt; 로 구성되어 있으므로 -j 옵션에는 12를 명시해줬습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make depend -j 12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;마지막으로 &lt;i&gt;make&lt;/i&gt; 를 실행합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ make -j 12
...
...
g++  -Wl,-rpath -Wl,/Users/caley/work/kaldi/tools/openfst/lib -g  -Wl,-rpath -Wl,\
/Users/caley/work/kaldi/src/lib  lattice-lmrescore-kaldi-rnnlm.o   \
../rnnlm/libkaldi-rnnlm.dylib  ../nnet3/libkaldi-nnet3.dylib  \
../cudamatrix/libkaldi-cudamatrix.dylib  ../lat/libkaldi-lat.dylib  \
../lm/libkaldi-lm.dylib  ../fstext/libkaldi-fstext.dylib  \
../hmm/libkaldi-hmm.dylib  ../tree/libkaldi-tree.dylib  ../util/libkaldi-util.dylib  \
../matrix/libkaldi-matrix.dylib  ../base/libkaldi-base.dylib \
/Users/caley/work/kaldi/tools/openfst/lib/libfst.dylib -framework Accelerate \
-lm -lpthread -ldl  -o lattice-lmrescore-kaldi-rnnlm
echo Done
Done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;마무리&lt;/h2&gt;&lt;p&gt;여기까지해서 &lt;i&gt;Kaldi&lt;/i&gt; 의 &lt;i&gt;install&lt;/i&gt; 과정이 모두 끝났습니다. &lt;i&gt;Kaldi&lt;/i&gt; 는 요즘 빠르게 발전하고 있는&amp;nbsp;다른 &lt;i&gt;Speech Recognitions&lt;/i&gt;&amp;nbsp;와는 다르게 설치 과정에 어려움이 없었습니다. 대부분의 머신러닝 관련 오픈소스가&amp;nbsp;&lt;i&gt;GPU&lt;/i&gt; 를 사용해야 하는 이유때문에&amp;nbsp;&lt;i&gt;Nvidia&lt;/i&gt; 사용에 어려움이 없는 &lt;i&gt;Ubuntu&lt;/i&gt; 에 초점이 많이 맞춰져 있기 때문에 &lt;i&gt;MacOS&lt;/i&gt; 에서는 여러&amp;nbsp;패키지 설치부터 어려움이 많이 있습니다. 겪어보지 않으면 &lt;i&gt;Kaldi&lt;/i&gt; 의 설치가 얼마나 깔끔하게 되어 있는지 알 수 없죠. 아무튼&amp;nbsp;다음편에는 설치한 &lt;i&gt;Kaldi&lt;/i&gt;&amp;nbsp;에 포함되어 있는 샘플 스크립트를 사용해보는 과정에 대해 기술하도록 하겠습니다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;i&gt;If you have difficulty installing &lt;b&gt;Kaldi&lt;/b&gt;, please contact me by comment or e-mail.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>기계학습</category>
<category>kaldi</category>
<category>mac</category>
<category>Opensource</category>
<category>Speech Recognition</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/771</guid>
<comments>https://jybaek.tistory.com/771#entry771comment</comments>
<pubDate>Thu, 24 Jan 2019 12:39:14 +0900</pubDate>
</item>
<item>
<title>티스토리 HTTPS 적용 오류</title>
<link>https://jybaek.tistory.com/770</link>
<description>&lt;p&gt;2019년 1월 21일부터 티스토리에 &lt;i&gt;HTTPS&lt;/i&gt; 가 일괄 강제적용 된다는 소식을 들었는데 뒤늦게 관리하는 블로그의 설정을 바꾸게 됐다. ( 관련공지 : &lt;a href=&quot;https://notice.tistory.com/2444&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;더 안전한 티스토리를 위해 - SSL 적용 완료&lt;/a&gt; ) 그리고 블로그에 별로 신경을 못쓰고 있었는데 어느날 예전글을 검색해야 할 일이 있어서 카테고리 버튼을 누르는순간 해당 메뉴가 먹통이라는 것을 깨달았다. 그 외에 관리자 페이지도 먹통. 혹시나해서 개발자 도구를 열어보니 아래와 같은 에러가 잔뜩 확인되었다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:611px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C64C3D5C353C6F11&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-08 오후 5.58.55.png&quot; height=&quot;406&quot; width=&quot;611&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;해당 내용은 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;블로그 도메인은&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;HTTPS&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 를 사용하고 있는데 내부적으로 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;HTTP&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 를 사용하는 곳이 있고, 보안상 취약하여 해당 메뉴가 블럭&lt;/span&gt;되고 있다는 것. 해결 방법은 어렵지 않다. 스킨의 HTML 에서 사용하는 &lt;b&gt;&lt;i&gt;HTTP -&amp;gt;&amp;nbsp;HTTPS&lt;/i&gt;&lt;/b&gt; 로만 변경해주면 된다. 우선 스킨 편집 메뉴로 들어가도록 하자.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99262F3D5C353C7011&quot; filemime=&quot;image/jpeg&quot; filename=&quot;블로그관리 _ TISTORY 2019-01-08 18-01-31.png&quot; height=&quot;422&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;우측에 보이는 &lt;i&gt;HTML&lt;/i&gt;&amp;nbsp;편집 화면에서 [&amp;nbsp;&lt;i&gt;Ctrl + F&lt;/i&gt;&amp;nbsp; ] 로&amp;nbsp;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;http://&lt;/span&gt;&lt;/i&gt; 문자를&amp;nbsp;모두 찾고 해당 부분을 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;https://&lt;/span&gt;&lt;/i&gt; 로 변경해주도록 하자.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998830425C353F6A2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;컴맹 : 진화의 시작 :: 스킨편집 2019-01-08 17-59-36.png&quot; height=&quot;478&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;그리고나서 개발자도구를 확인해보면 에러가 깔끔하게 사라진 것을 볼 수 있으며 기존 카테고리 메뉴 등도 정상적으로 동작하는 것을 확인할 수 있다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:611px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995CF53D5C353C7018&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2019-01-08 오후 6.00.19.png&quot; height=&quot;233&quot; width=&quot;611&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;오래된 공지를 확인하지 못하고 방치한 내 잘못도 크지만 이런저런 이유로 아쉬움이 많이 남는다. 혼돈의 도가니가 오지는 않을는지...&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>길 잃은 게시물</category>
<category>HTTPS</category>
<category>Tistory</category>
<category>티스토리</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/770</guid>
<comments>https://jybaek.tistory.com/770#entry770comment</comments>
<pubDate>Wed, 09 Jan 2019 09:21:35 +0900</pubDate>
</item>
<item>
<title>[책] 나의 첫 안드로이드</title>
<link>https://jybaek.tistory.com/769</link>
<description>&lt;div style=&quot;text-align:left&quot;&gt;&lt;p&gt;한빛미디어 리뷰어에 선정되어 읽어보게 된 &quot;나의 첫 안드로이드&quot;, 딱 내 수준에 맞는 책이다. 그동안 서버 자체를 개발해왔으며&amp;nbsp;서비스 개발쪽으로 입문한 이후에는 백엔드 개발을 업으로 삼았는데 이 책은&amp;nbsp;클라이언트(앱) 개발자를 이해할 수 있는 좋은 기회이자, 스스로 앱을 만들어 보고 싶은 의욕이 충만해지는 계기가 되었다.&lt;br /&gt;​&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9921044B5C3059C914&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190105161554.728.jpg&quot; height=&quot;1093&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;​&lt;/p&gt;&lt;p&gt;일단 그동안의 커리어답게 자바와는 담을 쌓고 살아왔다. 1장에 있는 그림부터 자바를 먼저 공부하라고... 불행중에 다행인것은 근래에 Scala 로 개발을 조금 해서인지 자바에 대한 부담은 그렇게 크지 않다.&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:1093px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E373505C305B4410&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190105161555.77.jpg&quot; height=&quot;820&quot; width=&quot;1093&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;모바일도 iOS 만 사용을 해왔던터라 안드로이드의 버전 이야기에는 항상 꿀먹은 벙어리로 있었는데 간지러운 부분을 잘 긁어준다. 안드로이드는 알파벳의 첫 글자에 매칭되는 디저트의 이름으로 버전명을 정하고 있단다. 이제는 P 가 나올 차례인데 P 로 시작하는 디저트에는 무엇이 있을려나.​&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:1093px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99FDEB4D5C305B5315&quot; filemime=&quot;image/jpeg&quot; filename=&quot;190105161555.898.jpg&quot; height=&quot;820&quot; width=&quot;1093&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/div&gt;&lt;p&gt;이렇게 기초부터 시작되는 책은 간단한 메모 앱을 만드는 수준까지 독자를 이끌고 간다. 안드로이드를 구성하는 액티비티(Activity), 프래그먼트(Fragment), 브로드캐스트 리시버(Broadcast Receiver), 서비스(Service) 중에 액티비티와 프래그먼트에 대해서만 설명하고 있으며, 브로드캐스트 리시버나 서비스는 다른 채널을 통해 학습하라고 한다. 책의 제목대로 안드로이드의 기초에 충실한 책이라고 생각하면 될 듯 하다. 하지만 더 고급으로 가기 위해서, 혹은 원하는 기능을 제대로 구현하기 위해서는 브로드캐스트 리시버, 서비스는 반드시 학습해야 하는 부분이다.&lt;/p&gt;&lt;p&gt;챗을 읽으면 읽을 수록 안드로이드의 기본적인 것들을 이해할 수 있었고 UI 를 다루는 파트에서 쓸법한 다양한 용어를 알아가는 재미도 상당했다. 예를들면 앱바(Appbar), 스낵바, 스피너 등이 있겠다. 생각보다 많은 GUI 기능이&amp;nbsp;템플릿으로 존재한다는 점에서 조금 놀랐는데 그렇기 때문에 다양한 앱들이 일관성을 갖을 수 있었던걸까?&amp;nbsp;&lt;/p&gt;&lt;p&gt;아무튼 책을 덮고보니 올해는 &lt;i&gt;Toy Project&lt;/i&gt; 로 간단한 앱 출시에 도전해볼 수 있을 것 같은 자신감이 조금 생겼다. &lt;i&gt;Thank you&lt;/i&gt; 나의 첫 안드로이드 :)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>책</category>
<category>나는리뷰어다</category>
<category>안드로이드</category>
<category>한빛미디어</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/769</guid>
<comments>https://jybaek.tistory.com/769#entry769comment</comments>
<pubDate>Sat, 05 Jan 2019 16:16:29 +0900</pubDate>
</item>
<item>
<title>2018년 회고 (부제: 임베디드 개발자의 커리어 전환)</title>
<link>https://jybaek.tistory.com/768</link>
<description>&lt;p&gt;2018년을 한 마디로 표현하면&amp;nbsp;&lt;b&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;&quot;커리어 전환&quot;&lt;/span&gt;&lt;/b&gt; 이라고 할 수 있겠다. 임베디드에서&amp;nbsp;&lt;i&gt;C &lt;/i&gt;를 주력으로 사용하던 2017년 뒤로하고 &lt;i&gt;Node.js&lt;/i&gt; 를 거쳐 &lt;i&gt;Scala&lt;/i&gt; 로. 클라우드는&amp;nbsp;&lt;i&gt;GCP&lt;/i&gt; 를 시작으로 &lt;i&gt;AWS&lt;/i&gt; 에 입문할 수 있었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;1분기. 안녕 여기어때?&lt;/h2&gt;&lt;p&gt;작년 2017년에 이런저런 이유로 몇 개월 일을 쉬고 올해 1월 10일, 위드이노베이션에 입사하게됐다. 사람들에게는 “여기어때”라는 종합숙박을 서비스하는 앱으로 더 많이 알려져 있는 곳. 혹은 신동엽.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:630px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993CF04A5C221BF017&quot; filemime=&quot;image/jpeg&quot; filename=&quot;5bff4ee9200000a50602978f.png&quot; height=&quot;250&quot; width=&quot;630&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;아무튼, 이 회사를 입사하면서 개발 인생에 큰 변화를 맞게된다. 웹 개발은 다른 세상 이야기던 내가 &lt;i&gt;vue.js&lt;/i&gt; 를 만지작거릴 수 있는 기회를 얻었으며 메인 언어라고는 C밖에 모르던 임베디드쟁이가 &lt;i&gt;node.js &lt;/i&gt;를 만났다. 그리고 &lt;i&gt;IDC&lt;/i&gt; 세상에 갇혀 마냥 클라우드를 동경하던 내가 &lt;i&gt;AWS&lt;/i&gt; 를 사용하게되다니. 그것만으로도 큰 경험이고 재산이 됐다. &lt;i&gt;awesome!!&lt;/i&gt; 아무튼 입사하고 썼던 글이 온라인에서 많이 검색되고 여전히 블로그 유입의 상당부분을 차지하고 있다. 한편&amp;nbsp;사내 세미나에서 &quot;shebang&quot;, &quot;람다 사용기&quot;, &quot;신규 입사자 안내 메시지 자동화&quot;, &quot;응답하라 발표자&quot;, &quot;지식공유&quot;, &quot;헬로 리눅스&quot;, &quot;헬로 크롤링&quot; 을 주제로 자발적인 발표를 했었는데 소중한 경험들이 되었다. 지식을 나눈다는 것은 즐거운 일이다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://jybaek.tistory.com/708?category=396953&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;위드이노베이션에 합류해서 젊은이로 살아가기&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;2분기. 안녕 스터디잼&lt;/h2&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:400px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F3BA4A5C221C391A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;google_cloud_study_jams_thumb.jpg&quot; height=&quot;224&quot; width=&quot;400&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;구글 스터디잼 코스를 시작하게됐다. 다섯단계 코스로 구성된 약 8개월 대장정의 시작. 이 코스가 재밌었던건 그 안에서 배우게 되는 기술적인 내용보다 다양한 사람들과 새로운 관계를 만들어 소통하고 팀워크를 발휘하며 서로를 이해하는 과정에서 많은 것을 배울 수 있었다는 점. 후자는 프로그램 안에서 제공됐던 굿즈가 개발자의 소유욕을 자극해서 진도를 내빼기에 충분했다고. 내년에도 스터디잼은 있을 텐데 그때도 지원하게 될까?&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://jybaek.tistory.com/736?category=396953&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;구글 클라우드 스터디잼&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;3분기. 개발개발개발&lt;/h2&gt;&lt;p&gt;큰 이벤트 없이 개발개발개발... “딸이 아빠 잊어먹겠어요” 라는 말을 들으며 개발개발개발... 이때 내손에서&amp;nbsp;개발된 알림톡과 문자, 이메일이&amp;nbsp;여기어때 서비스에 붙게된다. ( 고객이나 업주에게 발송되는 통지 )&amp;nbsp;새로운 개발 언어를 사용해서 일반 사용자에게 직접적으로 서비스 되는 것을 처음 만들어 봤다는 부분에서 기억에 많이 남는다. 그동안의 개발은 전부 기관에 납품되어 들어가는 &lt;i&gt;Appliance&lt;/i&gt;&amp;nbsp;형태라서. 아무튼 이 프로젝트를 진행하면서 &lt;i&gt;AWS Lambda, CloudWatch&lt;/i&gt; 와 나름 꽤 많이 친해졌다고 생각이 든다. 역시 프로젝트 끝내고 남는건 지식뿐 :-)&lt;/p&gt;&lt;p&gt;프로젝트의 결과를&amp;nbsp;오래 지켜보지는 못했지만 약 3개월간 한 번의 장애 없이 잘 운영되고 있으니 나름 나쁘지 않게 잘 개발한거겠지 ( 사실 한 번 장애가 있긴 했지만 그건 알림톡을 중계하는 업체의 문제 ).&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;4분기는 월&amp;nbsp;단위로 회고&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;h2&gt;10월. 안녕 여기어때!&lt;/h2&gt;&lt;p&gt;짧은 시간이지만 정들었던 회사를 떠나게 된다. 좋은 동료들과 관계를 형성하게 되는 것은 재직 기간에 비례하지 않는다는 사실을 증명하듯이 퇴사하고 소개받은 일자리(혹은 면접 제의)의 50%가 여기어때에서 함께 일했던 동료로부터 나왔다는&amp;nbsp;사실이 많은 것을 증빙한다. 아무튼, 분에 넘치게 많은 사랑을 받았다. 다시한번 감사합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;회사를 떠나기로 조직에 통보하고 일자리를 찾기 시작했는데 운 좋게도 몇 곳에서 긍정적인 피드백을 받았으며 최종적으로는 강남에 위치한 사무실로 출근하게 됐다. 아, 그리고 좋은 기회로 코엑스 그랜드볼룸에서 &lt;i&gt;Cloud Functions&lt;/i&gt; 주제로 발표해보는 영광을 얻기도. ( 구글 행사에&amp;nbsp;&lt;i&gt;AWS&lt;/i&gt;&amp;nbsp;&lt;i&gt;Lambda&lt;/i&gt; 이야기가 더 많았던 것은 예고된 함정&amp;nbsp;)&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:719px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992822415C208B172A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;44037213_1758762080916008_9195440962585755648_n.jpg&quot; height=&quot;449&quot; width=&quot;719&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;이직 과정에서 여러 회사를 알아보며 있었던 재미있는 에피스드는 나중에 대 방출하도록 한다.&lt;/p&gt;&lt;h2&gt;11월. GDG Korea Cloud Organizer&lt;/h2&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:687px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9915DD3B5C208D772E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;unnamed.jpg&quot; height=&quot;168&quot; width=&quot;687&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;올해 복은 하반기에 몰려있는지 &lt;i&gt;GDG Korea Cloud Organizer&lt;/i&gt; 로 합류하게 됐다. 이런 기회로 평소 동경하던 분을 직접 만나 대화를 나누기도. 아무튼 내년에는 &lt;i&gt;GCP&lt;/i&gt; 의 이것저것에 조금 더 집중하게 되지 않을는지. 커뮤니티 활동은 2017년에도, 2018년에도 개인적으로 하고 있었지만 이제 더 넓게 다양한 사람들과 함께 하게 될 것 같다. 미천한 클라우드 지식이 들통나기 전에 &lt;i&gt;GCP&lt;/i&gt; 의 이것저것을 더 부지런히 공부해야... 기껏 그동안 공부한 내용을 &lt;i&gt;&lt;a href=&quot;https://jybaek.gitbook.io/with-gcp&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;GitBook&lt;/a&gt;&lt;/i&gt; 으로 정리했는데 진도를 못빼고 있다. 일단 2019년에는 개인 미션으로&lt;i&gt; hands-on&lt;/i&gt; 시작을 생각하고 있으며 또한 기회가 된다면 &lt;i&gt;GDE(&lt;/i&gt; &lt;i&gt;google developer expert )&lt;/i&gt;&amp;nbsp;에도 도전해보고 싶다.&lt;/p&gt;&lt;p&gt;커뮤니티 활동을 통해 나 스스로 더 발전하고 즐거움을 찾을 수 있기를 바란다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;12월. R&amp;amp;D&lt;/h2&gt;&lt;p&gt;뛰어난 분들과 함께&amp;nbsp;&lt;i&gt;RND( Research and development )&amp;nbsp;&lt;/i&gt;로 일을 할 수 있는 조직에 몸을 담고 첫 번째 미션으로 오픈소스 개발에 투입돼서 즐겁게 개발하고 있다. 키워드는 &lt;i&gt;Akka, Scala.&lt;/i&gt; 이 키워드로 개발된 프로젝트를 근래에 상용&amp;nbsp;배포 했으며 나름 성공적으로 진행되어 내심 기쁨. 또한 조직에서 서비스 하는 내용&amp;nbsp;자체가 굉장히 흥미롭고 다양한 것들을 시도해볼 수 있을 것 같아서 2019년의 행보가 기대된다. 내년에는 조직의 기술블로그를 통해 여러가지 소식을 전할 수 있을까?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h2&gt;개인 프로젝트&lt;/h2&gt;&lt;p&gt;- &lt;i&gt;livemsg&lt;/i&gt; :&amp;nbsp;&lt;a href=&quot;http://jybaek.tistory.com/730?category=769947&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;질의응답 QnA 웹 서비스 제작기&lt;/a&gt;&lt;br /&gt;- &lt;i&gt;hanvi&lt;/i&gt; :&amp;nbsp;&lt;a href=&quot;http://jybaek.tistory.com/766?category=769947&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;AI 스피커 만들기 ( #1 )&lt;/a&gt;&lt;br /&gt;- &lt;i&gt;slack vote&lt;/i&gt; :&amp;nbsp;&lt;a href=&quot;http://jybaek.tistory.com/767?category=769947&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;slack 투표 명령어 만들기&lt;/a&gt;&lt;br /&gt;- &lt;i&gt;etc.&lt;/i&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;여러개의 개인 프로젝트를 진행했지만 정작 제대로 마무리 된게 없어서 아쉽다. 다 각각 사연이 있어서 마무리 못했는데 2019년에 이어서 계속 진행시킬 예정. 특히 &lt;i&gt;hanvi&lt;/i&gt;&amp;nbsp;프로젝트는&amp;nbsp;라즈베리파이만 구매하고 주변기기를 추가 구매하지 않아서 책상위에 덩그러니 놓여있는게 마음 아프다. 컴퓨터로 비유하자면 본체만 사고 모니터, 키보드, 마우스는 사지 않은 상황이다..&lt;/p&gt;&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;&lt;h2&gt;마치며...&lt;/h2&gt;&lt;p&gt;- 올 한해&amp;nbsp;나름 바쁘게 지낸 듯 하면서도 무언가를 얕게 많이 한 것 같은 느낌인데&amp;nbsp;내년에는 개인적으로도 분명한 목표를 향해 나가야겠다. &lt;br /&gt;- 또한 개인 프로젝트에 마침표를 못찍은 것들이 아쉽기 때문에 모든일을 끝까지 잘 마무리 할 수 있도록 해야겠다.&lt;br /&gt;- 사람과의 관계에 소홀했던 부분이 있는데 반성해야겠다.&lt;br /&gt;- GitHub 관리를 올해는 하지 않았지만 이게 반성해야 할 부분은 아닌것으로 생각 된다. (할많하않)&lt;br /&gt;- 일적인 부분으로는 나름 프로페셔널하게 해온 듯 하니 만족 :-)&lt;br /&gt;- 2019년에는 영어와 라즈베리파이만큼은 꼭 뭔가 성과를 내야겠다.&lt;/p&gt;&lt;p&gt;끝.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>회고</category>
<category>회고</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/768</guid>
<comments>https://jybaek.tistory.com/768#entry768comment</comments>
<pubDate>Mon, 24 Dec 2018 16:38:51 +0900</pubDate>
</item>
<item>
<title>slack 투표 명령어 만들기</title>
<link>https://jybaek.tistory.com/767</link>
<description>&lt;p&gt;&lt;i&gt;slack&lt;/i&gt; 에는 다양한 투표 기능이 있는데 대표적으로 &lt;i&gt;&lt;a href=&quot;https://slack.com/apps/A0HFW7MR6-simple-poll&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;simple-poll&lt;/a&gt;&lt;/i&gt;, &lt;i&gt;&lt;a href=&quot;https://slack.com/apps/A04E6JX41-polly&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;polly&lt;/a&gt;&lt;/i&gt; 등이 있다. 하지만 이런 투표기능이 있는 명령어가 무조건적으로 무료는 아니다. &lt;i&gt;polly&lt;/i&gt; 같은 경우에는 한달간 베타 버전처럼 사용할 수 있고 그 이후에는 비용을 지불해야 하며, &lt;i&gt;simple-poll&lt;/i&gt; 은 일정 횟수 이상을 초과해서 사용하게 되면 비지니스로 업그레이드 해서 사용할 것을 권고한다.아래는 &lt;i&gt;simple-poll&lt;/i&gt; 로부터 발생되는 비지니스 업그레이드 권고 메시지.&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;warning: Remember to upgrade to Simple Poll Business before December 11th&lt;/p&gt;&lt;p&gt;As one of Simple Poll's most active workspaces, we were delighted to grant you an upgrade period when we launched Simple Poll Business several weeks ago.&lt;/p&gt;&lt;p&gt;During the upgrade period you can continue to use Simple Poll as normal. After *December 11th* your workspace will be subject to the limit of 100 monthly votes on the Simple Poll Free Plan, so please *upgrade before then*.&lt;/p&gt;&lt;p&gt;Your workspace has cast 146 votes since December 5.&lt;/p&gt;&lt;p&gt;Simple Poll Business is available for your entire workspace for $49/month&lt;br /&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;그 이후에도 무시하고 계속 사용하면&amp;nbsp;아래와 같은 메시지를 보게되고,&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BC85455C247D7023&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-27 오전 11.27.21.png&quot; height=&quot;200&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;마치 무료로 알고 있던 기능에 갑자기 돈을 쓰려고 하니 차라리 그냥 만드는게 낫겠다 싶은 생각이 들었다. 아래는 그래서 시작된 프로젝트.&amp;nbsp;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;slack 투표 명령어 만들기 ( feat. vote )&lt;/b&gt;&lt;/h2&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:320px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B8474F5C1FABAA1F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-24 오전 12.36.48.png&quot; height=&quot;181&quot; width=&quot;320&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/b&gt;&lt;/div&gt;&lt;p&gt;일단 &lt;i&gt;poll&lt;/i&gt; 의 생김새를 잘 분석하고 만들면 되는데, 요구되는 기능은 아래와 같다.&lt;/p&gt;&lt;p&gt;- 슬래시( &lt;i&gt;slash&lt;/i&gt; ) 커맨드로 투표를 입력한다.&lt;br /&gt;- 해당 글에 사용자들이 투표를 할 수 있다. 즉, 나열된 &lt;i&gt;Options&lt;/i&gt; 에서 간편하게 &lt;i&gt;Choice&lt;/i&gt; 를 하고 그 결과가 기록되면 된다.&lt;br /&gt;- 사용자가 A, B 중에 A 에 투표했으면 A쪽에 사용자의 아이디가 태깅되고, Count 가 증가된다.&lt;br /&gt;- 사용자가 투표한 곳에 다시 투표했을 때는 태깅이 삭제되며 Count 가 감소된다. ( 투표 취소 )&lt;br /&gt;- 필요시에 해당 투표를 삭제한다.&lt;/p&gt;&lt;p&gt;간단해보이지만 그렇게 쉬운 과제는 아니다. 인터넷에 좋은 예제는 없으며 슬랙에서 슬래시 커맨드가 어떤식으로 동작되는지 기본적인 분석이 필요하기 때문이다. 참고로 &lt;i&gt;simple-poll &lt;/i&gt;은 &lt;i&gt;GitHub&lt;/i&gt; 에 &lt;i&gt;python-simple &lt;/i&gt;버전으로 공개되어 있지만 일부만 참고 가능하다. 실제 투표 기능 구현을 위한 전체 틀로는 적합하지 않다는 의미다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;상황이 그러하니 그냥 바닥부터 개발하는수밖에. 우선 &lt;i&gt;my app&lt;/i&gt; 등록을 위해 다음&amp;nbsp;&lt;i&gt;URL&lt;/i&gt; 로 진입하도록 한다. 그리고 우측 상단에&lt;i&gt; Create New App &lt;/i&gt;을 통해 앱을 생성하도록 하자. &lt;i&gt;&lt;a href=&quot;https://api.slack.com/apps&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://api.slack.com/apps&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9962364A5C1FA15D11&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-12-23 오후 11.52.45.png&quot; height=&quot;287&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;다음으로는 좌측 메뉴에&lt;i&gt; Incoming webhooks&lt;/i&gt; 와 &lt;i&gt;Slash commands&lt;/i&gt; 를 살펴보면 된다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F6044E5C1FA2012F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Slack API: Applications _ opensourcekr Slack 2018-12-23 23-54-18.png&quot; height=&quot;431&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;i&gt;Slash Commands&lt;/i&gt; 는 슬랙 채팅 안에서 사용될 명령어를 입력해주면 된다. 여기서는 &lt;i&gt;poll&lt;/i&gt; 기능을 만드는 것이 목표이므로 &lt;i&gt;&lt;b&gt;vote&lt;/b&gt;&lt;/i&gt; 로 생성을 하도록 한다. 사용자는 채팅창에서 &lt;i&gt;&lt;b&gt;/vote &lt;/b&gt;&lt;/i&gt;를 입력해서 투표 기능을 사용할 수 있게 될 것이다. 그리고 다른 것들은 &lt;i&gt;poll&lt;/i&gt; 과 동일하게 채워넣는다. 여기서는 &lt;i&gt;Request URL&lt;/i&gt; 은 가렸다. &lt;i&gt;Slash Commands&lt;/i&gt; 를 처리할 서버의 &lt;i&gt;URL&lt;/i&gt; 인데 사실 노출이 되어도 상관없다. &lt;i&gt;access token&lt;/i&gt; 이 없으면 접근해도 할 수 있는게 없게 개발되어 있기&amp;nbsp;때문이다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991BA6445C1FA29C35&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Slack API: Applications _ opensourcekr Slack 2018-12-23 23-58-00.png&quot; height=&quot;429&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;그리고나서&amp;nbsp;&lt;i&gt;Incoming webhooks &lt;/i&gt;을 설정해주면 되는데 이쪽은 사용자가 &lt;i&gt;A or B&lt;/i&gt; 같은 옵션에 투표를 진행했을 때 처리하는 로직이라고 생각하면 된다. 여기서는 &lt;i&gt;Slash Commands&lt;/i&gt; 와 동일한 서버에 URL 만 살짝 다르게 입력했다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F67E495C1FA36827&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Slack API: Applications _ opensourcekr Slack 2018-12-24 00-01-23.png&quot; height=&quot;431&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;자, 이제 개발을 진행하면 된다. &lt;i&gt;Slash Commands&lt;/i&gt; 를 처리할 서버는&amp;nbsp;&lt;i&gt;&lt;/i&gt;우선 &lt;i&gt;Google Cloud Platform&lt;/i&gt; 위에서 저렴한&amp;nbsp;&lt;i&gt;instance&lt;/i&gt; 를 사용하도록 한다.&amp;nbsp;&lt;i&gt;Cloud Functions&lt;/i&gt; 을 사용해도 무방하지만 잠깐의&lt;i&gt; Cold Start &lt;/i&gt;도 실시간이&amp;nbsp;요구되는 채팅에서는 적합하지 않겠다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;i&gt;URL&lt;/i&gt; 로 들어오는 트래픽을 가볍게 처리하기에&lt;i&gt; Node.js&lt;/i&gt; 만한게 없다. 우선 위에서 언급된 두 가지를 처리할 수 있도록 해주면 나머지는 비지니스 로직이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;node&quot;&gt;app.post('/', urlencodedParser, (req, res) =&amp;gt; {
  res.status(200).end() // best practice to respond with 200 status
  // ...
});

app.post('/actions', urlencodedParser, (req, res) =&amp;gt; {
  res.status(200).end() // best practice to respond with 200 status
  // ...
});

app.listen(port, () =&amp;gt; {
  console.log('App listening on port ' + port);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;비지니스적인 코드를 삽입할 때 가장 중요한 것은 &lt;i&gt;access token &lt;/i&gt;에 대한 비교이다. 여기서 코드에 대한 이야기는 더 하지 않겠다. &lt;i&gt;poll&lt;/i&gt; 자체가 서비스 되고 있는데 한명의 개발자로서 모든 코드를 오픈 하는 것은&amp;nbsp;상도덕에 어긋난다고 생각하기 때문. 아무튼 위에 코드를 기반으로 비지니스적인 내용을 추가하면 쉽게 구현 가능하다.&amp;nbsp;&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/O3-7D-yh4PM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;끝으로, 소프트웨어 산업 발전을 위해 부유하신 분들은 그냥 유료버전 사용하시기를. :-)&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>개인 프로젝트</category>
<category>poll</category>
<category>slack</category>
<category>slash commands</category>
<category>vote</category>
<author>Jaeyeon Baek</author>
<guid>https://jybaek.tistory.com/767</guid>
<comments>https://jybaek.tistory.com/767#entry767comment</comments>
<pubDate>Mon, 24 Dec 2018 00:17:02 +0900</pubDate>
</item>
<item>
<title>AI 스피커 만들기 ( #1 )</title>
<link>https://jybaek.tistory.com/766</link>
<description>&lt;p&gt;개인 프로젝트를 고민하다가 예전부터 미루어 왔던 AI 스피커 만들기를 시작합니다. 프로젝트의 요구사항은 간단합니다. 사용자의 음성을 인식하고 의도를 파악한 후에 상황에 맞는 답변을 스피커로 출력합니다. 가벼운 요구사항이지만 내부적으로는 아래와 같은 기술을 필요로 합니다.&lt;/p&gt;&lt;p&gt;- 사용자의 음성을 인식 (&amp;nbsp;&lt;i&gt;Speech to Text&lt;/i&gt; )&lt;br /&gt;- 변환된 Text 를 구문 분석 (&amp;nbsp;&lt;i&gt;Natural Language Processing &lt;/i&gt;)&lt;br /&gt;- 분석된 내용을 토대로 답변을 음성 출력 ( &lt;i&gt;Text to Speech &lt;/i&gt;)&lt;/p&gt;&lt;p&gt;일단 당장은 머신러닝에 대한 배경지식이 부족하기 때문에 세 가지 모두 쉬운 과제는 아닙니다. 그래서 고민끝에 우선 &lt;i&gt;Speech to Text( STT), Text to Speech( TTS)&lt;/i&gt; 는 &lt;i&gt;Google Cloud Platform( GCP )&amp;nbsp;&lt;/i&gt;에서 제공되는 API 를 통해 구현하도록 합니다. API 사용하는 부분을 깔끔하게 모듈로 작성해두면 향후에 단계적으로 걷어내기도 쉽습니다. 구문 분석하는 &lt;i&gt;NLP&lt;/i&gt; 에도 큰 노력과 학습이 필요한 부분이기 때문에 첫걸음에는 배제합니다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;구문분석을 빼면 이 프로젝트에 남는 것은 무엇일까요? 바로 &lt;i&gt;ping / pong&lt;/i&gt; 입니다. 사용자의 음성을 인식해서 기계 음성으로 다시 출력합니다. 단순하지만 여기에 또 붙일 수 있는 여러가지 기능들이 있습니다. 단계적으로는 인식된 음성을 firebase 에 저장하고, 주기적으로 질문을 분류합니다. 사용자들이 스피커를 통해 얻고자 하는 것이 무엇인지 확인하는 과정도 재미있을 것 같습니다. 이 글을 쓰는 시점에 간략하게 그려본 아키텍처는 아래와 같습니다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99992B335BFA3EF130&quot; filemime=&quot;image/jpeg&quot; filename=&quot;architecture.png&quot; height=&quot;325&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;프로젝트의 이름은 &lt;i&gt;Hanvi&lt;/i&gt; 입니다. 현재는 로컬머신에서 STT, TTS API 를 사용하고 있으며 뒷단에 GCP 안에 있는 아키텍처는 구현되어 있지 않네요. 테스트해본 영상을 첨부합니다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/9-4r1coNIos&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/p&gt;&lt;p&gt;이 프로젝트의 모든 소스코드는 아래 경로에서 확인 가능합니다.&lt;/p&gt;&lt;blockquote class=&quot;tx-quote-tistory&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jybaek/hanvi&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://github.com/jybaek/hanvi&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;기본적으로 소스코드를 돌리기 위해서는 GCP 계정 정보가 필요하며 API 호출을 위한 KEY 설정이 필요합니다. 프로젝트에 README 를 참고 하세요. 또한 GCP API 를 사용하는 것이기 때문에 비용이 발생합니다.&lt;/p&gt;&lt;p&gt;- &lt;a href=&quot;https://cloud.google.com/speech-to-text/pricing?hl=ko&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=japac-KR-all-ko-dr-bkws-all-super-trial-b-dr-1003987&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_266440440422-ADGP_Hybrid+%7C+AW+SEM+%7C+BKWS+~+T1+%7C+BMM+%7C+ML+%7C+1:1+%7C+KR+%7C+ko+%7C+Speech+%7C+speech+to+text+google+%7C+en-KWID_43700032535853744-kwd-342536784365&amp;amp;userloc_1009893&amp;amp;utm_term=KW_%2Bspeech%20%2Bto%20%2Btext%20%2Bgoogle&amp;amp;gclid=EAIaIQobChMIzqrSrvbu3gIVEqqWCh1YxwzdEAAYASABEgKsyfD_BwE&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;STT &lt;/a&gt;&lt;a href=&quot;https://cloud.google.com/speech-to-text/pricing?hl=ko&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=japac-KR-all-ko-dr-bkws-all-super-trial-b-dr-1003987&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_266440440422-ADGP_Hybrid+%7C+AW+SEM+%7C+BKWS+~+T1+%7C+BMM+%7C+ML+%7C+1:1+%7C+KR+%7C+ko+%7C+Speech+%7C+speech+to+text+google+%7C+en-KWID_43700032535853744-kwd-342536784365&amp;amp;userloc_1009893&amp;amp;utm_term=KW_%2Bspeech%20%2Bto%20%2Btext%20%2Bgoogle&amp;amp;gclid=EAIaIQobChMIzqrSrvbu3gIVEqqWCh1YxwzdEAAYASABEgKsyfD_BwE&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;비용&lt;/a&gt;&lt;br /&gt;- &lt;a href=&quot;https://cloud.google.