<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>민수's 기술 블로그</title>
<link>https://alwayspr.tistory.com/</link>
<description></description>
<language>ko</language>
<pubDate>Sun, 12 May 2019 14:31:31 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>AlwaysPr</managingEditor>
<image>
<title>민수's 기술 블로그</title>
<url>http://cfile9.uf.tistory.com/image/2236483858EF1D681CC9D5</url>
<link>https://alwayspr.tistory.com</link>
<description></description>
</image>
<item>
<title>Spring Cache 구현 원리</title>
<link>https://alwayspr.tistory.com/42</link>
<description>&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Spring Cache 구현방식에 대해서 살펴보자. 최근 회사에서 spring-cache의&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Cacheable&lt;/code&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;을 사용하게되었다. 사용하다 보니 토비의 스프링에서 본&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;관심사의 분리&lt;/strong&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;와&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;AOP&lt;/strong&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;와 겹쳐서 머릿속의 생각을 코드와 글로 써보려 한다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;글로 다 표현하기에는 한계가 있는 듯하니&amp;nbsp;&lt;a href=&quot;https://github.com/viviennes7/cache-demo&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Github source&lt;/a&gt;와 함께 보면 좀 더 도움이 될 것 같다. 그리고 Test code도 작성하였으니, 이걸통해서 Test를 하면 될 것 같다. (단, cache의 유무만 중요하기에 assert문은 작성하지 않고, log만 찍었다.)&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;요구사항은 다음과 같다. 나는 글로벌 게임을 만들고 있고, 유저들에게 웹사이트에서 랭킹을 보여주어야 한다. 단, 이용자는 100만명을 넘기때문에 모든 이용자를 Scan해서 순위를 실시간으로 보여주기에는 한계가 있기에 Cache를 이용해서 랭킹 서비스를 제공하려한다.&lt;/p&gt;&lt;p data-line=&quot;10&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;%EC%82%AC%EC%A0%84%EC%A4%80%EB%B9%84&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;사전준비&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;의존성을 먼저 설정한다. 사용하는 의존성은 다음과 같다.&lt;/p&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Spring boot&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Spring cache&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Spring data jpa&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Spring data redis&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Spring boot web&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Embedded Redis&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;H2&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;pom.xml에 추가할 요소들은 위에서 언급한&amp;nbsp;&lt;a href=&quot;https://github.com/viviennes7/cache-demo&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Github source&lt;/a&gt;를 참고하자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;랭킹을 보여주기위해서는 일단 사용자가 있어야한다. Spring boot 프로젝트 생성시 만들어주는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;*Application&lt;/code&gt;에 다음처럼 사용자 몇명을 추가하자.&lt;/p&gt;&lt;p data-line=&quot;24&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheDemoApplication&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheDemoApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheDemoApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;saveAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;minsoo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;wonwoo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;sonsang&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;toby&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;manbok&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;랭킹의 종류가 주, 월, 년 단위도 있기 때문에&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;enum&lt;/code&gt;을 추가한다.&lt;/p&gt;&lt;p data-line=&quot;55&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ALL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; YEAR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MONTH&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; WEEK&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;랭킹 Business를 제공해주는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;interface&lt;/code&gt;도 하나 만들자.&lt;/p&gt;&lt;p data-line=&quot;62&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//Redis에 저장할 prefix&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; RANKING_GETTING_KEY &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;ranking:get&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Redis가 이미 local에 깔려있으면 상관없겠지만, 그렇지 않으면 Embedded로 사용할 수 있게 아래의 config도 추가하자.&lt;/p&gt;&lt;p data-line=&quot;72&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;EmbeddedRedisConfig&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RedisServer&lt;/span&gt; redisServer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;redisServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        redisServer &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RedisServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;6379&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        redisServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PreDestroy&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stopRedis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;redisServer &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            redisServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;93&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;business-%EA%B5%AC%ED%98%84&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Business 구현&lt;/h2&gt;&lt;p data-line=&quot;95&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;%EC%9E%85%EB%AC%B8%EC%9E%90-%EB%B0%A9%EC%8B%9D&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;입문자 방식&lt;/h3&gt;&lt;p data-line=&quot;96&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BeginnerRankingService&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Logger&lt;/span&gt; log &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ValueOperations&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BeginnerRankingService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RedisTemplate&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; key &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;%s:%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RANKING_GETTING_KEY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; cachedRankingList &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CollectionUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedRankingList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;business logic execution&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; rankingList &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//                    .sorted() 랭킹을 정하는 로직이 있다고 가정&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rankingList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;30L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SECONDS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; rankingList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; cachedRankingList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;getRanking()&lt;/code&gt;을 보자. 로직은 간단하다. Redis에 data를 간편하게 넣고 가져올 수 있는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ValueOperations&lt;/code&gt;를 통해서 캐시 데이터를 가져온 다음 존재하지않으면 로직을 수행하고, 존재하면 cache된 데이터를 반환한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그러나 이 코드의 문제점은 SRP를 위반한다. 자세히 말하자면&amp;nbsp;두가지 관심사(책임)를 가지고 있다.&lt;/p&gt;&lt;ol style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;랭킹순위를 매기는 로직&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Cache 하는 로직&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;즉 하나의 관심사 로직이 변하게되면 직접적으로 타 로직에게 영향을 준다. 적합한 예는 아니지만 해당 게임의 랭킹 로직이 유명해지면서&amp;nbsp;N사와 K사가 구입했다고 가정하자. 그런데 N사는 Cache 용도로 Redis를 사용하지만, K사는 Hazelcast를 사용한다. 이렇게 될 경우&amp;nbsp;두가지 버전의 랭킹서비스를 만들어서 각각 제공해줘야한다.&lt;/p&gt;&lt;p data-line=&quot;138&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;ioc&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;IoC&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 문제를 IoC를 이용해서 개선해보자. 코드는 다음과같다.&lt;/p&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Ranking business&lt;/li&gt;&lt;/ul&gt;&lt;p data-line=&quot;142&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BasicRankingService&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Logger&lt;/span&gt; log &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BasicRankingService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;business logic execution&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//              .sorted() 랭킹을 정하는 로직이 있다고 가정&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Cache&lt;/li&gt;&lt;/ul&gt;&lt;p data-line=&quot;164&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheRankingService&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ValueOperations&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; rankingService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheRankingService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RedisTemplate&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; basicRankingService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rankingService &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; basicRankingService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; key &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;%s:%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RANKING_GETTING_KEY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; cachedRankingList &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CollectionUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedRankingList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; rankingList &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rankingService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rankingList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;30L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SECONDS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; rankingList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; cachedRankingList&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;191&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h1 class=&quot;mume-header&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 2.25em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:461px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C028365C9717BB18&quot; filemime=&quot;image/jpeg&quot; filename=&quot;cacheable proxy.png&quot; height=&quot;231&quot; width=&quot;461&quot;/&gt;&lt;/span&gt;&lt;/h1&gt;&lt;p style=&quot;margin-bottom: 16px; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif; color: rgb(51, 51, 51);&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BasicRankingService&lt;/code&gt;,&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;CacheRankingService&lt;/code&gt;&amp;nbsp;두개의 클래스로 나뉘게 되었다. 그래서 각 클래스에 맞는 책임만을 가지고 있다. 이렇게 될 경우 Cache의 방식이 변하게되더라도 랭킹 business에는 영향이 없다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;책임은 잘 분리했으나 후에 랭킹 말고도 Cache를 하려면 모든 class에 위와 같은 행위를 해줘야한다. 즉 엄청 귀찮아진다. 혹자는 위의 이미지를&amp;nbsp;보고&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;Proxy&lt;/strong&gt;라는 단어를 떠올렸을 것이다.&lt;/p&gt;&lt;p data-line=&quot;197&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;aop&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;AOP&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Proxy를 하는 방법은 다양하게 있겠지만, 스프링에서는 횡단의 관심사를 AOP를 통하여 분리할 수 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Annotation을 통해서 AOP를 사용하겠다. Annotation을 먼저 만들자.&lt;/p&gt;&lt;p data-line=&quot;202&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RUNTIME&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;METHOD&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token annotation punctuation&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Cacheable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;cacheName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;cacheName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그리고 Aspect를 만들자.&lt;/p&gt;&lt;p data-line=&quot;217&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheAspect&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ValueOperations&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CacheAspect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RedisTemplate&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; redisTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;@annotation(Cacheable)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ProceedingJoinPoint&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; prefix &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getCacheName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; key &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; cacheKey &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;%s:%s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; prefix&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Object&lt;/span&gt; cachedValue &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Object&lt;/span&gt; result &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; cachedValue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getCacheName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ProceedingJoinPoint&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MethodSignature&lt;/span&gt; signature &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MethodSignature&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getSignature&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Method&lt;/span&gt; method &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; signature&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Cacheable&lt;/span&gt; cacheable &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;AnnotationUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;method&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Cacheable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; cacheable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;cacheName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ProceedingJoinPoint&lt;/span&gt; joinPoint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;joinPoint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;260&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;AopRankingService&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Logger&lt;/span&gt; log &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;AopRankingService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberRepository&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;RANKING_GETTING_KEY&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getRanking&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RankingType&lt;/span&gt; type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;business logic execution&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//              .sorted() 랭킹을 정하는 로직이 있다고 가정&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Cache를 하기위해 일일이 class를 만들 필요가 없어졌으며, 간단하게 annotation으로 해결이 가능하다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이전에 작성한 코드와 비슷하다. 단,&amp;nbsp;method의 정보들을 가져오는 부분과 파라미터들을 key로 만드는 로직이 추가되었을 뿐이다. key생성은 임의로 만들었으며 실제 Spring에서는 기본적으로&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;SimpleKeyGeneretor&lt;/code&gt;를 통해 생성한다.&lt;/p&gt;&lt;p data-line=&quot;283&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;spring&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Spring&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;당연히 Spring에서도 위와 같은 AOP를 이용한 Cache 방식을 제공한다.&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@EnableCaching&lt;/code&gt;를 추가하고 몇몇 필요한 설정 후&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Cacheable&lt;/code&gt;을 이용하면 간단하게 Cache를 할 수 있다.&lt;br /&gt;이 부분에 대한 자세한 내용은 이미 다른 곳에 많이 있으므로 생략하겠다.&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;우리가 당연하게 사용하고 있는 것들이 Framework를 만든 사람들 입장에서는 당연한게 아닐 수도 있다. Spring에서 제공해주는 이런&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Cacheable&lt;/code&gt;이나&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Transactional&lt;/code&gt;은 단순히 우리를&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;편하게&lt;/strong&gt;&amp;nbsp;만들어주려는 의도 뿐만은 아닌것 같다. 그 내면에는 이런 책임을 분리하고 만약 변경이 일어나더라도 자기에게만 영향이 끼치게 하는 등의 다양한 Framework 및 그들의 철학이 반영된걸로 보인다.&lt;/p&gt;</description>
<category>Spring</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/42</guid>
<comments>https://alwayspr.tistory.com/42#entry42comment</comments>
<pubDate>Sun, 24 Mar 2019 14:40:44 +0900</pubDate>
</item>
<item>
<title>Dubbo Spring Boot</title>
<link>https://alwayspr.tistory.com/41</link>
<description>&lt;h1 class=&quot;mume-header&quot; id=&quot;apache-dubbo&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 2.25em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Apache Dubbo&lt;/h1&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;고성능, 가벼운 Java 기반 오픈 소스 RPC 프레임워크&lt;/strong&gt;&lt;/p&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Interface 기반의 원격 호출(remote call)&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;fault tolerance, load balancing&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Service 자동 등록 및 감지 (Service Registry)&lt;/li&gt;&lt;/ul&gt;&lt;p data-line=&quot;6&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;rpc%EB%9E%80&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;RPC란?&lt;/h2&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Remote Procedure Call&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;외부 서비스를 함수나 메소드를 통해 호출하는 형태&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;부가설명&lt;/strong&gt;&lt;br /&gt;분산서비스시 외부 서비스는 주로 HTTP를 통해 호출을 한다. 그리고 Application 레벨에서 header, body를 조작한다. 그러나 RPC는 마치 메소드를 호출하듯이 외부 서비스를 사용할 수 있는 간편함을 가지고 있다.&lt;/p&gt;&lt;p data-line=&quot;13&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;img src=&quot;https://dubbo.incubator.apache.org/img/architecture.png&quot; alt=&quot;img&quot; style=&quot;max-width: 100%; max-height: 100%;&quot;&gt;&lt;/p&gt;&lt;p data-line=&quot;14&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;백문이 불여일타! 직접 코드를 작성해보자.&lt;br /&gt;필자는 Spring boot와 편의상 maven 멀티모듈 구조를 통해서 코드를 작성하겠다. 구조는 아래와 같다.&lt;/p&gt;&lt;p data-line=&quot;19&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;&quot; class=&quot;language-&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background: transparent; border-radius: 3px; padding: 0px; margin: 0px; word-break: normal; border: 0px; display: inline; max-width: initial; overflow: initial; line-height: inherit; overflow-wrap: normal; font-size: 0.85em !important;&quot;&gt;Root
  - provider
  - consumer
&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;또한 spring boot starter도 제공하기 때문에 더욱이 간단히 쓸 수 있다. 모든 코드가 다 작성된것이 아니기 때문에&amp;nbsp;&lt;a href=&quot;https://github.com/viviennes7/dubbo-spring-boot-demo&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Github&lt;/a&gt;의 코드와 같이 보면 좀 더 이해하기 쉬울 것 같다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;다음과 같은 분산시스템 흐름으로 만들어보자. 인터넷쇼핑에서 물건을 구입한다. 배송을 보내야하기 때문에 주소를 가진 회원정보를 가져와야한다. 물론 이외에도 많이 있겠지만 생략하겠다.&lt;/p&gt;&lt;ol style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;고객이 물건을 구입&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;consumer에서 provider로 유저정보 조회&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;이후 작업&lt;/li&gt;&lt;/ol&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;공통 Dependency&lt;/strong&gt;&amp;nbsp;- 필자는 부모 pom.xml에 설정을 하였다.&lt;/p&gt;&lt;p data-line=&quot;32&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;xml&quot; class=&quot;language-xml&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dubbo.version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;2.7.0&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dubbo.version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;dubbo-spring-boot-starter&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;${dubbo.version}&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.apache.dubbo&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;dubbo&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;${dubbo.version}&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;52&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;provider&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Provider&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;누군가에게 특정 기능을 제공한다. 예를 들면 해당 Provider의 서비스가 회원과 관련된 서비스일 때 누군가 회원의 id로 조회를 하고싶으면 이 Provider를 이용하면 된다. 좀 더 쉽게말하면 Provider가 제공해주는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;interface&lt;/code&gt;를 단순히 호출하면 된다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;먼저, Dependency부터 설정하자.&lt;/p&gt;&lt;p data-line=&quot;56&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;xml&quot; class=&quot;language-xml&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.h2database&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;h2&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;runtime&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;DB에서 회원정보를 조회해야 하기때문에 인메모리 DB인 h2와 JPA를 설정하였다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;다음은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;application.properties&lt;/code&gt;에서 간단히 dubbo를 setting 하자.&lt;/p&gt;&lt;p data-line=&quot;73&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;properties&quot; class=&quot;language-properties&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;# Spring boot application&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;spring.application.name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;dubbo-provider-demo&lt;/span&gt;

&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;# Dubbo Application&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;## dubbo.application.name=${spring.application.name}&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;# Dubbo Protocol&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;dubbo.protocol.name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;dubbo&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;dubbo.protocol.port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;12345&lt;/span&gt;
&lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;## Dubbo Registry&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;dubbo.registry.address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;N/A&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;dubbo.application.name&lt;/code&gt;은 dubbo를 적용하려면 꼭 필요한 설정이다. 그러나&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;spring.application.name&lt;/code&gt;이 있으면 이것을 default로 자동 설정하니 상황에 맞게하자. 필자는 그냥&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;spring.application.name&lt;/code&gt;만 추가하였다.&lt;br /&gt;그리고 protocol로 사용할 name, port를 설정한다. consumer는 이 정보를 통해 연결한다.&lt;br /&gt;registry는 zookeeper같은 Service Registry를 의미한다. 본문에서는 다루지않으니 필요하다면&amp;nbsp;&lt;a href=&quot;https://github.com/apache/incubator-dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples/dubbo-registry-zookeeper-samples&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;여기&lt;/a&gt;를 참고하자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이제는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ProviderApplication&lt;/code&gt;&amp;nbsp;class로 가보자.&lt;/p&gt;&lt;p data-line=&quot;90&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@DubboComponentScan&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ProviderApplication&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; MemberRepository memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ProviderApplication&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemberRepository memberRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        SpringApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProviderApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; Exception &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;minsoo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;강남구&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;LocalDateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;먼저 눈에 띄는 것은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@DubboComponentScan&lt;/code&gt;이다. Spring의 ComponentScan 처럼 Dubbo도 객체들을 Scan하는 과정이 필요하기 때문에 꼭 작성해주어야하며, annotation의 value를 이용하여 특정 package를 선택할 수도 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그외에는 Test를 위해 DB에 data를 insert하는 로직이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;다음은 consumer에서 provider를 사용하기 위한 수단으로서 interface를 제공해줘야한다.&lt;/p&gt;&lt;p data-line=&quot;117&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Member &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getMember&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Long id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;123&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stereotype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Service&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@org&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dubbo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;annotation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Service
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberServiceImpl&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; MemberRepository memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberServiceImpl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MemberRepository memberRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; memberRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; Member &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getMember&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Long id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NotFoundMember&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;NotFoundMember&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;첫번째&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Service&lt;/code&gt;는 스프링 빈을 등록하는데 쓰이는 Annotation이다. 두번째&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Service&lt;/code&gt;는 dubbo로 사용할 객체를 등록하는 Annotation이다. 두개의 이름이 똑같아서 불편함이 있긴한데, 두 Annotation을 상속받는 Custom Annotation을 하나 만들어서 사용하면 좀 더 간편할 것 같다.&lt;/p&gt;&lt;p data-line=&quot;149&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;long&lt;/span&gt; serialVersionUID &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;1&lt;/span&gt;L&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@GeneratedValue&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; Long id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; String name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; Integer age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; String addr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; LocalDateTime createDate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//getter, setter 등 생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;dubbo를 통해서 객체를 주고받을때 주의해야할 점은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Serializable&lt;/code&gt;을 구현하고있어야만 데이터가 이동할 수 있다. 만약에 그러지 않으면 런타임에러를 내뱉는다. 그로 인해&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Optional&lt;/code&gt;&amp;nbsp;같은 객체는 전달할 수는 없다.&lt;/p&gt;&lt;p data-line=&quot;173&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;consumer&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Consumer&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;consumer은 provider에서 제공하는 서비스들을 사용한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이것도 Dependency 부터 살펴보자.&lt;/p&gt;&lt;p data-line=&quot;178&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;xml&quot; class=&quot;language-xml&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;com.ms&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;provider&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;compile&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;scope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependencies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;spring mvc를 사용하기위해&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;spring-boot-starter-web&lt;/code&gt;를 받았고, provider가 제공해주는 interface를 사용하기위해 provider 또한 디펜던시를 설정했다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;application.properties&lt;/code&gt;에서 다음을 설정하자.&lt;/p&gt;&lt;p data-line=&quot;197&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;properties&quot; class=&quot;language-properties&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;spring.application.name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;dubbo-consumer-demo&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;consumer도 역시 name을 설정해줘야한다.&lt;/p&gt;&lt;p data-line=&quot;202&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; overflow-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;/orders&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;OrderController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; Logger logger &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; LoggerFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Reference&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;dubbo://127.0.0.1:12345&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; MemberService memberService&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@PostMapping&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequestBody&lt;/span&gt; OrderRequest request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; Member member &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getMember&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;getMemberId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;result ::: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//...&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;여기서 눈여겨 볼것은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Reference&lt;/code&gt;이다. 이것을 스프링의&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Autowired&lt;/code&gt;로 쉽게 생각하면된다. URL정보를 토대로 provider와 통신을 한다. 이 url은 provider에서 작성한&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;dubbo.protocol.name&lt;/code&gt;, ip,&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;dubbo.protocol.port&lt;/code&gt;&amp;nbsp;이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;또한 그 아래&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;는 provider에서 제공해주는 interface이다. consumer에는 이&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;&amp;nbsp;interface를 구현한 객체가 없으며, 구현한 객체는 provider에 있는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberServiceImpl&lt;/code&gt;이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;원격호출을 마치 local에 있는 메소드를 호출하는 것처럼 사용하니 참 간편하지 않은가?&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이 처럼 직접적으로 호출을 할 수도 있고,&amp;nbsp;&lt;a href=&quot;https://zookeeper.apache.org/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Apache ZooKeeper&lt;/a&gt;나&amp;nbsp;&lt;a href=&quot;https://nacos.io/en-us/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Nacos&lt;/a&gt;의 Service Registry 기능을 통하여 간접적으로도 호출이 가능하다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;단, spring boot dubbo의 주의할 점은 아직 정식 Release되지 않은 Incubator 라는 점이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;참고자료&lt;/p&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;a href=&quot;https://dubbo.incubator.apache.org/en-us/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Dubbo&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-dubbo-spring-boot-project&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;GitHub - apache/incubator-dubbo-spring-boot-project&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;a href=&quot;https://github.com/apache/incubator-dubbo-spring-boot-project/tree/master/dubbo-spring-boot-samples&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Dubbo Sample code&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Spring</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/41</guid>
<comments>https://alwayspr.tistory.com/41#entry41comment</comments>
<pubDate>Sun, 17 Mar 2019 13:02:57 +0900</pubDate>
</item>
<item>
<title>BigDecimal의 toString(), toPlainString(), toEngineeringString()</title>
<link>https://alwayspr.tistory.com/39</link>
<description>&lt;h1 class=&quot;mume-header&quot; id=&quot;bigdecimal&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 2.25em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;BigDecimal&lt;/h1&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;먼저&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;에 대해서 간단히 알아보도록 하자.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;은 큰 수를 표현하거나 부동소수점을 해결할 수 있는 클래스이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;거두절미하고 코드를 보자.&lt;/p&gt;&lt;p data-line=&quot;7&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;primitive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위 코드에서는 무엇이 출력이 될까?&lt;br /&gt;0.9가 나오길 기대하겠지만, 위코드는 0.8999999999999999 라는 이상한 값을 반환한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;자바 기본서를 보던 옛날로 돌아가보자. 우리는&amp;nbsp;첫장에서 primitive type들에 대해서 공부를 했을 것이다. 그리고 각각의 type은 고유의 bit 크기를 가지고 있다.&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;double&lt;/code&gt;같은 경우에는 32bit이고 이는 4.94065645841246544E-324 ~ 1.79769313486231570E+308를 표현할 수 있다고 한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;어마어마한 크기긴 하지만 저걸로는 만족되지 않기도 하다.&lt;br /&gt;이유는 0과 1사이에는 얼만큼의 숫자가 있을까? 아는 것처럼 무한한 숫자가 존재한다.&lt;br /&gt;32bit로는 이 수를 다 표현을 못하기 때문에 컴퓨터는 표현이 안되는 숫자는 근사값을 제공해준다. 방금 보았던 코드처럼 말이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이 문제는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;을 이용하면 간단하게 해결할 수 있다.&lt;/p&gt;&lt;p data-line=&quot;27&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;bigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;1.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;해당 수를&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;로 변경하여 메소드를 통해 연산을 하는 것이다.&lt;br /&gt;이번에는 기대하는 것처럼 0.9라는 값을 얻을 수 있다.&lt;br /&gt;서비스 개발 중 실수 단위의 돈을 다루는 로직이 있다면 필히&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;을 고려하자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;추가적으로&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;의 생성자로 일반적인 수를 넣을 수도 있지만, 지수를 이용해서 수를 넣을 수도 있다. 예를 들면&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;new BigDecimal(&quot;2.564E6&quot;)&lt;/code&gt;&amp;nbsp;처럼 말이다. E와 뒤의 숫자는 10의 지수를 표현한다. 그래서 위의 수는 2564000과 같다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;BigDecimal&lt;/code&gt;을&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;String&lt;/code&gt;으로 표현하는 몇가지 방법을 알아보자.&lt;/p&gt;&lt;p data-line=&quot;42&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;tostring&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;toString()&lt;/h2&gt;&lt;div&gt;생성자로 전달받은 값 그대로&amp;nbsp;반환한다.&lt;/div&gt;&lt;p data-line=&quot;44&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;tostring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2564000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2.564E6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;2564000&lt;br /&gt;2.564E+6&lt;/p&gt;&lt;p data-line=&quot;55&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;toplainstring&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;toPlainString()&lt;/h2&gt;&lt;div&gt;생성자로 전달받은 값을 지수 표현없이 반환한다.&lt;/div&gt;&lt;p data-line=&quot;56&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toPlainString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2564000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toPlainString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2.564E6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toPlainString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;2564000&lt;br /&gt;2564000&lt;/p&gt;&lt;p data-line=&quot;67&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;toengineeringstring&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;toEngineeringString()&lt;/h2&gt;&lt;div&gt;생성자로 전달받은 값 중 지수 표현이&amp;nbsp;있으면 지수로 반환한다.&lt;/div&gt;&lt;p data-line=&quot;69&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toEngineeringString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2564000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toEngineeringString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;2.564E6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toEngineeringString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;2564000&lt;br /&gt;2.564E+6&lt;/p&gt;</description>
<category>Java</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/39</guid>
<comments>https://alwayspr.tistory.com/39#entry39comment</comments>
<pubDate>Tue, 11 Sep 2018 22:40:10 +0900</pubDate>
</item>
<item>
<title>IoC (DI, Service Locator...)</title>
<link>https://alwayspr.tistory.com/38</link>
<description>&lt;h1 class=&quot;mume-header&quot; id=&quot;ioc&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 2.25em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;IoC&lt;/h1&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;Inverse of Control&lt;/strong&gt;는 제어권을 개발자가 아닌 제 3자(프레임워크)가 가지게 하는 것이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;그렇다면 우리는 왜 제어권을 3자에게 위임해야 하는가?&lt;/strong&gt;&lt;br /&gt;이에 대한 답을 찾기전에 과거로 돌아가보자. 과거 많은 형태의 오픈소스들이 나오고 있었고, 이들의 공통적인 이슈는 서로 다른 객체를 어떻게 연결할 것인지에 대한 문제였다. 이를 해결할 한 가지 방법으로 IoC가 제시되었다.&lt;br /&gt;즉, IoC의 주된 목적은 Application의 Dependency를 제거해서 느슨한 결합을 제공하는 것이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그럼 Dependency란 무엇일까?&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote style=&quot;background: var(--vscode-textBlockQuote-background); border-left-width: 4px; border-left-color: rgb(214, 214, 214); margin: 0px 0px 16px; padding-top: 0px; padding-bottom: 0px; color: rgb(92, 92, 92); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p&gt;Dependency (computer science) or coupling, a state in which one object uses a function of another object - Wiki&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;코드에서 두 모듈 간의 연결.&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;객체지향언어에서는 두 클래스 간의 관계&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;간단한 코드를 작성해보자.&lt;/p&gt;&lt;p data-line=&quot;15&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ObjectMapper objectMapper&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; JsonProcessingException &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; objectMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위 코드는 Jackson 라이브러리의&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;를 이용하여 특정 객체를 Json String으로 변환작업을 하는 로직이다.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;의 기능을 사용하고 있기 때문에 의존하고 있다고 할 수 있다.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper.writeValueAsString()&lt;/code&gt;의 구현부가 변하게 되면&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService.parseString()&lt;/code&gt;&amp;nbsp;또한 변하게 된다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;비슷한 개념인&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;Coupling&lt;/strong&gt;이 있다 Coupling이란 모듈간의 결합도 및 상호의존성의 정도를 말한다.&lt;/p&gt;&lt;p data-line=&quot;29&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/Coupling_sketches_cropped_1.svg/600px-Coupling_sketches_cropped_1.svg.png&quot; alt=&quot;결합도&quot; style=&quot;max-width: 100%; max-height: 100%;&quot;&gt;&lt;/p&gt;&lt;p data-line=&quot;30&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;는 클래스간의 강하게 결합을 하고 있다.&lt;br /&gt;왜냐하면 몇몇은 JSON 변환 작업을&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;를 사용해서 그대로 재사용하면 되지만 다른 몇몇은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Gson&lt;/code&gt;을 사용하기 때문에 코드에 전반적인 수정이 필요하다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이러한 강한 결합을&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;Interface&lt;/strong&gt;의 도움을 받아 느슨하게 할 수 있다.&lt;/p&gt;&lt;p data-line=&quot;37&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; T &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;44&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이전 코드에서는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;&amp;nbsp;클래스안에&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;가 직접적으로 들어가있었지만, 이번 코드에서는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;는 Interface인&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;JsonParser&lt;/code&gt;만을 알고 있다. 이로 인해 사용자는 원하는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;JsonParser&lt;/code&gt;&amp;nbsp;구현체를 입맛에 맞게 사용할 수 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;또 다른 사례를 알아보자.&lt;/p&gt;&lt;p data-line=&quot;56&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CalendarReader&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; List &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;readCalendarEvents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;File calendarEventFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//open InputStream from File and read calendar events.&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 코드는 XML Local file을 통해서 이벤트 목록을 읽어오는 메소드다. 본인만 쓴다면 문제가 없겠지만, 이 소스를 다수의 사람들이 사용을 해야한다. 그런데 그들 중 일부는 XML을 통해 이벤트를 관리하지만, 다른 몇몇은 DB, Network 등을 통해서 관리를 한다. 즉, 다른 리소스로 관리를 하는 사람은 해당코드를 재사용할 수가 없게 된다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이를 좀 더 포괄적인&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;InputStream&lt;/code&gt;을 사용하면서 결합을 좀 더 느슨하게 유도 할 수 있다.&lt;/p&gt;&lt;p data-line=&quot;66&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CalendarReader&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; List &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;readCalendarEvents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;InputStream calendarEventFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//read calendar events from InputStream&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이렇듯 느슨한 결합을 통하여 클래스의 재사용성을 높일 수 있다. 또한 재사용성을 높인 다는 말은 비슷한류의 중복코드가 제거될 수 있음을 의미하기도 한다.&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;자! 다시 처음으로 돌아가보자. IoC의 주된 목적은 Application의 Dependency를 제거하는 것이라고 하였다. IoC 방식에는 아래 사진외에도 여러가지가 있다 그러나 우리는 몇가지 핵심적인 방식들을 살펴보도록 하자.&lt;br /&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-2JkcEGnJVrY/UZCDAoPjk8I/AAAAAAAAEgQ/ilz1zM5fc78/s1600/3rd+image.jpg&quot; alt=&quot;사진&quot; style=&quot;max-width: 100%; max-height: 100%;&quot;&gt;&lt;/p&gt;&lt;p data-line=&quot;81&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;dependency-injection&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Dependency Injection&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;IoC 방식 중 가장 대표적인 방식으로 보인다. Interface의 느슨한 결합을 이용하여 Compile 시점에서 Dependency를 가지지 않고, Runtime 시점으로 미룰 수 있다.&lt;br /&gt;이를 좀 더 쉽게 표현하자면, 코드상에서 구현체가 존재하지 않고 단지 Inteface만 존재한다. 이로 인해 구현부가 변경되더라도 해당 코드를 수정하는 것이 아닌 Dependency만 변경해 주면된다. 거두절미하고 코드를 살펴보자.&lt;/p&gt;&lt;p data-line=&quot;85&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; String name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; String address&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;93&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; ObjectMapper objectMapper &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; JsonProcessingException &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; Member &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; IOException &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;readValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 코드는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Member&lt;/code&gt;&amp;nbsp;객체를 JSON 형태의&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;String&lt;/code&gt;으로, JSON형태의&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;String&lt;/code&gt;을&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Member&lt;/code&gt;객체로 변환하는 코드이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그런데 특정한 이슈(Library 지원 종료, 속도 문제, 회사 정책 등)로 인하여 JSON 변환 Library 인&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;를&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Gson&lt;/code&gt;이나 다른 라이브러리로 교체하고 싶으면 어떻게 될까?&lt;/p&gt;&lt;p data-line=&quot;110&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; Gson gson &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; Member &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;아예 새로운 코드가 되어버렸다. 클래스와 메소드 이름만 같지 모든 구현부가 바뀌어버렸다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;개인이 혼자 쓰는 프로젝트라면 상관이 없을 것이다. 그러나 오픈소스 또는 여러 기업에 팔아야되는 입장인데 위처럼 구현부가 변할때마다 코드를 수정해서 줘야 한다면 큰 문제가 있다. 이를 우리가 사용자 입맛에 맞게 일일이 변경해서 주는 것이 아니라,&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;가이드&lt;/strong&gt;를 제공해줌으로써 사용자가 알아서 입맛에 맞게 수정하도록 변경해보자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;앞서 말한 Interface의 도움을 받아 사용자에게 가이드를 줌과 동시에 객체간에 느슨한 결합을 맺어주자.&lt;/p&gt;&lt;p data-line=&quot;129&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; T &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;136&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Member&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;우리는 위처럼 코드를 작성 후 오픈소스로 공개를 하거나, 다른 기업에 팔면 된다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그럼&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ObjectMapper&lt;/code&gt;를 사용하는 기업은 어떻게 자기 입맛에 맞게 구현을 할까? 간단하다.&lt;/p&gt;&lt;p data-line=&quot;153&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; ObjectMapper objectMapper&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectMapper &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; T &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;readValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;IOException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParseException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectMapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;writeValueAsString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonProcessingException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParseException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;다음은&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Gson&lt;/code&gt;의 구현체이다.&lt;/p&gt;&lt;p data-line=&quot;182&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;GsonParser&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; Gson gson&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;GsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gson &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; T &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;자 그럼&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;를 실행시켜보자. 잘 돌아갈 것이다.&lt;br /&gt;는 무슨&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;NullPointerException&lt;/code&gt;이 떨어질 것이다.&lt;br /&gt;왜냐하면 전역변수(jsonParser)로 선언만 해놓았지 구현체를 할당하지 않았기 때문이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;우리는 전역변수에 인스턴스를 할당하는 방법을 잘 알고있다.&lt;br /&gt;주로 우리는 다음과 같이 인스턴스를 할당한다.&lt;/p&gt;&lt;p data-line=&quot;209&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; JsonParser jsonParser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;214&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberSservice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 코드의 문제점은 무엇일까?&lt;br /&gt;우리는 지금까지 코드 레벨에서 특정 구현 객체(&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;JacksonParser&lt;/code&gt;)를 보이지 않게 숨기려고 했는데, 다시 드러났다. 결국 허사가 된 것이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이를 다시 숨기려면 어떻게 해야 될까?&lt;br /&gt;객체 생성을 사용자에게 전가시키고 그 객체를 주입을 받는 것이다. 좀 더 정확하게 말하자면 의존성을(Dependency)을 사용자에 의해 주입(Injection)받는 것이다.&lt;/p&gt;&lt;p data-line=&quot;229&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;constructor-injection&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Constructor Injection&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;주로 필수적인 Dependency에 사용된다.&lt;/p&gt;&lt;p data-line=&quot;231&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;241&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;setter-injection&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Setter Injection&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;주로 부수적인 Dependency에 사용된다.&lt;/p&gt;&lt;p data-line=&quot;243&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;setJsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;253&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;method-injection&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Method Injection&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Setter Injection과 비슷하므로 생략한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 3가지 경우 중 하나로 구현을 했으면, 사용자는 다음과 같이 사용하면 된다.&lt;/p&gt;&lt;p data-line=&quot;258&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    JsonParser parser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//Constructor Injection&lt;/span&gt;
    MemberService memberService &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//Setter Injection&lt;/span&gt;
    memberService &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;setParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;또한 유닛 테스트를 좀 더 쉽게 할 수 있는 장점이 있다.&lt;br /&gt;유닛 테스트는 일반적으로 외부의 의존성을 제외하고, 해당클래스에 집중을 하는 테스트 기법이다.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;의 경우에는 사실 비즈니스 로직이 없이 의존성을 가진 인스턴스의 기능을 사용하는 것 뿐이지만, 로직이 있다고 가정을 하고 작성을 해보자.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;JsonParser&lt;/code&gt;의 구현체들이 직접 실행되는 것이 아닌 Mock, Stub의 개념을 조금 넣어보자. 해당코드는 아래와 같다.&lt;/p&gt;&lt;p data-line=&quot;281&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MockJsonParser&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; T &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Class&lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; clazz&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;김민수&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;수원시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token generics function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;{\&quot;name\&quot; : \&quot;김민수\&quot;, \&quot;age\&quot; : 26, \&quot;address\&quot; : \&quot;수원시\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;295&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    JsonParser parser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MockJsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//Constructor Injection&lt;/span&gt;
    MemberService memberService &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    memberService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이처럼 주입을 시켜주면 간단하게 테스트를 할 수가 있다.&lt;br /&gt;사실 이 상황에서는 강력함이 보이지 않지만, 만약 이것이 JSON 변환 작업이 아닌 DB나 Network와 연결이 된 작업이라면 직접 해당 리소스와 연결되지 않고 Interface를 구현한 Mock객체로 간단하게 테스트를 해볼 수가 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;우리는 지금까지 사용자에게 Dependency Injection을 하게끔 유도함으로 유연하고 재활용가능한 클래스를 만들었다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;좀 더 생각해볼만 한 것은 스프링 레퍼런스와, 마틴파울러의 글에서는 IoC와 DI를 마치 동일하다는 듯이 설명을 해놓았다.&lt;/p&gt;&lt;blockquote style=&quot;background: var(--vscode-textBlockQuote-background); border-left-width: 4px; border-left-color: rgb(214, 214, 214); margin: 0px 0px 16px; padding-top: 0px; padding-bottom: 0px; color: rgb(92, 92, 92); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p&gt;IoC is also known as dependency injection (DI) - Sping Reference&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style=&quot;background: var(--vscode-textBlockQuote-background); border-left-width: 4px; border-left-color: rgb(214, 214, 214); margin: 0px 0px 16px; padding-top: 0px; padding-bottom: 0px; color: rgb(92, 92, 92); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p&gt;As a result I think we need a more specific name for this pattern. Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates we settled on the name Dependency Injection - Martin Fowler&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이 때문에 필자는 처음에 IoC와 DI가 동일한 줄 알았다. 그러나 아까 봤던 그림처럼 IoC에는 여러가지 구현 방법이 존재한다.&amp;nbsp;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;개인적인 추측&lt;/strong&gt;으로는 많은 경우에서 IoC를 DI로 구현하기 때문에 위처럼 말한 것으로 보인다.&lt;/p&gt;&lt;p data-line=&quot;320&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;service-locator&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Service Locator&lt;/h2&gt;&lt;blockquote style=&quot;background: var(--vscode-textBlockQuote-background); border-left-width: 4px; border-left-color: rgb(214, 214, 214); margin: 0px 0px 16px; padding-top: 0px; padding-bottom: 0px; color: rgb(92, 92, 92); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p&gt;This process is fundamentally the inverse, hence the name Inversion of Control (IoC), of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes, or a mechanism such as the Service Locator pattern - Spring Reference&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Service Locator에 관한 핵심만 말하자면 이를 이용해서도 제어를 역전(IoC)시킬 수 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이 패턴 또한 목적은 Dependency를 제거하는 것이다. 그리고 DI와 비슷한 점이 많아 이해하기가 한결 쉬울 것이다. 구현된 코드를 한번 살펴보도록 하자.&lt;/p&gt;&lt;p data-line=&quot;327&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;final&lt;/span&gt; JsonParser jsonParser&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MemberService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; ServiceLocator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;jsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Member member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonParser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;parseString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;member&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;342&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ServiceLocator&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; JsonParser &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;jsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//경우에 따라 Singleton이나 다른 Scope로 구현을 하기도 한다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;JacksonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;언듯보면 생성자를 통해 의존성을 주입하는 방식과 비슷해 보이기도 한다.&lt;br /&gt;그러나 위에 작성한 Constructor Injection의 실행 코드를 보면&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;main()&lt;/code&gt;&amp;nbsp;메소드에서 사용자가 직접&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;new&lt;/code&gt;&amp;nbsp;키워드를 통해 인스턴스를 생성 후 주입을 해준다. 다시말하면 런타임시에 수동적으로 의존성이 연결이 된다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그러나 Service Locator는&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ServiceLocator.jsonParser()&lt;/code&gt;에 원하는 인스턴스를 생성해두면&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;MemberService&lt;/code&gt;가 생성이 될 때 직접&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ServiceLocator.jsonParser()&lt;/code&gt;를 호출하여 능동적으로 의존성을 맺는다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;능동적이란 단어가 좀 긍정적여 보이긴 하지만, 위에서 처럼 테스트코드로 디펜던시를 바꿔야되는 상황을 한번 가정해보자.&lt;/p&gt;&lt;p data-line=&quot;357&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ServiceLocator&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; JsonParser &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;jsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot; style=&quot;color: rgb(150, 152, 150);&quot;&gt;//경우에 따라 Singleton이나 다른 Scope로 구현을 하기도 한다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;MockJsonParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그럼&amp;nbsp;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;ServiceLocator&lt;/code&gt;는 테스트할 때와 서비스를할 때의 상황에 따라 코드를 바꿔줘야되는 이슈가 생긴다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이외에도 안티패턴이라고 여겨지는 몇가지 상황이 있다고 한다.&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;참고&lt;/p&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;https://www.codeproject.com/Articles/592372/Dependency-Injection-DI-vs-Inversion-of-Control-IO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;https://en.wikipedia.org/wiki/Dependency&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://tony-programming.tistory.com/entry/Dependency-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%9D%B4%EB%9E%80&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;http://tony-programming.tistory.com/entry/Dependency-의존성-이란&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://tutorials.jenkov.com/ood/understanding-dependencies.html#whatis&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;http://tutorials.jenkov.com/ood/understanding-dependencies.html#whatis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://martinfowler.com/articles/injection.html&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;https://martinfowler.com/articles/injection.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://justhackem.wordpress.com/2016/05/14/inversion-of-control/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;https://justhackem.wordpress.com/2016/05/14/inversion-of-control/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://justhackem.wordpress.com/2016/05/13/dependency-inversion-terms/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;https://justhackem.wordpress.com/2016/05/13/dependency-inversion-terms/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Programming</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/38</guid>
<comments>https://alwayspr.tistory.com/38#entry38comment</comments>
<pubDate>Sun, 09 Sep 2018 20:57:46 +0900</pubDate>
</item>
<item>
<title>Spring Boot + ELK + Redis</title>
<link>https://alwayspr.tistory.com/36</link>
<description>&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;분산서비스는 여러개의 서비스가 존재한다. 그래서 서비스 수마다 로그가 분산되어서 각 서버에 저장이 된다.&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;이는 운영시 특정 로그를 볼 때 불편하기 마련이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그래서 우리는 분산된 로그를 ELK의 도움이 받아 로그를 모아보려한다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif; text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:741px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/991F9E3F5B5065510F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Spring ELK Redis .jpg&quot; height=&quot;1018&quot; width=&quot;741&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p data-line=&quot;10&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;service&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Service&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;먼저 3개의 서버가 존재하고, 각 서버에 Spring Applcation, logstash(shipper)가 설치되어 있다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;각 Spring Application은 log파일을 생성하고, logstash는 생성된 log파일을 읽은 뒤 특정한 곳으로 보내는 역할을 한다. 여기서는 Redis로 보내게 된다.&lt;/p&gt;&lt;p data-line=&quot;15&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;queue&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Queue&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;지금처럼 서비스의 개수가 적거나 Log수가 적으면 굳이 중간에 Redis같은 Queue 역할을 둘 필요 없이 ElasticSearch로 전송하면 되지만, 항상&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;만약&lt;/strong&gt;을 대비해야되는 개발자 입장으로서 Queue까지 구현을 해보자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;만약 Queue가 없고, 수십개의 서비스가 돌고 있는 채로 직접 ElasticSearch에 모든 서비스의 log 데이터를 주면 어떤일이 일어날까?&lt;br /&gt;그러면 ElasticSearch에 엄청난 부하가 걸려 ElasticSearch가 마비가 될 것이다. 이를 우리는 Queue를 통하여 순차적으로 처리함으로써 부하를 줄일 수 있다.&lt;br /&gt;물론 Queue도 부하가 많으면 문제가 생길 수 있지만, Redis는 이를 간단하게 Scale out을 통하여 해결 할 수 있다.&lt;/p&gt;&lt;p data-line=&quot;22&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;elk&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;ELK&lt;/h2&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;각 서버에 존재하는 logstash(shipper) 말고 Redis와 ElasticSearch 사이의 logstash(indexer)가 존재하는데 이 녀석의 역할은 무엇일까?&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;처음 logstash(shipper)가 Redis로 log 데이터를 삽입하게 되면, Redis는 이를 잘 보관하고 있는다. 그런데 이를 Redis가 보관만 하고 있으면 의미가 없다. 이 보관된 데이터를 ElasticSearch에 저장해야지 우리는 ElasticSearch를 활용할 수 있다. Redis에서 ElasticSearch로 데이터를 이동시켜주는 녀석이 두번째 logstash(indexer)이다.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;그리고 Kibana는 ElasticSearch에 있는 데이터를 시각적으로 확인할 수 있게 해준다.&lt;/p&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;strong style=&quot;color: rgb(0, 0, 0);&quot;&gt;그럼 이제 구축을 해보자!&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;(방화벽이나 Permission 같이 사소한 것으로 실수를 많이할 수 있으니 주의하자)&lt;/em&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;3개의 서버가 필요하다.&lt;br /&gt;위 사진에서는 3개의 서비스가 존재했지만, 우린 2개의 Service와 편의를 위해 나머지 한 서버에 Redis와 ELK를 다 구축하겠다. 서버환경은 Ubuntu 18.04이다.&lt;/p&gt;&lt;p data-line=&quot;39&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;redis-elk-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Redis + ELK 환경 구축&lt;/h2&gt;&lt;p data-line=&quot;41&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;java-%EC%84%A4%EC%B9%98&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Java 설치&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;ELK는 Java에 의존적이다. 미리 설치를 해놓자.&lt;/p&gt;&lt;p data-line=&quot;43&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; update
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; software-properties-common
add-apt-repository -y ppa:webupd8team/java
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; -y &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; oracle-java8-installer
&lt;/pre&gt;&lt;p data-line=&quot;50&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;redis-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%8B%A4%ED%96%89&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Redis 설치 및 실행&lt;/h3&gt;&lt;p data-line=&quot;52&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; redis
redis-server --daemonize &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;57&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;redis-%EC%84%A4%EC%B9%98-%ED%99%95%EC%9D%B8&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Redis 설치 확인 및 설정&lt;/h3&gt;&lt;div&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;redis-cli
127.0.0.1:6379&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ping&lt;/span&gt;  //설치 확인
PONG
127.0.0.1:6379&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; config &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;set&lt;/span&gt; protected-mode no  // 외부IP에서 접속해야될 때
OK&lt;/pre&gt;&lt;/div&gt;&lt;p data-line=&quot;64&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;elasticsearch-%EC%84%A4%EC%B9%98&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;ElasticSearch 설치&lt;/h3&gt;&lt;p data-line=&quot;65&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;wget&lt;/span&gt; -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;|&lt;/span&gt; apt-key add -
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;tee&lt;/span&gt; -a /etc/apt/sources.list.d/elastic-6.x.list
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; update
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; elasticsearch
&lt;/pre&gt;&lt;p data-line=&quot;72&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;kibana-%EC%84%A4%EC%B9%98&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Kibana 설치&lt;/h3&gt;&lt;p data-line=&quot;73&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; kibana
&lt;/pre&gt;&lt;p data-line=&quot;77&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;kibana-%EC%85%8B%ED%8C%85&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Kibana 셋팅&lt;/h3&gt;&lt;p data-line=&quot;78&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; vim
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;vi&lt;/span&gt; /etc/kibana/kibana.yml
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;server.host: &quot;0.0.0.0&quot;&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;추가 (모든 Host에게 개방)&lt;/p&gt;&lt;p data-line=&quot;84&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;logstashindexer-%EC%84%A4%EC%B9%98&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Logstash(Indexer) 설치&lt;/h3&gt;&lt;p data-line=&quot;85&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; logstash
&lt;/pre&gt;&lt;p data-line=&quot;89&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;logstashindexer-%EC%85%8B%ED%8C%85&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Logstash(Indexer) 셋팅&lt;/h3&gt;&lt;p data-line=&quot;90&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;vi&lt;/span&gt; /etc/logstash/conf.d/elkr.conf
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;위의 명령어로 새로운 conf 파일을 만든 후 아래 코드를 붙여넣는다.&lt;/p&gt;&lt;p data-line=&quot;95&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;input &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        redis &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                host &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;
                port &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; 6379
                codec &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;json&quot;&lt;/span&gt;
                data_type &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;list&quot;&lt;/span&gt;
                key &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;logstash&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
output &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        elasticsearch &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;110&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;elk-%EB%AA%A8%EB%91%90-%EC%8B%A4%ED%96%89&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;ELK 모두 실행&lt;/h3&gt;&lt;p data-line=&quot;111&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;service&lt;/span&gt; elasticsearch start
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;service&lt;/span&gt; logstash start
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;service&lt;/span&gt; kibana start
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;키바나의 경우 IP:5601 을 통하여 확인할 수 있다.&lt;br /&gt;ex)localhost:5601&lt;/p&gt;&lt;p data-line=&quot;120&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h2 class=&quot;mume-header&quot; id=&quot;service-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.75em; padding-bottom: 0.3em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Service 환경 구축&lt;/h2&gt;&lt;p data-line=&quot;122&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;spring-application-%EC%83%9D%EC%84%B1&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Spring Application 생성&lt;/h3&gt;&lt;ol style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;&lt;a href=&quot;http://start.spring.io/&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;Initializer&lt;/a&gt;를 통하여 Spring Boot 프로젝트를 생성한다.&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;pom.xml에 아래의 디펜던시를 추가한다.&lt;/li&gt;&lt;/ol&gt;&lt;p data-line=&quot;125&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;xml&quot; class=&quot;language-xml&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;net.logstash.logback&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logstash-logback-encoder&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;4.11&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;dependency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;ol start=&quot;3&quot; style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;src/main/resources 아래에 logback-spring.xml 파일을 만든다. 그리고 아래의 코드를 붙여넣는다.&lt;/li&gt;&lt;/ol&gt;&lt;p data-line=&quot;133&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;xml&quot; class=&quot;language-xml&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token prolog&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;conversionRule&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;conversionWord&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;clr&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;converterClass&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;org.springframework.boot.logging.logback.ColorConverter&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;conversionRule&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;conversionWord&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;wex&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;converterClass&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;conversionRule&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;conversionWord&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;wEx&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;converterClass&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;FILE_LOG_PATTERN&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%logger{36}:%L] ### %msg%n&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;property&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;CONSOLE_LOG_PATTERN&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;ch.qos.logback.core.ConsoleAppender&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;Pattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;${CONSOLE_LOG_PATTERN}&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;Pattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;appender&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;STASH&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;ch.qos.logback.core.rolling.RollingFileAppender&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logback/spring.log&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;fileNamePattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;logback/spring.%d{yyyy-MM-dd}.log&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;fileNamePattern&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;maxHistory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;7&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;maxHistory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;rollingPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; 
            &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;encoder&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;net.logstash.logback.encoder.LogstashEncoder&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;appender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;


    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;root&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;INFO&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;&lt;/span&gt;appender-ref&lt;/span&gt; &lt;span class=&quot;token attr-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token attr-value&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;STASH&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;root&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token tag&quot; style=&quot;color: rgb(99, 163, 92);&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;lt;/&lt;/span&gt;configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;ul style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;첫번째 appender는 console에 나타내기 위함이다.&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;두번째 appender는 encoder를 통하여 데이터 형식을 JSON으로 변환하고 파일을 저장한다.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;ol start=&quot;4&quot; style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;Application에서 log를 작성한다.&lt;br /&gt;3초에 한번씩&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;Hello World&lt;/code&gt;를 로깅한다.&lt;br /&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;@Slf4j&lt;/code&gt;를 위해서는 lombok의 디펜던시와 설정이 필요하다.&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 9pt;&quot;&gt;각자알아서...&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p data-line=&quot;173&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;java&quot; class=&quot;language-java&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;package&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;adwitt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;logtest&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CommandLineRunner&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SpringApplication&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;import&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;springframework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;boot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;autoconfigure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SpringBootApplication&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;import&lt;/span&gt; lombok&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;extern&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slf4j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Slf4j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token annotation punctuation&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;LogTestApplication&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        SpringApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LogTestApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token annotation punctuation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; strings&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;throws&lt;/span&gt; Exception &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Thread&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot; style=&quot;color: rgb(0, 134, 179);&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;Hello World ::: {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ol start=&quot;5&quot; style=&quot;padding-left: 2em; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;이 Spring Boot를 .jar로 만든다.&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0px;&quot;&gt;새로운 서버에&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;code style=&quot;color: rgb(0, 0, 0); font-family: Menlo, Monaco, Consolas, &amp;quot;Courier New&amp;quot;, monospace; background-color: rgb(240, 240, 240); border-radius: 3px; padding: 0.2em 0px; font-size: 0.85em !important;&quot;&gt;mkdir /spring&lt;/code&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;를 통하여 디렉토리 생성 후 FTP를 이용하여 jar를 안에 넣는다.&lt;/li&gt;&lt;/ol&gt;&lt;p data-line=&quot;206&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;java-%EC%84%A4%EC%B9%98-1&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Java 설치&lt;/h3&gt;&lt;p data-line=&quot;208&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; update
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; software-properties-common
add-apt-repository -y ppa:webupd8team/java
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; -y &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; oracle-java8-installer
&lt;/pre&gt;&lt;p data-line=&quot;215&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;logstash-%EC%84%A4%EC%B9%98&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Logstash 설치&lt;/h3&gt;&lt;p data-line=&quot;217&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;wget&lt;/span&gt; -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;|&lt;/span&gt; apt-key add -
&lt;span class=&quot;token keyword&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;tee&lt;/span&gt; -a /etc/apt/sources.list.d/elastic-6.x.list
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; update
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; logstash
&lt;/pre&gt;&lt;p data-line=&quot;224&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;logstash-%EC%85%8B%ED%8C%85&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Logstash 셋팅&lt;/h3&gt;&lt;p data-line=&quot;225&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;install&lt;/span&gt; vim
&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;vi&lt;/span&gt; /etc/logstash/conf.d/spring.conf
&lt;/pre&gt;&lt;p data-line=&quot;230&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;input &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;/spring/logback/*.log&quot;&lt;/span&gt;
        codec &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;json&quot;&lt;/span&gt;
        &lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;logback&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

output &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    redis &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        host &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;12.65.87.11&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;아까 구축 해놓은 서버의 IP 입력&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        port &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; 6379
        data_type &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;list&quot;&lt;/span&gt;
        key &lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot; style=&quot;color: rgb(167, 29, 93);&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token string&quot; style=&quot;color: rgb(24, 54, 145);&quot;&gt;&quot;logstash&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p data-line=&quot;249&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;service&lt;/span&gt; logstash start
&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;하나의 서비스가 만들어졌다. 똑같이 반복해서 한개 더 만들자.&lt;/p&gt;&lt;p data-line=&quot;256&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3 class=&quot;mume-header&quot; id=&quot;jar-%ED%8C%8C%EC%9D%BC-%EC%8B%A4%ED%96%89&quot; style=&quot;line-height: 1.2; margin-top: 1em; margin-bottom: 16px; font-size: 1.5em; font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;Jar 파일 실행&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;두개의 서버에서 아까 생성해 놓은 jar 파일을 실행시킨 뒤 데이터가 정상적으로 잘 들어가는지 Kibana를 통하여 확인하자.&lt;/p&gt;&lt;pre data-role=&quot;codeBlock&quot; data-info=&quot;shell&quot; class=&quot;language-shell&quot; style=&quot;padding: 0.8em; overflow: auto; line-height: 1.4; border: rgb(214, 214, 214); border-radius: 3px; margin-top: 0px; margin-bottom: 16px; color: rgb(51, 51, 51); background: rgb(245, 245, 245); font-family: Consolas, &amp;quot;Liberation Mono&amp;quot;, Menlo, Courier, monospace; word-break: normal; word-wrap: normal; tab-size: 8; hyphens: none; font-size: 0.85em !important;&quot;&gt;&lt;span class=&quot;token function&quot; style=&quot;color: rgb(121, 93, 163);&quot;&gt;cd&lt;/span&gt; /mkdir
java -jar filename.jar &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename에 파일명을 작성&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;hr style=&quot;height: 4px; margin: 32px 0px; background-color: rgb(214, 214, 214); border: 0px none; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;p data-line=&quot;266&quot; class=&quot;sync-line&quot; style=&quot;margin-right: 0px; margin-left: 0px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;&lt;/p&gt;&lt;h3&gt;여담&lt;/h3&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;logstash(shipper)를 각 서비스에 두지 않는 방법도 있다. 자세한건&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://gyrfalcon.tistory.com/entry/Kafka-Kafka%EB%A1%9C-Log%EB%A5%BC-%EB%B3%B4%EB%82%B4%EB%8A%94-%EB%B0%A9%EB%B2%95%EB%93%A4&quot; style=&quot;color: rgb(0, 136, 204);&quot;&gt;여기&lt;/a&gt;를 참고하자.&lt;/p&gt;&lt;p style=&quot;margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, &amp;quot;Segoe UI&amp;quot;, Arial, freesans, sans-serif;&quot;&gt;최소의 설정만으로 구축을 하였다. 세부적인 설정 옵션은 해당 프로덕트 레퍼런스를 참고하도록 하자.&lt;/p&gt;&lt;h3&gt;참고&lt;/h3&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://www.sauru.so/blog/install-elastic-stack-6.0/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://www.sauru.so/blog/install-elastic-stack-6.0/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.baeldung.com/java-application-logs-to-elastic-stack&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://www.baeldung.com/java-application-logs-to-elastic-stack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/44388518/what-is-the-role-of-logstash-shipper-and-logstash-indexer-in-elk-stack&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://stackoverflow.com/questions/44388518/what-is-the-role-of-logstash-shipper-and-logstash-indexer-in-elk-stack&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Programming</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/36</guid>
<comments>https://alwayspr.tistory.com/36#entry36comment</comments>
<pubDate>Thu, 19 Jul 2018 19:25:36 +0900</pubDate>
</item>
<item>
<title>AOP에 걸린 Method의 Parameter 이름 가져오기</title>
<link>https://alwayspr.tistory.com/34</link>
<description>&lt;p&gt;먼저, AOP가 뭔지에 대해 알아보자.&lt;/p&gt;&lt;p&gt;Aspect-Oriented Programming 이란 프로그램 구조에 대해 또 다른 사고방식을 제공함으로써 Object-Oriented Programming을 보완한다. OOP 모듈성의 핵심 단위는 클래스인 반면, AOP는 모듈화 단위가 관점(Aspect)이다. @Transactional이 대표적인 예이다. 공통의 기능(트랜잭션)을 분리 및&amp;nbsp;모듈화하여 여러 코드(insertUser, selectMoney)에 쉽게 적용할 수 있게 해준다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;특정 계정의 ID와 token을 통해 유효한지 확인하는 코드가 프로젝트 전반에 산재해 있다고 가정을 해보자. 그리고 이를 비즈니스 코드와는 크게 관계없는&amp;nbsp;하나의 공통된 관점으로 판단을 하고, AOP를 적용시켜보자. 자세한 코드는&amp;nbsp;&lt;a href=&quot;https://github.com/viviennes7/blog-aop-parameter-name&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;github&lt;/a&gt;를&amp;nbsp;참고하자.&lt;/p&gt;&lt;p&gt;(제목에 대한 답만 알고 싶으면 '3. AOP에서 메소드의 파라미터 이름을 알아와서 매핑 시킬 순 없을까?'만 보면 된다.)&lt;/p&gt;&lt;h2&gt;1. 일단 동작하는 AOP 만들기&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;RUNTIME&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Target&lt;/span&gt;(ElementType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;METHOD&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;@&lt;span style=&quot;color:#cc7832;&quot;&gt;interface &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;AccountValidator &lt;/span&gt;{&lt;br /&gt;}&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Aspect&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Component&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ValidatorAspect {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;@annotation(com.ms.blogaopparametername.aop.AccountValidator)&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;accountValidator&lt;/span&gt;() {}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Before&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;accountValidator()&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;validateAccount&lt;/span&gt;() {&lt;br /&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;AOP&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@SpringBootApplication&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;BlogAopParameterNameApplication {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final &lt;/span&gt;BusinessService &lt;span style=&quot;color:#9876aa;&quot;&gt;businessService&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;BlogAopParameterNameApplication&lt;/span&gt;(BusinessService businessService) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;businessService &lt;/span&gt;= businessService&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public static void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;main&lt;/span&gt;(String[] args) {&lt;br /&gt;        SpringApplication.&lt;span style=&quot;font-style:italic;&quot;&gt;run&lt;/span&gt;(BlogAopParameterNameApplication.&lt;span style=&quot;color:#cc7832;&quot;&gt;class, &lt;/span&gt;args)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Bean&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;CommandLineRunner &lt;span style=&quot;color:#ffc66d;&quot;&gt;commandLineRunner&lt;/span&gt;() {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return &lt;/span&gt;(run) -&amp;gt; &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;businessService&lt;/span&gt;.logic()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Service&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;BusinessService {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@AccountValidator&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;logic&lt;/span&gt;() {&lt;br /&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;@AccountValidator를 작성한 메소드에 AOP를 걸었고, 순차적으로 'AOP', 'Hello World'가 출력되게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:555px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99E738365B28E9D129&quot; filemime=&quot;image/jpeg&quot; filename=&quot;aop표시.png&quot; height=&quot;209&quot; width=&quot;555&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;IDE를 통해서도 AOP가 제대로 걸려있음을 확인할 수 있다.&lt;/p&gt;&lt;h2&gt;2. 계정의 유효성을 판단하려면 ID와 Token 값을 알아야 한다. logic()에 파라미터로 추가해 보자.&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Service&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;BusinessService {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@AccountValidator&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;logic&lt;/span&gt;(Long id&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;String token) {&lt;br /&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;유효성을 AOP를 통해 판단하려면, Aspect에서 id와 token 값을 가져와야한다. 간단하게 Pointcut의 표현식 중 하나인 args를 사용해보자.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Aspect&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Component&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ValidatorAspect {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;@annotation(com.ms.blogaopparametername.aop.AccountValidator)&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;accountValidator&lt;/span&gt;() {}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Before&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;accountValidator() &amp;amp;&amp;amp; args(id,token,..)&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;validateAccount&lt;/span&gt;(Long id&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;String token) {&lt;br /&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(id + &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot; : &quot; &lt;/span&gt;+ token)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;다음처럼 파라미터의 값을&amp;nbsp;정상적으로 출력한다. '1 : token'&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;AOP는 로직들의 공통된 관점이라 했다. 이 말은 다른 메소드들에서도 잘 동작해야 한다는 말인데... 다음 코드를 보자.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:776px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C97F435B28EE642B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;logic2.png&quot; height=&quot;433&quot; width=&quot;776&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;logic2()에서는 사용자의 이름이 앞에 추가되었다. IDE를 통해 보니 AOP가 걸려있지 않다.&lt;/p&gt;&lt;p&gt;또 logic3()에서는 첫 번째 파라미터가 businessId이지만, AOP는 걸려있다.&lt;/p&gt;&lt;p&gt;그렇다. args는 메소드 파라미터의 이름에 따라 정해지는 것이 아니라, 순서와 Type만을 통해 판단한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;공통의 관점은 무슨 메소드 만들 때마다 Aspect를 만들어줘야 될 판이다. args는 지워 버리자.&lt;/p&gt;&lt;h2&gt;3. AOP에서 메소드의 파라미터 이름을 알아와서 매핑 시킬 순 없을까?&lt;/h2&gt;&lt;p&gt;JoinPoint를 활용해보자.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Aspect&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Component&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ValidatorAspect {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;@annotation(com.ms.blogaopparametername.aop.AccountValidator)&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;accountValidator&lt;/span&gt;() {}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Before&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;accountValidator()&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;validateAccount&lt;/span&gt;(JoinPoint joinPoint) {&lt;br /&gt;        Long id = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;String token = &lt;span style=&quot;color:#cc7832;&quot;&gt;null;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;String parameterName&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Object[] parameterValues = joinPoint.getArgs()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;MethodSignature signature = (MethodSignature) joinPoint.getSignature()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Method method = signature.getMethod()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        for &lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;i = &lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;; &lt;/span&gt;i &amp;lt; method.getParameters().&lt;span style=&quot;color:#9876aa;&quot;&gt;length&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;; &lt;/span&gt;i++) {&lt;br /&gt;            parameterName = method.getParameters()[i].getName()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            if &lt;/span&gt;(parameterName.equals(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;id&quot;&lt;/span&gt;))&lt;br /&gt;                id = (Long) parameterValues[i]&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;            if &lt;/span&gt;(parameterName.equals(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;token&quot;&lt;/span&gt;))&lt;br /&gt;                token = (String) parameterValues[i]&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;        System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(id + &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot; : &quot; &lt;/span&gt;+ token)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;JoinPoint를 이용해서 call된 Method 객체를 얻는다. 그리고 이 객체를 통해서 파라미터의 name과 value를 얻는다.&lt;/p&gt;&lt;p&gt;뭔가 될 거 같아서 기분이 좋다.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그러나 출력창에는 'null : null'이 반환된다. 다시 기분이 안 좋아졌다.&lt;/p&gt;&lt;p&gt;디버깅을 해보니 method.getParameters()[i].getName()을 통해 얻은 파라미터 명은 arg0, arg1, arg2이다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;java.lang.reflect.Parameter 객체는 자바 8에서 추가되었고, 메소드 파라미터의 정보를 가져올 수 있는 녀석이다. 그러나 이러한 정보를 가져오기 위해서는 컴파일(javac) 시점에 VM option에 -parameters를 추가해주어야 한다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;다음처럼 말이다. ' &lt;b&gt;javac -parameters &lt;/b&gt;' Maven , Gradle, IDE에도 옵션을 주고 싶다면 &lt;a href=&quot;https://www.concretepage.com/java/jdk-8/java-8-reflection-access-to-parameter-names-of-method-and-constructor-with-maven-gradle-and-eclipse-using-parameters-compiler-argument&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;여기&lt;/a&gt;를 참고하자.&lt;/p&gt;&lt;p&gt;해당 옵션을 적용하고,&amp;nbsp;Project Rebuild 후 실행시켜보자.&lt;/p&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;p&gt;'1 : token '이 정상적으로 출력된다.&lt;/p&gt;&lt;h2&gt;4. Id와 token 값을 가지고 있는 객체가 파라미터라면?&lt;/h2&gt;&lt;p&gt;Stream을 사용해서 좀 더 우아하게 만들어보자.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Aspect&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Component&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;ValidatorAspect {&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Pointcut&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;@annotation(com.ms.blogaopparametername.aop.AccountValidator)&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;accountValidator&lt;/span&gt;() {}&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Before&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;accountValidator()&quot;&lt;/span&gt;)&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;validateAccount&lt;/span&gt;(JoinPoint joinPoint) {&lt;br /&gt;        User user = Arrays.&lt;span style=&quot;font-style:italic;&quot;&gt;stream&lt;/span&gt;(joinPoint.getArgs())&lt;br /&gt;                .filter(User.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;::isInstance)&lt;br /&gt;                .map(User.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;::cast)&lt;br /&gt;                .findFirst()&lt;br /&gt;                .orElseThrow(() -&amp;gt; &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;IllegalArgumentException(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;User를 찾을 수 없습니다.&quot;&lt;/span&gt;))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(user.getId() + &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot; : &quot; &lt;/span&gt;+ user.getToken())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;물론 이 방식도 User란 객체가 두 개 이상이 되면 문제가 된다. 그럼 다시 위의 Parameter 명을 통해 해결해야 될 뜻하다.&lt;/p&gt;&lt;h2&gt;결론&lt;/h2&gt;&lt;p&gt;사실, AOP보다는 Reflection에 관한 주제이지만, 필자와&amp;nbsp;비슷한 고민(?)을 하는 사람이 있을까 싶어서 해당 제목으로 올리게 되었다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;파라미터 명을 통해 가져오는 것보다 더 좋은 방법이 있을 것 같다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;AOP를 이렇게 쓰는게 옳은 방법일까? 사실, 파라미터 명으로 가져오게 되면 파라미터 명에 강하게 의존하게 된다. 나는 계정 ID의 파라미터 명을 id로 했지만 또 다른 누군가는 userId로 할지도 모르니 말이다.&lt;/p&gt;&lt;p&gt;추후 이에 대한 물음에 답이 떠오르면 미래의 내가(?) 마저 작성할 것 같다&lt;/p&gt;</description>
<category>Spring</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/34</guid>
<comments>https://alwayspr.tistory.com/34#entry34comment</comments>
<pubDate>Tue, 19 Jun 2018 21:01:26 +0900</pubDate>
</item>
<item>
<title>Spring Boot 1으로 Todo List를 만들어 보자</title>
<link>https://alwayspr.tistory.com/33</link>
<description>&lt;p&gt;이번 게시글에서는 Todo List 만들기에 앞서 간단하게 세팅과 필수적인 기능들을 살펴보도록 하자. 대상은 Spring Project는 해봤으나 Boot는 접하지 못한 분들이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Spring의 개념적인 부분보다는 동작하는 기능에 무게중심을 둘 예정이다.&lt;/p&gt;&lt;p&gt;개념에 좀 더 관심이 있다면, 토비의 스프링이나 공식 문서를 확인하도록 하자. (&amp;nbsp;&lt;a href=&quot;https://spring.io/projects/spring-framework&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Spring Project&lt;/a&gt;, &lt;a href=&quot;https://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Spring Boot&lt;/a&gt; )&lt;/p&gt;&lt;p&gt;개발 환경은 Mac OS와 Intellij로 진행이 되지만 Window나 이클립스를 쓰더라도 충분히 따라올 수 있을 것으로 보인다. 코드는 &lt;a href=&quot;https://github.com/viviennes7/blog-springboot1-todolist&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github&lt;/a&gt;에 있으니&amp;nbsp;같이 보면서 하는 것이 도움이 될 것 같다. (본문코드와 조금 다를 수도 있다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이&amp;nbsp;포스팅은 크게 Project 생성, API구현, Test Code 작성 3가지로 이루어진다.&lt;/p&gt;&lt;h1&gt;Project&amp;nbsp;생성&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://start.spring.io/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;http://start.spring.io/&lt;/a&gt;에 접속을 하자.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9983C3445B124FDB29&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 9.58.55 AM.png&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;Spring Boot의 버전은 스냅샷이 아닌 1.xx을 선택하도록 하자.(최신 버전 밖에 안 나오기는 하지만) 현재는 1.5.13이 최신 버전이다.&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;그리고 Group과 Artifact를 센스 있게 작성한다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;제일 중요한&amp;nbsp;Dependencies를 설정한다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;웹 서비스에 필요한 Web, 객체의 패러다임으로&amp;nbsp;DB를 다룰 JPA, getter/setter 등을 편하게 생성해주는 Lombok, 가볍게 쓰기 좋은 인 메모리 DB H2 정도면 충분할 것 같다.&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;Generate Project를 클릭하게 되면 zip 파일이 다운로드 된다. 압축을 풀자.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995FB8445B124FDC2C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 9.59.23 AM.png&quot; height=&quot;548&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;압축을 풀었으면,&amp;nbsp;Intellij를 켜서 Import Project를 클릭 후 아래처럼 pom.xml을 Open 하도록 한다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B6AA445B124FDD24&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 9.59.35 AM.png&quot; height=&quot;548&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/998B53445B124FDE28&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 10.00.05 AM.png&quot; height=&quot;826&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;필요에 따라 설정을 더 해야 되겠지만, 잘 모르겠으면&amp;nbsp;Import Maven Projects automatically만 추가적으로 체크해주도록 한다.&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이는 디펜던시가 추가/삭제될 때마다 자동적으로 Import 시켜주는 행동을 한다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99CC74445B124FDF23&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 10.01.59 AM.png&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;그럼 실행 가능한 Application이 만들어진다. main() 메소드를 실행시켜서 Application이 잘 뜨는지 각자 확인해 보도록 하자.&lt;/p&gt;&lt;h1&gt;API 구현&lt;/h1&gt;&lt;p&gt;Todo List의 Post를 생성하는 로직을 구현하면서 하나하나씩 알아가 보자.&lt;/p&gt;&lt;p&gt;먼저, 숲을 한번 보자. 필자는 다음처럼 프로젝트를 구성하였다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99BE0E4B5B12570040&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-06-02 at 5.35.06 PM.png&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;게시글을 관한 기능을 post라는 패키지안에 역할 별로 나눠서 Class를 만들었다.&lt;/p&gt;&lt;p&gt;Repository가 생소하면 이를&amp;nbsp;DAO라고 생각해도 무방하다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Controller, Service, Dao가 생소하다면 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%AA%A8%EB%8D%B8-%EB%B7%B0-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;MVC 패턴&lt;/a&gt;에 대한 글을 잠깐 읽고 오도록 하자.&lt;/p&gt;&lt;h2&gt;Controller&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RestController&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/posts&quot;&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;PostController {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final &lt;/span&gt;PostService &lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;PostController&lt;/span&gt;(PostService postService) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postService &lt;/span&gt;= postService&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@PostMapping&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;Post &lt;span style=&quot;color:#ffc66d;&quot;&gt;savePost&lt;/span&gt;(&lt;span style=&quot;color:#bbb529;&quot;&gt;@RequestBody &lt;/span&gt;Post post) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;return this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;.save(post)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;public PostController(...) 생성자 부분을 먼저 보자.&lt;/p&gt;&lt;p&gt;Spring은 몇 가지의 DI를 제공한다.&lt;/p&gt;&lt;p&gt;첫 번째는 위와 같은 생성자를 통한 DI (@Autowired 같은 Inject&amp;nbsp;어노테이션을 작성하지 않아도 된다.)&lt;/p&gt;&lt;p&gt;두 번째는 Setter를 통한&amp;nbsp;DI&lt;/p&gt;&lt;p&gt;세 번째는 Field에 직접 하는&amp;nbsp;DI&lt;/p&gt;&lt;p&gt;생성자 DI는 필수적인 Dependency를 주입할 때 쓰인다.&lt;/p&gt;&lt;p&gt;Setter DI는 부수적인 Dependency를 주입할 때&amp;nbsp;쓰인다.&lt;/p&gt;&lt;p&gt;Field DI는 되도록 사용하지 말자. 이는 Spring에 강하게 종속된다. 특히 Test할 때 자주 문제가 되는데, 1 + 1을 하기 위해서도 Spring을 띄워야 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 프로젝트는 API로 만들어질 예정이다. 화면은 JSP, Thymeleaf(Server Side Rendering)으로 만들어질 것이 아니라,&amp;nbsp;추후에 React,&amp;nbsp;Vue (Client Side Rendering)로 만들어질 예정이기 때문이다. &lt;span style=&quot;font-size: 10pt;&quot;&gt;(언젠가는...)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;그래서 @RestController를 클래스 위에 작성하였다. Server Side Rendering을 사용할 것이면 @Controller를 이용하면 된다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Target&lt;/span&gt;({ElementType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;TYPE&lt;/span&gt;})&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;RUNTIME&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Documented&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Component&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;@&lt;span style=&quot;color:#cc7832;&quot;&gt;interface &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;Controller &lt;/span&gt;{}&lt;/pre&gt;&lt;p&gt;위의 두 어노테이션은 @Component를 포함(?) 하고 있다. @Component는 해당 클래스를 스프링 빈이라고 표시하는 역할을 한다.&lt;/p&gt;&lt;p&gt;스프링이 로드될 때&amp;nbsp;Component Scan을 하면서&amp;nbsp;@Component와 @Bean으로 표시된 클래스를&amp;nbsp;스프링 빈으로 등록을 한다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;해당 클래스에 들어오기 위해서는 /posts라는 전역의 Path를 @RequestMapping을 통하여 지정하였다.&lt;/p&gt;&lt;p&gt;www.todolist.com/posts처럼 말이다. ( www.todolist.com은 설명하기 위해 임의로 작성한 도메인이다. 로컬에서 돌리려면 localhost:8080/posts를 실행하면 된다. )&lt;/p&gt;&lt;p&gt;물론, 클래스 안에 있는 모든 메소드의 전역 Path이기 때문에 각 메소드는 이 URI를 세분화하는 Path를 정의해주어야 한다.&lt;/p&gt;&lt;p&gt;그래서 savePost()는 @PostMapping을 통하여 세분화를 하였다.&lt;/p&gt;&lt;p&gt;PostMapping는 RequestMapping를 아래처럼 포함하고 있다.&amp;nbsp;단지 HTTP Method가 Post 일 뿐이다.&lt;/p&gt;&lt;p&gt;[POST] www.todolist.com/posts를 호출하면 해당 메소드는 호출되게 된다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Target&lt;/span&gt;(ElementType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;METHOD&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;RUNTIME&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Documented&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&quot;color:#d0d0ff;&quot;&gt;method &lt;/span&gt;= RequestMethod.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;POST&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;@&lt;span style=&quot;color:#cc7832;&quot;&gt;interface &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;PostMapping &lt;/span&gt;{}&lt;/pre&gt;&lt;p&gt;[GET] www.todolist.com/posts/comments를 호출하고 싶을 경우에는 PostController 안에서 아래의 어노테이션을 붙인 메소드를 만들면 된다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/comments&quot;&lt;/span&gt;)&lt;/pre&gt;&lt;p&gt;@RequestBody는 HTTP의 Body를 받게 해준다. JSON 형식의 Body를 보내게 되면 Post 클래스에 자동적으로 매핑이 된다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;Post {&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;Long &lt;span style=&quot;color:#9876aa;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;String &lt;span style=&quot;color:#9876aa;&quot;&gt;content&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    private &lt;/span&gt;Date &lt;span style=&quot;color:#9876aa;&quot;&gt;createDate&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;Post&lt;/span&gt;(Long id&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;String subject&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;String content&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;Date createDate) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;id &lt;/span&gt;= id&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;subject &lt;/span&gt;= subject&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;content &lt;/span&gt;= content&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;createDate &lt;/span&gt;= createDate&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;HTTP를 통해서 savePost() 메소드를 호출은 어떻게 하면 될까?&amp;nbsp;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DD8A3B5B125DDC31&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-06-02 at 6.03.18 PM.png&quot; height=&quot;269&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;HTTP method :&amp;nbsp;&amp;nbsp;POST&lt;/p&gt;&lt;p&gt;URL : localhost:8080/posts&amp;nbsp;&lt;/p&gt;&lt;p&gt;Body : Json 형식&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위처럼 호출하게 되면 savePost()는&amp;nbsp;호출되게 되고 Post 클래스의&amp;nbsp;subject와 content 변수에&amp;nbsp;각각 블로그 작성, 스프링 기본원리라는 값이 들어가게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 아직 로직은 구현을 하지 않았지만, savePost() 메소드의 Return Type이 Post이기 때문에 Post 클래스를&amp;nbsp;Json 으로 변환시킨 값을 반환하게 된다. (이는&amp;nbsp;JacksonMessageConverter라는 녀석이 자동적으로 해줬던걸로 기억한다. 일단은 크게 신경쓰지 말자)&lt;/p&gt;&lt;p&gt;아래는 위의 요청에 대한 응답 값이다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F1523D5B125F1818&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-06-02 at 6.08.53 PM.png&quot; height=&quot;345&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Service&lt;br /&gt;&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Service&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;PostService {&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private final &lt;/span&gt;PostRepository &lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;PostService&lt;/span&gt;(PostRepository postRepository) {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository &lt;/span&gt;= postRepository&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;public &lt;/span&gt;Post &lt;span style=&quot;color:#ffc66d;&quot;&gt;save&lt;/span&gt;(Post post) {&lt;br /&gt;        Post savedPost = &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;.save(post)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;savedPost.initCreateDate()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;String subject = &lt;span style=&quot;font-style:italic;&quot;&gt;format&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;%s. %s&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;savedPost.getId()&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;savedPost.getSubject())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;savedPost.setSubject(subject)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;.save(savedPost)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        return &lt;/span&gt;savedPost&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Service는 설명할 것이 마땅히 없다.&amp;nbsp;&lt;/p&gt;&lt;p&gt;@Service를 통해서 스프링빈이라는 것을 표시를 한다.&lt;/p&gt;&lt;p&gt;그리고 Business 로직들로 이루어져 있다.&lt;/p&gt;&lt;p&gt;위의 코드는 Post의 제목 앞에&amp;nbsp;키값을 추가하는 로직이&amp;nbsp;있다. (예시를 위해 아무렇게나 작성했다.)&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;이후에 @Transactional이라는 녀석이 Service에서 중요한 역할을 하게 될 텐데 후에 살펴보도록 하자.&lt;/p&gt;&lt;h2&gt;Repository&lt;/h2&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;J&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;PA를 사용한다고 하였다. JPA는 자바 진영의 ORM 표준 스펙이다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;그럼 ORM은 뭘까?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;ORM(Object Relational Mapping)이란 RDB 테이블을 객체지향적으로 사용하기 위한 기술이다. RDB 테이블은 객체지향적 특징(상속, 다형성, 레퍼런스, 오브젝트 등)이 없고 자바와 같은 언어로 접근하기 쉽지 않다. 때문에 ORM을 사용해 오브젝트와 RDB 사이에 존재하는 개념과 접근을 객체지향적으로 다루기 위한 기술이다. (&lt;/span&gt;&lt;a href=&quot;http://blog.woniper.net/255&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;더 알아보기&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: &amp;quot;맑은 고딕&amp;quot;, sans-serif; font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;/div&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;PostRepository &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;JpaRepository&amp;lt;Post&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;Long&amp;gt; {&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;어라? 아무 코드도 없다. 게다가 class가 아니라 Interface다. 근데 위에선 분명 postRepository.save()를 이용하지 않았는가?&lt;/p&gt;&lt;p&gt;Spring Data JPA는 JPARepository를 상속받은 interface에 Default로 많은 기능을 제공해준다.&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/995F574B5B12661710&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-06-02 at 6.40.21 PM.png&quot; height=&quot;513&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;위의 기능들이 자동적으로 구현이 되어있고, 추가적으로 메소드명을 통해서도 원하는 DB 작업을 할 수 있다.&amp;nbsp;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public interface &lt;/span&gt;PostRepository &lt;span style=&quot;color:#cc7832;&quot;&gt;extends &lt;/span&gt;JpaRepository&amp;lt;Post&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;Long&amp;gt; {&lt;br /&gt;    List&amp;lt;Post&amp;gt; &lt;span style=&quot;color:#ffc66d;&quot;&gt;findBySubject&lt;/span&gt;(String subject)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;예를 들면 Post 테이블의 subject 값이 변수로 들어오는 subject와 동일한 값만을 반환하는 메소드이다.&lt;/p&gt;&lt;p&gt;SELETE * FROM post WHERE subject=?&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;JPA에 대해서는 분량이 너무 많기 때문에 각자 공부하도록 하자.&lt;/p&gt;&lt;p&gt;김영한님의 &lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=62681446&amp;amp;start=slayer&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;자바 ORM 표준 JPA 프로그래밍&lt;/a&gt;이 유명하다. &lt;span style=&quot;font-size: 10pt;&quot;&gt;(700 페이지가 넘는 건 안 함정&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;/p&gt;&lt;h1&gt;Test Code&lt;/h1&gt;&lt;p&gt;API를 만들었다. Postman을 통해 통합 테스트를 진행하는 것도 훌륭하지만, 유닛 테스트를 통해 작은 단위로 테스트하는 것 또한 의미가 있다. 그리고 테스트 코드를 통해 테스트 자동화까지 하게&amp;nbsp;되면 무궁무진한 장점이 있다.&amp;nbsp;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(물론 귀찮긴 하다&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;Controller&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;p&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RunWith&lt;/span&gt;(SpringRunner.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@WebMvcTest&lt;/span&gt;(PostController.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;PostControllerTest {&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Autowired&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;MockMvc &lt;span style=&quot;color:#9876aa;&quot;&gt;mvc&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@MockBean&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;PostService &lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Test&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;savePost&lt;/span&gt;() &lt;span style=&quot;color:#cc7832;&quot;&gt;throws &lt;/span&gt;Exception {&lt;br /&gt;        &lt;span style=&quot;font-style:italic;&quot;&gt;given&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;.save(&lt;span style=&quot;font-style:italic;&quot;&gt;any&lt;/span&gt;(Post.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)))&lt;br /&gt;                .willReturn(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6897bb;&quot;&gt;1L&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;1. 블로그 작성&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring 기본원리&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;Date()))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;mvc&lt;/span&gt;.perform(&lt;span style=&quot;font-style:italic;&quot;&gt;post&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;/posts&quot;&lt;/span&gt;)&lt;br /&gt;                .contentType(MediaType.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;APPLICATION_JSON&lt;/span&gt;)&lt;br /&gt;                .content(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;{&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;subject&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;블로그 작성&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;content&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt; : &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;Spring 기본원리&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;\&quot;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;}&quot;&lt;/span&gt;))&lt;br /&gt;                .andExpect(&lt;span style=&quot;font-style:italic;&quot;&gt;status&lt;/span&gt;().isCreated())&lt;br /&gt;                .andExpect(&lt;span style=&quot;font-style:italic;&quot;&gt;jsonPath&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;$.id&quot;&lt;/span&gt;).value(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;1&quot;&lt;/span&gt;))&lt;br /&gt;                .andExpect(&lt;span style=&quot;font-style:italic;&quot;&gt;jsonPath&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;$.subject&quot;&lt;/span&gt;).value(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;1. 블로그 작성&quot;&lt;/span&gt;))&lt;br /&gt;                .andExpect(&lt;span style=&quot;font-style:italic;&quot;&gt;jsonPath&lt;/span&gt;(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;$.content&quot;&lt;/span&gt;).value(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring 기본원리&quot;&lt;/span&gt;))&lt;br /&gt;                .andDo(&lt;span style=&quot;font-style:italic;&quot;&gt;print&lt;/span&gt;())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/p&gt;&lt;/pre&gt;&lt;p&gt;Spring Controller 테스트 환경을 위해서 @Runwith(SpringRunner.class)와 @WebMvcTest(PostController.class)를 작성한다.&lt;/p&gt;&lt;p&gt;우리는 Controller만 테스트하면 되지 Service는 실제로 동작을 안 해도 된다.&amp;nbsp;그러나 PostController에서는 PostService의 메소드를 호출하고 있다. 모순이지 않은가? 그래서 이런 것은 Mock 이란 것을 이용한다. 마치 정상적으로 돌아가는 것처럼 하는 것이다. 다시 말해서 Service를 호출했을 때 어떤 값을 반환할지를 그냥 내 맘대로 정하는 것이다.&lt;/p&gt;&lt;p&gt;이것이 given() 메소드이다. postService.save()에 Post.class 형식의 어떤 오브젝트를 파라미터로 해서 넣던 간에&amp;nbsp;new Post(1L, &quot;1. 블로그 작성&quot;, &quot;Spring 기본원리&quot;, new Date()를 반환한다는 것이다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그렇게 가정을 하고 위처럼 URL, content type, body를&amp;nbsp;넣어준 후 응답으로 돌아올 내가 기대하는 값을 작성한다.&lt;/p&gt;&lt;p&gt;응답 값은 Json으로 이루어져 있기 때문에 Jsonpath라는 것을 이용하였다.&lt;/p&gt;&lt;h2&gt;Service&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RunWith&lt;/span&gt;(MockitoJUnitRunner.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;PostServiceTest {&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;PostService &lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Mock&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;PostRepository &lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Before&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;setup&lt;/span&gt;() {&lt;br /&gt;        &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postService &lt;/span&gt;= &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;PostService(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Test&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;save&lt;/span&gt;() {&lt;br /&gt;        Date start = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Date()&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;given&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;.save(&lt;span style=&quot;font-style:italic;&quot;&gt;any&lt;/span&gt;(Post.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)))&lt;br /&gt;                .willReturn(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6897bb;&quot;&gt;1L&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;블로그 작성&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring 기본원리 작성&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, null&lt;/span&gt;))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Post savedPost = &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postService&lt;/span&gt;.save(&lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;블로그 작성&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring 기본원리 작성&quot;&lt;/span&gt;))&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(savedPost.getId()).isEqualTo(&lt;span style=&quot;color:#6897bb;&quot;&gt;1L&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(savedPost.getSubject()).isEqualTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;1. 블로그 작성&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(savedPost.getContent()).isEqualTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring 기본원리 작성&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(savedPost.getCreateDate()).isBetween(start&lt;span style=&quot;color:#cc7832;&quot;&gt;, new &lt;/span&gt;Date())&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;/pre&gt;&lt;p&gt;Controller와 Service의 @Runwith 안의 객체는 다르다. Controller는 Spring을 로드해야 되었지만 Service에서는 굳이 스프링을 로드할 필요가 없다. 제목 앞에 숫자 넣는 걸 굳이 스프링을 띄워야겠는가?&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Controller와 마찬가지로 PostRepository도 Mock으로 만들고 assertThat().isEqualTo()를 통해서 내가 기대한 대로 진행되었는지 확인한다.&lt;/p&gt;&lt;p&gt;참고로 asserThat()은&amp;nbsp;org.assertj.core.api.Assertions의 assertThat()을 사용하였다.&lt;/p&gt;&lt;h2&gt;Repository&lt;/h2&gt;&lt;div&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@RunWith&lt;/span&gt;(SpringRunner.&lt;span style=&quot;color:#cc7832;&quot;&gt;class&lt;/span&gt;)&lt;br /&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@DataJpaTest&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public class &lt;/span&gt;PostRepositoryTest {&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color:#bbb529;&quot;&gt;@Autowired&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;TestEntityManager &lt;span style=&quot;color:#9876aa;&quot;&gt;entityManager&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Autowired&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;private &lt;/span&gt;PostRepository &lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;@Test&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;findBySubject&lt;/span&gt;() {&lt;br /&gt;        Post study1 = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;스터디&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Post study2 = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;스터디&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;JPA&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Post study3 = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;스터디&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;DDD&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;Post love = &lt;span style=&quot;color:#cc7832;&quot;&gt;new &lt;/span&gt;Post(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;연애&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;보블리&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;entityManager&lt;/span&gt;.persist(study1)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;entityManager&lt;/span&gt;.persist(study2)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;entityManager&lt;/span&gt;.persist(study3)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;entityManager&lt;/span&gt;.persist(love)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;List&amp;lt;Post&amp;gt; posts = &lt;span style=&quot;color:#cc7832;&quot;&gt;this&lt;/span&gt;.&lt;span style=&quot;color:#9876aa;&quot;&gt;postRepository&lt;/span&gt;.findBySubject(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;스터디&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(posts.size()).isEqualTo(&lt;span style=&quot;color:#6897bb;&quot;&gt;3&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(posts.get(&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;).getSubject()).isEqualTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;스터디&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-style:italic;&quot;&gt;assertThat&lt;/span&gt;(posts.get(&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;).getContent()).isEqualTo(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Spring&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;@RunWith(), @DtaJpaTest 어노테이션을 통해서 Spring Data JPA 테스트 환경을 만들었다.&lt;/div&gt;&lt;div&gt;이후 entityManager와 postRepository를 DI하였고, entityManger를 통해서 Post 테이블에 4개의 값을 insert 하였다. 그리고&amp;nbsp;assertThat()을 통해서 확인을 하였다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;물론 3가지&amp;nbsp;다 Test 하는 것이 번거로울 수 있다. 그러나 최소한 Service만이라도 테스트하는 습관을 가지도록 하자.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;*&lt;a href=&quot;https://github.com/viviennes7/blog-springboot1-todolist&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github&lt;/a&gt;에 몇 가지&amp;nbsp;기능을 더 추가해 놓았고, 로직도&amp;nbsp;현업에서 쓰는 방식으로 재작성을 해놓았다.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;h2&gt;참고&lt;/h2&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://blog.woniper.net/255&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;JPA란 무엇인가?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Spring</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/33</guid>
<comments>https://alwayspr.tistory.com/33#entry33comment</comments>
<pubDate>Sat, 02 Jun 2018 17:35:57 +0900</pubDate>
</item>
<item>
<title>Java의 ScheduledExecutorService를 이용해서 스케줄러를 만들어보자</title>
<link>https://alwayspr.tistory.com/32</link>
<description>&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ScheduledExecutorService는&amp;nbsp;concurrent 패키지에 포함되어 있으며,&amp;nbsp;'일정 시간 후' 또는 '주기적'으로 command(작업)를 실행시켜줄 수 있는 녀석이다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;스프링을 사용했다면 간편하게&amp;nbsp;@Scheduled를 사용했겠지만, 쌩 자바를 쓸 일이 있어서 ScheduledExecutorService를 사용해봤다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;코드 자체가 직관적이기 때문에 거두절미하고 코드를 보자.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.time.Duration&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.time.ZoneId&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.time.ZonedDateTime&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.util.concurrent.Executors&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.util.concurrent.ScheduledExecutorService&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import static &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.time.LocalDateTime.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;now&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;import static &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;java.util.concurrent.TimeUnit.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SECONDS&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public class &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Scheduler {&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public static final &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SEOUL_ZONE &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;Asia/Seoul&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    public static final int &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;ONE_DAY &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    public static final int &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;ONE_DAY_AS_SECOND &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;24 &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;60 &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;* &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;60&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    public static final int &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SINGLE_POOL_SIZE &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private final &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ScheduledExecutorService &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;scheduler&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;Scheduler&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;scheduler &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= Executors.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;newScheduledThreadPool&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SINGLE_POOL_SIZE&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;execute&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(Runnable command&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;hour&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;minute&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;second) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        ZonedDateTime now = ZonedDateTime.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;now&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZoneId.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SEOUL_ZONE&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;))&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZonedDateTime nextExecutionTime = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.getNextExecutionTime(hour&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;minute&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;second&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;now)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;scheduler&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.scheduleAtFixedRate(command&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.getInitialExecutionTime(now&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;nextExecutionTime)&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;ONE_DAY_AS_SECOND&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;SECONDS&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZonedDateTime &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;getNextExecutionTime&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;hour&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;minute&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, int &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;second&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZonedDateTime now) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        ZonedDateTime nextExecutionTime&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;nextExecutionTime = now&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;                        .withHour(hour)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;                        .withMinute(minute)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;                        .withSecond(second)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        if &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.isOverDay(now&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;nextExecutionTime))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;            nextExecutionTime = nextExecutionTime.plusDays(&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;ONE_DAY&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        return &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;nextExecutionTime&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;private boolean &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;isOverDay&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(ZonedDateTime zonedNow&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZonedDateTime nextExecutionTime) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;return &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;zonedNow.compareTo(nextExecutionTime) &amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;private long &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;getInitialExecutionTime&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(ZonedDateTime now&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;ZonedDateTime nextExecutionTime) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        Duration duration = Duration.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;between&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(now&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;nextExecutionTime)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        return &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;duration.getSeconds()&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;ol style=&quot;list-style-type: decimal;&quot;&gt;&lt;li&gt;생성자에서 초기화를 해준다.&lt;/li&gt;&lt;li&gt;현재 시간과 실행 시간을 구한다.&lt;/li&gt;&lt;li&gt;getInitialExecutionTime()을 통해서 두 시간의 차이를 구한다. =&amp;gt; 지금부터 실행 시간까지 남은 시간&lt;/li&gt;&lt;li&gt;scheduleAtFixedRate()에 위에서 얻은 결과를 토대로 호출한다.&lt;/li&gt;&lt;/ol&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;execute(() -&amp;gt; System.&lt;span style=&quot;color:#9876aa;font-style:italic;&quot;&gt;out&lt;/span&gt;.println(&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;7&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;)&lt;span style=&quot;color:#cc7832;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;위와 같이 호출하게되면 7시마다 Hello World를 출력하게 된다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;참고&lt;/p&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20387881/how-to-run-certain-task-every-day-at-a-particular-time-using-scheduledexecutorse&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://stackoverflow.com/questions/20387881/how-to-run-certain-task-every-day-at-a-particular-time-using-scheduledexecutorse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</description>
<category>Java</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/32</guid>
<comments>https://alwayspr.tistory.com/32#entry32comment</comments>
<pubDate>Wed, 23 May 2018 22:52:05 +0900</pubDate>
</item>
<item>
<title>[Jackson] JsonInclude 속성에 대해 알아보자.</title>
<link>https://alwayspr.tistory.com/31</link>
<description>&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Json 형식으로 데이터를 주고받을 때 Jackson의 ObjectMapper를 자주 이용한다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;그런데 기본값으로 Serialize 하게 되면 null, &quot;&quot; 같은&amp;nbsp;(상황에 따라) 필요 없는 값 또한 모두 변환시켜준다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;이를 아래의 메소드를 통하여 Serialize할 때 원하는 값만을&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&amp;nbsp;포함시킬&amp;nbsp;수 있다.&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion()&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;아래 주석처럼 어노테이션으로도&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&amp;nbsp;이용할 수 있다. 객체마다&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Include 방식이 다르면 어노테이션을 활용하자.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;그럼, 다양한 데이터를 가진 객체로 테스트를 해보자.&amp;nbsp;jackson-databind 2.9.5를 기준으로 테스트가 진행되었다.&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Getter&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#808080;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;//@JsonInclude(JsonInclude.Include.ALWAYS)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public static class &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;string&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyString&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Object &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;nullValue&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;number&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private int &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;zero&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;List&amp;lt;String&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;list&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;List&amp;lt;String&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyList&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Date &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;date&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Date &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;zeroDate&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Optional&amp;lt;String&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;optional&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    private &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Optional&amp;lt;String&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyOptional&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    public &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;Value&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;string &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyString &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;nullValue &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;null;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;number &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;zero &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;list &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;원우&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyList &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;emptyList&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;date &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Date()&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;zeroDate &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Date(&lt;/span&gt;&lt;span style=&quot;color: rgb(104, 151, 187); font-size: 12pt;&quot;&gt;0L&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;optional &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= Optional.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;of&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: rgb(106, 135, 89); font-size: 12pt;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;        this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;emptyOptional &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;= Optional.&lt;/span&gt;&lt;span style=&quot;font-style: italic; font-size: 12pt;&quot;&gt;empty&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;1.&amp;nbsp;ALWAYS (기본값)&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;always&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;throws &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JsonProcessingException {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion(&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-size: 12pt;&quot;&gt;JsonInclude&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.Include.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;ALWAYS&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String result = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.writeValueAsString(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value())&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;System.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.println(result)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;모든 값을 출력한다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;{&lt;br /&gt;  &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyString&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;nullValue&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;    &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;원우&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;  &lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyList&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1527077763796&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zeroDate&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;true&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyOptional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;false&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;2. NON_NULL&lt;/span&gt;&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;non_null&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;throws &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JsonProcessingException {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion(&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-size: 12pt;&quot;&gt;JsonInclude&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.Include.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;NON_NULL&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String result = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.writeValueAsString(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value())&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;System.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.println(result)&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;null은 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;{&lt;br /&gt;  &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyString&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;    &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;원우&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;  &lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyList&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;  ]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1527077763837&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zeroDate&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;true&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyOptional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;false&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;3.&amp;nbsp;NON_ABSENT&lt;/span&gt;&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;non_absent&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;throws &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JsonProcessingException {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion(&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-size: 12pt;&quot;&gt;JsonInclude&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.Include.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;NON_ABSENT&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String result = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.writeValueAsString(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value())&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;System.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.println(result)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;null은 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;참조 유형 (Java 8 'Optional'또는 {link java.utl.concurrent.atomic.AtomicReference})의 &quot;absent&quot;값; 즉, null이 아닌 값은 제외한다. &lt;/span&gt;&lt;strike&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;(이해가 잘 안 가요...&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;/strike&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;{&lt;br /&gt;  &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyString&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;    &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;원우&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;  &lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyList&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;  ]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1527077763833&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zeroDate&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;true&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyOptional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;false&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;4. NON_EMPTY&lt;/span&gt;&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;non_empty&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;throws &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JsonProcessingException {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion(&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-size: 12pt;&quot;&gt;JsonInclude&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.Include.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;NON_EMPTY&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String result = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.writeValueAsString(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value())&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;System.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.println(result)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;null은 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;absent는 제외한다. ( 3. NON_ABSENT 참고 )&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Collection, Map의 isEmpty()가 true 이면 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Array의 length가 0이면 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String의 length()가 0이면 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;{&lt;br /&gt;  &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zero&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;    &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;원우&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;  &lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1527077763822&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;zeroDate&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;true&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyOptional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;false&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;5. NON_DEFAULT&lt;/span&gt;&lt;/h2&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.2pt;&quot;&gt;&lt;span style=&quot;color:#bbb529;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;@Test&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 198, 109); font-size: 12pt;&quot;&gt;non_default&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;() &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;throws &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;JsonProcessingException {&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.setSerializationInclusion(&lt;/span&gt;&lt;span style=&quot;color: rgb(187, 181, 41); font-size: 12pt;&quot;&gt;JsonInclude&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.Include.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;NON_DEFAULT&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;String result = &lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-size: 12pt;&quot;&gt;objectMapper&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.writeValueAsString(&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;new &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Value())&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(204, 120, 50); font-size: 12pt;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;System.&lt;/span&gt;&lt;span style=&quot;color: rgb(152, 118, 170); font-style: italic; font-size: 12pt;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.println(result)&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;empty는 제외된다. ( 4. NON_EMPTY 참고 )&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;primitive 타입이 디폴트 값이면 제외한다. (int / Integer : 0 , boolean / Boolean : false 등)&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Date의 timestamp가 0L이면 제외한다.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'나눔고딕코딩';font-size:10.8pt;&quot;&gt;{&lt;br /&gt;  &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;number&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;[&lt;br /&gt;    &lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;민수&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;&quot;원우&quot;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#6a8759;&quot;&gt;  &lt;/span&gt;]&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#6897bb;&quot;&gt;1527077763725&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;    &lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;present&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;true&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;font-weight:bold;&quot;&gt;  &lt;/span&gt;}&lt;span style=&quot;color:#cc7832;&quot;&gt;,&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color:#9876aa;&quot;&gt;&quot;emptyOptional&quot;&lt;/span&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;: &lt;/span&gt;{&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;h2&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;6.&amp;nbsp;그 외&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;CUSTOM, USE_DEFAULTS는 &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;잘 모르겠다...&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;사용자에 맞게 Custom 할 때 쓰이는 것 같다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/viviennes7/blog-jsoninclude&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;github&lt;/a&gt;에 저장되어 있다. 필요하면 참고하도록 하자.&lt;/p&gt;</description>
<category>Java</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/31</guid>
<comments>https://alwayspr.tistory.com/31#entry31comment</comments>
<pubDate>Wed, 23 May 2018 21:50:26 +0900</pubDate>
</item>
<item>
<title>Java로 날씨 알림 서비스를 만들어보자 (OOP, Clean Code)</title>
<link>https://alwayspr.tistory.com/29</link>
<description>&lt;h2&gt;개발동기&lt;/h2&gt;&lt;p&gt;&lt;b&gt;비 오는 날만 알림을 받고 싶다.&lt;/b&gt; 세상에 좋은 날씨 애플리케이션은 많다. 그러나 매일 날씨 애플리케이션을 확인하는 것은 번거롭고, 내가 딱 필요한 정보만을 제공해주는 서비스도 &lt;span style=&quot;font-size: 10pt;&quot;&gt;(아마)&lt;/span&gt; 없다. 그래서 날 위한 서비스를 내가 만들기로 했다. 왜? 난 개발자니깐&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;작년에 개발실력을 향상하기 위해 온갖 서적과 영상 등을 봤다. 점차 이러한&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;학습량&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;은 많아졌고, 아는 듯한 느낌은 많이 들었다. 그러나 막상 해보니 겉만 조금 알고 있었고 한계에 직면했다. 다르게 표현하자면&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;실질적으로 해보지 않고 한 행위들은 마치 연애를 책으로 배운듯한 느낌이 들었다. 그래서&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;&amp;nbsp;올해부터는 실질적인 코딩에 좀 더 집중하기로 했다.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;h2&gt;신경쓴 것&lt;/h2&gt;&lt;ul style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;OOP&lt;/li&gt;&lt;li&gt;Clean Code&amp;nbsp;&lt;/li&gt;&lt;li&gt;Test Code&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;span style=&quot;font-size:18pt;&quot;&gt;스케치&lt;/span&gt;&lt;br /&gt;&lt;/h2&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:651px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997852395B02C27732&quot; filemime=&quot;image/jpeg&quot; filename=&quot;weathertalk_스케치.jpg&quot; height=&quot;141&quot; width=&quot;651&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;간단하다.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;스케줄러를 통해서 7시가 되면&lt;/p&gt;&lt;p&gt;날씨 API에&amp;nbsp;&lt;/p&gt;&lt;p&gt;HTTP로 요청해서 데이터를 가져온 후&lt;/p&gt;&lt;p&gt;비가 오면&amp;nbsp;메신저에 알림을 보낸다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;구현체&lt;/b&gt;들로 말하자면&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;ScheduledExecutorService&lt;/a&gt;를 통해서 7시가 되면&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://developers.sktelecom.com/content/sktApi/view/?svcId=10113&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Weather Planet API&lt;/a&gt;에&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://square.github.io/okhttp/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;OkHttp&lt;/a&gt;를 통해 HTTP 요청을 해서 데이터를 가져온 후&lt;/p&gt;&lt;p&gt;비가 오면 &lt;a href=&quot;https://slack.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Slack&lt;/a&gt; 또는 &lt;a href=&quot;https://telegram.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Telegram&lt;/a&gt;에 메시지를 보낸다.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;h2&gt;Core&lt;/h2&gt;&lt;p&gt;4개의 모듈로 구성되어있다. 코드는 &lt;a href=&quot;https://github.com/viviennes7/weather-talk&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;Github&lt;/a&gt;에 올라가 있으니 같이&amp;nbsp;보면 좀 더 좋을 것 같다.&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99F25D4B5B02CBDC2F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;all.png&quot; height=&quot;676&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;위와 같은 구조를 가지고 있다. &lt;span style=&quot;font-size: 10pt;&quot;&gt;(저렇게 봐서는 나도 잘 모르겠다... 참고만 하도록 하자&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;/p&gt;&lt;h3&gt;1. scheduler&lt;/h3&gt;&lt;p&gt;굳이 추상화하지 않았다. &lt;span style=&quot;font-size: 10pt;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;아니 못했다.)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;JDK에 내장되어있는 ScheduledExecutorService로 구현을 했다. 외부로 노출되는 메소드는 아래 메소드 하나이며, 몇시 몇분 몇초에 뭔가를 실행을 할 것이라는 것을 알 수 있다. &lt;a href=&quot;http://alwayspr.tistory.com/32&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;font-size: 10pt;&quot;&gt;(Java의 ScheduledExecutorService를 이용해서 스케줄러를 만들어보자&lt;/a&gt;&lt;a href=&quot;http://alwayspr.tistory.com/32&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;font-size: 10pt;&quot;&gt;)&lt;/a&gt;&lt;/p&gt;&lt;pre style=&quot;background-color:#2b2b2b;color:#a9b7c6;font-family:'Menlo';font-size:9.8pt;&quot;&gt;&lt;span style=&quot;color:#cc7832;&quot;&gt;public void &lt;/span&gt;&lt;span style=&quot;color:#ffc66d;&quot;&gt;execute&lt;/span&gt;(&lt;span style=&quot;color:#cc7832;&quot;&gt;int &lt;/span&gt;hour&lt;span style=&quot;color:#cc7832;&quot;&gt;, int &lt;/span&gt;minute&lt;span style=&quot;color:#cc7832;&quot;&gt;, int &lt;/span&gt;second&lt;span style=&quot;color:#cc7832;&quot;&gt;, &lt;/span&gt;Runnable command)&lt;/pre&gt;&lt;h3&gt;2. weather&lt;/h3&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9977F0495B02CBF629&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Package weather.png&quot; height=&quot;707&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Rain 클래스는 HTTP 모듈을 가지고&amp;nbsp;Weather Planet API에 요청을 해서 날씨 정보를 조회한다.&lt;/p&gt;&lt;p&gt;WeatherParams 클래스는 API 요청 시 필요한 파라미터들의 집합이며, seoul()이라는 정적 팩토리 메소드를 통해 간단하게 seoul의 파라미터를 생성할 수 있다.&lt;/p&gt;&lt;p&gt;결과 값은 enum (RainCode)을 사용하였다.&lt;/p&gt;&lt;h3&gt;3. http&lt;/h3&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99979A495B02CE9918&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Package http.png&quot; height=&quot;679&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;HttpClient를 인터페이스로 두고 OkHttp를 구현한 OkayHttpClient를 만들었다.&lt;/p&gt;&lt;p&gt;이는 한 라이브러리에만 종속되게 사용하기보다는 상황에 따라 유연하게 다른 라이브러리를 사용할 수 있게 해준다.&lt;/p&gt;&lt;p&gt;예를 들면 OkHttp를 사용하기 싫다면 다른 라이브러리를 사용해서 HttpClient를 구현하면 된다.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그러다 보면 자연스럽게 HttpResponse에 응답 데이터까지 넣게 된다. &lt;span style=&quot;font-size: 10pt;&quot;&gt;(누가 &lt;a href=&quot;http://unirest.io/java.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;U&lt;/a&gt;&lt;a href=&quot;http://unirest.io/java.html&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;nirest&lt;/a&gt;나 HttpURLConnection로 구현 한 후 PR을 날려줬으면...&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;그리고 위의 사진에서 m 오른쪽에 자물쇠 표시가 많다. 이는 private 접근자를 의미하며, 주로 public 메소드 내에서 사용하는 의미 있게 나눠진 메소드들이다.&lt;/p&gt;&lt;h3&gt;4.&amp;nbsp; messenger&lt;/h3&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99C56D3B5B02D0C717&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Package messenger.png&quot; height=&quot;272&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;위와 동일한 패턴이다. Messenger를 인터페이스로 두고 SlackMessenger와 TelegramMessenger를 구현했다.&lt;/p&gt;&lt;p&gt;처음에 Slack을 이용하려고 했는데, Slack UI가 개인적으로 불편해 Telegram으로 바꾸게 되었다.&amp;nbsp;애초에 인터페이스를 통해 유연하게 설계를 했기 때문에 변경하는 것은 간단했다.&lt;/p&gt;&lt;h1&gt;결과&lt;/h1&gt;&lt;div&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B090435B02E13C2B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-22 at 12.09.19 AM.png&quot; height=&quot;500&quot; width=&quot;820&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;OOP&lt;/h3&gt;&lt;p&gt;객체의&amp;nbsp;역할과 책임에 따른 설계에 대한 고민을 많이 하고 싶었지만, 그 경계가&amp;nbsp;명확했기 때문에 간단하게&amp;nbsp;정의할&amp;nbsp;수 있었다.&lt;/p&gt;&lt;p&gt;그래서 그것보다는&amp;nbsp;확장 가능하고 유연한 설계에 신경을 썼다.&lt;/p&gt;&lt;h3&gt;Clean Code&lt;/h3&gt;&lt;p&gt;하나의 메소드는 하나의 일을 하도록 (노력) 했다.&lt;/p&gt;&lt;p&gt;불명확한 숫자들은 상수로 만들어 명확하게 했다.&lt;/p&gt;&lt;p&gt;주석을 쓰기보다는 메소드로 나누거나 메소드명을 명확하게 작성했다.&lt;/p&gt;&lt;p&gt;enum을 통해 if else를 줄였다.&lt;/p&gt;&lt;p&gt;에러가 일어나면 무책임하게 throws로 넘기지 않고, 명시적으로 핸들링을 했다.&lt;/p&gt;&lt;h3&gt;Test Code&lt;/h3&gt;&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:580px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DB344B5B02D54D32&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screen Shot 2018-05-21 at 11.18.01 PM.png&quot; height=&quot;171&quot; width=&quot;580&quot;/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;조금 부족하긴 하지만&amp;nbsp; 80% 근접하게 했다. 외부와의 연결(Http 같은)은 Mock 객체를 통해서 유닛 테스트를 작성하였다. 이는 후에 공격적인 리팩토링이 가능하도록 도왔다.&lt;/p&gt;&lt;p&gt;그리고 http 패키지에서&amp;nbsp;OkHttp의 Builder 패턴으로 된 기능들이&amp;nbsp;테스트하기 까다로워서 coverage가 쭉 떨어졌는데, 빨리 방법을 찾아서 고쳐야겠다.&lt;/p&gt;&lt;h3&gt;느낀점&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot;font-size:12pt;&quot;&gt;사실, 정말 간단한 작업이라고 생각했다. 작업하기도 전에 어떻게 해야 될지 설계까지 머리에 그려질 정도였으니... 그러나 막상 머리에 있는 것을 코드로 써 내려가려고 하니 사소한 부분에서 이런저런 문제가 많았다. 게다가 평소에는 Spring Boot로 작업한 탓에 기본적인 디펜던시를 다 잡아줬는데, 쌩 Java로 하려니 디펜던시에서 고생을 했다. 이는 잘 알지도 못하고 사용하고 있던 나의 모습을 반성시키게&amp;nbsp;했다.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:12pt;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:12pt;&quot;&gt;내게&amp;nbsp;필요한 서비스를 직접 만든다는 것이&amp;nbsp;재미있었다. 올해의 첫 토이 프로젝트는 이렇게 잘 마무리가 된 거 같다.&lt;span style=&quot;font-size: 10pt;&quot;&gt;(수정해야 될 부분이 있긴 하지만&lt;/span&gt;&lt;span style=&quot;font-size: 10pt;&quot;&gt;...)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;차근차근 필요한 서비스들을&amp;nbsp;만들다 보면 금방 다방면으로 성장할 수 있을 것 같다.&lt;/p&gt;</description>
<category>Java</category>
<author>AlwaysPr</author>
<guid>https://alwayspr.tistory.com/29</guid>
<comments>https://alwayspr.tistory.com/29#entry29comment</comments>
<pubDate>Mon, 21 May 2018 22:06:18 +0900</pubDate>
</item>
</channel>
</rss>