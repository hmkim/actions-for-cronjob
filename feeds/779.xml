<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="http://rss.egloos.com/style/blog.xsl" type="text/xsl" media="screen"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
	<title>임동문의 횡설수설</title>
	<link>http://dmlim.egloos.com</link>
	<description>잡다한 지식, 험담, 욕설, 퍼담기, 개똥철학 등등..</description>
	<language>ko</language>
	<pubDate>Wed, 16 May 2018 03:06:39 GMT</pubDate>
	<generator>Egloos</generator>
	<image>
		<title>임동문의 횡설수설</title>
		<url>http://pds7.egloos.com/logo/200710/15/87/c0070887.gif</url>
		<link>http://dmlim.egloos.com</link>
		<width>80</width>
		<height>80</height>
		<description>잡다한 지식, 험담, 욕설, 퍼담기, 개똥철학 등등..</description>
	</image>
  	<item>
		<title><![CDATA[ Node.js 에서 유용한 Text 프로토콜 라이브러리 ]]> </title>
		<link>http://dmlim.egloos.com/5907714</link>
		<guid>http://dmlim.egloos.com/5907714</guid>
		<description>
			<![CDATA[ 
  <font size="4" style="" face="Verdana"><b style="">nodejs-text-net</b></font><div><ul><li><font face="Verdana" size="2"><a href="https://github.com/RANKWAVE/nodejs-text-net" target="_blank">https://github.com/RANKWAVE/nodejs-text-net</a></font></li></ul></div><br/><br/>tag : <a href="/tag/nodejs" rel="tag">nodejs</a>,&nbsp;<a href="/tag/text" rel="tag">text</a>,&nbsp;<a href="/tag/protocol" rel="tag">protocol</a>			 ]]> 
		</description>
		<category>프로그래밍</category>
		<category>nodejs</category>
		<category>text</category>
		<category>protocol</category>

		<comments>http://dmlim.egloos.com/5907714#comments</comments>
		<pubDate>Wed, 16 May 2018 03:06:39 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ Java JNI DLL 언로드 ]]> </title>
		<link>http://dmlim.egloos.com/5690484</link>
		<guid>http://dmlim.egloos.com/5690484</guid>
		<description>
			<![CDATA[ 
  <strong><span style="FONT-SIZE: 130%"><span style="FONT-FAMILY: Verdana">출처</strong></span></span></strong></font></strong><ul><li><span style="FONT-FAMILY: Verdana">원문을 작성하신 분은 따로 있고요, 저는 그냥 번역만 했습니다. ㅋ</span></li><li><a href="http://codethesis.com/sites/default/index.php?servlet=4&amp;content=2"><span style="FONT-FAMILY: Verdana">http://codethesis.com/sites/default/index.php?servlet=4&amp;content=2</span></a></li></ul><p><span style="FONT-FAMILY: Verdana; FONT-SIZE: 130%"><strong>문제</strong></span></p><ul><li><span style="FONT-FAMILY: Verdana">System.load()나 System.loadLibrary()로 DLL 모듈을 한번 로드하고 난뒤에, 어떻게 언로드할까?</span></li><li><span style="FONT-FAMILY: Verdana">이론적으로 native 메소드가 구현된 클래스를 로딩한 ClassLoader가 가비지 컬렉트 되지 않으면 DLL을 언로드할 방법이없다.</span></li></ul><p><span style="FONT-FAMILY: Verdana; FONT-SIZE: 130%"><strong>클래스 로더는 언제 가비지 컬렉트 될까?</strong></span></p><ul><li><span style="FONT-FAMILY: Verdana">자신이 로드한 모든 오프젝트가 가비지 컬렉트 되면 자신도 가비지 컬렉트 된다.</span></li><li><span style="FONT-FAMILY: Verdana">물론 클래스 로더에 대한 레퍼런스들이 모두 null 이어야 한다.</span></li></ul><p><span style="FONT-FAMILY: Verdana; FONT-SIZE: 130%"><strong>어떤 클래스 로더를 써야 하나?</strong></span></p><ul><li><span style="FONT-FAMILY: Verdana">디폴트 클래스 로더를 쓰는 건 힘들다. 왜냐면, 이 녀석은 절대 가비지 컬렉트 되지 않기 때문에.</span></li><li><span style="FONT-FAMILY: Verdana">디폴트 대신 커스텀 클래스 로더를 만들어야 한다.</span></li><li><span style="FONT-FAMILY: Verdana">클래스 로더 만드는 방법은 </span><a href="http://codethesis.com/sites/default/index.php?servlet=4&amp;content=1"><span style="FONT-FAMILY: Verdana">http://codethesis.com/sites/default/index.php?servlet=4&amp;content=1</span></a><span style="FONT-FAMILY: Verdana">여기에서 참고하길..</span></li></ul><p><span style="FONT-FAMILY: Verdana"><strong><span style="FONT-SIZE: 130%">커스텀 클래스 로더를 이용하여 DLL을 언로드 하는 예제</span></strong><br></span></p><blockquote><p><span style="FONT-FAMILY: Verdana">다음과 같이 navive 메소드를 가진 클래스 A 를 만든다.<br><br></span></p><p><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">public class A {<br>&nbsp;public A() {}</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;static {<br>&nbsp;&nbsp;System.loadLibrary("mydll");<br>&nbsp;}</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;public native void print();</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;public void finalize() {<br>&nbsp;&nbsp;System.out.println("A garbage collected");<br>&nbsp;}<br>}</span></p><p><br><span style="FONT-FAMILY: Verdana">print() 메소드가 구현된 mydll.dll 을 만들어서 클래스 패스에 넣는다.. <br>JNI example 은 </span><a href="http://java.sun.com/developer/onlineTraining/Programming/JDCBook/jniexamp.html"><span style="FONT-FAMILY: Verdana">http://java.sun.com/developer/onlineTraining/Programming/JDCBook/jniexamp.html</span></a><span style="FONT-FAMILY: Verdana">여기에서 참고하시길<br>그리고, 테스트 클래스를 만든다.</span></p><p><br><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">import java.lang.reflect.Method;</span></p><p><span style="FONT-FAMILY: Verdana">public class Test {<br>&nbsp;public static void main(String[] args) throws Exception {<br>&nbsp;&nbsp;CustomClassLoader cl = new CustomClassLoader();<br>&nbsp;&nbsp;Class ca = cl.findClass("com.codethesis.example.A");<br>&nbsp;&nbsp;Object a = ca.newInstance();<br>&nbsp;&nbsp;Method p = ca.getMethod("print");<br>&nbsp;&nbsp;p.invoke(a);<br>&nbsp;&nbsp;p = null;<br>&nbsp;&nbsp;ca = null;<br>&nbsp;&nbsp;a = null;<br>&nbsp;&nbsp;cl = null;<br>&nbsp;&nbsp;System.gc();<br>&nbsp;}<br>}</span></p><p><br><span style="FONT-FAMILY: Verdana">System.gc() 가 호출된 뒤에 클래스 로더가 가비지 컬랙트 되면, DLL도 언로드 될것이다.<br></span></p></blockquote><p><br><br><span style="FONT-FAMILY: Verdana"><span style="FONT-SIZE: 130%"><strong>왜 사용하기 귀찮게 Java reflection 을 썼나?</strong></span><br></span></p><blockquote><p><span style="FONT-FAMILY: Verdana">"a" 오르젝트를 그냥 "A" 클래스로 캐스팅할 수도 있지 않는가?<br><br></span></p><p><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">import java.lang.reflect.Method;</span></p><p><span style="FONT-FAMILY: Verdana">public class Test {<br>&nbsp;public static void main(String[] args) throws Exception {<br>&nbsp;&nbsp;CustomClassLoader cl = new CustomClassLoader();<br>&nbsp;&nbsp;Class ca = cl.findClass("com.codethesis.example.A");<br>&nbsp;&nbsp;A a = (A)ca.newInstance(); //a ClassCastException is thrown!<br>&nbsp;&nbsp;a.print();<br>&nbsp;&nbsp;ca = null;<br>&nbsp;&nbsp;a = null;<br>&nbsp;&nbsp;cl = null;<br>&nbsp;&nbsp;System.gc();<br>&nbsp;}<br>}</span></p><p><br><span style="FONT-FAMILY: Verdana">실제로는 불가능하다. "A" 클래스는 디폴트 클래스로더에 의해서 생성이 되었고.<br>"a" 오프젝트는 커스텀 클래스로더에 의해서 생성이 되었기 때문에, 서로 다른 클래스가 된다.<br>그리하여, 인터페이스를 이용한 쉬운 대안을 마련했다.</span></p><p><span style="FONT-FAMILY: Verdana">IA 인터페이스를 작성한다.</span></p><p><br><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">public interface IA {<br>&nbsp;public void print();<br>}</span></p><p><br><span style="FONT-FAMILY: Verdana">IA 를 구현한 클래스 A를 다시 만든다.</span></p><p><br><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">public class A implements IA {<br>&nbsp;public A() {}</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;static {<br>&nbsp;&nbsp;System.loadLibrary("mydll");<br>&nbsp;}</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;public native void print();</span></p><p><span style="FONT-FAMILY: Verdana">&nbsp;public void finalize() {<br>&nbsp;&nbsp;System.out.println("A garbage collected");<br>&nbsp;}<br>}</span></p><p><br><span style="FONT-FAMILY: Verdana">그리고 아래와 같이 테스트 코드를 작성 한다.</span></p><p><br><span style="FONT-FAMILY: Verdana">package com.codethesis.example;</span></p><p><span style="FONT-FAMILY: Verdana">public class Test {<br>&nbsp;public static void main(String[] args) throws Exception {<br>&nbsp;&nbsp;CustomClassLoader cl = new CustomClassLoader();<br>&nbsp;&nbsp;Class ca = cl.findClass("com.codethesis.example.A");<br>&nbsp;&nbsp;IA ia = (IA)ca.newInstance();<br>&nbsp;&nbsp;ia.print();<br>&nbsp;&nbsp;ca = null;<br>&nbsp;&nbsp;ia = null;<br>&nbsp;&nbsp;cl = null;<br>&nbsp;&nbsp;System.gc();<br>&nbsp;}<br>}<br></span></p></blockquote><p><span style="FONT-FAMILY: Verdana"><br></span>&nbsp;</p><br/><br/>tag : <a href="/tag/JAVA" rel="tag">JAVA</a>,&nbsp;<a href="/tag/JNI" rel="tag">JNI</a>,&nbsp;<a href="/tag/classloader" rel="tag">classloader</a>,&nbsp;<a href="/tag/DLL" rel="tag">DLL</a>,&nbsp;<a href="/tag/클래스로더" rel="tag">클래스로더</a>			 ]]> 
		</description>
		<category>JAVA</category>
		<category>JNI</category>
		<category>classloader</category>
		<category>DLL</category>
		<category>클래스로더</category>

		<comments>http://dmlim.egloos.com/5690484#comments</comments>
		<pubDate>Thu, 13 Sep 2012 02:41:20 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ [깔대기] 오라클에 리포팅한 자바 런타임 버그가 등록되다. ㅋ ]]> </title>
		<link>http://dmlim.egloos.com/5627758</link>
		<guid>http://dmlim.egloos.com/5627758</guid>
		<description>
			<![CDATA[ 
  <p>자바 소켓에서 Socket 클래스를 이용할 때, SOCKS 프록시를 이용할 수 있습니다.<br>문제는 디폴트 ProxySelector 가 아닌 커스터마이징된 ProxySelector 를 이용할 때, <br>Fail-over 가 되지 않는 버그를 발견해서 리포팅 했더니 아래와 같이 메일이 왔네요. ㅋ<br><br>-------- 아래 메일 ---------<br><br>Subject: Your Report (Bug ID: 7141231) - SOCKS proxy failover using ProxySelector does not work.</p><p>Dear Java Developer, <br>&nbsp;<br>Thank you for reporting this issue.</p><p>We have determined that this report is a new bug and entered the bug into our internal bug tracking system under Bug Id: 7141231.</p><p>You can monitor this bug on the Java Bug Database at <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7141231">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7141231</a>.</p><p>It may take a day or two before your bug shows up in this external database.&nbsp; If you are a member of the Sun Developer Network (SDN), there are two additional options once the bug is visible.</p><p>1. Voting for the bug<br>&nbsp;&nbsp; Click <a href="http://bugs.sun.com/bugdatabase/addVote.do?bug_id=7141231">http://bugs.sun.com/bugdatabase/addVote.do?bug_id=7141231</a>.</p><p>2. Adding the report to your Bug Watch list.<br>&nbsp;&nbsp; You will receive an email notification when this bug is updated.<br>&nbsp;&nbsp; Click <a href="http://bugs.sun.com/bugdatabase/addBugWatch.do?bug_id=7141231">http://bugs.sun.com/bugdatabase/addBugWatch.do?bug_id=7141231</a>.</p><p>The Sun Developer Network (<a href="http://developers.sun.com/">http://developers.sun.com</a>) is a free service that Sun offers.&nbsp; To join, visit <a href="https://softwarereg.sun.com/registration/developer/en_US/new_user">https://softwarereg.sun.com/registration/developer/en_US/new_user</a>.<br>&nbsp;<br>Regards,<br>Java Developer Support<br><br>----------------- 아래는 버그 테스트 코드 -----------------<br><br>package dmlim.net;</p><p>import java.io.ByteArrayOutputStream;<br>import java.io.FileOutputStream;<br>import java.io.IOException;<br>import java.io.InputStream;<br>import java.net.InetSocketAddress;<br>import java.net.Proxy;<br>import java.net.ProxySelector;<br>import java.net.Socket;<br>import java.net.SocketAddress;<br>import java.net.URI;<br>import java.net.URL;<br>import java.util.LinkedList;<br>import java.util.List;</p><p>public class SocksProxyBugTest<br>{<br>&nbsp;static InetSocketAddress DEAD__HTTP__PROXY_ADDR = new InetSocketAddress("10.13.1.218", 8080);<br>&nbsp;static InetSocketAddress ALIVE_HTTP__PROXY_ADDR = new InetSocketAddress("10.13.1.218", 8081);<br>&nbsp;<br>&nbsp;static InetSocketAddress DEAD__SOCKS_PROXY_ADDR = new InetSocketAddress("10.13.1.218", 1080);<br>&nbsp;static InetSocketAddress ALIVE_SOCKS_PROXY_ADDR = new InetSocketAddress("10.13.1.218", 1081);</p><p>&nbsp;static LinkedList&lt;Proxy&gt; HTTP__PROXY_LIST = new LinkedList&lt;Proxy&gt;();<br>&nbsp;static LinkedList&lt;Proxy&gt; SOCKS_PROXY_LIST = new LinkedList&lt;Proxy&gt;();<br>&nbsp;<br>&nbsp;static <br>&nbsp;{<br>&nbsp;&nbsp;HTTP__PROXY_LIST.add(new Proxy(Proxy.Type.HTTP,&nbsp; DEAD__HTTP__PROXY_ADDR));<br>&nbsp;&nbsp;HTTP__PROXY_LIST.add(new Proxy(Proxy.Type.HTTP,&nbsp; ALIVE_HTTP__PROXY_ADDR));<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;SOCKS_PROXY_LIST.add(new Proxy(Proxy.Type.SOCKS, DEAD__SOCKS_PROXY_ADDR));<br>&nbsp;&nbsp;SOCKS_PROXY_LIST.add(new Proxy(Proxy.Type.SOCKS, ALIVE_SOCKS_PROXY_ADDR));<br>&nbsp;&nbsp;<br>&nbsp;}</p><p>&nbsp;static class MyProxySelector extends ProxySelector<br>&nbsp;{<br>&nbsp;&nbsp;@Override<br>&nbsp;&nbsp;public void connectFailed(URI uri, SocketAddress addr, IOException e)<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.err.println(uri + ", " + addr + " " + e);<br>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;@Override<br>&nbsp;&nbsp;public List&lt;Proxy&gt; select(URI uri)<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;if ( uri.getScheme().equals("socket") )<br>&nbsp;&nbsp;&nbsp;&nbsp;return SOCKS_PROXY_LIST;<br>&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;return HTTP__PROXY_LIST;<br>&nbsp;&nbsp;}<br>&nbsp;}<br>&nbsp;<br>&nbsp;public static void testProxyAlive()<br>&nbsp;{<br>&nbsp;&nbsp;InetSocketAddress[] addrs = { <br>&nbsp;&nbsp;&nbsp;DEAD__HTTP__PROXY_ADDR,&nbsp;ALIVE_HTTP__PROXY_ADDR, DEAD__SOCKS_PROXY_ADDR, ALIVE_SOCKS_PROXY_ADDR<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;for ( InetSocketAddress addr : addrs )<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.err.println("Connecting to " + addr + "...");<br>&nbsp;&nbsp;&nbsp;Socket sock = null;<br>&nbsp;&nbsp;&nbsp;try<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;sock = new Socket(Proxy.NO_PROXY);<br>&nbsp;&nbsp;&nbsp;&nbsp;sock.connect(addr);<br>&nbsp;&nbsp;&nbsp;&nbsp;System.err.println("\t proxy is alive.");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;catch (Exception e)<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;System.err.println("\t proxy is dead. (" + e + ")");<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;finally<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if ( sock != null ) try { sock.close(); } catch (Exception e) {}<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;}<br>&nbsp;<br>&nbsp;public static void testHttp() throws IOException<br>&nbsp;{<br>&nbsp;&nbsp;URL url = new URL("<a href="http://www.oracle.com/index.html">http://www.oracle.com/index.html</a>");<br>&nbsp;&nbsp;ByteArrayOutputStream os = new ByteArrayOutputStream();<br>&nbsp;&nbsp;InputStream is = null;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;try<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;is = (InputStream)url.getContent();<br>&nbsp;&nbsp;&nbsp;byte[] buf = new byte[1024];<br>&nbsp;&nbsp;&nbsp;for ( int nRead = 0 ; (nRead = is.read(buf)) != -1 ; )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;os.write(buf, 0, nRead);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;finally<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;if ( is != null ) <br>&nbsp;&nbsp;&nbsp;&nbsp;is.close();<br>&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;FileOutputStream fos = new FileOutputStream("index.http.html");<br>&nbsp;&nbsp;fos.write(os.toByteArray());<br>&nbsp;&nbsp;fos.close();<br>&nbsp;}<br>&nbsp;<br>&nbsp;public static void testSocks() throws IOException<br>&nbsp;{<br>&nbsp;&nbsp;Socket sock = null;<br>&nbsp;&nbsp;InputStream is = null;<br>&nbsp;&nbsp;ByteArrayOutputStream os = new ByteArrayOutputStream();<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;try<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;sock = new Socket();<br>&nbsp;&nbsp;&nbsp;sock.connect(new InetSocketAddress("<a href="http://www.oracle.com/">www.oracle.com</a>", 80));<br>&nbsp;&nbsp;&nbsp;sock.getOutputStream().write("GET /index.html HTTP/1.0\r\nHost: <a href="http://www.oracle.com/r/nUser-Agent">www.oracle.com\r\nUser-Agent</a>: Mozilla/1.0\r\n\r\n".getBytes());<br>&nbsp;&nbsp;&nbsp;sock.getOutputStream().flush();<br>&nbsp;&nbsp;&nbsp;is = sock.getInputStream();<br>&nbsp;&nbsp;&nbsp;byte[] buf = new byte[1024];<br>&nbsp;&nbsp;&nbsp;for ( int nRead = 0 ; (nRead = is.read(buf)) != -1 ; )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;os.write(buf, 0, nRead);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;finally<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;if ( is != null ) <br>&nbsp;&nbsp;&nbsp;&nbsp;is.close();<br>&nbsp;&nbsp;&nbsp;if ( sock != null ) <br>&nbsp;&nbsp;&nbsp;&nbsp;sock.close();<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;FileOutputStream fos = new FileOutputStream("index.socks.html");<br>&nbsp;&nbsp;fos.write(os.toByteArray());<br>&nbsp;&nbsp;fos.close();<br>&nbsp;}<br>&nbsp;<br>&nbsp;public static void main(String[] args)<br>&nbsp;{<br>&nbsp;&nbsp;System.err.println("* Test for Proxy Alive...");</p><p>&nbsp;&nbsp;testProxyAlive();<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;System.err.println();</p><p>&nbsp;&nbsp;ProxySelector.setDefault(new MyProxySelector());<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;try<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.err.println("* Test for HTTP Proxy...");<br>&nbsp;&nbsp;&nbsp;testHttp();<br>&nbsp;&nbsp;&nbsp;System.err.println("Success");<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;catch (Exception e)<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;System.err.println();<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;try<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;System.err.println("* Test for SOCKS Proxy...");<br>&nbsp;&nbsp;&nbsp;testSocks();<br>&nbsp;&nbsp;&nbsp;System.err.println("Success");<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;catch (Exception e)<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;}<br>&nbsp;}<br>}<br></p>			 ]]> 
		</description>
		<category>프로그래밍</category>

		<comments>http://dmlim.egloos.com/5627758#comments</comments>
		<pubDate>Wed, 01 Feb 2012 11:33:46 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ Java Regular Expression Package 의 버그  ]]> </title>
		<link>http://dmlim.egloos.com/5616632</link>
		<guid>http://dmlim.egloos.com/5616632</guid>
		<description>
			<![CDATA[ 
  <p>가금 서버가 행걸려서 CPU 를 100% 다 잡아먹고 서비스가 안되는 현상이 종종 발생 하였는데</p><p>오늘 지인의 도움에 힘입어 jmap 과 jhat 을 이용해서 JVM 의 Heap 을 디버깅 해본 결과 </p><p>스팸 차단을 위해 패턴에 등록한 regular expression 이 특정 검색 문자열을 만나면 라이브러리 내부에서 무한루프를 도는 현상을 찾았습니다.</p><p>물론 regular expression 자체가 좀 난해하게 만들어진 점이 없쟎아 있지만, 무한루프를 도는건 아무래도 문제가 있는 듯 싶네요, 유닉스에 있는 awk, grep 에서는 별 문제 없이 동작하더군요</p><p>오늘 잡힌 regular expression 과 입력 문자열은 다음과 같습니다.</p><p><br>------------------------------------------------------------------------------<br>- 정규식 : [wW]{0,3}\.*.*\.*.*\.[cC][^a-zA-Z0-9]{1,32}[nN] <br>- 문자열 : 니마........{엄청길게썼음972개}........나...... 안된다~^.^<br>------------------------------------------------------------------------------<br>- 정규식: [wW]{0,3}\.*.*\.*.*\.[cC]*%63[nN]* <br>- 문자열: 나........{엄청길게썼음928개}.........내일 사랑니수술 하러가..ㅠ.ㅠ <br>------------------------------------------------------------------------------</p><p><br>참고로 JDK 1.6 에서 지원되는 jmap, jhat 사용법을 간단하게 설명 드립니다.</p><p>jmap, jhat 은 런타인중인 JVM 의 힙의 내용을 살펴보고자 할 때 사용하고요, 메모리에 있는 대부분의 객체들을 일목 요연하게 볼 수 있습니다.</p><p><br>1. jmap 으로 힙 덤프 파일을 생성한다.</p><p>&gt;$ jmap -dump:live,file=heap.bin &lt;pid&gt;</p><p>2. jhat 으로 힙 덤프 파일을 분석한다</p><p>&gt;$ jhat heap.bin</p><p>이렇게 하면 분석이 끝나고 디폴트 7000포트로 웹서버가 하나 뜹니다.</p><p>3. 웹 브라우저로 <a href="http://%3chost%3e:7000/">http://&lt;host&gt;:7000/</a> 로 접속하여 결과를 확인한다.</p><p><a href="http://%3chost%3e:7000/oql/">http://&lt;host&gt;:7000/oql/</a> 로 접속하면 직접 SQL 과 유사한 OQL (Object Query Language) 를 이용하여 객체들을 뒤져볼 수 있습니다.&nbsp; </p><p>&nbsp;</p>			 ]]> 
		</description>
		<category>프로그래밍</category>

		<comments>http://dmlim.egloos.com/5616632#comments</comments>
		<pubDate>Wed, 28 Dec 2011 04:35:42 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ Unicode Surrogate Area 캐릭터의 MySQL 입력시 에러 ]]> </title>
		<link>http://dmlim.egloos.com/5616630</link>
		<guid>http://dmlim.egloos.com/5616630</guid>
		<description>
			<![CDATA[ 
  자바데몬에서 한글을 입력시에 MySQL 에 Insert 하는 과정에서 아래와 같은 Exception 이 종종 발생 했는데.. 며칠 삽질한 끝에 원인을 찾았습니다.<br><br><blockquote>Incorrect string value: '\xF0\x9F\x98\x8D\xF0\x9F...' for column 'NICKNAME' at row 1java.sql.SQLException: Incorrect string value: '\xF0\x9F\x98\x8D\xF0\x9F...' for column 'NICKNAME' at row 1<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1056)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3376)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3308)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1837)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:1961)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2543)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1737)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:2022)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:1940)<br>&nbsp;&nbsp;&nbsp; com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:1925)<br>&nbsp;&nbsp;&nbsp; nateon.qsync.table.SyncStatementInfo.sync(SyncStatementInfo.java:100)<br>&nbsp;&nbsp;&nbsp; nateon.qsync.table.TableDistribute.syncRecord(TableDistribute.java:118)<br>&nbsp;&nbsp;&nbsp; nateon.qsync.QSyncEntry.run(QSyncManager.java:124)<br></blockquote>&nbsp;&nbsp;&nbsp; <br>문제는 Surrogate Area 라고 불리는 유니코드의 영억 때문인데요.<br>D800-DBFF, DC00-DFFF 이 영억에는 실제로 매핑된 캐릭터가 오는게 아니고, UTF-16 확장을 위해서 미리 잡아놓은 영역입니다.<br><br>JAVA String, Oracle NVARCHAR 는 UTF-16 입니다. (UCS-2 아님)<br>즉 UCS-4, UCS-8 도 수용이 가능하다는 얘기이지요.<p><br>그런데, MySQL의 유니코드 캐릭터셋은 아마도 UTF-16 이 아닌 UCS-2 를 그대로 사용하는 듯 합니다.<br>그래서 이 예비 영역의 글자가 들어오면 인식하지 못하고 에러를 뱉어 냅니다.</p><p>해결책은 아래 샘플 코드 처럼 스트링에서 Surrogate Area 에 있는 캐릭터를 제거하는 겁니다.<br></p><blockquote>&nbsp;public static String removeSurrogateArea(String val)<br>&nbsp;{<br>&nbsp;&nbsp;if ( val == null ) return null;<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;StringBuffer buf = new StringBuffer();<br>&nbsp;&nbsp;int len = val.length();<br>&nbsp;&nbsp;for ( int i = 0 ; i &lt; len ; i++ )<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;char c = val.charAt(i);<br>&nbsp;&nbsp;&nbsp;if ( 0xD800 &lt;= c &amp;&amp; c &lt;= 0xDBFF || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0xDC00 &lt;= c &amp;&amp; c &lt;= 0xDFFF )<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;buf.append(c);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return buf.toString();<br>&nbsp;}<br></blockquote><p><br><br>아래는 wiki 에서 찾은 Surrogates 의 원문입니다.</p><p><a href="http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates">http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates</a><br></p><p>SurrogatesThe 2,048 surrogates are not characters, but are reserved for use in UTF-16 to specify code points outside the Basic Multilingual Plane. They are divided into leading or "high surrogates" (D800-DBFF) and trailing or "low surrogates" (DC00-DFFF). In UTF-16, they must always appear in pairs, as a high surrogate followed by a low surrogate, thus using 32 bits to denote one code point.</p><p>10000 + (H - D800) × 400 + (L - DC00)<br>where H and L are the numeric values of the high and low surrogates respectively.</p><p>Since high surrogate values in the range DB80-DBFF always produce values in the Private Use planes, the high surrogate range can be further divided into (normal) high surrogates (D800-DB7F) and "high private use surrogates" (DB80-DBFF).<br></p>			 ]]> 
		</description>
		<category>프로그래밍</category>

		<comments>http://dmlim.egloos.com/5616630#comments</comments>
		<pubDate>Wed, 28 Dec 2011 04:20:08 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ Linux /dev/random vs /dev/urandom 삽질 후기 ]]> </title>
		<link>http://dmlim.egloos.com/4360902</link>
		<guid>http://dmlim.egloos.com/4360902</guid>
		<description>
			<![CDATA[ 
  <p>프로그래밍을 하다가 보면 가끔 난수를 발생시켜야 하는 때가 있습니다.<br><br>난수를 발생시키기 위해서 여러 가지 방법을 사용하는데 몇몇 가지 대표적인 예를 들어 보죠.<br><br>1. ANSI C 라이브러리의 rand() 함수를 이용한다.<br>2. 외부 라이브러리가 (apr 이나, openssl 같은...) 가 제공하는 random 함수들을 이용한다<br>3. 디바이스 파일을 이용한다 (/dev/random, /dev/urandom)<br>4. PRNGd 같은 데몬을 이용한다.<br><br>여기서 삽질을 겪었던 방법이 3번입니다.<br><br>암호화를 위한 아파치 모듈을 하나 만들었는데, 모듈에서 종종 난수를 발생하기 위해서 apr (apache portable runtime library) 에 있는 apr_generate_random_bytes() 라는 함수를 콜하도록 했었고요.<br><br>스테이지 테스트까지는 별 문제가 없었는데, 라이브 서버에 올렸더니 일정 시간이 지나면.. apache 가 hang 걸린것 처럼 멈춰 버리는 현상이 발생을 하더군요.<br><br>strace 로 system call 을 모니터링 해봤는데, <br><br>open("/dev/random", O_RDONLY) = 28<br>read(28, 0x37ef8824, 4) = ...<br><br>여기서 wating 을 하고 있는 것이 아닌가... 몇초도 아니고 몇십초를 대기하고 있었다. 대략 1~2분 정도를..<br>아파치 소스를 까봤더니 apr_generate_random_byte 내부에서 /dev/random 디바이스를 오픈해서 그냥 읽도록 되어 있었네 그랴.<br>근데 왜 /dev/random 을 읽다가 wating을 할까....???<br><br>man 에서 그 해답을 찾았습니다.<br><br>리눅스에서는 /dev/random 과 /dev/urandom 두개를 PRNG 디바이스로 제공을 하는데<br>방식은 IO 디바이스 드라이버에서 발생하는 입력 신호의 노이즈를 게더링 하여 비트수를 연산하여 난수를 발생시킨다고 하는군요.<br><br>/dev/random, /dev/urandom 두개의 차이점은 전자는 엔트로피(얼마나 고른 난수를 발생 시킬 수 있을지를 결정할 수 있는 값이라는군요)가 충분해 져야만 난수를 발생 시키기 때문에 보안에 강하지만 느리고요(심지어지는 엔트로피가 채워잴때까지 blocking 합니다.), 후자는 이 값이 충분하지 않아도 발생을 시키긴 하는데 보안에 취약하지만 빠릅니다.(엔트로피가 채워질때까지 blocking 하지 않습니다. 현재있는 앤트로피만 가지고 생성을 한답니다.)<br><br>여기서 보안에 강하다 취약하다는 말은.. 발생된 random 값으로 암호화 키를 생성하는데 사용할 경우, 이 키가 얼마나 깨기 어렵느냐 쉬우냐를 얘기합니다.<br><br>서버와 같은 머신에서는 PC 와는 다르게, 키보드나, 마우스와 같은 IO 디바이스가 별로 없기 때문에 일정한 수준의 앤트로피 풀을 만들어 내는데 많은 시간이 걸린다고 합니다.<br><br>그리고 /dev/random 은 머신 자체의 영향도 많이 받습니다. 라이브 서버가 5년 전에 들어온 리눅스 머신이었고 스테이지 서버가 들어온지 1년도 안된 새삥 머신이었죠.. /dev/random 에서 wating 하는 걸 두대에서 측정해 봤더니 스테이지 서버가 라이브 서버보다 상당히 빠르더군요..<br><br>그래서 결국은 apr 에서 제공하는 random 대신에 /dev/urandom 을 직접 오픈해서 읽는 걸로 바꾸었더니 행 걸리는 현상이 없이 잘 동작 하드랍니다.<br><br>참고로 FreeBSD 의 경우에는 /dev/random 은 Linux 의 /dev/urandom 과 같은 방식입니다.<br>FreeBSD 의 /dev 를 자세히보면 random 이 urandom 으로 symbolic link 가 걸려 있는걸 알 수 가 있습니다.</p><br/><br/>tag : <a href="/tag/랜덤" rel="tag">랜덤</a>,&nbsp;<a href="/tag/random" rel="tag">random</a>,&nbsp;<a href="/tag/urandom" rel="tag">urandom</a>,&nbsp;<a href="/tag/리눅스" rel="tag">리눅스</a>,&nbsp;<a href="/tag/linux" rel="tag">linux</a>,&nbsp;<a href="/tag/apr" rel="tag">apr</a>,&nbsp;<a href="/tag/아파치모듈" rel="tag">아파치모듈</a>,&nbsp;<a href="/tag/난수" rel="tag">난수</a>			 ]]> 
		</description>
		<category>프로그래밍</category>
		<category>랜덤</category>
		<category>random</category>
		<category>urandom</category>
		<category>리눅스</category>
		<category>linux</category>
		<category>apr</category>
		<category>아파치모듈</category>
		<category>난수</category>

		<comments>http://dmlim.egloos.com/4360902#comments</comments>
		<pubDate>Fri, 16 May 2008 04:13:57 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ 4년에 한번씩 발생했던 오라클 날짜연산의 문제 ]]> </title>
		<link>http://dmlim.egloos.com/4189840</link>
		<guid>http://dmlim.egloos.com/4189840</guid>
		<description>
			<![CDATA[ 
  <p>오라클 스토어드 프로시져 중에 날짜 연산을 하기 위한 코드가 있었는데..<br><br>30 년전 오늘의 날짜를 구하는 연산이다.<br><br><strong>SELECT&nbsp;SYSDATE&nbsp;- TO_YMINTERVAL('30-00') FROM DUAL<br></strong><br>얼핏 보면 문제가 없어 보인다.. 그러나 SYSDATE 가 4년에 한번씩 오는 2월 29일 되면 오류가 발생한다.<br><br>1978-02-29 이라는 날짜는 존재 하지 않기 때문이다... (쉬트...)<br><br>그래서 아래와 같이 수정했다.<br></p><p><strong>SELECT ADD_MONTHS(SYSDATE, -12*30) FROM DUAL</strong></p><p><br>이렇게 연산을 하면 1978-02-28 이라는 결과가 나온다.<br><br>못 믿으시겠다고요? 그럼 아래 쿼리를 각각 실행해 보시라..<br><br><strong>SELECT TO_DATE('2008-02-29', 'YYYY-MM-DD') + TO_YMINTERVAL('01-00') FROM DUAL<br><br>SELECT ADD_MONTHS(TO_DATE('2008-02-29', 'YYYY-MM-DD'), -12*30) FROM DUAL</strong></p><p><br>이 현상은 9.2.0.4 에서 목격되었다.. 상위 버전을 써본적이 없어서 10g 나 11g 에서도 여전히 발생하는지는 모르겠다.<br><br>사실 이 문제는 4년전에도 똑같이 겪었다... 소 잃고 외양간도 못 고쳤다... 오늘 또 이런 오류를 겪었다니.. 쩝..</p>			 ]]> 
		</description>
		<category>프로그래밍</category>

		<comments>http://dmlim.egloos.com/4189840#comments</comments>
		<pubDate>Thu, 28 Feb 2008 17:16:55 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ 한글 텍스트 파일의 캐릭터셋을 자동으로 판단하는 프로그램 ]]> </title>
		<link>http://dmlim.egloos.com/3966342</link>
		<guid>http://dmlim.egloos.com/3966342</guid>
		<description>
			<![CDATA[ 
  <p>소스 코드들이 많이 있는 디렉토리가 있다..<br><br>내가 작성하는 코드들에 중국어나 일본어가 있으리 만무하지만,<br><br>울트라 에디트로 작성한 파일을 많이 저장하다보니... <br><br>가끔 서로 다른 캐릭터 셋으로 만들어 놓는 경우가 종종 있다.<br><br>윈도에서는 주로 <br><br>ASCII, EUC-KR, CP-949, UTF-8 등의 캐릭터 셋으로 저장하는데,<br><br>가끔 유니코드 텍스트 파일도 BOM 을 넣기도 하고 빼기도 하고 해서, <br><br>나도 울트라 에디트로 열어보기 전에는 어떤 캐릭터 셋으로 저장을 해놨는지 헤깔린다.<br><br>그래서 그 수많은 파일 중에서 UTF-8 으로 저장된 파을을 찾으려고 했더니 시간이 너무 많이 걸리더라.. ㅋㅋ<br><br>인터넷을 뒤져서 캐릭터셋을 자동으로 판별해 주는 코드를 입수해 보려고 노력을 했으나..<br><br>문득... 인터넷 뒤지는 시간이나 내가 만드는 시간이나 별반 차이가 없으리라 생각하고..<br><br>이틀간 위키를 뒤져가며 각 캐릭터셋의 인코딩 방식을 찾아서 뚝딱뚝딱 코딩을 했는데.. 생각보다 잘 동작 한다. ㅋㅋ<br><br>US-ASCII, EUC-KR, MS-949, UTF-8 형태로 된 인코딩을 자동으로 찾아서 판별해 준다..<br><br>물론 BOM 이 붙은 넘들은 BOM 만 가지고 판별을 하고 BOM 이 없는 넘들은 인코딩 오토마타의 간략버전으로 판별한다.<br></p><blockquote>US-ASCII ⊂ EUC-KR ⊂ MS-949 <br>US-ASCII&nbsp;⊂ UTF-8 </blockquote><br>의 포함 관계는 대충 아시리라 보고..<br><br>유닉스 같은 데서는 <br><br>find . -type f | xargs detectcharset <br><br>이런 식으로 하시면 대략 파일들의 캐릭터 셋을 아시리라<br><br><a href="http://pds6.egloos.com/pds/200711/27/87/detectcharset.zip">detectcharset.zip</a><br/><br/>tag : <a href="/tag/UTF-8" rel="tag">UTF-8</a>,&nbsp;<a href="/tag/ASCII" rel="tag">ASCII</a>,&nbsp;<a href="/tag/EUC-KR" rel="tag">EUC-KR</a>,&nbsp;<a href="/tag/MS-949" rel="tag">MS-949</a>,&nbsp;<a href="/tag/CP-949" rel="tag">CP-949</a>,&nbsp;<a href="/tag/유니코드" rel="tag">유니코드</a>,&nbsp;<a href="/tag/한글" rel="tag">한글</a>,&nbsp;<a href="/tag/자동판별" rel="tag">자동판별</a>			 ]]> 
		</description>
		<category>프로그래밍</category>
		<category>UTF-8</category>
		<category>ASCII</category>
		<category>EUC-KR</category>
		<category>MS-949</category>
		<category>CP-949</category>
		<category>유니코드</category>
		<category>한글</category>
		<category>자동판별</category>

		<comments>http://dmlim.egloos.com/3966342#comments</comments>
		<pubDate>Tue, 27 Nov 2007 14:33:00 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ 트랙백이 뭘까? ]]> </title>
		<link>http://dmlim.egloos.com/3856417</link>
		<guid>http://dmlim.egloos.com/3856417</guid>
		<description>
			<![CDATA[ 
  <a title="" href="http://dmlim.egloos.com/1579170">Oracle 에서 DES, Triple DES 의 적용</a><br><br>트랙백을 보내면 원문과 링크가 연결된다고 한다..<br><br>첨 시도해 봄...			 ]]> 
		</description>

		<comments>http://dmlim.egloos.com/3856417#comments</comments>
		<pubDate>Mon, 15 Oct 2007 11:37:53 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
	<item>
		<title><![CDATA[ Oracle 에서 DES, Triple DES 의 적용 ]]> </title>
		<link>http://dmlim.egloos.com/1579170</link>
		<guid>http://dmlim.egloos.com/1579170</guid>
		<description>
			<![CDATA[ 
  어제 영선 과장님이 오라클에서 Triple DES 로 암호화를 했는데, 자바로 암호화 한거랑 다르다는 거다<br />
<br />
왜 다른지 물어보러 왔었는데, 알고보니 IV (Initial Vector) 값 때문이었다. DES, Triple DES, AES 류들은 모두 블럭 암호화 방식인데 이런 블럭 암호화 방식들은 암호화를 하기 위해서 암호화 키 말도고 필요한 몇가지가 있는데, 그런 것들을 파라미터라하고..<br />
<br />
다음과 같은 파라미터를 <br />
<ul><li>Block Mode</li><li>Padding Mode</li><li>Initial Vector</li><li>Shift Bits </li></ul>가지고 있다.<br />
<br />
<strong>Block Mode</strong><br />
<br />
실 파라미터라기 보다는 알고리즘과 함쳐져서 하나의 알고리즘 이름 처럼 불리는 경우가 많다. <br />
즉 예를 들어서 <br />
<ul><li>DES-ECB, DES-CBC, DES-CFB, DES-OFB</li><li>DES3-ECB, DES3-CBC, DES3-CFB, DES3-OFB<br />
</li><li>AES128-ECB, AES128-CBC, AES128-CFB, AES128-OFB<br />
</li></ul>위와 같이 말이다... 블락 모드는 아래와 같다.<br />
<ul><li>ECB : Eletric Code Book</li><li>CBC : Cipher Block Chain</li><li>OFB : Output Feed Back</li><li>CFB : Cipher Feed Back</li></ul><strong>Padding Mode</strong><br />
<br />
이건 블락 사이즈에 맞춰서 내용을 패딩할지 말지를 말하는데, PKCS#5 표준 패딩을 사용한다.<br />
<br />
<strong>Initial Vector</strong><br />
<br />
ECB 모드를 제외한 나머지 알고리즘은 다음 블럭을 암호화 할 때 이전 블럭의 결과값 같은걸 XOR 하여 다시 한번 연산을 하는 방식인데, 이 경우 첫번째 블럭에서 이전 블럭의 결과값이 없기 때문에 임으로 암호화하는 쪽에서 값을 지정해야 한다, 암호화에서 사실 이 값은 노출이 되어도 별로 상관이 없다고 얘기를 한다.<br />
<br />
<strong>Shift Bits</strong><br />
<br />
CFB 모드에서는 이전 블락을 연산할때 그냥 하는게 아니라 비트를 돌려서 하는 알고리즘을 가지고 있다. 그래서 그때 비트르 돌릴때 몇 비트식 돌릴지를 결정하는 파라미터 이다.<br />
<br />
Oracle 에서도 암호화를 지원하는데 현재 DES, Triple DES 정도를 지원하고 있다. 그리고 도큐먼트에 특별히 다른 모드를 지정하는게 없는걸로 보아 CBC 모드 인것 같다.<br />
<br />
아.. 더 작성할려 했는데 귀찮아 지려고 한다... 다음 번에 계속 해서... 			 ]]> 
		</description>
		<category>암호화</category>

		<comments>http://dmlim.egloos.com/1579170#comments</comments>
		<pubDate>Wed, 08 Mar 2006 02:05:25 GMT</pubDate>
		<dc:creator>머리말</dc:creator>
	</item>
</channel>
</rss>
