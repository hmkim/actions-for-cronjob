<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>VELOPERT.LOG</title>
	<atom:link href="https://velopert.com/feed" rel="self" type="application/rss+xml" />
	<link>https://velopert.com</link>
	<description>DEVELOPMENT &#38; LIFE LOG</description>
	<lastBuildDate>Sat, 27 Apr 2019 20:12:22 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.7.13</generator>
	<item>
		<title>react-redux 에서 Hooks 사용하기</title>
		<link>https://velopert.com/3726</link>
		<comments>https://velopert.com/3726#respond</comments>
		<pubDate>Sat, 27 Apr 2019 20:12:22 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3726</guid>
		<description><![CDATA[&#160;
react-redux v7.1 alpha 에 드디어 Hooks 기능이 지원되었습니다.
아직 alpha 이기에 프로덕션에서 사용하기엔 아직 이르지만 한번 사용법을 알아봅시다.
정식 릴리즈 때 많은 변화가 없었으면 좋겠네요 ㅎㅎ
&#160;
원본 포스트는 https://velog.io/@velopert/react-redux-hooks 에 게재되어 있습니다 🙂&#8230;]]></description>
				<content:encoded><![CDATA[&nbsp;
react-redux v7.1 alpha 에 드디어 Hooks 기능이 지원되었습니다.
아직 alpha 이기에 프로덕션에서 사용하기엔 아직 이르지만 한번 사용법을 알아봅시다.
정식 릴리즈 때 많은 변화가 없었으면 좋겠네요 ㅎㅎ
&nbsp;
원본 포스트는 https://velog.io/@velopert/react-redux-hooks 에 게재되어 있습니다 <img src="https://s.w.org/images/core/emoji/2.2.1/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" />&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3726/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>2018.log</title>
		<link>https://velopert.com/3719</link>
		<comments>https://velopert.com/3719#comments</comments>
		<pubDate>Wed, 26 Dec 2018 17:52:04 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[thoughts.log]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3719</guid>
		<description><![CDATA[2018년을 마무리하며, 회고록을 포스팅하였습니다.
다들 연말 잘 마무리 하시고 활기찬 2019년 보내시길 응원합니다.
내년에도 잘 부탁드립니다!
&#160;
2018.log 는 velog에 포스팅 되었습니다.
링크: https://velog.io/@velopert/2018.log
&#160;&#8230;]]></description>
				<content:encoded><![CDATA[2018년을 마무리하며, 회고록을 포스팅하였습니다.
다들 연말 잘 마무리 하시고 활기찬 2019년 보내시길 응원합니다.
내년에도 잘 부탁드립니다!
&nbsp;
2018.log 는 velog에 포스팅 되었습니다.
링크: https://velog.io/@velopert/2018.log
&nbsp;&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3719/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리</title>
		<link>https://velopert.com/3707</link>
		<comments>https://velopert.com/3707#comments</comments>
		<pubDate>Wed, 26 Sep 2018 05:04:11 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[mobx]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3707</guid>
		<description><![CDATA[리액트 생태계에서 사용되는 상태 관리 라이브러리는 대표적으로 Redux 와 MobX 가 있습니다. 이 둘의 특징을 배워보고 직접 사용하면서 알아가봅시다.
이 포스트는 벨로그에 게시 된 글입니다.
원본: 상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리
상태 관리 라이브러리의&#8230;]]></description>
				<content:encoded><![CDATA[리액트 생태계에서 사용되는 상태 관리 라이브러리는 대표적으로 Redux 와 MobX 가 있습니다. 이 둘의 특징을 배워보고 직접 사용하면서 알아가봅시다.
이 포스트는 벨로그에 게시 된 글입니다.
원본: 상태 관리 라이브러리의 미학: Redux 또는 MobX 를 통한 상태 관리
상태 관리 라이브러리의&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3707/feed</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>velog 서비스 공개 및 앞으로 velopert 블로그의 계획</title>
		<link>https://velopert.com/3704</link>
		<comments>https://velopert.com/3704#comments</comments>
		<pubDate>Wed, 26 Sep 2018 04:43:16 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[release.log]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3704</guid>
		<description><![CDATA[안녕하세요. 유튜브를 구독중이신 분들은 이미 알고 계시겠지만 제가 사이드 프로젝트로 진행중인 개발자들의 블로그 플랫폼 velog 가 공개되었습니다.

링크: https://velog.io/
현재 서비스 이용을 위한 필수적인 기능들은 구현이 완료되었고 다양한 버그들을 진행하고 있는 단계이며, 지금은 alpha 딱지를 붙인 상태로 서비스가 돌아가고 있습니다.&#8230;]]></description>
				<content:encoded><![CDATA[안녕하세요. 유튜브를 구독중이신 분들은 이미 알고 계시겠지만 제가 사이드 프로젝트로 진행중인 개발자들의 블로그 플랫폼 velog 가 공개되었습니다.

링크: https://velog.io/
현재 서비스 이용을 위한 필수적인 기능들은 구현이 완료되었고 다양한 버그들을 진행하고 있는 단계이며, 지금은 alpha 딱지를 붙인 상태로 서비스가 돌아가고 있습니다.&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3704/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>(길벗) 리액트를 다루는 기술 출간 / 집필후기</title>
		<link>https://velopert.com/3697</link>
		<comments>https://velopert.com/3697#comments</comments>
		<pubDate>Tue, 24 Jul 2018 10:54:09 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[release.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[길벗]]></category>
		<category><![CDATA[집필]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3697</guid>
		<description><![CDATA[&#160;
드디어 제 집필 서적이 세상 밖으로 나왔습니다! 이 책을 통하여 리액트 입문부터 시작해서 리덕스, 리액트 라우터, 서버사이드 렌더링 등의 심화적인 내용을 다루고, Node.js 백엔드 지식도 배우고 마지막으론 풀스택으로 프로젝트를 만들어보면서 웹 개발 흐름을 숙달하실 수 있습니다. 정말 많은 분들이&#8230;]]></description>
				<content:encoded><![CDATA[&nbsp;
드디어 제 집필 서적이 세상 밖으로 나왔습니다! 이 책을 통하여 리액트 입문부터 시작해서 리덕스, 리액트 라우터, 서버사이드 렌더링 등의 심화적인 내용을 다루고, Node.js 백엔드 지식도 배우고 마지막으론 풀스택으로 프로젝트를 만들어보면서 웹 개발 흐름을 숙달하실 수 있습니다. 정말 많은 분들이&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3697/feed</wfw:commentRss>
		<slash:comments>33</slash:comments>
		</item>
		<item>
		<title>리액트 기초 동영상 강의 리뉴얼</title>
		<link>https://velopert.com/3676</link>
		<comments>https://velopert.com/3676#comments</comments>
		<pubDate>Thu, 21 Jun 2018 10:17:15 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[inflearn]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[강의]]></category>
		<category><![CDATA[동영상]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3676</guid>
		<description><![CDATA[이전에 작성했었던 누구든지 하는 리액트: 초심자를 위한 리액트 핵심 강좌에 기반하여 완성한 동영상 강의 시리즈 입니다. 입문에 필요한 핵심 내용들은 유튜브에 공개해놓았고, 나머지 활용 관련된 부분은 인프런에 공유해놓았습니다.
&#160;

React 핵심 강좌
초심자를 위한 리액트(React) 핵심 강좌입니다. 만약에 여러분이 리액트를&#8230;]]></description>
				<content:encoded><![CDATA[이전에 작성했었던 누구든지 하는 리액트: 초심자를 위한 리액트 핵심 강좌에 기반하여 완성한 동영상 강의 시리즈 입니다. 입문에 필요한 핵심 내용들은 유튜브에 공개해놓았고, 나머지 활용 관련된 부분은 인프런에 공유해놓았습니다.
&nbsp;

React 핵심 강좌
초심자를 위한 리액트(React) 핵심 강좌입니다. 만약에 여러분이 리액트를&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3676/feed</wfw:commentRss>
		<slash:comments>8</slash:comments>
		</item>
		<item>
		<title>create-react-app 에 ESLint 와 Prettier 적용하기</title>
		<link>https://velopert.com/3671</link>
		<comments>https://velopert.com/3671#comments</comments>
		<pubDate>Mon, 23 Apr 2018 06:51:26 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[create-react-app]]></category>
		<category><![CDATA[eslint]]></category>
		<category><![CDATA[prettier]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3671</guid>
		<description><![CDATA[이 포스트는 오래되었습니다. velog 에 새로 작성한 포스트를 확인해주세요!
&#160;
리액트 프로젝트에 ESLint 와 Prettier 끼얹기
&#160;
&#160;
&#160;
&#160;
&#160;
&#160;
&#160;
&#160;
&#160;
우리가 리액트 프로젝트, 혹은 다른 자바스크립트 프로젝트를 진행하게 될 때, 우리는 문법 검사 및 더&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 오래되었습니다. velog 에 새로 작성한 포스트를 확인해주세요!
&nbsp;
리액트 프로젝트에 ESLint 와 Prettier 끼얹기
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;
우리가 리액트 프로젝트, 혹은 다른 자바스크립트 프로젝트를 진행하게 될 때, 우리는 문법 검사 및 더&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3671/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트: 초심자를 위한 리액트 핵심 강좌</title>
		<link>https://velopert.com/3613</link>
		<comments>https://velopert.com/3613#comments</comments>
		<pubDate>Sun, 08 Apr 2018 02:12:24 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3613</guid>
		<description><![CDATA[이 튜토리얼은 리액트를 1도 모르는 사람들을 위해 작성되었습니다. 만약에 여러분이 리액트를 배우고 싶은데, 아직 뭐가 뭔지 잘 모르겠다! 그렇다면 이 튜토리얼을 진행하고 나면 리액트가 무엇인지, 왜 사용하는지, 그리고 어떻게 사용하는지를 알아 갈 수 있을것입니다.
이 튜토리얼은 인프런에 영상 버전으로도 올라와있습니다.&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 리액트를 1도 모르는 사람들을 위해 작성되었습니다. 만약에 여러분이 리액트를 배우고 싶은데, 아직 뭐가 뭔지 잘 모르겠다! 그렇다면 이 튜토리얼을 진행하고 나면 리액트가 무엇인지, 왜 사용하는지, 그리고 어떻게 사용하는지를 알아 갈 수 있을것입니다.
이 튜토리얼은 인프런에 영상 버전으로도 올라와있습니다.&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3613/feed</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>리액트 16.3 에 소개된 새로워진 Context API 파헤치기</title>
		<link>https://velopert.com/3606</link>
		<comments>https://velopert.com/3606#comments</comments>
		<pubDate>Tue, 03 Apr 2018 14:51:26 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[context]]></category>
		<category><![CDATA[react]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3606</guid>
		<description><![CDATA[3월말에 리액트 16.3 이 정식 릴리즈되면서, LifeCycle 몇개도 사라지고 (componentWillMount, componentWillUpdate, componentWillReceiveProps), 기존에 존재하던 Context API 가 새로워졌는데요, 이번 튜토리얼에서는 새로워진 Context API 에 대해서, 한번 자세히 다뤄보도록 하겠습니다.
프로젝트에 사용된 코드는 GitHub Repo 에서 확인 할 수 있습니다.
시작하기&#8230;]]></description>
				<content:encoded><![CDATA[3월말에 리액트 16.3 이 정식 릴리즈되면서, LifeCycle 몇개도 사라지고 (componentWillMount, componentWillUpdate, componentWillReceiveProps), 기존에 존재하던 Context API 가 새로워졌는데요, 이번 튜토리얼에서는 새로워진 Context API 에 대해서, 한번 자세히 다뤄보도록 하겠습니다.
프로젝트에 사용된 코드는 GitHub Repo 에서 확인 할 수 있습니다.
시작하기&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3606/feed</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>TypeScript with React + Redux/Immutable.js 빠르게 배우기</title>
		<link>https://velopert.com/3595</link>
		<comments>https://velopert.com/3595#comments</comments>
		<pubDate>Sun, 04 Mar 2018 06:01:10 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[immutable]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[typescript]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3595</guid>
		<description><![CDATA[타입스크립트를 리액트와 함께 사용하게 됐을 때 어떠한 이점이 있는지, 또 어떻게 사용해야하는지 빠르게 한번 배워봅시다!
프로젝트에 사용된 코드: https://github.com/velopert/typescript-react-sample
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
서론
JavaScript 는 weakly typed 언어 입니다. 따라서,

이런게 너무 자연스럽게됩니다.&#8230;]]></description>
				<content:encoded><![CDATA[타입스크립트를 리액트와 함께 사용하게 됐을 때 어떠한 이점이 있는지, 또 어떻게 사용해야하는지 빠르게 한번 배워봅시다!
프로젝트에 사용된 코드: https://github.com/velopert/typescript-react-sample
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
서론
JavaScript 는 weakly typed 언어 입니다. 따라서,

이런게 너무 자연스럽게됩니다.&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3595/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>React + Redux 앱 테스트</title>
		<link>https://velopert.com/3591</link>
		<comments>https://velopert.com/3591#comments</comments>
		<pubDate>Sun, 04 Mar 2018 05:36:15 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[enzyme]]></category>
		<category><![CDATA[jest]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[test]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3591</guid>
		<description><![CDATA[지난 튜토리얼에서 우리는, 리액트 앱을 유닛 테스팅을 통해 모든것이 잘 작동하는지 검증하는 방법을 알아보았습니다. 이번 튜토리얼에서는, 한발 더 나아가 조금 더 복잡한 구조의 앱을 테스팅 할 수 있도록, 리덕스를 사용한 리액트 앱을 테스팅 하는 방법을 알아보겠습니다.
이 프로젝트에 사용된 코드는&#8230;]]></description>
				<content:encoded><![CDATA[지난 튜토리얼에서 우리는, 리액트 앱을 유닛 테스팅을 통해 모든것이 잘 작동하는지 검증하는 방법을 알아보았습니다. 이번 튜토리얼에서는, 한발 더 나아가 조금 더 복잡한 구조의 앱을 테스팅 할 수 있도록, 리덕스를 사용한 리액트 앱을 테스팅 하는 방법을 알아보겠습니다.
이 프로젝트에 사용된 코드는&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3591/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Jest, Enzyme 을 통한 리액트 컴포넌트 유닛 테스팅</title>
		<link>https://velopert.com/3587</link>
		<comments>https://velopert.com/3587#comments</comments>
		<pubDate>Sun, 04 Mar 2018 05:26:23 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[enzyme]]></category>
		<category><![CDATA[jest]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[test]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3587</guid>
		<description><![CDATA[이 튜토리얼에서는, 유닛 테스팅의 간단한 소개와, create-react-app 으로 만든 프로젝트에서 Jest 와 Enzyme 을 통하여 유닛 테스팅을 하는 방법에 대하여 다뤄보겠습니다.
Github 코드: https://github.com/vlpt-playground/react-test-tutorial
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
유닛 테스팅이란?
개발적인 측면에서, 유닛 테스팅이라는&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼에서는, 유닛 테스팅의 간단한 소개와, create-react-app 으로 만든 프로젝트에서 Jest 와 Enzyme 을 통하여 유닛 테스팅을 하는 방법에 대하여 다뤄보겠습니다.
Github 코드: https://github.com/vlpt-playground/react-test-tutorial
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
유닛 테스팅이란?
개발적인 측면에서, 유닛 테스팅이라는&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3587/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Serverless 활용하기: MongoDB 기반 RESTful CRUD API 만들기</title>
		<link>https://velopert.com/3577</link>
		<comments>https://velopert.com/3577#comments</comments>
		<pubDate>Sat, 17 Feb 2018 14:46:30 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[mongodb]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[serverless]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[Node.js]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3577</guid>
		<description><![CDATA[지난 튜토리얼에서는 Serverless 프레임워크를 사용하여 아주 간단한 API 를 만들어주었습니다. 이번 튜토리얼에서는, Serverless 를 조금 더 활용해서 MongoDB 에 연동한 RESTful CRUD (Create, Remove, Update, Delete) API 를 만들어보겠습니다.
이 튜토리얼은, 지난번에 진행하던 프로젝트에서 이어서 진행하도록 하겠습니다. 만약에 지난 튜토리얼을&#8230;]]></description>
				<content:encoded><![CDATA[지난 튜토리얼에서는 Serverless 프레임워크를 사용하여 아주 간단한 API 를 만들어주었습니다. 이번 튜토리얼에서는, Serverless 를 조금 더 활용해서 MongoDB 에 연동한 RESTful CRUD (Create, Remove, Update, Delete) API 를 만들어보겠습니다.
이 튜토리얼은, 지난번에 진행하던 프로젝트에서 이어서 진행하도록 하겠습니다. 만약에 지난 튜토리얼을&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3577/feed</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>Serverless 프레임워크로 서버리스 애플리케이션 생성 및 배포하기</title>
		<link>https://velopert.com/3549</link>
		<comments>https://velopert.com/3549#comments</comments>
		<pubDate>Sun, 11 Feb 2018 13:32:19 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[serverless]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[Lambda]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3549</guid>
		<description><![CDATA[이 튜토리얼은 이어지는 튜토리얼입니다. 이 포스트를 통해 블로그에 처음 방문하셨다면 Serverless 강좌 목록 페이지를 확인해주세요.
AWS Lambda, Azure Functions, Google Cloud Functions 를 통하여 서버리스 애플리케이션을 만들게 된다면, 단순히 함수들을 작성하는 것 뿐만이 아니라 해당 애플리케이션에서 필요한 아키텍쳐들을 설정해주어야하는데, 이는&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 이어지는 튜토리얼입니다. 이 포스트를 통해 블로그에 처음 방문하셨다면 Serverless 강좌 목록 페이지를 확인해주세요.
AWS Lambda, Azure Functions, Google Cloud Functions 를 통하여 서버리스 애플리케이션을 만들게 된다면, 단순히 함수들을 작성하는 것 뿐만이 아니라 해당 애플리케이션에서 필요한 아키텍쳐들을 설정해주어야하는데, 이는&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3549/feed</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>AWS Lambda 로 하는 Hello World!</title>
		<link>https://velopert.com/3546</link>
		<comments>https://velopert.com/3546#comments</comments>
		<pubDate>Sun, 11 Feb 2018 13:19:49 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[serverless]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[FaaS]]></category>
		<category><![CDATA[Lambda]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3546</guid>
		<description><![CDATA[이 튜토리얼은 이어지는 튜토리얼입니다. 이 포스트를 통해 블로그에 처음 방문하셨다면 Serverless 강좌 목록 페이지를 확인해주세요.
Lambda 는 AWS 에서 제공하는 FaaS 서비스 입니다. Lambda 말고도, 각 공룡 기업들에서 제공하는 다른 서비스들도 있습니다:

Google Functions
Azure Functions

아직까지는, Lambda 가 압도적으로&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 이어지는 튜토리얼입니다. 이 포스트를 통해 블로그에 처음 방문하셨다면 Serverless 강좌 목록 페이지를 확인해주세요.
Lambda 는 AWS 에서 제공하는 FaaS 서비스 입니다. Lambda 말고도, 각 공룡 기업들에서 제공하는 다른 서비스들도 있습니다:

Google Functions
Azure Functions

아직까지는, Lambda 가 압도적으로&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3546/feed</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>서버리스 아키텍쳐(Serverless)란?</title>
		<link>https://velopert.com/3543</link>
		<comments>https://velopert.com/3543#comments</comments>
		<pubDate>Sun, 11 Feb 2018 13:17:29 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[serverless]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[BaaS]]></category>
		<category><![CDATA[FaaS]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3543</guid>
		<description><![CDATA[서버리스(Serverless)를 직역하자면, “서버가 없다” 라는 의미가 있습니다. 하지만, 사실상 서버가 없는건 아닙니다. 그저, 특정 작업을 수행하기 위해서 컴퓨터를 혹은 가상머신에 서버를 설정하고, 이를 통하여 처리 하는 것이 아님을 의미합니다.
그 대신에, BaaS (Backend as a Service) 혹은 FaaS (Function as&#8230;]]></description>
				<content:encoded><![CDATA[서버리스(Serverless)를 직역하자면, “서버가 없다” 라는 의미가 있습니다. 하지만, 사실상 서버가 없는건 아닙니다. 그저, 특정 작업을 수행하기 위해서 컴퓨터를 혹은 가상머신에 서버를 설정하고, 이를 통하여 처리 하는 것이 아님을 의미합니다.
그 대신에, BaaS (Backend as a Service) 혹은 FaaS (Function as&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3543/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>컴포넌트에 날개를 달아줘, 리액트 Higher-order Component (HoC)</title>
		<link>https://velopert.com/3537</link>
		<comments>https://velopert.com/3537#comments</comments>
		<pubDate>Sat, 10 Feb 2018 12:45:24 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[higher-order component]]></category>
		<category><![CDATA[HoC]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3537</guid>
		<description><![CDATA[리액트 Higher-order Component (HOC)
코드를 작성하다보면, 자주 반복해서 작성하게 되는 코드들이 있습니다. 우리는 주로 그러한 것들을 함수화하여 재사용 하곤 하죠. 컴포넌트 또한 비슷하죠. 같은 UI 관련 코드가 재사용 될 수 있다면 우리는 컴포넌트를 만들어서 컴포넌트를 재사용합니다. 자, 그런데 컴포넌트 기능&#8230;]]></description>
				<content:encoded><![CDATA[리액트 Higher-order Component (HOC)
코드를 작성하다보면, 자주 반복해서 작성하게 되는 코드들이 있습니다. 우리는 주로 그러한 것들을 함수화하여 재사용 하곤 하죠. 컴포넌트 또한 비슷하죠. 같은 UI 관련 코드가 재사용 될 수 있다면 우리는 컴포넌트를 만들어서 컴포넌트를 재사용합니다. 자, 그런데 컴포넌트 기능&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3537/feed</wfw:commentRss>
		<slash:comments>7</slash:comments>
		</item>
		<item>
		<title>리덕스(Redux)를 왜 쓸까? 그리고 리덕스를 편하게 사용하기 위한 발악 (ii)</title>
		<link>https://velopert.com/3533</link>
		<comments>https://velopert.com/3533#comments</comments>
		<pubDate>Sat, 10 Feb 2018 12:35:26 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3533</guid>
		<description><![CDATA[이 포스트는 이어지는 튜토리얼 입니다. 1편 을 먼저 읽고 오시길 바랍니다.
리덕스의 3가지 규칙
리덕스를 프로젝트에서 사용하게 될 때 알아둬야 할 3가지 규칙이 있습니다.
1. 하나의 애플리케이션 안에는 하나의 스토어가 있습니다.
하나의 애플리케이션에선 단 한개의 스토어를 만들어서 사용합니다. 사실, 권장되지는&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 이어지는 튜토리얼 입니다. 1편 을 먼저 읽고 오시길 바랍니다.
리덕스의 3가지 규칙
리덕스를 프로젝트에서 사용하게 될 때 알아둬야 할 3가지 규칙이 있습니다.
1. 하나의 애플리케이션 안에는 하나의 스토어가 있습니다.
하나의 애플리케이션에선 단 한개의 스토어를 만들어서 사용합니다. 사실, 권장되지는&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3533/feed</wfw:commentRss>
		<slash:comments>23</slash:comments>
		</item>
		<item>
		<title>리덕스(Redux)를 왜 쓸까? 그리고 리덕스를 편하게 사용하기 위한 발악 (i)</title>
		<link>https://velopert.com/3528</link>
		<comments>https://velopert.com/3528#comments</comments>
		<pubDate>Sat, 10 Feb 2018 12:32:33 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3528</guid>
		<description><![CDATA[이 포스트는 리덕스의 리도 모르는 독자들을 대상으로 작성된 글입니다. 리덕스가 왜 필요한지 알아보고, 리덕스를 편리하게 사용하기 위한 발악을 한번 해보겠습니다.
리덕스 왜 쓸까?
리액트애서 애플리케이션을 만들 때, 기본적으로는 보통 하나의 루트 컴포넌트 (App.js) 에서 상태를 관리합니다. 예를들어서, 투두리스트 프로젝트에서는, 다음과&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 리덕스의 리도 모르는 독자들을 대상으로 작성된 글입니다. 리덕스가 왜 필요한지 알아보고, 리덕스를 편리하게 사용하기 위한 발악을 한번 해보겠습니다.
리덕스 왜 쓸까?
리액트애서 애플리케이션을 만들 때, 기본적으로는 보통 하나의 루트 컴포넌트 (App.js) 에서 상태를 관리합니다. 예를들어서, 투두리스트 프로젝트에서는, 다음과&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3528/feed</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 10편: 앞으로의 공부 방향</title>
		<link>https://velopert.com/3642</link>
		<comments>https://velopert.com/3642#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:10:23 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3642</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트는 따지고보면 정말 간단한 라이브러리입니다. 지금까지 공부해본것들을 요약해보자면..

재사용 가능한 컴포넌트를 만듭니다.
props 는 부모에게서 전달받는 값입니다.
state 는 자기 자신이 지니고 있는 데이터입니다.
props 나 state 가&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트는 따지고보면 정말 간단한 라이브러리입니다. 지금까지 공부해본것들을 요약해보자면..

재사용 가능한 컴포넌트를 만듭니다.
props 는 부모에게서 전달받는 값입니다.
state 는 자기 자신이 지니고 있는 데이터입니다.
props 나 state 가&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3642/feed</wfw:commentRss>
		<slash:comments>11</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트: 9편 불변성을 지키는 이유와 업데이트 최적화</title>
		<link>https://velopert.com/3640</link>
		<comments>https://velopert.com/3640#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:09:55 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3640</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
우리는 지난 섹션에서 배열을 어떻게 다뤄야 하는지에 대해서 알아보았습니다. 데이터를 업데이트하는 과정에서 불변성을 지켜야한다는것을 강조했었는데요, 왜 그렇게 해야하는지 알아보겠습니다.
데이터 필터링 구현하기
우선, 불변성의 중요성을 알아보는 과정에서 이름으로&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
우리는 지난 섹션에서 배열을 어떻게 다뤄야 하는지에 대해서 알아보았습니다. 데이터를 업데이트하는 과정에서 불변성을 지켜야한다는것을 강조했었는데요, 왜 그렇게 해야하는지 알아보겠습니다.
데이터 필터링 구현하기
우선, 불변성의 중요성을 알아보는 과정에서 이름으로&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3640/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 8편: 배열 다루기 (2) 제거와 수정</title>
		<link>https://velopert.com/3638</link>
		<comments>https://velopert.com/3638#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:08:38 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3638</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
우리는 지난 섹션에서 배열에 데이터를 추가하는 방법과 배열 내부의 내용들을 화면에 보여주는 기능을 구현해보았습니다. 이번에는, 배열 내부의 데이터를 제거하는 방법과 수정을 하는 방법을 알아보겠습니다.
일단 제거부터 시작해볼까요?
데이터&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
우리는 지난 섹션에서 배열에 데이터를 추가하는 방법과 배열 내부의 내용들을 화면에 보여주는 기능을 구현해보았습니다. 이번에는, 배열 내부의 데이터를 제거하는 방법과 수정을 하는 방법을 알아보겠습니다.
일단 제거부터 시작해볼까요?
데이터&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3638/feed</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 7편: 배열 다루기 (1) 생성과 렌더링</title>
		<link>https://velopert.com/3636</link>
		<comments>https://velopert.com/3636#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:07:43 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3636</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
이번에는 리액트 프로젝트에서 배열을 다루는 방법을 알아보겠습니다. 리액트에서는 배열을 다룰 때 평상시에 하던것 처럼 하시면 안 됩니다. 데이터 추가의 경우, 자바스크립트에서 배열을 다뤄보신분이라면 그냥 배열에 데이터를 추가할 때,&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
이번에는 리액트 프로젝트에서 배열을 다루는 방법을 알아보겠습니다. 리액트에서는 배열을 다룰 때 평상시에 하던것 처럼 하시면 안 됩니다. 데이터 추가의 경우, 자바스크립트에서 배열을 다뤄보신분이라면 그냥 배열에 데이터를 추가할 때,&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3636/feed</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 6편: input 상태 관리하기</title>
		<link>https://velopert.com/3634</link>
		<comments>https://velopert.com/3634#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:06:51 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3634</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
자, 우리가 지금까지 배웠던것들을 요약해봅시다.

컴포넌트 만들기
props 와 state
LifeCycle API

딱히 배운게 그리 많지는 않죠? 그런데 이것만으로도 정말 많은 것들을 만들 수 있습니다!
리액트는, 그냥 자바스크립트와&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
자, 우리가 지금까지 배웠던것들을 요약해봅시다.

컴포넌트 만들기
props 와 state
LifeCycle API

딱히 배운게 그리 많지는 않죠? 그런데 이것만으로도 정말 많은 것들을 만들 수 있습니다!
리액트는, 그냥 자바스크립트와&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3634/feed</wfw:commentRss>
		<slash:comments>22</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 5편: LifeCycle API</title>
		<link>https://velopert.com/3631</link>
		<comments>https://velopert.com/3631#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:05:31 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3631</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
자 이번에는 리액트의 LifeCycle API 에 대해서 알아보겠습니다. 이 API 는 컴포넌트가 여러분의 브라우저에서 나타날때, 사라질때, 그리고 업데이트 될 때, 호출되는 API 입니다.
정말 중요한 역할을 하는데요! 한번&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
자 이번에는 리액트의 LifeCycle API 에 대해서 알아보겠습니다. 이 API 는 컴포넌트가 여러분의 브라우저에서 나타날때, 사라질때, 그리고 업데이트 될 때, 호출되는 API 입니다.
정말 중요한 역할을 하는데요! 한번&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3631/feed</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 4편: props 와 state</title>
		<link>https://velopert.com/3629</link>
		<comments>https://velopert.com/3629#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:04:08 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3629</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트 컴포넌트에서 다루는 데이터는 두개로 나뉩니다. 바로 props 와 state 인데요, 미리 요약하여 설명드리자면 props 는 부모 컴포넌트가 자식 컴포넌트에게 주는 값입니다. 자식 컴포넌트에서는 props 를 받아오기만하고, 받아온&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트 컴포넌트에서 다루는 데이터는 두개로 나뉩니다. 바로 props 와 state 인데요, 미리 요약하여 설명드리자면 props 는 부모 컴포넌트가 자식 컴포넌트에게 주는 값입니다. 자식 컴포넌트에서는 props 를 받아오기만하고, 받아온&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3629/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 3편: JSX</title>
		<link>https://velopert.com/3626</link>
		<comments>https://velopert.com/3626#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:02:08 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[node.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3626</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트 컴포넌트에 대하여 조금 더 자세히 알아봅시다!
컴포넌트 파일 파헤치기
이전에 만든 hello-react 프로젝트를 열어보세요. 다음과 같이 프로젝트가 구성되어 있을 것입니다.

리액트를 사용하면 여러분의 웹 애플리케이션에서 사용하는 유저&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
리액트 컴포넌트에 대하여 조금 더 자세히 알아봅시다!
컴포넌트 파일 파헤치기
이전에 만든 hello-react 프로젝트를 열어보세요. 다음과 같이 프로젝트가 구성되어 있을 것입니다.

리액트를 사용하면 여러분의 웹 애플리케이션에서 사용하는 유저&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3626/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 2편: 리액트 프로젝트 시작하기</title>
		<link>https://velopert.com/3621</link>
		<comments>https://velopert.com/3621#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:01:37 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3621</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
&#160;
리액트 프로젝트는 보통 우리가 옛날에 jQuery 같은것을 단순히 &#60;script src="..."&#62;&#60;script&#62; 의 형태로 불러와서 사용했던 것 처럼 사용하지는 않습니다. 그렇게 하려면 할 수 는 있는데 굉장히 제한적입니다. 그&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
&nbsp;
리액트 프로젝트는 보통 우리가 옛날에 jQuery 같은것을 단순히 &lt;script src="..."&gt;&lt;script&gt; 의 형태로 불러와서 사용했던 것 처럼 사용하지는 않습니다. 그렇게 하려면 할 수 는 있는데 굉장히 제한적입니다. 그&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3621/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>누구든지 하는 리액트 1편: 리액트는 무엇인가</title>
		<link>https://velopert.com/3612</link>
		<comments>https://velopert.com/3612#comments</comments>
		<pubDate>Wed, 10 Jan 2018 15:00:36 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-anyone]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3612</guid>
		<description><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
프론트엔드 라이브러리 / 프레임워크
리액트는 정말 인기있는 프론트엔드 라이브러리입니다. 그런데 일단, 리액트에 대해서 알아보기전에, 이 프론트엔드 라이브러리란게 정확히 뭔지, 그리고 왜 필요한건지에 대해서 알아봅시다.
일단, 여러분이 웹사이트를 만들기&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 10편으로 이뤄진 시리즈입니다. 이전 / 다음 편을 확인하시려면 목차를 확인하세요.
프론트엔드 라이브러리 / 프레임워크
리액트는 정말 인기있는 프론트엔드 라이브러리입니다. 그런데 일단, 리액트에 대해서 알아보기전에, 이 프론트엔드 라이브러리란게 정확히 뭔지, 그리고 왜 필요한건지에 대해서 알아봅시다.
일단, 여러분이 웹사이트를 만들기&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3612/feed</wfw:commentRss>
		<slash:comments>12</slash:comments>
		</item>
		<item>
		<title>리액트 컴포넌트 스타일링, API 연동 실습 &#8211; NASA 에서 오늘의 우주 사진 가져오기</title>
		<link>https://velopert.com/3503</link>
		<comments>https://velopert.com/3503#comments</comments>
		<pubDate>Tue, 09 Jan 2018 14:47:14 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[axios]]></category>
		<category><![CDATA[CSS Module]]></category>
		<category><![CDATA[nasa]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[sass]]></category>
		<category><![CDATA[styling]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3503</guid>
		<description><![CDATA[이번 튜토리얼에서는 Sass 를 사용하여 컴포넌트 스타일링을 연습삼아 해보고, NASA 에서 Open API 로 제공하는 Astronomy Picture of the Day (오늘의 우주사진)들을 가져와서 화면에 띄워주는 작업을 진행해보겠습니다.
리액트 프로젝트에서는 다양한 방법으로 컴포넌트를 스타일링 해줄 수 있는데요 (리액트 컴포넌트 스타일링 포스트),&#8230;]]></description>
				<content:encoded><![CDATA[이번 튜토리얼에서는 Sass 를 사용하여 컴포넌트 스타일링을 연습삼아 해보고, NASA 에서 Open API 로 제공하는 Astronomy Picture of the Day (오늘의 우주사진)들을 가져와서 화면에 띄워주는 작업을 진행해보겠습니다.
리액트 프로젝트에서는 다양한 방법으로 컴포넌트를 스타일링 해줄 수 있는데요 (리액트 컴포넌트 스타일링 포스트),&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3503/feed</wfw:commentRss>
		<slash:comments>15</slash:comments>
		</item>
		<item>
		<title>2017.log</title>
		<link>https://velopert.com/3489</link>
		<comments>https://velopert.com/3489#comments</comments>
		<pubDate>Fri, 29 Dec 2017 12:00:45 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[thoughts.log]]></category>
		<category><![CDATA[2017]]></category>
		<category><![CDATA[log]]></category>
		<category><![CDATA[회고록]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3489</guid>
		<description><![CDATA[2017.log
벌써 2017년이 끝나다니 정말 소름 돋는다. 대학생 시절, 그리고 그 전의 나는 매년 연말마다 뭔가 허탈함이 느껴지곤 했었다. 그냥.. 한 해동안 한게 별로 없다는, 달라진게 없다는 그런 느낌 때문이다. 하지만, 다행히도 이번엔 그렇지 않다. 누가봐도 한 해를 객관적으로 열심히&#8230;]]></description>
				<content:encoded><![CDATA[2017.log
벌써 2017년이 끝나다니 정말 소름 돋는다. 대학생 시절, 그리고 그 전의 나는 매년 연말마다 뭔가 허탈함이 느껴지곤 했었다. 그냥.. 한 해동안 한게 별로 없다는, 달라진게 없다는 그런 느낌 때문이다. 하지만, 다행히도 이번엔 그렇지 않다. 누가봐도 한 해를 객관적으로 열심히&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3489/feed</wfw:commentRss>
		<slash:comments>35</slash:comments>
		</item>
		<item>
		<title>React ❤️ Immutable.js &#8211; 리액트의 불변함, 그리고 컴포넌트에서 Immutable.js 사용하기</title>
		<link>https://velopert.com/3486</link>
		<comments>https://velopert.com/3486#comments</comments>
		<pubDate>Mon, 25 Dec 2017 12:43:33 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[immutability]]></category>
		<category><![CDATA[Immutable.js]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3486</guid>
		<description><![CDATA[이 포스트는 React 에서는 불변함 (Immutability) 를 지키며 상태 관리를 하는 것을 매우 편하게 해주는 라이브러리 Immutable.js 에 대해서 알아보겠습니다.

서론
리액트를 사용하신다면, Immutability 라는 말, 한번쯤은 들어보셨을겁니다. 리액트 컴포넌트의 state 를 변경해야 할 땐, 무조건, setState 를 통해서 업데이트&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 React 에서는 불변함 (Immutability) 를 지키며 상태 관리를 하는 것을 매우 편하게 해주는 라이브러리 Immutable.js 에 대해서 알아보겠습니다.

서론
리액트를 사용하신다면, Immutability 라는 말, 한번쯤은 들어보셨을겁니다. 리액트 컴포넌트의 state 를 변경해야 할 땐, 무조건, setState 를 통해서 업데이트&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3486/feed</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>React 기초 입문 프로젝트 &#8211; 흔하디 흔한 할 일 목록 만들기</title>
		<link>https://velopert.com/3480</link>
		<comments>https://velopert.com/3480#comments</comments>
		<pubDate>Mon, 25 Dec 2017 06:57:23 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[todo-list]]></category>
		<category><![CDATA[tutorial]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3480</guid>
		<description><![CDATA[이 포스트는 Fastcampus 의 리액트 강의 에서 사용된 강의 자료로서, 부연설명이 조금 생략되어있습니다. 기초가 부족하시다면 좀 오래되긴 했지만 저의 강의목록 에서 나오는 3편, 4편, 5편, 7편을 가볍게 읽고오세요 (해당 강의들의 실습은 따라하지 않으셔도 됩니다)
0. 시작하기
이번에는 프론트엔드 기초를 다룰때면&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 Fastcampus 의 리액트 강의 에서 사용된 강의 자료로서, 부연설명이 조금 생략되어있습니다. 기초가 부족하시다면 좀 오래되긴 했지만 저의 강의목록 에서 나오는 3편, 4편, 5편, 7편을 가볍게 읽고오세요 (해당 강의들의 실습은 따라하지 않으셔도 됩니다)
0. 시작하기
이번에는 프론트엔드 기초를 다룰때면&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3480/feed</wfw:commentRss>
		<slash:comments>25</slash:comments>
		</item>
		<item>
		<title>Bitimulate :: 가상화폐 모의 투자 / 거래소 개발기</title>
		<link>https://velopert.com/3465</link>
		<comments>https://velopert.com/3465#comments</comments>
		<pubDate>Thu, 30 Nov 2017 17:09:27 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[release.log]]></category>
		<category><![CDATA[bitimulate]]></category>
		<category><![CDATA[release]]></category>
		<category><![CDATA[가상화폐]]></category>
		<category><![CDATA[모의거래소]]></category>
		<category><![CDATA[비티뮬레이트]]></category>
		<category><![CDATA[사이드프로젝트]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3465</guid>
		<description><![CDATA[이 글은 제가 최근 진행한 사이드 프로젝트 비티뮬레이트 (https://bitimulate.com) 개발을 하면서 생각했던 점들, 그리고 프로젝트 구조, 후기 등에 대하여 작성한 포스트입니다. 이 프로젝트는 오픈소스로 깃헙에 공개 되어있습니다 &#8211; Github Repo
개발 계기
직장인으로서의 사이드 프로젝트
직장생활을 하면서 개인 개발을 하는건,&#8230;]]></description>
				<content:encoded><![CDATA[이 글은 제가 최근 진행한 사이드 프로젝트 비티뮬레이트 (https://bitimulate.com) 개발을 하면서 생각했던 점들, 그리고 프로젝트 구조, 후기 등에 대하여 작성한 포스트입니다. 이 프로젝트는 오픈소스로 깃헙에 공개 되어있습니다 &#8211; Github Repo
개발 계기
직장인으로서의 사이드 프로젝트
직장생활을 하면서 개인 개발을 하는건,&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3465/feed</wfw:commentRss>
		<slash:comments>27</slash:comments>
		</item>
		<item>
		<title>리액트 컴포넌트 스타일링 &#8211; CSS Module / Sass /  styled-components</title>
		<link>https://velopert.com/3447</link>
		<comments>https://velopert.com/3447#comments</comments>
		<pubDate>Sun, 30 Jul 2017 14:02:06 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[CSS Module]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[sass]]></category>
		<category><![CDATA[styled-componetns]]></category>
		<category><![CDATA[리액트]]></category>
		<category><![CDATA[스타일링]]></category>
		<category><![CDATA[컴포넌트]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3447</guid>
		<description><![CDATA[이 자료는 오래되었습니다! 최신화된 자료는 제가 벨로그에 올린
다양한 방식의 컴포넌트 스타일링 방식 CSS, Sass, CSS Module, styled-components  를 읽어주세요.
&#160;

리액트 컴포넌트 스타일링 &#8211; CSS Module / Sass / styled-components
리액트에서 컴포넌트 스타일링에 있어서는, 동일화된 방식이 없습니다. 개발자마다, 그리고&#8230;]]></description>
				<content:encoded><![CDATA[이 자료는 오래되었습니다! 최신화된 자료는 제가 벨로그에 올린
다양한 방식의 컴포넌트 스타일링 방식 CSS, Sass, CSS Module, styled-components  를 읽어주세요.
&nbsp;

리액트 컴포넌트 스타일링 &#8211; CSS Module / Sass / styled-components
리액트에서 컴포넌트 스타일링에 있어서는, 동일화된 방식이 없습니다. 개발자마다, 그리고&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3447/feed</wfw:commentRss>
		<slash:comments>29</slash:comments>
		</item>
		<item>
		<title>2017 0.5.log</title>
		<link>https://velopert.com/3436</link>
		<comments>https://velopert.com/3436#comments</comments>
		<pubDate>Mon, 10 Jul 2017 19:37:39 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[thoughts.log]]></category>
		<category><![CDATA[2017]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3436</guid>
		<description><![CDATA[벌써 2017 년의 반이 지났구나.
&#160;
올해는, 음, 전역의 해였지.
그 긴 긴 군생활.
뭐 길어봤자 21개월이였지,,,
라는 말이 나올정도로, 군생활을 언제 했나&#8230; 싶을 정도로
나는 굉장히 바쁘고 바쁘고 바쁜 정신없는 한 해를 보내고있다.
&#160;
전역을 하자마자 스타트업 회사 라프텔에&#8230;]]></description>
				<content:encoded><![CDATA[벌써 2017 년의 반이 지났구나.
&nbsp;
올해는, 음, 전역의 해였지.
그 긴 긴 군생활.
뭐 길어봤자 21개월이였지,,,
라는 말이 나올정도로, 군생활을 언제 했나&#8230; 싶을 정도로
나는 굉장히 바쁘고 바쁘고 바쁜 정신없는 한 해를 보내고있다.
&nbsp;
전역을 하자마자 스타트업 회사 라프텔에&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3436/feed</wfw:commentRss>
		<slash:comments>31</slash:comments>
		</item>
		<item>
		<title>react-router :: 3장. 서버사이드 렌더링</title>
		<link>https://velopert.com/3425</link>
		<comments>https://velopert.com/3425#comments</comments>
		<pubDate>Sun, 25 Jun 2017 19:36:47 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react-router]]></category>
		<category><![CDATA[server-side-rendering]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3425</guid>
		<description><![CDATA[이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
3장. 서버사이드 렌더링
이번 장에서는 리액트 어플리케이션을 서버사이드 렌더링 하는 방법을 알아보겠습니다. 여러분이 리액트를 통해 어플리케이션을 개발하게 될 때, 서버사이드 렌더링을 구현 할 수도, 하지 않을 수도 있습니다. 필수작업은&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
3장. 서버사이드 렌더링
이번 장에서는 리액트 어플리케이션을 서버사이드 렌더링 하는 방법을 알아보겠습니다. 여러분이 리액트를 통해 어플리케이션을 개발하게 될 때, 서버사이드 렌더링을 구현 할 수도, 하지 않을 수도 있습니다. 필수작업은&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3425/feed</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>react-router :: 2장. 코드 스플리팅 (Code Splitting)</title>
		<link>https://velopert.com/3421</link>
		<comments>https://velopert.com/3421#comments</comments>
		<pubDate>Sun, 25 Jun 2017 19:32:55 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[code splitting]]></category>
		<category><![CDATA[react-router]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3421</guid>
		<description><![CDATA[이 포스트는 조금 오래된 포스트입니다 (2018년 9월 기준 아직 작동은 합니다)
새로 작성된 포스트가 있으니 velog 에 올린 리액트 프로젝트 코드 스플리팅 정복하기 포스트를 읽어주세요.

이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
2장. 코드 스플리팅 (Code&#8230;]]></description>
				<content:encoded><![CDATA[이 포스트는 조금 오래된 포스트입니다 (2018년 9월 기준 아직 작동은 합니다)
새로 작성된 포스트가 있으니 velog 에 올린 리액트 프로젝트 코드 스플리팅 정복하기 포스트를 읽어주세요.

이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
2장. 코드 스플리팅 (Code&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3421/feed</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>react-router :: 1장. 리액트 라우터 사용해보기</title>
		<link>https://velopert.com/3417</link>
		<comments>https://velopert.com/3417#comments</comments>
		<pubDate>Sun, 25 Jun 2017 19:29:02 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react-router]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3417</guid>
		<description><![CDATA[이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
SPA 란?
Single Page Application (싱글 페이지 어플리케이션) 의 약자입니다. 말 그대로, 페이지가 1개인 어플리케이션이란 뜻입니다. 전통적인 웹어플리케이션의 구조는, 여러 페이지로 구성되어있습니다. 유저가 요청 할 때 마다 페이지가 새로고침되며,&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 3개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
SPA 란?
Single Page Application (싱글 페이지 어플리케이션) 의 약자입니다. 말 그대로, 페이지가 1개인 어플리케이션이란 뜻입니다. 전통적인 웹어플리케이션의 구조는, 여러 페이지로 구성되어있습니다. 유저가 요청 할 때 마다 페이지가 새로고침되며,&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3417/feed</wfw:commentRss>
		<slash:comments>16</slash:comments>
		</item>
		<item>
		<title>리액트 라우터, 코드 스플리팅, 그리고 서버사이드 렌더링 :: 목차</title>
		<link>https://velopert.com/3411</link>
		<comments>https://velopert.com/3411#comments</comments>
		<pubDate>Sun, 25 Jun 2017 19:24:11 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[code splitting]]></category>
		<category><![CDATA[react-router]]></category>
		<category><![CDATA[server-side-rendering]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3411</guid>
		<description><![CDATA[이번 강의에서 다룰 주제는 리액트 라우터입니다. 리액트 라우터를 사용하면서, 웹팩을 설정하는 방법을 배우면서 프로젝트 코드를 빌드 할 때 여러 파일로 저장하는 Code Splitting 에 대해서 알아보고, 또 SEO (검색엔진 최적화) 및 초기 렌더링 성능 등을 위한 서버사이드 렌더링을 하는 방법도&#8230;]]></description>
				<content:encoded><![CDATA[이번 강의에서 다룰 주제는 리액트 라우터입니다. 리액트 라우터를 사용하면서, 웹팩을 설정하는 방법을 배우면서 프로젝트 코드를 빌드 할 때 여러 파일로 저장하는 Code Splitting 에 대해서 알아보고, 또 SEO (검색엔진 최적화) 및 초기 렌더링 성능 등을 위한 서버사이드 렌더링을 하는 방법도&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3411/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>리덕스 미들웨어, 그리고 비동기 작업 (외부데이터 연동)</title>
		<link>https://velopert.com/3401</link>
		<comments>https://velopert.com/3401#comments</comments>
		<pubDate>Sun, 21 May 2017 18:44:23 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[async]]></category>
		<category><![CDATA[meddleware]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-pender]]></category>
		<category><![CDATA[Redux]]></category>
		<category><![CDATA[redux-promise-middleware]]></category>
		<category><![CDATA[thunk]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3401</guid>
		<description><![CDATA[이 문서는 패스트캠퍼스 오프라인 강의를 위해서 준비된 문서이기에, 일부 내용들은 설명이 생략되어있을 수도 있습니다.
이번 강의에서 다룰 주제는 리덕스 미들웨어를 사용하여 외부 데이터를 연동하는 방법을 다뤄보겠습니다.
외부 데이터를 연동하기 위해서 리덕스, 그리고 리덕스 미들웨어들이 꼭 필요한것은 아닙니다. 리액트 컴포넌트와 내부&#8230;]]></description>
				<content:encoded><![CDATA[이 문서는 패스트캠퍼스 오프라인 강의를 위해서 준비된 문서이기에, 일부 내용들은 설명이 생략되어있을 수도 있습니다.
이번 강의에서 다룰 주제는 리덕스 미들웨어를 사용하여 외부 데이터를 연동하는 방법을 다뤄보겠습니다.
외부 데이터를 연동하기 위해서 리덕스, 그리고 리덕스 미들웨어들이 꼭 필요한것은 아닙니다. 리액트 컴포넌트와 내부&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3401/feed</wfw:commentRss>
		<slash:comments>34</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 5장. 주소록에 Redux 끼얹기</title>
		<link>https://velopert.com/3360</link>
		<comments>https://velopert.com/3360#comments</comments>
		<pubDate>Fri, 05 May 2017 14:30:44 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3360</guid>
		<description><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
5장. 주소록에 Redux 끼얹기
이번 장에서는 이전에 우리가 만들었었던 주소록 프로젝트에 Redux 를 적용해보겠습니다. 기존의 코드에선 프로젝트의 모든 로직을 App 컴포넌트에서 관리했었습니다. 사실상, 이 프로젝트는 소규모 프로젝트이기 때문에 App&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
5장. 주소록에 Redux 끼얹기
이번 장에서는 이전에 우리가 만들었었던 주소록 프로젝트에 Redux 를 적용해보겠습니다. 기존의 코드에선 프로젝트의 모든 로직을 App 컴포넌트에서 관리했었습니다. 사실상, 이 프로젝트는 소규모 프로젝트이기 때문에 App&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3360/feed</wfw:commentRss>
		<slash:comments>30</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 4장. Ducks 구조와 redux-actions 사용하기</title>
		<link>https://velopert.com/3358</link>
		<comments>https://velopert.com/3358#comments</comments>
		<pubDate>Fri, 05 May 2017 14:23:37 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3358</guid>
		<description><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
4장. Ducks 구조와 redux-actions 사용하기
Redux 공식 문서에서는, ActionType, Action, Reducer 이 3가지를 따로 따로 다룹니다. 그러다보니, 하나의 액션을 추가하려면 3개의 다른 파일들을 수정해야하죠. 가끔씩은, 액션생성자를 하나하나 만들고 또&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
4장. Ducks 구조와 redux-actions 사용하기
Redux 공식 문서에서는, ActionType, Action, Reducer 이 3가지를 따로 따로 다룹니다. 그러다보니, 하나의 액션을 추가하려면 3개의 다른 파일들을 수정해야하죠. 가끔씩은, 액션생성자를 하나하나 만들고 또&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3358/feed</wfw:commentRss>
		<slash:comments>6</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 3장. Immutable.js 익히기</title>
		<link>https://velopert.com/3354</link>
		<comments>https://velopert.com/3354#comments</comments>
		<pubDate>Fri, 05 May 2017 14:21:59 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3354</guid>
		<description><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
3장. Immutable.js 익히기
Immutable.js는 자바스크립트상에서 불변성의 데이터를 다루는것을 도와줍니다. 3장을 진행하기에 앞서, 우선 자바스크립트에서 객체의 불변성에 대해서 알아보겠습니다.
객체의 불변성
이를 이해하려면, 간단한 자바스크립트 코드들을 실행해보아야합니다. 크롬에서 개발자도구를 열고,&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
3장. Immutable.js 익히기
Immutable.js는 자바스크립트상에서 불변성의 데이터를 다루는것을 도와줍니다. 3장을 진행하기에 앞서, 우선 자바스크립트에서 객체의 불변성에 대해서 알아보겠습니다.
객체의 불변성
이를 이해하려면, 간단한 자바스크립트 코드들을 실행해보아야합니다. 크롬에서 개발자도구를 열고,&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3354/feed</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 2장. 멀티카운터 만들기</title>
		<link>https://velopert.com/3352</link>
		<comments>https://velopert.com/3352#comments</comments>
		<pubDate>Fri, 05 May 2017 14:19:24 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3352</guid>
		<description><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
2장. 멀티카운터 만들기
자, 이제 카운터의 갯수를 늘릴 차례입니다. 그렇게 어려워지진 않습니다. 기존에 우리가 투두리스트를 만들고, 주소록을 만들었던것과 같은 원리로 만들면 됩니다. 각 카운터가 지니고 있는 값을 객체로 만들어서&#8230;]]></description>
				<content:encoded><![CDATA[이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
2장. 멀티카운터 만들기
자, 이제 카운터의 갯수를 늘릴 차례입니다. 그렇게 어려워지진 않습니다. 기존에 우리가 투두리스트를 만들고, 주소록을 만들었던것과 같은 원리로 만들면 됩니다. 각 카운터가 지니고 있는 값을 객체로 만들어서&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3352/feed</wfw:commentRss>
		<slash:comments>14</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 1장. 카운터 만들기</title>
		<link>https://velopert.com/3346</link>
		<comments>https://velopert.com/3346#comments</comments>
		<pubDate>Fri, 05 May 2017 14:18:57 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3346</guid>
		<description><![CDATA[&#160;
이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
1장. 카운터 만들기
우리가 1장 2장에 걸쳐 만들 프로젝트를 미리봐볼까요? 주소: https://counter.now.sh/

상단의 생성, 제거 버튼을 누르면 동그라미가 나타나거나 사라지고, 동그라미를 왼쪽 클릭하면 더하기, 오른쪽 클릭하면 빼기, 더블클릭하면&#8230;]]></description>
				<content:encoded><![CDATA[&nbsp;
이 튜토리얼은 5개의 포스트로 나뉘어진 이어지는 강좌입니다. 목차를 확인하시려면 여기를 참고하세요.
1장. 카운터 만들기
우리가 1장 2장에 걸쳐 만들 프로젝트를 미리봐볼까요? 주소: https://counter.now.sh/

상단의 생성, 제거 버튼을 누르면 동그라미가 나타나거나 사라지고, 동그라미를 왼쪽 클릭하면 더하기, 오른쪽 클릭하면 빼기, 더블클릭하면&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3346/feed</wfw:commentRss>
		<slash:comments>19</slash:comments>
		</item>
		<item>
		<title>Redux 를 통한 React 어플리케이션 상태 관리 :: 목차</title>
		<link>https://velopert.com/3365</link>
		<comments>https://velopert.com/3365#comments</comments>
		<pubDate>Fri, 05 May 2017 11:45:48 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[Redux]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3365</guid>
		<description><![CDATA[이번에 다룰 주제는 Redux 입니다. 리액트를 공부하다보면 한번쯤은 거쳐가야 할 관문이죠. 처음에 공부 할 때는 좀 어렵습니다. 초반엔 왜 사용해야 하나 싶기도 하고 오히려 복잡해지는것 같기도 합니다. 하지만 사용을 하다보면 정말 간단하면서도 편하고, 또 강력한 라이브러리라는것을 깨닫게 됩니다.
이 문서는&#8230;]]></description>
				<content:encoded><![CDATA[이번에 다룰 주제는 Redux 입니다. 리액트를 공부하다보면 한번쯤은 거쳐가야 할 관문이죠. 처음에 공부 할 때는 좀 어렵습니다. 초반엔 왜 사용해야 하나 싶기도 하고 오히려 복잡해지는것 같기도 합니다. 하지만 사용을 하다보면 정말 간단하면서도 편하고, 또 강력한 라이브러리라는것을 깨닫게 됩니다.
이 문서는&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3365/feed</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>[Next.js 2.0] 간단한 React 전용 서버사이드 프레임워크, 기초부터 본격적으로 파보기</title>
		<link>https://velopert.com/3293</link>
		<comments>https://velopert.com/3293#comments</comments>
		<pubDate>Sat, 08 Apr 2017 01:33:45 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[next.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[server-side-rendering]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3293</guid>
		<description><![CDATA[Next.js, 작년부터 존재함을 인지해왔고, 뭔가 멋지다는것도 알고있었지만 그 동안 딱히 필요성을 못 느껴서 오랫동안, 아주 오랫동안 미뤄왔습니다. (이 포스트를 보시는 여러분들중 일부도 그러하리라 생각합니다) 그런데 어느새 벌써 2.0이 런칭되었고 왠지 사용을 해봐야 할 것 같습니다.
Next.js 란 무엇인가?
독자 여러분의&#8230;]]></description>
				<content:encoded><![CDATA[Next.js, 작년부터 존재함을 인지해왔고, 뭔가 멋지다는것도 알고있었지만 그 동안 딱히 필요성을 못 느껴서 오랫동안, 아주 오랫동안 미뤄왔습니다. (이 포스트를 보시는 여러분들중 일부도 그러하리라 생각합니다) 그런데 어느새 벌써 2.0이 런칭되었고 왠지 사용을 해봐야 할 것 같습니다.
Next.js 란 무엇인가?
독자 여러분의&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3293/feed</wfw:commentRss>
		<slash:comments>9</slash:comments>
		</item>
		<item>
		<title>[Video] 리액트 라우터 (react-router v4) 강의 [1/3] : 사용 방법</title>
		<link>https://velopert.com/3275</link>
		<comments>https://velopert.com/3275#comments</comments>
		<pubDate>Sat, 01 Apr 2017 12:19:26 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[react-router]]></category>
		<category><![CDATA[v4]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3275</guid>
		<description><![CDATA[작년 Pre-release alpha시절에 한번 자료를 만든적이 있지만 올해초에 정식 릴리즈되면서 바뀌어도 너무 많이바뀌어버려서 이렇게 자료를 새로 만들었습니다. 흔히 사용되는 기능들을 대부분 다뤄보려다보니 생각보다 강의가 길어져서 동영상 하단에 타임라인을 추가했으니 참고하세요~

타임라인
00:00 &#8211; 05:25 소개 및 프로젝트 셋업
05:25 &#8211;&#8230;]]></description>
				<content:encoded><![CDATA[작년 Pre-release alpha시절에 한번 자료를 만든적이 있지만 올해초에 정식 릴리즈되면서 바뀌어도 너무 많이바뀌어버려서 이렇게 자료를 새로 만들었습니다. 흔히 사용되는 기능들을 대부분 다뤄보려다보니 생각보다 강의가 길어져서 동영상 하단에 타임라인을 추가했으니 참고하세요~

타임라인
00:00 &#8211; 05:25 소개 및 프로젝트 셋업
05:25 &#8211;&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3275/feed</wfw:commentRss>
		<slash:comments>23</slash:comments>
		</item>
		<item>
		<title>[번역] 리액트하다가 막혔을 때 생각해볼 4가지 질문</title>
		<link>https://velopert.com/3260</link>
		<comments>https://velopert.com/3260#comments</comments>
		<pubDate>Tue, 28 Mar 2017 12:42:17 +0000</pubDate>
		<dc:creator><![CDATA[velopert]]></dc:creator>
				<category><![CDATA[dev.log]]></category>
		<category><![CDATA[React.js]]></category>
		<category><![CDATA[tech.log]]></category>
		<category><![CDATA[react]]></category>
		<category><![CDATA[개발자]]></category>
		<category><![CDATA[문제해결]]></category>
		<category><![CDATA[번역]]></category>

		<guid isPermaLink="false">https://velopert.com/?p=3260</guid>
		<description><![CDATA[웹서핑하다가 저와 비슷한 생각을 하고 있는 블로거의 포스트를 읽게되어 좋은 내용인 것 같아 번역해보았어요.
여기에 있는 내용은 꼭 리액트에 국한되어있는것은 아니니 지나가다가 읽어보시면 좋을 것 같습니다.
&#160;
저는 React 에는, Anti-pattern 은 있어도 Best Practice 는 존재하지 않아야 한다고 생각해요&#8230;]]></description>
				<content:encoded><![CDATA[웹서핑하다가 저와 비슷한 생각을 하고 있는 블로거의 포스트를 읽게되어 좋은 내용인 것 같아 번역해보았어요.
여기에 있는 내용은 꼭 리액트에 국한되어있는것은 아니니 지나가다가 읽어보시면 좋을 것 같습니다.
&nbsp;
저는 React 에는, Anti-pattern 은 있어도 Best Practice 는 존재하지 않아야 한다고 생각해요&hellip;]]></content:encoded>
			<wfw:commentRss>https://velopert.com/3260/feed</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
	</channel>
</rss>
