<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-1172862380341707888</id><updated>2019-03-16T05:36:39.018-07:00</updated><title type='text'>Scala Android blog</title><subtitle type='html'>Less painful Android development with Scala</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://blog.scaloid.org/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default?start-index=26&amp;max-results=25'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>39</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4797124293569640203</id><published>2015-12-28T04:55:00.001-08:00</published><updated>2016-02-11T18:46:18.455-08:00</updated><title type='text'>Scaloid 4.1 is released</title><content type='html'>I just released Scaloid 4.1. This version has two notable changes:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;1. Specify onClick and onLongClick at once&lt;/h3&gt;Normally, most of the buttons does nothing on long click, because programmers doesn&#39;t specifically allocate any behavior on it. In the current touch-input UIs, there are no common visual guide for user to determine something is able to being long touched or not; So I believe that it is better for user that buttons are assigned a default behavior for long touch. However, this was generally not so fun to write:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;def touched() = toast(&quot;hi!&quot;)&lt;br /&gt;SButton(&quot;Touch me&quot;, touched()).onLongClick(touched())&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; From Scaloid 4.1, this can be even more compactly rewritten as:   &lt;pre&gt;&lt;code&gt;SButton(&quot;Touch me&quot;, toast(&quot;hi!&quot;), 0)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The third parameter specifies an interval of repeating calls when it is press-and-hold. If we specify it as &#39;0&#39;, it is called once. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;2. Fix a bug on LocalServiceConnection&lt;/h3&gt;Previously, &lt;code&gt;LocalServiceConnection[S &lt;: LocalService].apply(f: S =&gt; Unit)&lt;/code&gt; gives an instance of dead service when the service is killed and newly created. Now it is fixed and always gives the correct service to the function &lt;code&gt;f&lt;/code&gt;. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Using Scaloid 4.1&lt;/h3&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.11&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;4.1&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;4.1&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4797124293569640203/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2015/12/scaloid-41-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4797124293569640203'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4797124293569640203'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2015/12/scaloid-41-is-released.html' title='Scaloid 4.1 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4373764233169887048</id><published>2015-08-14T08:00:00.000-07:00</published><updated>2015-08-14T08:00:12.494-07:00</updated><title type='text'>Scaloid 4.0 is released</title><content type='html'>Today I release Scaloid 4.0, which includes lots of improvements. &lt;br /&gt; &lt;h1 style=&quot;background-color:#FFFF00&quot;&gt;Incompatible changes&lt;/h1&gt;&lt;h3&gt;Scaloid 4.0 is best with Android API Level 16, while still supports Level 10&lt;/h3&gt;Scaloid 4.0 distribution is compiled with Android API Level 16, still retaining compatibility with Level 10. Accessor methods and deprecation warning is based on API Level 16, so you have to carefully check the availability of API if you target lower version of Android. In our experience on building &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.soundcorset.client.android&quot;&gt;an App for Gingerbread&lt;/a&gt;, currently we found no obstruction that prevents building a Scaloid app for older devices.&lt;br /&gt;&lt;br /&gt;To compile with Scaloid 4.0, you have to specify build time Android API in &lt;code&gt;project.properties&lt;/code&gt; file as &lt;code&gt;android-16&lt;/code&gt; or higher.&lt;br /&gt; &lt;br /&gt;&lt;h3&gt;LocalServiceConnection&lt;/h3&gt;Usual use case of &lt;code&gt;LocalServiceConnection&lt;/code&gt; is:  &lt;pre&gt;&lt;code&gt;val service = new LocalServiceConnection[MyService]&lt;br /&gt;//...&lt;br /&gt;service {&lt;br /&gt;  myService =&gt; // do something with myService&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The implementation of &lt;code&gt;apply()&lt;/code&gt; is changed to:  &lt;pre&gt;&lt;code&gt;def apply[T](f: S =&gt; Unit): Unit = service.fold(onConnected(f))(f)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The block will be executed later if the service is not connected yet. Formally it was just did nothing when the service is not connected yet. This behavior now becomes &lt;code&gt;ifAvailable&lt;/code&gt;. Then all the code using &lt;code&gt;apply(...)&lt;/code&gt; should be changed to &lt;code&gt;ifAvailable(...)&lt;/code&gt;.&lt;br/&gt;&lt;br /&gt; &lt;h3&gt;SArrayAdapter&lt;/h3&gt;Constructor parameter of &lt;code&gt;SArrayAdapter&lt;/code&gt; is now &lt;code&gt;java.util.List&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt;&lt;h3&gt;spinnerDialog&lt;/h3&gt;&lt;code&gt;spinnerDialog&lt;/code&gt; returns &lt;code&gt;Future[ProgressDialog]&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt; &lt;h1 style=&quot;background-color:#FFFF00&quot;&gt;End of incompatible changes&lt;/h1&gt;&lt;br/&gt;&lt;h3&gt;More convenient press-and-hold action&lt;/h3&gt; We provided the press-and-hold action callback from the last release. The sample code below increases the number on the &lt;code&gt;TextView&lt;/code&gt; in every 100 milliseconds:  &lt;pre&gt;&lt;code&gt;val num = STextView(&quot;0&quot;)&lt;br /&gt;SButton(&quot;Increase&quot;).onPressAndHold(100, num.text = (num.text.toString.toInt + 1).toString)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The press-and-holds has separate callback from that of clicks. Often the behavior for a click and press-and-hold are the same. In this case, we have to assign it individually:  &lt;pre&gt;&lt;code&gt;val num = STextView(&quot;0&quot;)&lt;br /&gt;SButton(&quot;Increase&quot;, num.text = (num.text.toString.toInt + 1).toString)&lt;br /&gt;.onPressAndHold(100, num.text = (num.text.toString.toInt + 1).toString)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; This kind of repetition is not looks good. From Scaloid 4.0, we introduce a shorter representation:  &lt;pre&gt;&lt;code&gt;val num = STextView(&quot;0&quot;)&lt;br /&gt;SButton(&quot;Increase&quot;, num.text = (num.text.toString.toInt + 1).toString, 100)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Cleaner and type-safe way to access SharedPreference&lt;/h3&gt;SharedPreference can be accessed in this way: &lt;pre&gt;&lt;code&gt;val executionCount = preferenceVar(0) // default value 0&lt;br /&gt;val ec = executionCount() // read&lt;br /&gt;executionCount() = ec + 1 // write&lt;br /&gt;executionCount.remove() // remove&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; Refer to this post for more details:&lt;br/&gt;&lt;a href=&quot;http://blog.scaloid.org/2015/07/type-safe-sharedpreference.html&quot;&gt;http://blog.scaloid.org/2015/07/type-safe-sharedpreference.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;`here` method&lt;/h3&gt;To attach a view widget to a layout, we have two major way to do it. One is using &lt;code&gt;apply&lt;/code&gt; method of companion object of views: &lt;pre&gt;&lt;code&gt;new SLinearLayout {&lt;br /&gt;  SButton(&quot;Hello&quot;) textColor Color.RED&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The other is creating object with &lt;code&gt;new&lt;/code&gt; keyword, and assign it to the layout using &lt;code&gt;+=&lt;/code&gt; method: &lt;pre&gt;&lt;code&gt;lazy val button = new SButton(&quot;Hello&quot;)&lt;br /&gt;&lt;br /&gt;onCreate {&lt;br /&gt;  contentView = new SLinearLayout {&lt;br /&gt;    this += button&lt;br /&gt;    button textColor Color.RED&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; In Scaloid 4.0, we have another choice: &lt;code&gt;&lt;/code&gt; &lt;pre&gt;&lt;code&gt;lazy val button = new SButton(&quot;Hello&quot;)&lt;br /&gt;&lt;br /&gt;onCreate {&lt;br /&gt;  contentView = new SLinearLayout {&lt;br /&gt;    button.here textColor Color.RED&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; As you see, &lt;code&gt;this +=&lt;/code&gt; is abbreviated with &lt;code&gt;.here&lt;/code&gt;. Because it returns &lt;code&gt;SButton&lt;/code&gt;, method chaining is available.&lt;br/&gt;&lt;br/&gt;Oftentimes, style is applied to widgets, and sometimes we want avoid it for some widget. We provide &lt;code&gt;hereWithoutStyle&lt;/code&gt; method: &lt;pre&gt;&lt;code&gt;lazy val button = new SButton(&quot;Hello&quot;) textColor Color.RED&lt;br /&gt;lazy val redBtn = new SButton(&quot;Hello&quot;) textColor Color.RED&lt;br /&gt;&lt;br /&gt;contentView = new SLinearLayout {&lt;br /&gt;  style {&lt;br /&gt;    case b: Button =&gt; b textColor Color.BLUE&lt;br /&gt;  }&lt;br /&gt;  button.here // blue&lt;br /&gt;  redBtn.hereWithoutStyle // red&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;code&gt;here&lt;/code&gt; method can also be applied to layouts: &lt;pre&gt;&lt;code&gt;contentView = new SVerticalLayout {&lt;br /&gt;  new SLinearLayout {&lt;br /&gt;    SButton(&quot;1&quot;)&lt;br /&gt;    SButton(&quot;2&quot;)&lt;br /&gt;  }.here&lt;br /&gt;  SButton(&quot;3&quot;)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4373764233169887048/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2015/08/scaloid-40-is-released.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4373764233169887048'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4373764233169887048'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2015/08/scaloid-40-is-released.html' title='Scaloid 4.0 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-8010280213977804258</id><published>2015-08-06T23:22:00.001-07:00</published><updated>2015-08-10T23:22:01.311-07:00</updated><title type='text'>StateListDrawable DSL for cleaner button styles.</title><content type='html'>XML is wordy and not programmable. One of the major goal of Scaloid is to replace XMLs with Scala code, to be more concise, type-safe and programmable. Scaloid 4.0-RC2 provides a new way to build &lt;code&gt;StateListDrawable&lt;/code&gt; without XML. For example, given the XML drawable selector:  &lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;br /&gt;&amp;lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&amp;gt;&lt;br /&gt;    &amp;lt;item   android:state_checked=&quot;true&quot;&lt;br /&gt;            android:drawable=&quot;@drawable/drumset_on&quot;/&amp;gt;&lt;br /&gt;    &amp;lt;item   android:state_checked=&quot;false&quot;&lt;br /&gt;            android:drawable=&quot;@drawable/drumset_off&quot;/&amp;gt;&lt;br /&gt;&amp;lt;/selector&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;This can be written with &lt;code&gt;SStateListDrawable&lt;/code&gt; as shown here:  &lt;pre&gt;&lt;code&gt;new SStateListDrawable {&lt;br /&gt;  +=(R.drawable.drumset_off, -SELECTED)&lt;br /&gt;  +=(R.drawable.drumset_on, SELECTED)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; It is definitely much cleaner and programmable. For example, we can write a program that returns a single-colored drawable for buttons:  &lt;pre&gt;&lt;code&gt;def c(color: Int) = new ColorDrawable(color)&lt;br /&gt;&lt;br /&gt;def btn(normal:Int, pressed:Int) = new SStateListDrawable {&lt;br /&gt;  +=(c(pressed), PRESSED)&lt;br /&gt;  +=(c(Color.LTGRAY), -ENABLED)&lt;br /&gt;  +=(c(normal))&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; We pass normal color and pressed color in an &lt;code&gt;Int&lt;/code&gt; type color code. We can further think that pressed color can be automatically determined by a normal color; It is really easy to implement:  &lt;pre&gt;&lt;code&gt;def btn(normal:Int): SStateListDrawable = btn(normal, pressedColor(normal))&lt;/code&gt;&lt;/pre&gt; &lt;code&gt;SStateListDrawable&lt;/code&gt; is included in Scaloid library, and the implementation of &lt;code&gt;btn&lt;/code&gt; and &lt;code&gt;pressedColor&lt;/code&gt; implemented in &lt;code&gt;org.scaloid.util.Styles&lt;/code&gt;, which is included in Scaloid-util package.&lt;br/&gt;&lt;br/&gt;The implementation is quite straightforward, take a look at the code, and you can easily have a conception about this idea:&lt;br/&gt;&lt;br/&gt;&lt;a href =&quot;https://github.com/pocorall/scaloid/blob/4.0-RC2/scaloid-common/src/main/scala/org/scaloid/common/app.scala#L343&quot;&gt;Source of SStateListDrawable (Scaloid package)&lt;/a&gt;&lt;br/&gt;&lt;a href =&quot;https://github.com/pocorall/scaloid/blob/72efb0ce049081d8697c597cf751d1de4592073c/scaloid-util/src/main/scala/org/scaloid/util/Styles.scala#L14&quot;&gt;Source of Styles (Scaloid-util package)&lt;/a&gt;&lt;br/&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/8010280213977804258/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2015/08/statelistdrawable-dsl-for-cleaner.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/8010280213977804258'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/8010280213977804258'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2015/08/statelistdrawable-dsl-for-cleaner.html' title='StateListDrawable DSL for cleaner button styles.'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-83450046110241301</id><published>2015-07-13T07:36:00.000-07:00</published><updated>2015-08-10T23:16:12.758-07:00</updated><title type='text'>Type-safe SharedPreference</title><content type='html'>Scaloid provides &lt;a href=&quot;http://blog.scaloid.org/2013/03/dynamicly-accessing-sharedpreferences.html&quot;&gt;a concise way to access SharedPreference&lt;/a&gt; using type dynamic of Scala language. A sample code that demonstrate it looks like this:  &lt;pre&gt;&lt;code&gt;val pref = Preferences()&lt;br /&gt;val ec = pref.executionCount(0) // read with default value 0&lt;br /&gt;pref.executionCount = ec + 1 // write&lt;br /&gt;pref.remove(&quot;executionCount&quot;) // remove&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; It is clearly better than old-Android-API, but it still has some limitations:  &lt;ul&gt;&lt;li&gt;&lt;b&gt;No compile-time name checks&lt;/b&gt;&lt;br/&gt;If there are a typo on the key name of the preferences, compiler does not warn you. It will be a nightmare if some preference name is used in multiple places and only one has a typo.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Key names should be a Scala symbol name&lt;/b&gt;&lt;br/&gt;For example, a &lt;code&gt;key.name@with:special#chars&lt;/code&gt; cannot be accessed with Scala type dynamic&lt;/li&gt;&lt;li&gt;&lt;b&gt;Inconsistencies with method and preference access&lt;/b&gt;&lt;br/&gt;In the above example, &lt;code&gt;pref.remove(...)&lt;/code&gt; is a pre-defined method call, while &lt;code&gt;pref.executionCount(...)&lt;/code&gt; is a preference access. &lt;/li&gt;&lt;/ul&gt; Scaloid 4.0-RC2 contains a new way to access Preferences. Let&#39;s look into it:  &lt;pre&gt;&lt;code&gt;val executionCount = preferenceVar(0) // default value 0&lt;br /&gt;val ec = executionCount() // read&lt;br /&gt;executionCount() = ec + 1 // write&lt;br /&gt;executionCount.remove() // remove&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; It is cleaner, performs compile-time validation, and better semantics. Scala macro accesses the value name to be assigned, &lt;code&gt;executionCount&lt;/code&gt; in this example. If you want a keyname has special characters, we provide an alternative:  &lt;pre&gt;&lt;code&gt;val executionCount = preferenceVar(&quot;execution.count&quot;, 0)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; Preference values does not have a dependency on &lt;code&gt;android.context.Context&lt;/code&gt; when it is created. A &lt;code&gt;Context&lt;/code&gt; is only needed when it is actually being accessed (e.g. reading, writing, removing). So, it can be a property of plain object (static method in Java terms), and can be defined only once: &lt;pre&gt;&lt;code&gt;object Prefs {  // It ensures compile-time name checking&lt;br /&gt;  val executionCount = preferenceVar(0)&lt;br /&gt;  val showTips = preferenceVar(&quot;show-tips&quot;, true)&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class MyActivity extends SActivity {&lt;br /&gt;  // access it anywhere having implicit Context&lt;br /&gt;  if(Prefs.showTips()) displayTips() &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; Let&#39;s compare it with the same code written in plain-old Android API:  &lt;pre&gt;&lt;code&gt;object Prefs { // No idea about types, awful naming convention&lt;br /&gt;  val EXECUTION_COUNT = &quot;executionCount&quot;&lt;br /&gt;  val SHOW_TIPS = &quot;show-tips&quot;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class MyActivity extends SActivity {&lt;br /&gt;  // Wordy and not type-safe&lt;br /&gt;  if(defaultSharedPreference.getBoolean(Prefs.SHOW_TIPS, true)) displayTips() &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The full source code is listed in &lt;a href=&quot;https://github.com/pocorall/scaloid/blob/d1318eae688a1cd13611844f5b0fda1f8eade0e9/scaloid-common/src/main/scala/org/scaloid/common/helpers.scala#L171&quot;&gt;the Scaloid github repository&lt;/a&gt;. This is tested on &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.soundcorset.client.android&quot;&gt;a millionth-downloaded production app, Soundcorset&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/83450046110241301/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2015/07/type-safe-sharedpreference.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/83450046110241301'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/83450046110241301'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2015/07/type-safe-sharedpreference.html' title='Type-safe SharedPreference'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-5378000278996498229</id><published>2015-04-17T23:25:00.001-07:00</published><updated>2015-04-18T04:07:37.042-07:00</updated><title type='text'>Scaloid 4.0 RC1 released</title><content type='html'>Today, I released a release candidate of Scaloid 4.0. This version has several feature additions and a notable change about versioning:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Scaloid 4.0 is best with Android API Level 16, while still supports Level 10&lt;/h3&gt;Scaloid 4.0 distribution is compiled with Android API Level 16, still retaining compatibility with Level 10. Accessor methods and deprecation warning is based on API Level 16, so you have to carefully check the availability of API if you target lower version of Android. In our experience on building &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.soundcorset.client.android&quot;&gt;an App for Gingerbread&lt;/a&gt;, currently we found no obstruction that prevents building a Scaloid app for older devices.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Notes for incompatible changes&lt;/h3&gt;To compile with Scaloid 4.0, you have to specify build time Android API in &lt;code&gt;project.properties&lt;/code&gt; file as &lt;code&gt;android-16&lt;/code&gt; or higher.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.11&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;4.0-RC1&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;4.0-RC1&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/5378000278996498229/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2015/04/scaloid-40-rc1-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/5378000278996498229'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/5378000278996498229'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2015/04/scaloid-40-rc1-released.html' title='Scaloid 4.0 RC1 released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-178337333412842126</id><published>2014-10-30T07:15:00.000-07:00</published><updated>2015-01-17T20:01:35.167-08:00</updated><title type='text'>Scaloid 3.6 is released</title><content type='html'>Today I released Scaloid 3.6. This version contains several feature improvements:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;More concise intents&lt;/h3&gt;Intents often has a long list of extra attributes. Your code assigning these attributes should looks like this:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;new Intent().putExtra(&quot;valueA&quot;, valueA).putExtra(&quot;valueB&quot;, valueB).putExtra(&quot;valueC&quot;, valueC)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;This is a shame. Using Scala macros, I made a new function &lt;code&gt;put(Any*)&lt;/code&gt; on &lt;code&gt;Intent&lt;/code&gt;, that can be used like this:  &lt;pre&gt;&lt;code&gt;new Intent().put(valueA, valueB, valueC)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;&lt;br /&gt; &lt;h3&gt;Intents can be started&lt;/h3&gt;To start an activity from the intent above, we are writing like this:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;startActivity(SIntent[MyActivity].put(valueA, valueB, valueC))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;This is concise, but not really readable. From this version, we can rewrite it:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;new Intent().put(valueA, valueB, valueC).start[MyActivity]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; This looks more natural because it can be translated one-to-one in plain English:  &lt;pre&gt;&lt;br /&gt;Create a new Intent, and put values A, B, and C. Then, start the MyActivity.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt; &lt;h3&gt;Wrap or fill&lt;/h3&gt;I found that I am using layout properties &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt; very frequently. Because layout properties should written in &lt;code&gt;&lt;&lt;...&gt;&gt;&lt;/code&gt; blocks, we have a lot of &lt;code&gt;&lt;&lt;.wrap.&gt;&gt;&lt;/code&gt; and &lt;code&gt;&lt;&lt;.fill.&gt;&gt;&lt;/code&gt; in our code. These idioms makes sense in terms of consistency, but not very pleasing. Because Scaloid is not stingy with providing shorthands, I dropped out &lt;code&gt;&lt;&lt;...&gt;&gt;&lt;/code&gt; from it.&lt;br /&gt;&lt;br /&gt;Now we can specify &#39;wrap-ness&#39; of a TextView like this: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;textView.wrap&lt;/code&gt;&lt;/pre&gt;This looks trivial at first. However, think about how many times you are using it.&lt;br /&gt;&lt;br /&gt;Additionally, we provide functions &lt;code&gt;fw&lt;/code&gt; and &lt;code&gt;wf&lt;/code&gt;, that is equivalent to &lt;code&gt;&lt;&lt;(FILL_PARENT, WRAP_CONTENT).&gt;&gt;&lt;/code&gt; and &lt;code&gt;&lt;&lt;(WRAP_CONTENT, FILL_PARENT).&gt;&gt;&lt;/code&gt; respectively.&lt;br /&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;h3&gt;Drops support Scala 2.10&lt;/h3&gt;Scaloid 3.6 is built on Scala 2.11.3, so you can use it with other Scala 2.11.x versions. From this version, I drops Scala 2.10 support to use full potential of recent improvements on macros.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Building Scala 2.11.3 on Android&lt;/h3&gt;I&#39;ve found that building Android apps with Scala 2.11.3 (and 2.11.4) results more proguard warning, that prevents Android projects from being built. The error messages are:&lt;br /&gt;&lt;pre class=&quot;hljs&quot;&gt;&lt;br /&gt;Warning: scala.collection.SeqLike$$anon$1: can&#39;t find enclosing method &#39;scala.collection.mutable.Map occCounts(scala.collection.SeqLike,scala.collection.Seq)&#39; in program class scala.collection.SeqLike&lt;br /&gt;Warning: scala.collection.immutable.MapProxy$$anon$1: can&#39;t find enclosing method &#39;scala.collection.immutable.MapProxy newProxy(scala.collection.immutable.MapProxy,scala.collection.immutable.Map)&#39; in program class scala.collection.immutable.MapProxy&lt;br /&gt;Warning: scala.collection.immutable.SetProxy$$anon$1: can&#39;t find enclosing method &#39;scala.collection.immutable.SetProxy newProxy(scala.collection.immutable.SetProxy,scala.collection.immutable.Set)&#39; in program class scala.collection.immutable.SetProxy&lt;br /&gt;Warning: scala.collection.parallel.ParMapLike$$anon$3: can&#39;t find enclosing method &#39;scala.collection.parallel.IterableSplitter scala$collection$parallel$ParMapLike$$keysIterator(scala.collection.parallel.ParMapLike,scala.collection.parallel.IterableSplitter)&#39; in program class scala.collection.parallel.ParMapLike&lt;br /&gt;Warning: scala.collection.parallel.ParMapLike$$anon$4: can&#39;t find enclosing method &#39;scala.collection.parallel.IterableSplitter scala$collection$parallel$ParMapLike$$valuesIterator(scala.collection.parallel.ParMapLike,scala.collection.parallel.IterableSplitter)&#39; in program class scala.collection.parallel.ParMapLike&lt;br /&gt;Note: there were 1 references to unknown classes.&lt;br /&gt;      You should check your configuration for typos.&lt;br /&gt;      (http://proguard.sourceforge.net/manual/troubleshooting.html#unknownclass)&lt;br /&gt;Note: there were 2 classes trying to access generic signatures using reflection.&lt;br /&gt;      You should consider keeping the signature attributes&lt;br /&gt;      (using &#39;-keepattributes Signature&#39;).&lt;br /&gt;      (http://proguard.sourceforge.net/manual/troubleshooting.html#attributes)&lt;br /&gt;Warning: there were 5 unresolved references to program class members.&lt;br /&gt;         Your input classes appear to be inconsistent.&lt;br /&gt;         You may need to recompile the code.&lt;br /&gt;         (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedprogramclassmember)&lt;br /&gt;[trace] Stack trace suppressed: run last android:proguard for the full output.&lt;br /&gt;&lt;/pre&gt;To build it successfully, add &lt;code&gt;&quot;-keepattributes Signature&quot;, &quot;-dontwarn scala.collection.**&quot;&lt;/code&gt; to your proguard options. Please refer to &lt;a href=&quot;https://github.com/pocorall/hello-scaloid-sbt/commit/d1ac185531c022680dd9fe6e53762e89361f13ae&quot;&gt;this commit log on hello-scaloid-git project&lt;/a&gt; that illustrates this patch.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Using Scaloid 3.6.1&lt;/h3&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Update:&lt;/b&gt; Scaloid 3.6 was built on Scala 2.11.3, &lt;a href=&quot;https://issues.scala-lang.org/browse/SI-8899&quot;&gt;that has some bug on its compiler&lt;/a&gt;. I rebuilt Scaloid on Scala 2.11.4 and released it as 3.6.1&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.11&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.6.1-10&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.6.1-10&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/178337333412842126/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/10/scaloid-36-is-released.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/178337333412842126'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/178337333412842126'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/10/scaloid-36-is-released.html' title='Scaloid 3.6 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-6937726599851540938</id><published>2014-05-05T06:58:00.002-07:00</published><updated>2014-05-05T22:08:43.540-07:00</updated><title type='text'>Scaloid 3.4 is released</title><content type='html'>Today I released Scaloid 3.4. This version contains no new features, but reflects important policy changes:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Recommends Scala 2.11&lt;/h3&gt;From this version, Scaloid will be released for Scala 2.11 only. But don&#39;t worry, you can easily build your own with Scala 2.10. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Drops Froyo support&lt;/h3&gt;Last month, we found an &lt;a href=&quot;http://blog.scaloid.org/2014/04/android-api-8-is-incompatible-with.html&quot;&gt;incompatibility between Android API 8 and Scala 2.11&lt;/a&gt;. From this version, we drop support Froyo. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.11&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.4-10&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.4-10&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/6937726599851540938/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/05/scaloid-34-is-released.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6937726599851540938'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6937726599851540938'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/05/scaloid-34-is-released.html' title='Scaloid 3.4 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-7781295564439741562</id><published>2014-04-22T23:25:00.000-07:00</published><updated>2014-04-24T17:33:37.128-07:00</updated><title type='text'>Android API 8 is incompatible with mutable collections from Scala 2.11</title><content type='html'>I&#39;ve found that newly introduced class &lt;code&gt;scala.collection.mutable.AnyRefMap&lt;/code&gt; and &lt;code&gt;mutable.LongMap&lt;/code&gt; are using &lt;code&gt;java.util.Arrays.copyOf(...)&lt;/code&gt;, that is available only on Android API level 9 and above.  This means that your Android app might not work with Froyo devices if you build it with Scala 2.11. Because the current market share of the API level &amp;lt; 9 is less than 1 percent, this limitation is not serious.&lt;br/&gt;&lt;br/&gt;However, if you stick to support older Android devices, here is a workaround:&lt;br/&gt;&lt;ul&gt;&lt;li&gt;Add &lt;code&gt;-dontwarn scala.collection.mutable.**&lt;/code&gt; in your proguard settings.&lt;/li&gt;&lt;li&gt;Do not use &lt;code&gt;scala.collection.mutable.LongMap&lt;/code&gt; and &lt;code&gt;mutable.AnyRefMap&lt;/code&gt;. Make sure these classes not be called in transitive way.&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/7781295564439741562/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/04/android-api-8-is-incompatible-with.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/7781295564439741562'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/7781295564439741562'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/04/android-api-8-is-incompatible-with.html' title='Android API 8 is incompatible with mutable collections from Scala 2.11'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4166761423194259792</id><published>2014-04-20T06:22:00.000-07:00</published><updated>2014-04-20T06:22:14.486-07:00</updated><title type='text'>Scaloid 3.3 is released</title><content type='html'>Today I released Scaloid 3.3. This version achieves some feature enhancements including:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Scala 2.11 support&lt;/h3&gt;Scala 2.11 is out! We release this version of Scaloid in both of Scala 2.10 and 2.11. &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Press-and-Hold action&lt;/h3&gt;&lt;a href=&quot;http://blog.scaloid.org/2014/04/press-and-hold-action-on-android.html&quot;&gt;We support press-and-hold action listener for any subtype of android.view.View object.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Any return type of event listener is accepted &lt;/h3&gt;Please refer to &lt;a href=&quot;https://github.com/pocorall/scaloid/issues/78&quot;&gt;issue #78&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.3-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.3-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4166761423194259792/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/04/scaloid-33-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4166761423194259792'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4166761423194259792'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/04/scaloid-33-is-released.html' title='Scaloid 3.3 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-1654934375073665306</id><published>2014-04-19T20:37:00.000-07:00</published><updated>2014-04-20T06:12:11.786-07:00</updated><title type='text'>Press-and-hold action on Android</title><content type='html'>&lt;div&gt;Sometimes we need to receive repeated callback when a user pressing a button continuously. For example, when we make a number picker, press-and-hold on &quot;+&quot; button will constantly increase the number.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Android does not support this explicitly, but we can handle this behavior with&amp;nbsp;&lt;code&gt;postDelayed&lt;/code&gt;  event. Here is a link to a code snippet doing this:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7938516/continuously-increase-integer-value-as-the-button-is-pressed&quot;&gt;http://stackoverflow.com/questions/7938516/continuously-increase-integer-value-as-the-button-is-pressed&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This works fine, but a little remaining problem is that this code should be encapsulated to be reused in other places. I wrote the following trait doing the encapsulation:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;trait PressAndHoldable {&lt;br /&gt;  def basis: android.view.View&lt;br /&gt;&lt;br /&gt;  class PressAndHoldListener(interval: Int, onPressed: () =&amp;gt; Unit) extends View.OnTouchListener with View.OnLongClickListener {&lt;br /&gt;    var autoIncrementing: Boolean = false&lt;br /&gt;    private val repeatUpdateHandler = new android.os.Handler()&lt;br /&gt;&lt;br /&gt;    override def onTouch(v: View, event: MotionEvent): Boolean = {&lt;br /&gt;      if (event.getAction == MotionEvent.ACTION_UP &amp;amp;&amp;amp; autoIncrementing) {&lt;br /&gt;        autoIncrementing = false&lt;br /&gt;      }&lt;br /&gt;      false&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    override def onLongClick(p1: View): Boolean = {&lt;br /&gt;      autoIncrementing = true&lt;br /&gt;      repeatUpdateHandler.post(new RptUpdater)&lt;br /&gt;      false&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    class RptUpdater extends Runnable {&lt;br /&gt;      override def run() {&lt;br /&gt;        if (autoIncrementing) {&lt;br /&gt;          onPressed()&lt;br /&gt;          repeatUpdateHandler.postDelayed(this, interval)&lt;br /&gt;        }&lt;br /&gt;      }&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  def onPressAndHold(interval: Int, onPressed: =&amp;gt; Unit) {&lt;br /&gt;    val listener = new PressAndHoldListener(interval, () =&amp;gt; onPressed)&lt;br /&gt;    basis.setOnTouchListener(listener)&lt;br /&gt;    basis.setOnLongClickListener(listener)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;This trait is added on Scaloid 3.3 release. So you can just use onPressAndHold method for any &lt;code&gt;android.view.View&lt;/code&gt; objects:&lt;/div&gt; &lt;pre&gt;&lt;code&gt;val num = STextView(&quot;0&quot;)&lt;br /&gt;SButton(&quot;Increase&quot;).onPressAndHold(100, num.text = (num.text.toString.toInt + 1).toString)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; </content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/1654934375073665306/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/04/press-and-hold-action-on-android.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1654934375073665306'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1654934375073665306'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/04/press-and-hold-action-on-android.html' title='Press-and-hold action on Android'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4797171244232535722</id><published>2014-02-01T07:41:00.001-08:00</published><updated>2014-03-03T16:28:23.157-08:00</updated><title type='text'>Scaloid 3.2 is released</title><content type='html'>Today I released Scaloid 3.2. This version achieves some feature enhancements including:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Properly handle TableLayout&lt;/h3&gt;&lt;a href=&quot;https://github.com/pocorall/scaloid/issues/68&quot;&gt;https://github.com/pocorall/scaloid/issues/68&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Enriched android.database.Cursor&lt;/h3&gt;&lt;a href=&quot;http://blog.scaloid.org/2014/02/simple-enhancements-on-accessing.html&quot;&gt;Now we can access database in more functional style.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;px2sp and px2dip&lt;/h3&gt;We can simply convert pixel unit into sp unit or dip unit. &lt;br /&gt;&lt;pre&gt;&lt;code&gt;32.px2dip  // convert 32 pixel into dip unit&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Scaloid is released to central maven repository.&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.2-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.2-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4797171244232535722/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/02/scaloid-32-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4797171244232535722'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4797171244232535722'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/02/scaloid-32-is-released.html' title='Scaloid 3.2 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-6293422318671978518</id><published>2014-02-01T06:51:00.000-08:00</published><updated>2014-03-03T16:25:42.875-08:00</updated><title type='text'>Simple enhancements on accessing Android built-in Sqlite</title><content type='html'>Functional programming rocks. However, legacy Java libraries prevent us to stay in such an ideal world. The job objective of Scaloid is to help write Android code in more elegant style. Although Scaloid doing good job on layout building, I haven&#39;t do much things about databases yet.&lt;br/&gt;&lt;br/&gt;There are many DB frameworks for Scala. If you writing an app relying on DB extensively, I recommend to use one of them. But when you are using the built-in Sqlite just for storing some casual data, it is not a bad idea that using Android APIs for database access. The biggest problem in this case is that the code is not neat, because of its API architecture. Let&#39;s see a common example:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def readDailyPractice(query: String, params: Array[String]) = {&lt;br /&gt;  var dailyTime: List[DailyPractice] = List()&lt;br /&gt;  val c = getReadableDatabase.rawQuery(query, params)&lt;br /&gt;  try {&lt;br /&gt;    while (c.moveToNext()) {&lt;br /&gt;      dailyTime = dailyTime :+ &lt;br /&gt;        new DailyPractice(c.getString(0), c.getString(1), c.getLong(2))&lt;br /&gt;    } &lt;br /&gt;  } finally c.close()&lt;br /&gt;  dailyTime&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;We have to use variable for the return object because the &lt;code&gt;android.database.Cursor&lt;/code&gt; does not provide Scala-compatible iterator. Another clutter is &lt;code&gt;close()&lt;/code&gt; call in try-finally section. This can be reduced in more functional-style:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def readDailyPractice(query: String, params: Array[String]) = &lt;br /&gt;  getReadableDatabase.rawQuery(query, params).closeAfter(_.map(c =&gt; &lt;br /&gt;    new DailyPractice(c.getString(0), c.getString(1), c.getLong(2)).toList)&lt;br /&gt;  )&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;By declaring &lt;code&gt;implicit def cursor2RichCursor(c: Cursor) = new RichCursor(c)&lt;/code&gt;, or extending the trait &lt;code&gt;org.scaloid.common.DatabaseImplicits&lt;/code&gt; to your class, The &lt;code&gt;android.database.Cursor&lt;/code&gt; implicitly converted into &lt;code&gt;RichCursor&lt;/code&gt;, which implements &lt;code&gt;Iterable[Cursor]&lt;/code&gt;. Now, we can use many useful iterator methods such as map, foreach, and foldLeft.&lt;br/&gt;&lt;br/&gt;I also introduce a function &lt;code&gt;closeAfter[T](body: RichCursor =&gt; T):T&lt;/code&gt; that closes the cursor after evaluating its parameter.&lt;br/&gt;&lt;br/&gt;One of the important thing that can be missed is to convert the mapped result into a List. &lt;code&gt;Iterator.map&lt;/code&gt; returns another Iterator that evaluate the original iterator(RichCursor in this case) on demand. The implementation of &lt;code&gt;Iterator.map&lt;/code&gt; looks like this:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def map[B](f: A =&gt; B): Iterator[B] = new AbstractIterator[B] {&lt;br /&gt;  def hasNext = self.hasNext&lt;br /&gt;  def next() = f(self.next())&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;So if we missed to convert the iterator to List or other form, newly created Iterator generated from the mapping will evaluate the Cursor that is already closed, and vomit the exception. This issue is too detailed, and very easy to miss at first. What we just need is iterate each rows and map a row with a domain object, and forget about cursor. So I created a wrapper function that does this mission simply:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def readDailyPractice(query: String, params: Array[String]) = &lt;br /&gt;  getReadableDatabase.rawQuery(query, params).orm(c =&gt; &lt;br /&gt;    new DailyPractice(c.getString(0), c.getString(1), c.getLong(2)))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;As the name of the function implies, it does very simple form of Object-Relation-Mapping.&lt;br/&gt; &lt;br/&gt;In other cases, we often need just one record from the query result. For example, getting count of something, or retrieving some column about a particular user. Even such a simple requirement, we have to write a verbose code as:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def readOneRecord(query: String, params: Array[String], default: String) = &lt;br /&gt;  try {&lt;br /&gt;    val c = getReadableDatabase.rawQuery(query, params)&lt;br /&gt;    if (c.moveToFirst()) c.getString(0) else default&lt;br /&gt;  } finally c.close()&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;I created a helper method &lt;code&gt;toString(defaultVal)&lt;/code&gt; for this purpose. We can rewrite the code above as:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def readOneRecord(query: String, params: Array[String], default: String) = &lt;br /&gt;  getReadableDatabase.rawQuery(query, params).toString(default)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;Other accessors, toShort, toLong, toInt, toFloat, and toDouble is available as well.&lt;br/&gt;&lt;br/&gt;All of these magic can be done by the implicitly converted class &lt;code&gt;RichCursor&lt;/code&gt;. The source code of &lt;code&gt;RichCursor&lt;/code&gt; is very simple.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;class RichCursor(c: Cursor) extends Iterable[Cursor] {&lt;br /&gt;  def iterator = new CursorIterator&lt;br /&gt;&lt;br /&gt;  class CursorIterator extends Iterator[Cursor] {&lt;br /&gt;    def hasNext = c.getPosition &lt; c.getCount - 1&lt;br /&gt;&lt;br /&gt;    def next() = {&lt;br /&gt;      c.moveToNext()&lt;br /&gt;      c&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  def closeAfter[T](body: RichCursor =&gt; T) = try body(this) finally c.close()&lt;br /&gt;&lt;br /&gt;  def orm[T](body: Cursor =&gt; T) = closeAfter(_.map(body).toList)&lt;br /&gt;&lt;br /&gt;  def toLong(default: Long): Long = closeAfter(csr =&gt; if (c.moveToFirst()) c.getLong(0) else default)&lt;br /&gt;&lt;br /&gt;  // definitions of toString, toShort... is straightforward&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;This class is also available on Scaloid 3.2.1&lt;br/&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/6293422318671978518/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2014/02/simple-enhancements-on-accessing.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6293422318671978518'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6293422318671978518'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2014/02/simple-enhancements-on-accessing.html' title='Simple enhancements on accessing Android built-in Sqlite'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-6940036430540386038</id><published>2013-11-28T06:27:00.001-08:00</published><updated>2014-03-03T16:29:02.686-08:00</updated><title type='text'>Scaloid 3.0 is released</title><content type='html'>Today we are pleased to announce Scaloid 3.0. Some new feature highlights are as shown below:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Redesign of LocalServiceConnection&lt;/h3&gt;LocalServiceConnection is redesigned to use &lt;code&gt;Option&lt;/code&gt;, and prevents possibility of &lt;code&gt;NullPointerException&lt;/code&gt;, which was very frequent when accessing service with &lt;code&gt;LocalServiceConnection&lt;/code&gt;.&lt;br/&gt;&lt;br/&gt;This is a &lt;b style=&quot;color:RED&quot;&gt;breaking change&lt;/b&gt; in source code level. Please migrate the code as introduced in a blog post below:&lt;br /&gt;&lt;a href=&quot;http://blog.scaloid.org/2013/11/redesign-of-localserviceconnection.html&quot;&gt;http://blog.scaloid.org/2013/11/redesign-of-localserviceconnection.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Changed SImageView(r: Int) to SImageView(r: Drawable)&lt;/h3&gt;We believe that source level compatibility is not broken. However, rebuild is required because the parameter signature is changed.&lt;br/&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/pocorall/scaloid/commit/4f708eb4017b848a1f6ae5d542435b61781473fe&quot;&gt;https://github.com/pocorall/scaloid/commit/4f708eb4017b848a1f6ae5d542435b61781473fe&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;SPaint support&lt;/h3&gt;We added an initial attempt to embrace graphics feature of Android API. Please refer to  &lt;a href=&quot;http://blog.scaloid.org/2013/11/usage-driven-design-choosing-parameters.html&quot;&gt;this blog post&lt;/a&gt; for a design principle behind this addition.&lt;br/&gt;&lt;br/&gt;&lt;a href=&quot;https://github.com/pocorall/scaloid/commit/b0dc224935a9a4c2133d0a5404a72646f04d0215&quot;&gt;https://github.com/pocorall/scaloid/commit/b0dc224935a9a4c2133d0a5404a72646f04d0215&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.0-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.0-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/6940036430540386038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/11/scaloid-30-is-released.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6940036430540386038'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6940036430540386038'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/11/scaloid-30-is-released.html' title='Scaloid 3.0 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-7588095845965706838</id><published>2013-11-17T00:06:00.000-08:00</published><updated>2014-03-03T16:27:42.802-08:00</updated><title type='text'>Usage driven design - choosing parameters</title><content type='html'>Scaloid is originally made to improve my daily life that codes Android apps. Although Scaloid relies on some core design principles that is behind of automatic wrapper generator, sometimes code can be improved from some heuristics. For example, I found that my code has several functions much like this:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def createMyPaint(): Paint = {&lt;br /&gt;    val p = new Paint()&lt;br /&gt;    p.setColor(0xffff6666)&lt;br /&gt;    p.setTextSize(14.sp)&lt;br /&gt;    p&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;Soon I added a wrapper class of &lt;code&gt;android.graphics.Paint&lt;/code&gt; to Scaloid. Then the code above is improved as:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def createMyPaint() = SPaint().color(0xffff6666).textSize(14.sp)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;All of my codes and &lt;a href=&quot;https://www.google.com/webhp?hl=ko#q=android+%22new+paint()%22&amp;safe=off&quot;&gt;a Google search&lt;/a&gt; reveals that &lt;code&gt;setColor()&lt;/code&gt; is always called after a new Paint instance is initialized. It is very natural to think about a color when we tried to paint something. So I added it as the first parameter of the method &lt;code&gt;SPaint.apply()&lt;/code&gt;; then the code can be rewritten as:&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def createMyPaint() = SPaint(0xffff6666).textSize(14.sp)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;We have reached the minimum code as possible.&lt;br/&gt;&lt;br/&gt;This feature is shipped with Scaloid 3.0-M2. You can include this version of Scaloid into a maven project by:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;3.0-8-M2&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.0-8-M2&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/7588095845965706838/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/11/usage-driven-design-choosing-parameters.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/7588095845965706838'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/7588095845965706838'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/11/usage-driven-design-choosing-parameters.html' title='Usage driven design - choosing parameters'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-1331293635028646664</id><published>2013-11-15T05:50:00.000-08:00</published><updated>2014-03-04T00:41:55.426-08:00</updated><title type='text'>Redesign of LocalServiceConnection</title><content type='html'>For the current version of Scaloid, the type of &lt;code&gt;LocalServiceConnection.service&lt;/code&gt; is &lt;code&gt;[S &amp;lt;: LocalService]&lt;/code&gt;. This value is null if the service is not yet connected. So it is exposed to the possibility of &lt;code&gt;NullPointerException&lt;/code&gt;. To avoid the exception, users must check that the service is connected, as shown below:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;class MyService extends LocalService {&lt;br /&gt;  def getNumber(): Int = 3&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Activity extends SActivity {&lt;br /&gt;  val number = new LocalServiceConnection[MyService]&lt;br /&gt;&lt;br /&gt;  def onButtonClick(v:View) {&lt;br /&gt;    val num = if(number.connected) number.service.getNumber() else 0&lt;br /&gt;    doSomethingWith(num)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The problem is that the checking is very easy to forget. So I changed the type of &lt;code&gt;LocalServiceConnection.service&lt;/code&gt; to &lt;code&gt;Option[S]&lt;/code&gt;, so that the possibility of NPE goes away. Moreover, I added some additional helper methods that decreases clutters from your code:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;def onButtonClick(v:View) {&lt;br /&gt;  val num = number(_.getNumber(), 0)&lt;br /&gt;  doSomethingWith(num)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The method &lt;code&gt;LocalServiceConnection.apply[T](f: S =&amp;gt; T, defaultVal: T): T&lt;/code&gt;&amp;nbsp;returns the result of the function f if the service is connected, and returns &lt;code&gt;defaultVal&lt;/code&gt; otherwise. This is far more cleaner than the previous one.&lt;br /&gt;&lt;br /&gt;If we don&#39;t want to return something, and therefore we don&#39;t have any default value, we can use it as:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;def onButtonClick(v:View) {&lt;br /&gt;  number(s =&amp;gt; doSomethingWith(s.getNumber()))&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;We often tests some condition and evaluates different expression according to the condition:&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def onButtonClick(v:View) {&lt;br /&gt;  val result = if(number(_.getNumber(), 0) &gt; 10) &lt;br /&gt;                 &quot;10 &lt; &quot; + number(_.getNumber()) else &quot;fail&quot;&lt;br /&gt;  doSomethingWith(result)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;It can also be reduced to:&lt;br/&gt;&lt;pre&gt;&lt;code&gt;def onButtonClick(v:View) {&lt;br /&gt;  val result = number(_.getNumber() &gt; 10, &quot;10 &lt; &quot; + _.getNumber(), &quot;fail&quot;)&lt;br /&gt;  doSomethingWith(result)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;Because we have a breaking change, this feature will be shipped with Scaloid 3.0. You can evaluate this feature from the first milestone release. For a maven project:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&gt;org.scaloid&lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&gt;3.0-8-M1&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or for an sbt project:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;3.0-8-M1&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/1331293635028646664/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/11/redesign-of-localserviceconnection.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1331293635028646664'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1331293635028646664'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/11/redesign-of-localserviceconnection.html' title='Redesign of LocalServiceConnection'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-2082684603914340970</id><published>2013-11-13T21:24:00.000-08:00</published><updated>2014-08-30T01:07:16.241-07:00</updated><title type='text'>Using scala.concurrent.Future on Android</title><content type='html'>From Scala 2.10, a concurrent execution function &lt;code&gt;scala.concurrent.ops.spawn&lt;/code&gt; is deprecated, replaced with &lt;code&gt;scala.concurrent.Future&lt;/code&gt;, and will be removed from Scala 2.11.&lt;br /&gt;&lt;br /&gt;I rewrote my app with &lt;code&gt;scala.concurrent.Future&lt;/code&gt; as an &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;official Scala documentation&lt;/a&gt; suggests: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;import ExecutionContext.Implicits.global&lt;br /&gt;Future {&lt;br /&gt;// ...&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;However, after I uploaded the app to Google Play, I received a ton of crash report:  &lt;br /&gt;&lt;pre&gt;&lt;code&gt;java.lang.ExceptionInInitializerError&lt;br /&gt;at scala.concurrent.impl.ExecutionContextImpl.createExecutorService(ExecutionContextImpl.scala:77)&lt;br /&gt;at scala.concurrent.impl.ExecutionContextImpl.&amp;lt;init&amp;gt;(ExecutionContextImpl.scala:28)&lt;br /&gt;at scala.concurrent.ExecutionContext$Implicits$.global$lzycompute(ExecutionContext.scala:63)&lt;br /&gt;at scala.concurrent.ExecutionContext$Implicits$.global(ExecutionContext.scala:63)&lt;br /&gt;at com.soundcorset.client.android.SoundcorsetService$Metronome.start(SoundcorsetService.scala:38)&lt;br /&gt;...&lt;br /&gt;Caused by: java.lang.Error: java.lang.NoSuchFieldException: parkBlocker&lt;br /&gt;at scala.concurrent.forkjoin.ForkJoinPool.&amp;lt;clinit&amp;gt;(ForkJoinPool.java:2852)&lt;br /&gt;... 20 more&lt;br /&gt;Caused by: java.lang.NoSuchFieldException: parkBlocker&lt;br /&gt;at java.lang.ClassCache.findFieldByName(ClassCache.java:510)&lt;br /&gt;at java.lang.Class.getDeclaredField(Class.java:683)&lt;br /&gt;at scala.concurrent.forkjoin.ForkJoinPool.&amp;lt;clinit&amp;gt;(ForkJoinPool.java:2847)&lt;br /&gt;... 20 more&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Scala library has its own copy of &lt;code&gt;ForkJoinPool&lt;/code&gt; implementation, which includes dynamic invocations, that is &lt;code&gt;parkBlocker&lt;/code&gt; in this case. Unfortunately, some Android devices does not have this method, so we&#39;ve got this awful crash report.&lt;br /&gt;&lt;br /&gt;The solution is very simple: Do not use &lt;code&gt;ExecutionContext.Implicits.global&lt;/code&gt;. Declare a custom implicit ExecutionContext instead. For example:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;implicit val exec = ExecutionContext.fromExecutor(&lt;br /&gt;  new ThreadPoolExecutor(100, 100, 1000, TimeUnit.SECONDS,&lt;br /&gt;    new LinkedBlockingQueue[Runnable]))&lt;br /&gt;&lt;br /&gt;Future {&lt;br /&gt;// ...&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;This works perfect in production. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;EDIT:&lt;/b&gt; If the minimum API level of your app is above 11, consider using &lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html#THREAD_POOL_EXECUTOR&quot;&gt;AsyncTask.THREAD_POOL_EXECUTOR&lt;/a&gt; instead of making your own thread executor: &lt;pre&gt;&lt;code&gt;implicit val exec = ExecutionContext.fromExecutor(&lt;br /&gt;  AsyncTask.THREAD_POOL_EXECUTOR)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Thanks &lt;a href=&quot;https://plus.google.com/+NiklasKlein-taig&quot;&gt;Niklas Klein&lt;/a&gt; for this suggestion.  </content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/2082684603914340970/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/11/using-scalaconcurrentfuture-in-android.html#comment-form' title='13 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/2082684603914340970'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/2082684603914340970'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/11/using-scalaconcurrentfuture-in-android.html' title='Using scala.concurrent.Future on Android'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>13</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-550545142730308767</id><published>2013-11-10T08:42:00.003-08:00</published><updated>2014-03-04T00:44:50.695-08:00</updated><title type='text'>Scaloid 2.5 is released</title><content type='html'>We announce Scaloid 2.5, which is a maintenance release.&lt;br /&gt;&lt;br /&gt;This version includes screen dimension queries (org.scaloid.util.Configuration) for multiple device configuration.&lt;br /&gt;&lt;br /&gt;You can include this version of Scaloid into a maven project by:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.5-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by:   &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.5-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Next major release will be 3.0, preceded by several milestone releases.</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/550545142730308767/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/11/scaloid-25-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/550545142730308767'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/550545142730308767'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/11/scaloid-25-is-released.html' title='Scaloid 2.5 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4755812419697152246</id><published>2013-09-18T22:48:00.000-07:00</published><updated>2014-03-04T00:46:32.164-08:00</updated><title type='text'>Unit of measurement of TextView.setTextSize()</title><content type='html'>The &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.soundcorset.client.android&quot;&gt;Soundcorset metronome and tuner&lt;/a&gt;, in which I wrote it with Scaloid, is keep growing and hits 70,000 downloads. Until recently, it has a strange problem that it displays very large text for some devices, so that some button texts are clipped away out of the layout. After some code investigation, I found that it is very tricky pitfall because the code does not seems to have any problem at first:  &lt;pre&gt;&lt;code&gt;STextView(&quot;Hello&quot;).textSize(20 sp)  // not correct!&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; The unit specification like &lt;code&gt;20 sp&lt;/code&gt; is very common in Scaloid. The implicit function &lt;code&gt;sp&lt;/code&gt; converts the number from the sp unit to the pixel unit. The code above looks fine because the most of the Android API receives a size as the pixel unit.  But there was a single exception. The method &lt;code&gt;TextView.setTextSize(float)&lt;/code&gt; does not receives a size as the pixel unit, it receives sp unit instead. It may cause a mistake because the most of other APIs handles a size as the pixel unit, even in &lt;code&gt;TextView.getTextSize()&lt;/code&gt;!!!  So I overridden &lt;code&gt;STextView.textSize&lt;/code&gt; so that the APIs have consistency in pixel units:  &lt;pre&gt;&lt;code&gt;@inline def textSize  (p: Int) =  textSize_=(p)&lt;br /&gt;@inline def textSize_=(p: Int) = { &lt;br /&gt;  basis.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, p)&lt;br /&gt;  basis &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; Now we can safely use the method &lt;code&gt;textSize&lt;/code&gt; with the implicit unit conversions:  &lt;pre&gt;&lt;code&gt;STextView(&quot;Hello&quot;).textSize(20 sp)  // correct :-D&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;a href=&quot;https://github.com/pocorall/scaloid/commit/bea58f2ce0fde16d8a2822089c1f6eac75ad5fb0&quot;&gt;I patched the current snapshot&lt;/a&gt;, and it will be available at the next release of Scaloid. </content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4755812419697152246/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/08/unit-of-measurement-of.html#comment-form' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4755812419697152246'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4755812419697152246'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/08/unit-of-measurement-of.html' title='Unit of measurement of TextView.setTextSize()'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-8745740636043587578</id><published>2013-09-01T19:08:00.000-07:00</published><updated>2014-03-04T00:51:07.540-08:00</updated><title type='text'>Syntactic sugar for multiple device configuration</title><content type='html'>The most common question about Scaloid that I received is that how to adapt multiple device configuration.&lt;br /&gt;&lt;br /&gt; Basically, a layout written in Scaloid is just an ordinary Scala code, so you can just freely composite the layout according to the device configuration: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;if(width &amp;gt; 900 dip) STextView(&quot;The display is wider than 900 dips!&quot;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;This is simple, concise and intuitive in compared to XML description. Moreover, this promotes the &#39;&lt;a href=&quot;http://en.wikipedia.org/wiki/Responsive_web_design&quot;&gt;responsive design&lt;/a&gt;&#39;, which adapts various screen dimensions with single layout description. &lt;br /&gt;&lt;br /&gt;The only problem was that we have to manually prepare required variables, such as &lt;code&gt;width&lt;/code&gt; in the example above. To address this issue, I wrote a package of helper methods that can be used to determine device configurations such as screen layout and resolution in dot-per-inch. All you need is just importing &lt;code&gt;org.scaloid.util.Configuration._&lt;/code&gt;. &lt;br /&gt;&lt;pre&gt;&lt;code&gt;import org.scaloid.util.Configuration._&lt;br /&gt;&lt;br /&gt;if(long) SButton(&quot;This button is shown only for a long screen &quot;&lt;br /&gt;  + &quot;dimension (&quot;+ width + &quot;, &quot; + height + &quot;)&quot;)&lt;br /&gt;if(landscape) this += new SLinearLayout {&lt;br /&gt;  SButton(&quot;Buttons for&quot;)&lt;br /&gt;  SButton(&quot;landscape layout&quot;)&lt;br /&gt;  if(dpi &amp;gt;= HDPI) SButton(&quot;You have a high resolution display!&quot;)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The source code is pretty straightforward. &lt;a href=&quot;https://github.com/pocorall/scaloid/blob/master/scaloid-common/src/main/st/org/scaloid/util/Configuration.scala&quot;&gt;Look at the source code&lt;/a&gt; to figure out how it works.</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/8745740636043587578/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/08/syntactic-sugar-for-multiple-device.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/8745740636043587578'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/8745740636043587578'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/08/syntactic-sugar-for-multiple-device.html' title='Syntactic sugar for multiple device configuration'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-5649968829489437035</id><published>2013-08-05T01:03:00.000-07:00</published><updated>2014-03-04T00:53:24.628-08:00</updated><title type='text'>Scaloid 2.3 is released</title><content type='html'>Today I released Scaloid version 2.3.  This version is a maintenance release that fixes several issues since the latest version. Major improvements include: &lt;br /&gt;&lt;br /&gt;&lt;h3&gt;More convenient and organized constructors&lt;/h3&gt;Scaloid provided the two-argument &lt;code&gt;apply()&lt;/code&gt; function for the object SButton; The first argument represents the text, and the second represents onClick behavior. &lt;pre&gt;&lt;code&gt;val button = SButton(&quot;Greet&quot;, toast(&quot;hello&quot;))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;In this version, this kind of initialization is generalized to cover constructors of every classes that inherits &lt;code&gt;TextView&lt;/code&gt;. For example: &lt;pre&gt;&lt;code&gt;val textView = new STextView(&quot;Greet&quot;, toast(&quot;hello&quot;))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Scaloid also provides concise initialization functions(in both constructor and apply method) for the classes that inherits &lt;code&gt;ImageView&lt;/code&gt;. For example: &lt;pre&gt;&lt;code&gt;val imageView = new SImageView(R.drawable.greet, toast(&quot;hello&quot;))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt; &lt;h3&gt;More general constructors for SArrayAdapter&lt;/h3&gt;Please refer to the github issues &lt;a href=&quot;https://github.com/pocorall/scaloid/issues/57&quot;&gt;#57&lt;/a&gt; and &lt;a href=&quot;https://github.com/pocorall/scaloid/issues/58&quot;&gt;#58&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;...and several minor improvements on APIs&lt;/h3&gt;&lt;br /&gt; You can include this version of Scaloid into a maven project by:   &lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.3-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; or a sbt project by:   &lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.3-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/5649968829489437035/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/08/scaloid-23-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/5649968829489437035'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/5649968829489437035'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/08/scaloid-23-is-released.html' title='Scaloid 2.3 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-6636251719319416045</id><published>2013-06-23T03:05:00.000-07:00</published><updated>2014-03-04T00:54:58.183-08:00</updated><title type='text'>Scaloid 2.1 is released</title><content type='html'>Today I released Scaloid version 2.1.&lt;br /&gt;&lt;br /&gt;Improvements in this version is shown below:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Fixed a regression related to SArrayAdapter&lt;/li&gt;&lt;li&gt;Uses ClassTag instead of ClassManifest, which is deprecated from Scala 2.10&lt;/li&gt;&lt;li&gt;Improved APIdoc&lt;/li&gt;&lt;li&gt;Covers Android API more completely (added SWebView)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;This version is not binary compatible with previous versions. Please clean rebuild your project to upgrade Scaloid to 2.1.&lt;br /&gt;&lt;br /&gt;You can include this version of Scaloid into a maven project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.1-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.1-8&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/6636251719319416045/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-21-is-released.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6636251719319416045'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6636251719319416045'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-21-is-released.html' title='Scaloid 2.1 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-6515495030406214614</id><published>2013-06-17T03:56:00.000-07:00</published><updated>2014-03-04T00:55:37.480-08:00</updated><title type='text'>Scaloid 2.0 is released</title><content type='html'>Today I released Scaloid 2.0, a new step forward to Scala+Android development.&lt;br /&gt;&lt;br /&gt;This version fixes several regressions that is found since the last release candidate.&lt;br /&gt;&lt;br /&gt;Some of the feature highlights on this version are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Build tool is moved to sbt&lt;/li&gt;&lt;li&gt;New sbt based template generator, in which large part of the generation is automated (thanks guersam)&lt;/li&gt;&lt;li&gt;Therefore Scaloid library covers Android APIs more completely&lt;/li&gt;&lt;li&gt;Source code becomes more modular&lt;/li&gt;&lt;li&gt;Artifact and version&amp;nbsp;naming&amp;nbsp;is changed to sbt-style.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;You can include this version of Scaloid into a maven project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.0-8&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.0-8&quot;&lt;br /&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/6515495030406214614/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-is-released.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6515495030406214614'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/6515495030406214614'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-is-released.html' title='Scaloid 2.0 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-4205750654122056218</id><published>2013-06-08T09:50:00.000-07:00</published><updated>2014-03-04T00:56:05.184-08:00</updated><title type='text'>Scaloid 2.0-RC2 is released</title><content type='html'>Scaloid 2.0-RC2 is released.&lt;br /&gt;&lt;br /&gt;This version fixes several regression bugs from the RC1. I fixed all of the reported bug. Please test it and report issues to &lt;a href=&quot;https://github.com/pocorall/scaloid/issues?direction=desc&amp;amp;state=open&quot; target=&quot;_blank&quot;&gt;github issues page&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Some of the feature highlights on version 2.0 are:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Build tool is moved to sbt&lt;/li&gt;&lt;li&gt;New sbt based template generator, in which large part of the generation is automated (thanks guersam)&lt;/li&gt;&lt;li&gt;Therefore Scaloid library covers Android APIs more completely&lt;/li&gt;&lt;li&gt;Source code becomes more modular&lt;/li&gt;&lt;li&gt;Artifact and version&amp;nbsp;naming&amp;nbsp;is changed to sbt-style.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;You can include this version of Scaloid into a maven project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.0-8-RC2&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.0-8-RC2&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/4205750654122056218/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-rc2-is-released.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4205750654122056218'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/4205750654122056218'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-rc2-is-released.html' title='Scaloid 2.0-RC2 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-1610497700529330684</id><published>2013-06-06T09:33:00.001-07:00</published><updated>2014-03-04T00:56:47.754-08:00</updated><title type='text'>Scaloid 2.0-RC1 is released</title><content type='html'>I just released Scaloid 2.0-RC1 to the central maven repository.&lt;br /&gt;&lt;br /&gt;Thanks to guersam and other contributors, Scaloid progressed large steps toward version 2.0. Some of highlights are listed below:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Build tool is moved to sbt&lt;/li&gt;&lt;li&gt;New sbt based template generator, in which large part of the generation is automated&lt;/li&gt;&lt;li&gt;Therefore Scaloid library covers Android APIs more completely&lt;/li&gt;&lt;li&gt;Source code becomes more modular&lt;/li&gt;&lt;li&gt;Artifact and version&amp;nbsp;naming&amp;nbsp;is changed to sbt-style.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;You can include this version of Scaloid into a maven project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;org.scaloid&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;scaloid_2.10&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;2.0-8-RC1&amp;lt;/version&amp;gt;&lt;br /&gt;&amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;or a sbt project by: &lt;br /&gt;&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;org.scaloid&quot; %% &quot;scaloid&quot; % &quot;2.0-8-RC1&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;We will focus on making the core library more mature, and launching optional libraries based on the new generator.&lt;br /&gt;&lt;br /&gt;Keep thrilling with concise and type-safe Android development!</content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/1610497700529330684/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-rc1-released.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1610497700529330684'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1610497700529330684'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/06/scaloid-20-rc1-released.html' title='Scaloid 2.0-RC1 is released'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-1172862380341707888.post-1779301268055392123</id><published>2013-04-24T22:14:00.003-07:00</published><updated>2014-03-04T00:59:36.314-08:00</updated><title type='text'>Accessing widgets in view classes</title><content type='html'>In conventional Android programming, UI widgets are accessed by using &lt;code&gt;findViewById()&lt;/code&gt; method as shown below:   &lt;pre&gt;&lt;code&gt;var name: EditText = null&lt;br /&gt;&lt;br /&gt;override def onCreate(b: Bundle) {&lt;br /&gt;  super.onCreate(b)&lt;br /&gt;  setContentView(R.layout.main)&lt;br /&gt;&lt;br /&gt;  name = findViewById(R.id.name).asInstanceOf[EditText]&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;def printName() {&lt;br /&gt;  println(&quot;The name is &quot; + name.getText())&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; This causes some major problems:&lt;br/&gt;&lt;br/&gt;&lt;li&gt;&lt;b&gt;Not type-safe&lt;/b&gt;&lt;br/&gt;You have to manually track the type of the widget, and no compile-time guarantee that you did not made any mistake. &lt;/li&gt;&lt;li&gt;&lt;b&gt;The member &lt;code&gt;name&lt;/code&gt; is mutable&lt;/b&gt;&lt;br/&gt;It is better to declare &lt;code&gt;name&lt;/code&gt; as immutable because it refers only one widget. &lt;/li&gt;&lt;li&gt;&lt;b&gt;Possibility of NullPointerException&lt;/b&gt;&lt;br/&gt;Accessing &lt;code&gt;name&lt;/code&gt; before calling &lt;code&gt;onCreate()&lt;/code&gt; summons NPE-the-horrible! &lt;/li&gt;&lt;li&gt;&lt;b&gt;Requires extra XML configurations to maintain&lt;/b&gt;&lt;br/&gt;Use XML layout if you like housekeeping chores. &lt;/li&gt;&lt;br/&gt; In Scaloid, you can rewrite it with:  &lt;pre&gt;&lt;code&gt;var name: SEditText = null&lt;br /&gt;&lt;br /&gt;onCreate {&lt;br /&gt;  contentView = SVerticalLayout {&lt;br /&gt;    name = SEditText(&quot;Default name&quot;)&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;def printName() {&lt;br /&gt;  println(&quot;The name is &quot; + name.text)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; This looks much better, because it is type-safe and eliminates XML configurations. However, the member &lt;code&gt;name&lt;/code&gt; is still a mutable variable. It can be improved as shown below:  &lt;pre&gt;&lt;code&gt;lazy val name = new SEditText(&quot;Default name&quot;)&lt;br /&gt;&lt;br /&gt;onCreate {&lt;br /&gt;  contentView = SVerticalLayout {&lt;br /&gt;    this += name&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;def printName() {&lt;br /&gt;  println(&quot;The name is &quot; + name.text)&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; Now the member &lt;code&gt;name&lt;/code&gt; is a lazy value, therefore the possiblilty of NPE is eliminated as well. </content><link rel='replies' type='application/atom+xml' href='http://blog.scaloid.org/feeds/1779301268055392123/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.scaloid.org/2013/04/accessing-widgets-in-view-classes.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1779301268055392123'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/1172862380341707888/posts/default/1779301268055392123'/><link rel='alternate' type='text/html' href='http://blog.scaloid.org/2013/04/accessing-widgets-in-view-classes.html' title='Accessing widgets in view classes'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>8</thr:total></entry></feed>