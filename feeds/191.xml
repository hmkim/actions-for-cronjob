<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>Lypi의 공부하는 블로그</title>
<link>https://lypicfa.tistory.com/</link>
<description>Life is Your Path Interacting with you.</description>
<language>ko</language>
<pubDate>Mon, 13 May 2019 08:06:50 +0900</pubDate>
<generator>TISTORY</generator>
<managingEditor>Lypi</managingEditor>
<item>
<title>Shader // Vertex.vsh, Pixel.psh, Geo.gsh</title>
<link>https://lypicfa.tistory.com/440</link>
<description>&lt;p&gt;이 카테고리에 포스팅하던 내용이 어디갔는지 못 찾겠다!!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;그러므로 걍 눈에 보이는 쉐이더 파일 중 제일 있어 보이는 것 올림....&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;사실 쉐이더에 대한건 깊게 파는게 아닌 이상 그냥 기본적인 구조만 이해하면 짤 수 있다.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Vertex.vsh&lt;/p&gt;
&lt;pre class=&quot;brush:cpp mipsasm&quot;&gt;&lt;code&gt;struct VS_INPUT
{
	float3 p : POSITION;	   
	float4 c : COLOR;
	float2 t : TEXCOORD;
};
struct VS_OUTPUT
{
	float4 p : SV_POSITION;	 // 시멘틱(의미구조)
	float4 c : COLOR0;
    float2 t : TEXCOORD0;	
};

VS_OUTPUT VS( VS_INPUT vIn )
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	vOut.p = float4(vIn.p.x, vIn.p.y, vIn.p.z, 1.0f);
	vOut.t = vIn.t;
	vOut.c = vIn.c ;
	return vOut;
}
VS_OUTPUT VS2( VS_INPUT vIn )
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	vOut.p = float4(vIn.p.x, vIn.p.y, vIn.p.z, 1.0f);
	vOut.t = vIn.t;
	vOut.c = vIn.c * float4(1,1,0,1);
	return vOut;
}
VS_OUTPUT VS3( VS_INPUT vIn )
{
	VS_OUTPUT vOut = (VS_OUTPUT)0;
	vOut.p = float4(vIn.p.x, vIn.p.y, vIn.p.z, 1.0f);
	vOut.t = vIn.t;
	vOut.c = vIn.c* float4(1,0,0,1);
	return vOut;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pixel.psh&lt;/p&gt;
&lt;pre class=&quot;brush:cpp mipsasm&quot;&gt;&lt;code&gt;Texture2D  g_txTextureA : register(t0);
SamplerState  sample0 : register(s0);

struct VS_OUTPUT
{
	float4 p : SV_POSITION;	
	float4 c : COLOR0;
    float2 t : TEXCOORD0;	
};
struct PS_OUTPUT
{
	float4 c : SV_TARGET;	
};
PS_OUTPUT PS( VS_OUTPUT vIn) 
{
	PS_OUTPUT vOut;
	vOut.c = g_txTextureA.Sample(sample0, vIn.t);
	return vOut;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;brush:cpp verilog&quot;&gt;&lt;code&gt;
struct VS_OUTPUT
{
    float4 p : SV_POSITION;
};

[maxvertexcount(9)]
void GS( triangle VS_OUTPUT input[3], inout TriangleStream TriStream )
{    
    VS_OUTPUT output;
    // 페이스의 중점을 구한다.
    float3 centerPos = (input[0].p.xyz + input[1].p.xyz + input[2].p.xyz)/3.0;
    
    // 정점 당 계산된 중점을 사용하여 페이스를 추가한다.
    for( int i=0; i&amp;lt;3; i++ )
    {
        output.p = input[i].p;       
        TriStream.Append( output );
        
        int iNext = (i+1)%3;
        output.p =  input[iNext].p;        
        TriStream.Append( output );    
            
        output.p =  float4(centerPos,1);      
        TriStream.Append( output );
		TriStream.RestartStrip();
    }
    
    TriStream.RestartStrip();
}
&lt;/code&gt;&lt;/pre&gt;</description>
<category>DirectX</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/440</guid>
<comments>https://lypicfa.tistory.com/440#entry440comment</comments>
<pubDate>Wed, 24 Apr 2019 10:12:26 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 4. Friend</title>
<link>https://lypicfa.tistory.com/439</link>
<description>header.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;cstdlib&gt;
#include &lt;string&gt;
#include &lt;string.h&gt;
#include &lt;tchar.h&gt;
#include &lt;vector&gt;


#define SPA _T(&quot; &quot;)

using std::vector;
using std::string;
using std::stringstream;
using std::getline;
using std::wcout;
using std::endl;
using std::cout;
&lt;/pre&gt;

value.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once
#include &quot;header.h&quot;

class token;

class value // 문자열을 저장하는 리스트 구조 클래스
{
private:
	TCHAR*  m_szValue;	//문자열을 저장하는 변수
	value*  m_pNext;	//다음 노드를 가리키는 포인터.
	friend class token;

	//생성자도 private로 하면 token만이 사용할 수 있는 전용 클래스가 된다.
	value(TCHAR*);
	~value();
};


//템플릿 함수는 일단 패스.
static vector&lt;string&gt;&amp; split(const string &amp;s, char delim, vector&lt;string&gt;&amp; elems)
{
	stringstream ss(s);
	string item;
	while (getline(ss, item, delim))
	{
		elems.push_back(item);
	}
	return elems;
}

static vector&lt;string&gt; split(const string &amp;s, char delim)
{
	vector&lt;string&gt; elems;
	split(s, delim, elems);
	return elems;
}
&lt;/pre&gt;

value.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;value.h&quot;


	value::value(TCHAR* pData)
	{
		//m_szValue에 메모리를 할당하고 자른 문자열 저장
		int iLength = (int)_tcslen(pData) + 1;
		int iSize = sizeof(TCHAR) * iLength;
		this-&gt;m_szValue = new TCHAR[iSize];
		_tcscpy_s(m_szValue, iSize, pData);
		//m_pNext에 nullptr 대입
		m_pNext = nullptr;
	}

	value::~value()
	{
		//할당된 메모리를 해제.
		delete m_szValue;
	}


&lt;/pre&gt;

token.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once
#include &quot;value.h&quot;

//예외 클래스 인듯.
class EXP
{
public:
	void show(TCHAR* pData)
	{
		wcout &lt;&lt; pData;
	}
public:
	EXP() {};
	~EXP() {};
};


//value의 문자열을 잘라서 리스트로 만드는 클래스
class token
{
private:
	value* m_pToken;
	int    m_iSize;
public:
	void   Show();
	void   Show(value* pValue);
	TCHAR* nth_token(int num);

public:
	token();
	token(TCHAR* pData);
	~token();
};


&lt;/pre&gt;

token.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;token.h&quot;

void   token::Show()
{
	// 문자열을 순서대로 출력한다.
	value* pData = m_pToken;
	for (int iCnt = 0; iCnt &lt; m_iSize; iCnt++) {
		wcout &lt;&lt; pData-&gt;m_szValue &lt;&lt; endl;
		pData = pData-&gt;m_pNext;
	}
}

void   token::Show(value* pValue)
{
	//매개변수로 받은 문자열을 자른다.
	TCHAR* pszNextToken = 0;
	TCHAR* temp = _tcstok_s(pValue-&gt;m_szValue, SPA, &amp;pszNextToken);
	if (temp != NULL) {
		m_pToken = new value(temp);
		value* pLink = m_pToken;
		for (m_iSize = 1; temp = _tcstok_s(0, SPA, &amp;pszNextToken); m_iSize++) {
			pLink-&gt;m_pNext = new value(temp);
			pLink = pLink-&gt;m_pNext;
		}
	}
	//자른걸 순서대로 출력한다.
	Show();
}


TCHAR* token::nth_token(int num)
{//지정한 순서의 문자열을 출력한다.
	value* cursor = m_pToken;

	for (int iCnt = 1; iCnt &lt; num; iCnt++) {
		if (cursor != 0) {	cursor = cursor-&gt;m_pNext; 	}
		else             {	return 0; }
	}

	return cursor-&gt;m_szValue;
}

token::token(TCHAR* pData) 
{//매개변수로 받은 문자열을 잘라서 리스트 구조로 저장한다.
	m_iSize = 0;
	TCHAR* temp;
	TCHAR* pszNextToken = 0;

	try {
		//int iNum = 100;
		//int iId = 1;
		//if (iId = 0) { throw(iId); }
		//if (pszNextToken == 0) { //throw (pszNextToken); 
		//	throw EXP(); //exit(1);
		//}
		//iNum /= iId;

		temp = _tcstok_s(pData, SPA, &amp;pszNextToken);
		if (temp != NULL) {
			m_pToken = new value(temp);
			value* pLink = m_pToken;
			for (m_iSize = 1; temp = _tcstok_s(0, SPA, &amp;pszNextToken); m_iSize++) {
				pLink-&gt;m_pNext = new value(temp);
				pLink = pLink-&gt;m_pNext;
			}
		}
	}

	catch (int iNum) {
		wcout &lt;&lt; _T(&quot;Error!&quot;);
	}
	catch (TCHAR* pszNextToken) {
		wcout &lt;&lt; _T(&quot;Error!&quot;);
		throw(pszNextToken);
	}
	catch (EXP&amp; exp) {
		exp.show((TCHAR*)_T(&quot;Error!&quot;));
	}
}

token::token()
{
	m_iSize = 0;
}


token::~token()
{//리스트를 삭제한다.
	value* pDel;
	value* pLink = m_pToken;
	while (pLink != 0) {
		pDel  = pLink;
		pLink = pLink-&gt;m_pNext;
		delete pDel;
	}
}

&lt;/pre&gt;

main.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;token.h&quot;

int main()
{
	TCHAR buffer[] = L&quot;kgca game academy&quot;;

	//방법 1 (금고와 열쇠 관계)
	/*TCHAR buffer[] = L&quot;kgca game academy&quot;;
	value vl(buffer);
	token tk;
	tk.Show();*/

	//방법 2
	try {
		token tk(buffer);
		tk.Show();
#ifndef _UNICODE
		cout &lt;&lt; _T(&quot;Show the 3rd token: &quot;) &lt;&lt; tk.nth_token(3) &lt;&lt; _T(&quot;\n&quot;);
#else
		wcout &lt;&lt; _T(&quot;Show the 3rd token: &quot;) &lt;&lt; tk.nth_token(3) &lt;&lt; _T(&quot;\n&quot;);
#endif
	}

	catch (TCHAR* pData)
	{
		wcout &lt;&lt; _T(&quot;Error&quot;);
	}

	vector&lt;string&gt; str = split(&quot;one:two::three&quot;, ':');
}
&lt;/pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/439</guid>
<comments>https://lypicfa.tistory.com/439#entry439comment</comments>
<pubDate>Wed, 17 Apr 2019 14:18:44 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 3. Operator</title>
<link>https://lypicfa.tistory.com/438</link>
<description>Point.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once
#include &lt;iostream&gt;
using namespace std;

//const char&amp; operator []() const;
//char&amp; operator [] ();
//두 함수는 별개의 함수가 된다. ... const 함수냐 아니냐의 차이.

class pt
{
	static int dynamic;
	int x, y;
public:
	void SetPosition(int _x, int _y);
	void Move(int _x, int _y);
	void Show();

	//포인터 연산자 재정의
	pt* operator-&gt;();
	pt&amp; operator* ();

	//증가 연산자 재정의
	pt operator++();      // ++p1(전위)
	pt operator++(int);  // p1++;(후위)

	// 이항연산자 p3 = p1 + p2
	pt operator+(const pt&amp; np) const;

	// 이항연산자 p3 = p1 + 2, p3 = 2 + p1
	pt operator+(int n) const; // p2=p1*2;
	friend pt operator+(int n, const pt&amp; np); // p2= 2 * p1;
	

	pt &amp;operator=(const pt &amp;pt);

	pt &amp;operator+=(const pt &amp;pt);
	pt &amp;operator+=(int n);

	//의미 없는 장난질
	friend int operator+= (int&amp; n, const pt&amp; np);
	//friend pt&amp; operator+= (int&amp; n, pt&amp; np);

	bool operator==(const pt &amp;pt) const;
	bool operator!=(const pt &amp;pt) const;

	int &amp;operator[](int index);
	void *operator new(size_t size);
	void operator delete(void *p);

	//std::cout &lt;&lt; *pFindA &lt;&lt; *pFindB;
	friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const pt &amp;pt);
	friend istream &amp;operator&gt;&gt;(istream &amp;is, pt &amp;pt);

	void (pt::*m_fp) ();	//함수 포인터 선언

	void Execute() {		//함수 포인터 실행
		if (m_fp != NULL)
		{
			(this-&gt;*m_fp)();
		}
	}
	void operator &gt; (pt* the)
	{
		if (m_fp != NULL)
		{
			(the-&gt;*m_fp)();
		}
	}
public:
	pt();
	pt(int x, int y);
	pt(const pt&amp; obj);

	~pt();

};


&lt;/pre&gt;

Point.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Point.h&quot;

int pt::dynamic = 0;

//이 넷의 기본 형식은 이렇게 정해져 있다. 
pt*   pt::operator-&gt;()              
{ 
	//뭔가 새로운 작업
	return  this; 
}
pt&amp;   pt::operator* ()              
{
	//뭔가 새로운 작업
	return *this; 
}
void* pt::operator new(size_t size) 
{
	cout &lt;&lt; &quot;동적생성된 수 : &quot; &lt;&lt; ++dynamic &lt;&lt; endl;;
	return ::new pt; 
}
void  pt::operator delete(void* p)  
{
	cout &lt;&lt; &quot;동적생성된 수 : &quot; &lt;&lt; --dynamic &lt;&lt; endl;;
	::delete p; 
}

//빡침 사칙연산은 더하기만 하자.

//전위 증가
pt pt::operator++(void) // ++p1
{
	++x, ++y;
	return *this;
}

//후위 증가
pt pt::operator++(int)  // p1--;
{
	pt temp = *this;
	++x, ++y;
	return temp;
}

//같은 타입끼리 연산
pt pt::operator+(const pt &amp;np) const
{
	return pt(x + np.x, y + np.y);
}


//다른 타입과의 연산 p2=p1+2;
pt pt::operator+(int n) const // 
{
	return pt(x + n, y + n);
}

// p2= 2 + p1; (friend함수임) (교환법칙 정의)
pt operator+(int n, const pt &amp;np) 
{
	return pt(np.x + n, np.y + n);
}

//대입 연산자
pt&amp; pt::operator=(const pt &amp;np) {
	x = np.x; y = np.y;
	return *this;
}

//증가 대입 연산자 (같은 타입에 대해서) pt1 += pt2
pt&amp; pt::operator+=(const pt &amp;np)
{
	x += np.x; y += np.y;
	return *this;
}

//증가 대입 연산자 (인트 타입에 대해서) pt1 += int1

pt&amp; pt::operator+=(int n)
{
	x += n; y += n;
	return *this;
}

//int1 += pt1 은 할 수 있을까?
int operator+= (int&amp; n, const pt&amp; np) 
{
	//할 수 있지만 의미가 많이 다르다.
	n += np.x + np.y;
	return n;
}

//int1 += pt1 으로 pt를 리턴해서 pt1에 저장한다면?
//pt&amp; pt::operator+=(int n) 이것과 차이가 없다. 괜히 헷갈리기만 하지.
//pt&amp; operator+= (int&amp; n, pt&amp; np)
//{
//	//할 수 있지만 의미가 많이 다르다.
//	np.x += n; np.y += n;
//	return np;
//}

bool pt::operator==(const pt &amp;pt) const
{	
	return (this-&gt;x == pt.x &amp;&amp; this-&gt;y == pt.y);
	//&amp;&amp; 연산의 결과는 bool값이다.
}

bool pt::operator!=(const pt &amp;pt) const
{
	return !(*this == pt);
	//이미 정의한 == 연산자를 이용하여 정의
}
	 

//인덱싱 연산
int&amp; pt::operator[](int index)
{
	switch (index % 2) {
		case 0: return x; break;
		case 1: return y; break;
	}
}

//입출력 스트림 연산자 재정의.
ostream&amp; operator&lt;&lt;(ostream &amp;os, const pt &amp;np)
{
	os &lt;&lt; &quot;(&quot; &lt;&lt; np.x &lt;&lt; &quot;, &quot; &lt;&lt; np.y &lt;&lt; &quot;)&quot;;
	return os;
}
istream&amp; operator&gt;&gt;(istream &amp;is, pt &amp;np)
{
	is &gt;&gt; np.x;
	is &gt;&gt; np.y;
	return is;
}


void pt::SetPosition(int _x, int _y)
{
	x = _x;
	y = _y;
}
void pt::Move(int _x, int _y)
{
	x += _x;
	y += _y;
}
void pt::Show()
{
	printf(&quot;(%d,%d)\n&quot;, x, y);
}

pt::pt()
{
	cout &lt;&lt; &quot;constructor&quot; &lt;&lt; endl;
}

pt::pt(int x, int y)
{
	this-&gt;x = x;
	this-&gt;y = y;
	cout &lt;&lt; &quot;constructor&quot; &lt;&lt; endl;
}

pt::pt(const pt&amp; obj)
{
	this-&gt;x = obj.x;
	this-&gt;y = obj.y;
	cout &lt;&lt; &quot;복사 생성자&quot; &lt;&lt; endl;
}

pt::~pt()
{
	cout &lt;&lt; &quot;Distructor&quot; &lt;&lt; endl;
}

&lt;/pre&gt;

main.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Point.h&quot;

//함수 포인터 관련 ... 이해가 잘 안됨.
void (pt::*fp) ();
void Execute(pt* the)
{
	if (fp != NULL)
	{
		(the-&gt;*fp)();
	}
}

int main()
{
	pt p1(0, 0), p2, p3, p4;

	p2 = ++p1;
	cout &lt;&lt; p2 &lt;&lt; p1 &lt;&lt; endl;

	p1-&gt;Show();
	(*p1)-&gt;Show();
	pt* pData = new pt();
	pData-&gt;Show();

	p3 = p1++;
	cout &lt;&lt; p3 &lt;&lt; p1 &lt;&lt; endl;

	p4 = p2 + p3;
	cout &lt;&lt; p4 &lt;&lt; endl;
	
	pt p5(10, 20), p6, p7;
	p6 = p5 + 2;
	p7 = 2 + p5;
	cout &lt;&lt; p6 &lt;&lt; p7 &lt;&lt; endl;

	if (p6 == p7) { cout &lt;&lt; &quot;같다&quot; &lt;&lt; endl; }
	if (p6 != p7) { cout &lt;&lt; &quot;다르다&quot; &lt;&lt; endl; }

	cout &lt;&lt; p6[0] &lt;&lt; p6[1] &lt;&lt; endl;

	pt p8;
	cin &gt;&gt; p8; 
	cout &lt;&lt; p8;

	pt* d = new pt;
	d-&gt;SetPosition(10, 10);
	cout &lt;&lt; *d;

	//전역 함수 포인터
	fp = &amp;pt::Show;
	Execute(d);

	//클래스멤버함수 함수포인터
	d-&gt;m_fp = &amp;pt::Show;
	(*d) &gt; &amp;p8;
	d-&gt;Execute();

	delete d;

	return 0;
}
&lt;/pre&gt;</description>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/438</guid>
<comments>https://lypicfa.tistory.com/438#entry438comment</comments>
<pubDate>Wed, 17 Apr 2019 14:07:56 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 2. Region</title>
<link>https://lypicfa.tistory.com/437</link>
<description>
Region.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Point.h&quot;

int main()
{
	Point p1, p2;

	p1.SetPosition(10, 20);	//p1의 좌표 설정
	p2.SetPosition(50, 60); //p2의 좌표 설정

	p1.Move(5, 0);
	p2.Move(0, 5);

	p1.Show();
	p2.Show();

	return 0;
}
&lt;/pre&gt;

Regin.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Region.h&quot;

int Region::notation = Region::POINT_POINT;

Region::Region()
{
	SetRect(0, 0, 0, 0);
	//영역을 0으로 초기화
}

Region::Region(int l, int t, int r, int b)
{
	SetRect(l, t, r, b);
	//영역을 주어진 값으로 초기화
}


Region::~Region()
{
}

void Region::SetRect(int l, int t, int r, int b) 
{
	m_iLeft = l;	//시작점의 x좌표 설정
	m_iTop = t;		//시작점의 y좌표 설정
	m_iRight = r;	//끝점의 x좌표 설정
	m_iBottom = b;	//끝점의 y좌표 설정
}

int			Region::GetWidth() const
{
	return m_iRight - m_iLeft;
}//가로길이 얻기

const int	Region::GetHeight() const
{
	return m_iBottom - m_iTop;
}//세로길이 얻기

void		Region::GetStartPoint(int &amp;x, int &amp;y) const 
{
	x = m_iLeft;
	y = m_iTop;
}	//시작점 얻기

void		Region::GetEndPoint(int &amp;x, int &amp;y) const
{
	x = m_iRight;
	y = m_iBottom;
}//끝점 얻기

void		Region::GetCenterPoint(int &amp;x, int &amp;y) const
{
	x = (m_iLeft + m_iRight) / 2;
	y = (m_iHeight + m_iBottom) / 2;
}//중심점 얻기

bool		Region::IsPointInRegion(int x, int y) const
{
	if (x &gt; m_iLeft &amp;&amp; x &lt; m_iRight &amp;&amp; y &gt; m_iHeight &amp;&amp; y &lt; m_iBottom) {
		return true;
	}
	else {
		return false;
	}
}//점이 영역 안에 있는지

void Region::Move(int x, int y)
{
	m_iLeft += x;
	m_iTop += y;
	m_iRight += x;
	m_iHeight += y;
}//위치 이동

void Region::Resize(int width, int height)
{
	if (width &gt; 0 &amp;&amp; height &gt; 0) {
		m_iRight = m_iLeft + width;
		m_iBottom = m_iTop + height;
	}
	else {
		std::cout &lt;&lt; &quot;길이가 음수가 될 수 없습니다.&quot; &lt;&lt; std::endl;
	}
}//크기 변경

void Region::UnionRegion(const Region &amp;r1, const Region &amp;r2)
{
	m_iLeft =	r1.m_iLeft	 &lt; r2.m_iLeft	? r1.m_iLeft   : r2.m_iLeft;
	m_iTop =	r1.m_iTop	 &lt; r2.m_iTop	? r1.m_iTop	   : r2.m_iTop;
	m_iRight =	r1.m_iRight  &gt; r2.m_iRight  ? r1.m_iRight  : r2.m_iRight;
	m_iBottom = r1.m_iBottom &gt; r2.m_iBottom ? r1.m_iBottom : r2.m_iBottom;
};		//합집합

bool Region::IntersectRegion(const Region &amp;r1, const Region &amp;r2)
{
	m_iLeft = r1.m_iLeft	 &gt; r2.m_iLeft	? r1.m_iLeft   : r2.m_iLeft;
	m_iTop = r1.m_iTop		 &gt; r2.m_iTop	? r1.m_iTop	   : r2.m_iTop;
	m_iRight = r1.m_iRight	 &lt; r2.m_iRight  ? r1.m_iRight  : r2.m_iRight;
	m_iBottom = r1.m_iBottom &lt; r2.m_iBottom ? r1.m_iBottom : r2.m_iBottom;
	
	//한점 또는 라인이 중첩되었을 때는 교차로 판정하지 않음.
	//교집합이 존재하지 않는 경우
	if (m_iLeft &gt;= m_iRight || m_iTop &gt;= m_iBottom) {
		SetRect(0, 0, 0, 0);
		return false;
	}
	return true;
};	//교집합


void Region::SetNotation(int n)
{
	notation = n%2;

}//출력 방식 지정

void Region::Show()
{
	if (notation == POINT_POINT) {
		printf(&quot;(%d,%d) , (%d,%d) \n&quot;, m_iLeft, m_iTop, m_iRight, m_iBottom);
	}
	else if(notation == POINT_SIZE) {
		printf(&quot;(%d, %d), [%d x %d]\n&quot;, m_iLeft, m_iTop, GetWidth(), GetHeight());

	}
}//영역 출력



&lt;/pre&gt;

main.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Region.h&quot;

int main()
{
	Region::SetNotation(Region::POINT_SIZE); // 출력 형식 지정
	Region r1(10, 10, 30, 20);
	Region r2(50, 50, 5, 5);
}
&lt;/pre&gt;</description>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/437</guid>
<comments>https://lypicfa.tistory.com/437#entry437comment</comments>
<pubDate>Wed, 17 Apr 2019 12:13:10 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 1. Class</title>
<link>https://lypicfa.tistory.com/436</link>
<description>Point.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once

#include &lt;iostream&gt;

class Point
{
private:
	int x, y;
public:
	void SetPosition(int _x, int _y);
	void Move(int _x, int _y);
	void Show(void);
	Point();
	~Point();
};

&lt;pre&gt;

Point.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Point.h&quot;

void Point::SetPosition(int _x, int _y)
{
	x = _x;
	y = _y;
}
void Point::Move(int _x, int _y)
{
	x += _x;
	y += _y;
}

void Point::Show(void)
{
	std::cout &lt;&lt; &quot;(&quot; &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; &quot;)&quot; &lt;&lt; std::endl;
}

Point::Point()
{
	std::cout &lt;&lt; &quot;constuctor&quot; &lt;&lt; std::endl;
}


Point::~Point()
{
	std::cout &lt;&lt; &quot;dIstructor&quot; &lt;&lt; std::endl;
}

&lt;pre&gt;

main.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Point.h&quot;

int main()
{
	Point p1, p2;

	p1.SetPosition(10, 20);	//p1의 좌표 설정
	p2.SetPosition(50, 60); //p2의 좌표 설정

	p1.Move(5, 0);
	p2.Move(0, 5);

	p1.Show();
	p2.Show();

	return 0;
}
&lt;pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/436</guid>
<comments>https://lypicfa.tistory.com/436#entry436comment</comments>
<pubDate>Wed, 17 Apr 2019 12:11:18 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 0-b. Struct_Cpp</title>
<link>https://lypicfa.tistory.com/435</link>
<description>
Tpoint.h
&lt;pre class = &quot;brush:cpp&quot;&gt;
#pragma once
#include &lt;iostream&gt;

class Tpoint
{
private:
	int x;
	int y;

public:
	void SetPosition(int i, int j);
	void Move(int i, int j);
	void Show();

public:
	Tpoint();
	~Tpoint();
};


&lt;/pre&gt;

Tpoint.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Tpoint.h&quot;

void Tpoint::SetPosition(int i, int j)
{
	x = i;
	y = j;
}

void Tpoint::Move(int i, int j)
{
	x += i;
	y += j;
}

void Tpoint::Show()
{
	std::cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; std::endl;
}


Tpoint::Tpoint()
{
	x = 0;
	y = 0;
}


Tpoint::~Tpoint()
{
	std::cout &lt;&lt; &quot;~Tpoint&quot; &lt;&lt; std::endl;
}

&lt;/pre&gt;

sample.cpp
&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &quot;Tpoint.h&quot;



int main()
{
	{
		Tpoint p1, p2;
		p1.SetPosition(10, 20);
		p2.SetPosition(20, 30);
		p1.Move(5, 3);
		p2.Move(7, 6);
		p1.Show();
		p2.Show();
	}

	std::cout &lt;&lt; &quot;안녕&quot; &lt;&lt; std::endl;
}
&lt;/pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/435</guid>
<comments>https://lypicfa.tistory.com/435#entry435comment</comments>
<pubDate>Wed, 17 Apr 2019 12:09:24 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 0-a. Struct_a</title>
<link>https://lypicfa.tistory.com/434</link>
<description>&lt;pre class = &quot;brush:cpp&quot;&gt; 

#include &lt;iostream&gt;
using namespace std;

struct PERSON {
	int		age;
	long	ss;
	float	weight;
	char	name[25];
} family_member;

struct CELL {	//비트필드 구조체
	unsigned short character : 8;	// 00000000 ????????
	unsigned short foreground : 3;	// 00000??? 00000000
	unsigned short intensity : 1;	// 0000?000 00000000
	unsigned short background : 3;	// 0???0000 00000000
	unsigned short blink : 1;	// ?0000000 00000000
} screen[25][80];

int main() {
	PERSON sister;
	PERSON brother;
	
	sister.age = 13;
	brother.age = 7;

	cout &lt;&lt; &quot;sister.age = &quot; &lt;&lt; sister.age &lt;&lt; '\n';
	cout &lt;&lt; &quot;brother.age = &quot; &lt;&lt; brother.age &lt;&lt; '\n';

	CELL my_cell;

	my_cell.character = 255;
	my_cell.foreground = 7;
	my_cell.intensity = 1;
	my_cell.background = 7;
	my_cell.blink = 1;

	cout &lt;&lt; &quot;my_cell.character = &quot; &lt;&lt; my_cell.character &lt;&lt; endl;
	cout &lt;&lt; &quot;my_cell.foreground = &quot; &lt;&lt; my_cell.foreground &lt;&lt; endl;
	cout &lt;&lt; &quot;my_cell.intensity = &quot; &lt;&lt; my_cell.intensity &lt;&lt; endl;
	cout &lt;&lt; &quot;my_cell.background = &quot; &lt;&lt; my_cell.background  &lt;&lt; endl;
	cout &lt;&lt; &quot;my_cell.blink = &quot; &lt;&lt; my_cell.blink &lt;&lt; endl;
}

 &lt;/pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/434</guid>
<comments>https://lypicfa.tistory.com/434#entry434comment</comments>
<pubDate>Wed, 17 Apr 2019 12:06:40 +0900</pubDate>
</item>
<item>
<title>Cpp_other_ex 0.Struct</title>
<link>https://lypicfa.tistory.com/433</link>
<description>&lt;pre class = &quot;brush:cpp&quot;&gt;
#include &lt;iostream&gt;
using namespace std;

#define cpp

#ifdef C //C스타일

struct Point {
	int x, y;
};

//전역 함수로 처리함
void SetPosition(Point *pPoint, int _x, int _y) {
	pPoint-&gt;x = _x;
	pPoint-&gt;y = _y;
}

void Move(Point *pPoint, int _x, int _y)
{
	pPoint-&gt;x += _x;
	pPoint-&gt;y += _y;
}

void Show(const Point *pPoint)
{
	printf(&quot;(%d,%d)\n&quot;, pPoint-&gt;x, pPoint-&gt;y);
}

int main()
{
	Point p1, p2;
	SetPosition(&amp;p1, 10, 20);
	SetPosition(&amp;p2, 50, 60);
	Move(&amp;p1, 5, 0);
	Move(&amp;p2, 0, 5);
	Show(&amp;p1);
	Show(&amp;p2);

	return 0;
}

#else
//Cpp 스타일
struct Point {
	int x, y;
	void SetPosition(int _x, int _y);
	void Move(int _x, int _y);
	void Show(void);
};

//멤버 함수로 처리함
void Point::SetPosition(int _x, int _y) 
{
	x = _x;
	y = _y;
}

void Point::Move(int _x, int _y)
{
	x += _x;
	y += _y;
}

void Point::Show(void)
{
	cout &lt;&lt; &quot;(&quot; &lt;&lt; x &lt;&lt; &quot;, &quot; &lt;&lt; y &lt;&lt; &quot;)&quot; &lt;&lt; endl;
}

int main()
{
	Point p1, p2;
	p1.SetPosition(10, 20);
	p2.SetPosition(50, 60);

	p1.Move(5, 0);
	p2.Move(0, 5);

	p1.Show();
	p2.Show();

	return 0;
}

#endif
&lt;/pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/433</guid>
<comments>https://lypicfa.tistory.com/433#entry433comment</comments>
<pubDate>Wed, 17 Apr 2019 12:01:37 +0900</pubDate>
</item>
<item>
<title>게임회사 입사지원서 양식</title>
<link>https://lypicfa.tistory.com/432</link>
<description>&lt;p&gt;&lt;figure class=&quot;fileblock&quot;&gt;&lt;a href=&quot;https://k.kakaocdn.net/dn/WYXFm/btquqj31pN0/hbKbCaO4mFdD8dEVKI0Jgk/%EC%9E%85%EC%82%AC%EC%A7%80%EC%9B%90%EC%84%9C%20%EC%96%91%EC%8B%9D.docx?attach=1&amp;knm=tfile.docx&quot;&gt;&lt;div class=&quot;image&quot;&gt;&lt;/div&gt;&lt;div class=&quot;desc&quot;&gt;&lt;div class=&quot;filename&quot;&gt;&lt;span class=&quot;name&quot;&gt;입사지원서 양식.docx&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;size&quot;&gt;1.16MB&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/cjLWDY/btqumm1hMii/3LB51ZXLuNm15IksDAlTs1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/cjLWDY/btqumm1hMii/3LB51ZXLuNm15IksDAlTs1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FcjLWDY%2Fbtqumm1hMii%2F3LB51ZXLuNm15IksDAlTs1%2Fimg.png' data-filename=&quot;Cap 2019-04-11 13-42-30-446.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/bemf4H/btqui23OqF7/o0BPy0KJx7zax0jLruPB41/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/bemf4H/btqui23OqF7/o0BPy0KJx7zax0jLruPB41/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2Fbemf4H%2Fbtqui23OqF7%2Fo0BPy0KJx7zax0jLruPB41%2Fimg.png' data-filename=&quot;Cap 2019-04-11 13-42-37-828.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/HkaGW/btquj1DyHFY/f1N7aFBfl2Gbv4WNkpKmw1/img.png' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/HkaGW/btquj1DyHFY/f1N7aFBfl2Gbv4WNkpKmw1/img.png' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FHkaGW%2Fbtquj1DyHFY%2Ff1N7aFBfl2Gbv4WNkpKmw1%2Fimg.png' data-filename=&quot;Cap 2019-04-11 13-42-46-278.png&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;figure class='imageblock alignCenter'&gt;&lt;span data-url='https://k.kakaocdn.net/dn/qbK4k/btquouLwQuU/fXIjTKXxJ8wG0XQrn2IWf1/img.jpg' data-lightbox='lightbox' data-alt=''&gt;&lt;img src='https://k.kakaocdn.net/dn/qbK4k/btquouLwQuU/fXIjTKXxJ8wG0XQrn2IWf1/img.jpg' srcset='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory&amp;fname=https%3A%2F%2Fk.kakaocdn.net%2Fdn%2FqbK4k%2FbtquouLwQuU%2FfXIjTKXxJ8wG0XQrn2IWf1%2Fimg.jpg' data-filename=&quot;Cap 2019-04-11 13-43-13-862.jpg&quot;&gt;&lt;/span&gt;&lt;/figure&gt;&lt;/p&gt;</description>
<category>개인작업</category>
<category>기술</category>
<category>이력서</category>
<category>입사지원서</category>
<category>자기소개서</category>
<category>주요기술력</category>
<category>포트폴리오</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/432</guid>
<comments>https://lypicfa.tistory.com/432#entry432comment</comments>
<pubDate>Thu, 11 Apr 2019 13:30:00 +0900</pubDate>
</item>
<item>
<title>10_3. cpp_ex_OperatorOverloading(all)</title>
<link>https://lypicfa.tistory.com/431</link>
<description>&lt;p&gt;그냥 이런게 이런식으로 재정의가 된다는 것만 확인하세요.&lt;/p&gt;
&lt;p&gt;실제 구현은 하지 않았습니다.&lt;/p&gt;
&lt;pre class=&quot;brush:cpp arduino&quot;&gt;&lt;code&gt;#pragma once

#include 
using std::cout;
using std::cin;
using std::endl;

// const char&amp;amp; operator []() const {}
// char&amp;amp; operator [] () 두 함수는 별개의 함수가 된다.

//재정의가 금지된 연산자
//1) 선택 연산자 : .
//2) 포인터 선택 연산자 : .*
//3) 영역 연산자 : ::
//4) 조건 연산자 : ? :
//5) 크기 연산자 : sizeof


//재정의가 가능한 연산자는 다 적어두고 실제 구현은 생략했다.
//리턴형이 정해진 것이 아니라면 다 point클래스를 반환하도록 했다.

class point
{


public:
	//왜 재정의하는지 잘 모르겠는 연산자(..)
	point * operator-&amp;gt; () { return this; } // 멤버 선택 연산자
	point&amp;amp; operator* () { return *this; } // 포인터 역참조 연산자
	point operator-&amp;gt;* (const point&amp;amp; p);	  // 멤버 포인터 선택 연산자

	point operator() (...); //함수 호출 연산자
	point&amp;amp; operator, (point&amp;amp; p) const; //쉼표 연산자
									   // void operatorR() const; //캐스트 연산자 ???

									   //할당 및 할당 취소 연산자
	void* operator new (size_t i);
	void* operator delete (size_t i);
	void operator new[](size_t i);
	void operator delete[](size_t i);

	point operator[] (point&amp;amp; p); // 배열 연산자

								 //[]는 인덱싱을 구현하는데 더 많이 쓰인다.
	int operator[] (int i);

	//단항 증감연산자, 매개변수는 전위와 후위를 나누는데만 쓰인다.
	point operator++ (); // 전위 증가 연산자
	point operator-- (); // 전위 감소 연산자
	point operator++ (int); //후위 증가 연산자
	point operator-- (int); //후위 감소 연산자

							//단항 부호연산자.
	point operator+ () const;
	point operator- () const;

	//이항 사칙 연산자. 같은 클래스끼리 연산
	point operator+ (const point&amp;amp; p) const;
	point operator- (const point&amp;amp; p) const;
	point operator* (const point&amp;amp; p) const;
	point operator/ (const point&amp;amp; p) const;
	point operator% (const point&amp;amp; p) const;

	//이항 사칙 연산자. 서로 다른 타입과의 연산
	//int형과의 연산만 정의했으며 다른 타입과의 연산이 필요하면 따로 정의해야한다.
	//교환 법칙도 따로 만들어 주지 않으면 성립하지 않는다.
	point operator+ (int i);
	friend point operator+ (int i, const point&amp;amp; p);

	point operator- (int i);
	friend point operator- (int i, const point&amp;amp; p);

	point operator* (int i);
	friend point operator* (int i, const point&amp;amp; p);

	point operator/ (int i);
	friend point operator/ (int i, const point&amp;amp; p);

	friend point operator% (const point&amp;amp; p, int i); //그냥 이렇게 해도 되긴 한다.
	friend point operator% (int i, const point&amp;amp; p);



	//비교 연산자
	bool operator== (const point&amp;amp; p);
	bool operator!= (const point&amp;amp; p);
	bool operator&amp;gt;  (const point&amp;amp; p);
	bool operator&amp;lt;  (const point&amp;amp; p);
	bool operator&amp;gt;= (const point&amp;amp; p);
	bool operator&amp;lt;= (const point&amp;amp; p);


	//논리 연산자
	bool operator! () const; //부정
	bool operator&amp;amp;&amp;amp; (const point&amp;amp; p) const; //그리고
	bool operator|| (const point&amp;amp; p) const; //또는


											//비트 연산자
	point operator~ () const; //비트 부정
	point operator&amp;amp; (const point&amp;amp; p); //비트 and;
	point operator| (const point&amp;amp; p); //비트 or;
	point operator^ (const point&amp;amp; p); //비트 xor;
	point operator&amp;lt;&amp;lt; (const point&amp;amp; p); // 비트 왼쪽 시프트
	point operator&amp;gt;&amp;gt; (const point&amp;amp; p); // 비트 오른쪽 시프트


									   //대입 연산자, 복합 대입 연산자
	point&amp;amp; operator=  (const point&amp;amp; p);
	point&amp;amp; operator+= (const point&amp;amp; p);
	point&amp;amp; operator-= (const point&amp;amp; p);
	point&amp;amp; operator*= (const point&amp;amp; p);
	point&amp;amp; operator/= (const point&amp;amp; p);
	point&amp;amp; operator%= (const point&amp;amp; p);
	point&amp;amp; operator&amp;amp;= (const point&amp;amp; p);
	point&amp;amp; operator|= (const point&amp;amp; p);
	point&amp;amp; operator^= (const point&amp;amp; p);
	point&amp;amp; operator&amp;gt;&amp;gt;= (const point&amp;amp; p);
	point&amp;amp; operator&amp;lt;&amp;lt;= (const point&amp;amp; p);


	//입출력 연산자 재정의
	friend std::ostream&amp;amp; operator&amp;lt;&amp;lt;(std::ostream &amp;amp;os, const point&amp;amp; pt);
	friend std::istream&amp;amp; operator&amp;gt;&amp;gt;(std::istream &amp;amp;is, point&amp;amp; pt);

	//다른 타입과의 복합 대입도 재정의 가능하다.
	point&amp;amp; operator+= (int i);

	//이런것도 가능하긴 하다
	bool operator== (int i);
	friend bool operator== (int i, const point&amp;amp; p);

	bool operator&amp;amp;&amp;amp; (int i);
	friend bool operator&amp;amp;&amp;amp; (int i, const point&amp;amp; p);

	point operator^ (int i);
	friend bool operator^ (int i, const point&amp;amp; p);



	//진짜 별개 다 된다(..)
};


&lt;/code&gt;&lt;/pre&gt;</description>
<category>C++_ex_Source</category>
<author>Lypi Lypi</author>
<guid>https://lypicfa.tistory.com/431</guid>
<comments>https://lypicfa.tistory.com/431#entry431comment</comments>
<pubDate>Wed, 10 Apr 2019 11:50:36 +0900</pubDate>
</item>
</channel>
</rss>