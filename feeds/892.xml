<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Hudi &#8211; 유사 프로그래머</title>
	<atom:link href="https://hudi.kr/feed/" rel="self" type="application/rss+xml" />
	<link>https://hudi.kr</link>
	<description></description>
	<lastBuildDate>Mon, 24 Dec 2018 11:02:43 +0000</lastBuildDate>
	<language>ko-KR</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.10</generator>

<image>
	<url>https://hudi.kr/wp-content/uploads/2018/02/cropped-favicon-150x150.png</url>
	<title>Hudi &#8211; 유사 프로그래머</title>
	<link>https://hudi.kr</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Surge.sh 로 무료로 정적 웹 어플리케이션 배포하기</title>
		<link>https://hudi.kr/surge-sh-%eb%a1%9c-%eb%ac%b4%eb%a3%8c%eb%a1%9c-%ec%a0%95%ec%a0%81-%ec%9b%b9-%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0/</link>
		<comments>https://hudi.kr/surge-sh-%eb%a1%9c-%eb%ac%b4%eb%a3%8c%eb%a1%9c-%ec%a0%95%ec%a0%81-%ec%9b%b9-%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0/#comments</comments>
		<pubDate>Thu, 18 Oct 2018 12:45:50 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[Web]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3490</guid>
		<description><![CDATA[<p>Surge.sh는 정적 웹 어플리케이션을 귀찮은 가입 과정 혹은 복잡한 설정 과정 없이 배포할 수 있는 프론트엔드를 위한 호스팅 서비스이다. 아주 큰 특징은 지금 코드를 작성하고 있는 IDE 혹은 터미널에서 벗어나지 않고, 커맨드라인에서 명령어 몇줄로 아주 간단하게&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/surge-sh-%eb%a1%9c-%eb%ac%b4%eb%a3%8c%eb%a1%9c-%ec%a0%95%ec%a0%81-%ec%9b%b9-%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0/">Surge.sh 로 무료로 정적 웹 어플리케이션 배포하기</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="1108" height="650" src="https://hudi.kr/wp-content/uploads/2018/10/1_WNY7IHSxrkhp-x2VledO8A.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/10/1_WNY7IHSxrkhp-x2VledO8A.png 1108w, https://hudi.kr/wp-content/uploads/2018/10/1_WNY7IHSxrkhp-x2VledO8A-300x176.png 300w, https://hudi.kr/wp-content/uploads/2018/10/1_WNY7IHSxrkhp-x2VledO8A-768x451.png 768w, https://hudi.kr/wp-content/uploads/2018/10/1_WNY7IHSxrkhp-x2VledO8A-1024x601.png 1024w" sizes="(max-width: 1108px) 100vw, 1108px" /></p><p><a href="http://surge.sh"><strong>Surge.sh</strong></a>는 <strong>정적 웹 어플리케이션</strong>을 <span style="text-decoration: underline;"><strong>귀찮은 가입 과정 혹은 복잡한 설정 과정 없이</strong></span> 배포할 수 있는 <strong>프론트엔드를 위한 호스팅 서비스</strong>이다. 아주 큰 특징은 지금 코드를 작성하고 있는 IDE 혹은 터미널에서 벗어나지 않고, 커맨드라인에서 <strong>명령어 몇줄로 아주 간단하게 배포할 수 있다는 것</strong>이 특징이다. 그리고, 가격도 개인적인 프로젝트 수준에서는 <strong>무료 플랜을 사용해도 정말 무방</strong>하다. 별도의 서버가 필요없거나 API 서버가 따로 있는 경우의 정적 웹사이트, 웹 어플리케이션, SPA 등의 배포에 아주 최적화 되어있다. 이런 장점에도 의외로 국내자료가 매우 없기 때문에 직접 소개를 해보려 한다.</p>
<h2>설치하기</h2>
<p>Surge.sh는 AWS 혹은 기타 VPS 호스팅 서비스와 다르게 따로 웹사이트에서 프로젝트를 관리할 대쉬보드 같은 것이 존재하지 않는다. 대신 관리 도구를 npm 을 통해 설치하고, 커맨드 라인안에서 우리의 프로젝트를 배포하고, 삭제하는 등의 관리를 할 수 있다. 일단 다음 명령어를 입력하여 Surge 를 글로벌로 설치해보자.</p>
<pre class="line-numbers"><code class="language-bash">npm install --global surge</code></pre>
<p>이제 어떤 폴더에서든 surge 명령어를 실행하여 프로젝트를 배포 할 수 있게 되었다.</p>
<h2>배포하기</h2>
<p>이제 바로 정적 웹사이트를 배포해 볼 것이다. 배포하고 싶은 프로젝트 혹은 간단한 index.html 등의 파일을 준비하자. 그리고 <strong>해당 프로젝트 디렉토리에 이동</strong>하여,  다음과 같은 명령을 입력한다.</p>
<pre class="line-numbers"><code class="language-bash">surge</code></pre>
<p>우리는 아직 surge 에 가입하지 않은 상태이니, 가입 절차를 진행하게 될 것이다. 이 과정은 최초 한번만 해주면 되며, 다음 부터는 생략된다.</p>
<pre class="line-numbers"><code class="language-bash">Welcome to Surge! (surge.sh)
Login (or create surge account) by entering email &amp; password.

    email: youremail@gmail.com
    password:</code></pre>
<p>여러분들이 사용할 이메일과 패스워드를 입력하면, 다음과 같이 배포할 프로젝트의 경로, 배포할 도메인 등을 물어볼 것이다. 우리는 배포할 프로젝트 디렉토리로 이동했으므로, 수정하지 않고 미리 입력된 내용대로 설정해주자.</p>
<pre class="line-numbers"><code class="language-bash">Running as youremail@gmail.com (Student)

    project: /some/path/somedir/
    domain: obedient-face.surge.sh
    upload: [====================] 100% eta: 0.0s (1 files, 139 bytes)
    CDN: [====================] 100%
    IP: 45.55.110.124

Success! - Published to obedient-face.surge.sh</code></pre>
<p>surge.sh 는 기본적으로 <strong>임의의-단어.surge.sh</strong> 형태의 도메인을 생성해준다. 당연히 도메인은 우리가 원하는대로 변경할 수 있다. .<strong>surge.sh 로 끝나는 도메인은 무료로 제공하기 때문에</strong> 중복되지만 않으면, <strong>first-project-by-hudi.surge.sh</strong> 따위의 도메인으로도 프로젝트를 배포할 수 있다.</p>
<p>필자는 <a href="http://obedient-face.surge.sh/"><strong>obedient-face.surge.sh</strong></a> 라는 도메인에 프로젝트가 배포되었다. 해당 도메인에 접속하면, 우리가 배포한 프로젝트가 작동하는 것을 확인할 수 있다. 이렇게 간단하게 웹사이트가 배포된다니, 놀랍지 않은가?</p>
<p style="text-align: center;"><img class="aligncenter wp-image-3501 size-full" src="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.00.42.png" alt="" width="722" height="396" srcset="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.00.42.png 722w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.00.42-300x165.png 300w" sizes="(max-width: 722px) 100vw, 722px" /><span style="font-size: 10pt; color: #808080;">배포된 프로젝트</span></p>
<p>또한 아래와 같이 명령을 입력하면, 배포 과정을 좀더 축약할 수 있다.</p>
<pre class="line-numbers"><code class="language-bash">surge ./ custom-domain.surge.sh</code></pre>
<h2>커스텀 도메인에 배포하기</h2>
<p>분명 무료로 제공되는 도메인도 좋지만, <strong>실제 프로덕트에는 우리 소유의 도메인으로 접속</strong>할 수 있게 해야한다. 그 과정도 생각보다 간단하다. 일단 다음과 같이 배포할때 도메인 설정을 본인 소유의 도메인으로 배포한다.</p>
<pre class="line-numbers"><code class="language-bash">surge ./ yourdomain.com</code></pre>
<p>그리고 DNS 서버에서 CNAME 을 수정해줘야 한다. <strong>CNAME의 호스트네임</strong> <strong>@과 www 를 na-west1.surge.sh</strong> 로 설정해준다. DNS 제공자가 CNAME 을 설정할 수 없게 해놓았다면, <strong>A레코드를 45.55.110.124</strong> 으로 향하게 설정해주면 된다. 이때 호스트네임은 역시 @과 www 로 설정해주면 된다.</p>
<p style="text-align: center;"><img class="size-full wp-image-3507 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.29.30.png" alt="" width="856" height="324" srcset="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.29.30.png 856w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.29.30-300x114.png 300w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.29.30-768x291.png 768w" sizes="(max-width: 856px) 100vw, 856px" /><span style="font-size: 10pt; color: #808080;">Godaddy 에서 DNS 설정을 한 모습</span></p>
<p style="text-align: left;">또한 <strong>호스트네임을 * 로 설정하면, 추후 해당 도메인의 하위 도메인</strong> <span style="color: #808080;">(cdn.yourdomain.com 등)</span> 으로도 배포할 수 있게 된다.</p>
<h2>클라이언트 사이드 라우팅 대응</h2>
<p><a href="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42.png"><img class="alignnone size-full wp-image-3509" src="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42.png" alt="" width="1919" height="967" srcset="https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42.png 1919w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42-300x151.png 300w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42-768x387.png 768w, https://hudi.kr/wp-content/uploads/2018/10/스크린샷-2018-10-18-오후-9.32.42-1024x516.png 1024w" sizes="(max-width: 1919px) 100vw, 1919px" /></a></p>
<p>React router 혹은 Vue router 를 통해 클라이언트 사이드에서 라우팅을 하는 프로젝트를 배포하게 되는 경우가 있을 것이다. 이때, 최상위 경로 외의 하위 경로에 접속했을때 Surge 는 기본적으로 200 에러가 발생한다.</p>
<p>이런 경우에는 간단하게, <strong>index.html 파일을 복사하여, 200.html 로 이름을 변경</strong>하면 된다.</p>
<pre class="line-numbers"><code class="language-bash">cp index.html 200.html</code></pre>
<h2>프로젝트 관리</h2>
<p>프로젝트를 여러개 배포했다면, 그 리스트를 확인도 해야하고, 필요없는 프로젝트는 삭제해야할 것이다.</p>
<h3>프로젝트 리스트 조회</h3>
<pre class="line-numbers"><code class="language-bash">surge list</code></pre>
<h3>프로젝트 삭제</h3>
<pre class="line-numbers"><code class="language-bash">surge teardown &lt;프로젝트 도메인&gt;</code></pre>
<h2>마치며</h2>
<p>더 자세한 사용법은 <a href="https://surge.sh/help/getting-started-with-surge"><strong>Surge.sh 공식 문서</strong></a>를 참고하면 된다. 항상 사이드 프로젝트를 하면서, 정적 웹사이트만을 배포할때 발생하는 서버 비용과 그 과정이 부담스럽거나 귀찮았는데 Surge.sh 를 알게 되고서는 비용 부담도 사라졌고, 배포 과정도 단축되어 놀라웠다. 본 문서를 읽어주신 프론트엔드 개발자분들이 Surge.sh 를 적극적으로 활용하여 배포 과정에서 겪는 문제점이 없어지길 바란다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/surge-sh-%eb%a1%9c-%eb%ac%b4%eb%a3%8c%eb%a1%9c-%ec%a0%95%ec%a0%81-%ec%9b%b9-%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0/">Surge.sh 로 무료로 정적 웹 어플리케이션 배포하기</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/surge-sh-%eb%a1%9c-%eb%ac%b4%eb%a3%8c%eb%a1%9c-%ec%a0%95%ec%a0%81-%ec%9b%b9-%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>노마드코더를 보며 따라만든 Typescript 블럭체인</title>
		<link>https://hudi.kr/%eb%85%b8%eb%a7%88%eb%93%9c%ec%bd%94%eb%8d%94%eb%a5%bc-%eb%b3%b4%eb%a9%b0-%eb%94%b0%eb%9d%bc%eb%a7%8c%eb%93%a0-typescript-%eb%b8%94%eb%9f%ad%ec%b2%b4%ec%9d%b8/</link>
		<comments>https://hudi.kr/%eb%85%b8%eb%a7%88%eb%93%9c%ec%bd%94%eb%8d%94%eb%a5%bc-%eb%b3%b4%eb%a9%b0-%eb%94%b0%eb%9d%bc%eb%a7%8c%eb%93%a0-typescript-%eb%b8%94%eb%9f%ad%ec%b2%b4%ec%9d%b8/#respond</comments>
		<pubDate>Tue, 18 Sep 2018 10:51:31 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[개발 일지]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3467</guid>
		<description><![CDATA[<p>평소에 블럭체인과 Typescript 를 둘다 배우고 싶어했었다. 하지만 마땅한 동기가 크게 없어서 어영부영 미루기만 했었는데, 노마드코더에 Typescript 로 간단한 블럭체인을 구현하는 강의가 있었다. 무료이기도 했고, 블럭체인과 Typescript 둘다 배울 수 있는 아주 좋은 기회라 생각하여&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%eb%85%b8%eb%a7%88%eb%93%9c%ec%bd%94%eb%8d%94%eb%a5%bc-%eb%b3%b4%eb%a9%b0-%eb%94%b0%eb%9d%bc%eb%a7%8c%eb%93%a0-typescript-%eb%b8%94%eb%9f%ad%ec%b2%b4%ec%9d%b8/">노마드코더를 보며 따라만든 Typescript 블럭체인</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="900" height="465" src="https://hudi.kr/wp-content/uploads/2018/09/998F3F3359A239851F.jpeg" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/09/998F3F3359A239851F.jpeg 900w, https://hudi.kr/wp-content/uploads/2018/09/998F3F3359A239851F-300x155.jpeg 300w, https://hudi.kr/wp-content/uploads/2018/09/998F3F3359A239851F-768x397.jpeg 768w" sizes="(max-width: 900px) 100vw, 900px" /></p><p>평소에 블럭체인과 Typescript 를 둘다 배우고 싶어했었다. 하지만 마땅한 동기가 크게 없어서 어영부영 미루기만 했었는데, <strong><a href="https://academy.nomadcoders.co/courses/303219">노마드코더에 Typescript 로 간단한 블럭체인을 구현하는 강의</a></strong>가 있었다. 무료이기도 했고, 블럭체인과 Typescript 둘다 배울 수 있는 아주 좋은 기회라 생각하여 바로 수강신청 후 영상으로 배웠다. 그리고 학습한 내용을 기록으로 남기기위해 <a href="https://github.com/devHudi/nomadcoder-typechain"><strong>Github 저장소 (nomadcoder-typechain)</strong></a> 에 커밋했다. 앞으로 블로그에 올리기 번거롭거나, 사소한 것들을 학습했을때는 글로 남기기보다는 Github 에 코드로 기록하기로 생각했다. 아무래도 학습 내용을 다시 글로 정제하는 과정은 오래걸리기에..</p>

<p>강의에서는 초반에는 Typescript 에 대한 간단한 소개와 이론, 후반에서는 Typescript 로 실제 간단한 블럭체인을 구현하는 내용이 담겨있었다. 사실 블럭체인이라고 해봤자 PoW 같은 가상화폐로 사용될 수 있는 것의 구현은 아니고, 말그대로 단순히 Block 들이 이어져있는 Array 를 제작하는 과정이었다. 그래도 꽤 배워가는 것들이 많았다.</p>

<h2>Typescript</h2>

<p>Typesciprt (이하 TS) 는 Microsoft 에서 개발한 Javascript 의 슈퍼셋(Superset) 이다. TS 를 컴파일하면, JS 코드로 변환된다. 마치 Sass 코드를 컴파일하면, CSS 코드로 변환되는 것 처럼.<br/></p>

<p>그렇다면 왜 TS 를 사용할까? TS 에는 Javascript 에는 없는 타입이 존재한다. 다음과 같이 변수, 파라미터, 반환값 등에 타입을 설정할 수 있다. 이에 따라 디버깅이 쉬워지고, 코드의 흐름을 예측할 수 있게 된다.<br/></p>

<p>Block 이라는 Class 를 만들고, Block 이라는 타입의 Array 인 blockchain 을 만들었다. Block 의 static function 을 이용하여, 블럭의 hash 를 계산하고, 블럭 structure 를 검증하는 기능도 제작하였다. 모든 파라미터는 타입이 지정되어 있어, 코드가 예측 가능하게 되었던 것 같다. <br/></p>

<figure class="wp-block-image aligncenter"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-14-오전-12.53.41-1.png" alt="" class="wp-image-3484" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-14-오전-12.53.41-1.png 519w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-14-오전-12.53.41-1-300x189.png 300w" sizes="(max-width: 519px) 100vw, 519px" /><figcaption>4개의 블럭이 추가된, Typechain 의 모습</figcaption></figure>

<p>간단한 프로젝트였지만, TS 와 블럭체인의 구조와 특징을 동시에 알 수 있어 의미있던 프로젝트였다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%eb%85%b8%eb%a7%88%eb%93%9c%ec%bd%94%eb%8d%94%eb%a5%bc-%eb%b3%b4%eb%a9%b0-%eb%94%b0%eb%9d%bc%eb%a7%8c%eb%93%a0-typescript-%eb%b8%94%eb%9f%ad%ec%b2%b4%ec%9d%b8/">노마드코더를 보며 따라만든 Typescript 블럭체인</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/%eb%85%b8%eb%a7%88%eb%93%9c%ec%bd%94%eb%8d%94%eb%a5%bc-%eb%b3%b4%eb%a9%b0-%eb%94%b0%eb%9d%bc%eb%a7%8c%eb%93%a0-typescript-%eb%b8%94%eb%9f%ad%ec%b2%b4%ec%9d%b8/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>인후라이프 2.0 개발일지</title>
		<link>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-2-0-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/</link>
		<comments>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-2-0-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/#respond</comments>
		<pubDate>Sat, 15 Sep 2018 13:48:55 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[개발 일지]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3465</guid>
		<description><![CDATA[<p>9월 1일 약 3주가량 제작한 인후라이프 2.0을 개강 시즌에 맞추어 드디어 릴리즈 했다. 이번엔 저번과 다르게 간단한 Markdown 문서를 생성하고, 개발하는 도중 생각나는 것들을 여과없이 적어 내려갔다. 그 진짜 일지를 통해서, 좀더 읽기 쉬운 가공된&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-2-0-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/">인후라이프 2.0 개발일지</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="1200" height="630" src="https://hudi.kr/wp-content/uploads/2018/09/og-image.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/09/og-image.png 1200w, https://hudi.kr/wp-content/uploads/2018/09/og-image-300x158.png 300w, https://hudi.kr/wp-content/uploads/2018/09/og-image-768x403.png 768w, https://hudi.kr/wp-content/uploads/2018/09/og-image-1024x538.png 1024w" sizes="(max-width: 1200px) 100vw, 1200px" /></p><p>9월 1일 약 3주가량 제작한 인후라이프 2.0을 개강 시즌에 맞추어 드디어 릴리즈 했다. 이번엔 저번과 다르게 간단한 Markdown 문서를 생성하고, 개발하는 도중 생각나는 것들을 여과없이 적어 내려갔다. 그 진짜 일지를 통해서, 좀더 읽기 쉬운 가공된 일지를 작성해 보려 한다.</p>

<p>프로젝트 기간은 2018년 7월 24일부터 시작하여, 8월 27일에 완성 되었다. 물론 27일과 릴리즈 일자 사이에서 몇가지 기능이 추가되거나, 수정되는 부분은 있었지만 일단 완성 선언은 27일에 했다. 그 기간 사이에 수술을 하게되어 1주일가량은 공백 기간이었으니 약 3주 가량 걸린것이 맞다.</p>

<h2>기획</h2>

<p>나는 평소에 프로젝트를 시작할때 즉흥적으로 시작했다. 일단 추상적인 아이디어가 떠오르면, 프로젝트 디렉토리를 만들고 코드로 직접 웹사이트를 빌드하며 내 생각을 정리하고, 수정하고 즉석으로 기획하고 디자인한다. 아주 좋게 포장해서 말하면… Lean 하다고 말할 수 있겠지만, 현실적으로 지적하자면 그냥 무계획적인 것이다.</p>

<p>이번에는 조금 달랐다. Keynote 에 내가 생각하는 UI 를 스케치하듯 그려나아갔다.</p>

<figure class="wp-block-image"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.35.54.png" alt="" class="wp-image-3474" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.35.54.png 943w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.35.54-300x169.png 300w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.35.54-768x432.png 768w" sizes="(max-width: 943px) 100vw, 943px" /></figure>

<figure class="wp-block-image"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.01.png" alt="" class="wp-image-3475" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.01.png 940w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.01-300x169.png 300w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.01-768x432.png 768w" sizes="(max-width: 940px) 100vw, 940px" /></figure>

<figure class="wp-block-image"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.05.png" alt="" class="wp-image-3476" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.05.png 942w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.05-300x168.png 300w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.05-768x430.png 768w" sizes="(max-width: 942px) 100vw, 942px" /></figure>

<figure class="wp-block-image"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.12.png" alt="" class="wp-image-3477" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.12.png 942w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.12-300x168.png 300w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.36.12-768x431.png 768w" sizes="(max-width: 942px) 100vw, 942px" /><figcaption>Keynote 로 작성한 인후라이프 2.0 초기기획</figcaption></figure>

<p>막상 직접 프로덕트를 개발하면서, 스스로 사용자 입장에서 많이 생각해보며 개선해나아가 초기 기획하고는 꽤 많이 달라졌지만, 아무튼 괜찮은 가이드라인을 만든 것 같아서 나름 잘 했다고 생각하는 작업중 하나이다. 앞으로 무언가 프로젝트를 시작하기 전에 대충의 스케치라도 해놓고 시작하려고 한다.</p>

<h2>GraphQL</h2>

<p>나는 사이드 프로젝트를 진행함과 동시에 배워보지 않았던 새로운 기술을 배우면서 적용해보는 것을 좋아한다. 이론공부보다는 실제로 프로덕트를 만들어가며 배워가는것이 훨씬 더 좋기 때문이다. 이론 공부만 해서는 이 기술이 왜 사용되는지 느낄 수 없다고 생각한다. 아무튼 이번 프로젝트에서는 GraphQL 을 도입하게 되었다. </p>

<p>GraphQL 은 REST API 를 어느정도 대체할 수 있는 기술이다. 쉽게 말하자면, 클라이언트 사이드에서 데이터를 받기위해 서버 사이드로 날리는 Query Language 이다. Over fetching, Under fetching 을 해결 어쩌구 저쩌구 많은 장점들이 있지만, 이 글에서 소개하기엔 무리가 있으니 이정도만 설명해두겠다.<br/></p>

<p>GraphQL 을 사용하기 위해서는 Query Schema 를 작성해야했고, Query 에 따라 데이터를 넘겨주는 resolver 그리고 클라이언트 사이드에서 실제로 쿼리를 전송하는 부분 이렇게 3가지가 존재한다. 쿼리의 이름과 같은 구조가 바뀌게 되면 이 3가지를 전부 손봐야 했던게 처음 써본 입장에선 복잡했던 것 같다. 하지만, 지금 생각해보면 REST 라고 다를까… 하는 생각이 든다. 어차피 MVC 기준으로 Router, Controller 손보려면 비슷한 것 같다.<br/></p>

<p>아무튼 직접 사용해보니 Router 를 직접 설계하지 않고, Query 만 설계한 뒤, 클라이언트 사이드에서 원하는 정보만 Query 를 전송하여 받아갈 수 있는 부분이 참신한 아이디어인 것 같았고 맘에 들었다. 앞으로 조금 더 사용해봐야겠지만 계속 사용하고 싶은 기술인것 같다. 하지만, 아직 익숙하지 않아서 오히려 Over Fetching 을 발생시키고 있는 것 같다. Query 설계를 조금 더 계획적으로 할 필요성을 느낀다. 한번에 불러올 수 있는 정보들을 2회에 거쳐 받아오는 것은 분명 잘못 설계한 것이다.</p>

<h2>Component와 Container</h2>

<p>저번 인후라이프 개발 일지에서 Component 와 Container 의 구분을 하지 못해 전부 Container 로 만들어 버렸다는 이야기를 한적이있다. 이번 프로젝트에서는 그 동안 React 공부도 꽤 한 상태라 그 둘은 당연히 구분할줄 알았다. 데이터를 조작하는 부분과 그저 화면에 보여주는 부분을 나름 확실히 구분해서 관심사의 분리를 한 것 같아 기분이 좋았다. </p>

<h2>디렉토리 구조</h2>

<p>남들이 대부분 사용하는 pages, components, containers 구조가 아니라 common 컴포넌트를 최상위에 두고, page 별로 components 와 containers 를 가지는 구조로 제작하였다. common 폴더에는 모든 페이지에서 공통으로 사용될 수 있는 버튼, 텍스트박스, 리스트 등의 UI Component 가 들어있다. 이 구조 꽤 편해서 마음에 들었다. Depth 가 너무 깊어지는 것 빼면…</p>

<figure class="wp-block-image aligncenter"><img src="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.41.26.png" alt="" class="wp-image-3478" srcset="https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.41.26.png 248w, https://hudi.kr/wp-content/uploads/2018/09/스크린샷-2018-09-15-오후-10.41.26-199x300.png 199w" sizes="(max-width: 248px) 100vw, 248px" /><figcaption>실제 디렉토리 구조는 이렇다</figcaption></figure>

<h2>Dotenv 사용</h2>

<p>이번 프로젝트에서는 Dotenv 를 사용하였다. .env 라는 파일로 환경변수를 설정할 수 있는 모듈이다. Create React App 으로 만든 프로젝트는 내부적으로 dotenv 모듈을 사용하는데, .env.production, .env.development 파일에 각각 REACTAPP 으로 시작되는 커스텀 환경변수를 설정할 수 있다. 개발할때의 서버주소와 프로덕트의 서버주소 등을 파일로 분리시켜 놓으니 편했다.</p>

<h2>UI/UX</h2>

<p>사용자에게 직접 닿는 부분을 개발하는 프론트엔드 개발자는 디자이너 못지 않게 UI 와 사용자경험(UX) 에 신경을 써야한다. 저번에는 디자인도 그렇고, UX 도 그렇고 정말 배려심 없게 설계 했던 것 같다. 이번에는 기획 단계부터 이전 버전에서 스스로 계속 지적했던 불편한 UI 의 개선 문제도 핵심 과제로 생각하였다. 이전 인후라이프에서는 태그의 구분없이 몇십개의 태그를 한번에 보여주고 그 안에서 원하는 태그를 찾았어야 했다. 하지만 이번 인후라이프 2.0에서는 대분류와 소분류로 태그를 크게 분류하였고, 그 중에서도 태그의 개수가 많은 소분류에서는 태그를 검색할 수 있게끔 구현하였다. 나름 많은 고민을 한 부분이었다.</p>

<figure class="wp-block-image aligncenter is-resized"><img src="https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002.jpeg" alt="" class="wp-image-3479" width="462" height="462" srcset="https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002.jpeg 1000w, https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002-150x150.jpeg 150w, https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002-300x300.jpeg 300w, https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002-768x768.jpeg 768w, https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002-160x160.jpeg 160w, https://hudi.kr/wp-content/uploads/2018/09/카드뉴스.002-320x320.jpeg 320w" sizes="(max-width: 462px) 100vw, 462px" /><figcaption>태그 선택 UI 의 변화</figcaption></figure>

<p>또한 하나의 식당만을 보여주는 것이 아니라, 캐러셀 형태로 관련된 여러개의 식당을 옆으로 넘기기만 하면 볼 수 있게끔 개선하였다. 굉장히 괜찮은 아이디어라 생각했고, 뿌듯하다 ㅎㅎㅎ<br/></p>

<figure class="wp-block-image aligncenter is-resized"><img src="https://hudi.kr/wp-content/uploads/2018/09/3.png" alt="" class="wp-image-3480" width="353" height="529" srcset="https://hudi.kr/wp-content/uploads/2018/09/3.png 600w, https://hudi.kr/wp-content/uploads/2018/09/3-200x300.png 200w" sizes="(max-width: 353px) 100vw, 353px" /><figcaption>캐러셀 형태로 바뀐 식당 결과</figcaption></figure>

<p>이외에도 웹사이트지만 굉장히 어플리케이션같은 느낌을 주기위해 하단에 네비게이션 바를 넣었고, React Slick 을 사용하여 식당 슬라이드에서 모바일 Swipe 도 매끄럽게 작동하도록 구현했다.</p>

<h2>버전관리</h2>

<p>저번과 같이 Github 저장소에 꾸준히 Commit 했다… 만 Commit 타이밍과 그 파일범위를 정확히 어떻게 잡아야할지 감이 안잡혀서 제대로 꾸준히 안했던것 같다. </p>

<p>이슈트래킹은 <code>//TODO: 기능추가</code> 와 같이 소스코드에 주석으로 작성해 놓고, VSCode 플러그인을 이용해 관리했는데, 앞으로 Github 이슈트래커나 트렐로와 같이 더 전문적인 툴을 사용하면 깔끔하지 않을까 생각한다.</p>

<h2>배포</h2>

<p>GraphQL 서버와 식당 이미지용 서버는 node.js 로 원래 사용하고 있었던 Vultr VPS 에 올려놓았다. <br/></p>

<p>조금 달라진점은 프론트엔드를 배포하는 방식인데, 처음으로 Surge.sh 라는 정적 파일을 호스팅 해주는 서비스를 이용해보았다. SSL 적용이나 기타 고급 옵션들을 사용하지 않는 이상 기본적으로 무료이고, 속도도 양호해서 써보기로 결정했다. 정말정말 놀라웠던 점은 배포 과정에서 관리자 패널에 접속할 필요가 하나도 없이 로그인 부터 모든 배포 과정을 터미널 안에서 명령어로 끝낼 수 있었다. 빌드를 하고 빌드 폴더에서 명령어 하나만 입력하면 원하는 주소로 파일이 배포되었다. 정말 충격적이었다. 복잡한 세팅 필요없이 VSCode 터미널로 모든것을 해결했다. 심지어 무료라니 정말 정말 정말 최고다.</p>

<h2>운영</h2>

<p>일단, 식당을 등록하는 과정이 당연히 제일 힘들었다. 아직도 등록되어 있지 않은 식당은 잔뜩 있다 ㅠㅠㅠ 그리고 등록되어 있는 100개가 훌쩍 넘는 식당들을 가장 어울리는 태그에 배치시키는 것도 정말 어려웠다. 필요없는 태그를 가지치기하고, 더 큰 범위의 분류를 추가하는 등 이런 분류 과정에서 많은 고민을 했던 것 같다. 그래도 인하대 후문에서 식당을 운영하시는 분들이 본인의 식당을 추가해달라고 하시면서 언제한번 식당 들르면, 공짜로 주시겠다는 분도 있어서 기분이 좋았다.<br/></p>

<p>홍보면에서는 기존에 존재했던 인후라이프 페이스북 페이지와, 인하광장, 에브리타임 등에 홍보했다. 이번에는 이벤트를 진행했는데, 페이스북 게시물을 공유한 사람중 추첨해서 5명에게 스타벅스 아메리카노 기프티콘을 주는 이벤트이다. 21분이 이벤트에 참여해주셔서 추첨을 마치고 현재 기프티콘을 나눠드리고 있는 중이다.</p>

<h2>기타</h2>

<p>ESLint 와 Prettier 를 적극적으로 사용하여, 소스코드를 정리했다. 아무리 길고 복잡한 코드도 읽기 편한 소스코드로 자동으로 변환해주는 Prettier 기능은 놀라웠다. 물론 가끔은 내 의도와 다르게 소스코드가 정리되는 일도 있었으나 크게 거슬리진 않아서 그냥 그런 사소한 점은 순응하면서 개발했다. <br/></p>

<p>이전에는 사소한 오류나 추가가 필요한 기능들이 있었다면 귀찮아서 무시했었는데, 이번에는 최대한 그런 일이 없도록 사소한 버그, 오류, 기능 추가들도 적극적으로 개선하였다. 물론 아직도 남아있는 것들도 있지만, 이전보다는 비약적으로 그 정도가 줄어들었다는 것에 큰의의를 둔다.<br/></p>

<p>인하대에서 교내에서 길찾는 서비스를 누군가 개발했는데, 인후라이프에서 영감을 얻었다고 한다. 내가 창조해낸 결과물에서 무언가 영감을 얻어가는 사람이 있다는게 기분이 참 좋았다.</p>

<p><br/></p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-2-0-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/">인후라이프 2.0 개발일지</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-2-0-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Styled Components &#8211; 스타일을 품은 컴포넌트</title>
		<link>https://hudi.kr/styled-components-%ec%8a%a4%ed%83%80%ec%9d%bc%ec%9d%84-%ed%92%88%ec%9d%80-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8/</link>
		<comments>https://hudi.kr/styled-components-%ec%8a%a4%ed%83%80%ec%9d%bc%ec%9d%84-%ed%92%88%ec%9d%80-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8/#respond</comments>
		<pubDate>Sun, 08 Jul 2018 18:04:39 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[React]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3406</guid>
		<description><![CDATA[<p>우리는 React 에서 컴포넌트에 스타일링을 하기 위해서, 외부에 CSS 파일을 작성했다. 그리고 아마도 Webpack 의 css-loader 를 사용하여, 다음과 같이 CSS 파일을 불러왔을 것이다. import './foo.css'; 물론, 이 방법이 나쁘다는 것은 아니다. 하지만 외부에 CSS&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/styled-components-%ec%8a%a4%ed%83%80%ec%9d%bc%ec%9d%84-%ed%92%88%ec%9d%80-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8/">Styled Components &#8211; 스타일을 품은 컴포넌트</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="960" height="720" src="https://hudi.kr/wp-content/uploads/2018/07/sc.001.jpeg" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/07/sc.001.jpeg 960w, https://hudi.kr/wp-content/uploads/2018/07/sc.001-300x225.jpeg 300w, https://hudi.kr/wp-content/uploads/2018/07/sc.001-768x576.jpeg 768w" sizes="(max-width: 960px) 100vw, 960px" /></p><p style="text-align: left;">우리는 React 에서 컴포넌트에 스타일링을 하기 위해서, <strong>외부에 CSS 파일을 작성</strong>했다. 그리고 아마도 Webpack 의 css-loader 를 사용하여, 다음과 같이 CSS 파일을 불러왔을 것이다.</p>
<pre class="line-numbers"><code class="language-jsx">import './foo.css';
</code></pre>
<p style="text-align: left;">물론, 이 방법이 나쁘다는 것은 아니다. 하지만 외부에 CSS 파일을 만들어서 불러오는 과거의 방법은 <strong>몇가지 불편한 점</strong>이 있다. 일단 첫번째로 <span style="text-decoration: underline;"><strong>CSS 의 Class 가 중복 될 수 있는 점</strong></span>이다. CSS 파일을 분리하고, 컴포넌트 별로 따로 불러와도 결국 여러 파일이 번들링 되기 때문에 <strong>Class 는 전역으로 작동</strong>한다. 신경쓰지 않으면, 스타일이 겹쳐버릴 수 있다. 그렇기 때문에 우리는 <strong>접두사를 만들거나, 부모클래스를 명시</strong>하는 등의 불편한 방식으로 해결해왔다.</p>
<pre class="line-numbers"><code class="language-css">.Card-title { /* ... */ }
/* 접두사를 붙이거나 */

.Card .title { /* ... */ }
/* 부모 클래스를 명시한다 */
</code></pre>
<p style="text-align: left;">이런 문제들을 어느정도 해결하기 위해 <strong>SASS 를 설치</strong>할 수도 있다. 하지만, node-sass, sass-loader 등 여러가지 모듈의 설치가 필요하고, 특히 Webpack config 를 수정해야하기 때문에 CRA (Create-React-App) 으로 프로젝트를 생성했다면, <strong>Eject 하는 작업</strong>도 필요하다.</p>
<p style="text-align: left;">상황에 따라 컴포넌트의 클래스를 바꾸기 위해 <strong>컴포넌트 className 내부에 삼항 연산자를 사용</strong>하기도 했었다.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

&lt;button className={this.props.danger ? 'button button-danger' : 'button'}&gt;
  Danger button
&lt;/button&gt;

/* ... */
</code></pre>
<p style="text-align: left;">컴포넌트의 스타일을 변경하기 위해 JSX 내부에서 직접 스타일에 관한 로직을 처리하는 모습이다.</p>
<p style="text-align: left;">우리가 어떤 컴포넌트를 만들어야한다는 <strong>상황을 가정</strong>하여, 기존 CSS 방식의 스타일링의 불편함과 Styled components 가 어떤 방법으로 문제를 해결해 주는지 알아보자.</p>
<h2>Why use Styled Components?</h2>
<p style="text-align: left;">하나 가정을 해보자. 우리는 <strong>색상이 Prop 을 통해 관리</strong>되는 새로운 버튼 컴포넌트를 제작해야한다. 색상은 <strong>Default 색상 (회색), Success 색상 (초록색), Danger 색상 (빨간색)</strong> 3가지로 설정할 수 있다.</p>
<p style="text-align: left;">일단 기존의 CSS 파일을 작성하는 방법으로 코딩해보자. App.js 에서 다음과 같이 button 엘리먼트를 추가한다. 단, 스타일 적용을 위해 class를 button 으로 설정한다.</p>
<p><strong>App.js</strong></p>
<pre class="line-numbers"><code class="language-jsx">import React, { Component } from 'react';
import './Button.css';

class App extends Component {
  render() {
    return(
      &lt;div&gt;
        &lt;button className='button'&gt; default button &lt;/button&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>
<p style="text-align: left;">그리고 Button.css 라는 파일 하나를 만들고, 다음과 같이 기본적인 스타일링을 하자.</p>
<p><strong>Button.css</strong></p>
<pre class="line-numbers"><code class="language-css">.button {
  padding: 10px 15px;
  margin: 0 5px;
  border: none;
  border-radius: 5px;
  background-color: #7B838B;
  color: #FFFFFF;
  font-size: 15pt;
}
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.08.36.png"><img class="size-full wp-image-3422 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.08.36.png" alt="" width="248" height="100" /></a></p>
<p style="text-align: left;">부트스트랩 느낌의 간단한 회색 버튼 하나가 만들어졌다. 이제 우리는 저 button 엘리먼트를 따로 <strong>컴포넌트로 분리</strong>시키고, <strong>색상에 관한 Prop</strong> 을 받아오게 설계할 것이다. 일단, Success, Danger 버튼별로 클래스를 추가하자.</p>
<p><strong>Button.css</strong></p>
<pre class="line-numbers"><code class="language-css">/* ... */

.button-success {
  background-color: #249D3D;
}

.button-danger {
  background-color: #D72E3D;
}
</code></pre>
<p style="text-align: left;">그리고 다음과 같이 App.js 를 수정한다.</p>
<p><strong>App.js</strong></p>
<pre class="line-numbers"><code class="language-jsx">import React, { Component } from 'react';
import './Button.css';

class App extends Component {
  render() {
    return(
      &lt;div&gt;
        &lt;Button&gt; default button &lt;/Button&gt;
        &lt;Button success&gt; success button &lt;/Button&gt;
        &lt;Button danger&gt; danger button &lt;/Button&gt;
      &lt;/div&gt;
    );
  }
}

const Button = ({ children, success, danger }) =&gt; (
  &lt;button className={ success ? 'button button-success' : danger ? 'button button-danger' : 'button' }&gt;
    { children }
  &lt;/button&gt;
);

export default App;
</code></pre>
<blockquote><p>Button 컴포넌트는 Prop 으로 children 을 받아오는데, 이 Prop 에는 컴포넌트의 여는 태그와 닫는 태그 사이의 요소들이 담겨 있다.</p></blockquote>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png"><img class="size-full wp-image-3424 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png" alt="" width="562" height="106" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png 562w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07-300x57.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></a></p>
<p style="text-align: left;">success 와 danger 를 Prop 으로 받아와서 <strong>JSX 내부에서 복잡한 삼항 연산자</strong>를 사용하여, 조건별로 다른 클래스를 나타내는 모습을 볼 수 있다. 위의 예제는 구조가 단순해서 if 문을 사용하여 처리할 수도 있겠지만, 컴포넌트가 조금만 더 복잡해진다면, 그런 방법은 결코 좋은 해결방법이 될 수 없다.</p>
<p style="text-align: left;">그렇다면, Styled-components 는 어떤 방식으로 이런 문제를 해결해줄까?</p>
<h2>Hello Styled Component</h2>
<p style="text-align: left;">이제 한번 Styled components 를 사용하여, 위의 컴포넌트를 다시 만들어보자. 우린 이제 <strong>더이상 CSS 파일이 필요 없으니</strong> CSS 파일과 CSS를 import 하는 코드를 지우자. 그 대신 styled-components 를 설치하자.</p>
<pre class="line-numbers"><code class="language-bash">yarn add styled-components</code></pre>
<p style="text-align: left;">그리고 기본 버튼 컴포넌트를 Styled components 방식으로 만들어보자.</p>
<pre class="line-numbers"><code class="language-jsx">import React, { Component } from 'react';
import styled from 'styled-components';
//Styled components 추가

class App extends Component {
  render() {
    return(
      &lt;div&gt;
        &lt;Button&gt; default button &lt;/Button&gt;
      &lt;/div&gt;
    );
  }
}

const Button = styled.button`
  padding: 10px 15px;
  margin: 0 5px;
  border: none;
  border-radius: 5px;
  background-color: #7B838B;
  color: #FFFFFF;
  font-size: 15pt;
`;

export default App;
</code></pre>
<p style="text-align: left;">Styled components 는 <strong>백틱 (</strong><code>`</code><strong>)</strong> 을 이용한 <strong>리터럴 템플릿</strong> 안에 컴포넌트의 스타일을 정의하여 <strong>새로운 스타일 컴포넌트</strong>를 만든다. 스타일을 정의하는 부분 이전에는 <strong>HTML Element</strong> 를 명시해준다. 우리가 위에서 작성해준 <code>Button</code> 컴포넌트는 템플릿 리터럴 안의 CSS 스타일이 적용된 button 엘리먼트이다. 처음에는 이런 문법이 이상하다 생각될 수 있다.</p>
<blockquote><p>리터럴 템플릿이 무엇인지 모른다면, &#8216;<a href="https://hudi.kr/es6-%EB%AC%B8%EB%B2%95%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EC%8B%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8/"><strong>ES6 문법으로 다시 시작하는 자바스크립트</strong></a>&#8216; 를 읽고오자.</p></blockquote>
<p style="text-align: left;">이제 Prop 에 따라 버튼의 색상을 변경해야한다. 다음과 같이 소스코드를 변경해보자.</p>
<pre class="line-numbers"><code class="language-jsx">import React, { Component } from 'react';
import styled from 'styled-components';

class App extends Component {
  render() {
    return(
      &lt;div&gt;
        &lt;Button&gt; default button &lt;/Button&gt;
        &lt;Button success&gt; success button &lt;/Button&gt;
        &lt;Button danger&gt; danger button &lt;/Button&gt;
      &lt;/div&gt;
    );
  }
}

const Button = styled.button`
  padding: 10px 15px;
  margin: 0 5px;
  border: none;
  border-radius: 5px;
  background-color: ${props =&gt; {
    if (props.success) return '#249D3D';
    else if (props.danger) return '#D72E3D';
    else return '#7B838B';
  }};
  color: #FFFFFF;
  font-size: 15pt;
`;

export default App;
</code></pre>
<p style="text-align: left;">놀랍게도 <span style="text-decoration: underline;"><strong>스타일 내부에서 Prop 에 따라 다른 값을 반환하는 로직</strong></span>을 처리한다.</p>
<p style="text-align: left;">Styled components 는 기본적으로 <strong>no-class 철학</strong>을 따른다. 스타일을 외부 CSS 파일에 분리시키지 않고, <strong>컴포넌트 내부에 정의</strong>하기 때문에, Global 하게 영향을 끼치는 Class를 사용하지 않아도 된다. <span style="color: #808080;">(사실 굳이 필요하다면, SASS 문법을 사용하여 과거의 방식처럼 Class를 사용할 수 있다)</span> 또한, CSS 파일을 사용하지 않기 때문에 놀랍게도 <span style="text-decoration: underline;"><strong>React Native 와도 스타일 공유가 가능</strong></span>해진다.</p>
<p style="text-align: left;">Styled components 의 개념에 대해 알아보았으니, styled components 에서 지원하는 여러가지 유용한 기능들을 알아보자.</p>
<h2>글로벌 스타일 (injectGlobal)</h2>
<p style="text-align: left;">Styled components 를 사용하면, 해당 컴포넌트에만 스타일이 적용된다. 하지만, Body 의 margin 이나 background-color 와 같이 <strong>Global 하게 적용되야할 스타일이 있다면</strong>? inject Global 을 사용한다.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

import styled, { injectGlobal } from 'styled-components';

injectGlobal`
  body {
    margin: 0;
    background-color: #F7F7F7;
  }
`;

/* ... */
</code></pre>
<h2>상속 (Extend)</h2>
<p style="text-align: left;">객체지향에서의 상속 개념과 같이, 원래 존재하는 스타일 컴포넌트의 스타일을 새로운 컴포넌트에 상속하고 싶을 때가 있다. 그때 Extend 를 사용한다. 기존 <code>Button</code> 컴포넌트를 <strong>확장(Extend)</strong> 하여 그림자가 있는 버튼을 새로 만들어보자.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;ShadowedButton&gt; Shadowed Button &lt;/ShadowedButton&gt;
    &lt;/div&gt;
  );
}

/* ... */

const ShadowedButton = Button.extend`
  box-shadow: 0px 5px 15px rgba(0, 0, 0, .3);
`; 

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.08.png"><img class="size-full wp-image-3425 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.08.png" alt="" width="267" height="103" /></a></p>
<p style="text-align: left;">흔한 상황은 아니지만, <strong>확장을 하면서 다른 컴포넌트나 태그로 변경</strong>하고 싶을 경우가 있다. 예시로 <code>Button</code> 컴포넌트를 <code>a</code> 태그로 변경하면서 <code>LinkButton</code> 이라는 컴포넌트로 확장해보겠다.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;LinkButton href='https://hudi.kr'&gt; Go to Hudi.kr &lt;/LinkButton&gt;
    &lt;/div&gt;
  );
}

/* ... */

const LinkButton = Button.withComponent('a');

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.29.png"><img class="size-full wp-image-3426 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.29.png" alt="" width="201" height="96" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.29.png 201w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.29-520x245.png 520w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.29-720x340.png 720w" sizes="(max-width: 201px) 100vw, 201px" /></a></p>
<p style="text-align: left;"><code>a</code> 태그에 <code>Button</code> 컴포넌트의 스타일이 적용된 모습을 확인 할 수있다. 하지만, <code>a</code> 태그는 밑줄 등의 독자적인 스타일을 가지고 있다. 다음과 같이 extend 를 사용하여 해결할 수 있다.</p>
<pre class="line-numbers"><code class="language-jsx">const LinkButton = Button.withComponent('a').extend`
  text-decoration: none;
`;
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.45.png"><img class="size-full wp-image-3427 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.12.45.png" alt="" width="189" height="84" /></a></p>
<h2>애니메이션 (Animation)</h2>
<p style="text-align: left;">CSS Animation 도 객체를 만들어서 스타일 컴포넌트에 적용할 수 있다. 360도 회전하는 <code>RotatingButton</code> 을 만들어보자.</p>
<pre class="line-numbers"><code class="language-jsx">import styled, { keyframes } from 'styled-components';
/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;RotatingButton&gt; rotating button &lt;/RotatingButton&gt;
    &lt;/div&gt;
  );
}

/* ... */

const rotation = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

const RotatingButton = Button.extend`
  animation: ${rotation} 5s linear infinite;
`

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.20.png"><img class="size-full wp-image-3428 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.20.png" alt="" width="271" height="142" /></a></p>
<p style="text-align: left;"><strong>keyframes</strong> 를 사용하여, 키프레임 객체를 생성하고, CSS 에서 애니메이션을 사용하듯 추가해주면 된다. 조금 응용해서 회전 주기를 Prop 으로 받아오는 기능도 구현해보자.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;RotatingButton duration="10"&gt; rotating button &lt;/RotatingButton&gt;
      &lt;RotatingButton duration="5"&gt; rotating button &lt;/RotatingButton&gt;
      &lt;RotatingButton&gt; rotating button &lt;/RotatingButton&gt;
    &lt;/div&gt;
  );
}

/* ... */

const RotatingButton = Button.extend`
  animation: ${rotation} ${props =&gt; (props.duration ? props.duration : 2)}s linear infinite;
`

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.52.png"><img class="size-full wp-image-3429 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.52.png" alt="" width="571" height="183" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.52.png 571w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.13.52-300x96.png 300w" sizes="(max-width: 571px) 100vw, 571px" /></a></p>
<p style="text-align: left;"><code>duration</code> 이라는 Prop 을 받아와서 1회 회전하는 시간을 조절할 수 있게 되었다. 삼항연산자로 <code>duration</code> Prop 이 주어지지 않았을때는 기본 값인 2초로 설정된다.</p>
<h2>Mixin</h2>
<p style="text-align: left;">Mixin 은 쉽게 말하면<strong> CSS의 코드블럭 객체를 만들어 재사용 가능하게 하는 방법</strong>이다. Mixin 을 사용하여, Hover 시 그림자가 생기는 <code>HoverButton</code> 을 만들어보자.</p>
<pre class="line-numbers"><code class="language-jsx">import styled, { css } from 'styled-components';

/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;HoverButton&gt; hover button &lt;/HoverButton&gt;
    &lt;/div&gt;
  );
}

/* ... */

const hoverShadow = css`
  &amp;:hover {
    box-shadow: 0 0 10px rgba(0, 0, 0, .5);
  }
`;

const HoverButton = Button.extend`
  ${hoverShadow}
`

/* ... */
</code></pre>
<blockquote><p>여기서 사용된 <strong>&amp;</strong> 은 SASS 문법중 하나로, 부모 선택자를 레퍼런스 할때 사용된다. 여기서 부모는 HoverButton 가 된다.</p></blockquote>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.15.09-1.png"><img class="size-full wp-image-3430 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.15.09-1.png" alt="" width="186" height="93" /></a></p>
<p style="text-align: left;">외부에 재사용 가능성이 있는 CSS 코드를 객체로 분리하고, <strong>여러 컴포넌트에서 재사용</strong>할 수 있다.</p>
<h2>테마 (Theme)</h2>
<p style="text-align: left;">Styled-Components 에도 Redux 와 같은 기능이 존재한다. Redux 는 여러 컴포넌트에서 공유되는 state 를 관리한다면, <strong>Theme 은 여러 컴포넌트가 동일한 CSS value 를 공유</strong>할 수 있게 해준다.</p>
<p style="text-align: left;">일단 theme.js 파일을 새로 만든다. 그리고 이 테마파일에 버튼에 적용되어 있는 default color, success color, danger color 를 테마로 정의할 것이다.</p>
<p><strong>theme.js</strong></p>
<pre class="line-numbers"><code class="language-jsx">const theme = {
  defaultColor: "#868e96",
  successColor: "#249D3D",
  dangerColor: "#D72E3D"
}

export default theme;
</code></pre>
<p style="text-align: left;">테마를 불러오고 적용하기만 하면된다. Redux 의 Provider 처럼 <strong>ThemeProvider</strong> 를 사용하여 테마를 사용한다.</p>
<p><strong>App.js</strong></p>
<pre class="line-numbers"><code class="language-jsx">/* ... */
import styled, { ThemeProvider } from 'styled-components';
import theme from './theme';

class App extends Component {
  render() {
    return(
      &lt;ThemeProvider theme={theme}&gt;
        &lt;div&gt;
          &lt;Button&gt; default button &lt;/Button&gt;
          &lt;Button success&gt; success button &lt;/Button&gt;
          &lt;Button danger&gt; danger button &lt;/Button&gt;
        &lt;/div&gt;
      &lt;/ThemeProvider&gt;
    );
  }
}

const Button = styled.button`
  padding: 10px 15px;
  margin: 0 5px;
  border: none;
  border-radius: 5px;
  background-color: ${props =&gt; {
    if (props.success) return theme.successColor; //#249D3D
    else if (props.danger) return theme.dangerColor; //#D72E3D
    else return theme.defaultColor; //#868e96
  }};
  color: #FFFFFF;
  font-size: 15pt;
`;

export default App;
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png"><img class="size-full wp-image-3424 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png" alt="" width="562" height="106" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07.png 562w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.09.07-300x57.png 300w" sizes="(max-width: 562px) 100vw, 562px" /></a></p>
<p style="text-align: left;">JSX 의 최상위 레벨을 <strong>ThemeProvider</strong> 로 묶어주고, 작성한 테마 모듈을 <code>theme</code> prop 으로 넣어준다. 하단의 Button 스타일 컴포넌트를 보면 theme.successColor 처럼 우리가 정의해놓은 테마를 사용하는 모습을 볼 수 있다.</p>
<p style="text-align: left;"><strong>야간모드, 색약모드, 커스텀 테마 등을 구현할 때 아주 유용하게 사용</strong>되는 기능이다.</p>
<h2>다른 컴포넌트 참조 (Referring to other components)</h2>
<p style="text-align: left;">다른 스타일 컴포넌트를 선택하기 위한 <strong>레퍼런스가 필요</strong>할 수 있다. SASS 와 같은 문법으로 다음과 같이 사용된다.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

render() {
  return(
    &lt;Container&gt;
      &lt;Header&gt; about styled-components &lt;/Header&gt;
      &lt;Paragraph&gt;
        Styled components 는 백틱을 이용한 리터럴 템플릿 안에 컴포넌트의 스타일을
        정의하여 새로운 스타일 컴포넌트를 만든다. 스타일을 정의하는 부분 이전에 ...
      &lt;/Paragraph&gt;
    &lt;/Container&gt;
  );
}

/* ... */

const Container = styled.div`
  margin: 0 auto;
  width: 500px;
  ${Paragraph} {
    font-size: 15pt;
    line-height: 180%;
  }
`;

const Header = styled.h2`
  color: #212529;
`;

const Paragraph = styled.p`
  color: #495057;
`;

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.31.png"><img class="size-full wp-image-3431 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.31.png" alt="" width="613" height="255" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.31.png 613w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.31-300x125.png 300w" sizes="(max-width: 613px) 100vw, 613px" /></a></p>
<p style="text-align: left;">스타일 컴포넌트 <code>Container</code> 에서 외부 스타일 컴포넌트인 <code>Paragraph</code> 를 <strong>참조</strong>하여 새로운 스타일을 적용한것을 볼 수 있다.</p>
<h2>추가적인 속성 (Additional Attributes)</h2>
<p style="text-align: left;">만약 input 엘리먼트에 기본 placeholder 를 적용하고 싶다면 어떻게 해야할까? attrs 를 사용하여 styled element 에 <strong>custom attributes</strong> 를 적용할 수 있다.</p>
<pre class="line-numbers"><code class="language-jsx">/* ... */

render() {
  return(
    &lt;div&gt;
      &lt;Input /&gt;
      &lt;Input placeholder="i have a placeholder." /&gt;
    &lt;/div&gt;
  );
}

/* ... */

const Input = styled.input.attrs({
  placeholder: "default placeholder"
})`
  border: 1px solid #C7CED5;
  border-radius: 5px;
  padding: 10px;
  font-size: 13pt;
`;

/* ... */
</code></pre>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.57.png"><img class="size-full wp-image-3432 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.57.png" alt="" width="477" height="92" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.57.png 477w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-09-오전-3.16.57-300x58.png 300w" sizes="(max-width: 477px) 100vw, 477px" /></a></p>
<h2>마치며</h2>
<p style="text-align: left;">필자도 처음 Styled components 를 접하고, 표준에도 어긋나는 것 같으면서 마크업과 스타일의 분리를 위해 등장한 CSS 를 왜 다시 컴포넌트로 합치는지 의문이었다. 하지만, 알면 알수록 강력한 styled components 의 기능에 흠뻑 빠져 앞으로의 프로젝트에서는 적극적으로 도입해볼 생각이다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/styled-components-%ec%8a%a4%ed%83%80%ec%9d%bc%ec%9d%84-%ed%92%88%ec%9d%80-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8/">Styled Components &#8211; 스타일을 품은 컴포넌트</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/styled-components-%ec%8a%a4%ed%83%80%ec%9d%bc%ec%9d%84-%ed%92%88%ec%9d%80-%ec%bb%b4%ed%8f%ac%eb%84%8c%ed%8a%b8/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>인후라이프 (inhoolife.com) 개발일지</title>
		<link>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-inhoolife-com-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/</link>
		<comments>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-inhoolife-com-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/#respond</comments>
		<pubDate>Wed, 04 Jul 2018 17:38:30 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[개발 일지]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3389</guid>
		<description><![CDATA[<p>개발 동기 조금 뜬금없지만, 나는 동물을 좋아하기도 하고 친목도 좋아하는 편이라 대학교에서 유기동물 봉사 동아리를 하고 있다. 동아리 단톡방에서는 잡담이 오가는데, 전후에 어떤 이야기가 오갔는지 정확히 기억은 안나지만 인하대 후문의 많은 식당중에서 룰렛을 돌려 랜덤으로&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-inhoolife-com-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/">인후라이프 (inhoolife.com) 개발일지</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="800" height="400" src="https://hudi.kr/wp-content/uploads/2018/07/29511865_1934568903430284_7079750777419674552_n.jpg" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/07/29511865_1934568903430284_7079750777419674552_n.jpg 800w, https://hudi.kr/wp-content/uploads/2018/07/29511865_1934568903430284_7079750777419674552_n-300x150.jpg 300w, https://hudi.kr/wp-content/uploads/2018/07/29511865_1934568903430284_7079750777419674552_n-768x384.jpg 768w" sizes="(max-width: 800px) 100vw, 800px" /></p><h2>개발 동기</h2>
<p>조금 뜬금없지만, 나는 동물을 좋아하기도 하고 친목도 좋아하는 편이라 대학교에서 유기동물 봉사 동아리를 하고 있다. 동아리 단톡방에서는 잡담이 오가는데, 전후에 어떤 이야기가 오갔는지 정확히 기억은 안나지만 인하대 후문의 많은 식당중에서 룰렛을 돌려 랜덤으로 한 식당을 보여주는 사이트, 일명 인후룰렛 같은것을 만들면 재밌겠다는 이야기가 나왔다. 마침 개발할만한 새 프로젝트를 은연중에 물색하고 있던 나에게 실생활에 밀접하면서도, 간단하고, 재밌는 프로젝트라는 생각이 들었다. 허나 이름을 그대로 인후룰렛 (Inhoo Roulette) 으로 하게되면, 도메인이 너무 길어지기 때문에 그냥 삘받아서 <strong>인후라이프 (Inhoo Life)</strong> 라고 명명했다.</p>
<h2>개발 준비</h2>
<p>바로 그날부터 웹사이트 UI를 구상하고, 포토샵으로 로고를 만들고, HTML과 CSS 로 웹사이트 뼈대를 제작했다. 개발 초기에는 React 를 적용하면 좋겠다는 생각을 했지만, (내 고질적인 문제인) 단순한 귀찮음으로 <strong>Jquery</strong> 를 사용해 개발을 시도하였으나.. 체크박스 같은것을 직접 구현하는 것은 Jquery 로 DOM을 일일히 건드는 것보다, <strong>React</strong>로 직접 컴포넌트를 만드는 것이 더 편하고 깔끔할 것 이라는 생각이 들었다. 무엇보다 Jquery 는 이제 <strong>죽은 기술</strong> 이며, <strong>트렌디한 개발자</strong>가 되기 위해서는 이 기회에 React를 제대로 공부하면서 실제 프로젝트에 적용해봐야겠다는 생각이 들었다. 그리고 백엔드 스택은 평소에 자주 써오던 node.js + Express + Mongodb 스택을 사용하기로 결정하였다.</p>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow.jpeg"><img class="alignnone size-full wp-image-3393" src="https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow.jpeg" alt="" width="1800" height="600" srcset="https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow.jpeg 1800w, https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow-300x100.jpeg 300w, https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow-768x256.jpeg 768w, https://hudi.kr/wp-content/uploads/2018/07/1_HSisLuifMO6KbLfPOKtLow-1024x341.jpeg 1024w" sizes="(max-width: 1800px) 100vw, 1800px" /></a></p>
<p>사실 React 할줄 안다고 말만 잘하지, 컴포넌트 생애주기도 제대로 알고 있지 않은 수준이었다. 인후라이프를 개발하면서, 가장 어려웠던 것은 Jquery를 사용하면서 DOM을 직접 건드리던 방식에서, React의 구조를 익히고 컴포넌트를 직접 설계하는 등의 <strong>React로의 Migration 과정</strong> 이었다. 다들 알다시피 React 는 <strong>프레임워크가 아닌 라이브러리</strong>기에 프로젝트 구조등에 구애받지 않는다. 즉, 개발자가 직접 프로젝트의 구조를 설계하고, 컨벤션을 정하는 과정이 필요한데, 나는 솔직히 지금까지 <strong>정말 대충, 되는대로, 맘편한대로</strong> 코딩해왔었다. 그 덕에 코드는 <strong>구조적이지 않고, 누더기 </strong>같았다. 돌아가면 장땡이라는 태도로 개발해왔다. 정말 좋지 않는 버릇을 이번 기회에 바꿔보기로 했다. 추가로 누구에게 보여줘도 부끄럽지 않은 코드를 만들자는 의미로, <strong>Github Public Repository 에 주기적으로 Commit</strong> 하기로 결정했다. <a href="https://github.com/devHudi/inhoolife"><strong>인후라이프 Repository</strong></a></p>
<h2>프론트엔드</h2>
<p>일단은, <strong>CRA (Create-React-App)</strong> 을 이용해서, React 프로젝트를 뼈대를 자동으로 생성했다. 그 다음, React 튜토리얼과 Github 등에서 다른사람의 React 프로젝트를 보며, <strong>.js 파일과 폴더의 구조</strong>가 어떠한지, 어떻게 관리하는지를 알아보았다. 결과적으로 나는 폴더를 크게 다음과 같이 구성했다.</p>
<ul>
<li><strong>build</strong> : 자바스크립트 파일들이 Transfile 되어 Build 된 결과물이 저장됨</li>
<li><strong>node_modules</strong> : 자동 설치된 node.js 관련 모듈</li>
<li><strong>public</strong> : index.html 과 css, img 등의 리소스 파일들</li>
<li><strong>src</strong> : React Component Js 파일들</li>
</ul>
<p>여기까지는 CRA 명령으로 initialized 된 프로젝트의 폴더 구조 그대로이다. 그 상태에서는 src 폴더에 .js 파일이 위치하게 된다. 필자는 <strong>멍청한 컴포넌트와 똑똑한 컴포넌트 (Dumb component &amp; Smart component)</strong> 패턴으로 컴포넌트 .js 파일들을 관리하기로 생각했다. 그리고 다음과 같이 폴더를 구성했다.</p>
<ul>
<li>src/<strong>components</strong> : 멍청한 컴포넌트</li>
<li>src/<strong>containers</strong> : 똑똑한 컴포넌트</li>
</ul>
<p>멍청한 컴포넌트와 똑똑한 컴포넌트 패턴은 간단하게 말하자면, 마크업과 스타일을 갖아 보여지는 역할을 하는 컴포넌트 (멍청한 컴포넌트) 와 실제 기능이 동작하고 State 를 갖는 컴포넌트 (똑똑한 컴포넌트) 를 구분해서 관리하는 패턴이다. 자세한 내용은 따로 관련 글을 작성해서 소개하도록 하겠다.</p>
<p>그런데, 내가 패턴을 완벽히 이해 못한것인지 아니면 멍청한 컴포넌트와 똑똑한 컴포넌트를 제대로 구분해서 구조하지 못한건지, 멍청한 컴포넌트는 만들어지지 않았다. 만든 컴포넌트마다 항상 State 가 필요했다. 사실 똑똑한 컴포넌트에서 State 만 관리하고 하위에 멍청한 컴포넌트 여러개를 두는 방법이 있었는데, 그렇게 엄격하게 나눠야하는지 의문이 들었던 점도 있었다.</p>
<blockquote><p>한참이 지나서야 알게된 사실인데, 멍청한/똑똑한 컴포넌트라는 말 대신 Component 와 Container 라고 부르는 것 같다. 그리고 Redux 까지 공부하면서 확실히 둘의 역할 구분에 대해 알게되었다. 거의 정석같이 사용되는 패턴이니 지금이라도 확실히 알아둬서 다행이다.</p></blockquote>
<h2>백엔드</h2>
<p>백엔드는 node.js 와 Express, MongoDB 를 사용하였다. 폴더 구조는 다음과 같다.</p>
<ul>
<li><strong>controllers</strong> : MVC 의 Controller 이다. model 을 사용하여, 데이터를 가져오고 Router 쪽으로 export 한다.</li>
<li><strong>models</strong> : MVC 의 Model 이다. 쿼리를 사용하여, MongoDB에 직접 접속하여 Mongoose 모델을 export 한다.</li>
<li><strong>routes</strong> : 각 route path 마다 controller 의 function 을 연결해준다. 파라미터로 res, req 를 넘겨준다.</li>
</ul>
<p>단순한 API 서버를 간단하게 구축한거라 별로 어렵지 않았다. 다만, 항상 만들면서도 MVC 패턴은 헷갈린다. M V C 각각의 관심사를 어느정도까지 분리하는게 맞는지 잘 모르겠다.</p>
<p>그리고 나중에서야 알게 된건데, statics 나 methods 를 사용해서 몽구스 모델이나 데이터 인스턴스 자체에 메소드를 넣을 수 있더라. 인후라이프에서는 models 은 단순히 mongoose model 을 controller 에 보내고 query 를 controller 에서 처리했는데, 모델 자체에 메소드를 만들어, 모델에서 query 하고 나온 데이터만을 controller 에 보내는 방법이 훨씬 나을 것 같다. 아니 맞는 방법인것 같다.</p>
<p><a href="http://mongoosejs.com/docs/guide.html#statics"><strong>http://mongoosejs.com/docs/guide.html#statics</strong></a></p>
<p><a href="http://mongoosejs.com/docs/guide.html#methods"><strong>http://mongoosejs.com/docs/guide.html#methods</strong></a></p>
<p>자세한것은 여기서 읽어 볼 수 있다.</p>
<h2>버전관리</h2>
<p>개인 프로젝트를 하며 처음으로 버전관리를 사용했다. 이 이후에 교내 프로그래밍 동아리인 IGRUS 에서 Github 스터디에 참여하면서, Commit 메세지 작성법에 대해 제대로 배우게 되었다. 한국어로 장난스럽게 휘갈겨버린 내 Commit 메세지가 부끄러웠다. 심지어 스터디 진행도중에 리딩하시는 분이 ‘재밌는 분이 있다’고 하시면서 나의 레포지토리에 접속하셔서 인후라이프 레포지토리 커밋 메세지를 스크린에 띄워주셨는데 진짜 창피했다… 그래도 인후라이프 알아보시고 놀라시는 분도 계시고, 잘하시는 분이라고 칭찬도 받으니 기분은 좋았다.</p>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-1.47.11.png"><img class="size-full wp-image-3396 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-1.47.11.png" alt="" width="305" height="277" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-1.47.11.png 305w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-1.47.11-300x272.png 300w" sizes="(max-width: 305px) 100vw, 305px" /></a></p>
<p style="text-align: center;"><strong><span style="font-size: 10pt;">하.. 세상에</span></strong></p>
<p>그 창피함 이후로 커밋 메세지 규칙을 잘 지켜 이쁘게 커밋하고 있다&#8230;</p>
<h2>반응</h2>
<p>인하대학교 에브리타임 실시간 인기 게시물에 올라가고, 인하광장 월간 최다 추천게시물 2위까지 올라갔다. 인하광장은 학교 측에서도 많이 확인하는 것 같다. 인하대학교 발전 협력팀에서 먼저 연락이 왔다. 인하 사랑 후원의 집 이란 것을 운영하고 있는데, 우리 학교에 매월 정기 후원을 해주시는 음식점을 따로 태그로 만들어서 홍보해줄 수 있냐는 부탁을 받았다. 그대신 나는 학교에서 해줄 수 있는 방법으로 홍보를 도와달라는 요청을 했고, 학교 홍보팀에서 간단한 인터뷰를 마치고, 인후라이프는 여러 언론사들에서 보도됐다.</p>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.28.18.png"><img class="size-full wp-image-3395 aligncenter" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.28.18.png" alt="" width="610" height="425" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.28.18.png 610w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.28.18-300x209.png 300w" sizes="(max-width: 610px) 100vw, 610px" /></a></p>
<p>네이버 뉴스에서 ‘인하대 조동현’, ‘인후라이프’ 등의 키워드로 검색하면, 인경호에서 손가락하트를 하고있는 나의 모습을 볼 수 있다… (<a href="https://search.naver.com/search.naver?where=news&amp;query=%EC%9D%B8%ED%95%98%EB%8C%80%20%EC%A1%B0%EB%8F%99%ED%98%84&amp;sm=tab_srt&amp;sort=1&amp;photo=0&amp;field=0&amp;reporter_article=&amp;pd=0&amp;ds=&amp;de=&amp;docid=&amp;nso=so%3Add%2Cp%3Aall%2Ca%3Aall&amp;mynews=0&amp;mson=0&amp;refresh_start=0&amp;related=0"><strong>보도자료 검색 결과</strong></a>)</p>
<p>학교 홍보팀에서 인터뷰하고, 여러 언론사에 내가 보도된 이후 교내 신문사에서도 인터뷰 요청이 들어왔다. 학생 기자들이 학교의 여러 소식들을 학교 신문에 보도하나본데, 퀄리티가 꽤 높아서 놀랐다. 학교 홍보팀에서 인터뷰를 했을때는 약 15분정도로 되게 짧은 시간에 핵심만을 인터뷰했는데, 이곳에서는 꽤 길게 인터뷰했고, 장문으로 보도되었다. 재밌던점은 인터뷰하는 곳 화이트보드에 앞으로 인터뷰 하고 싶은 사람 목록이 적혀 있었는데, 내 이름과 함께 김구라, MC그리, 전효성 등의 연예인 이름이 같이 써있었다. 물어보니 할 예정보다는 하고싶다는 의미로 적어둔것이라고 한다.</p>
<p><a href="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.34.55.png"><img class="alignnone size-full wp-image-3399" src="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.34.55.png" alt="" width="909" height="699" srcset="https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.34.55.png 909w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.34.55-300x231.png 300w, https://hudi.kr/wp-content/uploads/2018/07/스크린샷-2018-07-05-오전-2.34.55-768x591.png 768w" sizes="(max-width: 909px) 100vw, 909px" /></a></p>
<p>교내 신문사에서 인터뷰한 내용은 교내 신문 한면의 전면으로 보도되었고, 인하프레스라는 사이트에도 업로드 되었다. <a href="http://www.inhapress.com/news/articleView.html?idxno=7721"><strong>교내 신문 보도자료 전문 읽어보기</strong></a></p>
<h2>후기</h2>
<p>무언가 서비스를 만들어서 교내 학생들에게 뜨거운 관심을 받으며, 인터뷰까지 해본 적은 처음이었다. 이전에는 익명의 L0GIC 혹은 Hudi 라는 이름의 인터넷에서만 볼 수 있는 개발자로 활동해서 서비스를 개발했다면, 이번에는 <strong>인하대 학생인 조동현 학우로서 서비스를 만들게 되었다</strong>. 기분이 조금 달랐다. 왜냐하면 <strong>내가 알고있는 주변</strong> <strong>비개발자 사람들이 내 서비스를 사용</strong>했고, 내가 개발자인 것을 알고 있으니 말이다. 역시 서비스 개발하는게 제일 재밌다. 앞으로도 이런건 꾸준히 만들 것 같다. 아이디어만 있으면 말이지.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-inhoolife-com-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/">인후라이프 (inhoolife.com) 개발일지</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/%ec%9d%b8%ed%9b%84%eb%9d%bc%ec%9d%b4%ed%94%84-inhoolife-com-%ea%b0%9c%eb%b0%9c%ec%9d%bc%ec%a7%80/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>ES6 문법으로 다시 시작하는 자바스크립트</title>
		<link>https://hudi.kr/es6-%eb%ac%b8%eb%b2%95%ec%9c%bc%eb%a1%9c-%eb%8b%a4%ec%8b%9c-%ec%8b%9c%ec%9e%91%ed%95%98%eb%8a%94-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/</link>
		<comments>https://hudi.kr/es6-%eb%ac%b8%eb%b2%95%ec%9c%bc%eb%a1%9c-%eb%8b%a4%ec%8b%9c-%ec%8b%9c%ec%9e%91%ed%95%98%eb%8a%94-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/#comments</comments>
		<pubDate>Wed, 04 Jul 2018 16:33:54 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[Javascript]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3385</guid>
		<description><![CDATA[<p>ES6 (=ECMAScript 2015) 가 발표된지도 어언 3년이 다 되어가고 있다. 하지만, 이미 구세대의 기술이 되어버린 Jquery 와 ES5는 아직 많이 사용되고 있다. 현재 자바스크립트 생태계는 Angular, React, Vue 등의 최신 기술이 등장하고, 끊임없이 개선되고, 변화되고&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/es6-%eb%ac%b8%eb%b2%95%ec%9c%bc%eb%a1%9c-%eb%8b%a4%ec%8b%9c-%ec%8b%9c%ec%9e%91%ed%95%98%eb%8a%94-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/">ES6 문법으로 다시 시작하는 자바스크립트</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="960" height="595" src="https://hudi.kr/wp-content/uploads/2018/06/es6-2.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/06/es6-2.png 960w, https://hudi.kr/wp-content/uploads/2018/06/es6-2-300x186.png 300w, https://hudi.kr/wp-content/uploads/2018/06/es6-2-768x476.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></p><p><span style="text-decoration: underline;"><strong>ES6 (=ECMAScript 2015)</strong></span> 가 발표된지도 어언 3년이 다 되어가고 있다. 하지만, 이미 <strong>구세대의 기술이 되어버린 Jquery 와 ES5는 아직 많이 사용</strong>되고 있다. 현재 자바스크립트 생태계는 Angular, React, Vue 등의 <strong>최신 기술이 등장하고, 끊임없이 개선되고, 변화</strong>되고 있다. 그리고 그 생태계의 중심은 <strong>ES6 (혹은 그 이상 버전)</strong> 이다.</p>
<p>아마, <strong>React</strong> 와 같은 최신 기술을 공부하려다 <strong>ES6 라는 벽</strong>이 낯설어 선뜻 도전해보지 못한 분들이 많을 것이라고 생각한다. 이 문서는 같은 동작을 하는 <strong>ES5와 ES6의 소스코드에서 <span style="text-decoration: underline;">문법을 비교</span></strong>하며, 모던 자바스크립트 입문자에게 도움을 드리고자한다. 한 문서에서 모든 내용을 다룰 수 없기에, <strong>자주 사용되는 핵심 내용</strong>을 서술한다. 그래도 ES6의 여러 내용을 다루기에 깊이 있게 다루지는 않지만, 모던 자바스크립트를 공부하고자 하는 분들께 도움이 되기를 바란다.</p>
<h2>새로운 변수 선언 키워드, let과 const</h2>
<p>ES6 이전의 자바스크립트에서는 <code>var</code> 키워드를 통해 변수를 선언했다. <code>var</code> 키워드로 선언된 변수는 <strong>function scope</strong> 이다. 변수의 범위가 함수 전체에 작용한다는 의미이다. ES6 에서는 <code>let</code> 과 <code>const</code> 키워드가 새로 등장한다. 각각 변수와 상수를 선언할때 사용한다. <code>let</code> 과 <code>const</code> 키워드로 선언된 변수는 <strong>block scope</strong> 를 같게 된다. Block scope 는 <strong>중괄호 ({ })</strong> 를 기준으로 유효범위를 갖는다. 일단 <strong>Scope 에 대한 차이점</strong>을 살펴보자.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">function foo() {
  if (true) {
    var a = 'bar';
  }

  console.log(a);
}

foo();
// bar</code></pre>
<p>정상적으로 <strong>bar</strong> 이라는 문자열을 출력하는 모습을 볼 수 있다. 여기서 변수 <code>a</code> 는 <code>foo</code> 함수에서 전역으로 영향력을 갖게 된다. 그렇기 때문에 <strong>if 문의 scope 안</strong>에서 선언된 변수도 <strong>밖에서 접근이 가능</strong>하다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">function foo() {
  if (true) {
    let a = 'bar';
  }

  console.log(a);
}

foo();
// Uncaught ReferenceError: a is not defined</code></pre>
<p>하지만 <code>let</code> 으로 선언한 변수는 <strong>if문의 scope 내에서만 유효</strong>하기 때문에 해당 scope 밖에서 <code>a</code> 에 접근할때, 오류가 발생한다.</p>
<p><code>const</code> 키워드로는 상수를 선언할 수 있다. 값이<strong> 변하지 않음을 확신할 수 있는 변수</strong>는 <code>const</code> 로 선언하는 것이 바람직하다.</p>
<pre class="line-numbers"><code class="language-javascript">let foo = 1;
foo = 2;
// Good

const bar = 1;
bar = 2;
// Uncaught TypeError: Assignment to constant variable.</code></pre>
<p><code>let</code> 으로 선언된 변수는 오류가 없지만, <code>const</code> 로 선언된 상수는 값을 변경할 수 없다는 오류가 발생한다.</p>
<h2>화살표 함수 (Arrow Function)</h2>
<p>ES6 이전에 함수를 선언하기 위해서 <code>function</code> 키워드를 사용했다. ES6 부터는 <strong>화살표 함수 (Arrow Function)</strong> 문법을 지원한다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var a = function() {
  console.log("function");
}
a();</code></pre>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const a = () =&gt; {
  console.log("arrow function");
}
a();</code></pre>
<p>기본적으로 화살표 함수는 기존 <code>function</code> 키워드의 축약형이다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const print = text =&gt; {
  console.log(text);
}
// 파라미터가 1개일땐 괄호 생략 가능

const sum = (a, b) =&gt; (a + b)
// 간단한 표현식만을 반환 할때는 return 생략 가능</code></pre>
<p><strong>파라미터를 1개만 받을 때는 괄호를 생략</strong>할 수 있고, <strong>간단한 표현식</strong>을 반환할때는 괄호와 <code>return</code> 을 생략할 수 있다.</p>
<p>이런 간단한 기능도 있지만, <code>function</code> 키워드와 가장 큰 차이점은 this 의 바인딩 여부이다.</p>
<h3>this 를 바인딩 하지 않는다</h3>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">function Foo() {
  this.func1 = function() {
  	console.log(this);
    // this === Foo
  }
  
  this.func2 = function() {
  	var func3 = function() {
    	console.log(this);
      // this === Window (global)
    }
    func3();
  }
}

var foo = new Foo();
foo.func1();
foo.func2();</code></pre>
<p>자바스크립트에서의 <code>this</code> 개념은 개발자를 혼란스럽게 한다. 다른 객체지향 언어와 달리 <code>this</code> 가 <strong>함수 실행 문맥 (Context)</strong> 에 따라 달라지기 때문이다. 위 코드에서 <code>func1</code> 가 실행될때는 <strong>메소드 실행 문맥</strong> 이기 때문에, <code>this</code> 는 <code>Foo</code> 이지만 , <code>func2</code> 를 보면, 새로 선언된 <code>func3</code> <strong>함수</strong>의 실행은 <strong>함수 실행 문맥</strong> 이기 때문에 <code>this</code> 가 <code>Window</code> 객체, 즉 전역 객체가 할당된다.</p>
<p>화살표 함수가 등장하기 이전에는 이런 문제를 해결하기 위해서 보통 <strong>that</strong> 이라는 변수를 선언하고, 새로운 this 가 바인딩 되기전 this 를 할당시켰다.</p>
<pre class="line-numbers"><code class="language-javascript">...

this.func2 = function() {
  var that = this;
  //...뭔가 좀 이상하다

  var func3 = function() {
    console.log(that);
    // that === Foo
  }
  func3();
}

...
</code></pre>
<p>이런 헷갈리는 this 의 개념은 직관적이지 못하고, 불편했다. <strong>화살표함수는 새로운 this 를 바인딩 하지 않아</strong> 다음과 같이 작성해도 올바르게 작동한다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">function Foo() {
  this.func1 = function() {
    console.log(this);
    // this === Foo
  }

  this.func2 = function() {
    var func3 = () =&gt; {
      console.log(this);
      // this === Foo
    }
    func3();
  }
}

var foo = new Foo();
foo.func1();
foo.func2();
</code></pre>
<p>this 가 동일한 객체를 가리켜, 코드가 조금 더 깔끔해진 모습을 볼 수 있다.</p>
<h2>템플릿 리터럴 (Template literal)</h2>
<p>ES6 에서 새롭게 도입된 문자열 표기법이다. 기존 자바스크립트에서 <strong>변수와 문자열을 같이 보여주기 위해서</strong>는 <strong>문자 결합 연산자</strong>인 <code>+</code> 를 사용했다. 아래의 코드를 보자.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var name = "Hudi";
var job = "developer";

console.log("제 이름은 " + name + " 이고, 직업은 " + job + " 입니다.");
//제 이름은 Hudi 이고, 직업은 developer 입니다.
</code></pre>
<p>가독성이 매우 떨어지며, 실수가 발생하기 쉬운 형태이다.</p>
<p>ES6 의 템플릿 리터럴을 사용하면 어떻게 표현될까? ES5 에서 문자열을 표기하기 위해서는 <code>'</code> (작은 따옴표) <code>"</code> (큰 따옴표)로 문자열을 감싸주었다. 템플릿 리터럴은 <code>`</code> (백틱) 을 사용해 문자열을 감싼다. 특이점은 <strong>변수도 포함해서 같이 감쌀 수 있다</strong>는 것이다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const name = "Hudi";
const job = "developer";

console.log(`제 이름은 ${name} 이고, 직업은 ${job} 입니다.`);
//제 이름은 Hudi 이고, 직업은 developer 입니다.
</code></pre>
<p>백틱 로 문자열을 감싸고 그 사이에 <code>${변수명}</code> 으로 표현해주면, 해당 변수의 값이 그대로 다른 문자열과 같이 출력된다. 템플릿 리터럴은 일반 문자열 리터럴과 다르게 <strong>공백과 개행을 그대로 표현</strong>해준다.</p>
<pre class="line-numbers"><code class="language-javascript">const name = "Hudi";
const job = "developer";

const msg = `제 이름은 ${name} 이고
직업은 ${job} 입니다.`;

console.log(msg);
/*
제 이름은 Hudi 이고
직업은 developer 입니다.
*/
</code></pre>
<p>더 이상 <code>+</code>, <code>\n</code>, <code>\t</code> 등을 사용하여 복잡한 문자열을 표현할 필요가 없다.</p>
<h2>비구조화 할당 (destructuring assignment)</h2>
<p>비구조화 할당 <span style="color: #808080;">( 번역에 따라 구조분해 할당이라고도 한다 )</span> 은 <strong>객체안의 필드를 손쉽게 꺼내어 변수로 대입할 수 있는 문법</strong>이다. ES6 이전의 문법으로 객체의 필드를 꺼내어 새로운 변수에 대입하려면 다음과 같이 코드를 작성해야 한다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var hudi = {
  name: "조동현",
  job: "developer",
  skills: ["ES6", "React", "node.js"]
}

var name = hudi.name;
var job = hudi.job;

console.log(name, job); // 조동현 developer
</code></pre>
<p>새로운 <code>name</code>, <code>job</code> 두개의 변수를 선언하고, <code>.</code> 키워드로 객체의 필드에 직접 접근하여 값을 가져온다. ES6 에서는 이런 복잡한 과정을 거칠 필요가 없다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const hudi = {
  name: "조동현",
  job: "developer",
  skills: ["ES6", "React", "node.js"]
}

let { name, job } = hudi;
//비구조화 할당

console.log(name, job); // 조동현 developer
</code></pre>
<p>조금 낯선 문법이 보인다. 변수 선언시에 <code>{ }</code> 를 사용한다. 해당 코드는 hudi의 name, job 필드를 같은 이름을 가진 변수에 바로 대입을 해준다.</p>
<p>객체를 비구조화한 후 함수의 인자로 넘길 수도 있다.</p>
<pre class="line-numbers"><code class="language-javascript">const hudi = {
  name: "조동현",
  job: "developer",
  skills: ["ES6", "React", "node.js"]
}

function printSkills({skills}) {
  skills.map((skill) =&gt; {
    console.log(skill);
  });
}

printSkills(hudi);
/*
  ES6
  React
  node.js
*/
</code></pre>
<p><code>printSkills</code> 함수가 받는 인자가 중괄호의 형태를 가지고 있는 것이 보이는가? 어떤 객체를 넣어주면, 해당 객체를 분해하여 <code>skills</code> 필드만 가져와서 사용할 수 있는 것이다.</p>
<p>또한 배열에서도 비구조화 할당을 사용할 수 있다.</p>
<pre class="line-numbers"><code class="language-javascript">const languages = ["Javascript", "Python", "Java", "C#"];
const [first, second, third] = languages;

console.log(first, second, third);
//Javascript Python Java
</code></pre>
<p>이렇게 객체 혹은 배열을 분해하여 필요한 필드만 추출하여, 별개의 변수로 대입하는 방식이 <strong>비구조화 할당</strong> 이다.</p>
<h2>향상된 객체 리터럴 (enhanced object literals)</h2>
<p>ES6 에서는 다음과 같이 객체의 리터럴이 개선되었다.</p>
<h3>단축된 프로퍼티 초기화</h3>
<p>기존 ES5 에서 객체를 생성할 때, 필드명과 대입할 변수명이 같은 상황에서 다음과 같이 코드를 작성하였다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var name = "조동현";
var job = "developer";

var hudi = {
  name: name,
  job: job
}

console.log(hudi);
//{name: "조동현", job: "developer"}
</code></pre>
<p>ES6 에서는 다음과 같이 간결하게 작성할 수 있다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const name = "조동현";
const job = "developer";

const hudi = {
  name,
  job
}

console.log(hudi);
//{name: "조동현", job: "developer"}
</code></pre>
<p><strong>key: value</strong> 형태에서 단순히 변수명만 작성해주면 변수명과 동일한 필드가 생성되며, 그 변수값이 대입된다.</p>
<h3>간결한 메서드</h3>
<p>ES6 에서는 더 이상 객체 메서드를 정의하기 위해 <code>function</code> 키워드를 사용하지 않아도 된다. 일단 ES5 문법으로 객체 메서드를 정의해보자.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var person = {
  name: "조동현",
  getName: function() {
    return this.name;
  }
}

console.log(person.getName());
//조동현
</code></pre>
<p>ES5에서는 <code>foo: function(…) { … }</code> 형태로 객체 메서드를 정의해야 한다. ES6 에서는 어떤 방식으로 객체 메서드를 정의할 수 있을까?</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const person = {
  name: "조동현",
  getName() {
    return this.name;
  }
}

console.log(person.getName());
//조동현
</code></pre>
<p><code>function</code> 키워드가 없어지고, 더욱 간결한 문법을 확인할 수 있다. ES6 에서는 이와 같이 개선된 객체 리터럴을 사용할 수 있다.</p>
<h2>전개 연산자 (spread operator)</h2>
<p>전개 연산자는 <strong>점 세개 </strong><code>(…)</code> 로 이루어져 있는 연산자이며, 여러가지 역할을 담당하고 있다.</p>
<h3>배열의 내용 조합</h3>
<p>ES5 에서는 여러 배열의 내용을 합쳐 새로운 배열을 만들기 위해 <code>concat</code> 메서드를 사용한다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var a = [1,2,3];
var b = [3,4];
var c = "끝";

var d = a.concat(b, c);

console.log(d);
//[1, 2, 3, 3, 4, "끝"]
</code></pre>
<p><code>a</code> 배열에서 <code>concat</code> 메서드를 사용해서, 배열 b와 문자열 c를 배열에 이어붙였다. ES6 에서는 전개 연산자를 사용해서 직관적이고 간결하게 표현할 수 있다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const a = [1,2,3];
const b = [3,4];
const c = "끝";

const d = [...a, ...b, c];

console.log(d);
//[1, 2, 3, 3, 4, "끝"]
</code></pre>
<p><code>a</code>의 모든요소 <code>…a</code> 와 <code>b</code>의 모든요소 <code>…b</code> 그리고 <code>c</code>를 넣어 새로운 배열 <code>d</code> 를 만든 모습이다. <strong>concat 을 사용한 코드보다 훨씬 간결</strong>하고, 가독성도 개선되었다.</p>
<h3>언제 전개 연산자를 사용할까?</h3>
<p>배열은 push, reverse 와 같은 여러가지 메서드를 가지고 있다. 하지만 이런 메서드들은 <strong>기존 배열을 바꿔버리는 단점</strong>이 존재한다. 이를테면 다음과 같다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">var a = [1,2,3,4,5];
a.reverse();
//배열 요소의 순서를 역순으로 바꾼다.

console.log(a);
//[5,4,3,2,1]
</code></pre>
<p>원본 배열을 수정할 의도였다면 문제있는 코드는 아니지만, 원본 배열은 그대로 두고 배열 요소의 순서를 뒤집은 새로운 배열을 또 하나 만들고 싶다면, 상황이 복잡해진다. 이 상황에서 전개 연산자를 사용한다면 편리해진다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">const a = [1,2,3,4,5];
const b = [...a].reverse();

console.log(`a: ${a}\nb: ${b}`);
/*
  a: 1,2,3,4,5
  b: 5,4,3,2,1
*/
</code></pre>
<p>이렇게 전개 연산자를 사용해 배열 요소를 복사했기 때문에 원본 배열 <code>a</code> 은 변경하지 않으며, <code>a</code> 를 이용한 새로운 배열을 만들 수 있다.</p>
<p>또한 비구조화 할당과 전개 연산자를 사용하여, <strong>배열의 나머지 요소를 할당받을 수 있다.</strong></p>
<pre class="line-numbers"><code class="language-javascript">const a = [1,2,3,4,5,6];
let [first, second, ...rest] = a;

console.log(first, second, rest);
// 1 2 [3, 4, 5, 6]
</code></pre>
<p>변수 <code>first</code>, <code>second</code> 에는 각각 1과 2가 대입되고, <code>rest</code> 에는 첫번째, 두번째를 제외한 나머지 요소로 구성된 <code>[3, 4, 5, 6]</code> 가 대입된다. 여기서 <code>…rest</code> 를 <strong>Rest Element</strong> 라고 부른다.</p>
<p>이것 외로도 React 등에서 <strong>불변함 (Immutable)</strong> 함을 유지하기 위해 여러면으로 유용하게 사용되는 연산자이다.</p>
<h2>클래스의 등장</h2>
<p>자바스크립트의 객체는 <strong>프로토타입이 기반</strong>이다. 공식적으로 클래스라는 개념이 존재하지 않았으며, 함수를 사용하여 객체를 정의했다. 그리고 객체의 메서드를 정의할때는 <code>prototype</code> 안에 직접 정의해준다.</p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">function Person(name, job) {
  this.name = name;
  this.job = job;
}

Person.prototype.print = function() {
  console.log(this.job + " 직업을 가지고 있는 " + this.name + "씨");
}

var donghyun = new Person("조동현", "프론트엔드 개발자");

donghyun.print();
//프론트엔드 개발자 직업을 가지고 있는 조동현씨
</code></pre>
<p>프로토타입 방식으로 객체를 생성하고 다루는 것은 일반적인 객체지향 언어에 익숙한 개발자들에겐 낯설고 불편한 방식일 것이다. ES6 에서는 <strong>Class 문법을 만들어 이런 요구를 반영했다.</strong></p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">class Person {
  constructor(name, job) {
    this.name = name
    this.job = job
  }

  print() {
    console.log(this.job + " 직업을 가지고 있는 " + this.name + "씨");
  }
}

var donghyun = new Person("조동현", "프론트엔드 개발자");

donghyun.print();
//프론트엔드 개발자 직업을 가지고 있는 조동현씨
</code></pre>
<p>더 익숙한 형태로 클래스와 그 안의 메서드를 정의할 수 있다. 하지만, 자바스크립트의 객체 모델이 바뀐 것은 아니며, 내부에서는 그대로 프로토타입 기반으로 작동한다. 이렇게 내부 동작은 동일하지만, 구현 방식에 맞춘 새로운 문법을 <strong>문법적 설탕</strong> (Syntactic sugar) 라고 한다.</p>
<h2>기본 파라미터 (Default Parameter)</h2>
<p>드디어 자바스크립트에서도 함수의 기본 파라미터 값을 지정할 수 있게 되었다. ES6 이전에서는 파라미터의 값이 들어오지 않으면 무조건 <code>undefined</code> 가 됐지만, <strong>ES6 부터 그 기본값을 설정할 수 있다.</strong></p>
<p><strong>ES5</strong></p>
<pre class="line-numbers"><code class="language-javascript">function foo(a, b, c) {
  console.log(a, b, c);
}

foo('a');
//a undefined undefined
</code></pre>
<p>파라미터 <code>a</code> 의 값은 들어왔지만, <code>b</code> 와 <code>c</code> 는 값을 할당받지 못해 <code>undefined</code> 가 된 모습이다. 기본값을 설정하기 위해 파라미터가 <code>undefined</code> 인지 일일히 체크하고, 값을 할당해줘야 했다.</p>
<p><strong>ES6</strong></p>
<pre class="line-numbers"><code class="language-javascript">function foo(a, b='b', c='c') {
  console.log(a, b, c);
}

foo('a');
//a b c
</code></pre>
<p>편하게 기본 파라미터를 설정할 수 있게 되었다. 왜 이런 기본적인 기능이 ES6 에서야 추가된지 모르겠다.</p>
<h2>모듈</h2>
<p>기존의 자바스크립트에서는 <strong>모듈화를 통한 분리</strong>가 불가능했다. 하지만, ES6 에서는 드디어 <code>export</code> 와 <code>import</code> 키워드로 모듈화 구현할 수 있게 되었다.</p>
<blockquote><p>이 과정에서 CommonJS, RequireJS 에 대해 이야기가 많지만 이 글에서는 생략하도록 한다. node.js 는 기본적으로 ES6와 다른 CommonJS 방식을 사용한다. 혼동될 수 있으니 주의하자.</p></blockquote>
<p>모듈화를 하였을때, 각 파일은 각자의 스코프를 갖게 된다. 다른파일에서 어떤 객체에 접근하고 싶다면, <code>export</code> 를 통해 외부에 공개한다. Export 하는 방법도 크게 두가지가 있다.</p>
<h3>Named Export</h3>
<p>이름을 지정해서 export 하는 방법이다. import 할때도 해당 이름을 사용하여 불러온다.</p>
<p><strong>초기화와 동시에 export</strong></p>
<pre class="line-numbers"><code class="language-javascript">export const someConst = 5;
export function sum(a, b) {
  return a + b;
}
</code></pre>
<p>가장 간단한 방법이다. 별다른 코드 없이 초기화와 동시에 해당 객체를 export 한다.</p>
<p><strong>선언된 객체의 export</strong></p>
<pre class="line-numbers"><code class="language-javascript">const someConst = 5;
const sum = function(a, b) {
  return a + b;
};

export { someConst, sum };
</code></pre>
<p>또한 객체나 함수를 <strong>중괄호</strong> 로 묶어 한번에 export 해줄 수 있다.</p>
<p><strong>별명 지정</strong></p>
<p>원래 존재하는 변수를 다른 이름으로 export 할 수 있다.</p>
<pre class="line-numbers"><code class="language-javascript">const thisConstHasVeryLongName = 5;
export { thisConstHasVeryLongName as five };
</code></pre>
<p><code>thisConstHasVeryLongName</code> 상수는 <code>five</code> 라는 이름으로 export 된다.</p>
<p><strong>다른 모듈의 객체 Export</strong></p>
<pre class="line-numbers"><code class="language-javascript">export { name1, name2 } from './path/of/module';
</code></pre>
<p>다른 모듈에서 import 해옴과 동시에 export 해버리는 방식이다. 그다지 자주 사용되진 않지만, 여러 모듈을 하나로 묶어 다시 export 하는 <strong>index.js</strong> 같은 파일을 만들때 사용된다.</p>
<h3>Default Export</h3>
<p>모듈 당 <strong>단 한번</strong> 만 할 수 있는 Export 이다. Named Export 는 import 할때도 이름을 지정해야하지만, default 로 export 해준 값은 <strong>간단하게 import</strong> 할 수 있다. 어떻게 import 하는지는 아래에서 설명하겠다.</p>
<pre class="line-numbers"><code class="language-javascript">export default someConst;
export default function () {...}
</code></pre>
<p>Named Export 와 다르게, <strong>초기화와 동시에 Export 는 불가능</strong>하고, 미리 선언된 변수, 함수, 익명함수 따위를 Export 할 수 있다.</p>
<pre class="line-numbers"><code class="language-javascript">export { someObj as default, name1, name2, name3 ... }
</code></pre>
<p>그리고 위와 같이 <code>as default</code> 를 사용하여, default export 가 아닌 다른값과 함께 export 할 수 있다.</p>
<p>export 하는 방법을 배웠으니 import 하는 방법도 알아야한다.</p>
<h3>Import</h3>
<blockquote><p>import 코드를 실행해 모듈을 불러오는 파일은 <strong>index.js</strong> 라고 가정한다.</p></blockquote>
<pre class="line-numbers"><code class="language-javascript">import { name1, name2 } from './module.js';
</code></pre>
<p>Named Export 방식으로 export 된 모듈을 불러오는 가장 간단한 방법이다. <code>module.js</code> 에서 export 된 <code>name1</code> 과 <code>name2</code> 를 <code>index.js</code> 의 동일한 변수에 할당다.</p>
<pre class="line-numbers"><code class="language-javascript">import { name1 as newName1 } from './module.js';
</code></pre>
<p><code>export … as …</code> 처럼 import 할때도 별명을 설정해 줄 수 있다. <code>module.js</code> 의 <code>name1</code> 의 값이 <code>index.js</code> 의 <code>newName1</code> 에 할당된다.</p>
<pre class="line-numbers"><code class="language-javascript">import * as module from './module.js';
module.name1;
</code></pre>
<p><code>module.js</code> 에서 export 된 모든 멤버들을 <code>module</code> 이라는 변수의 하위 멤버로 바인딩한다. <code>.</code> 키워드로 <code>module.js</code> 의 모든 멤버에 접근할 수 있다.</p>
<pre class="line-numbers"><code class="language-javascript">import defaultMember from './module.js';
</code></pre>
<p><code>export default …</code> 으로 export 된 멤버를 <code>defaultMember</code> 에 할당한다.</p>
<p>export 와 import 는 아직 많은 웹브라우저가 지원하지 않는다. <strong>babel</strong> 등의 트랜스파일러를 사용하여 ES5 코드로 바꾸어 사용하는것이 일반적이므로 주의하자.</p>
<h2>마무리</h2>
<p>사실 위에서 설명한 여러가지를 제외하고도 ES6에서 새롭게 등장한 문법과 기능등은 존재한다. 하지만 위에 서술한 것들만 제대로 숙지하고 있어도 ES6 로의 진입 장벽은 많이 낮아질 것이라 생각한다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/es6-%eb%ac%b8%eb%b2%95%ec%9c%bc%eb%a1%9c-%eb%8b%a4%ec%8b%9c-%ec%8b%9c%ec%9e%91%ed%95%98%eb%8a%94-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/">ES6 문법으로 다시 시작하는 자바스크립트</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/es6-%eb%ac%b8%eb%b2%95%ec%9c%bc%eb%a1%9c-%eb%8b%a4%ec%8b%9c-%ec%8b%9c%ec%9e%91%ed%95%98%eb%8a%94-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>허슬 (Hustle) 하는 개발자</title>
		<link>https://hudi.kr/%ed%97%88%ec%8a%ac-hustle-%ed%95%98%eb%8a%94-%ea%b0%9c%eb%b0%9c%ec%9e%90/</link>
		<comments>https://hudi.kr/%ed%97%88%ec%8a%ac-hustle-%ed%95%98%eb%8a%94-%ea%b0%9c%eb%b0%9c%ec%9e%90/#respond</comments>
		<pubDate>Wed, 04 Jul 2018 08:38:37 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[강의]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3347</guid>
		<description><![CDATA[<p>스타트업 취직 도전 블로그에 근황에 대한 글을 쓰지 않았지만, 최근 어떤 스타트업에 프론트엔드 엔지니어 (리액트 개발자)로 지원하게 되었다. 서류, 1차 기술면접, 2차 기술면접을 합격하고, 마지막 가치면접을 마치고 난뒤, 합격 여부 통지만을 기다리고 있다. 합격하고 해당&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ed%97%88%ec%8a%ac-hustle-%ed%95%98%eb%8a%94-%ea%b0%9c%eb%b0%9c%ec%9e%90/">허슬 (Hustle) 하는 개발자</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="840" height="630" src="https://hudi.kr/wp-content/uploads/2018/07/hustle-shirt8.jpg" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/07/hustle-shirt8.jpg 840w, https://hudi.kr/wp-content/uploads/2018/07/hustle-shirt8-300x225.jpg 300w, https://hudi.kr/wp-content/uploads/2018/07/hustle-shirt8-768x576.jpg 768w" sizes="(max-width: 840px) 100vw, 840px" /></p><h2>스타트업 취직 도전</h2>
<p>블로그에 근황에 대한 글을 쓰지 않았지만, 최근 어떤 스타트업에 <strong>프론트엔드 엔지니어 (리액트 개발자)</strong>로 지원하게 되었다. 서류, 1차 기술면접, 2차 기술면접을 합격하고, 마지막 가치면접을 마치고 난뒤, 합격 여부 통지만을 기다리고 있다. 합격하고 해당 스타트업 사람들과 함께 일하면서 배우는 것들은 정말 많을것이다. 업무 프로세스, 커뮤니케이션 능력, 최신 트렌드 기술 등등.. 내 개인적인 성장면으로 보았을때, 21살이라는 비교적 젊은 나이에 많은 긍정적인 영향을 끼칠것이다.</p>
<p>하지만, 일반적으로 흔히 <strong>&#8216;정석&#8217;</strong> 이라고 말하는 다른사람들의 진로와 전혀 다르게, 아직 개척되지 않은 나만의 길을 걷기 시작하는 것은 그만큼 걱정도 많이 되는 법이다. 흔히 말하는 정석이라 함은, 당연히 4년제 대학교를 졸업하고, 중견기업 ~ 대기업 등에 취직하여 초봉 3500~4000 가량을 받으며 안정적인 생활을 하는 사람들을 의미한다. 사회에 대해 뭣도 모르는 꼬꼬마가 생각하는 인생의 정석은 그렇다. 하지만, 나는 뭔가 정석대로 살기 싫은 이상한 오기가 있다. 물론 당연히 안정적인 삶과, 고액의 연봉을 누리고 싶지 않다는 의미는 아니다. 하지만, 나는 아직 젊고, 도전할 기회도 많고, 많은 새로운것들을 배우고 싶은 열정도 있다. 그래서<strong> &#8217;21살, 대학교 2학년 1학기에 휴학해버리고 스타트업 입사에 도전하기&#8217;</strong> 라는 흔치 않은 길을 걷고 있다.</p>
<h2>현실적인 걱정들</h2>
<p>이 과정에서 해봐야하는 여러가지<strong> &#8216;현실적인 걱정&#8217;</strong>들이 존재한다. 일단 초봉 문제이다. 아마, 당연하게도 내가 스타트업에 입사하고 나면, 중견 혹은 대기업에 입사한 신입의 초봉과는 차이가 많이 날 것이다. 누구나 대기업에 갈 수 있는 것은 아니지만, 절대로 못가는 것도 아니기에 4년제 대학교에 재학하면서 학점을 착실히 쌓아가고, 스펙도 쌓아갈 수 있는 법이다. 보통 연봉의 인상은 이전 직장에서의 연봉을 보고 정해진다고 한다. 사회생활을 초봉 3000 초 중반으로 시작하는 사람과, 초봉 2000 중후반으로 시작하는 사람은 같은 노력을 들여도 연봉 상승률이 다른것은 아무래도 당연하다. 이런 관점에서 과연 내 첫 직장이 스타트업인것이 괜찮은 선택인지 궁금하다. 이상적으로 생각한다면, 정말 스스로 개발을 사랑하고 허슬링 하여, <strong>내가 직장이 필요한 상황이 아닌, 여러 회사에서 나를 필요로 하는 사람이 된다면 </strong>사실 돈 문제는 신경쓰지 않아도 지갑은 두둑해질 것이다. 연봉문제를 제쳐두고서도, 나의 목표는 당연히 <strong>프론트엔드 직군에서 유명하고 유능한 개발자가 되는 것이고, 여러 회사에서 필요로 하는 사람</strong>이 되는 것이다. (개인적으로 이런 점에서 Velopert 님을 너무나 닮고 싶다. 나의 롤모델이시다.)</p>
<p>하지만, 인생설계 측면에서 너무 이상적으로 생각하는 것도 문제이다. 어느정도 현실적인 면들도 진중하게 고려를 해야한다. 당연히 내 목표는 이상적으로 높지만, 그 목표를 이룰 수 있을지는 불확실 하다. 개발 실력은 고사하고, 자기한테 주어진 일도 제대로 해내지 못하는 이도 저도 아닌 <strong>땔감</strong>이 될 수도 있다. 또 프론트엔드 개발 분야가 떡락해버릴 수도 있는 문제이다. 이런 여러가지 <strong>현실적인 문제</strong>들을 눈앞에 두고 생각하면, 과연 첫 사회생활을 어리다면 어린 21살에 시작하는 것이 괜찮은 선택일지 고민된다.</p>
<h2>허슬하는 개발자</h2>
<p>하지만, 나는 지금까지 꾸준히 프로그래머의 길을 걸어왔고, 그 일을 즐기고 사랑한다. 무엇이든 걱정이 앞서 아무것도 안하면, 무턱대고 아무거나 하느니보다 못하다. 일단 결정했다면, 자신의 선택에 확신을 갖고 우직하게 나아가보자.</p>
<p>힙합을 듣다보면, <strong>허슬링 (Hustling)</strong> 이라는 단어를 자주 듣게된다. 허슬이란 영어 슬랭인데, 어원 신경 안쓰고 뉘앙스만 보자면,<strong> &#8216;끊임없이 커리어를 쌓아가고 성장한다&#8217;</strong> 정도로 적당히 해석 할 수 있다. 나는 허슬 하는 개발자가 되고 싶다. 프론트엔드 엔지니어의 길을 걸어가며, 이쪽분야에서 입지를 다져 나름 이름도 날리고 싶다. 꾸준히 블로그에 기록물도 쌓아가고, 강의글도 작성하고, 더 나아가서 인프런, 유투브 등에서 강좌도 진행해 보고싶다. 이곳 저곳 세미나, 강연, 행사등에 참여해 발표자로도 활동해보고 싶다. <span style="text-decoration: underline;"><strong>단순한 회사, 스펙, 커리어 등에서 벗어나 나 자신이 뛰어난 개발자가 되고 싶고, 나의 가치를 모두에게 증명 해보이고 싶다.</strong></span> 단순 돈벌이를 위한 프로그래밍이 아닌, 진심으로 이 일을 즐기며 성장의 기쁨을 느끼고 싶다. 나를 믿고, 성장 또 성장하자. 겪어보지도 않은 걱정은 잠시 제쳐두고,  앞으로 나아가자. 허슬하자.</p>
<p>+ 2018.07.09</p>
<p>아쉽게도, 지원한 스타트업은 최종 면접에서 떨어지게 되었다. 나름 기대하고 있었고, 합격하리라 확신하고 있던 상태라 실망이 컸다. 내가 떨어진 이유를 여쭤보았고, 정리하자면 &#8220;1년뒤 잠정적으로 군입대를 계획하고 있는데, 그런 걸림돌을 극복할만큼 뛰어나진 않다. &#8221; 기술면접 1차, 2차를 붙게 되어 어느정도 나의 위치를 파악 할 수 있게 되었고, 탈락한 이유의 대부분이 군문제라 차라리 후련했다. 확실히 한국에서는 군대를 갔다 오지 않으면 제약이 너무나도 크다. 일단 한학기 휴학은 확정이다. 죽이되던 밥이되던, 내가 하고싶은 공부를 하고 비개발자 세상사람들을 더 많이 만나보고싶다. 아마 카카페 아르바이트, 식당 아르바이트를 하지 않을까 싶다. 그리고 간간히 외주도 하고. 블로그와 사이드 프로젝트는 꾸준히 진행하고 싶다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%ed%97%88%ec%8a%ac-hustle-%ed%95%98%eb%8a%94-%ea%b0%9c%eb%b0%9c%ec%9e%90/">허슬 (Hustle) 하는 개발자</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/%ed%97%88%ec%8a%ac-hustle-%ed%95%98%eb%8a%94-%ea%b0%9c%eb%b0%9c%ec%9e%90/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>[node.js] dotenv &#8211; 환경 변수 사용하기</title>
		<link>https://hudi.kr/node-js-dotenv-%ed%99%98%ea%b2%bd-%eb%b3%80%ec%88%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0/</link>
		<comments>https://hudi.kr/node-js-dotenv-%ed%99%98%ea%b2%bd-%eb%b3%80%ec%88%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0/#respond</comments>
		<pubDate>Sun, 27 May 2018 13:03:21 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[Javascript]]></category>
		<category><![CDATA[node.js]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3215</guid>
		<description><![CDATA[<p>dotenv node.js 로 개발을 하면서, 포트, DB 관련 정보 등 전역으로 필요한 여러 정보들이 존재한다. node.js 에서는 dotenv 패키지를 통해 환경변수 파일을 외부에 만들고, 관리할 수 있다.  특히, 깃허브 등에 오픈소스로 프로젝트를 공개할때, DB 계정&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/node-js-dotenv-%ed%99%98%ea%b2%bd-%eb%b3%80%ec%88%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0/">[node.js] dotenv &#8211; 환경 변수 사용하기</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="960" height="420" src="https://hudi.kr/wp-content/uploads/2018/05/dotenv.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/05/dotenv.png 960w, https://hudi.kr/wp-content/uploads/2018/05/dotenv-300x131.png 300w, https://hudi.kr/wp-content/uploads/2018/05/dotenv-768x336.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></p><h2>dotenv</h2>
<p>node.js 로 개발을 하면서, <strong>포트, DB 관련 정보</strong> 등 전역으로 필요한 여러 정보들이 존재한다. node.js 에서는 <a href="https://www.npmjs.com/package/dotenv"><strong>dotenv 패키지</strong></a>를 통해 환경변수 파일을 외부에 만들고, 관리할 수 있다.  특히, 깃허브 등에 <strong>오픈소스</strong>로 프로젝트를 공개할때, DB 계정 정보를 소스코드 내에 하드코딩하지 않고, <strong>외부 환경변수 파일</strong>에 작성하고, <strong>.gitignore 을 통해 제외</strong>하면 안전하다.</p>
<h2>Installation</h2>
<h3><strong>yarn 을 통한 설치</strong></h3>
<pre class="line-numbers"><code class="language-bash">yarn add dotenv</code></pre>
<h3>npm 을 통한 설치</h3>
<pre class="line-numbers"><code class="language-bash">npm install --save dotenv</code></pre>
<h2>Usage</h2>
<p>프로젝트 루트경로에 .env 파일을 생성하고 다음과 같이 작성한다.</p>
<pre class="line-numbers"><code class="language-markup">SERVER_PORT=3000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=password</code></pre>
<p>단순하게, <strong>변수명=값</strong> 형태를 가지고 있다.</p>
<p>프로젝트 상단에 아래 코드를 적어 환경 변수를 불러온다.</p>
<pre class="line-numbers"><code class="language-javascript">require('dotenv').config();</code></pre>
<p>불러온 환경변수는 아래와 같이 사용할 수 있다.</p>
<pre class="line-numbers"><code class="language-javascript">db.connect({
  host: process.env.DB_HOST,
  username: process.env.DB_USER,
  password: process.env.DB_PASSWORD
}); //DB 연결 예제 코드

app.listen(process.env.SERVER_PORT, () =&gt; {
    console.log('sample server is listening to port ' + process.env.SERVER_PORT);
}); //서버 포트 예제 코드</code></pre>
<p>위와 같이 <strong>process.env</strong> 키워드를 사용하여, 미리 정의한 환경변수에 접근한다.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/node-js-dotenv-%ed%99%98%ea%b2%bd-%eb%b3%80%ec%88%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0/">[node.js] dotenv &#8211; 환경 변수 사용하기</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/node-js-dotenv-%ed%99%98%ea%b2%bd-%eb%b3%80%ec%88%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Reactstrap &#8211; Bootstrap4를 React에서 사용하는 방법</title>
		<link>https://hudi.kr/reactstrap-bootstrap4%eb%a5%bc-react%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/</link>
		<comments>https://hudi.kr/reactstrap-bootstrap4%eb%a5%bc-react%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/#respond</comments>
		<pubDate>Fri, 04 May 2018 15:27:50 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[React]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3183</guid>
		<description><![CDATA[<p>현재 React 에서 Bootstrap 을 사용할 수 있게끔 제작된 프로젝트는 React-Bootstrap 과 Reactstrap 두가지가 있다. 본 글에서는 Bootstrap4 기반의 Reactstrap 을 소개한다. Reactstrap Jquery 기반의 Bootstrap 를 React 환경으로 이식한 프로젝트이다. 기존의 Div 엘리먼트에 Class&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/reactstrap-bootstrap4%eb%a5%bc-react%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/">Reactstrap &#8211; Bootstrap4를 React에서 사용하는 방법</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="960" height="420" src="https://hudi.kr/wp-content/uploads/2018/05/thumbnail.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/05/thumbnail.png 960w, https://hudi.kr/wp-content/uploads/2018/05/thumbnail-300x131.png 300w, https://hudi.kr/wp-content/uploads/2018/05/thumbnail-768x336.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></p><div class="page" title="Page 1">
<div class="section">
<div class="section">
<div class="layoutArea">
<div class="column">
<p>현재 React 에서 Bootstrap 을 사용할 수 있게끔 제작된 프로젝트는 <strong>React-Bootstrap</strong> 과 <strong>Reactstrap</strong> 두가지가 있다. 본 글에서는 Bootstrap4 기반의 <a href="https://reactstrap.github.io/"><strong>Reactstrap</strong></a> 을 소개한다.</p>
<h2>Reactstrap</h2>
<p><strong>Jquery 기반의 Bootstrap 를 React 환경으로 이식한 프로젝트이다.</strong> 기존의 Div 엘리먼트에 Class 를 설정하여, 컴포넌트를 구분하는 방식에서, Bootstrap 컴포넌트별로 React 컴포넌트가 구현되어 더욱 <strong>React 스러운 개발</strong>이 가능하다.</p>
<h2>사용하기</h2>
<pre class="line-numbers"><code class="language-markup">npm install --save reactstrap bootstrap</code></pre>
<p>reactstrap 모듈과 bootstrap 을 설치한다.</p>
<pre class="line-numbers"><code class="language-javascript">import { Button } from 'reactstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

class App extends Component {
  render() {
    return (
      &lt;div className="App"&gt;
        &lt;Button color="danger"&gt; Danger! &lt;/Button&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>
<p>reactstrap 모듈로부터 Button 컴포넌트와 bootstrap.min.css 파일을 import 해준다. 그리고 일반 컴포넌트 쓰듯이 사용해주면 된다. 기존 부트스트랩은 컴포넌트의 여러 속성을 Class 에 써 넣어주었으나, Reactstrap 에서는 <strong>Prop 에 속성처럼</strong> 넣어준다. 더 직관적인 모습을 볼 수 있다.</p>
<h2>상태(State) 변경</h2>
<p>원래의 부트스트랩에서 Modal 등의 Javascript 가 필요한 컴포넌트를 사용하기 위해서는 Jquery 기반으로 제작된 <strong>bootstrap.js</strong> 을 포함해야한다. Reactstrap 은 이벤트와 컴포넌트의 prop을 state 로 직접 관리해줘야한다.</p>
<pre class="line-numbers"><code class="language-javascript">import React, { Component } from 'react';
import { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      modal: false
    }

    this.toggle = this.toggle.bind(this);
  }

  toggle() {
    this.setState({
      modal: !this.state.modal
    })
  }

  render() {
    return (
      &lt;div className="App"&gt;
        &lt;Button color="info" onClick={this.toggle}&gt; 모달 열기 &lt;/Button&gt;
        &lt;Modal isOpen={this.state.modal} toggle={this.toggle}&gt;
          &lt;ModalHeader toggle={this.toggle}&gt;Modal title&lt;/ModalHeader&gt;
          &lt;ModalBody&gt;
            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
          &lt;/ModalBody&gt;
          &lt;ModalFooter&gt;
            &lt;Button color="primary" onClick={this.toggle}&gt;확인&lt;/Button&gt;{' '}
            &lt;Button color="secondary" onClick={this.toggle}&gt;취소&lt;/Button&gt;
          &lt;/ModalFooter&gt;
        &lt;/Modal&gt;
      &lt;/div&gt;
    );
  }
}

export default App;</code></pre>
<p>위 예제에서 Modal 컴포넌트의 표시 여부를 <strong>isOpen 이라는 Prop</strong>으로 관리한다.</p>
<h2>HTML 속성 사용</h2>
<p>class 나 value 같은 HTML 에서 사용되는 속성도 동일하게 Reactstrap 컴포넌트에 적용된다.</p>
<pre class="line-numbers"><code class="language-markup">&lt;Button className="custom-btn"&gt;구매 확정!&lt;/Button&gt;

&lt;Input type="number" value={ this.props.number } /&gt;</code></pre>
<h2>참고</h2>
<ul>
<li><strong><a href="https://reactstrap.github.io/components/">https://reactstrap.github.io/components/</a></strong> &#8211; Reactstrap의 컴포넌트를 볼 수 있다.</li>
<li><strong><a href="https://github.com/reactstrap/reactstrap">https://github.com/reactstrap/reactstrap</a></strong></li>
</ul>
</div>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="https://hudi.kr/reactstrap-bootstrap4%eb%a5%bc-react%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/">Reactstrap &#8211; Bootstrap4를 React에서 사용하는 방법</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/reactstrap-bootstrap4%eb%a5%bc-react%ec%97%90%ec%84%9c-%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>비동기적 Javascript &#8211; 싱글스레드 기반 JS의 비동기 처리 방법</title>
		<link>https://hudi.kr/%eb%b9%84%eb%8f%99%ea%b8%b0%ec%a0%81-javascript-%ec%8b%b1%ea%b8%80%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b8%b0%eb%b0%98-js%ec%9d%98-%eb%b9%84%eb%8f%99%ea%b8%b0-%ec%b2%98%eb%a6%ac-%eb%b0%a9%eb%b2%95/</link>
		<comments>https://hudi.kr/%eb%b9%84%eb%8f%99%ea%b8%b0%ec%a0%81-javascript-%ec%8b%b1%ea%b8%80%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b8%b0%eb%b0%98-js%ec%9d%98-%eb%b9%84%eb%8f%99%ea%b8%b0-%ec%b2%98%eb%a6%ac-%eb%b0%a9%eb%b2%95/#comments</comments>
		<pubDate>Tue, 06 Mar 2018 15:52:35 +0000</pubDate>
		<dc:creator><![CDATA[Hudi]]></dc:creator>
				<category><![CDATA[Javascript]]></category>

		<guid isPermaLink="false">https://hudi.kr/?p=3072</guid>
		<description><![CDATA[<p>싱글 스레드 (Single-Thread) 로 작동한다고 알려져있는 Javascript 가 어떻게 비동기 작업을 통해 여러가지 Task를 동시에 처리하는지에 대해 알아보자. 특히 Promise 패턴, Async Await 를 제대로 이해하기 위해서는 꼭 공부하고 넘어가자. 비동기적 Javascript C, Java, Python 을&#46;&#46;&#46;</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%eb%b9%84%eb%8f%99%ea%b8%b0%ec%a0%81-javascript-%ec%8b%b1%ea%b8%80%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b8%b0%eb%b0%98-js%ec%9d%98-%eb%b9%84%eb%8f%99%ea%b8%b0-%ec%b2%98%eb%a6%ac-%eb%b0%a9%eb%b2%95/">비동기적 Javascript &#8211; 싱글스레드 기반 JS의 비동기 처리 방법</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></description>
				<content:encoded><![CDATA[<p><img width="960" height="720" src="https://hudi.kr/wp-content/uploads/2018/03/title.png" class="attachment-full size-full wp-post-image" alt="" srcset="https://hudi.kr/wp-content/uploads/2018/03/title.png 960w, https://hudi.kr/wp-content/uploads/2018/03/title-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/title-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></p><p style="text-align: left;"><strong>싱글 스레드 (Single-Thread) </strong>로 작동한다고 알려져있는 Javascript 가<strong> 어떻게 비동기 작업</strong>을 통해 여러가지 Task를 동시에 처리하는지에 대해 알아보자. <strong>특히 Promise 패턴, Async Await 를 제대로 이해하기 위해서는 꼭 공부하고 넘어가자.</strong></p>
<h2 style="text-align: left;">비동기적 Javascript</h2>
<p style="text-align: left;">C, Java, Python 을 사용하면 상식적으로 별도의 스레드나 프로세스를 사용하지 않는 이상, <strong>먼저 작성된 순서대로 즉, 동기적으로 코드가 실행</strong>된다. 가령, 3번째 줄에 있는 코드의 작업이 5번째 줄에 있는 코드보다 늦게 끝나는 비상식적인 일은 발생하지 않는다는 뜻이다. <span style="text-decoration: underline;"><strong>하지만 자바스크립트는 먼저 실행된 코드의 작업이 끝나기 전에 더 나중에 실행된 코드의 작업이 끝날 수 있다.</strong></span> 아주 간단한 예를 들어보겠다.</p>
<pre class="line-numbers"><code class="language-javascript">function first() {
	setTimeout(() =&gt; {
  	console.log("The First function has been called.")
  }, 1000)
}

function second() {
	setTimeout(() =&gt; {
  	console.log("The Second function has been called.")
  }, 500)
}

first()
second()</code></pre>
<p style="text-align: left;">first 함수가 호출되면, setTimeout 을 통해 <strong>1000ms</strong> 가 지나고서야 문장이 출력되지만, second 함수는 문자열 출력에 고작 <strong>500ms</strong> 밖에 걸리지 않는다. 코드에서는 first 함수를 먼저 호출했지만, 결과는 다음과 같다.</p>
<pre class="line-numbers"><code class="language-markup">The Second function has been called.
The First function has been called.</code></pre>
<p style="text-align: left;">이것이 Javascript 의 비동기성이다. 하지만, <strong>자바스크립트는 하나의 스레드 (Single Thread) 기반의 언어</strong>이다. 즉, 자바스크립트는 <span style="text-decoration: underline;"><strong>한번에 하나의 작업밖에 수행하지 못한다</strong></span>는 의미이다. 그런데 이상하다. 자바스크립트는 위의 간단한 예제는 물론이고, Ajax로 데이터를 불러오면서 Mouseover 이벤트를 처리하면서 애니메이션을 동작시킨다. 어떻게 이런 <strong>동시성 (Concurrency)</strong> 이 가능한 것일까? 그것을 알아보기 전에 Javascript Engine 의 구조부터 짚고 넘어가자.</p>
<h2 style="text-align: left;">Call Stack</h2>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드1.png"><img class="size-full wp-image-3088 alignnone" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드1.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드1.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드1-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드1-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p style="text-align: left;">자바스크립트 엔진은 메모리 힙과 <strong>단일 호출 스택 (Call Stack)</strong>을 가지고 있다. 하나의 호출 스택만 가지고 있으므로 위에서 지겹게 언급했듯이, 한번에 단 하나의 함수만 처리할 수 있다. 다음과 같은 시시콜콜한 자바스크립트 코드를 실행해보자.</p>
<pre class="line-numbers"><code class="language-javascript">function a() {
	b()
	console.log("a")
}

function b() {
	console.log("b")
}

a()</code></pre>
<p style="text-align: left;">결과가 어떻게 나오는가? 당연히 &#8220;b&#8221;, &#8220;a&#8221; 순서대로 출력되는 것이 정상이다. 왜 이런 순서로 출력되는지 Call Stack 에 함수가 쌓이는 순서를 보고 확인해보자.</p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드2.png"><img class="size-full wp-image-3089 alignnone" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드2.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드2.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드2-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드2-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p style="text-align: left;">보이는 것 같이 스택의 형태로 호출된 함수를 <strong>추가하고 (Push)</strong> 실행된 함수를 <strong>제거 (Pop)</strong> 하는 형태이다. 이렇게 자바스크립트는 다른 함수가 실행되고 있을때는 그 함수가 종료되기 직전까지 다른 작업이 중간에 끼어들 수 없다. 이것을 <strong>Run-to-completion</strong> 이라고 한다. &#8220;뭐야, 그럼 결국 동시실행이 불가능하다는 이야기잖아.&#8221; 하고 실망할 수 있겠지만, 자바스크립트는 자바스크립트 엔진으로만 돌아가는 것이 아니다.</p>
<h2 style="text-align: left;">Javascript Runtime</h2>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드3.png"><img class="size-full wp-image-3093 alignnone" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드3.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드3.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드3-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드3-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p style="text-align: left;">사실 자바스크립트 엔진 밖에서도 자바스크립트 실행에 관여하는 요소들이 존재한다. 각각 <strong>Web API와 Task Queue, Event Loop</strong> 이다. 비동기 작업시 각 요소의 역할에 대해 알아보자.</p>
<h3 style="text-align: left;">Web API</h3>
<p style="text-align: left;">위 사진과 같이, Web API 는 브라우저에서 제공되는 API이며, AJAX나 Timeout 등의 <strong>비동기 작업을 실행</strong>한다. 자바스크립트에서 setTimeout 과 같은 함수를 실행하면, <strong>자바스크립트 엔진은 Web API에 setTimeout 을 요청</strong>하고 동시에 setTimeout에 넣어준 <strong>Callback 까지 전달</strong>한다. Callstack 에서는 Web API 요청 이후 setTimeout 작업이 완료되어 제거된다.</p>
<p style="text-align: left;">Web API는 방금 요청받은 setTimeout을 완료하고, 동시에 <strong>전달받은 Callback 을 Task Queue라는 곳</strong>에 넘겨준다. 다음으로 Task Queue와 Event Loop 에 대해 알아보자.</p>
<h3 style="text-align: left;">Task Queue와 Event Loop</h3>
<p style="text-align: left;">Task Queue 는 Callback Queue 라고도 하는데, 큐 형태로 <strong>Web API에서 넘겨받은 Callback 함수를 저장</strong>한다. 이 Callback 함수들은 자바스크립트 엔진의 Call Stack의 모든 작업이 완료되면 순서대로 Call Stack에 추가된다. 이 때 <span class=""><strong>Call Stack 가 비어있지 않은지 (실행중인 작업이 존재하는지)</strong></span> 와 <span class=""><strong>Task Queue 에 Task가 존재하는지</strong></span> 를 판단하고, Task Queue 의 작업을 Call Stack 에 옮기는 일을 Event Loop가 작업한다. Event Loop 는 이 작업을 처음부터 끝까지 계속 반복하여 실행한다. 그래서 Event &#8216;Loop&#8217; 인것이다.</p>
<pre class="line-numbers"><code class="language-javascript">while (queue.waitForMessage()) {
    queue.processNextMessage();
}</code></pre>
<p>MDN은 Event Loop의 작업을 위와같은 가상의 코드로 설명하고 있다.</p>
<h3 style="text-align: left;">직접 해보기</h3>
<pre class="line-numbers"><code class="language-javascript">setTimeout(function() {
    console.log("All task was done.");
}, 5000);</code></pre>
<p>위 코드는 5초뒤에 문장을 출력하는 아주 간단한 코드이다. 어떻게 비동기로 작동하는지 알아보자.</p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드4.png"><img class="alignnone size-full wp-image-3115" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드4.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드4.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드4-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드4-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p style="text-align: left;"><span style="font-size: 12pt;"><strong>1. 코드가 실행되고 setTimeout 함수가 실행되면서 Call Stack 에는 setTimeout 함수가 추가된다.</strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드5.png"><img class="alignnone size-full wp-image-3116" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드5.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드5.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드5-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드5-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>2. setTimeout 함수는 자바스크립트 엔진이 처리하지 않고, Web API가 처리하기에 setTimeout 에 담긴 Callback 함수를 전달함과 동시에 setTimeout 작업을 요청한다.</strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드6.png"><img class="alignnone size-full wp-image-3117" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드6.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드6.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드6-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드6-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>3. Call Stack 에서는 모든 작업이 완료되었으므로 setTimeout 작업이 제거된다. </strong></span></p>
<p><span style="font-size: 12pt;"><strong>4. Web API는 setTimeout 작업이 실행된다. 5000ms 를 기다린다.</strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드7.png"><img class="alignnone size-full wp-image-3118" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드7.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드7.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드7-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드7-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>5. 5000ms 가 지나고, Task Queue로 Callback 함수를 전달한다.</strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드8.png"><img class="alignnone size-full wp-image-3119" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드8.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드8.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드8-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드8-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>6. Event Loop는 항상 Call Stack이 비어있는지, Task Queue 에 작업이 있는지 검사하고 있는데, 마침 지금은 Call Stack이 비어있고, Task Queue 에 수행할 작업이 추가되어 있다. </strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드9.png"><img class="alignnone size-full wp-image-3120" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드9.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드9.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드9-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드9-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>7. Task Queue에서 대기하던 Callback 함수 하나를 Call Stack 으로 보낸다.</strong></span></p>
<p style="text-align: left;"><a href="https://hudi.kr/wp-content/uploads/2018/03/슬라이드10.png"><img class="alignnone size-full wp-image-3121" src="https://hudi.kr/wp-content/uploads/2018/03/슬라이드10.png" alt="" width="960" height="720" srcset="https://hudi.kr/wp-content/uploads/2018/03/슬라이드10.png 960w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드10-300x225.png 300w, https://hudi.kr/wp-content/uploads/2018/03/슬라이드10-768x576.png 768w" sizes="(max-width: 960px) 100vw, 960px" /></a></p>
<p><span style="font-size: 12pt;"><strong>8. Callback 함수의 작업도 전부 완료되어 Pop되고, 프로그램이 종료된 모습이다.</strong></span></p>
<p>결국 여기서 알 수 있는 점은 Javascript 엔진은 그저 주어진 코드를 실행하는 <strong>온디맨드 (on demand) 실행 환경</strong>이라는 것이다. 그 <strong>코드 실행의 스케줄링은 Javascript 엔진이 호스팅된 런타임 환경</strong>이 맡게되는 것이다.</p>
<h2>Interval이 0이라면?</h2>
<p>그렇다면, Interval이 0인 setTimeout 함수와 바로 다음 줄에 일반적인 코드를 적으면, 어떤 코드가 먼저 실행될까? 아래의 간단한 코드의 출력 결과를 예상해보자.</p>
<pre class="line-numbers"><code class="language-javascript">setTimeout(function() {
    console.log("Bye, World!");
}, 0);
console.log("Hello, World!")</code></pre>
<p>&#8220;Bye, World!&#8221;, &#8220;Hello, World!&#8221; 순의 출력을 예상했다면, 위의 파트를 다시 읽어보고 오자. 실제로는 &#8220;Hello, World!&#8221; 라는 문장이 먼저 출력된다. 직관적으로는 이해가 잘 안될것이다. Interval이 0이면 바로 실행되야 하는것 아닐까?</p>
<h3>설명</h3>
<p>코드가 실행되면, setTimeout이 가장 먼저 실행되고, Call Stack에 setTimeout이 등록된다. Web API에 setTimeout 작업을 요청함과 동시에 Call Stack에서는 setTimeout 작업이 제거되고, console.log(&#8220;Hello, World!&#8221;) 작업이 등록된다. console.log(&#8220;Hello, World!&#8221;) 작업이 완료되고, Task Queue 에서 대기중인 console.log(&#8220;Bye, World!&#8221;) 작업이 Call Stack으로 전달되어 실행되고 프로그램이 종료된다.</p>
<h2>관련 웹 사이트</h2>
<p>자신이 짠 코드가 어떻게 실행되는지 보고 싶다면, <span spellcheck="false"><a href="http://latentflip.com/loupe"><strong>http://latentflip.com/loupe</strong></a></span> 해당 사이트에 방문하여 직접 코드를 작성해보자. Call Stack, Web API, Task Queue, Event Loop 이 어떻게 상호작용 하고 작동하는지 한눈에 알 수 있도록 애니메이션으로 보여준다.</p>
<p>The post <a rel="nofollow" href="https://hudi.kr/%eb%b9%84%eb%8f%99%ea%b8%b0%ec%a0%81-javascript-%ec%8b%b1%ea%b8%80%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b8%b0%eb%b0%98-js%ec%9d%98-%eb%b9%84%eb%8f%99%ea%b8%b0-%ec%b2%98%eb%a6%ac-%eb%b0%a9%eb%b2%95/">비동기적 Javascript &#8211; 싱글스레드 기반 JS의 비동기 처리 방법</a> appeared first on <a rel="nofollow" href="https://hudi.kr">Hudi - 유사 프로그래머</a>.</p>
]]></content:encoded>
			<wfw:commentRss>https://hudi.kr/%eb%b9%84%eb%8f%99%ea%b8%b0%ec%a0%81-javascript-%ec%8b%b1%ea%b8%80%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b8%b0%eb%b0%98-js%ec%9d%98-%eb%b9%84%eb%8f%99%ea%b8%b0-%ec%b2%98%eb%a6%ac-%eb%b0%a9%eb%b2%95/feed/</wfw:commentRss>
		<slash:comments>13</slash:comments>
		</item>
	</channel>
</rss>
