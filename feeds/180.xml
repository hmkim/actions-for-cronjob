<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[내 성격 100% 활용하기 -上-]]></title>
			<link>http://blog.naver.com/drvoss</link>
			
				<image>
					<url><![CDATA[http://blogpfthumb.phinf.naver.net/MjAxNzAzMTVfMTMw/MDAxNDg5NTI4ODg5MDYx.uvbofZDwUNFOMrBgq1RqdcgBqvpk9kgD7HptdA35ZxQg.CaIq1lIcdHR741IdzvrfSvl1iezfhjah1X0lZ8EO2s8g.JPEG.drvoss/large.jpg?type=m2]]></url>
					<title><![CDATA[내 성격 100% 활용하기 -上-]]></title>
					<link>http://blog.naver.com/drvoss</link>
				</image>
			
			<description><![CDATA[HARMONY]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Mon, 13 May 2019 20:56:46 +0900</pubDate>

			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[랜덤을 사용하는 우아한 방법 발표자료]]></title>
					<link>http://blog.naver.com/drvoss/221466013135</link>
					<guid>http://blog.naver.com/drvoss/221466013135</guid>
					<description><![CDATA[]]></description>
					<pubDate>Thu, 14 Feb 2019 21:25:56 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[모네로 마이너(Monero Miner)]]></title>
					<link>http://blog.naver.com/drvoss/221287092676</link>
					<guid>http://blog.naver.com/drvoss/221287092676</guid>
					<description><![CDATA[분산형 장부 기술을 활용하는 블록체인(Blockchain) 기술은 디지털 통화 거래 내역을 기록하는 암호화폐(가상화폐, Crypto-currency) 혹은 비트코인이라는 단어로 더 대중적이다. 암호화폐 가치에 대한 논쟁은 다툼의 여지가 많아 피하고 싶다. 다만 수십년간 전산학의 난제였던 분산 데이터베이스 문제를 코인이라는 가치를 부여해 해결한 사토시 나카모토의 제안으로 새로운 기술적 지평이 열렸다는 것에는 의심의 여지가 없다. 블록체인에 대한 내용은 인터넷을 통해 많은 문서를 확인할 수 있다. 너무 많은 정보가 있어 혼란스럽다면 마이크로소프트웨어 390호의 &quot;가볍게 읽어 보는 블록체인 이야기&quot;와 &quot;이더리움 시작하기&qu.......]]></description>
					<pubDate>Tue, 29 May 2018 20:31:12 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[변경하면 편리한 잘 알려지지 않은 옵션들]]></title>
					<link>http://blog.naver.com/drvoss/221211150770</link>
					<guid>http://blog.naver.com/drvoss/221211150770</guid>
					<description><![CDATA[개발 머신을 새로 셋팅하고 나서 비주얼 스튜디오를 설치한 후 꼭 변경하게 되는 기본 옵션들이 있다. 예를 들어 소스코드에 Line Number를 나오게 하거나 tab을 space로 바꾸기, 테마를 Dark로 바꾸기, 폰트를 Consolas나 D2Coding 등으로 바꾸기 같은 것들 말이다. 이런 것들은 꽤 잘 알려진 것들이라 많은 개발자들이 잘 알고 있지만 검색이 잘 안되는 사소한 부분이지만 설정을 바꾼다면 개발의 효율성을 한층 올려줄 수 있는 것들이 있어 추천하고자 한다. 복사 붙여넣기 작업 중 공란을 복사 막기 오른손으로 마우스로 위치를 잡아 가면서 왼손만으로 복사 - 붙여 넣기 작업을 반복적으로 하다 보면, 공백을 찍고 복사 작업을 하는 경우가.......]]></description>
					<pubDate>Mon, 19 Feb 2018 00:40:02 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[CNTK(Cognitive Toolkit)를 이용한 딥러닝 입문]]></title>
					<link>http://blog.naver.com/drvoss/221172647011</link>
					<guid>http://blog.naver.com/drvoss/221172647011</guid>
					<description><![CDATA[실습에 사용된 예제파일 및 데이터 다운로드마이크로소프트의 연구조직에서 내부 프로젝트로 진행하던 딥러닝 프레임워크는 2015년 4월 CNTK(Computational Network Toolkit)라는 이름으로 오픈소스 형태로 공개하였다. 초기 버전의 CNTK는 내부 스크립트인 BrainScript로만 이용이 가능했으나, 2016년 명칭을 마이크로소프트 인지 툴킷(Cognitive Toolkit)으로 변경하면서 파이썬/C++/C# 언어의 인터페이스를 제공해 주고 있다. 최근에는 2.x 버전으로 업그레이드되면서 성능 및 사용성이 크게 향상되어 기존의 딥러닝 라이브러리의 강자를 속에서 어떻게 자리를 잡을지 새롭게 주목받고 있다. 구글과 마이크로소프트 모두 클라우드는 매출과 직.......]]></description>
					<pubDate>Thu, 28 Dec 2017 07:05:47 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[코딩에 도움되는 비주얼 스튜디오 기능]]></title>
					<link>http://blog.naver.com/drvoss/221150781318</link>
					<guid>http://blog.naver.com/drvoss/221150781318</guid>
					<description><![CDATA[좋은 연장을 이용한 결과물은 그렇지 않은 연장을 이용해서 나온 같은 결과물 보다 생산성이 높은 것이 일반적이다. Visual Studio는 버전이 올라갈수록 프로그램 작성시 프로그래머에게 도움이 되는 여러 가지 기능들을 제공하는데, 최근 프로그램은 크기가 커지는 등의 프로그램 추세가 반영된 기능들을 제공하지만, 프로그래머의 습관과 실수를 분석해 도움을 줄 수 있는 기능을 만들어 놓은 경우도 있다.일반적으로 프로그래머는 디버깅과 결과물의 품질을 높이기 위한 IDE 및 Visual Studio의 기능을 찾는데는 적극적이지만, 그 외의 부가적인 옵션은 접할 기회가 없어 활용되지 못하는 경향이 있다. 여기 도움이 될 만한 몇 가지 옵션 및 단.......]]></description>
					<pubDate>Tue, 28 Nov 2017 21:20:23 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[최신 개발 동향으로 다시 보는 GoF 디자인 패턴]]></title>
					<link>http://blog.naver.com/drvoss/221133285889</link>
					<guid>http://blog.naver.com/drvoss/221133285889</guid>
					<description><![CDATA[1994년에 출간된 GoF 디자인 패턴은 지금까지도 여전히 개발자들에게 혜안을 주고 있다. 하지만 20여년의 세월이 지나면서 애플리케이션은 대형화 되고 처리되는 데이터양도 매우 커졌다, 이런 환경에 맞게 C++ 문법 및 라이브러리 또한 많은 발전이 있었다. GoF 디자인 패턴 중 지면상 두 개의 패턴인 싱글톤과 데코레이터 패턴을 현대적 감각의 C++ 코드로 바꾸어 다시 구현해 보고, 반대로 익숙한 디자인 패턴의 모습을 보며 현재의 C++ 모습을 살펴보도록 하자.평면에 효율성과 안정성 있는 형태를 만들고 그것을 벽면으로 건물을 지으면 어떤 모습일까? 자연 속에서 해답을 찾는다면 벌들이 짓는 집을 생각해 볼 수 있다. 벌집은 꼭짓점과 변.......]]></description>
					<pubDate>Sun, 05 Nov 2017 23:38:48 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[SAL(Standard Annotation Language)를 이용한 정적분석]]></title>
					<link>http://blog.naver.com/drvoss/221107488338</link>
					<guid>http://blog.naver.com/drvoss/221107488338</guid>
					<description><![CDATA[개발자라면 평상시 보다 신나고 조금 더 긴 코드를 작성한 후 컴파일 했을 때 아무런 불평불만 없이 컴파일이 완료되면서 에러와 경고(Warning)가 없다는 메세지가 나타났을 때의 기쁨을 잘 알 것이다. 실제 제품에 반영되는 코드라면 이러한 기쁨을 뒤로한 채 디버깅이나 유닛 테스트를 이용해 검증작업이 계속 되겠지만, 최근 컴파일러가 발전하고 개발 툴의 IDE 기능이 향상되면서 기존에는 코드 검증작업이나 애플리케이션의 동작 중에나 발견할 수 있었던 다양한 문제점을 컴파일이 완료되기 이전에 발견할 수 있게 되었다.완성도 높은 코드를 만드는 방법 중에 하나는 컴파일러가 생성해주는 경고 메세지의 원인을 모두 제거하는 것이다. 컴.......]]></description>
					<pubDate>Thu, 28 Sep 2017 22:51:41 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[Visual Studio를 이용한 이더리움 개발 시작]]></title>
					<link>http://blog.naver.com/drvoss/221105780324</link>
					<guid>http://blog.naver.com/drvoss/221105780324</guid>
					<description><![CDATA[오픈소스 관점에서의 이더리움비트코인은 블록체인 기반 기술 사용한 가상 통화 기술의 혁신적인 모델이였고 지금까지는 매우 성공적으로 평가받고 있다. 가상 화폐에 특화된 비트코인 이후의 블록체인 기반 기술은 비트코인의 기술 기반을 그대로 따라 하는 수준에 그쳤기 때문에 가상 통화 개념을 벗어난 새로운 응용 영역에서는 이렇다할 성과나 비전을 보여주지 못하였다. 이더리움 마일스톤. 현재는 트랜잭션 처리나 보안이 향상된 Homestead 버전이다. 버전 코드명 출시일 0 Olympic 2015년 5월 1 Frontier 2015년 7월 2 Homestead 2016년 3월 3 Metropolis 미정 4 Serenity 미정 이더리움은 2013년부터 비탈릭 부테린(Vitalik Buterin, В.......]]></description>
					<pubDate>Tue, 26 Sep 2017 18:40:26 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[한번 보고 바로 활용하는 GoF 디자인 패턴: 데코레이터(Decorator)]]></title>
					<link>http://blog.naver.com/drvoss/220977203065</link>
					<guid>http://blog.naver.com/drvoss/220977203065</guid>
					<description><![CDATA[상속을 이용하면 기능을 확장하기가 매우 쉽기 때문에 개발자들은 언제나 상속 구현에 대한 유혹을 느낀다. 하지만 상속을 이용한 기능 확장을 애용할 경우 애플리케이션이 확장되면서 계속 늘어가는 구현 클래스(Concrete Class)를 관리해주어야 하고, 많은 클래스에 중복되는 기능을 구현해야 되는 부담과 비즈니스 로직이 각 클래스 메소드에 구현되어 있어 유지보수를 진행할수록 스파게티 코드가 되어 버리는 문제가 있다. class Animal { public: virtual void show() const = 0; }; class Tiger : public Animal { public: virtual void show() const { std::cout &lt;&lt; "Tiger" &lt;&lt; std::endl; } }; class ScaryTiger : public T.......]]></description>
					<pubDate>Fri, 07 Apr 2017 02:57:14 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[한번 보고 바로 활용하는 GoF 디자인 패턴: 싱글톤(Singleton)]]></title>
					<link>http://blog.naver.com/drvoss/220976193978</link>
					<guid>http://blog.naver.com/drvoss/220976193978</guid>
					<description><![CDATA[GoF 디자인 패턴은 1994년에 출간되었으니 이제 20년이 훨씬 지났다. GoF 디자인 패턴은 지금도 많은 개발자들에게 영감을 주고 있고 대용량 애플리케이션의 지엽적 기능을 개발 할 때, 정답으로 참고할 만한 혜안을 준다. 하지만, C++언어와 표준 라이브러리는 그동안 많은 발전이 있어 20년 전의 저자들이 작성했던 코드보다는 요즘 개발 툴로는 보다 효율적이게 만들어 낼 수 있다. 윈도우 운영체제에서 작업관리자는 하나이다. 메모장을 여러 개 실행하고 있어도 입력을 대기하고 있는 캐럿은 하나도 활성화된 윈도우 역시 하나다. 애플리케이션을 개발할 때 하나의 인스턴스만 만들고 싶을 때가 있다. 예를 들어 데이터 베이스 저장소에 접.......]]></description>
					<pubDate>Wed, 05 Apr 2017 23:05:52 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[비주얼 스튜디오2017 오프라인 설치]]></title>
					<link>http://blog.naver.com/drvoss/220957388200</link>
					<guid>http://blog.naver.com/drvoss/220957388200</guid>
					<description><![CDATA[지난 2017년 3월 7일 출시된 비주얼 스튜디오 2017은 웹 인스톨로만 제공해 주었고, iso 파일을 제공해 주지 않습니다. 아마도 영문 설치판을 모두 다운로드 받으니 20기가가 넘어 iso 파일 제공이 의미 없다고 판단한 것 같습니다. 하지만 여전히 오프라인으로 설치할 수 있는 방법을 제공해 줍니다. iso로 제공해 주지 않으니 인터넷을 통해 설치판을 받았다면 그 설치판이 가장 최신 버전의 설치판이고, 실제로 계속적으로 업데이트 됩니다. 지금까지 iso를 받아 놓았다가 설치하던 개발자가 많았는데, 비주얼 스튜디오 2017부터는 실시간으로 다운로드 받아 설치할 것을 권장합니다. 먼저 my.visuslstudio.com에 로그인해서 비주얼 스튜디오.......]]></description>
					<pubDate>Mon, 13 Mar 2017 23:56:21 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[인스턴스에서 자신의 파일 경로 얻기]]></title>
					<link>http://blog.naver.com/drvoss/220952565889</link>
					<guid>http://blog.naver.com/drvoss/220952565889</guid>
					<description><![CDATA[애플리케이션에서 파일의 경로를 얻어 오는 작업은 매우 빈번하게 일어난다. 특히 인스턴스 자신의 경로를 얻어 오는 작업은 환경설정 파일을 열기 위해서나 애플리케이션에 위치한 폴더에 특정 파일을 만들기 위한 용도 등의 목적으로 빈번하게 사용되는 편이다. 커맨드 라인 문자열을 이용한 자신의 경로 얻기 가장 쉽게 접할 수 있는 자신의 인스턴스 파일을 얻는 방법은 무엇일까? C++ 문법의 입문 서적이 아무래도 콘솔 환경에서 실습하는 경우가 빈번하고, 또 가장 먼저 접하다 보니 main에 들어가는 인자를 통하는 형태일 것이다. 대부분의 경우 main의 첫 번째 인자는 argc, 두 번째 인자는 argv로 고정하는 편이니 argv의 첫 번째 포인.......]]></description>
					<pubDate>Tue, 07 Mar 2017 22:55:29 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[포인터의 크기, 제대로 알자!]]></title>
					<link>http://blog.naver.com/drvoss/220940541715</link>
					<guid>http://blog.naver.com/drvoss/220940541715</guid>
					<description><![CDATA[32비트 머신에서 포인터의 크기는? 포인터의 크기는 머신의 비트수가 증가함에 따라 계속적으로 증가해 왔다. 윈도우 프로그래밍에서는 프로세스가 가질 수 있는 최대 가상 메모리의 크기에 비례해 증가하게 된다. 32비트 머신에서는 최대 4GB의 프로세스 가상 메모리가 할당되므로, 4GB의 프로세스를 모두 가리킬 수 있도록 4바이트의 포인터 크기가 필요한 것으로 얘기하곤 한다. 그리고 커스텀한 구조체, 클래스, 기본 자료형을 가릴 것 없이 포인터의 크기는 4바이트이므로 모든 포인터의 크기는 4바이트라고 생각할 수 있다. 각종 포인터의 크기 일반적인 자료형과 클래스, 그리고 구조체 등의 포인터 크기는 4바이트다. 이를 이용해 포인터.......]]></description>
					<pubDate>Tue, 21 Feb 2017 04:02:07 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[동적 링크 라이브러리 검색 순서]]></title>
					<link>http://blog.naver.com/drvoss/220939012338</link>
					<guid>http://blog.naver.com/drvoss/220939012338</guid>
					<description><![CDATA[애플리케이션에서 LoadLibrary를 할 때, DLL 파일 경로를 넣으면 이 경로를 따라 검색하지만 라이브러리 파일의 절대 경로가 아닌 파일명만 넣었을 경우에는 먼저 애플리케이션의 경로에 있는 DLL 파일을 로딩한다. 만일 애플리케이션의 경로에 해당 DLL 파일이 존재하지 않을 경우 지정된 동적 링크 라이브러리 검색 순서(Dynamic-Link Library Search Order)대로 순회하면서 DLL 파일을 검색해 찾는다. 먼저 GetSystemDirectory API를 통해 얻는 윈도우 폴더 안의 system32 폴더를 검색해 찾게 되고, 찾지 못하면 윈도우 폴더 안의 system 폴더를 검색한다. 그래도 찾지 못했다면 GetCurrentDirectory API를 통해 얻는 현재 디렉토리를 검색하.......]]></description>
					<pubDate>Sun, 19 Feb 2017 09:06:24 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[공용 라이브러리의 위치 지정 노하우]]></title>
					<link>http://blog.naver.com/drvoss/220872322731</link>
					<guid>http://blog.naver.com/drvoss/220872322731</guid>
					<description><![CDATA[환경변수에 등록된 Path 윈도우 환경변수에는 윈도우에서 전역적으로 사용하는 시스템 변수들이 있다. 특히 Path에 경로를 등록해 두면 전역적으로 사용할 수 있기 때문에, 전역적인 성격으로 사용하는 컴파일러, 디버거, 프로파일러, 형상관리 등의 도구는 환경변수의 시스템 변수 Path에 등록해 두는 것이 일반적이다. 환경변수의 시스템 변수 Path는 다음의 선택을 통해 찾을 수 있다. 윈도우의 제어판 -&gt; 시스템 및 보안 -&gt; 시스템 -&gt; 고급 시스템 설정 -&gt; 고급 -&gt; 환경변수 [화면 1] 환경변수 설정 화면 해당 UI에서 접근한 환경변수는 레지스트리에 저장된다. 특히 환경변수의 시스템 변수 Path는 다음의 경로에 저장된다. .......]]></description>
					<pubDate>Mon, 28 Nov 2016 06:19:31 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[환경변수 PATH 항목에는 얼마나 경로를 붙여 쓸 수 있을까?]]></title>
					<link>http://blog.naver.com/drvoss/220862756789</link>
					<guid>http://blog.naver.com/drvoss/220862756789</guid>
					<description><![CDATA[개발PC를 사용하다 보면 여러 개발 관련 툴이나 에디터, 디바이스 드라이버 등을 설치하기 마련인데, 계속 설치하다 보면 환경변수의 PATH 항목의 값이 아래와 같이 계속적으로 붙여지게 된다. 환경변수 항목은 과연 얼만큼 문자열이 추가 되더라도 괜찮을까? Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\Git\cmd; 환경변수 항목의 최대 크기는 윈도우XP까지는 32,767자로 고정되어 있고, 비스타부터는 크기의 제한이 없다. 다만 마이크로소프트는 여전히 환경변수 항목을 최대 32,767자.......]]></description>
					<pubDate>Wed, 16 Nov 2016 06:30:23 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[트라이 그래프 사용설명서]]></title>
					<link>http://blog.naver.com/drvoss/220847382028</link>
					<guid>http://blog.naver.com/drvoss/220847382028</guid>
					<description><![CDATA[암호 같은 소스 코드 암호 문장과 같은 [리스트 1]을 컴파일하면 빌드되지 않을 것 같지만 아무런 문제 없이 빌드가 이뤄진다. ??=include &lt;iostream&gt; // #include&lt;iostream&gt; void main() ??&lt; int a??(10??) = ??&lt;0, ??&gt;; // int a[10] = {0, }; a??(0??) = 2; // a[0] = 2 a??(0??) ??'= a??(0??); // a[0] ^= a[0] a??(0??) = ??-a??(0??); // a[0] ~= a[0] a??(0??) ??!= a??(0??); // a[0] |= a[0] std::cout &lt;&lt; "??/??/" &lt;&lt; std::endl; // cout &lt;&lt; "\\" &lt;&lt; endl; return; ??&gt; [리스트 1] 암호와 같은 코드 암호 같은 문장들을 보면 추측할 수 있듯이, C 문법을 구성하는 각 문자가 3개의 문.......]]></description>
					<pubDate>Fri, 28 Oct 2016 07:19:35 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[비주얼 스튜디오의 Common7 폴더]]></title>
					<link>http://blog.naver.com/drvoss/220839617316</link>
					<guid>http://blog.naver.com/drvoss/220839617316</guid>
					<description><![CDATA[비주얼 스튜디오가 설치되어 있는 폴더 중 Guidgen.exe를 비롯해서 Spy++ 등 유용한 유틸리티와 주요 비주얼 스튜디오 구성요소들은 Common7 폴더 예하에 위치해 있는 것을 알 수 있다. 비주얼 스튜디오는 97, 비주얼 스튜디오 6.0을 거처 비주얼 스튜디오 닷넷 2002, 비주얼 스튜디오 닷넷 2003, 비주얼 스튜디오 2005, 2008, 2010, 2012, 2013, 2015, 2017 과 같은 순서로 출시되었다. 출시 명과 상관없이 비주얼 스튜디오 6.0을 기준으로 비주얼 스튜디오 닷넷 2002는 7.0, 비주얼 스튜디오 닷넷 2003은 7.1, 비주얼 스튜디오 2005는 8.0과 같은 내부 버전을 유지하고 있으며, 이중 7.0은 마이크로소프트의 기념비 적인 닷넷이 포함된 버전이.......]]></description>
					<pubDate>Tue, 18 Oct 2016 21:48:45 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[공유 라이브러리와 메니페스트]]></title>
					<link>http://blog.naver.com/drvoss/220794911998</link>
					<guid>http://blog.naver.com/drvoss/220794911998</guid>
					<description><![CDATA[수레는 만들고 바퀴는 붙인다”,“ 거인의 어깨 위에 선 난쟁이가 더 멀리 본다.”이 말들의 원래 뜻은 조금 다를지라도, 프로그래머들에게는 라이브러리의 유용성을 가장 잘 표현해 주는 말이다. 요즘 애플리케이션을 개발하는 과정에는 다양한 기능의 라이브러리를 사용한다. 적절한 UI라이브러리를 사용하는 것은 플래시나 게임 엔진 등을 이용한 화려한 UI에 맞게 높아진 사용자들의 눈높이를 맞추면서 UI 개발에 들어가는 시간을 크게 단축시키고, 압축 라이브러리나 보안 라이브러리를 이용하는 것은 다양한 예외 상황에 대한 시행착오 없이 자신의 애플리케이션에 기능을 넣는 유일한 방법이 된다. 작은 애플리케이션의 경우 윈도우에서 기.......]]></description>
					<pubDate>Tue, 23 Aug 2016 20:23:26 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[비주얼 스튜디오 빌드 후 딴짓하기]]></title>
					<link>http://blog.naver.com/drvoss/220762586909</link>
					<guid>http://blog.naver.com/drvoss/220762586909</guid>
					<description><![CDATA[템플릿을 바르거나 여러 라이브러리들이 프로젝트에 붙어 있는 경우, VS2015 sp1 부터 적용된 partial pdb 등으로 링크타임을 포함한 전체 컴파일 시간이 줄어들었다 하더라도, 매일 빌드하고 하루에도 수번 디버깅을 시작하는 개발자 입장에서는 비주얼 스튜디오를 통한 빌드 작업은 매우 더디다고 생각할 껍니다. 빌드를 하고 Rebuild All succeeded가 뜨는지 혹은 F5를 누르고 브레이크 포인트가 적중될 때 까지 빌드되는 과정을 Output 창을 통해 바라 보고 있는 개발자들에게 좋은 기능이 있습니다. 페북 때문에 사실 제목을 낚시성으로 지었는데, 비주얼 스튜디오의 특정 이벤트가 있을 때 사운드를 재생해 줄 수 있습니다. 빌드 성공이 되.......]]></description>
					<pubDate>Fri, 15 Jul 2016 06:21:50 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[레지스트리 변경 후 바로 반영 시키는 코드]]></title>
					<link>http://blog.naver.com/drvoss/220761683675</link>
					<guid>http://blog.naver.com/drvoss/220761683675</guid>
					<description><![CDATA[디버깅하다 보면 애플리케이션에서 사용하는 플래그 값이나 환경설정 값 변경 등의 목적으로 레지스트리를 변경 한 후 애플리케이션에서 로드하면 해당 환경설정 값 등이 변경되어 있지 않을 수 있다. 이럴 때 가장 많이 사용하는 개발자 사이의 팁 중 하나는 작업 관리자에서 explorer.exe를 강제 종료 후 디버깅하는 방법이다. 만일 이런 작업을 코드로 구현하고 싶다면 WM_SETTINGCHANGE을 SendMessage 한다. 레지스트리와 메모리에 적재되어 있는 값을 동기화 시켜 주어 변경된 레지스트리를 바로 반영해 줄 수 있다. ::SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0)]]></description>
					<pubDate>Thu, 14 Jul 2016 06:35:03 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[개발]]></category>
					<title><![CDATA[GUID와 유일한 성질]]></title>
					<link>http://blog.naver.com/drvoss/220760761375</link>
					<guid>http://blog.naver.com/drvoss/220760761375</guid>
					<description><![CDATA[‘글로벌 고유 식별자’라는 명칭보다 ‘구위드’라는 발음이 편하게 느껴지고, 그것보다 ‘{00000000-0000-0000-0000000000000000}’라는 형태가 더 친근하게 느껴지는 GUID(Globally Unique IDentifier)는 윈도우 운영체제 전반에 걸쳐 두루 쓰이는 키워드처럼 윈도우의 대표적인 객체 네이밍 방식 중 하나이다. 이는 레지스트리 속에서 어떠한 오브젝트를 매칭하거나 파일시스템에서 유일한 파일명이나 오브젝트명을 지정하는 값으로 생성되고 전역적으로 활용된다. GUID, UUID, IID, CLSID… 윈도우 프로그래머들에게는 GUID라고 알려져 있지만, 실제로 웹에서 문서를 참조하다 보면 같거나 비슷한 모양새의 문자열을 UUID, IID 등의 다른 이.......]]></description>
					<pubDate>Wed, 13 Jul 2016 06:34:24 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[현재 파일이 포함된 프로젝트 바로 디버깅 하기]]></title>
					<link>http://blog.naver.com/drvoss/220591611603</link>
					<guid>http://blog.naver.com/drvoss/220591611603</guid>
					<description><![CDATA[비주얼 스튜디오에서 F5키를 눌러 디버깅을 시작하면 StartUp Project로 설정된 프로젝트의 디버깅이 시작됩니다. StartUp Project는 언제든 바꿀 수 있습니다. 솔루션 익스프롤러에서 원하는 프로젝트에서 우클릭 &gt; Set as StartUp Project를 선택하면 프로젝트가 굵은 글씨로 바뀌면서 F5키를 누르면 바꾼 프로젝트가 디버깅 시작됩니다. 이클립스에서 디버깅하기를 누르면 워크스페이스에 있는 여러 프로젝트 중에서 현재 열어 편집하고 있는 java 파일이 속해 있는 프로젝트가 디버깅 시작 됩니다. 여러 프로젝트를 동시에 개발하거나 디버깅 혹은 참고하고 있을 때 특정 프로젝트에 속해 있는 파일을 열어 편집 &gt; 디버깅, 다시 다른 프.......]]></description>
					<pubDate>Fri, 08 Jan 2016 23:10:00 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[세미나 ]]></category>
					<title><![CDATA[C++ REST SDK 2.0(C++, 클라우드 환경을 준비하다) 세미나 자료]]></title>
					<link>http://blog.naver.com/drvoss/220342249703</link>
					<guid>http://blog.naver.com/drvoss/220342249703</guid>
					<description><![CDATA[2014년 6월 24일에 Microsoft Virtual Academy에 올라온 C++ REST SDK 2.0(C++, 클라우드 환경을 준비하다) 세미나 자료를 공유합니다. http://www.microsoftvirtualacademy.com/training-courses/techdaysmini-9-c-plus-plus?m=8999&amp;ct=29652]]></description>
					<pubDate>Sun, 26 Apr 2015 21:39:09 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 명령창 활용 가이드]]></title>
					<link>http://blog.naver.com/drvoss/220341943131</link>
					<guid>http://blog.naver.com/drvoss/220341943131</guid>
					<description><![CDATA[개발자는 디버깅시 코드 에디터에 브레이크 포인터를 걸고 F10, F11등의 단축키를 이용해 Step Into, Step Over, Step Out Watch 등의 작업을 수행하면서 메모리(Memory), 와치(Watch), 지역(Local) 윈도우등의 현재 컨텍스트 정보와 콜스택창(Call Stack), 출력창(Output)등에서 디버깅 정보를 얻는다. 일반적으로 이러한 디버깅 행위에서 마우스 작업이 빠지기는 힘들 것이다. 코드 에디터와 출력창(Output Window), 와치창(Watch Window)등에 포커스를 줄 때 마우스를 이용한 클릭이 일반적이고 윈도우 기반의 GUI 애플리케이션인 비주얼 스튜디오의 특정 기능을 수행하기 위해선 역시 마우스 클릭이 필요하기 때문이다. 일반적으로 개발 작업.......]]></description>
					<pubDate>Sun, 26 Apr 2015 14:39:30 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[유용한 디버깅 정보를 얻을 수 있는 미리 정의된 매크로]]></title>
					<link>http://blog.naver.com/drvoss/220341913528</link>
					<guid>http://blog.naver.com/drvoss/220341913528</guid>
					<description><![CDATA[비주얼 C++과 gcc는 __FUNCTION__을 사용할 수 있다. 표준은 아니지만 __FUNCTION__은 함수명을 반환해주어 특정 상황에서 유용하게 사용된다. 비주얼 C++에는 __FUNCTION__과 같은 미리 정의된 매크로를 제공해 준다. 부스트는 BOOST_CURRENT_FUNCTION를 통해 함수명을 얻을 수 있는데, 매크로를 이용해 함수 정의문 밖에서 사용할 경우 정의되지 않은 동작을 하므로 주의해야 한다. __FUNCSIG__는 해당 함수의 시그니처들까지 모두 출력해 주어 디버깅 정보를 출력할 때 일반적인 상황에서 빈번히 사용할 수 있다. gcc의 경우 __PRETTY_FUNCTION__ 을 통해 __FUNCSIG__와 비슷하게 시그니처를 포함한 함수 형태를 출력해 줄 수 있으나, 콜링컨.......]]></description>
					<pubDate>Sun, 26 Apr 2015 13:53:54 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[Visual C++ CRT 라이브러리 이야기]]></title>
					<link>http://blog.naver.com/drvoss/220341893089</link>
					<guid>http://blog.naver.com/drvoss/220341893089</guid>
					<description><![CDATA[비주얼 C++을 이용한 어느 정도 규모의 애플리케이션을 만든다면 라이브러리의 사용은 필수적이다. 그 중에서도 CRT(C Runtime) 라이브러리는 모든 기능의 기반이 되는 중요한 라이브러리다. CRT 라이브러리가 포함하고 있는 함수들에 상관없이, 윈도우의 출시와 새로운 비주얼 스튜디오의 출시는 CRT 라이브러리에 대한 작고 큰 변화를 가져 왔었다. CRT 라이브러리를 정확하게 사용하기 위해서 각 버전에 따른 라이브러리의 적용 시 주의사항을 이해하고, 새로운 비주얼 스튜디오 2015에서의 CRT 라이브러리의 변화사항에 대해 살펴보도록 하자. CRT 라이브러리와 직접적인 의존성 없이 애플리케이션을 만들 수는 있다. 하지만 그것은 대단히 간.......]]></description>
					<pubDate>Sun, 26 Apr 2015 13:21:07 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[C++ 난수 사용법 완전 정복]]></title>
					<link>http://blog.naver.com/drvoss/220340760979</link>
					<guid>http://blog.naver.com/drvoss/220340760979</guid>
					<description><![CDATA[난수는 빈번히 사용되지는 않으나 중요한 순간에 필요한 값들 중 하나다. 난수에 대한 별다른 생각을 하지 않는다면 아마도 rand 함수의 나머지 값을 사용하는 개발자가 많을 것이다. 이 값은 중요한 난수가 필요한 상황에서 사용할 수 있는 값으로는 무리가 있다. rand를 보다 효율적으로 사용할 수 있는 방법과 윈도즈 애플리케이션에서 안전한 난수를 생성할 수 있는 방법에 대해 생각해 보고 표준 라이브러리를 통한 우아한 난수 사용법을 알아보자. 난수는 로또의 번호를 선택하는 애플리케이션을 만들거나, 포토샵의 블러 필터를 만들 때, 유저가 보스 몬스터를 잡았을 때 생성하는 아이템의 능력치를 결정하는 확률 계산의 인자로 필요 할.......]]></description>
					<pubDate>Fri, 24 Apr 2015 22:32:52 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[C++ REST SDK 2.0을 이용한 애플리케이션 개발]]></title>
					<link>http://blog.naver.com/drvoss/220340563782</link>
					<guid>http://blog.naver.com/drvoss/220340563782</guid>
					<description><![CDATA[C++ 언어를 통해 작성되는 애플리케이션은 성능이 뛰어나고 다양한 플랫폼에서 운영되어야 하는 언어적 특성 때문에 최신 IT 트렌드를 따라 오기에는 기본 라이브러리나 서드파티 라이브러리, 기반 프레임워크가 타 언어에 비해 빈약한 편이다. 2014년 6월, 마이크로소프트는 2012년 공개하며 주목을 받았던 REST 아키텍처 지원 라이브러리인 C++ REST SDK의 2.x버전을 발표 했다. C++ REST SDK에는 REST 아키텍처를 지원하기 위한 다양한 기능의 라이브러리가 모두 포함되어 C++을 이용한 성능 좋은 REST 애플리케이션을 쉽고 빠르게 만들 수 있다. 특정 벤더가 주도적으로 관리하는 자바나 C#과 같은 언어와 달리 C++언어는 표준 위원회에서 수.......]]></description>
					<pubDate>Fri, 24 Apr 2015 18:18:37 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 2015 C++ 라이브러리 업데이트2]]></title>
					<link>http://blog.naver.com/drvoss/220253585857</link>
					<guid>http://blog.naver.com/drvoss/220253585857</guid>
					<description><![CDATA[std::quoted()를 이용한 인용마크 처리 C++의 세계에서는 특정 포인터의 위치부터 널문자가 올 때 까지를 일반적으로 문자열이라고 한다. 하지만 이런 문자열의 정의는 다양한 상황에서 예상치 못한 문제를 만나게 된다. 예를 들어 CSV파일이나 XML파일과 같이 문자열의 크기 정보가 없고 널 문자가 원하는 문자열의 끝이 아닌데 문자열의 시작 위치만을 알 수 있는 상황에서 몇 개의 바이트 수를 읽어야 문자열 전체를 얻을 수 있는가 하는 것이다. 직관적이지 않은 stringstream 동작의 예 void foo() { std::stringstream ss; std::string str; ss &lt;&lt; "Hello World"; ss &gt;&gt; str; std::cout &lt;&lt; str; } 결과값: Hello std::st.......]]></description>
					<pubDate>Tue, 27 Jan 2015 22:00:00 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 2015 C++ 라이브러리 업데이트1]]></title>
					<link>http://blog.naver.com/drvoss/220253584967</link>
					<guid>http://blog.naver.com/drvoss/220253584967</guid>
					<description><![CDATA[표준 라이브러리의 기능 및 속도 개선 비주얼 C++라이브러리에서는 snprintf가 정의되어 있지 않다. 물론, 비슷한 기능을 하는 안전한 함수인 sprintf_s류를 제공해 주지만 윈도즈 플랫폼과 안드로이드 등을 동시에 지원하기 위한 크로스 컴파일이 이루어지는 소스코드의 경우 자주 사용되는 이러한 함수들이 없어 윈도즈 환경을 위한 같은 이름의 별도의 함수를 만들어 줘야 했다. 크로스 컴파일을 위해 윈도즈 플랫폼을 위한 snprintf를 정의해서 사용하는 경우가 빈번하다 #ifdef _MSC_VER #define snprintf c99_snprintf inline int c99_snprintf(char* str, size_t size, const char* format, ...) { int count; va_list ap; va_start(ap, f.......]]></description>
					<pubDate>Tue, 27 Jan 2015 20:10:00 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 2015 C++ 문법 업데이트2]]></title>
					<link>http://blog.naver.com/drvoss/220108852213</link>
					<guid>http://blog.naver.com/drvoss/220108852213</guid>
					<description><![CDATA[ref-한정자(ref-qualifiers) 비주얼 스튜디오 2015에 포함된 비주얼 C++은 C++11에 포함된 우측 값 참조(rvalue reference)를 완전하게 지원해 준다. 우측 값 참조의 정의만 보면 그리 어렵지 않다. C++은 값을 크게 두 가지로 분류할 수 있는데, 표현식이 종료된 이후에도 지속적으로 유지되는 값인 좌측 값(lvalue)과 식이 실행된 이후 없어져 버리는 임시객체나 수명이 만료되기 직전 객체등인 우측 값(rvalue)으로 나눌 수 있다. 표준 C++문서의 메뉴얼대로라면 lvalue, glvalue, xvalue, rvalue, prvalue등으로 분류할 수 있지만, 일반적으로 수식 실행 후 메모리에 유지되는 값에 대하여 접근할 수 있는 이름이 있다면 좌측 값, 없다면 우.......]]></description>
					<pubDate>Sun, 31 Aug 2014 11:32:44 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 2015 C++ 문법 업데이트1]]></title>
					<link>http://blog.naver.com/drvoss/220078039164</link>
					<guid>http://blog.naver.com/drvoss/220078039164</guid>
					<description><![CDATA[C99 호환성을 위한 __func__ __func__는 직관적으로 알 수 있듯, 현재 해당 코드가 위치한 곳의 함수 명을 얻어낼 수 있다. 비주얼 C++에서는 이미 __FUNCTION__ 이라는 매크로 상수를 가지고 함수 명을 얻어낼 수 있다. __func__의 추가는 C99 문법과 호환성을 위한 업데이트 인데, __FUNCTION__과 __func__, 두 상수의 차이점은 __FUNCTION__이 매크로 상수인데 만해, __func__는 전역변수 형태로 접근할 수 있다는 점이다. __func__는 __FUNCTION__과 마찬가지로 함수의 정의부(body)에서만 사용될 수 있으며, 함수 정의부 이외의 곳에서 사용한다면 C3187 에러 메세지와 함께 컴파일 되지 않는다. void foo() { cout &lt;&lt; __func__ &lt;&.......]]></description>
					<pubDate>Thu, 31 Jul 2014 22:36:49 +0900</pubDate>
					<tag><![CDATA[IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[비주얼 스튜디오 에서 Ctrl + Tab으로 화면 번쩍거림 없이 소스코드 전환하기]]></title>
					<link>http://blog.naver.com/drvoss/220078039000</link>
					<guid>http://blog.naver.com/drvoss/220078039000</guid>
					<description><![CDATA[엑셀과 같은 다중 문서 편집기에서는 열려 있는 문서를 순서 있게 관리하는데, 일반적으로 Ctrl + Tab을 누르면 뒤에 있는 문서를 맨 앞으로 보여주게 된다. 그러나 비주얼 스튜디오는 뒤에 열려 있는 문서를 보여주는 것이 아닌 다음 문서창 네비(New Document Window Navigation)가 보여 진다. 소스코드가 많이 열려 있을 경우 원하는 소스코드를 쉽게 찾으라는 한번 더 생각한 기능인데, 이는 오히려 개발자들에게 불편하게 느낄 수도 있는 기능이다. Ctrl + Tab을 눌렀을 때 나오는 다음 문서창 네비 기능. 일반적인 에디터 동작과 달라 불편함을 느낄 수 있다. Ctrl + Tab을 누르면 일단 열려 있는 다음 문서가 열리는, 내가 원하는 동작을.......]]></description>
					<pubDate>Thu, 31 Jul 2014 22:36:38 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[멀티스레드에서 안전한 rand() 사용하기]]></title>
					<link>http://blog.naver.com/drvoss/220078038718</link>
					<guid>http://blog.naver.com/drvoss/220078038718</guid>
					<description><![CDATA[난수를 사용하는 모든 곳에 표준 C++ 난수 라이브러리나 rand_s(), CryptGenRandom()을 사용할 필요는 없다. 프로그램 코드상에서 필요한 값만 얻을 수 있다면 방법은 중요치 않기 때문이다. 특히나 애플리케이션을 만들다 보면 그렇게 중요하지 않은 부분에서 난수값이 필요할 경우도 있다. 이때 간편하게 사용할 수 있는 rand()는 좋은 선택이 될 것이다. 하지만 간편한 목적으로 사용하는 rand()를 사용할 때도 주의해야 할 점이 있다. 특히 멀티스레드에서 사용한다면 시드 값을 부여하는 스레드와 rand()를 호출하는 스레드간의 실행 시점을 명확히 해야 한다. 간련한 목적으로 사용하는 rand() 함수라고 할 지라도 일반적으로 rand()를 다.......]]></description>
					<pubDate>Thu, 31 Jul 2014 22:36:20 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[세미나 ]]></category>
					<title><![CDATA[C++ AMP Fundamentals 세미나 자료]]></title>
					<link>http://blog.naver.com/drvoss/20209422610</link>
					<guid>http://blog.naver.com/drvoss/20209422610</guid>
					<description><![CDATA[Parallel Development Community에서 주최한 C++ AMP 세미나 자료 입니다.필요하신분은 참고 하세요~]]></description>
					<pubDate>Thu, 24 Apr 2014 22:26:25 +0900</pubDate>
					<tag><![CDATA[IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[네이티브 환경에서 사용자 정의 그래픽 시각화 만들기]]></title>
					<link>http://blog.naver.com/drvoss/20207978037</link>
					<guid>http://blog.naver.com/drvoss/20207978037</guid>
					<description><![CDATA[디버깅 작업은 개발자들에게 언제나 스트레스를 주는 시간이다. 소스코드가 복잡해지고 유명한 라이브러리를 사용하거나 유지 보수 기간이 길어질수록 비주얼 C++로 작성한 네이티브 코드의 객체들은 점점 디버깅하기가 어려워지는 경향이 있다. 비주얼 C++의 디버거는 디버깅시 코드에 사용된 객체의 인스턴스에 대하여 개발자가 쉽게 내용을 파악해 줄 수 있도록 사용자 정의 시각화 기법들을 제공해 주고 있다. Natvis 프레임워크를 이용한 텍스트 시각화 비주얼 스튜디오는 디버깅시 자동(Autos), 지역식(Locals), 조사식(Watch), 메모리(Memory)창, 그리고 코드 에디터 영역의 툴팁등을 이용해 객체에 대한 값을 조회할 수 있는 시각화 기능.......]]></description>
					<pubDate>Mon, 31 Mar 2014 21:55:12 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[네이티브 환경에서 사용자 정의 텍스트 시각화 만들기]]></title>
					<link>http://blog.naver.com/drvoss/20207978016</link>
					<guid>http://blog.naver.com/drvoss/20207978016</guid>
					<description><![CDATA[비주얼 스튜디오는 자타가 공인하는 최고의 개발 도구중 하나이다. 개발자는 자신의 머릿속의 애플리케이션 수행 순서를 비주얼 스튜디오의 텍스트 에디터를 통해 표현하고 디버거를 통해 자신이 작성한 코드에 대한 일차 검증을 한다. 개발자는 디버깅중 자동(Autos), 지역식(Locals), 조사식(Watch), 메모리(Memory)창과 코드 에디터 영역을 뚫어지게 주시하며 빨간색으로 변하는 텍스트 시각화 영역의 숫자 하나의 값에 따라 스트레스를 받기도 하고, 받았던 스트레스를 한번에 날려 버리기도 한다. &lt;화면 1&gt; 비주얼 스튜디오의 기본적인 디버깅 환경의 예 C++언어에서의 디버깅은 지속적으로 스트레스를 받는 시간일 것이다. 이러한 스.......]]></description>
					<pubDate>Mon, 31 Mar 2014 21:54:56 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[유용한 전처리기 살펴보기]]></title>
					<link>http://blog.naver.com/drvoss/20207977991</link>
					<guid>http://blog.naver.com/drvoss/20207977991</guid>
					<description><![CDATA[전처리기를 모르는 개발자는 없을 것이다. 그러나 주변을 둘러보면 유용한 전처리기를 전체적으로 파악하고 있다가 전처리 지시자를 적시적소에 마법과 같이 사용하는 개발자는 의외로 드문 것을 알 수 있다. 대부분 #include, #define, #if, #ifndef, #endif 정도만 빈번하게 사용하는 편인데, 전처리기라는 것 자체가 비즈니스 로직과는 관계가 없고, C++ 코드를 더욱 복잡하고 지저분하게 만들어 줄 뿐 아니라, 매크로의 경우 가독성이 떨어지고 디버깅이 힘들며 이런 것들이 공동 작업이나 인수인계시 단점으로 작용하기 때문이다. 하지만 C++을 잘 사용한다는 개발자라면 언어가 제공하는 기능이 어떤 것이 있는가 쯤은 한번쯤 전체적으로 정.......]]></description>
					<pubDate>Mon, 31 Mar 2014 21:54:42 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[NuGet을 이용한 네이티브 패키지 관리]]></title>
					<link>http://blog.naver.com/drvoss/20207977957</link>
					<guid>http://blog.naver.com/drvoss/20207977957</guid>
					<description><![CDATA[오픈소스를 공짜 소스 혹은 공짜 라이브러리라고만 생각하다면 오픈소스를 반만 활용하고 있는 것이다. 단순히 소스코드나 바이너리로써 오픈소스의 결과물만을 사용만한다면 추후 오픈소스의 구 버전에 종속되어 있는 프로젝트 결과물을 얻거나, 최신 버전의 오픈소스 적용을 위하여 프로젝트의 많은 코드 변경을 필요로 할 수 있다. 이러한 단점 보다 더 큰 불익은 오픈소스의 장점을 프로젝트에 하나도 녹여내지 못한다는 것이다. 프로젝트에 포함되어 있는 모듈의 한 부분을 오픈소스화 하거나 기존 오픈소스를 프로젝트에 도입하여 전 세계 개발자들과 공동으로 개발하면서 프로젝트를 진행해 프로젝트의 성능과 기능을 함께 향상 시키고 문.......]]></description>
					<pubDate>Mon, 31 Mar 2014 21:54:23 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[Visual C++ 개발자를 위한 Visual Studio 2013 업데이트2 – 라이브러리]]></title>
					<link>http://blog.naver.com/drvoss/20202659856</link>
					<guid>http://blog.naver.com/drvoss/20202659856</guid>
					<description><![CDATA[Visual Studio 2013에서는 그 동안 지원이 미더웠던 표준 C99의 라이브러리들이 대대적으로 지원됩니다. 그리고 STL에 initializer_list가 포함되고 MFC의 멀티바이트 라이브러리가 빠졌습니다. C99 표준 라이브러리 혹자는 C99는 오래된 표준이라 다른 컴파일러는 대부분 지원하는데 Visual C++만 표준을 지원 안 한다고 하기도 하는데, IBM C나 Oracle Solaris Studio 정도만 모두 지원해주고 Visual C++, GCC, C++ 빌더, 인텔 C++ 컴파일러 등 대중화된 컴파일러는 C99 표준 라이브러리를 대부분 부분적으로만 지원해 줍니다. 특히 Visual C++의 경우 C99 표준 라이브러리 대신 사용할 수 있는 동일하거나 비슷한 기능의 함수들이 많이 있습니.......]]></description>
					<pubDate>Tue, 07 Jan 2014 22:20:00 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[Visual C++ 개발자를 위한 Visual Studio 2013 업데이트1 – 문법]]></title>
					<link>http://blog.naver.com/drvoss/20201962070</link>
					<guid>http://blog.naver.com/drvoss/20201962070</guid>
					<description><![CDATA[윈도우8.1 출시소식에 맞추어 Visual Studio 2013이 공개되었습니다. 2012 버전 이후 1년여만인데, 출시 인터발이 좀 짧은 것 같긴 하지만 Visual C++ 개발자들이 아주 좋아할만한 여러 가지 기능들이 추가되고 기존 기능들이 향상되었습니다. 크게 문법, 라이브러리, IDE, 컴파일러 측면에서 간단하게 짚고 넘어가 보겠습니다. Visual Studio 2013은 윈도7 서비스팩1 이상, 인터넷 익스프롤러 10 버전 이상이 설치되어 있으면 무난하게 사용할 수 있습니다. 만일 윈도우8.1 스토어 앱을 만든다면 윈도우8.1이 설치되어야 하겠죠. 그리고 Visual C++로 만든 애플리케이션이 XP에서 동작하도록 XP 지원 바이너리를 만드는 것이 가능합니다. 한국에.......]]></description>
					<pubDate>Fri, 27 Dec 2013 21:10:00 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[CPU, GPU를 활용한 병렬 프로그래밍 이해]]></title>
					<link>http://blog.naver.com/drvoss/20190294525</link>
					<guid>http://blog.naver.com/drvoss/20190294525</guid>
					<description><![CDATA[마이크로소프트는 최신 비주얼 스튜디오를 발표 하면서 동시성 런타임(Concurrency Runtime)의 프로그래밍 모델인 병렬 패턴 라이브러리(Parallel Pattern Library)를 강화 시키고 동시성 런타임의 속도에 최적화를 하는 등 병렬 프로그래밍 지원에 대한 발전된 모습을 보여주고 있다. 하지만 이번 비주얼 스튜디오 발표와 함께 병렬 프로그래밍의 이슈는 무엇보다도 자동 병렬화(Auto-Parallelization)와 자동 벡터화(Auto-Vectorization) 지원과 함께 C++ AMP(Accelerated Massive Parallelism)였다. 앞서 발표된 동시성 런타임의 프로그래밍 모델과 같이 이번에 발표된 병렬 프로그래밍 지원 기능과 프로그래밍 모델 또한 쉽게 이해하고 간편.......]]></description>
					<pubDate>Mon, 24 Jun 2013 01:39:07 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[restrict 키워드]]></title>
					<link>http://blog.naver.com/drvoss/20189956991</link>
					<guid>http://blog.naver.com/drvoss/20189956991</guid>
					<description><![CDATA[restrict는 1999년 ANSI/ISO C 표준(C99)에 의해 정해졌으며 개발자의 의도를 컴파일러에 알려 주어 최적화에 도움을 주는 키워드 이다. restrict는 C++표준은 아니지만 g++ 컴파일러, IBM의 AIX C/C++컴파일러의 __restrict__, Visual C++의 __restrict와 같이 많은 컴파일러가 실제적으로 지원해 주고 있다. restrict 키워드의 쓰임은 일반적으로 익숙지 않은 편이다. 다른 키워드나 함수들처럼 결과가 뚜렷하게 나타나지 않기 때문이다. 아래의 함수를 보면 입력값으로 지정된 실수와 출력값으로 지정된 실수 배열이 있다. 이 함수를 작성할 당시 개발자는 단순히 특정값을 입력 받아서 출력값에 반영하는 기능이였다고 가정해 보자. 이러한 상.......]]></description>
					<pubDate>Tue, 18 Jun 2013 22:05:35 +0900</pubDate>
					<tag><![CDATA[일상·생각,IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[동시성 런타임으로 구현하는 Future Pattern]]></title>
					<link>http://blog.naver.com/drvoss/20185743512</link>
					<guid>http://blog.naver.com/drvoss/20185743512</guid>
					<description><![CDATA[윈도 운영체제 에서는 멀티 쓰레드를 이용한 병행 처리를 위해 쓰레드와 같은 다양한 자원을 제공해 주고 있다. 하지만 쓰레드를 생성, 종료하고 쓰레드 간에 동기화 작업을 하는 간단할 것 같은 과정은 경우에 따라서 경험이 많은 고급개발자 들에게도 간단히 해결할 수 없는 복잡한 문제들을 던져 주곤 한다. 동시성 런타임(Concurrency Runtime)은 운영체제들이 제공해 주는 낮은 수준의 멀티 쓰레드 자원들을 추상화 시켜 개발자가 간단하게 적용할 수 있도록 하고, 비즈니스 로직이나 알고리즘 수준으로 멀티 쓰레드를 이용한 병행 처리를 처리 할 수 있는 라이브러리를 제공해 준다. 프로세서의 발전 방향이 클락 수를 높이는 것에서 코어.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:38:00 +0900</pubDate>
					<tag><![CDATA[IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[병렬화 프로그래밍 적용을 위한 튜토리얼]]></title>
					<link>http://blog.naver.com/drvoss/20185743448</link>
					<guid>http://blog.naver.com/drvoss/20185743448</guid>
					<description><![CDATA[지금까지의 스레드 같이 시스템 수준의 낮은 추상화 자원을 이용한 병렬화 프로그래밍 방법은 병렬 프로그래밍으로 인해 발생하는 문제나 속도상의 이득을 눈으로 확인할 수 있는 방법을 검증한 후 적용하기 보다는 UI(User Interface)와 오래 걸리는 작업이 연동되는 부분 등과 같이 꼭 필요한 부분에만 최소화 하여 사용하려는 경향이 있었다. 간단한 애플리케이션 구현 과정을 함께 하면서 Visual Studio 2010을 비롯한 툴을 이용한 병렬화 프로그래밍의 개발 방법의 팁과 동시성 런타임(Concurrency Runtime)을 이용하는 방법 대하여 알아보도록 한다. 최근 보급형 CPU는 쿼드코어가 추세인데다가 하이퍼스레딩이 지원될 경우 윈도즈 작업관.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:32:11 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[네이티브 애플리케이션에서의 병렬화 프로그래밍]]></title>
					<link>http://blog.naver.com/drvoss/20185743410</link>
					<guid>http://blog.naver.com/drvoss/20185743410</guid>
					<description><![CDATA[전체 코드 량의 절반이 2배 빨라진다면 전체적으로 1.33배의 성능 향상만이 있게 된다는 암달의 법칙이 말해주듯, 멀티 코어를 지원하는 코드를 위한 태스크 분배 작업과 동기화 작업, 그리고 사용자와 상호 작용하는 코드 부분으로 인해 단일 코어상에서의 애플리케이션 속도보다 듀얼 코어상에서의 애플리케이션의 체감 속도가 그리 빠르게 느껴지진 않는다. 하지만 4개 코어상에서는 멀티 코어 혹은 매니 코어를 지원하는 애플리케이션과 그렇지 않은 애플리케이션 간의 속도 차이는 2배 이상 나기 때문에 체감 속도는 훨씬 빠르며 앞으로 느낄 체감 속도의 차이는 더 커질 것이다. 수퍼 컴퓨터를 비롯해 다양한 분야의 프로그래밍 환경에서는.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:28:58 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[Visual C++과 함께 하는 웹 서비스]]></title>
					<link>http://blog.naver.com/drvoss/20185743332</link>
					<guid>http://blog.naver.com/drvoss/20185743332</guid>
					<description><![CDATA[C++ 프로그래머들에게 웹 서비스는 필요성이 적고, 꼭 C++을 이용해 그것을 제공할 필요가 없었기 때문에 그리 친숙한 주제가 아니었다. 따라서 C++ 개발자들에게 웹 서비스에 대한 지원도 미약하기만 했다. 닷넷 프레임워크를 원활히 사용하는 언어로 구현된 서비스를 외부 라이브러리나 툴을 이용해 단순히 C++에서 이용하는 수준에 그쳐왔다. 하지만 Windows7의 출시에 맞춰 기존보다 뛰어난 웹 서비스 서버와 클라이언트를 구현할 수 있는 네이티브용 웹 서비스 콤포넌트가 업데이트됐다. 프로그래밍 언어는 ‘효율성 향상’이라는 방향으로 발전·진화해왔다. 프로그램이 단순히 연속된 계산을 하는 순서를 기술한 것에 지나지 않았던 초기 프.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:21:43 +0900</pubDate>
					<tag><![CDATA[IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[코딩에 도움되는 Visual Studio 기능]]></title>
					<link>http://blog.naver.com/drvoss/20185743256</link>
					<guid>http://blog.naver.com/drvoss/20185743256</guid>
					<description><![CDATA[좋은 연장을 이용한 결과물은 그렇지 않은 연장을 이용해서 나온 같은 결과물 보다 생산성이 높은 것이 일반적이다. Visual Studio는 버전이 올라갈수록 프로그램 작성시 프로그래머에게 도움이 되는 여러 가지 기능들을 제공하는데, 최근 프로그램은 크기가 커지는 등의 프로그램 추세가 반영된 기능들을 제공하지만, 프로그래머의 습관과 실수를 분석해 도움을 줄 수 있는 기능을 만들어 놓은 경우도 있다. 일반적으로 프로그래머는 디버깅과 결과물의 품질을 높이기 위한 IDE 및 Visual Studio의 기능을 찾는데는 적극적이지만, 그 외의 부가적인 옵션은 접할 기회가 없어 활용되지 못하는 경향이 있다. 여기 도움이 될 만한 몇 가지 옵션 및.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:16:50 +0900</pubDate>
					<tag><![CDATA[IT·컴퓨터]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>drvoss</author>
					<category><![CDATA[Code ]]></category>
					<title><![CDATA[프레임워크를 이해하기 위한 패턴 언어]]></title>
					<link>http://blog.naver.com/drvoss/20185743215</link>
					<guid>http://blog.naver.com/drvoss/20185743215</guid>
					<description><![CDATA[새로운 언어를 배우는 것과 프레임워크를 배우는 것 중에서 어느 것이 수월할까. 언어를 배우는 것은 조금씩 하다 보면 서서히 감이 잡히는데 반해, 라이브러리나 프레임워크의 경우에는 부분적으로 사용하기는 하지만 전체적인 모양이 파악되기 전까지는 아리송한 부분이 적지 않은 게 사실이다. 과연 프레임워크를 이해할 때는 어떤 순서로 파악하는 것이 좋은 방법일까? 나올 수 있는 다양한 답변을 패턴 언어를 통해 소개하고 점진적으로 실천할 수 있는 방법들을 단계적으로 알아보자. 움베르토 에코의 ‘장미의 이름’에 보면 ‘거인의 어깨 위에 선 난장이(Standing on the shoulders of giants)’라는 구절이 나온다. 오늘날 사는 사람들.......]]></description>
					<pubDate>Mon, 15 Apr 2013 03:14:45 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
