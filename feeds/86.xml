<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2019-05-11T17:53:01.367Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>트랜잭션 잠금</title>
    <link href="https://cheese10yun.github.io/transaction-lcok/"/>
    <id>https://cheese10yun.github.io/transaction-lcok/</id>
    <published>2019-05-11T17:57:00.000Z</published>
    <updated>2019-05-11T17:53:01.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 자료는 DDD <a href="http://www.yes24.com/Product/Goods/27750871?scode=029" rel="external nofollow noopener noreferrer" target="_blank">Start</a>를 보고 정리한 자료입니다. 정말 추천드리는 책입니다.</p></blockquote><p>한 주문 애그리거트에 대해 운영자는 배송 준비 상태로 변경할 때 사용자는 배송지 주소를 변경하면 어떻게 될까? 아래 그림은 운영자와 고객이 동시에 한 주문 애그리거트를 수정하는 과정을 보여준다. (배송 상태로 변경되면 더 이상 배송지 변경은 할 수 없다.)</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/draw/transaction-thread.png" alt=""></p><p>운영자 스레드와 고객 스레드는 같은 주문 애그리거트를 나타내는 다른 객체를 구하게 된다 (트랜잭션 마다 리포지토리라는 새로운 애그리거트를 생성한다.)</p><p>운영자 스레드와 고객 스레드는 개념적으로 동일한 애그리거트이지만 물리적으로 서로 다른 애그리거트 객체를 사용한다.</p><p>때문에 운영자 스레드가 주문 애그리거트 객체 배송 상태로 변경하더라도 고객 스레드가 사용하는 주문 애그리거트 객체에는 영향을 주지 않는다. 고객 스레드 입장에서 주문 애그리거트 객체는 아직 배송 상태 전이므로 배송지 정보를 변경할 수 있다.</p><p>이 상황에서 두 스레드는 각각 트랜잭션을 커밋할 떄 수정한 내용을 DBMS에 반영한다. 즉 배송 상태로 바뀌고 배송지 정보로 바뀌게 된다. 이 순서의 문제점은 운영자는 기존 배송지 정보를 이용해서 배송 상태로 변경했는데 그 사이 곡객은 배송지 정보를 변경했다는 점이다. 즉 애그리거트의 일관성이 깨지는 것이다.</p><p>이런 문제가 발생하지 않도록 하려면 다음 두 가지 중 하나를 해야한다.</p><ul><li>운영자 배송지 정보를 조회하고 상태를 변경하는 동안 고객이 애그리거트를 수정하지 못하게 막는다. (수정하지 못하는 것보다 조회까지 막아야 된다고 생각함)</li><li>운영자가 배송지 정보를 조회한 이후 고객이 정보를 변경하면 웅영자가 애그리거트를 다시 조회한 뒤 수정하도록 한다.</li></ul><p>이 두 가지는 애그리거트 자체의 트랜잭션과 관련이 있다. DBMS가 지원하는 트랜잭션과 함께 애그리거트를 위한 추가적인 트랜잭션 처리 기법이 필요하다. <strong>애그리거트에 대해 사용할 수 있는대표적인 트랜잭션 처리 방식에는 선점 잠금과 비선점 잠금의 두 가지 방식이 있다.</strong></p><h2><span id="isolation-repeatable_read-으로-해결-못하는-이유">Isolation REPEATABLE_READ 으로 해결 못하는 이유</span></h2><p>REPEATABLE_READ은 트랜잭션이 지속되는 동안 다른 트랜잭션이 해당 필드를 변경할 수 없는 격리 레벨이다. <strong>이것으로 위의 문제를 해결할 수 있지는 않다.</strong></p><p><img src="https://github.com/cheese10yun/TIL/raw/master/draw/transaction-thread.png" alt=""></p><ol><li>운영자 스레드가 주문 애그리거트를 구함 (배송 이전 상태)</li><li>고객 스레드가 주문 애그리거트를 구함 (배송 이전 상태) REPEATABLE_READ 속성이므로 select 트랜잭션이 진행중에 있더라도 select는 진행됨</li><li>운영자 스레드가 주문의 상태를 배송 상태로 변경</li><li>고객 스레드가 배송지를 변경</li><li>운영 스레드 트랜잭션 커밋</li><li>고객 스레드는 REPEATABLE_READ 격리 레벨임으로 트랜잭션 임으로 운영 스레드 트랜잭션 커밋 이후 커밋 됨</li></ol><p>운영자는 배송 상태로 변경하고, 고객은 배송지를 변경이 모두 데이터베이스에 반영된다는 것이다. <strong>2번 고객 스레드가 주문 애그리거트를 구하는것을 Lock 해야 이 문제를 해결 할 수 있다.</strong></p><h2><span id="선점-잠금">선점 잠금</span></h2><p>선점 잠금은 먼저 애그리거트를 구한 스레드가 애그리거트 사용이 끝날 때까지 다른 스레드가 해당 애그리거트를 수정하는 것을 막는 방식이다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/draw/transaction-thread2.png" alt=""></p><p>스레드1 선점 잠금방식으로 애그리거트를 구한 뒤 이에서 스레드2가 같은 애그리거트를 구하고 있는데, 이 경우 스레드2는 스레드1이 애그리거트에대한 잠금을 해제할 때 까지 블로킹된다.</p><p>스레드1이 애그리거트를 수정하고 트랜잭션을 커밋하면 잠금을 해제한다. 이 순간 대기하고 있던 스레드2가 애그리거트에 접근하게 된다. 스레드1이 트랜잭션을 커밋 뒤에 스레드2가 애그리거트를 구하게 되므로 스레드2는 스레드1이 수정한 애그리거트의 내용을 보게된다.</p><p>한 스레드가 애그리거트를 구하고 수정하는 동안 다른 스레드가 수정할 수 없음므로 동시에 애그리거트를 수정할 때 발생하는 데이터 충돌 문제를 해소할 수 있다.</p><h3><span id="선점-잠금-적용">선점 잠금 적용</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/draw/transaction-thread3.png" alt=""></p><ol><li>운영자 스레드가 먼저 선점 잠금 방식으로 주문 애그리거트를 구함</li><li>고객 스레드는 운영자 스레드가 잠금을 해제할 때까지 고객 스레드는 대기 상태</li><li>운영자 스레드가 배송 상태로 변경한 뒤에 트랜잭션을 커밋하면 잠금을 해제한다.</li><li>잠금이 해제된 시점에 고객 스레드가 구하는 주문 애그리거트는 운영자 스레드가 수정한 배송 상태의 주문 애그리거트이다. 배송 상태이므로 주문 애그리거트는 배송지 변경 시 에러를 발생하거 트랜잭션이 실피패한다.</li><li>고객은 <code>이미 배송이 시작되어 배송지를 변경할 수 없습니다.</code>와 같은 안내 문구를 받게 됨</li></ol><p>선점 감은은 보통 DBMS가 제공하는 행 단위 잠금을 사용해서 구현한다. 오라클을 비롯한 다수 DBMS가 for update와 같은 쿼리를 사용해서 특정 레코드에 한 사용자만 접근할 수 있는 잠금 장치를 제공한다.</p><p>JPA의 EntityManager는 LockModeType을 인자로 받는 <code>find()</code> 메서드를 제공하는데, <code>LockModeType.PESSIMISTIC_WRITE</code>를 값으로 전달하면 해당 엔티티와 매핑된 테이블을 이용해서 선점 잠금 방식을 적용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE)</div></pre></td></tr></table></figure><p>JPA 프로바이더와 DBMS에 따라 잠금 모드의 구현이 다른데, 하이버네티으의 경우 <code>PESSIMISTIC_WRITE</code>를 잠금 모드로 사용하면 <code>for update</code> 쿼리를 사용해서 선점 잠금을 구현한다.</p><h2><span id="선점-잠금과-교착상태">선점 잠금과 교착상태</span></h2><p>선점 잠금 기능을 사용할 떄는 잠금 순서에 따른 교착 상태가 발생하지 않도록 주의해야 한다. 예를 들어, 다음과 같은 순서로 두 스레드가 선점 잠금을 시도를 한다고 해보자</p><ol><li>스레드 1: A 애그리거트에 대한 선점 잠금 구함</li><li>스레드 2: B 애그리거트에 대한 선점 잠금 구함</li><li>스레드 1: B 애그리거트에 대한 선점 잠금 시도</li><li>스레드 2 : A 애그리거트에 대한 선점 잠금 시도</li></ol><p>이 두 스레드는 상대방 스레드가 먼저 선점한 잠금을 구할수 없어 더 이상 다음 단계를 진행하지 못하게 된다. <strong>즉 스레드 1과 스레드 2는 교착상태에 빠지게 된다.</strong></p><p>선점 잠그에 따른 교착 상태는 상대적으로 사용자 수가 많을 떄 발생할 가능성이 높고, 사용자 수가 많아지면 교착 상태에 빠지는 스레드가 더 빠르게 증가하게 된다. 더 많은 스레드가 교착 상태에 빠질수록 시스템은 점점 아무것도 할 수 없는 상황에 이르게 된다.</p><p>이런 문제가 발생하지 않도록 하려면 잠금을 구할 때 최대 대기 시간을 지정해야한다. JPA에서 선점 잠금을 시도할 떄 최대 대기 시간을 지정하려면 다음과 같이 힌트를 사용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">hints.put(<span class="string">"javax.persistence.lock.timeout"</span>, <span class="number">2000</span>);</div><div class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE, hints);</div></pre></td></tr></table></figure><p>JPA의 <code>javax.persistence.lock.timeout</code> 힌트는 잠금을 구하는 대기 시간을 밀리초 단위로 지정한다. 지정한 시간이내에 잠금을 구하지 못하면 익셉션을 발생 시킨다. 이 힌트를 사용할 떄 주의할 점은 DBMS에 따라 힌트가 적요되지 않는 다는 점이다. 이 힌트를 이용할 때에는 사용중인 DBMS가 관련 기능을 지원하는지 확인해야 한다.</p><h2><span id="비선점-잠금">비선점 잠금</span></h2><p>선점 잠금이 강력해 보이긴 하지만 서점 잠금으로 모든 트랜잭션 충돌 문제가 해결되는 것은 아니다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc.png" alt=""></p><ol><li>운영자는 배송을 위해 주문 정보를 조회한다.</li><li>고객이 배송지 변경을 위해 변경 폼을 요청한다. 시스템은 변경 폼을 제공한다.</li><li>고객이 새로운 배송지를 입력하고 폼을 저송해서 배송지를 변경한다.</li><li>운영자가 1번에서 조회한 주문 정보를 기준으로 배송지를 정하고 배송 상태 변경을 요청한다.</li></ol><p>여기서 문제는 운영자가 배송지 정보를 조회하고 배송 상태로 변경하는 사이에 고객이 배송지를 변경한다는 것이다. 운영자는 고객이 변경하기 전에 배송지 정보를 이용해서 배송 준비를 한 뒤에 배송 상태로 변경하게 된다.</p><p><strong>즉 배송 상태 변경 전에 배송지를 한 번 더 확인 하지 않으면 운영자는 다른 배송지로 물건을 발송하게 되고, 고객은 배송지를 변경했음에도 불구하고 엉뚱한 곳으로 주문한 물건을 받는 상황이 발생한다.</strong></p><p>이 문제는 선점 잠금 방식으로 해결 할 수 없는데, 이 때 필요한 것이 비선점 잠금이다. 비선점 잠금 방식은 잠금 을 해서 동시에 접근하는 것을 막는 대신 <strong>변경한 데이터를 실제 DBMS에서 반영하는 시점에 변경 가능 여부를 확인하는 방식이다.</strong></p><p>비선점 잠금을 구현하려면 애그리거트에 버전으로 사용할 숫자 타입의 프로퍼티를 추가해야한다. 애그리거트를 수정할 때마다 버전으로 사용할 프로피터 값이 1씩 증가하는데, 이때 다음과 같은 쿼리를 사용한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> aggrable <span class="keyword">SET</span> <span class="keyword">version</span> = <span class="keyword">version</span> +<span class="number">1</span>, colx = ?, coly =?</div><div class="line"><span class="keyword">WHERE</span> aggid =? <span class="keyword">and</span> <span class="keyword">version</span> = 현재 버전</div></pre></td></tr></table></figure><p>이 쿼리는 수정할 애그리거트와 매핑되는 테이블의 버전 값이 현재 애그리거트의 버전과 동일한 경우에만 데이터를 수정한다. 그리고 수정에 성공하면 버전 값을 1증가 시킨다. 따라서, <strong>다른 트랜잭션이 먼저 데이터를 수정해서 버전 값이 바뀌면 데이터 수정에 실패하게 된다.</strong></p><h3><span id="비선점-잠금을-이용한-트랜잭션-충돌-방지">비선점 잠금을 이용한 트랜잭션 충돌 방지</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/draw/transacion-thread4.png" alt=""></p><ol><li>스레드 1 애그리거트 조회</li><li>스레드 2 애그리거트 조회</li><li>스레드 1 애그리거트 수정 시도 (스레드 2 보다 먼저 시도한다), 수정에 성공하고 버전은 6이 된다.</li><li>스레드 2 애그리거트 수정 시도, 이미 애그리거트 버전이 6이므로 스레드2는 데이터 수정에 실패하게 된다.</li></ol><p>JPA는 버전을 이용한 비선점 잠금을 기능을 지원한다. 다음과 같이 버전으로 사용할 필드에 <code>@Version</code> 애노테이션을 붙이거 매핑되는 테이블 버전을 지정한 칼럼을 추가하기만 하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"purchase_order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Version</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JPA는 엔티티가 변경되어 UPDATE 쿼리를 실행할 때 <code>@Version</code>에 명시한 필드를 이용해서 비선점 잠금 쿼리를 실행한다. 즉 애그리거트 객체의 버전 10이면 UP-DATE 쿼리를 실행할 때 당므과 같은 쿼리를 사용해서 버전 일치하는 경우에만 데이터를 수정한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> purchase_order <span class="keyword">SET</span> ..., <span class="keyword">version</span> = <span class="keyword">version</span> + <span class="number">1</span></div><div class="line"><span class="keyword">where</span> <span class="built_in">number</span> ? <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">0</span>;</div></pre></td></tr></table></figure><p>응용 서비스 버전에 대해 알 필요가 없다. 리포티터리에 필요한 애그리거트를 구현하고 알맞은 기능을 실행하면 된다. 기능을 실행하는 과정에서 애그리거트의 데이터가 변경되면 JPA트랜잭션 종료 시점에 비선점 잠금을 위한 쿼리를 실행 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ChangeShppingService changeShippingService;</div><div class="line"></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/shpping"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeShipping</span><span class="params">(ChangeShippingsRequest changeReq)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            changeShppingService.changeShpping(changeReq);</div><div class="line">            <span class="keyword">return</span> <span class="string">"changeShppingSuccess"</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (OptimistickLockingFailureException ex)&#123;</div><div class="line">            <span class="comment">// 누군가 먼저 같은 주문 애그리거트를 수정 했음으로</span></div><div class="line">            <span class="comment">// 트랜잭션 충돌이 일어났다는 메시지를 보여준다.</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"changeShppingTxConflict"</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="비선점-트랜잭션-충돌-문제-해결-flow">비선점 트랜잭션 충돌 문제 해결 Flow</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 자료는 DDD &lt;a href=&quot;http://www.yes24.com/Product/Goods/27750871?scode=029&quot; rel=&quot;external nofollow noopener noreferrer&quot; targe
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://cheese10yun.github.io/tags/Transaction/"/>
    
      <category term="Lock" scheme="https://cheese10yun.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>Builder 기반으로 객체를 안전하게 생성하는 방법</title>
    <link href="https://cheese10yun.github.io/spring-builder-pattern/"/>
    <id>https://cheese10yun.github.io/spring-builder-pattern/</id>
    <published>2019-05-04T18:58:00.000Z</published>
    <updated>2019-05-04T18:53:01.219Z</updated>
    
    <content type="html"><![CDATA[<p><strong>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/ddd" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</strong></p><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/lombok" rel="external nofollow noopener noreferrer" target="_blank">실무에서 Lombok 사용법</a>에서 기본적인 Lombk 사용법과 Builder 사용법을 간단하게 정리 한 내용을 먼저 참고하면 좋습니다.</p><p>JPA를 이용하면 엔티티 객체들을 Builder 기반으로 생성하는 것이 흔한 패턴입니다. 이러한 경우 Builder의 문제점들과 이것을 더욱 안전하게 사용하는 방법에 대해서 이야기해보겠습니다.</p><h2><span id="builder로-안전하게-생성하자">Builder로 안전하게 생성하자</span></h2><p>JPA 엔티티 객체들에 Builder 어노테이션을 이용해서 엔티티 객체를 Builder를 이용하는 것이 흔한 패턴입니다. 이 패턴의 장단점을 알아보고 더욱 안전하게 객체를 생성하는 방법을 소개하겠습니다.</p><p>Builder 패턴을 사용하면 다음과 같은 장점이 있습니다.</p><ol><li>인자가 많을 경우 쉽고 안전하게 객체를 생성할 수 있습니다.</li><li>인자의 순서와 상관없이 객체를 생성할 수 있습니다.</li><li><strong>적절한 책임을 이름에 부여하여 가독성을 높일 수 있습니다.</strong></li></ol><p>단점은 Builder의 단점이라기보다는 사용하는 패턴의 단점입니다.</p><h3><span id="sample-code">Sample Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"bank_name"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String bankName;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"account_number"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String accountNumber;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"account_holder"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String accountHolder;</div><div class="line"></div><div class="line">  <span class="comment">// 불안전한 객채 생성 패턴</span></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String bankName, String accountNumber, String accountHolder)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bankName = bankName;</div><div class="line">    <span class="keyword">this</span>.accountNumber = accountNumber;</div><div class="line">    <span class="keyword">this</span>.accountHolder = accountHolder;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 안전한 객채 생성 패턴</span></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String bankName, String accountNumber, String accountHolder)</span> </span>&#123;</div><div class="line">    Assert.hasText(bankName, <span class="string">"bankName must not be empty"</span>);</div><div class="line">    Assert.hasText(accountNumber, <span class="string">"accountNumber must not be empty"</span>);</div><div class="line">    Assert.hasText(accountHolder, <span class="string">"accountHolder must not be empty"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.bankName = bankName;</div><div class="line">    <span class="keyword">this</span>.accountNumber = accountNumber;</div><div class="line">    <span class="keyword">this</span>.accountHolder = accountHolder;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>우선 데이터베이스의 칼럼이 <code>not null</code>인 경우에는 대부분의 엔티티의 멤버실의 값도 null이면 안됩니다. 그 뜻은 해당 객체를 생성할 경우에도 동일합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Account account = Account.builder().build(); <span class="comment">// 불안전한 객체 생성 패턴으로 생성했을 경우</span></div></pre></td></tr></table></figure><p>account 객체에는 모든 멤버 필드의 값이 null로 지정됩니다. 이것은 애초에 account 객체를 의도한 것처럼 생성되지 않은 경우입니다. account 객체로 추가적인 작업을 진행하면 NPE가 발생하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Account account = Account.builder().build(); <span class="comment">// 안전한 객체 생성 패턴으로 생성했을 경우</span></div></pre></td></tr></table></figure><p>안전한 객체 생성 패턴으로 생성했을 경우는 객체 생성이 <code>Assert</code>으로 객체 생성이 진행되지 않습니다. 필요한 값이 없는 상태에서 객체를 생성하면 이후 작업에서 예외가 발생하게 됩니다. 그보다 객체가 필요한 값이 없는 경우에는 적절하게 Exception 발생시켜 흐름을 종료하는 게 좋다고 생각합니다. 이것은 우리가 컨트롤러에서 유효성 검사를 하는 이유와 동일합니다.</p><p>객체가 필요한 값이 없음에도 불과하고 이후 로직들을 진행하게 되면 더 비싼 비용이 발생합니다. 이미 트랜잭션이 시작했다거나, 해당 작업에 관련된 알림이 나갔다거나 등등이 있습니다.</p><p><strong>Builder를 이용해서 객체를 생성하더라도 필수 값의 경우에는 반드시 그에 맞는 방어 코드를 작성하는 것이 좋다고 생각합니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_accountHolder_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">""</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_accountNumber_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">""</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_bankName_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">""</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Account_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account address = Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(address.getAccountHolder()).isEqualTo(<span class="string">"홍길동"</span>);</div><div class="line">    assertThat(address.getAccountNumber()).isEqualTo(<span class="string">"110-22345-22345"</span>);</div><div class="line">    assertThat(address.getBankName()).isEqualTo(<span class="string">"신한은행"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>너무 당연한 테스트 코드도 훗날 자신 또는 팀원에게 좋은 길잡이가 됩니다. 코드를 작성하면 반드시 테스트 코드를 작성하는 것이 좋습니다.</strong></p><p>주문이라는 객체는 반드시 제품이라는 객체가 1개 이상은 있어야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"orders"</span>)</div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">  <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">  <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"order"</span>)</div><div class="line">  <span class="keyword">private</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Address address, List&lt;Product&gt; products)</span> </span>&#123;</div><div class="line">    Assert.notNull(address, <span class="string">"address must not be null"</span>);</div><div class="line">    Assert.notNull(products, <span class="string">"products must not be null"</span>);</div><div class="line">    Assert.notEmpty(products, <span class="string">"products must not be empty"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.address = address;</div><div class="line">    <span class="keyword">this</span>.products = products;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 products 객체가 null 이거나 empty인 경우에는 Order 객체 생성을 못 하게 사전에 막아야 합니다. order 객체가 완전하지 않을 경우 추가적으로 발생하는 문제들도 많으며 테스트 코드 작성 시에도 어려움을 겪게 됩니다.</p><h2><span id="builder-이름으로-책임을-부여-하자">Builder 이름으로 책임을 부여 하자</span></h2><p>주문에 대한 환불이 있을 경우 환불에 대한 금액을 신용 카드 취소, 계좌 기반 환불이 있을 수 있습니다.</p><p>신용 카드 결제 취소일 경우에는 신용 카드 정보를 받아야 하고(실제 이런식으로 신용 카드 환불이 진행되지는 않습니다.), 계좌 정보를 입력받아야 하는 경우 하나의 Builder인 경우에는 필수 값 검증이 어렵습니다.</p><p>신용 카드 정보와, 계좌 정보가 같이 넘어오면 어떻게 할 것인가? 이런 문제부터 생각할 것들이 많습니다. 이런 경우 아래와 같이 Builder의 이름을 명확하게 해서 책임을 부여하는 것이 좋습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"refund"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refund</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> Account account;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> CreditCard creditCard;</div><div class="line"></div><div class="line">  <span class="meta">@OneToOne</span></div><div class="line">  <span class="meta">@JoinColumn</span>(name = <span class="string">"order_id"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> Order order;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="meta">@Builder</span>(builderClassName = <span class="string">"ByAccountBuilder"</span>, builderMethodName = <span class="string">"ByAccountBuilder"</span>) <span class="comment">// 계좌 번호 기반 환불, Builder 이름을 부여해서 그에 따른 책임 부여, 그에 따른 필수 인자값 명확</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Refund</span><span class="params">(Account account, Order order)</span> </span>&#123;</div><div class="line">    Assert.notNull(account, <span class="string">"account must not be null"</span>);</div><div class="line">    Assert.notNull(order, <span class="string">"order must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.order = order;</div><div class="line">    <span class="keyword">this</span>.account = account;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Builder</span>(builderClassName = <span class="string">"ByCreditBuilder"</span>, builderMethodName = <span class="string">"ByCreditBuilder"</span>)  <span class="comment">// 신용 카드 기반 환불, Builder 이름을 부여해서 그에 따른 책임 부여, 그에 따른 필수 인자값 명확</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Refund</span><span class="params">(CreditCard creditCard, Order order)</span> </span>&#123;</div><div class="line">    Assert.notNull(creditCard, <span class="string">"creditCard must not be null"</span>);</div><div class="line">    Assert.notNull(order, <span class="string">"order must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.order = order;</div><div class="line">    <span class="keyword">this</span>.creditCard = creditCard;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>신용카드 환불인 경우에는 신용카드 정보를 입력받게 하고, 계좌 환불인 경우에는 계좌 환불을 입력받게 합니다. <strong>빌더의 이름으로 책임을 명확하게 부여하고, 받아야 하는 인자도 명확해지게 됩니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefundTest</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ByAccountBuilder_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Refund refund = Refund.ByAccountBuilder() <span class="comment">// 빌더 이름으로 명확하게 그 의도를 드러 내고 있습니다.</span></div><div class="line">        .account(account)</div><div class="line">        .order(order)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(refund.getAccount()).isEqualTo(account);</div><div class="line">    assertThat(refund.getOrder()).isEqualTo(order);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ByCreditBuilder_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Refund refund = Refund.ByCreditBuilder() <span class="comment">// 빌더 이름으로 명확하게 그 의도를 드러 내고 있습니다.</span></div><div class="line">        .creditCard(creditCard)</div><div class="line">        .order(order)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(refund.getCreditCard()).isEqualTo(creditCard);</div><div class="line">    assertThat(refund.getOrder()).isEqualTo(order);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="결론">결론</span></h2><p>필수 값임에도 불과하고 Builder에서 충분히 검사를 하지 않으면 에러의 발생은 뒷단으로 넘어가게 됩니다. 최악의 경우에는 데이터베이스 insert 시 해당 값이 not null인 경우 데이터베이스에서 에러를 발생시키게 됩니다.<br>이렇게 되면 개발자에게 늦은 피드백을 주게 됩니다. 개발이 끝난 이후에 통합 테스트 구동 or 직접 스프링 구동해서 테스트 하는 방법은 에러에대한 피드백이 늦어지고 결국 생상성 저하로 이어진다고 생각합니다.</p><p><strong>가능하다면 POJO 기반으로 빠르게 코드상으로 피드백을 받는 것이 좋다고 생각하고 있습니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/ddd&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Builder" scheme="https://cheese10yun.github.io/tags/Builder/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Service 가이드</title>
    <link href="https://cheese10yun.github.io/spring-guide-service/"/>
    <id>https://cheese10yun.github.io/spring-guide-service/</id>
    <published>2019-04-08T16:10:00.000Z</published>
    <updated>2019-04-08T16:03:11.823Z</updated>
    
    <content type="html"><![CDATA[<p>도메인 레이어는 모든 레이어에서 사용됩니다. 이 때문에 자기 자신의 책임을 충분히 다하지 않으면 많은 영역에서 그 책임을 넘겨받게 됩니다. 이번에는 이 내용을 중심으로 포스팅을 진행하겠습니다.</p><h2><span id="서비스-레이어란">서비스 레이어란 ?</span></h2><p><img src="https://image.slidesharecdn.com/random-151127092631-lva1-app6892/95/-60-638.jpg?cb=1448755823" alt=""></p><blockquote><p>이미지 출저 <a href="https://www.slideshare.net/baejjae93/ss-55571345" rel="external nofollow noopener noreferrer" target="_blank">애플리케이션 아키텍처와 객체지향</a></p></blockquote><p>우리는 Member라는 객체로 회원가입(객체 생성), 프로필 수정(객체 수정) 모든 행위가 가능하지만 그것을 영속화 시켜야 하기 때문에 별도의 레이어가 필요하고 이것을 서비스 레이어라고 합니다. 서비스 레이어에서는 대표적으로 데이터베이스에 대한 트랜잭션을 관리합니다.</p><p>서비스 영역은 도메인의 핵심 비즈니스 코드를 담당하는 영역이 아니라 인프라스트럭처(데이터베이스) 영역과 도메인 영역을 연결해주는 매개체 역할이라고 생각합니다.</p><p><strong>다시 한번 강조하지만 Member 객체에 대한 제어는 Member 스스로 제어해야 합니다.</strong></p><h2><span id="서비스의-적절한-책임의-크기-부여하기">서비스의 적절한 책임의 크기 부여하기</span></h2><p>책임이란 것은 외부 객체의 요청에 대한 응답이라고 생각합니다. <strong>이러한 책임들이 모여 역할이 되고 역할은 대체 가능성을 의미합니다.</strong> 그렇기 때문에 대체가 가능할 정도의 적절한 크기를 가져야 합니다. 이 부분은 아래의 예제로 천천히 설명드리겠습니다.</p><h3><span id="행위-기반으로-네이밍-하기">행위 기반으로 네이밍 하기</span></h3><p>서비스의 책임의 크기를 잘 부여하는 방법 중에 가장 쉬운 방법이라고 생각합니다. 행위 기반으로 서비스를 만드는 것입니다.</p><p><code>MemberService</code>라는 네이밍은 많이 사용하지만 정말 좋지 않은 패턴이라고 생각합니다. 우선 해당 클래스의 책임이 분명하지 않아서 모든 로직들이 <code>MemberService</code>으로 모이게 될 것입니다. 그 결과 외부 객체에서는 <code>MemberSerivce</code> 객체를 의존하게 됩니다. findById 메서드 하나를 사용하고 싶어도 <code>MemberSerivce</code>를 주입받아야 합니다. <code>MemberSerivce</code> 구현도 본인이 모든 구현을 하려고 하니 메서드의 라인 수도 방대해집니다. 테스트 코드 작성하기도 더욱 어렵게 만들어집니다.</p><p>Member에 대한 조회 전용 서비스 객체인 <code>MemberFindSetvice</code>으로 네이밍을 하면 자연스럽게 객체의 책임이 부여됩니다. <strong>객체를 행위 기반으로 바라보고 행위 기반으로 네이밍을 주어 자연스럽게 책임을 부여하는 것이 좋습니다.</strong></p><h3><span id="역할은-대체-가능성을-의미">역할은 대체 가능성을 의미</span></h3><blockquote><p>책임이란 것은 외부 객체의 요청에 대한 응답이라고 생각합니다. <strong>이러한 책임들이 모여 역할이 되고 역할은 대체 가능성을 의미합니다.</strong></p></blockquote><p>위에서 언급한 말을 매우 과격하게 표현하면 아래와 같습니다.</p><blockquote><p>메서드(책임)란 것은 외부 객체의 호출에 대한 응답이고, 이러한 메서드(책임)들이 모여 클래스(역할) 클래스(역할)는 인터페이스(대체 가능성)을 의미합니다.</p></blockquote><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/service" rel="external nofollow noopener noreferrer" target="_blank">Service, ServiceImpl 구조에 대한 고찰</a>에 대해서 포스팅 한 내용을 다시 한번 설명드리겠습니다.</p><h4><span id="책임의-크기가-적절해야하는-이유">책임의 크기가 적절해야하는 이유</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findById</span><span class="params">(MemberId id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">updateName</span><span class="params">(MemberId id, Name name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 같은 Service, ServiceImpl 구조는 스프링 예제에서 많이 사용되는 예제입니다. 위 객체의 책임은 크게 member 조회, 수정입니다. 이 책임이 모여 클래스가 됩니다.(여기서는 MemberServiceImpl) 이 클래스(역할)는 대체 가능성을 의미합니다. <strong>그런데 저 인터페이스가 대체가 될까요?</strong></p><p>findById, findByEmail, changePassword, updateName의 세부 구현이 모두 다른 구현제가 있을까요? 일반적으로는 저 모든 메서드를 세부 구현이 다르게 대체하는 구현체는 2개 이상 갖기 힘듭니다. 이렇듯 객체의 책임이 너무 많으면 대체성을 갖지 못하고 SOLID 또 한 준수할 수가 없습니다.</p><p>책임에 대한 자세한 내용은 <a href="https://github.com/cheese10yun/blog-sample/tree/master/service" rel="external nofollow noopener noreferrer" target="_blank">Service, ServiceImpl 구조에 대한 고찰</a>, <a href="https://github.com/cheese10yun/spring-SOLID/blob/master/docs/SRP.md" rel="external nofollow noopener noreferrer" target="_blank">단일 책임의 원칙: Single Responsibility Principle</a><br>를 참조해주세요</p><p>물론 1개의 세부 구현체만 갖더라도 인프라스트럭처 영역 같은 경우에는 인터페이스로 바라보는 것이 좋습니다. 그 외에도 다양한 이유로 인터페이스로 바라보게 하는 것이 클래래스 간의 강결합을 줄일 수 있는 효과가 있습니다. 제가 말하고 싶은 것은 그렇게 인터페이스로 두더라도 <strong>올바른 책임의 크기에 의해서(대체 가능한 범위) 인터페이스를 나눠야 한다는 것입니다.</strong></p><h3><span id="서비스의-적절한-크기는-대체-가능성을-염두-하는-것">서비스의 적절한 크기는 대체 가능성을 염두 하는 것</span></h3><p>우선 행위 기반으로 서비스의 네이밍을 하면 자연스럽게 해당 행위에 대해서 책임이 할당됩니다. 이렇게 행위 기반으로 책임을 할당하면 자연스럽게 대체 가능성을 갖게 될 수 있습니다.</p><p>물론 이것만으로 올바르게 객체지향 설계를 할 수 있는 것은 아니지만 최소한의 객체지향 프로그래밍을 할 수 있는 작은 시발점이 될 수 있다고 생각합니다.</p><h2><span id="signup-sample-code">SignUp Sample Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferralCode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"referral_code"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ReferralCode</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReferralCode <span class="title">of</span><span class="params">(<span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferralCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReferralCode <span class="title">generateCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferralCode(RandomString.make(<span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpService</span> </span>&#123; <span class="comment">// (1)</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">doSignUp</span><span class="params">(<span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (memberRepository.existsByEmail(dto.getEmail())) &#123; <span class="comment">//(2)</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmailDuplicateException(dto.getEmail());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ReferralCode referralCode = generateUniqueReferralCode();</div><div class="line">        <span class="keyword">return</span> memberRepository.save(dto.toEntity(referralCode));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ReferralCode <span class="title">generateUniqueReferralCode</span><span class="params">()</span> </span>&#123; <span class="comment">//(3)</span></div><div class="line">        ReferralCode referralCode;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            referralCode = ReferralCode.generateCode(); <span class="comment">//(4)</span></div><div class="line">        &#125; <span class="keyword">while</span> (memberRepository.existsByReferralCode(referralCode)); <span class="comment">// (5)</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> referralCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>MemberSignUpService 네이밍을 통해서 행위 기반의 책임을 부여</li><li>Email의 존재 여부는 데이터베이스에 있음으로 존재 여부는 memberRepository를 사용</li><li>유니크한 referralCode를 생성을 위한 메서드</li><li><strong>ReferralCode에 대한 생성은 ReferralCode 객체가 관리</strong></li><li>해당 코드가 존재하는지는 데이터베이스에 있음으로 존재 여부는 memberRepository를 사용</li></ol><p>ReferralCode에 대한 생성 비즈니스 로직은 ReferralCode 객체가 스스로 제어하고 있습니다. 이것이 데이터베이스에 중복 여부 검사를 서비스 레이어에서 진행합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;도메인 레이어는 모든 레이어에서 사용됩니다. 이 때문에 자기 자신의 책임을 충분히 다하지 않으면 많은 영역에서 그 책임을 넘겨받게 됩니다. 이번에는 이 내용을 중심으로 포스팅을 진행하겠습니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;서비스-레이어란&quot;&gt;서
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Service" scheme="https://cheese10yun.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Spring Custom Validate 어노테이션 만들기</title>
    <link href="https://cheese10yun.github.io/spring-custom-valdate-annotation/"/>
    <id>https://cheese10yun.github.io/spring-custom-valdate-annotation/</id>
    <published>2019-03-19T16:40:00.000Z</published>
    <updated>2019-03-21T15:30:07.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/custom-validation" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>스프링은 컨트롤러에서 클라이언트에서 넘겨받은 값에 대한 검증을 JSR-303 기반으로 쉽고 강력하게 할 수 있습니다. 또 한 커스텀 한 어 로테이션을 확장도 쉽게 구현할 수 있습니다.</p><p>아래에서 작성하는 어 로테이션은 해당 이메일이 유니크한지 검증을 하고 유니크하지 않은 이메일일 경우 Bad Request를 응답하는 어노테이션 입니다.</p><h2><span id="어노테이션-정의">어노테이션 정의</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Constraint</span>(validatedBy = EmailDuplicationValidator.class)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EmailUnique &#123;</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "Email is Duplication"</span>;</div><div class="line"></div><div class="line">  Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">  Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="validator-로직-작성">Validator 로직 작성</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailDuplicationValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">EmailUnique</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(EmailUnique emailUnique)</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String email, ConstraintValidatorContext cxt)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> isExistEmail = memberRepository.existsByEmail(email);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isExistEmail) &#123;</div><div class="line">      cxt.disableDefaultConstraintViolation();</div><div class="line">      cxt.buildConstraintViolationWithTemplate(</div><div class="line">          MessageFormat.format(<span class="string">"Email &#123;0&#125; already exists!"</span>, email))</div><div class="line">          .addConstraintViolation();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> !isExistEmail;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>넘겨 받은 email이 존재하는지 조회하고 중복되느 값이면 예외 메시지를 추가하고 <code>isValid(...)</code> 메서드에서 false를 리턴합니다.</p><h2><span id="test">Test</span></h2><h3><span id="api-code">API Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpRequest</span> </span>&#123;</div><div class="line">    <span class="meta">@EmailUnique</span> <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> memberRepository.save(Member.builder()</div><div class="line">        .email(dto.getEmail())</div><div class="line">        .build());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> signUp_test_이메일이_중복된_경우() <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">final</span> SignUpRequest dto = <span class="keyword">new</span> SignUpRequest(<span class="string">"yun@test.com"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">    <span class="comment">//then</span></div><div class="line">    resultActions</div><div class="line">        .andExpect(status().isBadRequest());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> ResultActions <span class="title">requestSignUp</span><span class="params">(SignUpRequest dto)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">return</span> mockMvc.perform(post(<span class="string">"/members"</span>)</div><div class="line">        .contentType(MediaType.APPLICATION_JSON_UTF8)</div><div class="line">        .content(objectMapper.writeValueAsString(dto)))</div><div class="line">        .andDo(print());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-03-19T17:11:26.919+0000"</span>,</div><div class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">    <span class="attr">"errors"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"codes"</span>: [</div><div class="line">                <span class="string">"EmailUnique.signUpRequest.email"</span>,</div><div class="line">                <span class="string">"EmailUnique.email"</span>,</div><div class="line">                <span class="string">"EmailUnique.java.lang.String"</span>,</div><div class="line">                <span class="string">"EmailUnique"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"arguments"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"codes"</span>: [</div><div class="line">                        <span class="string">"signUpRequest.email"</span>,</div><div class="line">                        <span class="string">"email"</span></div><div class="line">                    ],</div><div class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"email"</span>,</div><div class="line">                    <span class="attr">"code"</span>: <span class="string">"email"</span></div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"Email yun@test.com already exists!"</span>,</div><div class="line">            <span class="attr">"objectName"</span>: <span class="string">"signUpRequest"</span>,</div><div class="line">            <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">            <span class="attr">"rejectedValue"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"code"</span>: <span class="string">"EmailUnique"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Validation failed for object='signUpRequest'. Error count: 1"</span>,</div><div class="line">    <span class="attr">"path"</span>: <span class="string">"/members"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>테스트 코드를 실행해보면 EmailDuplicationValidator 로직이 정상 동작하는지 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/custom-validation&quot; rel=&quot;external nofollow noopener no
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Validate" scheme="https://cheese10yun.github.io/tags/Validate/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - 외부 API 가이드</title>
    <link href="https://cheese10yun.github.io/spring-guide-api-call/"/>
    <id>https://cheese10yun.github.io/spring-guide-api-call/</id>
    <published>2019-03-19T16:00:00.000Z</published>
    <updated>2019-03-19T17:45:22.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>이번 주제는 외부 API 호출 가이드를 진행하겠습니다. 본 포스팅에서는 RestTemplate 기반으로 설명하고 있지만 RestTemplate에 대한 사용법이 초점은 아닙니다. Request, Response에 대한 로킹, Interceptors를 통한 추가 작업, errorHandler을 통한 각 Vendor마다 예외 처리 전략을 살펴보겠습니다.</p><h2><span id="vendor-마다-다르게-bean-등록">Vendor 마다 다르게 Bean 등록</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">localTestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> restTemplateBuilder.rootUri(<span class="string">"http://localhost:8899"</span>)</div><div class="line">    .additionalInterceptors(<span class="keyword">new</span> RestTemplateClientHttpRequestInterceptor())</div><div class="line">    .errorHandler(<span class="keyword">new</span> RestTemplateErrorHandler())</div><div class="line">    .setConnectTimeout(Duration.ofMinutes(<span class="number">3</span>))</div><div class="line">    .build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">xxxPaymentTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> restTemplateBuilder.rootUri(<span class="string">"http://xxxx"</span>)</div><div class="line">    .additionalInterceptors(<span class="keyword">new</span> RestTemplateClientHttpRequestInterceptor())</div><div class="line">    .errorHandler(<span class="keyword">new</span> RestTemplateErrorHandler())</div><div class="line">    .setConnectTimeout(Duration.ofMinutes(<span class="number">3</span>))</div><div class="line">    .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>우선 RestTemplate를 외부 API 특성에 맞는 Bean을 생성합니다. 여기서 중요한 점은 각 API Vendor사 별로 각각 Bean으로 관리하는 것입니다.</p><p>Vendor사 별로 다르게 Bean을 적용하는 이유</p><ul><li>connection timeout 설정이 각기 다릅니다.</li><li>로깅을 각기 다르게 설정 할 수 있습니다.</li><li>예외 처리가 각기 다릅니다.</li><li>API에 대한 권한 인증이 각기 다릅니다.</li></ul><h2><span id="logging">Logging</span></h2><p>restTemplateBuilder의 <code>additionalInterceptors()</code> 메서드를 이용하면 로킹을 쉽게 구현할 수 있고 특정 Vendor의 Bean에는 더 구체적인 로킹, 그 이외의 작업을 Interceptors을 편리하게 등록할 수 있습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateClientHttpRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@NonNull</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(@NonNull <span class="keyword">final</span> HttpRequest request,</span></span></div><div class="line"><span class="function"><span class="params">      @NonNull <span class="keyword">final</span> <span class="keyword">byte</span>[] body, <span class="keyword">final</span> @NonNull ClientHttpRequestExecution execution)</span></span></div><div class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> ClientHttpResponse response = execution.execute(request, body);</div><div class="line"></div><div class="line">    loggingResponse(response);</div><div class="line">    loggingRequest(request, body);</div><div class="line">    <span class="keyword">return</span> execution.execute(request, body);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Request, Response의 Logging을 저장하는 Interceptor 코드입니다. 결제와 같은 중요한 API 호출은 모든 요청과 응답을 모두 로킹 하는 것이 바람직합니다.</p><p>상대적으로 덜 중요한 API 호출 같은 경우에는 Interceptor 등록하지 않아도 됩니다. 이처럼 Vendor 사마다 Bean으로 지정해서 관리하는 것이 효율적입니다.</p><h3><span id="api-call">API Call</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApi</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate localTestTemplate;</div><div class="line">  </div><div class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/local-sign-up"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">test</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> ResponseEntity&lt;Member&gt; responseEntity = localTestTemplate</div><div class="line">        .postForEntity(<span class="string">"/members"</span>, dto, Member.class);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Member member = responseEntity.getBody();</div><div class="line">    <span class="keyword">return</span> member;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위에서 등록한 localTestTemplate Bean으로 회원 가입 API을 호출해보겠습니다.<br><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/api-req-res.png" alt=""></p><p>Interceptor를 통해서 요청했던 Request 정보와 응답받은 Response 정보가 모두 정상적으로 로그 되는 것을 확인할 수 있습니다.</p><h2><span id="예외-처리">예외 처리</span></h2><p>외부 API는 Vendor마다 각기 다르기 때문에 통일성 있게 예외 처리를 진행하기 어렵습니다. 아래는 터기 하기 애마 한 Rsponse입니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"result"</span>: &#123;</div><div class="line">      ....</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Resttemplate는 우선 Http Status Code로 1차적으로 API 이상 유무를 검사하게 됩니다. 2xxx 이 외의 코드가 넘어오게 되면 Resttemplate 예외를 발생시킵니다.</p><p>그런데 문제는 2xx http status code를 응답받고 위 JSON 같이 success에 false를 주는 API들입니다. 그렇다면 API 호출마다 아래와 같은 코드로 확인해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">test</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span></span>&#123;</div><div class="line">  <span class="keyword">final</span> ResponseEntity&lt;Member&gt; responseEntity = localTestTemplate</div><div class="line">      .postForEntity(<span class="string">"/members"</span>, dto, Member.class);</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(responseEntity.getBody().isSuccess()&#123;</div><div class="line">    <span class="comment">// 성공...</span></div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 실패...</span></div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>모든 API 호출 시에 위와 같은 if else 코드가 있다고 생각하면 끔찍합니다. 이처럼 Vendor마다 다른 예외 처리를 Interceptor처럼 등록해서 Vendor에 알맞은 errorHandler를 지정할 수 있습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateErrorHandler</span> <span class="keyword">implements</span> <span class="title">ResponseErrorHandler</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(@NonNull <span class="keyword">final</span> ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> HttpStatus statusCode = response.getStatusCode();</div><div class="line"><span class="comment">//    response.getBody() 넘겨 받은 body 값으로 적절한 예외 상태 확인 이후 boolean return</span></div><div class="line">    <span class="keyword">return</span> !statusCode.is2xxSuccessful();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(@NonNull <span class="keyword">final</span> ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="comment">//    hasError에서 true를 return하면 해당 메서드 실행.</span></div><div class="line"><span class="comment">//    상황에 알맞는 Error handling 로직 작성....</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>Bean을 등록할 때 ResponseErrorHandler 객체를 추가할 수 있습니다. Response 객체에 <code>&quot;success&quot;: false</code>를 <code>hasError()</code> 메서드에서 확인하고, false가 return 되면 <code>handleError()</code>에서 추가적인 에러 핸들링 작업을 이어 나갈 수 있습니다. 이렇게 ResponseErrorHandler 등록을 하면 위처럼 반본 적인 if else 문을 작성하지 않아도 됩니다.</p><p><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/api-error.png" alt=""></p><p>위 그림은 에러 발생 시 로킹을 남기는 ResponseErrorHandler를 등록 이후 출력된 그림입니다.</p><p>개인적인 의견이지만 2xx 관련된 Reponse에 <code>success</code> 같은 키값을 내려주지 않는 것이 좋다고 생각합니다. 2xx status code를 응답 해놓고 다시 <code>success</code> false를 주는 것이 논리적으로 이해하기 어렵습니다. 특히 boolean 타입이 아닌 문자열로 내려주는 경우 무슨 문자열이 성공이며, 실패인지 알기가 더 어렵습니다.</p><h2><span id="마무리">마무리</span></h2><p>본 예제에서는 RestTemplate를 기반으로 설명드리긴 했지만 각 Vendor마다 다르고 그것은 추상화하기 어렵기 때문에 별도의 Bean으로 등록하고 특정 Vendor에 특화된 로킹 예외 처리 등 다양한 후속 처리를 하는 것이 바람직하다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Domain</title>
    <link href="https://cheese10yun.github.io/spring-guide-domain/"/>
    <id>https://cheese10yun.github.io/spring-guide-domain/</id>
    <published>2019-02-24T16:40:00.000Z</published>
    <updated>2019-05-05T02:42:40.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>도메인 객체는 우리가 해결하고자 하는 핵심 비즈니스 로직이 반영되는 곳입니다. 특히 도메인 객체에서 자기 자신의 책임을 충분히 다하지 않으면 그 로직들은 자연스럽게 Service 영역 및 외부 영역에서 해당 책임 넘겨받아 구현하게 됩니다. 본인의 책임을 다하는 도메인 객체를 만들고 다른 레이어와 어떻게 메시지를 주고받는지 포스팅을 진행하겠습니다.</p><h2><span id="member-클래스">Member 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"member"</span>)</div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@EqualsAndHashCode</span>(of = &#123;<span class="string">"id"</span>&#125;)</div><div class="line"><span class="meta">@ToString</span>(of = &#123;<span class="string">"email"</span>, <span class="string">"name"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverride</span>(name = <span class="string">"value"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>, updatable = <span class="keyword">false</span>, length = <span class="number">50</span>))</div><div class="line">    <span class="keyword">private</span> Email email;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverride</span>(name = <span class="string">"value"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"referral_code"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>, updatable = <span class="keyword">false</span>, length = <span class="number">50</span>))</div><div class="line">    <span class="keyword">private</span> ReferralCode referralCode;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverrides</span>(&#123;</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"first"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, nullable = <span class="keyword">false</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"middle"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"last"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, nullable = <span class="keyword">false</span>))</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">private</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@CreationTimestamp</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_at"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime createAt;</div><div class="line"></div><div class="line">    <span class="meta">@UpdateTimestamp</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_at"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime updateAt;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(Email email, ReferralCode referralCode, Name name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        <span class="keyword">this</span>.referralCode = referralCode;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProfile</span><span class="params">(<span class="keyword">final</span> Name name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="lombok-잘쓰기">Lombok 잘쓰기</span></h2><blockquote><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/lombok" rel="external nofollow noopener noreferrer" target="_blank">실무에서 Lombok 사용법</a>에 자세한 설명이 있습니다.</p></blockquote><h2><span id="실무에서-lombok-사용법-요약">실무에서 Lombok 사용법 요약</span></h2><ul><li><code>@NoArgsConstructor(access = AccessLevel.PROTECTED)</code> JPA에서는 프록시 객체가 필요하므로 기본 생성자 하나가 반드시 있어야 합니다. 이때 접근지시자는 <code>protected</code>면 됩니다. (낮은 접근지시자를 사용)</li><li><code>@Data</code>는 사용하지 말자, 너무 많은 것들을 해준다.</li><li><code>@Setter</code>는 사용하지 말자, 객체는 변경 포인트를 남발하지 말자.</li><li><code>@ToString</code> 무한 참조가 생길 수 있다. 조심하자. (개인적으로 <code>@ToString(of = {&quot;&quot;)</code> 권장)</li><li>클래스 상단의 <code>@Builder</code> X, 생성자 위에 <code>@Builder</code> OK</li></ul><p>Lombok이 자동으로 해주는 것들을 남용하다 보면 코드의 안전성이 낮아집니다. 특히 도메인 엔티티는 모든 레이어에서 사용되는 객체이니 특별히 신경을 더 많이 써야 합니다. <strong>이 부분은 모든 객체에 해당되는 부분입니다.</strong></p><h2><span id="jpa-어노테이션">JPA 어노테이션</span></h2><ul><li><code>@Table(name = &quot;member&quot;)</code> : 테이블 네임은 반드시 명시합니다. 명시하지 않으면 기본적으로 클래스 네임을 참조하기 때문에 클래스 네임 변경 시 영향을 받게 됩니다.</li><li><code>@Column</code> : 컬럼 네임도 클래스 네임과 마찬가지로 반드시 지정합니다.</li><li><code>nullable</code>, <code>unique</code>, <code>updatable</code> 등의 기능을 적극 활용합니다. 이메일일 경우 <code>nullable</code>, <code>unique</code> 같은 속성을 반드시 추가합니다.</li><li><code>@CreationTimestamp</code>, <code>@UpdateTimestamp</code> 어노테이션을 이용하여 생성, 수정 시간을 쉽게 설정할 수 있습니다.</li></ul><h2><span id="embedded-적극-활용하기">Embedded 적극 활용하기</span></h2><p><code>Embedded</code> 어노테이션을 이용하여 도메인 객체의 책임을 나눌 수 있습니다. <strong>앞서 언급했지만, 객체가 자기 자신의 책임을 다하지 않으면 그 책임은 자연스럽게 다른 객체에게 넘어가게 됩니다.</strong></p><p><code>Name</code>, <code>Address</code> 객체들이 대표적인 <code>Embedded</code> 대상이 되는 객체들입니다. <code>Member</code> 객체에서 <code>Embedded</code>으로 해당 객체를 가지고 있지 않았다면 다음과 같이 작성됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middleName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"county"</span>)</div><div class="line">    <span class="keyword">private</span> String county;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"state"</span>)</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"zip_code"</span>)</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>전체 이름, 전체 주소를 가져오기 위해서는 Member 객체에서 기능을 구현해야 합니다. 즉 Member의 책임이 늘어나는 것입니다. 그뿐만이 아닙니다. <code>Name</code>, <code>Address</code>는 많은 도메인 객체에서 사용되는 객체이므로 중복 코드의 증가됩니다. 아래 코드는 <code>Embedded</code>을 활용한 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String first;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String last;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"county"</span>)</div><div class="line">    <span class="keyword">private</span> String county;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"state"</span>)</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"zip_code"</span>)</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line">    <span class="meta">@Embedded</span> <span class="keyword">private</span> Name name;</div><div class="line">    <span class="meta">@Embedded</span> <span class="keyword">private</span> Address address;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Name</code>, <code>Address</code> 객체에서 본인의 책임을 충분히 해주고 있다면 <code>Member</code> 객체도 그 부분에 대해서는 책임이 줄어들게 됩니다.</p><p>만약 주문이라는 객체가 있다면 <code>Name</code>, <code>Address</code> 객체를 그대로 사용하면 됩니다. <code>Embedded</code>의 장점을 정리하면 아래와 같습니다.</p><ol><li>데이터 응집력 증가</li><li>중복 코드 방지</li><li>책임의 분산</li><li>테스트 코드 작성의 용이함</li></ol><h2><span id="rich-obejct">Rich Obejct</span></h2><p>저는 이 부분이 객체지향에서 가장 기본적이며 핵심적인 것이라고 생각합니다. JPA도 객체지향 프로그래밍을 돕는(패러다임 불일치를 해결해서) 도구라고 생각합니다.</p><p><strong>객체지향에서 중요한 것들이 많겠지만 그중에 하나가 객체 본인의 책임을 다하는 것입니다. 여러번 반복해서 언급하지만, 객체가 자기 자신의 책임을 다하지 않으면 그 책임은 다른 객체에게 넘어가게 됩니다.</strong></p><p>도메인 객체들에 기본적인 getter, setter 외에는 메서드를 작성하지 않는 경우가 있습니다. 이렇게 되면 객체 본인의 책임을 다하지 않으니 이런 책임들이 다른 객체에서 이루어지게 됩니다.</p><p>다음은 쿠폰 도메인 객체 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> CouponCode code;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"used"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> used;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"discount"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> discount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"expiration_date"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDate expirationDate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> LocalDate.now().isAfter(expirationDate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        verifyExpiration();</div><div class="line">        verifyUsed();</div><div class="line">        <span class="keyword">this</span>.used = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyUsed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (used) <span class="keyword">throw</span> <span class="keyword">new</span> CouponAlreadyUseException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (LocalDate.now().isAfter(getExpirationDate())) <span class="keyword">throw</span> <span class="keyword">new</span> CouponExpireException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>쿠폰에 만료 여부, 쿠폰이 사용 가능 여부, 쿠폰의 사용 등의 메서드는 어느 객체에서 제공해야 할까요? 당연히도 쿠폰 객체 자신입니다.</p><blockquote><p>출처 : 객체지향의 사실과 오해 (정말 정말 추천드리고 싶은 도서입니다.)</p><p>객체는 충분히 '협력적’이어야 한다. 객체는 다른 객체의 요청에 충실히 귀 기울이고 다른 객체에게 적극적으로 도움을 요청할 정도로 열린 마음을 지녀야 한다. 객체는 다른 객체의 명령에 복종하는 것이 아니라 요청에 응답할 뿐이다. 어떤 방식으로 응답할지는 객체 스스로 판단하고 결장한다. 심지어 요청에 응할지 여부도 객체 스스로 결정할 수 있다.</p></blockquote><p>단순하게 getter, settet 메서드만 제공한다면 이는 협력적인 관계가 아닙니다. 그저 복종하는 관계에 지나지 않습니다. 또 요청에 응답할지 자체도 객체 스스로가 결절할 수 있게 객체의 자율성을 보장해야 합니다. <code>use()</code> 메서드 요청이 오더라도 쿠폰 객체는 해당 요청이 알맞지 않다고 판단하면 그 요청을 무시하고 예외를 발생시킵니다. 이렇듯 객체의 자율성이 있어야 합니다.</p><p>setter를 사용하게 되면 해당 객체는 복종하는(수동적인) 관계를 갖게 됩니다.(순수하게 값을 바인딩 하는 코드만 있는 setter를 의미) <code>setUse(true)</code> 메서드는 그저 used 필드를 true 변경하는 외부 객체에 복종하는 메서드 그입니다. 쿠폰 객체 스스로가 자율성을 갖고 해당 메시지에 응답을 할지의 여부도 판단해야 외부 객체와 능동적인 관계를 갖게 됩니다.</p><p>또한 복종하는 관계에서는 쿠폰 사용 로직을 만들기 위해서 내가 객체의 세부적인 사항을 다 알고 있어야 합니다. 쿠폰 만료일, 만료 여부, 기타 등등 수많은 세부사항을 다 알고 검사를 하고 나서 비로소 <code>use()</code> 메서드를 호출하게 됩니다. 이것은 <strong>본인의 책임을 다하고 있지 않아 외부 객체에게 해당 책임이 넘어가는 경우입니다.</strong></p><p>지금까지 설명드린 대부분의 경우는 도메인 객체에 국학 되지 않습니다. 모든 객체에 적용되는 설명입니다. 도메인 객체는 모든 레이어에서 사용하는 아주 주요한 객체이므로 여기서부터 올바른 책임을 제공해 주고 있지 않으면 모든 곳에서 힘들어지기 때문에 도메인 객체 가이드에 작성했습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Domain" scheme="https://cheese10yun.github.io/tags/Domain/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 특정 Import 제외 하기</title>
    <link href="https://cheese10yun.github.io/intellij-exclude/"/>
    <id>https://cheese10yun.github.io/intellij-exclude/</id>
    <published>2019-02-23T10:10:00.000Z</published>
    <updated>2019-02-23T10:00:00.900Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="특정-import-제외하기">특정 Import 제외하기</span></h1><p>인텔리 제이에서는 자동 <code>Import</code>설정을 지원해주고 있습니다. <code>Import</code> 대상이 여러 개 일 경우에는 개발자가 직접 선택하아합니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-setting.png" alt=""></p><p>위 그림처럼 있을 경우 <code>javax.transaction</code>를 <code>Import</code>할 수도 있습니다. 한번 전체 검색으로 <code>javax.transaction</code>을 찾아보는 것도 좋을 거 같습니다.</p><p>이런 경우에 특정 <code>Import</code>를 제외할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-exclude.png" alt=""></p><ol><li>Auto Import 탭으로 이동</li><li><code>+</code> 버튼 클릭해서 사용하지 않을 Import 추가</li><li>제외 대상 추가</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import javax.transaction.Transactional; // 제거 대상 이라면 import, ;를 제거하고 추가한다</div><div class="line"></div><div class="line">javax.transaction.Transactional</div></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-result.png" alt=""></p><p>자동완성 시 <code>javax.transaction.Transactional</code> 제외가 된 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;특정-import-제외하기&quot;&gt;특정 Import 제외하기&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;인텔리 제이에서는 자동 &lt;code&gt;Import&lt;/code&gt;설정을 지원해주고 있습니다. &lt;code&gt;Import&lt;/code&gt; 대상이 여러 개 일 경
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
      <category term="Git" scheme="https://cheese10yun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Exception 전략</title>
    <link href="https://cheese10yun.github.io/spring-guide-exception/"/>
    <id>https://cheese10yun.github.io/spring-guide-exception/</id>
    <published>2019-02-20T17:20:00.000Z</published>
    <updated>2019-02-25T13:43:13.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h1><span id="exception-guide">Exception Guide</span></h1><p>스프링은 예외처리를 위해 다양하고 막강한 어노테이션을 제공하고 있습니다. 일관성 있는 코드 스타일을 유지하면서 Exception을 처리하는 방법에 대해서 소개하겠습니다.</p><h1><span id="통일된-error-response-객체">통일된 Error Response 객체</span></h1><p>Error Response 객체는 항상 동일한 Error Response를 가져야 합니다. 그렇지 않으면 클라이언트에서 예외 처리를 항상 동일한 로직으로 처리하기 어렵습니다. Error Response 객체를 유연하게 처리하기 위해서 간혹 <code>Map&lt;Key, Value&gt;</code> 형식으로 처리하는데 이는 좋지 않다고 생각합니다. 우선 Map 이라는 친구는 런타입시에 정확한 형태를 갖추기 때문에 객체를 처리하는 개발자들도 정확히 무슨 키에 무슨 데이터가 있는지 확인하기 어렵습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">    log.error(<span class="string">"handleMethodArgumentNotValidException"</span>, e);</div><div class="line">    <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제 코드처럼 리턴 타입이 <code>ResponseEntity&lt;ErrorResponse&gt;</code> 으로 무슨 데이터가 어떻게 있는지 명확하게 추론하기 쉽도록 구성하는 게 바람직합니다.</p><h2><span id="error-response-json">Error Response JSON</span></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">" Invalid Input Value"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  // "errors":[], 비어있을 경우 null 이 아닌 빈 배열을 응답한다.</div><div class="line">  "errors": [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"name.last"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"must not be empty"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"name.first"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"must not be empty"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "code": "C001"</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ErrorResponse 객체의 JSON 입니다.</p><ul><li>message : 에러에 대한 message를 작성합니다.</li><li>status : http status code를 작성합니다. header 정보에도 포함된 정보이니 굳이 추가하지 않아도 됩니다.</li><li>errors : 요청 값에 대한 <code>field</code>, <code>value</code>, <code>reason</code> 작성합니다. 일반적으로 <code>@Valid</code> 어노테이션으로 <code>JSR 303: Bean Validation</code>에 대한 검증을 진행 합니다.<ul><li>만약 errors에 바인인된 결과가 없을 경우 null이 아니라 빈 배열 <code>[]</code>을 응답해줍니다. null 객체는 절대 리턴하지 않습니다. null이 의미하는 것이 애매합니다.</li></ul></li><li>code : 에러에 할당되는 유니크한 코드값입니다.</li></ul><h2><span id="error-response-객체">Error Response 객체</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">private</span> List&lt;FieldError&gt; errors;</div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldError</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String field;</div><div class="line">        <span class="keyword">private</span> String value;</div><div class="line">        <span class="keyword">private</span> String reason;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ErrorResponse 객체 입니다. POJO 객체로 관리하면 <code>errorResponse.getXXX();</code> 이렇게 명확하게 객체에 있는 값을 가져올 수 있습니다. 그 밖에 특정 Exception에 대해서 ErrorResponse 객체를 어떻게 만들 것인가에 대한 책임을 명확하게 갖는 구조로 설계할 수 있습니다. 세부적인 것은 코드를 확인해주세요.</p><h1><span id="controlleradvice로-모든-예외를-핸들링">@ControllerAdvice로 모든 예외를 핸들링</span></h1><p><code>@ControllerAdvice</code> 어노테이션으로 모든 예외를 한 곳에서 처리할 수 있습니다. 해당 코드의 세부적인 것은 중요하지 않으며 가장 기본적이며 필수적으로 처리하는 코드입니다. 코드에 대한 이해보다 아래의 설명을 참고하는 게 좋습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  javax.validation.Valid or <span class="doctag">@Validated</span> 으로 binding error 발생시 발생한다.</span></div><div class="line"><span class="comment">     *  HttpMessageConverter 에서 등록한 HttpMessageConverter binding 못할경우 발생</span></div><div class="line"><span class="comment">     *  주로 <span class="doctag">@RequestBody</span>, <span class="doctag">@RequestPart</span> 어노테이션에서 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleMethodArgumentNotValidException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@ModelAttribut</span> 으로 binding error 발생시 BindException 발생한다.</span></div><div class="line"><span class="comment">     * ref https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(BindException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBindException</span><span class="params">(BindException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleBindException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * enum type 일치하지 않아 binding 못할 경우 발생</span></div><div class="line"><span class="comment">     * 주로 <span class="doctag">@RequestParam</span> enum으로 binding 못했을 경우 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentTypeMismatchException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentTypeMismatchException</span><span class="params">(MethodArgumentTypeMismatchException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleMethodArgumentTypeMismatchException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 지원하지 않은 HTTP method 호출 할 경우 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(HttpRequestMethodNotSupportedException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleHttpRequestMethodNotSupportedException</span><span class="params">(HttpRequestMethodNotSupportedException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleHttpRequestMethodNotSupportedException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.METHOD_NOT_ALLOWED);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.METHOD_NOT_ALLOWED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생합</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(AccessDeniedException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleAccessDeniedException</span><span class="params">(AccessDeniedException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleAccessDeniedException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.HANDLE_ACCESS_DENIED);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(ErrorCode.HANDLE_ACCESS_DENIED.getStatus()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(BusinessException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBusinessException</span><span class="params">(<span class="keyword">final</span> BusinessException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorCode errorCode = e.getErrorCode();</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(errorCode);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(errorCode.getStatus()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INTERNAL_SERVER_ERROR);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.INTERNAL_SERVER_ERROR);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>handleMethodArgumentNotValidException<ul><li>avax.validation.Valid or @Validated 으로 binding error 발생시 발생한다. )</li><li>HttpMessageConverter 에서 등록한 HttpMessageConverter binding 못할경우 발생 주로 @RequestBody, @RequestPart 어노테이션에서 발생</li></ul></li><li>handleBindException<ul><li>@ModelAttribut 으로 binding error 발생시 BindException 발생한다.</li></ul></li><li>MethodArgumentTypeMismatchException<ul><li>enum type 일치하지 않아 binding 못할 경우 발생</li><li>주로 @RequestParam enum으로 binding 못했을 경우 발생</li></ul></li><li>handleHttpRequestMethodNotSupportedException :<ul><li>지원하지 않은 HTTP method 호출 할 경우 발생</li></ul></li><li>handleAccessDeniedException<ul><li>Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생합</li><li>Security에서 던지는 예외</li></ul></li><li>handleException<ul><li>그 밖에 발생하는 모든 예외 처리, Null Point Exception, 등등</li><li>개발자가 직접 핸들링해서 다른 예외로 던지지 않으면 모두 이곳으로 모인다.</li></ul></li><li>handleBusinessException<ul><li>비지니스 요규사항에 따른 Exception</li><li>아래에서 자세한 설명 진행</li></ul></li></ul><p>추가로 스프링 및 라이브러리 등 자체적으로 발생하는 예외는 <code>@ExceptionHandler</code> 으로 추가해서 적절한 Error Response를 만들고 <strong>비지니스 요구사항에 예외일 경우 <code>BusinessException</code> 으로 통일성 있게 처리하는 것을 목표로 한다. 추가로 늘어날 수는 있겠지만 그 개수를 최소한으로 하는 노력이 필요합니다.</strong></p><h1><span id="error-code-정의">Error Code 정의</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Common</span></div><div class="line">    INVALID_INPUT_VALUE(<span class="number">400</span>, <span class="string">"C001"</span>, <span class="string">" Invalid Input Value"</span>),</div><div class="line">    METHOD_NOT_ALLOWED(<span class="number">405</span>, <span class="string">"C002"</span>, <span class="string">" Invalid Input Value"</span>),</div><div class="line">    ....</div><div class="line">    HANDLE_ACCESS_DENIED(<span class="number">403</span>, <span class="string">"C006"</span>, <span class="string">"Access is Denied"</span>),</div><div class="line"></div><div class="line">    <span class="comment">// Member</span></div><div class="line">    EMAIL_DUPLICATION(<span class="number">400</span>, <span class="string">"M001"</span>, <span class="string">"Email is Duplication"</span>),</div><div class="line">    LOGIN_INPUT_INVALID(<span class="number">400</span>, <span class="string">"M002"</span>, <span class="string">"Login input is invalid"</span>),</div><div class="line"></div><div class="line">    ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line"></div><div class="line">    ErrorCode(<span class="keyword">final</span> <span class="keyword">int</span> status, <span class="keyword">final</span> String code, <span class="keyword">final</span> String message) &#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>에러 코드는 enum 타입으로 한 곳에서 관리합니다.</p><p>에러 코드가 전체적으로 흩어져있을 경우 코드, 메시지의 중복을 방지하기 어렵고 전체적으로 관리하는 것이 매우 어렵습니다. <code>C001</code> 같은 코드도 동일하게 enum으로 관리 하는 것도 좋습니다. 에러 메시지는 Common과 각 도메인별로 관리하는 것이 효율적일 거 같습니다.</p><h1><span id="business-exception-처리">Business Exception 처리</span></h1><p>여기서 말하는 Business Exception은 요구사항에 맞지 않을 경우 발생시키는 Exception을 말합니다. 만약 쿠폰을 사용 하려고 하는데 이미 사용한 쿠폰인 경우에는 더 이상 정상적인 흐름을 이어갈수가 없게 됩니다. 이런 경우에는 적절한 Exception을 발생시키고 로직을 종료 시켜야합니다.</p><p>더 쉽게 정리하면 요구사항에 맞게 개발자가 직접 Exception을 발생시키는 것들이 Business Exception 이라고 할수 있습니다.</p><p>유지 보수하기 좋은 코드를 만들기 위해서는 Exception을 발생시켜야 합니다. 쿠폰을 입력해서 상품을 주문했을 경우 상품 계산 로직에서 이미 사용해 버린 쿠폰이면 로직을 이어나가기는 어렵습니다.</p><p>단순히 어려운 것이 아니라 해당 계산 로직의 책임이 증가하게 됩니다. 계산 로직은 특정 공식에 의해서 제품의 가격을 계산하는 것이 책임이지 쿠폰이 이미 사용 해 경우, 쿠폰이 만료되었을 경우, 제품이 매진 됐을 경우 등등의 책임을 갖게 되는 순간 유지 보수하기 어려운 코드가 됩니다. 객체의 적절한 책임을 주기 위해서라도 본인이 처리 못 하는 상황일 경우 적절한 Exception을 발생시켜야 합니다.</p><blockquote><p>클린 코드 : 오류 코드 보다 예외를 사용하라 리팩토링</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendShutDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        DeviceHandle handle = getHandle(DEV1);</div><div class="line">        <span class="comment">// 디바이스 상태를 점검한다.</span></div><div class="line">        <span class="keyword">if</span> (handle != DeviceHandle.INVALID) &#123;</div><div class="line">            <span class="comment">// 레코드 필드에 디바이스 상태를 저장한다.</span></div><div class="line">            retrieveDeviceRecord(handle);</div><div class="line">            <span class="comment">// 디바이스가 일시정지 상태가 아니라면 종료한다.</span></div><div class="line">            <span class="keyword">if</span> (record.getStatus() != DEVICE_SUSPENDED) &#123;</div><div class="line">                pauseDevice(handle);</div><div class="line">                clearDeviceWorkQueue(handle);</div><div class="line">                closeDevice(handle);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                logger.log(<span class="string">"Device suspended. Unable to shut down"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            logger.log(<span class="string">"Invalid handle for: "</span> + DEV1.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>if ... else</code>의 반복으로 인해서 sendShutDown 핵심 비지니스 코드의 이해하기가 어렵습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendShutDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tryToShutDown();</div><div class="line">        &#125; <span class="keyword">catch</span> (DeviceShutDownError e) &#123;</div><div class="line">            logger.log(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryToShutDown</span><span class="params">()</span> <span class="keyword">throws</span> DeviceShutDownError </span>&#123;</div><div class="line">        DeviceHandle handle = getHandle(DEV1);</div><div class="line">        DeviceRecord record = retrieveDeviceRecord(handle);</div><div class="line">        pauseDevice(handle);</div><div class="line">        clearDeviceWorkQueue(handle);</div><div class="line">        closeDevice(handle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> DeviceHandle <span class="title">getHandle</span><span class="params">(DeviceID id)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DeviceShutDownError(<span class="string">"Invalid handle for: "</span> + id.toString());</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>객체 본인의 책임 외적인 것들은 DeviceShutDownError 예외를 발생시키고 있습니다. 코드의 가독성과 책임이 분명하게 드러나고 있습니다.</p><h2><span id="비지니스-예외를-위한-최상위-businessexception-클래스">비지니스 예외를 위한 최상위 BusinessException 클래스</span></h2><p><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/BusinessException-final.png" alt=""></p><p>최상위 BusinessException을 상속 받는 InvalidValueException, EntityNotFoundExceptuon 등이 있습니다.</p><ul><li>InvalidValueException : 유효하지 않은 값일 경우 예외를 던지는 Excetion<ul><li>쿠폰 만료, 이미 사용한 쿠폰 등의 이유로 더이상 진행이 못할경우</li></ul></li><li>EntityNotFoundException : 각 엔티티들을 못찾았을 경우<ul><li><code>findById</code>, <code>findByCode</code> 메서드에서 조회가 안되었을 경우</li></ul></li></ul><p>최상위 BusinessException을 기준으로 예외를 발생시키면 통일감 있는 예외 처리를 가질 수 있습니다. 비니지스 로직을 수행하는 코드 흐름에서 로직의 흐름을 진행할 수 없는 상태인 경우에는 적절한 BusinessException 중에 하나를 예외를 발생 시키거나 직접 정의하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(BusinessException.class)</div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBusinessException</span><span class="params">(<span class="keyword">final</span> BusinessException e)</span> </span>&#123;</div><div class="line">    log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">    <span class="keyword">final</span> ErrorCode errorCode = e.getErrorCode();</div><div class="line">    <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(errorCode);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(errorCode.getStatus()));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이렇게 발생하는 모든 예외는 <code>handleBusinessException</code> 에서 동일하게 핸들링 됩니다. 예외 발생시 알람을 받는 등의 추가적인 행위도 손쉽게 가능합니다. 또 BusinessException 클래스의 하위 클래스 중에서 특정 예외에 대해서 다른 알람을 받는 등의 더 디테일한 핸들링도 가능해집니다.</p><h2><span id="coupon-code">Coupon Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        verifyExpiration();</div><div class="line">        verifyUsed();</div><div class="line">        <span class="keyword">this</span>.used = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyUsed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (used) <span class="keyword">throw</span> <span class="keyword">new</span> CouponAlreadyUseException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (LocalDate.now().isAfter(getExpirationDate())) <span class="keyword">throw</span> <span class="keyword">new</span> CouponExpireException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>쿠폰의 <code>use</code> 메서드입니다. 만료일과 사용 여부를 확인하고 예외가 발생하면 적절한 Exception을 발생시킵니다.</p><h1><span id="컨트롤러-예외-처리">컨트롤러 예외 처리</span></h1><p>컨틀롤러에서 모든 요청에 대한 값 검증을 진행하고 이상이 없을 시에 서비스 레이어를 호출해야 합니다. 위에서도 언급했듯이 잘못된 값이 있으면 서비스 레이어에서 정상적인 작업을 진행하기 어렵습니다. <strong>무엇보다 컨틀롤러의 책임을 다하고 있지 않으면 그 책임은 자연스럽게 다른 레이어로 전해지게 되며 이렇게 넘겨받은 책임을 처리하는데 큰 비용과 유지보수 하기 어려워질 수밖에 없습니다.</strong></p><p>컨트롤러의 중요한 책임 중의 하나는 요청에 대한 값 검증이 있습니다. 스프링은 JSR 303 기반 어노테이션으로 값 검증을 쉽고 일관성 있게 처리할 수 있도록 도와줍니다. 모든 예외는 <code>@ControllerAdvice</code> 선언된 객체에서 핸들링 됩니다. 컨트롤러로 본인이 직접 예외까지 처리하지 않고 예외가 발생하면 그냥 던져버리는 패턴으로 일관성 있게 개발할 수 있습니다.</p><h2><span id="controller">Controller</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberSignUpService memberSignUpService;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberResponse <span class="title">create</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberSignUpService.doSignUp(dto);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MemberResponse(member);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpRequest</span> </span>&#123;</div><div class="line">    <span class="meta">@Valid</span> <span class="keyword">private</span> Email email;</div><div class="line">    <span class="meta">@Valid</span> <span class="keyword">private</span> Name name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="keyword">private</span> String first;</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="keyword">private</span> String last;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line">    <span class="meta">@javax</span>.validation.constraints.Email</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>회원 가입 Reuqest Body 중에서 유효하지 않은 값이 있을 때 <code>@Valid</code> 어노테이션으로 예외를 발생시킬 수 있습니다. 이 예외는 <code>@ControllerAdvice</code>에서 적절하게 핸들링 됩니다. <code>@NotEmpty</code>, <code>@Email</code> 외에도 다양한 어노테이션들이 제공됩니다.</p><h1><span id="try-catch-전략">Try Catch 전략</span></h1><p>기본적으로 예외가 발생하면 로직의 흐름을 끊고 종료 시켜야 합니다물론 예외도 있지만, 최대한 예외를 발생시켜 종료하는 것을 지향해야 한다고 생각합니다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 비지니스 로직 수행...</span></div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 같은 코드는 지양하야 하는 패턴입니다. 최소한의 양심으로 <code>e.printStackTrace();</code> 로그라도 출력했지만 이미 예외가 발생했음에도 불가하고 다음 로직을 실행하게 됩니다. 이런 식의 <code>try catch</code>를 최대한 지양해야 합니다.</p><p>하지만 Checked Exception 같은 경우에는 예외를 반드시 감싸야 하므로 이러한 경우에는 <code>try catch</code>를 사용해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 비지니스 로직 수행...</span></div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> XXX비지니스로직예외(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>try catch</code>를 사용해야 하는 경우라면 더 구체적인 예외로 Exception을 발생시키는 것이 좋습니다. 간단하게 정리하면</p><ol><li><code>try catch</code>를 최대한 지양해라</li><li><code>try catch</code>로 에러를 먹고 주는 코드는 지양해라(이런 코드가 있다면 로그라도 추가해주세요…)</li><li><code>try catch</code>를 사용하게 된다면 더 구체적인 Exception을 발생시키는 것이 좋다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Exception" scheme="https://cheese10yun.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - 테스트 전략</title>
    <link href="https://cheese10yun.github.io/spring-guide-test-1/"/>
    <id>https://cheese10yun.github.io/spring-guide-test-1/</id>
    <published>2019-02-16T15:35:00.000Z</published>
    <updated>2019-02-16T15:58:19.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h1><span id="소개">소개</span></h1><p>스프링은 다양한 테스트 전략을 제공하고 있습니다. 대표적으로 Slice Test 라는 것으로 특정 레이어에 대해서 Bean을 최소한으로 등록시켜 테스트 하고자 하는 부분에 최대한 단위 테스트를 지원합니다. 다양하게 지원해주는 만큼 테스트 코드를 통일성 있게 관리하는 것이 중요합니다. 더 안전하고 통일성 있게 테스트를 진행하는 방법에 대해서 제 나름의 노하우를 정리해보았습니다.</p><h1><span id="테스트-전략">테스트 전략</span></h1><table><thead><tr><th>어노테이션</th><th>설명</th><th>부모 클래스</th><th>Bean</th></tr></thead><tbody><tr><td>@SpringBootTest</td><td>통합 테스트, 전체</td><td>IntegrationTest</td><td>Bean 전체</td></tr><tr><td>@WebMvcTest</td><td>단위 테스트, Mvc 테스트</td><td>MockApiTest</td><td>MVC 관련된 Bean</td></tr><tr><td>@DataJpaTest</td><td>단위 테스트, Jpa 테스트</td><td>RepositoryTest</td><td>JPA 관련 Bean</td></tr><tr><td>None</td><td>단위 테스트, Service 테스트</td><td>MockTest</td><td>None</td></tr><tr><td>None</td><td>POJO, 도메인 테스트</td><td>None</td><td>None</td></tr></tbody></table><h1><span id="통합테스트">통합테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>모든 Bean을 올리고 테스트를 진행하기 때문에 쉽게 테스트 진행 가능</li><li>모든 Bean을 올리고 테스트를 진행하기 때문에 운영환경과 가장 유사하게 테스트 가능</li><li>API를 테스트할 경우 요청부터 응답까지 전체적인 테스트 진행 가능</li></ul><h2><span id="단점">단점</span></h2><ul><li>모든 Bean을 올리고 테스트를 진행하기 때문에 테스트 시간이 오래 걸림</li><li>테스트의 단위가 크기 때문에 테스트 실패시 디버깅이 어려움</li><li>외부 API 콜같은 Rollback 처리가 안되는 테스트 진행을 하기 어려움</li></ul><h2><span id="code">Code</span></h2><h3><span id="integrationtest">IntegrationTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = ApiApp.class)</div><div class="line"><span class="meta">@AutoConfigureMockMvc</span></div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegrationTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">protected</span> MockMvc mvc;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">protected</span> ObjectMapper objectMapper;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>통합 테스트의 Base 클래스입니다. Base 클래스를 통해서 테스트 전략을 통일성 있게 가져갈 수 있습니다.</li><li>통합 테스트는 주로 컨트롤러 테스트를 주로 하며 요청부터 응답까지의 전체 플로우를 테스트합니다.</li><li><code>@ActiveProfiles(TestProfile.TEST)</code> 설정으로 테스트에 profile을 지정합니다. 환경별로 properties 파일을 관리하듯이 test도 반드시 별도의 properties 파일로 관리하는 것이 바람직합니다.</li><li>인터페이스나 enum 클래스를 통해서 profile을 관리합니다. 오타 실수를 줄일 수 있으며 전체적인 프로필이 몇 개 있는지 한 번에 확인할 수 있습니다.</li><li><code>@Transactional</code> 트랜잭션 어노테이션을 추가하면 테스트코드의 데이터베이스 정보가 자동으로 Rollback 됩니다. 베이스 클래스에 이 속성을 추가 해야지 실수 없이 진행할 수 있습니다.</li><li><code>@Transactional</code>을 추가하면 자연스럽게 데이터베이스 상태의존 적인 테스트를 자연스럽게 하지 않을 수 있게 됩니다.</li><li>통합 테스트 시 필요한 기능들을 <code>protected</code>로 제공해줄 수 있습니다. API 테스트를 주로 하게 되니 ObjectMapper 등을 제공해줄 수 있습니다. 유틸성 메서드들도 <code>protected</code>로 제공해주면 중복 코드 및 테스트 코드의 편의성이 높아집니다.</li><li>실제로 동작할 필요가 없으니 <code>@Ignore</code> 어노테이션을 추가합니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> <span class="keyword">extends</span> <span class="title">IntegrationTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MemberSetup memberSetup;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_성공() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Member member = MemberBuilder.build();</div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.value"</span>).value(email.getValue()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.host"</span>).value(email.getHost()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.id"</span>).value(email.getId()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.first"</span>).value(name.getFirst()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.middle"</span>).value(name.getMiddle()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.last"</span>).value(name.getLast()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.fullName"</span>).value(name.getFullName()))</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원조회() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Member member = memberSetup.save();</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestGetMember(member.getId());</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.value"</span>).value(member.getEmail().getValue()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.host"</span>).value(member.getEmail().getHost()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.id"</span>).value(member.getEmail().getId()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.first"</span>).value(member.getName().getFirst()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.middle"</span>).value(member.getName().getMiddle()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.last"</span>).value(member.getName().getLast()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.fullName"</span>).value(member.getName().getFullName()))</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ResultActions <span class="title">requestSignUp</span><span class="params">(SignUpRequest dto)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> mvc.perform(post(<span class="string">"/members"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</div><div class="line">                .content(objectMapper.writeValueAsString(dto)))</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>IntegrationTest</code> 클래스를 상속받습니다. 이 상속을 통해서 MemberApiTest에서 테스트를 위한 어 로테이션이 생략되며 어떤 통합 테스트라도 항상 통일성을 가질 수 있습니다.</li><li><code>given</code>, <code>when</code>, <code>then</code> 키워드로 테스트 흐름을 알려줍니다. 다른 사람의 테스트 코드의 가독성이 높아지기 때문에 해당 키워드로 적절하게 표시하는 것을 권장합니다.</li><li>요청에 대한 메서드를 <code>requestSignUp(...)</code>으로 분리해서 재사용성을 높입니다. 해당 메서드로 valdate 실패하는 케이스도 작성합니다 <code>andDo(print())</code> 메서드를 추가해서 해당 요청에 대한 출력을 확인합니다. 디버깅에 매우 유용합니다.</li><li>모든 response에 대한 <code>andExpect</code>를 작성합니다. 간혹 <code>.andExpect(content().string(containsString(&quot;&quot;)))</code> 이런 테스트를 진행하는데 특정 문자열이 들어 있는지 없는지 확인하는 것은 것보다 모<ul><li><strong>response에 하나라도 빠지거나 변경되면 API 변경이 이루어진 것이고 그 변경에 맞게 테스트 코드도 변경되어야 합니다.</strong></li></ul></li><li><code>회원 조회</code> 테스트 강은 경우 <code>memberSetup.save();</code> 메서드로 테스트전에 데이터베이스에 insert 합니다.<ul><li>데이터베이스에 미리 있는 값을 검증하는 것은 데이터베이스 상태에 의존한 코드가 되며 누군가가 회원 정보를 변경하게 되면 테스트 코드가 실패하게 됩니다.</li><li>테스트 전에 데이터를 insert하지 않는다면 테스트 코드 구동 전에 <code>.sql</code> 으로 미리 데이터베이스를 준비시킵니다 ApplicationRunner를 이용해서 데이터베이스를 준비시키 방법도 있습니다.</li><li><strong>중요한 것은 데이터베이스 상태에 너무 의존적인 테스트는 향후 로직의 문제가 없더라도 테스트가 실패하는 상황이 자주 만나게 됩니다.</strong></li></ul></li></ul><h1><span id="서비스-테스트">서비스 테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>진행하고자 하는 테스트에만 집중할 수 있습니다.</li><li>테스트 진행시 중요 관점이 아닌 것들은 Mocking 처리해서 외부 의존성들을 줄일 수 있습니다.<ul><li>예를 들어 주문 할인 로직이 제대로 동작하는지에 대한 테스트만 진행하지 이게 실제로 데이터베이스에 insert되는지는 해당 테스트의 관심사가 아닙니다.</li></ul></li><li>테스트 속도가 빠릅니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>의존성 있는 객체를 Mocking 하기 때문에 문제가 완결된 테스트는 아닙니다.</li><li>Mocking 하기가 귀찮습니다.</li><li>Mocking 라이브러리에 대한 학습 비용이 발생합니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="mocktest">MockTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockTest</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>주로 Service 영역을 테스트 합니다.</li><li><code>MockitoJUnitRunner</code>을 통해서 Mock 테스트를 진행합니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpServiceTest</span> <span class="keyword">extends</span> <span class="title">MockTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@InjectMocks</span></div><div class="line">    <span class="keyword">private</span> MemberSignUpService memberSignUpService;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line">    <span class="keyword">private</span> Member member;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        member = MemberBuilder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_성공() &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        given(memberRepository.existsByEmail(any())).willReturn(<span class="keyword">false</span>);</div><div class="line">        given(memberRepository.save(any())).willReturn(member);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> Member signUpMember = memberSignUpService.doSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        assertThat(signUpMember).isNotNull();</div><div class="line">        assertThat(signUpMember.getEmail().getValue()).isEqualTo(member.getEmail().getValue());</div><div class="line">        assertThat(signUpMember.getName().getFullName()).isEqualTo(member.getName().getFullName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span>(expected = EmailDuplicateException.class)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_이메일중복_경우() &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        given(memberRepository.existsByEmail(any())).willReturn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        memberSignUpService.doSignUp(dto);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>MockTest</code> 객체를 상속받아 테스트의 일관성을 갖습니다.</li><li><code>회원가입_성공</code> 테스트는 오직 회원 가입에대한 단위 테스트만 진행합니다.<ul><li><code>existsByEmail</code>을 모킹해서 해당 이메일이 중복되지 않았다는 가정을 합니다.</li><li><code>then</code> 에서는 회원 객체가 해당 비지니스 요구사항에 맞게 생성됬는지를 검사합니다.</li><li>실제 데이터베이스에 Insert 됬는지 여부는 해당 테스트의 관심사가 아닙니다.</li></ul></li><li><code>회원가입_이메일중복_경우</code> 테스트는 회원가입시 이메일이 중복됬는지 여부를 확인합니다.<ul><li><code>existsByEmail</code>을 모킹해서 이메일이 중복됬다는 가정을 합니다.</li><li><code>expected</code>으로 이메일이 중복되었을 경우 <code>EmailDuplicateException</code> 예외가 발생하는지 확인합니다.</li><li>해당 이메일이 데이터베이스에 실제로 있어서 예외가 발생하는지는 관심사가 아닙니다. 작성한 코드가 제대로 동작 여부만이 해당 테스트의 관심사 입니다.</li></ul></li><li>오직 테스트의 관심사만 테스트를 진행하기 때문에 예외 발생시 디버깅 작업도 명확해집니다.</li><li>외부 의존도가 낮기 때문에 테스트 하고자하는 부분만 명확하게 테스트가 가능합니다.<ul><li>이것은 단점이기도 합니다. 해당 테스트만 진행하지 외부 의존을 갖는 코드까지 테스트하지 않으니 실제 환경에서 제대로 동작하지 않을 가능성이 있습니다. 외부 의존에대한 테스트는 통합 테스트에서 진행합니다.</li></ul></li></ul><h1><span id="mock-api-테스트">Mock API 테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>Mock 테스트와 장점은 거의 같습니다.</li><li><code>WebApplication</code> 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르게 테스트할 수 있습니다.</li><li>통합 테스트를 진행하기 어려운 테스트를 진행합니다.<ul><li>외부 API 같은 Rollback 처리가 힘들거나 불가능한 테스트를 주로 사용합니다.</li><li>예를 들어 외부 결제 모듈 API를 콜하면 안 되는 케이스에서 주로 사용 할 수 있습니다.</li><li>이런 문제는 통합 테스트에서 해당 객체를 Mock 객체로 변경해서 테스트를 변경해서 테스트할 수도 있습니다.</li></ul></li></ul><h2><span id="단점">단점</span></h2><ul><li>Mcok 테스트와 다점은 거의 같습니다.</li><li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 가능성이 매우 큽니다.</li></ul><h2><span id="code">Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebMvcTest</span>(MemberApi.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberMockApiTest</span> <span class="keyword">extends</span> <span class="title">MockApiTest</span> </span>&#123;</div><div class="line">    <span class="meta">@MockBean</span> <span class="keyword">private</span> MemberSignUpService memberSignUpService;</div><div class="line">    <span class="meta">@MockBean</span> <span class="keyword">private</span> MemberHelperService memberHelperService;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_유효하지않은_입력값() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = Email.of(<span class="string">"asdasd@d"</span>); <span class="comment">// 이메일 형식이 유효하지 않음</span></div><div class="line">        <span class="keyword">final</span> Name name = Name.builder().build();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line">        <span class="keyword">final</span> Member member = MemberBuilder.build();</div><div class="line"></div><div class="line">        given(memberSignUpService.doSignUp(any())).willReturn(member);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">        ;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li><code>@WebMvcTest(MemberApi.class)</code> 어노테이션을 통해서 하고자하는 <code>MemberApi</code>의 테스트를 진행합니다.</li><li><code>@MockBean</code> 으로 객체를 주입받아 Mocking 작업을 진행합니다.</li><li>테스트의 관심사는 오직 Request와 그에 따른 Response 입니다.</li></ul><h1><span id="repository-test">Repository Test</span></h1><h2><span id="장점">장점</span></h2><ul><li><code>Repository</code> 관련된 Bean들만 등록하기 때문에 통합 테스트에 비해서 빠릅니다.</li><li><code>Repository</code>에 대한 관심사만 갖기 때문에 테스트 범위가 작습니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>테스트 범위가 작기 때문에 실제 환경과 차이가 발생합니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="repositorytest">RepositoryTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = AutoConfigureTestDatabase.Replace.NONE)</div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>@DataJpaTest</code> 어노테이션을 통해서 <code>Repository</code>에 대한 Bean만 등록합니다.</li><li><code>@DataJpaTest</code>는 기본적으로 메모리 데이터베이스에 대한 테스트를 진행합니다. <code>@AutoConfigureTestDatabase</code> 어노테이션을 통해서 profile에 등록된 데이터베이스 정보로 대체할 수 있습니다.</li><li><code>JpaRepository</code>에서 기본적으로 기본적으로 재공해주는 <code>findById</code>, <code>findByAll</code>, <code>deleteById</code>등은 테스트를 하지 않습니다.<ul><li>기본적으로 <code>save()</code> null 제약 조건등의 테스트는 진행해도 좋다고 생각합니다.</li><li>주로 커스텀하게 작성한 쿼리 메서드, <code>@Query</code>으로 작성된 JPQL등의 커스텀하게 추가된 메서드를 테스트합니다.</li></ul></li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberRepositoryTest</span> <span class="keyword">extends</span> <span class="title">RepositoryTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Member saveMember;</div><div class="line">    <span class="keyword">private</span> Email email;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">final</span> String value = <span class="string">"cheese10yun@gmail.com"</span>;</div><div class="line">        email = EmailBuilder.build(value);</div><div class="line">        <span class="keyword">final</span> Name name = NameBuilder.build();</div><div class="line">        saveMember = memberRepository.save(MemberBuilder.build(email, name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> existsByEmail_존재하는경우_true() &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = memberRepository.existsByEmail(email);</div><div class="line">        assertThat(existsByEmail).isTrue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> existsByEmail_존재하지않은_경우_false() &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = memberRepository.existsByEmail(Email.of(<span class="string">"ehdgoanfrhkqortntksdls@asd.com"</span>));</div><div class="line">        assertThat(existsByEmail).isFalse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>setUp()</code> 메서드를 통해서 Member를 데이터베이스에 insert 합니다.<ul><li><code>setUp()</code> 메서드는 메번 테스트 코드가 실행되기전에 실행됩니다. 즉 테스트 코드 실핼 할 때마다 insert -&gt; rollback이 자동으로 이루어집니다.</li></ul></li><li>추가 작성한 쿼리메서드 <code>existsByEmail</code>을 테스트 진행합니다.<ul><li>실제로 작성된 쿼리가 어떻게 출력되는지 <code>show-sql</code> 옵션을 통해서 확인 합니다. ORM은 SQL을 직접 장성하지 않으니 실제 쿼리가 어떻게 출력되는지 확인하는 습관을 반드시 가져야합니다.</li></ul></li></ul><h1><span id="pojo-테스트">POJO 테스트</span></h1><h2><span id="설명">설명</span></h2><p>각 엔티티(Embeddable, Entity, 일반 POJO, 모든 객체) 객체들의 기능이 풍부해야 합니다. 객체 본인의 책임을 충분히 다하지 않고 있으면 다른 영역으로 그 객체의 책임이 넘어 가게됩니다. 예를 들어 <code>Name</code> 객체가 <code>getFullName()</code> 메서드를 제공해주지 않는다면 <code>getFullName()</code> 메서드를 만족시키는 메서드들이 다른 계층에서 구현하게 되고 어느 계층에서 어떻게 사용되고 있는지 모르기 때문에 누군가는 중복코드를 만들게 됩니다.</p><p>객체지향에서 본인의 책임(기능)은 본인 스스로가 제공해야 합니다. 특히 엔티티 객체들은 가장 핵심 객체이고 이 객체를 사용하는 계층들이 다양하게 분포되기 때문에 반드시 테스트 코드를 작성해야합니다.</p><h2><span id="장점">장점</span></h2><ul><li>POJO 객체이므로 테스트하기 편합니다. 외부에서 주입 받을 의존성도 없고 Mocking할 대상도 없습니다.</li><li>엔티티 객체는 사용하는 계층이 많으므로 테스트의 효율성이 높습니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>단점은 없다고 생각합니다. POJO를 테스트 하므로 테스트 속도 및 난도가 낮지만 높은 안전성을 갖게 됩니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="embeddable">Embeddable</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@ToString</span>(of = &#123;<span class="string">"first"</span>, <span class="string">"middle"</span>, <span class="string">"last"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String first;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String last;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(<span class="keyword">final</span> String first, <span class="keyword">final</span> String middle, <span class="keyword">final</span> String last)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.first = first;</div><div class="line">        <span class="keyword">this</span>.middle = StringUtils.isEmpty(middle) ? <span class="keyword">null</span> : middle;</div><div class="line">        <span class="keyword">this</span>.last = last;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.middle == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> String.format(<span class="string">"%s %s"</span>, <span class="keyword">this</span>.first, <span class="keyword">this</span>.last);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s %s %s"</span>, <span class="keyword">this</span>.first, <span class="keyword">this</span>.middle, <span class="keyword">this</span>.last);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Name</code> 객체는 <code>Member</code> 객체에서 사용하고 있습니다. 이처럼 Name 이라는 객체를 <code>Embeddable</code>으로 별도로 가지고 있으면 데이터의 응집력 재사용성이 높아집니다.<ul><li>예를 들어 주문시 주문자 정보를 받아야 된다면 <code>Order</code> 라는 객체에도 동일하게 <code>Name</code> 객체를 사용하면 재사용성이 높아집니다.</li></ul></li><li><code>Embeddable</code> 객체에서도 다른 객체와 마찬가지로 <code>Name</code> 관련된 기능을 충분히 제공해야 합니다. <code>getFullName()</code> 메서드 처럼 <code>first</code>, <code>last</code>, <code>middle</code>의 이름을 적절하게 조합해서 제공해줍니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_isFullName_ReturnFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">"middle"</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first middle last"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_WithoutMiddle_ReturnMiddleNameIsNull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">""</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first last"</span>));</div><div class="line">        assertThat(name.getMiddle(), is(nullValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_MiddleNameIsNull_ReturnMiddleNameIsNull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">""</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first last"</span>));</div><div class="line">        assertThat(name.getMiddle(), is(nullValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>entity</code>, <code>Embeddable</code> 객체 등의 객체들도 반드시 테스트 코드를 작성해야합니다.</li><li>middle 값이 비어있을 경우 null로 잘들어가는지, <code>getFullName()</code> 메서드가 잘 동작하는지 테스트합니다.</li></ul><h1><span id="마무리">마무리</span></h1><p>각자의 프로젝트 환경이 다르기 때문에 어느 한방 법이 Best Practice라고 말하는 게 어렵습니다. 그래도 테스트 코드의 중요성은 이미 많은 개발자가 공감하고 있는 만큼 보다 효율적인 테스트 코드 환경을 구축하려는 노력이 많이 선행되어야 한다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-15 - Querydsl를 이용해서 Repository 확장하기</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-15/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-15/</id>
    <published>2019-02-13T17:56:00.000Z</published>
    <updated>2019-02-13T17:54:43.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h2><span id="repository-code">Repository Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Account <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    List&lt;Account&gt; findDistinctFirstBy...</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select *from...."</span>)</div><div class="line">    <span class="function">List&lt;Account&gt; <span class="title">findXXX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JpaRepository를 이용해서 복잡한 쿼리는 작성하기가 어려운점이 있습니다. <code>findByEmail</code>, <code>existsByEmail</code> 같은 유니크한 값을 조회하는 것들은 쿼리 메서드로 표현하는 것이 가독성 및 생산성에 좋습니다.</p><p><strong>하지만 복잡한 쿼리가 복잡해지면 쿼리 메서드로 표현하기도 어렵습니다. <code>@Query</code> 어노테이션을 이용해서 JPQL을 작성하는 것도 방법이지만 type safe 하지 않아 유지 보수하기 어려운 단점이 있습니다.</strong></p><p>이러한 단점은 <code>Querydsl</code>를 통해서 해결할 수 있지만 조회용 DAO 클래스 들이 남발되어 다양한 DAO를 DI 받아 비즈니스 로직을 구현하게 되는 현상이 발생하게 됩니다.</p><p>이러한 문제를 상속 관계를 통해 <code>XXXRepository</code> 객체를 통해서 DAO를 접근할 수 있는 패턴을 포스팅 하려 합니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/AccountRepository.png" alt=""></p><p>클래스 다이어그램을 보면 <code>AccountRepository</code>는 <code>AccountCustomRepository</code>, <code>JpaRepository</code>를 구현하고 있습니다.</p><p><code>AccountRepository</code>는 <code>JpaRepository</code>를 구현하고 있으므로 <code>findById</code>, <code>save</code> 등의 메서드를 정의하지 않고도 사용 가능했듯이 <code>AccountCustomRepository</code>에 있는 메서드도 <code>AccountRepository</code>에서 그대로 사용 가능합니다.</p><p>즉 우리는 <code>AccountCustomRepositoryImpl</code>에게 복잡한 쿼리는 구현을 시키고 <code>AccountRepository</code> 통해서 마치 <code>JpaRepository</code>를 사용하는 것처럼 편리하게 사용할 수 있습니다.</p><h2><span id="code">Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line">    <span class="function">Account <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Account&gt; <span class="title">findRecentlyRegistered</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountCustomRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">QuerydslRepositorySupport</span> <span class="keyword">implements</span> <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountCustomRepositoryImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Account.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">// 최근 가입한 limit 갯수 만큼 유저 리스트를 가져온다</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findRecentlyRegistered</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> QAccount account = QAccount.account;</div><div class="line">        <span class="keyword">return</span> from(account)</div><div class="line">                .limit(limit)</div><div class="line">                .orderBy(account.createdAt.desc())</div><div class="line">                .fetch();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>AccountCustomRepository</code> 인터페이스를 생성합니다.</li><li><code>AccountRepository</code> 인터페이스에 방금 생성한 <code>AccountCustomRepository</code> 인터페이스를 <code>extends</code> 합니다.</li><li><code>AccountCustomRepositoryImpl</code>는 실제 Querydsl를 이용해서 <code>AccountCustomRepository</code>의 세부 구현을 진행합니다.</li></ul><p><strong>커스텀 Repository를 만들 때 중요한 것은 <code>Impl</code> 네이밍을 지켜야합니다.</strong> 자세한 것은<br><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">Spring Data JPA - Reference Documentation</a>을 참조해주세요</p><h2><span id="test-code">Test Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepositoryTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByEmail_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String email = <span class="string">"test001@test.com"</span>;</div><div class="line">        <span class="keyword">final</span> Account account = accountRepository.findByEmail(Email.of(email));</div><div class="line">        assertThat(account.getEmail().getValue()).isEqualTo(email);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isExistedEmail_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String email = <span class="string">"test001@test.com"</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = accountRepository.existsByEmail(Email.of(email));</div><div class="line">        assertThat(existsByEmail).isTrue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findRecentlyRegistered_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;Account&gt; accounts = accountRepository.findRecentlyRegistered(<span class="number">10</span>);</div><div class="line">        assertThat(accounts.size()).isLessThan(<span class="number">11</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>findByEmail_test</code>, <code>isExistedEmail_test</code> 테스트는 <code>AccountRepository</code>에 작성된 쿼리메서드 테스트입니다.</p><p>중요한 부분은 <code>findRecentlyRegistered_test</code> 으로 <code>AccountCustomRepository</code>에서 정의된 메서드이지만 <code>accountRepository</code>를 이용해서 호출하고 있습니다.</p><p>즉 <code>accountRepository</code> 객체를 통해서<br>복잡한 쿼리의 세부 구현체 객체를 구체적으로 알 필요 없이 사용할 수 있습니다. <strong>이는 의존성을 줄일 수 있는 좋은 구조라고 생각합니다.</strong></p><h2><span id="결론">결론</span></h2><p><code>Repository</code>에서 복잡한 조회 쿼리를 작성하는 것은 유지 보수 측면에서 좋지 않습니다. 쿼리 메서드로 표현이 어려우며 <code>@Qeury</code> 어노테이션을 통해서 작성된 쿼리는 type safe하지 않은 단점이 있습니다. 이것을 <strong>QueryDsl으로 해결하고 다형성을 통해서 복잡한 쿼리의 세부 구현은 감추고 <code>Repository</code>를 통해서 사용하도록 하는 것이 핵심입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
      <category term="QueryDsl" scheme="https://cheese10yun.github.io/tags/QueryDsl/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-14 - JUnit5 적용하기</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-14/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-14/</id>
    <published>2019-02-06T12:15:00.000Z</published>
    <updated>2019-02-06T12:22:48.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>JUnit5는 다양한 어노테이션들이 추가되었습니다. 그중에 Junit5를 도입할 만큼 매력 있는 어노테이션 <code>@DisplayName</code> 입니다.</p><p>단순한 테스트 이외에는 테스트 코드 네이밍으로 테스트하고자 하는 의미를 전달하기가 매우 어렵습니다. 이때 아주 유용하게 사용할 수 있는 것이 <code>@DisplayName</code> 입니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/junit5-display-name.png" alt=""></p><p>위 그림처럼 <code>@DisplayName(....)</code>  어노테이션으로 코드에 대한 설명을 문자열로 대체할 수 있습니다. 이 대체된 문자열은 실제 테스트 케이스 이름으로 표시됩니다.</p><h2><span id="의존성-추가">의존성 추가</span></h2><p>Spring Boot2의 테스트코드 의존성은 JUnit4를 기본으로 가져오기 때문에 <code>spring-boot-starter-test</code> 의존성 이외에도 추가적인 작업이 필요합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--spring-boot-starter-test 의존성에서 가져오는 JUnit 제외 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--필요한 의존성 추가 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="