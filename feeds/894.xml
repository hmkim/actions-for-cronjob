<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by ManYoung Cho on Medium]]></title>
        <description><![CDATA[Stories by ManYoung Cho on Medium]]></description>
        <link>https://medium.com/@manyoung?source=rss-f3f2571539db------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*YAIoOJE7JKxjQdswl3_m5Q.jpeg</url>
            <title>Stories by ManYoung Cho on Medium</title>
            <link>https://medium.com/@manyoung?source=rss-f3f2571539db------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 13:07:10 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@manyoung" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[프론트엔드 웹애플리케이션 아키텍쳐 비교분석 : MVC와 MVVM]]></title>
            <link>https://medium.com/@manyoung/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9B%B9%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-%EB%B9%84%EA%B5%90%EB%B6%84%EC%84%9D-mvc%EC%99%80-mvvm-e446a0f46d8c?source=rss-f3f2571539db------2</link>
            <guid isPermaLink="false">https://medium.com/p/e446a0f46d8c</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[extjs]]></category>
            <category><![CDATA[html5]]></category>
            <category><![CDATA[sencha]]></category>
            <category><![CDATA[frontend]]></category>
            <dc:creator><![CDATA[ManYoung Cho]]></dc:creator>
            <pubDate>Thu, 17 Nov 2016 08:09:53 GMT</pubDate>
            <atom:updated>2016-11-17T08:09:53.741Z</atom:updated>
            <content:encoded><![CDATA[<p><strong>개요</strong></p><p>함수와 객체가 미시적인 수준까지 코드 재사용과 모듈 방식을 허용해 개발자의 효율성을 높인 것처럼, 애플리케이션 아키텍처는 거시적인 수준에서 방대한 코드의 상호작용을 정리하거나 추상화하거나 제한해 개발팀의 효율성을 높였다.</p><p>본 보고서는 현재 널리 쓰이는 자바스크립트 애플리케이션 아키텍처를 개략적으로 살펴보고 센차가 지원하는 최신 애플리케이션 아키텍처인 모델-뷰-뷰모델(MVVM)을 심층 분석하고자 한다.</p><p><strong>소개</strong></p><p>센차 Ext JS 프레임워크는 종합적인 위젯 라이브러리, 강력한 데이터 패키지와 견고한 툴링을 갖춘 덕분에 기업형 웹 애플리케이션 개발에 있어 업계 표준이 되었다. 확장성이 높고 커스터마이징이 쉬운 Ext JS는 포춘 지가 선정한 100대 기업의 60%와 전 세계 200만 이상의 개발자가 사용하고 있다.</p><p>2007년 Ext JS 1.0이 처음 출시된 후로, 이 업계는 여러 면에서 달라졌다. 웹 애플리케이션은 그 어느 때보다 규모가 크고 더 복잡해졌다. 2010년 센차는 터치 1.0를 통해 모델-뷰-컨트롤러 패턴(MVC)을 지원하는 자바스크립트 프레임워크를 업계 최초로 선보이고 대기업의 웹 애플리케이션이 자주 직면하는 문제들을 처리했다. 뒤이어 2011년에는 그 기능을 Ext JS 4.0에 적용해 새로워진 기업형 웹 앱의 애플리케이션 코드를 정리하도록 도왔다.</p><p>최근 센차는 MVVM 아키텍처 패턴을 최적 지원하는 Ext JS 5.0을 출시했다. Ext JS 5에는 양방향 데이터 바인딩과 선언적 환경설정 같은 기능이 포함되었다. 기업형 웹 애플리케이션은 유형이 무척 다양하므로 성공을 보장하기 위해서는 무조건 프로젝트 초기에 올바른 아키텍처를 선택해야 한다. 기업형 웹 애플리케이션 구축에 자주 쓰이는 자바스크립트 프레임워크 가운데서도 MVC와 MVVM을 동시에 지원하는 Ext JS 5는 가장 유연하다고 할 수 있다.</p><p><strong>기업형 애플리케이션의 진화</strong></p><p>초창기 인터넷은 단순한 HTML 페이지들이 링크로 연결된 것에 불과했다. “웹 애플리케이션”이라는 용어는 아직 존재하지도 않았다. 웹 기술(브라우저, 툴링은 물론 다듬어지지 않은 언어로 작성된 명세서까지)은 오늘날 우리가 아는 “애플리케이션”을 전혀 예측할 수 없었기 때문이다.</p><p>자바스크립트는 1995년부터 폼 필드 유효성 검사와 이미지 롤오버 정도에 유용하게 쓰이기 시작했다. 당시 많이 사용하던 서버 측 언어(CGI, PHP, ASP, 콜드퓨전Cold Fusion 등)은 정적인 HTML 페이지를 전송했다. 사용자가 링크를 클릭하거나 폼을 작성할 때마다 서버는 완전히 새로운 페이지를 뱉어냈다. 포토샵 같은 도구를 이용해 그래픽 디자이너가 만든 아주 멋진 웹사이트에서도 제대로 된 기능이나 상호작용은 찾아볼 수 없었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*HNNPbp53ayqnWDw3l8zrvg.png" /></figure><p>약간의 자바스크립트는 DOM 노드에 기본적인 기능을 부여할 뿐이었다. HTML 마크업과 자바스크립트 코드는 같은 파일에 존재했다. 이렇게 코드가 체계 없이 엉망이니 종종 메모리 누수가 나타날 수밖에 없었다.</p><p><strong>브라우저 전쟁: 1995–2008</strong></p><p>이러한 웹 페이지 아키텍처는 새로운 브라우저들이 등장하고 기술이 발전하며 전반적인 인터넷 연결이 빨라지며 바뀌기 시작했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8YQgI9jbyPPpzJdZcpbM1g.png" /></figure><ul><li>1995년: 인터넷 익스플로러 1.0이 출시되었고 유일한 경쟁자는 넷스케이프 내비게이터 1.0뿐이었다.</li><li>2003년: 애플이 사파리를 최초로 출시했다.</li><li>2004년: 모질라가 파이어폭스를 최초로 출시했다.</li><li>2006년: 제이쿼리가 전 세계 시장에 처음 등장했다.</li><li>2007년: 애플이 진정한 최초의 “모바일” 브라우저가 탑재된 아이폰 1세대를 출시했다.</li><li>2008년: 구글이 크롬을 최초로 출시했다.</li></ul><p>브라우저가 늘어나면서 일관성 있는 웹사이트를 전달하기는 더 힘들어졌다. 자바스크립트와 렌더링 엔진이 제각각이었기 때문이다. 그래서 브라우저 간의 차이를 막기 위해 새로운 자바스크립트 라이브러리가 몇 가지 등장했다. 모든 플랫폼에 통하는 코드를 작성해야 한다고 느낀 개발자들은 제이쿼리jQuery, 프로토타입 Prototype, YUI를 모두 애용했다.</p><p><strong>자바스크립트와 AJAX의 부상</strong></p><p>새로운 브라우저마다 보이는 행동은 달랐지만 브라우저 전쟁은 모든 브라우저에 새로운 기능을 추가하고 성능을 개선했다는 성과를 올렸다. 모든 브라우저가 CSS 명세서 등을 동일하게 구현하지 않았지만 대부분 같은 작업을 할 수 있다는 사실을 변하지 않았다.</p><p>하지만 2005년 2월 구글 맵스(일반 대중을 겨냥한 최초의 에이잭스 애플리케이션)가 나온 직후, 인터넷은 백팔십도 달라지기 시작했다. 과거의 월드와이드웹은 정적인 웹 페이지가 대부분이었다. 하지만 이제 “웹 애플리케이션” 제작 방식과 관련한 패러다임은 완전히 바뀌었다.</p><p>에이잭스를 사용하자 서버에서 페이지를 완전히 재렌더링할 필요가 없었다. 그 대신 클라이언트 측 애플리케이션이 서버 API와 REST 엔드포인트에 직접 데이터를 요청하고 DOM을 직접 관리했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*n3Cli0tC695S9z6VQWoNQw.png" /></figure><p>2006년 즈음, 기업들은 웹의 잠재력을 깨달았다. 기업의 웹사이트는 더 이상 정적으로 상품을 나열하는 목록이 아니었다. 웹사이트가 곧 상품이 되었고 고객은 어디서든 기업의 애플리케이션에 로그인할 수 있기를 기대했다.</p><p>인터넷의 목적이 변하기 시작하자 그 웹사이트를 만드는 개발팀의 목적도 바뀌었다. 디자인에 인터랙션과 비즈니스 논리를 더해 애플리케이션을 만들 수 있는 숙련된 개발자들이 나타나며 그래픽 디자이너의 수가 늘어났다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Il6QWideNXrgNHFgQbNItA.png" /></figure><p>하지만 이상하게도 새로운 웹 애플리케이션의 근본적인 코드는 불과 몇 해 전 정적인 웹사이트에서 봤던 코드와 큰 차이가 없었다.</p><p>HTML 페이지는 프레임, 폼의 군살을 제거했다. 에이잭스가 부상하며 HTML 파일의 크기는 실제로 줄어들기 시작했다. 클라이언트 측 애플리케이션이 서버 API와 REST 엔드포인트에서 직접 데이터를 요청할 수 있기 때문이다.</p><p>자바스크립트는 더 많은 DOM을 관리했다. 제이쿼리 같은 라이브러리가 있었기에 여러 브라우저에 맞는 앱을 만드는 수고를 상당히 줄어들었다는 사실은 틀림없다. 하지만 여전히 코드의 대부분은 체계가 없었다. 자바스크립트는 아직도 DOM 노트에 붙어 있었고 자주 메모리 누수를 유발했다. 모든 논리를 하나의 파일에 쑤셔 넣는 바람에 크기만 크고 뒤죽박죽인 스파게티 코드가 나왔고, 난해하게 연결된 메서드 탓에 코드를 관리하기도 힘들었다.</p><p>애플리케이션 크기가 작고 웹사이트가 단순하다면 아키텍처를 이해하기 어려워도 골치만 조금 아플 뿐, 일을 그르칠 정도는 아니었다. 하지만 기업형 애플리케이션 얘기라면 아주 큰 문제였다.</p><p>대기업은 새로운 브라우저와 새로운 웹 기술을 신속하게 채택하지 않았다. 하지만 애플리케이션을 웹으로 옮기면서 제이쿼리 같은 라이브러리로는 대규모 애플리케이션을 구축할 때의 문제를 해결할 수 없다는 것을 알아차렸다.</p><p>제이쿼리의 에이잭스/CSS 유틸리티는 분명 유용했다. 하지만 자바스크립트 아키텍처가 아예 존재하지 않아 개발과 장기 유지 면에서 많은 문제가 나타났다. 메모리 누수로 애플리케이션이 제 기능을 하지 못했고, 기능을 추가하려면 몇 주가 아니라 몇 달씩 걸렸다. 새내기 개발자에게 예전의 코드를 가르치기도 불가능했다. 간단히 말해, 기존의 자바스크립트 라이브러리를 이용해서는 기업형 웹 애플리케이션의 규모를 확장할 수 없었다.</p><p>그리고 대기업은 애플리케이션 구축 방법을 표준화해야 했다. 일관성 있는 API와 서버 측 아키텍처는 개발과 유지 비용을 절감했다. 하지만 클라이언트 측에는 그런 것들이 없었기에 기업은 마땅한 방법을 찾으려고 애를 썼다.</p><p>기업은 웹 애플리케이션의 질서를 잡아줄 해결책이 절실히 필요했다. 물론 정말로 앱의 규모가 큰 기업은 엉망진창인 코드를 정리해야 했지만 그에 못지 않게 일관성 있는 애플리케이션 구축 패러다임이 필요했다. 여러 개발팀에 두루 교육이 가능하고 새로운 기능이 추가될 때마다 확장되는 패러다임 말이다.</p><p>2007년 4월 Ext JS 1.0이 출시되었다. 위와 같은 기업의 문제를 해결하려는 최초의 자바스크립트 프레임워크였다.</p><p>Ext JS는 2006년 초 YUI 라이브러리(“yui-ext”라고 부름)의 확장 기능으로 출발했지만 이내 독립적인 라이브러리로 성장했다. 당시에는 나머지 자바스크립트 라이브러리처럼 Ext JS 1.0도 위젯 라이브러리. 그것을 이용해 개발자는 모든 브라우저에 일관적으로 기능하는 리치 인터넷 애플리케이션을 만들 수 있었다. 그러다 2007년 하반기에 독립적인 프레임워크가 된 Ext JS 2.0은 더 많은 위젯, 더 우수한 도큐멘테이션과 모범 사례, 자체 베이스 크로스 브라우저 추상화 계층까지 포함했다.</p><p>2007년의 Ext JS는 다른 자바스크립트 라이브러리와 아주 달랐다. Ext JS는 임의의 자바스크립트를 DOM 노드에 부착하는 대신, HTML이 아닌 자바스크립트에 개발의 초점을 맞추며 웹 애플리케이션에 객체 지향적 프로그래밍과 계승으로 접근했다. 이로써 애플리케이션 프로그래밍의 개념화가 가능해져 끝도 없던 클로저와 스파게티 코드의 패러다임을 끝내고 메모리 누수도 뿌리를 뽑았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SpTCdkd_VRTHBS-XswCylg.png" /></figure><p>Ext JS에서 가장 혁신적인 부분은 컴포넌트 생명주기 였다. 프레임워크 위젯마다 고유의 생명주기가 있어서 개발자는 커스텀 이벤트로 손쉽게 컴포넌트 상태를 수정할 수 있게 되었다. 컴포넌트가 사라지면 이벤트 논리가 적절하게 청소되기 때문에 메모리 누수를 걱정할 일이 없어졌다. 컴포넌트가 DOM에 긴밀히 연결되지 않아 이제 개발자는 HTML와 자바스크립트의 스파게티 코드 관리보다는 기능 추가에 더 많은 시간을 쏟았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*PkH3xgHJbDFaFkPd_S7_nw.png" /></figure><p>2009년에 출시된 Ext JS 3.0은 REST 커뮤니케이션, 차트 만들기 패키지, 더 많은 위젯을 완벽하게 지원했다. 2011년 센차는 MVC 아키텍처를 지원하고 데이터 패키지를 수정하고 차트 라이브러리를 점검해 Ext JS 4.0를 내놓았다. 단지 센차 프레임워크에 국한되지 않고 다른 프레임워크와 비교해서도 그야말로 혁명적인 사건이었다. 왜냐하면 Ext JS는 기업형 웹 애플리케이션의 문제를 바로잡고자 하는 최초의 해결책이었기 때문이다.</p><p><strong>2014: Ext JS 5</strong></p><p>Ext JS 5 출시를 맞이해 센차는 전략을 조금 바꾸었다. 고객이 기존 앱에 들인 노력을 허무하게 만들지 않는 선에서 기업형 애플리케이션의 요구를 충족하는 제품을 신중히 제작하고 싶었다.</p><p>한편으로는 Ext JS 5가 Ext JS 4의 MVC 아키텍처로 구축한 애플리케이션과 완전히 후방 호환되기를 바랐다. 또 한편으로는 개발자의 생산성을 높이고 코드를 덜 복잡하게 만들고 싶었다. 바로 그 목적으로 센차는 MVVM 아키텍처 지원을 추가한 것이다.</p><p>요약하자면 지난 몇 년 간 Ext JS는 진화를 거듭하며 기업형 웹 애플리케이션의 아키텍처 문제를 해결하게 도왔다. 지금부터 MVC와 MVVM 패턴을 더 심층적으로 분석하며 Ext JS가 어떤 문제를 해결하는지 상세히 알아볼 것이다.</p><p><strong>MVC와 MVVM 이해하기</strong></p><p>애플리케이션 아키텍처는 실제 클래스와 프레임워크 코드로 애플리케이션에 구조와 일관성을 제공한다. 우수한 아키텍처를 구축하면 몇 가지 중요한 혜택을 누릴 수 있다.</p><ul><li>모든 애플리케이션이 동일하게 작동하므로 한 번만 배우면 된다.</li><li>여러 앱이 어렵지 않게 코드를 공유한다. 모두 같은 방식으로 작동하기 때문이다.</li><li>개발자들이 서로 중복되고 상충되는 기능을 만들기 어려워졌다.</li></ul><p>이런 혜택은 개발팀의 규모가 크고 다양한 대기업(전 세계에 수백 명의 개발자가 있을 가능성 높다)에 특히 중요하다. 이런 “팀”들은 수시로 바뀌고 프로젝트 기간도 짧게는 몇 주에서 길게는 몇 년까지 다양하다. 그러니 소프트웨어 개발 주기에 많은 시간과 비용을 투자하는 기업은 애플리케이션 구축을 표준화하고 싶은 것이 당연하다.</p><p>애플리케이션 아키텍처 패턴은 여러 가지 있지만 지난 몇 년 동안에는 MVC와 MVVM 두 가지가웹 개발에 가장 많이 사용되었었다. 언뜻 비슷하지만 둘은 미묘하게 서로 다르다. 그 차이를 제대로 이해하지 않으면 애플리케이션의 아키텍처가 엄청나게 달라질 위험이 있다.</p><p>우선 MVC와 MVVM이 무엇인지 설명한 후, 기업이 Ext JS 5로 어떻게 특정한 아키텍처 문제를 해결하는지 살펴볼까 한다.</p><p><strong>MVC란 무엇인가?</strong></p><p>모델-뷰-컨트롤러(MVC)는 소프트웨어를 만드는 아키텍처 패턴이다. 애플리케이션의 사용자 인터페이스를 세 가지로 뚜렷하게 나눔으로써 기능에 따라 코드베이스를 정리해 정보를 논리적으로 표시하게 돕는 역할을 한다.</p><p>원래 1970년대에 고안된 MVC는 최초로 프로그램의 부분마다 “역할” 개념을 도입해 소프트웨어를 만들려 했다. 처음 도입된 이후 MVC는 진화하며 여러 가지 변형(예: MVP, MVVM 등)을 낳았다.</p><p>이렇듯 형태가 다양해졌기 때문에 MVC가 정확히 무엇으로 구성되었느냐에 의견이 분분하다. 하지만 핵심은 다음과 같다.</p><ul><li>모델: 애플리케이션에 사용되는 데이터의 일반적인 포맷이다. 비즈니스 규칙, 유효성 검사 논리, 그 밖의 다양한 기능을 포함할 수도 있다.</li><li>뷰: 사용자에게 데이터를 나타낸다. 다수의 뷰는 같은 모델 데이터를 다양하게 표시할 수 있다(예: 차트와 그리드).</li><li>컨트롤러: MVC 애플리케이션의 핵심이다. 애플리케이션의 이벤트를 리스닝해 모델과 뷰 사이의 명령을 위임한다.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/990/1*W6GRvv3l4_PrnfKFx_8tLA.png" /></figure><p>MVC 아키텍처에서 프로그램의 모든 객체는 모델, 뷰, 컨트롤러 중 하나이다. 사용자는 뷰와 상호작용을 하고 뷰는 모델에 있는 데이터를 표시한다. 컨트롤러는 이런 상호작용을 감시하며 필요할 때 뷰와 모델을 업데이트한다.</p><p>업데이트 지시는 전적으로 컨트롤러의 역할이기 때문에 뷰와 모델은 서로를 대부분 인식하지 못한다. 대개 뷰에는 비즈니스 논리를 아주 소수 들어 있고, 모델은 데이터의 단순한 인터페이스이다. 그 말은 MVC 애플리케이션 내에서 컨트롤러가 애플리케이선 논리를 거의 다 갖고 있다는 뜻이다.</p><p>MVC 아키텍처로 웹 애플리케이션을 만들 때 최고의 장점은 스파게티 코드로 가득한 방대한 파일이 나올 리 없다는 것이다. MVC 는 애플리케이션 각 부분의 역할을 분명히 정의하려 한다. 모든 클래스(예: 모든 파일)마다 분명히 정의된 역할이 있기 때문에 더 큰 환경은 관심을 두지 않는다. 그 덕에 앱의 테스트와 유지가 더 쉬워지고 코드를 재사용할 수 있다.</p><p><strong>MVVM은 무엇인가?</strong></p><p>모델-뷰-뷰모델(MVVM)은 소프트웨어를 만드는 또 다른 아키텍처 패턴이고 MVC 패턴에 크게 의존한다. MVVM은 모든 비즈니스 논리와 GUI 환경설정이 명백하게 분리된 마틴 파울러의 프레젠테이션 모델 디자인 패턴을 특수화하자는 계획으로 탄생했다.</p><p>MVC와 MVVM의 결정적인 차이를 꼽자면 MVVM에는 뷰의 추상화 기능(뷰모델)이 있다는 것이다. 뷰모델은 모델의 데이터와 뷰의 데이터 표시 사이의 변화(예: 데이터 바인딩)를 관리한다. 예전의 MVC 애플리케이션에서는 관리하기 힘들었던 부분이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/808/1*QGGtgBtp9EaYPfRnuu-feg.png" /></figure><p>그 결과 뷰를 직접 조작하는 애플리케이션 논리가 최소화되거나 아예 사라져 모델과 프레임워크가 최대한 많은 작업을 할 수 있다.</p><p>MVVM 패턴은 다음과 같이 구성된다.</p><ul><li>모델: MVC 패턴처럼 애플리케이션에서 사용하는 데이터의 일반적인 포맷을 말한다.</li><li>뷰: MVC 패턴처럼 사용자에게 데이터를 표시한다.</li><li>뷰모델: 뷰와 관련 모델 사이의 변화를 조정하는 뷰의 추상적인 개념이다. MVC 패턴에서 는 특수 컨트롤러의 역할이었지만 MVVM에서는 해당 뷰가 사용하는 데이터 바인딩과 공식을 뷰모델이 직접 관리한다.</li></ul><p><strong>Ext JS 6의 MVC와 MVVM</strong></p><p>이론으로 MVC와 MVVC를 간단히 설명했으니 이제 센차 애플리케이션이 MVC와 MVVM을 어떻게 구현하는지 이야기하려 한다. MVC의 단점은 무엇이고 MVVM가 이런 문제를 어떻게 해결하는지도 살펴볼 것이다.</p><p><strong>Ext JS의 MVC</strong></p><p><strong>클라이언트 측 vs. 서버 측</strong></p><p>기업은 아파치 스트럿츠Apache Struts와 ASP.NET MVC 같은 서버 측 프레임워크로 성공을 거두었다. 그래서 센차도 이 패러다임을 따라 MVC에 접근했다. 하지만 MVC와 MVP, 관련 아키텍처 패턴에 대한 설명을 읽다 보면 분명해지는 사실이 있다. MVC에 대해 모든 이가 동의하는 한 가지 정의는 없다는 것이다.</p><p>2011년 센차가 Ext JS 4에 MVC를 처음 지원했을 때, 예상했던 대로 초기에는 혼란이 있었다. Ext JS는 클라이언트 측 애플리케이션 프레임워크이다. 따라서 센차 “애플리케이션”은 전통적인 서버 측 아키텍처를 따라 “뷰” 안에서 작동된다.</p><p>센차 프레임워크는 서버 측과 무관하기 때문에 센차는 “서버에 대한 아키텍처”에서 “클라이언트에 대한 아키텍처”의 개념을 분리하려 했다. 궁극적으로 센차 애플리케이션은 프로젝트의 하위 계층에 관심을 두지 않기 때문이다.</p><p><strong>Ext JS 애플리케이션 아키텍처</strong></p><p>Ext JS는 웹 애플리케이션 개발에 보편적인 소프트웨어 플랫폼 역할을 한다는 점에서 진정한 “프레임워크”이다. 애플리케이션 코드를 구조화하는 아키텍처 패러다임일 뿐만 아니라 여러 가지 확장 가능한 위젯과 유틸리티로 데이터를 조작한다. 프레임워크가 애플리케이션 생명주기를 통제하기 때문에 개발자는 프로그램의 기능에 집중할 수 있다.</p><p>Ext JS의 MVC 애플리케이션에서는 특정한 클래스가 컨트롤러(Ext.app.Controller)와 모델(Ext.data.Model)을 관리하지만 뷰는 프레임워크의 위젯(전부 Ext.Component에서 상속)을 확장해 정의한다.</p><p>MVC 애플리케이션의 모델, 뷰와 컨트롤러는 분명하게 정의된 명명 규칙을 따르고(예: MyApp.model.User) 이 이름은 파일시스템 안에서의 위치와 관련이 있다(예: ~/app/model/User.js).</p><p>Ext JS 프레임워크는 실시간으로 모든 애플리케이션 종속성을 동적 로딩한다(배포를 위해 선택적으로 컴파일링할 수도 있다).</p><p><strong>컨트롤러: 장점과 단점</strong></p><p>MVC는 잘 정돈된 코드로 기업형 애플리케이션을 만들게 도왔지만 몇 가지 단점도 발견되었다.</p><p>센차의 전문 서비스 및 지원 팀은 고객 애플리케이션 안에 있는 소수의 컨트롤러에서 수천 행의코드가 뻗어 나간다는 현상을 보고했다. 이런 문제가 있으면 앱의 성능이 떨어지고 장기적으로 유지하기가 힘들어진다.</p><p>또한 센차의 MVC에서는 컨트롤러의 범위가 애플리케이션 전체에 미쳤다. 그래서 뷰, 모델, 그 밖의 객체를 참조하려면 비즈니스 논리가 추가로 있어야 했다. 컨트롤러는 어느 시점에서든 어느 객체를 감시할 수 있었으므로, 컨트롤러에 뷰 A와 뷰 B에 대한 논리가 모두 들어 있기 쉬웠다. 이는 가뜩이나 복잡한 대규모 애플리케이션을 더 혼란스럽게 만들었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/922/1*EzdVgHupXtF2tcdOlbitEg.png" /></figure><p>마지막으로, MVC 애플리케이션에는 단위 테스트를 하기 어렵다는 단점이 있었다. 모델, 뷰와 컨트롤러가 느슨하게 연결되어 있어야 했지만, 실상 컨트롤러를 테스트하려면 관련 모델과 뷰에 대한 지식이 필요했다. 컨트롤러는 다수의 뷰에 걸친 이벤트를 리스닝할 때가 많다. 그래서 고객이 개별적인 “단위”를 테스트하려면 이런 종속성 때문에 전체 애플리케이션을 실행해야만 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_y7t5hb77I-435lvGl89bA.png" /></figure><p>쉽게 말해 MVC 아키텍처는 웹 애플리케이션에 아주 유용하고 Ext JS 6는 향후에도 이 패턴을 지원할 것이다. 하지만 분명 몇 가지 단점이 존재하기 때문에 Ext JS 6는 MVVM을 지원함으로써 이런 문제에 대처한다.</p><p><strong>Ext JS 6의 MVVM</strong></p><p>앞에서 설명한 것처럼 전역적인 (분리형) 컨트롤러는 이론상으로 훌륭해 보일 뿐 실제 적용하니 다루기 까다롭다는 커다란 단점이 있었다. MVVM은 뷰를 특정한 뷰모델(그리고/또는 뷰컨트롤러) 인스턴스와 연결해 문제를 해결했다.</p><p><strong>Ext JS 애플리케이션 아키텍처</strong></p><p>Ext JS 6이 MVVM을 지원한다 해도 전반적인 아키텍처는 별로 달라지지 않았다. 모델은 여전히 Ext.data.Model을 확장하고 뷰는 여전히 프레임워크의 특정한 위젯을 확장한다. 뷰모델은 Ext.app.ViewModel라는 새로운 클래스를 이용해 본질적으로 같은 작업을 한다.</p><p>MVVM 애플리케이션의 모델, 뷰와 뷰모델도 예전처럼 명료하게 정의된 명명 규칙을 따른다. 가령 MyApp.model.User는 ~/app/model/User.js와 연결되는 식이다.</p><p>그러므로 Ext JS 4.x로 작성된 애플리케이션은 아무런 아키텍처 문제 없이 Ext JS 5.x로 업그레이드할 수 있어야 한다.</p><p><strong>뷰모델</strong></p><p>MVC와 MVVM의 가장 큰 차이는 뷰모델이다. 높은 계층에서 MVC 컨트롤러와 MVVM 뷰모델은 아주 흡사하다. 하지만 뷰모델은 이벤트가 아니라 데이터 바인딩을 통해 모델과 뷰의 업데이트한다는 차이가 있다.</p><p>뷰모델은 컴포넌트의 생명주기에도 관여한다. 뷰가 생성될 때마다 환경설정된 뷰모델 고유의 인스턴스도 생성된다. 연관된 뷰가 사라지면 뷰모델도 뒤이어 사라진다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/688/1*DTurP5HVxuV63por_w_14g.png" /></figure><p><strong>뷰컨트롤러</strong></p><p>비록 이름은 모델-뷰-뷰모델이지만 Ext JS의 MVVM 패턴은 여전히 컨트롤러를 사용할 수 있다. 그래서어떤 이는 하이브리드 MVC+VM 아키텍처라는 이름으로 부를 수도 있다. 복잡한 머릿글자는 제쳐 두고 요점만 보자. 두 가지 방법은 각각의 메리트가 있고 Ext JS 6는 유연하게 두 가지를 모두 지원한다는 사실이다.</p><p>Ext JS 4에 도입된 MVC 컨트롤러는 애플리케이션의 전역적인 이벤트 리스너 개념이었고(예: 발행/구독 모델 또는 이벤트 버스) Ext JS 5도 그 개념을 아직 지원한다. 하지만 Ext JS에는 뷰컨트롤러라는 새로운 형태도 존재한다.</p><p>Ext JS의 뷰컨트롤러와 뷰모델는 서로 비슷하다. 둘 다 연관된 뷰를 직접 탐색하는 구조이다. 그래서 MVC에 필요했던 추가 작업을 대부분 제거해 객체 레퍼런스를 관리하고 애플리케이션 상태를 복원한다.</p><p>또한 뷰컨트롤러는 기존 Ext JS 4의 MVC 컨트롤러와 유사해서(예: 애플리케이션 전체에 범위가 미친다) 이벤트를 리스닝한 후 논리를 실행한다. 그러나 뷰컨트롤러와 전형적인 컨트롤러는 다음과 같은 점에서 크게 다르다. 뷰컨트롤러는 연관된 뷰에 따라 개별적으로 생성되는 반면, 컨트롤러는 다수의 뷰를 전역적으로 리스닝하는 하나의 구성체라는 점이다.</p><p>그리고 뷰컨트롤러 덕부네 개발자는 선언적 리스너를 작성할 수 있다. 결과적으로 애플리케이션 코드가 단순해지고 뷰는 비즈니스 논리에 얽매이지 않는다.</p><p>마지막으로, 뷰컨트롤러와 뷰모델은 컴포넌트 생명주기에 관여한다. 뷰가 생성될 때마다 환경설정된 뷰모델과 뷰컨트롤러 고유의 인스턴트도 생성된다는 뜻이다. 연관된 뷰가 사라지면 뷰모델과 뷰컨트롤러도 뒤이어 사라진다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/874/1*na7GRvqKuCYtZoEEDa8BEw.png" /></figure><p>이렇게 뷰와 뷰컨트롤러(그리고/또는 뷰모델)가 긴밀히 연결된 결과, Ext JS 애플리케이션의 단위 테스트가 무척 쉬워졌다. MVVM으로는 비대한 전역적 컨트롤러를 작성할 필요가 없기 때문에 컴포넌트를 완전히 분리해 테스트할 수 있다.</p><p>Ext JS의 MVVM 패턴에서는 뷰컨트롤러나 뷰모델이 없는 뷰도 존재한다는 사실을 꼭 기억하자. 뷰컨트롤러와 뷰모델은 아키텍처의 선택 사항일 뿐이다.</p><p><strong>결론</strong></p><p>Ext JS 4는 일관적인 아키텍처를 정의해 코드를 정리함으로써 기업형 웹 애플리케이션이 MVC를 사용하도록 길을 닦아놓았다. Ext JS 6는 MVC의 성공을 기반으로 MVVM을 지원하면서 후방 호환성을 유지한다. 개발자는 Ext JS 4와 MVC로 구축한 앱을 문제 없이 최신 버전으로 업그레이드할 수 있고, 애플리케이션 아키텍처를 다시 세우지 않아도 된다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1_1mguA7xyznWAjDq9tV-g.png" /></figure><p>기업형 웹 애플리케이션에 있어 클라이언트 측 MVC는 혁신적인 발전을 이룩했다. 체계가 없던 스파게티 코드를 해결하고 애플리케이션의 확장성을 높였다. 이런 MVC에 데이터 바인딩과 선언적 리스너를 통합한 MVVM은 많은 코드를 제거하고 애플리케이션의 단위 테스트를 쉽게 만들어낸 것이다!</p><p><strong>추가 정보</strong></p><p>HTML5 를 활용하는 데 센차가 어떤 도움이 될 수 있는지 더 많은 정보는 <a href="http://www.sencha.com">www.sencha.com</a> 에서 확인할 수 있다. (국내에서는 미래웹 <a href="http://www.miraeweb.com">www.miraeweb.com</a> 을 통해서 상담 및 컨설팅이 가능하다)</p><p><strong>Resources:</strong></p><ul><li><a href="https://www.sencha.com/blog/ext-js-5-mvc-mvvm-and-more/">Ext JS 5: MVC, MVVM and more!</a></li><li><a href="https://www.sencha.com/blog/understanding-sencha-cmd-packages/">Understanding Sencha Cmd Packages</a></li><li><a href="http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/">Model-View-ViewModel for iOS</a></li><li><a href="http://www.infragistics.com/community/blogs/todd_snyder/archive/2007/10/17/mvc-or-mvp-pattern-whats-the-difference.aspx">MVC or MVP Pattern — What’s the Difference?</a></li><li><a href="http://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference">StackOverflow: What are MVP and MVC and what is the difference?</a></li><li><a href="http://martinfowler.com/eaaDev/uiArchs.html">GUI Architectures</a></li></ul><p><em>[역자주 : 본 문서는 아래 문서를 한글화 한 것입니다]</em></p><p><em>Making Sense of Application Architecture Choices</em></p><p><a href="http://pages.sencha.com/app-architecture-choices.html"><em>http://pages.sencha.com/app-architecture-choices.html</em></a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e446a0f46d8c" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[구조화된 프론트엔드 개발로 빠른 결과를 얻는 법]]></title>
            <link>https://medium.com/@manyoung/%EA%B5%AC%EC%A1%B0%ED%99%94%EB%90%9C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EB%A1%9C-%EB%B9%A0%EB%A5%B8-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EC%96%BB%EB%8A%94-%EB%B2%95-78d6a31cc27b?source=rss-f3f2571539db------2</link>
            <guid isPermaLink="false">https://medium.com/p/78d6a31cc27b</guid>
            <category><![CDATA[extjs]]></category>
            <category><![CDATA[sencha]]></category>
            <category><![CDATA[html5]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[architecture]]></category>
            <dc:creator><![CDATA[ManYoung Cho]]></dc:creator>
            <pubDate>Thu, 17 Nov 2016 07:58:39 GMT</pubDate>
            <atom:updated>2016-11-17T07:58:39.416Z</atom:updated>
            <content:encoded><![CDATA[<p><strong>들어가며</strong></p><p>지난 몇 년 동안 서버 사이드 개발자는 모듈 방식과 코드 재사용 같은 고급 기술을 활용하고 있었지만, 프론트엔드 개발자는 체계 없는 스크립팅, 아무렇게나 뒤섞인 플러그인과 라이브러리에 의존해 작업을 해왔다. 본 보고서에서는 센차 기술을 이용한 컴포넌트 기반의 개발을 통해, 서버 측 개발의 생산성과 체계성을 프론트엔드와 모바일 개발에 적용하는 방법을 소개하고자 한다.</p><p>최근 다수의 자바스크립트 “마이크로 프레임워크”의 수가 급증하며 웹에 풍부한 콘텐츠와 미디어를 빠르게 전송하려는 수요에 단순성을 추가하려 하고 있다. 하지만 마이크로 프레임워크 스택(예: 제이쿼리 JQuery, 프로토타입 Prototype, 앵귤러JS AngularJS, 백본 Backbone 등)의 디자인 패턴과 일반적인 유틸리티가 정말로 대기업의 웹 개발 생산 가치를 높였을까?</p><p>과거를 돌이켜 보면 성공 사례가 여럿 있다고 할 수 있다. 특히 UX 디자인/개발 팀의 규모가 작고 체계가 잘 잡혀 있을 경우에는 더욱 그렇다. 하지만 CRM, ERP, 데이터 마이닝/분석 등 임무 수행에 필수적인 사업 애플리케이션에 대규모로 배포해야 하는 기업이 질서가 없는 기술 스택에서 쓸 만한 가치를 골라 전달하기는 여간 까다로운 일이 아니었다. 기업은 디자인, 구현, 장기 유지의 규모만으로 예전의 소비자 대면 방식을 훨씬 뛰어 넘어 전형적으로 규정된 방식을 채택해야 했다.</p><p><strong>도큐먼트 모델</strong></p><p>1990년대와 2000년대 초반 신클라이언트 HTML 패러다임이 진화했을 때 그것은 이미 가치 있는 자산인 콘텐츠(종류 불문)에 HTML 뷰를 “생성”만 함으로써 기존의 백엔드 인프라를 증가시키는 단순한 요소로 보였다. 실제로 테이블이 생성되었고, 전송된 차트 이미지가 스크롤링으로 뷰에 나타났으며, 폼이 선택 가능한 입력 수단의 핵심이 되었다.</p><p>그러나 이제 전체 서비스 스택은 새로운 전략 패러다임을 지원하려면 웹의 “무상태성”과 기업의 상호교환성 사이에서 가교 역할을 해야 했다. 과거의 멀티페이지 뷰를 지원하기 위해 자동화된 프레젠테이션의 새 레이어가 꽃을 피웠다. PHP, 콜드퓨전ColdFusion, JSP, JSF, .NET, 스프링Spring 등 서버 측 “스크립팅이 가능한 기능script-ables”은 모두 빠른 속도로 발달하며 변화를 뒷받침했다.</p><p>고전적인 도큐먼트 기반의 전송 모델은 (비록 인공호흡이 필요했지만) 여전히 건재하다. 가치 있다고 여겨지는 자산(예: 콘텐츠, 미디어, 데이터)은 오로지 ‘렌더링’ 작업만 하는 수천 가지의 초창기 서버 팜에서 마크업 스트림으로 간단히 전송되었다. 그 결과로 “템플레이팅된” 페이지 출력이 생기며 생산성을 많이 끌어올렸다. 하지만 고객에게 진정한 상호적인 경험을 제공하기에는 아직 역부족이었다.</p><p>설상가상으로 1990년대와 2000년대 초반에는 브라우저 전쟁이 치열하게 벌어지고 있었다. IE6이출시된 2001년까지 마이크로소프트 인터넷 익스플로러는 소비자 브라우저 시장의 80% 이상을 차지했다. 하지만 이후 애플 사파리(2003), 모질라 파이어폭스(2004), 구글 크롬(2008) 등이 속속 등장하며 웹 개발 분야를 바꾸어놓았다.</p><p>인터넷 브라우저가 제각각인 데다 HTML, 자바스크립트, CSS 구현에 일관성이 없으니, 원하는 상호적인 경험은 고사하고 템플릿 페이지 콘텐츠를 전달하기도 더 어려워졌다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FZ8erQ5OjEw4ctsV3byUoQ.png" /></figure><p>2005–2006년 무렵부터 자바스크립트 라이브러리(예: 프로토타입, 제이쿼리)는 웹 개발의 크로스 브라우저 시맨틱을 단순화하기 시작했다. 이런 자바스크립트 라이브러리가 떠오르며 과거의 고전적인 데스크톱과 달리 시각화, 폼 조작, 에이잭스AJAX를 통해 동적으로 로딩한 콘텐츠, 유저 이벤트 인터랙션을 추가하기 쉽게 되었다.</p><p>개발자들은 새로운 기능들을 열렬히 환영했다. 갑자기 폼 기반의 애플리케이션에 단순한 “제출Submit” 버튼 그 이상의 권한이 생기자, 진정 상호적인 웹 경험으로 가는 길에 더 이상 장애물은 존재하지 않았다. 유틸리티 라이브러리가 경쟁적인 브라우저 시장을 평준화하면서 고급 내비게이션, 인터랙티브 미디어, 그 밖의 시각적 효과가 진화했다. 여러 브라우저에 기준과 기능이 생겨나고 있었지만 개발 생산성은 하루가 다르게 치솟았다.</p><p><strong>인재 풀</strong></p><p>“인간의 가장 위대한 자산은 인간의 정신 그 자체이다”라는 말이 있다. 우리의 일생생활을 둘러싼 비즈니스/소셜 업계에도 영락없이 통하는 말이다. 아주 상호적인 동물로서 인간은 비즈니스 도구도 상호적이기를 기대한다. “이걸 요약하고 저걸 검색해서 의미 있는 세상을 보여다오!” 안 될 것 없지 않은가? 좋든 나쁘든 그것은 우리 생활에 꼭 필요한 요소가 되었다.</p><p>자바스크립트 유틸리티 라이브러리와 초기 프레임워크가 처음 도입되며(이후 진화하며) 웹의 노동 인구도 그에 발을 맞추었다. 새롭고 흥미진진하며 광범위한 사용자 표시 매체가 등장했고 여기저기서 차용되었다.</p><p>2000년대 초반, 많은 기업은 몇 가지 브라우저만 지원하는 웹사이트를 구축했다. 하지만 사실 그배경에는 두 가지 원인이 있었다.</p><ol><li>당시에는 브라우저의 기능이 한정되어 있었다.</li><li>경쟁 브라우저와의 미묘한 차이를 완벽하게 이해하는 개발자가 몇 명 없었다.</li></ol><p>그럼에도 인터넷 인구가 급증하고 자바스크립트 라이브러리 통합이 쉬워지면서 웹 개발 노동 인구는 빠른 속도로 증가해 향후 십 수 년 간 시장을 지배했다. 하지만 오늘날 개발/지원 관리자가 아직도 어쩔 수 없이 치러야 할 대가가 있다. 바로 특정 프레임워크에 대한 선호도이다.</p><p>대개 그런 도구를 사용하며 처음에는 프로토타입과 제이쿼리에 대한 선호도가 생긴다. 실제로 프로토타입과 제이쿼리는 오늘날 간소화된 DOM, 이벤트, 레이아웃 관리는 물론 1세대 데이터 바인팅 컴포넌트와 템블릿 엔진에 대한 기준을 설정했다. 대체로 이런 라이브러리들은 지속적으로 진화하는 브라우저 렌더링 엔진들에서 미묘한 차이를 끌어냈다.</p><p>그러나 2007–2008년에 들어서며 다른 라이브러리와 프레임워크도 등장했다. 특히 기업에서는 상호적인 “웹 애플리케이션”이라는 개념을 받아들이기 시작하면서 웹 개발에 DOM을 기반으로 접근하는 방법을 대체하는 YUI, Dojo, Ext JS가 개발되었다. 이와 같이 더 거대하고 종합적인 프레임워크는 통합된 위젯과 유틸리티를 자랑하기 때문에 크로스 브라우저 애플리케이션의 신속한 개발이 가능해졌다.</p><p>2000년대 중반에서 후반에 이르자, 개발자들은 기술 방향을 크게 두 가지로 고려해야 했다.</p><ol><li>고전적인 마크업 장식(템플레이팅), 저레벨 CSS, 에이잭스 기본형</li><li>백엔드 서비스 환경에서 발견되는 진정한 객체 기반(OOP/MVC) 패턴을 따르고 이상적으로 단순한 방법을 이용해 규모가 큰 애플리케이션의 스타일링하기</li></ol><p>편리하다는 인식으로 첫 번째를 선택하는 개발자는 사업 목표를 달성하기 위해 자신이 가장 익숙하다고 생각하는 하나 이상의 라이브러리를 선택한다. 시간이 지나며 선호가 결정되고 안정적인 환경이 자리를 잡는다. 논쟁의 소지가 많을 때는 개인적인 선택이 면접 주제와 기획 회의의 핵심이 되는 경우가 많았다.</p><p>하지만 기능이 풍부한 컴포넌트는 직접 제작해야 했고, 12개 이상의 브라우저 유형에서 “슈퍼 데이터 테이블”이 작동하게 만들려면 상당한 기술을 요했다. 개발자의 높은 이직률에 더해 “과거의 코드” 유지는 큰 문제가 되었고, 일관성 있는 애플리케이션 구조가 없어 엉망인 “스파게티 코드”가 결과로 나왔다.</p><p>두 번째를 선택하는 개발자는 프로토타입과 제이쿼리 같은 작은 유틸리티 라이브러리를 넘어 더 거대하고 종합적인 프레임워크(예: YUI, Ext JS)를 찾는다. 이 집단에서도 각기 선호하는 프레임워크 가 있지만 웹 애플리케이션 개발에 객체를 기반으로 접근하는 한편 선호하는 프레임워크 구조를 택하자 코드가 깔끔해지고 유지 문제도 줄어들었다. 기능이 풍부한 컴포넌트는 프레임워크에 존재하는 위젯에서 쉽게 확장할 수 있었다. 대부분의 프레임워크가 특정한 패러다임을 따르기 때문에 개발자 이직률과 “과거의 코드”는 문제가 되지 않았다.</p><p><strong>서비스 지향 아키텍처(SOA)의 등장</strong></p><p>주류 에이잭스 라이브러리와 도구가 등장하며 단지 미디어 콘텐츠와 데이터셋을 전송하는 비용을 줄이기 위해 서버 아키텍처가 채택되었다. 예전의 풀 페이지 생성 프로세스는 매개 중심의 서비스 아키텍처로 대체되었다. 2010년 여러 기업의 개발팀은 백엔드 아키텍처로 방법을 바꾸고 MVC(그 밖에 등장한 변형들 포함)와 웹 서비스 API(REST, SOAP 등)를 결합했다.</p><p>클라이언트 측에 MVC 디자인 패턴을 도입하자 새로운 방법으로 체계적인 개발을 하며 다수의 소비자를 지원할 수 있었다. 또한 더 방대한 시스템에 단위 시험과 검수 시험을 더 많이 할 수 있게 되었다. 브라우저의 경우, 모델과 뷰의 개념으로 명백하게 관심사가 분리되었고, 재사용 가능한 컴포넌트와 모델 저장 구조를 다수의 사업 계획에 동시다발적으로 활용했다. 이런 수요에 기존의 자바스크립트 라이브러리와 프레임워크는 다양한 방식으로 반응했다. 2012년 즈음 새로운 라이브러리, 애드온, 지원 플러그인이 다수 탄생하며 다른 라이브러리 저작자가 만든 기존 인기 스택의 범위를 넓혔다.</p><p>돌이켜 보면 최근의 이런 변화를 몇 가지로 정리할 수 있겠다.</p><ul><li>“세분화된 모듈 라이브러리”로 접근하는 방법은 더욱더 “세분화”되었다. 언제부터인가 이처럼 추가적인 상위 라이브러리의 종속성을 관리하는 작업은 또 다른 “모듈”(예: RequireJS)이 맡아서 처리했다.</li><li>광범위하게 분포된 공용 서버 또는 방대한 내부 코드 저장소에서 수많은 종속성을 모으려 하기 때문에 초기 페이지/애플리케이션 로딩 시간이 2배(때로는 3배)로 늘었다.</li><li>개발 중에는 “생산성 관점”에 마음이 끌릴지 모르지만, 이제 “구축 프로세스”는 애플리케이션 자체의 일부가 되어서 사용자는 느린 애플리케이션을 시작하는 것이 참기 힘들다고 생각한다.</li><li>대개 8개 이상의 종속 라이브러리에 대해 장황하게 출시 영향 분석을 해야 하니 지속적인 유지 시간이 길어졌다. 새로운 브라우저가 출시만 되어도 각각의 종속 라이브러리가 전체 유저 베이스에 대한 영향을 평가하면서 1년에 적어도 2회는 종속성 영향 주기가 완전하게 나타난다. 그 결과, 제품 출시 일정은 한두 가지가 아니라 여러 요소의 영향을 받는다.</li><li>유틸리티 라이브러리는 사전에 구성품을 많이 포함하지 않은 채로 전송된다. 고급 데이터 시각화와 폼 유효성 검사 컴포넌트는 처음부터 자체 개발하거나(그 과정에서 광범위한 브라우저 호환성을 유지해야 한다) 커뮤니티에서 또 다른 종속성을 통해 가져와야 한다. 이 경우 동적으로 로딩할 때와 동일한 품질을 보장하지 않는다.</li><li>신참 개발자는 오픈 라이브러리에서 다양한 MVC, MVVM 관련 패턴 때문에 원치 않는 좌절감을 느낄 수 있다. 모든 프로젝트 담당자가 저마다 선호하는 프레임워크가 있으므로 의견 일치를 보기 힘들어 “최고”의 패턴/제품을 선택하기 어려워졌다.</li><li>다수의 부수적인 라이브러리에서 도큐멘테이션, 중요한 튜토리얼, 지속적인 지원은 아예 존재하지 않거나 최소한으로만 존재했다. 솔루션을 처음으로 사용하는 이는 사용 가능한 지원 도구가 부족해 저작자의 구현 방식을 적절히 이해하지 못할 수 있다.</li><li>다양한 자바스크립트 라이브러리가 완전한 스택을 갖추며 내부적으로 새로운 개발자 교육을 하기 힘들어졌다. 복잡한 관계와 연쇄적인 종속성은 거의 문서로 남기지 않기 때문이다.</li></ul><p>SOA는 분명 굉장한 혁신을 가져왔지만 그 결과로 클라이언트 측에 발생한 단편화는 기업 애플리케이션에 그리 적합하지 않았다. 간단히 말해, 모듈형 라이브러리 스택에 초세분화된 방식으로 접근하자 시스템 통합, 구축 프로세스, 출시 주기, 번거로운 유지 작업에 많은 문제가 생겼다는 뜻이다. 반면, 더 종합적인 자바스크립트 프레임워크 접근법을 선택한 프론트엔드 개발자들은 기업의 요구에 맞춰 더 일관성 있고 신뢰할 수 있는 패턴에 정착했다.</p><p><strong>완전한 기능의 프레임워크 대 모듈형 라이브러리 스택</strong></p><p>2005년 주류 자바스크립트 유틸리티 라이브러리가 등장한 직후, 자바스크립트 “프레임워크”라는대체 구현 방식이 도입되었다. 개발 시작 단계에서 Ext JS 같은 제품은 웹 기반의 애플리케이션 개발의 기술을 더욱 단순화했다. 컴포넌트 전체를 확장할 수 있고, 갈수록 진화하는 서비스 아키텍처에서 제공하는 거대한 데이터셋을 관리하는 공식 전략이 존재하기 때문에 가능했다.</p><p>이 아키텍처를 근본으로 삼아, 현재에는 자바스크립트 프레임워크 사이에서도 공식적으로 MVC 디자인 패턴을 광범위하게 사용하고 있다. 2010년 클라이언트 측 전송 지원을 하는 최초의 자바스크립트 프레임워크 센차 터치가 나왔고, 그 직후인 2011년 Ext JS가 뒤를 따랐다.</p><p>이렇게 등장한 제품들은 근본적으로 강력한 추출 기능을 제공해 복잡한 크로스 브라우저 HTML 시맨틱, 복잡하고 동적인 DOM 구조, 아주 단순화된 이벤트 관리에서 개발자들을 자유롭게 했다. 종래의 템플레이팅을 사용하면(서버에서 생성한 마크업을 통해) 몇 주나 걸리던 작업이 단순한 객체와 가벼운 스크립팅으로 며칠 만에 완성 되었다. 지나치게 많은 페이지 생성 서버를 단계적으로 중단하고 고성능 SOA로 전환하자 자본 지출이 낮아지고 유지 비용이 절감되었으며 사업 운영도 단순해졌다.</p><p>논리(모델 그리고/또는 컨트롤러)와 표시(뷰)를 확실하게 분리하자 애플리케이션 개발 자체를 재구성하는 새로운 방법들이 탄생했다. 사용자 인터페이스 디자인과 스타일링을 가장 잘 처리하는 인력은 서비스/통합 개발과 비교적 독립적으로 작업을 완수할 수 있었다. 백엔드 서비스 개발을 하며 성장한 개발자(예: HTML이나 CSS 스킬이 없다)는 모델/스토어/서비스 통합에 초점을 맞출 수 있다. 한편 프론트엔드 개발자는 뷰와 보기 좋은 프레젠테이션에 집중하면 된다.</p><p>2007년 처음 출시된 Ext JS는 이후 라이벌로 등장한 라이브러리와 프레임워크 대부분을 꺾고 지금까지 명맥을 이어오고 있다. 최근 Ext JS 5 출시로 증명되었듯, 종합적인 컴포넌트, 차트, 데이터 관리 요소, 비주얼 디자인 도구, 강력한 구축 자동화 툴킷을 집대성한 것은 센차뿐이다.</p><ul><li>HTML 템플레이팅 엔진</li><li>MVC와 MVVM 아키텍처 패턴을 모두 지원</li><li>URL 라우트</li><li>모델과 데이터 통합 레이어(완벽한 트랜잭션 코디네이션과 RPC 바인딩으로)</li><li>곧바로 사용 가능한 차트와 컴포넌트가 100여 개</li><li>완전한 확장성을 갖춘 종합적인 클래스 시스템</li><li>쉽게 환경을 설정할 수 있는 객체로 개발 프로세스 단축</li><li>크로스 브라우저와 멀티 디바이스 지원</li><li>다수의 (확장 가능한) 테마</li><li>종속성 관리 자동화</li><li>통합적인 구축/배포 도구</li><li>완전한 API 도큐멘테이션, 튜토리얼, 온라인/인라인 샘플</li><li>전 세계적인 교육과 지원</li><li>전문 서비스</li><li>확립된 공개 포럼과 커뮤니티(전 세계 개발자들 200만 명 이상 포진)</li></ul><p><strong>결론</strong></p><p>현실을 직시하자. 초창기 자바스크립트 라이브러리가 없었더라면 오늘날 우리가 아는 웹은 전혀 다른 위치에 있었을지도 모른다. 초기 자바스크립트 라이브러리는 여러 면에서 효율적이고 능률적인 작업을 만들었고, 진화하는 웹 표준에 영향을 미쳤고, 미래에 대한 상상력을 자극했으며, 현재의 경험을 몹시 향상시켰다.</p><p>“마이크로 프레임워크”라는 세분화된 기능 스택과 완전한 기능을 갖춘 프레임워크를 모두 견딘 사람은 각각의 방법에 장점이 있다고 인정할 것이다. 전문가들은 “프레임워크”가 개발자의 자유와 아키텍처 표현을 너무 엄격하게 옥죄었다고 주장할 수 있다. 단순한 콘텐츠와 미디어 전송 프로젝트라면 그 주장이 어느 정도 일리가 있다. 하지만 기업형 애플리케이션 개발은 다양한 요구를 수용해야 한다. 그 점을 감안하면 일관성 있는 애플리케이션 아키텍처, 생산성 표준, 명백하게 정의된 모범 사례를 제공하는 Ext JS 5 같은 종합적인 프레임워크는 상당한 가치가 있다고 할 수 있다.</p><p>전체적인 규모의 기업용 웹 개발을 할 때, 센차 Ext JS 프레임워크는 자주 사용되는 “마이크로 프레임워크”와 비교해 여러 가지 핵심적인 장점이 있다. 견고하면서 확장성 있는 UI 위젯, 유연하고 확장/축소가 용이한 애플리케이션 아키텍처, 객체 지향적 클래스 시스템은 개발 시간을 절약해준다. 그리고 유지 비용을 현저히 낮추고 제품의 품질도 향상시킨다. 제멋대로인 기술 스택과 단기적인 인력 풀로 겪는 문제를 줄여줌으로써, Ext JS를 사용하는 기업은 기하급수적인 속도로 엔드 유저에 놀라운 애플리케이션을 전달할 수 있다.</p><p>종합적인 프레임워크를 사용하는 장점과 센차 기술을 이용한 컴포넌트 기반의 개발 등에 대해 더 자세히 알고 싶다면 “<a href="http://www.miraeweb.com/single-post/2016/11/16/%EB%AA%A8%EB%8D%98-%EC%9B%B9-%EC%8A%A4%ED%83%9D-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D">모던 웹 스택 심층 분석</a>” 을 참고하기 바란다.</p><p><strong>추가 정보</strong></p><p>HTML5 를 활용하는 데 센차가 어떤 도움이 될 수 있는지 더 많은 정보는 <a href="http://www.sencha.com">www.sencha.com</a> 에서 확인할 수 있다. (국내에서는 미래웹 <a href="http://www.miraeweb.com">www.miraeweb.com</a> 을 통해서 상담 및 컨설팅이 가능하다)</p><p><em>[역자주 : 본 문서는 아래 문서를 한글화한 것입니다.]</em></p><p><em>Achieving Faster Results with Structured Front-End Dev</em></p><p><a href="http://pages.sencha.com/Achieving-Faster-Results-with-Structured-Front-End-Development.html"><em>http://pages.sencha.com/Achieving-Faster-Results-with-Structured-Front-End-Development.html</em></a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=78d6a31cc27b" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[웹기술의 부상으로 인한 개발팀의 당면과제 리서치 보고서]]></title>
            <link>https://medium.com/@manyoung/%EC%9B%B9%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%B6%80%EC%83%81%EC%9C%BC%EB%A1%9C-%EC%9D%B8%ED%95%9C-%EA%B0%9C%EB%B0%9C%ED%8C%80%EC%9D%98-%EB%8F%84%EC%A0%84%EA%B3%BC%EC%A0%9C-9cd8e069ef24?source=rss-f3f2571539db------2</link>
            <guid isPermaLink="false">https://medium.com/p/9cd8e069ef24</guid>
            <category><![CDATA[productivity]]></category>
            <category><![CDATA[sencha]]></category>
            <category><![CDATA[extjs]]></category>
            <category><![CDATA[web]]></category>
            <category><![CDATA[html5]]></category>
            <dc:creator><![CDATA[ManYoung Cho]]></dc:creator>
            <pubDate>Fri, 28 Oct 2016 08:23:20 GMT</pubDate>
            <atom:updated>2016-11-16T05:48:11.029Z</atom:updated>
            <content:encoded><![CDATA[<p>복잡해지는 개발난이도와 높은 생산성 요구에 어떻게 대처해야 할 것인가</p><blockquote>[역자주 : 본 문서는 아래 문서를 한글화 한 것입니다]</blockquote><p><a href="http://pages.sencha.com/Forrester_Research.html">The Rise of Web Technology</a></p><p><strong>조사 방법</strong></p><p>본 연구에서 포레스터는 모바일과 앱 개발과 유지에 관여하는 전 세계 124명의 관리자를 대상으로 온라인 조사를 실시했다. 조사에 참여한 기업은 소매업, 미디어/커뮤니케이션, 공익사업, 정유, 통신, 금융 서비스, 보험, 의료 산업에 종사하는 미국과 영국, 독일의 대기업(직원 1,000명 이상)이었다. 참여자는 모두 기업 내에서 프로젝트 매니저 이상의 지위였고, 조사에 시간을 내어 고맙다는 의미로 소정의 인센티브를 제공받았다. 조사는 2015년 3월 시작되어 종료되었다. 이 보고서에서 기업의 성공을 구분하는 기준은 모바일과 앱 애플리케이션의 성공이었다.</p><blockquote>역자주 : 본 문서에서는 성공적인 기업과 성공적이지 못한 기업들의 상황을 비교해서 조사 결과를 도출하는데 여기서 말하는 성공적인 기업의 기준은 이번 설문에 참여한 회사들중에서 자사에서 출시한 웹/모바일 서비스중 성공사례가 75% 이상이 되는 기업들을 성공적인 기업으로 정의하고 있다. 다만 자사에서 출시한 서비스의 성공 실패 사례에 대한 기준은 이번 조사 응답자의 주관이 많이 개입될 수 있는 요소이며 성공 실패 사례를 75% 이상 이하의 수치로 단순히 정량화 시키기는 어려운 관계로 이런 부분을 감안하고 본 리서치 결과 보고서를 읽어보시기를 권한다.</blockquote><h3>요약 및 개요</h3><p>기업은 고객에게 무척 정교한 웹/모바일 애플리케이션을 내놓아야 한다는 막대한 부담감을 안고 있다. 그리고 고객은 정교한 애플리케이션을 데스크톱, 태블릿, 스마트폰 등 다양한 기기에서 접근할 수 있기를 기대한다. 변화 속도가 빠른 세상에서 시장에서 뒤쳐지지 않으려면 웹/모바일 애플리케이션에 대해 급변하는 소비자의 요구를 충족해야 한다.</p><p>2015년 3월, 센차의 의뢰로 포레스터 컨설팅은 웹 애플리케이션 팀과 자원을 담당하는 북아메리카와 서유럽 관리자 120명에게 온라인 조사를 실시했다. 목적은 웹/모바일 애플리케이션 개발을 하는 데 핵심적인 시장 트렌드, 도전 과제, 모범 사례를 이해하는 것이었다.</p><p>조사를 실시하자 웹 기술이 기업의 웹/모바일 애플리케이션 전략에 나날이 중요한 역할을 한다는 결과가 나왔다. 기업은 복잡한 앱 개발과 유지 환경을 관리하고 소비자 요구를 충족하는 동시에 개발 속도를 높이고 제품의 품질과 전반적인 개발 생산성 증진하려 하고 있다.</p><p>네이티브 언어 개발에서 벗어나는 변화도 눈에 띄었다. 기업의 27%는 네이티브 언어 개발을 버리고 웹 기술로 전환하려는 계획을 하고 있었다. 이때 웹 기술로 전환하려는 가장 큰 이유는 개발 효율성 증진이었다.</p><p>기업들의 보고에 따르면 소프트웨어 개발 생명주기중 “개발 단계”가 비용과 일정이 초과될 가능성이 가장 높았다. 개발팀은 회사 내부 B2E 앱들중 절반가량은 최소 3년 넘게 사용할 수 있도록 제작할 것과 이 기간 동안 수시로 다양한 운영체제와 디바이스에 적합하게 배포할 것을 요구받는다.</p><blockquote><em>[역자주: Business to Employee, 인트라넷이나 ERP와 같은 사내 직원용 애플리케이션. 사내 시스템은 만드는 것에서 그치는 것이 아니라 추후 장기간에 걸친 유지보수가 필연적이라는 의미]</em></blockquote><p>이런 요구를 충족하려면 기업은 고객의 기호에 맞춰 웹과 모바일에 두루 작동하는 애플리케이션(웹과 모바일 모두 현재는 물론 미래에도 존재할 것이기 때문이다)을 제작할 수 있는 기술과 플랫폼에 투자할 필요가 있다. 성공한 기업은 현명한 투자를 하고 유연하게 변화에 적응할 것이다.</p><p><strong>중요 발견 사항</strong></p><p>포레스터는 이번 조사에서 세 가지 중요한 사항을 발견했다.</p><p><strong>개발팀에 대한 요구사항은 증가하는데 반해 요구를 수용할 수 있는 역량은 충분치 않다. </strong>대부분의 성공적인 애플리케이션은 고도로 복잡하고 정교한 구조를 필요로 하지만 현재 상황은 이에 대응할 개발자의 역량을 높이기 위한 아무 조치없이 일정만 단축하기를 요구하고 있었다.</p><p><strong>성공을 가로막는 가장 큰 장애물은 배포와 보안이다</strong>. 다양한 기기가 급증하면서 모든 기기에 맞춰 개발하고 배포해야 한다는 어려움을 생겼다. 마찬가지로 기업은 다수의 기기와 플랫폼에 보안 문제를 해결해야 한다는 새로운 문제를 안고 있다. 개발 시간을 단축하라는 압박과 정교하고 기술적으로 복잡해진 애플리케이션 환경으로 인해 이러한 어려움은 갈수록 커지는 추세이다.</p><p><strong>웹 기술이 기업의 웹/모바일 애플리케이션 전략에 갈수록 중요한 역할을 하고 있다</strong>. 기업의 63%가 웹 기술을 웹/모바일 애플리케이션 전략의 핵심으로 볼 정도로 웹 기술은 주류가 되었다. 자사에서 출시한 웹/모바일 앱들중 75% 이상이 성공을 거둔 기업들을 성공한 기업으로 정의해 볼때 성공한 기업들의 특징을 살펴보면 이들은 경쟁사의 제품과 소비자 경험과 차별화하기 위해 웹기술에 상당한 투자를 한다는 것이다.</p><h3><strong>갈수록 복잡하고 정교해지는 모바일 앱개발, 하지만 주어진 개발 시간은 늘 그대로</strong></h3><p>현재 개발팀은 난처한 입장이다. 그들에게 요구하는 것은 많아지지만 내부 역량과 신규 투자는 제자리걸음 중이기 때문이다. 바로 이 부분이 기업들이 새로운 전략을 통해 극복해야할 부분이다.</p><ol><li><strong>웹 구축은 갈수록 어려워지고 있다</strong></li></ol><p>질문 : “내년 새로운 웹/모바일 애플리케이션 개발에 다음의 요소를 얼마나 증가 또는 감소할 계획인가.”(단위: 50% 이상 증가할 계획인 기업의 비율)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*EUQYlGNCikaia0k_d5h4MA.png" /><figcaption><strong>표 1. 웹 구축은 갈수록 어려워지고 있다</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p><strong>디지털 환경은 복잡해지고 있다</strong></p><p>고객의 기대만 끊임없이 변화하는 것이 아니다. 변화 속도도 빨라지고 있고 진화하는 소비자의 기대에 발맞추기 위해서는 복잡한 기술이 필요해졌다. 기업의 절반 이상(51%)은 내년 모바일/웹 애플리케이션의 사용자 경험이 훨씬 더 정교해질 것이라 예측했다. 높아진 기대에 부응하기 위해 모바일 팀의 어깨가 무거워졌지만 이미 시장에서 뒤처진 기업의 경우는 부담감이 더욱 클 수밖에 없다. 많은 기업의 생각에 의하면 모바일, 데스크톱 등 어느 기기에서든 사용 가능하고 적절한 콘텐츠(데이터로 강화)를 원하는 고객의 요구는 증가하고 있다, 이렇게 사용자 경험이 정교해지면 다양한 시스템의 데이터를 통합해 웹/모바일 플랫폼 전반에 적절하게 실행시키기 위한 기술적 능력이 더욱더 발전해야 한다.</p><p>여기서는 정확한 이해가 핵심이다. 성공적인 기업은 이렇게 복잡성이 증가할때야 말로 오히려 혁신을 유지하고 경쟁사보다 앞서 나갈수 있는 기회라고 생각한다. 조사 결과 전체 기업의 43%는 향후 웹/모바일 애플리케이션의 기술이 지금 대비 50% 이상 복잡해지리라 예상했다. 그런데 성공적인 기업들의 52%가 향후 기술의 복잡성 증가를 예측한 반면 성공적이지 못한 기업은 22%만이 기술의 복잡성을 예측하였다. 즉 이런 차이를 보면 기술의 복잡성을 극복해내기 위해 얼마나 미리 잘 준비해 내느냐가 성공적인 앱들을 출시해 내는 기업과 그렇지 않은 기업을 가르는 요인이라고 할 수 있다.</p><p><strong>개발 일정은 늘어나지 않고, 개발 팀의 역량은 변하지 않는다</strong></p><p>디지털 환경이 복잡하고 정교해지지만 기업은 그에 맞춰 개발팀에 투자를 쏟지 않는다. 본 조사에 참여한 기업의 절반 이상(53%)은 개발팀의 역량을 높일 계획이 없었다.</p><p>게다가 37%는 새로운 웹/모바일 애플리케이션 개발 일정을 늘릴 계획이 없다고 밝혔다. 결국 개발팀은 같은 시간 안에 “최소 자원 최대 효과”로 더 정교하고 복잡한 앱을 구축하는 새로운 전략을 찾아야 한다.</p><blockquote><em>[역자주: 크로스 플랫폼, 크로스 디바이스에 대비해야 하는 현재의 환경의 내부 개발팀에게 전례없는 높은 개발부담을 주고 있으며 그렇기 때문에 과거의 주먹구구식 개발 형태를 더이상 답습할 수 없으며 최소의 비용투자로 최대 생산성을 거둘수 있는 방법을 적극 모색해야 하는 시점입니다.]</em></blockquote><h3><strong>복잡한 환경을 감당할 도구와 프로세스가 없으면 계획된 개발 비용이 초과된다</strong></h3><p>현재까지 애플리케이션 개발 생애주기에서 가장 비용이 초과되는 곳은 개발 단계이다(표 3 참조). 이것은 성공적인 애플리케이션 개발을 하기 힘들게 하는 장애물이지만, 어떻게 보면 기업 입장에서는 어려움을 극복할 수 있는 기회도 된다.</p><p><strong>기기와 애플리케이션 증가에 따른 개발 및 배포 문제 극복하기</strong></p><p>기기의 종류가 증가하고 컴퓨팅 환경은 폭발적으로 복잡해졌다. 다양한 기기에 맞춰 애플리케이션을 개발하고 배포하는 일은 애플리케이션의 성공을 막는 가장 일반적인 장애물이라고 한다. 기업의 41%가 그 문제로 고민을 하고 있었다.</p><p>기기만이 아니다. 기업의 35%는 애플리케이션 전반의 환경도 복잡해져 성공을 하기 힘들다고 밝혔다. 기업이 기기와 애플리케이션의 복잡한 환경을 관리하지 못하는 동안, 개발 일정은 촉박해지고 애플리케이션 품질은 떨어지며 소비자 경험도 피해를 입고 있다.</p><p>2. <strong>최대 관심사는 다수의 기기와 보안 문제</strong></p><p>질문 : “성공적인 웹/모바일 애플리케이션 개발을 가로막는 가장 큰 장벽은?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kXcYyuua7FPQAjXdgnx_Qw.png" /><figcaption><strong>표 2. 최대 관심사는 다수의 기기와 보안 문제</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p>기업은 애플리케이션의 정교함과 복잡한 기술을 관리하는 도구와 프로세스를 활용하고 빠르게 배포하도록 지원해야 한다. 그래야 성공할 확률이 높아지고 복잡한 환경으로 나타난 문제를 경쟁에서 차별화하는 자산이자 원천으로 바꿀 수 있다.</p><p>3. <strong>높은 개발 비용</strong></p><p>질문 : “개발 시간과 비용을 고려할 때 웹/모바일 애플리케이션 생애주기에서 계획보다 더 오래 걸리고 비용이 더 많이 드는 단계는?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MNmCtjxGkYapB9A3aN0zQg.png" /><figcaption><strong>표 3. 높은 개발 비용</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p><strong>최상의 보안은 리스크를 통제하고 애플리케이션 성공 확률을 높인다</strong></p><p>고객은 자신의 데이터가 안전하게 처리되기를 바란다. 하지만 데이터가 보이지 않게 은밀하게 처리되기를 원하며 동시에 사용자경험을 방해하지 않기도 원한다. 그래서 다수의 기기에 맞춰 애플리케이션을 개발하고 전송해야 하는 사람들은 보안 문제를 매우 중대하게 여긴다. 본 조사에서도 모든 기업이 보안에 관심이 있었다. 성공적인 기업중 74%, 그렇지 못한 기업중 60%가 앱의 성공을 정의하는 제1의 기준이 보안이라고 응답했다.</p><p>그뿐만 아니라 사용자의 기기에 있는 데이터를 안전하게 보호하지 못하면 문제도 발생한다. 기업의 40%는 그와 같은 문제로 골치를 썩인다고 말했다. 더 나아가 보안 문제로 곤란해하는 확률을 봤을 때 성공하지 못한 기업은 성공한 기업에 비해 12%나 더 높았다.</p><p>기업이 소유한 애플리케이션 숫자도 애플리케이션 보안에 대한 우려를 높게 만드는 요인이다. 애플리케이션이 10개 이상인 기업들은 보안 문제가 애플리케이션의 성공을 막는 주요 리스크라고 고려할 가능성이 상대적으로 8% 더 높았다.</p><p>보안이 고객의 경험을 방해하지 않으면서 기대를 충족하도록 맞춰야 한다. 보안은 디자인과 개발 프로세스의 일부로 생각해서 개발을 진행해야 하며, 절대 개발이 다 끝난 후 추가해서는 안 된다. 보안을 개발 프로세스의 핵심으로 유지하려면 팀 전체가 보안에 대한 요구와 그에 상응하는 대가가 무엇인지 교육을 받아야 하고, 성공적인 구현을 위해 기업 측은 자원과 인센티브를 제공해야 한다.</p><p>많은 기업은 계획 단계에서 실패하고 그 결과 소비자 경험을 최적화할 기회를 놓친다. 동시에 사업을 망칠 리스크까지 만들고 있다.</p><p>성공하는 기업들은 적정수준의 데이타 보호에 집중하는 보안 전략을 구사한다. 이를 통해 사용자 고유정보 관리 정책에도 보안 정책을 반영시키고 애플리케이션 폼 팩터에 맞는 디자인에도 잘 반영되도록 한다. 이런 전략을 조기에 체크해서 적합한 도구를 통해 지원한다면 비즈니스와 고객 모두 상당한 이익을 얻게 된다.</p><h3><strong>성공적인 기업들의 특징 : 웹 기술에 적극적인 투자, 잦은 배포 주기</strong></h3><p><strong>4. 웹 기술이야말로 성공의 핵심</strong></p><p>질문 : “귀사의 웹/모바일 애플리케이션에 웹 기술(HTML5/자바스크립트/CSS)이 어떤 역할을 하는지 가장 잘 나타내는 말은?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TSlg3vNr5WDvDS75ncWOCQ.png" /><figcaption><strong>표 4. 웹 기술이야말로 성공의 핵심</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p>기업을 성공으로 이끄는 핵심 요인은 웹 기술에 대한 투자였다. 조사 대상 기업의 63%가 웹 기술 투자는 웹/모바일 애플리케이션 전략에 필수적이라고 밝혔다. 웹 기술에 반드시 투자해야 하느냐고 묻자 성공적인 기업들과 성공적이지 못한 기업들은 무려 32%의 차이를 보였다(성공적인 기업은 85%가 그렇다고 응답한 반면, 그렇지 못한 기업은 53%에 불과했다). 이는 애플리케이션이 정교해지고 기술적으로 복잡해지며 생긴 사업상 어려움을 해결하는 데 웹 기술로 개발한 애플리케이션이 얼마나 중요한지 보여준다. 성공적 기업들은 개발팀의 역량과 일정 제약을 극복하기 위해, 그리고 다양한 기기에 애플리케이션을 개발, 배포, 관리하기 위해 웹 기술에 투자를 한다. 또한 매월 1회 혹은 2주에 1회로 자주 앱을 배포한다. 이 정도로 자주 배포하고 그 과정을 능률화하려면 개발 프로세스와 개발팀의 능력뿐만 아니라 기술 환경에도 투자를 해야 한다.</p><p>5. <strong>성공적인 프로젝트를 위해서는 자주 배포해야 한다.</strong></p><p>질문 : “평균적으로 웹/모바일 애플리케이션의 새로운 기능/버그 수정을 얼마나 자주 배포하는가?</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bSbk1S1wRKfoYV1xfe6DtQ.png" /><figcaption><strong>표 5. 성공적인 프로젝트를 위해서는 자주 배포해야 한다</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p>6. <strong>기업들은 효율성 개선을 위해 웹 기술을 찾는다.</strong></p><p>질문 : “현재 자체 개발에서 웹 기술(HTML5/자바스크립트/CSS)로 전환하고 있거나 전환한 계획이라고 응답했다. 그렇게 선택한 이유는?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yqjohHzrKpdkJwXB2D7otQ.png" /><figcaption><strong>표 6. 기업들은 효율성 개선을 위해 웹 기술을 찾는다.</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><p>웹 기술을 사용하면 개발자가 공통적인 코드베이스로 모든 기기 플랫폼에 접근할 수 있다. 또한 웹 기술은 가령 단순 콘텐츠 소비보다는 트랜잭션 처리를 지원하는 것과 같은 더 정교한 사용자 경험을 만들어 내는데 점점 중요한 역할을 하고 있다. 예를 들어, 전자상거래 애플리케이션의 복잡도가 증가함에 따라 앱에서 입력 폼과 필드들이 많아졌는데 이는 웹과 다양한 기기에서 더욱 네이티브 앱과 같은 느낌을 주기위해 필요하게 된 것이다. 개발자는 웹기술을 통해 최소의 자원으로 최대의 효과를 낼 수 있다, 견고한 프레임워크와 컨트롤 라이브러리가 다수의 앱과 플랫폼을 지원하기 때문에 더 정교한 경험이 가능해진다.</p><p>기업이 웹 기술에 투자하는 주된 목적에는 개발 프로세스의 효율성 개선뿐만 아니라 품질 개선도 있다. 무엇보다도 기술의 기능성, 솔루션의 전반적인 가치, 애플리케이션이 제공하는 지원의 품질을 높이고자 한다. 사업 목표를 달성하기 위해 이런 요소에 투자하는 기업은 훈련과 지원으로 능력을 보완함으로써 앱의 가치와 투자 효과를 완벽하게 끌어올린다.</p><p><strong>7. 웹 기술 벤더를 선택하는 데 핵심적으로 고려해야 할 사항(성능, 비용 기술지원등)</strong></p><p>질문 : “현재 자체 개발에서 웹 기술(HTML5/자바스크립트/CSS)로 전환하고 있거나 전환한 계획이라고 응답했다. 다음 중 웹 기술 벤더를 선택할 때 가장 중요한 사항은?”</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*u-rkpsS2hN7tqo9CF4OKrg.png" /><figcaption><strong>표 7. 웹 기술 벤더를 선택하는 데 핵심적으로 고려해야 할 사항(성능, 비용 기술지원등)</strong></figcaption></figure><p><em>근거: 웹/모바일 앱 개발과 유지에 결정을 내리거나 영향력을 행사하는 124인의 의견<br>출처: 2015년 3월 포레스터 컨설팅이 센차의 의뢰로 실시한 연구 조사</em></p><h3>결론과 추천전략들</h3><p>고객은 데스크톱, 태블릿, 스마트폰에 걸쳐 일관성 있는 사용자 경험과 풍부한 기능을 원하고 있다. 이러한 기대에 부응하기 위해 개발팀에게 요구되는 사항은 빠르게 변화하는 시장과 복잡한 환경 속에서 점점 많아질 것이다. 경쟁에서 차별화하려면 개발팀은 유연성과 보안을 염두에 두고 개발 속도를 높이는 능력에 투자를 해야 한다. 간단히 말해 성공한 기업은 웹 기술에 투자를 한다. 이 투자에 성공하고 싶은 기업에 포레스터는 다음의 방법을 추천한다.</p><p><strong>&gt; 여러 플랫폼에 가능한 기술에 투자해 비용을 낮추고 개발 일정을 단축하며 품질을 향상시킨다</strong>. 개발팀이 최소 자원으로 최대 효과를 내고 일관성을 유지할 수 있도록 크로스 플랫폼 개발이 가능한 도구를 찾는다. 애플리케이션이 복잡해지고 앱을 다수의 기기에 배포하기가 더 까다로워지면서 웹 기술과 같은 크로스 플랫폼 도구에 투자한다면 상당한 기업 및 고객 가치를 발견할 수 있다.</p><p><strong>&gt; 자동화로 배포를 간소화해 배포 빈도를 높이고 애플리케이션 성공 확률도 높인다</strong>. 현 상태의 개발 프로세스에 자동화를 구축하고 그것을 지원하는 기능이 있는 애플리케이션에 투자한다. 배포 빈도를 높이고 많은 곳에 자동화를 적용하면 개발 효율성이 높아지고 애플리케이션을 사용자 요구에 더 철저하게 맞출 수 있다. 프로세스, 기술, 도구가 잦은 배포를 가능하게 하도록 자원에 투자한다.</p><p><strong>&gt; 유행을 쫓지 말고 최고의 보안 솔루션을 확인한다</strong>. 보안은 웹 기술 투자의 핵심이지만 한 가지가 모든 기업에 적합하지는 않다. 원하는 사용자 경험과 자신의 보안 문제를 꼼꼼히 살펴서 사용자 경험은 최대로 높이되 리스크는 최소화하는 “이상적인 지점”을 찾아라. 보안 문제에서 차선을 택하는 기업은 고객을 잃을 위험이 있다. 리스크를 고려하지 않는 기업은 향후 막대한 비용을 지불하고 말 것이다. 간결한 디자인에 보안 기능을 포함하고, 이어서 반복 작업을 통해 보안 요소를 처리하고 업데이트하게 한다. 핵심적인 보안 기능을 제공하는 웹 기술 플랫폼을 활용하며 필요한 만큼 커스터마이징을 한다.</p><p><strong>&gt; 기업에 적합한 수준의 교육과 지원을 보장한다</strong>. 최고의 가치 솔루션을 찾으려는 기업은 많지만내무적인 지식과 기술 차이는 인식하지 못한다. 플랫폼을 찾을 때는 기업의 능력을 고려하고 그것을 뒷받침할 수 있는 판매자와 손을 잡는다. 크로스 플랫폼 능력이 없는 기업은 고객을 끌어당기고 기업 가치를 제공하는 애플리케이션을 구축하게 돕는 데 투자를 하면 투자 가치를 찾을 것이다.</p><p><strong>추가 정보</strong></p><p>HTML5 를 활용하는 데 센차가 어떤 도움이 될 수 있는지 더 많은 정보는 <a href="http://www.sencha.com">www.sencha.com</a> 에서 확인할 수 있다. (국내에서는 미래웹 <a href="http://www.miraeweb.com">www.miraeweb.com</a> 을 통해서 상담 및 컨설팅이 가능하다)</p><p><strong><em>포레스터 컨설팅 소개</em></strong></p><p><em>포레스터 컨설팅은 독립적이고 객관적인 조사를 바탕으로 고객이 사업 경영에 성공할 수 있도록 컨설팅을 제공하는 업체이다. 단기 전략 회의부터 맞춤형 프로젝트에 이르는 포레스터의 컨설팅 서비스를 통해 고객과 직접 연결되는 연구 분석가는 전문가의 통찰력으로 구체적인 사업 문제 해결에 도움을 준다. 더 자세한 정보를 알고 싶다면 forrester.com/consulting을 방문하기 바란다.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9cd8e069ef24" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[모던 웹 스택 심층 분석]]></title>
            <link>https://medium.com/@manyoung/%EB%AA%A8%EB%8D%98-%EC%9B%B9-%EC%8A%A4%ED%83%9D-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-713eb1492f4e?source=rss-f3f2571539db------2</link>
            <guid isPermaLink="false">https://medium.com/p/713eb1492f4e</guid>
            <category><![CDATA[extjs]]></category>
            <category><![CDATA[sencha]]></category>
            <category><![CDATA[framework]]></category>
            <category><![CDATA[html5]]></category>
            <dc:creator><![CDATA[ManYoung Cho]]></dc:creator>
            <pubDate>Mon, 10 Oct 2016 08:17:00 GMT</pubDate>
            <atom:updated>2016-10-10T08:17:00.779Z</atom:updated>
            <content:encoded><![CDATA[<p>프론트엔드 기술요소들을 분류하여 프레임워크별로 비교해 우리에게 맞는 기술이 무엇인지 파악해 봅시다.</p><blockquote>[역자주 : 본 문서는 아래 문서를 한글화 한 것입니다.]</blockquote><blockquote><strong>The Modern Web Stack<br></strong>A Taxonomy of Front-End Technologies As An Aid To Decision Making</blockquote><p><a href="http://pages.sencha.com/Modern-Web-Stack.html">The Modern Web Stack</a></p><p><strong>들어가는 말</strong></p><p>오늘날 비즈니스 컴퓨팅 분야에서 변화를 추진하는 가장 큰 요인 두 가지는 멀티 디바이스 컴퓨 팅과 클라우드다. 멀티 디바이스와 클라우드는 애플리케이션 아키텍처가 보다 더 강력한 프론트 엔드와 유연한 백엔드로 빠르게 진화하는 원동력이 되고 있다. 모바일 디바이스는 비즈니스 데이 터와 애플리케이션으로 가는 중요한 관문이 되고 있다. 그리고 대개 리치 API 서비스 포인트로 구현되는 클라우드 백엔드는 빠른 속도로 새로운 애플리케이션의 추세를 완벽하게 뒷받침해주는 백엔드가 되고 있다.</p><p>지난 5년 동안 웹과 네이티브 기술에는 폭발적인 혁신이 이루어졌다. 라이브러리와 프레임워크, 도구가 물밀듯이 릴리즈되어 개발자들이 이처럼 새로운 세상에 맞는 애플리케이션을 생성하게 도 왔다. 백엔드에서는 자바스크립트로 작성되고 가장 기본적인 것만 남긴 이벤트 시스템 Node.js를 기초로, 개발자들이 그들의 서버 백엔드를 새로운 멀티 디바이스 세계에 맞춰 조정했다. 프론트엔 드에서는 새로운 실험적인 라이브러리들이 폭발적으로 증가하며 웹과 네이티브 개발자들이 차세 대 사용자 경험을 만들 수 있게 했다.</p><p><strong>새로운 아키텍처</strong></p><p>많은 조직에서는 전통적인 자바 애플리케이션 서버 중심의 개발 프로세스와 구축 기술을 만드는 데 막대한 양의 시간과 노력을 쏟아부었다. 그들은 이런 식의 투자가 이제는 구식이 되어 가고 있다는 것을 믿지 못하는 때가 많다. 많은 사람은 “왜 우리가 변해야 하지?”라는 질문부터 생각한 다. 간단히 말해, 모바일 컴퓨팅은 새로운 아키텍처를 필요로 한다.</p><p>2000년대에 급격히 증가한 데스크톱 웹 애플리케이션은 공통적인 씬 클라이언트 아키텍처를 공 유했다. 오라클 웹로직(Oracle WebLogic) 같이 무거운 애플리케이션 서버가 브라우저에 전체 페이 지를 제공했고, 애플리케이션 인터랙션은 전부 페이지 요청과 응답으로 수행되었다. 모든 데이터 관리와 통합, 비즈니스 논리, HTML 및 CSS 생성 등의 애플리케이션 작업 전체는 서버 측에서 이 루어졌다. 자바스크립트를 사용한 페이지 인터랙션이 있기는 하지만 적은 수에 불과하다. 그럴 만 한 이유는 세 가지가 있다. 브라우저는 아주 느린 자바스크립트 엔진이 있는 구식의 페이지 뷰어 였고, 데스크톱 브라우저는 오프라인이 되는 경우가 드물었으며, 모든 작업을 서버상에서 할 때 보안에 대해 생각하기가 더 쉬웠던 것이다.</p><p>그러나 모바일 컴퓨팅으로 이동하고 HTML5 브라우저가 성장하면서 위의 세 가지 이유 중 두 가 지는 더 이상 유효하지 않다. 모바일 앱은 오프라인에서 작동되어야 하고, 브라우저(그리고 네이티브 모바일 OS)의 기능성이 대단히 높아졌다. 과거에는 서버에서 이루어졌던 대부분의 비즈니스 논리와 데이터 처리가 오늘날 최첨단 애플리케이션에서는 모바일 디바이스에서 나타난다. 그리고 모바일 애플리케이션 경험은 서버에서의 정적인 페이지 제공으로는 절대 얻을 수 없을 만큼 대단히 풍부하다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*IUvx0_H3tOv2ejJSZgzkLA.png" /><figcaption><strong>웹 1.0 vs 멀티디바이스 서비스 제공 웹 아키텍쳐의 비교</strong></figcaption></figure><p>오늘날 애플리케이션 아키텍처에서, HTML이든 네이티브든 리치 클라이언트는 씬 클라우드 백엔 드와 커뮤니케이션한다. 모바일 디바이스는 클라우드에 있는 RESTful API와 커뮤니케이션해 JSON 객체를 보내고 받는다. 아키텍처 변화를 배경으로 새로운 세대의 애플리케이션은 상태를 유지하 고 데이터가 풍부하며 사용자 응답이 신속하다. 이런 멀티 디바이스 애플리케이션은 새로운 모바 일 디바이스, 기존의 데스크톱 브라우저뿐만 아니라 키보드를 사용 가능한 태블릿이나 패블릿 같 이 새로운 트위너(tweener) 디바이스에서도 작동한다.</p><p>이런 유형의 애플리케이션은 메모리에나 지속적인 로컬 데이터 스토어에나 많은 양의 데이터를 로컬로 저장하기 때문에 사용자 인터랙션에 빠르게 반응한다. 따라서 새로운 데이터를 가져오기 위해 서버에 오고가지 않아도 데이터(예: 데이터베이스 레코드)를 검색, 정렬, 필터링, 그룹화할 수 있다.</p><p>또한 이런 애플리케이션은 웹 1.0 앱보다 상태 유지도가 훨씬 높다. 사용자는 다수의 스크린과 서 브스크린에 걸쳐 나타난 콘텐츠와 데이터를 내비게이션하고 서버에서 새로운 페이지를 요청할 필 요 없이 여러 단계의 처리를 할 수 있다. 즉, 이런 애플리케이션은 데이터가 굉장히 풍부하기 때 문에 전통적인 데이터 그리드든 더 발전된 시각화 효과든 무수한 방식으로 커다란 데이터셋을 표 시하고 조작할 수 있다는 뜻이다.</p><p><strong>“자, 모두 에디터를 켜자!”</strong></p><p>개발자는 이클립스나 vi를 열고 이 패턴에 대해 위와 같은 애플리케이션을 코딩하기 시작하는 것 이 그저 즐거울 수 있지만, 잠시 멈추고 자신의 개발팀이 계획, 설계, 제작해야 하는 애플리케이 션의 환경에서 새로운 앱 모델이 안겨줄 영향을 모두 생각해보는 것도 매우 유용하다.</p><p>이것은 1인 관리자가 아닐 경우에 특히 맞는 말이다. 평균적인 기업은 100명까지는 아니어도 적 어도 10명의 개발자가 수십만 개의 스크린에서 애플리케이션의 라이프사이클을 관리하는 작업에 대한 업무 관행을 만들어야 한다. 이런 스크린 경험은 수십 만 줄의 코드와 백만 개의 데이터 스 토어를 바탕으로 구축될 수 있다. 이는 잠재적으로 극히 만만찮은 작업이다(센차의 고객 중에서는 애플리케이션을 새로운 아키텍처 패턴으로 업그레이드하는 일정을 5년까지 잡기도 한다). 그러므 로 한 발 물러서서 차세대 런타임을 구성하는 모든 부분들을 가만히 생각해보는 것도 좋은 생각 이다.</p><p><strong>프론트엔드 개발 과제</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yjz5Be1DMXVipdvtPy6nZw.png" /><figcaption><strong>프론트 엔드 개발시 흔히 요구되는 기능요소들</strong></figcaption></figure><p>대부분의 멀티 디바이스 애플리케이션는 공통적인 문제를 갖고 있고 그 문제들은 네 가지 카테고리로 분류할 수 있다(어느 정도 임의적으로)</p><p>1. 스크린 디자인: 위젯과 차트, 그리드 등 애플리케이션 콘텐츠의 모습과 동작을 말하는 사용자 인터페이스를 생성하고 배열한다.</p><p>2. 뷰 관리: 레이아웃과 화면 엘리먼트의 상호작용성과 같은 뷰 시스템을 구조화하고 관리할 뿐만 아니라 아랍어 같이 오른쪽에서 왼쪽으로 쓰는 언어나 외국어 등의 사용자 요청을 처리한다. 그리고 마우스로 입력하는 데스크톱 스크린과 제스처로 인터랙션하는 모바일 화면 모두에 작동하는 애플리케이션을 구축하는 핵심적인 멀티 디바이스 문제를 처리한다.</p><p>3. 데이터와 코드 관리: 데이터가 변할 때 화면을 업데이트하고 사용자 입력이 있을 때 데이터를 업데이트한다.</p><p>4. 백엔드와 및 서버 측과 커뮤니케이션.</p><p>이런 과제들을 전부 아우르는 것은 여러 레벨에서의 코드 캡슐화와 모듈화를 위해 필요하다. 그래야 여러 개발자와 개발팀이 서로의 영역을 침범하지 않되 서로의 작업을 활용해 효율적으로 협업할 수 있다.</p><p><strong>프론트엔드 기술 요소 분류</strong></p><p>네이티브 개발 기술은 이런 문제들에 오래 전부터 솔루션을 제공해왔다. 애플 플랫폼의 코코아 프레임워크, 플래시 개발을 위한 플렉스 프레임워크, 마이크로소프트 플랫폼의 윈도 프레젠테이션 파운데이션(Windows Presentation Foundation) 같은 네이티브 런타임을 보면 리치 클라이언트 애플리케이션을 생성하는 문제에 대한 놀라울 정도로 비슷한 솔루션들이 존재한다. 각각의 기술적 플랫폼들은 비슷한 종류의 기능을 비슷한 묶음으로 제공한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*V13XygP8md0YBl5AOBVeYQ.png" /></figure><p>시스템 라이브러리와 그것의 프레임워크에 내장된 기능 사이에서, 네이티브 플랫폼에는 여러 가지 도구들이 풍부하게 들어 있어 애플리케이션 구조화, 공통적인 개발 과제 자동화, 멋진 모습의 애플리케이션 생성을 돕는다. 그림 3 에서 프론트엔드 스택의 포괄적인 모델이다. 모델이기에 이것은 실제 코드의 구조화 방식을 명백히 단순화한다. 예를 들어, 모듈 시스템은 엄밀히 말해 별도의 코드가 아니고 모든 코드가 구조화된 방식이다. 그럼에도 불구하고 우리는 그것이 프론트엔드 기능을 조직화하고 다양한 프론트엔트 기술의 기능을 구상하는 데 유용한 방법이라고 생각한다.</p><p><strong>인터페이스 엘리먼트</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*mUfg03toI5vm_3jiOckGMQ.png" /></figure><p>기본 위젯(Basic Widgets): 텍스트 영역, 버튼, 폼 엘리먼트, 프로그레스 바 및 로딩 바, 메뉴 등을 비롯해 애플리케이션에 필수적인 디스플레이 엘리먼트들.</p><p>복합 위젯(Compound Widgets): 하나 이상의 데이터를 표시하거나 데이터 그리드, 목록이 중첩되거나 계층이 많은 파일을 표시하는 등 다수의 하위 컨트롤을 포함하는 복잡한 디스플레이 엘리먼트들.</p><p>시각화(Visualizations): 차트, 그래프, 폭포형 차트, 그 밖의 도표 같은 데이터 중심의 그래픽 엘리먼트를.</p><p>컨테이너(Containers): 위젯과 컨텐츠를 담아두는 역할을 하고 중첩된 패널 같이 스크롤 가능한 디스플레이, 캐러셀처럼 카드 기반의 디스플레이, 알림이나 위저드 같은 모달 컨테이너 등을 포함한다.</p><p>스타일(Styles): 콘텐츠나 위젯 집합의 프로퍼티나 어트리뷰트인 글꼴 크기, 그림자, 그 밖의 시각적 효과들.</p><p>테마(Themes): 애플리케이션에 일관성 있는 모습과 느낌을 주는 스타일 집합, 그래픽 자산이다. 테마는 스타일 언어와 구별되는 테마 언어나 시스템으로 표현될 수 있다.</p><p><strong>뷰 시스템</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*sE-H1gmwdFHGBOPJlTfY1g.png" /></figure><p>템플레이팅(Templating): 애플리케이션의 규칙 집합을 따라 플레이스홀더를 최종 콘텐츠로 변환하는 기능이다. 완전한 템플레이팅 시스템은 단일 또는 복합 조건문과 반복문은 물론 완전한 함수도 허용한다.</p><p>레이아웃 관리자(Layout Manager): 일련의 레이아웃 규칙을 적용해 창 크기, 디바이스 유형과 해상도에 따라 화면 엘리먼트를 x, y 나 z 공간으로 배치하는 것을 결정한다.</p><p>인터랙션(Interactions): 이 기능은 처리되지 않은 시스템 이벤트(에: touchstart)를 앱 개발자가 사용하고자 하는 제스처(예: 스크롤 제스처)로 변환해준다. 우리는 이 카테고리에 드래그 앤드 드롭 가능성도 넣었다.</p><p>시각적 효과(Visual Effects): 블러, 리컬러링, 채도 없애기 등의 시각적 변환과 프로퍼티 애니메이션을 포괄하는 용어다.</p><p>드로잉(Drawing) API: 처리되지 않은 드로잉 요소 위에 추출을 제공한다. 만약 플랫폼의 요소가 충분히 풍부하다면 필요하지 않을 수 있다. clips, masks, blends 등의 작업을 결합하는 것은 드로잉 API로도, 시각적 효과로도 볼 수도 있다.</p><p>테마(Theming) 시스템: 애플리케이션에 스타일과 자산의 집합을 일괄적으로 적용하는 방법이다. 계산형 스타일 프로퍼티를 제공하기도 한다.</p><p>로컬리제이션(Localization) 기능: 텍스트 문자열과 애플리케이션 메시지를 애플리케이션 로케일에 따라 바꿔준다. 로컬리제이션은 별도의 블록으로 나타나 있지만 보통은 스택 전체에 걸쳐 많은 것에 속한다. 철저한 로컬리케이션은 시간, 날짜 등에 로컬라이즈된 데이터 포맷뿐만 아니라 데이터와 텍스트에 로컬라이즈된 정렬 규칙을 구현할 뿐만 아니라 어떤 언어가 오른쪽에서 왼쪽으로 쓰여졌냐에 따라 위젯 레이아웃 &amp; 구성을 조정한다.</p><p>접근성(Accessibility): 스택의 많은 항목들에 포함되는 또 다른 기능이고 키보드 내비게이션, 스크린 리더 호환성과 시각장애인을 위한 시각적 고대비 테마 같은 기능이 들어 있다.</p><p><strong>로직과 데이타</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hcimW38a2HjvwUYznpYHXQ.png" /></figure><p>상태 관리(State Management) 기능: 상태 시스템 모델이 되어 애플리케이션 개발자들이 애플리케이션의 상태를 일관적으로 관리하게 도와준다. undo/redo 기능, 내비게이션 스택, 거래형 양자택일의 데이터 커밋이 이 카테고리에 들어간다.</p><p>데이터 객체(Data Objects): 컬렉션, 트리, 큐, 그래프 같은 유형의 데이터 객체는 표준 언어 라이브러리로 충분한 수준까지 제공되는 때가 많다. 그러나 부족한 경우에 프론트엔드 스택에서 제공하거나 개발자가 처음부터 자신만의 데이터 객체를 작성해야 한다.</p><p>데이터 바인딩(Data Binding): 인 메모리 데이터 변수와 데이터를 나타내는 스크린 엘리먼트 사이의 변화를 쉽게 동기화한다. 따라서 개발자는 변화를 관리하는 코드를 명시적으로 작성할 필요가 없어진다.</p><p>데이터 모델(Data Models): 애플리케이션의 작업 세트을 저장하는 인 메모리 데이터 구조를 제공한다. 기능이 잘 갖춰진 모델에는 정렬, 검색, 필터링, 유효성 검사, 그룹화를 하기 위한 데이터베이스 스타일의의 기능이 있다. 이런 기능은 와이어 포맷에서의 직렬화와 역직렬화도 돕는다.</p><p>모듈화(Modularity): 개발자와 개발팀이 저마다 코드를 구조화하고 의존성을 관리하게 도와주는 스택의 기능을 포괄하는 말이다. 하나의 식별 가능한 코드를 가리키지 않고, 객체네임스페이스 지정, MVC 등의 아키텍처 패턴, 컴포넌트 모델과 모듈/패키지 시스템 등의 기능을 포함한다.</p><p>영속 데이터(Persistent Data): 처리되지 않은 파일 read-write 를 바탕으로 하는 기능이고 로컬에서 애플리케이션 자산과 데이터를 저장, 캐싱, 동기화하게 돕는다.</p><p>테스팅(Testing) 기능: 오류 로깅, 이벤트 반복 같은 자동적인 유닛 및 시스템 테스트를 가능하게 만드는 기능들이 있고, 모든 애플리케이션 이벤트가 외부 스크립트로 실행될 수 있게 보장한다.</p><p>멀티미디어(Multimedia) 기능: 애플리케이션 안에 시스템 비디오 및 오디오 재생을 내장하고</p><p>커스터마이징하는 기능, playback 과 read 메타데이터 컨트롤과 captioning 컨트롤 기능 등을 갖고 있 있다.</p><p><strong>서버 커뮤니케이션</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zSYWkh4UM2-5BmZmZQjlQg.png" /></figure><p>서버 측 커뮤니케이션을 하는 앱이 요청/응답, 양방향 서버 푸시 데이터 커뮤니케이션을 쉽게 할 수 있다. 일반적으로 서버 커뮤니케이션은 시스템 라이브러리에서 제공되지만, 웹 기술의 특수한 경우에는 처리되지 않은 소켓 커뮤니케이션이 브라우저 샌드박스 모델에 의해 금지되고 XHR과 웹 소켓처럼 더 높은 레벨의 기능만 제공된다.</p><p>이 분류 체계는 글꼴 렌더링, 스레드나 센서 API처럼 운영 체제에 일반적으로 들어 있는 기능들을 포함하지 않기 때문에 브라우저에 보통 들어 있는 기능(웹 글꼴, 웹 워커, 지오로케이션 등) 역시 분류 체계에 포함되지 않는다.</p><p><strong>이 분류 체계를 HTML5 이전의 웹기술에 대응시켜 보기</strong></p><p>이 분류 체계를 택해서 웹 플랫폼에 적용해보면 결과가 상당히 흥미롭습니다. 특히 HTML5 이전의 웹 플랫폼의 경우, 그 기능이 얼마나 적은지 알 수 있습니다. HTML5 이전의 브라우저에서 사실상 어떤 문제에 대한 솔루션을 원했다면 거의 전부를 아주 처음부터 만들거나 그래픽, 비디오와 양방향 서버 커뮤니케이션 같은 기능을 위해 브라우저 외의 플러그인을 사용해야 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*daLZvn5T5vG0NwIJTJ43xA.png" /></figure><p>HTML5 이전의 웹 플랫폼에는 제한된 위젯 집합, 약간의 스타일링과 레이아웃 기능, 요청/응답 http 호출 기능이 있었다. 이게 전부다. 이렇게 소수의 브라우저 기능을 기초로 1 세대의 웹 애플리케이션 전체를 쌓아올렸다고 생각하면 놀라울 따름이다.</p><p>최신 HTML5 브라우저가 등장하며 플랫폼의 기능은 더욱 많아졌다.</p><p>Canvas,WebGL과 SVG로 2D와 3D 그래픽, 비트맵, 벡터 가능<br>HTML5 입력으로 범위 슬라이더, 컬러 피커와 확장된 날짜/시간 입력 가능  CSS 애니메이션과 전환으로 모션 그래픽 가능<br>웹 소켓으로 양방향 서버 커뮤니케이션 가능<br>그외에도 많은기능이 있다.</p><p><strong>이 분류 체계를 HTML5 이후의 웹기술에 대응시켜 보기</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jKe3hJvJqzpDhUZryYutYg.png" /><figcaption><strong>HTML5 에서 사용가능한 기술요소들 (녹색 부분)</strong></figcaption></figure><p>위 그림서 볼 수 있듯이 HTML5 덕분에 새로운 기능이 많이 늘어나기는 했지만 프론트엔드 웹 스택은 네이티브 플랫폼에 비해 아직 불완전하다. 처리되지 않은 HTML5 에서의 플랫폼 차이를 철저하게 설명하지는 않겠지만 그 중 몇 가지 예를 알아보자.</p><p>레이아웃 관리: HTML5 는 플렉스박스(Flexbox)를 도입해서 종합적인 1 차원 레이아웃을 제공한다. 그러나 인터넷 익스플로러 10 과 현재의 크롬과 사파리처럼 이전의 웹킷 브라우저에서는 조금 다르게 구현된다. 2D 레이아웃 관리자인 Gridlayout 은 여전히 인터넷 익스플로러에서만 구현된다. HTML5 에 새로 생긴 Multicol 로 텍스트를 자동으로 컬럼화할 수 있지만, 이는 동일한 너비의 컬럼에서만 가능하다.</p><p>인터랙션: HTML5 에서는 터치 이벤트 인식이 지원되지만 인터넷 익스플로러(pointerEvents)와 다른 브라우저(touch events)에서 서로 다르게 구현된다. 그뿐만 아니라 HTML5 에는 드래그 앤드 드롭 API 도 추가됐지만, 지나치게 이벤트가 많은 인터넷 익스플로러 5 마이크로소프트 드래그 앤드 드롭 API를 바탕으로 하기 때문에 기본 이벤트를 언제나 재정의해야 하고 아주 시끄러운 이벤트 버블링은 물론 다른 문제들도 나타난다.</p><p>데이터 바인딩: HTML5 는 데이터 바인딩을 어떤 유형으로든 추가적으로 지원하지 않았다(아주 기본적인 형태의 데이터 바인딩이 인터넷 익스플로러 4 에 도입되었다가 나중에 폐기되기는 했다).</p><p>일부 브라우저는 이런 차이 일부를 채우기 위해 기능들을 추가했지만, 추가 기능이 폭넓게 수용되지는 않았다. 예를 들어, 크롬의 웹 컴포넌트 규격은 템플릿과 기본(조금은 복잡하더라도) 컴포넌트 모델에 대한 부분적인 지원을 포함한다. 또한 크롬은 유례없이 애플리케이션 도메인당 파일과 디렉토리를 지원한다. 그리고 복합 크로스 엘리먼트 텍스트 플로우에 대한 어도비 리전(Regions)의 규격은 인터넷 익스플로러와 사파리에서 부분적으로 사용 가능하지만 크롬에서는 아니다. 요악하자면 2014 년 중반인 현재, 완전한 프론트엔드 개발 스택을 원하는 개발팀에게 남아 있는 차이는 아주 크다. 그리고 가까운 시기에 이런 차이가 메워질 것이라는 기대는 크지 않다. [<em>역자주 : 2016년 현재는 내용이 다를수 있습니다. 위에서 언급된 내용에 대한 최신 브라우저 반영여부에 대해서는 확인하지 못했음을 말씀드립니다</em>]</p><p><strong>자바스크립트가 구원에 나서다</strong></p><p>다행히도 1995 년에 자바스크립트가 처음 나온 이래로, 스크립트와 프레임워크, 라이브러리와 전처리기 개발은 증가 추세고 브라우저 기능을 확대했다. 그리고 GitHub 같은 코드 공유 사이트의 발달로 라이브러리와 프레임워크는 자바스크립트뿐만 아니라 이제는 CSS 에서도 계속해서 빠른 속도로 급증했다. 2014 년 봄 무렵, 깃허브의 공용 자바스크립트 저장소는 120 만 개가 넘는다.</p><p>개발팀이 당면한 새로운 문제는 기능 차이를 채우기 위한 라이브러리를 어떻게 찾느냐가 아니라 어떤 라이브러리를 사용하느냐다. 그리고 자신의 앱 포트폴리오, 기술 베이스와 배치 요구 조건에 맞는 프론트엔드 전략을 선택하는 것이 무엇보다도 중요하다. 개발팀 관리자가 내려야 할 주요 결정 하나는 자급자족 여부다. 깃허브 저장소의 98%는 1 주년 이후로 전혀 업데이트되지 않아서 공용 리소스 모음을 선택하기로 한 개발팀에게 자급자족은 어쩔 수 없는 선택이 된다.</p><p><strong>상황 가늠하기</strong></p><p>블로그 포스팅이나 트위터 메시지를 보면 “무엇이 최고의 프레임워크인가” 또는 개발자가 라이브러리 x와 y 중에서 무엇을 사용할지에 관한 주제가 많다. 그러나 경험 많은 개발팀은 이런 질문이 틀렸다는 것을 안다. 개발팀이 어떤 경우에는 물어야 할 올바른 질문은 다음이라고 생각한다.</p><p>- 구축하고자 하는 앱 경험의 종류를 고려…  <br>- 개발팀의 언어와 기술…<br>- 앱의 유지 관리 라이프타임…<br>- 지원해야 하는 브라우저…<br>- 개발팀의 규모…<br>- 무엇이든 간에 갖고 있을 수 있는 추가적인 요구조건…</p><p><strong>앱 포트폴리오와 개발 조직을 위한 최고의 프레임워크와 라이브러리는?</strong></p><p>예를 들어 최신 브라우저를 타깃으로 하고 콘텐츠만 있는 애플리케이션을 한 사람의 개발자가 작성하고 유지 관리하는 경우처럼 특정 유형의 애플리케이션 경험이라면 이 질문에 대해 프레임워크가 전혀 필요하지 않다고 답할 수 있다. 반면 규모가 크고 변화가 많은 팀이 개발한 복잡하고 상호의존적인 앱 포트폴리오의 경우, 조직에 걸친 하나의 프레임워크에 표준화하는 것이 해답일 수 있다.</p><p>이런 생각을 염두에 두고 지금부터는 가장 널리 쓰이는 프레임워크와 라이브러리의 스택이 우리의 프론트엔드 분류 체계와 어떻게 비교되는지 살펴본다. 프레임워크 기능을 잘 보여주는 도표를 이해하면 무엇이 최고의 프레임워크이냐는 질문에 대답하기가 더 쉬워질 것이다.</p><p><strong>전형적인 프레임워크와 라이브러리의 간단 개요</strong></p><p>다음은 웹 앱 개발 커뮤니티에서 아주 많이 보이고 가장 눈에 띄는 프레임워크의 라이브러리들을 선별해 설명하고 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*iZCPj9y0kX4WsUJ-Hi5iSg.png" /><figcaption><strong>주요 웹 프레임워크 및 라이브러리들 개요</strong></figcaption></figure><p>Bootstrap 은 테마와 레이아웃 같은 몇 가지 뷰 관리 기능과 인터페이스 엘리먼트를 제공하는 CSS 프레임워크다. 주로 콘텐츠를 표시하는 웹사이트에 많이 사용된다.</p><p>Backbone.js 는 Underscore 로 사용 가능한 일부 데이터 조작 기능이 있는 최소 MVC 패키지다. 인터페이스 엘리먼트나 뷰 관리 기능은 제공하지 않는다.</p><p>AngularJS 는 자칭 프레임워크 생성을 위한 툴킷이다. 이것은 풍부한 HTML 기반의 템플레이팅 시스템을 갖춘 MVC 구조로 마크업을 사용해 위젯을 선언적으로 생성할 수 있다.</p><p>Ember 는 객체와 데이터 바인딩과 완전한 컴포넌트 모델을 제공하는 독단적인 MVC 패키지다.</p><p>jQuery + jQueryUI 는 인터페이스 엘리먼트와 일부 뷰 관리 기능을 제공하는 대표적인 조합이지만 아키텍처나 데이터 처리 기능은 없다.</p><p>Ext JS + Deft JS 는 완전한 프론트엔드 자바스크립트 개발 스택으로, Deft JS 라이브러리가 컨트롤 기능의 반전을 제공하기 때문에 테스트가 더 쉽다.</p><p>이 중에서 Ext JS 를 제외한 프레임워크나 라이브러리는 개발 스택 프론트엔드의 일부분에 도움을 청한다. 예를 들어 AngularJS 는 다른 무언가가 뷰 시스템의 인터페이스 엘리먼트와 다른 엘리먼트 대부분을 제공할 것이라 가정한다. 그리고 Backbone.js 는 대부분의 스택이 다른 곳에서 올 것이라고 가정한다. 사실 이런 프레임워크와 라이브러리를 우리의 프론트엔드 분류 체계와 하나하나 비교하면 각각 무엇을 갖고 있고 무엇이 없는지 훨씬 더 명백해진다. 아래 그림은 Bootstrap 이 어디서 기능을 제공하는지 보여준다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*LKa8jdlVH048Eli_2Se1lQ.png" /><figcaption><strong>Bootstrap 을 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><p>그 밖에 널리 쓰이는 프레임워크 기능을 도표로 정리해보면(다음 페이지 참고) 모두 인터페이스 관리보다는 애플리케이션 논리 구조화에 집중하고 있다는 것을 알 수 있다. 대부분 뷰 관리와 인터페이스 엘리먼트를 개발자가 직접 작성할 것이라 가정한다.</p><p>대안은 다양한 라이브러리에서 조합해 전체 스택을 만드는 것이다. 가장 커스터마이징된 솔루션이기는 하지만 이 전략에는 여러 문제점이 있다. 공통적인 아키텍처나 코딩 스타일이 없다면 스택을 테스트하고 유지 관리하기가 어려워진다. 각 라이브러리는 표면성 유사한 기능에 대해 서로 미묘하게 다른 해석을 할 수 있다. 그리고 개발팀은 동기화되지 않은 다수의 릴리즈 사이클 문제에 직면한다는 점도 중요하다. 스택의 핵심적인 부분을 해당 스택의 관리자가 내팽개칠 위험은 말할 것도 없다.</p><p>시각화에 d3 를 사용하고자 하는 AngularJS 애플리케이션을 예로 들자면, 개발자는 데이터 바인딩 방식이 완전히 다르고 테마를 공유할 수 없다는 문제에 부딪히고 공통적인 객체 모델이나 클래스 시스템이 없어서 그리드와 차트의 변화를 동기화하기 지극히 어려워진다. 그런 솔루션은 결합되지 않고 변형된 프레임워크가 될 것이라는 사실은 쉽게 알 수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*YGPN6Kc5Du1G8OLXu42sCg.png" /><figcaption><strong>AngularJS 를 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Lv0QBrmSSTyk6GD6qMYNUA.png" /><figcaption><strong>Backbone.js 를 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*r5o6AcUkdyLkmyNcXGvHWA.png" /><figcaption><strong>jQuery+jQuery UI 를 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Y-EwGs6VmrYeSXEwAxsPww.png" /><figcaption><strong>Ember 를 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><p><strong>Ext JS 스택</strong></p><p>방금 만나본 라이브러리와 도구 모음에 비해 Ext JS는 더욱 완전한 프레임워크다. Ext JS는 기본적이고 복합적인 위젯을 아주 광범위하게 선별하고(150 가지 이상), 고급 수준의 시각화 패키지는 물론 풍부한 컨테이너 및 테마 패키지, 잘 계획된 뷰 시스템처럼 그보다 낮은 수준의 드로잉 API 도 제공한다. 또한 MVVM 과 MVC 아키텍처 패키지가 있고 ARIA 와 RTL 을 지원하며, 이 모든 것이 하나의 코딩 스타일로 가능한다. 지난 5년 동안 대기업과 SI 시장에서 증명된 것처럼 Ext JS 의 모든 기능은 함께 작용하도록 제작과 테스트되었고, 전문적인 동기화 방식으로 유지 관리와 업데이트 되고 고객들은 사후 지원을 받을수 있다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Q43Xvt8vBRJNYPcYXJ2pJQ.png" /><figcaption><strong>Ext JS 를 통해 얻을수 있는 기능 요소들 (녹색부분)</strong></figcaption></figure><p>사실 기능이 부족한 소수의 부분에서 Ext JS 는 개발팀이 프레임워크를 확장해 그들의 코드와 프레임워크 코드가 함께 작동할 수 있게 한다. 만약 내장된 레이아웃이 개발자의 디자인 사례를 적용하지 않는다면 새로운 레이아웃을 작성할 수 있고, 새 레이아웃은 내장된 레이아웃과 정확히 동일한 기능을 할 것이다. 또한 센차 마켓 웹사이트에는 센차 파트너의 다양한 테마, 복합 위젯, 그 밖의 확장 기능이 있다. 표준 컴포넌트를 사용하든, 표준 컴포넌트를 직접 확장하든, 센차 마켓에서 확장 기능을 사용하든 간에 개발자는 언제나 예상대로의 결과를 얻고 애플리케이션 개발, 테스트, 유지 관리도 훨씬 단순해진다.</p><p>대안을 사용하는 것이 마땅히 바람직하지 않은 몇 가지 영역을 짚고 넘어갈 필요도 있다. Ext JS는 키-값 스토어와 해시맵 같은 데이터 클래스를 훌륭히 선별해 제공한다. 또한 ExtJS의 강력한 도구를 사용해 개발자는 애플리케이션을 관리할 수 있고, 사용자는 데이터와 인터랙션해 시기적절한 비즈니스 의사 결정을 내릴 수 있다. 예를 들어 Ext JS 데이터 그리드는 성능이 우수하고 테이블 형식의 커다란 데이터셋의 정렬과 필터링이 가능한 최상급 복합 위젯이다. 이런 데이터 관리 및 표현 기능은 아주 값비싼 분석 애플리케이션과 믿을 수 있는 트랜잭션 프로세싱 시스템처럼 사용자의 데이터가 중심인 애플리케이션을 구축하는 조직에 특히 중요하다,.</p><p><strong>성장과 개발 영역</strong></p><p>현재로서는 어떤 프레임워크에서도 오디오 및 비디오 재생이나 서버 알림 관리를 제대로 지원하지 않는다는 사실을 밝혀둘 필요가 있다. 이런 영역들에서는 기본 HTML5 기능에 대신 의존한다. 또한 3D 그래픽 렌더링에 사용 가능한 WebGL 라이브러리가 소수 존재하지만(센차 랩스의 PhiloGL 포함) 주류 제품에서는 이 기능에 별로 관심을 주지 않았다.</p><p>지금까지 본 프레임워크 기능 도표에서 다루지 않은 한 가지 중요한 영역은 브라우저 지원이다. 많은 프레임워크는 가장 최신 브라우저에 대해서만 “지속적인” 지원 모델을 가지고 있다. 그 이유로 오픈 소스 프로젝트와 판매사는 제품을 구축하고 테스트하기가 틀림없이 수월하지만, 많은 조직이 가장 최근 버전의 브라우저만 지원하는 것은 전적으로 부적절하다. 그에 반해 Ext JS 는 어떤 프레임워크에서든 구형인 인터넷 익스플로러 8 까지 포함해 가장 폭넓은 범위로 브라우저를 지원한다.</p><p><strong>“딱 맞는 기술 스택”</strong></p><p>어떤 프론트엔드 기술 스택을 선택하느냐는 구축하고자 하는 애플리케이션의 유형과 조직의 성격(1 인 프리랜스 회사인가 아니면 포천 지가 선정한 500 대 기업의 개발 조직인가)에 달렸다. 완벽하지는 않지만 이 프론트엔드 기술들의 분류 체계가 프론트엔드 개발 스택의 다양한 구성 요소를 이해하는 데 도움이 되기를 바란다. 그리고 가장 많이 사용되는 몇몇 대안의 기능이 어디에 있고 어디에 없는지 잘 설명이 되었으면 좋겠다.</p><p><strong>추가 정보</strong></p><p>HTML5 를 활용하는 데 센차가 어떤 도움이 될 수 있는지 더 많은 정보는 <a href="http://www.sencha.com">www.sencha.com</a> 에서 확인할 수 있다. (국내에서는 미래웹 <a href="http://www.miraeweb.com">www.miraeweb.com</a> 을 통해서 상담 및 컨설팅이 가능하다)</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=713eb1492f4e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[IT 매니저와 개발 관리자를 위한 HTML5 속성 가이드]]></title>
            <link>https://medium.com/@manyoung/it-%EB%A7%A4%EB%8B%88%EC%A0%80%EC%99%80-%EA%B0%9C%EB%B0%9C-%EA%B4%80%EB%A6%AC%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-html5-%EC%86%8D%EC%84%B1-%EA%B0%80%EC%9D%B4%EB%93%9C-a4b9f0487d1d?source=rss-f3f2571539db------2</link>
            <guid isPermaLink="false">https://medium.com/p/a4b9f0487d1d</guid>
            <category><![CDATA[cio]]></category>
            <category><![CDATA[sencha]]></category>
            <category><![CDATA[html5]]></category>
            <category><![CDATA[extjs]]></category>
            <dc:creator><![CDATA[ManYoung Cho]]></dc:creator>
            <pubDate>Mon, 10 Oct 2016 06:05:38 GMT</pubDate>
            <atom:updated>2016-10-10T06:11:23.475Z</atom:updated>
            <content:encoded><![CDATA[<blockquote>[역자주 : 이문서는 Sencha 사의 아래 문서를 한글로 번역한 것입니다. ]</blockquote><blockquote>The Development Manager’s Quick Guide to HTML5. What Is HTML5 – and Why Should You Care?</blockquote><blockquote><a href="http://pages.sencha.com/rs/sencha/images/Sencha-WP-Dev-Mgrs-Guide-to-HTML5.pdf">http://pages.sencha.com/rs/sencha/images/Sencha-WP-Dev-Mgrs-Guide-to-HTML5.pdf</a></blockquote><p><strong>HTML5가 무엇이기에 관심을 가져야 하는가?</strong></p><p><strong>HTML 5가 엄청난 파도를 몰고 오고 있다 — 그것도 빠른 속도로</strong></p><p>HTML5는 이전 세대에서 가장 큰폭으로 발전한 웹 기술입니다. 애플, 모질라, 마이크로소프트와 구글의 폭넓은 지원 덕분에 HTML5 기능은 모든 주요 브라우저에 급속히 통합되었습니다. 애플의 회장 스티브 잡스는 리치 애플리케이션에 대한 개방형 개발 솔루션인 HTML5를 향해 세계가 움직이고 있다고 말한 바 있습니다. 현재 기술 직종 사이트에서 HTML이 가장 짧은 시간 안에 인기 검색어가 되었다는 사실을 알고 있습니까?</p><p>그러나 사람들이 HTML5의 예를 들 때 단순한 자바스크립트 애니메이션부터 CSS3 효과에 이르기까지 모든 것을 가리키고 있는 지금, HTML5가 무엇이고 그것이 어떤 의미인지 정리되지 않았을 만도 합니다. 그렇다면… HTML5란 정확히 무엇이고 왜 개발 관리자들이 그것에 관심을 가져야 할까요?</p><p>이 문서는 HTML5 핵심 기능을 실질적으로 요약하고, 불과 몇 년 사이에 HTML5가 구글과 애플, 마이크로소프트 같은 업계를 주도하는 기업들의 관심을 끌어 지원을 받은 이유를 설명합니다. HTML5 기술에 대한 센차의 경험을 바탕으로 HTML5 반의 애플리케이션의 이점을 간단히 이야기하고, 센차의 프레임워크와 도구가 어떻게 HTML5 애플리케이션의 개발을 용이하게 할 수 있는지 알아볼 것입니다.</p><p><strong>한 눈에 보는 HTML5</strong></p><p>일반적으로 미디어에서 말하는 “HTML5”는 현재 세대의 웹 브라우저에 구현된 다양한 차세대 웹 기술의 묶음을 의미합니다. 이런 기술 중 일부는 엄밀히 말해 HTML5 표준안에 포함되지 않습니다. 예를 들어 CSS3는 단 한 번도 HTML5 명세서에 속하지 않았고, 그 외의 다수(예: 웹 워커)는 원래 명세서에 있었지만 나중에 별도의 명세서로 빠져 나왔습니다.</p><p>센차(Sencha)에서는 이 기술의 모음을 올바르게 나타내는 말이 “HTML5 패밀리”라고 생각하지만 편의상 이 문서에서는 “HTML5”라고 일컬을 것입니다. HTML5 패밀리의 구성원은 모든 가족이 그렇듯 발달기와 구현 단계에서 큰 차이를 보입니다. 대부분은 최근 수정된 브라우저에 완전히 구현되어 있지만 일부는 아직 초안 상태이고 최종화되기 전에 대폭 수정될 수 있습니다. [<em>역자주: HTML 비롯한 여러 웹 표준 기술은 기술의 발전과 더불어 W3C를 통해서 끊임없이 표준화가 진행되고 있습니다. 즉 웹기술은 Living Standard 라는 개념으로 새롭게 재정되는 표준기술은 웹브라우저의 새버전에 지속적으로 반영이 됩니다. 웹개발자들은 웹기술의 이런 속성을 잘 유의하며 개발을 진행해야 합니다. 이부분이 다른 언어를 활용한 개발과 웹개발이 차이나는 가장 큰 부분입니다.</em>]</p><p>월드와이드웹 컨소시엄(W3C)의 코어 HTML5 명세서는 HTML5 명세서 패밀리의 일부분일 뿐입니다. 명세서의 전체 목록은 다음과 같습니다.</p><p>• 코어 HTML5 명세서(The Core HTML5 spec)</p><p>• 캐스케이딩 스타일 시트 버전 3(CSS3)</p><p>• 웹 워커(Web Workers)</p><p>• 웹 저장소(Web Storage)</p><p>• 웹 소켓(Web Sockets)</p><p>• 지오로케이션(Geolocation)</p><p>• 마이크로데이터(Microdata)</p><p>• 디바이스 API와 파일 API(Device API and File API)</p><p>• 그 밖의 많은 명세서가 준비 중에 있습니다.</p><p>(참고: 목록에 SVG가 없는 이유는 SVG가 2001년 이후로 표준이 되었지만 아직 많은 브라우저에서 지원되지 않고 있기 때문입니다.)</p><p>우리가 중요하게 이해해야 할 사실은 HTML5가 웹 브라우저를 더 풍부한 애플리케이션 플랫폼으로 변환하는 계획에서 출발했다는 것입니다. HTML5의 임무는 웹 애플리케이션이 풍부한 사용자 인터페이스와 오프라인 기능, 깊으면서도 안전한 하드웨어 접근 기능을 갖추도록 구축하는 것이었습니다. HTML5는 웹에 배치되기 때문에 웹이 이미 제공하는 이점들을 다음과 같이 가지고 있습니다.</p><p>• 보편적인 크로스 플랫폼 클라이언트: 웹 브라우저</p><p>• 쉬운 검색 기능과 인덱스 기능(딥 킹링 포함)</p><p>• 제3의 서비스와 매시업을 평범하게 포함하는 능력</p><p>• 전혀 번거롭지 않은 배치와 업데이트(웹에만 존재).</p><p><strong>HTML5 의 핵심 기능</strong></p><p>HTML5 는 HTML 언어의 많은 면을 상당 부분 바꾸지만 대부분의 변화는 최종 사용자에게 보이지 않습니다. 이렇듯 “사용자에게 보이지 않는” 변화에는 새로운 콘텐츠 모델, 새로운 레이아웃 모델, 그리고 새로운 접근성 기능과 브라우징 환경이 있습니다.</p><p>그 밖의 HTML5 의 핵심 기능은 다음과 같습니다.<br> • 많은 상황에서 개발자들은 서버의 임시 방편이나 자바스크립트로 현재 하고 있는 작업에 HTML5 를 사용할 수 있습니다. 예를 들어 HTML5 는 여러 가지 콘텐츠 엘리먼트(예: 이메일 주소 엔트리에 대한 폼 필드)에 의미를 부여하는 태그를 추가합니다. 새로 추가된 마크업 덕분에 메뉴와 내비게이션 섹션에서도 HTML 이 더 명료해졌고 가독성이 높아졌습니다. 그 결과 개발자들은 현재의 무수한 &lt;div&gt; 태그를 &lt;nav&gt;와 &lt;aside&gt; 같이 더 의미 있는 마크업으로 대체할 수 있습니다.</p><p>폼에 폼 액션 PUT 과 DELETE 가 지원되어 서버 측 프로세싱이 단순해집니다. 또한 폼 엘리먼트의 동적 추가에 대한 지원이 내장되어 있습니다(현재 자바스크립트에 꼭 필요한 것).<br> 사용자에게는 HTML5 의 변화 중에서도 오디오(&lt;audio&gt;) 및 비디오(&lt;video&gt;) 태그와 즉석 모드 2D 비트맵 드로잉 포맷(&lt;canvas&gt;)의 추가가 가장 큰 영향을 줍니다. HTML5 의 audio 와 video 태그는 플러그인을 사용하지 않고도 재생을 가능하게 했고 canvas 태그는 풍부한 2D 그림을 지원합니다.</p><p>• HTML5 는 &lt;center&gt;와 &lt;font&gt;처럼 이전의 HTML 명세서에 어수선하게 흐트러져 있던 여러 가지 표현적 마크업을 제거합니다. 또한 직접적인 테이블 스타일링을 허용하지 않기 때문에 개발자들은 그 대신 CSS 를 사용해야 합니다.</p><p>• HTML5 는 &lt;iframe&gt; 인라인 프레임만 제외하고 모든 프레임을 공식적으로 없앴습니다. 코어 HTML5 명세서는 이 외에도 애플리케이션 캔버스 간의 웹 콘텐츠 드래그 앤드 드롭, 데스크톱에서 애플리케이션으로의 파일 드래그 앤 드롭, 크로스 도큐멘트 메시지 전달 지원, 영속적인 콘텐츠 캐싱 지시어, 그리고 사용자가 수정 가능한 콘텐츠 등의 기능을 지원합니다.</p><p>코어 HTML5 기능들은 그것만으로도 리치 웹 콘텐츠를 구축하기 위한 강력한 토대가 되어줍니다.</p><p><strong>HTML5 과 CSS3 의 관계</strong></p><p>“HTML5”가 실제 CSS3 라고 생각하는 사람이 많습니다. 하지만 CSS3 은 HTML5 로 생성된 문서 구조와 협력해 작동하는 하위 명세서 모음입니다. 대부분의 경우 HTML 마크업은 웹 콘텐츠의 구조를 정의합니다. 자바스크립트는 동작을 관리하고 CSS 는 콘텐츠의 시각적 표현을 결정합니다.</p><p>CSS3 모듈은 엘리먼트 변형(예: 회전과 크기 조정)부터 이미지 기반의 고급 테두리까지 표현의 거의 모든 측면에 영향을 줍니다. CSS 는 웹 페이지 콘텐츠에 동적으로 포함될 수 있는 글꼴 파일까지 제공하기도 합니다. 개발자들은 CSS3 를 사용해 기기마다 스타일을 명시할 수도 있습니다. 예를 들어 TV 와 모바일 기기, 인쇄 화면마다 스타일을 다르게 하려면 CSS3 의 @media 규칙을 사용합니다. CSS3 의 “selectors” 모듈을 사용해 스타일을 찾고 적용하면 특정 페이지 엘리먼트에 같은 모습을 적용할 수도 있습니다.</p><p>애플리케이션 개발자들에게 가장 반응이 좋은 CSS3 모듈은 “전환(Transitions)”과 “애니메이션(Animations)”입니다. 이런 스타일 선언은 페이지 엘리먼트의 프로퍼티가 변경될 때 시간이 지나며 그 엘리먼트의 스타일이 어떻게 바뀌는지 통제합니다.</p><p>예를 들어, 전환 선언으로 개발자들은 사용자가 사이트의 링크 위에 마우스를 가져갔을 때 나타나는 반응을 명시합니다. 예를 들자면 링크의 텍스트 색과 글꼴 크기가 순식간에 새로운 스타일로 바뀌는 것입니다. CSS 전환은 자바스크립트로 새로운 CSS 클래스를 적용하거나 다시 작성하면 그 즉시 동적으로 추가될 수 있습니다.</p><p>반면 애니메이션 규칙은 CSS 프로퍼티 값에 여러 가지 변화를 줄 수 있습니다. 애니메이션은 제한적으로 반복될 수도, 무한히 반복될 수도 있습니다. 어느 쪽이든 브라우저는 각 상태 사이에서 전환하는 시각적 효과를 자동으로 계산합니다. 모바일의 경우 CSS 애니메이션은 기기의 GPU 에서 가속될 때가 많기 때문에 평범한 자바스크립트 애니메이션과 비교했을 때 성능이 크게 향상됩니다.</p><p>CSS3 의 흥미로운 기능에는 더 풍부한 레이아웃도 있습니다. Multi-Column 레이아웃과 Flexible Box 레이아웃을 비롯해 유연하고 유동적인 CSS3 레이아웃은 여러 계층으로 중첩된 &lt;div&gt; 및 테이블과 머리를 복잡하게 만드는 수학 계산에 의존하지 않고도 복잡한 콘텐츠 흐름을 생성하는 새로운 CSS 프로퍼티를 정의합니다.</p><p>CSS3 모듈은 그 밖에도 많고, 약속하건대 웹사이트와 애플리케이션 디자인에 있어 필수적인 도구가 될 것입니다. 간단히 말해 CSS3 모듈은 개발자들이 웹 콘텐츠와 시각적으로 커뮤니케이션하는 방식을 바꾸고 있습니다. 다양한 모듈이 함께 작용하며 사용자에게는 더 풍부한 웹 경험을 만들어줍니다. 개발자들은 이미지 효과에 의존하지 않고도 스타일을 쉽게 적용할 수 있습니다. 오늘날 웹 접근에 사용되는 다양한 기기 전반에 CSS3 는 예상대로 기능합니다.</p><p><strong>왜 애플리케이션 개발에 HTML5 를 사용하는가?</strong></p><p>센차는 더 풍부한 애플리케이션은 물론, 개발자에게 유용한 여러 가지 도구를 보장해주는 HTML5 기반의 개발에 무척 흥분 중입니다. 그리고 하루라도 빨리 브라우저에 도입된 새로운 HTML5 기능을 활용하고 싶습니다. 그러나 서버 기반의 웹 애플리케이션을 만족스럽게 사용하고 있는 기업이라면 이렇게 질문할 만도 합니다. “HTML5 를 도대체 왜 사용하는 거죠?”</p><p>간단히 대답하자면 사용자가 오프라인까지 가져갈 수 있는 더 풍부하고 더 반응적인 애플리케이션 경험을 만들 수 있기 때문입니다. 긴 버전의 대답은</p><p>다음의 섹션들에 제시되어 있는데, HTML5 의 핵심적인 이점들을 하나씩 살펴볼 것이고 HTML 이 어떤 이유로 앞으로 훌륭한 애플리케이션을 개발하는 데 올바른 도구를 제공할 수 있는지 설명할 것입니다.</p><p><strong>웹 경험과 개방형 표준</strong></p><p>수년 동안 개발자들은 플래시와 실버라이트 같은 플러그인으로 웹에 부족한 리치 기능들을 만회할 수 있었습니다. 그러나 HTML5 이 등장하면서 더 이상 그렇게 하지 않아도 됩니다. 이것은 플러그인 기술과 관련된 한계가 많다는 점을 감안하면 반가운 소식입니다. 플러그인은 이미 잘 알려진 모바일 플랫폼 성능 문제 외에도 안정성 문제에 보안 문제까지 가져왔기 때문입니다.</p><p>HTML5 웹 경험은 개방형 표준을 바탕으로 구축되었습니다. 이제 개발자는 모바일 기기에 주요한 문제인 플러그인 다운로드나 플러그인이 지원되는 기기를 선택한 사람들만을 겨냥하지 않습니다. 그 대신 모든 모바일 기기 브라우저를 망라하는 브라우저 클라이언트에서 리치 웹 경험을 동일하게 제공할 수 있습니다.</p><p><strong>리치 웹 경험과 일관적인 크로스 플랫폼, 크로스 디바이스, 클로스 브라우저</strong></p><p>HTML5 는 브라우저 클라이언트가 HTML 마크업을 어떻게 해석해야 하는지 명시해서 HTML5 에 포함되어 있는 기능을 일관성 있게 만듭니다. 앞에서 언급한 것처럼 HTML5 기능을 대부분 지원하는 브라우저는 현재 모든 주요 데스크톱과 모바일 기기 플랫폼에서 사용되고 있습니다. 브라우저가 HTML5 를 따르기만 한다면 개발자는 하나의 앱을 만들어 모든 브라우저, 기기, 플랫폼에 배포할 수 있습니다.</p><p><strong>리치 웹 애플리케이션은 평범한 웹사이트가 아니다</strong></p><p>앞에서 알아본 것처럼 HTML5 는 리치 웹 애플리케이션의 개발을 가능하게 하기 위해 만들어졌지만, 애초에 개발자들이 왜 플랫폼으로서 웹에 고개를 돌렸는 설명부터 해야겠습니다.</p><p>처음에 웹은 어디서든 접근할 수 있다는 점으로 관심을 끌었습니다. 네이티브 애플리케이션은 그것이 설치된 기기에 구속되었지만, 웹은 사용자가 전 세계 어디에서나 모든 브라우저를 통해 언제든 콘텐츠에 접근할 수 있습니다. 웹 애플리케이션으로 사용자는 어느 곳에서든 자신이 가장 좋아하는 애플리케이션과 인터랙션할 자유를 얻었습니다.</p><p>웹 애플리케이션 개발은 네이티브 애플리케이션 개발과 비교해 수월하기도 합니다. 네이티브 애플리케이션을 개발할 때는 플랫폼마다 각기 다른 언어를 사용합니다. 그 결과 이처럼 번거로운 프로세스는 범위(때로는 비용) 면에서</p><p>규모가 커집니다. 반면, HTML5 를 사용한 웹 애플리케이션 개발은 프로세스가 훨씬 간단합니다.</p><p>오늘날 리치 웹 애플리케이션을 만들고자 하는 개발자들에게 프로세스를 더 쉽게 만들어줄 훌륭한 개발자 도구는 여러 가지입니다. 예를 들면 센차는 센차 아키텍트(Sencha Architect)라는 사용자 인터페이스 빌더를 제공합니다. 이것은 시각적 드래그 앤드 드롭 시스템을 제공함으로써 개발자들이 리치 웹 애플리케이션을 쉽고 빠르게 구축할 수 있습니다.</p><p>[<em>역자주: 사실 이 단락에서 이야기하는 바가 현재 모던 웹 애플리케이션 개발이 가지고 있는 문제점을 잘 설명해 줍니다. 사실 웹기술이라는 것이 존재한지 20년이 넘었고 이미 웹제작이 가능한 수많은 업체들이 존재하는데 갑자기 HTML5 라는 것이 화두가 된 이유는 웹기술을 통해 과거 Client/Server 애플리케이션이나 기존 웹기술로 해결되지 못하던 애플리케이션을 웹으로 대체하려고 하기때문에 생기는 것입니다. UI적으로 단순한 홈페이지나 매거진류의 서비스를 만드는 것이 아니라 UI가 고도로 복잡한 애플리케이션을 만들어야 하기 때문에 기존의 웹제작 방법론에서 벗어나 생산성과 코드 유지보수를 담보할 수 있는 소프트웨어 아키텍쳐를 고민해야하고 그에 걸맞는 UI프레임워크를 선정해야 하는 상황입니다.</em>]</p><p><strong>모바일 기기용 리치 웹 애플리케이션</strong></p><p>모바일 기기가 날이 갈수록 어디서나 사용 가능해지면서 사람들은 현재 폰, 태블릿을 비롯한 기기들을 사용해 끊임없이 웹에 접근하는 일에 익숙해져 있습니다. 과거에는 데스크톱에서만 가능했던 활용이 지금은 24 시간 내내 어디서든 가능합니다.</p><p>시장의 중심에 있는 모바일 플랫폼(예: iOS)에서 플래시를 지원하지 않고 모바일에 최적화된 리치 웹 경험에 대한 대체 기술이 부족한 탓에, 리치 모바일 애플리케이션 경험을 만들고 싶은 많은 개발자는 결국 네이티브 모바일 애플리케이션을 개발하고 맙니다. 그러나 네이티브 앱 배포는 잠재적으로 상당한 대가를 치러야 할 주의 사항이 있습니다. 개발자는 네이티브 앱을 배포하기 위해 앱 스토어 환경에 앱을 제출해야 한다는 것입니다. 네이티브 앱 스토어 환경, 그 중에서도 애플 앱 스토어는 승인 절차가 너무나 길고 제멋대로 애플리케이션을 거부한다는 것으로 악명이 높습니다. 애플리케이션이 받아들여졌다 하더라도 앱 개발자는 일정 판매 수익의 일부를 수수료로 청구받기도 합니다.</p><p>HTML5 가 성장하고 다양한 주요 브라우저 클라이언트에 채택되기 전에, 네이티브 앱은 모바일 애플리케이션에 있어 유일한 선택이었습니다. 그러나 오늘날 HTML5 덕분에 개발자는 웹을 데스크톱 플랫폼으로도, 모바일 플랫폼으로도 사용할 수 있습니다. HTML5 기반의 모바일 웹 애플리케이션으로 개발자는 애플리케이션 배포를 스스로 통제하고 앱 스토어의 제약을 피할 수 있습니다. 그뿐만 아니라 개발 주기가 더 짧고 유연해져서 개발자는 플랫폼에 상관없이 어떤 모바일 브라우저 클라이언트에서든 사용자 경험이 일관적인 리치 웹 애플리케이션을 만들 수 있습니다. <em>[역자주: 이 단락이 이야기하는 내용에 대해서는 많은 반론이 있을수 있습니다. 아래 역자주에서도 이야기 하겠지만 HTML5 모바일 웹으로 만들수 있는 것과 네이티브로 만들수 있는 것에는 분명한 구분이 있습니다. HTML5 로 네이티브앱을 완전히 대체하는 것처럼 이해되서 안되겠습니다.]</em></p><p>위의 사실을 조금 더 자세하게 설명해보겠습니다. 모바일 웹 애플리케이션은 네이티브 애플리케이션보다 개발하고 업데이트하기가 훨씬 유연합니다. 예를 들어 개발자는 사용자의 결정이 없어도 버그 수정과 기능 업그레이드를 즉시 매끄럽게 투입할 수 있습니다. 이 점은 네이티브 개발 주기와 정반대입니다. 네이티브 앱의 경우 애플리케이션에 변동사항이 생기면 다운로드할 수 있는 버전 업데이트에 반드시 통합되어야 하는데, 플랫폼의 소유자는 사용자가 틀림없이 귀찮아 할 업데이트 수를 줄이기 위해 업데이트를 최소화하려 할 것입니다. 결국 개발자들이 사용자에게 새로운 기능을 제공하는 것이 미뤄집니다. 또한 개발자들은 모바일 앱 스토어에 업그레이드를 업로드하고 앱 스토어의 승인을 기다려야 합니다. 이 시점에서 개발자들은 무작정 기다리는 수밖에 없습니다.</p><p>애플리케이션은 앱 스토어가 가능할 때 재량에 따라 검토하기 때문에 대기 시간이 몇 주, 심지어 몇 달 걸릴 수도 있습니다. 그리고 업데이트가 거부될 위험도 존재하고 만약 그렇다면 개발자는 앱 스토어의 코멘트를 바탕으로 애플리케이션을 수정하고 전체 프로세스를 다시 거쳐야 합니다. 만약 개발자가 앱 스토어에 업데이트를 홍보할 수 있다고 해도 그가 겨냥한 사용자에게 닿는다는 보장은 없습니다; 사용자는 알아서 업데이트를 승인하고 다운로드해야 합니다.</p><p>그러나 HTML5 로 모바일 앱을 개발하는 가장 큰 이유는 보편성과 일관성일지 모릅니다. 개발자들은 HTML5 로 리치 모바일 웹 콘텐츠를 만들 어서 모든 모바일 플랫폼에 동시에 일관성 있게 배포할 수 있습니다. 즉, 안드로이드와 iOS, 블랙베리 OS 의 웹 애플리케이션이 일제히 개발되고 릴리즈될 수 있다는 뜻입니다.</p><p>모바일 웹 프로세스가 아무리 발전한다 해도, 모바일 웹의 인터랙티브한 경험을 쉽게 개발할 수 없다면 아무 의미 없었을 것입니다. 제스처 감지와 툴바 위치 고정은 무척이나 바람직한 기능이지만 HTML5 명세서에는 속하지 않습니다. 여기서 툴킷과 프레임워크가 도움이 될 수 있습니다. 데스크톱 측 도구와 프레임워크처럼 HTML 기술 기반의 모바일 웹 툴킷과 프레임워크도 현재 개발자들을 지원할 수 있습니다. 예를 들어, 센차 터치 모바일 웹 프레임워크를 사용해 개발자들은 모바일 웹에서 제스처 감지, 툴바 위치 고정, 비디오 및 오디오 기능을 제공할 수 있고 모든 것이 플러그인 없이 가능합니다 <em>[역자주 : 사실 웹기술을 통해 네이티브 기술을 대체하기 위해서는 Apache Cordova 와 같은 다른 기술들의 도움이 절대적으로 필요합니다. 모든 것이 플러그인 없이 가능하다는 표현은 과장된 것으로 기술검토시 이런 부분들을 섬세하게 살펴보셔야 합니다]</em></p><p><strong>리치 애플리케이션의 짧아진 개발 주기와 더 적어진 리소스</strong></p><p>개발자들은 HTML5 로 즉각적인 만족까지 얻을 수 있습니다. HTML5, CSS 와 자바스크립트는 편집 주기가 필요 없는 해석형 언어입니다. 그래서 개발자들은 브라우저 안에서 디버깅을 할 수 있으며 빠르게 수정하고 브라우저 창을 새로고침해 변화를 실시간으로 볼 수 있습니다. 플래시나 실버라이트, 오브젝티브 C 를 사용했던 전통적인 네이티브 및 플러그인 개발과 극명하게 대조되는 부분입니다. 그러한 종류의 개발을 할 때는 수정 사항을 즉시 볼 수 없고 긴 편집 및 배치 프로세스 후에나 볼 수 있습니다. 그리고 수정이 잘못되었을 경우 개발자는 전체 프로세스를 처음부터 다시 시작해야 합니다</p><p><strong>그렇다면…어떤 개발 환경이 HTML5와 잘 맞을까?</strong></p><p>한정된 리소스로 애플리케이션을 개발할 계획입니까?</p><blockquote>HTML5 가 적합합니다. HTML 은 가독성이 높고 그것을 사용하는 웹 개발자의 수도 천만 명이 넘습니다(훨씬 적은 수의 네이티브 및 플러그인 개발자와 비교됨). [역자주 : 사실 이부분은 논쟁의 여지가 많은 부분입니다. 단순 웹개발자의 물리적 숫자는 물론 네이티브 개발자보다 많겠지만 소위 말하는 프론트엔드 개발 또는 이 문서에서 이야기 하는 리치 웹애플리케이션 개발이 가능한 개발자가 네이티브 앱 개발자보다 많다고 이야기하기는 힘든 것이 현재(2016년) 우리나라의 현실이라고 개인적으로 생각합니다.</blockquote><p>어떤 대상이 타깃입니까? 언제 어디서든 접근 가능한 멀티 플랫폼을 대상으로 애플리케이션을 개발할 계획인가요?</p><blockquote>HTML5 가 적합합니다. HTML 웹 기반의 애플리케이션이라면 당신의 애플리케이션은 언제 어디서든 접근 가능합니다.</blockquote><p>스마트폰과 태블릿 같은 기기들로 사용자들에게 끊임없이 다가갈 계획입니까?</p><blockquote>HTML5 가 적합합니다. HMTL 웹 기반의 모바일 애플리케이션이라면 당신의 애플리케이션은 앞으로 나올 기기들을 비롯해 모든 모바일 웹 브라우저에 일관적으로 표시됩니다.</blockquote><p>모바일 앱 스토어 환경을 거치지 않고 모바일 사용자들에게 다가가려 합니까?</p><blockquote>HTML5 가 적합합니다. HMTL 웹 기반의 모바일 애플리케이션의 경우 사용자에게 다가가는 데 앱 스토어의 승인은 전혀 필요하지 않습니다. [역자주: 리치 모바일 애플리케이션과 네이티브앱이 필요한 영역은 분명히 구분됩니다. HTML5로 개발한 모바일 웹 애플리케이션이 네이티브앱을 완벽하게 대체하는 것은 아닙니다. 이런 부분에 대한 사전에 전략적인 판단을 가지고 어떤 기술을 선택할지 고민해야 합니다. HTML5 가 만능은 아닙니다]</blockquote><p>HTML5 과 훌륭한 지원 도구 덕분에 이제 모든 브라우저, 데스크톱, 모바일 기기에서 언제 어디서든 접근할 수 있는 세련된 최신 웹 애플리케이션을 만들수 있습니다. 더 나아가 개발 경험이 많지 않아도 애플리케이션을 쉽고 빠르게 만들 수 있습니다.</p><p><strong>센차는 어떻게 HTML5 로의 성공을 보장하는가</strong></p><p>센차는 개발자들이 정확하고 성능이 우수한 크로스 브라우저 애플리케이션 경험을 만들 수 있게 하는 프레임워크와 도구를 만드는 것을 목표로 합니다.</p><p>센차에서 만든 애플리케이션 프레임워크로 개발자들은 크로스 플랫폼, 크로스 브라우저 웹 앱을 구축할 수 있습니다. 센차의 제품 포트폴리오는 애플리케이션 프레임워크와 도구와 같이 두 가지 유형으로 구성되어 있습니다. 프레임워크는 IE6 에서 크롬 10 사이의 모든 브라우저에 작동하는 진정한 크로스 브라우저 웹 애플리케이션을 빠르게 만들 수 있는 핵심 시스템입니다. 센차의 도구는 프레임워크를 활용해 사용자 인터페이스와 인터랙션의 시각적 개발을 가능케 함으로써 개발자의 작업 흐름 속도를 훨씬 높여줍니다.</p><p>센차가 주력하는 제품은 Ext JS 입니다. (Ext JS 6.2 기준)<br> <strong>• ExtJS 클래식</strong>은 데스크톱 웹사이트 생성을 위한 제품이고 개발자들이 리치웹 애플리케이션을 쉽게 구축하게 합니다. 또한 Ext JS 가 UI 컴포넌트와 기본 UI 테마의 대규모 라이브러리를 포함하고 있기 때문에 개발자들은 원하는 애플리케이션을 구축하는 데 집중할 수 있습니다.</p><p><strong>• Ext JS 모던은 </strong>모바일과 터치 웹 애플리케이션 구축에 사용하는 프레임워크입니다. 이것은 가장 뛰어난 기능과 유연성, 최적화를 얻기 위해 HTML5, CSS3, 자바스크립트를 활용하도록 특별히 만들어진 세계 제일의 애플리케이션 프레임워크입니다.</p><p>센차 제품들은 HTML5 를 특정 용도로 사용해 오디오와 비디오는 물론 오프라인으로 데이터를 저장하는 로컬 저장소 프록시 같은 컴포넌트를 제공합니다. 그리고 스타일 시트에 CSS3 를 폭넓게 사용해 가능한 한 최고로 견고한 스타일링 레이어도 제공합니다.</p><p>센차의 프레임워크들을 보완하기 위해 Sencha Architect 와 Sencha Theme Editor 와 같은 두 가지 도구도 사용할 수 있습니다.</p><p><strong>• Sencha Architect 는 </strong>사용하기 쉬운 비쥬얼 IDE로서 드래그 앤드 드롭 환경에서 여느 때보다도 빠르게 인터페이스를 만들 수 있게 도와주는 데스크톱 애플리케이션입니다. 기업에서 Sencha Architect를 사용하면 Ext 개발자와 제품 디자이너가 단축된 시간으로 웹 앱의 사용자 인터페이스를 개발할 수 있어 새로운 디자인을 빠르게 내놓을 수 있습니다.</p><p><strong>추가 정보</strong></p><p>HTML5에 대해 질문이 있거나 HTML5를 활용한 웹 경험 개선에 센차가 어떤 도움을 줄 수 있는지 상담받고 싶다면 온라인으로 <a href="http://www.sencha.com">www.sencha.com</a> 을 방문해주세요. (국내에서는 미래웹에서 관련 컨설팅을 진행합니다. <a href="http://www.miraeweb.com">www.miraeweb.com</a> )</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a4b9f0487d1d" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>