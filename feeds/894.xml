<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-8598196432745886394</id><updated>2019-04-28T01:31:43.152-07:00</updated><category term="Linux"/><category term="kernel"/><category term="arm"/><category term="architecture"/><category term="exynos 5420"/><category term="AP"/><category term="A7"/><category term="OpenStack"/><category term="toolchain"/><category term="service"/><category term="network"/><category term="SDN"/><category term="CentOS"/><category term="OPNFV"/><category term="NFV"/><category term="X86"/><category term="Cloud"/><category term="Econo"/><category term="RedHat"/><category term="OpenDaylight"/><category term="html"/><category term="Life"/><category term="CoreOS"/><category term="Docker"/><category term="gentoo"/><category term="DPDK"/><category term="OSX"/><category term="IceHouse"/><category term="Storage"/><category term="Swift"/><category term="qemu"/><category term="FreeBSD"/><category term="LLVM"/><category term="Haswell"/><category term="JavaScript"/><category term="OoO"/><category term="SSL"/><category term="maori"/><category term="xorg"/><title type='text'>Man Seok Techne Schoe</title><subtitle type='html'>만석이의 예술 이야기</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default?start-index=26&amp;max-results=25'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>182</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-7314041686222937354</id><published>2018-10-22T07:39:00.001-07:00</published><updated>2018-10-22T07:42:00.269-07:00</updated><title type='text'>Le cid 아리아 Ah! tout est bien fini. (아~ 모든게 끝났습니다.)</title><content type='html'>&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #99209b; font-family: &amp;quot;apple sd gothic neo&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;&quot;&gt;Le cid 아리아&amp;nbsp;&lt;/span&gt;&lt;strong class=&quot;hl&quot; style=&quot;color: #99209b; cursor: pointer; font-family: &amp;quot;Apple SD Gothic NEO&amp;quot;, helvetica, sans-serif;&quot;&gt;ah tout est bien fini&lt;/strong&gt;&amp;nbsp;아~ 모든게 끝났습니다.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/-ujSRZ8GCYk/0.jpg&quot; frameborder=&quot;0&quot; height=&quot;266&quot; src=&quot;https://www.youtube.com/embed/-ujSRZ8GCYk?feature=player_embedded&quot; width=&quot;320&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div style=&quot;padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;Ah! tout est bien fini.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;아~ 모든게 끝났습니다.&lt;br /&gt;Mon beau rêve de gloire,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;명예를 얻겠다던 아름다운 나의 꿈도&lt;br /&gt;mes rêves de bonheur&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;행복을 쫒던 꿈도..&lt;br /&gt;s&#39;envolent à jamais!&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;영원히 사라져 버렸습니다.!&lt;br /&gt;Tu m&#39;as pris mon amour,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;당신은 내게서 사랑을 빼앗아 버렸고,&lt;br /&gt;tu me prends la victoire,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;이제는 승리마저 빼앗고 있으나..&lt;br /&gt;Seigneur, je me soumets!&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;주여, 난 순종합니다 !&lt;br /&gt;O souverain, ô juge, ô père,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;오 절대자여, 오 심판자여, 오 아버지여,&lt;br /&gt;toujours voilé, présent toujours,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;항상 신비에 감춰져 있으나 언제나 존재하시는 분이시여,&lt;br /&gt;je t&#39;adorais au temps prospère,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;좋은 시절에&amp;nbsp;난 당신을 경배하였고&lt;br /&gt;et te bénis aux sombres jour.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;이제 암담한 날에도 당신을 찬양하나이다.&lt;br /&gt;Je vais où ta loi me réclame,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;나는 당신의 율법이 부르는 곳으로 갑니다..&lt;br /&gt;libre de tous regrets humains.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;모든 인간의 회한으로부터 벗어나...&lt;br /&gt;O souverain, ô juge, ô père,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;오 절대자여, 오 심판자여, 오 아버지여,&lt;br /&gt;ta seule image est dans mon âme&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;당신의 모습만이 내 영혼속에 있나니..&lt;br /&gt;que je remets entre tes mains.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;그 영혼을 당신에게 맡기나이다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;O firmament azur, lumière,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;오 푸른 창공이시여, 빛이시여..&lt;br /&gt;esprits d&#39;en haut, penchés sur moi,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;나를 굽어보시는 하늘의 성령이시여&lt;br /&gt;c&#39;est le soldat que désespère,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;병사는 절망에 빠지지만&lt;br /&gt;mais le chrétien garde sa foi.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;기독인은 신앙의 서약을 지키나이다.&lt;br /&gt;Tu peux venir, tu peux paraître,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;당신은 오시어 모습을 드러내실 수 있나이다.&lt;br /&gt;aurore du jour éternel.&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;영원한 날의 새벽에...&lt;br /&gt;O souverain, ô juge, ô père!&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;오 절대자여, 오 심판자여, 오 아버지여,&lt;br /&gt;Le serviteur d&#39;un juste maître&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;정의로운 주인의 종은&lt;br /&gt;répond sans crainte à ton appel,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px; padding: 0px;&quot;&gt;&amp;nbsp;두려워하지 않고 당신의 부름에 응답합니다.&lt;br /&gt;ô souverain, ô juge, ô père!&lt;/div&gt;&lt;div style=&quot;padding: 0px;&quot;&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px;&quot;&gt;&amp;nbsp;오 절대자여, 오 심판자여, 오 아버지시여,&lt;/div&gt;&lt;div style=&quot;color: #404040; font-family: sans-serif; font-size: 13px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe width=&quot;320&quot; height=&quot;266&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/tg46Z4Q4XjI/0.jpg&quot; src=&quot;https://www.youtube.com/embed/tg46Z4Q4XjI?feature=player_embedded&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/7314041686222937354/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://manseok.blogspot.com/2018/10/le-cid-ah-tout-est-bien-fini.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/7314041686222937354'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/7314041686222937354'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/2018/10/le-cid-ah-tout-est-bien-fini.html' title='Le cid 아리아 Ah! tout est bien fini. (아~ 모든게 끝났습니다.)'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.youtube.com/vi/-ujSRZ8GCYk/default.jpg" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-5569575552608450391</id><published>2018-10-22T07:24:00.002-07:00</published><updated>2018-10-22T07:28:29.872-07:00</updated><title type='text'>Ne me quitte pas (날 떠나지 말아요, 行かないで)</title><content type='html'>&lt;b style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: large;&quot;&gt;Ne me quitte pas (날 떠나지 말아요)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background-color: white; color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; overflow-wrap: normal; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: 바탕;&quot;&gt;Ne Me Quittes Pas은&amp;nbsp; 자크 브렐이 1959년에 작사, 작곡한 샹송이며, 1960년도에 ADF디스크 대상을 수상한 LP에 들어 있으며 떠나가는 여인을 붙잡으려고 하는 애절한 내용이 공감을 모아 프랑스 에서는 많은 가수가 다투어 레코드 취입을 했다. 그리고 얼마 후 미국의 음유시인, Rod Mckuen이 영어 가사를 붙여 If You Go Away 로 불렀으며 이것을 영국의 가수 Dusty Springfield가 불러 히트 시켰고 이후 전 세계의 많은 유명가수들이 이 노래를 취입했다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;background-color: white; color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; overflow-wrap: normal; word-break: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;iframe allowfullscreen=&quot;&quot; class=&quot;YOUTUBE-iframe-video&quot; data-thumbnail-src=&quot;https://i.ytimg.com/vi/Vz6r0TP4FBI/0.jpg&quot; frameborder=&quot;0&quot; height=&quot;266&quot; src=&quot;https://www.youtube.com/embed/Vz6r0TP4FBI?feature=player_embedded&quot; width=&quot;320&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div style=&quot;background-color: white; overflow-wrap: normal; word-break: normal;&quot;&gt;&lt;span style=&quot;color: #333333; font-family: 바탕;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: white; color: #333333; font-size: 12px;&quot;&gt;Ne me quitte pas&lt;br /&gt;Il faut oublier&lt;br /&gt;Tout peut s&#39;oublier&lt;br /&gt;Qui s&#39;enfuit déjà&lt;br /&gt;Oublier le temps&lt;br /&gt;Des malentendus&lt;br /&gt;Et le temps perdu&lt;br /&gt;A savoir comment&lt;br /&gt;Oublier ces heures&lt;br /&gt;Qui tuaient parfois&lt;br /&gt;A coups de pourquoi&lt;br /&gt;Le coeur du bonheur&lt;br /&gt;Ne me quitte pas (X4)&lt;br /&gt;&lt;br /&gt;Moi je t&#39;offrirai&lt;br /&gt;Des perles de pluie&lt;br /&gt;Venues de pays&lt;br /&gt;Où il ne pleut pas&lt;br /&gt;Je creuserai la terre&lt;br /&gt;Jusqu&#39;après ma mort&lt;br /&gt;Pour couvrir ton corps&lt;br /&gt;D&#39;or et de lumière&lt;br /&gt;Je ferai un domaine&lt;br /&gt;Où l&#39;amour sera roi&lt;br /&gt;Où l&#39;amour sera loi&lt;br /&gt;Où tu seras reine&lt;br /&gt;&lt;br /&gt;Ne me quitte pas (X4)&lt;br /&gt;&lt;br /&gt;Ne me quitte pas&lt;br /&gt;Je t&#39;inventerai&lt;br /&gt;Des mots insensés&lt;br /&gt;Que tu comprendras&lt;br /&gt;Je te parlerai&lt;br /&gt;De ces amants-là&lt;br /&gt;Qui ont vu deux fois&lt;br /&gt;Leurs coeurs s&#39;embraser&lt;br /&gt;Je te raconterai&lt;br /&gt;L&#39;histoire de ce roi&lt;br /&gt;Mort de n&#39;avoir pas&lt;br /&gt;Pu te rencontrer&lt;br /&gt;&lt;br /&gt;Ne me quitte pas (X4)&lt;br /&gt;&lt;br /&gt;On a vu souvent&lt;br /&gt;Rejaillir le feu&lt;br /&gt;D&#39;un ancien volcan&lt;br /&gt;Qu&#39;on croyait trop vieux&lt;br /&gt;Il est paraît-il&lt;br /&gt;Des terres brûlées&lt;br /&gt;Donnant plus de blé&lt;br /&gt;Qu&#39;un meilleur avril&lt;br /&gt;Et quand vient le soir&lt;br /&gt;Pour qu&#39;un ciel flamboie&lt;br /&gt;Le rouge et le noir&lt;br /&gt;Ne s&#39;épousent-ils pas&lt;br /&gt;&lt;br /&gt;Ne me quitte pas (X4)&lt;br /&gt;&lt;br /&gt;Ne me quitte pas&lt;br /&gt;Je ne vais plus pleurer&lt;br /&gt;Je ne vais plus parler&lt;br /&gt;Je me cacherai là&lt;br /&gt;A te regarder&lt;br /&gt;Danser et sourire&lt;br /&gt;Et à t&#39;écouter&lt;br /&gt;Chanter et puis rire&lt;br /&gt;Laisse-moi devenir&lt;br /&gt;L&#39;ombre de ton ombre&lt;br /&gt;L&#39;ombre de ta main&lt;br /&gt;L&#39;ombre de ton chien&lt;br /&gt;&lt;br /&gt;Ne me quitte pas (X4)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;떠나지 말아요 잊어버려야만해요&lt;br /&gt;이미 달아나 버린 모든것들은,&lt;br /&gt;오해의 시간들과 잃어버린 &lt;br /&gt;시간들은 잊혀질 수도 있어요.&lt;br /&gt;왜 하는 질문을 이용해서 때때로 행복한 마음을&lt;br /&gt;수르러지게 만들곤했던&lt;br /&gt;그 시간들을 어떻게 잊어야할 지 알고 있다면 &lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;그대에게 비가 내리지 않는 나라에서 온 &lt;br /&gt;빗방울을 선물하겠어요&lt;br /&gt;황금과 빛으로 된 그대 몰을 덮기 위해 &lt;br /&gt;죽어서까지 땅을 파겠어요&lt;br /&gt;영토를 만들겠어요&lt;br /&gt;그곳에선 사랑이 왕이 되고 사랑이 법이 되고&lt;br /&gt;그대가 여왕이 될거예요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;&lt;br /&gt;떠나지 말아요&lt;br /&gt;그대가 이해할 엉뚱한 말들을 만들어 내겠어요&lt;br /&gt;자신들의 사랑이 불타오르는 것을&lt;br /&gt;두번 보았던 바로 그 연인들에 대해&lt;br /&gt;그대에게 얘기해 주겠어요 그대와 맞딱뜨릴 수가 없어&lt;br /&gt;죽은 그 왕에 대한이야기를 그대에게 들려드리겠어요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;&lt;br /&gt;너무나 오래된 것이라고 생각했던&lt;br /&gt;옛 화산에서 불이 솟구쳐 오르는 것을 우린 자주 경험했어요&lt;br /&gt;그건 찬란한 4월보다 더 많은 밀이삭을 제공하면서&lt;br /&gt;불 타버린 대지처럼 보여요 그리고 저녁이 되면&lt;br /&gt;하늘이 활활 타오르기 위해 붉은 빛과 검정 빛이 &lt;br /&gt;결혼하는것은 아닐까&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;&lt;br /&gt;떠나지 말아요&lt;br /&gt;이젠 울지 않을 거예요 이젠 말하지도 않겠어요&lt;br /&gt;바로 여기에 몸을 숨기고서 춤추고 미소짓는&lt;br /&gt;그대를 바라볼 거예요 그리고 그대가 노래하고&lt;br /&gt;그 다름에 웃는 소리를 들을 거예요 나를 내버려 두세요&lt;br /&gt;그대 그림자의 그림자가 되도록&lt;br /&gt;그대 손의 그림자가 되도록&lt;br /&gt;그대 개의 그림자가 되도록&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;br /&gt;떠나지 말아요 떠나지 말아요&lt;/pre&gt;&lt;pre style=&quot;background-color: white; color: #333333; font-size: 12px;&quot;&gt;&lt;br /&gt;&lt;/pre&gt;&lt;pre style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;行かないで&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;忘れなくては&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;過ぎ去った過去の&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;忘れられるもの全てを&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;誤解の日々を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;どうしたらよいのか知りたくて&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;無駄にした時を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;忘れよう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;時として　「どうして」という質問で&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;幸せな心を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;台無しにしてしまった時間を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私を　おいて行かないで&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;雨の降らない国で取れた&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;雨でできた真珠を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君に贈ろう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私が死んだあとまでも&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;大地を掘り起こそう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君の身体を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;黄金と光で覆うために&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;国をつくろう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;そこでは愛が王で&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;愛が法律&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;そして君が王妃になる&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私を　おいて行かないで&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;意味のない言葉を&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;創り出して語ろう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君は分かるはずだ&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;あの恋人達のことを&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君に話そう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;二度にわたり&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;心を燃え上がらせた&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;彼らのことを&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君に会えずに死んだ&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;王の話をしよう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私を　おいて行かないで&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;人はしばしば&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;太古の火山から&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;炎がほとばしり出るのを目にしてきた&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;とっくに活動をやめたと思っていたのに&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;焼け焦げた大地が&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;輝かしい四月より&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;より多くの小麦を生み出すように&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;夕闇が近づき&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;空は赤々と燃え立つ&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;赤と黒は&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;交わることはないのか&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私を　おいて行かないで&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;もうぼくは悲しまない&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;もうぼくは語らない&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;ここに姿を隠し&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;踊り　微笑を浮かべる&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君を見守ろう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;歌い　笑う君の声を聞こう&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君の影の影に&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君の手の影に&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;君の犬の影になるのを&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;妨げないで欲しい&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;行かないで&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial, Helvetica, sans-serif; white-space: normal;&quot;&gt;私を　おいて行かないで&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/5569575552608450391/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://manseok.blogspot.com/2018/10/ne-me-quitte-pas.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/5569575552608450391'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/5569575552608450391'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/2018/10/ne-me-quitte-pas.html' title='Ne me quitte pas (날 떠나지 말아요, 行かないで)'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.youtube.com/vi/Vz6r0TP4FBI/default.jpg" height="72" width="72"/><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-4672138253349145965</id><published>2018-08-31T00:24:00.001-07:00</published><updated>2018-08-31T00:24:56.590-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="maori"/><title type='text'>Hine e Hine (Little girl, little girl)</title><content type='html'>&lt;h2&gt;&lt;span style=&quot;font-family: Arial, sans-serif;&quot;&gt;Hine e Hine&lt;/span&gt;&lt;/h2&gt;&lt;div class=&quot;ltf&quot; style=&quot;caret-color: rgb(26, 26, 26); color: #1a1a1a; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.4em; margin: 0px; padding: 0px;&quot;&gt;&lt;div class=&quot;par&quot; style=&quot;height: 152px; margin: 0.5em 0px 1.2em; padding: 0px;&quot;&gt;&lt;div class=&quot;ll-0-1&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;E tangi ana koe&lt;/div&gt;&lt;div class=&quot;ll-0-2&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine&lt;/div&gt;&lt;div class=&quot;ll-0-3&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Kua ngenge ana koe&lt;/div&gt;&lt;div class=&quot;ll-0-4&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine&lt;/div&gt;&lt;div class=&quot;ll-0-5&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Kati to pouri ra&lt;/div&gt;&lt;div class=&quot;ll-0-6&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Noho &#39;i te aroha&lt;/div&gt;&lt;div class=&quot;ll-0-7&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Te ngakau &#39;o te matua&lt;/div&gt;&lt;div class=&quot;ll-0-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine (Repeat 2x)&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;emptyline&quot; style=&quot;line-height: 0px; margin: 0px; padding: 0px;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;par&quot; style=&quot;height: 152px; margin: 0.5em 0px 1.2em; padding: 0px;&quot;&gt;&lt;div class=&quot;ll-1-1&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;E tangi ana koe&lt;/div&gt;&lt;div class=&quot;ll-1-2&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine&lt;/div&gt;&lt;div class=&quot;ll-1-3&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Kua ngenge ana koe&lt;/div&gt;&lt;div class=&quot;ll-1-4&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine&lt;/div&gt;&lt;div class=&quot;ll-1-5&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Kati to pouri ra&lt;/div&gt;&lt;div class=&quot;ll-1-6&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Noho &#39;i te aroha&lt;/div&gt;&lt;div class=&quot;ll-1-7&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Te ngakau &#39;o te matua&lt;/div&gt;&lt;div class=&quot;ll-1-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Hine e hine (Repeat 2x)&lt;/div&gt;&lt;div class=&quot;ll-1-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;ll-1-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;ll-1-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;h2 class=&quot;title-h2 &quot; style=&quot;caret-color: rgb(0, 0, 0); color: black; font-weight: normal; height: 27px; line-height: 1.3em; margin: 10px 0px 1em; padding: 0px;&quot;&gt;Little Girl, Little Girl&lt;/h2&gt;&lt;div class=&quot;ltf&quot; style=&quot;line-height: 1.4em; margin: 0px; padding: 0px;&quot;&gt;&lt;div class=&quot;par&quot; style=&quot;height: 152px; margin: 0.5em 0px 1.2em; padding: 0px;&quot;&gt;&lt;div class=&quot;ll-0-1&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;You are crying&lt;/div&gt;&lt;div class=&quot;ll-0-2&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl&lt;/div&gt;&lt;div class=&quot;ll-0-3&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;You are tired&lt;/div&gt;&lt;div class=&quot;ll-0-4&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl&lt;/div&gt;&lt;div class=&quot;ll-0-5&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Do not fear&lt;/div&gt;&lt;div class=&quot;ll-0-6&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;For there is love&lt;/div&gt;&lt;div class=&quot;ll-0-7&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;In the father&#39;s heart for you&lt;/div&gt;&lt;div class=&quot;ll-0-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl.&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;emptyline&quot; style=&quot;line-height: 0px; margin: 0px; padding: 0px;&quot;&gt;&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;par&quot; style=&quot;height: 152px; margin: 0.5em 0px 1.2em; padding: 0px;&quot;&gt;&lt;div class=&quot;ll-1-1&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;You are crying&lt;/div&gt;&lt;div class=&quot;ll-1-2&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl&lt;/div&gt;&lt;div class=&quot;ll-1-3&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;You are tired&lt;/div&gt;&lt;div class=&quot;ll-1-4&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl&lt;/div&gt;&lt;div class=&quot;ll-1-5&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Do not fear&lt;/div&gt;&lt;div class=&quot;ll-1-6&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;For there is love&lt;/div&gt;&lt;div class=&quot;ll-1-7&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;In the father&#39;s heart for you&lt;/div&gt;&lt;div class=&quot;ll-1-8&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;Little girl, little girl.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/4672138253349145965/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://manseok.blogspot.com/2018/08/hine-e-hine-little-girl-little-girl.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/4672138253349145965'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/4672138253349145965'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/2018/08/hine-e-hine-little-girl-little-girl.html' title='Hine e Hine (Little girl, little girl)'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-4638866384211627841</id><published>2016-11-01T06:23:00.001-07:00</published><updated>2016-11-01T06:23:19.807-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="Econo"/><title type='text'>가계부채 1200兆…숨겨진 &#39;3대 폭탄&#39;</title><content type='html'>&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;한국은행은 1일 ‘통화신용정책보고서’에서 올해 1~8월 가계부채 증가세가 예년의 2배 이상이라고 밝혔다. 직전 4년 동안(2012~2015년)엔 평균 30조원 정도씩 늘던 것이, 올 들어 68조원 늘었다는 것이다. 또 가계부채가 은행보다 서민층이 많이 이용하는 저축은행·새마을금고 등 비(非)은행 대출을 통해 크게 늘고 있다고 한은은 밝혔다. 올해 1~8월 은행의 가계대출 증가 폭은 지난해 같은 기간보다 5조원 정도 줄었다. 반면 비은행 가계대출 증가 폭은 15조원가량 늘었다.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;① 비은행권 ‘생계형 대출’ 급증&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;한은에 따르면 8월 말 비은행권 기타대출은 163조4342억원이다. 비은행 기타대출이란 저축은행·신협·새마을금고 등 서민형 금융회사에서 주택 담보 없이 빌려 주는 것으로 이른바 ‘생계형 대출’이다. 변변한 담보도 없고, 은행에서 돈을 빌리지 못하는 서민들이 주로 이용한다. 관련 통계가 처음 잡히기 시작한 2007년 말에는 비은행권의 기타대출 잔액이 63조3634억원이었다. 이게 10년도 안 돼 100조원 늘어난 것이다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;서민 금융회사를 통한 생계형 대출은 최근 1년 사이에 20조원 늘어 증가세가 더 가팔라졌다. 가계부채 증가세를 막기 위해 정부가 은행 대출을 조이자, 비은행 대출이 늘어나는 이른바 ‘풍선 효과’가 나타나고 있다는 평가다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;저축은행들의 ‘후순위 대출’ 영업 방식도 생계형 대출 증가세의 원인이다. 후순위 대출은 은행권에서 주택을 담보로 추가로 돈을 빌리기 어려운 사람의 주택담보대출을 저축은행으로 옮긴 뒤, 담보를 잡지 않는 신용대출 방식으로 은행에서 주택담보대출을 통해 빌린 액수보다 더 빌려 쓰는 방식이다. 금융업계 관계자는 “돈 빌려줄 곳이 마땅치 않은 저축은행들이 은행권의 대출을 저축은행 대출로 바꿔치기해 주는 것이 비은행권 생계형 대출액이 늘어나는 원인 중 하나”라고 말했다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;통상 비은행 대출금리는 은행대출의 2배 이상이다. 금리 인상기로 접어들면 빚을 못 갚는 경우가 속출할 수 있다는 경고가 나오는 이유다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;② 가계부채 ‘빈익빈 부익부’&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;저소득층이 빌리는 부채가 점차 악성(惡性)이 되어 가는 것도 문제라는 지적도 나온다. 최근 원승연 명지대 경영학과 교수 등이 발표한 ‘가계부채와 소득계층 이동’ 논문에 따르면 소득 하위 10% 가계의 2008년 소득 대비 부채비율은 2.09배였는데, 2014년에는 7.85배로 크게 높아졌다. 소득 하위 10% 계층의 빚 총액이 2008년만 해도 연소득의 2배를 약간 넘는 수준이었는데, 2014년에는 연소득의 7배를 넘었다는 뜻이다. 반면 소득 상위 10% 가계의 소득 대비 부채비율은 같은 기간 2.16배에서 1.78배로 줄었다. 이 수치는 개인신용정보업체&amp;nbsp;&lt;span class=&quot;word_dic en&quot;&gt;KCB&lt;/span&gt;(코리아크레딧뷰로)의 대출자료 20만 건을 분석한 결과다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;저소득층의 부채비율이 늘고 있는 것은 햇살론처럼 정부 정책자금을 활용해 서민들에게 대출을 많이 확대한 영향도 있다는 분석이다. 원 교수는 “내일 당장 먹고살 게 없어서 돈을 계속 빌려야 하는 저소득층에게 정부가 대출 상품을 마련해 준 결과”라고 말했다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;③가계부채 통계에도 안 잡히는 개인사업자 대출&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;국내 가구의 25%를 차지하는 자영업자들이 빌린 개인사업자 대출 또한 가계부채의 숨은 폭탄으로 지목된다. 가계대출 통계에는 함께 집계되지 않지만, 사실상 가계대출과 비슷한 역할을 하며 가계의 부담이 되기 때문이다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;한국기업평가가 지난 6월 말 현재 12개 시중은행의 개인사업자 대출을 집계한 결과, 총 185조5000억원으로 작년 말(177조7000억원)보다 9% 늘었다. 주택담보대출(344조1000억원)보다는 적지만, 은행권 총대출에서 차지하는 비중이 18%에 달한다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;개인사업자 대출은 내수 경기에 민감한 부동산 및 임대업(39.4%)이나 도소매·숙박·음식점(26.5%) 등에 몰려 있다. 경기가 가라앉거나 주택·부동산 시장에 찬바람이 불면 부실화할 위험이 도사리고 있다는 지적이다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;특히 은퇴한 50~60대 베이비부머 자영업자가 지고 있는 부채의 질에 대한 우려가 나온다. 금융연구원이 자영업자의 연령대별 소득 대비 부채비율을 따져 보니 50대가 2.86배로 전 연령대를 통틀어 가장 높았다. 50대 자영업자의 경우 연소득의 3배 가까운 빚을 이고 있는 셈이다. 50~60대 자영업자는 은행이 아닌 2금융권에서 빚을 낸 경우가 많다는 점도 우려할 만하다. 임진 한국금융연구원 거시경제연구실장은 “정부가 총대출 규모만 들여다보지 말고 소득 계층별로 개개인의 부채와 파산 리스크(위험)도 면밀히 따져야 한다”고 말했다.&lt;/div&gt;&lt;div style=&quot;color: #363636; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; word-break: normal; word-wrap: normal;&quot;&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/4638866384211627841/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://manseok.blogspot.com/2016/11/1200-3.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/4638866384211627841'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/4638866384211627841'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/2016/11/1200-3.html' title='가계부채 1200兆…숨겨진 &#39;3대 폭탄&#39;'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-5070208850201904895</id><published>2016-11-01T06:21:00.004-07:00</published><updated>2016-11-01T06:21:44.425-07:00</updated><title type='text'>모건스탠리 &quot;한국, 2018년 양적완화 예상..5가지 이유&quot;</title><content type='html'>&lt;span style=&quot;background-color: white; color: #333333; font-family: , &amp;quot;gulim&amp;quot; , &amp;quot;tahoma&amp;quot; , sans-serif; font-size: 12px;&quot;&gt;30일 모건스탠리는 한국은행이 내년 1분기부터 매 분기 0.25%p씩 기준금리(현재 1.25%)를 인하해 3분기말에는 0.5%까지 낮출 것으로 전망했다. 또한 오는 2018년부터 방어적 양적완화(QE, Quantitative Easing)를 실시할 것으로 예상했다. 양적완화를 통한 본원통화 확대 규모는 연간 국내총생산(GDP)의 2%인 260억달러(약 32조원)로 추정했다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: white; color: #333333; font-family: , &amp;quot;gulim&amp;quot; , &amp;quot;tahoma&amp;quot; , sans-serif; font-size: 12px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;figure dmcf-pid=&quot;i9NW6FtcEj&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin: 0px auto 12px; position: relative;&quot;&gt;&lt;img alt=&quot;© News1&quot; dmcf-mid=&quot;iZh40IHDOi&quot; dmcf-mtype=&quot;image&quot; height=&quot;340&quot; src=&quot;https://t1.daumcdn.net/news/201610/31/NEWS1/20161031063139810yuim.jpg&quot; style=&quot;border: 0px none; display: block; margin: 0px auto; max-width: 100%;&quot; width=&quot;560&quot; /&gt;&lt;figcaption style=&quot;color: #616686; font-size: 0.8em; line-height: 1.5em; margin: 3px auto; width: 560px;&quot;&gt;&lt;br /&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;br /&gt;&lt;div dmcf-pid=&quot;iSPdvrZTr4&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;모건스탠리는 양적완화까지 실시하게 될 배경으로 Δ 과잉부채 Δ 고령화 Δ 중국 등의 수요충격 Δ 비효율적 자원배분 Δ 선제적 정책의 부족 등 5가지를 꼽았다.&lt;/div&gt;&lt;div dmcf-pid=&quot;iI5pLHKVRb&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;부채의 경우 지난 2007~2015년 한국의 GDP 대비 가계와 기업의 부채는 각각 15.6%와 20.7% 증가했다. 이는 미래의 성장 기반을 미리 당겨다 쓴 것으로, 민간섹터는 부채를 줄이기 위해 소비와 투자보다 저축에 치중해야 한다. 이는 성장률을 훼손할 것이라는 게 모건스탠리의 판단이다.&lt;/div&gt;&lt;div dmcf-pid=&quot;iUSQhQ6neO&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;모건은 또한 “앞으로 10년간 한국의 생산가능인구(15~64세)는 올해를 정점으로 연평균 0.5%씩 감소할 전망이며, 생산가능인구의 부양비율(dependency ratio)은 가파르게 급증할 것”으로 내다봤다. 부양비율은 생산가능인구(15~64세)에 대한 유소년인구(0~14세)와 고령인구(65세 이상) 합계치의 배율이다.&lt;/div&gt;&lt;br /&gt;&lt;figure dmcf-pid=&quot;iTbCHv45RB&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin: 0px auto 12px; position: relative;&quot;&gt;&lt;img alt=&quot;© News1&quot; dmcf-mid=&quot;ii4aLtSIbq&quot; dmcf-mtype=&quot;image&quot; height=&quot;412&quot; src=&quot;https://t1.daumcdn.net/news/201610/31/NEWS1/20161031063139972apdc.jpg&quot; style=&quot;border: 0px none; display: block; margin: 0px auto; max-width: 100%;&quot; width=&quot;560&quot; /&gt;&lt;figcaption style=&quot;color: #616686; font-size: 0.8em; line-height: 1.5em; margin: 3px auto; width: 560px;&quot;&gt;&lt;br /&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;br /&gt;&lt;div dmcf-pid=&quot;iMZpbQDCim&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;모건은 또한 “중국 경제의 내수 중심 전환과 국영기업 인프라 투자형태의 부양책은 한국 등 아시아 국가들의 수출 경제에 도움을 줄 수 없다”고 지적했다. 더구나 중국의 비원자재-생산자물가(PPI) 하락은 한국에 디스인플레이션(물가상승률 둔화) 압력을 높일 것으로 평가했다. 최근 중국의 생산자물가 (+)전환은 원자재를 포함한 수치를 기준으로 한 것이다.&lt;/div&gt;&lt;div dmcf-pid=&quot;i989EZkRLx&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;모건은 이어 “그동안 실시됐던 각종 비효율적 자원배분으로 중소기업과 서비스산업의 경쟁력이 취약해지고 이는 다시 고품질 청년일자리를 사라지게 만들었다”고 판단했다.&lt;/div&gt;&lt;div dmcf-pid=&quot;ihfnRmKTGY&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;마지막으로 한국 경제의 문제점으로 모건스탠리는 정부 정책의 점진주의(incrementalism)를 지목했다. 선제적이고 공격적인 부양책을 실시하지 못하고 악화되는 상황에 후행해 찔끔찔금 대응했다는 것이다. 여기에 내년말 대통령선거 등 정치일정을 대입하면 적극적 부양책은 기대하기 더 힘들 수 있다고 지적했다. 차기 정부 출범 직후인 18~24개월 내에 양적완화를 실시할 것으로 점치는 배경이다.&lt;/div&gt;&lt;div dmcf-pid=&quot;iPVJv6Taix&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;따라서 한은의 올해와 내년 GDP성장률 전망치 2.7% 및 2.8%와 달리, 모건스탠리는 올해 성장률을 2.5%로, 내년엔 2.3%로 둔화되는 시나리오를 예상했다. 소비자물가(CPI)는 올해와 내년 각각 0.9%(종전 1.1%)와 1.2%(종전 1.6%)에 머물 것으로 모건은 관측했다.&lt;/div&gt;&lt;br /&gt;&lt;figure dmcf-pid=&quot;iQmcnfXF9L&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin: 0px auto 12px; position: relative;&quot;&gt;&lt;img alt=&quot;© News1&quot; dmcf-mid=&quot;iukluTIDY1&quot; dmcf-mtype=&quot;image&quot; height=&quot;315&quot; src=&quot;https://t1.daumcdn.net/news/201610/31/NEWS1/20161031063140128rlbf.jpg&quot; style=&quot;border: 0px none; display: block; margin: 0px auto; max-width: 100%;&quot; width=&quot;560&quot; /&gt;&lt;figcaption style=&quot;color: #616686; font-size: 0.8em; line-height: 1.5em; margin: 3px auto; width: 560px;&quot;&gt;&lt;span style=&quot;color: #333333; font-size: 12px;&quot;&gt;한국에서의 자산전략과 관련, 모건스탠리는 채권의 경우 금리 하락시 활용하는 리시브(receive, 고정금리 수취·변동금리 지급)를 조언했다. 구체적으로 2년후 시작되는 2년물 선도스왑(2y2y) 형태의 차액결제 금리스왑(NDIRS) 리시브를 권고했다.&lt;/span&gt;&lt;span style=&quot;color: #333333; font-size: 12px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: red; font-size: 12px;&quot;&gt;또한 달러/원 환율의 경우 내년말 달러당 1250원, 2018년말 1300원 이상을 기록할 것으로 예상했다.&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;br /&gt;&lt;div dmcf-pid=&quot;i7Y1sS9nEV&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin-bottom: 1em; word-break: normal; word-wrap: normal;&quot;&gt;그러나 증시의 경우, 양적완화 실시와 함께 외국인자금 유입, 원화 약세에 따른 기업이익 증가 등으로 상승세를 탈 것으로 기대했다. 기본 시나리오로 목표지수 2200p를 산출했다. 강세 시나리오시 2500p까지 상승할 수 있다고 분석했다. 다만 금리인하를 감안해 보험·은행 등 금융주를 피하고 산업재· IT· 에너지 매수를 추천했다. 투자 대안으로 코스피 콜옵션 매수도 유망하다고 권고했다.&lt;/div&gt;&lt;br /&gt;&lt;figure dmcf-pid=&quot;ikcAHs1Qpg&quot; dmcf-ptype=&quot;general&quot; style=&quot;color: #333333; font-family: 굴림, gulim, tahoma, sans-serif; font-size: 12px; margin: 0px auto 12px; position: relative;&quot;&gt;&lt;img alt=&quot;© News1&quot; dmcf-mid=&quot;ioF82odky0&quot; dmcf-mtype=&quot;image&quot; height=&quot;248&quot; src=&quot;https://t1.daumcdn.net/news/201610/31/NEWS1/20161031063140319dnoo.jpg&quot; style=&quot;border: 0px none; display: block; margin: 0px auto; max-width: 100%;&quot; width=&quot;560&quot; /&gt;&lt;/figure&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://manseok.blogspot.com/feeds/5070208850201904895/comments/default' title='댓글'/><link rel='replies' type='text/html' href='http://manseok.blogspot.com/2016/11/2018-5.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/5070208850201904895'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/8598196432745886394/posts/default/5070208850201904895'/><link rel='alternate' type='text/html' href='http://manseok.blogspot.com/2016/11/2018-5.html' title='모건스탠리 &quot;한국, 2018년 양적완화 예상..5가지 이유&quot;'/><author><name>Unknown</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total><gd:extendedProperty name="commentSource" value="1"/><gd:extendedProperty name="commentModerationMode" value="FILTERED_POSTMOD"/></entry><entry><id>tag:blogger.com,1999:blog-8598196432745886394.post-7077553244578873955</id><published>2016-10-29T23:37:00.000-07:00</published><updated>2016-11-04T23:38:01.037-07:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="A7"/><category scheme="http://www.blogger.com/atom/ns#" term="AP"/><category scheme="http://www.blogger.com/atom/ns#" term="architecture"/><category scheme="http://www.blogger.com/atom/ns#" term="arm"/><category scheme="http://www.blogger.com/atom/ns#" term="exynos 5420"/><category scheme="http://www.blogger.com/atom/ns#" term="kernel"/><category scheme="http://www.blogger.com/atom/ns#" term="Linux"/><title type='text'>[Linux Kernel] 161주차(2016.10.29) rest_init()</title><content type='html'>&lt;h3 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 0px 0px 10px;&quot;&gt;Neuromancer : 161 주차&lt;/h3&gt;&lt;h3 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;일시 : 2016.10.29 (161 주차 스터디 진행)&lt;/h3&gt;&lt;h3 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;모임명 : neuromancer.kr&lt;/h3&gt;&lt;h3 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;장소 : 토즈 서현점&lt;/h3&gt;&lt;h3 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;참여인원 : 2명&lt;/h3&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;============&lt;/div&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;161주차 진도&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;161차 시작 위치&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel 1 ~/init/main.c&lt;/li&gt;&lt;li&gt;rest_init 968 ~/init/main.c&lt;/li&gt;&lt;li&gt;kernel_thread 453 ~/init/main.c&lt;/li&gt;&lt;li&gt;do_fork 2067 ~/kernel/fork.c&lt;/li&gt;&lt;li&gt;copy_process 2020 ~/kernel/fork.c&lt;/li&gt;&lt;li&gt;sched_fork 1734 ~/kernel/fork.c&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;161주차 함수 호출 구조&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;call: start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;lockdep_init()&lt;/li&gt;&lt;li&gt;smp_setup_processor_id()&lt;/li&gt;&lt;li&gt;debug_objects_early_init()&lt;/li&gt;&lt;li&gt;boot_init_stack_canary()&lt;/li&gt;&lt;li&gt;cgroup_init_early()&lt;/li&gt;&lt;li&gt;local_irq_disable()&lt;/li&gt;&lt;li&gt;boot_cpu_init()&lt;/li&gt;&lt;li&gt;page_address_init()&lt;/li&gt;&lt;li&gt;pr_notice()&lt;/li&gt;&lt;li&gt;setup_arch()&lt;/li&gt;&lt;li&gt;mm_init_owner()&lt;/li&gt;&lt;li&gt;mm_init_cpumask()&lt;/li&gt;&lt;li&gt;setup_command_line&lt;/li&gt;&lt;li&gt;build_all_zonelists()&lt;/li&gt;&lt;li&gt;page_alloc_init()&lt;/li&gt;&lt;li&gt;pr_notice()&lt;/li&gt;&lt;li&gt;parse_early_param()&lt;/li&gt;&lt;li&gt;parse_args()&lt;/li&gt;&lt;li&gt;jump_label_init()&lt;/li&gt;&lt;li&gt;setup_log_buf()&lt;/li&gt;&lt;li&gt;pidhash_init()&lt;/li&gt;&lt;li&gt;vfs_caches_init_early()&lt;/li&gt;&lt;li&gt;sort_main_extable()&lt;/li&gt;&lt;li&gt;trap_init()&lt;/li&gt;&lt;li&gt;mm_init()&lt;/li&gt;&lt;li&gt;sched_init()&lt;/li&gt;&lt;li&gt;preempt_disable()&lt;/li&gt;&lt;li&gt;irqs_disabled()&lt;/li&gt;&lt;li&gt;local_irq_disabled()&lt;/li&gt;&lt;li&gt;idr_init_cache()&lt;/li&gt;&lt;li&gt;rcu_init()&lt;/li&gt;&lt;li&gt;tick_nohz_init()&lt;/li&gt;&lt;li&gt;contect_tracking_init()&lt;/li&gt;&lt;li&gt;radix_tree_init()&lt;/li&gt;&lt;li&gt;early_irq_init()&lt;/li&gt;&lt;li&gt;init_IRQ()&lt;/li&gt;&lt;li&gt;tick_init()&lt;/li&gt;&lt;li&gt;init_timers()&lt;/li&gt;&lt;li&gt;hrtimers_init()&lt;/li&gt;&lt;li&gt;softirq_init()&lt;/li&gt;&lt;li&gt;timekeeping_init()&lt;/li&gt;&lt;li&gt;time_init()&lt;/li&gt;&lt;li&gt;sched_clock_postinit()&lt;/li&gt;&lt;li&gt;pref_event_init()&lt;/li&gt;&lt;li&gt;profile_init()&lt;/li&gt;&lt;li&gt;call_function_init()&lt;/li&gt;&lt;li&gt;irqs_disabled()&lt;/li&gt;&lt;li&gt;local_irq_enabled()&lt;/li&gt;&lt;li&gt;kmem_cache_init_late()&lt;/li&gt;&lt;li&gt;console_init()&lt;/li&gt;&lt;li&gt;lockdep_init()&lt;/li&gt;&lt;li&gt;lockdep_info()&lt;/li&gt;&lt;li&gt;locking_selftest()&lt;/li&gt;&lt;li&gt;virt_to_page()&lt;/li&gt;&lt;li&gt;page_to_pfn()&lt;/li&gt;&lt;li&gt;page_cgroup_init()&lt;/li&gt;&lt;li&gt;debug_objects_mem_init()&lt;/li&gt;&lt;li&gt;kmemleak_init()&lt;/li&gt;&lt;li&gt;setup_per_cpu_pageset()&lt;/li&gt;&lt;li&gt;numa_policy_init()&lt;/li&gt;&lt;li&gt;sched_clock_init()&lt;/li&gt;&lt;li&gt;calibrate_delay()&lt;/li&gt;&lt;li&gt;pidmap_init()&lt;/li&gt;&lt;li&gt;anon_vma_init()&lt;/li&gt;&lt;li&gt;thread_info_cache_init()&lt;/li&gt;&lt;li&gt;cred_init()&lt;/li&gt;&lt;li&gt;fork_init()&lt;/li&gt;&lt;li&gt;proc_caches_init()&lt;/li&gt;&lt;li&gt;buffer_init()&lt;/li&gt;&lt;li&gt;key_init()&lt;/li&gt;&lt;li&gt;security_init()&lt;/li&gt;&lt;li&gt;dbg_late_init()&lt;/li&gt;&lt;li&gt;vfs_caches_init()&lt;/li&gt;&lt;li&gt;signals_init()&lt;/li&gt;&lt;li&gt;page_writeback_init()&lt;/li&gt;&lt;li&gt;proc_root_init()&lt;/li&gt;&lt;li&gt;cgroup_init()&lt;/li&gt;&lt;li&gt;cpuset_init()&lt;/li&gt;&lt;li&gt;taskstats_init_early()&lt;/li&gt;&lt;li&gt;delayacct_init()&lt;/li&gt;&lt;li&gt;check_bugs()&lt;/li&gt;&lt;li&gt;acpi_early_init()&lt;/li&gt;&lt;li&gt;sfi_init_late()&lt;/li&gt;&lt;li&gt;efi_enabled(EFI_RUNTIME_SERVICES)&lt;/li&gt;&lt;li&gt;ftrace_init()&lt;/li&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starting()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: kernel_thread()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: do_fork()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;copy_process()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: copy_process()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;security_task_create()&lt;/li&gt;&lt;li&gt;dup_task_struct()&lt;/li&gt;&lt;li&gt;ftrace_graph_init_task(p); // null function&lt;/li&gt;&lt;li&gt;get_seccomp_filter(p); // null function&lt;/li&gt;&lt;li&gt;rt_mutex_init_task(p);&lt;/li&gt;&lt;li&gt;copy_creds(p, clone_flags);&lt;/li&gt;&lt;li&gt;try_module_get()&lt;/li&gt;&lt;li&gt;delayacct_tsk_init(p)&lt;/li&gt;&lt;li&gt;copy_flags()&lt;/li&gt;&lt;li&gt;INIT_LIST_HEAD(&amp;amp;p-&amp;gt;children);&lt;/li&gt;&lt;li&gt;INIT_LIST_HEAD(&amp;amp;p-&amp;gt;sibling);&lt;/li&gt;&lt;li&gt;rcu_copy_process(p);&lt;/li&gt;&lt;li&gt;spin_lock_init(&amp;amp;p-&amp;gt;alloc_lock);&lt;/li&gt;&lt;li&gt;init_sigpending(&amp;amp;p-&amp;gt;pending);&lt;/li&gt;&lt;li&gt;memset(&amp;amp;p-&amp;gt;rss_stat, 0, sizeof(p-&amp;gt;rss_stat));&lt;/li&gt;&lt;li&gt;task_io_accounting_init(&amp;amp;p-&amp;gt;ioac); // null function&lt;/li&gt;&lt;li&gt;acct_clear_integrals(p); // null function&lt;/li&gt;&lt;li&gt;posix_cpu_timers_init(p);&lt;/li&gt;&lt;li&gt;do_posix_clock_monotonic_gettime(&amp;amp;p-&amp;gt;start_time);&lt;/li&gt;&lt;li&gt;monotonic_to_bootbased(&amp;amp;p-&amp;gt;real_start_time);&lt;/li&gt;&lt;li&gt;cgroup_fork(p);&lt;/li&gt;&lt;li&gt;sched_fork(clone_flags, p);&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: sched_fork(clone_flags, p);&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;get_cpu();&lt;/li&gt;&lt;li&gt;&lt;em&gt;_sched&lt;/em&gt;fork(clone_flags, p);&lt;/li&gt;&lt;li&gt;rt_prio(p-&amp;gt;prio)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h1 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 1.6em; line-height: 1em; margin: 30px 0px 10px;&quot;&gt;start_kernel()&lt;/h1&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;call: start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;lockdep_init()&lt;/li&gt;&lt;li&gt;smp_setup_processor_id()&lt;/li&gt;&lt;li&gt;debug_objects_early_init()&lt;/li&gt;&lt;li&gt;boot_init_stack_canary()&lt;/li&gt;&lt;li&gt;cgroup_init_early()&lt;/li&gt;&lt;li&gt;local_irq_disable()&lt;/li&gt;&lt;li&gt;boot_cpu_init()&lt;/li&gt;&lt;li&gt;page_address_init()&lt;/li&gt;&lt;li&gt;pr_notice()&lt;/li&gt;&lt;li&gt;setup_arch()&lt;/li&gt;&lt;li&gt;mm_init_owner()&lt;/li&gt;&lt;li&gt;mm_init_cpumask()&lt;/li&gt;&lt;li&gt;setup_command_line&lt;/li&gt;&lt;li&gt;build_all_zonelists()&lt;/li&gt;&lt;li&gt;page_alloc_init()&lt;/li&gt;&lt;li&gt;pr_notice()&lt;/li&gt;&lt;li&gt;parse_early_param()&lt;/li&gt;&lt;li&gt;parse_args()&lt;/li&gt;&lt;li&gt;jump_label_init()&lt;/li&gt;&lt;li&gt;setup_log_buf()&lt;/li&gt;&lt;li&gt;pidhash_init()&lt;/li&gt;&lt;li&gt;vfs_caches_init_early()&lt;/li&gt;&lt;li&gt;sort_main_extable()&lt;/li&gt;&lt;li&gt;trap_init()&lt;/li&gt;&lt;li&gt;mm_init()&lt;/li&gt;&lt;li&gt;sched_init()&lt;/li&gt;&lt;li&gt;preempt_disable()&lt;/li&gt;&lt;li&gt;irqs_disabled()&lt;/li&gt;&lt;li&gt;local_irq_disabled()&lt;/li&gt;&lt;li&gt;idr_init_cache()&lt;/li&gt;&lt;li&gt;rcu_init()&lt;/li&gt;&lt;li&gt;tick_nohz_init()&lt;/li&gt;&lt;li&gt;contect_tracking_init()&lt;/li&gt;&lt;li&gt;radix_tree_init()&lt;/li&gt;&lt;li&gt;early_irq_init()&lt;/li&gt;&lt;li&gt;init_IRQ()&lt;/li&gt;&lt;li&gt;tick_init()&lt;/li&gt;&lt;li&gt;init_timers()&lt;/li&gt;&lt;li&gt;hrtimers_init()&lt;/li&gt;&lt;li&gt;softirq_init()&lt;/li&gt;&lt;li&gt;timekeeping_init()&lt;/li&gt;&lt;li&gt;time_init()&lt;/li&gt;&lt;li&gt;sched_clock_postinit()&lt;/li&gt;&lt;li&gt;pref_event_init()&lt;/li&gt;&lt;li&gt;profile_init()&lt;/li&gt;&lt;li&gt;call_function_init()&lt;/li&gt;&lt;li&gt;irqs_disabled()&lt;/li&gt;&lt;li&gt;local_irq_enabled()&lt;/li&gt;&lt;li&gt;kmem_cache_init_late()&lt;/li&gt;&lt;li&gt;console_init()&lt;/li&gt;&lt;li&gt;lockdep_init()&lt;/li&gt;&lt;li&gt;lockdep_info()&lt;/li&gt;&lt;li&gt;locking_selftest()&lt;/li&gt;&lt;li&gt;virt_to_page()&lt;/li&gt;&lt;li&gt;page_to_pfn()&lt;/li&gt;&lt;li&gt;page_cgroup_init()&lt;/li&gt;&lt;li&gt;debug_objects_mem_init()&lt;/li&gt;&lt;li&gt;kmemleak_init()&lt;/li&gt;&lt;li&gt;setup_per_cpu_pageset()&lt;/li&gt;&lt;li&gt;numa_policy_init()&lt;/li&gt;&lt;li&gt;sched_clock_init()&lt;/li&gt;&lt;li&gt;calibrate_delay()&lt;/li&gt;&lt;li&gt;pidmap_init()&lt;/li&gt;&lt;li&gt;anon_vma_init()&lt;/li&gt;&lt;li&gt;thread_info_cache_init()&lt;/li&gt;&lt;li&gt;cred_init()&lt;/li&gt;&lt;li&gt;fork_init()&lt;/li&gt;&lt;li&gt;proc_caches_init()&lt;/li&gt;&lt;li&gt;buffer_init()&lt;/li&gt;&lt;li&gt;key_init()&lt;/li&gt;&lt;li&gt;security_init()&lt;/li&gt;&lt;li&gt;dbg_late_init()&lt;/li&gt;&lt;li&gt;vfs_caches_init()&lt;/li&gt;&lt;li&gt;signals_init()&lt;/li&gt;&lt;li&gt;page_writeback_init()&lt;/li&gt;&lt;li&gt;proc_root_init()&lt;/li&gt;&lt;li&gt;cgroup_init()&lt;/li&gt;&lt;li&gt;cpuset_init()&lt;/li&gt;&lt;li&gt;taskstats_init_early()&lt;/li&gt;&lt;li&gt;delayacct_init()&lt;/li&gt;&lt;li&gt;check_bugs()&lt;/li&gt;&lt;li&gt;acpi_early_init()&lt;/li&gt;&lt;li&gt;sfi_init_late()&lt;/li&gt;&lt;li&gt;efi_enabled()&lt;/li&gt;&lt;li&gt;efi_late_init()&lt;/li&gt;&lt;li&gt;efi_free_boot_services()&lt;/li&gt;&lt;li&gt;ftrace_init()&lt;/li&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs cs&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20130824&lt;/span&gt;&lt;br /&gt;asmlinkage &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; __&lt;span class=&quot;hljs-function&quot;&gt;init &lt;span class=&quot;hljs-title&quot; style=&quot;color: #990000; font-weight: bold;&quot;&gt;start_kernel&lt;/span&gt;(&lt;span class=&quot;hljs-params&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt;&lt;/span&gt;)&lt;br /&gt;&lt;/span&gt;{&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;char&lt;/span&gt; * command_line;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;struct&lt;/span&gt; kernel_param __start___param[], __stop___param[];&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ATAG,DTB 정보로 사용&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Need to run as early as possible, to initialize the&lt;br /&gt;  * lockdep hash:&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; lockdep_init();&lt;br /&gt; smp_setup_processor_id();&lt;br /&gt; debug_objects_early_init();&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Set up the the initial canary ASAP:&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; boot_init_stack_canary();&lt;br /&gt;&lt;br /&gt; cgroup_init_early();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cgroup 를 사용하기 위한 cgroup_dummy_root, cgroup_subsys 의 구조체 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; local_irq_disable();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// IRQ를 disable 함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; early_boot_irqs_disabled = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;true&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// early_boot_irqs_disabled: true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt; * Interrupts are still disabled. Do necessary setups, then&lt;br /&gt; * enable them&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt; boot_cpu_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 현재 cpu(core id)를 얻어서 cpu_XXX_bits[] 의 cpu를 셋한다.&lt;/span&gt;&lt;br /&gt; &lt;br /&gt; page_address_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 128개의 page_address_htable 배열을 초기화&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; pr_notice(&lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;%s&quot;&lt;/span&gt;, linux_banner);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 배너:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// Linux version 2.6.37_DM385_IPNC_3.50.00&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//  (a0875405@bangvideoapps01) (gcc version 4.5.3 20110311&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//  (prerelease) (GCC) ) #1 Fri Dec 21 17:27:08 IST 2012&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; setup_arch(&amp;amp;command_line);&lt;br /&gt;&lt;br /&gt; mm_init_owner(&amp;amp;init_mm, &amp;amp;init_task); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; mm_init_cpumask(&amp;amp;init_mm); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// command_line: exynos5420-smdk5420.dts 파일의 chosen node 의 bootarg 값&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &quot;console=ttySAC2,115200 init=/linuxrc&quot;&lt;/span&gt;&lt;br /&gt; setup_command_line(command_line);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// saved_command_line 및 static_command_line 할당&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; setup_nr_cpu_ids();&lt;br /&gt; setup_per_cpu_areas();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// pcpu 구조체를 만들어 줌 (mm/percpu.c)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; smp_prepare_boot_cpu(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* arch-specific boot-cpu hooks */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// boot cpu 0의 pcpu 영역의 base주소를 core register에 설정해줌&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; build_all_zonelists(NULL, NULL);&lt;br /&gt;&lt;br /&gt; page_alloc_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cpu_chain에 page_alloc_cpu_notify를 연결함 (mutex lock/unlock 사용)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// boot_command_line: &quot;console=ttySAC2,115200 init=/linuxrc&quot;&lt;/span&gt;&lt;br /&gt; pr_notice(&lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;Kernel command line: %s\n&quot;&lt;/span&gt;, boot_command_line);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &quot;Kernel command line: console=ttySAC2,115200 init=/linuxrc&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; parse_early_param();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// setup_arch에서 수행했던 작업 다시 수행&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// command arg에서 각 요소들을 파싱하여 early init section으로 설정된 디바이스 초기화.&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 우리는 serial device가 검색이 되지만 config설정은 없어서 아무것도 안함.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// static_command_line: &quot;console=ttySAC2,115200 init=/linuxrc&quot;&lt;/span&gt;&lt;br /&gt; parse_args(&lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;Booting kernel&quot;&lt;/span&gt;, static_command_line, __start___param,&lt;br /&gt;     __stop___param - __start___param,&lt;br /&gt;     &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;-1&lt;/span&gt;, &amp;amp;unknown_bootoption);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// DTB에서 넘어온 bootargs를 파싱하여 param, val을 뽑아내고 그에 대응되는&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kernel_param 구조체에 값을 등록함.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; jump_label_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// HAVE_JUMP_LABEL 이 undefined 이므로 NULL 함수&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * These use large bootmem allocations and must precede&lt;br /&gt;  * kmem_cache_init()&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; setup_log_buf(&lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// defalut log_buf의 크기는 __LOG_BUF_LEN: 0x20000 (128KB) 임&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// early_param 에서 호출했던 log_buf_len 값이 있다면 log_buf의 크기를 넘어온 크기로 만듬&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; pidhash_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// pidhash의 크기를 16kB만큼 할당 받고 4096개의 hash list를 만듬&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; vfs_caches_init_early();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// Dentry cache, Inode-cache용 hash를 위한 메모리 공간을 각각 512kB, 256kB만큼 할당 받고,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 131072, 65536개 만큼 hash table을 각각 만듬&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; sort_main_extable();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// extable 을 cmp_ex를 이용하여 sort수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; trap_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; mm_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// buddy와 slab 을 활성화 하고 기존 할당 받은 bootmem 은 buddy,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// pcpu 메모리, vmlist 는 slab으로 이관&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Set up the scheduler prior starting any interrupts (such as the&lt;br /&gt;  * timer interrupt). Full topology setup happens at smp_init()&lt;br /&gt;  * time - but meanwhile we still have a functioning scheduler.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; sched_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// scheduler가 사용하는 자료 구조 초기화, idle_threads를 init_task로 세팅&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Disable preemption - early bootup scheduling is extremely&lt;br /&gt;  * fragile until we cpu_idle() for the first time.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; preempt_disable();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// preempt count를 증가시켜 preemption 못하도록 막음&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// irqs_disabled(): 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (WARN(!irqs_disabled(), &lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;Interrupts were enabled *very* early, fixing it\n&quot;&lt;/span&gt;))&lt;br /&gt;  local_irq_disable();&lt;br /&gt;&lt;br /&gt; idr_init_cache();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// integer ID management로 사용하는 idr_layer_cache에 kmem_cache#21 을 생성 및 초기화 후 할당&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; rcu_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rcu 자료구조 bh, sched, preempt 를 각각 초기화 수행함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; tick_nohz_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; context_tracking_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; radix_tree_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// radix tree로 사용하는 radix_tree_node_cachep에 kmem_cache#20을 생성 및 초기화 후 할당하고&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// height_to_maxindex을 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* init some links before init_ISA_irqs() */&lt;/span&gt;&lt;br /&gt; early_irq_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// irq_desc 0 ~ 15 까지의 object을 할당 받고 초기화를 수행&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// allocated_irqs에 bit를 1로 세팅하고 radix tree에 각 irq_desc를 노트로 추가&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; init_IRQ();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// gic, combiner이 사용할 메모리 할당과 자료 구조 설정,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// gic irq (0~15), combiner irq (32~63) interrupt 를 enable 시킴&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; tick_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// tick 관련 mask 변수를 0으로 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; init_timers();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// boot_tvec_bases의 맴버 값을 초기화하고 timers_nb를 cpu_notifier 에 등록,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// softirq_vec[1] 에 run_timer_softirq 등록하여 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; hrtimers_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// hrtimer_bases의 맴버 값을 초기화하고 hrtimers_nb를 cpu_notifier 에 등록,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// softirq_vec[8] 에 run_hrtimer_softirq 등록하여 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; softirq_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// tasklet_vec, tasklet_hi_vec 맴버 값을 초기화하고,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// softirq_vec[6]에 tasklet_action, softirq_vec[0]에 tasklet_hi_action 등록하여 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; timekeeping_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ntp 관련 전역변수 초기화, timekeeper, shadow_timekeeper의 맴버값 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; time_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// timer 를 사용하기 위한 clk source, clk_table 메모리 할당 및 초기화,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// timer event를 위한 timer irq (MCT) 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; sched_clock_postinit();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// sched_clock_timer을 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; perf_event_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; profile_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; call_function_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 각 cpu core에서 사용할 call_single_queue를 맴버값 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cfd_data 맴버값을 초기화하고 pcp에서 사용할 메모리 공간 할당&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cpu_chain에 hotplug_cfd_notifier 를 등록함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// irqs_disabled(): 1&lt;/span&gt;&lt;br /&gt; WARN(!irqs_disabled(), &lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;Interrupts were enabled early\n&quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// early_boot_irqs_disabled: true&lt;/span&gt;&lt;br /&gt; early_boot_irqs_disabled = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;false&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// early_boot_irqs_disabled: false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; local_irq_enable();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// IRQ를 enable 함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; kmem_cache_init_late(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * HACK ALERT! This is early. We&#39;re enabling the console before&lt;br /&gt;  * we&#39;ve done PCI setups etc, and console_init() must be aware of&lt;br /&gt;  * this. But we do want output early, in case something goes wrong.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; console_init();&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// panic_later: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (panic_later)&lt;br /&gt;  panic(panic_later, panic_param);&lt;br /&gt;&lt;br /&gt; lockdep_info(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Need to run this when irqs are enabled, because it wants&lt;br /&gt;  * to self-test [hard/soft]-irqs on/off lock inversion bugs&lt;br /&gt;  * too:&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; locking_selftest(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#ifdef CONFIG_BLK_DEV_INITRD // CONFIG_BLK_DEV_INITRD=y&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// initrd_start: NULL, initrd_below_start_ok: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (initrd_start &amp;amp;&amp;amp; !initrd_below_start_ok &amp;amp;&amp;amp;&lt;br /&gt;     page_to_pfn(virt_to_page((&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; *)initrd_start)) &amp;lt; min_low_pfn) {&lt;br /&gt;  pr_crit(&lt;span class=&quot;hljs-string&quot; style=&quot;color: #dd1144;&quot;&gt;&quot;initrd overwritten (0x%08lx &amp;lt; 0x%08lx) - disabling it.\n&quot;&lt;/span&gt;,&lt;br /&gt;      page_to_pfn(virt_to_page((&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; *)initrd_start)),&lt;br /&gt;      min_low_pfn);&lt;br /&gt;  initrd_start = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; }&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; page_cgroup_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; debug_objects_mem_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; kmemleak_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; setup_per_cpu_pageset();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// per cpu가 사용하는 pageset의 각각의 zone 맴버값 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; numa_policy_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// late_time_init: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (late_time_init)&lt;br /&gt;  late_time_init();&lt;br /&gt;&lt;br /&gt; sched_clock_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// sched_clock_running 값을 1 로 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; calibrate_delay();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// BogoMIPS값을 결정하기위한 계산을 수행하고 결과를 출력함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; pidmap_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// pidmap 을 사용하기 위한 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; anon_vma_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// anon vma 를 사용하기 위한 kmem_cache 할당자 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#ifdef CONFIG_X86 // CONFIG_X86=n&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (efi_enabled(EFI_RUNTIME_SERVICES))&lt;br /&gt;  efi_enter_virtual_mode();&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; thread_info_cache_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; cred_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// credentials 를 사용하기 위한 kmem_cache 할당자 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// totalram_pages: 총 free된 page 수&lt;/span&gt;&lt;br /&gt; fork_init(totalram_pages);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_struct 를 사용하기 위한 kmem_cache 할당자 초기화 수행&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// max_threads값을 계산하여 init_task에 threads값의 limit 값 설정함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; proc_caches_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// sighand_struct, signal_struct, files_struct, fs_struct, mm_struct, vm_area_struct, nsproxy&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 를 사용하기 위한 kmem_cache 할당자 및 percpu list 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; buffer_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// buffer_head 를 사용하기 위한 kmem_cache 할당자 및 max_buffer_heads 값 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; key_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null funtion&lt;/span&gt;&lt;br /&gt; security_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null funtion&lt;/span&gt;&lt;br /&gt; dbg_late_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null funtion&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// totalram_pages: 총 free된 page 수&lt;/span&gt;&lt;br /&gt; vfs_caches_init(totalram_pages);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// virtual file system을 위한 names, dentry, inode, filp, mount cache 생성 후&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// file system 을 위한 초기화 수행 및 mount 수행, block, char dev 사용을 위한 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; signals_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// signal을 사용하기 위한 kmem_cache 를 생성&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* rootfs populating might need page-writeback */&lt;/span&gt;&lt;br /&gt; page_writeback_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// page writeback을 위한 global_dirty_limit, ratelimit_pages 값을 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#ifdef CONFIG_PROC_FS // CONFIG_PROC_FS=y&lt;/span&gt;&lt;br /&gt; proc_root_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// proc filesystem을 등록 하고 proc을 사용하기 위한 dentry, inode 생성 후&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// sysctl_base_table 에 등록된 kernel, vm, fs, debug, dev의 dir, files 를 recursive 하게 RB Tree 를 구성함&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; cgroup_init();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cgroup에서 사용하는 sub system 인 debug_subsys, cpu_cgroup_subsys, cpuacct_subsys, freezer_subsys 를 등록 하고&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// init_css_set.subsys 를 이용하여 hash key 값 생성, cgroup 을 위한 kobject 를 생성, cgroup용 fils system type을 추가 하여&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// filesystem 에 등록함, cgroup 을 위한 proc 생성.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; cpuset_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; taskstats_init_early(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; delayacct_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; check_bugs();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// page 2개를 할당 받고 할당 받은 메모리에값을 쓰고 비교하여&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 메모리 동작을 테스트 수행한 이후 다시 메모리를 반환함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; acpi_early_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* before LAPIC and SMP init */&lt;/span&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; sfi_init_late(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// efi_enabled(EFI_RUNTIME_SERVICES): 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (efi_enabled(EFI_RUNTIME_SERVICES)) {&lt;br /&gt;  efi_late_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;  efi_free_boot_services(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; ftrace_init(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* Do the rest non-__init&#39;ed, we&#39;re now alive */&lt;/span&gt;&lt;br /&gt; rest_init();&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;rest_init()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs cpp&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20160827&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;static&lt;/span&gt; noinline &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; __&lt;span class=&quot;hljs-function&quot;&gt;init_refok &lt;span class=&quot;hljs-title&quot; style=&quot;color: #990000; font-weight: bold;&quot;&gt;rest_init&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;{&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;int&lt;/span&gt; pid;&lt;br /&gt;&lt;br /&gt; rcu_scheduler_starting(); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * We need to spawn init first so that it obtains pid 1, however&lt;br /&gt;  * the init task will end up wanting to create kthreads, which, if&lt;br /&gt;  * we schedule it before we create kthreadd, will OOPS.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// CLONE_FS: 0x00000200, CLONE_SIGHAND: 0x00000800&lt;/span&gt;&lt;br /&gt; kernel_thread(kernel_init, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, CLONE_FS | CLONE_SIGHAND);&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;kernel_thread()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starting()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs cpp&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20160827&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kernel_init, NULL, 0x00000A00&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;pid_t&lt;/span&gt; kernel_thread(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;int&lt;/span&gt; (*fn)(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; *), &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;void&lt;/span&gt; *arg, &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; flags)&lt;br /&gt;{&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// flags: 0x00000A00, CLONE_VM: 0x00000100, CLONE_UNTRACED: 0x00800000,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// fn: kernel_init, arg: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; do_fork(flags|CLONE_VM|CLONE_UNTRACED, (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt;)fn,&lt;br /&gt;  (&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt;)arg, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;);&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;do_fork()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starring()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: kernel_thread()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs cpp&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20160827&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// flags: 0x00800B00, fn: kernel_init, arg: NULL, NULL, NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;color: #990000; font-weight: bold;&quot;&gt;do_fork&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; clone_flags,&lt;br /&gt;       &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; stack_start,&lt;br /&gt;       &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; stack_size,&lt;br /&gt;       &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;int&lt;/span&gt; __user *parent_tidptr,&lt;br /&gt;       &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;int&lt;/span&gt; __user *child_tidptr)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;{&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;struct&lt;/span&gt; task_struct *p;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;int&lt;/span&gt; trace = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// trace: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;long&lt;/span&gt; nr;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Determine whether and which event to report to ptracer.  When&lt;br /&gt;  * called from kernel_thread or CLONE_UNTRACED is explicitly&lt;br /&gt;  * requested, no event is reported; otherwise, report if the event&lt;br /&gt;  * for the type of forking is enabled.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_UNTRACED: 0x00800000&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (!(clone_flags &amp;amp; CLONE_UNTRACED)) {&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (clone_flags &amp;amp; CLONE_VFORK)&lt;br /&gt;   trace = PTRACE_EVENT_VFORK;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CSIGNAL) != SIGCHLD)&lt;br /&gt;   trace = PTRACE_EVENT_CLONE;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;else&lt;/span&gt;&lt;br /&gt;   trace = PTRACE_EVENT_FORK;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (likely(!ptrace_event_enabled(current, trace)))&lt;br /&gt;   trace = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, stack_start: kernel_init, stack_size: 0, child_tidptr: 0, trace: 0&lt;/span&gt;&lt;br /&gt; p = copy_process(clone_flags, stack_start, stack_size,&lt;br /&gt;    child_tidptr, &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, trace);&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;do_fork()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starring()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: kernel_thread()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: do_fork()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;copy_process()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: copy_process()&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs php&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20160827&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, stack_start: kernel_init, stack_size: 0, child_tidptr: 0, NULL, trace: 0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;static&lt;/span&gt; struct task_struct *copy_process(unsigned long clone_flags,&lt;br /&gt;  unsigned long stack_start,&lt;br /&gt;  unsigned long stack_size,&lt;br /&gt;  int __user *child_tidptr,&lt;br /&gt;  struct pid *pid,&lt;br /&gt;  int trace)&lt;br /&gt;{&lt;br /&gt; int retval;&lt;br /&gt; struct task_struct *p;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWNS: 0x00020000, CLONE_FS: 0x00000200&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWNS|CLONE_FS)) == (CLONE_NEWNS|CLONE_FS))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWUSER: 0x10000000, CLONE_FS: 0x00000200&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWUSER|CLONE_FS)) == (CLONE_NEWUSER|CLONE_FS))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Thread groups must share signals as well, and detached threads&lt;br /&gt;  * can only be started up within the thread group.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_THREAD: 0x00010000, CLONE_SIGHAND: 0x00000800&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_THREAD) &amp;amp;&amp;amp; !(clone_flags &amp;amp; CLONE_SIGHAND))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Shared signal handlers imply shared VM. By way of the above,&lt;br /&gt;  * thread groups also imply shared VM. Blocking this case allows&lt;br /&gt;  * for various simplifications in other code.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_SIGHAND: 0x00000800, CLONE_VM: 0x00000100&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_SIGHAND) &amp;amp;&amp;amp; !(clone_flags &amp;amp; CLONE_VM))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/08/27 종료&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/09/03 시작&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Siblings of global init remain as zombies on exit since they are&lt;br /&gt;  * not reaped by their parent (swapper). To solve this and to avoid&lt;br /&gt;  * multi-rooted process trees, prevent global and container-inits&lt;br /&gt;  * from creating siblings.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_PARENT: 0x00008000, SIGNAL_UNKILLABLE: 0x00000040&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task, current-&amp;gt;signal: &amp;amp;init_signals&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;signal-&amp;gt;flags: (&amp;amp;init_signals)-&amp;gt;flags: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_PARENT) &amp;amp;&amp;amp;&lt;br /&gt;   current-&amp;gt;signal-&amp;gt;flags &amp;amp; SIGNAL_UNKILLABLE)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * If the new process will be in a different pid or user namespace&lt;br /&gt;  * do not allow it to share a thread group or signal handlers or&lt;br /&gt;  * parent with the forking task.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_SIGHAND: 0x00000800&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (clone_flags &amp;amp; CLONE_SIGHAND) {&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWUSER: 0x10000000, CLONE_NEWPID: 0x20000000&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task, task_active_pid_ns(&amp;amp;init_task): &amp;amp;init_pid_ns,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;nsproxy: (&amp;amp;init_task)-&amp;gt;nsproxy: &amp;amp;init_nsproxy,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;nsproxy-&amp;gt;pid_ns_for_children: (&amp;amp;init_nsproxy)-&amp;gt;pid_ns_for_children: &amp;amp;init_pid_ns&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWUSER | CLONE_NEWPID)) ||&lt;br /&gt;    (task_active_pid_ns(current) !=&lt;br /&gt;     current-&amp;gt;nsproxy-&amp;gt;pid_ns_for_children))&lt;br /&gt;   &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, security_task_create(0x00800B00): 0&lt;/span&gt;&lt;br /&gt; retval = security_task_create(clone_flags);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (retval)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; fork_out;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ENOMEM: 12&lt;/span&gt;&lt;br /&gt; retval = -ENOMEM;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -12&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// dup_task_struct(&amp;amp;init_task): kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; p = dup_task_struct(current);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// dup_task_struct 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct task_struct 만큼의 메모리를 할당 받음&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct thread_info 를 구성 하기 위한 메모리를 할당 받음 (8K)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 page 2개의 메로리의 가상 주소&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 kmem_cache#15-oX (struct task_struct) 메모리에 init_task 값을 전부 할당함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;stack: 할당 받은 page 2개의 메로리의 가상 주소&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 kmem_cache#15-oX (struct task_struct) 의 stack의 값을 init_task 의 stack 값에서 전부 복사함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 복사된 struct thread_info 의 task 주소값을 할당 받은 kmem_cache#15-oX (struct task_struct)로 변경함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// *(할당 받은 page 2개의 메로리의 가상 주소): init_thread_info&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ((struct thread_info *) 할당 받은 page 2개의 메로리의 가상 주소)-&amp;gt;task: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (((struct thread_info *)(할당 받은 page 2개의 메로리의 가상 주소))-&amp;gt;flags 의 1 bit 값을 clear 수행&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// *((unsigned long *)(할당 받은 page 2개의 메로리의 가상 주소 + 1)): 0x57AC6E9D&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;usage)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;splice_pipe: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;task_frag.page: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;contig_page_data)-&amp;gt;node_zones[0].vm_stat[16]: 1 을 더함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// vmstat.c의 vm_stat[16] 전역 변수에도 1을 더함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (!p)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; fork_out;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; ftrace_graph_init_task(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; get_seccomp_filter(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; rt_mutex_init_task(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rt_mutex_init_task 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_lock을 사용한 spinlock 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_waiters 리스트 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_blocked_on: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_PROVE_LOCKING // CONFIG_PROVE_LOCKING=n&lt;/span&gt;&lt;br /&gt; DEBUG_LOCKS_WARN_ON(!p-&amp;gt;hardirqs_enabled);&lt;br /&gt; DEBUG_LOCKS_WARN_ON(!p-&amp;gt;softirqs_enabled);&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// EAGAIN: 11&lt;/span&gt;&lt;br /&gt; retval = -EAGAIN;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred: (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_cred: &amp;amp;init_cred,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred-&amp;gt;user: (&amp;amp;init_cred)-&amp;gt;user: &amp;amp;root_user,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;real_cred-&amp;gt;user-&amp;gt;processes: &amp;amp;(&amp;amp;root_user)-&amp;gt;processes, atomic_read(&amp;amp;(&amp;amp;root_user)-&amp;gt;processes): 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// RLIMIT_NPROC: 6, task_rlimit(kmem_cache#15-oX (struct task_struct), 6): 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (atomic_read(&amp;amp;p-&amp;gt;real_cred-&amp;gt;user-&amp;gt;processes) &amp;gt;=&lt;br /&gt;   task_rlimit(p, RLIMIT_NPROC)) {&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred-&amp;gt;user: (&amp;amp;init_cred)-&amp;gt;user: &amp;amp;root_user, INIT_USER: (&amp;amp;root_user)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// CAP_SYS_RESOURCE: 24, capable(24): true, CAP_SYS_ADMIN: 21, capable(21): true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (p-&amp;gt;real_cred-&amp;gt;user != INIT_USER &amp;amp;&amp;amp;&lt;br /&gt;      !capable(CAP_SYS_RESOURCE) &amp;amp;&amp;amp; !capable(CAP_SYS_ADMIN))&lt;br /&gt;   &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_free;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// capable 에서 한일:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;init_task)-&amp;gt;flags: 0x00200100&lt;/span&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;flags: (&amp;amp;init_task)-&amp;gt;flags: 0x00200100, PF_NPROC_EXCEEDED: 0x00001000&lt;/span&gt;&lt;br /&gt; current-&amp;gt;flags &amp;amp;= ~PF_NPROC_EXCEEDED;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;flags: (&amp;amp;init_task)-&amp;gt;flags: 0x00200100&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11, p: kmem_cache#15-oX (struct task_struct), clone_flags: 0x00800B00&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_creds(kmem_cache#15-oX (struct task_struct), 0x00800B00): 0&lt;/span&gt;&lt;br /&gt; retval = copy_creds(p, clone_flags);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_creds 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct cred 만큼의 메모리를 할당 받음&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#16-oX (struct cred) 에 init_cred 에 있는 맴버값 전부를 복사함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#16-oX (struct cred))-&amp;gt;usage)-&amp;gt;counter: 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;init_groups)-&amp;gt;usage)-&amp;gt;counter: 3&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;root_user)-&amp;gt;__count)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;root_user)-&amp;gt;processes)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#16-oX (struct cred))-&amp;gt;usage)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cred: kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_cred: kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (retval &amp;lt; &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_free;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * If multiple threads are within copy_process(), then this check&lt;br /&gt;  * triggers too late. This doesn&#39;t hurt, the check is only there&lt;br /&gt;  * to stop root fork bombs.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// EAGAIN: 11&lt;/span&gt;&lt;br /&gt; retval = -EAGAIN;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// nr_threads: 0, max_threads: 총 free된 page 수 / 16&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (nr_threads &amp;gt;= max_threads)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_cleanup_count;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct),&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)):&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;stack: 할당 받은 page 2개의 메로리의 가상 주소,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)-&amp;gt;exec_domain:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ((struct thread_info *) 할당 받은 page 2개의 메로리의 가상 주소)-&amp;gt;exec_domain: &amp;amp;default_exec_domain,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)-&amp;gt;exec_domain-&amp;gt;module:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;default_exec_domain)-&amp;gt;module: NULL,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// try_module_get(NULL): true&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (!try_module_get(task_thread_info(p)-&amp;gt;exec_domain-&amp;gt;module))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_cleanup_count;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;did_exec: (kmem_cache#15-oX (struct task_struct))-&amp;gt;did_exec&lt;/span&gt;&lt;br /&gt; p-&amp;gt;did_exec = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;did_exec: (kmem_cache#15-oX (struct task_struct))-&amp;gt;did_exec: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; delayacct_tsk_init(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* Must remain after dup_task_struct() */&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; copy_flags(clone_flags, p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_flags 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;flags: 0x00200040&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;children: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt; INIT_LIST_HEAD(&amp;amp;p-&amp;gt;children);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// INIT_LIST_HEAD 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;sibling: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt; INIT_LIST_HEAD(&amp;amp;p-&amp;gt;sibling);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// INIT_LIST_HEAD 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; rcu_copy_process(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rcu_copy_process 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_read_lock_nesting: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_read_unlock_special: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_blocked_node: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;vfork_done: (kmem_cache#15-oX (struct task_struct))-&amp;gt;vfork_done&lt;/span&gt;&lt;br /&gt; p-&amp;gt;vfork_done = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;vfork_done: (kmem_cache#15-oX (struct task_struct))-&amp;gt;vfork_done: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;alloc_lock: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock&lt;/span&gt;&lt;br /&gt; spin_lock_init(&amp;amp;p-&amp;gt;alloc_lock);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// spin_lock_init에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;raw_lock: { { 0 } }&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;magic: 0xdead4ead&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;owner: 0xffffffff&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;owner_cpu: 0xffffffff&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;pending: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending&lt;/span&gt;&lt;br /&gt; init_sigpending(&amp;amp;p-&amp;gt;pending);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// init_sigpending 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;signal)-&amp;gt;sig[0]: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;signal)-&amp;gt;sig[1]: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list)-&amp;gt;next: &amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list)-&amp;gt;prev: &amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utime,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stime,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;gtime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;gtime&lt;/span&gt;&lt;br /&gt; p-&amp;gt;utime = p-&amp;gt;stime = p-&amp;gt;gtime = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;gtime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;gtime: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utimescaled,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stimescaled&lt;/span&gt;&lt;br /&gt; p-&amp;gt;utimescaled = p-&amp;gt;stimescaled = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utimescaled: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stimescaled: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifndef CONFIG_VIRT_CPU_ACCOUNTING_NATIVE // CONFIG_VIRT_CPU_ACCOUNTING_NATIVE=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;prev_cputime.utime = p-&amp;gt;prev_cputime.stime = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_VIRT_CPU_ACCOUNTING_GEN // CONFIG_VIRT_CPU_ACCOUNTING_GEN=n&lt;/span&gt;&lt;br /&gt; seqlock_init(&amp;amp;p-&amp;gt;vtime_seqlock);&lt;br /&gt; p-&amp;gt;vtime_snap = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;vtime_snap_whence = VTIME_SLEEPING;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#if defined(SPLIT_RSS_COUNTING)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;rss_stat: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rss_stat&lt;/span&gt;&lt;br /&gt; memset(&amp;amp;p-&amp;gt;rss_stat, &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;, sizeof(p-&amp;gt;rss_stat));&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// memset 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rss_stat 값을 0 으로 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;default_timer_slack_ns: (kmem_cache#15-oX (struct task_struct))-&amp;gt;default_timer_slack_ns,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;timer_slack_ns: (&amp;amp;init_task)-&amp;gt;timer_slack_ns: 50000&lt;/span&gt;&lt;br /&gt; p-&amp;gt;default_timer_slack_ns = current-&amp;gt;timer_slack_ns;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;default_timer_slack_ns: (kmem_cache#15-oX (struct task_struct))-&amp;gt;default_timer_slack_ns: 50000&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;ioac: (kmem_cache#15-oX (struct task_struct))-&amp;gt;ioac&lt;/span&gt;&lt;br /&gt; task_io_accounting_init(&amp;amp;p-&amp;gt;ioac); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; acct_clear_integrals(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; posix_cpu_timers_init(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// posix_cpu_timers_init 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.prof_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.virt_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.sched_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;start_time: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time&lt;/span&gt;&lt;br /&gt; do_posix_clock_monotonic_gettime(&amp;amp;p-&amp;gt;start_time);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// do_posix_clock_monotonic_gettime 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time 에 현재 시간 값을 가져옴&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time)-&amp;gt;tv_sec: 현재의 sec 값 + 현재의 nsec 값 / 1000000000L&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time)-&amp;gt;tv_nsec: 현재의 nsec 값 % 1000000000L&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_start_time: (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;start_time: (kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time&lt;/span&gt;&lt;br /&gt; p-&amp;gt;real_start_time = p-&amp;gt;start_time;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time)-&amp;gt;tv_sec: 현재의 sec 값 + 현재의 nsec 값 / 1000000000L&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time)-&amp;gt;tv_nsec: 현재의 nsec 값 % 1000000000L&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;real_start_time: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time&lt;/span&gt;&lt;br /&gt; monotonic_to_bootbased(&amp;amp;p-&amp;gt;real_start_time);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// monotonic_to_bootbased 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time.tv_sec: normalized 된 sec 값&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time.tv_nsec: normalized 된 nsec 값&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;io_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;io_context&lt;/span&gt;&lt;br /&gt; p-&amp;gt;io_context = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;io_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;io_context: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;audit_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;audit_context&lt;/span&gt;&lt;br /&gt; p-&amp;gt;audit_context = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;audit_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;audit_context: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (clone_flags &amp;amp; CLONE_THREAD)&lt;br /&gt;  threadgroup_change_begin(current);&lt;br /&gt; cgroup_fork(p);&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;copy_process()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starting()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: kernel_thread()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: do_fork()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;copy_process()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs php&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20160827&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, stack_start: kernel_init, stack_size: 0, child_tidptr: 0, NULL, trace: 0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;static&lt;/span&gt; struct task_struct *copy_process(unsigned long clone_flags,&lt;br /&gt;  unsigned long stack_start,&lt;br /&gt;  unsigned long stack_size,&lt;br /&gt;  int __user *child_tidptr,&lt;br /&gt;  struct pid *pid,&lt;br /&gt;  int trace)&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt; int retval;&lt;br /&gt; struct task_struct *p;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWNS: 0x00020000, CLONE_FS: 0x00000200&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWNS|CLONE_FS)) == (CLONE_NEWNS|CLONE_FS))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWUSER: 0x10000000, CLONE_FS: 0x00000200&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWUSER|CLONE_FS)) == (CLONE_NEWUSER|CLONE_FS))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Thread groups must share signals as well, and detached threads&lt;br /&gt;  * can only be started up within the thread group.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_THREAD: 0x00010000, CLONE_SIGHAND: 0x00000800&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_THREAD) &amp;amp;&amp;amp; !(clone_flags &amp;amp; CLONE_SIGHAND))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Shared signal handlers imply shared VM. By way of the above,&lt;br /&gt;  * thread groups also imply shared VM. Blocking this case allows&lt;br /&gt;  * for various simplifications in other code.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_SIGHAND: 0x00000800, CLONE_VM: 0x00000100&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_SIGHAND) &amp;amp;&amp;amp; !(clone_flags &amp;amp; CLONE_VM))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/08/27 종료&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/09/03 시작&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Siblings of global init remain as zombies on exit since they are&lt;br /&gt;  * not reaped by their parent (swapper). To solve this and to avoid&lt;br /&gt;  * multi-rooted process trees, prevent global and container-inits&lt;br /&gt;  * from creating siblings.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_PARENT: 0x00008000, SIGNAL_UNKILLABLE: 0x00000040&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task, current-&amp;gt;signal: &amp;amp;init_signals&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;signal-&amp;gt;flags: (&amp;amp;init_signals)-&amp;gt;flags: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; CLONE_PARENT) &amp;amp;&amp;amp;&lt;br /&gt;   current-&amp;gt;signal-&amp;gt;flags &amp;amp; SIGNAL_UNKILLABLE)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * If the new process will be in a different pid or user namespace&lt;br /&gt;  * do not allow it to share a thread group or signal handlers or&lt;br /&gt;  * parent with the forking task.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_SIGHAND: 0x00000800&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (clone_flags &amp;amp; CLONE_SIGHAND) {&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_NEWUSER: 0x10000000, CLONE_NEWPID: 0x20000000&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task, task_active_pid_ns(&amp;amp;init_task): &amp;amp;init_pid_ns,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;nsproxy: (&amp;amp;init_task)-&amp;gt;nsproxy: &amp;amp;init_nsproxy,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;nsproxy-&amp;gt;pid_ns_for_children: (&amp;amp;init_nsproxy)-&amp;gt;pid_ns_for_children: &amp;amp;init_pid_ns&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; ((clone_flags &amp;amp; (CLONE_NEWUSER | CLONE_NEWPID)) ||&lt;br /&gt;    (task_active_pid_ns(current) !=&lt;br /&gt;     current-&amp;gt;nsproxy-&amp;gt;pid_ns_for_children))&lt;br /&gt;   &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;return&lt;/span&gt; ERR_PTR(-EINVAL);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, security_task_create(0x00800B00): 0&lt;/span&gt;&lt;br /&gt; retval = security_task_create(clone_flags);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (retval)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; fork_out;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ENOMEM: 12&lt;/span&gt;&lt;br /&gt; retval = -ENOMEM;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -12&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// dup_task_struct(&amp;amp;init_task): kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; p = dup_task_struct(current);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// dup_task_struct 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct task_struct 만큼의 메모리를 할당 받음&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct thread_info 를 구성 하기 위한 메모리를 할당 받음 (8K)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 page 2개의 메로리의 가상 주소&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 kmem_cache#15-oX (struct task_struct) 메모리에 init_task 값을 전부 할당함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;stack: 할당 받은 page 2개의 메로리의 가상 주소&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 할당 받은 kmem_cache#15-oX (struct task_struct) 의 stack의 값을 init_task 의 stack 값에서 전부 복사함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 복사된 struct thread_info 의 task 주소값을 할당 받은 kmem_cache#15-oX (struct task_struct)로 변경함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// *(할당 받은 page 2개의 메로리의 가상 주소): init_thread_info&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ((struct thread_info *) 할당 받은 page 2개의 메로리의 가상 주소)-&amp;gt;task: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (((struct thread_info *)(할당 받은 page 2개의 메로리의 가상 주소))-&amp;gt;flags 의 1 bit 값을 clear 수행&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// *((unsigned long *)(할당 받은 page 2개의 메로리의 가상 주소 + 1)): 0x57AC6E9D&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;usage)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;splice_pipe: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;task_frag.page: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;contig_page_data)-&amp;gt;node_zones[0].vm_stat[16]: 1 을 더함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// vmstat.c의 vm_stat[16] 전역 변수에도 1을 더함&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (!p)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; fork_out;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; ftrace_graph_init_task(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; get_seccomp_filter(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; rt_mutex_init_task(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rt_mutex_init_task 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_lock을 사용한 spinlock 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_waiters 리스트 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;pi_blocked_on: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_PROVE_LOCKING // CONFIG_PROVE_LOCKING=n&lt;/span&gt;&lt;br /&gt; DEBUG_LOCKS_WARN_ON(!p-&amp;gt;hardirqs_enabled);&lt;br /&gt; DEBUG_LOCKS_WARN_ON(!p-&amp;gt;softirqs_enabled);&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// EAGAIN: 11&lt;/span&gt;&lt;br /&gt; retval = -EAGAIN;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred: (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_cred: &amp;amp;init_cred,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred-&amp;gt;user: (&amp;amp;init_cred)-&amp;gt;user: &amp;amp;root_user,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;real_cred-&amp;gt;user-&amp;gt;processes: &amp;amp;(&amp;amp;root_user)-&amp;gt;processes, atomic_read(&amp;amp;(&amp;amp;root_user)-&amp;gt;processes): 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// RLIMIT_NPROC: 6, task_rlimit(kmem_cache#15-oX (struct task_struct), 6): 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (atomic_read(&amp;amp;p-&amp;gt;real_cred-&amp;gt;user-&amp;gt;processes) &amp;gt;=&lt;br /&gt;   task_rlimit(p, RLIMIT_NPROC)) {&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_cred-&amp;gt;user: (&amp;amp;init_cred)-&amp;gt;user: &amp;amp;root_user, INIT_USER: (&amp;amp;root_user)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// CAP_SYS_RESOURCE: 24, capable(24): true, CAP_SYS_ADMIN: 21, capable(21): true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (p-&amp;gt;real_cred-&amp;gt;user != INIT_USER &amp;amp;&amp;amp;&lt;br /&gt;      !capable(CAP_SYS_RESOURCE) &amp;amp;&amp;amp; !capable(CAP_SYS_ADMIN))&lt;br /&gt;   &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_free;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// capable 에서 한일:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;init_task)-&amp;gt;flags: 0x00200100&lt;/span&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;flags: (&amp;amp;init_task)-&amp;gt;flags: 0x00200100, PF_NPROC_EXCEEDED: 0x00001000&lt;/span&gt;&lt;br /&gt; current-&amp;gt;flags &amp;amp;= ~PF_NPROC_EXCEEDED;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;flags: (&amp;amp;init_task)-&amp;gt;flags: 0x00200100&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11, p: kmem_cache#15-oX (struct task_struct), clone_flags: 0x00800B00&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_creds(kmem_cache#15-oX (struct task_struct), 0x00800B00): 0&lt;/span&gt;&lt;br /&gt; retval = copy_creds(p, clone_flags);&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_creds 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// struct cred 만큼의 메모리를 할당 받음&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// kmem_cache#16-oX (struct cred) 에 init_cred 에 있는 맴버값 전부를 복사함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#16-oX (struct cred))-&amp;gt;usage)-&amp;gt;counter: 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;init_groups)-&amp;gt;usage)-&amp;gt;counter: 3&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;root_user)-&amp;gt;__count)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;root_user)-&amp;gt;processes)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#16-oX (struct cred))-&amp;gt;usage)-&amp;gt;counter: 2&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cred: kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_cred: kmem_cache#16-oX (struct cred)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (retval &amp;lt; &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_free;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * If multiple threads are within copy_process(), then this check&lt;br /&gt;  * triggers too late. This doesn&#39;t hurt, the check is only there&lt;br /&gt;  * to stop root fork bombs.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// EAGAIN: 11&lt;/span&gt;&lt;br /&gt; retval = -EAGAIN;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// retval: -11&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// nr_threads: 0, max_threads: 총 free된 page 수 / 16&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (nr_threads &amp;gt;= max_threads)&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_cleanup_count;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct),&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)):&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;stack: 할당 받은 page 2개의 메로리의 가상 주소,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)-&amp;gt;exec_domain:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ((struct thread_info *) 할당 받은 page 2개의 메로리의 가상 주소)-&amp;gt;exec_domain: &amp;amp;default_exec_domain,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// task_thread_info(kmem_cache#15-oX (struct task_struct)-&amp;gt;exec_domain-&amp;gt;module:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;default_exec_domain)-&amp;gt;module: NULL,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// try_module_get(NULL): true&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (!try_module_get(task_thread_info(p)-&amp;gt;exec_domain-&amp;gt;module))&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_cleanup_count;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;did_exec: (kmem_cache#15-oX (struct task_struct))-&amp;gt;did_exec&lt;/span&gt;&lt;br /&gt; p-&amp;gt;did_exec = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;did_exec: (kmem_cache#15-oX (struct task_struct))-&amp;gt;did_exec: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; delayacct_tsk_init(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* Must remain after dup_task_struct() */&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; copy_flags(clone_flags, p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// copy_flags 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;flags: 0x00200040&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;children: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt; INIT_LIST_HEAD(&amp;amp;p-&amp;gt;children);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// INIT_LIST_HEAD 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;children&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;sibling: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt; INIT_LIST_HEAD(&amp;amp;p-&amp;gt;sibling);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// INIT_LIST_HEAD 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;sibling&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; rcu_copy_process(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rcu_copy_process 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_read_lock_nesting: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_read_unlock_special: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_blocked_node: NULL&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rcu_node_entry&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;vfork_done: (kmem_cache#15-oX (struct task_struct))-&amp;gt;vfork_done&lt;/span&gt;&lt;br /&gt; p-&amp;gt;vfork_done = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;vfork_done: (kmem_cache#15-oX (struct task_struct))-&amp;gt;vfork_done: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;alloc_lock: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock&lt;/span&gt;&lt;br /&gt; spin_lock_init(&amp;amp;p-&amp;gt;alloc_lock);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// spin_lock_init에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;raw_lock: { { 0 } }&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;magic: 0xdead4ead&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;owner: 0xffffffff&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;alloc_lock)-&amp;gt;owner_cpu: 0xffffffff&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;pending: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending&lt;/span&gt;&lt;br /&gt; init_sigpending(&amp;amp;p-&amp;gt;pending);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// init_sigpending 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;signal)-&amp;gt;sig[0]: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;signal)-&amp;gt;sig[1]: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list)-&amp;gt;next: &amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list)-&amp;gt;prev: &amp;amp;(&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;pending)-&amp;gt;list&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utime,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stime,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;gtime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;gtime&lt;/span&gt;&lt;br /&gt; p-&amp;gt;utime = p-&amp;gt;stime = p-&amp;gt;gtime = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;gtime: (kmem_cache#15-oX (struct task_struct))-&amp;gt;gtime: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utimescaled,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stimescaled&lt;/span&gt;&lt;br /&gt; p-&amp;gt;utimescaled = p-&amp;gt;stimescaled = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;utimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;utimescaled: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;stimescaled: (kmem_cache#15-oX (struct task_struct))-&amp;gt;stimescaled: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifndef CONFIG_VIRT_CPU_ACCOUNTING_NATIVE // CONFIG_VIRT_CPU_ACCOUNTING_NATIVE=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;prev_cputime.utime = p-&amp;gt;prev_cputime.stime = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_VIRT_CPU_ACCOUNTING_GEN // CONFIG_VIRT_CPU_ACCOUNTING_GEN=n&lt;/span&gt;&lt;br /&gt; seqlock_init(&amp;amp;p-&amp;gt;vtime_seqlock);&lt;br /&gt; p-&amp;gt;vtime_snap = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;vtime_snap_whence = VTIME_SLEEPING;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#if defined(SPLIT_RSS_COUNTING)&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;rss_stat: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rss_stat&lt;/span&gt;&lt;br /&gt; memset(&amp;amp;p-&amp;gt;rss_stat, &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;, sizeof(p-&amp;gt;rss_stat));&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// memset 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;rss_stat 값을 0 으로 초기화 수행&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;default_timer_slack_ns: (kmem_cache#15-oX (struct task_struct))-&amp;gt;default_timer_slack_ns,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current-&amp;gt;timer_slack_ns: (&amp;amp;init_task)-&amp;gt;timer_slack_ns: 50000&lt;/span&gt;&lt;br /&gt; p-&amp;gt;default_timer_slack_ns = current-&amp;gt;timer_slack_ns;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;default_timer_slack_ns: (kmem_cache#15-oX (struct task_struct))-&amp;gt;default_timer_slack_ns: 50000&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;ioac: (kmem_cache#15-oX (struct task_struct))-&amp;gt;ioac&lt;/span&gt;&lt;br /&gt; task_io_accounting_init(&amp;amp;p-&amp;gt;ioac); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; acct_clear_integrals(p); &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// null function&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; posix_cpu_timers_init(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// posix_cpu_timers_init 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.prof_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.virt_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cputime_expires.sched_exp: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[0]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[1]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2])-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2]&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2])-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cpu_timers[2]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;start_time: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time&lt;/span&gt;&lt;br /&gt; do_posix_clock_monotonic_gettime(&amp;amp;p-&amp;gt;start_time);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// do_posix_clock_monotonic_gettime 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time 에 현재 시간 값을 가져옴&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time)-&amp;gt;tv_sec: 현재의 sec 값 + 현재의 nsec 값 / 1000000000L&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time)-&amp;gt;tv_nsec: 현재의 nsec 값 % 1000000000L&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;real_start_time: (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;start_time: (kmem_cache#15-oX (struct task_struct))-&amp;gt;start_time&lt;/span&gt;&lt;br /&gt; p-&amp;gt;real_start_time = p-&amp;gt;start_time;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time)-&amp;gt;tv_sec: 현재의 sec 값 + 현재의 nsec 값 / 1000000000L&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time)-&amp;gt;tv_nsec: 현재의 nsec 값 % 1000000000L&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;p-&amp;gt;real_start_time: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time&lt;/span&gt;&lt;br /&gt; monotonic_to_bootbased(&amp;amp;p-&amp;gt;real_start_time);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// monotonic_to_bootbased 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time.tv_sec: normalized 된 sec 값&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;real_start_time.tv_nsec: normalized 된 nsec 값&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;io_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;io_context&lt;/span&gt;&lt;br /&gt; p-&amp;gt;io_context = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;io_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;io_context: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;audit_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;audit_context&lt;/span&gt;&lt;br /&gt; p-&amp;gt;audit_context = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;audit_context: (kmem_cache#15-oX (struct task_struct))-&amp;gt;audit_context: NULL&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/09/10 종료&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// 2016/10/08 시작&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, CLONE_THREAD: 0x00010000&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (clone_flags &amp;amp; CLONE_THREAD)&lt;br /&gt;  threadgroup_change_begin(current);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; cgroup_fork(p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cgroup_fork 에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// rcu reference의 값 (&amp;amp;init_task)-&amp;gt;cgroups 이 유요한지 체크하고 그 값을 리턴함&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ((&amp;amp;init_task)-&amp;gt;cgroups)-&amp;gt;refcount: 1&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (kmem_cache#15-oX (struct task_struct))-&amp;gt;cgroups: (&amp;amp;init_task)-&amp;gt;cgroups&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cg_list)-&amp;gt;next: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cg_list&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cg_list)-&amp;gt;prev: &amp;amp;(kmem_cache#15-oX (struct task_struct))-&amp;gt;cg_list&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_NUMA // CONFIG_NUMA=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;mempolicy = mpol_dup(p-&amp;gt;mempolicy);&lt;br /&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;if&lt;/span&gt; (IS_ERR(p-&amp;gt;mempolicy)) {&lt;br /&gt;  retval = PTR_ERR(p-&amp;gt;mempolicy);&lt;br /&gt;  p-&amp;gt;mempolicy = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;goto&lt;/span&gt; bad_fork_cleanup_cgroup;&lt;br /&gt; }&lt;br /&gt; mpol_fix_fork_child_flag(p);&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_CPUSETS // CONFIG_CPUSETS=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;cpuset_mem_spread_rotor = NUMA_NO_NODE;&lt;br /&gt; p-&amp;gt;cpuset_slab_spread_rotor = NUMA_NO_NODE;&lt;br /&gt; seqcount_init(&amp;amp;p-&amp;gt;mems_allowed_seq);&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_TRACE_IRQFLAGS // CONFIG_TRACE_IRQFLAGS=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;irq_events = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;hardirqs_enabled = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;hardirq_enable_ip = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;hardirq_enable_event = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;hardirq_disable_ip = _THIS_IP_;&lt;br /&gt; p-&amp;gt;hardirq_disable_event = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;softirqs_enabled = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;1&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;softirq_enable_ip = _THIS_IP_;&lt;br /&gt; p-&amp;gt;softirq_enable_event = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;softirq_disable_ip = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;softirq_disable_event = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;hardirq_context = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;softirq_context = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_LOCKDEP // CONFIG_LOCKDEP=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;lockdep_depth = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* no locks held yet */&lt;/span&gt;&lt;br /&gt; p-&amp;gt;curr_chain_key = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;lockdep_recursion = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_DEBUG_MUTEXES // CONFIG_DEBUG_MUTEXES=y&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;blocked_on: (kmem_cache#15-oX (struct task_struct))-&amp;gt;blocked_on&lt;/span&gt;&lt;br /&gt; p-&amp;gt;blocked_on = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* not blocked yet */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;blocked_on: (kmem_cache#15-oX (struct task_struct))-&amp;gt;blocked_on: NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_MEMCG // CONFIG_MEMCG=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;memcg_batch.do_batch = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;memcg_batch.memcg = &lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold;&quot;&gt;NULL&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#ifdef CONFIG_BCACHE // CONFIG_BCACHE=n&lt;/span&gt;&lt;br /&gt; p-&amp;gt;sequential_io = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt; p-&amp;gt;sequential_io_avg = &lt;span class=&quot;hljs-number&quot; style=&quot;color: #009999;&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;#endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/* Perform scheduler related setup. Assign this task to a CPU. */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; sched_fork(clone_flags, p);&lt;/code&gt;&lt;/pre&gt;&lt;h2 style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; margin: 30px 0px 10px;&quot;&gt;sched_fork()&lt;/h2&gt;&lt;ul style=&quot;clear: both; color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;start_kernel()&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rest_init()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: rest_init()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;rcu_scheduler_starting()&lt;/li&gt;&lt;li&gt;kernel_thread()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: kernel_thread()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;do_fork()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: do_fork()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;copy_process()&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;call: copy_process()&lt;br /&gt;&lt;ul style=&quot;clear: both; margin: 0px 0px 0px 25px; padding: 0px;&quot;&gt;&lt;li&gt;security_task_create()&lt;/li&gt;&lt;li&gt;dup_task_struct()&lt;/li&gt;&lt;li&gt;ftrace_graph_init_task(p); // null function&lt;/li&gt;&lt;li&gt;get_seccomp_filter(p); // null function&lt;/li&gt;&lt;li&gt;rt_mutex_init_task(p);&lt;/li&gt;&lt;li&gt;copy_creds(p, clone_flags);&lt;/li&gt;&lt;li&gt;try_module_get()&lt;/li&gt;&lt;li&gt;delayacct_tsk_init(p)&lt;/li&gt;&lt;li&gt;copy_flags()&lt;/li&gt;&lt;li&gt;INIT_LIST_HEAD(&amp;amp;p-&amp;gt;children);&lt;/li&gt;&lt;li&gt;INIT_LIST_HEAD(&amp;amp;p-&amp;gt;sibling);&lt;/li&gt;&lt;li&gt;rcu_copy_process(p);&lt;/li&gt;&lt;li&gt;spin_lock_init(&amp;amp;p-&amp;gt;alloc_lock);&lt;/li&gt;&lt;li&gt;init_sigpending(&amp;amp;p-&amp;gt;pending);&lt;/li&gt;&lt;li&gt;memset(&amp;amp;p-&amp;gt;rss_stat, 0, sizeof(p-&amp;gt;rss_stat));&lt;/li&gt;&lt;li&gt;task_io_accounting_init(&amp;amp;p-&amp;gt;ioac); // null function&lt;/li&gt;&lt;li&gt;acct_clear_integrals(p); // null function&lt;/li&gt;&lt;li&gt;posix_cpu_timers_init(p);&lt;/li&gt;&lt;li&gt;do_posix_clock_monotonic_gettime(&amp;amp;p-&amp;gt;start_time);&lt;/li&gt;&lt;li&gt;monotonic_to_bootbased(&amp;amp;p-&amp;gt;real_start_time);&lt;/li&gt;&lt;li&gt;cgroup_fork(p);&lt;/li&gt;&lt;li&gt;sched_fork(clone_flags, p);&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 14px;&quot;&gt;&lt;/div&gt;&lt;pre style=&quot;color: #222222; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 14px; overflow: auto;&quot;&gt;&lt;code class=&quot;hljs php&quot; style=&quot;background-color: #f8f8f8; background-position: initial initial; background-repeat: initial initial; color: #333333; display: block; font-family: Consolas, Menlo, Monaco, &#39;Lucida Console&#39;, &#39;Liberation Mono&#39;, &#39;DejaVu Sans Mono&#39;, &#39;Bitstream Vera Sans Mono&#39;, &#39;Courier New&#39;, monospace; font-size: 1em; max-height: 500px; overflow: auto; padding: 0.5em; word-wrap: normal;&quot;&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// ARM10C 20161008&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt;void sched_fork(unsigned long clone_flags, struct task_struct *p)&lt;br /&gt;{&lt;br /&gt; unsigned long flags;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// get_cpu(): 0&lt;/span&gt;&lt;br /&gt; int cpu = get_cpu();&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// cpu: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// clone_flags: 0x00800B00, p: kmem_cache#15-oX (struct task_struct)&lt;/span&gt;&lt;br /&gt; __sched_fork(clone_flags, p);&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// __sched_fork에서 한일:&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;on_rq: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.on_rq: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.exec_start: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.sum_exec_runtime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.prev_sum_exec_runtime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.nr_migrations: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// (&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.vruntime: 0&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;se.group_node의 리스트 초기화&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// &amp;amp;(&amp;amp;kmem_cache#15-oX (struct task_struct))-&amp;gt;rt.run_list의 리스트 초기화&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * We mark the process as running here. This guarantees that&lt;br /&gt;  * nobody will actually run it, and a signal or other external&lt;br /&gt;  * event cannot wake it up and insert it on the runqueue either.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;state: (kmem_cache#15-oX (struct task_struct))-&amp;gt;state, TASK_RUNNING: 0&lt;/span&gt;&lt;br /&gt; p-&amp;gt;state = TASK_RUNNING;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;state: (kmem_cache#15-oX (struct task_struct))-&amp;gt;state: 0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;/*&lt;br /&gt;  * Make sure we do not leak PI boosting priority to the child.&lt;br /&gt;  */&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// p-&amp;gt;prio: (kmem_cache#15-oX (struct task_struct))-&amp;gt;prio,&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;hljs-comment&quot; style=&quot;color: #999988; font-style: italic;&quot;&gt;// current: &amp;amp;init_task, current-&amp;gt;normal_prio: (&amp;amp;init_task)-&amp;gt;normal_prio: 120&lt;/span&gt;&lt;br /&gt; p-&amp;gt;prio = current-&amp;gt;normal_prio;&lt;br /&gt; &lt;span cl