<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>메모 블로그</title>
    <description>hello world!!</description>
    <link>http://shj7242.github.io/</link>
    <atom:link href="http://shj7242.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Feb 2019 08:21:46 +0000</pubDate>
    <lastBuildDate>Wed, 20 Feb 2019 08:21:46 +0000</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>오라클 교육 5일차</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2019 - 02 - 15 (금)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SGA &amp;amp; PGA&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;SGA&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;여러 프로세스가 동시에 접근하는 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 DB서버 프로세스가 공유하는 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 사용자가 공유하여 사용하는 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;공유풀(라이브러리 캐시 + 데이터 사전 캐시), 데이터버퍼캐시, 리두로그버퍼 등으로 구성됨&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SGA가 클수록 HDD 사용 필요성이 줄어들게 되므로 성능이 향상됨. (일종의 Cache)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;PGA&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인스턴스의 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자마다 개별적으로 할당되는 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;정렬, 셰션, 커서, 변수에 관한 정보를 저장하는 공간&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개별 서버 프로세스가 가지는 전용 메모리 영역&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;SQL 처리 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자의 SQL 문장 실행 : 오라클 서버측 리스너가 서버 프로세스로 SQL문장 전달&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL 파싱 : 클라이언트에서 보내온 SQL 구문이 서버프로세스 PGA 내부의 Private SQL Area 에서 문법 체크를 우선 진행하고, 테이블 및 컬럼이 있는지, 해당 유저가 테이블 및 컬럼을 select할 권한이 있는지를 Data Dictionary를 통해 체크한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shared pool 을 통해서 동일한 SQL 문장이 있다면 Library Cache 의 parse-tree와 Query Execution Plan을 가지고 와서 실행한다. (Soft Parsing이라고 함)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cursor &amp;amp; Oracle Memory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;커서는 SELECT 또는 DML 조작시 클라이언트 프로세스에서 참조하는 PGA또는 SGA의 Library Cache내 전용 SQL 영역을 가리키는 포인터 또는 핸들이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL 커서는 오라클 서버 운영모드가 Dedicate Server환경이면 PGA, MTS 환경이면 SGA의 Library Cache에 위치한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;명시적 커서는 PL/SQL을 작성하는 개발자가 명시적으로 Declare 절에 선언하여 사용하는 커서이며 다중행을 다룰 때 사용한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Literal SQL &amp;amp; Bind Variable SQL (Soft Parsing / Hard Parsing)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;리터럴 SQL 은 WHERE 절 작성시 비교값에 문자/상수 같은 상수값을 하드코딩으로 작성한 것이다.&lt;/p&gt;

&lt;p&gt;Bind Variable SQL 은 WHERE 절의 특정값을 표시하는 자리에 바인드 변수 형태로 표시한 것을 말한다.&lt;/p&gt;

&lt;p&gt;리터럴 SQL문을 많이 사용하면 하드파싱의 빈도를 높이게 되어 Library Cache 내에서 Cache 되는 SQL문들이 자주 age out 하게 되므로 주기를 빠르게 하고 Dictionary Cache의 사용률을&lt;/p&gt;

&lt;p&gt;높이게 된다. 이러한 Shared SQL Area의 SQL문 중에서 리터럴 SQL 문들을 찾아서 Bind Variable을 이용한 방법으로 바꾸어야 성능향상에 도움이 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;튜닝 도구 : SQL AUTOTRACE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SET AUTOTRACE를 사용하기 위해서 PLAN_TABLE 이 존재해야하며 구문을 활성화 하기 위해 해준다.&lt;/p&gt;

&lt;p&gt;SET AUTOTRACE OFF : 기본값으로 AUTOTRACE를 수행하지 않는다.&lt;/p&gt;

&lt;p&gt;SET AUTOTRACE ON EXPLAIN : 실행계획만을 출력&lt;/p&gt;

&lt;p&gt;SET AUTOTRACE ON STATISTICS : 통계정보만을 출력&lt;/p&gt;

&lt;p&gt;SET AUTOTRACE ON : 옵티마이저의 실행계획과 통계정보, 질의의 실행 결과를 함께 출력&lt;/p&gt;

&lt;p&gt;SET AUTOTRACE TRACEONLY [EXPLAIN] : SET AUTOTRACE ON과 유사하지만 옵티마이저의 실 행계획과 통계정보를 출력, 만약 EXPAIN이라고 하면 실행계획만 출력한다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET AUTOTRACE ON
-- 비화성화 SET AUTOTRACE OFF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[DB_BLOCK_GETS 및 CONSISTENCE GET]&lt;/p&gt;

&lt;p&gt;Consistent Mode : 읽기 일관성이 보장된 상태에서 데이터 블록을 읽는 것인데 대부분 SELECT 쿼리가 해당됨&lt;/p&gt;

&lt;p&gt;쿼리가 시작된 시점을 기준으로 일관성있게 읽어 들이며 읽는 도중에 값이 바뀌어도 쿼리시자점의 값으로 읽는다.&lt;/p&gt;

&lt;p&gt;그러므로 SCN의값을 확인하면서 읽는데 값이 변경되면 SCN 번호가 증가되므로 이 경우에는 Rollback Segment에서 과거의 블록을 읽는다.&lt;/p&gt;

&lt;p&gt;AUTOTRACE에는 consistent gets로 표시된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;튜닝 도구 : DBMS_XPLAN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;set autotrace off

sql&amp;gt;explain plan
for
(쿼리문)

select * from table(dbms_xplan.display);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 해석(predicate)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;실행계획은 해당 SQL을 수행하기 위한 절차이며 오라클 옵티마이저에 의해 만들어 진다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

----------------------------------------------------------------------------------------
| Id  | Operation                    | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |         |    13 |   338 |     6  (17)| 00:00:01 |
|   1 |  MERGE JOIN                  |         |    13 |   338 |     6  (17)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT    |     4 |    52 |     2   (0)| 00:00:01 |
|   3 |    INDEX FULL SCAN           | PK_DEPT |     4 |       |     1   (0)| 00:00:01 |
|*  4 |   SORT JOIN                  |         |    13 |   169 |     4  (25)| 00:00:01 |
|*  5 |    TABLE ACCESS FULL         | EMP     |    13 |   169 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 plan 에서 옆에 * 가 있으면 predicate 가 있다는 의미이다.&lt;/p&gt;

&lt;p&gt;predicate란 인덱스 접근시의 컬럼 액세스 정보, 조인 정보, filter 정보를 각 Opreation 단위로 나 타낸 것이다.&lt;/p&gt;

&lt;p&gt;access predicate : 데이터 블록을 어떤 방식으로 Access해서 읽었는지를 나타내는 것이다.&lt;/p&gt;

&lt;p&gt;filter predicate : 데이터 블록을 읽고 나서 데이터를 어떻게 필터링 했는지를 나타낸다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;초기화 파라미터 OPTIMIZER_MODE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RBO : Rule based optimizer : rule exists (level 1 ~ 15)
CBO : Cost based optimizer : (dbms_stats ==&amp;gt; statistics)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OPTIMIZER_MODE&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;SHOW OPTIMIZER_MODE


NAME                                 TYPE                   VALUE
------------------------------------ ---------------------- ------------------------------
optimizer_mode                       string                 ALL_ROWS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적으로 ALL_ROWS 모드이다.
ALL_ROWS 는 통계정보의 유무와 상관없이 모든 SQL 문에 CBO를 이용하며 최대 처리량을 목표로한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CHOOSE  : RBO 혹은 CBO 를 하나 선택한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;통계 정보의 이용가능 여부에 따라 결정하는데 통계정보가 이용 가능하면 CBO를 사용하고 불가능한 경우에는 RBO를 사용한다.&lt;/p&gt;

&lt;p&gt;만약 데이터딕셔너리에 액세스 되는 테이블 중 적 어도 하나의 테이블에 대한 통계 정보가 있는 경우엔 CBO를 사용하며 최대 처리량(ALL_ROWS)을 목표로 최적화를 수행한다.&lt;/p&gt;

&lt;p&gt;딕셔너리에 약간의 통계 정보만을 가지고 있다면 CBO가 사용될 수 있지만 옵티마이저는 통계 정보가 없는 부분에 대해서는 통계 정보를 추측해야 하며 이는 최선의 실행 계획이라기보다 차선 의 실행 계획이라고 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--CHOOSE 모드로 변경

ALTER SESSION SET OPTIMIZER_MODE =CHOOSE;ALTER SESSION SET OPTIMIZER_MODE =CHOOSE;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CBO와 RBO중 하나를 선택한다. 이용가능 여부에 따라 결정한다. 통계정보를 이용 가능하면 CBO 아니면 RBO를 사용한다.
ALL_ROWS 와 마찬가지로 CBO를 사용하며 최대 처리량을 목표로 최적화를 수행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;FIRST_ROWS_(1&lt;/td&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
          &lt;td&gt;1000)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;통계정보의 유무와 상관없이 모든 SQL문에 대해 CBO를 이용하며 처음 N개의 레코드를 가장 빨리 추출할 수 있는최적의 경로를 찾음&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FIRST_ROWS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;옵티마이저는 첫번째 레코드의추출을 가장 빠르게 하는 최적의 경로를 찾는다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;RULE&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;통계정보의 유무와 관계없이 모든 SQL에 RBO를 사용하도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;규칙 기반 옵티마이저 (RBO : Rule-Based Optimizer)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오라클 DB가 RBO로 동작하는 경우는 옵티마이저 모드가 RULE 이거나 CHOOSE 이면서 인덱스에 대한 통계정보가 없는 경우이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;규칙 기반 옵티마이저의 우선 순위&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;rowid에 의한 single row access&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;rowid에 의한 단일 행 검색이 우선순위가 가장 높다.&lt;/p&gt;

&lt;p&gt;ex) select * from emp where rowid =’XXXX’;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;cluster join에 의한 single row access&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;같은 클러스터 내에 있는 테이블을 조인할 때 이용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;select  ename, dname, sal       
    from   emp e, dept d       
    where e.deptno = d.deptno       
    and   e.empno = 8888; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ename, job FROM emp WHERE ename = ‘신희준’;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WHERE절에 출현하는 칼럼에 인덱스가 있으면 무조건 인덱스를 이용한다.&lt;/p&gt;

&lt;p&gt;인덱스를 이용하는 것 이 FULL SCAN하는 것보다 우선 순위가 높으므로 먼저 ENAME 인덱스를 이용하여 ‘신희준’ 을 랜덤 액세스 한 후 원본 테이블 레코드의 주소값인 ROWID를 찾는다.&lt;/p&gt;

&lt;p&gt;다시 그 주소값(ROWID)을 이 용하여 원본 테이블 레코드에 접근 후 JOB 칼럼값을 추출하는 실행계획을 세운다.&lt;/p&gt;

&lt;p&gt;사실 이 테이 블의 경우 데이터가 몇 건 안되니까 한번에 FULL SCAN하여 가지고 오는 것이 훨씬 빠른데도 인 덱스를 이용한다&lt;/p&gt;

&lt;p&gt;이러한 경우 CBO가 더 효율적일 수 있게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;비용 기반 옵티마이저 (CBO : Cost_Based Optimizer )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;비용기반 옵티마이저(CBO)는 실제로 가장 빠르게 실행되는 방법의 Cost를 계산하여 실행 경로를 선택하는 방법으로 DB의 버전이 높아질수록 더욱 정교하게 발전되고 있는 방법이며 오라클에서 권장하고 있다.&lt;/p&gt;

&lt;p&gt;하지만 옵티마이저가 가장 최선의 실행 경로를 찾기 위해서는 테이블의 크기, 레코드 수, 컬럼 값의 분포도와 같은 테이블의 통계정보(부가적인 정보)를 제공해 주어야 정상적으로 잘 동작한다 고 할 수 있다.&lt;/p&gt;

&lt;p&gt;테이블이나 인덱스에 통계 정보가 있는지에 대한 여부는 USER_TABLES, DBA_TABLES, USER_INDEXES, DBA_INDEXES와 같은 뷰의 LAST_ANALYZED 컬럼의 값을 통해 알 수 있는데, NULL 값을 가지는 경우에는 통계 정보가 없다고 보면 된다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizer Mode를 변경하는 힌트 (Rule)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;EMP 테이블의 DEPTNO 칼럼에 현재 인덱스가 생성되지 않은 상태이다. RBO에서 조인시 칼럼인덱스가 없는쪽이 드라이빙 테이블이 되니 확인해 보라.&lt;/p&gt;

&lt;p&gt;–EMP 테이블의 DEPTNO 칼럼에 인덱스가 있다면 옵티마이저가 사용하지 못하도록 숨기자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

--인덱스 확인

sql&amp;gt;desc user_indexes; 

sql&amp;gt;ALTER INDEX IDX_EMP_DEPTNO INVISIBLE;  -- 인덱스가 있어도 invisible로 하면 못잡는다. ( index를 invisible로 해놓고 쿼리를 돌리면 hash join이 됨 - CBO)

sql&amp;gt;SELECT /*+ RULE*/
    e.empno,
    e.ename,
    d.dname
FROM emp e, dept d
WHERE e.deptno = d.deptno;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;select
	a.table_name, a.index_name, a.visibility, a.last_analyzed,
	b.column_name, b.column_position
from	user_indexes a , user_ind_columns b
where	a.table_name = b.table_name
   and	a.index_name = b.index_name
   and    a.table_name in ('EMP', 'DEPT')
;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt; select table_name, last_analyzed from user_tables where table_name in ('EMP','DEPT');

TABLE_NAME                                                   LAST_ANALYZE
------------------------------------------------------------ ------------
DEPT                                                         11-FEB-19
EMP                                                          11-FEB-19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select *
from emp a, dept d
where a.deptno = d.deptno
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;테이블을 읽는 순서가 어떤게 맞을것인가?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;FROM EMP, DEPT&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;FROM DEPT, EMP&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;EMP(ROW 14 column 8)  DEPT(ROW 4 COLUMN 3)&lt;/p&gt;

&lt;p&gt;–&amp;gt; 읽어야할 데이터가 dept가 훨신 적기 때문에 DEPT 부터 읽어야 함.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;일반적으로는 뒤에서 부터 읽기 때문에 dept를읽고 emp를 읽는다. 어떤 경우에는 앞에 위치한 EMP를 읽고 DEPT를 읽는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예외:) DEPT INDEX가 있는데 EMP INDEX가 없을 경우에 EMP 테이블을 먼저 읽는다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizer Mode를 변경하는 힌트 (ALL_ROWS)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ALL_ROWS는 CBO의 기본값이며 전체 데이터를 가지고오는데 있어 비용이 가장 적게드는 실행계획을 만들어 내므로 FULL TABLE SCAN할 가능성이 많다. 그러므로 OLTP성업무보다 Batch성 업무에 적합하다.&lt;/p&gt;

&lt;p&gt;ALL_ROWS 힌트가 제성능을 발휘하기 위해서 통계정보가 필요하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;SELECT /*+ ALL_ROWS*/ e.empno, e.ename, d.dname
FROM myemp1 e, mydept1 d
WHERE e.deptno = d.deptno;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizer Mode 를 변경하는 힌트 (CHOOSE)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CHOOSE CBO의 ALL_ROWS 로 동작하지만 통계정보가 없다면 RBO가 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;SET AUTOTRACE EXPLAIN

--통계정보 생성
sql&amp;gt;ANALYZE TABLE myemp1 COMPUTE STATISTICS;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL 연산 (AND-EQUAL)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ROW 연산이며 인덱스에 의해 반환되는 값들(ROWID)을 병합해서 공통적인 값을 반환하는 연산이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL 연산 (CONCATEATION)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;반환된 로우를 유니온처럼 합산하는 연산&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

--테이블에 생성되어있는 인덱스 및칼럼 확인

sql&amp;gt;SELECT a.index_name, a.column_name b.visibility
    FROM user_ind_columns a, user_indexes b
WHERE a.table_name = 'EMP'
AND   a.index_name = b.index_name;

-- 인덱스가 없으면 생성
sql&amp;gt;create index idx_emp_job ON EMP(job);
sql&amp;gt;create index idx_emp_deptno on EMP(deptno);

-- RBO로 변경
sql&amp;gt;ALTER SESSION SET OPTIMIZER_MODE =RULE;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;select *
from emp
where job = 'SALESMAN' and DEPTNO IN(20,40)
;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microsoft Windows [Version 10.0.17134.590]
(c) 2018 Microsoft Corporation. All rights reserved.

sql&amp;gt;SELECT *
FROM EMP
WHERE (JOB = 'SALESMAN' AND DEPTNO =20)
OR    (JOB = 'SALESMAN' AND DEPTNO =40)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 둘은 같은 실행계획을 가진다. (성능이 똑같다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution Plan
----------------------------------------------------------
Plan hash value: 3388938709

-------------------------------------------------------
| Id  | Operation                    | Name           |
-------------------------------------------------------
|   0 | SELECT STATEMENT             |                |
|   1 |  CONCATENATION               |                |
|   2 |   TABLE ACCESS BY INDEX ROWID| EMP            |
|   3 |    AND-EQUAL                 |                |
|*  4 |     INDEX RANGE SCAN         | IDX_EMP_DEPTNO |
|*  5 |     INDEX RANGE SCAN         | IDX_EMP_JOB    |
|   6 |   TABLE ACCESS BY INDEX ROWID| EMP            |
|   7 |    AND-EQUAL                 |                |
|*  8 |     INDEX RANGE SCAN         | IDX_EMP_DEPTNO |
|*  9 |     INDEX RANGE SCAN         | IDX_EMP_JOB    |
-------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 같은 결과가 나온다.&lt;/p&gt;

&lt;p&gt;이 때 OR 확장(CONCATENATION) 을 막기위해 no_expand 힌트를 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select /*+ no_expand */ *
    from emp
    WHERE job = 'SALESMAN'
    AND DEPTNO IN(20,40);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution Plan
----------------------------------------------------------
Plan hash value: 3286489891

-------------------------------------------------------------------------------------------
| Id  | Operation                   | Name        | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |             |     1 |    38 |     2   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS BY INDEX ROWID| EMP         |     1 |    38 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | IDX_EMP_JOB |     3 |       |     1   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------



Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;DEPTNO&quot;=20 OR &quot;DEPTNO&quot;=40)
   2 - access(&quot;JOB&quot;='SALESMAN')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PREDICATE를 보면 DEPTNO가 20인 데이터를 인덱스를 이용하여 추출하며 JOB이 ‘SALESMAN’이면서 DEPTNO 가 40인 데이터를 서로합산하여 결과를 만들어냄을 알 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL 연산(COUNT)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;COUNT 연산은 PSEUDO COLUMNS(의사 칼럼)이 WHERE절이 아닌 SELECT 문장에 나타날 때 실행계획에 나타나는 SQL연산이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL 연산 (FILTER)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SQL ROW 연산인데 WHERE 조건 절에서 인덱스를 사용하지 못할 때 발생한다. NESTED LOOP 방식으로 해석할 수 있는데 서브쿼리라면 메인쿼리 로우를 하나씩 읽을 때 마다 서브쿼리를 한번씩 실행하는 형태이다.&lt;/p&gt;

&lt;p&gt;FILTER OPERATION은 IN, NOT IN, EXISTS, NOT EXISTS 를 사용하는 경우 발견할 수 있는 OPERATION 이며 NESTED LOOP JOIN과 유사하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT /*+ RULE */ ENAME, SAL, JOB
FROM MYEMP1 A
WHERE SAL = (SELECT MIN(SAL)
		FROM MYEMP1 B
		WHERE B.DEPTNO = A.DEPTNO);


Execution Plan
----------------------------------------------------------
Plan hash value: 2687344997

--------------------------------------
| Id  | Operation           | Name   |
--------------------------------------
|   0 | SELECT STATEMENT    |        |
|*  1 |  FILTER             |        |
|   2 |   TABLE ACCESS FULL | MYEMP1 |
|   3 |   SORT AGGREGATE    |        |
|*  4 |    TABLE ACCESS FULL| MYEMP1 |
--------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SAL&quot;= (SELECT MIN(&quot;SAL&quot;) FROM &quot;MYEMP1&quot; &quot;B&quot; WHERE
              &quot;B&quot;.&quot;DEPTNO&quot;=:B1))
   4 - filter(&quot;B&quot;.&quot;DEPTNO&quot;=:B1)
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;바깥쪽 메인쿼리에서 한건씩 읽어서 읽은 레코드의 급여가 자신의 속한 부서의 최소급여와 같은지를 반복적으로 비교한다.(중첩 루프 방식으로 해석)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL연산 (HASH ANTI-JOIN)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ANTI 조인은 조인의 대상이 되는 테이블과 일치하지 않는 데이터를 추출하는 연산이다.
NOT IN, NOT EXISTS, MINUS 등이 있을 때 나타나는 실행계획 연산자이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; set linesize 130
SQL&amp;gt; set autotrace on
SQL&amp;gt; select count(e1.ename)
  2  from myemp1 E1
  3  WHERE ENAME NOT IN (SELECT ENAME FROM MYEMP1_OLD E2);


COUNT(E1.ENAME)
---------------
        8333335


Execution Plan
----------------------------------------------------------
Plan hash value: 1210096379

-----------------------------------------------------------------------------------------------
| Id  | Operation                | Name       | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT         |            |     1 |    27 |       | 40795   (1)| 00:08:10 |
|   1 |  SORT AGGREGATE          |            |     1 |    27 |       |            |          |
|*  2 |   HASH JOIN RIGHT ANTI NA|            |    10M|   257M|    41M| 40795   (1)| 00:08:10 |
|   3 |    TABLE ACCESS FULL     | MYEMP1_OLD |  1666K|    22M|       |  1592   (2)| 00:00:20 |
|   4 |    TABLE ACCESS FULL     | MYEMP1     |    10M|   123M|       | 25172   (1)| 00:05:03 |
-----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------


   2 - access(&quot;ENAME&quot;=&quot;ENAME&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOT IN 을 별다른 힌트없이 실행하면 HASH JOIN RIGHT ANTI NA 연산을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HASH_AJ 힌트를 사용할 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; SELECT count(e1.ename)
  2  from myemp1 E1
  3  WHERE ENAME NOT IN(SELECT /* + HASH_AJ*/ ENAME
  4  FROM MYEMP1_OLD E2);

COUNT(E1.ENAME)
---------------
        8333335


Execution Plan
----------------------------------------------------------
Plan hash value: 1210096379

-----------------------------------------------------------------------------------------------
| Id  | Operation                | Name       | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT         |            |     1 |    27 |       | 40795   (1)| 00:08:10 |
|   1 |  SORT AGGREGATE          |            |     1 |    27 |       |            |          |
|*  2 |   HASH JOIN RIGHT ANTI NA|            |    10M|   257M|    41M| 40795   (1)| 00:08:10 |
|   3 |    TABLE ACCESS FULL     | MYEMP1_OLD |  1666K|    22M|       |  1592   (2)| 00:00:20 |
|   4 |    TABLE ACCESS FULL     | MYEMP1     |    10M|   123M|       | 25172   (1)| 00:05:03 |
-----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;ENAME&quot;=&quot;ENAME&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL 연산 (HASH SEMI-JOIN)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;세미 조인은 보통 EXISTS 를 사용하는 서브쿼리의 형태로 나타나며 이러한 경우 서브 쿼리에 인덱스가 존재하지 않는다면 상당히 비효율적인데 이러한 서브쿼리에 인덱스가 없는 경우
 SEMI-JOIN이 일어나도록 유도한다면 성능의 향상을 꽤할 수있다. 즉, 인덱스 없이 EXISTS를 사용하는 쿼리라면 HASH_SJ or MERGE_SJ or NL_SJ 힌트를 이용하여 세미조인이 일어나도록 푸는 것이 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행 계획 SQL 연산 (INDEX RANGE SCAN)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WHERE절에 인덱스 구성 컬럼이 ‘&amp;lt;’ OR ‘&amp;gt;’ 와 같이 범위 제한 연산자에 의해 이용되거나 BETWEEN OR LIKE 와 같은 조건 절에 이용될 때 INDEX RANGE SCAN을 하게 된다. 만약 결합 인덱스라면 범위 제한자에 사용되는 컬럼은 인덱스 구성 컬럼 중 선두 컬럼 이어야 하며 조건을 만족하는 첫번째 레코드를 인덱스 블록에서 추출 후 조건에 맞는 데이터가 나올 때 까지 계속 스캔하는 나가는 방식으로 INDEX, INDEX_ASC 힌트를 사용할 때 나타나는 연산자이다.&lt;/p&gt;

&lt;p&gt;인덱스가 없는 경우 search&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SQL&amp;gt; SELECT ENAME, SAL FROM EMP WHERE SAL &amp;gt; 1000;


ENAME                       SAL
-------------------- ----------
ALLEN                      1600
WARD                       1250
JONES                      2975
MARTIN                     1250
BLAKE                      2850
CLARK                      2450
SCOTT                      3000
KING                       5000
TURNER                     1500
ADAMS                      1100
FORD                       3000

ENAME                       SAL
-------------------- ----------
MILLER                     1300

12 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 3956160932

--------------------------------------------------------------------------
| Id  | Operation         | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------
|   0 | SELECT STATEMENT  |      |    12 |   120 |     3   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS FULL| EMP  |    12 |   120 |     3   (0)| 00:00:01 |
--------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter(&quot;SAL&quot;&amp;gt;1000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인덱스 생성 후 search&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; create index idx_emp_sal ON EMP(sal);

Index created.

SQL&amp;gt; SELECT ENAME, SAL FROM EMP WHERE SAL &amp;gt; 1000;


ENAME                       SAL
-------------------- ----------
ADAMS                      1100
WARD                       1250
MARTIN                     1250
MILLER                     1300
TURNER                     1500
ALLEN                      1600
CLARK                      2450
BLAKE                      2850
JONES                      2975
SCOTT                      3000
FORD                       3000

ENAME                       SAL
-------------------- ----------
KING                       5000

12 rows selected.


Execution Plan
----------------------------------------------------------
Plan hash value: 946658323

-------------------------------------------------------------------------------------------
| Id  | Operation                   | Name        | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |             |    12 |   120 |     2   (0)| 00:00:01 |
|   1 |  TABLE ACCESS BY INDEX ROWID| EMP         |    12 |   120 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | IDX_EMP_SAL |    12 |       |     1   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;SAL&quot;&amp;gt;1000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 기본 인덱스를 생성하면 오름차순으로 생성이된다. 특정 컬럼에 대해 인덱스가 구성되어 있다면 인덱스 생성할 때 내림차순이라고 명시하지 않으면 
 컬럼 값에 대해 오름차순으로 인덱스가 구성되므로 인덱스를 경유하게 되면 자동으로 오름차순 형태로 데이터가 추출되게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행계획 SQL연산 (MERGE JOIN)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MERGE JOIN은 조인 시 각 테이블을 따로 정렬 후 그 결과를 병합 하는 집합 연산으로 SORT MERGE JOIN 이라고도 한다.
 BATCH성 작업에 효율적이다. OLTP 성능에는 좋지 않다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SQL&amp;gt; SHOW PARAMETER OPTIMIZER_MODE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME                                 TYPE                   VALUE
------------------------------------ ---------------------- ------------------------------
optimizer_mode                       string                 ALL_ROWS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;**&lt;/em&gt; CASE1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; SELECT /*+ RULE*/ COUNT(E.ENAME)
  2  FROM MYEMP1 E, MYDEPT1 D
  3  WHERE TO_CHAR(E.DEPTNO) = TO_CHAR(D.DEPTNO);


COUNT(E.ENAME)
--------------
      10000002


Execution Plan
----------------------------------------------------------
Plan hash value: 3462355838

----------------------------------------
| Id  | Operation            | Name    |
----------------------------------------
|   0 | SELECT STATEMENT     |         |
|   1 |  SORT AGGREGATE      |         |
|   2 |   MERGE JOIN         |         |
|   3 |    SORT JOIN         |         |
|   4 |     TABLE ACCESS FULL| MYDEPT1 |
|*  5 |    SORT JOIN         |         |
|   6 |     TABLE ACCESS FULL| MYEMP1  |
----------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   5 - access(INTERNAL_FUNCTION(&quot;E&quot;.&quot;DEPTNO&quot;)=INTERNAL_FUNCTION(&quot;D&quot;.&quot;DEP
              TNO&quot;))
       filter(INTERNAL_FUNCTION(&quot;E&quot;.&quot;DEPTNO&quot;)=INTERNAL_FUNCTION(&quot;D&quot;.&quot;DEP
              TNO&quot;))

Note
-----
   - rule based optimizer used (consider using cbo)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;**&lt;/em&gt; CASE2&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; SELECT /*+ USER(MERGE(D E)*/ COUNT(E.ENAME)
  2  FROM MYEMP1 E, MYDEPT1 D
  3  WHERE TO_CHAR(E.DEPTNO) = TO_CHAR(D.DEPTNO);


COUNT(E.ENAME)
--------------
      10000002


Execution Plan
----------------------------------------------------------
Plan hash value: 2924099767

----------------------------------------------------------------------------------
| Id  | Operation           | Name       | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |            |     1 |     3 | 25258   (1)| 00:05:04 |
|   1 |  SORT AGGREGATE     |            |     1 |     3 |            |          |
|*  2 |   HASH JOIN         |            |   700K|  2050K| 25258   (1)| 00:05:04 |
|   3 |    INDEX FULL SCAN  | PK_MYDEPT1 |     7 |    14 |     1   (0)| 00:00:01 |
|   4 |    TABLE ACCESS FULL| MYEMP1     |    10M|  9765K| 25186   (1)| 00:05:03 |
----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(INTERNAL_FUNCTION(&quot;E&quot;.&quot;DEPTNO&quot;)=INTERNAL_FUNCTION(&quot;D&quot;.&quot;DEPTN
              O&quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[위의 힌트에 따른 쿼리실행속도를 비교해보면 CASE 1 에 비해 CASE 2의 성능이 훨씬 좋다]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 인덱스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 비트리 인덱스 : 가장 많이 사용되는 인덱스 형태이며 구조가 자료구조의 TREE 형태와 비슷하다.

    기본적인 Algorithm을 이용하는데 주로 온라인 업무의 적은 데이터 처리에 유 리하고 분포도가 나쁜 데이터 처리는 성능에 악영향을 줄 수 있다.
 
    하나의 ROW를 검색 시 어느 ROW나 동일한 양의 블록을 ACCESS하게 되므로 검색 시간이 동일하다.


* 비트맵 인덱스 : 정보저장의 최소단위인 비트를 이용하여 칼럼 값을 간결하게 저장하고 이를 이용하여 자동으로 ROWID를 생성하는 구조를 가지며 분포도가 나쁜 칼럼, NOT, OR를 사용하는 경우 탁월한 성능을 낸다. 
    
    정보저장의 최소단위인 비트를 이용하여 칼럼 값을 간결하게 저장하고 이를 이용하여 자동으 로 ROWID를 생성하는 구조를 가지며 분포도가 나쁜 칼럼, NOT, OR를 사용하는 경우 탁월한 성능을 낸다. 
    
    B*Tree 인덱스가 NULL값을 보관하지 않는 것과는 달리 Bitmap 인덱스는 NULL값에 대한 BIT 값을 저장하여 비트리 인덱스의 NULL문제를 해결했으며 AND, OR 연산시 비트연산을 빠르게 수행한다. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By William Scott [WHERE 조건절 Tip]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Where 절을 검토한다
  Where 절은 크게 Rows를 제한 하는 것과 Table간의 Join에 사용된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2후보 Driving Table 을 정한다.
  가장 적은 Rows 를 가져오는 [가장 제한적 (where) 절을 가진] 테이블을 선택
  후보가 2개 이상 시에는 한개 찍기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From 절의 모든 Table 을 List 하고, 후보 Driving Table을 시작으로 하여, Join 조건을 이용하여 모든 Table 간의 Join을 진행한다.
  이것은 후보 Driving Table로 시작된, Database 가 접근 해야만 하는 테이블 순서 리스트를 보여준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Driving Table 의 인덱스를 찾고 인덱스 혹은 Full Table Scan을 이용하는 것이 좋을지 결정하고 Optimizer가 선택한 Index 보다 좋은 Index가 있다면 
  인덱스 Hint 사용을 통해서 보다 좋은 Index를 사용하도록 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;제한적 Where절을 가진 Table을 우선적으로 Join 하려고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Union 보다는 Union All 을 사용하라&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Outer Join, IS NULL 을 이용한 안티조인보다는 NOT IN, NOT EXISTS 를 사용하자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;레코드 필터링을 위해서 HAVING 보다는 WHERE 를 사용하자.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WHERE 절에 선행 INDEX칼럼을 명시하라.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 15 Feb 2019 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2019/02/15/CLASS5/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2019/02/15/CLASS5/</guid>
        
        
      </item>
    
      <item>
        <title>오라클 교육 4일차</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2019 - 02 - 14 (목)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create Table&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create table addrbook1 (        
    name varchar2(10) not null,       
    address varchar2(50),       
    age number default 0     ); 
    
-- addrbook1 을 tab, user_tables, user_catalog  딕셔너리 뷰로 확인할 수 있다.

select * from tab where table_name = 'addrbook1';
select * from user_tables where table_name = 'addrbook1';
select * from user_catalog where table_name = 'addrbook1';

--테이블 구조 확인

desc addrbook1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;서브쿼리를 활용한 테이블 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create Table 에서 서브쿼리를 이용하여 타 테이블의 데이터 및 구조를 기본으로 테이블 생성이 가능하다.&lt;/p&gt;

&lt;p&gt;서브쿼리 테이블에서 NOT NULL 제약조건만 복사 되므로 Primary Key 또는 Foreign key 제약조건은 다시 생성해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unconditional Insert All : 서브쿼리의 결과를 조건없이 모든 테이블에 입력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create table emp_job_info as select ename, job from emp where 1 &amp;gt; 100;  --100 은 1 보다 클 수 없음 (항상 false)
create table emp_sal_info as select ename, sal from emp where 1 &amp;gt; 100;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;emp 테이블에서모든행을 선택하여 emp_job_info에는 10번부서데이터를 , emp_sal_info에는 20부서 데이터를 입력하시오&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;insert all
    when deptno = 10 then
        into emp_job_info values (ename, job)
    when deptno= 20 then
        into emp_sal_infovalues (ename, sal);
        
select ename, sal , job, deptno from emp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MERGE : 테이블 데이터를 병합하기 위한 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;emp 테이블을 원본으로 emp_20 에 데이터가 이미 있으면 sal 값을 10% 증가, 없으면 insert&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;merge into emp_20 e20
    USING emp e
    ON(e20.empno = e.empno)
    WHEN MATCHED THEN
        UPDATE SET e20.sal = e.sal*1.1
    WHEN NOT MATCHED THEN
        INSERT(empno, ename, sal) VALUES(e.empno, e.ename, e.sal);
        
select * from emp_20;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;부모테이블 레코드삭제시 자식 테이블의 데이터를 삭제하는 옵션 on delete cascade 이용&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create table t2 (      
    sale_date date,      
    id number references t1(id) on delete cascade,      
    amount number      ); 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 딕셔너리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오라클 데이터베이스 운영과 연관된 중요한 정보를 제공하는 읽기 전용 시스템 테이블, 뷰의 집합이 며 일반 사용자가 직접 수정하는 것은 불가능하며 오라클 서버에서 스스로 관리하는 영역이고 소유자 는 SYS 계정이다.&lt;/p&gt;

&lt;p&gt;모든 스키마 오브젝트(테이블, 인덱스, 뷰, 시퀀스, 동의어, DB링크, PL/SQL 함수나 프로시저)의 정의와 이 오브젝트에 대해 얼마나 많은 저장공간을 사용하는지, 칼럼의 기본값은 무엇이고 제약조건은 어떤 것들이 있는지, 오라클 사용자의 이름, DB에 생성된 권한과 롤 등이 어떻게 부여 되었는지, 객체접근 및 수정에 따른 시스템 감사정보, 데이터베이스 생성시각, 이름, 운영모드, 인스턴스의 이름 등과 같이 DB운영에 필요한 중요한 정보들이 기록된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;USER_ 데이터 딕셔너리 뷰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;USER_CONSTRAINTS : 사용자가 작성한 제약조건을 확인 하는 뷰
USER_CONS_COLUMNS : 제약조건이 걸려 있는 칼럼을 확인 하는 뷰
USER_TABLES : 사용자가 작성한 테이블을 확인 하는 뷰, 칼럼구조는 ALL_TABLES 뷰와 동일하며 정확 한 정보를 위해서 테이블의 통계정보가 생성되어야 한다. 
USER_TAB_COLUMNS : 테이블, 뷰, 클러스터의 칼럼과 관련된 정보 조회용이며 정확한 정보를 위해서 는 테이블, 뷰의 통계정보가 생성 되어야한다
USER_OBJECTS : 사용자가 작성한 스키마 오브젝트(테이블, 인덱스, 뷰, 시퀀스, DB링크, PLSQL 함수, 프 러시저)를 확인 하는 뷰, 칼럼구조는 ALL_OBJECTS 뷰와 동일하다. 
USER_OBJECT_SIZE : 사용자가 작성한 PLSQL 오브젝트(PLSQL 함수, 프러시저, 패키지)의 바이트 단위 사이즈를 조회한다. 
USER_CATALOG : 사용자가 생성한 객체들을 간단히 이름, 종류만 나열한다. 
USER_INDEXES : 사용자가 작성한 인덱스를 조회한다. 
USER_IND_COLUMNS : 인덱스 구성 칼럼을 조회한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인덱스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테이블의 칼럼에대해 생성되는 객체로 별도의 영역에 칼럼값들을 정렬한 후 생성한다. 검색속도를 향상시키기 위해 사용된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE INDEX index_name
ON table_name (Column);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;단일 / 복합 인덱스 : 단일 인덱스는 하나의 컬럼으로 인덱스가 구성된 것이며, 복합 인덱스란 두개 이상의 칼럼으로 인덱스가 생성된 경우이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
-- ename 칼럼에 단일 인덱스 생성

CREATE INDEX idx_emp_ename on emp(ename)

-- emp 테이블에서 ename, sal 로 복합 인덱스 구성

create index idx_emp_ename_sal on emp(ename, sal);

select table_name, index_name, visibility from user_indexes where table_name = 'EMP';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;고유/ 비고유 인덱스 (UNIQUE / NON UNIQUE) : 고유 인덱스는 칼럼의 값들이 유일한 경우에 만들 수 있는 인덱스이고 비고유 인덱스는 칼럼 값 에 중복된 값이 있는 경우 만드는 인덱스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;고유 인덱스 생성&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 만약 ename 칼럼에 중복되는 값이 있다면 아래 create index 구문은 오류가 발생한다. 

create unique index idx_emp_ename on emp(ename); 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EMP 테이블에서 ENAME 칼럼에 대해 생성되 어있는 인덱스를 제거하시오&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
SELECT a.index_name
    from USER_IND_COLUMNS a, USER_INDEXES b
    where a.table_name = 'EMP'
      and a.table_name = b.index_name
      and a.column_name = 'ENAME'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Descending index : 인덱스 생성시 칼럼명 다음에 아무값도 안써주면 기본적으로 오름차순 이지만 DESC라고 기술하면 내림차순으로 인덱스가 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create index idx_emp_job_sal on emp(job, sal desc) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 재 구성 및 삭제 : 칼럼에 대해 생성된 인덱스에 변형(데이터 삽입, 삭제, 수정)이 자주 발생하는 경우 균형잡힌 트리 (Balanced Tree)의 모양이 아닌 트리가 한쪽으로 기울어 지는 현상이 생길 수 있다. 이러한 경우 인덱 스를 재구성 또는 삭제 후 재생성 해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- 1. EMP 테이블의 ENAME 칼럼에 대해 생성된 인덱스를 재구성 하세요. 
 
Alter index idx_emp_ename rebuild; 
 
-- 2. EMP 테이블의 ENAME 칼럼에 대해 생성된 인덱스를 삭제 하시요. 
 
Drop index idx_emp_ename; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인덱스 숨기기 : 인덱스를 Invisible 시키면 옵티마이저에서 명시적으로 사용하지 않도록 지시할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
select count(*) from emp where sal&amp;gt; 1500;

-- 위 쿼리는 sal column에 인덱스가 걸려있다. plan 에 태울 때 INDEX RAGE SCAN을 한다.

ALTER INDEX IDX_EMP_SAL invisible

select count(*) from emp where sal&amp;gt; 1500;

-- 위 쿼리는 SAL COLUMN 에 걸린 인덱스를 숨겼기 때문에 TABLE ACCESS FULL 하게 된다.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;VIEW&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나 또는 그 이상의 테이블이나 뷰를 이용하여 생성되는 논리적인 테이블로 실제 데이터는 저장하지 않는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EMP 테이블에서 20 번 부서 사원의 사번, 이름, 급여를 정의하는 v_emp20이라는 이름의 단순뷰를 작성하시오.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create or replace view v_emp20
as
select empno, ename, sal fromemp
where deptno = 20;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sequence&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다중 사용자 환경에서 사용하는 숫자 자동 생성&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE SEQUENCE sequence_name
    [INCREMENT BY n]
    [START WITH n]
    [{MAXVALUE n| NOMAXVALUE}]
    [{MINVALUE n| MINVALUE}]
    [{CYCLE | NOCYCLE}]
    [{CACHE n | NOCACHE}]

-- 보통 실무에서는 DEFAULT 옵션을 쓴다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;INCREMENT BY n : 생성되는 Sequence 번호의 간격을 정수 n으로 정의. 시퀀스는 1씩 증가한다.&lt;/li&gt;
  &lt;li&gt;START WITH n : 첫 번째 Sequence 번호를 정의, 옵션이 생략되면 시퀀스는 기본적으로 1부터 시작한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;SQL 처리 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 SQL 문장 실행 - &amp;gt; 오라클 서버측 리스너가 서버 프로세스로 SQL 문장 전달.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL 파싱을 한다.&lt;/p&gt;

    &lt;p&gt;2.1 클라이언트에서 보내온 SQL 구문이 서버프로세스의 PGA 내부의 Private SQL Area 에서 문법체크를 하고 이상이 없는 경우&lt;/p&gt;

    &lt;p&gt;2.2 Library Cache 에 세션이 있다면 재활용하여 Execution Plan을 태워 쿼리를 실행시키고(Soft Parsing) 없다면 cache 에 저장한다.
 2.3 Optimizer 로 넘어가 쿼리실행&lt;/p&gt;

    &lt;p&gt;일반적으로 소프트 파싱은 Optimization, row source generation 과정을 생략하고 직접 execute 단계로 가서 처리한다.
 SQL 커서가 없다면 Parsing 된 SQL 문장(쿼리 블럭의 set)을 Optimizer로 전달한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Query Transformer : 쿼리블록으로 나누어 변형된 몇 종류의 쿼리문을 생산, 서브쿼리를 조인으로 변경, 뷰의 해체작업, 인라인뷰의 해체작업, FROM절의 테이블 제거작업, 조인조건 푸시, 뷰 조건 푸시, 서브쿼리를 조인으로 변경 등 쿼리를 변형한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Estimator : 주어진 SQL 문장의 모든 Cost 를 측정한다. ( Selectivity - 선택도 , Cardinality, Cost 등) 세가지 다른 측정방법을 이용하여 최소의 비용을 갖는 SQL 문장을 Plan Generator에게 넘긴다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Plan Generator : 선택된 저비용 SQL문의 실행계획을 생성하여 Row Source Generator에게 넘긴다. 이렇게 생성한 실행계획도 나중을 위해 Library Cache에 저장해 둔다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;오라클은 뒤에서부터 읽는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set autotrace on

select empno, ename, dname 
from emp e, dept d 
where e.deptno = d.deptno;

----------------------------------------------------------------------------------------
| Id  | Operation                    | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |         |    13 |   338 |     6  (17)| 00:00:01 |
|   1 |  MERGE JOIN                  |         |    13 |   338 |     6  (17)| 00:00:01 |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT    |     4 |    52 |     2   (0)| 00:00:01 |
|   3 |    INDEX FULL SCAN           | PK_DEPT |     4 |       |     1   (0)| 00:00:01 |
|*  4 |   SORT JOIN                  |         |    13 |   169 |     4  (25)| 00:00:01 |
|*  5 |    TABLE ACCESS FULL         | EMP     |    13 |   169 |     3   (0)| 00:00:01 |
----------------------------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dept 부터읽는다. (dept 에 index가 잡힘) –&amp;gt; dept 의 pk_dept 스캐닝 
dept 의 pk_dept &amp;lt; rowid, deptno &amp;gt;  –&amp;gt; select dname from dept where rowid = pk_dept.rowid (인덱스)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select count(*) from emp;



Execution Plan
----------------------------------------------------------
Plan hash value: 2937609675

-------------------------------------------------------------------
| Id  | Operation        | Name   | Rows  | Cost (%CPU)| Time     |
-------------------------------------------------------------------
|   0 | SELECT STATEMENT |        |     1 |     1   (0)| 00:00:01 |
|   1 |  SORT AGGREGATE  |        |     1 |            |          |
|   2 |   INDEX FULL SCAN| PK_EMP |    14 |     1   (0)| 00:00:01 |
-------------------------------------------------------------------


&amp;gt; pl/sql ==&amp;gt; stored function, stored procedure

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DBMS_STATS 패키지&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Optimizer Statistics (옵티마이저 통계) 는 데이터베이스 모든 오브젝트에 대한 자료를 모아 기술한 통계인데 데이터 사전에&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;통계정보 수집용 테이블 생성은 DBMS_STATS 패키지의 create_stat_table 프로시저를 이용하여 만든다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;execute dbms_stats.create_stat_table(USER, 'stat_tab', 'users');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select table_name, last_analyzed from user_tables where table_name in ('EMP', 'DEPT');

TABLE_NAME                                                   LAST_ANALYZE
------------------------------------------------------------ ------------
DEPT                                                         11-FEB-19
EMP                                                          11-FEB-19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데이터 딕셔너리에서 생성된 통계정보 확인 , LAST_ANALYZED 칼럼확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM USER_TABLES WHERE TABLE_NAME = 'EMP';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테이블 내의 인덱스된 컬럼들 및 대상 테이블과 연관된 모든 인덱스에 대한 통계 정보 생성&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin
dbms_stats.gather_table_stas(
        USER, 'myemp1',
        method_opt =&amp;gt; 'for all indexed columns',
        cascade =&amp;gt; true);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select column_name, num_distinct, num_nulls
    from user_tab_col_statistics
    where table_name ='MYEMP1';

COLUMN_NAME                                                  NUM_DISTINCT  NUM_NULLS
------------------------------------------------------------ ------------ ----------
EMPNO                                                            10000002          0
ENAME                                                             9982976          0
DEPTNO                                                                  4          0
ADDR                                                              9976832          0
SAL                                                               6039040          0
JOB                                                                     6          0
COMM                                                               989888    8333335
SUNGBYUL                                                                2          0
HIREDATE                                                          3574016          0
OUTDATE                                                                 1    8333335
MGR                                                                     0   10000002

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;execute dbms_stats.gather_schema_stats(ownname =&amp;gt; USER, estimate_percen =&amp;gt; dbms_stats.auto_sample_size);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Optimizer Statistics&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;옵티마이저 통계는 데이터베이스 모든 오브젝트에 대한 자료를 모아 기술한 통계이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show parameter DB_FILE_MULTIBLOCK_READ_COUNT --(외워야됨) 

NAME                                 TYPE                   VALUE
------------------------------------ ---------------------- ------------------------------
db_file_multiblock_read_count        integer                111

111개씩 읽어온다. (1개씩 읽는거보다 훨씬 빠를 수 밖에 없다.)

access full emp, idx ==&amp;gt; (block 단위로 읽고 쓴다) index fast full scan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;칼럼 통계정보는 칼럼의 distinct values 의 수(NUMBER OF DISTICT VALUES, NDV), 칼럼의 최소값, 최대값과 같은 정보를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;옵티마이저는 테이블 통계정보(데이터 건수등)과 결합하여 SQL의 오퍼레이션에서 리턴되는 로우 수 (레코드 건수)를 예측한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Literal SQL / Bind Variable SQL (Soft Parsing / Hard Parsing)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SOFT PARSING 100% : BIND VARIABLE
        20% ~ 30% : FORCE PARAMETER&lt;/p&gt;

&lt;p&gt;리터럴이란 SQL 작성시 WHERE 절의 비교되는 값에 문자/숫자 상수값을 하드코딩해서 작성한 것을 말한다.
이를 소프트 파싱하기 위해서는 BIND VARIABLE 로 바꾸어주어 다이나믹 SQL로 처리하게한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM EMP WHERE DEPTNO = 10;        
SELECT * FROM EMP WHERE DEPTNO = 20;        
SELECT * FROM EMP WHERE DEPTNO = 30;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 같은 문장은 WHERE 조건만 바뀔 뿐이지만 전부 하드파싱을 하게된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DECLAR
 v_sql VARCHAR2(500);
 v_cnt NUMBER;
 BEGIN
 FOR I IN 1..5 LOOP
 v_sql :='SELECT /*+ LITERAL_SHJ */ COUNT(*) FROM MYEMP1 WHERE EMPNO ='|| i;
 DBMS_OUTPUT.PUT_LINE(v_sql);
 EXECUTE IMMEDIATE v_sql INTO v_cnt;
END LOOP;
END;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 문장의 쿼리블록을 만들어 실행한다.&lt;/p&gt;

&lt;p&gt;[오라클에서 HINT 주는 방법]&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT /*+ 힌트 */ EMPNO, ENAME, SAL, DEPTNO
FROM EMP, DEPT -- 오라클은 뒤에서부터 읽는다 (DEPT 부터)
WHERE ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;CURSOR_SHARING 파라미터&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CURSOR_SHARING 변수는 Bind 변수를 쓰는 것보다는 빠르지 않지만 Literal SQL 문을 이용하는것보다 20~30 % 이상의 성능향상을 보여준다.&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Feb 2019 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2019/02/14/CLASS4/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2019/02/14/CLASS4/</guid>
        
        
      </item>
    
      <item>
        <title>오라클 교육 3일차</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2019 - 02 - 13 (수)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;계층형 쿼리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;형식&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT 칼럼
FROM 테이블
WHERE 조건
START WITH 조건
CONNECT BY [PRIOR] [NOCYCLE]
[ORDER SIBLING BY 칼럼, 칼럼]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;START WITH : 시작 데이터지정&lt;/li&gt;
  &lt;li&gt;CONNECT BY : 계층 구조에서 다음에 연결될 데이터를 지정&lt;/li&gt;
  &lt;li&gt;PRIOR : CONNECT BY 절에 이용되며 현재 읽은 컬럼을 지정한다.
        PRIOR 자식 = 부모 (TOP DOWN  형태 출력) 
        PRIOR 부모 = 자식 (BOTTOM UP 형태 출력)&lt;/li&gt;
  &lt;li&gt;NOCYCLE : 데이터를 펼치면서 이미 나타났던 데이터가 다시 나타나는 경우 CYCLE이 형성되었다고한다. 이 때 오류가 발생하는데 NOCYCLE을 추가하면 사이클이 발생한 이후의 데이터를 출력하지 않는다.&lt;/li&gt;
  &lt;li&gt;ORDER SIBLING BY : 동일한 LEVEL인 경우 노드를 형제 노드라고 하고 형제노드들의 정렬순서를 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;계층형 질의에서 사용되는 가상컬럼&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. LEVEL : 최상위 루트 데이터가 1 , 하위로 갈 수록 1씩 증가
2. CONNECT_BY_ISLEAF : 최하단 리프데이터이면 1, 아니면 0
3. CONNECT_BY_ISCYCLE : 해당데이터가 조상으로 존재하면 1, 아니면 0 , 조상이란 자신으로부터 루트까지의 경로에 존재하는 데이터를 위미한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;계층형 쿼리 함수&lt;/p&gt;

&lt;p&gt;sys_connect_by_path ( 칼럼, 경로분리자 ) : 루트데이터에서전개할 데이터 까지의 경로를 표시한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select lpad(' ', level) || ename, sal, deptno
ename
from emp
start with ename = 'KING'
CONNECT BY PRIOR EMPNO = mgr;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 분석함수 (오라클 버전 11이상)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;분석을 위한 행들의 그룹을 윈도우라고 부르며  analytics_caluse(OVER 절)에서 정의한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select empno, ename, sal, deptno,
            max(sal) over(partition by deptno) max_sal,
            min(sal) over(partition by deptno) min_sal
from emp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;분선함수 기본형식 ( PARTITION BY, ORDER BY, WINDOW 구, MAX , MIN, SUM, AVG, DENSE RANK FIRST/LAST, KEEP, OVER)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;analytic_function([arguments]) OVER (analytic_caluse)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DENSE_RANK() 공동 순위 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select empno, ename, sal, comm,
       DENSE_RANK() OVER (ORDER BY COMM DESC) D_RANK FROM EMP;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 사원출력 하면서 자신이 속한 부서에서 수당을 가장많이 받는 사원의 이름을 같이 출력&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT EMPNO, ENAME, DEPTNO,
       MAX(SAL) KEEP(DENSE_RANK FIRST ORDER BY comm DESC) OVER (partition by deptno) SAL FROM EMP;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 사원들을 대상으로 그 사원이 속한 부서의 급여 최소, 최대, 급여합, 급여순위를 출력&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ENAME, DEPTNO , SAL ,
       MIN(SAL) OVER (PARTITION BY DEPTNO) &quot;WORST&quot;,
       MAX(SAL) OVER (PARTITION BY DEPTNO) &quot;BEST&quot;,
       SUM(SAL) OVER (PARTITION BY DEPTNO) &quot;합계&quot;,
       AVG(SAL) OVER (PARTITION BY DEPTNO) &quot;평균&quot;,
       RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) &quot;RANK&quot;
       FROM EMP
       ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MYEMP1에서 직무가 ‘CLERK’인 사원을 출력하면서 사번, 이름, 급여, 그 사원이 속한 부서의 급여 평균을 같이 출력하라.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT EMPNO, ENAME, SAL,
       TRUNC(AVG(SAL) OVER(PARTITION BY DEPTNO)) AVG_SAL 
       FROM MYEMP1
       WHERE JOB = 'CLERK';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;LISTAGG : String Aggregation함수로 하나의 칼럼의 값을 그루핑하고 결합시키는 함수.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select deptno,
       LISTAGG(ENAME, '') WITHIN GROUP (ORDER BY ENAME) AS EMPLOYEES
       FROM EMP
       GROUP BY DEPTNO;
       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;EMP 테이블의 데이터를 출려하면서 같은 부서 사원들을 EMPLOYEES 칼럼에 보여주세요&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT DEPTNO ,ENAME, HIREDATE LISTAGG()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FIRST VALUE, LAST_VALUE&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
--EMP 테이블에서 10번 부서 사원중에서 급여가 가장 적은 사원이름 출력

SELECTR EMPNO, ENAME, DEPTNO, FIRST_VASLUE(ENAME) OVER(ORDER BY SAL) AS LOWEST_SAL
    FROM (SELECT * FROM EMP WHERE DEPTNO = 10)
    ORDER BY EMPNO;
    
    
--10번 부서 사원들중 급여가 가장 높은 직원의 입사일을 출력. 

select empno, ename, sal,deptno,hiredate,        
    last_value(hiredate) over(order by sal ROWS BETWEEN UNBOUNDED PRECEDING 
    AND UNBOUNDED FOLLOWING) as highsal_hiredate 
    from (select * from emp where deptno=10 order by hiredate) order by empno;     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 12 Feb 2019 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2019/02/12/CLASS3/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2019/02/12/CLASS3/</guid>
        
        
      </item>
    
      <item>
        <title>오라클 교육 2일차</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2019 - 02 - 12 (화)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;집합 연산자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;합집합, 교집합, 차집합 등을 말한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UNION : 합집합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UNION ALL : 합집합 + 교집합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;INTERSECT : 교집합&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MINUS : 합집합 - 교집합&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용방법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM CUSTOMER1
UNION -- 또는 INTERSECT, UNIONALL, MINUS
SELECT * FROM CUSTOMER2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;ROWNUM 및 NULL 값, NLS_DATE_FORMAT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;ROWNUM : 가상컬럼 이라고도 한다 ( ROWNUM , ROWID )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용방법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * , rownum from emp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예외&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select rownum, ename from emp order by ename;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 결과 rownum 이 깨지게 된다. 
쿼리의 실행순서는 
첫번째로 FROM 절에서 테이블의 데이터를 가져온다
두번째로 WHERE 절에서 조건에 따라 필터링을하고
세번째로 GROUP BY 절에서 그룹화를한다.
네번째로는 HAVING 절에서 집계함수컬럼에 조건을 넣는다.
다섯번째로 SELECT 
마지막으로 ORDER BY 가 돌아간다. 이 때 ORDER BY는 메모리에서 돌아가는데 사이즈가 오버되면 디스크에서 돌아가게된다.&lt;/p&gt;

&lt;p&gt;ROWNUM 은 ORDER BY 절 전에 돌아가기 때문에 정렬시 ROWNUM이 깨지게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ROWNUM , EMP.*
FROM EMP
WHERE 1  = 0
ORDER BY SAL DESC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;EMP 읽어서 Temp table 생성&lt;/li&gt;
  &lt;li&gt;temp table 에 emp 저장된 순서대로 읽어서 fetch&lt;/li&gt;
  &lt;li&gt;fetch 하면서 각 row에 rownum 이 붙는다.&lt;/li&gt;
  &lt;li&gt;order by 하기 전에 select 절을 보고 선택이 안된 컬럼은 temp table 에서 지운다.&lt;/li&gt;
  &lt;li&gt;select 절에 fetch를 할 때 where절 ( 1 =0 , 1 &amp;gt; 100 ) 을 보고 참 거짓을 확인 후에 패치한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;NLS Parameters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;NLS는 언어 지원과 관련된 파라미터이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NLS_DATE_FORMAT 을 통해 날짜 형식을 지정해준다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER SESSION SET nls_date_format = 'yyyy.mm.dd';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와같이 형식을 바꾸어줄 수 있다. -&amp;gt; 2018.01.01&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER SESSION SET nls_language = 'KOREAN';

SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL ;  -- 화요일 출력
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;NLS_LANG 은 오라클 DB 환경변수 값이 아니라 사용자 환경울 ORACLE DB에 알려주는 역할이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 형변환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;to_char&lt;/li&gt;
  &lt;li&gt;to_date&lt;/li&gt;
  &lt;li&gt;to_number&lt;/li&gt;
  &lt;li&gt;chartorowid : char 를 rowid 로 바꿈.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;함수와 프로시져 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;둘은 매우 유사하다 다른점은 함수는 리턴값이 하나라서 SELECT 문에도 쓸 수 있지만, 프로시져는 리턴값이 0 , 1 또는 여러개일 수 도 있기 때문에 SELECT 문에는 사용할 수 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SQL 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;CONCAT(a1, a2) 함수 : 문자열 두개를 합친다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT CONCAT('A' , 'B') FROM DUAL;   -- AB 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;INITCAP(a1) 함수 : 문자열의 첫 문자를 대문자 나머지를 소문자로 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT INICAP('abc') from DUAL ; -- Abc 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;INSTR(a1, a2) 함수 : a1 문자열중 a2 문자열이 시작하는 위치 반환&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select INSTR('abc' , 'b') from dual ; -- 2 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;INSTR(a1, a2 , c1, c2) 함수 : a1 문자열중  c1 번째자리부터 c2 번째 자리 중 a2 가 시작하는 문자의 위치를 반환 ( c1이 음수이면 뒤에서부터 검색 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select INSTR('abababab' , 'b' , 4 , 8) from dual; -- 5 반환
select INSTR('abababab' , 'b' , 4 , 8) from dual; -- 5 반환

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LENGTH(A1) : A1 문자열의 길이 반환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LOWER(a1) : a1 인수를 소문자로 변환&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Number function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;CEIL : 올림 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT CEIL(12.7) FROM DUAL;  -- 13 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FLOOR : 내림 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT FLOOR(12.7) FROM DUAL;  --12 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ROUND : 반올림 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ROUND(12.456, 1) FROM DUAL ; -- 12.6 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;TRUNC : 버림 ( 소수점 )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT TRUNC(12.567, 1 ) FROM DUAL ; -- 12.5 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Date function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ADD_MONTHS(date, n) : date에 n달을 추가한다. date 값을 반환하며 n은 정수이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EXTRACT({year/month/day/hour/minute/second} FROM (a1)) : 날짜 값을 가진 a1 으로부터 원하는 날짜영역 출력&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LAST_DAY(a1) : a1 의 마지막 일자 반환&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1980/12/17 ~ 현재 까지 How long days? How long months?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;숫자 및 날짜 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ABS(n) : 인수 n의 절대값
CEIL(n) : 인수  n보다 크거나 같은 최소 정수 반환
EXP(n) : e의 n승 반환
FLOOR(n) : 인수 n보다 작거나 같은 최대 정수를 반환
MOD(m, n) : 인수 m을 n으로 나눈 나머지를 반환
POWER(m, n) : 인수 m의 n 지수승을 반환
ROUND(m, n) : 인수 m을 소수이하 n자리 까지 반올림
SIGN(n) : n이 음수면 -1, 양수면 1, 0이면 0을 반환
TRUNC(m, n) : 인수 m을 소수이하 n자리까지 표시 하는데 절삭한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;변환 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CHARTOROWID(char) : VARCHAR2 또는 CHAR Type을 ROWID Type으로 변환
TO_CHAR(datetime|number[,fmt]) : 숫자나 날짜형 자료를 fmt 형식에 맞춰 문자로 변환
TO_DATE(char, [,fmt]) : fmt 형식의 문자를  Date값으로 변환 한다.
TO_NUMBER(char [,fmt]) : 숫자형태의 문자 char를 숫자로 변환한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ENAME, SAL, ROWID FROM EMP
    WHERE ENAME = 'SMITH';

SELECT TO_CHAR('8000000'), TO_NUMBER('8,000,000', 9,999,999')

SELECT SYSDATE,
    ROUND(SYSDATE -TO_DATE('2003.01.01', YYYY.MM.DD'))
    FROM DUAL;
    
SELECT TO_CHAR(SYSDATE, 'ddd') &quot;1년 중 몇일?&quot;,
       TO_CHAR(SYSDATE, 'dd') &quot;월의 몇번째 일?&quot;,
       TO_CHAR(SYSDATE, 'd')  &quot;주중 몇번째 일?&quot;
       FROM DUAL;

1년 월
--- -- -
250 08 2

SELECT TO_CHAR(SYS_DATE, 'YEAR MONTH DD DAY HH24:MI:SS') FROM DUAL;

TO_CHAR(SYSDATE,'YEARMONTHDDDAYHH24:MI:SS')
-----------------------------------------------------------------------
TWENTY FOURTEEN 9월 07 일요일 16:30:29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;날짜형식 연산&lt;/p&gt;

&lt;p&gt;ex1) : 입사년도 1981 보다 큰 사원의 사번, 이름&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select empno, ename from emp
where extract(year from hiredate) &amp;gt; 1981
order by hiredate;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex2) : 오늘부터 100일 후는?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select sysdate + 100 from dual;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex3) : 현재월의 마지막 날을 반환&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select last_day(sysdate) from dual;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex4) : emp 테이블에서 사원들의 근속월수, 첫째 자리에서 절삭 ( MONTH_BETWEEN 은 앞날짜에서 뒷날짜를 뺀다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select ename, hiredate, sysdat, trunc(months_between(sysdate, hiredate)) from emp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반 함수 및 조건식&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NVL(a1 , a2) : a1이 null 이면 a2 아니면 a1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NVL2(a1 , a2, a3) : a1이 null 이면 a3 아니면 a2  ,, a1은 어떠한 datatype 이든 가능하며 a2 , a3 의 경우 long 타입을 제회한 datatype 이어야한다. 만약 a2, a3 이 datatype 이 다르다면 a3을 a2로 변환한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DECODE : 조건식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CASE&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사용법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ENAME, DECODE(DEPTNO , 10, 'Accounting' , 20 , 'Research' ,30 , 'Sales', 40 , 'Operations' , 'Unknown') department from emp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;CASE : 조건식 ( decode 와 비슷하게 사용할 수 있다. )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    SELECT ENAME
    (CASE DEPTNO
        WHEN 10 THEN 'Accounting'
        WHEN 20 THEN 'Research'
        WHEN 30 THEN 'Sales'
        WHEN 40 THEN 'Operations'
        else 'Unknown'
        end) department
    from emp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;NULLIF(a1, a2) : a1과 a2가 같으면 Null , 같지 않으면 a2를 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 조인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;inner join&lt;/li&gt;
  &lt;li&gt;outer join
 2.1. left outer join
 2.2. right outer join&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select *
from emp a dept b
where a.deptno = b.deptno;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;ANSI 조인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;inner join&lt;/li&gt;
  &lt;li&gt;outer join
 2.1. left outer join
 2.2. right outer join
 2.3. full outer join&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select *
from emp a , dept b
on a.deptno = b.deptno; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;EquiJoin : = 로 조인한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Non EquiJoin :  = 연산자 이외의 연산자를 사용하여 조인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--ORACLE JOIN

select e.ename &quot;name&quot; , e.sal &quot;pay&quot; , s.grade &quot;grade&quot;
    from emp e , salgrade s
    where e.deptno = 10
    and e.sal between s.losal and s.hisal;

--between join 이다.

--ANSI JOIN

select e.ename &quot;name&quot; , e.sal &quot;pay&quot; , s.grade &quot;grade&quot;
    from emp e left outer join salgrade s on e.sal between s.losal and s.hisal;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Self Join&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT P.EMPNO, P.ENAME, C.ENAME
    FROM EMP P ,EMP C
    WHERE P.MGR = C.EMPNO;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Outer Join&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일반적으로 내부조인의 경우 두 테이블 모두 조인 조건을 만족해야 레코드가 출력이 되지만, OUTER JOIN 의 경우 한쪽 테이블의 값이 일치하면 레코드가 출력이 된다.&lt;/p&gt;

&lt;p&gt;예를들어 EMP, DEPT 를 조인하여 사원명 부서명 을 출력할 때  EMP 테이블의 KING은 최고관리자로 부서코드가 없다. 이 경우 emp.deptno = dept.deptno 로 조인을 하면 출력이 되지 않는다. (INNER JOIN)&lt;/p&gt;

&lt;p&gt;오라클의 경우 OUTER JOIN의 연산자는 “(+)” 이다.&lt;/p&gt;

&lt;p&gt;오라클은 모두 출력 되어야 하는 테이블의 반대쪽, 조인될 데이터가 없는쪽에 “(+)” 를 표시한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서브쿼리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;SELECT –&amp;gt; (SELECT) : SCHOLAR SUB-QUERY&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FROM   –&amp;gt; (SELECT) : INLINE - VIEW&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WHERE  –&amp;gt; (SELECT) : NESTED SUB-QUERY ==&amp;gt; 4. CO-RELATED SUB-QUERY ( 상관 서브 쿼리 )&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;smith 가 받는 급여보다 돈을 더 많이 받는 사람 추출&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select ename.sal
from emp
where sal &amp;gt; (select sal from emp where ename = 'smith');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;emp 에 존재하는 부서만 보여주기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select dname
from dept
where deptno exists(select deptno from emp group by deptno)  -- exist 대신 in을 쓸 수 있지만 exist 가 DB성능상 알고리즘이 더 효율적이다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EMP 에서 부서별 최소급여를 받는 사람의 내역 보여주기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--(nested sub-query)
SELECT DEPTNO, ENAME, SAL
FROM EMP
WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, MIN(SAL) FROM EMP GROUP BY DEPTNO);

--(inline sub-q)
SELECT A.DEPTNO, A.ENAME, A.SAL
FROM EMP A , (SELECT DEPTNO, min(SAL) as sal FROM EMP GROUP BY DEPTNO) B
WHERE A.DEPTNO = B.DEPTNO
AND   A.SAL = B.sal;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EMP 테이블에서 부서별 최대급여 (상관서브쿼리)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM EMP E1
WHERE SAL = (SELECT MAX(SAL)
             FROM EMP E2
             WHERE E1.DEPTNO = E2.DEPTNO); -- 조건이 추가될때마다 가령, 부서별, 직책별 등등..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;각 직무별로 최대급여를 받는 사원의 직무, 이름, 급여를 출력하는데 직무명으로 오름차순 정렬하여 출력하는 예문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; SELECT JOB, ENAME, SAL 
        FROM EMP A 
        WHERE SAL = (SELECT MAX(SAL) 
                                FROM EMP B  
                                WHERE A.JOB = B.JOB) 
        ORDER BY JOB;
        

--INLINE VIEW

SQL&amp;gt; SELECT A.JOB, A.ENAME, A.SAL 
        FROM EMP A , ( SELECT JOB, MAX(SAL) SAL FROM EMP GROUP BY JOB) B 
        WHERE A.JOB = B.JOB
          AND A.SAL = B.SAL
        ORDER BY JOB;      
        
--NESTED SUB-Q

SQL&amp;gt; SELECT A.JOB , ENAME, SAL
     FROM EMP A
     WHERE (A.JOB,A.SAL) IN (SELECT JOB, MAX(SAL) MAX_SAL FROM EMP GROUP BY JOB);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;자신이 속한 부서의 평균 급여보다 급여를 적게 받는 사원의부서, 사원명, 급여를 출력하되 부서 순으로 오름차순 정렬하여 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.상관서브쿼리로 구현&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT A.DEPTNO, ENAME, SAL
FROM EMP A
WHERE A.SAL &amp;lt; (SELECT AVG(SAL) FROM EMP B WHERE A.DEPTNO = B.DEPTNO)
GROUP BY A.DEPTNO;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EMP 테이블에서 급여가 높은사원 5명 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ENAME, SAL
FROM EMP A
WHERE 5 &amp;gt; (SELECT COUNT(*) FROM EMP B WHERE B.SAL &amp;gt; A.SAL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;EMP 테이블에서 직무가 “SALESMAN” 인 사람들의 이름, 부서명, 직무를 출력하는 예문&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
--inline view

select b.ename, a.dname, b.job
from dept a, (select ename, job, deptno from emp where job = 'SALESMAN') b
where a.deptno = b.deptno;

-- oracle join

select a.ename, b.dname, a.job 
from emp a, dept b
where a.deptno = b.deptno
  and a.job = 'SALESMAN'; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;WITH 구문&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;복잡한 SQL 에서 동일 쿼리블록이 반복적으로 사용될 경우사용&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WITH emps AS(
SELECT DEPTNO, COUNT(*) AS EMP_COUNT
FROM EMP GROUP BY DEPTNO)

SELECT E.ENAME, EMPS.EMP_COUNT
FROM EMP E, EMPS
WHERE E.DEPTNO = EMPS.DEPTNO;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;성능상으로도 이점을 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WITH 문을 사용하지 않은 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select e.empno, e.deptno, e.sal, d.dname from (
select empno, sal, deptno from myemp1 where sal &amp;gt; 5000000
) e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘1’

union
select e.empno, e.deptno, e.sal, d.dname from (
select empno, sal, deptno from myemp1 where sal &amp;gt; 5000000
) e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘2’
union
select e.empno, e.deptno, e.sal, d.dname from (
select empno, sal, deptno from myemp1 where sal &amp;gt; 5000000
) e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘3’
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;WITH 문을 사용한 경우 (거의 절반수준의 속도차이를 보인다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
with e as (
select empno, sal, deptno from myemp1 where sal &amp;gt; 5000000
)
select e.empno, e.deptno, e.sal, d.dname from e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘1’
union
select e.empno, e.deptno, e.sal, d.dname from e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘2’
union
select e.empno, e.deptno, e.sal, d.dname from e, mydept1 d
where e.deptno = d.deptno
and e.deptno = ‘3’


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2019/02/12/CLASS2/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2019/02/12/CLASS2/</guid>
        
        
      </item>
    
      <item>
        <title>오라클 교육 1일차</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2019 - 02 - 11 (월)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;실습환경&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;오라클 11g
SQL*PLUS/SQL Developer&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;테이블 정의 원칙 (DDL)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1.1 개채무결성 : ROW 를 유일하게 식별할 수 있는 캃럼을 갖는다 이를  PK라 함.
1.2 참조무결성 : 테이블은 외래키를 통해 서로 관계를 맺는다. 다른 테이블 또는 자기자신 테이블의 PK를 참조하는 칼럼을 말한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SET 명령어 : SQL*Plus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SQL*PLUS SET 명령은 SQL 명령문의 결과를 사용자가 효과적으로 확인할 수 있도록 시스템 환경을 제어하기 위한 명령어이다.
명령문의 유지기간은 세션종료 혹은 환경설정을 변경할 때 까지 이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHOW ALL -- 이 명령어를 통해 현재 환경을 확인할 수 있다.
SET AUTOTRACE ON/OFF -- Optimizer 에서 실행계획과 통계정보를 얻을 수 있다.
SET ARRAYSIZE  5 -- 한번에 5로우씩 패치
SET TIME ON/OFF : SQL*Plus 프롬프트 상에 시각 표시 여부 결정
SET TIMING ON/OFF : SQL 문의 실행 때부터 실행 결과가 응답될 때까지 시간을 파악하여 출력할지의 여부를 지정, 기본적으로  OFF이며 응답시간은 표시되지 않는다.
SET LINESIZE 130 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 SQL (DML)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;대용량 테이블에서의 ORDER BY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ORDER BY 는 데이터를 메모리에 올려놓고 소트를 진행하고 메모리 공간이 부족하면 디스크에 놓고 정렬을 수행한다.
즉, 대용량 데이터에서는 사용을 자제해야한다. 인덱스를 적절히 이용해야하며 오라클 힌트등을 사용한다면 성능상 이점을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from emp order by ename;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만일 위의 emp 테이블에 데이터가 1000만건이 있다고 할 경우 위 쿼리가 실행되는데 10초이상의 시간이 소요될 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE INDEX IDX_EMP_ENAME ON EMP(ENAME DESC);

select /*+ index(emp idx_emp_ename) */
   empno, ename, sal
   from emp
   where ename &amp;gt;= ‘ㄱ’;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 쿼리에서는 EMP 에서 ENAME 에 인덱스를 생성하고 힌트를 주었다. 훨씬 빠르게 된 속도를 확인 할 수 있다.
위에서 보면  where 에 enmae 에 조건을 준다. 이 이유는 인덱스를 활용하기 위해서이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;합성 연산자 (Concatenated Operator)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECRT ename , sal||'('||comm||')' as &quot;pay&quot; 
    FROM emp
    WHERE ename = 'TURNER'
    
SELECT ename , CONCAT(SAL, CONCAT('(', concat(COMM,')')))
    FROM emp
    WHERE ename = 'TURNER'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 쿼리 두 문장은 같은 역할을 한다. ( concatenated Operator == CONCAT 함수 )&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;조건연산자를 이용한 조건검색&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
-- MYEMP1 테이블에서 입사일자가 2013년 10월25일~2014년12월31일 사이의 입사자 수 출력, 먼저
두가지 쿼리를 보자.

SELECT COUNT(*) FROM MYEMP1
WHERE TO_CHAR(HIREDATE,'RR/MM/DD') &amp;gt;= '13/10/26'
AND TO_CHAR(HIREDATE,'RR/MM/DD') &amp;lt;= '14/12/31';
COUNT(*)
----------
1440288
경 과: 00:00:16.60

SELECT COUNT(*) FROM MYEMP1
WHERE HIREDATE &amp;gt;= '13/10/26'
AND HIREDATE &amp;lt; '15/01/01';
COUNT(*)
----------
1440288


경 과: 00:00:17.20

-- 위 두 쿼리의 차이는 WHERE절 HIREDATE칼럼에 SQL함수 TO_CHAR가 적용되었느냐의 여부다. 현
재 MYEMP1의 HIREDATE 칼럼에는 검색을 빠르게 해주는 인덱스가 생성되어 있지 않다. 인덱스라는
것을 만든 후 두 쿼리를 다시 실행하여 실행시간의 차이에 대해 확인하자.

-- 아래 쿼리는 HIREDATE 칼럼에 SQL함수 TO_CHAR가 적용되어 칼럼값에 변형이 생겨 만들어 놓은
인덱스를 이용하지 못한다.

SELECT COUNT(*) FROM MYEMP1
WHERE TO_CHAR(HIREDATE,'RR/MM/DD') &amp;gt;= '13/10/26'
AND TO_CHAR(HIREDATE,'RR/MM/DD') &amp;lt;= '14/12/31';
COUNT(*)

----------
1440288
경 과: 00:00:16.53
Execution Plan
--------------------------------------------------------------------------------------------
Id Operation Name Rows Bytes Cost (%CPU) Time
---------------------------------------------------------------------------------------------
0 SELECT STATEMENT 1 9 25678 00:05:09
1 SORT AGGREGATE 1 9 |
* 2 | TABLE ACCESS FULL MYEMP1 25000 219K 25678 00:05:09
---------------------------------------------------------------------------------------------

-- 아래 쿼리의 실행계획을 보면 인덱스를 경유하여 데이터를 추출한 것을 알 수있다. 두 쿼리중 어떤
쿼리를 사용해야 할지 고민해 보자.
SELECT COUNT(*) FROM MYEMP1
WHERE HIREDATE &amp;gt;= '13/10/26'
AND HIREDATE &amp;lt; '15/01/01';
COUNT(*)
----------
1440288


경 과: 00:00:00.71 -- 1초도 걸리지 않는다.

Execution Plan
------------------------------------------------------------------------------------------
| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time |
------------------------------------------------------------------------------------------
| 0 | SELECT STATEMENT | | 1 | 9 | 123 (1)| 00:00:02 |
| 1 | SORT AGGREGATE | | 1 | 9 | | |
|* 2 | FILTER | | | | | |
|* 3 | INDEX RANGE SCAN| IDX_MYEMP1_HIREDATE | 25000 | 219K| 123 (1)| 00:00:02 |
------------------------------------------------------------------------------------------
-- BETWEEN ~ AND ~는 AND연산으로 변형할 수 있다.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TO_CHAR() 함수를 사용하여 Index 컬럼을 변형시킨다면 Index 사용을 못하게 된다. 이 부분은 주의할 필요가 있겠다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- MYEMP1 테이블의 COMM 칼럼에 인덱스를 만들자.
SQL&amp;gt; CREATE INDEX IDX_MYEMP1_COMM ON MYEMP1(COMM);
-- MYEMP1 테이블에서 COMM이 NULL인 사원의 수를 출력하세요. IS NULL은 인덱스를 사용하지 못
한다. 인덱스 영역에는 NULL값은 보관하지 않는다.
SQL&amp;gt; SELECT COUNT(*) FROM MYEMP1
WHERE COMM IS NULL;

COUNT(*)
----------
8333335
경 과: 00:00:16.63


-- MYEMP1 테이블에서 COMM이 NULL이 아닌 사원의 수를 출력하세요. IS NOT NULL인 경우에는
인덱스를 사용함을 확인하고 실행시간도 위 쿼리와 비교하라.
SQL&amp;gt; SELECT COUNT(*) FROM MYEMP1
WHERE COMM IS NOT NULL;

COUNT(*)
----------
1666667
경 과: 00:00:00.49

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인덱스에서는 NULL 을 보관할 수 없다 그러므로 인덱스가 NULL 인지 비교하는 조건에서는 인덱스를 타지 못한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ANY , ALL, EXISTS&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT ENAME , SAL FROM EMP
    WHERE SAL&amp;gt; ANY(SELECT SAL FROM EMP WHERE DEPTNO = 30)
    ORDER BY SAL;
    
-- ANY 는 어떠한 하나의 값만 만족시키면 되므로 최소급여인 사람을 제외한 ROW를 SELECT 함.    

SELECT ename, sal FROM emp
    WHERE sal &amp;gt; some (SELECT sal FROM emp WHERE deptno = 30)
    ORDER BY SAL;

-- ANY와 SOME 은 동일한 효과를 갖는다.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 11 Feb 2019 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2019/02/11/CLASS1/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2019/02/11/CLASS1/</guid>
        
        
      </item>
    
      <item>
        <title>[C] 포인터</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;C언어 포인터&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;C언어 포인터&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;C언어 포인터&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;C언어 포인터&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;C언어 포인터&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;C언어 포인터&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C5/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;C언어 포인터&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;C언어 포인터&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;C언어 포인터&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/09/23/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 09 - 23 (일)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고 문헌 : C언어의 정석 [남궁성 지음]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;포인터&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1.1 메모리 주소&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메모리  = 컴퓨터에 장착된 램 (RAM) 의미&lt;/p&gt;

&lt;p&gt;메모리는 물리적으로 여러개의 칩으로 구성되어 있지만, 운영체제는 메모리를 하나의 연속된 저장 공간으로 간주한다.
이 메모리는 1바이트 단위로 나누어 저장되며 0부터 시작하여 1씩 증가하는 일련번호가 붙는데 이것이 메모리 주소이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 문장이 수행되면 메모리에 int 타입의 값 (4Byte) 를 위한 저장 공간이 마련되고, 그 저장 공간에 1이 저장된다.
예를 들어 메모리 저장 주소가 0x100 부터 시작하여 0x103 까지 4개 단위의 메모리에 저장될 경우 int의 메모리 공간이 4 byte 이므로 메모리 시작 주소를 알면 저장 범위를 쉽게 알 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.2 포인터 란?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;포인터는 어떤 대상을 가리키는 것으로 메모리에 저장된 것, 예를 들어 변수나 배열을 가리키기 위한 것이다. 가리킨다는 것은 포인터가 어떤 대상의 주소를 저장하고 있다는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;b style=&quot;color: red&quot;&gt;포인터는 메모리 주소를 저장하기 위한 변수이다. &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;선언하는 방법, 값을 저장하고 읽어오는 방법 모두 변수와 같다. 포인터는 단지 그 메모리의 주소를 저장하기 위한 것일 뿐.&lt;/p&gt;

&lt;p&gt;변수와 마찬가지로 const 키워드를 붙여서 상수로 만들 수 있으며 이를 &lt;b&gt;포인터 상수&lt;/b&gt; 라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.3 포인터의 선언&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;포인터의 선언방법은 변수의 선언방법과 동일하다. 다만 포인터가 가리키는 대상의 타입에 &lt;b&gt;‘*’&lt;/b&gt; 을 붙인다.&lt;/p&gt;

&lt;p&gt;예를 들어 int 타입의 변수를 가리키기 위한 포인터는 아래와 같이 선언한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1) 위의 경우 ptr 의 타입이 ‘int’가 아니라는 것에 주의해야된다. ptr이 가리키는 대상의 타입이 ‘int’이고 ptr의 타입은 ‘int*’ 이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//포인터 선언시 주의점&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//포인터는 타입 옆에 붙이도록 하자&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//변수 이름 옆에 * 기호를 붙이면 의도한 바와 다른 결과를 가질 수 있다. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1.4 포인터에 주소 저장하기 -&amp;amp; 연산자&lt;/p&gt;

&lt;p&gt;포인터에 주소를 저장하려면 먼저 &lt;b&gt;포인터가 가리킬 대상의 주소를 얻어야 한다.&lt;/b&gt; 그 일을 하는 것이 ‘&amp;amp;’ 연산자이다.
‘&amp;amp;’ 연산자는 피연산자의 주소를 반환하며, 피연산자로 변수나 배열요소처럼 저장공간을 가지고 있는 것만 허용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 변수 i의 주소를 포인터 ptr에 저장&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;변수 i에 저장된 값을 출력 : i = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;변수 i의 주소를 출력 : &amp;amp;i=%p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;포인터 p에 저장된 값(주소) 출력 : p = %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;포인터 p의 주소를 출력 :  &amp;amp;p = %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 결과

변수 i에 저장된 값을 출력 : i = 5
변수 i의 주소를 출력 : &amp;amp;i=0061FF2C
포인터 p에 저장된 값(주소) 출력 : p = 0061FF2C
포인터 p의 주소를 출력 :  &amp;amp;p = 0061FF28
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1.5 포인터로 값 읽어 오기&lt;/p&gt;

&lt;p&gt;포인터가 가리키는 대상에 저장된 값을 가져올 때는 ‘&lt;em&gt;’ 연산자를 사용한다.
‘&lt;/em&gt;’ 연산자는 간접 참조 연산자라고 하는데 ‘*피연산자’의 형태로 사용되는 단항 연산자로 포인터가 가리키는 주소에 저장된 값을 읽어서 반환&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 위의 메인문에서 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;포인터 값 불러오기 : %d :&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//결과 : 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 23 Sep 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/09/23/C4/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/09/23/C4/</guid>
        
        
      </item>
    
      <item>
        <title>[C] C언어 배열</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;C언어 배열&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;C언어 배열&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;C언어 배열&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/07/17/C4/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;C언어 배열&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;C언어 배열&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;C언어 배열&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/07/17/C4/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;C언어 배열&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;C언어 배열&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;C언어 배열&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/07/17/C4/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 17 (화)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고 문헌 : C언어의 정석 [남궁성 지음]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;배열&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;우선 배열이란 같은 타입의 변수 여러개를 하나의 묶음으로 다루는 것이다.&lt;/p&gt;

&lt;p&gt;대부분의 내용이 자바나 다른 언어들과 비슷한 맥락이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 길이 계산&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt; //&amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//배열의 길이 계산
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sizeof(arr)= %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sizeof(arr[0)=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LEN = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//출력결과
//sizeof(arr)= 40
//sizeof(arr[0)=4
//LEN = 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 초기화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;변수처럼 배열도 선언된 직후에 쓰레기 값이 저장되어 있으므로 적절한 값으로 초기화할 필요가 있다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//배열을 선언
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//배열 초기화
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//배열의 선언과 초기화 동시에 
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다음 두문장은 동일하다.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 배열의 길이를 생략할 수도 있다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 배열의 선언 및 초기화는 자바와 동일하다. 특이점은 int score[2] = {0} 과 같이 배열 요소를 한번에 초기화 하는 것은 조금 특이하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 복사와 비교&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;
int arr1[5];
int arr2[5];


for(i=0;i&amp;lt;5;i++){
   
    arr2[i] = arr1[i];  // 배열 arr1 의 모든 요소를 arr2 에 복사
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;보통 위와 같은 방법으로 복사를 하게 된다. 또는 memcpy(arr2, arr1, sizeof(arr1)); 방식으로 복사하기도 한다.
이방법은 arr1배열에서 arr2 로 메모리를 통째로 복사하기 때문에 성능이 더 뛰어나다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memcmp는 메모리를 통째로 비교한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 두 배열이 같을경우 0 이 저장된다
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;문자열 저장하기&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 17 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/17/C4/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/17/C4/</guid>
        
        
      </item>
    
      <item>
        <title>[C] C언어 연산자</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;C언어 연산자&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;C언어 연산자&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;C언어 연산자&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/07/05/C3/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;C언어 연산자&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;C언어 연산자&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;C언어 연산자&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/07/05/C3/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;C언어 연산자&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;C언어 연산자&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;C언어 연산자&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/07/05/C3/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 05 (목)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고 문헌 : C언어의 정석 [남궁성 지음]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;C 언어 일반 산술 변환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int i = 10;
float f = 20.0f

float result = f + (float) i; // 형변환으로 두 피연산자의 타입을 일치
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;일반 산술 변환 규칙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1 . 두 피연산자의 타입을 같게 일치시킨다. ( 보다 큰 타입으로 일치 )&lt;/p&gt;

&lt;p&gt;2 . 피연산자의 타입이 int 보다 작은 타입이면 int로 변환된다.&lt;/p&gt;

&lt;p&gt;ex) char + short -&amp;gt; int + int - &amp;gt; int&lt;/p&gt;

&lt;p&gt;ex) unsigned short + int -&amp;gt; int + int -&amp;gt; int&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단항 연산자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sizeof 연산자&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;피연산자의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'타입의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;크기'를&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;단위의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;정수로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;반환한다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; sizeof(피연산자)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//4 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;문자열의 비교&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;strcmp함수&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt; //&amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(void)


{
	char str[] = &quot;abc&quot;;

	printf(&quot;\&quot;abc\&quot;==\&quot;abc\&quot; ? %d\n&quot; , &quot;abc&quot;==&quot;abc&quot;);

	printf(&quot;strcmp(str, \&quot;abc\&quot;) ? %d\n&quot; , strcmp(str, &quot;abc&quot;));

	return 0;

}
// 출력 결과
//&quot;abc&quot;==&quot;abc&quot; ? 1
//strcmp(str, &quot;abc&quot;) ? 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;“abc” == “abc” -&amp;gt; 1 (참)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;strcmp(“abc”, str) -&amp;gt; 0 (참)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;조건 연산자&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//x 가 y 보다 클 경우 result = x , 아닐 경우 result = y
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 위 조건식과 동일한 결과를 낳는다
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;콤마 연산자&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt; //&amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i=%d , j=%d, result = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;i = $d, j = $d, result = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//결과
//i=4 , j=1, result = 3
//i = $d, j = $d, result = 4
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 05 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/05/C3/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/05/C3/</guid>
        
        
      </item>
    
      <item>
        <title>[C] C언어 변수</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;C언어 변수&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;C언어 변수&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;C언어 변수&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/07/04/C2/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;C언어 변수&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;C언어 변수&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;C언어 변수&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/07/04/C2/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;C언어 변수&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;C언어 변수&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;C언어 변수&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/07/04/C2/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 04 (수)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;참고 문헌 : C언어의 정석 [남궁성 지음]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;C 언어 변수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;변수란 자바와 마찬가지로 단 하나의 값을 저장할 수 있는 메모리 공간이라고 한다.&lt;/p&gt;

&lt;p&gt;하나의 변수에는 단하나의 값만 저장할 수 있으므로, 새로운 값을 저장하면 기존의 값은 사라진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;변수의 선언과 초기화&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;변수 타입 변수 이름;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;변수를 선언하면 메모리의 빈공간에 &lt;b style=&quot;color:red&quot;&gt;변수타입&lt;/b&gt;에 알맞은 크기의 저장공간이 확보된다.&lt;/p&gt;

&lt;p&gt;자바는 가비지컬렉터에 의해서 메모리관리가 되지만 c언어의 경우 초기화를 하지 않는 경우 garbage value 가 남게 된다. 효율적인 메모리 관리를 위해 계속 덮어서 사용하는 방법을 활용하면 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;변수의 값 교환&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바와 마찬가지의 방법&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int a = 10;
int b = 20;
int tmp;

tmp = a;
a = b;
b = tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본 자료형&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기본 자료형은 크게 문자와 숫자로 나뉘며 또한 숫자는 실수형과 정수형으로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자형 : char [문자를 저장하는데 사용되며 변수당 하나의 문자만 저장]&lt;/li&gt;
  &lt;li&gt;정수형 : short, int, long, long long [정수를 저장하는데 사용되며, 주로 int가 사용된다.]&lt;/li&gt;
  &lt;li&gt;실수형 : float, double, long double [실수를 저장하는데 사용되며, 주로 double이 사용된다.]&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;문자형 : char&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;정수형 : short, int, long, long long&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;char : 1byte   -&amp;gt; 8bit&lt;/li&gt;
  &lt;li&gt;short : 2 byte&lt;/li&gt;
  &lt;li&gt;int : 4 byte&lt;/li&gt;
  &lt;li&gt;long : 4 byte&lt;/li&gt;
  &lt;li&gt;long long : 8 byte&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n비트로 표현할 수 있는 정수의 개수 : 2의 n승 개
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;float : 정밀도[7자리] 4byte&lt;/li&gt;
  &lt;li&gt;double : 정밀도[15자리] 8byte&lt;/li&gt;
  &lt;li&gt;long double : 정밀도[15자리] 8byte&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;int score = 100;
print(sizeof(int));
//sizeof(타입) : 타입의 크기를 byte단위 정수로 반환
//sizeof 변수 : 변수의 크기를 byte 단위 정수로 반환
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;상수와 리터럴&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바에서는 상수를 선언할 때 final 키워드를 붙인다 C언어에서는 const 를 붙여준다.
&lt;b style=&quot;color:red&quot;&gt;주의점&lt;/b&gt; : 상수는 선언과 함께 초기화를 해주어야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;const int MAX_SPEED = 10;
// 변수 : MAX_SPEED
// 상수 : MAX_SPEED
// 리터럴 : 10
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;#define을 이용한 상수정의&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#define WIDTH 20 // WIDTH를 20으로 정의
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;#include 와 #define 은 ‘#’ 로 시작한다 이부분은 전처리기 지시자라고 한다. 세미콜론을 붙이지 않는다.&lt;/li&gt;
  &lt;li&gt;전처리는 컴파일 전에 프로그램 코드에 가하는 작업이며 이 프로그램을 &lt;b style=&quot;color:red&quot;&gt;전처리기&lt;/b&gt;라고 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;파생형 ( 유도 자료형 )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기본형 외에도 파생형이 있다, 파생형은 기본형으로부터 파생된 것으로 보다 복잡한 형태를 가진다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열 : 같은 타입의 여러 변수를 하나로 묶은 타입&lt;/li&gt;
  &lt;li&gt;구조체 : 다른 타입의 여러 변수를 하나로 묶은 탕비&lt;/li&gt;
  &lt;li&gt;공용체(union) : 다른 타입의 여러 변수가 하나의 저장공간을 공유하는 타입&lt;/li&gt;
  &lt;li&gt;포인터 : 메모리 주소를 저장하기 위한 타입&lt;/li&gt;
  &lt;li&gt;함수 : 함수를 선언하기 위한 타입&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 04 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/04/C2/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/04/C2/</guid>
        
        
      </item>
    
      <item>
        <title>[C] C언어 개발환경 설정</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/07/03/C/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/07/03/C/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;C언어 개발환경 설정&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/07/03/C/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 03 (화)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;C 언어 Eclipse 설치&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;참고 : http://kanaris-tt.tistory.com/5&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;참고 문헌 : C언어의 정석 [남궁성 지음]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello world 프린트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#include &amp;lt;stdio.h&amp;gt;
// stdio.h 를 인클루드하는 부분 여기에 printf 뿐만아니라 여러 함수를 포함한다.

int main(void)

{
	printf(&quot;Hello, world.&quot;);

	return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이클립스를 설치하고 첫번째 관문인 hello world 를 찍어보았다. 첫 단추를 잘 꿰어낸 느낌이 든다.&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/03/C/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/03/C/</guid>
        
        
      </item>
    
      <item>
        <title>[ORACLE] 인덱스</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클 인덱스&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클 인덱스&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클 인덱스&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클 인덱스&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클 인덱스&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클 인덱스&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클 인덱스&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클 인덱스&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클 인덱스&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 02 (월)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;출처 : http://wiki.gurubee.net/pages/viewpage.action?pageId=688159&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/02/ORACLE3/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/02/ORACLE3/</guid>
        
        
      </item>
    
      <item>
        <title>[ORACLE] Tutorial</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클 튜토리얼&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 07 - 02 (월)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 ROWNUM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROWNUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--상위 3개의 레코드만 가져온다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Germany'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 is null / is not null&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- address 가 Null 값인.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Persons&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;-- Address 가 Null 값이 아닌.. &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Persons&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 LIKE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'%or%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;-- City 명이 b or s or p 로 시작하는&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[bsp]%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- City 명이 a~c 로 시작하는&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[a-c]%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- City 명이 b or s or p 로 시작하지 않는&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[!bsp]%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;City&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[bsp]%'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 In&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;-- Country 가 Germany, France, UK 인..&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customers&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Germany'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'France'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'UK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/07/02/ORACLE2/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/07/02/ORACLE2/</guid>
        
        
      </item>
    
      <item>
        <title>[MongoDB] mongoDB Query</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;MongoDB&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;MongoDB&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;MongoDB&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;MongoDB&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;MongoDB&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;MongoDB&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;MongoDB&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;MongoDB&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;MongoDB&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 06 - 22 (금)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;MongoDB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MongoDB Documentation 참조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Insert a Single Document (inventory db에 단일 row insert )&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;cotton&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;cm&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;insert multiple document&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;journal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;blank&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;cm&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;mat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;gray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;cm&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;mousepad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;gel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;cm&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;select (단일조건)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;canvas&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;D&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--위 두 쿼리는 rdb 와 mongodb(nosql) 의 쿼리비교이다. (동일한 결과 값)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--$lt 는 &amp;lt; 을 뜻한다. $qte 이상을 뜻함 &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- like 처럼 사용하기&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;p%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;update&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updateOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;paper&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;size.uom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;cm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;P&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updateMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;qty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;size.uom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;P&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replaceOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;paper&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;paper&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warehouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warehouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;A&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleteOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;D&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-aggregate&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$limit&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- sql limit 와 같다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;$sort&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--오름차순 정렬 (-1 은 내림차순)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;$skip&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--처음부터 5개 스킵&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;$match&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;dave&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;--저자가 dave 인애들&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;$count&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;passing_scores&quot;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- passing_scores 80점보다 높은 스코어 갯수&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Jun 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/06/22/MongoDB3/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/06/22/MongoDB3/</guid>
        
        
      </item>
    
      <item>
        <title>[ORACLE] 표준 조인</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;오라클 표준조인&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;오라클 표준조인&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;오라클 표준조인&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;오라클 표준조인&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;오라클 표준조인&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;오라클 표준조인&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;오라클 표준조인&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;오라클 표준조인&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;오라클 표준조인&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/06/21/ORACLE/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 06 - 21 (목)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;오라클 표준조인&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;INNER JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INNER JOIN은 OUTER JOIN 과 대비하여 내부 JOIN 이라고 하며 JOIN 조건에서 동일한 값이 있는 행만 반환한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT EMP.DEPTNO, EMPNO, ENAME, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

--아래 INNER JOIN 한 결과가 위와 같은 결과가 나온다.

SELECT EMP.DEPTNO, EMPNO, ENAME, DNAME
FROM EMP INNER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;NATURAL JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NATURAL JOIN은 두 테이블 간의 동일한 이름을 갖는 모든 컬럼들에 대해 EQ JOIN을 수행한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT DEPTNO, EMPNO, ENAME, DNAME
    FROM EMP NATURAL JOIN DEPT;

-- 위와 같은 쿼리는 신기하게도 두개 테이블에서 공통적으로 있는 DEPTNO을 자동 인식하여 JOIN 한다. 

EMP.DEPTNO, EMPNO, ENAME, DNAME
    FROM EMP NATURAL JOIN DEPT;

--NATURAL JOIN에 사용된 열은 식별자를 가질 수 없음. 즉 위의 쿼리는 오류이다.

SELECT * 
    FROM EMP NATURAL JOIN DEPT;
-- 공통된 컬럼이 DEPTNO 이므로 DEPTNO 가 첫번째 칼럼이 된다.

-- 별개로 이너조인과 비교하자면 
SELECT * 
FROM EMP INNER JOIN DEPT
ON EMP.DEPTNO = DEPT.DEPTNO;

--위의 쿼리를 실행하면 상위 쿼리와달리 DEPT_NO 를 공통으로 인식하지 않고 별개의 컬럼으로 인식하여 출력한다.

--

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;USING 조건절&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;USING 조건절&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT *
FROM DEPT JOIN DEPT_TEMP
USING (DEPTNO);
--아래와 같은 값을 갖는다.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/USING.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * 
FROM DEPT JOIN DEPT_TEMP
USING (DNAME);
--아래와 같은값을 갖는다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/USING2.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ON 조건절&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ON 조건절은 WHERE 절의 JOIN 조건과 같은 기능을 하면서도 명시적으로 JOIN의 조건을 구분할 수 있다. 또한 ALIAS 를 사용가능하다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E JOIN DEPT D
ON (E.DEPTNO = D.DEPTNO);

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;OUTER JOIN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JOIN 조건에서 동일한 값이 없는행도 반환 할 때 사용할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;LEFT OUTER JOIN : 조인 수행시 먼저 표기된 좌측 테이블에 해당하는 데이터를 먼저 읽은 후 , 나중 ㅍ기된 우측 테이블에서 JOIN 대상 데이터를 읽어온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RIGHT OUTER JOIN : 위의 반대이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;FULL OUTER JOIN : FULL OUTER JOIN 은 양쪽 모두 출력하는 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/OUTERJOIN.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 출력 결과는 EMP 테이블을 SELECT한것으로 DEPTNO는 10~30 까지 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/OUTERJOIN2.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 위 이미지는 아우터조인을 한것으로 DEPT 테이블에는 DEPTNO 가 40까지 존재하기 때문에 우측에 있는 DEPT 테이블을 먼저 읽고 좌측에 EMP테이블을 붙인다. 만약 DEPTNO 에 해당하는 값이 없을경우 NULL 을 기입한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT E.ENAME, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E RIGHT OUTER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;집합 연산자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여러개의 질의의 결과를 연결하여 하나로 결합하는 방식&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;UNION : 여러개의 SQL 문의 결과에 대한 합집합으로 결과에서 모든 중복된 행은 하나의 행으로 만든다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UNION ALL : 중복된 행도 그대로 결과로 표시한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;INTERSECT : 여러개의 SQL 결과물에대한 교집합이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EXCEPT : 여러개의 SQL 결과물에대한 차집합이다. 중복된 행은 하나의 행으로 만든다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;계층형 질의&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테이블에 계층형 데이터가 존재하는 경우 데이터를 조회하기 위해서 계층형 질의를 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT ...
FROM 테이블 명
WHERE CONDITION AND CONDITION...
START WITH CONDITION
CONNECT BY [NOCYCLE] CONDITION AND CONDITION ...
[ORDER SIBLINGS BY COLUMN, COLUMN, ...]


SELECT CONNECT_BY_ROOT 사원 루트사원, SYS_CONNECT_BY_PATH(사원, '/') 경로, 사원, 관리자
FROM 사원
START WITH 관리자 IS NULL
CONNECT BY PRIOR 사원 = 관리자;

--위와 같은 형태로 사용한다
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;START WITH 절은 계층 구조 전개의 시작 위치를 지정하는 구문으로 루트 데이터를 지정한다.&lt;/li&gt;
  &lt;li&gt;CONNECT BY 절은 다음에 전개될 자식 데이터를 지정하는 구문이다.&lt;/li&gt;
  &lt;li&gt;PRIOR : CONNECT BY 절에서 사용되며, 현재 읽은 칼럼을 지정한다.&lt;/li&gt;
  &lt;li&gt;NOCYCLE : 데이터를 전개하면서 이미 나타났던 동일한 데이터가 전개 중에 다시 나타난다면 이것을 가리켜 사이클이 형성되었다고 말한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CONNECT_BY_ROOT (루트노드 찾기)&lt;/p&gt;

&lt;p&gt;CONNECT_BY_ROOT 컬럼&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단독으로 사용되지 못하고 일반컬럼과 같이 사용해야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CONNECT_BY_ISCYCLE (중복 참조값 찾기)&lt;/p&gt;

&lt;p&gt;CONNECT_BY_ISCYCLE은 반드시 CONNECT BY절에 NOCYCLE이 명시되어 있어야 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;CONNECT_BY_ISLEAF (리프노드 찾기)&lt;/p&gt;

&lt;p&gt;계층형 쿼리에서 해당 로우가 리프노드인지(지삭노드가 없는 노드인지) 여부를 체크하여, 리프노드에 해당할경우 1을 그렇지 않을 경우 0을 반환&lt;/p&gt;

&lt;p&gt;SYS_CONNECT_BY_PATH (루트 찾아가기)&lt;/p&gt;

&lt;p&gt;SYS_CONNECT_BY_PATH ( column, char )&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;서브 쿼리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT column1, column2 , column3
FROM TABLE
WHERE column1 = (SELECT column1
                 FROM TABLE
                 WHERE column1 = 'xxx')
ORDER BY column1;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;그룹 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;ROLLUP 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;부분합 느낌으로 출력한다.&lt;/p&gt;

&lt;p&gt;아래는 일반적인 GROUP BY 문이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT DNAME, JOB,
       COUNT(*) &quot;Total Empl&quot;,
       SUM(SAL) &quot;Total Sal&quot;
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY DNAME, JOB
ORDER BY DNAME, JOB;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/GROUPBY.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래는 ROLLUP 을 통한 그루핑이다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT DNAME, JOB,
       COUNT(*) &quot;Total Empl&quot;,
       SUM(SAL) &quot;Total Sal&quot;
FROM EMP, DEPT
WHERE DEPT.DEPTNO = EMP.DEPTNO
GROUP BY ROLLUP  (DNAME, JOB);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/ROLLUP.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CUBE 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ROLLUP 에서는 단순히 SubTotal 만을 생성하였지만 , CUBE 는 결합 가능한 모든 값에 대하여 다차원 집계를 생성한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT 
 CASE GROUPING(DNAME) WHEN 1 THEN 'ALL Departments' ELSE DNAME END AS DNAME,
 CASE GROUPING(JOB)   WHEN 1 THEN 'All Jobs'        ELSE JOB   END AS JOB,
 COUNT(*)   &quot;Total Empl&quot;,
 SUM(SAL)   &quot;Total Sal&quot;
 FROM EMP, DEPT
 WHERE DEPT.DEPTNO = EMP.DEPTNO
 GROUP BY CUBE (DNAME, JOB);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/cube.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;윈도우 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;RANK 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반적인 RANK 함수는 만약 1등이 2명인 경우 2등이 없어진다. 이러한 상황에서 2등을 주고싶을 때는 DENSE_RANK 를 사용한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT JOB, ENAME, SAL,
    RANK() OVER(ORDER BY SAL DESC) ALL_RANK,
    RANK() OVER(PARTITION BY JOB ORDER BY SAL DESC) JOB_RANK
FROM EMP;

--DENSE_RANK 와 RANK 비교

SELECT JOB, ENAME, SAL,
       RANK()       OVER (ORDER BY SAL DESC) RANK,
       DENSE_RANK() OVER (ORDER BY SAL DESC) DENSE_RANK
FROM EMP;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;SUM 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SUM 함수를 이용하여 파티션별 윈도우의 합을 구할 수 있다.&lt;/p&gt;

&lt;p&gt;ex) 사원들의 급여와 같은 매니저를 두고 있는 사원들의 SALARY 합을 구한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT MGR, ENAME, SAL, SUM(SAL) OVER (PARTITION BY MGR) MGR_SUM
FROM EMP;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;아래와 같이 출력된다. ( partition by 컬럼명 으로 해당 컬럼을 기준으로 sum을 한다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/PARTITIONSUM.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MAX , MIN ,AVG (최대, 최소, 평균)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv_max_sal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iv_max_sal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 쿼리는 MGR 컬럼을 기준으로 SALARY 가 가장 높은 값을 가진 열만 반환한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;
SELECT DEPTNO, ENAME, SAL,
       FIRST_VALUE(ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC
       ROWS UNBOUNDED PRECEDING) AS DEPT_RICH
FROM   EMP;

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;COUNT&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT ENAME, SAL,
       COUNT(*) OVER (ORDER BY SAL
       RANGE BETWEEN 50 PRECEDING AND 150 FOLLOWING) AS SIM_CNT
FROM EMP;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/COUNTWINDOW.JPG&quot; alt=&quot;Post Sample Image&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 21 Jun 2018 12:55:00 +0000</pubDate>
        <link>http://shj7242.github.io/2018/06/21/ORACLE/</link>
        <guid isPermaLink="true">http://shj7242.github.io/2018/06/21/ORACLE/</guid>
        
        
      </item>
    
      <item>
        <title>[JavaScript] JavaScript 내장함수</title>
        <description>&lt;head&gt;
 &lt;meta property=&quot;og:type&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
 &lt;meta property=&quot;og:title&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
 &lt;meta property=&quot;og:description&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
 &lt;meta property=&quot;og:url&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;

 &lt;meta name=&quot;twitter:card&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
  &lt;meta name=&quot;twitter:title&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
  &lt;meta name=&quot;twitter:description&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
  &lt;meta name=&quot;FACEBOOK:domain&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;
  &lt;meta name=&quot;facebook:card&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
   &lt;meta name=&quot;facebook:title&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
   &lt;meta name=&quot;facebook:description&quot; content=&quot;JavaScript 내장함수&quot; /&gt;
   &lt;meta name=&quot;facebook:domain&quot; content=&quot;http://shj7242.github.io/2018/06/18/ETC/&quot; /&gt;


 &lt;/head&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 style=&quot;font-weight:bold; color:black;&quot;&gt; &lt;/h4&gt;

&lt;h4 style=&quot;font-weight:bold; color : black&quot;&gt;2018 - 06 - 19 (화)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript String 메서드&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;heejun&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//anchor() : a 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//big() : big 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// blink() : blink 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bold() : bold 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fixed() : tt태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontcolor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colorString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fontcolor(colorString) : font 태그로 문자열을 감싸고 color 속성을 주어 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// fontsize(fontSize) : font 태그로 문자열을 감싸고 size 속성을 주어 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;italics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// italics() : i 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;linkRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// link(linkRef) : a 태그에 href 속성을 지정해 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// small() : small 태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// strike() : strike 태그로 문자열을 감싸 리턴한다. &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sub() : sub태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sup() : sup태그로 문자열을 감싸 리턴한다.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//-----------메서드 체이닝------------//&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//string 메서드의 메서드 체이닝&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//이와 같이 여러개의 메서드를 동시에 사용하기도 한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript Array 메서드&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// concat() : 매개변수로 입력한 배열의 요소를 모두 합쳐 배열을 만들어 리턴한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 52,56,57,90 반환 &lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// concat() : 매개변수로 입력한 배열의 요소를 모두 문자열로 만들어 리턴한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 52,56,57,90 반환 &lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pop() : 배열의 마지막요소만 남기고 리턴한다.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 90 출력&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;output4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// push() : 배열의 마지막 부분에 새로운 요소를 추가한다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot