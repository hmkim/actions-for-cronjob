<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dongho Sim's dev story</title>
    <description>Dongho Sim's dev story,use Jekyll and github pages.</description>
    <link>https://dhsim86.github.io/</link>
    <atom:link href="https://dhsim86.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Apr 2019 15:41:02 +0000</pubDate>
    <lastBuildDate>Mon, 29 Apr 2019 15:41:02 +0000</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>도메인 주도 설계 06 - 도메인 객체의 생명주기</title>
        <description>&lt;p&gt;모든 객체에는 생명주기가 있다. 한 객체는 생성되어 다양한 상태를 거친 후 결국 저장되거나 삭제되면서 소멸한다. 다른 객체와 복잡한 상호의존성을 맺으며, 여러 가지 상태의 변화를 겪기도 하는데 이 때 갖가지 불변식이 적용된다. 이러한 객체들을 관리하는데 실패한다면 Model-Driven Design을 시도하는 것이 쉽게 좌절될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도메인 객체의 관리와 관련되 문제는 아래의 두 가지 범주로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생명주기 동안의 무결성 유지하기&lt;/li&gt;
  &lt;li&gt;생명주기 관리의 복잡성으로 모델이 난해해지는 것을 방지하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 문제를 해결하는데 도메인 주도 설계에서는 세 가지 패턴을 통해 해결한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aggregate: &lt;strong&gt;소유권과 경계를 명확히 정의하여 모델을 엄격하게 만들어&lt;/strong&gt; 객체 간의 연관관계가 혼란스럽게 얽히는 것을 방지하고, 도메인 객체의 &lt;strong&gt;무결성&lt;/strong&gt;을 유지한다.&lt;/li&gt;
  &lt;li&gt;Factory: 복잡한 객체와 Aggregate를 생성 및 재구성함으로써 그것들의 &lt;strong&gt;내부 구조를 캡슐화&lt;/strong&gt;한다.&lt;/li&gt;
  &lt;li&gt;Repository: &lt;strong&gt;영속성과 관련된 인프라스트럭처를 캡슐화하면서 영속 객체를 찾아 조회하는 수단&lt;/strong&gt;을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repository와 Factory가 도메인에서 나오는 것은 아니지만, 그것들은 도메인 설계에서 중요한 역할을 담당한다. Aggregate를 모델링하고 Repository와 Factory를 통해 모델 객체의 생명주기 동안 그것들 체계적이고 의미 있는 단위로 조작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aggregate는 생명주기의 전 단계에서 불변식이 유지해야할 범위를 표시하는 것이며, Repository와 Factory는 Aggregate를 대상으로 연산을 수행하며 특정 생명주기로 이동하는 과정에 따른 복잡성을 캡슐화한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aggregate-집합체&quot;&gt;Aggregate (집합체)&lt;/h2&gt;

&lt;p&gt;연관관계를 최소주의 관점에서 설계하면 탐색이 단순해지고 증가하는 관계를 제한하는데 어느정도 도움이 되긴 하지만, 대부분의 업무 도메인은 상호 연관의 정도가 높으므로 객체 참조를 통해 얽히고 설킨 객체 관계망을 추적해야 한다. 그런데 이런 과도한 관계망은 소프트웨어 설계에서는 문제가 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;일반적인 객체 모델의 관계망은 잠재적인 변경의 효과가 미칠 범위를 명확히 한정해주지 않는다.&lt;/strong&gt; 특히 동일한 객체에 여러 클라이언트가 동시에 접근하는 시스템에서는 문제가 심각해질 수 있다. &lt;strong&gt;변경의 범위를 알맞게 제한하지 않는다면 심각한 결과가 초래될 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모델 내에서 복잡한 연관관계를 맺는 객체를 대상으로 변경의 일관성을 보장하기란 쉽지 않다. &lt;strong&gt;개별 객체뿐만 아니라 그 객체가 참조하는, 서로 밀접한 관계에 있는 객체 집합에도 불변식이 적용되어야 하기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 문제의 균형잡힌 해법을 찾기 위해서는 도메인을 심층적으로 이해해야 하며, 특히 특정 클래스의 인스턴스 사이의 변화 빈도와 같은 사항까지도 이해하고 있어야 한다. &lt;strong&gt;경합이 높은 지점을 느슨하게 연결하고, 엄격한 불변식을 더욱 엄격하게 지켜지케 하는 모델을 찾을 필요가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;문제의 근원은 &lt;strong&gt;모델에 경계가 정의되어 있지 않다는 점이다.&lt;/strong&gt; 모델을 근간으로 하는 해법을 이용하면 모델을 좀 더 이해하기 쉬워지고 설계한 바가 더 쉽게 전달될 것이다.&lt;/p&gt;

&lt;p&gt;다음과 같은 엄격한 체계는 그와 같은 개념에서 정수를 뽑아낸 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모델 내의 참조에 대한 캡슐화를 추상화할 필요가 있다.&lt;/strong&gt; &lt;strong&gt;Aggregate는 데이터 변경의 “단위”로 다루는 연관 객체의 묶음을 말하는데, 각 Aggregate에는 루트(root)와 경계(boundary)가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;경계: Aggregate에 무엇이 포함되고 포함되지 않는지를 정의한다.&lt;/li&gt;
  &lt;li&gt;루트: Aggregate 내에 단 하나만 존재하며 특정 Entity를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;경계 안의 객체들은 서로 참조할 수 있지만, &lt;strong&gt;경계 바깥의 객체는 해당 Aggregate의 구성요소 가운데 루트만 참조할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;루트 이외의 Aggregate 내부의 Entity는 지역 식별성을 가지며, Aggregate 내에서만 구분된다. Aggregate 경계 밖에서는 루트 Entity 말고는 내부를 직접 들여다 볼 수 없도록 하기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 Car는 외부에서 식별할 수 있는 루트 Entity이며, Aggregate 내부의 Wheel, Tire는 외부에서 바로 접근할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;불변식은 데이터가 변경될 때마다 유지되어야 하는 일관성 규칙을 뜻하며, Aggregate를 구성하는 각 구성요소 간의 관계도 포함한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이런 특징을 가지는 Aggregate에 대한 트랜잭션에 적용되는 규칙은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;루트 Entity는 전역 식별성을 가지며, 불변식을 검사할 책임이 있다.&lt;/li&gt;
  &lt;li&gt;Aggregate 경계 안의 Entity들은 지역 식별성을 지니며, Aggregate 내부에서만 유일하다.&lt;/li&gt;
  &lt;li&gt;Aggregate 경계 밖에서는 루트 Entity를 제외하고는 내부의 구성요소에 대해 직접 참조할 수 없다.
    &lt;ul&gt;
      &lt;li&gt;루트 Entity가 내부 Entity에 대한 참조를 바깥에 전달해 줄 수는 있지만 그러한 객체는 바깥에서 일시적으로만 사용해야 되고 계속 보유하면 안된다.&lt;/li&gt;
      &lt;li&gt;방어적 복사를 통해 다른 객체에 전달하도록 하며 외부에 의해 불변식이 깨지지 않도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;데이터베이스에 질의를 하면 Aggregate의 루트만 직접적으로 획득하도록 구현한다.
    &lt;ul&gt;
      &lt;li&gt;Aggregate 내부의 다른 객체들은 모두 Aggregate의 루트를 통해서 탐색해서 발견해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Aggregate 안의 객체는 다른 Aggregate의 루트만 참조 가능하다.&lt;/li&gt;
  &lt;li&gt;삭제 연산은 Aggregate 경계 안의 모든 요소를 한 번에 제거해야 불변식을 지킬 수 있다.&lt;/li&gt;
  &lt;li&gt;Aggregate 경계 안의 어떤 객체를 변경하더라도 전체 Aggregate의 불변식은 지켜져야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;객체 간의 복잡한 연관관계로 인해 발생하는 문제점을 해소하고, 지켜져야 하는 불변식의 경계를 명확히 하기 위해서는&lt;/strong&gt; Entity와 Value Object를 한 Aggregate로 모으고 각각에 대해 경계를 정의하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;factory-팩터리&quot;&gt;Factory (팩터리)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;어떤 객체나 Aggregate를 생성하는 일이 복잡하거나 외부로 내부 구조를 많이 드러내는 경우 Factory가 이를 캡슐화해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체의 장점 중 상당 부분은 객체의 내부구조와 연관관계를 정교하게 구성하는 데서 나온다. 객체는 그것의 존재 이유와 관련이 없거나 다른 객체와 상호작용함에 있어서 필요없는 것이 남지 않을 때까지 정제해야 한다. 이러한 객체의 책임 중에는 객체 전체 생명 주기의 중간 단계에서 수행하는 것들이 많다. 문제는 이러한 책임만으로도 복잡한 객체에 객체 자체를 생성하는 책임까지 맡기는 데 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;복잡한 객체를 조립하거나 생성하는 일은 생성 후 해당 객체가 하는 일이나 책임과 가장 관련성이 적은 일이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체 생성하는 책임을 클라이언트 객체로 옮긴다면 문제가 훨씬 더 나빠진다. 클라이언트가 객체 생성 책임을 가진다는 것은 &lt;strong&gt;클라이언트가 도메인 객체의 내부 구조를 어느 정도 알고 있어야 한다는 것이다.&lt;/strong&gt; 도메인 객체의 각 구성요소에 대해 적용되는 모든 불변식을 지키기 위해 &lt;strong&gt;클라이언트는 해당 객체의 규칙을 알아야 한다.&lt;/strong&gt; 이렇게 되면 객체의 클래스와 클라이언트가 결합되어, 객체 구현을 변경시, 클라이언트도 변경해야 한다.&lt;/p&gt;

&lt;p&gt;어떤 객체를 생성하는 것이 그 자체로도 주요한 연산이 될 수 있지만 &lt;strong&gt;복잡한 생성 / 조립 연산은 생성된 객체 자체의 책임으로는 어울리지 않는다. 그렇다고 이 책임을 클라이언트에 두면 이해하기 힘든 설계, 구현이 나올 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;복잡한 객체를 생성하는 일은 도메인 계층의 책임이지만, 그것이 모델을 표현하는 객체에 속하는 것은 아니다. 일반적으로 객체 생성하는 것은 도메인에서는 의미가 없긴 하지만, 구현 측면에서는 반드시 필요하다. &lt;strong&gt;이러한 문제를 해결하기 위해 Entity나 Value Object, Service가 아닌 다른 무언가를 도메인 설계에 추가해야 한다.&lt;/strong&gt; 도메인 모델링의 결과로 나타나는 모델 내의 어떤 것에도 해당하지 않는 요소를 추가하는 것이지만, 이는 도메인 계층에서 맡고 있는 책임의 일부를 구성한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자신의 책임이 다른 객체를 생성하는 것인 프로그램 요소를 Factory라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어느 한 객체의 인터페이스가 자신의 구현을 캡슐화하고 객체의 동작방식을 알 필요가 없도록 해주듯이 &lt;strong&gt;Factory는 복잡한 객체나 Aggregate를 생성하는데 필요한 지식을 캡슐화한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;복잡한 객체와 Aggregate의 인스턴스를 생성하는 책임을 가지는 Factory는 도메인 설계의 일부를 구성하며, 이를 통해 클라이언트로 해당 객체의 내부구조나 규칙을 캡슐화할 수 있다. Factory는 전체 Aggregate 단위로 생성해서 그 것의 불변식이 지켜지도록 해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Factory를 설계하는 방법에는 여러가지가 있지만, 다음 두 가지 요건을 통해 Factory를 잘 설계하기 위한 필요 요소를 알 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;각 생성 방법은 원자적이어야 하며, 생성된 객체나 Aggregate의 불변식은 반드시 지켜져야 한다.&lt;/li&gt;
  &lt;li&gt;Factory는 생성된 클래스보다는 생성하고자 하는 타입으로 추상화되어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;factory와-factory의-위치-선정&quot;&gt;Factory와 Factory의 위치 선정&lt;/h3&gt;

&lt;p&gt;Aggregate 내부에 요소를 추가하기 위해 내부 객체를 생성하는 용도라면, 해당 &lt;strong&gt;Aggregate 루트에 Factory 메서드를 둘 수 있다.&lt;/strong&gt; 다음과 같이 한 요소가 추가될 때마다 Aggregate의 무결성을 보장하는 책임을 루트가 담당하고 동시에 외부에 대해 Aggregate의 내부 구현을 숨길 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또 다른 예로는 생성된 객체를 소유하지는 않지만 다른 객체를 만들어내는 것과 &lt;strong&gt;밀접한 관련이 있는 특정 객체에 Factory 메서드를 두는 것이다.&lt;/strong&gt; 이렇게 하면 한 객체의 데이터나 규칙이 객체를 생성하는데 큰 영향을 주는 경우 클라이언트에서 해당 객체를 생성할 때 필요로 하는 정보의 양을 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 TradeOrder 객체와 Brokerage Account 객체는 같은 Aggregate를 구성하지는 않지만 Brokerage Account 객체가 TradeOrder 객체를 생성함에 있어서 충분한 정보를 가지고 있으므로 Factory 메서드를 둘 수 있다.&lt;/p&gt;

&lt;p&gt;Factory는 해당 Factory에서 생성되는 객체와 매우 강하게 결합되므로, &lt;strong&gt;자신의 생성하는 객체와 가장 밀접한 관계에 있는 객체에 있어야 한다.&lt;/strong&gt; 생성 과정이 복잡하여 여러 프로그램 요소가 개입되는 경우, 비록 자연스럽게 보이지는 않더라도 별도의 Factory 객체나 Service를 만들어야 한다. 이런 독립형 Factory는 전체 Aggregate를 생성하여 (불변식은 지켜지고) 루트에 대한 참조를 리턴할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;특정 Aggregate 안의 어떤 객체가 Factory를 필요로 하는데, Aggregate 루트가 해당 Factory가 있기에 적절하지 않다면 독립형 Factory로 만들면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;생성자만으로-충분한-경우&quot;&gt;생성자만으로 충분한 경우&lt;/h3&gt;

&lt;p&gt;때로는 직접적으로 생성자를 이용하여 객체를 생성하는 것이 최선의 선택일 때가 있다. 특히 Factory는 &lt;strong&gt;다형성을 활용하지 않는 객체를 생성하는데 좋다.&lt;/strong&gt; 반대로 생성자를 사용하는 편이 좋은 상황은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라스가 타입인 경우, 클래스가 어떤 계층 구조의 일부를 구성하지 않으며 인터페이스를 구현하는 식으로 다형적으로 사용되지 않는 경우&lt;/li&gt;
  &lt;li&gt;클래스가 Strategy, 즉 전략 패턴을 위해 구현체에 관심이 있는 경우&lt;/li&gt;
  &lt;li&gt;클라이언트가 이미 객체의 속성을 모두 이용할 수 있고, 노출된 생성자 내에서 객체 생성 구현이 중복되지 않는 경우&lt;/li&gt;
  &lt;li&gt;생성자가 복잡하지 않은 경우&lt;/li&gt;
  &lt;li&gt;공개 생성자가 Factory가 동일한 규칙을 준수하는 경우. 마찬가지로 생성자로 객채 생성시에도 불변식은 충족시켜야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 클래스의 생성자 내에서 생성자를 호출하지 않도록 한다. 생성자는 극도로 단순해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;인터페이스-설계&quot;&gt;인터페이스 설계&lt;/h3&gt;

&lt;p&gt;Factory의 메서드를 설계할 때는 Factory가 어떤 형태이든지 상관없이 다음의 두 가지 사항을 명심해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;각 연산은 원자적이어야 한다.
    &lt;ul&gt;
      &lt;li&gt;복잡한 객체를 생성하기 위해 필요한 모든 것들을 한 번에 전달해야 한다.&lt;/li&gt;
      &lt;li&gt;생성이 실패할 경우에 대해서도 대비를 해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Factory는 자신에게 전달된 인자와도 결합된다.
    &lt;ul&gt;
      &lt;li&gt;입력 매개변수 타입이나 클래스에 대해서 결합이 생기게 된다.&lt;/li&gt;
      &lt;li&gt;구체적인 클래스가 아닌 추상적인 타입의 인자를 사용하도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;불변식-로직의-위치&quot;&gt;불변식 로직의 위치&lt;/h3&gt;

&lt;p&gt;Factory의 책임은 그것이 만들어내는 객체나 Aggregate의 불변식이 충족되도록 보장하는 것이다. 자기 자신이 직접 불변식을 검사할 수도 있지만, 간혹 생성된 객체에 위임할 수도 있다. 특히 &lt;strong&gt;각 도메인 객체 각각 내부에서 불변식을 검사하는 것이 더 깔끔할 때이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들면 Entity를 생성할 때, Entity 식별성을 위해 사용하는 값은 Entity 내부에서 검사하는 것이 좋을 수 있다.&lt;/p&gt;

&lt;p&gt;그 외에 해당 객체가 활동하는 생애 동안 결코 수행되거나 적용되지 않을 불변식 로직을 객체에 위치시킬 필요는 없다. 이 때는 Factory가 불변식을 둘 논리적인 위치가 되며, 객체는 더 단순하게 유지될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;entity-factory와-value-object-factory&quot;&gt;Entity Factory와 Value Object Factory&lt;/h3&gt;

&lt;p&gt;Entity Factory와 Value Object Factory는 두 가지 점에서 다른데, Value Object가 불변적이고, Entity는 식별성을 가진다는 차이에 기인한다.&lt;/p&gt;

&lt;p&gt;특히 Entity는 식별성을 위해 식별성 할당이 필요하므로 그런 식별자를 관리하기에는 Factory가 적절한 곳이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;저장된-객체의-재구성&quot;&gt;저장된 객체의 재구성&lt;/h3&gt;

&lt;p&gt;Factory는 특정 객체의 생명주기의 초반에 해당하는 부분에 관여하지만, 객체를 재구성할 때 (DB에서 데이터를 읽어 객체를 생성하는 등)도 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;객체를 재구성할 때 사용되는 Factory는 객체 생명주기의 초반에 관여하는 Factory와 유사하지만 주된 차이점은 아래의 두 가지가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;재구성에 사용되는 Entity Factory는 식별성을 위해 새로운 ID를 할당하지 않는다.&lt;/li&gt;
  &lt;li&gt;객체를 재구성하는 Factory는 불변식 위반을 다른 방식으로 처리해야 한다.
    &lt;ul&gt;
      &lt;li&gt;새로운 객체를 생성할 경우에는 단순히 객체 생성을 멈추면 되지만, 재구성할 때의 불변식 위반은 좀 더 탄력적으로 대응해야 된다. 가령 DB의 데이터 정합성이 맞지 않거나 일시적인 오류가 원인일 수도 있기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Factory는 모델의 어떤 부분도 표현하지는 않지만 해당 모델을 나타내는 객체를 뚜렷하게 드러내는 데 일조하는 도메인 설계의 일부로 볼 수 있다. Factory는 객체의 생성과 재구성이라는 생명주기 전이를 캡슐화한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;

&lt;p&gt;연관관계를 통해 다른 객체와의 관계에 근거하여 특정 객체에 접근할 수도 있지만, 객체의 생명주기 중간에도 Entity나 Value를 탐색하기 위핸 진입점이 존재해야 한다.&lt;/p&gt;

&lt;p&gt;객체를 이용해 무언가를 하려면 해당 객체에 대한 참조를 가지고 있어야 한다. 이를 위해 객체를 직접 생성해서 참조를 획득하거나, 객체 간의 연관관계를 탐색하여 필요한 객체의 참조를 얻는 방법이 있다. &lt;strong&gt;어쨋든 필요한 객체를 찾기 위한 진입점이 되는 첫 번째 객체가 있어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그리고 대부분의 객체 내용을 관계형 데이터베이스에 저장하는 경우가 많다. 데이터베이스에 저장된 데이터를 토대로 객체로 구성하여 사용하기 위해서, 데이터베이스 질의를 수행하여 데이터를 찾아 객체에 대한 참조를 획득하는 방법도 필요하다.&lt;/p&gt;

&lt;p&gt;객체 참조를 획득함에 있어서 탐색을 제공할 것이냐, 검색에 의존할 것이냐가 설계 결정이 되며, 연관관계의 응집성꽈 검색의 분리는 상충관계에 있다. 예를 들어 데이터베이스에서 조회한 Customer 객체를 통해 (Order 컬렉션을 필드로 가지고 있는) Order를 접근해야 하는가? 아니면 CustomerID를 통해 데이터베이스에서 직접 Order를 검색해야 하는가?&lt;/p&gt;

&lt;p&gt;기술적 관점에서 보면 저장된 객체를 가져오는 것은 실제로는 생성의 한 부분집합이다. 데이터베이스에서 가져온 데이터를 토대로 객체를 생성하기 때문이다. 하지만 개념상 객체의 생명주기 가운데 &lt;strong&gt;중간 단계에 불과하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-중심의-구현이-안좋은-점&quot;&gt;데이터 중심의 구현이 안좋은 점&lt;/h3&gt;

&lt;p&gt;도메인 주도 설계의 목표는 기술보다는 &lt;strong&gt;도메인에 대한 모델에 집중하여 더 나은 소프트웨어를 만들어내는 것이다.&lt;/strong&gt; 개발자가 직접 SQL 질의문을 구성하여 인프라스트럭처 계층의 관련 서비스에 전달하고, 테이블 행의 결과집합을 획득하여 필요한 정보를 꺼내 직접 생성자나 Factory로 전달할 때쯤이면 &lt;strong&gt;모델에 집중하기 힘들어진다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;특히 클라이언트 코드에서 직접적으로 데이터베이스를 이용하고 데이터베이스의 데이터를 다룰수록 개발자들은 Aggregate나 캡슐화와 같은 특징을 활용하는 것을 우회하려 하고 직접 조작하려하는 유혹에 빠진다. 필요도 없는 연관관계를 추가할 수도 있다. 이럴 경우 점점 많은 도메인 규칙이 SQL 질의 코드로 들어가거나 그냥 사라져 버린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 객체의 참조를 쉽게 획득하도록, 특히 Aggregate 내부의 객체 참조를 쉽게 획득하게 해준다면 기껏 Aggregate 개념을 추가한게 무색해질만큼 모델을 엉망으로 만들고 불변식을 훼손할 수 있다. &lt;strong&gt;도메인 로직은 질의나 클라이언트 코드로 들어가고 Entity나 Value Object는 단순히 데이터 홀더로서의 역할로 끝나게 될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Aggregate 내부에 존재하는 모든 객체는 루트에서 탐색을 토대로 접근하는 것 말고는 접근해서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;영속 객체는 해당 객체의 속성에 근거하여 검색하는 식으로 전역적으로 접근할 수 있어야 하지만, 그러한 접근 방식이 필요한 곳은 탐색으로 찾기에는 쉽지 않은 Aggregate의 루트만으로 한정해야 한다.&lt;/strong&gt; 마음대로 데이터베이스에 질의를 수행하면 실제로 도메인 객체와 Aggregate의 캡슐화가 깨질 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository 패턴은 이를 해결하고 개발자로 하여금 다시 모델에 집중할 수 있도록 개념적 틀에 해당한다.&lt;/strong&gt; &lt;strong&gt;Repository는 특정 속성에 근거하여 요청된 객체를 가져오며 데이터베이스 질의 및 메타데이터 매핑에 대한 장치를 캡슐화한다.&lt;/strong&gt; 이를 통해 클라이언트는 단순해지고 인터페이스를 통해 소통하며 &lt;strong&gt;모델 측면에서 필요로 하는 것들을 요청할 수 있게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Repository를 통해 실제로 데이터 저장소에 데이터를 저장하고 제거하는 연산을 캡슐화하고, 외부에서 직접 접근 가능한 Aggregate의 루트에 대해서만 Repository를 제공해야 한다. 모든 객체 저장과 접근은 Repository에 위임하여 클라이언트가 모델에 집중하도록 해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;repository에-질의하기&quot;&gt;Repository에 질의하기&lt;/h3&gt;

&lt;p&gt;가장 만들기 쉬운 Repository는 질의에 구체적인 매개변수룰 직집 전달하는 것이다. 식별자를 기준으로 Entity를 조회하거나 특정 속성 값을 가지는 객체 컬렉션 요청이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Repository를 통해 질의를 하는 한 가지 특별한 접근법은 Specification(명세)에 기반을 둔 질의를 사용하는 것이다. 이 명세를 이용해 클라이언트는 질의의 획득 방법에는 신경쓰지 않고도 원하는 바를 서술할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;클라이언트-코드가-repository-구현을-무시한다&quot;&gt;클라이언트 코드가 Repository 구현을 무시한다.&lt;/h3&gt;

&lt;p&gt;영속화 기술을 Repository를 통해 캡슐화하면 클라이언트가 매우 단순해지고, Repository 구현에서 완전히 분리된다. 그러나 캡슐화가 종종 그렇듯이 &lt;strong&gt;개발자들은 캡슐화를 한 내부 구현에서 무슨 일이 일어나는지는 반드시 파악하고 있어야 한다.&lt;/strong&gt; Repository가 의도하지 않은 방식으로 사용되거나 작동한다면 수행 성능이 극단에 치우칠 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;repository-구현&quot;&gt;Repository 구현&lt;/h3&gt;

&lt;p&gt;구현은 영속화에 사용되는 기술과 인프라스트럭처에 따라 매우 다양하겠지만 이상적인 모습은 &lt;strong&gt;클라이언트로부터 모든 내부 기능을 숨기고 어떤 기술을 사용하느냐에 상관없이 클라이언트 코드를 동일하게 유지하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;저장, 조회, 질의 매커니즘을 캡슐화하는 것은 Repository 구현의 가장 기본적인 기능이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림처럼 TradeOrder 객체를 조회함에 있어서 식별자(ID)를 통해 Repository에 전달하고, 필요한 SQL문으로 질의하고, 객체로 재구성하는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;Repository를 구현함에 있어서 명심해야 할 몇 가지 중요한 사항이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;타입을 추상화한다.
    &lt;ul&gt;
      &lt;li&gt;특정 타입의 인스턴스를 Repository가 담기는 하지만, 이것이 각 클래스마다 하나의 Repository가 필요하다는 것은 아니다.&lt;/li&gt;
      &lt;li&gt;타입은 상황에 따라 인터페이스가 될 수도 있고, 추상 상위 클래스가 될 수도 있고 구현 클래스가 될 수도 있다.&lt;/li&gt;
      &lt;li&gt;사용하는 영속화 기술에 따라 다형성이 제약될 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트와의 분리를 활용한다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트와 영속화 기술을 분리함으로써 더 자유롭게 Repository의 구현을 변경할 수 있도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션 제어를 클라이언트에 둔다.
    &lt;ul&gt;
      &lt;li&gt;불변식을 제어하는 트랜잭션의 시작와 끝은 클라이언트가 잘 알고 있다. 클라이언트에 올바르게 단위 작업을 시작하고 커밋하는 컨텍스트가 있기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;factory와의-관계&quot;&gt;Factory와의 관계&lt;/h3&gt;

&lt;p&gt;Factory가 객체 생애의 초기 단계를 다루는 데 반해, Repository는 중간 단계(재구성)와 마지막 단계(삭제)를 관리한다.&lt;/p&gt;

&lt;p&gt;데이터베이스로부터 데이터를 읽어 객체를 생성하므로 Repository를 Factory로 생각할 수도 있는데, 기술적 관점에서는 그렇다고 볼 수 있다. 그러나 &lt;strong&gt;모델을 중심으로 생각했을 때는 저장된 객체를 재구성하는 것이 실질적으로 새로운 객체를 생성하는 것은 아니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;도메인 주도 관점에서 봤을 때는 &lt;strong&gt;Repository와 Factory의 책임이 뚜렷이 구분되는데, Factory가 새로운 객체를 만들어 내는 데 반해 Repository는 기존 객체를 찾아낼 뿐이다.&lt;/strong&gt; 클라이언트 입장에서는 Repository를 통해 기존 객체를 찾는 것처럼 보여야 한다. 이런 객체는 그 객체 생명주기 상에서 중간 단계에 해당한다.&lt;/p&gt;

&lt;p&gt;다만 다음과 같이 Repository가 Factory로 데이터베이스로부터 읽은 데이터를 전달하여 객체 인스턴스 생성을 위임할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_06/09.png&quot; alt=&quot;09.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사람들이 Factory와 Repository를 합쳐서 생각하게 만드는 또 한 가지 경우는 “데이터베이스에서 찾아서 없으면 생성하는” 기능을 원할 때다. 이 기능은 사용하는 것을 자제해야 한다. 기껏해야 조금 더 편리할 뿐이다. 일반적으로 &lt;strong&gt;새로운 객체와 이미 존재하는 객체를 구분하는 것은 도메인에서 중요하다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/28/domain_driven_design_06-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/28/domain_driven_design_06-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 05 - 소프트웨어에서 표현되는 모델</title>
        <description>&lt;p&gt;Model Driven Design의 효과를 놓치지 않으면서 구현과 조화를 이루려면 기본적인 사항을 재구성할 필요가 있다. &lt;strong&gt;모델과 구현은 상세 수준에서 연결되어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;도메인 개념을 담은 객체를 정의하는 일은 겉으로는 매우 쉬워보이지만 의미 상의 미묘한 차이로 발생할 수 있는 중대한 문제가 잠재되어 있다. &lt;strong&gt;각 모델 요소의 의미를 명확하게 하고, 특정 종류의 객체를 도출하기 위해 설계에 부합하는 일정한 구분법이 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 객체가 연속성과 식별성을 지니고 있는가? -&amp;gt; Entity&lt;/li&gt;
  &lt;li&gt;다른 무언가의 상태를 기술하는 속성에 불과한가? -&amp;gt; Value Object&lt;/li&gt;
  &lt;li&gt;상태보다는 행동이나 연산으로 명확히 표현되는 것 -&amp;gt; Service
    &lt;ul&gt;
      &lt;li&gt;상태를 주고받지는 않는 활동을 모델링하는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 기본 요소들은 관례적인 것으로, 그 개념을 따르는 모델링과 설계 경향에 대해서 예전부터 책이나 문헌으로 존재하였다. 그러한 개념에 맞게 더 규모가 큰 모델과 설계 문제를 다룰 때 개발자들이 도메인 주도 설계의 우선순위에 부합하는 세부 구성요소를 만드는데 도움이 될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;연관관계&quot;&gt;연관관계&lt;/h2&gt;

&lt;p&gt;모델링과 실제 구현 간의 상호작용은 여러 객체 간의 연관관계에서 특히 까다롭다.&lt;/p&gt;

&lt;p&gt;서로 다른 모델 객체끼리는 연관관계가 있다. 어느 두 사물들끼리의 연관관계를 나타내는 것은 두 사물에 관계된 것이다. 그러한 모델은 개발자가 실제 사물끼리의 관계를 추상화한 것이기도 하다.&lt;/p&gt;

&lt;p&gt;일대다(one-to-many) 연관관계는 어느 인스턴스 변수에 필드로서 컬렉션을 두는 것으로 구현할 수 있다. 반드시 그렇게 되는 것은 아니며, 컬렉션이 없이 접근자 메서드에서 직접 데이터베이스를 조회하여 적절한 레코드를 찾은 다음 해당 레코드를 토대로 객체를 인스턴스화할 수도 있다. &lt;strong&gt;어떤 형태로 구현하든 그러한 행위는 모델 내의 연관관계와 일치해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;현실세계에는 수많은 다대다(many-to-many) 연관관계가 있는데, 상당수가 양방향 연관관계로 나타난다. 초기 도메인 모델링의 결과인 모델도 그와 같은 경향을 보인다. 이러한 일반적인 형태의 연관관계는 구현과 유지보수를 복잡하게 만든다.&lt;/p&gt;

&lt;p&gt;연관관계를 좀더 쉽게 다루는 방법으로 아래의 세 가지가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;탐색 방향을 부여한다.&lt;/li&gt;
  &lt;li&gt;한정자(qualifier)를 추가하여 사실상 다중성(multiplicity)를 줄인다.&lt;/li&gt;
  &lt;li&gt;중요하지 않은 연관관계를 제거한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;가능한 한 관계를 제약하는 것이 중요하다.&lt;/strong&gt; 양방향 연관관계는 두 객체가 모두 있어야만 이해할 수 있다. 애플리케이션의 요구사항에 두 방향을 모두 탐색해야 한다는 요건이 없을 경우에는, 어느 한 방향으로만 탐색 방향을 추가하면 상호의존성이 줄어들고 설계가 단순해진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_05/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;국가와 역대 대통령에 대한 관계를 표현할 수 있는데, 이는 일대다 관계로 연관관계를 단순화시킬 수 있다. 대통령 이름으로 ‘이 대통령이 있던 나라가 어디입니까?’ 라고 물어보지는 않는다. 위와 같이 단방향으로 탐색 방향을 제한함으로써 &lt;strong&gt;설계가 단순해지고 도메인에 통찰력(연관관계에서 어느 특정 방향이 다른 것에 비해 더 의미있고 중요하다는 점)을 반영하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 탐색 방향은 도메인의 본연적인 특성을 드러낸다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인을 깊이있게 이해하다보면 자주 &lt;strong&gt;한정적인&lt;/strong&gt; 관계에 이른다. 대통령은 특정 시점에 한 명의 대통령만이 있다. 따라서 이러한 중요한 도메인 규칙을 명시적으로 모델에 포함시킨다면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_05/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 일대다와 같은 다중성을 일대일 관계로 제약하여 줄일 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;제약이 더해진 연관관계는 더 많은 도메인 지식과 실제적인 설계를 전해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위와 같은 방법들로 연관관계를 제약하면 훨씬 더 구현이 용이해진다. &lt;strong&gt;도메인의 특성이 드러나게끔 일관되게 제약하면 연관관계의 의사전달력이 더욱 풍부해지고 구현이 단순해진다.&lt;/strong&gt; 복잡한 다대다 관계를 구현하기 쉬운 일대다 관계로 바꿀 수 있으며, 한정자를 통해 다중성을 줄일 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;물론 양방향 연관관계가 도메인에 있어서 의미가 있고 애플리케이션의 요구사항에도 부합한다면 유지해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;중요한 의미를 담고 있지 않는 연관관계라면 완전히 제거하는 것이 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;제약조건은 모델과 구현에 포함되어 있어야 한다. 그와 같은 제약조건은 모델을 더 정확하게 하고, 구현을 더욱 쉽게 유지보수할 수 있도록 해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;entity-엔티티&quot;&gt;Entity (엔티티)&lt;/h2&gt;

&lt;p&gt;수많은 객체는 본질적으로 해당 객체의 속성이 아닌 &lt;strong&gt;연속성과 식별성이 이어지느냐를 기준으로 정의된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;많은 것들이 속성이 아닌 식별성에 의해 정의될 수 있다. ‘사람’을 나타내는 객체는 여러 시스템에서 그 객체의 형태가 각기 다를 수 있지만, 동일한 사람인지 아니면 다른 사람인지 파악알 필요가 있다. 이러한 &lt;strong&gt;개념적 식별성은 객체와 해당 객체의 저장 형태, 구현 사이에서 일치해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체 모델링을 할 때 속성에 집중하곤 하는데, &lt;strong&gt;Entity의 근본적인 개념은 객체의 생명주기 내내 이어지는 추상적인 연속성이며 그러한 추상적인 연속성은 여러 형태를 거쳐 전달된다는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 객체는 객체의 속성을 자신의 주된 정의로 삼지 않는다. 오랜 시간에 걸쳐 작용하는 식별성의 이어짐이 나타나며, 그 형태는 종종 다르게 나타나기도 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어떤 객체를 일차적으로 해당 객체의 식별성으로 정의할 경우 그 객체를 Entity(엔티티)라고 한다.&lt;/strong&gt; Entity는 자신의 생명주기 동안 형태와 내용은 바뀌더라도 연속성은 유지해야 한다. 이런 객체를 추적하기 위해서는 식별성이 정의되어 있어야 한다. &lt;strong&gt;Entity의 클래스 정의와 책임, 속성, 연관관계는 Entity의 특정 속성보다는 정체성에 초첨을 맞추어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Entity는 생명 주기 내내 이어지는 연속성과 애플리케이션 사용자에게 중요한 속성과는 다른 독립적인 특징을 가진 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;모델 내의 모든 객체가 의미있는 식별성을 지닌 Entity인 것은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;한 객체가 속성보다는 식별성으로 구분될 경우 모델 내에서 이를 해당 객체의 주된 정의로 삼아야 한다.&lt;/strong&gt; 클래스 정의를 단순히 하고 생명주기의 연속성과 식별성에 집중해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;식별성을 주된 정의로 삼고, 집중하기 위해 객체의 형태나 이력에는 상관없이 각 객체를 구별하기 위한 수단이 있어야 한다. 이러한 식별 수단의 구현 방법은 여러가지가 있겠지만 모델에서 이 식별성을 구분하는 방법과 일치해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;식별성은 원래 세상에 존재하는 것이 아닌, 필요에 의해 보충된 의미이다. 현실세계의 같은 사물을 표현한 것일지라도 도메인 모델에서 Entity로 표현되거나 표현되지 않을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;entity-모델링&quot;&gt;Entity 모델링&lt;/h3&gt;

&lt;p&gt;객체를 모델링할 때 속성에 관해 생각하는 것은 자연스러운 일이며, 객체의 행위에 관해 생각해보다는 것은 아주 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entity의 가장 기본적인 책임은 객체의 행위가 명확하고 예측 가능하도록 연속성을 확립하는 것이다.&lt;/strong&gt; Entity를 모델링할 때, 속성이나 행위에 집중하기 보다는 가장 본질적인 특징(Entity를 식별하고 탐색하여 일치시키는데 사용하는)만으로 정의한다. 개념에 필수적인 것만 추가하고 그 행위에 필요한 속성만 추가한다.&lt;/p&gt;

&lt;p&gt;그 밖의 것들은 행위나 속성을 검토하여 Entity와 연관관계에 있는 다른 객체로 옮기도록 한다. 이들은 다른 Entity가 되거나 Value Object가 될 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_05/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서 customerID는 Entity의 유일한 식별자이며, 전화번호와 주소(contact phone, contact address)는 이러한 Customer를 찾거나 일치 여부를 판단하는 데 사용된다. 이름(name)은 한 사람의 식별성을 정의하지는 않지만 간혹 식별성을 판단하는 수단의 일부로 사용되기도 한다.&lt;/p&gt;

&lt;p&gt;이에 따라 이름, 연락처 같은 속성을 Customer로 옮겼지만 그 것은 어느 두 Customer 간의 식별성을 파악하기 위해 옮긴 것이다. 만약 Customer에 여러 전화번호가 있고 그 번호가 식별성과 관련이 없다면 Sale Contact에 그대로 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;식별-연산의-설계&quot;&gt;식별 연산의 설계&lt;/h3&gt;

&lt;p&gt;각 Entity에는 다른 객체와 구분해줄 식별성을 만들어낼 수 있는 수단이 있어야 한다. 식별에 사용되는 속성은 시스템의 상태와 관계없이 해당 시스템에서 유일해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;식별성에 대한 정의는 모델로부터 나온다. 따라서 식별성을 정의하려면 도메인을 이해해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;value-object-값-객체&quot;&gt;Value Object (값 객체)&lt;/h2&gt;

&lt;p&gt;개념적 식별성이 없는 객체도 많은데, 이러한 객체는 사물의 어떤 특징을 묘사한다.&lt;/p&gt;

&lt;p&gt;보통 식별성을 정의하고 추적 및 관리하기 위해서는 분석적인 노력이 필요하다. 그런데 식별성이 필요없는 객체에 대해서도 일괄적으로 식별성을 도입할 경우 오해를 불러 일으킬 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;Entity의 식별성을 관리하는 일은 매우 중요하지만, &lt;strong&gt;식별성이 필요없는 그 밖의 객체에 대해서 식별성을 추가한다면 시스템의 성능이 저하되고, 분석작업이 별도로 필요하며, 모든 객체를 동일한 것으로 보이게 해서 모델이 혼란스러워질 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 식별성이 필요하지 않은 객체는 사물을 서술하는 객체로, 모델에 중요한 의미를 갖고 있다. &lt;strong&gt;개념적 식별성을 갖지 않으면서 도메인의 서술적 측면을 나타내는 객체를 Value Object라고 부른다.&lt;/strong&gt; 이러한 객체는 이 객체가 어느 것인지에 대해서는 관심이 없고, 무엇인지에 대해서만 관심이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모델에 포함되는 요소들 중, 속성을 기술하는 데 중점을 둔다면 그것은 Value Object로 분류해야 한다.&lt;/strong&gt; 속성의 의미를 잘 표현할 수 있도록 구현하고, 관련 행위나 기능을 부여하라. 그리고 Value Object는 아무런 식별성도 부여하지 말고, &lt;strong&gt;불변적&lt;/strong&gt;으로 다루어야 한다.&lt;/p&gt;

&lt;p&gt;Value Object는 다른 객체를 속성으로 가지거나 풍부한 기능을 가질 수도 있으며, Entity를 참조할 수도 있다. 다만 식별성을 가지는 것이 의미가 없는 객체일 뿐이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Value Object는 여러 객체 간에 오가는 메시지의 매개변수로 사용되기도 하며, 어떤 연산에서 임시로 사용할 목적으로 만들어 진 후 폐기되기도 한다. 또한 Entity이나 또다른 Value Object의 속성으로 사용되기도 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Value Object를 구성하는 속성은 &lt;strong&gt;개념적 완정성&lt;/strong&gt;을 형성해야 한다. 예를 들어 다음과 같은 그림의 왼쪽과 같이 Customer 객체에서 street, city, state와 같은 주소를 나타내는 속성은 개별 속성으로 표현되어서는 안된다. 이런 속성들은 오른쪽과 같이 하나의 완전한 Address(주소)를 구성함으로써 &lt;strong&gt;더 단순한 Customer와 더 응집력 있는 Value Object를 만들어낸다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-28-domain_driven_design_05/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;value-object의-설계&quot;&gt;Value Object의 설계&lt;/h2&gt;

&lt;p&gt;Value Object를 사용함에 있어서 인스턴스의 복사나 공유, 불변성에 대한 의사결정이 필요하다.&lt;/p&gt;

&lt;p&gt;두 사람의 이름이 같다고 해서 두 사람이 동일 인물이 되는 것은 아니다. 그러한 이름을 나타내는 객체는 서로 바꿀 수 있는데, 이름에서는 &lt;strong&gt;오직 이름의 철자만이 중요하기 때문이다.&lt;/strong&gt; 따라서 어느 사람을 나타내는 Person 객체에서 두 번째 Person 객체로 Name 객체를 복사할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 Person 객체에서 제각기 고유한 이름 인스턴스를 가질 필요도 없을지 모른다. 동일한 Name 객체는 두 Person 객체 간에 공유가 가능하며 두 Person 객체의 행위나 식별성은 아무것도 변경할 필요없다. 그런데 이 상황에서 어느 한 객체의 Name이 변경된다면 다른 사람의 이름까지 바뀌게 되므로 해당 객체는 불변적으로 다루어야 할 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 &lt;strong&gt;불변성은 한 객체가 해당 객체의 속성을 인자나 반환 값으로 다른 객체로 전달할 때 나타나는 문제를 방지할 수 있다.&lt;/strong&gt; 객체의 소유자가 제어하지 못하는 이러한 떠돌이 객체로 인해 &lt;strong&gt;소유자의 불변식이 훼손될 수 있으므로, 속성을 전달할 때 방어적 복사나 불변 객체로 전달하여 방지하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;복사나 공유 중 어느 것이 경제성 면에서 더 나은지는 구현 환경에 따라 달라진다. 복사의 경우 객체의 개수가 매우 많아져 시스템이 무거워질 수 있다.&lt;/p&gt;

&lt;p&gt;Value Object가 불변적으로 다루어진다면 이 객체는 마음껏 공유할 수 있다. 달리 말하면, &lt;strong&gt;Value Object가 변경 가능하다면 공유해서는 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Value Object가 변경되는 것을 허용하는 경우는 새로운 Value Object를 매번 생성함으로서 나타나는 성능의 문제가 있을 경우에만 한해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;value-object를-포함한-연관관계-설계&quot;&gt;Value Object를 포함한 연관관계 설계&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;모델에 포함되는 요소들은 연관관계의 수가 적고 연관관계가 단순할수록 더 나은 모델이라 할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Entity 간의 양방향 연관관계는 필요에 따라 존재할 수 있지만, Value Object 간의 양방향 연관관계는 논리적으로 타당하지 않다. 어떠한 객체가 식별성 없이 자신을 가리키는 동일한 Value Object를 역으로 가리키는 것은 아무런 의미가 없다. Value Object끼리의 양방향 연관관계에 대한 유용한 예도 별로 없다. 따라서 &lt;strong&gt;Value Object 간의 양방향 연관관계는 없다고 봐도 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;service-서비스&quot;&gt;Service (서비스)&lt;/h2&gt;

&lt;p&gt;도메인 모델의 각 요소들 중 &lt;strong&gt;개념적으로 어떠한 객체에도 속하지 않는 연산이 포함될 때가 있다.&lt;/strong&gt; 이러한 연산은 특정 Entity나 Value Object의 연산이 아닌 경우이다.&lt;/p&gt;

&lt;p&gt;이런 연산은 본질적으로 사물이 아닌 &lt;strong&gt;활동&lt;/strong&gt;이나 어떠한 &lt;strong&gt;행동&lt;/strong&gt;인데 이러한 연산도 객체와 잘 어울리게끔 노력해야 한다.&lt;/p&gt;

&lt;p&gt;특정 Entity나 Value Object에 종속되지 않는 이러한 연산을 강제로 그 객체에 포함시킨다면 &lt;strong&gt;해당 객체는 자신의 개념적 명확성을 잃어버리고 이해하거나 리팩터링하기가 어려워진다.&lt;/strong&gt; 이럴 경우, 해당 객체의 역할을 불분명하게 만든다.&lt;/p&gt;

&lt;p&gt;또한 이러한 연산은 여러 도메인 객체를 모아 그것들을 조율해나가면서 어떤 행위를 일어나게 하므로, 그 연산을 특정 객체에 추가시킨다는 것은 그 객체가 다른 도메인 객체에 대한 의존성을 만들어낸다.&lt;/p&gt;

&lt;p&gt;이 연산의 특징은 &lt;strong&gt;자신의 상태를 비롯해 도메인에서 맡고 있는 연산 이상으로는 어떠한 의미도 가지지 않는 경우가 많다.&lt;/strong&gt; 이런 기능을 Entity나 Value Object에서 억지로 맡게 된다면 &lt;strong&gt;모델에 기반을 둔 객체의 정의가 왜곡되거나 무의미하고 인위적으로 만들어진 객체가 추가될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Service는 모델에서 독립적인 인터페이스로 제공되는 연산으로 Entity나 Value Object와 같이 상태를 캡슐화하지는 않는다. 단지 행위만 모델링 할 뿐이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서비스라는 이름은 다른 객체와의 관계를 강조하며, Entity나 Value Object와는 달리 정의하는 기준이 &lt;strong&gt;순전히 클라이언트에게 무엇을 제공할 수 있느냐에 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service는 주로 활동으로 이름을 지으며, Service에 부여된 책임과 행위, 인터페이스는 도메인 모델의 일부로서 정의될 수 있다. 당연히 연산의 명칭은 Ubiquitous Language에서 가져와야 하며 Service의 매개변수와 결과는 도메인 객체여야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service에서 구현되는 행위는 Entity나 Value Object에서 수행될 수 있는 행위여서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;잘 만들어지는 Service에는 아래의 세 가지 특징이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;연산이 원래부터 Entity나 Value Object의 일부를 구성하는 것이 아닌, 도메인 개념과 관련이 있다.&lt;/li&gt;
  &lt;li&gt;인터페이스가 도메인 모델의 외적 요소의 측면에서 정의된다.&lt;/li&gt;
  &lt;li&gt;연산이 상태를 갖지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;도메인의 중요한 연산이나 과정이 Entity나 Value Object의 고유한 책임이 아니면 Service로 선언되는 독립 인터페이스로 모델에 추가시키도록 한다.&lt;/strong&gt; Service는 상태를 가져서는 안된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;service와-격리된-도메인-계층&quot;&gt;Service와 격리된 도메인 계층&lt;/h3&gt;

&lt;p&gt;Service는 도메인 계층에서만 이용되는 것이 아니다. &lt;strong&gt;도메인 계층에 속하는 Service와 다른 계층에 속하는 것들을 구분하고 그러한 구분을 분명하게 유지하는 책임을 나누는데 주의를 기울여야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;도메인 Service와 응용 Service는 인프라스트럭처 계층의 Service와 협업하도록 구현한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;응용 Service와 도메인 Service의 구분은 중요한 업무 규칙을 포함하고 있느냐 없느냐에 달려 있다. 인프라스트럭처 Service는 단순히 기술과 관련된 것만 구현하며 업무와 관련된 어떠한 것도 포함되어서는 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;은행 시스템에서 서비스를 여러 계층으로 분할하기
    &lt;ul&gt;
      &lt;li&gt;응용 Service: 업무 규칙, 도메인 기능과 관련이 없음
        &lt;ul&gt;
          &lt;li&gt;사용자 입력의 암호화&lt;/li&gt;
          &lt;li&gt;고객에 이메일 발송&lt;/li&gt;
          &lt;li&gt;도메인 Service 호출 (도메인 객체의 행위를 조정)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;도메인 Service: 업무 규칙, 도메인 기능을 포함
        &lt;ul&gt;
          &lt;li&gt;자금 이체&lt;/li&gt;
          &lt;li&gt;계좌 잔고 확인&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;인프라스트럭처 Service: 기술적인 구현을 포함
        &lt;ul&gt;
          &lt;li&gt;애플리케이션에서 이메일이나 우편을 보내는 기술적인 내용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 Service를 적절히 도입하면 응용이나 도메인, 인프라스트럭처 계층 간의 경계를 선명하게 하는 데 도움될 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;모듈&quot;&gt;모듈&lt;/h2&gt;

&lt;p&gt;Module은 오래 전부터 확립되어 사용되고 있는 설계 요소다. &lt;strong&gt;Module 간에는 결합도가 낮아야 하고, Module의 내부는 응집도가 높아야 한다. Module로 쪼개지는 기준은 코드가 아닌 바로 개념이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;낮은 결합도와 높은 응집도는 개별 객체에서와 마찬가지로 Module에도 적용되는 일반적인 설계 원칙이며, 그 원칙은 구상 단위가 큰 모델링과 설계에서는 특히 중요하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;적절히 선택된 Module은 특별히 개념적 관계가 풍부한 모델 요소를 한 곳으로 모아주는 역할을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;도메인 주도 설계의 다른 모든 것들과 마찬가지로 Module도 하나의 의사소통 매커니즘이다. &lt;strong&gt;분할되는 객체의 의미에 따라 Module을 선택해야 한다. 일련의 응집력있는 개념들을 하나의 Module에 담아야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체의 가장 기본적인 개념 중 하나는 데이터와 해당 데이터를 대상으로 연산을 수행하는 로직을 캡슐화하는 것이다.&lt;/strong&gt; 하나의 개념적 객체를 구현하는 코드는 모두 같은 Module에 두어야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 것의 개념이 도메인 객체와 밀접하게 관련되어 있지 않다면 그것을 도메인 객체에 추가해서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/28/domain_driven_design_05-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/28/domain_driven_design_05-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 04 - 도메인의 격리</title>
        <description>&lt;p&gt;소프트웨어 구현을 건전한 상태로 유지하고, 모델과의 밀접한 관계를 유지하려면 모델링과 설계의 우수한 실천법을 적용해야 한다.&lt;/p&gt;

&lt;p&gt;훌륭한 도메인 모델을 개발하는 것은 일종의 예술이다. 그런데 &lt;strong&gt;모델의 개별 요소를 실제로 설계하고 구현할 때는 일정한 체계적인 방법으로 진행할 수 있다.&lt;/strong&gt; 일정한 구분법에 따라 모델 요소를 정의하면 모델 요소의 의미가 더욱 명확해진다. 또한 널리 입증된 패턴을 따른다면 구현에 실질적으로 도움이 되는 모델을 만드는데도 도움이 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-25-domain_driven_design_04/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도메인의-격리&quot;&gt;도메인의 격리&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;시스템에서 도메인과 관련이 적은 기능으로부터 도메인 객체를 분리해야 한다.&lt;/strong&gt; 그래야 도메인 개념을 다른 소프트웨어 기술에만 관련된 개념과 혼동하거나 시스템이라는 하나의 큰 덩어리에서 도메인을 전혀 바라보지 못하는 문제를 방지할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자가 도메인 모델에 집중할 수 있도록 시스템의 수많은 관심사로부터 도메인 설계를 격리하면 모델과 설계의 관계는 훨씬 분명해질 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;layerd-architecture-계층형-아키텍처&quot;&gt;Layerd Architecture (계층형 아키텍처)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-25-domain_driven_design_04/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소프트웨어에는 갖가지 작업을 수행하는 설계와 코드가 포함된다. 사용자 입력을 받아들이고, 비즈니스 로직을 수행하며, DB에 접근하고, 네트워크로 통신하며, 사용자에게 정보를 보여주는 등의 다양한 일을 수행한다. 따라서 이런 기능들과 관련된 코드의 양은 상당히 많을 수 있다.&lt;/p&gt;

&lt;p&gt;객체지향 프로그래밍에서는 간혹 UI와 데이터베이스, 기타 보조적인 성격의 코드를 비즈니스 객체에 직접 작성하기도 한다. 아니면 비즈니스 로직이 UI나 DB의 스크립트에 들어가기도 한다. 이런 일이 발생하는 이유는 단기적으로 이렇게 구현하는 것이 가장 쉬운 방법이기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;도메인과 관련된 코드가 도메인과 관련이 없는 코드를 통해 여기저기 흩어진다면, 도메인에 관련된 코드를 확인하고 이해하기가 상당히 어려워진다.&lt;/strong&gt; UI를 변경하는 것이 실제 비즈니스 로직을 변경하는 것으로 이어질 수도 있다. 업무 규칙을 이해하고자 UI나 DB 코드, 자잘한 요소들을 세심하게 추적해야 될 수 있다. 이러면 &lt;strong&gt;응집력 있고, 모델 주도적인 객체를 구현&lt;/strong&gt;하는 것이 비현실적이 된다. 기술과 로직이 모든 활동에 같이 포함되어 있다면 프로그램을 이해하기가 불가능해진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;매우 복잡한 작업을 처리하는 소프트웨어를 작성할 때는 &lt;strong&gt;관심사의 분리&lt;/strong&gt;가 필요하며, 이를 통해 서로 격리된 각 설계 요소에 집중할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;보통 시스템을 분리하는 방법은 다양하지만 오랜 경험과 관례를 통해 &lt;strong&gt;Layered Architecture&lt;/strong&gt;라는 몇 개의 일반화된 계층이 널리 받아들여지고 있다. 계층화의 핵심은 &lt;strong&gt;한 계층의 모든 요소는 오직 같은 계층에 존재하는 다른 요소나 아래 계층에 위치한 요소에만 의존한다&lt;/strong&gt;라는 것이다.&lt;/p&gt;

&lt;p&gt;이러한 계층화의 가치는 &lt;strong&gt;각 계층이 프로그램의 특정 측면만을 전문적으로 다룬다는 데 있다.&lt;/strong&gt; 따라서 더욱 응집력 있는 설계가 가능해지며 설계를 훨씬 더 쉽게 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;오랜 경험과 관례를 바탕으로 널리 받아들여지는 계층형 아키텍처는 보통 아래의 네 가지 개념적 계층으로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;표현 계층: 사용자에게 정보를 보여주고, 사용자의 명령을 해석하는 일을 책임진다.&lt;/li&gt;
  &lt;li&gt;응용 계층: 소프트웨어가 수행할 작업을 정의하고 표현력이 있는 도메인 객체가 문제를 해결하도록 한다.
    &lt;ul&gt;
      &lt;li&gt;보통 이 계층은 얇게 유지되는데, 업무 규칙이나 도메인 지식이 전혀 포함되지 않으며 오직 수행할 작업을 조정하고 도메인 계층에 포함되는 도메인 객체에 작업을 위임한다.&lt;/li&gt;
      &lt;li&gt;응용 계층은 업무 상황을 반영하는 상태가 존재하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 계층: 업무 개념과 업무 상황에 대한 상태 관리, 업무 규칙을 표현하는 일을 책임진다.
    &lt;ul&gt;
      &lt;li&gt;업무 상황을 반영하는 상태를 제어하고 사용하며, 상태 저장과 관련된 기술적인 세부사항은 인프라스트럭처 계층에 위임한다.&lt;/li&gt;
      &lt;li&gt;소프트웨어의 핵심이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인프라스트럭처 계층: 상위계층을 지원하는 일반화된 기술적 기능을 제공한다.
    &lt;ul&gt;
      &lt;li&gt;메시지 전송이나 도메인 영속화 등이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Model Driven Design을 가능케 하는 것은 결정적으로 도메인 계층을 분리하는 데 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;복잡한 프로그램을 여러 개의 계층으로 나누어야 한다. 응집력있고 오직 아래에 위치한 계층에만 의존하는 각 계층에서 설계를 발전시켜나가야 한다. 표준 아키텍처 패턴에 따라 각 계층은 다른 계층들과의 결합을 느슨하게 유지해야 한다. 깔끔한 관심사의 분리를 토대로 각 계층의 설계를 이해하고 유지하기가 쉬워진다.&lt;/p&gt;

&lt;p&gt;도메인 모델과 관련된 코드는 모두 도메인 계층으로 모으고, 사용자 인터페이스 코드나 애플리케이션 코드 (응용 계층 코드), 인프라스트럭처 코드로부터 격리시켜야 한다. &lt;strong&gt;그래야 도메인 객체는 도메인 모델을 표현하는 것에만 집중할 수 있다.&lt;/strong&gt; 이를 통헤 모델에 풍부하고 명확한 업무 지식을 반영할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;응용 계층이 아닌 도메인 계층에서 업무 규칙을 다루어야 한다. 응용 계층은 어느 한 작업을 정의만 할 뿐, 실질적인 비즈니스 로직은 도메인 계층에 위임한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;계층-간-관계-설정&quot;&gt;계층 간 관계 설정&lt;/h2&gt;

&lt;p&gt;각 계층은 설계 의존성을 오직 한 방향으로만 두어서 느슨하게 결합시켜야 한다. 상위 계층은 하위 계층의 공개된 인터페이스로 호출하여 하위 계층의 구성 요소를 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;응용 계층과 도메인 계층에 UI를 연결하는 패턴은 Model-View-Controller, MVC 패턴에서 유래한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;인프라스트럭처 계층은 지원하는 도메인의 구체적인 업무 규칙이나 지식을 가져서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;아키텍처-프레임워크&quot;&gt;아키텍처 프레임워크&lt;/h2&gt;

&lt;p&gt;인프라스트럭처가 인터페이스를 통해 호출되는 Service 형태로 제공하면 계층화의 동작 방식과 각 계층이 느슨하게 결합되는 방식이 직관적으로 보여진다. 그런데 일부 기술적인 문제에서는 더욱 침습적인(intrusive) 형태의 인프라스트럭처가 필요하다. (예를 들면 스프링에서 AOP 형태로 제공하는 트랜잭션 기능이라든지)&lt;/p&gt;

&lt;p&gt;예전 J2EE에서처럼 특정 계층이 매우 특수한 방식으로 구현되기를 요구하기도 한다. 어느 특정 클래스의 하위 클래스가 되어야 한다거나 일정한 메서드 이름 규칙을 사용해야 하는 것처럼 말이다. &lt;strong&gt;가장 바람직한 아키텍처 프레임워크라면 도메인 개발자가 모델을 표현하는 것에만 집중할 수 있도록 복잡한 기술적 난제를 해결한다.&lt;/strong&gt; 스프링 프레임워크도 이를 따르는 애플리케이션 프레임워크로, DI나 AOP, 서비스 추상화 등을 통해 개발자가 비즈니스 로직에 집중할 수 있도록 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도메인-계층은-모델이-살아가는-곳&quot;&gt;도메인 계층은 모델이 살아가는 곳&lt;/h2&gt;

&lt;p&gt;도메인 주도 설계에서는 오직 한가지 특정한 계층이 중요하다.&lt;/p&gt;

&lt;p&gt;도메인 모델은 일련의 개념을 모아놓은 것이다. &lt;strong&gt;도메인 계층은 그러한 모델과 설계 요소에 직접적으로 관계된 모든 것들을 명시한 곳이며, 업무 로직에 대한 설계와 구현으로 구성된다.&lt;/strong&gt; 도메인 로직이 프로그램 상의 다른 관심사와 섞여 있다면, 유연하게 유지보수나 요구사항 반영과 같은 대응을 달성하기가 쉽지 않다. &lt;strong&gt;도메인 주도 설계의 전제조건은 도메인 구현을 격리하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도메인-구현을-격리하지-않을-때&quot;&gt;도메인 구현을 격리하지 않을 때&lt;/h2&gt;

&lt;p&gt;도메인 구현을 다른 관심사와 분리하지 않고 개발한다면 다음과 같은 상황에 직면할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스를 이용하는 방식 말고는 여러 애플리케이션을 통합하기가 수월하지 않다.&lt;/li&gt;
  &lt;li&gt;행위를 재사용하지 않으며, 업무 문제에 대해 추상화가 제대로 이루어지지 않는다. 각 연산마다 로직이 중복되는 경우가 생긴다.&lt;/li&gt;
  &lt;li&gt;추상화의 부재로 리팩터링의 여지가 제한될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;도메인을 격리할 때의 가장 좋은 점은 부수적인 것을 배제하고 개발자로 하여금 도메인 설계에만 집중할 수 있다는 것이다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_04-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_04-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 03 - 모델과 구현의 연계</title>
        <description>&lt;p&gt;프로젝트에 도메인 모델은 있지만, 동작하는 소프트웨어를 개발하는 데 직접적으로 도움을 주지 못한다면, 아무 의미가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;model-driven-design&quot;&gt;Model Driven Design&lt;/h2&gt;

&lt;p&gt;코드와 그것의 기반이 되는 모델이 긴밀하게 연결되면 코드에 의미가 부여되고, 모델과 코드가 서로 대응하게 된다.&lt;/p&gt;

&lt;p&gt;도메인 모델이 전혀 없고 기능만 차례대로 구현하기 위해 코드를 작성하는 프로젝트에서는 지식 탐구와 의사소통의 이점을 거의 살리지 못한다.&lt;/p&gt;

&lt;p&gt;설계의 기반이 되는 개념이 부족한 소프트웨어는 소프트웨어의 행위를 설명하지 못한 채 그저 유익한 일을 수행하는 매커니즘 정도밖에 되지 못한다.&lt;/p&gt;

&lt;p&gt;설계 혹은 설계의 주된 부분이 도메인 모델과 대응하지 않는다면, 모델은 그다지 가치가 없으며 소프트웨어의 정확성도 의심스러워진다. 모델과 설계 기능 사이의 복잡한 대응은 이해하기가 힘들고 설계가 변경되면 유지보수도 불가능해진다. 분석과 설계가 동떨어지고, 그에 따라 각자의 활동에서 얻은 통찰력이 서로에게 전해지지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소프트웨어를 설계할 때는 도메인 모델을 있는 그대로 반영하여 설계와 모델의 대응을 분명하게 해야한다.&lt;/strong&gt; 모델을 검토하여 자연스럽게 소프트웨어로 구현할 수 있도록 수정해나가야 하며, 공통 언어를 지원하는 것과 더불어 분석과 설계의 두 가지 측면을 충분히 만족하는 단 하나의 모델을 만들어야 한다.&lt;/p&gt;

&lt;p&gt;모델로부터 설계와 기본적인 책임 할당에 사용한 용어를 도출하고, 코드를 작성할 때 그러한 용어를 사용하면 코드가 모델을 표현한 것이 되고 코드의 변경이 모델의 변경으로 이어질 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 주도 설계는 모델을 동작하게 만들어 애플리케이션의 문제를 해결한다. 지식 탐구를 바탕으로 팀은 지식의 정수를 추출해 실제적인 모델을 만든다. Model Driven Design은 모델과 구현을 매우 밀접하게 연결한다. UBIQUITOUS Language는 개발자와 도메인 전문가, 소프트웨어 사이에 흐르는 모든 정보의 통로에 해당한다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_03-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_03-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 02 - 의사소통과 언어사용</title>
        <description>&lt;p&gt;도메인 모델은 소포트웨어 프로젝트를 위한 공통 언어의 핵심이 될 수 있다. &lt;strong&gt;모델은 프로젝트에 참여한 사람들의 머릿속에 축적된 개념을 모아 놓은 것으로, 도메인에 대한 통찰력을 반영하는 용어와 관계로 표현된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 용어와 상호관계는 도메인에 맞게 조정된 언어의 의미체계를 제공하며, 이는 모델을 개발 활동과 결부시키고 코드와 연계하는 데 매우 중요한 연결고리 역할을 한다.&lt;/p&gt;

&lt;p&gt;모델 기반의 의사소통은 UML의 다이어그램으로 한정되어서는 안되고, 모든 의사소통 수단에 스며들 필요가 있다. 이렇게 해야 형식에 얽매이지 않는 의사통을 이룰 수 있고, 개발 문서의 유용성도 향상된다. 또한 코드 자체 혹은 해당 코드의 테스트를 토대로 의사소통 향상을 꾀할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ubiquitous-language-보편-언어&quot;&gt;UBIQUITOUS LANGUAGE (보편 언어)&lt;/h2&gt;

&lt;p&gt;유연하고 풍부한 지식이 담긴 설계를 만들려면 다양한 용도로 사용될 수 있는 팀의 공유 언어와 그 언어에 대한 활발한 실험이 필요하다.&lt;/p&gt;

&lt;p&gt;도메인 전문가는 소프트웨어 개발에 사용되는 기술적인 전문 용어를 이해하는 데 한계가 있지만, 자신이 종사하는 분야의 전문 용어는 다양하게 사용할 것이다. 반면에 개발자는 시스템을 서술적이고 기능적인 용어로 이해하고 토론하겠지만 전문가들의 언어에 담긴 의미를 알지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 언어적으로 어긋남으로써 생기는 문제로 서로가 모호하게 이해하고 이야기하게 되며, 이는 모델의 개념을 혼란스럽게 만들게 되고 해로운 코드 개발, 리팩터링으로 이어진다.&lt;/strong&gt; 즉, 조화가 깨진 신뢰할 수 없는 소프트웨어가 만들어지는 것이다.&lt;/p&gt;

&lt;p&gt;프로젝트에서 사용하는 언어가 분열, 즉 서로가 모호한 단어를 사용하거나 불분명한 문장으로 말하게 된다면 심각한 문제가 발생한다. 지식 탐구를 빈약하게 만들어내고, 도메인의 표현이 코드나 문서에도 담기지 않는 결과가 나타난다.&lt;/p&gt;

&lt;p&gt;프로젝트에서 서로가 의식적인 노력을 기울인다면, 도메인 모델이 서로가 이해하는 공통 언어의 근간을 제공하고 의사소통을 소프트웨어의 구현에 이르기까지 연결시킬 수 있다. &lt;strong&gt;도메인 모델을 공통 언어의 근간으로 사용한다면, 도메인을 원활하게 이해하고 더욱 쓸모 있는 모델을 만들어 낼 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델을 언어의 근간으로 사용하고, 팀 내의 모든 의사소통과 코드, 문서에 이르기까지 해당 언어를 공통으로 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;한-팀-한-언어&quot;&gt;한 팀, 한 언어&lt;/h2&gt;

&lt;p&gt;설계에는 도메인 전문가와 관련없는 기술적인 요소도 있지만, 모델의 핵심은 도메인 전문가의 관심을 끌어야 한다. 도메인 전문가로부터 피드백을 받는 등의 협업을 통해 끊임없이 모델을 검증하면서 정제해나가야 되기 때문이다.&lt;/p&gt;

&lt;p&gt;UBIQUITOUS LANGUAGE가 마련되면, 개발자 간의 대화, 도메인 전문가 간의 논의, 코드 자체에까지 모든 것이 공유된 도메인 모델에서 비롯된 동일한 언어를 기반으로 사용한다.&lt;/p&gt;

&lt;p&gt;이를 통해 프로젝트에 참여한 인원끼리 의사소통을 원활히 할 수 있으며, 모호한 개념이 없는 정제된 풍부한 모델을 바탕으로 신뢰성있는 코드 구현에 도달할 수 있을 것이다.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/25/domain_driven_design_02-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 01 - 지식 탐구</title>
        <description>&lt;h2 id=&quot;용어&quot;&gt;용어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;모델: 어떤 대상을 단순화하고 해석하여 문제를 해결하는 것과 관련된 측면을 추상화한 것&lt;/li&gt;
  &lt;li&gt;도메인: 소프트웨어를 사용하는 대상 영역, 사용자의 활동이나 관심사와 관련되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;모델은 개발하는 데 있어서 사용자의 활동이나 관련된 지식을 선택적으로 단순화하고 의식적으로 구조화한 형태이다. 개발팀은 사용자의 활동과 관련된 지식 체계에 집중해야 되는데, 그 폭이 너무 위압적일 수 있다. 모델은 그러한 부담을 해소하기 위한 도구이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;도메인 모델: 어떤 특정한 다이어그램이 아니라, 다이어그램이 전달하고자 하는 아이디어이다.
    &lt;ul&gt;
      &lt;li&gt;도메인 지식을 엄격하게 구성하고 선택적으로 추상화한 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델링은 가능한 “사실적인” 모델을 만드는 문제가 아니며, 핵심 개념을 포착하고 선택적으로 추상화하여 반영하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도메인-주도-설계에서의-모델의-유용성&quot;&gt;도메인 주도 설계에서의 모델의 유용성&lt;/h2&gt;

&lt;p&gt;도메인 주도 설계에서는 아래의 세 가지 기본적인 쓰임새에 따라 모델을 선택한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;모델과 핵심 설계는 서로 영향을 주며 구체화된다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;모델을 의미있게 만들고, 모델의 분석이 최종 산출물에 적용하게끔 보장하는 것은 &lt;strong&gt;모델과 그 구현 간의 긴밀한 연결&lt;/strong&gt;이다.
        &lt;ul&gt;
          &lt;li&gt;모델과 구현의 연결의 장점으로 계속되는 기능 개선에 도움이 되고 &lt;strong&gt;모델을 이해한 바에 의해 코드를 해석할 수 있다.&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델은 모든 팀 구성원이 사용하는 언어의 중추이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;모델과 구현이 연결되어 있으므로, 개발자나 도메인 전문가 간에 의사소통하는 데에 있어서 제약이 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델은 지식의 정수만을 뽑아낸 것이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;모델은 도메인 지식을 조직화하고 가장 중요한 요소를 구분하는 팀의 합의된 방식이다.&lt;/li&gt;
      &lt;li&gt;모델에는 우리가 용어를 선택하고 개념을 분류하며, 분류한 지식을 서로 연관시킬 때 도메인에 관한 사고방식이 담겨 있다.&lt;/li&gt;
      &lt;li&gt;개발자와 도메인 전문가는 공유 언어를 바탕으로 갖가지 정보를 모델로 만들어낼 때 효과적으로 협업할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어의 본질은 소프트웨어의 사용자를 위해 &lt;strong&gt;도메인과 관련된 문제를 해결하는 능력에 있다.&lt;/strong&gt; 개발자는 업무 지식을 증진하기 위해 &lt;strong&gt;도메인 연구&lt;/strong&gt;에 몰두해야 한다. 또한 모델링 기법을 연마하여 도메인 설계에 통달해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 연구를 통하여 개발자와 도메인 전문가 간의 의사소통을 원활히 한다면, 도메인 전문가는 모델이 의미하는 바와 동작하는 소프트웨어와 모델 간의 관계를 좀더 명확히 이해할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;효과적인-모델링-요소&quot;&gt;효과적인 모델링 요소&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;모델과 구현의 연계&lt;/strong&gt;: 프로토타입을 토대로 구현과 모델의 연결고리를 만들어 개발 반복 주기 내내 유지해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델을 기반으로 하는 언어 정제&lt;/strong&gt;: 도메인 전문가와 개발자가 함께 모델을 정제해나감으로써, 프로젝트가 진행되면서 누구라도 모델에서 바로 용어를 끄집어내어 모델의 구조와 일관되게 문장을 구성하고 의사소통을 할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;풍부한 지식이 담긴 모델 개발&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델의 정제&lt;/strong&gt;: 연속적인 개발 반복 주기를 통해 모델을 계속 정제하여 중요한 개념이 녹아들 수 있도록 해야하며, 불필요한 개념은 제거해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;브레인스토밍과 실험&lt;/strong&gt;: 공통 언어를 통해 모델링 결과에 대한 평가와 시나리오 등을 검토하면서 모델의 타당성 여부를 검증해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;지식-탐구&quot;&gt;지식 탐구&lt;/h2&gt;

&lt;p&gt;업무나 사용자 활동에 대한 도메인 영역을 효과적으로 모델링하기 위해 지식을 면밀히 탐구해야 한다. 수많은 모델을 만들어보고 모든 세부 사항에 들어 맞는 추상적인 개념이 나타나면 초기 도메인 모델이 만들어진 것이다.&lt;br /&gt;
지식 탐구는 혼자서 하는 활동이 아니며, 개발자와 도메인 전문가로 구성된 팀원들이 서로 협업을 해야 한다.&lt;/p&gt;

&lt;p&gt;과거 폭포수 개발 방식에서는 일방적으로 지식이 한 방향으로 흘러간다. 개발자는 업무 지식을 쌓을 기회가 제공되지 않으며 도메인에 숨겨진 원리는 알지 못한 채 애플리케이션에서 수행해야 할 사항만 습득하게 된다. 이는 기초적인 역할만 수행하는 소프트웨어를 만들어낼 뿐, 도메인 전문가의 사고방식과 긴밀히 연결되지 않는다.&lt;/p&gt;

&lt;p&gt;모든 구성원이 함께 모델을 면밀히 만들어 나가면 도메인 전문가의 피드백, 협업을 통해 &lt;strong&gt;도메인 모델을 지속적으로 정제해나갈 수 있다. 이러한 모델은 명료하게 조직화되고 추상화될 수 있으며, 구현을 용이하게 해준다.&lt;/strong&gt; 개발 과정에서 도메인 전문가의 지속적인 관여로 심층적인 업무 지식을 소프트웨어에 반영할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;지속적인-학습&quot;&gt;지속적인 학습&lt;/h2&gt;

&lt;p&gt;모든 팀 구성원이나 개발자, 도메인 전문가들이 함께 참여하는 도메인 모델링을 통해 모두 똑같이 지식을 얻고 의사소통 체계를 공유하며 구현을 거쳐 피드백 고리를 완성하는, 지식 탐구 프로세스를 궤도에 올려야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풍부한-지식이-담긴-설계&quot;&gt;풍부한 지식이 담긴 설계&lt;/h2&gt;

&lt;p&gt;모델에 포착돼 있는 지식은 단순한 명사 찾기 이상이다. 도메인에 관련된 엔티티만큼 업무 활동과 규칙도 도메인에 매우 중요하다. 지식 탐구는 이러한 통찰력을 반영하는 모델을 만들어 낸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;감춰진-개념-추출하기&quot;&gt;감춰진 개념 추출하기&lt;/h3&gt;

&lt;p&gt;선박 화물의 운송 예약을 위한 애플리케이션의 간단한 도메인 모델로 시작하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-14-domain_driven_design_01/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예약 애플리케이션의 책임이 각 Cargo(화물)를 하나의 Voyage(운항)와의 연관관계를 맺고, 그것을 기록/관리하는 것이라 해보자. 아마 애플리케이션에는 다음 메서드가 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBooking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Voyage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderConfirmationSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 해운 산업에서는 선박이 운항 중에 나를 수 있는 화물의 최대치보다 예약을 더 받아들이는 것이 관행이다. 이를 초과예약(overbooking) 이라 한다.&lt;/p&gt;

&lt;p&gt;이 요구사항을 위한 클래스 다이어그램과 코드는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-14-domain_driven_design_01/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBooking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Voyage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxBooking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookedCargoSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxBooking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;–&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderConfirmationSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 중요한 업무 규칙이 애플리케이션 메서드의 보호절로 감춰진다. 이런 코드는 다음과 같은 문제가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;코드가 작성된 대로라면, 업무 전문가가 이 코드를 읽고 규칙을 바로 검증하지 못한다.&lt;/li&gt;
  &lt;li&gt;해당 업무에 종사하지 않고 기술적인 측면만 담당하는 사람은 코드와 요구사항을 결부시키기 어렵다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;설계를 변경하여 이러한 지식을 더 잘 담을 수 있다. 초과예약 규칙은 일종의 정책(policy)로, 전략 패턴을 통해 다르게 구현할 수 있다. 이러한 개념은 도메인 주도 설계의 중요한 동기에 해당한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2019-04-14-domain_driven_design_01/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBooking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Voyage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;overbookingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orderConfirmationSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OverbookingPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllowed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Voyage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cargo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookedCargoSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;voyage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 구현하면 초과예약이 별개의 정책이라는 사실을 코드를 통해 분명히 알 수 있게 되며, 이 규칙의 구현 또한 명시적으로 드러나게 된다. &lt;strong&gt;위의 예와 같이 지식을 보전하고 공유하는 데 도메인 모델과 그에 상응하는 설계를 이용할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이러한 명시적인 설계는 다음과 같은 이점이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;설계를 이러한 수준까지 끌어올리려면 모든 이가 초과예약의 특성을 단순한 계산이 아니라, 별개의 중요한 업무 규칙임을 알아야 한다.&lt;/li&gt;
  &lt;li&gt;프로그래머는 업무 전문가에게 그들이 이해할 수 있는 수준에서 기술적 산출물, 코드까지 보여줄 수 있으며 이를 통해 피드백 고리가 완성된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;심층-모델&quot;&gt;심층 모델&lt;/h2&gt;

&lt;p&gt;유용한 모델은 겉으로 드러나 있는 경우가 거의 없다. 도메인과 애플리케이션의 요구사항을 이해하게 되면서, 처음에 중요하게 생각했던 요소들을 버리거나 관점을 바꾸는, 모델을 정제해나가면서 유용한 모델이 탄생하는 것이다.&lt;/p&gt;

&lt;p&gt;이를 위해 지속적으로 지식 탐구를 도메인 전문가와 같이 진행하면서 모델을 정제해나가야 한다.&lt;/p&gt;

</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/14/domain_driven_design_01-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/14/domain_driven_design_01-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>도메인 주도 설계 00 - 서문</title>
        <description>&lt;h2 id=&quot;도메인-주도-설계&quot;&gt;도메인 주도 설계&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;성공한 프로젝트의 공통적인 특징: 반복적인 설계를 거쳐 발전하고 프로젝트의 일부분이 된 풍부한 &lt;strong&gt;도메인 모델&lt;/strong&gt;이 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;복잡성으로 생기는 한계를 극복하려면, &lt;strong&gt;도메인 로직 설계에 진지하게 접근해야 한다.&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;지속되는 요구사항에 대한 유연한 대응과 기능 확장은 계속 정제되고 표현되는 도메인 모델을 통해 이룰 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;도메인-주도-설계-ddd의-세가지-특징&quot;&gt;도메인 주도 설계 (DDD)의 세가지 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;도메인 그 자체와 도메인 로직에 초점을 맞춘다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;일반적인 데이터중심의 접근법을 탈피하여 순수한 도메인의 모델과 로직에 집중한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;보편적인(ubiquitous) 언어의 사용이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;도메인 전문가와 소프트웨어 개발자 간의 커뮤니케이션 문제를 없애고 상호가 이해할 수 있고 모든 문서와 코드에 이르기까지 동일한 표현과 단어로 단일화된 언어체계를 구축해나가는 과정을 말한다.&lt;/li&gt;
      &lt;li&gt;분석작업과 설계, 그리고 구현에 이르기까지 통일된 방식으로 커뮤니케이션이 가능해진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;소프트웨어 엔티티와 도메인 컨셉트를 가능한 가장 가까이 일치시키는 것이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;분석 모델과 설계가 다르고 또 그것과 코드가 다른 구조가 아니라, 도메인 모델부터 코드까지 항상 함께 움직이는 구조의 모델을 지향하는 것이 DDD의 핵심 원리이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;도메인-로직에-초첨을-맞춤으로써-생기는-장점&quot;&gt;도메인 로직에 초첨을 맞춤으로써 생기는 장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;각기 다른 요구사항에 유연함과 확장 능력을 토대로 대응할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;코드 안에 정제되고 표현되는 도메인 모델을 통해 이룰 수 있다.&lt;/li&gt;
      &lt;li&gt;변경이나 확장이 점점 쉬워지는 구조로 바뀐다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인에 대한 새로운 통찰력을 얻으면서 모델은 깊이가 더해가고 의사소통의 품질도 향상된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;모델링과 코드의 구현이 단절되어서는 안된다. 이러면 도메인을 분석한 내용이 설계에 반영되지 못하는 결과가 발생한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델을 프로젝트에서 일어나는 의사소통의 중심에 놓일 때, 팀원들은 공통 언어를 사용하여 의사소통의 품질을 높이고 의사소통의 결과를 코드에 반영할 수 있게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;복잡성이라는-도전과제&quot;&gt;복잡성이라는 도전과제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;얼마나 복잡한 소프트웨어를 만들어 낼 수 있는가를 결정하는 주요 요인은 &lt;strong&gt;설계 접근법&lt;/strong&gt;에 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;수많은 애플리케이션에서 가장 중요한 복잡성은 사용자의 활동이나 업무에 해당하는 &lt;strong&gt;도메인&lt;/strong&gt; 그 자체이다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;대부분의 소프트웨어 프로젝트는 가장 먼저 &lt;strong&gt;도메인과 도메인 로직에 집중해야 한다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;복잡한 도메인 설계는 &lt;strong&gt;모델&lt;/strong&gt;을 기반으로 해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델은 도메인에 대한 깊은 통찰력과 핵심 개념에 집중한 바를 반영한다. 가치 있는 모델은 곧바로 나타나지 않으며, 먼저 도메인을 깊이 있기 이해해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인을 이해하기 위해서는 원시적인 차원의 모델에 기반을 둔 초기 설계 내용을 구현해본 다음, 그 구현을 반복해서 변형하는 과정을 거쳐야 한다. 새로운 통찰력을 얻을 떄마다 모델은 더욱 풍부한 지식을 반영하게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 설계 요소는 네트워크나 데이터베이스와 같은 기술과 관련이 있지만, 도메인의 복잡성을 제대로 다루지 않으면 기술을 잘 이해하더라도 무용지물이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설계-vs-개발-프로세스&quot;&gt;설계 vs. 개발 프로세스&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;도메인 주도 개발은 &lt;strong&gt;애자일 프로세스&lt;/strong&gt;를 지향한다.
    &lt;ul&gt;
      &lt;li&gt;개발은 반복주기를 토대로 진행되어야 한다.&lt;/li&gt;
      &lt;li&gt;개발자와 도메인 전문가는 밀접한 관계에 있어야 한다.
        &lt;ul&gt;
          &lt;li&gt;도메인 주도 설계는 도메인에 대한 깊은 통찰력과 핵심 개념을 반영한 모델을 만들어내는데, 이는 도메인 전문가와 개발자의 협업의 결과이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 주도 설계를 통한 가장 큰 이익은 도메인 주도 설계 접근법을 적용하고 도메인 모델을 의사소통의 중심에 놓을 때 발생한다. 공통 언어를 통해 상호 의사소통의 품질을 높이고, 결과를 소프트웨어에 반영해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2019/04/14/domain_driven_design_00-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2019/04/14/domain_driven_design_00-post.html</guid>
        
        <category>DDD</category>
        
        <category>Domain</category>
        
        <category>Domain Driven Design</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Effective Java 10 - 예외</title>
        <description>&lt;h1 id=&quot;예외&quot;&gt;예외&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;69-예외는-진짜-예외-상황에만-사용하라&quot;&gt;69. 예외는 진짜 예외 상황에만 사용하라.&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;climb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 무한 루프를 통해 배열을 순회 후 예외가 발생하면 끝을 내는 코드이다. 이렇게 &lt;strong&gt;예외를 일상적인 제어 흐름으로 쓰여선 안된다. 예외는 오직 예외 상황에서만 쓰라고 설계된 것이다.&lt;/strong&gt; 특히 try-catch 문안에 블록 안에 넣으면 JVM이 적용할 수 있는 최적화가 제한될 뿐만 아니라 코드를 헷갈리게 하고 성능을 더 떨어뜨린다. 또한 흐름 제어에 쓰인 예외가 실제 버그를 숨겨 디버깅도 훨씬 어렵게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;잘 설계된 API라면 클라이언트가 정상적인 제어 흐름에서 예외를 사용할 일이 없게 해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;70-복구할-수-있는-상황에는-checked-예외를-프로그래밍-오류에는-unchecked-예외를-사용하라&quot;&gt;70. 복구할 수 있는 상황에는 Checked 예외를, 프로그래밍 오류에는 Unchecked 예외를 사용하라.&lt;/h2&gt;

&lt;p&gt;자바는 문제 상황을 알리는 타입으로 Checked 예외, Unchecked 예외, Error 이렇게 세 가지를 제공하는데 언제 어떤 예외를 사용할지는 지침이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;호출하는 쪽에서 복구하리라 여겨지는 상황이라면 checked 예외를 사용한다.&lt;/strong&gt; 이 것이 checked 예외와 unchecked 예외를 구분하는 규칙이다. checked 예외를 던지면 호출자가 그 예외를 잡아 처리하거나 더 바깥으로 전달하도록 강제하게 된다. 달리 말하면 API 설계자는 API 사용자에게 &lt;strong&gt;checked 예외를 던져 그 상황에서 복구하라고 요구하는 것이다.&lt;/strong&gt; 물론 사용자는 무시할 수도 있지만 이는 보통 좋지 않은 생각이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unchecked 예외와 Error는 프로그램에서 잡을 필요가 없거나 통상적으로 잡지 말아야 한다.&lt;/strong&gt; 프로그램에서 이를 던졌다는 것은 복구가 불가능하거나 더 실행해봐야 득이 될 것이 없다는 뜻이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;프로그래밍 오류에는 unchecked 예외를 사용해야 한다.&lt;/strong&gt; 보통 이런 예외는 전제조건을 만족하지 못했을 경우에 발생한다. 단순히 클라이언트가 API의 명세에 기록된 제약을 지키지 못했을 경우에 발생한다는 것이다.&lt;/p&gt;

&lt;p&gt;어떤 문제가 발생했을 때, 이 상황이 복구할 수 있는지 아니면 프로그래밍 오류인지가 명확히 구분되지는 않는다. 예를 들어 말도 안되는 크기의 배열을 할당해 생긴 프로그래밍 오류일 수도 있고, 자원이 부족해서 발생한 것일 수도 있는 것이다. 만약 자원이 일시적으로만 부족하거나 순간적으로 몰린 것이라면 충분히 복구할 수 있는 상황일 것이다. 따라서 이런 상황이 복구할 수 있는 것인지는 API 설계자의 판단에 달렸다. &lt;strong&gt;복구할 수 있다고 생각되면 checked 예외를, 아니면 unchecked 예외를 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error는 보통 JVM이 자원 부족, 불변식 깨짐으로 인해 더 이상 수행할 수 없을 경우에 발생한다.&lt;/strong&gt; 그러나 Error는 애플리케이션이 던지는 것도 아니고 잡아서도 안된다. 애플리케이션 입장에서는 복구가 가능한 것도 아니기 때문이다. 따라서 Error 클래스를 상속하여 사용하는 일은 없어야 한다.&lt;/p&gt;

&lt;p&gt;Exception, RuntimeException, Error를 상속하지 않는 &lt;strong&gt;throwable&lt;/strong&gt;도 만들 수 있다. 이 것은 암묵적으로 일반적인 checked 예외처럼 다루지만 사용해봤자 이로울 게 없다. throwable은 정상적인 checked 예외와 나을게 없으면서도 API 사용자를 헷갈리게만 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예외도 역시 어떤 메서드라도 정의할 수 있는 완벽한 객체이다.&lt;/strong&gt; 예외의 메서드는 주로 그 예외를 일으킨 상황에 관한 정보를 코드 형태로 전달하는 데 쓰인다. Checked 예외는 일반적으로 복구할 수 있는 조건에 발생하는데, 호출자가 이 예외 상황에서 벗어날 수 있도록 충분한 정보를 제공하는 것이 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;71-필요없는-checked-예외-사용은-피하라&quot;&gt;71. 필요없는 Checked 예외 사용은 피하라.&lt;/h2&gt;

&lt;p&gt;Checked 예외를 싫어하는 자바 프로그래머가 많지만 제대로 활용하면 API와 프로그램의 질을 높일 수 있다. 결과를 코드로 반환하거나 unchecked 예외를 던지는 것과는 달리, &lt;strong&gt;checked 예외는 발생한 문제를 프로그래머가 처리하도록 하여 안정을 높이게끔 해준다.&lt;/strong&gt; 물론 checked 예외를 과하게 사용하면 오히려 쓰기 불편한 API가 된다.&lt;/p&gt;

&lt;p&gt;API를 제대로 사용해도 발생할 수 있는 예외이거나 프로그래머가 의미있는 조치를 취할 수 있는 경우라면 checked 예외를 사용하도록 한다. 둘 중 어디에도 속하지 않는다면 unchecked 예외를 써야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;72-표준-예외를-사용하라&quot;&gt;72. 표준 예외를 사용하라.&lt;/h2&gt;

&lt;p&gt;예외도 표준 라이브러리를 활용하는 것처럼, &lt;strong&gt;이미 있는 것을 재사용하는 것이 좋다.&lt;/strong&gt; 자바 라이브러리는 대부분 API에서 쓰기에 충분한 수의 예외를 제공한다.&lt;/p&gt;

&lt;p&gt;표준 예외를 재사용하면 얻는 게 많다. 그 중 최고는 &lt;strong&gt;API가 다른 사람이 익히고 사용하기 쉬워진다는 점이다.&lt;/strong&gt; 단, &lt;strong&gt;Exception, RuntimeException, Throwable, Error는 직접 재사용하지 말아야 한다.&lt;/strong&gt; 이 클래스들은 추상 클래스라고 생각해야 한다. 이런 예외들은 다른 예외들의 상위 클래스라서 여려 성격들의 예외를 포괄하여 안정적으로 테스트할 수 없다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;예외&lt;/th&gt;
      &lt;th&gt;주요 쓰임&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;IllegalArgumentException&lt;/td&gt;
      &lt;td&gt;허용하지 않는 값이 인수로 건네졌을 때, 단 null은 NullPointerException으로 처리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IllegalStateException&lt;/td&gt;
      &lt;td&gt;객체가 메서드를 수행하기에 적절하지 않은 상태&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NullPointerException&lt;/td&gt;
      &lt;td&gt;null을 허용하지 않는 메서드에 null을 넘겼을 경우&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IndexOutOfBoundsException&lt;/td&gt;
      &lt;td&gt;인덱스가 범위를 넘어섰을 때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ConcurrentModificationException&lt;/td&gt;
      &lt;td&gt;허용하지 않는 동시 수정이 발견되었을 때&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UnsupportedOperationException&lt;/td&gt;
      &lt;td&gt;호출한 메서드를 해당 객체가 지원하지 않을 경우&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위에서 IllegalArgumentException과 IllegalStateException 예외의 주요 쓰임이 상호 배타적이 아니라서 헷갈릴 때가 있는데, 일반적인 규칙은 이렇다. &lt;strong&gt;인수 값이 무엇이든 상관없이 실패했을 경우라면 IllegalStateException을, 그렇지 않다면 IllegalArgumentException을 사용하도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 어떤 예외에 대한 정보를 더 제공하고 싶다면 이런 예외를 확장해서 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;73-추상화-수준에-맞는-예외를-던져라&quot;&gt;73. 추상화 수준에 맞는 예외를 던져라.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;수행하는 일과 상관없는 예외가 튀어나오면 당황스럽다.&lt;/strong&gt; 메서드가 저수준 예외를 처리하지 않고 바깥으로 전파해버릴 때 종종 일어나는 일이다. 이는 내부 구현 방식을 드러낼 뿐만 아니라 윗 계층의 API를 오염시킨다. 특히 윗 계층에서는 전혀 상관없는 예외를 처리하기 위해 알 필요도 없는 클래스나 인터페이스, 메서드를 사용해야 될 수도 있다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하기 위해서는 &lt;strong&gt;상위 계층에서는 저수준 예외를 잡아 자신의 추상화 수준에 맞는 예외로 바꿔 던져야 한다.&lt;/strong&gt; 이를 &lt;strong&gt;예외 번역(Exception Translation)&lt;/strong&gt; 이라고 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LowerLevelException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HigherLevelException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예외를 번역할 때, 저수준의 예외가 디버깅에 도움이 된다면 &lt;strong&gt;예외 연쇄(Exception Chaining)&lt;/strong&gt;을 사용할 수 있다. 예외 연쇄란 문제의 근본 원인(clause)인 저수준 예외를 고수준 예외에 실어보내는 것이다. 그러면 필요할 때 &lt;strong&gt;Throwable의 getClause&lt;/strong&gt; 메서드를 통해 저수준 예외를 꺼내어 참조할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LowerLevelException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HigherLevelException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;고주순 예외의 생성자에서는 상위 클래스의 생성자에게 이 저수준 예외를 건네주어 최종적으로 Throwable 생성자까지 건네지게 해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HigherLevelException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HigherLevelException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;무턱대로 예외를 전파하는 것보다는 예외 번역이 우수하지만 그렇다고 남용해서는 곤란하다.&lt;/strong&gt; 가능하다면 저수준 메서드가 반드시 성공하도록 하게하여 아래 계층에서는 예외가 발생하지 않도록 하는 것이 최선이다. 아니면 상위 계층에서 그 예외를 조용히 처리하여 API 호출자에게 전파하지 않는 방법도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;74-메서드가-던지는-모든-예외를-문서화하라&quot;&gt;74. 메서드가 던지는 모든 예외를 문서화하라.&lt;/h2&gt;

&lt;p&gt;메서드가 던질 가능성이 있는 모든 예외는 문서화하는 것이 좋다. checked 예외는 unchecked 예외든, 어떤 메서드이든지 간에 모두 마찬가지이다. 문서화에는 자바 독의 @throws 태그를 통해 문서화할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;75-예외의-상세-메시지에-실패-관련-정보를-담으라&quot;&gt;75. 예외의 상세 메시지에 실패 관련 정보를 담으라.&lt;/h2&gt;

&lt;p&gt;예외를 잡지 못해 프로그램이 실패할 경우 자바 시스템은 그 예외의 스택 추적(stack trace) 정보를 자동으로 출력한다. 스택 추적은 예외 객체의 &lt;strong&gt;toString&lt;/strong&gt; 메서드를 호출해서 얻는 문자열이다. 이런 정보는 예외 발생했을 당시의 상황을 캐치해낼 수 있는 유일한 정보이다. 따라서 &lt;strong&gt;실패 원인에 관한 정보를 가능한 예외 객체에 많이 담아 반환하는 일은 아주 중요하다.&lt;/strong&gt; 특히 checked 예외일 경우, 클라이언트 쪽에서 정보를 참고하여 복구를 쉽게 할 수 있도록 별도의 getter를 통해 정보에 접근하도록 하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;실패 순간을 포착하려면 발생한 예외에 관여된 모든 매개변수와 필드의 값을 실패 메시지에 담아야 한다.&lt;/strong&gt; 관련된 데이터는 모두 담아야 겠지만 장황할 필요는 없다. 보통 문제를 분석하는 사람은 스택 추적 뿐만 아니라 관련 문서와 소스 코드도 들여다 보기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예외의 상세 메시지와 최종 사용자에게 보여줄 오류 메시지를 혼동해서는 안된다.&lt;/strong&gt; 최종 사용자에게는 친절한 안내 메시지를 보여주어야 하고, 예외 메시지는 가독성보다는 담긴 내용이 중요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;76-가능한-실패-원자적으로-만들라&quot;&gt;76. 가능한 실패 원자적으로 만들라.&lt;/h2&gt;

&lt;p&gt;작업 도중 예외가 발생하더라도 그 객체는 여전히 정상적으로 사용할 수 있는 상태라면 더욱 멋질 것이다. 특히 checked 예외일 경우 클라이언트가 오류 상태를 복구할 수 있을테니 더욱 유용할 것이다. &lt;strong&gt;호출된 메서드가 실패하더라도 관련 객체는 메서드 호출 전 상태로 유지하는 것이 좋다.&lt;/strong&gt; 이를 &lt;strong&gt;실패 원자적(failure-atomic)&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;메서드를 실패 원자적으로 만드는 방법은 다양하다. 가장 간단한 방법은 &lt;strong&gt;객체를 불변으로 만드는 것이다. 불변 객체는 태생적으로 실패 원자적이다.&lt;/strong&gt; 메서드가 실패하면 새로운 객체가 만들어질 수는 있지만 기존 객체가 불안정한 상태로 빠지는 일은 결코 없다.&lt;/p&gt;

&lt;p&gt;가변 객체의 메서드를 실패 원자적으로 만드는 법은 작업 수행에 앞서 &lt;strong&gt;매개변수의 유효성을 검사하는 것이다.&lt;/strong&gt; 객체의 내부 상태를 변경하기 전에 잠재적 예외의 가능성 대부분을 걸러낼 수 있는 방법이다. 이와 비슷하게, &lt;strong&gt;실패할 가능성이 있는 모든 코드를, 객체의 상태를 바꾸는 코드보다 앞에 배치하는 방법도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;실패 원자성을 얻는 세 번째 방법은 &lt;strong&gt;객체의 임시 복사본에서 작업을 수행 후, 작업이 완료되면 원래 객체와 교체하는 것이다.&lt;/strong&gt; 마지막으로는 작업 도중 발생하는 실패를 가로채어 원래 상태로 되돌리는 복구 코드를 작성하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;실패 원자성은 항상 달성할 수 있는 것은 아니다. 특히 두 스레드가 동기화 없이 같은 객체를 동시에 수정한다면 객체의 일관성이 깨질 수 있다. 이 때 발생하는 &lt;strong&gt;ConcurrentModificationException&lt;/strong&gt; 예외를 잡았다고 해서 그 객체아 여전히 쓸 수 있는 상태라고 봐서는 안된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error는 애초에 애플리케이션 레벨에서 복구할 수 있는 것이 아니므로 실패 원자성을 고려할 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;77-예외를-무시하지-말라&quot;&gt;77. 예외를 무시하지 말라.&lt;/h2&gt;

&lt;p&gt;API 설계자가 메서드 선언에 예외를 명시하고 문서화하는 것은 그 메서드를 사용할 때 적절한 조치를 취하라는 것이다. 예외 발생시 아무것도 하지 않고 무시할 경우 &lt;strong&gt;예외가 존재할 이유가 사라진다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/03/02/effective_java_10-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/03/02/effective_java_10-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 09 - 일반적인 프로그래밍 원칙</title>
        <description>&lt;h1 id=&quot;일반적인-프로그래밍-원칙&quot;&gt;일반적인 프로그래밍 원칙&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;57-지역변수의-범위를-최소화하라&quot;&gt;57. 지역변수의 범위를 최소화하라.&lt;/h2&gt;

&lt;p&gt;이 원칙은 클래스와 멤버의 접근 권한을 최소화하라는 것과 비슷하다. &lt;strong&gt;지역변수의 유효범위를 최소로 줄이면 코드 가독성과 유지보수성이 높아지고 오류 가능성은 낮아진다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;지역변수의 범위를 줄이는 가장 강력한 기법은 “가장 처음 쓰일 때 선언하기”이다.&lt;/strong&gt; 사용하려면 멀었는데 미리 변수를 선언부터 해두면, 코드가 어수선해져 가독성이 떨어진다. 지역변수를 생각없이 선언하다 보면 &lt;strong&gt;변수가 실제로 쓰이는 범위보다 너무 앞서 선언하건ㅏ, 다 쓴 뒤에도 여전히 살아 있게 되기 쉽다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;거의 모든 지역변수는 선언과 동시에 초기화해야 한다.&lt;/strong&gt; 초기화에 필요한 정보가 충분치 않다면 충분해질 때까지 선언을 미루어야 한다.&lt;/p&gt;

&lt;p&gt;지역변수 범위를 최소화하는 마지막 방법은 &lt;strong&gt;메서드를 작게 유지하고 한 가지 기능에 집중하는 것이다.&lt;/strong&gt; 한 메서드에서 여러 기능을 처리한다면 그중 한 기능과 연관된 지역변수라도, 다른 기능을 수행하는 코드에서 접근할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;58-전통적인-for-문보다는-for-each-문을-사용하라&quot;&gt;58. 전통적인 for 문보다는 for-each 문을 사용하라.&lt;/h2&gt;

&lt;p&gt;다음은 전통적인 for 문으로 컬렉션을 순회하는 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;반복자와 인덱스 변수는 모두 코드를 지저분하게 할 뿐이고, 이 코드에서 정작 필요한 것은 원소들뿐이다.&lt;/strong&gt; 이처럼 쓰이는 요소 종류가 늘어나면 오류가 생길 가능성이 커지며 변수를 잘못 사용할 틈새가 넓어진다. 또한 컬렉션이냐 배열이냐에 따라 위 코드처럼 코드 형태가 상당히 달라진다.&lt;/p&gt;

&lt;p&gt;이상의 문제는 for-each 문을 사용하면 모두 해결된다. &lt;strong&gt;반복자와 인덱스 변수를 사용하지 않으니 코드가 깔끔해지고 오류가 날 일도 없다.&lt;/strong&gt; 하나의 코드 형태로 컬렉션과 배열을 모두 처리할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컬렉션을 중첩해서 순회해야 한다면 for-each 문의 이점이 더 커진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLUB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIAMOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEART&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPADE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEUCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEVEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EIGHT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUEEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 버그&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 NoSuchElementException 예외가 발생하는데, 이는 바깥 컬렉션 (suits)의 반복자에서 next 메서드가 너무 많이 불리기 때문이다. 안쪽 반복문에서 ranks 컬렉션의 수만큼 suits의 반복자 next 메서드가 호출된다.&lt;/p&gt;

&lt;p&gt;이를 회피하기 위해서는 다음과 같이 suits 컬렉션의 현재 반복자를 중간에 저장해두어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 코드가 깔끔하지 않다. 대신 for-each 문을 사용함으로써 이 문제는 간단히 해결된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ranks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;deck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드가 놀랄만큼 간결해지지만, 모든 상황에서 for-each 문을 사용할 수 있는 것은 아니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파괴적인 필터링: 컬렉션을 순회하면서 선택된 원소를 제거할 경우 반복자의 remove 메서드를 호출해야 한다.&lt;/li&gt;
  &lt;li&gt;변형: 리스트나 배열을 순회하면서 그 원소의 값 일부 혹은 전체를 변경해야 한다면 반복자나 인덱스를 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;병렬 반복: 여러 컬렉션을 병렬적으로 순회해야 한다면 각각의 반복자와 인덱스 변수를 사용하여 명시적으로 제어해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for-each 문은 컬렉션과 배열은 물론 &lt;strong&gt;Iterable&lt;/strong&gt; 인터페이스를 구현한 객체라면 무엇이든 순회 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Iterable을 처음부터 구현하기는 힘들지만 &lt;strong&gt;원소들의 묶음을 표현하는 타입을 정의해야 한다면 Iterable을 구현하는 것도 고려할만 하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;59-라이브러리를-익히고-사용하라&quot;&gt;59. 라이브러리를 익히고 사용하라.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;표준 라이브러리를 적극적으로 활용하면 그 코드를 작성한 전문가의 지식과 앞서 사용한 프로그래머들의 경험을 활용할 수 있다.&lt;/strong&gt; 또한 핵심적인 일과 크게 관련없는 문제를 해결하느라 시간을 허비하지 않아도 된다. 그리고 표준 라이브러리는 성능이 지속적으로 개선되고, 기능도 점점 많아진다는 이점이 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 이렇게 표준 라이브러리를 활용한 코드는 많은 사람들에게 읽히기 쉬운 낯익은 코드가 될 수 있다는 점이다. 자연스럽게 유지보수하기 좋고 재활용하기 쉬운 코드가 된다.&lt;/p&gt;

&lt;p&gt;자바 프로그래머라면 적어도 &lt;strong&gt;java.lang, java.util, java.io&lt;/strong&gt;와 그 하위 패키지들에는 익숙해져야 한다. 아주 특별한 기능이 아니라면 누군가가 이미 라이브러리 형태로 구현해놓았을 가능성이 크다. 그런 라이브러리가 있다면, 쓰면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;60-정확한-답이-필요하다면-float와-double은-피하라&quot;&gt;60. 정확한 답이 필요하다면 float와 double은 피하라.&lt;/h2&gt;

&lt;p&gt;float와 double 타입은 과학과 공학 계산용으로 설계되었다. 이진 부동소수점 연산에 쓰이며, 넓은 범위의 수를 빠르게 정밀한 &lt;strong&gt;‘근사치’&lt;/strong&gt;로 계산하도록 설계되었다. 따라서 &lt;strong&gt;정확한 결과가 필요할 경우 사용하면 안된다.&lt;/strong&gt; 대신에 BitDecimal이나 int 혹은 long을 사용해 결과를 구해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;61-박싱된-기본-타입보다는-일반-기본-타입을-사용하라&quot;&gt;61. 박싱된 기본 타입보다는 일반 기본 타입을 사용하라.&lt;/h2&gt;

&lt;p&gt;자바의 데이터 타입은 크게 두 가지로 나뉠 수 있는데, int및 double, boolean과 같은 기본 타입과 String, List와 같은 참조 타입으로 나눌 수 있다. 그리고 각 기본 타입에 대해 대응하는 참조 타입이 있는데 이를 &lt;strong&gt;박싱된 기본 타입&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;기본 타입과 박싱된 기본 타입의 주된 차이는 크게 세 가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기본 타입은 값만 가지고 있으나, 박싱된 기본 타입은 값에 더해 식별성이라는 속성을 지닌다.
    &lt;ul&gt;
      &lt;li&gt;달리 말하면 박싱된 기본 타입의 두 인스턴스는 값이 같아도 서로 다르다고 식별될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;언제나 기본 타입의 값은 유효한 반면, 박싱된 기본 타입은 null을 가질 수도 있다.&lt;/li&gt;
  &lt;li&gt;기본 타입이 박싱된 기본 타입에 비해 시간과 메모리 사용면에서 더 효율적이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다음 예를 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;naturalOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 Integer 값을 오름차순으로 정렬하는 비교자인데, 심각한 결함이 존재한다. &lt;strong&gt;naturalOrder.compare(new Integer(42), new Integer(42))&lt;/strong&gt;의 값을 출력해보면 값이 같으므로 0이 리턴해야 될 것 같지만, 실제로는 1을 리턴한다.&lt;/p&gt;

&lt;p&gt;이의 원인은 &lt;strong&gt;(i == j)&lt;/strong&gt; 비교문에 있다. 이 비교문에서 두 객체 참조의 &lt;strong&gt;식별성&lt;/strong&gt;을 검사하게 된다. 같은 값이지만 서로 다른 인스턴스이므로 이 비교의 결과는 false이며, 따라서 1을 반환하는 것이다. &lt;strong&gt;이 처럼 박싱된 기본 타입에 == 연산자를 사용하면 오류가 발생할 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 코드도 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;equals&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드의 결과로 NullPointerException 예외가 발생한다. 원인은 이 i 변수가 초기화되지 않은 Integer이며 다른 참조 타입과 마찬가지로 null이라는 데 있다. &lt;strong&gt;기본 타입과 박싱된 기본 타입을 혼용한 연산에서는 박싱된 기본 타입의 박싱이 자동으로 풀리는데,&lt;/strong&gt; null 참조를 언박싱하면 NullPointerException 예외가 발생한다.&lt;/p&gt;

&lt;p&gt;또한 기본 타입과 연산을 혼용시, 언박싱이 자동으로 이루어지므로 성능이 느려질 수도 있다. 따라서 박싱된 기본 타입 대신 일반 기본 타입을 사용할 수 있다면 일반 기본 타입을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;박싱된 기본 타입을 사용해야 하는 경우는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;컬렉션의 원소나 키, 값으로 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;컬렉션은 기본 타입을 담을 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;매개변수화 타입이나 매개변수화 메서드의 타입 매개변수로 사용할 경우
    &lt;ul&gt;
      &lt;li&gt;자바 언어는 타입 매개변수로 일반 기본 타입은 지원하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리플렉션을 통해 메서드를 호출할 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;63-문자열-연결은-느리니-주의하라&quot;&gt;63. 문자열 연결은 느리니 주의하라.&lt;/h2&gt;

&lt;p&gt;문자열 연결 연산자 (+)는 여러 문자열을 하나로 합쳐주는 편리한 수단이다. 한 줄짜리 출력값 또는 크기가 고정된 객체의 문자열 표현을 만들 때는 괜찮지만, 남용시 성능 저하를 감내하기 어렵다. &lt;strong&gt;문자열 연결 연산자로 n개의 문자열을 잇는 시간은 n^2에 비례한다.&lt;/strong&gt; 문자열은 불변이라서 두 문자열 연결시 양쪽의 내용을 모두 복사해야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;따라서 성능을 위해서는 문자열 연결시 String 대신 &lt;strong&gt;StringBuilder&lt;/strong&gt;를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;64-객체는-인터페이스를-통해-참조하라&quot;&gt;64. 객체는 인터페이스를 통해 참조하라.&lt;/h2&gt;

&lt;p&gt;메서드의 매개변수 타입으로 클래스가 아니라 인터페이스를 사용해야 된다고 했는데, 이 뿐만 아니라 &lt;strong&gt;객체 또한 클래스가 아닌 인터페이스로 참조하는 것이 좋다.&lt;/strong&gt; 적합한 인터페이스가 있다면 &lt;strong&gt;매개변수 뿐만 아니라 반환 값, 변수, 필드를 전부 인터페이스로 선언하는 것이다.&lt;/strong&gt; 객체의 실제 클래스를 사용해야 할 상황은 오직 생성자로 생성할 때 뿐이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인터페이스를 타입으로 사용하는 습관을 길러두면 프로그램이 훨씬 유연해진다.&lt;/strong&gt; 나중에 구현 클래스를 교체하고자할 경우, 그저 새 클래스의 생성자를 호출해주기만 하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 사용할만한 인터페이스 타입이 없다면 클래스의 계층구조 중 필요한 기능을 만족하는 가장 덜 구체적인 (상위의) 클래스를 타입으로 사용하도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;65-리플렉션보다는-인터페이스를-사용하라&quot;&gt;65. 리플렉션보다는 인터페이스를 사용하라.&lt;/h2&gt;

&lt;p&gt;리플레션 기능을 사용하면 프로그램에서 임의의 클래스에 접근이 가능하다. 생성자 및 메서드, 필드를 조작할 수도 있다.&lt;/p&gt;

&lt;p&gt;그러나 리플렉션은 다음 단점이 존재한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;컴파일타입 타입 검사가 주는 이점을 하나도 누릴 수 없다.&lt;/li&gt;
  &lt;li&gt;리플렉션을 이용하면 코드가 장황하고 지저분해진다.&lt;/li&gt;
  &lt;li&gt;성능이 느리다.
    &lt;ul&gt;
      &lt;li&gt;리플렉션을 통한 메서드 호출은 일반적인 메서드 호출보다 훨씬 느리다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;리플렉션은 아주 제한된 형태로만 사용해야 그 단점을 피하고 이점을 취할 수 있다.&lt;/strong&gt; 컴파일 타임에 이용할 수 없는 클래스를 사용해야 하는 프로그램은 적절한 인터페이스나 상위 클래스를 이용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;66-네이티브-메서드는-신중히-사용하라&quot;&gt;66. 네이티브 메서드는 신중히 사용하라.&lt;/h2&gt;

&lt;p&gt;자바 네이티브 인터페이스 (JNI)는 자바 프로그램이 네이티브 메서드를 호출하는 기술이다. 여기서 네이티브 메서드란 &lt;strong&gt;C, C++과 같은 네이티브 프로그래밍 언어로 작성한 메서드를 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;네이티브 메서드는 플랫폼 특화된 기능을 사용하거나, 네이티브 코드로 작성된 라이브러리를 사용할 경우 또는 성능 개선을 목적으로 성능에 결정적인 영향을 주는 영역만 따로 네이티브 언어로 작성하는 경우이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;성능을 개선할 목적으로 네이티브 메서드를 사용하는 것은 거의 권장하지 않는다.&lt;/strong&gt; JVM은 그동안 엄청난 속도로 발전해 일반 자바코드로도 충분한 성능을 보여주며, 네이티브 메서드는 안전하지도 않다. 이식성이 낮고 디버깅도 어렵다. 또한 가비지 컬렉터가 네이티브 메모리를 자동 회수하지도 못하며 추적도 못한다. 마지막으로 네이티브 메서드와 자바 코드 사이에 접착 코드 (glue code)를 작성해야 하는데 귀찮은 작업이기도 하고 가독성도 떨어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;67-최적화는-신중히-하라&quot;&gt;67. 최적화는 신중히 하라.&lt;/h2&gt;

&lt;p&gt;대부분의 최적화는 좋은 결과보다는 해로운 결과로 이어지기 쉽다. 빠르지도 않고 제대로 동작하지도 않으면서 유지보수하기는 어려운 코드를 생산하기 쉽다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;성능 때문에 견고한 구조를 희생하면 안된다. 빠른 프로그램보다는 좋은 프로그램을 작성해야 한다.&lt;/strong&gt; 신중하게 설계하여 깨끗하고 명확하고 멋진 구조를 갖춘 프로그램을 완성한 다음에야 최적화를 고려해볼 차례가 된다.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/03/01/effective_java_09-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/03/01/effective_java_09-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 08 - 메서드</title>
        <description>&lt;h1 id=&quot;메서드&quot;&gt;메서드&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;49-매개변수가-유효한지-검사하라&quot;&gt;49. 매개변수가 유효한지 검사하라.&lt;/h2&gt;

&lt;p&gt;메서드와 생성자의 대부분은 값이 특정 조건을 만족해야 한다. 이러한 제약은 &lt;strong&gt;반드시 문서화해야 하며, 메서드 몸체가 시작되기 전에 유효한지 검사해야 한다.&lt;/strong&gt; 이는 &lt;strong&gt;“오류는 가능한 빨리 (발생한 곳에서) 잡아야 한다”&lt;/strong&gt;는 일반 원칙의 사례이기도 하다.&lt;/p&gt;

&lt;p&gt;메서드 몸체가 시작되기 전에 매개변수를 확인하여 잘못된 값이 넘어왔을 때 즉각적이고 깔끔한 방식으로 예외를 던질 수 있다.&lt;/p&gt;

&lt;p&gt;매개변수 검사를 제대로 하지 않는다면 몇 가지 문제가 발생할 수 있다. 메서드가 수행되는 중간에 모호한 예외를 던질 수 있으며, 더 나쁜 상황은 메서드가 잘 수행되었는데 잘못된 결과를 반환할 수도 있다. 또한 메서드 수행 후 어떤 객체를 이상한 상태로 만들어 미래의 알 수 없는 시점에 이 메서드와는 관련 없는 오류를 낼 수도 있다.&lt;/p&gt;

&lt;p&gt;public과 protected 메서드는 매개변수 값이 잘못되었을 때 던지는 예외를 문서화해야 한다. 이는 &lt;strong&gt;@throws&lt;/strong&gt; 자바독 태그를 사용하면 된다. 제약을 문서화한다면 그 제약을 어겼을 때 발생하는 예외도 함께 기술해야 한다.&lt;/p&gt;

&lt;p&gt;공개되지 않은 메서드라면 메서드가 호출되는 상황을 통제할 수 있다. &lt;strong&gt;오직 유효한 값이 넘겨지리라는 것을 보증할 수 있고 그렇게 해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;50-적시에-방어적-복사본을-만들라&quot;&gt;50. 적시에 방어적 복사본을 만들라.&lt;/h2&gt;

&lt;p&gt;API나 클래스를 설계할 때는 그것을 사용하는 &lt;strong&gt;클라이언트가 불변식을 깨드리려 혈안이 되어 있다고 가정하고 방어적으로 프로그래밍해야 한다.&lt;/strong&gt; 어떠한 경우든 적절치 않은 클라이언트로부터 클래스를 보호하는데 충분한 시간을 투자하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;어떤 객체든 그 객체의 허락없이는 외부에서 내부를 수정하는 일은 불가능하다. 하지만 주의를 기울이지 않으면 자기도 모르게 내부를 수정하도록 하는 경우가 생긴한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; after &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;얼핏 이 클래스는 불변 클래스로 보이지고, 시작 시각이 종료 시각보다 늦을 수 없다는 불변식이 어렵지 않게 지켜질 것 같다. 그러나 &lt;strong&gt;Date가 가변이라는 사실&lt;/strong&gt;을 이용하면 그 불변식을 깨뜨릴 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// p의 내부를 수정&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다행히 자바 8 이후라면 쉽게 해결할 수 있다. Date 대신에 불변인 &lt;strong&gt;Instant(혹은 LocalDateTime, ZonedDateTime)&lt;/strong&gt;를 사용하면 된다. &lt;strong&gt;Date는 낡은 API이니 새로운 코드를 작성할 떄는 더 이상 사용하면 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;외부 공격으로부터 Period 인스턴스의 내부를 보호하려면 &lt;strong&gt;생성자에서 받은 가변 매개변수 각각을 방어적으로 복사해야 한다.&lt;/strong&gt; 그런 다음 Period 인스턴스 안에서는 원본이 아닌 복사본을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;가 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;보다 늦다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 생성자를 작성하면 앞서의 공격은 위협이 되지 않는다. &lt;strong&gt;매개변수의 유효성을 검사하기 전에 방어적 복사본을 만들고, 이 복사본으로 유효성을 검사하는 것에 주목해야 한다.&lt;/strong&gt; 순서가 부자연스러워 보이지만 반드시 이렇게 작성해야 한다. 멀티스레딩 환경이라면 원본 객체의 유효성을 검사 후 복사본을 만드는 그 찰나의 취약한 순간에 다른 스레드가 원본 객체를 수정할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;방어적 복사에 Date의 &lt;strong&gt;clone 메서드를 사용하지 않는 점에도 주목하자.&lt;/strong&gt; Date는 final이 아니므로 clone 메서드를 Date가 정의한 것이 아닐 수 있다. clone 메서드가 악의를 가진 하위 클래스의 인스턴스를 반환할 수도 있다. 하위 클래스가 start, end 인스턴스 필드의 참조를 따로 저장해두었다가 다시 접근할 수도 있다. 이런 공격을 막기 위해 &lt;strong&gt;매개변수가 제 3자에 의해 확장될 수 있는 타입이라면 방어적 복사본을 생성시 clone을 사용해서는 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아직 Period 인스턴스는 변경이 가능하다. 접근자 메서드가 내부의 가변 정보를 그대로 드러내기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Period&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 내부 변경&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 번째 공격을 막아내려면 단순히 접근자가 가변 필드의 방어적 복사본을 반환하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로운 접근자까지 갖추면 Period는 완전한 불변이 된다. 생성자와는 달리 &lt;strong&gt;접근자 메서드에는 방어적 복사에 clone을 사용해도 된다.&lt;/strong&gt; Period가 가진 Date 객체는 java.util.Date 임이 확실하기 때문이다.&lt;/p&gt;

&lt;p&gt;매개변수를 방어적으로 복사하는 목적이 불변 객체를 만들기 위해서만은 아니다. 메서드든 생성자든 클라이언트가 제공한 &lt;strong&gt;객체의 참조를 보관해야 할 때면 항시 그 객체가 잠재적으로 변경될 수 있는지를 생각해야 한다.&lt;/strong&gt; 확신할 수 없다면 복사본을 만들어 저장해야 한다.&lt;/p&gt;

&lt;p&gt;내부 객체를 클라이언트에 돌려줄 떄도 방어적 복사본을 만드는 이유도 마찬가지이다. 안심할 수 없다면 방어적 복사를 해야 한다. 길이가 1 이상인 배열은 무조건 가변임을 잊지 말자.&lt;/p&gt;

&lt;p&gt;방어적 복사는 성능 저하가 따르고, 또 항상 쓸 수 있는 것도 아니다. 호출자가 컴포넌트 내부를 수정하지 않는다고 확신할 수 있다면 생략할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;51-메서드-시그니처를-신중히-설계하라&quot;&gt;51. 메서드 시그니처를 신중히 설계하라.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;메서드 이름은 신중히 짓자.&lt;/strong&gt; 항상 표준 명명 규칙을 따르고 이해할 수 있으며 같은 패키지에 속한 다른 이름들과 일관되게 지어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;편의 메서드를 너무 많이 만들지 말자.&lt;/strong&gt; 모든 메서드는 각각 자 자신의 소임을 다해야 한다. 메서드가 너무 많은 클래스는 익히고, 사용하고, 문서화하고 테스트하고 유지보수하기 힘들다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매개변수 목록은 짧게 유지하자.&lt;/strong&gt; 4개 이하가 좋다. 특히 &lt;strong&gt;같은 타입의 매개변수 여러 개가 연달아 나오는 경우가 특히 해롭다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;과하게 긴 매개변수 목록을 줄이기 위한 방법은 3가지가 있다.
&lt;strong&gt;여러 메서드로 쪼갠 후 쪼갠 메서드 각각은 원래 매개변수 목록의 부분집합을 받도록 한다.&lt;/strong&gt; 메서드가 너무 많아질 수 있지만 &lt;strong&gt;직교성(orthogonality)&lt;/strong&gt;를 높여 오히려 메서드 수를 줄여주는 효과도 있다. java.util.List 인터페이스가 그 예이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 리스트에서 특정 범위의 부분 리스트에서 특정 값의 인덱스를 찾는 것은&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 다음과 같이 subList와 indexOf 메서드의 조합으로 가능하다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 설계 영역에서 직교성이 높다라는 것은 &lt;strong&gt;공통점이 없는 기능들이 잘 분리되어 있다.&lt;/strong&gt; 혹은 &lt;strong&gt;기능을 원자적으로 쪼개 제공한다.&lt;/strong&gt; 정도로 해석할 수 있다. 위의 subList와 indexOf 메서드는 서로 관련이 없다. 서로 관련없는 기능을 개별 메서드로 제공하면 직교성이 높다고 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;직교성이 높다라는 것이 오히려 메서드 수를 줄여주는 효과가 있다는 뜻은 &lt;strong&gt;기본 기능에 충실한 API를 설계해놓으면 아무리 복잡한 기능도 조합하여 구현함으로써 구현해야할 메서드의 개수가 줄어든다는 것이다.&lt;/strong&gt; 예를 들어 기본 기능 3개로 조합할 수 있는 기능을 7가지가 된다. 기능을 원자적으로 쪼개다보면 자연스럽게 코드 중복이 줄어들고 결합성이 낮아져 코드를 수정하기 수월해진다. 테스트하기 쉬워짐은 물론이다. 일반적으로 직교성이 높은 설계는 가볍고 구현하기 쉽고 유연하면서 강력하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;그렇다고 너무 쪼개면 안되고 다루는 &lt;strong&gt;개념의 추상화 수준에 맞추어 조절해야 한다.&lt;/strong&gt; 특정 조합의 패턴이 자주 사용되거나 최적화하여 성능을 개선할 수 있다면 직교성이 낮아지더라도 편의 기능 하나로 제공하는 편이 나을 수 있다. 직교성은 절대적인 가치라기 보다는 &lt;strong&gt;철학과 원칙을 가지고 일관되게 적용해야 하는 설계 특성이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;두 번째로 매개변수를 줄일 수 있는 방법은 &lt;strong&gt;매개변수 여러 개를 묶어주는 도우미 클래스를 만드는 것이다.&lt;/strong&gt; 특히 잇따른 매개변수 몇 개를 하나의 독립된 개념으로 볼 수 있을 때 추천한다.&lt;/p&gt;

&lt;p&gt;세 번째는 객체 생성 사용에 필요한 &lt;strong&gt;빌더 패턴&lt;/strong&gt;을 메서드 호출에 응용하는 것이다. 이 기법은 매개변수가 많은 데 그 중 일부는 생략해도 되는 경우가 있으며 도움이 된다. 모든 매개변수를 하나로 추상화한 객체를 정의하고 클라이언트에서는 setter를 통해 실제 매개변수를 설정 후 호출하도록 하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;매개변수의 타입으로는 클래스보다는 인터페이스가 낫다.&lt;/strong&gt; 인터페이스 대신 클래스를 사용하면 클라이언트게 특정 구현체만 사용하도록 강제하는 꼴이 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;boolean 보다는 원소 2개짜리의 열거 타입이 매개변수 타입에 적합하다.&lt;/strong&gt; 열거 타입을 사용하면 코드 읽기가 쉬워지고 나중에 선택지를 더 추가할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;52-다중-정의-overloading은-신중히-사용하라&quot;&gt;52. 다중 정의 (Overloading)은 신중히 사용하라.&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CollectionClassifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;집합&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;리스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;그 외&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 IDE를 사용해봐도 알겠지만, &lt;strong&gt;Collection&amp;lt;?&amp;gt; 타입의 매개변수를 받는 메서드만 호출된다.&lt;/strong&gt; 이유는 오버로딩된 메서드를 선택하는 것은 컴파일타임에 정해지기 때문이다. main 메서드 for문의 c는 항상 Collection&amp;lt;?&amp;gt; 타입이다. 런타임에는 달라지겠지만 호출할 메서드를 선택하는 데는 영향을 주지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;재정의(Overriding)한 메서드는 동적으로 선택되고, 다중정의(Overloading)한 메서드는 정적으로 선택되므로 주의가 필요하다.&lt;/strong&gt; 메서드를 재정의했다면 객체의 런타임 타입이 어떤 메서드를 호출할지의 기준이 된다.&lt;/p&gt;

&lt;p&gt;하지만 다중정의한 메서드 사이에서는 객체의 런타임 타입은 전혀 중요하지 않다. 호출할 메서드의 선택은 컴파일 타임에, 오직 매개변수의 컴파일타임 타입에 의해 정해진다. 따라서 다중정의된 API를 사용하는 사용자가 매개변수를 넘기면서 어떤 다중정의된 메서드가 호출될지를 모른다면 프로그램이 오동작하기 쉽다. &lt;strong&gt;다중정의가 혼동을 일으키는 상황은 피해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;안전하고 보수적으로 가려면 매개변수의 수가 같은 다중정의는 만들지말자.&lt;/strong&gt; 가변인수를 사용하는 메서드라면 아예 다중정의를 하지말아야 한다. &lt;strong&gt;ObjectOutputStream&lt;/strong&gt; 클래스의 경우에는 모든 메서드에 다른 이름을 지어주는 길을 택했다. &lt;strong&gt;writeBoolean(boolean), writeInt(int), writeLong(long)&lt;/strong&gt; 같은 식이다.&lt;/p&gt;

&lt;p&gt;한편 생성자는 이름을 다르게 지을 수 없으므로 두 번째 생성자부터는 무조건 다중정의가 된다. 하지만 정적 팩터리라는 대안을 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;다중정의된 메서드들이 &lt;strong&gt;함수형 인터페이스&lt;/strong&gt;를 인수로 받을 떄, 서로 다른 함수형 인터페이스라도 인수 위치가 같으면 혼란이 생길 수 있다. &lt;strong&gt;ExecutorService&lt;/strong&gt; 클래스의 submit 메서드가 그 예로, Runnable과 Callable 인터페이스를 다중 정의하여 혼란을 일으킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newCachedThreadPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일 에러, Runnable을 받는 메서드를 호출하고자 했지만 Callable를 받는 메서드도 있어 혼란을 일으킨다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2019-02-25-effective_java_08/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;println은 void를 반환하므로, 반환 값이 있는 Callable과 헷갈릴 리는 없다고 생각할 수도 있지만, 다중정의 메서드를 호출하는 알고리즘은 이렇게 동작하지 않는다. 따라서 메서드를 다중정의할 때 &lt;strong&gt;서로 다른 함수형 인터페이스라도 같은 위치의 인수로 받아서는 안 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기술적으로 말하면 System.out::println은 부정확한 메서드 레퍼런스(inexact method reference)이다. 암시적 타입 람다식이나 부정확한 메서드 레퍼런스 같은 인수 표현식은 목표 타입이 정해지기 전까지는 그 의미가 정해지지 않으므로, 적용성 테스트 때 무시된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일반적으로 매개변수 수가 같을 때는 다중정의를 피하는 것이 좋다. 또한 다중정의시 어떤 다중정의 메서드가 호출될지 몰라도 기능은 같아야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;53-가변인수는-신중히-사용하라&quot;&gt;53. 가변인수는 신중히 사용하라.&lt;/h2&gt;

&lt;p&gt;인수 개수가 일정하지 않은 메서드를 정의해야 한다면 가변인수는 필요하다. 메서드 정의시 필수 매개변수는 가변인수 앞에 두고, 가변인수를 사용할 때는 성능 문제까지 고려해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;54-null이-아닌-빈-컬렉션이나-배열을-반환하라&quot;&gt;54. null이 아닌 빈 컬렉션이나 배열을 반환하라.&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cheese&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCheeses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheesesInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheeseInStock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 식으로 null을 리턴하는 메서드를 사용한다면 클라이언트 입장에서는 이 null을 처리하는 코드를 추가로 작성해야 한다. 따라서 이보다는 비어 있는 컬렉션이나 배열로 리턴하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;비어있는 컨테이너를 할당 후 리턴하는 것이 성능저하가 있다고 할 수는 있지만, 신경 쓸 수준이 못 된다. 그렇다하더라도 매번 같은 빈 불변 컬렉션을 반환하면 된다. &lt;strong&gt;Collections.emptyList&lt;/strong&gt; 메서드가 그 예다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;55-optional-반환은-신중히-하라&quot;&gt;55. Optional 반환은 신중히 하라.&lt;/h2&gt;

&lt;p&gt;자바 8 이전에는 특정 조건에서 값을 반환할 수 없을 때 취할 수 있는 선택지가 두 가지 있었다. 예외를 던지거나, null을 리턴하는 것이다.&lt;/p&gt;

&lt;p&gt;두 방법은 모두 헛점이 있는데, &lt;strong&gt;예외는 진짜 예외적인 상황에서만 사용해야 하며 스택 트레이스를 캡쳐하는 비용도 만만치 않다.&lt;/strong&gt; null을 반환하면 클라이언트 쪽에서는 별도의 null 처리 코드도 추가해야 한다.&lt;/p&gt;

&lt;p&gt;자바 8 이후 &lt;strong&gt;Optional&amp;lt;T&amp;gt;&lt;/strong&gt;를 통해 반환할 수 있다. 이 클래스는 원소 최대 하나를 가질 수 있는 불변 컬렉션으로서, 보통 T를 반환해야 하지만 특정 조건에서는 반환하지 못할 경우 사용할 수 있다. 이 컬렉션을 반환하는 메서드는 &lt;strong&gt;예외를 던지는 메서드보다 유연하고 사용하기 쉬우며, null을 반환하는 것보다 오류 가능성이 적다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;빈 컬렉션&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 메서드는 빈 컬렉션을 건네면 예외를 던진다. 다음은 Optional를 반환하는 메서드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스트림의 종단 연산 중 상당수는 Optional을 반환한다. 따라서 다음과 같이 작성할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;naturalOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Optional을 반환하면 사용하는 클라이언트 쪽에서는 적절한 값을 받지 못했을 때의 행동을 쉽게 취할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 값이 없을 경우 orElse 메서드를 통해 대신 취할 값을 선택한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastWordInLexicon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;단어 없음...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastWordInLexicon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 Optional은 &lt;strong&gt;Checked 예외와 취지가 비슷하다.&lt;/strong&gt; 클라이언트 쪽으로 값이 없을 수도 있다는 점을 알려주고 클라이언트는 반드시 취할 행동을 선택해야 한다.&lt;/p&gt;

&lt;p&gt;없다면 다음과 같이 예외를 던지게 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 예와가 아닌 예외 팩터리를 사용한 것이다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 예외가 실제로 발생하지 않는 한 예외 생성 비용은 발생하지 않는다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Toy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myToy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Exception:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 &lt;strong&gt;orElse&lt;/strong&gt; 메서드로 기본 값을 설정하는 비용이 크다면 &lt;strong&gt;Supplier 인터페이스&lt;/strong&gt;를 받는 &lt;strong&gt;orElseGet&lt;/strong&gt; 메서드를 사용할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 기본 값이 필요없는 경우라도 바로 평가되므로 String 값은 매번 생성된다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;단어 없음...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 기본 값이 없는 경우에 람다를 호출하여 생성하므로 매번 String 값을 생성하는 비용을 낮출 수 있다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;단어 없음...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반환 값으로 Optional을 사용한다고 해서 무조건 득이 되는 것은 아니다. 만약 컬렉션, 스트림, 배열과 같은 컨테이너 타입은 Optional로 감싸면 안된다. &lt;strong&gt;비어 있는 컬렉션을 반환하도록 해야 클라이언트 쪽에서 Optional 처리코드를 넣지 않아도 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;박싱된 기본 타입을 담은 Optional은 기본 타입 자체보다 무거울 수 밖에 없다. 값을 두 겹이나 감싸기 때문이다. 따라서 이를 위해 &lt;strong&gt;OptionalInt, OptionalLong, OptionalDouble&lt;/strong&gt;과 같은 클래스도 제공한다. Optional&amp;lt;Integer&amp;gt;와 같이 사용할 이유가 없다.&lt;/p&gt;

</description>
        <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/02/25/effective_java_08-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/02/25/effective_java_08-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 07 - 람다와 스트림</title>
        <description>&lt;h1 id=&quot;람다와-스트림&quot;&gt;람다와 스트림&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;42-익명-클래스보다는-람다를-사용하라&quot;&gt;42. 익명 클래스보다는 람다를 사용하라.&lt;/h2&gt;

&lt;p&gt;예전에는 자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스(혹은 추상 클래스)를 사용했다. 이런 인터페이스의 인스턴스를 &lt;strong&gt;함수 객체&lt;/strong&gt;라고 하여 특정 함수나 동작을 나타내는 데 썼다.&lt;/p&gt;

&lt;p&gt;JDK 1.1이 등장하면서 함수 객체를 만드는 주요 수단은 &lt;strong&gt;익명 클래스&lt;/strong&gt;가 되었다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전략 패턴처럼, 함수 객체를 사용하는 과거 객체 지향 디자인 패턴에서는 익명 클래스면 충분하였다. 위의 코드에서 Comparator 인터페이스가 정렬을 담당하는 &lt;strong&gt;추상 전략&lt;/strong&gt;을 뜻하여 구체적인 전략을 &lt;strong&gt;익명 클래스&lt;/strong&gt;를 통해 구현했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;익명 클래스 방식은 코드가 너무 길어서, 이전의 자바는 함수형 프로그래밍에 적합하지 않았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바 8에 와서 &lt;strong&gt;추상 메서드 하나만 가지는 인터페이스는 특별히 대우를 받게 되었다.&lt;/strong&gt; 지금은 &lt;strong&gt;함수형 인터페이스&lt;/strong&gt;라고 부르는 이 인터페이스의 인스턴스들을 &lt;strong&gt;람다식&lt;/strong&gt;을 사용해 만들 수 있게 된 것이다.&lt;/p&gt;

&lt;p&gt;람다는 함수나 익명 클래스와 개념은 비슷하지만 코드는 훨씬 간결하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 람다, 매개변수 및 반환 값의 타입은 각각 Comparator&amp;lt;String&amp;gt;, String, int이지만 코드에서는 언급이 없다. 이는 컴파일러가 &lt;strong&gt;문맥을 살펴보고 타입을 추론한 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;람다-표현식&quot;&gt;람다 표현식&lt;/h3&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://multifrontgarden.tistory.com/124&quot;&gt;Java8#01.람다 표현식(Lambda Expression)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;람다의 핵심은 지울 수 있는 것은 모두 지우자는 것이다.
컴파일러가 자동으로 추론할 수 있는 것은 모두 빼고 코드를 간결하게 하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Movable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gogo car move&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gogo move move&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 Movable 인터페이스를 구현하는 클래스를 만들어 사용하거나, 재사용성이 없다면 익명 클래스로 만들어 사용하는 것이 기존 방식이다.&lt;/p&gt;

&lt;p&gt;어떤 방식으로 사용하는 코드 몇 줄 이상을 작성하는 것이 기본이다. 이 익명 클래스를 람다로 변경해보자. 먼저 어떤 것을 생략해도 될까 생각해보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;이미 대상 타입에서 Movable 이라고 명시하였기 때문에, &lt;strong&gt;new Movable&lt;/strong&gt;은 없어도 컴파일러가 추론할 수 있다.&lt;/li&gt;
  &lt;li&gt;구현하려고보니, 구현해야할 것은 move 메서드밖에 없다. 따라서 &lt;strong&gt;구현할 메서드가 하나뿐이라면 메서드 명칭이 없어도 추론할 수 있을 것이다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;컴파일러가 구현할 인터페이스 및 메서드를 추론했다면, &lt;strong&gt;인자 타입&lt;/strong&gt;도 추론할 수 있을 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 1,2,3을 토대로 다시 코드를 작성해보면&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movable1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gogo move move&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 작성하여도 컴파일러가 추론할 수 있을 것이다. 여기서 더 코드를 생략할 수 있는지 알아보자.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인자가 여러 개이면 모르겠지만 하나 뿐이라면 &lt;strong&gt;인자의 괄호 부분&lt;/strong&gt;을 생략해도 될 것이다.&lt;/li&gt;
  &lt;li&gt;실행 구문이 위의 코드처럼 1줄 뿐이면 &lt;strong&gt;블록으로 감쌀 필요가 없이&lt;/strong&gt; 사용해도 문제가 없을 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다시 위의 1,2를 토대로 코드를 생략해보면&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movable2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gogo move move&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러 줄이었던 코드가 한 줄로 줄어들었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상황에 따라 컴파일러가 타입을 추론하지 못할 수도 있는데, 그럴 때는 프로그래머가 직접 명시해야 한다. 타입 추론 규칙은 자바 언어 명세의 하나의 chapter를 차지할 만큼 복잡하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;타입을 명시해야 코드가 더 명확할 경우는 제외하고, 람다의 모든 매개변수 타입은 생략하도록 하자.&lt;/strong&gt; 컴파일러가 타입을 알 수 없다고 오류를 낼 때만 타입을 명시하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위의 코드 중, 다음 코드는 람다 자리에 &lt;strong&gt;비교자 생성 메서드&lt;/strong&gt;를 사용하면 더 간결하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;더 나아가서, 자바 8에서 List 인터페이스에 추가된 sort 메서드를 사용하면 더욱 짧아진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;람다를 언어 차원에서 지원하면서, 기존에는 적합하지 않았던 곳에서도 객체를 실용적으로 사용할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;다음은 Operation 열거 타입에서 각 상수마다 달라지는 동작을 &lt;strong&gt;상수별 클래스 몸체&lt;/strong&gt;를 통해 정의한 코드이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;람다를 이용하면 열거 타입의 인스턴스 필드를 이용하는 방식으로, 상수별로 다르게 동작하는 코드를 쉽게 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;다음 코드와 같이 각 열거 타입별 동작을 람다로 구현해 생성자에 넘기고, 이를 인스턴스 필드에 저장해두는 것이다. 이렇게 구현하면 상수별 클래스 몸체를 사용했을 때보다 코드가 더 간결해진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLUS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoubleBinaryOperator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇다고 상수별 클래스 몸체가 쓸모없다는 것은 아니다. 메서드나 클래스와는 다르게 &lt;strong&gt;람다는 이름이 없고 문서화하지도 못한다. 따라서 코드 자체로 명확히 설명되지 않거나, 코드 줄 수가 많아지면 람다를 쓰지 말아야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;람다는 코드가 한 줄이때 가장 좋고, 길어봐야 세 줄 안에 끝나는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;열거 타입 생성자에 넘겨지는 인수들의 타입도 컴파일 타임에 추론된다. 따라서 &lt;strong&gt;생성자 안의 람다는 열거 타입 인스턴스필드에 접근이 불가능하다.&lt;/strong&gt; (인스턴스는 런타임에 생성되기 때문이다.)&lt;/p&gt;

&lt;p&gt;상수별 동작을 단 몇 줄로 구현하기 어렵거나, 인스턴스 필드 / 메서드를 사용해야 하는 상황이면 상수별 클래스 몸체를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;람다가 등장하면서 익명 클래스의 자리는 크게 좁아지긴 했지만 아직 람다로 대체할 수 없는 곳이 많다. 특히 람다는 추상 메서드가 하나 분인 &lt;strong&gt;함수형 인터페이스에서만 쓰인다.&lt;/strong&gt; 추상 메서드가 여러 개라면 익명 클래스를 써야 한다.&lt;/p&gt;

&lt;p&gt;또한 람다는 자기 참조가 불가능하다. &lt;strong&gt;람다에서 this 키워드는 바깥 인스턴스를 가리킨다.&lt;/strong&gt; 이 람다의 특징은 자바스크립트 화살표 함수의 &lt;strong&gt;Lexical this&lt;/strong&gt;와 비슷하다.&lt;/p&gt;

&lt;p&gt;반대로 익명 클래스에서의 this는 익명 클래스의 인스턴스, 자신을 가리킨다.  따라서 함수 객체가 자기 자신을 참조해야 한다면, 반드시 익명 클래스를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://poiemaweb.com/es6-arrow-function&quot;&gt;자바스크립트, 화살표 함수&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;43-람다보다는-메서드-레퍼런스를-사용하라&quot;&gt;43. 람다보다는 메서드 레퍼런스를 사용하라.&lt;/h2&gt;

&lt;p&gt;람다가 익명 클래스보다 나은 점 중에서 가장 큰 특징은 &lt;strong&gt;간결함&lt;/strong&gt;이다. 그런데 자바에서는 함수 객체를 람다보다도 더 간결하게 만드는 방법이 있는데 바로 &lt;strong&gt;메서드 레퍼런스&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;다음 코드는 임의의 키와 Integer 값의 매핑을 관리하는 프로그램의 일부이다. 이 코드는 키가 맵 안에 없다면 키와 숫자 1을 매핑하고, 이미 있다면 기존 매핑 값을 증가시킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Map의 merge 메서드는 키, 값, 함수를 인수로 받으며, 주어진 키가 맵 안에 없다면 주이진 {키, 값} 쌍을 그대로 저장한다. 반대로 키가 이미 있다면 함수를 통해 현재 값과 주어진 값에 적용한 다음, 그 결과로 현재 값을 덮어 쓴다. {키, 함수의 결과}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;깔끔해 보이지만 매개변수 count와 incr가 하는 일 없이 공간을 꽤 차지하고 있다. 위 코드에서 람다는 단순히 두 인수의 합을 반환할 뿐이다.&lt;/p&gt;

&lt;p&gt;자바 8에서 Integer 클래스와 같은 박싱 타입은 이 람다와 기능이 같은 정적 메서드 sum을 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 메서드 레퍼런스를 사용하면 똑같은 결과를 더 보기 좋게 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;매개변수가 늘어날수록 &lt;strong&gt;메서드 레퍼런스로 제거할 수 있는 코드의 양이 늘어난다.&lt;/strong&gt; 다만 어떤 람다는 매개변수의 이름 자체가 프로그래머에게 좋은 가이드가 되기도 하므로, 메서드 레퍼런스보다 읽기 쉽고 유지보수도 용이할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;보통 메서드 레퍼런스를 사용하는 편이 코드가 더 짧고 간결하므로, 람다로 구현했을 때 너무 길거나 복잡하다면 메서드 레퍼런스가 좋은 대안이 될 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;람다를 직접 사용하는 것보다는 람다로 작성할 코드를 새로운 메서드에 담은 다음, 람다 대신 그 메서드 레퍼런스를 사용하는 식으로 구현하면 &lt;strong&gt;기능을 잘 드러내는 이름도 지어줄 수 있고 문서로도 남길 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;보통 IDE에서는 메서드 레퍼런스로 대체하라고 권하지만, 꼭 람다보다 메서드 레퍼런스가 간결한 것은 아니다. &lt;strong&gt;주로 람다와 메서드가 같은 클래스에 있을 때 그렇다.&lt;/strong&gt; 다음과 같은 코드가 있다고 해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoshThisClassNameIsHumongous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;GoshThisClassNameIsHumongous:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이를 람다로 대체해보면 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이럴 때는 람다가 더 낫다. 같은 선상에서 &lt;strong&gt;Function.identity()&lt;/strong&gt;를 사용하는 것보다는 람다 (x -&amp;gt; x)를 사용하는 것이 낫다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Function.identity 메서드는 인자로 들어온 값 그대로 반환하는 메서드이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;메서드 레퍼런스의 유형은 다섯 가지가 있는데, 가장 흔한 유형은 앞의 예에서 본 것처럼 &lt;strong&gt;정적 메서드를 가리키는 메서드 레퍼런스이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음으로 &lt;strong&gt;인스턴스의 메서드를 참조하는 유형이 두 가지가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;한정적-메서드-레퍼런스&quot;&gt;한정적 메서드 레퍼런스&lt;/h3&gt;

&lt;p&gt;수신 객체(receiving object)를 특정하는 한정적 인스턴스 메서드 레퍼런스이다. 근본적으로 정적 메서드 레퍼런스와 비슷한데, &lt;strong&gt;함수 객체가 받는 인수와 참조되는 메서드가 받는 인수가 똑같다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;람다 캡쳐링을 통해, 람다 표현식 바깥에 있는 인스턴스의 메서드를 호출할 때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Predicate&amp;lt;Integer&amp;gt; t = Integer::equals;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testEquals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// .filter(test::equals)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Predicate 인터페이스의 test 메서드는 인자 하나를 받는다. 그런데 equals 메서드는 비교하기 위해 두 객체(자신 및 비교 대상)가 필요하므로&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Integer:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같은 식으로 작성하지 못한다. 나머지 하나를 추론할 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;하지만 다음과 같이 특정 인스턴스를 지정한다면 컴파일러 입장에서는 추론이 가능해진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testEquals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;비한정적-메서드-레퍼런스&quot;&gt;비한정적 메서드 레퍼런스&lt;/h3&gt;

&lt;p&gt;수신 객체를 특정하지 않는다.
다음과 같이 특정 인스턴스를 지정하지 않고 String::isEmpty 메서드 레퍼런스를 사용했지만, 컴파일러가 추론하여 호출할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Not Empty&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;마지마으로 클래스 생성자를 가리키는 메서드 레퍼런스와 배열 생성자를 가리키는 메서드 레퍼런스가 있다. 생성자 메서드 레퍼런스는 팩터리 객체로 사용된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Point:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;메서드 레퍼런스는 람다의 간단명료한 대안이 될 수 있다. 메서드 레퍼런스 쪽이 짧고 명확하다면 메서드 레퍼런스를 쓰고, 그렇지 않을 때만 람다를 사용하라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;44-표준-함수형-인터페이스를-사용하라&quot;&gt;44. 표준 함수형 인터페이스를 사용하라.&lt;/h2&gt;

&lt;p&gt;java.util.function 패키지를 보면 다양한 용도의 표준 함수형 인터페이스가 담겨있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;필요한 용도에 맞는 게 있다면 직접 구현하지 말고 표준 함수형 인터페이스를 활용하는 것이 낫다.&lt;/strong&gt; API가 다루는 개념의 수가 줄어들어 익히기 더 쉬워진다. 또한 표준 함수형 인터페이스들은 유용한 디폴트 메서드를 제공하므로 다른 코드와의 상호운용성도 크게 좋아진다.&lt;/p&gt;

&lt;p&gt;java.util.function 패키지에는 총 43개의 인터페이스가 담겨 있다. 전부 기억하긴 어렵겠지만, 기본 인터페이스 6개만 기억하면 나머지를 충분히 유추할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;인터페이스&lt;/th&gt;
      &lt;th&gt;함수 시그니처&lt;/th&gt;
      &lt;th&gt;예&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;UnaryOperator&amp;lt;T&amp;gt;&lt;/td&gt;
      &lt;td&gt;T apply(T t)&lt;/td&gt;
      &lt;td&gt;String::toLowerCase&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BinaryOperator&amp;lt;T&amp;gt;&lt;/td&gt;
      &lt;td&gt;T apply(T t1, T t2)&lt;/td&gt;
      &lt;td&gt;BigInteger::add&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Predicate&amp;lt;T&amp;gt;&lt;/td&gt;
      &lt;td&gt;boolean test(T t)&lt;/td&gt;
      &lt;td&gt;Collection::isEmpty&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Function&amp;lt;T, R&amp;gt;&lt;/td&gt;
      &lt;td&gt;R apply(T t)&lt;/td&gt;
      &lt;td&gt;Arrays.asList&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Supplier&amp;lt;T&amp;gt;&lt;/td&gt;
      &lt;td&gt;T get()&lt;/td&gt;
      &lt;td&gt;Instant::now&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Consumer&amp;lt;T&amp;gt;&lt;/td&gt;
      &lt;td&gt;void accept(T t)&lt;/td&gt;
      &lt;td&gt;System.out::println&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Operator: 인수가 1개인 UnaryOperator와 2개인 BinaryOperator로 나뉘며, 반환값과 인수의 타입이 같은 함수&lt;/li&gt;
  &lt;li&gt;Predicate: 인수 하나를 받아 boolean을 반환&lt;/li&gt;
  &lt;li&gt;Function: 인수와 반환 타입이 다른 함수&lt;/li&gt;
  &lt;li&gt;Supplier: 인수를 받지 않고 값을 반환하는 함수&lt;/li&gt;
  &lt;li&gt;Consumer: 인수를 하나 받고 반환값은 없는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;supplier와-callable&quot;&gt;Supplier와 Callable&lt;/h3&gt;

&lt;p&gt;Supplier와 Callable은 같이 인수를 받지 않고 값을 반환하는 메서드를 정의하지만 차이점이 존재한다&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Callable 인터페이스는 예외가 발생할 수 있는 구현을 위해 존재하며, 다른 스레드에 의해 수행될 수 있는 클래스의 인스턴스를 위해 디자인되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A task that returns a result and &lt;strong&gt;may throw an exception.&lt;/strong&gt; Implementors define a single method with no arguments called call.
The Callable interface is similar to Runnable, in that both are &lt;strong&gt;designed for classes whose instances are potentially executed by another thread.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이에 반해 Supplier 인터페이스는 &lt;strong&gt;값을 제공하는 목적&lt;/strong&gt;에 충실한 인터페이스이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Represents a supplier of results.
There is no requirement that a new or distinct result be returned each time the supplier is invoked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 Callable 인터페이스는 Supplier 인터페이스의 특수한 버전이라고 할 수도 있다. 사실상 별 차이는 없다. Spring WebFlux에서 사용하는 Reactive Streams 구현체인 reactor &lt;strong&gt;Mono&lt;/strong&gt;도 &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#fromCallable-java.util.concurrent.Callable-&quot;&gt;&lt;strong&gt;Mono.fromCallable&lt;/strong&gt;&lt;/a&gt;과 &lt;a href=&quot;https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#fromSupplier-java.util.function.Supplier-&quot;&gt;&lt;strong&gt;Mono.fromSupplier&lt;/strong&gt;&lt;/a&gt; 라는 두 정적 메서드를 제공하고 있는데 문서를 보면 알겠지만 차이는 없다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;코드 상의 의미를 부여하고 좀 더 이해하기 쉽도록&lt;/strong&gt; Callable과 Supplier를 구분해서 사용하는 것이 좋다고 생각한다. 다른 스레드에 의해 수행될 수 있거나 예외가 발생할 수 있으면 Callable 인터페이스를 사용하는 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위의 기본 인터페이스 (Operator, Predicate, Function, Supplier, Consumer)들은 &lt;strong&gt;기본 타입을 좀 더 쉽게 쓸 수 있도록&lt;/strong&gt; 여러 변형이 존재한다. 그리고 &lt;strong&gt;인수의 개수가 다른&lt;/strong&gt; (예를 들면 BiFunction&amp;lt;T, U, R&amp;gt;이나 BiConsumer&amp;lt;T, U&amp;gt;) 변형도 있다.&lt;/p&gt;

&lt;p&gt;표준 함수형 인터페이스 대부분은 기본 타입만 지원한다. 성능을 위해서 박싱된 기본 타입을 넣어서 사용하는 것은 좋지 않다.&lt;/p&gt;

&lt;p&gt;미리 정의된 표준 함수형 인터페이스를 사용하는 것이 좋지만, 필요한 용도에 맞는 게 없다면 직접 정의해야 한다. 만약 다음과 같은 경우라면 직접 함수형 인터페이스를 구현해야 될 것인지 고민해야 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;자주 쓰이며 이름 자체가 용도를 명확히 설명해줄 경우&lt;/li&gt;
  &lt;li&gt;반드시 따라야하는 규약이 있을 경우&lt;/li&gt;
  &lt;li&gt;유용한 디폴트 메서드를 제공할 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;직접 함수형 인터페이스를 작성하기로 하였다면, 어쨋든 “&lt;strong&gt;인터페이스&lt;/strong&gt;“이므로 주의하여 설계헤야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;함수형 인터페이스 정의시, &lt;strong&gt;@FunctionalInterface&lt;/strong&gt; 애너테이션을 달아야 한다. &lt;strong&gt;@Override&lt;/strong&gt; 애너테이션을 사용하는 이유가 비슷하게 &lt;strong&gt;프로그래머의 의도를 명시하는 것이다.&lt;/strong&gt; &lt;strong&gt;람다용으로 사용하는 것과 추상 메서드를 단 하나만 가져야 하며, 유지보수 과정에서 누군가가 메서드를 추가하지 않도록 막기 위한 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;함수형 인터페이스를 API에서 사용할 때, &lt;strong&gt;서로 다른 함수형 인터페이스를 같은 위치의 인수로 받는 메서드들을 오버로딩해서는 안된다.&lt;/strong&gt; 클라이언트쪽으로 불필요하게 모호함을 안겨줄 뿐이며, 정확하게 메서드를 호출하기 위해 형변환해야 될 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;45-스트림은-주의해서-사용하라&quot;&gt;45. 스트림은 주의해서 사용하라.&lt;/h2&gt;

&lt;p&gt;스트림 API는 다량의 데이터 처리 작업을 위해 자바 8에 추가된 것이다. 이 API에서 제공하는 추상 개념 중 핵심은 두 가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;스트림(Stream): 데이터 원소의 유한 혹은 무한 시퀀스를 말한다. 스트림의 원소들은 컬렉션이나 배열, 파일 등 어디로부터든 올 수 있다.&lt;/li&gt;
  &lt;li&gt;스트림 파이프라인(Stream Pipeline): 원소들로 수행하는 연산 단계를 표현하는 개념&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스트림 파이프라인은 소스 스트림에서 시작해 &lt;strong&gt;종단 연산으로 끝나며, 중간에 중간 연산이 있을 수 있다.&lt;/strong&gt; 중간 연산은 스트림을 어떠한 방식으로 &lt;strong&gt;변환하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스트림 파이프라인은 기본적으로 지연 평가된다. 종단 연산이 호출될 때 평가가 이루어지며, 종단 연산을 빠뜨리면 중간 연산들은 아예 실행되지도 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스트림을 과하게 사용하면 다음 코드와 같이 이해하기가 어려울 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minGroupSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;StringBuilder:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;nl&quot;&gt;StringBuilder:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minGroupSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드가 짧기는 하지만 읽기는 어렵다. &lt;strong&gt;스트림을 과다하게 사용하면 프로그램을 읽거나 유지보수하기가 어려워진다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스트림으로 모든 것을 해결하려고 하기 보다는 다음과 같이 적절히 코드를 분리하고, 적당히 사용하는 것이 더 읽기가 쉽다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minGroupSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphabetize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minGroupSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alphabetize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toCharArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 코드처럼 도우미 메서드 활용의 중요성은 예전의 for / while과 같은 반복적인 코드보다 스트림 파이프라인에서 더 크다. 특정 연산에 적절한 이름을 지어주고 세부 구현을 분리하여 전체적인 가독성을 높인 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스트림을 처음 사용할 때, 모든 코드를 스트림으로 바꾸고 싶겠지만 &lt;strong&gt;코드 가독성을 위해 스트림과 반복문을 적절히 조합하는 것이 최선이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같은 경우라면 스트림과 맞지 않는 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;범위 안의 지역변수를 수정해야 할 필요가 있는 경우
    &lt;ul&gt;
      &lt;li&gt;람다는 final로 선언된 변수에 한해 &lt;strong&gt;접근만 할 수 있고 수정은 불가능하다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;중간에 return 문을 통해 빠져나가야 하거나, break / continue문을 통해 반복문을 종료, 아니면 Checked 예외를 던지는 경우
    &lt;ul&gt;
      &lt;li&gt;람다는 Checked 예외를 던질 수 없고, 중간에 빠져나오는 연산 같은 것은 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;반대로 다음과 같은 경우라면 스트림과 궁합이 맞는 경우이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;원소들의 시퀀스를 일관되게 변환하는 경우
    &lt;ul&gt;
      &lt;li&gt;map이나 flatMap으로 변환하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원소들의 시퀀스를 필터링하는 경우
    &lt;ul&gt;
      &lt;li&gt;filter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;시퀀스를 하나의 연산을 이용해 결합하는 경우
    &lt;ul&gt;
      &lt;li&gt;reduce 등&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원소들의 시퀀스를 컬렉션에 모은다.&lt;/li&gt;
  &lt;li&gt;원소들의 시퀀스에서 특정 조건을 만족하는 원소를 찾는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;46-스트림에서는-부작용side-effect-없는-함수를-사용하라&quot;&gt;46. 스트림에서는 부작용(Side effect) 없는 함수를 사용하라.&lt;/h2&gt;

&lt;p&gt;스트림은 &lt;strong&gt;함수형 프로그래밍에 기초한 패러다임이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수형 프로그래밍은 상태 변경이나 가변(mutable) 데이터를 피하고 &lt;strong&gt;불변성(Immutability)를 지향&lt;/strong&gt;한다. 부작용이 없는 &lt;strong&gt;순수 함수(오직 입력만이 결과에 영향을 주는 함수)&lt;/strong&gt;와 보조 함수의 조합을 통해 로직 내의 조건문과 반복문을 제거하여 복잡성을 해결하고, 변수의 사용을 억제하여 상태 변경을 피하려는 프로그래밍 패러다임이다. 조건문이나 반복문은 로직의 흐름을 어렵게 하여 가독성을 해치고 변수의 값은 누군가에 의해 언제든지 변경될 수 있어 오류 발생의 근본적 원인이 될 수 있기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수형 프로그래밍은 순수 함수를 통해 부작용을 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이는 노력의 한 방법이라고 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스트림이 제공하는 표현력, 속도, 병렬성을 얻으려면 이 패러다임까지 받아들여야 한다.&lt;/p&gt;

&lt;p&gt;스트림 패러다임의 핵심은 계산을 일련의 변환으로 재구성하는 부분이다. 이 때 각 변환 단계는 &lt;strong&gt;가능한 이전 단계의 결과값만 보고 처리하는 순수 함수여야 한다.&lt;/strong&gt; 다른 가변 상태를 참조하지 않고, 함수 스스로도 다른 상태를 변경하지 않아야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Long:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 절대 스트림 코드라 할 수 없다. 스트림 코드를 가장한 반복적 코드인데, forEach내에서 외부 상태인 freq를 변경하는 것이 문제이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;외부 상태를 변경하는 일이 없도록&lt;/strong&gt; 제대로 사용해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;forEach 연산은 스트림 계산 결과를 보고할 때만 사용해야 하고, 계산하는 용도로 사용해서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;47-반환-타입으로는-스트림보다-컬렉션이-낫다&quot;&gt;47. 반환 타입으로는 스트림보다 컬렉션이 낫다.&lt;/h2&gt;

&lt;p&gt;일련의 원소 시퀀스를 반환하는 메서드를 작성할 때는, 이를 스트림으로 처리하기를 원하는 사용자와 반복문으로 처리하길 원하는 사용자가 있을 수 있으므로, 되도록 컬렉션으로 반환하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;스트림은 Iterable으로 바로 변환이 되지 않으므로, 클라이언트 쪽에서 복잡하게 형변환해야 하는 작업이 필요하다. 그에 반해 Collection 인터페이스는 Iterable의 하위 타입이고, stream 메서드도 제공하여 반복과 스트림을 동시에 지원한다. 따라서 &lt;strong&gt;원소 시퀀스를 반환하는 메서드는 Collection이나 그 하위 타입으로 사용하는 것이 최선이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;48-스트림-병렬화는-주의해서-적용하라&quot;&gt;48. 스트림 병렬화는 주의해서 적용하라.&lt;/h2&gt;

&lt;p&gt;스트림 API는 &lt;strong&gt;parallel&lt;/strong&gt; 메서드를 통해 스트림 파이프라인을 병렬 실행할 수 있도록 지원한다. &lt;strong&gt;동시성 프로그래밍을 할 때는 안정성(safety)와 응답 가능(liveness) 상태를 유지하기 위해 애써야 하는데,&lt;/strong&gt; 이는 병렬 스트림 파이프라인에서도 다를게 없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TWO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;intValueExact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 스트림 병렬화&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mersenne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mersenne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isProbablePrime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TWO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;BigInteger:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextProbablePrime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 메르센 소수를 생성하는 프로그램인데, parallel 메서드를 통해 병렬적으로 수행하려고 한 것이다. 그런데, 이 프로그램을 실행하면 끝날 기미가 보이지 않는다. 이는 &lt;strong&gt;스트림 라이브러리가 파이프라인을 병렬화하는 방법을 찾아내지 못했기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;파이프라인 병렬화는 limit를 다룰 때, CPU 코어가 남는다면 원소를 몇 개 더 처리한 후 제한된 개수 이후의 결과를 버려도 아무런 해가 없다고 가정한다.&lt;/p&gt;

&lt;p&gt;원래 메르센 소수를 찾을 때는 그 전 소수를 찾을 때보다 두 배의 시간이 걸리는데, 20번째까지 메르센 소수를 찾았을 때 그 시점의 CPU 코어가 놀고 있다면 21,22,23번째의 메르센 소수를 찾는 작업이(쿼드 코어일 경우) 병렬로 수행되며 결국 이 때문에 시간이 많이 걸리는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이처럼 스트림을 잘못 병렬화하면 응답 불가를 포함해 성능이 나빠질뿐만 아니라 결과 자체가 잘못되거나 예상 못한 동작이 발생할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 소스가 Stream.iterate이거나, 중간 연산으로 limit를 사용하면 파이프라인 병렬화로는 성능 개선을 기대할 수 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대체로 스트림 소스가 ArrayList, HashMap, HashSet의 인스턴스이거나 배열, int / long 범위일 때 병렬화의 효과가 가장 좋다. 이 자료구조들은 &lt;strong&gt;모두 데이터를 원하는 크기로 정확하고 손쉽게 나눌 수 있어 다수의 스레드에 분배하기 좋다는 특징이 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 자료구조들의 공통점은 참조 지역성이 뛰어나다는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;계산도 올바르게 수행하고 성능도 빨라질 거라는 확신이 없다면 스트림 파이프라인 병렬화는 시도하지 않는게 좋다. 스트림을 잘못 병렬화하면 프로그램을 오동작하게 하거나, 성능을 급격히 떨어뜨린다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/02/20/effective_java_07-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/02/20/effective_java_07-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 06 - 열거 타입과 애너테이션</title>
        <description>&lt;h1 id=&quot;열거-타입과-애너테이션&quot;&gt;열거 타입과 애너테이션&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;34-int-상수-대신-열거-타입을-사용하라&quot;&gt;34. int 상수 대신 열거 타입을 사용하라.&lt;/h2&gt;

&lt;p&gt;열거 타입은 일정 개수의 상수 값을 정의한 다음, 그 외의 값은 허용하지 않는 타입이다.&lt;/p&gt;

&lt;p&gt;자바에서 열거 타입을 지원하기 전에는 다음 코드처럼 정수 상숭를 한 묶음 선언해서 사용하곤 했다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLE_FUJI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLE_PIPPIN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLE_GRANNY_SMITH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORANGE_NAVEL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORANGE_TEMPLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORANGE_BLOOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 정수 열거 패턴은 단점이 많다. &lt;strong&gt;타입 안전을 보장할 방법이 없으며 표현력도 좋지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 사과 상수를 사용할 코드에 오렌지 상수를 사용해도 컴파일러는 아무런 경고 메시지를 출력하지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APPLE_FUJI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ORANGE_TEMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLE_PIPPIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특히 사과용 상수의 이름은 APPLE_로 시작하고, 오렌지용 상수는 ORANGE_로 시작하게 되는데, 이는 자바가 정수 열거 패턴을 위한 별도의 이름공간(namespace)를 지원하지 않기 때문에 접두어를 사용하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정수 열거 패턴을 사용한 프로그램은 깨지기 쉽다.&lt;/strong&gt; 평범한 상수를 나열한 것일 뿐이라, 컴파일하면 그 값이 그대로 클라이언트 파일에 새겨진다. 따라서 &lt;strong&gt;상수의 값이 바뀌면 클라이언트도 반드시 다시 컴파일해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정수 상수는 문자열로 출력하기가 다소 까다롭다. 또한, 같은 그룹에 속한 정수 상수를 한 바퀴 순회하는 방법도 마땅치 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이런 단점을 해결하기 위해 자바는 열거 타입을 도입하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Apple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUJI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIPPIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRANNY_SMITH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEMPLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BLOOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;겉보기에는 C, C++과 같은 다른 언어의 열거 타입과 비슷하지만 &lt;strong&gt;자바의 열거 타입은 완전한 형태의 클래스이다.&lt;/strong&gt; 따라서 다른 언어의 열거 타입보다 더 강력한 기능을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;열거 타입 자체는 클래스이며, 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로서 공개한다.&lt;/strong&gt; 열거 타입은 밖에서 접근할 수 있는 생성자를 제공하지 않으므로, 사실상 final이다. 따라서 클라이언트가 직접 열거 타입의 인스턴스를 생성하거나 확장할 수 없으니 &lt;strong&gt;열거 타입의 인스턴스는 딱 하나씩만 존재함을 보장한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;열거 타입은 정수 열거 패턴과는 다르게 타입 안전성을 제공한다.&lt;/strong&gt; 서로 다른 열거 타입끼리 대입하거나 연산하려고 하면 컴파일 에러가 발생한다. 또한 열거 타입 당 각자 이름 공간이 있어, 이름이 같은 상수라도 공존할 수 있다.&lt;/p&gt;

&lt;p&gt;열거 타입에 새로 상수를 추가하거나 순서를 바꿔도 다시 컴파일할 필요 없다. 공개되는 것이 오직 필드의 이름뿐이라서 상수 값이 클라이언트로 컴파일되어 각인되지 않기 때문이다.&lt;/p&gt;

&lt;p&gt;또한 열거 타입의 toString 메서드는 출력하기에 적합한 문자열을 내어준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;열거 타입에는 임의의 메서드나 필드를 추가할 수 있고, 임의의 인터페이스를 구현하게 할 수도 있다.&lt;/strong&gt; 이를 통해 상수 모음일 뿐인 열거 타입에 &lt;strong&gt;고차원의 추상 개념 하나를 완벽히 표현할 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 코드는 행성을 표현하는 열거 타입이다. 단순한 상수가 아닌 행성과 관련된 속성이나 메서드들을 추가할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MERCURY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.302&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.439e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VENUS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.869&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.052e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EARTH&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.975&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.378e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MARS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.419&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.393e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JUPITER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.899&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.149e7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SATURN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.685&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.027e7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;URANUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.683&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.556e7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NEPTUNE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.024&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.477e7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 열거 타입은 근본적으로 불변이므로, 모든 필드는 final이어야 한다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 질량(단위: 킬로그램)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 반지름(단위: 미터)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surfaceGravity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 표면중력(단위: m / s^2)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 중력상수(단위: m^3 / kg s^2)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.67300&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 생성자&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 열거 타입 상수 각각을 특정 필드와 연결할 때,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 생성자에서 데이터를 받아 인스턴스 필드에 저장한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Planet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;surfaceGravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;surfaceGravity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surfaceGravity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;surfaceWeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;surfaceGravity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// F = ma&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;열거 타입은 자신 안에 정의된 상수들의 값을 배열에 담아 반환하는 정적 메서드 &lt;strong&gt;values&lt;/strong&gt;를 제공한다. 또한 각 열거 타입의 값의 &lt;strong&gt;toString&lt;/strong&gt; 메서드는 상수 이름을 문자열로 내어준다. 이들 메서드들을 통해 쉽게 열거 타입을 순회하면서 이름을 출력시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;열거 타입에서 상수 하나를 제거하면 제거한 상수를 참조하지 않는 한 클라이언트에게는 아무 영향이 없다.&lt;/strong&gt;
참조하더라도 컴파일시에는 컴파일 오류가 발생할 것이며, 런타임에는 유용한 정보를 담은 예외가 발생할 것이다. 이는 단순한 정수 열거 패턴에서는 기대할 수 없는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;열거 타입도 클래스처럼 기능을 클라이언트에 노출해야할 이유가 없다면 private나 package-private로 선언한다. 널리 쓰이는 열거 타입이라면 톱 레벨 클래스로 두고, 특정 톱 레벨 클래스에서만 사용된다면 해당 클래스의 멤버로 둔다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 정의한 Planet 열거 타입은 상수 마다 서로 다른 데이터를 할당하는데에 그쳤지만, 때로는 &lt;strong&gt;상수마다 동작이 달라져야 하는 상황도 있을 것이다.&lt;/strong&gt; 
예를 들어 다음과 같이 사칙 연산을 표현한 열거 타입을 선언하고 실제 연산까지 열거 타입 상수가 직접 수행한다고 생각해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIMES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;PLUS:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;MINUS:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;TIMES:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;DIVIDE:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unkown operation: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 switch문을 통해 분기할 수도 있지만, 이는 깨지기 쉬운 코드이다. 새로운 상수를 추가하려면 해당 case 문도 추가해야 한다. 이런 메서드가 여러 개 있다면 각 메서드마다 추가해주어야 할 것이다.&lt;/p&gt;

&lt;p&gt;다행히 자바의 열거 타입은 상수별로 다르게 동작하는 코드를 구현하는 더 나은 수단을 제공한다. 다음과 같이 &lt;strong&gt;열거 타입에 추상 메서드를 추가하고, 각 상수별 클래스 몸체를 각 상수에서 자신에 맞게 재정의하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이를 &lt;strong&gt;상수별 메서드 구현 (constant-specific method implementation)&lt;/strong&gt; 이라고 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PLUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 추상 메서드로 선언되었으므로, 상수에서 재정의하지 않으면 컴파일 에러가 발생한다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%f %s %f = %f%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;열거 타입에는 상수 이름을 입력받아 그 이름에 해당하는 상수를 반환해주는 &lt;strong&gt;valueOf(String)&lt;/strong&gt; 메서드가 자동 생성된다. 열거 타입의 toString 메서드를 재정의할 때는 toString이 반환하는 문자열을 다시 해당 열거 타입 상수로 반환해주는 &lt;strong&gt;fromString&lt;/strong&gt; 메서드를 제공하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Operation 상수가 이 맵에 저장되는 시점은 열거 타입 상수 생성 후,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 정적 필드가 초기화될 때이다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringToEnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;toMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Object:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 지정한 문자열에 해당하는 Operation을 (존재한다면) 반환한다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringToEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;열거 타입 생성자에서는 정적 상수 변수가 아닌, 자신의 정적 변수에 접근할 수 없다. 열거 타입 생성자가 실행되는 시점에는 정적 필드가 아직 초기화되기 전이다. 마찬가지로 생성자에서 같은 열거 타입에 정의된 다른 열거 상수에도 접근이 불가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;상수별 메서드 구현시, 열거 타입 상수끼리는 코드를 공유하기가 어렵다는 단점이 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 급여명세서에 쓸 요일을 표현하는 열거 타입을 예로 들어보자. 이 열거 타입은 직원의 시간당 기본임금과 그날 일한 시간이 주어지면 일당을 계산하는 메서드를 갖는다. 주중에 오버타임이 발생하면 잔업수당이 주어지고, 주말에는 무조건 잔업수당이 주어진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayrollDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MONDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TUESDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEDNESDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THURSDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRIDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SATURDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUNDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SATURDAY:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SUNDAY:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;overtimePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;overtimePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;관리 관점에서는 위험한 코드이다. 휴가와 같은 새로운 값을 추가하려면 그 값을 처리하는 case 문도 잊지 말아야 한다.&lt;/p&gt;

&lt;p&gt;간단한 구현으로 급여를 정확히 계산하는 방법은 두 가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;잔업수당을 계산하는 코드를 모든 상수에 중복해서 넣는 방법&lt;/li&gt;
  &lt;li&gt;계산코드를 평일용과 주말용으로 나누어 도우미 메서드로 작성 후 각 상수가 자신에 필요한 메서드를 호출&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 두 가지 방법 모두 코드가 장황해져 가독성이 크게 떨어지고 오류 발생 가능성이 커진다.&lt;/p&gt;

&lt;p&gt;가장 깔끔한 방법은 &lt;strong&gt;새로운 상수를 추가할 때, 잔업수당 “전략”을 선택하도록 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;잔업수당 계산 자체를 &lt;strong&gt;private 중첩 열거 타입&lt;/strong&gt;으로 옮기고 PayrollDay 열거 타입 생성자에서 이 중 적당한 것을 선택하도록 하는 것이다. 그리고 PayrollDay 열거 타입은 잔업수당 계산시, 중첩 열거 타입에 위임하도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayrollDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MONDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TUESDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEDNESDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;THURSDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FRIDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SATURDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUNDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WEEKEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PayrollDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PayType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;payType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 전략 열거 타입으로 위임&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutesWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 전략 열거 타입&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PayType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WEEKDAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WEEKEND&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINS_PER_SHIFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overtimePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minsWorked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;switch 문은 열거 타입의 상수별 동작을 구현하는데 적합하지 않다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;필요한 원소들이 컴파일 타임에 알 수 있는 상수 집합이라면 항상 열거 타입을 사용하도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;35-ordinal-메서드-대신-인스턴스-필드를-사용하라&quot;&gt;35. ordinal 메서드 대신 인스턴스 필드를 사용하라.&lt;/h2&gt;

&lt;p&gt;대부분의 열거 타입 상수는 자연스럽게 하나의 정숫값에 대응된다. 그리고 모든 열거 타입은 해당 상수가 몇 번째 위치인지를 반환하는 &lt;strong&gt;ordinal&lt;/strong&gt; 메서드를 제공한다.&lt;/p&gt;

&lt;p&gt;열거 타입 상수와 연결된 정수값이 필요하면 다음과 같이 ordinal 메서드를 사용할 때가 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ensemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SOLO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUARTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUINTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SEXTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEPTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OCTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NONET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DECTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 연주자 수 리턴&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfMusicians&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;동작은 하는데, 유지보수하기가 어려운 코드이다. 만약 상수 선언 순서를 변경하면 해당 메서드는 오동작하며, 이미 사용 중인 정수와 값이 같은 상수는 추가할 방법이 없다. 또한 값을 중간에 비워둘 수도 없다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;strong&gt;열거 타입 상수에 연결된 값은 ordinal 메서드로 얻지 말고 인스턴스 필드에 명시적으로 저장하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ensemble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SOLO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUARTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUINTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SEXTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SEPTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OCTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DOUBLE_QUARTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NONET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DECTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRIPLE_QUARTET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfMusicians&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Ensemble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOfMusicians&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numberOfMusicians&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfMusicians&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enum API 문서에서 ordinal 메서드는 다음과 같이 설명되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대부분의 프로그래머는 이 메서드를 쓸 일이 없다. 이 메서드는 EnumSet과 EnumMap과 같은 열거 타입 기반의 범용 자료구조에 쓸 목적으로 설계되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 위의 용도가 아니면 ordinal 메서드는 사용하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;36-비트-필드-대신-enumset을-사용하라&quot;&gt;36. 비트 필드 대신 EnumSet을 사용하라.&lt;/h2&gt;

&lt;p&gt;열거한 값들이 주로 (단독이 아닌) 집합으로 사용될 경우, 정수 열거 패턴을 사용할 때 다음과 같이 선언해왔다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_BOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_ITALIC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_UNDERLINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_STRIKETHROUGH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 매개변수 styles는 위의 STYLE_** 상수를 비트별 OR한 값이다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applyStyles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyStyles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STYLE_BOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STYLE_ITALIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 비트별 OR을 사용해 여러 상수를 모은 집합을 비트 필드라고 한다.&lt;/p&gt;

&lt;p&gt;비트 필드를 사용하면 비트별 연산을 통해 집합 연산을 효율적으로 수행할 수 있다. &lt;strong&gt;하지만 비트 필드는 정수 열거 패턴을 사용했을 때의 단점을 그대로 가지며, 추가로 다음 문제까지 안고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비트 필드 값이 그대로 출력될 때는 정수 열거 패턴 때보다 &lt;strong&gt;해석하기가 더 까다롭다.&lt;/strong&gt; 또한 비트 필드 하나에 녹아 있는 모든 원소를 순회하기도 힘들다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;또한 비트 필드 선언시 최대 몇 비트가 필요한지를 미리 예측해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바에서는 이 비트 필드에 대한 더 나은 대안으로 &lt;strong&gt;EnumSet&lt;/strong&gt; 클래스를 제공하는데, 이 클래스는 &lt;strong&gt;열거 타입 상수의 값으로 구성된 집합을 효과적으로 표현한다.&lt;/strong&gt; Set 인터페이스를 구현하며, 타입 안전하고, 다른 어떤 Set 구현체와도 사용 가능하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;EnumSet 내부는 비트 벡터로 구현되어 있다. 원소가 64개 이하라면, long 변수 하나로 비트 필드에 견주는 성능을 보여준다. removeAll과 같은 대량 작업은 비트를 효율적으로 처리할 수 있는 산술 연산을 써서 구현되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOLD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ITALIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNDERLINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STRIKETHROUGH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 어떤 Set을 넘겨도 되나, EnumSet이 가장 좋다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 인터페이스로 파라미터 타입을 정의하는 것이 좋다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applyStyles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Applying styles %s to text%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;applyStyles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOLD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ITALIC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;37-ordinal-인덱싱-대신-enummap을-사용하라&quot;&gt;37. ordinal 인덱싱 대신, EnumMap을 사용하라.&lt;/h2&gt;

&lt;p&gt;이따금 배열이나 리스트에서 원소를 꺼낼 때, ordinal 메서드를 통해 인덱스를 얻는 코드가 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ANNUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PERENNIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BIENNIAL&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lifeCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 식물을 표현한 클래스의 인스턴스들을 배열 하나로 관리하고, 이들을 생애주기에 따라 묶어보자.
생애주기별로 총 3개의 집합으로 만들고 각 식물을 해당 집합에 넣는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;garden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;바질&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANNUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;캐러웨이&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIENNIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;딜&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANNUAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;라벤더&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PERENNIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;파슬리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BIENNIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;로즈마리&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PERENNIAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;garden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ordinal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s: %s\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;동작은 하는데 문제가 한가득이다. 배열은 제네릭과 호환되지 않으니 비검사 형변환을 수행해야 되고, 깔끔히 컴파일되지 않을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;심각한 문제는 정확하게 정숫값을 사용한다는 것을 직접 보증해야 한다는 점이다.&lt;/strong&gt; 정수는 열거 타입과는 다르게 타입 안전하지 않기 때문이다. 잘못된 정숫값을 사용시 오동작하거나, ArrayIndexOutOfBoundsException을 던질 것이다.&lt;/p&gt;

&lt;p&gt;여기서 배열은 실질적으로 열거 타입 상수를 값으로 매핑하는 역할을 한다. 그러니 &lt;strong&gt;Map으로 대체할 수 있다.&lt;/strong&gt;
자바에서 열거 타입을 키로 사용하도록 설계한 Map 구현체인 &lt;strong&gt;EnumMap&lt;/strong&gt; 클래스를 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;garden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plantsByLifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;더 짧고 명료할 뿐만 아니라 안전하고 성능도 원래 일반 배열 사용했을 때와 비등하다.&lt;/strong&gt;
안전하지 않은 형 변환을 사용하지 않고, 맵의 키인 열거 타입이 그 자체로 출력용 문자열을 제공하므로 출력 결과에 직접 레이블을 달 필요가 없다.&lt;/p&gt;

&lt;p&gt;EnumMap의 성능이 ordinal을 쓴 배열과 비슷한 이유는 그 내부에서 배열을 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;스트림을 통해 맵을 관리하면 코드를 더 줄일 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;garden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 groupingBy는 키를 p.lifeCycle로, 값을 Set&amp;lt;Plant&amp;gt; 인스턴스로 하는 Map을 만들어준다. 그런데 위 코드는 EnumMap을 사용하지 않으므로 성능 이점이 사라지는 문제가 있다. EnumMap을 사용하기 위해서는 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 두 번째 파라미터인 Supplier&amp;lt;M&amp;gt; mapFactory에 원하는 맵 구현체를 명시해주면 된다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;garden&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupingBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LifeCycle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;38-확장할-수-있는-열거-타입이-필요하다면-인터페이스를-사용하라&quot;&gt;38. 확장할 수 있는 열거 타입이 필요하다면 인터페이스를 사용하라.&lt;/h2&gt;

&lt;p&gt;열거 타입은 확장할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 컴파일 에러&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlantEx&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대부분의 상황에서 열거 타입을 확장하는 것은 좋지 않은 생각이다. 확장한 열거 타입의 원소가 기반 열거 타입의 원소로 취급하는데, 그 반대가 성립되지 않는다. 또한 기반 열거 타입과 확장한 열거 타입 원소 모두를 순회할 방법이 마땅치 않고, 확장성을 높이려면 고려할 요소가 늘어나 설계와 구현이 복잡해진다.&lt;/p&gt;

&lt;p&gt;확장할 수 있는 열거 타입이 어울리는 쓰임이 최소한 하나는 있다. 가끔 API에서 제공하는 기본 열거 타입 외에 사용자가 확장할 수 있도록 열어줘야할 때가 있다.&lt;/p&gt;

&lt;p&gt;이럴 때에는 &lt;strong&gt;열거 타입이 임의의 인터페이스를 구현할 수 있다는 사실을 이용하면 된다.&lt;/strong&gt; 열거 타입용 인터페이스를 정의하고, 열거 타입이 이 인터페이스를 구현하도록 하는 것이다. 이 때, 이 열거 타입은 그 인터페이스의 표준 구현체 역할을 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasicOperation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PLUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;MINUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BasicOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;열거 타입인 BasicOperation을 확장할 수는 없지만, 인터페이스인 Operation은 확장할 수 있고 그 인터페이스를 연산의 타입으로 사용하면 된다. 사용자가 BasicOperation이 아닌 자기만의 Operation 열거 타입을 정의하고 싶을 때는 Operation을 구현한 또 다른 열거 타입을 정의하도록 하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtendedOperation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EXP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REMAINDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ExtendedOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;새로 작성한 연산은 Operation 인터페이스를 사용하는 어느 곳에서든 사용 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Class 객체가 열거 타입인 동시에 Operation의 하위 타입이어야 한다는 뜻이다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opEnumType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opEnumType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEnumConstants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%f %s %f = %f%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExtendedOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인터페이스를 이용해 확장 가능한 열거 타입을 흉내내는 방식에도 한 가지 문제가 있는데, &lt;strong&gt;열거 타입끼리 구현을 상속할 수 없다는 점이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아무 상태에 의존하지 않는 코드라면, &lt;strong&gt;인터페이스의 default 메서드&lt;/strong&gt;를 사용하는 방법이 있다. 그러나 위의 Operation의 예에서는 연산 기호를 저장하고 찾는 로직 (toString)이 열거 타입 모두 들어가야 한다. 이런 경우에는 &lt;strong&gt;도우미 클래스나 정적 도우미 메서드로 분리하는 방식으로 코드 중복을 없앨 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;39-명명-패턴보다-애너테이션을-사용하라&quot;&gt;39. 명명 패턴보다 애너테이션을 사용하라.&lt;/h2&gt;

&lt;p&gt;전통적으로 도구나 프레임워크가 특별히 다루어야 할 프로그램 요소에는 딱 구분되는 &lt;strong&gt;명명 패턴&lt;/strong&gt;을 사용해왔다.&lt;/p&gt;

&lt;p&gt;예를 들어 테스트 프레임워크인 &lt;strong&gt;JUnit&lt;/strong&gt;은 버전 3까지 테스트 메서드 이름을 &lt;strong&gt;test&lt;/strong&gt;로 시작하게끔 하였다. 이 방식의 단점은 오타가 나면 안될 뿐만 아니라, 올바르게 사용되리라 보장이 안된다. 예를 들어, 개발자가 클래스 이름을 Test**로 시작하게 하여도 JUnit은 무시한다.&lt;/p&gt;

&lt;p&gt;마지막으로 프로그램 요소를 매개변수로 전달할 방법이 없다는 점이다. 특정 예외를 던져야만 성공하는 테스트가 있다고 했을 때 기대하는 예외 타입을 테스트 메서드에 매개변수로 전달해야 되는데, 예외의 이름을 테스트 메서드 이름에 붙이는 방법도 있지만 보기가 나쁘고 깨지기도 쉽다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;애너테이션&lt;/strong&gt;은 이 모든 문제를 해결해줄 수 있다. Junit도 버전 4부터 전면 애너테이션을 도입하였다.
Test라는 이름의 애너테이션을 정의해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 매개변수가 없는 정적 메서드 전용&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 적절한 애너테이션 처리가 없이 인스턴스 메서드나 매개변수가 있는 메서드에 달면 에러가 발생한다.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 메타 애너테이션&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 런타임에도 유지되어야 함&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 메서드 선언에서만 사용되어야 함&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 성공해야 한다.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;실패&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 테스트가 아니다.&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 잘못 사용한 예: 정적 메서드가 아니다.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;실패&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 클래스에 정의된 메서드를 차례로 호출한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// 테스트 메서드가 예외를 던지면 리플렉션 매커니즘이&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// InvocationTargetException 예외로 감싸서 다시 던진다.&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationTargetException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 실패: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;잘못 사용한 @Test: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;성공: %d, 실패: %d%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 애너테이션을 &lt;strong&gt;“애너테이션을 아무 매개변수 없이 단순히 대상에 마킹한다.”는 뜻에서 마커 애너테이션이라고 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@Test 애너테이션이 &lt;strong&gt;Sample 클래스의 의미에 직접적인 영향을 주지 않는다.&lt;/strong&gt;
&lt;strong&gt;그저 이 애너테이션에 관심있는 프로그램에게 추가적인 정보만 제공해줄 뿐이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉, &lt;strong&gt;대상 코드의 의미는 그대로 둔 채, 그 애너테이션에 관심있는 도구에서 특별하게 처리할 수 있는 기회를 주는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 의도한 대로 테스트 하나만 통과하는 것을 알 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2019-02-09-effective_java_06/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 특정 예외를 던져야만 성공하는 테스트를 지원해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 애너테이션의 매개변수 타입은 &lt;strong&gt;Class&amp;lt;? extends Throwable&amp;gt;&lt;/strong&gt; 이다. Throwable을 확장한 클래스의 Class 객체를 의미하며, 따라서 모든 예외와 오류 타입을 수용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 성공해야 한다.&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다. (다른 예외 발생)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다. (예외가 발생하지 않음)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sample2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationTargetException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 실패: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;잘못 사용한 @Test: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: 예외를 던지지 않음%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationTargetException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    
                    &lt;span class=&quot;c1&quot;&gt;// 예외 발생시, 해당 예외 타입이면 성공&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: 기대한 예외 %s, 발생한 예외 %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;잘못 사용한 @ExceptionTest: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;성공: %d, 실패: %d%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2019-02-09-effective_java_06/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 예외를 여러 개 명시하고 그 중 하나만 발생해도 테스트 성공하게 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 배열 매개변수 지정&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 성공해야 한다.&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다. (다른 예외 발생)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArithmeticException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 실패해야 한다. (예외가 발생하지 않음)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 여러 개 지정시 중괄호로 감싸고, 쉼표로 구분한다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;NullPointerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doublyBad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 성공해야 한다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 자바 API 명세에 따르면 다음 메서드는 IndexOutOfBoundsException이나&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// NullPointerException을 던질 수 있다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sample3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationTargetException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 실패: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;잘못 사용한 @Test: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 배열 매개변수를 받는 애너테이션을 처리하는 코드&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: 예외를 던지지 않음%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldPassed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// 여러 예외를 검사할 수 있다.&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldPassed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: %s %n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;성공: %d, 실패: %d%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2019-02-09-effective_java_06/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;자바 8부터는 여러 개의 값을 받는 애너테이션을 다른 방식으로 만들 수도 있다.
&lt;strong&gt;배열 매개변수를 지정하는 대신, 애너테이션에 @Repetable 메타애너테이션을 다는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 이 애너테이션에 &quot;컨테이너 애너테이션&quot;의 class 객체를 정의해야 한다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Repeatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTestContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// @Repetable 애너테이션을 단 애너테이션을 반환하는 &quot;컨테이너 애너테이션&quot;을 정의해야 한다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionTestContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 내부 애너테이션의 타입의 배열을 반환하는 value 메서드를 정의해야 한다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 다음과 같이 반복 가능하게 애너테이션을 달 수 있다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NullPointerException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doublyBad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 자바 API 명세에 따르면 다음 메서드는 IndexOutOfBoundsException이나&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// NullPointerException을 던질 수 있다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RunTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sample4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvocationTargetException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 실패: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;잘못 사용한 @Test: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 반복 가능한 애너테이션을 여러 개 달았을 경우에는 &quot;컨테이너 애너테이션&quot;이 적용되므로&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// m.isAnnotationPresent(ExceptionTest.class) == false,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// m.isAnnotationPresent(ExceptionTestContainer.class) == true 가 된다.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 따라서 둘 다 검사하도록 해야 한다.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAnnotationPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTestContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: 예외를 던지지 않음%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedExc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldPassed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotationsByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionTest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;excTests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldPassed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 %s 실패: %s %n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;성공: %d, 실패: %d%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 &lt;strong&gt;소스코드에 추가적인 정보를 제공할 필요가 있다면 명명패턴 보다는 애너테이션을 사용하도록 한다.&lt;/strong&gt; 그리고 &lt;strong&gt;자바 프로그래머라면 예외없이 자바가 제공하는 애너테이션 타입들은 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;40-override-애너테이션을-일관되게-사용하라&quot;&gt;40. @Override 애너테이션을 일관되게 사용하라.&lt;/h2&gt;

&lt;p&gt;자바가 기본으로 제공하는 애너테이션 중 보통의 프로그래머에게 가장 중요한 것은 &lt;strong&gt;@Override&lt;/strong&gt; 애너테이션이다. 이 애너테이션이 달렸다는 것은 &lt;strong&gt;상위 타입의 메서드를 재정의했음을 의미한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 애너테이션을 일관되게 사용하면 각종 버그들을 예방할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bigram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bigram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bigram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bigram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'z'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bigram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main 메서드를 보면, 똑같은 소문자 2개로 구성된 인스턴스 26개를 10번 반복해서 Set에 추가한다음, 그 집합의 크기를 출력한다. Set은 중복을 허용하지 않으므로, 26이 출력될 것 같지만 실제로는 260이 출력된다.&lt;/p&gt;

&lt;p&gt;Bigram 클래스는 equals 메서드 및 hashCode 메서드를 재정의하였다. 그런데 이 클래스는 equals를 재정의한 것이 아니고 다중 정의한 것이다. &lt;strong&gt;Object의 equals 메서드를 재정의하려면 매개변수 타입을 Object로 해야된다.&lt;/strong&gt; Object의 equals 메서드는 기본적으로 == 연산자와 똑같은 객체 식별성만을 검사하므로, 결국 위의 코드에서 260을 출력한 것이다.&lt;/p&gt;

&lt;p&gt;이 오류를 컴파일 단계에서 찾아내기 위해서는 @Override 애너테이션을 사용하여 재정의한다는 의도를 명시해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 컴파일 에러&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bigram&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘못된 부분을 명확히 알려주므로, 올바르게 수정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bigram2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bigram2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bigram2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 컴파일 단계에서 오류를 즉각 찾아낼 수 있도록, &lt;strong&gt;상위 클래스의 메서드를 재정의하려는 모든 메서드에 @Override 애너테이션을 다는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@Override는 클래스 뿐만 아니라 인터페이스의 메서드를 재정의할 때도 사용할 수 있다. &lt;strong&gt;디폴트 메서드&lt;/strong&gt;를 지원하기 시작하면서, 인터페이스 메서드를 구현할 때도 @Override 애너테이션을 다는 습관을 들이면 메서드 시그니처가 올바른지 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;41-정의하려는-것이-타입이라면-마커-인터페이스를-사용하라&quot;&gt;41. 정의하려는 것이 타입이라면 마커 인터페이스를 사용하라.&lt;/h2&gt;

&lt;p&gt;아무 메서드도 담지 않고, 단지 자신을 구현하는 클래스가 특정 속성을 가짐을 표시해주는 인터페이스를 &lt;strong&gt;마커 인터페이스&lt;/strong&gt;라고 한다. &lt;strong&gt;Serializable&lt;/strong&gt; 인터페이스가 좋은 예이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serializable 인터페이스는 자신을 구현한 클래스의 인스턴스는 ObjectOutputStream을 통해 write할 수 있다고 알려준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;마커 애너테이션과 비교하자면, 두 가지 면에서 장점을 가진다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;마커 인터페이스는 이를 구현한 &lt;strong&gt;클래스의 인스턴스들을 구분하기 위한 타입&lt;/strong&gt;으로 사용할 수 있으나 마커 애너테이션은 그럴 수 없다.
    &lt;ul&gt;
      &lt;li&gt;마커 인터페이스는 엄연한 타입이므로, 런타임에 발견할 오류를 컴파일 타임에 찾을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;적용 대상을 더 정밀하게 지정할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;적용 대상을 &lt;strong&gt;ElementType.TYPE&lt;/strong&gt;으로 지정한 애너테이션은 모든 타입(클래스, 인터페이스, 열거 타입 등)에 달 수 있는데, 이는 부착할 수 있는 타입을 세밀하게 제한을 하지 못한다는 뜻이다.&lt;/li&gt;
      &lt;li&gt;마커 인터페이스라면 특정 클래스에서만 그 인터페이스를 확장하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;반대로 &lt;strong&gt;마커 애너테이션이 마커 인터페이스보다 나은 점으로는 거대한 애너테이션 시스템의 지원을 받을 수 있다는 점이다.&lt;/strong&gt; 따라서 애너테이션을 적극적으로 활용하는 프레임워크에서는 마커 애너테이션을 쓰는 쪽이 일관성을 지키는데 유리하다.&lt;/p&gt;

&lt;p&gt;클래스와 인터페이스 외의 프로그램 요소들(모듈, 패키지, 필드, 지역 변수등)에 마킹해야 될 경우에는 애너테이션을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;만약 마커를 클래스나 인터페이스에 적용해야 할 때, &lt;strong&gt;이 마킹이 된 클래스의 인스턴스를 매개변수로 받는 메서드를 작성할 일이 있다면 마커 인터페이스를 써야 한다.&lt;/strong&gt; 이렇게 하면 그 마커 인터페이스를 매개변수 타입으로 지정하여 컴파일타임에 오류를 잡을 수 있다. 만약 이런 메서드를 작성할 일이 없다면 마커 애너테이션이 더 나은 선택이다.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/02/09/effective_java_06-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/02/09/effective_java_06-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 05 - 제네릭</title>
        <description>&lt;h1 id=&quot;제네릭&quot;&gt;제네릭&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;26-로-타입-raw-type은-사용하지-말라&quot;&gt;26. 로 타입 (Raw Type)은 사용하지 말라.&lt;/h2&gt;

&lt;p&gt;클래스와 인터페이스 선언에 &lt;strong&gt;타입 매개변수&lt;/strong&gt;가 쓰이면 이를 &lt;strong&gt;제네릭 클래스&lt;/strong&gt; 혹은 &lt;strong&gt;제네릭 인터페이스&lt;/strong&gt;라고 한다.&lt;/p&gt;

&lt;p&gt;위와 같이 List 제네릭 인터페이스는 &lt;strong&gt;타입 매개변수 E&lt;/strong&gt;를 받는다. 제네릭 클래스와 제네릭 인터페이스를 &lt;strong&gt;제네릭 타입&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;각각의 제네릭 타입은 일련의 &lt;strong&gt;매개변수화 타입&lt;/strong&gt;을 정의한다.
다음과 같이 클래스 혹은 인터페이스 이름이 나오고, 꺽쇠괄호 안에 실제 타입 매개변수들을 나열한다.&lt;/p&gt;

&lt;p&gt;제네릭 타입에서 타입 매개변수를 전혀 사용하지 않는 것은 &lt;strong&gt;로 타입&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// List: 제네릭 인터페이스&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// E: 타입 매개변수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// List&amp;lt;String&amp;gt;: 매개변수화 타입&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// List: 로 타입 (raw type)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;로 타입은 타입 선언에서 제네릭 타입 정보가 전부 지워진 것처럼 동작하는데, 제네릭이 도입되기 전의 코드와 호환성을 맞추도록 하기 위해 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음과 같이 로 타입을 사용하면, 컴파일 오류가 없이 컴파일되고 실행된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Coin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일 에러 X&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ClassCastException&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;오류는 가능한 발생 즉시, 이상적으로는 컴파일할 때 발견하는 것이 좋다.&lt;/strong&gt; 
위의 예에서는 런타임에서 확인할 수 있는데 이렇게 되면 &lt;strong&gt;런타임에 문제를 겪는 코드와 원인을 제공한 코드가 물리적으로 상당히 떨어져 있을 가능성이 커진다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예외 발생시 stamps에 잘못된 값을 넣은 지점을 찾기 위해 코드 전체를 확인해야 될 수 있다.&lt;/p&gt;

&lt;p&gt;제네릭을 활용하면 이 정보가 타입 선언 자체에 녹아든다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stamps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 선언하면 컴파일러는 stamps에 Stamp의 인스턴스만을 넣어야 한다는 것을 인지하게 된다.
따라서 아무 경고없이 컴파일된다면 의도대로 동작할 것임을 보장한다.&lt;/p&gt;

&lt;p&gt;로 타입(타입 매개변수가 없는 제네릭 타입)을 쓰는 것은 언어 차원에서 막지는 않았지만 사용해서는 안된다.
&lt;strong&gt;로 타입을 쓰면 제네릭이 안겨주는 안정성과 표현력을 모두 잃게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;List와 같은 로 타입은 사용해서는 안되나, List&amp;lt;Object&amp;gt; 처럼 임의 객체를 허용하는 매개변수화 타입은 괜찮다.
로 타입인 List와 매개변수화 타입인 List&amp;lt;Object&amp;gt;의 차이는, List는 제네릭 타입에서 완전히 발을 뺀 것이고, List&amp;lt;Object&amp;gt;는 모든 타입을 허용한다는 의사를 컴파일러에 명확히 전달한 것이다.&lt;/p&gt;

&lt;p&gt;매개변수로 List를 받는 메서드에는 List&amp;lt;String&amp;gt;을 전달할 수 있지만, List&amp;lt;Object&amp;gt;를 받는 메서드에는 전달할 수 없다. List&amp;lt;String&amp;gt;은 List의 하위 타입이지만, List&amp;lt;Object&amp;gt;의 하위 타입은 아니다. 따라서 &lt;strong&gt;List&amp;lt;Object&amp;gt;를 사용할 때와는 달리 List 같은 로 타입을 사용하면 타입 안전성을 잃게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;unsafeAdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ClassCastException&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unsafeAdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드를 그대로 실행하면, 예외가 발생한다. Integer를 String으로 변환하려 시도한 것이다.
문제는 List와 같은 로 타입을 사용함으로써 컴파일 타임이 아닌, 런 타임에 이 오류를 인지할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;이번에는 2개의 집합(Set)을 받아 공통 원소를 반환하는 메서드를 작성한다고 해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numElementsInCommon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;o1:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 메서드는 동작은 하지만, 로 타입을 사용하여 안전하지 않다. 
원소의 타입과는 상관없는 메서드를 작성할 때는 &lt;strong&gt;안전하지 않은 로 타입보다는 비한정적 와일드카드 타입을 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numElementsInCommon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set과 Set&amp;lt;?&amp;gt;의 차이점은 Set과 같은 로 타입 컬렉션에는 아무 원소나 넣을 수 있어, 불변식을 훼손하기 쉽지만 Set&amp;lt;?&amp;gt;과 같은 비한정적 와일드카드 타입을 사용한 경우 null 이외에 어떤 원소도 넣을 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;몇-가지-예외사항&quot;&gt;몇 가지 예외사항&lt;/h3&gt;

&lt;p&gt;로 타입을 사용하지 말라는 규칙에는 몇 가지 예외가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class 리터럴에는 로 타입을 써야 한다.&lt;/strong&gt; 자바 명세에서는 class 리터럴에 매개변수화 타입을 사용하지 못하도록 하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// X&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 번째로는 instanceof 연산자와 관련이 있는데, &lt;strong&gt;런타임에는 제네릭 타입 정보가 지워지므로 instanceof 연산자는 비한정적 와일드카드 타입 이외의 매개변수화 타입에는 적용할 수 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 instanceof 연산자는 로 타입과 비한정적 와일드카드 타입에서 똑같이 동작한다. 따라서 비한정적 와일드카드 타입 사용시, 꺽쇠나 물음표는 아무 역할없이 코드를 지저분하게 만드므로 다음과 같은 상황에서는 로 타입을 사용하는 것이 낫다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// instanceof 연산자 사용시에는 로 타입 사용&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 실제 사용시에는 로 타입이 아닌 비한정적 와일드카드 타입 사용&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;27-비검사-경고-unchecked-warning를-제거하라&quot;&gt;27. 비검사 경고 (unchecked warning)를 제거하라.&lt;/h2&gt;

&lt;p&gt;제네릭을 사용하기 시작하면 수 많은 컴파일러 경고를 받게 된다.
제네릭에 익숙해질수록 마주치는 경고 수는 줄겠지만 &lt;strong&gt;경고를 무시해서는 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대부분의 비검사 경고는 쉽게 제거할 수 있다.
다음과 같이 코드 작성시, unchecked conversion 경고가 발생할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exaltation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자바 7부터 지원하는 다이아몬드 연산자를 통해 해당 경고는 쉽게 제거할 수 있다. 그러면 컴파일러는 올바른 실제 타입 매개변수 Lark를 추론한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exaltation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제거하기 어려운 경고도 많지만, &lt;strong&gt;할 수 있는 한 모든 비검사 경고 (unchecked) 경고를 제거하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;모두 제거한다면 그 코드의 타입 안전성은 확실히 보장된다. 즉 런타임에는 ClassCastException이 발생할 일이 없고 의도대로 잘 동작하리라 확신할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;suppresswarningsunchecked&quot;&gt;@SuppressWarnings(“unchecked”)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;경고를 제거할 수는 없지만 타입 안전하다고 확신할 수 있다면 @SuppressWarnings 애너테이션을 통해 경고를 숨기도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;타입 안전성을 검증하지 않은 채 경고를 숨긴다면 예외가 발생할 수 있으니 피해야 되지만, 그렇다고 안전하다고 검증된 코드에 대해 &lt;strong&gt;경고를 숨기지 않고 그대로 두면 진짜 문제를 알리는 새로운 경고가 발생하더라도 눈치채지 못할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@SuppressWarning 애너테이션은 개별 지역변수부터 클래스 전체까지 어떤 선언에도 달 수 있다. 하지만 &lt;strong&gt;@SuppressWarning 애너테이션 사용시, 항상 가능한 한 좁은 범위에 적용하도록 한다.&lt;/strong&gt; 그래야 심각한 경고를 놓치지 않을 수 있다.&lt;/p&gt;

&lt;p&gt;만약 한 줄이 넘는 메서드나 생성자에 달린 @SuppressWarning 애너테이션을 발견하면 가급적 지역변수 선언 쪽으로 옮기는 것이 좋다. 지역변수를 새로 선언하는 수고를 해야할 수 있으나, 그만한 값어치가 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// unchecked cast warning&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드를 컴파일하면 주석이 달린 줄에서 경고가 발생할 것이다.&lt;/p&gt;

&lt;p&gt;만약 이 코드의 타입 안전성이 확실하다고 검증된다면 @SuppressWarning 애너테이션를 사용해야 할텐데, 메소드 전체에 적용하는 것보다는 가능한 범위를 좁히는 것이 좋다.&lt;/p&gt;

&lt;p&gt;그런데 애너테이션은 선언에만 달 수 있으므로 위 코드의 주석이 달린 줄에 바로 애너테이션을 달 수는 없다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같이 반환 값을 담을 지역변수를 하나 선언하고 그 변수에 애너테이션을 다는 것이다. 지역변수가 선언되기는 했지만 비검사 경고를 무시하는 범위를 최대한 좁힐 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@SuppressWarning 애너테이션을 사용할 때는, 그 경고를 무시해도 되는 이유를 항상 주석으로 남겨야 한다.&lt;/strong&gt; 그래야 다른 사람이 코드를 이해하는 데 도움이 되며, 다른 사람이 그 코드를 잘못 수정하여 타입 안전성을 잃는 상황을 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;28-배열보다는-리스트를-사용하라&quot;&gt;28. 배열보다는 리스트를 사용하라.&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;배열과-제네릭-차이&quot;&gt;배열과 제네릭 차이&lt;/h3&gt;

&lt;p&gt;배열과 제네릭 타입에는 중요한 차이가 두 가지 있다.&lt;/p&gt;

&lt;p&gt;첫 번째로는 &lt;strong&gt;배열은 공변(Covariant)이지만, 제네릭은 불공변(Incovariant) 이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 가능. Sub[]은 Super[]의 하위 타입&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 불가. List&amp;lt;Super&amp;gt;는 List&amp;lt;Sub&amp;gt;과 관계없음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;배열 Sub[]은 Super[]의 하위 타입이 되지만 List&amp;lt;Super&amp;gt;와 List&amp;lt;Sub&amp;gt;은 아무 관계가 없다.&lt;/p&gt;

&lt;p&gt;이런 특성으로 인해, 배열을 사용할 때는 문제가 발생할 가능성이 높다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 문법적으로는 정상. 그러나 런타임에 실패&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;objectArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ArrayStoreException. 단, 컴파일 타임에는 알아챌 수 없다.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 문법에 맞지 않음.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일 에러&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어느 쪽이든 Long 용 저장소에 String 값을 넣을 수는 없다. 그러나 &lt;strong&gt;배열은 런타임에 실수를 알게 되지만, 리스트를 사용할 때 컴파일시 바로 알 수 있다는 장점이 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;두 번째로는 &lt;strong&gt;배열은 실체화(reify)된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 말의 뜻은 &lt;strong&gt;배열은 런타임에도 자신이 담기로 한 원소의 타입을 인지하고 확인한다.&lt;/strong&gt; 따라서 위의 코드에서 Long 배열에 String 값을 넣으려하면 예외가 발생한 것이다.&lt;/p&gt;

&lt;p&gt;그러나 &lt;strong&gt;제네릭은 타입 정보가 런타임에는 소거(erasure)된다.&lt;/strong&gt; 원소 타입은 컴파일 타임에만 검사하며 런타임에는 알 수가 없다는 뜻이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;제네릭에서 런타임때 타입 소거는 제네릭이 도입되기 전에 작성한 코드와 호환성을 위환 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;위의 차이로 인해 &lt;strong&gt;배열과 제네릭은 잘 어우러지지 못한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 배열은 제네릭 타입, 매개변수화 타입, 타입 매개변수로 사용할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 문법 오류&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 문법 오류&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제네릭 배열을 만들지 못하게 막은 이유는 타입 안전하지 않기 때문이다.&lt;/p&gt;

&lt;p&gt;이를 허용하면 컴파일러가 자동 생성하는 형변환 코드에서 런타임에 ClassCastException 예외가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이는 컴파일타임에 타입 체크하고, 런타임에 ClassCastException 예외 발생을 최대한 방지하여 타입 안전성을 확보하기 위한 제네릭 타입 시스템의 취지에 어긋나는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 제네릭 배열을 허용했을 때의 문제점을 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 허용한다고 가정&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 배열은 공변이므로 아무 문제없이 넣을 수 있다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;// 제네릭은 타입 정보가 소거되므로 성공한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 런타임에는 List&amp;lt;Integer&amp;gt;가 List가 되고, List&amp;lt;Integer&amp;gt;[]는 단순히 List[]가 된다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 즉 List[0] = List 와 다름없다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;          

&lt;span class=&quot;c1&quot;&gt;// 여기서 ClassCastException 예외 발생&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 컴파일러는 List에서 꺼낸 원소를 String으로 자동 형변환하려고 하는데,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Integer가 저장되어 있었으므로 예외가 발생한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 문제를 방지하기 위해 제네릭 배열을 사용할 수 없도록 애초에 막아야 하는 것이다.&lt;/p&gt;

&lt;p&gt;정규 타입 매개변수 E, List&amp;lt;E&amp;gt;나 List&amp;lt;String&amp;gt;와 같은 타입을 &lt;strong&gt;실체화 불가 타입(non-reifiable type)&lt;/strong&gt;이라고 한다. &lt;strong&gt;실체화되지 않아 런타임에는 컴파일타임보다 타입 정보를 적게 가지는 타입이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;소거 메커니즘으로 인해 매개변수화 타입 가운데 실체화될 수 있는 타입은 List&amp;lt;?&amp;gt;와 Map&amp;lt;?, ?&amp;gt;과 같은 비한정적 와일드카드 타입뿐이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;배열을 제네릭으로 만들 수 없어 귀찮을 때가 많다. 예를 들어 제네릭 컬렉션에서 자신의 원소 타입을 담은 배열을 반환하는게 보통은 불가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;제네릭 타입과 가변인수 메서드를 함께 쓰면 해석하기 어려운 경고 메시지를 받게 된다. 가변인수 메서드를 호출할 때마다 가변인수 매개변수를 담을 배열이 만들어지는데, 배열의 원소가 실체화 불가 타입이면 경고가 발생하는 것이다. 이 문제는 @SafeVarargs 애너테이션으로 대처 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;배열로 형변환할 때 제네릭 배열 생성 오류나 비검사 형변환 경고가 뜨는 경우, 대부분 배열인 E[] 대신에 컬렉션인 List&amp;lt;E&amp;gt;를 사용하면 해결된다.&lt;/p&gt;

&lt;p&gt;코드가 조금 복잡해지고 성능이 살짝 나빠질 수 있지만 타입 안전성과 상호 운용성은 좋아진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Chooser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choiceArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Chooser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;choiceArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadLocalRandom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choiceArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choiceArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컬렉션 안의 원소 중 무작위로 선택하는 Chooser 클래스를 예로 살펴볼 때, 이 클래스를 사용하려면 choose 메서드를 호출할 때마다 클라이언트 쪽에서는 반환된 Object를 원하는 타입으로 반환해야 한다.&lt;/p&gt;

&lt;p&gt;이 때 만약 타입이 다른 원소가 있었다면 런타임에 형변환 오류가 날 것이다.&lt;/p&gt;

&lt;p&gt;이렇게 배열을 사용하는 대신 아예 제네릭을 사용한다면 타입 안정성을 확보할 수 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Chooser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choiceList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Chooser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;choiceList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;choose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadLocalRandom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choiceList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choiceList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;31-한정적-와일드카드를-사용해-api-유연성을-높이라&quot;&gt;31. 한정적 와일드카드를 사용해 API 유연성을 높이라.&lt;/h2&gt;

&lt;p&gt;List&amp;lt;String&amp;gt;과 같은 매개변수화 타입은 불공변이다.
즉 서로 다른 타입 Type1과 Type2가 있을 때, List&amp;lt;Type1&amp;gt;과 List&amp;lt;Type2&amp;gt;는 하위 타입도 상위 타입도 아니다.&lt;/p&gt;

&lt;p&gt;다음과 같은 스택을 표현하는 클래스가 있다고 해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 일련의 원소를 스택에 넣는 메서드를 추가한다고 생각해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pushAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;e:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 메서드는 잘 컴파일되겠지만 완벽하지가 않다. Iterable src의 원소타입이 스택의 원소타입과 일치한다면 잘 동작할 것이다.&lt;/p&gt;

&lt;p&gt;그러나 Stack&amp;lt;Number&amp;gt;로 선언하고 pushAll 메서드로 Integer 객체를 넘기면 어떻게 될까? Integer는 Number의 하위 타입이므로 논리적으로 잘 동작해야할 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numberStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pushAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 코드를 작성하면 오류 메시지가 뜬다. 매개변수화 타입이 불공변이기 때문이다.&lt;/p&gt;

&lt;p&gt;이를 위해 자바는 &lt;strong&gt;한정적 와일드카드 타입&lt;/strong&gt;이라는 특별한 매개변수화 타입을 지원한다. 이를 통해 하위 타입인 원소도 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pushAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;e:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 pushAll의 대척점에 있는 popAll 메서드를 작성해보자.&lt;/p&gt;

&lt;p&gt;이 메서드는 Stack안의 모든 원소를 주어진 컬렉션으로 옮겨 담는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;popAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에도 주어진 컬렉션의 원소 타입이 스택의 원소 타입과 일치한다면 잘 동작할 것이다.&lt;/p&gt;

&lt;p&gt;그러나 컬렉션의 원소 타입이 Object라고 한다면 오류가 발생한다. 이 경우에도 한정적 와일드카드 타입으로 해결할 수 있다. 이를 통해 상위 타입의 원소를 가지는 컬렉션에 넣을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;popAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예에서 알 수 있듯이, 제네릭을 사용할 때 &lt;strong&gt;유연성을 극대화하려면 원소의 생산자나 소비자용 입력 매개변수에 와일드카드 타입을 사용해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 와일드카드 타입을 사용해야 되는지는 &lt;strong&gt;PECS(producer-extends, consumer-super)&lt;/strong&gt; 라는 공식을 기억해두면 좋을 것이다.&lt;/p&gt;

&lt;p&gt;즉 매개변수 타입 T가 생산자라면 &amp;lt;? extends T&amp;gt;를 사용하고, 소비자라면 &amp;lt;? super T&amp;gt;를 사용하는 것이다. PECS 공식은 와일드카드 타입을 사용하는 기본 원칙이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 생산자는 원소를 주는 역할이고, 소비자는 원소를 가져가는 역할이라고 보면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;입력 매개변수가 생산자 / 소비자 역할을 동시에 한다면 와일드카드 타입을 써도 좋을 게 없다. 타입을 정확히 지정해야 하는 상황으로 이 때는 와일드카드 타입을 사용하면 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;반환 타입에 한정적 와일드카드를 사용해서는 안된다. 유연성을 높여주기는 커녕 클라이언트 쪽에서 와일드카드 타입을 사용해야 되기 때문이다. 제대로 제네릭을 사용했다면 사용자는 와일드카드 타입이 쓰였다는 사실을 의식하지 못하겠지만, 와일드카드 타입을 신경써야 한다면 그 API에 문제가 있을 가능성이 크다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;와일드카드 타입을 사용함으로써, &lt;strong&gt;받아들여 할 매개변수는 받고 거절해야 할 매개변수는 거절하는 작업이 자동으로 이루어진다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;타입 매개변수와 와일드카드에는 공통되는 부분이 많아 둘 중 어느 것을 사용해도 괜찮을 때가 많다.&lt;/p&gt;

&lt;p&gt;예를 들어 주어진 리스트에서 명시한 두 인덱스의 아이템을 교환하는 정적 메서드를 다음과 같이 정의해보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 경우에 어떤 선언이 더 나을까? public API라면 간단한 두 번째가 낫다. 어떠한 리스트든 이 메서드에 넘기면 명시한 인덱스의 원소를 교환해줄 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본 원칙은 메서드 선언에 타입 매개변수가 한 번만 나오면 와일드 카드로 대체하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비한정적 타입 매개변수라면 비한정적 와일드카드로 바꾸고, 한정적 타입 매개변수라면 한정적 와일드카드로 변경하면 된다. 그런데 두 번째 swap 메서드는 문제가 하나 있는데 다음과 같이 구현했을 때 컴파일이 안된다는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인은 List&amp;lt;?&amp;gt;에는 null 값외에는 어떠한 값도 넣을 수 없다는 데 있다. 이 문제를 해결하기 위한 간단한 방법은 private 도우미 메서드를 통해 구현하는 것이다. 실제 타입을 알아내려면 도우미 메서드는 제네릭 메서드여야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swapHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 도우미 메서드는 원소의 타입이 E인 것을 알고 있으므로 문제가 없고, 클라이언트 입장에서는 public인 swap 메서드가 비한정적 와일드카드를 사용하고 있으니 어떤 타입의 리스트든 넘길 수 있다는 것을 알 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 예에서 도우미 메서드는 public API로 사용하기에 부적절한 첫 번째 swap 메서드와 시그니처가 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;32-제네릭과-가변인수를-함께-쓸-때는-신중하라&quot;&gt;32. 제네릭과 가변인수를 함께 쓸 때는 신중하라.&lt;/h2&gt;

&lt;p&gt;가변인수 메서드와 제네릭은 서로 어울리지 않다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;실체화 불가 타입인 제네릭이나 매개변수화 타입은 런타임에는 컴파일타임보다 타입 관련 정보를 적게 담고 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;먼저 메서드를 선언할 때 실체화 불가 타입으로 가변 매개변수를 선언하면 컴파일러가 경고를 보낸다. 제네릭이나 매개변수화 타입을 담고 있는 배열이 생성되기 때문이다. 가변인수 메서드를 호출할 때도 넘겨지는 변수가 실체화 불가 타입으로 추론되면 경고를 보낸다.&lt;/p&gt;

&lt;p&gt;그렇다면 왜 다음과 같이 직접 제네릭 배열을 생성하는 것은 금지하면서도, 가변인수를 제네릭으로 선언하는 것은 허용하는 것일까?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringLists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 컴파일 오류&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 문제 없음&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genericVargsMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 이유는 제네릭이나 매개변수화 타입의 가변 매개변수를 받는 메서드가 실무에서 매우 유용하기 때문이다. 사실 자바 라이브러리도 이런 메서드를 여럿 제공하고 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arrays.asList(T… a)&lt;/li&gt;
  &lt;li&gt;Collections.addAll(Collection&amp;lt;? super T&amp;gt; c, T… elements)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 이렇게 제네릭으로 가변 매개변수를 선언할 때 컴파일 경고가 발생하므로, 자바 7 전에는 이 경고를 없애기 위해 @SuppressWarning 애너테이션을 통해 제거해야만 했다.&lt;/p&gt;

&lt;p&gt;자바 7에서는 &lt;strong&gt;@SafeVarargs&lt;/strong&gt; 애너테이션이 추가되어 제네릭 가변인수 메서드 작성자가 클라이언트 측에서 발생하는 경고를 숨길 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@SafeVarargs 애너테이션은 메서드 작성자가 그 메서드가 타입 안전함을 보장하는 장치이다.&lt;/strong&gt; 따라서 메서드가 안전한게 확실하지 않다면 애너테이션을 달아서는 안된다.&lt;/p&gt;

&lt;p&gt;가변인수 메서드를 호출할 때 그 메서드가 타입 안전한지는 메서드가 안에서 가변인수 배열에 대해 건드리지 않고 그 배열의 참조를 밖으로 노출하지 않는다면 타입 안전하다고 할 수 있다.&lt;/p&gt;

&lt;p&gt;즉, 가변 매개변수 배열이 호출자로부터 그 메서드로 &lt;strong&gt;순수하게 인수들을 전달하는 역할만 한다면 그 메서드는 타입 안전하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 다음과 같이 가변 매개변수를 받는 메서드가 외부로 가변 매개변수 배열 참조를 외부로 노출하면 타입 안전성이 깨지게 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 컴파일 타임에 반환되는 배열의 타입이 결정&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 컴파일 시점에 컴파일러로 충분한 정보가 주어지지 않아 타입을 잘못 판단할 수 있다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 따라서 그대로 반환시 힙 오염이 이 메서드를 호출한 쪽의 콜 스택까지 전이할 수 있다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 이 메서드를 본 컴파일러는 toArray 메서드에 넘길 가변 매개변수를 담을 배열을 만드는 코드를 생성한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 이 때, 이 배열의 타입은 Object[] 인데, pickTwo에 어떤 타입의 객체를 넘기더라도&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 담을 수 있는 가장 구체적인 타입이기 떄문이다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pickTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadLocalRandom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ClassCastException 예외 발생&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// pickTwo는 Object[] 타입의 배열을 리턴하게 된다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 컴파일러는 pickTwo의 반환 값을 attributes에 저장하기 위해&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// String[] 으로 변환하는 코드를 컴파일러가 자동 생성한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Object[]는 String[]의 하위 타입이 아니므로 이 형변환은 실패한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예는 &lt;strong&gt;제네릭 가변 매개변수 배열에 다른 메서드가 접근하도록 허용하면 안전하지 않다&lt;/strong&gt;라는 예시이다. 단, 이에 대한 예외는 두 가지가 있다.&lt;/p&gt;

&lt;p&gt;첫 번째로는 @SafeVarargs 애너테이션이 달린, 또 다른 가변 매개변수를 받는 메서드에 넘기는 것은 안전하다. (@SafeVarargs 애너테이션을 사용한다는 것은 타입 안전하다는 것을 보장한다는 의미이다.)&lt;/p&gt;

&lt;p&gt;두 번째는 그저 이 배열의 일부를 일반 메서드에 넘기는 것도 안전하다.&lt;/p&gt;

&lt;p&gt;다음이 제네릭 가변 매개변수를 안전하게 사용하는 예이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SafeVarargs&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;list:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@SafeVarargs 애너테이션을 사용해야 할 때 정하는 규칙은 간단하다. &lt;strong&gt;제네릭이나 매개변수화 타입의 가변 매개변수를 받는 모든 메서드에는 @SafeVarargs 애너테이션을 단다.&lt;/strong&gt; 그래야 사용자를 헷갈리게 하는 컴파일러 경고를 없앨 수 있다. &lt;strong&gt;이 말은 안전하지 않은 메서드는 절대 작성해서는 안 된다는 뜻이기도 하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 타입 안전하지 않은 가변 매개변수를 받는 메서드가 있으면 다음과 같이 수정해야 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가변 매개변수 배열을 건드는 코드가 있다면, 아무것도 저장하지 않고 건들지 않도록 수정한다.&lt;/li&gt;
  &lt;li&gt;그 배열의 참조 또는 복제복을 신뢰할 수 없는 외부로 노출시키지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;@SafeVarargs 애너테이션은 재정의할 수 없는 메서드에만 달아야 한다. 재정의한 메서드도 안전할지는 보장할 수 없기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사실 @SafeVarargs 애너테이션만이 유일한 정답은 아니다.&lt;/p&gt;

&lt;p&gt;다음과 같이 제네릭만을 사용해, 사용자 쪽에서는 임의 개수의 매개변수를 넘길 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;list:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 정적 팩터리 메서드인 List.of를 활용해 임의 개수의 매개변수를 넘길 수 있다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flattenList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;romans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countrymen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 방식의 장점은 컴파일러가 이 메서드의 타입 안전성을 검증할 수 있는데에 있다.&lt;/p&gt;

</description>
        <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/01/27/effective_java_05-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/01/27/effective_java_05-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 04 - 클래스와 인터페이스</title>
        <description>&lt;h1 id=&quot;클래스와-인터페이스&quot;&gt;클래스와 인터페이스&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;15-클래스와-멤버의-접근-권한을-최소화하라&quot;&gt;15. 클래스와 멤버의 접근 권한을 최소화하라.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;잘 설계된 컴포넌트와 그렇지 않은 것의 차이는 클래스의 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터 얼마나 잘 숨겼느냐다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;잘 설계된 컴포넌트는 내부 구현을 완벽히 숨겨, &lt;strong&gt;구현과 API를 깔끔히 분리한다.&lt;/strong&gt; 
오직 &lt;strong&gt;API를 통해서만 다른 컴포넌트와 소통하며 서로의 내부 동작 방식에는 전혀 개의치 않는다.&lt;/strong&gt; 이를 통해, 시스템을 구성하는 컴포넌트들을 서로 독립시켜 개발, 테스트, 적용 등을 개별적으로 할 수 있게 해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;정보 은닉, 캡슐화는 소프트웨어 설계의 근간이 되는 원리이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바는 정보 은닉을 위한 다양한 장치를 제공해주고 있다.
그 중 접근 제어 메커니즘은 클래스, 인터페이스, 멤버의 접근성을 명시한다.
각 요소의 접근성은 그 요소가 선언된 위치와 접근 제한자 (private, protected, public)으로 정해진다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본 원칙은 모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다는 것이다.&lt;/strong&gt;
달리 말해, 소프트웨어가 정상적으로 동작하는 한 가장 낮은 접근 수준을 부여해야 한다는 뜻이다.&lt;/p&gt;

&lt;p&gt;톱 레벨 클래스와 인터페이스에 부여할 수 있는 접근 수준은 package-private와 public 이다. 
&lt;strong&gt;public으로 선언하면 공개 API가 되며, package-private로 선언하면 해당 패키지 안에서만 이용할 수 있다.&lt;/strong&gt;
따라서 패키지 외부에서 쓸 이유가 없다면 package-private로 선언하는 것이 좋다. 공개된 API가 아닌 내부 구현이 되므로 언제든지 수정이 가능하다.&lt;/p&gt;

&lt;p&gt;만약 한 클래스에서만 사용하는 클래스이거나 인터페이스는 이를 사용하는 클래스 안에 &lt;strong&gt;private static 클래스&lt;/strong&gt;로 중첩시키는 것이 낫다.&lt;/p&gt;

&lt;p&gt;클래스를 설계할 때는 공개 API를 세심히 설계 후 그 외의 모든 멤버는 private로 선언한다. 그 후에 같은 패키지내의 다른 클래스가 접근할 필요가 생긴다면 그 때 package-private로 만들어주면 된다.&lt;/p&gt;

&lt;p&gt;Public 클래스에서의 protected 멤버는 공개 API이다. 따라서 protected 멤버 또한 가능한 적을수록 좋다.&lt;/p&gt;

&lt;p&gt;멤버 접근성을 좁히지 못하게 하는 제약 중 하나는 상위 클래스의 메서드를 재정의할 때이다.
&lt;strong&gt;메서드를 재정의할 때는 그 메서드의 접근 수준을 상위 클래스에서보다 좁게 설정할 수 없다.&lt;/strong&gt;
이 제약은 상위 클래스의 인스턴스는 하위 클래스의 인스턴스로 대체해 사용할 수 있어야 한다는 리스코프 치환 원칙을 지키기 위해 필요하다.&lt;/p&gt;

&lt;p&gt;테스트를 위해 클래스나 인터페이스, 멤버를 public이나 protected로 선언하여 공개 API로 만들면 안된다.
그럴 필요없이 테스트 클래스를 같은 패키지안에 둠으로써, package-private 요소에 접근할 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다.&lt;/strong&gt;
만약 필드가 참조 필드이거나, final이 아니라면 그 필드에 담을 수 있는 값을 제한할 힘을 잃게 된다. 즉, 그 필드와 관련된 모든 불변식을 보장할 수 없다는 뜻이다.
정적 필드도 마찬가지긴 하지만 클래스가 표현하는 추상 개념을 완성하기 위한 상수라면 public static final 필드로 공개해도 된다. 단, 기본 타입이거나 불변 객체여야 한다. 가변 객체라면 내부 필드를 수정할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;접근 제한자가 public인 가변 필드는 일반적으로 스레드 안전하지 않다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바 9에서는 모듈 시스템이 추가되어 두 가지 암묵적 접근 수준이 추가되었다.
모듈은 패키지의 묶음으로, 공개(export)할 것이라고 명시하지 않은 패지키라면 protected나 public이더라도 모듈 외부에서 접근할 수 없다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단, 모듈에 적용되는 새로운 두 접근 수준은 상당히 주의해서 사용해야 한다. 모듈 jar 파일을 자신의 모듈 경로가 아닌 애플리케이션의 클래스패스에 두면 그 모듈안의 모든 패키지는 모듈이 없는 것처럼 행동한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;16-public-클래스에서는-public-필드가-아닌-접근자-메서드를-사용하라&quot;&gt;16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라.&lt;/h2&gt;

&lt;p&gt;public 클래스에서는 패키지 바깥에서 필드를 바로 접근할 수 없도록 제한해야 한다.
불변 필드라하더라도 덜 위험하긴 하지만 안심할 수는 없다. 때로는 package-private 클래스나 private 중첩 클래스에서는 종종 필드를 노출하는 편이 나을 때도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;17-변경-가능성을-최소화하라&quot;&gt;17. 변경 가능성을 최소화하라.&lt;/h2&gt;

&lt;p&gt;불변 클래스란 &lt;strong&gt;그 인스턴스의 내부 값을 수정할 수 없는 클래스&lt;/strong&gt;이다.
불변 클래스는 설계 및 구현하고 사용하기 쉬우며, 오류가 생길 여지도 적고 안전하다.&lt;/p&gt;

&lt;p&gt;클래스를 불변으로 만들기 위해 다음 규칙을 따른다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 상태를 변경하는 메서드(예를 들면 setter)를 제공하지 않는다.&lt;/li&gt;
  &lt;li&gt;클래스를 확장할 수 없도록 한다.
    &lt;ul&gt;
      &lt;li&gt;하위 클래스에서 부주의하게 또는 나쁜 의도로 객체의 상태를 변경시키는 것을 막아야 한다.&lt;/li&gt;
      &lt;li&gt;대표적으로 final로 선언하거나 private 생성자를 만든 후 정적 팩토리 메서드로만 인스턴스화하는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 필드를 final로 선언한다.
    &lt;ul&gt;
      &lt;li&gt;설계자의 의도를 명확히하고, 스레드 간의 동기화없어도 문제없이 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모든 필드를 private로 선언한다.
    &lt;ul&gt;
      &lt;li&gt;필드가 참조하는 가변 객체를 클라이언트에서 직접 접근해 수정하는 일이 없도록 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자신외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.
    &lt;ul&gt;
      &lt;li&gt;가변 객체를 하나라도 참조한다면 클라이언트에서 그 객체 참조를 얻을 수 없도록 해야 한다.&lt;/li&gt;
      &lt;li&gt;접근자 메서드가 그대로 참조 필드를 반환해서는 안되며 필요시 방어적 복사를 수행해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;불변 객체는 근본적으로 스레드 안전하여 따로 동기화할 필요가 없다.&lt;/strong&gt;
또한 같은 불변 객체가 수시로 필요할 경우, 인스턴스를 중복해서 생성하지 않고 내부적으로 캐싱하는 정적 팩토리 메서드를 통해 성능 향상을 도모할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;불변 객체는 자유롭게 공유할 수 있으므로 clone 메서드나 복사 생성자를 제공해봐야 의미가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;불변 클래스에도 단점은 존재한다. &lt;strong&gt;값이 다르다면 반드시 서로 다른 독립된 객체로 존재해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;모든 클래스를 불변 클래스로 만들 수는 없지만, 그런 클래스이더라도 변경 가능한 부분을 최소화하는 것이 좋다.&lt;/strong&gt;
따라서 꼭 변경해야 할 필드를 뺀 나머지 모두는 final로 선언하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;18-상속보다는-컴포지션을-사용하라&quot;&gt;18. 상속보다는 컴포지션을 사용하라.&lt;/h2&gt;

&lt;p&gt;상속은 코드를 재사용하는 강력한 수단이지만 항상 최선은 아니다.
같은 프로그래머가 통제하는 패키지 안에서라면 상속도 안전하긴 하지만, 다른 패키지의 클래스를 상속하는 일은 위험하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서의 상속은 클래스가 다른 클래스를 확장하는 구현 상속을 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;메서드 호출과는 다르게 상속은 캡슐화를 깨뜨린다.&lt;/strong&gt;
다시 말하면, 상위 클래스가 어떻게 구현되느냐에 따라 하위 클래스의 동작에 이상이 생길 수 있다.&lt;/p&gt;

&lt;p&gt;다음 클래스는 HashSet에 엔트리가 추가될 때마다 카운팅하는 클래스인데, 정상적으로 동작하지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstrumentedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InstrumentedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InstrumentedHashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initCap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadFactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initCap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadFactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// addAll 메서드를 통해 원소가 3개인 컬렉션을 추가하였을 때, 카운팅되는 횟수는 6이다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이는 HashSet 클래스가 내부적으로 add 메서드를 통해 추가하고, 이 때 추가되는 add 메서드는 카운팅하는 자식 add 메서드이다.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결국 상위 클래스의 구현 방식에 따라 하위 클래스에 영향이 생기며, 이 때문에 상위 클래스의 변화에 맞춰 하위 클래스도 수정해야 되는 일이 생길 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 피하고자 아예 하위 클래스에서 상위 클래스 메서드를 호출하지 않고 재정의할 수도 있는데, 이 방식은 어렵고 시간도 들고 오류 발생하거나 성능을 더 떨어뜨릴 수 있다. 또한 상위 클래스 메서드가 private 필드를 사용하고 있었다면 구현 자체가 불가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 기존 클래스를 확장하는 대신, &lt;strong&gt;새로 클래스를 만들고 private 필드로 기존 클래스의 인스턴스를 참조하도록 하는 것이 좋다.&lt;/strong&gt;
기존 클래스가 새로운 클래스의 구성요소로 사용된다는 뜻에서 컴포지션(composition)이라 한다.&lt;/p&gt;

&lt;p&gt;새 클래스의 메서드들은 private 필드로 참조하고 있는 메서드들을 대신 호출하도록 함으로써, 기존 클래스의 내부 구현 방식의 영향에서 벗어나도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;               &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;retainAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                                       &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InstrumentedSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForwardingSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InstrumentedSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 Set 인터페이스를 구현하고 기존 Set 인터페이스를 구현한 구체 클래스의 영향에서 벗어나도록 한다.
또한 ForwardingSet 과 같은 랩퍼 클래스를 사용함으로써 어떠한 Set 구현체라도 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 어떤 특정 클래스에 기능이 추가시키는 것을 데코레이터 패턴이라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;상속은 &lt;strong&gt;하위 클래스가 상위 클래스의 하위 타입인 상황에서만 사용해야 한다.&lt;/strong&gt;. 
즉 클래스 B가 클래스 A와 &lt;strong&gt;is-a 관계&lt;/strong&gt;일 때만 상속해야 한다. 만약 아니라면 A를 private 인스턴스로 두고, A와는 다른 API를 제공해야 한다. 이 때 A는 B의 필수 구성요소가 아니라 구현 하는 방법 중 하나일 뿐인 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자바 라이브러리에서 이 원칙을 위배한 클래스가 대표적으로 Stack 및 Properties 클래스가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;is-a 관계이더라도 안심할 수는 없는게, 클래스의 패키지가 상위 클래스와 다르고 상위 클래스가 확장을 고려해 설계하지 않았다면 여전히 문제가 발생할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;19-상속을-고려해-설계하고-문서화하라-그러지-않았다면-상속을-금지하라&quot;&gt;19. 상속을 고려해 설계하고 문서화하라. 그러지 않았다면 상속을 금지하라.&lt;/h2&gt;

&lt;p&gt;상속용 클래스는 하위 클래스에서 재정의할 수 있는 메서드들을 &lt;strong&gt;상위 클래스에서는 내부적으로 어떻게 사용하는지 문서로 남겨야 한다.&lt;/strong&gt; 가령, API로 공개된 메서드가 자기 자신의 다른 메서드들을 호출할 수 있다.&lt;/p&gt;

&lt;p&gt;문서화할 때는 그 메서드가 어떤 메소드를 호출하며 어떤 순서로 호출하는지, 또는 각각의 호출 결과가 어떤 영향을 주는지도 담아야 한다. 이렇게 해야 하위 클래스에서는 상속할 때 주의점을 알게 되어 제대로 구현할 수 있게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;API 문서의 메서드 설명 끝에서 종종 “Implementation Requirements” 로 시작되는 절을 확인할 수있는데, 이는 그 메서드의 내부 동작 방식을 설명하는 것이다. 메서드 주석에 @implSepc 태그를 달아놓으면 자바독 도구가 생성해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@implSepc 태그는 자바 8에서 처음 도입되어 자바 9부터 본격적으로 사용되기 시작하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;좋은 API문서란 “어떻게”가 아닌 “무엇”을 하는지를 설명해야 한다는 원칙과 대치된다.&lt;/strong&gt;
이는 상속이 캡슐화를 해치기 때문이며, 클래스를 안전하게 상속하도록 하려면 내부 구현 방식을 설명할 수 밖에 없다.&lt;/p&gt;

&lt;p&gt;내부 메커니즘을 문서로 남기는 것만이 상속을 위한 설계의 전부는 아니다.
효율적으로 하위 클래스를 어려움없이 구현할 수 있도록 하려면 &lt;strong&gt;클래스의 내부 동작 과정 중간에 끼어들 수 있는 훅을 잘 선별하여 protected 메서드 형태로 공개해야 할 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;상속용 클래스를 시험하는 방법은 직접 하위 클래스를 만들어보는 것이 유일한 방법이다.
&lt;strong&gt;널리 쓰일 클래스를 상속용으로 설계한다면 문서화한 내부 사용 패턴과 protected 메서드, 필드를 구현하면서 선택한 결정에 영원히 책임져야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;상속용 클래스의 생성자는 직접적이든 간접적이든, &lt;strong&gt;하위 클래스에서 재정의 가능한 메서드를 호출해서는 안 된다.&lt;/strong&gt; 마침 하위 클래스에서 재정의한 메서드가 그 하위 클래스의 필드에 의존한다면 의도대로 동작하지 않는다.&lt;/p&gt;

&lt;p&gt;마찬가지로 Cloneable과 Serializable 인터페이스를 구현해서 사용하는 clone 및 readObject 메서드 또한 하위 클래스에서 재정의 가능한 메서드를 호출해서는 안된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cloneable이나 Serializable 인터페이스를 구현한 클래스를 상속할 수 있게 설계하는 것은 일반적으로는 좋지 않은 생각이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Serializable을 구현한 상속용 클래스가 readResolve나 writeReplace 메서드를 가진다면 이 메서드는 protected로 선언해야 한다. private로 선언하면 하위 클래스에서 무시된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;상속용으로 설계하지 않았다면 상속을 금지하는 것이 옳다.&lt;/strong&gt; 
방법은 클래스를 final로 선언하거나 private 생성자를 선언한 뒤, 정적 팩터리 메서드를 통해 인스턴스화시키는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;20-추상-클래스보다는-인터페이스를-우선하라&quot;&gt;20. 추상 클래스보다는 인터페이스를 우선하라.&lt;/h2&gt;

&lt;p&gt;자바가 제공하는 다중 구현 메커니즘은 인터페이스와 추상 클래스가 있다.
자바 8부터는 인터페이스도 디폴트 메서드를 제공할 수 있게 되어 두 메커니즘 모두 인스턴스 메서드를 구현 형태로 제공할 수 있다.&lt;/p&gt;

&lt;p&gt;둘의 가장 큰 차이는 &lt;strong&gt;추상 클래스가 정의한 타입을 구현하는 클래스는 반드시 추상 클래스의 하위 클래스여야 한다는 점이다.&lt;/strong&gt; 자바는 단일 상속만을 지원하므로, 추상 클래스 방식은 새로운 타입을 정의하는데 큰 제약을 준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이미 구현된 기존 클래스에는 쉽게 인터페이스를 구현해넣을 수 있다.&lt;/strong&gt; 인터페이스 메서드 추가하고, 클래스 선언 부에 implements 구문만 추가하면 된다.
반면에 추상 클래스의 경우에는 기존 클래스 위에 새로 끼워넣기에는 힘든 점이 있다. 만약 이미 상속을 하고 있는 경우라면?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;추상 클래스보다는 인터페이스가 믹스인 정의에 알맞다.&lt;/strong&gt;
믹스인이란 클래스가 구현할 수 있는 타입으로 원래 “주된 타입”외에 특정 선택적 행위를 제공한다고 선언하는 효과를 준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대표적으로 Comparable 인터페이스와 같이 순서를 정하는 선택적 기능을 제공해주는 경우&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;인터페이스의 메서드 중 구현 방법이 명백한 것이 있다면, 그 구현을 디폴트 메서드로 제공해줄 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//default로 선언함으로 메소드를 구현할 수 있다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;디폴트 메서드를 제공할 때는 상속하려는 사람을 위해 @implSpec 자바독 태그를 통해 문서화하는 것이 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;equals나 hashCode와 같은 Object의 메서드를 디폴트 메서드로 제공해서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;복잡한 인터페이스라면, 인터페이스와 추상 골격 구현 클래스를 함께 제공하는 식으로 인터페이스와 추상 클래스의 장점을 모두 취하는 방법도 있다.&lt;/strong&gt;
인터페이스로는 타입을 정의하고 간단한 구현이라면 인퍼페이스의 디폴트 메서드로 정의하고, 따로 인스턴스 필드가 필요한 복잡한 메서드들은 추상 골격 구현 클래스를 통해 구현하는 것이다. 
이렇게 해두면 골격 구현을 확장하는 것만으로 인터페이스를 구현하는 데 필요한 일이 대부분 완료된다. (템플릿 메서드 패턴)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;intArrayAsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 다이아몬드 연산자를 이렇게 사용하는 건 자바 9부터 가능하다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 더 낮은 버전을 사용한다면 &amp;lt;Integer&amp;gt;로 수정하자.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;골격 구현 클래스는 추상 클래스처럼 구현을 도와주는 동시에, 추상 클래스로 타입을 정의할 때 따라오는 심각한 제약에서 자유롭다는 장점이 있다.&lt;/p&gt;

&lt;p&gt;구조 상으로 골격 구현 클래스를 사용하지 못한다면, 인터페이스를 직접 구현해야 한다.
이런 경우라도 디폴트 메서드의 이점을 여전히 누릴 수 있으며, 필요하다면 골격 구현 클래스를 확장한 클래스를 private 내부 클래스 정의 및 필드로 두어 사용하는 컴포지션처럼 구현할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;골격 구현은 기본적으로 상속해서 사용한다는 것을 가정하므로, 상속을 고려해 설계해야 되고 문서화 지침도 따라야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;21-인터페이스는-구현하는-쪽을-생각해-설계하라&quot;&gt;21. 인터페이스는 구현하는 쪽을 생각해 설계하라.&lt;/h2&gt;

&lt;p&gt;자바 8 이전에는 기존 구현체를 깨뜨리지 않고는 인터페이스에 메서드를 추가할 방법이 없었다.
디폴트 메서드를 통해 기존 인터페이스에 메서드를 추가할 수 있도록 하였지만 위험이 사라진 것은 아니다.&lt;/p&gt;

&lt;p&gt;디폴트 메서드를 선언하면 그 인터페이스를 구현한 후 디폴트 메서드를 재정의하지 않은 모든 클래스에서 디폴트 구현이 쓰이게 된다. 디폴트 메서드는 기존 구현체에 런타임 오류를 일으킬 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대표적으로 자바 8의 인터페이스에 추가된 removeIf 디폴트 메서드가 있는데, 이를 구현하는 아차피 커먼즈 라이브러리의 Collections.synchronizedCollection 정적 팩토리 메서드가 반환하는 클래스에서 removeIf를 재정의하지 않아 동기화해주지 못하는 경우가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기존 인터페이스가 있고 이 인터페이스를 구현하는 여러 클래스가 존재할 때, 이 인터페이스에 디폴트 메서드로 새 메서드를 추가하는 일은 기존 구현체와 충돌할 수도 있으므로 심사숙고해서 결정해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;새로운 인터페이스를 만드는 경우라면 표준적인 메서드 구현을 제공하는 데 유용하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;22-인터페이스는-타입을-정의하는-용도로만-사용하라&quot;&gt;22. 인터페이스는 타입을 정의하는 용도로만 사용하라.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 한다.&lt;/strong&gt;
즉, 클래스가 어떤 인터페이스를 구현한다는 것은 자신의 인스턴스로 무엇을 할 수 있는지 클라이언트에 알리는 것이다.&lt;/p&gt;

&lt;p&gt;인터페이스는 이 용도로만 사용해야 한다.&lt;/p&gt;

&lt;p&gt;다음과 같은 메서드가 없어 상수만 나열된 상수 인터페이스 안티패턴은 인터페이스를 잘못 사용한 예다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PhysicalConstants&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AVOGADROS_NUMBER&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.022_140_857e23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BOLTZMANN_CONSTANT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.380_648_52&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELECTRON_MASS&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.109_383_56&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;클래스 내부에서 사용하는 상수는 외부 인터페이스가 아니라 내부 구현에 해당한다. 
따라서 이런 메서드가 하나도 없는 상수 인터페이스를 구현하는 것은 내부 구현을 클래스의 공개 API로 노출하는 행위이다. (클라이언트 코드가 상수 인터페이스의 상수들을 직접 사용할 수도 있다.)&lt;/p&gt;

&lt;p&gt;상수를 공개할 목적이라면 클래스나 메서드가 있는 인터페이스 (인터페이스 용도에 맞는) 자체에 추가하거나, 인스턴스화할 수 없는 유틸리티 클래스에 담아 공개하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;23-태그-달린-클래스보다는-클래스-계층-구조를-활용하라&quot;&gt;23. 태그 달린 클래스보다는 클래스 계층 구조를 활용하라.&lt;/h2&gt;

&lt;p&gt;두 가지 이상을 표현할 수 있으며, 그 중 현재 표현하려는 의미를 태그 값으로 알려주는 다음과 같은 클래스가 있다고 하자. 이 클래스는 원이나 사각형을 표현하는 클래스이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Figure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECTANGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CIRCLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 태그 필드 - 현재 모양을 나타낸다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 다음 필드들은 모양이 사각형(RECTANGLE)일 때만 쓰인다.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 다음 필드는 모양이 원(CIRCLE)일 때만 쓰인다.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 원용 생성자&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Figure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CIRCLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 사각형용 생성자&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Figure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RECTANGLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;RECTANGLE:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;CIRCLE:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스는 단점이 가득하다. 열거 타입 선언이나 태그 필드, switch 문과 같이 쓸데없는 코드가 많다.
특히 필드들을 final로 선언하려면 해당 의미에 쓰이지 않는 필드들까지 초기화해야 한다.&lt;/p&gt;

&lt;p&gt;또 새로운 의미가 추가된다면 siwtch 문을 찾아 코드를 추가해나가야 하며, 인스턴스 타입만으로는 현재 나타내는 의미를 정확히 알기 어렵다.&lt;/p&gt;

&lt;p&gt;따라서 이런 클래스는 계층 구조를 가지는 클래스로 바꾸어야 한다.
추상 클래스를 정의하여 공통적인 의미가 담도록 하고, 상속받도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Figure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Figure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Figure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;24-멤버-클래스는-되도록-static으로-만들라&quot;&gt;24. 멤버 클래스는 되도록 static으로 만들라.&lt;/h2&gt;

&lt;p&gt;중첩 클래스란 다른 클래스 안에 정의된 클래스를 말한다.
&lt;strong&gt;중첩 클래스는 자신을 감싼 바깥 클래스에서만 쓰여야 하며, 그 외의 쓰임새가 있다면 톱레벨 클래스로 만들어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;정적 멤버 클래스는 다른 클래스 안에 선언되고, 외부 클래스의 private 필드에 직접 접근할 수 있다는 점만 빼고는 일반 클래스와 같다. 정적 멤버 클래스는 다른 정적 멤버와 똑같은 접근 규칙을 적용받는다.&lt;/p&gt;

&lt;p&gt;흔히 바깥 클래스와 함께 쓰일 때만 유용한 도우미 클래스로 많이 쓰인다.&lt;/p&gt;

&lt;p&gt;정적 멤버 클래스와 비정적 멤버 클래스는 구문상의 차이는 static 뿐이지만 의미 상으로 차이가 크다.
비정적 멤버 클래스의 인스턴스는 암묵적으로 외부 클래스 인스턴스와 연결된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;중첩 클래스의 인스턴스가 외부 클래스 인스턴스와 독립적으로 존재할 수 있다면 정적 멤버 클래스로 만들어야 한다.&lt;/strong&gt; 비정적 멤버 클래스는 외부 클래스 인스턴스로의 숨은 외부 참조를 가지게 된다.&lt;/p&gt;

&lt;p&gt;이 관계 정보는 비정적 멤버 클래스의 인스턴스 안에 만들어져 메모리 공간을 차지하며 생성 시간도 더 걸린다. 만약 비정적 멤버 클래스의 인스턴스를 누군가가 계속 참조하고 있다면, 더 이상 사용하지 않는 외부 클래스 인스턴스를 가비지 컬렉터가 수거하지 못할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;25-톱레벨-클래스는-한-파일에-하나만-담으라&quot;&gt;25. 톱레벨 클래스는 한 파일에 하나만 담으라.&lt;/h2&gt;

&lt;p&gt;소스 파일 하나에 톱레벨 클래스를 여러 개 선언해도 자바 컴파일러는 불평하지 않는다.
그러나 아무런 이득이 없고, 만약 똑같은 클래스가 여러 파일에 걸쳐 존재한다면, 자바 컴파일시 소스 파일을 어느 순서로 컴파일하냐에 따라 동작이 달라진다.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/01/19/effective_java_04-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/01/19/effective_java_04-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 03 - 모든 객체의 공통 메서드</title>
        <description>&lt;h1 id=&quot;모든-객체의-공통-메서드&quot;&gt;모든 객체의 공통 메서드&lt;/h1&gt;

&lt;p&gt;자바의 Object 클래스는 상속해서 사용할 수 있는 여러 메서드들이 있다.&lt;/p&gt;

&lt;p&gt;Object에서 final이 아닌 메서드 (equals, hashCode, toString, clone, finalize)는 모두 오버라이드를 염두에 두고 설계되어 있고, &lt;strong&gt;재정의시 지켜야 하는 일반 규약이 정의되어 있다.&lt;/strong&gt;
따라서 Object를 상속하는 클래스, 즉 자바의 모든 클래스들은 이 메서드들을 일반 규약에 맞게 재정의해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;10-equals는-일반-규약을-지켜-재정의하라&quot;&gt;10. equals는 일반 규약을 지켜 재정의하라.&lt;/h2&gt;

&lt;p&gt;equals 메서드는 재정의하기가 쉬워보이지만, 곳곳에 함정이 있어 잘못 재정의하면 의도치 않은 결과를 초래한다.&lt;/p&gt;

&lt;p&gt;가장 쉬운 것은 되도록이면 아예 재정의하지 않는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;equals 메서드를 재정의하지 않으면 그 클래스의 인스턴스는 오직 자기 자신만 (참조값 비교) 같게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음 상황 중 하나이면 재정의하지 않는 것이 좋다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;각 인스턴스가 본질적으로 고유하다.
    &lt;ul&gt;
      &lt;li&gt;값을 표현하는 것이 아닌 동작하는 개체를 표현하는 클래스 (ex. Thread 클래스)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스의 &lt;strong&gt;논리적 동치성 (logical equality)&lt;/strong&gt;를 검사할 일이 없다.&lt;/li&gt;
  &lt;li&gt;상위 클래스에서 재정의한 equals가 하위 클래스에도 들어맞다.
    &lt;ul&gt;
      &lt;li&gt;예를 들면 Set 구현체는 AbstractSet이 구현한 equals를 상속받아 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스가 private이거나 package-private이고, equals 메서드를 호출할 일이 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;equals를 재정의해야 하는 경우는 &lt;strong&gt;객체 식별성 (object identity)가 아니라 논리적 동치성을 확인해야 될 때인데, 상위 클래스의 equals 메서드가 논리적 동치성을 지원하도록 재정의하지 않았을 경우이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;주로 값을 표현하는 클래스인 경우로, Integer나 String이 대표적이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;값을 표현하는 클래스이지만, 같은 값을 가지는 인스턴스가 둘 이상 만들어지지 않을 보장한다면 equals를 재정의하지 않아도 된다. 이런 클래스는 어차피 논리적 동치성과 객체 식별성이 사실상 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;equals 메서드를 재정의하는 경우, 반드시 다음 일반 규약을 따라야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;equals 메서드는 동치관계를 구현하며, 다음을 만족한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;반사성(reflexivity): null이 아닌 모든 참조 값 x에 대해, x.equals(x)는 true이다.&lt;/li&gt;
  &lt;li&gt;대칭성(symmetry): null이 아닌 모든 참조 값 x, y에 대해, x.equals(y)가 true이면 y.equals(x)도 true이다.&lt;/li&gt;
  &lt;li&gt;추이성(transitivity): null이 아닌 모든 참조 값 x, y, z에 대해, x.equals(y)가 true이고 y.equals(z)도 true면 x.equals(z)도 true이다.&lt;/li&gt;
  &lt;li&gt;일관성(consistency): null이 아닌 모든 참조 값 x, y에 대해 x.equals(y)를 반복해서 호출하면 항상 true를 반환하거나 항상 false를 반환해야 한다.&lt;/li&gt;
  &lt;li&gt;null-아님: null이 아닌 모든 참조 값 x에 대해, x.equals(null)은 false이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 규약을 어기게 되면 프로그램이 오동작하거나 디버깅하기가 매우 힘들어진다. 특히 컬렉션 클래스들을 포함하는 많은 클래스들은 다루는 객체가 equals 규약을 지킨다고 가정하고 동작한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;반사성&quot;&gt;반사성&lt;/h3&gt;

&lt;p&gt;객체는 자기 자신과 같아야 한다는 뜻이다.
이 요건을 어기게 되면 클래스 인스턴스를 컬렉션에 넣은 다음, contains 메서드를 호출하면 방금 넣은 인스턴스가 없다고 답할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;대칭성&quot;&gt;대칭성&lt;/h3&gt;

&lt;p&gt;두 객체는 서로에 대한 동치 여부를 똑같이 답해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;추이성&quot;&gt;추이성&lt;/h3&gt;

&lt;p&gt;첫 번째 객체와 두 번째 객체가 같고 두 번째 객체가 세 번째 객체와 같다면, 첫 번째 객체와 세 번째 객체도 같아야 한다는 뜻이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 클래스가 있을 때, ColorPoint의 equals 메서드를 구현하지 않으면 색상 정보는 무시하고 비교를 수행한다.&lt;/p&gt;

&lt;p&gt;따라서 equals 메서드를 오버라이딩하긴 해야 되는데, 다음과 같이 구현한 equals 메서드를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 구현하면 Point를 ColorPoint에 비교한 결과와 그 둘을 바꾸어 비교한 결과가 다를 수 있다.
Point의 equals는 색상을 무시하고, ColorPoint의 경우는 입력 매개변수가 자신의 종류와 다르다며 매번 false를 리턴한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 이를 개선하기 위해 다음과 같이 바꾸면 어떻게 될까?
ColorPoint.equals 에서 Point와 비교할 때는 색상을 무시하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        
    &lt;span class=&quot;c1&quot;&gt;// o가 일반 Point면 색상을 무시하고 비교한다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 형재 클래스라면 무한 재귀 위험&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// o가 ColorPoint면 색상까지 비교한다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false, p1 == p2, p2 == p3이므로 p1 == p2여야 한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 equals 메서드는 대칭성은 만족하지만, 추이성을 깨버린다.
또한, Point를 상속받는 다른 하위 클래스가 있고 그 클래스의 인스턴스와 ColorPoint를 같은 방식으로 구현된 equals로 비교하면 무한 재귀에 빠질 수도 있다.&lt;/p&gt;

&lt;p&gt;이는 객체 지향 언어의 동치 관계에서 나타나는 근본적인 문제로, &lt;strong&gt;구체 클래스를 확장하여 새로운 값을 추가하면서 equals 규약을 만족시킬 수 있는 방법은 존재하지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 이 때문에 다음과 같이 Point 클래스에서, getClass 메서드를 사용해서 같은 클래스의 오브젝트인 경우에만 동치 비교를 하게 되면 &lt;strong&gt;리스코프 치환 원칙&lt;/strong&gt;을 깨버리게 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Point와 ColorPoint를 비교할 때는 ColorPoint도 엄연히 Point이므로 비교가 가능해야 한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;리스코프 치환 원칙에 따르면, 어떤 타입에 있어 중요한 속성이라면 그 하위 타입에서도 마찬가지로 중요하다. 따라서 그 타입의 모든 메서드는 하위 타입에서도 동일하게 잘 동작해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하위 클래스에서 값을 추가하는 우회적인 방법은 상속 대신 컴포지션을 사용하는 것이 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 이 ColorPoint의 Point 뷰를 반환한다.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ColorPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;추상 클래스의 하위 클래스라면 equals 규약을 지키면서도 값을 추가할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;일관성&quot;&gt;일관성&lt;/h3&gt;

&lt;p&gt;두 객체가 같다면, 앞으로도 영원히 같아야 한다는 뜻이다.
만약 불변 객체를 만든다면 equals로 한 번 같다고 한 객체는 계속 같아야 한다.&lt;/p&gt;

&lt;p&gt;특히, equals를 구현함에 있어서 외부적인 요인으로 인해 변할 수 있는 값을 포함하여 비교해서는 안된다. 
대표적으로 java.net.URL의 equals로, 주어진 URL과 매핑된 호스트 IP를 이용해 비교하는데, 그 IP 주소가 매번 같다고 할 수 없다.&lt;/p&gt;

&lt;p&gt;따라서 equals는 항상 메모리 상에 존재하는 객체만을 사용하는 결정적(deterministic) 계산만 수행해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;null-아님&quot;&gt;null-아님&lt;/h3&gt;

&lt;p&gt;모든 객체는 null과 같으면 안된다는 뜻이다. NullPointerException과 같은 예외도 던지면 안된다.
예를 들어 instanceof 연산자는 null과 비교해도 false를 리턴한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;equals-구현-방식&quot;&gt;equals 구현 방식&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;== 연산자를 통해 입력이 자기 자신의 참조인지 확인
    &lt;ul&gt;
      &lt;li&gt;단순한 성능 향상을 위한 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;instanceof 연산자로 올바른 타입인지 확인
    &lt;ul&gt;
      &lt;li&gt;그렇지 않다면 false&lt;/li&gt;
      &lt;li&gt;만약 부모 인터페이스가 자기 자신을 구현한 다른 클래스들끼리도 비교할 수 있도록 equals 규약을 수정하였다면 해당 인터페이스의 equals를 사용해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;입력을 올바른 타입으로 형변환한다.&lt;/li&gt;
  &lt;li&gt;입력 객체와 자기 자신의 대응되는 핵심 필드들이 모두 일치하는지 하나씩 검사한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;null이 정상적인 값으로 간주하는 필드가 있을 경우, 이런 필드는 Object.equals 정적 메서드를 통해 NullPointerException을 방지하도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;equals를 구현할 때는 가급적 서로 다른 경우가 많거나 비교 비용이 싼 필드부터 검사하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;equals를 재정의하면 반드시 hashCode 메서드도 재정의해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;11-equals를-재정의하려거든-hashcode도-재정의하라&quot;&gt;11. equals를 재정의하려거든 hashCode도 재정의하라.&lt;/h2&gt;

&lt;p&gt;equals 메서드를 재정의하면 hashCode 메서드도 재정의해야 한다.
재정의하지 않으면 hashCode의 일반 규약을 어기게 되어 컬렉션의 원소로 사용될 때 문제를 일으키게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;equals 비교에 사용되는 정보가 변경되지 않았다면, 그 객체의 hashCode 메서드는 몇 번을 호출해도 같은 값을 반환해야 한다.
    &lt;ul&gt;
      &lt;li&gt;단, 애플리케이션 재시작할 때는 이 값이 달라져도 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;equals가 두 객체를 같다고 판단하면 두 객체의 hashCode도 같은 값을 반환해야 한다.&lt;/li&gt;
  &lt;li&gt;equals가 두 객체를 다르다고 판단하더라도, hashCode가 서로 다른 값을 반환할 필요는 없다.
    &lt;ul&gt;
      &lt;li&gt;하지만 다른 객체에 대해서 다른 값을 반환하도록 해야 해시테이블의 성능이 좋아진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉, &lt;strong&gt;논리적으로 같은 객체는 같은 해시코드를 반환해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;hashCode 메서드를 구현할 때는 서로 다른 인스턴스에 대해서는 다른 해시코드를 반환하도록 구현하는 것이 좋다. 이를 통해 hashMap과 같이 내부에 해시 테이블을 사용하는 컬렉션을 사용시 성능 향상을 꾀할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이상적인 해시 함수는 주어진 서로 다른 인스턴스들에 대한 해시코드 값이 32비트 정수 범위내에 균일하게 분배되도록 해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음은 일반적인 좋은 hashCode를 구현하는 간단한 방법이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;int 변수 result를 선언 후, 값 c로 초기화한다.
    &lt;ul&gt;
      &lt;li&gt;이 때 c는 2.a의 방식으로 계산된 첫 번째 핵심필드의 해시코드 값이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;나머지 필드들에 대해 다음 작업을 수행한다.
    &lt;ul&gt;
      &lt;li&gt;a: 해당 필드의 해시코드 c를 계산한다.
        &lt;ul&gt;
          &lt;li&gt;기본 타입 필드: Type.hashCode를 통해 계산&lt;/li&gt;
          &lt;li&gt;참조 타입 필드: equals 메서드가 이 필드 클래스의 equals를 재귀적으로 호출하면, hashCode 메서드를 재귀적으로 호출한다. 필드 값이 null이면 0을 사용한다.&lt;/li&gt;
          &lt;li&gt;배열: 핵심 원소들에 대해 별도 필드처럼 다룬다. 핵심 원소가 없다면 0을 사용하고, 모든 원소가 핵심 필드라면 Arrays.hashCode를 사용한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;b: a 단계에서 계산한 해시코드 c로 result를 갱신한다. -&amp;gt; result = 31 * result + c;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;result를 반환한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;areaCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;equals 비교에 사용되지 않는 필드는 hashCode 대상에서 반드시 제외해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;31 * result 는 해시 효과를 높여주는 효과가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Object 클래스는 임의의 개수만큼 객체를 받아, 해시코드를 계산해주는 hash 정적 메서드를 제공해준다.
앞의 요령대로 구현하는 코드와 비슷한 수준의 hashCode 함수를 단 한 줄로 작성할 수 있지만, 속도는 더 느리다. 입력 인수를 담기 위해 배열이 생성되고, 인수 중에 기본 타입이 있다면 박싱과 언박싱도 거치기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;areaCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 타입의 객체의 해시코드를 계산하는 비용이 크고, 주로 해시의 키로 사용될만 하다면, 인스턴스 생성시 해시코드를 계산해두고, hashCode 호출될 때 캐싱된 값을 리턴하는 것도 고려할만 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;해시코드 계산의 성능을 높인다고 핵심 필드를 생략하는 일은 없어야 한다. 해시 품질이 나빠져 해시 테이블 사용시 성능을 심각하게 떨어뜨릴 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;12-tostring을-항상-재정의하라&quot;&gt;12. toString을 항상 재정의하라.&lt;/h2&gt;

&lt;p&gt;Object의 toString 메서드는 보통 &lt;strong&gt;클래스이름@16진수로_표현한_해시코드&lt;/strong&gt;를 반환한다.&lt;/p&gt;

&lt;p&gt;toString 메서드는 원래 일반 규약에 따르면 &lt;strong&gt;간결하고도 사람이 읽기 쉬운 형태의 정보&lt;/strong&gt;로 반환되어야 한다. 그리고 &lt;strong&gt;모든 Object의 하위 클래스는 toString 메서드를 재정의하라고 규정되어 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;toString을 잘 구현한 클래스는 디버깅하기가 쉬워진다.
println이나 printf, 문자열 연결 연산자 (+), assert 구문에 넘길 때 또는 디버거가 객체를 출력할 때 자동으로 toString을 호출한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;13-clone-재정의는-주의해서-진행하라&quot;&gt;13. clone 재정의는 주의해서 진행하라.&lt;/h2&gt;

&lt;p&gt;Cloneable 인터페이스는 복제해도 되는 클래스임을 명시하는, 메서드는 하나도 없는 믹스인 인터페이스이다.&lt;/p&gt;

&lt;p&gt;원래대로라면 clone 메서드는 Object 클래스에 정의되어 있고 그마저도 protected로 되어 있어 Cloneable 인터페이스를 구현하는 것만으로는 외부에서 clone 메서드를 호출할 수 없다.&lt;/p&gt;

&lt;p&gt;그런데 이 &lt;strong&gt;Cloneable 인터페이스는 Object의 protected 메서드인 clone 메서드의 동작 방식을 결정한다.&lt;/strong&gt;
Cloneable을 구현한 클래스 인스턴스에서 clone을 호출하면 그 객체의 필드를 하나하나 복사한 객체를 반환하며, 그렇지 않은 클래스라면 CloneNotSupportedException 예외를 던진다. 이는 인터페이스를 이례적으로 사용한 예이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인터페이스를 구현한다는 것은 일반적으로 해당 클래스가 그 인터페이스에서 정의한 기능을 제공한다는 것이다. 그런데 Cloneable의 경우에는 상위 클래스에 정의된 protected 메서드의 동작 방식을 변경한 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;실무에서는 Cloneable을 구현한 클래스는 &lt;strong&gt;clone 메서드를 public으로 제공하며, 사용자는 당연히 복제가 제대로 이뤄지리라 기대한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이를 위해 Cloneable을 구현한 클래스 및 모든 상위 클래스는 복잡하지만 강제할 수는 없고, 허술하게 기술된 프로토콜을 지켜야 한다.&lt;/p&gt;

&lt;p&gt;다음은 clone 메서드의 일반 규약이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체의 복사본을 생성해 반환한다. 어떤 객체 x에 대해 다음 식은 참이다. 반드시 지킬 필요는 없다.
    &lt;ul&gt;
      &lt;li&gt;x.clone() != x&lt;/li&gt;
      &lt;li&gt;x.clone().getClass() == x.getClass()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음 식은 일반적으로 참이지만, 필수는 아니다.
    &lt;ul&gt;
      &lt;li&gt;x.clone().equals(x)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관례상, 이 메서드가 반환하는 객체는 super.clone을 호출해 얻어야 한다. 만약 이 클래스 및 상위 클래스가 이 관례를 따른다면 다음 식은 참이다.
    &lt;ul&gt;
      &lt;li&gt;x.clone().getClass() == x.getClass()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반환된 객체와 원본 객체는 서로 독립적이어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉, Cloneable을 구현한 클래스와 상위 클래스의 clone 메서드는 super.clone을 통해 객체를 얻어야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스 B가 A를 상속할 때, 하위 클래스 B의 clone은 B 타입 객체를 반환해야 한다. 그런데 A의 clone이 자신의 생성자를 통해 생성한 객체를 반환하면 B.clone도 A 타입 객체를 반환할 수 밖에 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;다르게 말하면, super.clone을 연쇄적으로 호출하도록 하면 clone이 처음 호출된 하위 클래스의 객체가 생성된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Object.clone 메서드는 checked 예외를 던지도록 되어 있어 try-catch 블록으로 감싸야 한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이는 CloneNotSupportedException이 unchecked 예외였어야 한다는 것이다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//super.clone을 호출하는 것만으로 원본의 완벽한 복제본을 얻는다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloneNotSupportedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Object.clone은 Object 타입을 리턴하지만, 오버라이드한 PhoneNumber의 clone은 PhoneNumber 타입을 리턴한다. 이는 자바가 공변 반환 타이핑 (covariant return typing)을 지원하기 때문으로, 이렇게 구현하는 것이 권장된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약 클래스 내부에 가변 객체를 참조한다면 clone 메서드를 구현할 경우, 원본 객체 및 복사된 객체가 서로 독립적이도록 &lt;strong&gt;깊은 복사&lt;/strong&gt;를 구현해야 한다. &lt;strong&gt;원래 clone 메서드는 대입에 의해 복사되는 얕은 복사를 수행하기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cloneable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다 쓴 참조 해제&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이렇게 참조 값으로 가지는 필드는 따로 복제를 수행해야 한다.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloneNotSupportedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertionError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 원소를 위한 공간을 적어도 하나 이상 확보한다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;14-comparable을-구현할지-고려하라&quot;&gt;14. Comparable을 구현할지 고려하라.&lt;/h2&gt;

&lt;p&gt;compareTo는 Object의 메서드가 아니고, Comparable 인터페이스의 메서드이다. 순서를 비교할 수 있으며 이 메서드가 정의된 Comparable 인터페이스를 구현한다는 것은 &lt;strong&gt;그 클래스의 인스턴스들에게는 순서가 있다는 것을 의미한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comparable 인터페이스를 통해 compareTo 메서드를 구현하면 자연스럽게 정렬을 수행할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;순서가 명확한 값 클래스를 작성한다면 Comparable 인터페이스를 구현하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;compareTo 메서드의 일반 규약은 equals와 비슷하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체와 주어진 객체의 순서를 비교한다. 이 객체가 주어진 객체보다 작으면 음수를, 같으면 0을, 크다면 양수를 리턴한다.
    &lt;ul&gt;
      &lt;li&gt;비교할 수 없는 타입일 경우 ClassCastException 예외를 던진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음에서 &lt;strong&gt;sgn&lt;/strong&gt; 표기는 부호 함수를 뜻하며 표현식의 값이 음수, 0, 양수일 때 -1, 0, 1을 반환하도록 정의했다.
    &lt;ul&gt;
      &lt;li&gt;x, y에 대해 sgn(x.compareTo(y)) ==  -sgn(y.compareTo(x))
        &lt;ul&gt;
          &lt;li&gt;y.compareTo(x)가 예외를 던지는 경우에 한해, x.compareTo(y)에서 예외를 던져야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;추이성을 보장해야 한다.
        &lt;ul&gt;
          &lt;li&gt;x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0 이면, x.compareTo(z) &amp;gt; 0 이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;x.compare(y) == 0 일 때, sgn(x.compareTo(z)) == sgn(y.compareTo(z)) 이다.&lt;/li&gt;
      &lt;li&gt;필수는 아니지만, 동치성 테스트 결과가 equals와 같아야 한다.
        &lt;ul&gt;
          &lt;li&gt;x.compareTo(y) == 0 이면 x.equals(y) 여야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;compareTo 메서드로 수행하는 동치성 검사도 equals 와 마찬가지로 반사성, 대치성, 추이성을 충족해야 한다.&lt;/strong&gt; 단, equals 메서드와는 다르게, compareTo는 타입이 다른 객체를 신경쓰지 않아도 된다. ClassCastException 예외만 던져도 충분하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;compareTo 규약을 지키지 않는다면 비교를 활용하는 클래스와 어울리지 못한다.&lt;/strong&gt; 비교를 활용하는 TreeSet과 TreeMap, 검색과 정렬을 사용하는 Collections와 Arrays가 있다.&lt;/p&gt;

&lt;p&gt;객체 참조 필드를 비교할 때는 compareTo 메서드를 재귀적으로 호출하도록 한다. 만약 해당 필드의 클래스가 Comparable 인터페이스를 구현하지 않았거나, 표준이 아닌 순서로 비교해야 한다면 &lt;strong&gt;Comparator&lt;/strong&gt;를 사용하도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CaseInsensitiveString&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CASE_INSENSITIVE_ORDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CompareTo 메서드 구현할 때, &lt;strong&gt;기본 타입 필드의 경우에는 박싱된 기본 타입 클래스의 정적 메서드인 compare를 사용하도록 한다.&lt;/strong&gt; 관계 연산자를 사용하는 방식은 거추장스럽고 오류를 유발시킬 수 있다.&lt;/p&gt;

&lt;p&gt;equals 메서드와 마찬가지로 가장 핵심적인 필드부터 비교해나가면서 중간에 결과가 0이 아니라면 바로 리턴하는 것이 성능 상의 이득이 된다.&lt;/p&gt;

&lt;p&gt;자바 8부터는 Comparator 인터페이스를 통해 메서드 연쇄 방식으로 비교자를 생성하여 비교할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// PhoneNumber 클래스 객체를 비교할 수 있는 Comparator 반환&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPARATOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;areaCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenComparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenComparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lineNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPARATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/01/14/effective_java_03-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/01/14/effective_java_03-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Effective Java 02 - 객체 생성과 파괴</title>
        <description>&lt;h1 id=&quot;객체-생성과-파괴&quot;&gt;객체 생성과 파괴&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;01-생성자-대신-정적-팩터리-메서드를-고려하라&quot;&gt;01. 생성자 대신 정적 팩터리 메서드를 고려하라.&lt;/h2&gt;

&lt;p&gt;클라이언트가 클래스의 인스턴스를 얻는 전통적인 수단은 Public 생성자이지만, &lt;strong&gt;정적 팩토리 메소드&lt;/strong&gt;를 통해 클래스 인스턴스를 생성할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FALSE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;정적-팩터리-메서드-장점&quot;&gt;정적 팩터리 메서드 장점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;이름을 가질 수 있다
    &lt;ul&gt;
      &lt;li&gt;생성자 사용시 매개변수 및 생성자 자체만으로는 객체의 특성을 제대로 설명하지 못한다.
        &lt;ul&gt;
          &lt;li&gt;하나의 시그니처로는 생성자를 하나만 만들 수 있다. 입력 매개변수들의 순서를 다르게 한 생성자를 새로 추가할 수 있지만 각 생성자들이 어떤 역할을 하는지 정확히 기억할 수 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;정적 팩터리 사용시 이름만 잘 지으면 반환될 객체의 특성을 쉽게 묘사할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;한 클래스에 시그니처가 같은 생성자가 여러 개 필요할 것 같으면, 생성자 사용하는 대신에 팩터리 메소를 고려한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;호출될 때마다 인스턴스를 새로 생성할 필요는 없다.
    &lt;ul&gt;
      &lt;li&gt;메서드 내부에서 미리 인스턴스를 만들어놓거나, 기존에 만들어둔 인스턴스를 캐싱하여 재활용시킬 수 있다.
        &lt;ul&gt;
          &lt;li&gt;플라이웨이트 패턴과 비슷한 기법이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;반복되는 요청에 같은 객체를 반환하는 식으로, 인스턴스 통제가 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;반환 타입의 하위 타입 객체를 반환할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;반환될 객체의 클래스를 자유롭게 선택하여 유연성을 확보할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;반환 타입의 하위 타입이기만 하면, 매개변수에 따른 적절한 하위 클래스의 인스턴스를 반환할 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정적 팩터리 메소드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
    &lt;ul&gt;
      &lt;li&gt;대표적으로 JDBC의 getConnection 이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드 시그니처: 메소드 오버로딩의 핵심으로 메소드의 선언부에 명시되는 &lt;strong&gt;메소드 이름과 입력 매개변수의 타입으로 구성된다.&lt;/strong&gt; 리턴 값의 타입이나 public, private와 같은 엑세스 수준, abstract, final과 같은 선택적 한정자는 포함하지 않는다. 메소드 오버로딩은 서로 다른 시그니처를 갖는 여러 메소드를 같은 이름으로 정의하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;정적-팩터리-메서드-단점&quot;&gt;정적 팩터리 메서드 단점&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;상속을 하려면 public이나 protected 생성자가 필요한데, 정적 팩터리 메소드만 제공하면 하위 클래스 생성할 수 없다.&lt;/li&gt;
  &lt;li&gt;정적 팩터리 메서드는 찾기 어렵다.
    &lt;ul&gt;
      &lt;li&gt;생성자처럼 API 설명에 명확히 드러나지 않으니 사용자는 정적 팩터리 메서드 클래스를 인스턴스화할 방법을 알아내야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;정적 팩터리 메서드에 흔히 사용되는 명명 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 1. from: 매개변수를 받아 해당 타입의 인스턴르를 반환하는 형변환 메서드&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 2. of: 여러 매개변수를 받아 적절한 타입의 인스턴스 반환&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;faceCards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnumSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUEEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 3. valueOf: from과 of의 더 자세한 버전&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BigInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. instance, getInstance: 매개변수로 명시한 인스턴스 반환. 같은 인스턴스임을 보장하지는 않는다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StackWalker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;luke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackWalker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 5. create, newInstance: instance나 getInstance와 같지만, 매번 새로운 인스턴스를 생성하는 것을 보장한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 6. getType: getInstannce와 같으나 다른 클래스에 팩터리 메서드를 정의할 때 사용. &quot;Type&quot;는 반환되는 객체 타입이다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FileStore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFileStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 7. newType: newInstance와 같으나 다른 클래스에 팩터리 메서드를 정의할 때 사용.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newBufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 8. type: getType와 newType의 간결한 버전&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Complaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;litany&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legacyLitany&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;정적 팩터리 메서드와 public 생성자는 각자의 쓰임새가 있으므로, 상대적인 단점을 이해하고 사용하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-생성자에-매개변수가-많다면-빌더를-고려하라&quot;&gt;2. 생성자에 매개변수가 많다면 빌더를 고려하라.&lt;/h2&gt;

&lt;p&gt;정적 팩터리와 생성자에는 똑같은 제약이 있는데, &lt;strong&gt;선택적 매개변수가 많아지면 적절히 대응하기 어렵다&lt;/strong&gt;는 점이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 필수 매개변수를 받는 생성자를 두고, 그 생성자를 사용하는 다른 생성자를 늘려가는 점층적 생성자 패턴으로 구현할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// (mL, 1회 제공량)     필수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// (회, 총 n회 제공량)  필수&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// (1회 제공량당)       선택&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// (g/1회 제공량)       선택&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// (mg/1회 제공량)      선택&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (g/1회 제공량)       선택&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servingSize&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servings&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calories&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sodium&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 클래스의 인스턴스를 만들려면 다음과 같이 인스턴스를 생성하게 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이해하기 어려움&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 이렇게 클래스를 정의하면 사용자가 &lt;strong&gt;설정하길 원치하는 매개변수까지 포함되기 쉽고 클라이언트 코드를 작성하거나 읽기가 어려워진다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음은 자바빈즈 패턴으로, 매개 변수가 없는 생성자로 객체 생성 후 setter 메서드들을 통해 원하는 매개변수 값을 설정하는 방식이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 매개변수들은 (기본값이 있다면) 기본값으로 초기화된다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필수; 기본값 없음&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 필수; 기본값 없음&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Setters&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setServingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setServings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCalories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setFat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCarbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setServings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCalories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCarbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드의 단점은 객체 하나를 만들려면 메서드를 여러 개 호출해야 되고, &lt;strong&gt;객체가 완전히 생성되기 전까지는 일관성이 깨진 상태에 놓게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;객체 생성시 매개 변수가 많다면, 점층적 생성자 패턴과 자바 빈즈 패턴 대신에 빌더 패턴을 사용하는 것이 좋다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 객체를 직접 생성하는 대신에 필수 매개변수만을 생성자 혹은 정적 팩터리 메서드를 통해 빌더 객체를 얻는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빌더 객체가 제공하는 일종의 setter 메서드들로 원하는 선택 매개변수들을 설정하고, build 메서드를 통해 필요한 객체를 얻는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 필수 매개변수&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 선택 매개변수 - 기본값으로 초기화한다.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servingSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servings&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servingSize&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servings&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;calories&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sodium&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;carbohydrate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 빌더의 setter 메소드들은 빌더 자신을 반환하므로 연쇄적으로 호출 가능하다.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cocaCola&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NutritionFacts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;calories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sodium&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carbohydrate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이, 클라이언트의 코드는 읽고 쓰기가 쉽다.
객체 유효성 검사시, 빌더의 생성자와 메서드에서 입력 매개변수를 검사하고 build 메서드가 호출하는 생성자에서 여러 매개변수에 걸친 불변식을 검사하도록 한다. 유효성 검사 실패시에는 &lt;strong&gt;IllegalArgumentException&lt;/strong&gt; 예외를 던지도록 하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면 빌더 패턴을 선택하는 것이 낫다. 빌더는 점층적으로 생성자를 만드는 방식에 비해 클라이언트 코드를 읽고 쓰기가 간편하고, 자바빈즈보다 안전하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-private-생성자나-열거-타입으로-싱글턴임을-보증하라&quot;&gt;3. private 생성자나 열거 타입으로 싱글턴임을 보증하라.&lt;/h2&gt;

&lt;p&gt;싱글턴이란 인스턴스를 오직 하나만 생성할 수 있는 클래스를 말한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스를 싱글턴으로 만들시 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있다. 보통 private 생성자를 사용하고 정적 팩터리 메소드를 통해 생성하는데, 테스트시 mock으로 대체하기가 힘들다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-인스턴스화를-막기-위해서는-private-생성자를-사용하라&quot;&gt;4. 인스턴스화를 막기 위해서는 private 생성자를 사용하라.&lt;/h2&gt;

&lt;p&gt;정적 메소드나 정적 필드만을 담은 유틸성 클래스를 정의할 때는 private 생성자를 통해 외부에서 해당 클래스를 인스턴스할 수 없도록 한다.&lt;/p&gt;

&lt;p&gt;private 생성자 사용은 상속을 불가능하게 하는 효과도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라&quot;&gt;5. 자원을 직접 명시하지 말고, 의존 객체 주입을 사용하라.&lt;/h2&gt;

&lt;p&gt;보통 클래스들은 하나 이상의 자원에 의존한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 유틸리티 클래스&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lexicon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 싱글턴&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lexicon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 구현한 것은 사전을 단 하나만 사용한다고 가정한 것이다. 만약 다른 사전을 사용한다면 코드 변경이 일어나게 된다. &lt;strong&gt;사용하는 자원에 따라 동작이 달라지는 클래스는 정적 유틸리티 클래스나 싱글턴 방식이 적합하지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 객체 생성시 의존성이 있는 객체를 주입해줌으로써, 유연성 및 테스트 용이성을 개선할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpellChecker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lexicon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpellChecker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lexicon&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 패턴의 쓸만한 변형으로, 생성자나 팩터리 메서드로 자원 팩터리를 넘겨주는 방식이 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Mosaic&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Supplier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tileFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 방식을 사용하면 클라이언트는 자신이 명시한 타입의 하위 타입이라면 무엇이든 생성이 가능한 팩터리를 넘길 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스가 내부적으로 하나 이상의 자원에 의존하고, 그 자원이 클래스 동작에 영향을 준다면 싱글턴과 정적 유틸리티 클래스는 적합하지 않다. 필요한 자원이나 자원을 생성해주는 팩터리를 클라이언트에서 주입하는 것이 좋다. 의존 객체 주입은 클래스의 유연성, 재사용성, 테스트 용이성을 개선해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-불필요한-객체-생성을-피하라&quot;&gt;6. 불필요한 객체 생성을 피하라.&lt;/h2&gt;

&lt;p&gt;똑같은 기능의 객체를 매번 생성하기 보다는 객체 하나를 재사용하는 편이 나을 때가 많다.
특히 불변 객체는 언제든 재사용 가능하다.&lt;/p&gt;

&lt;p&gt;생성자 대신 정적 팩터리 메서드를 제공하는 불변 객채에서는 정적 팩터리 메서드를 사용해 불필요한 객체 생성을 막을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Java 9에서 deprecated. 매번 새로운 객체를 생성한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 불필요한 객체 생성을 피한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;불필요한 객체를 만들어내는 예로 오토박싱이 있다. 오토박싱은 프로그래머가 기본 타입과 박싱된 기본 타입을 섞어 쓸 때 자동으로 상호 변환해준다. 오토박싱을 위한 객체 생성 비용으로 인해 성능에 영향이 갈 수도 있다.
따라서 되도록이면 박싱된 타입보다는 기본 타입을 사용하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-다-쓴-객체-참조를-해제하라&quot;&gt;7. 다 쓴 객체 참조를 해제하라.&lt;/h2&gt;

&lt;p&gt;다음 코드 중 pop 메서드에서 메모리 누수가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 가비지 컬렉터 입장에서는 size 뒤에 있는 객체도 모두 유효한 객체이다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스택을 표현한 배열이 다 쓴 참조를 여전히 가지고 있기 때문이다. 참조를 가지고 있으므로, 가비지 컬렉터는 스택에서 꺼내진 객체들을 회수하지 않는다.&lt;/p&gt;

&lt;p&gt;객체 참조 하나를 살려두면, 그 객체가 참조하는 모든 객체들까지도 모두 회수하지 못한다. 이를 위해 다음과 같이 null을 대입하여 참조를 해제한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 다 쓴 참조 해제&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;null 대입과 같은 객체 참조 해제는 항상 위의 경우와 같은 예외적인 상황에서만 사용하여 코드가 지저분해지지 않도록 한다. 자기 메모리를 직접 관리하는 경우라면 항상 메모리 누수에 주의해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;8-finalizer와-cleaner-사용을-피하라&quot;&gt;8. finalizer와 cleaner 사용을 피하라.&lt;/h2&gt;

&lt;p&gt;자바는 두 가지 객체 소멸자를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;finalizer는 예측할 수 없고, 상황에 따라 위험할 수 있어 일반적으로 불필요하다.
cleaner는 finalizer 보다는 덜 위험하지만 여전히 예측할 수 없고, 느리고, 일반적으로는 불필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;C++의 파괴자(destructor)와는 다른 개념이다. C++에서의 파괴자는 생성자의 대척점으로 특정 객체와 관련된 자원을 회수하는 보편적인 방법이다.&lt;/p&gt;

&lt;p&gt;자바에서는 접근할 수 없게 된 객체를 회수하는 역할을 가비지 컬렉터가 담당하며, 이 때 finalizer가 호출된다.
이 &lt;strong&gt;메서드를 언제 호출할지는 전적으로 가비지 컬렉터 알고리즘에 달려있다.&lt;/strong&gt; 따라서 즉시 수행된다는 보장이 없으므로 &lt;strong&gt;finalizer와 cleaner로는 제때 실행해야 되는 작업을 수행해서는 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 가비지 컬렉터 마음대로 메서드 실행이 지연되므로 finalizer에서 구현되어 있는 자원 회수도 제멋대로 지연되어 OutOfMemoryError가 발생할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;finalizer 스레드는 다른 애플리케이션 스레드보다 우선순위가 낮다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바 언어 명세는 finalizer나 cleaner의 수행 시점뿐만 아니라 수행 여부까지 보장하지 않는다. 따라서 그 메서드에서 구현된 종료 작업이 전혀 수행되지 않을 수도 있다.&lt;/p&gt;

&lt;p&gt;finalizer 동작 중에 발생한 예외는 무시되며, 그 순간 작업이 종료되어 뒤에 있는 작업이 되지 않는 위험도 있다. 보통의 경우에는 예외가 스레드를 중단시키고 스택 트레이스를 출력하겠지만, 같은 일이 finalizer 안에서 일어난다면 경고조차 출력하지 않는다.&lt;/p&gt;

&lt;p&gt;finalizer와 cleaner는 또한 가비지 컬렉터의 효율을 떨어뜨린다.&lt;/p&gt;

&lt;p&gt;finalizer 및 cleaner 대신에 &lt;strong&gt;AutoCloseable&lt;/strong&gt; 을 구현해주고, 인스턴스 사용 후 close 메소드를 통해 정리 작업을 진행하는 것이 좋다. (예외가 발생하더라도 close를 호출할 수 있도록 try-with-resource를 사용해야 한다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;9-try-finally-보다는-try-with-resources를-사용하라&quot;&gt;9. try-finally 보다는 try-with-resources를 사용하라.&lt;/h2&gt;

&lt;p&gt;자바 라이브러리에는 InputStream / OutputStream과 같이 close 메소드를 호출해 직접 닫아줘야 하는 자원이 많다.&lt;/p&gt;

&lt;p&gt;보통 다음과 같이 finally 블록에서 close 메소드를 호출하여 자원이 반납되도록 하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 여러 자원을 사용할 때는 중첩되는 try-finally 블록을 사용해야 되서 코드가 지저분해질 수 있고, read 메서드에서 예외 발생했는데, close 메서드에서도 예외가 발생하면 두 번째 예외가 첫 번째 예외를 삼킨다. 따라서 사용자 입장에서는 디버깅이 매우 어렵게 될 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 문제를 자바 7의 try-with-resource를 통해 해결할 수 있다.
이 구조를 사용하려면 해당 자원이 &lt;strong&gt;AutoCloseable&lt;/strong&gt; 인터페이스를 구현해야 한다.
AutoCloeseable 인터페이스는 close 메소드 하나만 정의한 단순한 인터페이스이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUFFER_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;try-with-resources 를 사용하면 코드가 간결해질 뿐만 아니라, read 및 close (보이지 않는) 메서드에서 둘다 예외가 발생시 read에 대한 예외가 삼켜지지 않고 기록된다. 
close 메서드에 대한 예외는 숨겨지긴 하지만 스택 추적 내역에 suppressed라는 꼬리표를 통해 기록이 남게 된다. getSuppressed 메소드를 통해 프로그램 코드에서 숨겨진 예외를 가져올 수도 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 다수의 예외를 한 catch 문으로 처리할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;firstLineOfFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;try-with-resources를 사용하면 코드는 더 짧고 명확해지고, 만들어지는 예외 정보도 훨씬 유용해진다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2019/01/13/effective_java_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2019/01/13/effective_java_02-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 13: 스프링 @MVC</title>
        <description>&lt;p&gt;스프링으 DispatcherServlet과 7가지 전략을 기반으로 한 MVC 프레임워크를 제공한다. 특히 2.5부터 시작하여 3.0에서 강화된 애노테이션을 활용한 전략은 컨트롤러 코드 작성에 있어서 많은 변화를 가져왔다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;requestmapping-핸들러-매핑&quot;&gt;@RequestMapping 핸들러 매핑&lt;/h2&gt;

&lt;p&gt;@MVC의 가장 큰 특징은 &lt;strong&gt;핸들러 매핑과 핸들러 어댑터 대상이 컨트롤러 오브젝트가 아닌 메소드라는 점이다.&lt;/strong&gt;
이전에는 특정 컨트롤러는 특정 인터페이스를 구현하는 구조로 인해, URL 당 하나의 컨트롤러 오브젝트가 매핑되고 그 인터페이스에 특정 메소드가 호출을 받을 수 있었다.&lt;/p&gt;

&lt;p&gt;그러나 대상의 타입이나 코드에 영향을 받지 않는 &lt;strong&gt;애노테이션을 활용함으로써 메소드 레벨까지 세분화해서 매핑 및 호출할 수 있게 되었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DefaultAnnotationHandlerMapping (스프링 3.1부터는 RequestMappingHandlerMapping)은 핸들러 매핑 정보로 &lt;strong&gt;@RequestMapping&lt;/strong&gt; 애노테이션을 활용한다.&lt;/p&gt;

&lt;p&gt;@RequestMapping은 클래스나 메소드 둘다 붙일 수 있으므로, 스프링은 &lt;strong&gt;클래스에 정의된 @RequestMapping을 기준으로 삼아 메소드 레벨의 @RequestMapping 정보를 통해 더 세분화하여 요청 정보와 핸들러 간의 매핑을 적용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;requestmapping&quot;&gt;@RequestMapping&lt;/h3&gt;

&lt;p&gt;DefaultAnnotationHandlerMapping (RequestMappingHandlerMapping)의 핵심은 핸들러 매핑 정보로 &lt;strong&gt;@RequestMapping&lt;/strong&gt; 애노테이션을 활용한다는 점이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Mapping&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 @RequestMapping 애노테이션에서 사용 가능한 엘리먼트의 종류로, 이를 기반으로 매핑을 진행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;value: String 배열로 하나 이상의 URL 패턴을 지정, ANT 패턴을 사용할 수도 있다.&lt;/li&gt;
  &lt;li&gt;method: HTTP 메소드를 지정&lt;/li&gt;
  &lt;li&gt;params: HTTP의 GET 쿼리 파라미터와 값을 추가적으로 매핑 정보로 활용한다.&lt;/li&gt;
  &lt;li&gt;headers: HTTP 헤더 정보를 매핑 정보로 활용한다.&lt;/li&gt;
  &lt;li&gt;consumes: HTTP 헤더의 Content-Type을 매핑 정보로 활용한다.&lt;/li&gt;
  &lt;li&gt;produces: HTTP 헤더의 Accepts를 매핑 정보로 활용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;여러 개의 @RequestMapping으로 정의한 것이 있고, 어떤 request 요청이 여러 매핑 조건에 대해 만족한다면 좀 더 많은 조건을 만족시키는 쪽으로 우선시되어 매핑된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;@RequestMapping 정보는 상속되며, 서브 클래스에서 @RequestMapping을 재정의하면 상위에서 정의한 @RequestMapping은 무시된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;파라미터&quot;&gt;파라미터&lt;/h2&gt;

&lt;p&gt;@Controller 애노테이션은 컴포넌트 스캔에 의해 빈 자동 인식을 할 수 있게하는 스테레오 타입의 애노테이션이지만, 이 말고도 &lt;strong&gt;컨트롤러 역할을 담당하는 메소드 정의를 자유롭게 지정할 수 있게 해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;개발자가 마음대로 필요한 파라미터와 리턴 값을 자유롭게 애노테이션과 결합하여 정의할 수 있다. 이를 가능케하는 핸들러 어댑터는 매우 복잡하다. 스프링은 메소드의 파라미터와 리턴 값, 애노테이션이 어떻게 선언되어 있는지 살펴보고, 이를 이용해 적절한 파라미터 값을 준비하여 호출해준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HttpServletRequest, HttpServletResponse: 해당 타입이 파라미터로 정의되어 있다면 해당 서블릿 오브젝트를 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;HttpSession: HTTP 세션이 필요할 경우 사용. 멀티스레드 안정성이 보장되지 않으므로 핸들러 어댑터의 synchronizeOnSession 프로퍼트를 true로 설정한다.&lt;/li&gt;
  &lt;li&gt;WebRequest, NativeWebRequest: HttpServletRequest 대부분의 정보를 갖고 있는 서블릿 API에 종속적이지 않은 오브젝트 타입이다.&lt;/li&gt;
  &lt;li&gt;Locale: java.util.Locale 타입으로 LocaleResolver가 결정한 Locale 오브젝트를 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;InputStream, Reader: HttpServletRequest의 getInputStream으로 얻을 수 있는 스트림이나 Reader를 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;OutputStream, Writer: HttpServletResponse의 getOutputStream으로 가져올 수 있는 스트림또는 Writer를 받을 수 있다.&lt;/li&gt;
  &lt;li&gt;@PathVariable: @RequestMapping에 있는 {} 로 들어가는 PathVaraible의 값을 받는다.&lt;/li&gt;
  &lt;li&gt;@RequestParam: 쿼리 파라미터들의 값을 받는다. 만약 파라미터 이름을 지정하지 않고 Map 형식의 파라미터 타입을 지정하면 모든 파라미터를 Map 오브젝트로 받는다. 필수 여부나 디폴트 값을 지정할 수도 있다.
    &lt;ul&gt;
      &lt;li&gt;타입 변환 작업이 실패하면 예외가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@CookieValue: 쿠키 값을 받는다.&lt;/li&gt;
  &lt;li&gt;@RequestHeader: HTTP 헤더의 정보를 받는다.&lt;/li&gt;
  &lt;li&gt;Map, Model, ModelMap: 핸들러 어댑터는 모델의 정보를 추가하는데 사용하는 오브젝트를 미리 만들어 컨트롤러 메소드로 제공해줄 수 있다.&lt;/li&gt;
  &lt;li&gt;@ModelAttribute: 도메인 오브젝트의 프로퍼티에 요청 파라미터를 바인딩하여 한 번에 받을 수 있다. 스프링은 setter를 통해 프로퍼티에 값을 설정해준다.
    &lt;ul&gt;
      &lt;li&gt;컨트롤러가 리턴하는 모델 맵이 담기는 모델 오브젝트의 한 가지로, 해당 오브젝트를 다시 모델 맵에 추가시켜준다.&lt;/li&gt;
      &lt;li&gt;파라미터를 바인딩하기 전, 빈 오브젝트를 생성하는데 이를 위해 디폴트 생성자가 반드시 필요하다.&lt;/li&gt;
      &lt;li&gt;@SessionAttribute에 의해 세션에 저장된 모델 오브젝트가 있다면 새로 오브젝트를 생성하는 대신, 세션에 저장되어 있던 오브젝트를 사용한다.&lt;/li&gt;
      &lt;li&gt;사용자 요청 값에 대한 추가적인 검증 작업이 추가된다. 핸들러 어댑터는 검증 결과를 컨트롤러에게 제공해준다.&lt;/li&gt;
      &lt;li&gt;@RequestParam과는 다르게 요청 값에 대한 타입 변환이 실패하였다고 해서 작업이 중지되지 않는다. 다만 BindingResult나 Error에 변환 결과가 같이 저장되어 컨트롤러로 전달된다.&lt;/li&gt;
      &lt;li&gt;변환 작업이나 검증에 실패했을 때, BindingResult나 Error 타입의 파라미터가 없다면 BindingException 예외가 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Errors, BindingResult: @ModelAttribute가 정의된 파라미터 바로 뒤에 붙여서 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;SessionStatus: 모델 오브젝트를 세션에 저장해두어 다음 request에도 활용할 수 있는데, 필요없게 될 경우 제거해야 한다. 이 때 필요한 것이 SessionStatus 타입 오브젝트이다.&lt;/li&gt;
  &lt;li&gt;@RequestBody: HTTP 요청의 바디 부분이 전달된다. 핸들러 어댑터는 미디어 타입과 파라미터 타입을 보고, 결정한 &lt;strong&gt;HttpMessageConverter&lt;/strong&gt;를 거쳐서 변환된 바디 내용을 전달해준다.&lt;/li&gt;
  &lt;li&gt;@Value: 시스템 프로퍼티나 다른 빈의 프로퍼티 값 등을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;@Valid: 빈 검증기를 통해 모델 오브젝트를 검증하도록 지시하는 애노테이션이다. 보통 @ModelAttribute와 같이 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;리턴-타입의-종류&quot;&gt;리턴 타입의 종류&lt;/h2&gt;

&lt;p&gt;@MVC 컨트롤러 메소드는 리턴 타입도 자유롭게 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;컨트롤러가 DispatcherServlet에게 돌려줘야 하는 것은 모델과 뷰이다. &lt;strong&gt;핸들러 어댑터를 통해 최종적으로 DispatcherServlet으로 리턴되는 것은 ModelAndView 타입이다.&lt;/strong&gt; 물론 ModelAndView를 무시하고 HttpServletResponse에 직접 응답 값을 넣어줄 수도 있다.&lt;/p&gt;

&lt;p&gt;리턴 타입은 기타 정보와 결합하여 최종적으로 ModelAndView로 만들어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ModelAndView / Map / Model / ModelMap : 컨트롤러가 리턴하는 정보를 담는다.&lt;/li&gt;
  &lt;li&gt;String: 뷰 이름으로 사용된다.&lt;/li&gt;
  &lt;li&gt;void: 뷰 이름은 RequestToViewNameResolver 전략에 의해 자동으로 결정된다.&lt;/li&gt;
  &lt;li&gt;모델 오브젝트: 뷰 이름은 RequestToViewNameResolver를 통해 자동 생성하도록 하고, 모델 오브젝트가 하나 뿐이라면 Model이나 ModelAndView 대신 바로 모델 오브젝트를 리턴해도 된다. 스프링은 이를 모델에 자동으로 추가시켜 준다.&lt;/li&gt;
  &lt;li&gt;View: 뷰 이름 대신에 뷰 오브젝트를 리턴할 수도 있다.&lt;/li&gt;
  &lt;li&gt;@ResponseBody: 적절한 HttpMessageConverter를 통해 변환되어 HTTP 응답 바디로 전환된다. (HttpServletResponse의 출력 스트림)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Map 자체가 모델 오브젝트인 경우 바로 리턴해서는 안된다. 스프링이 모델 맵으로 인식하여 다시 각 엔트리를 다시 개별적인 모델로 추가시키기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;자동-추가-모델-오브젝트와-자동생성-뷰-이름&quot;&gt;자동 추가 모델 오브젝트와 자동생성 뷰 이름&lt;/h3&gt;

&lt;p&gt;다음 네 가지는 메소드 리턴 타입과는 상관없이, 모델에 자동으로 추가된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@ModelAttribute 오브젝트: 해당 애노테이션이 붙거나, 단순 타입이 아니라 커맨드 오브젝트로 처리된 오브젝트는 자동으로 모델에 추가된다.&lt;/li&gt;
  &lt;li&gt;Map, Model, ModelMap 파라미터: 컨트롤러에서 별도로 ModelAndView 오브젝트를 만들어 리턴하는 경우라도 빠짐없이 모델에 추가된다.&lt;/li&gt;
  &lt;li&gt;@ModelAttribute 메소드: 메소드 레벨에 붙일 경우, 모델 오브젝트를 생성하는 메소드를 지정하기 위해 사용한다. @RequestMapping과 같이 사용해서는 안되며, 다른 컨트롤러의 메소드가 호출될 때 자동으로 해당 메소드가 만든 오브젝트를 모델에 추가시킨다.&lt;/li&gt;
  &lt;li&gt;BindingResult&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;모델-바인딩과-검증&quot;&gt;모델 바인딩과 검증&lt;/h2&gt;

&lt;p&gt;컨트롤러 메소드에 @ModelAttribute가 지정된 파라미터가 있다면 다음 세 가지 작업이 자동으로 진행된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;파라미터 타입의 오브젝트를 준비한다&lt;/strong&gt;. 이를 위해 디폴트 생성자가 필요하다. 만약 @SessionAttribute에 의해 세션에 저장된 모델 오브젝트가 있다면 새 오브젝트를 생성하는 대신에 이를 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델 오브젝트의 프로퍼티에 웹 파라미터를 바인딩한다.&lt;/strong&gt; 스프링에 준비되어 있는 디폴트 프로퍼티 에디터를 통해 타입에 맞게 자동으로 변환한다. 전환이 불가능하면 BindingResult 오브젝트에 바인딩 오류를 저장하여 컨트롤러에 넘겨주거나 BindingException 예외를 발생시킨다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;모델의 값을 검증한다.&lt;/strong&gt; 바인딩 단계에서 타입 검증은 끝났지만 이 외에 검증할 내용이 있다면 적절한 검증기(Validator)를 등록해서 모델의 내용를 검증할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;바인딩&quot;&gt;바인딩&lt;/h3&gt;

&lt;p&gt;스프링에서 바인딩이라고 할 때는 오브젝트의 프로퍼티에 값을 넣는 것을 의미한다.
프로퍼티 바인딩은 프로퍼티의 타입에 맞게 주어진 값을 적절히 변환하고, 실제 프로퍼티의 Setter를 호출하여 값을 넣는 두 가지 작업이 필요하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@ModealAttribute로 지정된 모델 오브젝트의 프로퍼티 뿐만 아니라 @RequestParam이나 @PathVariable 같은 단일 파라미터에 대한 바인딩도 적용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PropertyEditor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;기본적으로 제공하는 타입 변환 API로, 자바빈 표준에 정의된 인터페이스이다.
바인딩 과정에서는 변환할 파라미터 또는 모델 프로퍼티의 타입에 맞는 프로퍼티 에디터가 자동으로 선정되어 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-12-22-toby_spring_13_@mvc/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP Request에서 타입 변환시 &lt;strong&gt;setAsText&lt;/strong&gt; 메소드를 통해 String 타입의 문자열을 넣고, &lt;strong&gt;getValue&lt;/strong&gt; 메소드를 통해 변환된 오브젝트를 가져온다. 반대로 오브젝트를 다시 문자열로 바꿀 때는 &lt;strong&gt;setValue&lt;/strong&gt; 메소드로 오브젝트를 넣고 &lt;strong&gt;getAsText&lt;/strong&gt; 메소드로 변환된 문자열을 가져온다. 구현해야 될 메소드는 &lt;strong&gt;setAsText&lt;/strong&gt;와 &lt;strong&gt;getAsText&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;프로퍼티 에디터를 만들 때는 PropertyEditor 인터페이스를 구현하는 것보다는 &lt;strong&gt;PropertyEditorSupport&lt;/strong&gt; 클래스를 상속하여 필요한 메소드만 오버라이드하는 것이 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;setXXX 메소드를 통해 한 번 저장하고, getXXX 메소드를 통해 가져오는 프로퍼티 에디터 방식은 값이 한 번은 프로퍼티 에디터에 저장된다는 것이다. 이 때문에 프로퍼티 에디터는 싱글톤으로 만들어 사용해서는 안된다. 만약 스프링에 의해 DI가 필요한 경우라면 프로토타입 스코프 빈으로 사용하거나 Converter를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;@InitBindter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@MVC에는 스프링 컨테이너에 정의된 디폴트 프로퍼티 에디터만 등록되어 있다.
핸들러 어댑터는 @RequestParam이나 @ModelAttribute와 같은 파라미터 변수에 바인딩해주는 작업이 필요한 애노테이션을 만나면 먼저 &lt;strong&gt;WebDataBinder&lt;/strong&gt;를 생성한다.&lt;/p&gt;

&lt;p&gt;WebDataBinder는 여러 가지 기능을 제공하는데, HTTP 요청으로부터 가져온 문자열을 파라미터 타입의 오브젝트로 변환하는 기능을 제공한다. 이 변환 작업 진행시 등록된 프로퍼티 에디터를 사용한다. 직접 만든 커스텀 프로퍼티 에디터를 적용하려면 &lt;strong&gt;스프링이 제공하는 WebDataBindier 초기화 메소드를 통해 WebDataBinder에 프로퍼티 에디터를 등록해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@InitBinder&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomTypePropertyEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 컨트롤러 클래스에 @InitBinder 애노테이션을 부여한 메소드를 등록시키면 메소드 파라미터를 바인딩하기 전에 자동으로 호출되는데, WebDataBinder에 커스텀 프로퍼티 에디터를 등록시켜 커스텀 프로퍼티 에디터를 통한 바인딩 작업이 일어나게 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@InitBinder에 의해 등록된 커스텀 에디터는 같은 컨트롤러 메소드에서 HTTP 요청을 바인딩하는 모든 작업에 적용된다. 적용 대상은 @RequestParam, @CookieValue, @RequestHeader, @PathVariable, @ModelAttribue의 프로퍼티이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@ModelAttribute로 지정된 오브젝트의 필드에 바인딩 적용할 때 프로퍼티 이름을 지정하여 특정 이름을 가진 프로퍼티에만 적용하게 할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;WebBindingInitializer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@InitBinder 메소드를 통해 등록한 커스텀 프로퍼티 에디터는 메소드가 있는 컨트롤러 클래스 안에서만 동작한다.
모든 컨트롤러에 적용하고자 할 때는 &lt;strong&gt;WebBindingInitializer&lt;/strong&gt;를 사용한다&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Converter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;바인딩할 때마다 매번 새로운 오브젝트를 만들어야 한다는 단점을 가지는 PropertyEditor 대신에 &lt;strong&gt;Converter를 사용하면 싱글톤 빈으로 등록하여 타입 변환을 진행할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 메소드가 한 번만 호출되어 바로 변환된 값을 받을 수 있기 때문에 싱글톤 빈으로도 등록 가능하다.
단 프로퍼티 에디터와는 다르게 단방향만 지원하므로, 양방향 변환하려면 Converter를 두 개 등록해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;모델의-일생&quot;&gt;모델의 일생&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;http-요청으로부터-컨트롤러-메소드까지&quot;&gt;HTTP 요청으로부터 컨트롤러 메소드까지&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-12-22-toby_spring_13_@mvc/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@ModelAttribute 메소드 파라미터
    &lt;ul&gt;
      &lt;li&gt;컨트롤러 메소드의 모델 파라미터와 @ModelAttribute로부터 모델 이름, 모델 타입 정보를 가져온다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@SessionAttribute 세션 저장 대상 확인
    &lt;ul&gt;
      &lt;li&gt;모델 이름과 동일한 것이 있다면 HTTP 세션에 저장해둔 것이 있는지 확인한다. 만약 있다면 모델 오브젝트를 새로 만드는 대신, 세션에 저장된 것을 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PropertyEditor / ConversionService
    &lt;ul&gt;
      &lt;li&gt;WebBindingInitializer나 @InitBinder 메소드를 통해 등록된 변환 기능 오브젝트를 통해 모델의 프로퍼티에 맞도록 요청 파라미터를 변환한다.&lt;/li&gt;
      &lt;li&gt;커스텀 프로퍼티 에디터 &amp;gt; 컨버전 서비스 &amp;gt; 디폴트 프로퍼티 에디터 순으로 우선순위가 정해진다.&lt;/li&gt;
      &lt;li&gt;타입 변환 실패시 BindingResult 오브젝트에 필드 에러가 등록된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Validator
    &lt;ul&gt;
      &lt;li&gt;WebBindingInitializer나 @InitBinder 메소드를 통해 등록된 Validator로 모델을 검증한다. 검증 결과는 BindingResult에 등록된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ModenAndView의 모델 맵
    &lt;ul&gt;
      &lt;li&gt;모델 오브젝트는 컨트롤러 메소드가 호출되기 전 임시 모델 맵에 저장된다.&lt;/li&gt;
      &lt;li&gt;컨트롤러가 처리를 하면서 추가로 등록된 모델 오브젝트와 함께 ModelAndView에 담겨 DispatcherServlet으로 전달된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컨트롤러 메소드 및 BindingResult
    &lt;ul&gt;
      &lt;li&gt;HTTP 요청을 담은 모델 오브젝트가 파라미터로 전달되면서 컨트롤러 메소드가 실행된다.&lt;/li&gt;
      &lt;li&gt;BindingResult는 ModelAndView의 모델 맵에 자동 추가된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;컨트롤러-메소드부터-뷰까지&quot;&gt;컨트롤러 메소드부터 뷰까지&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-12-22-toby_spring_13_@mvc/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MessageCodeResolver
    &lt;ul&gt;
      &lt;li&gt;바인딩 또는 검증 결과로 등록된 에러 코드를 확장해서 메시지 코드 후보 목록을 만든다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MessageSource / LocaleResolver
    &lt;ul&gt;
      &lt;li&gt;LocaleResolver에 의해 결정된 지역 정보와 MessageCodeResolver가 생성한 메시지 코드 후보 키 목록을 이용해 MesssageSource가 뷰에 출력할 에러 메시지를 결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@SessionAttribute 세션 저장 대상 확인
    &lt;ul&gt;
      &lt;li&gt;@SessionAttribute에 지정한 이름과 동일한 모델 오브젝트가 있다면 HTTP 세션에 저장된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;뷰
    &lt;ul&gt;
      &lt;li&gt;뷰 오브젝트로 모델 맵에 포함된 모델 오브젝트 및 에러 메시지가 전달된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/12/22/toby_spring_13_@mvc-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/12/22/toby_spring_13_@mvc-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 12: 스프링 웹 기술과 스프링 MVC</title>
        <description>&lt;p&gt;스프링은 빠르게 기술의 변화가 일어나는 웹 계층과 여타 계층을 깔끔하게 분리해서 개발하는 아키텍처 모델을 지지한다. 따라서 스프링으로 개발하더라도 웹 계층은 어떤 기술로도 대체 가능하다. 물론 스프링에서도 자체 웹 기술과 프레임워크를 제공하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-웹-프레젠테이션-계층-기술&quot;&gt;스프링의 웹 프레젠테이션 계층 기술&lt;/h2&gt;

&lt;p&gt;프레젠테이션 계층은 복잡하고 다양한 기술의 조합으로 구성될 수 있다. 스프링 애플리케이션 입장에서는 간단히 두 가지로 구분할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스프링 웹 기술을 사용하는 프레젠테이션 계층&lt;/li&gt;
  &lt;li&gt;스프링 외의 웹 기술을 사용하는 프레젠테이션 계층&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링은 의도적으로 &lt;strong&gt;서블릿 웹 애플리케이션의 컨텍스트를 두 가지로 분리하였다.&lt;/strong&gt;
웹 기술에서 독립적인 비즈니스 서비스 계층과 데이터 엑세스 계층을 담은 &lt;strong&gt;루트 애플리케이션 컨텍스트&lt;/strong&gt;와 스프링 웹 기술을 기반으로 동작하는 웹 관련 빈을 담은 &lt;strong&gt;서블릿 애플리케이션 컨텍스트&lt;/strong&gt;이다.
이렇게 두 가지로 분리한 이유는 스프링 웹 서블릿 컨텍스트를 다른 기술로도 대체할 수 있도록 하기 위해서이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링-서블릿--스프링-mvc&quot;&gt;스프링 서블릿 / 스프링 MVC&lt;/h3&gt;

&lt;p&gt;스프링이 직접 제공하는 서블릿 기반의 MVC 프레임워크이다. 프론트 컨트롤러 역할을 하는 &lt;strong&gt;DispatcherServlet&lt;/strong&gt;을 핵심 엔진으로 사용한다. 스프링 서블릿의 모든 컴포넌트는 스프링의 서블릿 애플리케이션 컨텍스트의 빈으로 등록되어 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링-mvc와-dispatcherservlet의-전략&quot;&gt;스프링 MVC와 DispatcherServlet의 전략&lt;/h2&gt;

&lt;p&gt;프레임워크 기술은 보통 두 가지 방향으로 발전한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;범용적-프레임워크&quot;&gt;범용적 프레임워크&lt;/h3&gt;

&lt;p&gt;스프링과 같이 &lt;strong&gt;유연성과 확장성&lt;/strong&gt;을 중점을 두고 어떤 종류의 시스템 개발이나 환경, 요구조건에도 잘 들어맞도록 재구성할 수 있는 범용적 프레임워크이다. 이런 프레임워크는 각 계층과 기술 사이의 독립성을 중요하게 생각한다.
각 계층과 기술들이 서로의 내부를 잘 알고 강하게 결합되는 것을 극도로 꺼린다. &lt;strong&gt;각 계층은 정해진 인터페이스 외에는 서로 알지 못한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;각 계층은 독립적으로 개발 / 테스트할 수 있고, 다른 계층의 코드에 영향을 주지 않은 채로 자유롭게 변경할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;일체형-프레임워크&quot;&gt;일체형 프레임워크&lt;/h3&gt;

&lt;p&gt;제한적인 기술만을 사용하도록 강제하지만, 그 기술의 장점을 극대화하도록 설계된다. 계층 간의 느슨한 결합이 없고, 강하게 결합되어 최적화된 코드를 만든다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링의-지향점&quot;&gt;스프링의 지향점&lt;/h3&gt;

&lt;p&gt;스프링은 모든 기능을 다양한 방법으로 확장하도록 설계되어 있다. &lt;strong&gt;스프링을 잘 사용한다는 것은, 유연한 확장성을 최대한 활용하면서 일체형 프레임워크와 같은 스타일을 지향하는 것이다.&lt;/strong&gt; 이는 유연하고 확장성이 뛰어난 구조를 활용해서 최적화된 구조를 만들고, 관례에 따라 빠르게 개발 가능한 스프링 기반의 프레임워크를 만들어서 사용해야 한다는 뜻이다.&lt;/p&gt;

&lt;p&gt;스프링이 좋은 프레임워크이므로, 그냥 스프링에 제공하는 기술과 API만 사용하는 것만으로는 부족하다.&lt;/p&gt;

&lt;p&gt;스프링은 특정 기술이나 방식에 얽매이지 않으면서 웹 프레젠테이션 계층의 각종 기술을 조합, 확장해서 사용할 수 있는 매우 유연한 웹 애플리케이션 개발의 기본 틀을 제공해준다. 이 틀이 제공하는 다양한 전략의 확장포인트를 이용하여 스프링 스스로 기본적인 MVC 프레임워크를 만들어두었다.&lt;/p&gt;

&lt;p&gt;개발자는 MVC 프레임워크 위에 필요한 전략을 추가해서 사용할 수 있어야 한다. MVC 프레임워크를 완성된 고정적인 프레임워크로 보지 말고, 진행하려는 프로젝트의 특성에 맞게 빠르고 편리한 개발이 가능하도록 자신만의 웹 프레임워크를 만드는 데 쓰는 도구라고 생각할 필요가 있다.&lt;/p&gt;

&lt;p&gt;스프링의 웹 기술의 핵심이자 기반이 되는 것은 &lt;strong&gt;DispatcherServlet&lt;/strong&gt;이다. 이 서블릿은 스프링의 웹 기술을 구성하는 다양한 전략을 DI로 구성해서 확장하도록 만들어진 스프링 서블릿 / MVC의 엔진과 같은 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dispatcherservlet과-mvc-아키텍처&quot;&gt;DispatcherServlet과 MVC 아키텍처&lt;/h3&gt;

&lt;p&gt;스프링의 웹 기술은 MVC 아키텍처를 근간으로 한다. 정보를 담은 모델과 화면 출력 로직을 담은 뷰, 제어 로직을 담은 컨트롤러로 프레젠테이션 계층의 구성 요소를 분리하고 서로 협력해서 하나의 웹 요청을 처리한다.&lt;/p&gt;

&lt;p&gt;MVC 아키텍처는 &lt;strong&gt;프론트 컨트롤러&lt;/strong&gt; 패턴과 함께 사용된다.
프론트 컨트롤러 패턴은 &lt;strong&gt;중앙 집중형 컨트롤러를 프레젠테이션 계층의 제일 앞단에 두어 서버로 들어오는 모든 요청을 먼저 받아서 처리하도록 한다.&lt;/strong&gt;
프론트 컨트롤러는 먼저 공통적인 작업을 수행한 후, 적절한 세부 컨트롤러로 작업을 위임하고 클라이언트에게 보낼 뷰를 선택하여 최종 결과를 생성하는 등의 작업을 수행한다. 예외가 발생하면 이를 일관된 방식으로 처리하는 것도 프론트 컨트롤러의 역할이다.&lt;/p&gt;

&lt;p&gt;스프링 서블릿 / MVC의 핵심은 &lt;strong&gt;DispatcherServlet&lt;/strong&gt;이라는 프론트 컨트롤러이다. 이 DispatcherServlet은 MVC 아키텍처로 구성된 프레젠테이션 계층을 만들 수 있도록 설계되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-12-15-toby_spring_12_web/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-dispatcherservlet의-http-요청-접수&quot;&gt;&lt;strong&gt;(1) DispatcherServlet의 HTTP 요청 접수&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;자바 서버의 서블릿 컨테이너는 HTTP 프로토콜을 통해 들어오는 요청이 스프링의 DispatcherServlet으로 할당된 것이면 HTTP 요청정보를 Dispatcher 서블릿으로 전달한다. 보통 web.xml은 다음과 같이 정의되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Spring MVC Dispatcher Servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/app/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위의 설정은 /app으로 시작하는 모든 요청을 스프링의 프론트 컨트롤러인 DispatcherServlet으로 할당하는 것이다. DispatcherServlet은 공통으로 진행해야하는 작업이 있다면 먼저 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2dispatcherservlet에서-컨트롤러로-http-요청-위임&quot;&gt;&lt;strong&gt;(2)DispatcherServlet에서 컨트롤러로 HTTP 요청 위임&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;DispatcherServlet은 URL이나 파라미터 정보, HTTP 메소드를 참고하여 어떤 컨트롤러로 작업을 위임할지 결정한다. 컨트롤러를 설정하는 것은 DispatcherServlet의 &lt;strong&gt;핸들러 매핑 전략&lt;/strong&gt;을 이용한다. 사용자 요청 기준으로 어떤 핸들러에게 작업을 위임할지를 결정해주는 것을 핸들러 매핑 전략이라고 한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet의 &lt;strong&gt;핸들러 매핑 전략은 DispatcherServlet 수정없이 DI를 통해 언제든지 확장이 가능하다.&lt;/strong&gt; 어떤 URL이 들어오면 어떤 컨트롤러가 이를 처리할지를 매핑해주는 전략을 만들어서 제공해주면 된다.&lt;/li&gt;
  &lt;li&gt;어떤 컨트롤러가 처리할지를 결정했다면, 해당 컨트롤러 오브젝트의 메소드를 호출하여 실제로 웹 요청을 위임한다. 그런데 실제로 실행하려면 컨트롤러 메소드를 어떻게 호출할지를 알아야 한다. &lt;strong&gt;컨트롤러는 특정 인터페이스를 구현한다는 식의 제약없이 어떤 종류의 형태로도 정의할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 각기 다른 메소드와 포맷을 가진 컨트롤러 오브젝트를 사용하기 위해 &lt;strong&gt;어댑터를 사용한다.&lt;/strong&gt; 특정 컨트롤러를 호출할 때는 해당 컨트롤러 타입을 지원하는 어댑터를 중간에 끼워넣어 호출하는 것이다. 따라서 DispatcherServlet 입장에서는 항상 일정한 방식으로 컨트롤러를 호출하고 결과를 받을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-12-15-toby_spring_12_web/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DispatcherServlet은 컨트롤러가 어떠한 메소드를 가졌으며 어떤 인터페이스를 구현했는지 전혀 알지 못한다. 다만 컨트롤러에 따른 적절한 어댑터만을 사용할 뿐이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;각 어댑터는 자신이 담당하는 컨트롤러에 맞게 호출 방법을 이용하여 컨트롤러에 작업 요청을 보내고, 결과를 받아 다시 DispacherServlet으로 돌려준다.&lt;/strong&gt; 스프링 서블릿 / MVC 확장 구조의 기본은 이 어댑터를 통한 컨트롤러 호출 방식이다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet이 어떤 어댑터를 사용할지는 &lt;strong&gt;핸들러 어댑터 전략&lt;/strong&gt;을 통해 결정한다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 핸들러 어댑터로 웹 요청을 전달할 때는 모든 웹 요청 정보가 담긴 &lt;strong&gt;HttpServletRequest&lt;/strong&gt; 타입의 오브젝트를 전달한다. 어댑터는 이를 받아 컨트롤러의 메소드가 받을 수 있는 파라미터로 변환해서 전달해준다.&lt;/li&gt;
  &lt;li&gt;DispatcherServlet은 &lt;strong&gt;HttpServletResponse&lt;/strong&gt;도 같이 전달한다. 이는 컨트롤러에서 HttpServletResponse 오브젝트안에 직접 결과를 넣어줄 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-컨트롤러의-모델-생성과-정보-등록&quot;&gt;&lt;strong&gt;(3) 컨트롤러의 모델 생성과 정보 등록&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MVC 패턴의 장점은 정보를 담는 모델과 정보를 어떻게 뿌려줄지를 알고 있는 뷰가 분리된다는 점이다.&lt;/li&gt;
  &lt;li&gt;컨트롤러의 작업은 먼저 사용자 요청을 해석한 후, 비즈니스 로직을 수행하도록 서비스 계층의 오브젝트로 작업을 위임, 결과를 받아 모델을 생성 후 어떤 뷰를 사용할지를 결정하는 네 가지로 분류할 수 있다.&lt;/li&gt;
  &lt;li&gt;모델을 생성하고 모델에 정보를 넣어주는 것이 컨트롤러가 해야 할 마지막 중요한 두 가지 작업 중의 하나이다. 컨트롤러에서 DispatcherServlet으로 결과를 돌려주는 두 가지 정보가 &lt;strong&gt;모델과 뷰이다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-컨트롤러의-결과-리턴-모델과-뷰&quot;&gt;&lt;strong&gt;(4) 컨트롤러의 결과 리턴: 모델과 뷰&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MVC의 모든 요소랑 마찬가지로 뷰도 하나의 오브젝트인데, 컨트롤러가 뷰 오브젝트를 직접 리턴할 수도 있지만 보통은 &lt;strong&gt;뷰의 논리적인 이름을 리턴하여 DispatcherServlet의 전략인 뷰 리졸버가 이를 이용해 뷰 오브젝트를 생성하도록 한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;컨트롤러가 리턴하는 정보는 모델과 뷰로, 이를 표현하는 &lt;strong&gt;ModelAndView&lt;/strong&gt;라는 이름의 오브젝트가 있다. 이 오브젝트가 DispatcherSevlet이 어댑터를 통해 컨트롤러로부터 돌려받는 오브젝트이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;5-dispatcherservlet의-뷰-호출과-6-모델-참조&quot;&gt;&lt;strong&gt;(5) DispatcherServlet의 뷰 호출과 (6) 모델 참조&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;DispatcherServlet은 컨트롤러로부터 모델과 뷰를 전달받은 후, &lt;strong&gt;뷰 오브젝트에게 모델을 전달하여 최종 결과물을 생성해달라고 요청한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;뷰 오브젝트는 모델을 받아 적절한 최종 결과물을 생성한다.&lt;/li&gt;
  &lt;li&gt;최종 결과물은 HttpServletResponse에 담긴다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;7-http-응답-돌려주기&quot;&gt;&lt;strong&gt;(7) HTTP 응답 돌려주기&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;뷰 생성까지 모든 작업을 마친 후, DispatcherServlet은 등록된 후처리기가 있는지 확인 후 있다면 후처리기에서 후속 작업을 진행 후 뷰가 만들어준 HttpServletResponse에 담긴 결과를 서블릿 컨테이너로 돌려준다.&lt;/li&gt;
  &lt;li&gt;서블릿 컨테이너는 HttpServletResponse에 담긴 정보를 HTTP 응답으로 만들어 사용자의 브라우저나 클라이언트로 전송하고 작업을 종료한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dispacherservlet의-di-가능한-전략&quot;&gt;DispacherServlet의 DI 가능한 전략&lt;/h3&gt;

&lt;p&gt;DispatcherServlet은 DI로 확장 가능한 여러 전략들이 있다. 스프링 MVC는 자주 사용되는 전략을 디폴트로 설정해주고 있다. 따라서 필요한 전략만 확장해서 사용하고 나머지는 디폴트 전략을 사용해도 된다.&lt;/p&gt;

&lt;p&gt;다음 전략들은 DispatcherServlet의 동작 방식을 확장하는 확장 포인트라고 할 수 있다. 
&lt;strong&gt;DispatcherServlet은 서블릿 컨테이너가 생성하고 관리하는 오브젝트이지, 스프링 컨텍스트에서 관리하는 빈 오브젝트가 아니다.&lt;/strong&gt; 하지만 DispatcherServlet은 내부에 서블릿 웹 애플리케이션 컨텍스트를 가지고 있고 내부 컨텍스트로부터 전략이 담긴 빈 오브젝트를 찾아 사용한다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet에 적용할 전략을 선택하고, 필요에 따라 확장하거나 다른 방식으로 사용하는 것이 스프링 MVC를 바로 사용하는 첫 걸음이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;handlermapping&quot;&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HandlerExecutionChain&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;URL과 요청 정보를 기준으로 &lt;strong&gt;어떤 핸들러 오브젝트, 즉 컨트롤러를 사용할 것인지를 결정하는 로직을 담당한다.&lt;/strong&gt; &lt;strong&gt;HandlerMapping&lt;/strong&gt; 인터페이스를 구현해서 만들 수도 있다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet은 하나 이상의 핸들러 매핑을 가질 수 있다. 디폴트는 &lt;strong&gt;BeanNameUrlHandlerMapping&lt;/strong&gt;과 &lt;strong&gt;DefaultAnnotationHandlerMapping&lt;/strong&gt; 두 가지가 설정되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DefaultAnnotationHandlerMapping: @RequestMapping이라는 애노테이션을 컨트롤러 클래스나 메소드에 직접 부여하고 이를 이용해 매핑하는 전략이다. 스프링 3.1부터 deprecated되고, 대신에 &lt;strong&gt;RequestMappingHandlerMapping&lt;/strong&gt;이 추가되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;RequestMappingHandlerMapping은 웹 요청을 핸들러 오브젝트가 아닌 핸들러 메소드(HandlerMethod)로 매핑한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;handleradapter&quot;&gt;&lt;strong&gt;HandlerAdapter&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;supports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLastModified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;핸들러 매핑으로 선택한 컨트롤러 / 핸들러를 DispatcherServlet이 &lt;strong&gt;호출할 때 사용하는 어댑터&lt;/strong&gt;이다.
컨트롤러 타입에는 제한이 없으며, 호출 방식은 타입에 따라 다르기 때문에 컨트롤러를 결정한다고 해서 DispatcherServlet이 바로 호출할 수 없다. 따라서 컨트롤러 타입을 지원하는 HandlerAdapter가 필요하다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DispatcherServlet은 빈으로 등록된 모든 핸들러 어댑터의 supports 메소드를 호출해서 핸들러 매핑으로 찾아낸 핸들러 오브젝트를 처리할 수 있는지 확인하고, 처리할 수 있는 핸들러 어댑터의 handle 메소드를 호출하여 컨트롤러를 실행시킨다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;핸들러 어댑터는 DispatcherServlet으로부터 HttpServletRequest와 HttpServletResponse를 받아 이를 컨트롤러가 사용하는 파라미터 타입으로 변환해서 제공한다. 그리고 받은 결과를 ModelAndView 타입의 오브젝트에 담아 DispatcherServlet으로 돌려준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;컨트롤러 타입에 적합한 어댑터를 가져다가 이를 통해 컨트롤러를 호출한다. 디폴트는 &lt;strong&gt;HttpRequestHandlerAdapter&lt;/strong&gt;, &lt;strong&gt;SimpleControllerHandlerAdapter&lt;/strong&gt;, &lt;strong&gt;AnnotationMethodHandlerAdapter&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;핸들러 매핑과 어댑터는 서로 연관이 있을 수도 있고 없을 수도 있다.
다만 @RequestMapping과 @Controller 어노테이션을 통해 정의되는 컨트롤러의 경우, &lt;strong&gt;DefaultAnnotationHandlerMapping&lt;/strong&gt;에 의해 핸들러가 결정되고, &lt;strong&gt;AnnotationMethodHandlerAdapter&lt;/strong&gt;에 의해 호출이 일어난다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링 3.1부터는 DefaultAnnotationHandlerMapping -&amp;gt; RequestMappingHandlerMapping / AnnotationMethodHandlerAdapter -&amp;gt; RequestMappingHandlerAdapter 를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;AnnotationMethodHandlerAdapter: 지원하는 컨트롤러의 타입이 정해져있지 않다. 클래스와 메소드에 붙은 몇 가지 애노테이션 정보와 메소드 이름, 파라미터, 리턴 타입에 대한 규칙을 종합적으로 분석해서 컨트롤러를 선별하고 호출 방식을 결정한다. 또한 URL 매핑 단위가 클래스가 아닌 메소드 단위이다. 스프링 3.1부터 deprecated 되었고, 대신에 &lt;strong&gt;RequestMappingHandlerAdapter&lt;/strong&gt; 를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;handlerexceptionresolver&quot;&gt;HandlerExceptionResolver&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerExceptionResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;예외가 발생했을 때, 이를 처리하는 로직을 가진다.&lt;/strong&gt;
예외가 발생했을 때, 예외의 종류에 따라 에러 페이지를 표시한다던가 관리자에게 통보하는 작업은 개별 컨트롤러가 아닌 프론트 컨트롤러인 DispatcherServlet을 통해 처리되어야 한다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet은 등록된 HandlerExceptionResolver 중에서 발생한 예외에 적합한 것을 찾아 예외처리를 위임한다.&lt;/p&gt;

&lt;p&gt;디폴트는 &lt;strong&gt;AnnotationMethodHandlerExceptionResolver&lt;/strong&gt;, &lt;strong&gt;ResponseStatusExceptionResolver&lt;/strong&gt;, &lt;strong&gt;DefaultHandlerExceptionResolver&lt;/strong&gt; 세 가지가 등록되어 있다. 
단 3.1부터는 AnnotationMethodHandlerExceptionResolver 대신, &lt;strong&gt;ExceptionHandlerExceptionResolver를 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;viewresolver&quot;&gt;ViewResolver&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveViewName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;뷰 리졸버는 컨트롤러가 리턴한 &lt;strong&gt;뷰 이름을 참고해서 적절한 뷰 오브젝트를 찾는 로직을 가진다.&lt;/strong&gt;
스프링이 지원하는 뷰의 종류는 다양하므로, 뷰의 종류에 따라 적절한 뷰 리졸버를 추가로 설정하면 된다.&lt;/p&gt;

&lt;p&gt;컨트롤러가 작업을 마친 후 뷰 정보를 &lt;strong&gt;ModelAndView&lt;/strong&gt; 타입 오브젝트를 DispatcherServlet으로 돌려주는데, 뷰 이름을 넣어주거나 &lt;strong&gt;View&lt;/strong&gt; 타입의 오브젝트를 돌려주는 방법이 있다. 뷰 이름을 넣어주는 경우, 위의 뷰 리졸버가 필요하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;View 인터페이스는 뷰 오브젝트가 생성하는 콘텐츠의 타입 정보 제공 및 모델을 전달받아 클라이언트에 돌려줄 결과물을 만들어주는 메소드들로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;localeresolver&quot;&gt;LocaleResolver&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocaleResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;지역 정보를 결정해주는 전략이다.&lt;/strong&gt;
디폴트인 &lt;strong&gt;AcceptHeaderLocaleResolver&lt;/strong&gt;는 HTTP 헤더의 정보를 보고 지역정보를 설정한다. 헤더말고도 세션이나 URL 파라미터, 쿠키 정보를 고려하도록 다른 전략을 통해 결정하게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;themeresolver&quot;&gt;ThemeResolver&lt;/h4&gt;

&lt;p&gt;테마를 가지고 이를 변경해서 사이트를 구성할 경우, 쓸 수 있는 테마 정보를 결정해주는 전략이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;requesttoviewnametranslator&quot;&gt;RequestToViewNameTranslator&lt;/h4&gt;

&lt;p&gt;컨트롤러에서 뷰 이름이나 뷰 오브젝트를 지정해주지 않았을 경우, &lt;strong&gt;URL과 같은 요청정보를 참고하여 자동으로 뷰 이름을 생성해주는 전략이다.&lt;/strong&gt; 디폴트는 &lt;strong&gt;DefaultRequestToViewNameTranslator&lt;/strong&gt;이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;DispatcherServlet을 프론트 컨트롤러로 사용하는 스프링 MVC의 가장 큰 특징은 매우 유연한 컨트롤러 호출 방식을 사용한다는 것이다. 컨트롤러 종류에 제약을 받지 않고, 적절한 어댑터만 제공해준다면 다양한 종류의 컨트롤러를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;핸들러-인터셉터&quot;&gt;핸들러 인터셉터&lt;/h4&gt;

&lt;p&gt;핸들러 매핑의 역할은 URL과 요청정보로부터 컨트롤러 빈을 찾는 것 뿐만 아니라, 핸들러 인터셉터를 적용해주는 것도 있다. 핸들러 인터셉터는 DispatcherServlet이 &lt;strong&gt;컨트롤러를 호출하기 전과 후에 요청과 응답을 참조하거나 가공할 수 있는 일종의 필터이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;핸들러 매핑은 DispatcherServlet으로부터 매핑 작업을 요청받으면 그 결과로 &lt;strong&gt;핸들러 실행 체인(HandlerExecutionChain)&lt;/strong&gt;을 돌려준다. 
핸들러 실행 체인은 하나 이상의 핸들러 인터셉터를 걸쳐서 컨트롤러가 실행될 수 있도록 구성되어 있다. 핸들러 인터셉터가 등록되어 있다면 순서에 따라 인터셉터를 거친 후 컨트롤러가 호출된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HandlerInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postHandle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;핸들러 인터셉터는 기본적으로 핸들러 매핑 단위로 등록한다. 다시 말하자면, 핸들러 매핑 빈의 interceptors 프로퍼티에 핸들러 인터셉터 빈을 레퍼런스로 넣어줘야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;스프링 3.0부터는 핸들러 인터셉터를 URL 패턴을 이용해 모든 핸들러 매핑에 일괄 적용할 수 있게 하는 기능이 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/8eccfb8f4a07fa8754c8d316f98b81715ce2603d&quot;&gt;Example for SimpleController interface, SimpleHandlerAdapter.&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/12/15/toby_spring_12_web-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/12/15/toby_spring_12_web-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 11: 트랜잭션</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션&quot;&gt;트랜잭션&lt;/h2&gt;

&lt;p&gt;트랜잭션 경계설정 코드와 비즈니스 로직을 분리해주고, 코드의 중복을 제거해주는 스프링의 선언전 트랜잭션 기능은 다양한 데이터 엑세스 기술 뿐만 아니라 JMS 메시징 서비스, CCI처럼 트랜잭션 개념을 지원하는 서비스에도 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-추상화와-동기화&quot;&gt;트랜잭션 추상화와 동기화&lt;/h2&gt;

&lt;p&gt;스프링이 제공하는 트랜잭션 서비스는 트랜잭션 추상화와 트랜잭션 동기화 두 가지로 생각할 수 있다.&lt;/p&gt;

&lt;p&gt;트랜잭션 서비스의 종류는 데이터 엑세스 기술보다 더 다양하다. 데이터 엑세스 기술은 변하지 않더라도 트랜잭션 서비스는 환경에 따라 바뀔 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;스프링없이 선언적 트랜잭션을 사용하려면 특정 기술이나 플랫폼, 서비스에 종속될 수 밖에 없다. 스프링은 &lt;strong&gt;데이터 엑세스 기술과 트랜잭션 서비스 사이의 종속성을 제거하고 트랜잭션 추상화 계층을 제공하여 트랜잭션을 활용하도록 해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션 동기화는 트랜잭션을 일정 범위 안에서 유지해주고, 자유롭게 접근할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;platformtransactionmanager&quot;&gt;PlatformTransactionManager&lt;/h3&gt;

&lt;p&gt;스프링 트랜잭션 추상화의 핵심 인터페이스는 &lt;strong&gt;PlatformTransactionManager&lt;/strong&gt;이다. 모든 스프링의 트랜잭션 기능과 코드는 이 인터페이스를 통해 트랜잭션 서비스를 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrnsactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 인터페이스는 트랜잭션 경계를 지정하는데 사용한다. 트랜잭션이 어디서 시작하고 종료하는지, 종료할 때 커밋 / 롤백을 상황에 따라 결정할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링에서는 시작과 종료를 트랜잭션 전파 기법을 통해 자유롭게 조합하고 확장할 수 있다. 따라서 시작하는 메소드는 적절한 트래잭션을 가져온다는 &lt;strong&gt;getTransaction&lt;/strong&gt; 이라는 이름으로 되어 있다. 속성에 따라 새로 시작하거나, 진행 중인 트랜잭션에 참여하거나, 진행 중인 것을 무시하고 새로 트랜잭션을 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TransactionDefinition&lt;/strong&gt;은 트랜잭션의 네 가지 속성을 나타낸다. TransactionStatus는 현재 참여하고 있는 트랜잭션의 ID와 구분정보를 담고 있으며, 커밋 또는 롤백 시에 이 TransactionStatus를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-매니저의-종류&quot;&gt;트랜잭션 매니저의 종류&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;datasourcetransactionmanager&quot;&gt;DataSourceTransactionManager&lt;/h3&gt;

&lt;p&gt;Connection의 트랜잭션 API를 사용해서 트랜잭션을 관리해준다. 이 트랜잭션 매니저를 사용하기 위해서는 &lt;strong&gt;DataSource를 빈으로 등록해야 되고 트랜잭션 매니저에게 주입해주어야 한다.&lt;/strong&gt; JDBC 및 MyBatis로 만든 DAO에 적용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DataSource는 getConnection() 메소드가 호출될 때마다 새로운 connection을 돌려주어야 한다. 이는 트랜잭션을 저장해두었다가 같은 connection을 돌려주는 DataSource를 사용해서는 안된다는 뜻이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;애플리케이션 코드 상에서 선언적아닌 프로그래밍적으로 트랜잭션을 사용할 때, 트랜잭션 매니저로부터 현재 진행 중인 트랜잭션을 가져오려면 DataSource의 getConnection 대신에 &lt;strong&gt;DataSourceUtils&lt;/strong&gt; 클래스의 getConnection(DataSource)를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;또는 DAO와 DataSource 사이에 &lt;strong&gt;TransactonAwareDataSourceProxy&lt;/strong&gt; 클래스를 이용하여 레거시 DAO 코드에서 DataSource의 getConnection을 호출해도 트랜잭션 매니저가 관리하는 진행 중인 트랜잭션이 담긴 connection을 돌려주게 할 수 도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dataSource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionAwareDataSourceProxy&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TransactionAwareDataSourceProxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionAwareDataSourceProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTargetDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 서버에서 제공하는 DataSource와 트랜잭션 서비스를 JNDI로 접근해 사용하면 DataSourceTransactionManager를 사용할 수 없다. 글로벌 트랜잭션이 필요한 경우에도 이 트랜잭션 매니저가 아닌 JTA를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jpatransactionmanager&quot;&gt;JpaTransactionManager&lt;/h3&gt;

&lt;p&gt;JPA를 사용할 때는 이 트랜잭션 매니저를 사용한다. 마찬가지로 글로벌 트랜잭션을 사용할 떄는 이 매니저를 사용할 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jtatransactionmanager&quot;&gt;JtaTransactionManager&lt;/h3&gt;

&lt;p&gt;하나 이상의 DB나 트랜잭션 리소스가 참여하는 글로벌 트랜잭션을 적용하려면 JTA를 사용해야 한다. JTA는 &lt;strong&gt;여러 개의 트랜잭션 리소스 (DB / JMS 등)에 대한 작업을 하나의 트랜잭션으로 묶을 수 있고, 여러 대의 서버에 분산되어 진행되는 작업을 트랜잭션으로 연결해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DB가 하나라면 트랜잭션 매니저가 하나만 등록되어야 한다. DB가 여러 개라도 JTA를 통해 글로벌 트랜잭션을 사용하려면 JtaTransactionManager가 하나만 등록되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-경계설정-전략&quot;&gt;트랜잭션 경계설정 전략&lt;/h2&gt;

&lt;p&gt;보통 트랜잭션 경계는 서비스 계층의 오브젝트 메소드이다. 코드에 의한 프로그래밍적 방식과 AOP를 이용한 선언적 방식으로 구현될 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;코드에-의한-트랜잭션-경계설정&quot;&gt;코드에 의한 트랜잭션 경계설정&lt;/h3&gt;

&lt;p&gt;스프링의 트랜잭션 매니저는 모두 &lt;strong&gt;PlatformTransactionManager&lt;/strong&gt;를 구현하는데, 이 인터페이스로 트랜잭션 매니저 빈을 가져오면 종류에 상관없이 동일한 방식으로 트랜잭션을 제어하는 코드를 구현할 수 있다. 단, 이 인터페이스의 메소드를 그대로 사용하는 것은 try/catch 블록을 사용해야 되기 때문에 직접 사용하는 대신, 템플릿 / 콜백 방식의 &lt;strong&gt;TransactionTemplate&lt;/strong&gt;를 이용하면 편하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addMembers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranactionCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doInTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;doInTransaction 메소드에서 트랜잭션 안에서 동작해야 될 코드를 구현한다. 이와 같이 스프링이 제공하는 트랜잭션 서비스 추상화와 동기화 기법을 통해 기술에 독립적인 트랜잭션 코드를 만들 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어디서는 PlatformTransactionManager 빈을 DI 받아 getTransaction을 통해 리턴되는 TransactionStatus 오브젝트를 이용하면 현재 진행 중인 트랜잭션을 확인할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;선언적-트랜잭션-경계설정&quot;&gt;선언적 트랜잭션 경계설정&lt;/h3&gt;

&lt;p&gt;코드에 전혀 영향을 주지 않으면서 특정 메소드 실행 전 후에 트랜잭션이 시작되고 종료되거나 기존 트랜잭션에 참여시킬 수 있다. 이는 데코레이터 패턴을 적용한 &lt;strong&gt;트랜잭션 프록시 빈 덕분에 가능하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Transactional&lt;/strong&gt; 애노테이션을 통해 트랜잭션 AOP를 적용할 수 있다. 트랜잭션이 적용될 타깃의 인터페이스나 클래스, 메소드에 이 애노테이션을 붙이면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read-only 속성을 가지는 것이 우선 적용된다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메소드에 부여된 것이 있으면, 클래스 레벨보다 더 우선되어서 적용된다. 또한 인터페이스 레벨보다 클래스 레벨이 더 우선한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;클래스의 메소드 &amp;gt; 클래스 &amp;gt; 인터페이스의 메소드 &amp;gt; 인터페이스&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프록시-모드-인터페이스와-클래스&quot;&gt;프록시 모드: 인터페이스와 클래스&lt;/h3&gt;

&lt;p&gt;스프링 AOP는 기본적으로 &lt;strong&gt;다이내믹 프록시&lt;/strong&gt; 기법을 이용해 동작한다. 이 기법은 인터페이스가 필요한데, 때로는 인터페이스를 구현하지 않은 클래스에다가 트랜잭션을 적용해야 할 수도 있다.&lt;/p&gt;

&lt;p&gt;이 때는 스프링이 지원하는 &lt;strong&gt;클래스 프록시 모드&lt;/strong&gt;를 사용한다. 스프링은 JDK 기반의 다이내믹 프록시 뿐만 아니라 CGLib 라이브러리가 제공해주는 클래스 레벨의 프록시도 사용할 수 있도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyTargetClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 proxyTargetClass를 true로 주면 된다.&lt;/p&gt;

&lt;p&gt;인터페이스를 구현하는 클래스인 경우에도 강제로 클래스 프록시 모드를 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;이 때 주의점은 &lt;strong&gt;@Transaction 애노테이션은 반드시 클래스에 부여해야 한다.&lt;/strong&gt; 인터페이스를 구현하는 클래스일 경우라도 마찬가지이다. 만약 인터페이스에만 붙일 경우, 그 정보가 구현 클래스로 전달되지 않는다. 따라서 이 경우에는 트랜잭션이 적용되지 않는다. &lt;strong&gt;(클래스 프록시 모드인 경우)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@Transactional 애노테이션을 클래스에 붙이더라도 타깃 클래스가 인터페이스를 구현하고, proxyTargetClass를 디폴트로 했을 경우 다이내믹 프록시가 적용된다. &lt;strong&gt;(다이내믹 프록시 모드인 경우)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스 프록시 모드는 final 클래스에는 적용할 수 없다. 클래스 프록시는 타깃 클래스를 상속하여 프록시를 만드는 방법을 사용하기 때문에 final 클래스인 경우 적용이 불가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;클래스 프록시 모드를 사용할 때는 &lt;strong&gt;DB와 관련없는 모든 public 메소드에 트랜잭션이 적용된다.&lt;/strong&gt; 인터페이스를 사용할 경우에는 인터페이스에는 DB 관련 메소드만 정의함으로써 구분을 둘 수 있었지만, 클래스는 그런 구분을 둘 수 없다. 따라서 시간과 리소스 낭비가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;클래스 프록시 모드는 레거시 코드나 여러 제한으로 인해 인터페이스를 못 쓸 경우에만 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aop-방식-프록시와-aspectj&quot;&gt;AOP 방식: 프록시와 AspectJ&lt;/h3&gt;

&lt;p&gt;스프링의 AOP는 기본적으로 프록시 방식으로, 프록시 오브젝트를 타깃 오브젝트 앞에 두고 호출과정을 가로채어 트랜잭션과 같은 부가작업을 진행해준다.&lt;/p&gt;

&lt;p&gt;이 방식말고도, AspectJ의 AOP를 사용하면 더 강력한 기능을 사용할 수 있다. AspectJ의 AOP 방식은 &lt;strong&gt;타깃 오브젝트 자체를 조작하여 부가기능을 직접 넣는 방식을 사용한다.&lt;/strong&gt; 따라서 메소드 실행 지점만 조인 포인트로 사용할 수 있는 프록시 방식과는 다르게, 다양한 조인 포인트와 고급 기능을 사용할 수 있다. 대신 별도의 빌드 과정이나 로드타임 위버 설정과 같은 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;다음 그림과 같이 프록시 방식은 클라이언트와 타깃 오브젝트 사이에 프록시를 두어 투명하게 부가작업을 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-17-toby_spring_11_transaction/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 프록시는 클라이언트가 타깃 오브젝트를 호출하는 과정에서만 동작한다. 이 말은 &lt;strong&gt;타깃 오브젝트 자신이 자신의 메소드를 호출할 경우에는 적용이 되지 않는다는 것을 의미한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-17-toby_spring_11_transaction/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1번의 경우에는 프록시를 통해 호출되므로 프록시 기능이 동작하지만 2번의 경우 바로 호출이 일어나므로 프록시 기능이 동작하지 않는다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같은 코드 인 경우 자기 자신의 메소드를 호출할 때는 그 메소드에 붙은 트랜잭션 속성이 적용되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Trasnactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRES_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이 경우 addMember 메소드의 REQUIRES_NEW 트랜잭션 속성이 적용되지 않는다.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 AspectJ는 타깃 오브젝트 자체를 조작하므로, 자기 자신의 메소드를 호출하는 경우에도 AOP는 잘 동작한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AdviceMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ASPECTJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;AspectJ를 통해 트랜잭션을 적용할 때는, @Transactional 애노테이션을 클래스 및 클래스 메소드에 붙여야 한다. 인터페이스에만 붙일 경우 트랜잭션이 적용되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-속성&quot;&gt;트랜잭션 속성&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-전파-propagation&quot;&gt;트랜잭션 전파: propagation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션을 시작하거나 참여하는 방법을 결정한다.&lt;/strong&gt;
트랜잭션 경계 시작 부분에서 특정 범위의 트랜잭션을 어떤 식으로 진행할지 결정할 수 있다.&lt;/p&gt;

&lt;p&gt;총 7가지 있는데, 모든 트래잭션 매니저나 데이터 엑세스 기술에서 이 7가지를 다 지원하는 것은 아니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;REQUIRED: 디폴트 속성, 시작된 트랜잭션이 있다면 참여하고 없다면 새로 트랜잭션을 시작한다.&lt;/li&gt;
  &lt;li&gt;SUPPORTS: 이미 시작된 트랜잭션이 있다면 참여만 하고, 없다면 그냥 트랜잭션 없이 수행한다. 트랜잭션은 없지만, 해당 경계 내에서 connection이나 하이버네이트 세션을 공유할 수 있다.&lt;/li&gt;
  &lt;li&gt;MANDATORY: REQUIRED와 마찬가지로 이미 시작된 것이 있으면 참여만 한다. 단 시작된 트랜잭션이 없으면 예외를 발생시킨다. 혼자서 독립적으로 트랜잭션을 진행하면 안되는 경우 사용한다.&lt;/li&gt;
  &lt;li&gt;REQUIRES_NEW: 항상 새로운 트랜잭션을 시작한다. 이미 진행 중인 트랜잭션이 있다면 보류시킨다. JTA를 사용한다면 서버의 트랜잭션 매니저가 트랜잭션 보류가 가능하도록 설정해야 한다.&lt;/li&gt;
  &lt;li&gt;NOT_SUPPORTED: 트랜잭션을 사용하지 않도록 한다. 이미 진행 중인 트랜잭션도 보류시킨다.&lt;/li&gt;
  &lt;li&gt;NEVER: 트랜잭션을 사용하지 않도록 하며, 이미 진행 중인 것이 있다면 예외를 발생시킨다.&lt;/li&gt;
  &lt;li&gt;NESTED: 이미 시작된 트랜잭션이 있다면 중첩 트랜잭션을 시작한다. 중첩 트랜잭션은 트랜잭션 안에 트랜잭션을 만드는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;중첩된 트랜잭션은 먼저 시작된 부모 트랜잭션의 커밋과 롤백에는 영향을 받지만, 자신의 커밋과 롤백은 부모 트랜잭션에게 영향을 주지 않는다. 따라서 부모 트랜잭션에서 문제 발생하면 자식 트랜잭션도 롤백되지만, 자식 트랜잭션에서 문제가 발생하더라도 부모 트랜잭션이 이상이 없다면 성공적으로 커밋된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;중첩된 트랜잭션은 모든 트랜잭션 매니저에 적용 가능한 것은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-격리수준-isolation&quot;&gt;트랜잭션 격리수준: isolation&lt;/h3&gt;

&lt;p&gt;격리수준은 동시에 여러 트랜잭션이 진행될 때에 &lt;strong&gt;트랜잭션의 작업 결과가 여타 트랜잭션에게 어떻게 노출할 것인지를 결정한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DEFAULT: 데이터 엑세스 기술 또는 드라이버의 디폴트 설정을 따른다. 보통 기본 격리수준은 &lt;strong&gt;READ_COMMITTED&lt;/strong&gt;이다.&lt;/li&gt;
  &lt;li&gt;READ_UNCOMMITTED: 가장 낮은 격리수준으로, 하나의 트랜잭션이 커밋되기 전에 그 변화가 다른 트랜잭션에게 그대로 노출된다. 성능이 가장 빠르다.&lt;/li&gt;
  &lt;li&gt;READ_COMMITTED: 가장 많이 사용되는 격리수준으로, 다른 트랜잭션이 커밋하지 않은 변화는 다른 트랜잭션이 읽을 수 없다. 단, 하나의 트랜잭션이 읽은 로우는 다른 트랜잭션에서 수정할 수 있다. 따라서 처음 트랜잭션이 같은 로우를 다시 읽을 경우 다른 내용이 나올 수 있다.&lt;/li&gt;
  &lt;li&gt;REPEATABLE_READ: 하나의 트랜잭션이 읽은 로우를 다른 트랜잭션이 수정하는 것을 막아준다. 하지만 새로운 로우를 추가하는 것은 막지 않는다. 따라서 SELECT를 통해 조건에 맞는 로우를 가져올 경우, 트랜잭션이 끝나기 전에 추가된 로우를 볼 수 있다.&lt;/li&gt;
  &lt;li&gt;SERIALIZABLE: 가장 강력한 격리수준으로, 트랜잭션을 순차적으로 진행시켜준다. 여러 트랜잭션이 같은 테이블의 정보를 엑세스하지 못하므로 가장 안전하지만 성능이 가장 떨어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-제한시간-timeout&quot;&gt;트랜잭션 제한시간: timeout&lt;/h3&gt;

&lt;p&gt;트랜잭션에 시간 제한을 둔다. 값은 초 단위로, 디폴트는 트랜잭션 시스템의 제한시간을 따른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;읽기전용-트랜잭션-readonly&quot;&gt;읽기전용 트랜잭션: readOnly&lt;/h3&gt;

&lt;p&gt;트랜잭션을 읽기전용으로 설정한다. 성능을 최적화하기 위해 사용할 수도 있고, 특정 트랜잭션 작업 안에서 쓰기 작업이 일어나는 것을 의도적으로 방지하기 위해 사용한다. 일부 트랜잭션 매니저는 이 속성을 무시할 수도 있다. 이 트랜잭션이 시작된 후, 쓰기작업이 일어나면 예외가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-롤백-예외-rollbackfor-rollbackforclassname&quot;&gt;트랜잭션 롤백 예외: rollbackFor, rollbackForClassName&lt;/h3&gt;

&lt;p&gt;기본적으로 스프링은 체크 예외를 예외적인 상황에서 발생한 것보다는 리턴 값을 대신하는 비즈니스 의미를 담은 결과를 돌려주는 용도로 사용한다고 가정하므로, 런타임 예외만을 롤백 대상으로 삼는다.&lt;/p&gt;

&lt;p&gt;체크 예외 또한 롤백 대상으로 삼기 위해서 이 속성을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-커밋-예외-norollbackfor-norollbackforclassname&quot;&gt;트랜잭션 커밋 예외: noRollbackFor, noRollbackForClassName&lt;/h3&gt;

&lt;p&gt;rollbackFor과는 반대로 런타임 예외를 트랜잭션 커밋 대상으로 지정해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;데이터-엑세스-기술-트랜잭션의-통합&quot;&gt;데이터 엑세스 기술 트랜잭션의 통합&lt;/h2&gt;

&lt;p&gt;스프링은 자바의 다양한 데이터 엑세스 기술을 위한 트랜잭션 매니저를 제공해준다. 보통 여러 개의 DB를 사용하지 않는 경우에는 트랜잭션 매니저는 하나만 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DB가 하나인데 데이터 엑세스 기술을 여러 개 사용할 수도 있다. 이는 두 개 이상의 기술을 사용해서 만든 DAO를 하나의 트랜잭션 안에서 사용한다는 뜻이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 두 개 이상의 데이터 엑세스 기술로 만든 DAO를 하나의 트랜잭션으로 묶어서 사용하는 방법을 제공한다. 물론 DB 당 트랜잭션 매니저는 하나라는 것은 바뀌지 않는다. 하나의 트랜잭션 매니저가 여러 개의 데이터 엑세스 기술의 트랜잭션 기능을 지원하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-매니저별-조합-가능-기술&quot;&gt;트랜잭션 매니저별 조합 가능 기술&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-17-toby_spring_11_transaction/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DataSourceTransactionManager: 동일한 DataSource를 사용하게 함으로써, JDBC와 MyBatis에서 같은 트랜잭션을 사용할 수 있다. DataSourceTransactionManager는 DataSource로부터 connection 정보를 가져와 같은 DataSource를 사용하는 JDBC와 MyBatis DAO에게 트랜잭션 동기화 기능을 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-17-toby_spring_11_transaction/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JPATransactionManager: JPA는 JPA API를 통해 트랜잭션이 처리된다. 스프링에서는 JPA의 EntityManagerFactory가 스프링의 빈으로 등록된 DataSource를 사용할 수 있으므로, 같은 DataSource를 공유하게 해주면 JPATransactionManager에 의해 세 가지 기술을 이용하는 DAO 작업을 하나의 트랜잭션으로 관리해줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JTATransactionManager: 모든 종류의 데이터 엑세스 기술의 DAO가 같은 트랜잭션안에서 동작하게 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;orm과-비-orm-dao를-함께-사용할-경우-주의-사항&quot;&gt;ORM과 비 ORM DAO를 함께 사용할 경우 주의 사항&lt;/h3&gt;

&lt;p&gt;JPA나 하이버네이트와 같은 엔티티 기반의 ORM 기술과 JDBC, MyBatis와 같은 SQL 기반의 비 ORM 기술을 같이 사용할 경우 예상치 못한 오류를 만날 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberJPADao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@PersistenceContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberJdbcDao&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcDaoSupports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SimpeJdbcInsert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initTemplateConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleJdbcInsert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withTableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanPropertySqlParameterSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getJdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;queryForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select count(*) from member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jdbcDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jpaDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Return -&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 코드를 수행할 때, 2가 되어야 할 값이 1이라고 나온다. 이는 ORM과 비 ORM 특성이 다르기 때문이다.&lt;/p&gt;

&lt;p&gt;JPA나 하이버네이트는 &lt;strong&gt;새로 만든 오브젝트에 영속성을 부여해주면 DB에 바로 반영되는 것이 아니다.&lt;/strong&gt; 새로 등록된 오브젝트는 엔티티 매니저가 관리하는 영속성 컨텍스트나 세션에만 저장해둔다. 이를 1차 캐시라고도 부르기도 하는데 이는 DB에 작업하는 것을 최대한 지연시키기 위해서이다.&lt;/p&gt;

&lt;p&gt;DB에 동기화가 필요한 시점, 즉 트랜잭션이 종료되거나 등록된 엔티티가 반영되어야만 정상적인 결과가 나올 수 있는 쿼리가 실행되기 전까지는 실제 DB 작업은 지연시킨다.&lt;/p&gt;

&lt;p&gt;따라서 1번째 DB 작업인 &lt;strong&gt;jpaDao.add(new Member())&lt;/strong&gt; 구문은 DB에 반영하지 않고 1차 캐시에만 저장했을 것이다.&lt;/p&gt;

&lt;p&gt;JDBC는 이런 것을 모르며, 따라서 현재 DB에 반영된 것만을 가져올 뿐이다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는 JDBC를 사용하기 전에는 JPA나 하이버네이트의 1차 캐시 내용을 DB에 반영시켜야 한다. JDBC의 DAO가 호출될 때마다 AOP 등을 활용해 JPA나 하이버네이트의 캐시를 &lt;strong&gt;flush&lt;/strong&gt; 하도록 하면 쉽게 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jta를-이용한-글로벌-트랜잭션&quot;&gt;JTA를 이용한 글로벌 트랜잭션&lt;/h2&gt;

&lt;p&gt;한 개 이상의 DB나 JMS의 작업을 하나의 트랜잭션 안에서 동작하게 하려면 글로벌 트랜잭션을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;JTA를 위한 트랜잭션 매니저는 ObjectWeb의 JOTM이나 Atomikos의 TransactionalEssential이 대표적이다.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/11/17/toby_spring_11_transaction-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/11/17/toby_spring_11_transaction-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 10: IOC 컨테이너와 DI part.2</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;빈-설정-메타정보-작성&quot;&gt;빈 설정 메타정보 작성&lt;/h2&gt;

&lt;p&gt;IoC 컨테이너의 가장 기본적인 역할은 &lt;strong&gt;코드를 대신하여 애플리케이션을 구성하는 오브젝트를 생성하고 관리하는 것이다.&lt;/strong&gt; 컨테이너는 빈 설정 메타정보를 통해 빈의 클래스와 이름을 제공받아 활용한다.&lt;/p&gt;

&lt;p&gt;설정 메타정보는 외부 리소스에 맞는 리더를 통해 읽어 BeanDefinition 타입의 오브젝트로 변환되고 이를 컨테이너가 활용하는 것이다.&lt;/p&gt;

&lt;p&gt;BeanDefinition 은 순수한 오브젝트로 표현되는 빈 생성 정보로 메타정보가 작성되는 형식의 종류와 작성 방식에 독립적이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-04-toby_spring_10_ioc_container_and_di_02/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;빈-설정-메타정보&quot;&gt;빈 설정 메타정보&lt;/h3&gt;

&lt;p&gt;몇 가지 필수 값을 제외하면 컨테이너에 미리 지정된 디폴트 값이 적용된다. BeanDefinition은 여러 개의 빈을 만들기 위해 재사용될 수도 있다. 메타정보는 같으나 이름이 다른 여러 개의 빈 오브젝트를 만들 수도 있기 때문이다. 따라서 BeanDefinition에는 빈의 이름이나 아이디를 나타내는 정보는 포함되지 않는다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;빈 등록 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;빈 등록은 빈 메타정보를 작성해서 컨테이너에게 건네주면 된다.&lt;/p&gt;

&lt;p&gt;가장 직접적인 방식으로 BeanDefinition 구현 오브젝트를 직접 생성하는 것이지만, 보통 XML이나 프로퍼티 파일, 자바 configuration을 통한 외부 리소스로 빈 메타정보를 작성하고 리더나 변환기를 통해 애플리케이션 컨텍스트가 사용할 수 있는 정보로 변환해주는 방법을 사용한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;자동 인식을 이용한 빈 등록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XML이 아닌 특별한 애노테이션을 통해 자동으로 대상 클래스를 찾아 빈으로 등록하는 방법이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빈 스캐닝: 특정 애노테이션이 붙은 클래스를 찾아 빈으로 등록&lt;/li&gt;
  &lt;li&gt;빈 스캐너: 빈 스캐닝을 담당하는 오브젝트&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링의 빈 스캐너는 지정한 클래스 패스 이하 모든 패키지의 클래스를 대상으로 &lt;strong&gt;@Component&lt;/strong&gt; 애노테이션 또는 이 애노테이션을 메타 애노테이션으로 사용하는 클래스를 선택하여 빈으로 등록한다.&lt;/p&gt;

&lt;p&gt;@Component나 이 애노테이션을 메타 애노테이션으로 사용하는 @Controller / @Service / @Repository 등을 &lt;strong&gt;스테레오 타입 애노테이션&lt;/strong&gt; 이라고 부른다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@Controller: 프리젠테이션 계층의 MVC 컨트롤러에 사용. 웹 요청을 처리하는 컨트롤러 빈으로 등록된다.&lt;/li&gt;
  &lt;li&gt;@Service: 서비스 계층의 클래스에 사용&lt;/li&gt;
  &lt;li&gt;@Repository: 데이터 엑세스 계층의 DAO 또는 리포지토리 클래스에 사용. DataAccessException 자동 예외 변환과 같은 AOP 적용 대상을 선정하기 위해 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 @Component를 메타 애노테이션을 사용해서 자신만의 스테레오 타입의 애노테이션을 만들 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 빈 스캐너 디폴트 필터의 자동 인식이 대상이 되게 한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cutomStereotypeAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@Component를 통해 등록된 빈의 id는 첫 글자만 소문자로 바꾼 클래스 이름으로 등록된다. 물론 다른 이름을 지정할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OtherId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈 스캐닝 방식은 XML처럼 상세한 메타정보 항목을 지정할 수 없고, 클래스 당 한 개 이상의 빈을 등록할 수 없다는 제한이 있다.&lt;/p&gt;

&lt;p&gt;XML 파일에서는 다음과 같이 지정하여 자동으로 빈 스캐너를 등록할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ContextLoaderListener를 통한 루트 애플리케이션 등록할 때 빈 스캐닝을 사용하려면 &lt;strong&gt;AnnotationConfigApplicationContext&lt;/strong&gt; 클래스와 contextConfigLocation 파라미터에 패키지 이름을 지정하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextClass&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;springbook.learningtest.spring.ioc.bean&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서블릿 컨텍스트라면 &amp;lt;init-param&amp;gt; 으로 지정하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;@Resource&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;주입할 빈을 빈의 id로 지정할 때 사용한다. 자바 클래스의 setter 뿐만 아니라 필드에도 붙일 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;printer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setPrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@Resource와 같은 애노테이션으로 된 의존관계 정보를 통해 DI가 되게하려면 다음 세 가지 방법 중 하나를 사용해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XML의 &amp;lt;context:annotaion-config&amp;gt;
    &lt;ul&gt;
      &lt;li&gt;애노테이션 의존 관계 정보를 읽어 메타정보를 추가해주는 기능을 가진 빈 후처리기를 등록하는 전용 태그이다. 이미 등록된 빈의 메타정보에 프로퍼티 항목을 추가해주는 역할이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XML의 &amp;lt;context:component-scan&amp;gt;&lt;/li&gt;
  &lt;li&gt;AnnotationConfigApplicationContext / AnnotationContigWebApplicationContext&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// name을 생략가능하며, 생략하면 빈의 이름이 프로퍼티나 필드 이름과 같다고 간주한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Resource는 위와 같이 name을 지정하지 않았을 때, 주입할 적절한 빈을 찾지 못하면 타입을 이용해 다시 한번 빈을 찾는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;@Autowired / @Inject&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;두 애노테이션 모두 타입에 의한 자동와이어링 방식을 사용할 때 붙인다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Inject는 JavaEE6 표준 스펙인 JSK-330에서 정의된 것으로 @Autowired와 동일하다. 스프링이 아닌 다른 프레임워크에서 DI를 사용하려면 이 애노테이션을 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;@Autowired를 사용할 때 같은 타입의 빈이 하나 이상 존재할 경우, 그 빈들을 모두 DI 받게 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printerList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printerArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printerMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 빈의 이름을 키로 하는 맵으로 DI 받는다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;이 때문에, DI할 빈의 타입 자체가 Collection 일 경우, @Autowired를 통해 자동 설정이 불가능하다. 이 때는 @Resource를 사용한다.
    &lt;ul&gt;
      &lt;li&gt;@Autowired 를 Collection에 사용했을 경우, 같은 타입의 빈이 여러 개 존재해서 한번에 모두 DI 받는다고 생각하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컬렉션과 배열을 단지 &lt;strong&gt;같은 타입의 빈이 여러 개 있을 경우 충돌을 피하려는 목적으로 사용해서는 안된다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;@Autowired를 통해 빈을 찾지 못할 경우 에러가 발생한다. 못찾아도 상관없을 경우, required 엘리먼트를 false로 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;@Qualifier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;타입 외의 정보를 추가하여 자동와이어링을 세밀하게 제어할 때 사용한다.
동일한 타입을 가진 여러 개의 빈이 존재할 때, @Autowired를 사용하면 에러가 발생한다. &lt;strong&gt;이를 위해 빈 선정을 도와주기 위한 부가 정보를 부여할 때 사용하는 애노테이션이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;slave&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;@Qualifier를 메타 애노테이션으로 지정하여 자신만의 커스텀 한정자 애노테이션을 만들 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Qualifier를 사용시 해당 한정자에 대한 메타정보를 가지는 빈이 없다면, @Qualifier에서 지정한 이름을 가진 빈을 찾는다. 그러나 이 방식은 권장되지 않으며 @Resource로 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setter나 생성자에서 사용할 경우 다음과 같이 각 파라미터마다 애노테이션을 지정해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/11/04/toby_spring_10_ioc_container_and_di_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/11/04/toby_spring_10_ioc_container_and_di_02-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 10: IOC 컨테이너와 DI part.1</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;ioc-컨테이너-빈-팩토리와-애플리케이션-컨텍스트&quot;&gt;IoC 컨테이너: 빈 팩토리와 애플리케이션 컨텍스트&lt;/h2&gt;

&lt;p&gt;스프링에서는 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립된 &lt;strong&gt;컨테이너가 담당한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;컨테이너가 오브젝트에 대한 제어권을 가지고 있으므로, &lt;strong&gt;IoC&lt;/strong&gt;라고 부른다. 따라서 스프링 컨테이너를 &lt;strong&gt;IoC 컨테이너&lt;/strong&gt;라고도 한다.&lt;/p&gt;

&lt;p&gt;이 컨테이너를 두 가지 관점에서 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빈 팩토리: 오브젝트의 생성과 오브젝트 사이의 런타임 관계를 설정하는 DI 관점으로 볼 때&lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트: 빈 팩토리의 기능 이외에, 여러 컨테이너 기능을 추가한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링의 빈 팩토리와 애플리케이션 컨텍스트는 각 기능을 대표하는 &lt;strong&gt;BeanFactory&lt;/strong&gt;와 &lt;strong&gt;ApplicationContext&lt;/strong&gt; 라는 두 개의 인터페이스로 정의되어 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ApplicationContext: BeanFactory 인터페이스를 상속한 서브인터페이스&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HierarchicalBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MessageSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationEventPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourcePatternResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링 컨테이너 또는 IoC 컨테이너라고 부르는 것은 바로 이 ApplicationContext 인터페이스를 구현한 클래스의 오브젝트이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ioc-컨테이너를-이용해-애플리케이션-만들기&quot;&gt;IoC 컨테이너를 이용해 애플리케이션 만들기&lt;/h3&gt;

&lt;p&gt;IoC 컨테이너를 만드는 간단한 방법은 다음과 같이 ApplicationContext 구현 클래스의 인스턴스를 만드는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;StaticApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StaticApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 만들어지는 컨테이너가 본격적인 IoC 컨테이너로서 동작하려면 &lt;strong&gt;POJO 클래스와 설정 메타정보&lt;/strong&gt;이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;POJO 클래스&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션의 핵심 로직을 담는 POJO 클래스를 준비해야 한다.
&lt;strong&gt;특정 기술과 스펙에서 독립적이고 다른 POJO 클래스들끼리 느슨한 결합을 갖도록 만들어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 인터페이스를 두고 유연한 확장성을 가진 POJO 클래스를 만든다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;설정 메타정보&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;두 번째로 필요한 것은 POJO 클래스 중에 &lt;strong&gt;애플리케이션에서 사용할 것을 선정하고 이를 IoC 컨테이너가 제어할 수 있도록 메타정보를 만들어 제공하는 작업이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IoC 컨테이너의 가장 기초적인 역할은 &lt;strong&gt;오브젝트를 생성하고 이를 관리&lt;/strong&gt;하는 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링 컨테이너가 관리하는 오브젝트를 빈(Bean)이라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설정 메타정보는 바로 이 빈을 어떻게 만들고 어떻게 동작할 것인가에 관한 정보이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 설정 메타정보는 XML 파일이 아니다. XML 파일을 통해 설정 메타정보로 활용하는 것은 맞지만, XML로 된 설정 메타정보를 가진 것은 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스프링의 설정 메타정보는 &lt;strong&gt;BeanDefinition&lt;/strong&gt; 인터페이스로 표현되는 순수한 추상정보이다.&lt;/p&gt;

&lt;p&gt;애플리케이션 컨텍스트는 바로 이 BeanDefinition으로 만들어지는 메타정보를 담은 오브젝트를 사용해 IoC와 DI 작업을 수행한다.&lt;/p&gt;

&lt;p&gt;메타정보는 특정한 파일 포맷이나 형식에 제한되거나 종속되지 않는다. BeanDefinition으로 정의되는 스프링의 설정 메타정보의 내용을 표현한 것이 있다면 무엇이든 사용 가능하다. 원본의 포맷과 구조, 자료의 특성에 맞게 읽어와 BeanDefinition 오브젝트로 변환해주는 &lt;strong&gt;BeanDefinitionReader&lt;/strong&gt;가 있으면 된다.&lt;/p&gt;

&lt;p&gt;IoC 컨테이너가 사용하는 빈 메타정보는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빈 아이디, 이름, 별칭: 빈 오브젝트를 구분할 수 있는 식별자&lt;/li&gt;
  &lt;li&gt;클래스 또는 클래스 이름: 빈으로 만들 POJO 클래스 또는 서비스 클래스 정보&lt;/li&gt;
  &lt;li&gt;스코프: 싱글톤, 프로토타입과 같은 빈의 생성 방식 및 존재 범위&lt;/li&gt;
  &lt;li&gt;프로퍼티 값 또는 참조: DI에 사용할 프로퍼티 이름과 값 또는 참조하는 빈의 이름&lt;/li&gt;
  &lt;li&gt;생성자 파라미터 값 또는 참조: DI에 사용할 생성자 파라미터 이름과 값 또는 참조할 빈의 이름&lt;/li&gt;
  &lt;li&gt;지연된 로딩 여부, 우선 빈 여부, 자동와이어링 여부, 부모 빈 정보, 빈팩토리 이름 등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링 IoC 컨테이너는 설정 메타정보를 읽은 후, 이를 참고하여 빈 오브젝트를 생성하고 프로퍼티나 생성자를 통해 의존 오브젝트를 주입해주는 DI 작업을 수행한다. 이를 통해 DI로 연결되는 오브젝트들이 모여 하나의 애플리케이션을 구성하고 동작하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링 애플리케이션이란 &lt;strong&gt;POJO 클래스와 설정 메타정보를 이용하여 IoC 컨테이너가 만들어주는 오브젝트의 조합&lt;/strong&gt;이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/27f17f983af95cee26f262669780f031c1f75c35&quot;&gt;StaticApplicationContext Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IoC 컨테이너가 관리하는 빈은 &lt;strong&gt;오브젝트 단위지 클래스 단위가 아니다.&lt;/strong&gt; 경우에 따라서는 하나의 클래스를 통해 여러 개의 빈으로 등록할 때도 있다.&lt;/p&gt;

&lt;p&gt;다음은 BeanDefinition의 기본적인 구현 클래스인 &lt;strong&gt;RootBeanDefinition&lt;/strong&gt; 오브젝트를 통해 메타정보를 직접 만들어 등록하는 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 빈 메타정보를 담은 오브젝트 생성. &amp;lt;bean class=&quot;Hello&quot;/&amp;gt; 메타정보&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloDef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 빈의 name 프로퍼티에 들어갈 값 지정 &amp;lt;property name=&quot;name&quot; value=&quot;Spring&quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helloDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropertyValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPropertyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 빈 메타정보를 hello2 라는 이름의 빈으로 등록 &amp;lt;bean id=&quot;hello2&quot; ... /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helloDef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IoC 컨테이너는 빈 설정 메타정보를 담은 BeanDefinition을 이용해 오브젝트를 생성하고 DI 작업을 진행한 후 빈으로 사용할 수 있도록 등록해준다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/263a2b7557223713d244f25ae5079092b190f77b&quot;&gt;BeanDefinition Register Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;빈에 DI 되는 프로퍼티는 값 뿐만 아니라 다른 빈 오브젝트를 가리키는 레퍼런스도 주입할 수 있다. 이는 &lt;strong&gt;다른 빈 오브젝트를 주입함으로써 오브젝트 사이의 관계를 만들어낸다.&lt;/strong&gt; IoC 컨테이너는 이를 참고하여 런타임 시에 관계를 맺어준다.&lt;/p&gt;

&lt;p&gt;DI 진행시 &lt;strong&gt;BeanReference&lt;/strong&gt; 타입의 레퍼런스 오브젝트를 &lt;strong&gt;addPropertyValue&lt;/strong&gt; 메소드의 파라미터로 넘겨주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/a1077873ef932ad3c191af5ddfdb36c6fc3f25be&quot;&gt;DI Test using BeanDefinition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ioc-컨테이너의-종류와-사용-방법&quot;&gt;IoC 컨테이너의 종류와 사용 방법&lt;/h3&gt;

&lt;p&gt;스프링에는 다양한 용도로 사용할 수 있는 여러 ApplicationContext 구현 클래스가 존재한다. 보통 직접 ApplicationContext 오브젝트를 생성하는 경우는 거의 없다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;StaticApplicationContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;코드를 통해 빈 메타정보를 등록하기 위해 사용한다. 실전에서는 사용하면 안된다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;GenericApplicationContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가장 일반적인 ApplicationContext의 구현 클래스다. 실전에서 사용될 수 있는 모든 기능을 갖추고 있으며, 컨테이너의 주요 기능을 DI를 통해 확장할 수 있다.&lt;/p&gt;

&lt;p&gt;XML 파일과 같은 &lt;strong&gt;외부 리소스에 있는 빈 설정 메타정보를 리더를 통해 읽어 메타정보로 변환하여 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정 포맷의 빈 설정 메타정보를 읽어 이를 애플리케이션 컨텍스트가 사용할 수 있는 BeanDefinition 정보로 변환하는 기능을 가진 오브젝트는 &lt;strong&gt;BeanDefinitionReader&lt;/strong&gt; 인터페이스를 구현해서 만들고, 빈 설정정보 리더로 불린다.&lt;/p&gt;

&lt;p&gt;XML을 읽을 수 있는 리더는 &lt;strong&gt;XmlBeanDefinitionReader&lt;/strong&gt; 이다.
이 리더는 스프링의 리소스 로더를 통해 XML 내용을 읽어온다. 따라서 다양한 리소스 타입의 XML 문서를 읽을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/dd0128b8de239c96c65e167378ad900c023b1a86&quot;&gt;GenericApplicationContext / XmlBeanDefinitionReader Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;스프링 IoC 컨테이너가 사용할 수 있는 &lt;strong&gt;BeanDefinition&lt;/strong&gt; 오브젝트로 변환만 할 수 있다면 설정 메타정보는 어떤 포맷으로 만들어져도 상관없다. 예를 들어 프로퍼티 파일을 통해 빈 설정 메타정보륾 가져오는 &lt;strong&gt;PropertiesBeanDefinitionReader&lt;/strong&gt; 도 제공한다.&lt;/p&gt;

&lt;p&gt;빈 설정 리더를 만들기만 하면 어떤 형태로도 빈 설정 메타정보를 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;GenericApplicationContext는 여러 개의 빈 설정 리더를 사용해서 여러 리소스로부터 설정 메타정보를 읽어들이게도 할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링 테스트 컨텍스트 프레임워크를 활용하는 JUnit 테스트는 테스트내에서 사용할 수 있도록 애플리케이션 컨텍스트를 자동으로 만들어준다. 이 때도 사용되는 애플리케이션 컨텍스트는 GenericApplicationContext 이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 애플리케이션 컨텍스트 생성과 동시에 XML 파일을 읽어오고 초기화까지 수행한다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJunit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/text-applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;GeneticXmlApplicationContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GenericApplicationContext 및 XmlBeanDefinitionReader가 결합된 클래스이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GenericApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeneticXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/text-applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;WebApplicationContext&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링 애플리케이션에서 가장 많이 사용되는 애플리케이션 컨텍스트이다. 웹 환경에서 사용할 때 필요한 기능을 추가된 것이다. XML 설정파일을 사용하도록 만들어지는 클래스는 &lt;strong&gt;XmlWebApplicationContext&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;스프링 IoC 컨테이너는 빈 설정 메타정보를 통해 오브젝트를 만들고 DI 작업을 수행한다. 그러나 그것만으로는 애플리케이션이 동작하지 않는다. &lt;strong&gt;누군가가 특정 빈의 메소드를 호출해서 애플리케이션을 기동해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 메인 메소드의 역할을 하는 빈의 메소드를 한 번은 호출해야 애플리케이션이 동작한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IoC 컨테이너의 역할은 &lt;strong&gt;빈 오브젝트 생성 및 DI 한 후, 최초로 애플리케이션을 기동할 빈 하나를 제공해주는 것까지이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 웹 애플리케이션의 동작방식은 일반적인 애플리케이션과는 다르다. 웹 환경에서는 &lt;strong&gt;서블릿 컨테이너가 HTTP 요청을 받아 해당 요청에 매핑된 서블릿을 실행해주는 방식으로 동작한다.&lt;/strong&gt; 서블릿이 일종의 main 메소드와 같은 역할을 하는 것이다.&lt;/p&gt;

&lt;p&gt;스프링에서는 main 메소드 역할을 하는 서블릿을 만들어두고, 애플리케이션 컨텍스트를 초기화한 다음, 요청이 서블릿으로 올 때마다 필요한 빈을 가져와 정해진 메소드를 실행해주는 방식으로 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;독립 애플리케이션과 다른 점은 main 메소드에서 했던 작업을 특정 서블릿이 대신하는 것이다.&lt;/p&gt;

&lt;p&gt;스프링에서 애플리케이션 컨텍스트를 생성하고 설정 메타정보를 초기화한 후, 클라이언트로부터 들어오는 요청마다 적절한 빈을 찾아 이를 실행해주는 기능을 가진 &lt;strong&gt;DispatchServlet&lt;/strong&gt; 이름의 서블릿을 제공한다. 이 서블릿을 &lt;strong&gt;web.xml&lt;/strong&gt;에 등록하는 것만으로 웹 환경에서 스프링 컨테이너가 만들어지고 애플리케이션을 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;WebApplicationContext의 특징은 자신이 만들어지고 동작하는 환경인 웹 모듈에 대한 정보를 접근할 수 있다는 점이다. 웹 환경으로부터 정보를 가져오거나 자신을 웹 환경에 노출시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ioc-컨테이너-계층-구조&quot;&gt;IoC 컨테이너 계층 구조&lt;/h3&gt;

&lt;p&gt;빈을 담아둘 IoC 컨테이너는 보통 애플리케이션 당 하나이다.
어떤 경우에는 하나 이상의 IoC 컨테이너를 만들어두고 사용해야 할 경우가 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 트리 모양의 계층 구조를 가지는, 부모 - 자식 관계가 있는 컨텍스트 계층을 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모든 애플리케이션 컨텍스트는 위의 그림과 같이 부모 애플리케이션 컨텍스트를 가질 수 있다.&lt;/p&gt;

&lt;p&gt;계층 구조의 모든 컨텍스트는 각자 독립적인 설정정보를 이용해 빈 오브젝트를 만들고 관리한다. &lt;strong&gt;DI를 위해 빈을 찾을 때는 부모 애플리케이션의 컨텍스트까지 검색한다.&lt;/strong&gt; 계층 구조를 따라 루트 컨텍스트까지 검색한다. 그러나 자식 컨텍스트까지는 검색하지 않는다. 따라서 계층 구조에서의 형제 컨텍스트의 빈도 찾지 않는다.&lt;/p&gt;

&lt;p&gt;빈의 검색 순서는 항상 자기 자신이 먼저이고, 그 다음 부모이다. 따라서 부모 컨텍스트와 같은 이름의 빈을 자기 자신이 갖고 있다면 자기 것이 우선이다.&lt;/p&gt;

&lt;p&gt;이를 통해 기본 설정을 그대로 사용하면서 하위 컨텍스트만의 설정이 필요한 경우에 계층 구조의 IoC 컨테이너들을 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AOP처럼 컨텍스트 안의 많은 빈에 일괄적으로 적용하는 경우는 대부분 해당 컨텍스트로 제한된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/c1fd5d429362f3220a1cde6bbe91f9c6d6f870b5&quot;&gt;Parent - Child ApplicationContext Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;웹-애플리케이션의-ioc-컨테이너-구성&quot;&gt;웹 애플리케이션의 IoC 컨테이너 구성&lt;/h3&gt;

&lt;p&gt;서버에서 동작하는 애플리케이션에서 스프링 IoC 컨테이너를 사용하는 방법은 크게 세 가지로 구분된다. 두 가지 방법은 &lt;strong&gt;웹 모듈 안에 컨테이너를 두는 것&lt;/strong&gt;이고, 나머지 하나는 &lt;strong&gt;엔터프라이즈 애플리케이션 레벨에 두는 방법&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;자바 서버에는 하나 이상의 웹 모듈을 배치해서 사용할 수 있다. 스프링을 사용한다면 보통 독립적으로 배치가능 한 웹 모듈(war) 형태로 애플리케이션을 배포한다.&lt;/p&gt;

&lt;p&gt;하나의 웹 애플리케이션은 여러 개의 서블릿을 가질 수 있다. 초창기에는 URL 당 하나의 서블릿을 만들어 처리하도록 했지만, 최근에는 많은 웹 요청을 &lt;strong&gt;한 번에 받을 수 있는 대표 서블릿을 등록해두고, 공통 선행작업을 수행 후 각 요청의 기능을 담당하는 핸들러라고 불리는 클래스를 호출하는 방식이다.&lt;/strong&gt; 이를 &lt;strong&gt;프론트 컨트롤러 패턴&lt;/strong&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;스프링도 프론트 컨트롤러 패턴을 사용하며, 웹 애플리케이션 안에서 동작하는 IoC 컨테이너는 &lt;strong&gt;요청을 처리하는 서블릿 안에서 만들어지는 것&lt;/strong&gt;과 &lt;strong&gt;웹 애플리케이션 레벨에서 만들어지는 것&lt;/strong&gt; 이다. 따라서 스프링 웹 애플리케이션에는 두 개의 WebApplicationContext 오브젝트가 만들어진다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;웹 애플리케이션 컨텍스트 계층 구조&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 애플리케이션 레벨에 등록되는 컨테이너는 &lt;strong&gt;루트 웹 애플리케이션 컨텍스트&lt;/strong&gt;라고 불린다. 이 컨텍스트는 &lt;strong&gt;서블릿 레벨에서 등록되는 컨테이너들의 부모 컨테이너가 되며, 계층구조 내에서 루트 컨텍스트가 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 애플리케이션에는 하나 이상의 프론트 컨트롤러 역할을 하는 서블릿이 등록될 수 있다. 이에 따라 각 독립적인 애플리케이션 컨텍스트가 생성되며, 공유될 만한 빈들은 루트 컨텍스트에 등록하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 서블릿 A와 B는 자신만의 컨텍스트를 가지며, 공유해서 사용하는 빈을 담을 수 있는 루트 컨텍스트가 존재한다.&lt;/p&gt;

&lt;p&gt;보통 모든 요청을 처리하는 프론트 컨트롤러 역할을 하는 서블릿을 두 개 이상 만들지는 않고 하나를 사용한다. 따라서 보통 스프링 웹 애플리케이션은 다음 구조가 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프론트 컨트롤러 역할을 하는 서블릿을 하나만 사용할 때도 위와 같이 계층 구조를 사용하는 이유는 &lt;strong&gt;웹 기술에 의존적인 것과 그렇지 않은 부분을 분리하기 위해서이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링을 이용한다고 스프링이 제공하는 웹 기술만을 사용한다는 것은 아니다. 데이터 엑세스 계층이나 서비스 계층은 스프링 빈으로 만들지만, &lt;strong&gt;프레젠테이션 계층은 스프링이 아닌 다른 기술을 사용할 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;루트 컨텍스트에 해당하는 컨테이너에는 웹 기술에 의존적이지 않은 스프링 빈을 등록해두고, &lt;strong&gt;웹 관련 빈들은 서블릿 안의 일반 애플리케이션 컨텍스트에 등록해둔다.&lt;/strong&gt; 그리고 이렇게 성격이 다른 빈들을 분리된 컨테이너에 등록해두면 &lt;strong&gt;다른 웹 기술을 사용할 때는 루트 컨텍스트에 있는 빈을 사용하면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다른 웹 기술을 사용할 경우에 대비하여, 스프링은 다른 웹 기술로 구현된 곳에서 루트 컨텍스트로 접근하여 빈을 사용할 수 있는 방법을 제공한다.&lt;/p&gt;

&lt;p&gt;스프링은 ServletContext를 통해 루트 애플리케이션 컨텍스트에 접근할 수 있게 해준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationContextUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SevletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ServletContext는 웹 애플리케이션마다 하나씩 만들어지는 것으로, 서블릿의 런타임 환경정보를 가지고 있다. 스프링과 연동되어서 사용하는 서드파티 웹 프레임워크는 이 방법을 통해 스프링 빈을 가져와 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2018-11-03-toby_spring_10_ioc_container_and_di/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 프레젠테이션 계층을 분리하여 계층구조로 애플리케이션 컨텍스트를 구성하면 웹 기술을 확장하거나 변경할 수 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;웹 애플리케이션의 컨텍스트 구성 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 애플리케이션의 애플리케이션 컨텍스트를 구성하는 방법은 다음 세 가지를 고려할 수 있다. 첫 번째 방법은 컨텍스트 계층 구조를 만드는 것이고 나머지는 컨텍스트를 하나만 사용하는 경우이다.&lt;/p&gt;

&lt;p&gt;그리고 두 번째 방법은 스프링의 웹 기술을 사용하지 않을 경우에 적용 가능한 방법이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서블릿 컨텍스트와 루트 애플리케이션 컨텍스트 계층 구조
    &lt;ul&gt;
      &lt;li&gt;스프링 웹 기술을 사용하는 경우 웹 관련 빈들은 서블릿의 컨텍스트에 두고, 나머지는 루트 애플리케이션 컨텍스트에 위치시킨다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;루트 애플리케이션 컨텍스트 단일 구조
    &lt;ul&gt;
      &lt;li&gt;스프링 웹 기술을 사용하지 않는다면 서블릿 애플리케이션 컨텍스트를 사용하지 않게된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서블릿 컨텍스트 단일 구조
    &lt;ul&gt;
      &lt;li&gt;스프링 웹 기술을 사용하면서 다른 웹 프레임워크에서 스프링 빈을 사용하지 않는다면 루트 애플리케이션 컨텍스트를 생략한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;루트 애플리케이션 컨텍스트 등록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 애플리케이션 레벨에서 만들어지는 루트 웹 애플리케이션 컨텍스트를 등록하는 가장 간단한 방법은 이벤트 리스너를 사용하는 것이다. 웹 애플리케이션의 시작과 종료시 발생하는 이벤트를 처리하는 리스너인 &lt;strong&gt;ServletContextListener&lt;/strong&gt;를 사용한다. 이 이벤트 리스너를 통해 시작시 애플리케이션 컨텍스트 초기화시킬 수 있다.&lt;/p&gt;

&lt;p&gt;스프링은 이러한 기능을 가진 &lt;strong&gt;ContextLoaderListener&lt;/strong&gt;를 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;
    org.springframework.web.context.ContextLoaderListener
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ContextLoaderListener는 웹 애플리케이션 시작시 자동으로 루트 애플리케이션 컨텍스트를 초기화해준다.&lt;/p&gt;

&lt;p&gt;이 ContextLoaderListener가 초기화하는 애플리케이션 컨텍스트 클래스 및 참조하는 설정파일의 위치는 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class: XmlWebApplicationContext&lt;/li&gt;
  &lt;li&gt;설정파일 위치: /WEB-INF/applicationContext.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 설정을 다음과 같이 변경할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
    /WEB-INF/**/*Context.xml &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ANT 스타일로 여러 개의 파일 지정 가능 --&amp;gt;&lt;/span&gt;
    /WEB-INF/text.xml &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 여러 개의 파일을 통해 로드하려면 여러 줄에 걸쳐스 등록한다. --&amp;gt;&lt;/span&gt;
    classpath:applicationContext.xml &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 클래스패스로 지정할 수 있다.--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextClass&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
    org.springframework.web.context.support.AnnotationConfigWebApplicationContext &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- XmlWebApplicationContext 아닌 다른 애플리케이션 컨텍스트 클래스로 변경할 수 있다. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;AnnotationConfigWebApplicationContext 를 사용할 경우 contextConfigLocation을 반드시 설정해주어야 한다. XML 파일의 위치가 아니라 설정 메타정보를 담는 클래스 또는 빈 스캐닝 패키지를 지정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;서블릿 애플리케이션 컨텍스트 등록&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링의 웹 기능을 지원하는 프론트 컨트롤러 서블릿은 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이다. 이름에서 알 수 있듯이 web.xml에 등록해서 사용하는 평범한 서블릿이다.&lt;/p&gt;

&lt;p&gt;DispatcherServlet은 서블릿이 초기화될 때, 자신만의 컨텍스트를 생성하고 초기화하며, 웹 애플리케이션 레벨에서 등록해둔 루트 애플리케이션 컨텍스트를 부모의 컨텍스트로 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;spring&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;servlet-name: DispatcherServlet에 의해 만들어지는 컨텍스트는 자신만의 네임스페이스를 가지게되며, 이 네임스페이스는 컨텍스트를 구분하는 키가 된다. 네임스페이스는 servlet-name으로 지정한 이름-servlet이 된다. 네임스페이스는 디폴트 XML 설정파일의 위치를 지정할 때 사용되며 위의 예에서는 &lt;strong&gt;/WEB-INF/spring-servlet.xml&lt;/strong&gt; 이 된다.&lt;/li&gt;
  &lt;li&gt;load-on-startup: 서블릿 컨테이너가 등록된 서블릿을 언제 만들고 초기화할 지, 그리고 그 순서는 어떻게 되는지를 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;마찬가지로 서블릿 컨텍스트도 디폴트 설정이 아닌 다른 설정을 사용하고 싶다면, contextConfigLocation과 contextClass를 통해 지정할 수 있다. 서블릿 설정이므로 &amp;lt;context-param&amp;gt; 대신 &amp;lt;init-param&amp;gt; 을 사용한다.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/11/03/toby_spring_10_ioc_container_and_di-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/11/03/toby_spring_10_ioc_container_and_di-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Garbage Collection Algorithms</title>
        <description>&lt;h1 id=&quot;garbage-collection-algorithms&quot;&gt;Garbage Collection Algorithms&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;gc-algorithms-basics&quot;&gt;GC Algorithms: Basics&lt;/h2&gt;

&lt;p&gt;자바의 GC 알고리즘들을 설명하기에 앞서서, 이 알고리즘을 설명하는데에 있어서 필요한 기본 개념을 다시 살펴볼 필요가 있다. GC 알고리즘마다 다르긴 하지만 보통 GC 알고리즘들은 다음 두 가지 일에 포커싱을 맞춘다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현재 살아있는 객체를 판별하는 것&lt;/li&gt;
  &lt;li&gt;더 이상 사용되지 않는다고 간주되는, 그 외의 객체는 정리하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GC에 구현된 살아있는 객체를 조사하는 첫 번째 일은 &lt;strong&gt;Marking&lt;/strong&gt;이라 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;marking-reachable-objects&quot;&gt;Marking Reachable Objects&lt;/h3&gt;

&lt;p&gt;JVM에서 사용할 수 있는 모든 GC 알고리즘은 &lt;strong&gt;어느 객체가 살아있는지 조사하는 것부터 시작한다.&lt;/strong&gt; 이 컨셉은 다음 그림에서 보여주는 JVM의 메모리 레이아웃을 통해 설명할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 번째로, GC는 먼저 &lt;strong&gt;Garbage Collection Roots (GC Roots)&lt;/strong&gt;라 불리는 특별한 객체를 정의한다. 다음은 GC Roots라 불릴 수 있는 객체의 종류이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;지역 변수나 현재 수행되고 있는 메소드의 파라미터 객체들&lt;/li&gt;
  &lt;li&gt;활성화된 스레드&lt;/li&gt;
  &lt;li&gt;Static 객체&lt;/li&gt;
  &lt;li&gt;JNI 참조 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음으로, GC는 &lt;strong&gt;GC Roots로부터 시작하여, 객체가 참조하는 것을 따라가며 (위 그림을 대변하자면, 객체 그래프를 순회하며) 살아있는 모든 객체를 탐색한다.&lt;/strong&gt; 탐색된 모든 객체는 &lt;strong&gt;Marked&lt;/strong&gt; 된다.&lt;/p&gt;

&lt;p&gt;위의 그림에서 &lt;strong&gt;푸른색 vertex로 표현된 것은 살아있는 객체라 판별된 객체이다. 이 단계가 끝나면 살아있는 모든 객체는 모두 Marking 되었을 것이며,&lt;/strong&gt; 그 외의 모든 객체들은 (위의 그림에서 회색 그래프로 표현된 객체들) GC Roots로부터 닿지 않는, 애플리케이션에서 더 이상 사용되지 않는 객체들로 간주된다. 이 객체들은 GC의 대상이며, 다음 단계에서 GC 알고리즘은 이 객체들이 점유한 메모리를 회수해야 한다.&lt;/p&gt;

&lt;p&gt;Marking 단계에는 알아야 할 중요한 것은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이 단계에서 &lt;strong&gt;애플리케이션 스레드는 잠시 멈출 필요가 있다.&lt;/strong&gt; 애플리케이션 스레드를 멈추지 않고 이 단계를 진행하면, 애플리케이션 스레드가 하는 일에 따라 영원히 끝나지 않을 수 있다. (그래프가 계속 변하게 될 것이므로). 따라서 애플리케이션 스레드를 잠시 멈추고 살아있는 객체들을 정확히 판별한다. 그래서 보통 GC 알고리즘에서 이 단계는 &lt;strong&gt;Stop-The-World 이벤트이다.&lt;/strong&gt; (여러 단계로 나누어서 애플리케이션 스레드와 동시에 일을 할 수 있더라도 Stop-The-World 이벤트를 트리거하는 단계는 반드시 있다.)&lt;/li&gt;
  &lt;li&gt;이 단계에서 걸리는 시간은 heap 영역의 크기나 전체 객체의 수가 아니라, &lt;strong&gt;살아있는 객체의 수에 비례한다.&lt;/strong&gt; 따라서 heap 영역 사이즈를 늘린다고 이 단계에서 걸리는 시간에 직접적인 영향을 주지는 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 단계가 끝나면 GC는 다음 단계인, 사용되지 않는 객체를 정리하는 단계로 넘어갈 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;removing-unused-objects&quot;&gt;Removing Unused Objects&lt;/h3&gt;

&lt;p&gt;더 이상 사용되지 않는 객체의 메모리를 회수하는 일은 GC 알고리즘마다 구현이 다르긴 하지만, 보통 &lt;strong&gt;Mark and Sweep, Mark-Sweep-Compact, Mark and Copy 중의 하나에 들어간다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;sweep&quot;&gt;Sweep&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mark and Sweep&lt;/strong&gt;에서 이 Sweep 단계는 Marking 단계가 끝난 후, GC Roots 및 살아있는 객체로 표현되는 그래프에 포함되지 않는 객체들의 &lt;strong&gt;메모리 영역이 회수한다.&lt;/strong&gt; 회수된 메모리 영역은 내부적으로 이 영역을 관리하는 &lt;strong&gt;free-list&lt;/strong&gt; 라는 자료구조를 통해 관리한다. 아마도 이 자료구조는 다시 사용할 수 있는 영역과 그 것의 크기를 기록해두었을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;메모리 단편화 여부에 따라 전체 메모리 공간은 충분하나, 실제 객체 생성을 할 수 있는 &lt;strong&gt;충분한 연속적인 공간이 없다면&lt;/strong&gt; OOM이 발생할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;compact&quot;&gt;Compact&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mark-Sweep-Compact&lt;/strong&gt;의 Compact 단계에서 실제로 살아있는, &lt;strong&gt;Marking 된 객체들을 메모리 영역의 처음부터 몰아넣음으로써 Marn and Sweep의 단점을 제거한다.&lt;/strong&gt; 이는 실제 객체를 복사하고 이 객체들의 참조 정보를 업데이트함으로써 이루어지는데, GC로 인해 애플리케이션 스레드가 멈추는 시간을 증가시킨다. 하지만 이 것을 통해 얻을 수 있는 이익은 여러 가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 단편화를 줄임으로써 발생하는 문제를 해결할 수 있다. (메모리 생성 실패 문제와 같은)&lt;/li&gt;
  &lt;li&gt;연속적인 공간에서 객체 생성을 하는 것은 아주 적은 연산을 필요로 한다.
    &lt;ul&gt;
      &lt;li&gt;즉, 새로 객체를 생성하기 위해 적절한 메모리를 찾는 연산을 동반하는 파편화된 메모리 공간에서 할당하는 것보다 빠르다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;copy&quot;&gt;Copy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mark and Copy&lt;/strong&gt;의 Copy 단계는 메모리 영역을 여러 영역으로 나누고, &lt;strong&gt;살아있는 객체를 다른 영역으로 복사한다는 것을 의미한다.&lt;/strong&gt; 
(ex. Eden -&amp;gt; Survivor / From survivor -&amp;gt; To survivor / Survivor -&amp;gt; Old)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다른 영역으로 살아있는 객체를 옮기는 것이므로, Marking과 Copy 단계를 동시에 할 수 있다는 이점이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;java-에서의-gc-알고리즘들&quot;&gt;Java 에서의 GC 알고리즘들&lt;/h2&gt;

&lt;p&gt;JVM 에서는 Generational Hypothesis 개념에 따라 &lt;strong&gt;Young 영역 및 Old 영역으로 메모리 공간을 나누고, 각 영역에 대한 GC 알고리즘도 다르게 적용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JVM에서 제공하는 GC 알고리즘은 옵션을 통해 선택할 수 있으며, 선택하지 않으면 디폴트로 지정된 GC 알고리즘을 사용하게 된다.&lt;/p&gt;

&lt;p&gt;다음은 옵션에 따라 적용되는 GC 알고리즘을 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Young GC&lt;/th&gt;
      &lt;th&gt;Old GC&lt;/th&gt;
      &lt;th&gt;JVM Options&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Incremental&lt;/td&gt;
      &lt;td&gt;Incremental&lt;/td&gt;
      &lt;td&gt;-Xincgc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Serial&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Serial&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-XX:+UseSerialGC&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel Scavenge&lt;/td&gt;
      &lt;td&gt;Serial&lt;/td&gt;
      &lt;td&gt;-XX:+UseParallelGC -XX:-UseParallelOldGC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel New&lt;/td&gt;
      &lt;td&gt;Serial&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Serial&lt;/td&gt;
      &lt;td&gt;Parallel Old&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Parallel Scavenge&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Parallel Old&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-XX:+UseParallelGC -XX:+UseParallelOldGC&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel New&lt;/td&gt;
      &lt;td&gt;Parallel Old&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Serial&lt;/td&gt;
      &lt;td&gt;CMS&lt;/td&gt;
      &lt;td&gt;-XX:-UseParNewGC -XX:+UseConcMarkSweepGC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Parallel Scavenge&lt;/td&gt;
      &lt;td&gt;CMS&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Parallel New&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;CMS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-XX:+UseParNewGC -XX:+UseConcMarkSweepGC&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;G1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;G1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-XX:+UseG1GC&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
복잡하게 보이지만, 다음 4가지 케이스만 알아두면 된다. JVM Option이 없는 것들은 deprecated 되었거나, 실제 사용에 있어서는 적절하지 않은 알고리즘들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Serial GC (Young 영역 / Old 영역 모두)&lt;/li&gt;
  &lt;li&gt;Parallel GC (Young 영역 / Old 영역 모두)&lt;/li&gt;
  &lt;li&gt;Parallel New (Young 영역) + Concurrent Mark and Sweep (CMS, Old 영역)&lt;/li&gt;
  &lt;li&gt;G1 (Young / Old 를 나타내는 바둑판(?) 영역)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;serial-gc&quot;&gt;Serial GC&lt;/h2&gt;

&lt;p&gt;이 알고리즘에서는 &lt;strong&gt;Young 영역에 대해서는 Mark-Copy, Old 영역에 대해서는 Mark-Sweep-Compact 를 사용한다.&lt;/strong&gt; Serial GC 라는 이름을 통해 짐작할 수 있겠지만, &lt;strong&gt;하나의 스레드에 의해 수행되며 Young 영역 및 Old 영역에 대한 GC는 모두 Stop-The-World 를 일으킨다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JVM에서 이 알고리즘을 사용하기 위해서는 다음과 같이 JVM 파라미터를 설정하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:+UseSerialGC com.mypackages.MyExecutableClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;하나의 스레드를 통해 수행되므로, 멀티 코어의 이점을 제대로 못살린다.&lt;/strong&gt; CPU 코어가 몇 개이든 상관없이 이 GC를 사용할 때는 CPU 코어 하나만 사용하게 된다.
따라서 CPU가 하나인, 작은 크기의 heap 영역만 있으면 되는 환경일 때만 사용하는 것이 권장된다. 멀티코어 / 큰 크기의 메모리를 갖는, 시스템 리소스를 많이 사용할 수 있는 서버 환경에서 이 GC를 사용하는 것은 권장되지 않는다.&lt;/p&gt;

&lt;p&gt;다음은 Serial GC를 사용하였을 때의 GC log 이다.
참고로, GC log를 확인하기 위해 다음과 같이 JVM 파라미터를 설정한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:45:37.987-0200: 151.126: [GC (Allocation Failure) 151.126: [DefNew: 629119K-&amp;gt;69888K(629120K), 0.0584157 secs] 1619346K-&amp;gt;1273247K(2027264K), 0.0585007 secs] [Times: user=0.06 sys=0.00, real=0.06 secs]
2018-01-26T14:45:59.690-0200: 172.829: [GC (Allocation Failure) 172.829: [DefNew: 629120K-&amp;gt;629120K(629120K), 0.0000372 secs]172.829: [Tenured: 1203359K-&amp;gt;755802K(1398144K), 0.1855567 secs] 1832479K-&amp;gt;755802K(2027264K), [Metaspace: 6741K-&amp;gt;6741K(1056768K)], 0.1856954 secs] [Times: user=0.18 sys=0.00, real=0.18 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단 두 줄밖에 되지 않는 로그이지만 많은 정보를 가지고 있다.
위 로그를 통해 두 번의 GC가 일어났다는 것을 알 수 있는데, 하나는 Young 영역에 대한 GC (Minor GC)이고 다른 하나는 heap 영역 전체에 대한 GC (Full GC)이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;minor-gc&quot;&gt;Minor GC&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:45:37.987-0200: 151.126: [GC (Allocation Failure) 151.126: [DefNew: 629119K-&amp;gt;69888K(629120K), 0.0584157 secs] 1619346K-&amp;gt;1273247K(2027264K), 0.0585007 secs] [Times: user=0.06 sys=0.00, real=0.06 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 이 로그에서 알 수 있는 내용들이다.&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:45:37.987-0200&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;:&lt;span class=&quot;node&quot;&gt;151.126&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;:[&lt;span class=&quot;node&quot;&gt;GC&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;(&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;) 151.126: [&lt;span class=&quot;node&quot;&gt;DefNew&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;:&lt;span class=&quot;node&quot;&gt;629119K-&amp;gt;69888K&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(629120K)&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;, 0.0584157 secs]&lt;span class=&quot;node&quot;&gt;1619346K-&amp;gt;1273247K&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(2027264K)&lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;,&lt;span class=&quot;node&quot;&gt;0.0585007 secs&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;]&lt;span class=&quot;node&quot;&gt;[Times: user=0.06 sys=0.00, real=0.06 secs]&lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:45:37.987-0200&lt;/span&gt; –GC가 일어난 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;151.126&lt;/span&gt; – GC가 일어났을 때, JVM이 수행된 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;GC&lt;/span&gt; – Minor GC / Full GC를 구분하는 플래그, 여기서는 Minor GC를 의미한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;/span&gt; – GC가 일어난 원인, 여기서는 Young 영역에서 새로운 객체를 생성하기 위한 공간이 부족해서 발생한 것이다. &lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;DefNew&lt;/span&gt; – Garbage Collector의 이름. 이 Collector는 Young 영역에 대한 GC를 수행하는데, 싱글 스레드 기반 / Mark-Copy / Stop-The-World 이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;629119K-&amp;gt;69888K&lt;/span&gt; – GC 전후의 Young 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(629120K)&lt;/span&gt; – Young 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;1619346K-&amp;gt;1273247K&lt;/span&gt; – GC 전후의 Heap 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(2027264K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.0585007 secs&lt;/span&gt; – GC가 수행된 시간 (초)&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.06 sys=0.00, real=0.06 secs]&lt;/span&gt; – GC가 수행된 시간인데, 각 시간은 다음과 같다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real – 애플리케이션이 GC로 인해 멈춘 시간이다. Serial GC는 싱글 스레드 기반의 Stop-The-World를 일으키는 GC이므로, 이 시간은 user 와 sys 시간을 합친 것과 같다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;위의 로그를 통해 해당 GC 이벤트 전후로 Memory 사용량이 어떻게 변화하였는지 알 수 있다.
GC가 일어나기 전에는 Heap 영역의 사용량이 1,619,346K 이었다. 그리고 Young 영역의 사용량은 629,119K 인 것으로 보아, Old 영역의 사용량은 990,227K 이다.&lt;/p&gt;

&lt;p&gt;GC가 일어난 후, Young 영역은 559,231K 의 빈 공간을 확보하였는데,  Heap 영역의 사용량은 346,099K 밖에 줄어들지 않았다.
이를 통해 213,132K 만큼의 오브젝트들이 Young 영역에서 Old 영역으로 이동하였다는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;full-gc&quot;&gt;Full GC&lt;/h3&gt;

&lt;p&gt;다음 2번째 줄의 로그는 Full GC에 대한 로그이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:45:59.690-0200: 172.829: [GC (Allocation Failure) 172.829: [DefNew: 629120K-&amp;gt;629120K(629120K), 0.0000372 secs]172.829: [Tenured: 1203359K-&amp;gt;755802K(1398144K), 0.1855567 secs] 1832479K-&amp;gt;755802K(2027264K), [Metaspace: 6741K-&amp;gt;6741K(1056768K)], 0.1856954 secs] [Times: user=0.18 sys=0.00, real=0.18 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:45:59.690-0200&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;172.829&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;:[GC (Allocation Failure) 172.829:&lt;span class=&quot;node&quot;&gt; [DefNew: 629120K-&amp;gt;629120K(629120K), 0.0000372 secs&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;]172.829:[&lt;span class=&quot;node&quot;&gt;Tenured&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;1203359K-&amp;gt;755802K &lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(1398144K) &lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;,&lt;span class=&quot;node&quot;&gt;0.1855567 secs&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;1832479K-&amp;gt;755802K&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(2027264K)&lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;,&lt;span class=&quot;node&quot;&gt;[Metaspace: 6741K-&amp;gt;6741K(1056768K)]&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt; &lt;span class=&quot;node&quot;&gt;[Times: user=0.18 sys=0.00, real=0.18 secs]&lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:45:59.690-0200&lt;/span&gt; – GC가 일어난 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;172.829&lt;/span&gt; – GC가 일어났을 때, JVM이 수행된 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[DefNew: 629120K-&amp;gt;629120K(629120K), 0.0000372 secs&lt;/span&gt; –이전 로그와 비슷하게 Young 영역에 대한 GC가 일어났다. 그런데 사실은 이전 로그에서 알 수 있듯이 Young 영역에 대한 GC가 일어났었기 때문에, 이미 이 시간 때의 Young 영역은 이미 비워져 있다. 이는 JVM의 버그로 Young 영역이 가득 차 있는 것처럼 리포트한 것이다. 이 GC가 걸린 시간이 &quot;0.0000372 초&quot;가 걸린 것을 보면 알 수 있을 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Tenured&lt;/span&gt; – Old 영역에 대한 Garbage Collector의 이름이다. 이 Collector도 또한 싱글 스레드 기반이며, Mark-Sweep-Compact / Stop-The-World 이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;1203359K-&amp;gt;755802K &lt;/span&gt; – GC 전후의 Old 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(1398144K) &lt;/span&gt; – Old 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.1855567 secs&lt;/span&gt; – Old 영역을 청소하는데 걸린 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;1832479K-&amp;gt;755802K&lt;/span&gt; – Young / Old 영역에 대한 GC 전후의 Heap 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(2027264K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Metaspace: 6741K-&amp;gt;6741K(1056768K)]&lt;/span&gt; – Metaspace 영역에 대한 정보이다. 여기서 이 영역으로부터 회수된 메모리 공간은 없다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.18 sys=0.00, real=0.18 secs]&lt;/span&gt; – GC가 수행된 시간인데, 각 시간은 다음과 같다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real – 애플리케이션이 GC로 인해 멈춘 시간이다. Serial GC는 싱글 스레드 기반의 Stop-The-World를 일으키는 GC이므로, 이 시간은 user 와 sys 시간을 합친 것과 같다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;Minor GC 때와는 다른데, Young 영역 뿐만 아니라 Old 영역 및 Metaspace 영역에 대해서도 GC를 수행한다. GC 전후의 메모리 레이아웃은 다음 그림과 비슷할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;parallel-gc&quot;&gt;Parallel GC&lt;/h2&gt;

&lt;p&gt;Serial GC와 마찬가지로 &lt;strong&gt;Young 영역은 mark-copy, Old 영역에 대해서는 mark-copy-compact 가 수행된다. 마찬가지로 모두 Stop-The-World를 일으킨다.&lt;/strong&gt;
단 Serial GC와는 다른 점은 GC를 수행하는 여러 스레드가 병렬로 수행된다는 점이다. 따라서 Serial GC에 비해 걸리는 시간이 짧다.&lt;/p&gt;

&lt;p&gt;GC를 수행하는 스레드의 개수는 &lt;strong&gt;-XX:ParallelGCThreads=NNN&lt;/strong&gt; 라는 JVM 파라미터를 통해 설정할 수 있다. 기본 값은 JVM에 수행되는 환경의 core 개수이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 파라미터를 설정하여 Parallel GC를 사용할 수있다. Young / Old 영역별로 수행되는 GC를 다르게 설정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:+UseParallelGC com.mypackages.MyExecutableClass
java -XX:+UseParallelOldGC com.mypackages.MyExecutableClass
java -XX:+UseParallelGC -XX:+UseParallelOldGC com.mypackages.MyExecutableClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Parallel GC는 &lt;strong&gt;애플리케이션의 Throughput이 아주 중요할 때 고려해 볼 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GC가 수행되는 동안에는 모든 코어가 병렬적으로 GC를 수행하므로, 결국 GC로 인해 애플리케이션이 멈추는 시간이 짧아질 수 있다.&lt;/li&gt;
  &lt;li&gt;GC 사이클 간격, 즉 애플리케이션이 수행될 때는 GC 로직을 위해 시스템 리소스가 낭비되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;반면에, &lt;strong&gt;GC는 수행되는 도중에 중단되지 않기 때문에 GC가 수행되는 시간이 길어지면 여전히 애플리케이션 스레드도 장기간 멈출 수 있다.&lt;/strong&gt;
즉, 애플리케이션의 Latency가 중요할 때는 다음에 설명할 CMS나 G1 GC도 고려해봐야 한다.&lt;/p&gt;

&lt;p&gt;다음은 Parallel GC를 사용했을 때의 GC 로그이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:27:40.915-0200: 116.115: [GC (Allocation Failure) [PSYoungGen: 2694440K-&amp;gt;1305132K(2796544K)] 9556775K-&amp;gt;8438926K(11185152K), 0.2406675 secs] [Times: user=1.77 sys=0.01, real=0.24 secs]
2018-01-26T14:27:41.155-0200: 116.356: [Full GC (Ergonomics) [PSYoungGen: 1305132K-&amp;gt;0K(2796544K)] [ParOldGen: 7133794K-&amp;gt;6597672K(8388608K)] 8438926K-&amp;gt;6597672K(11185152K), [Metaspace: 6745K-&amp;gt;6745K(1056768K)], 0.9158801 secs] [Times: user=4.49 sys=0.64, real=0.92 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;minor-gc-1&quot;&gt;Minor GC&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:27:40.915-0200: 116.115: [GC (Allocation Failure) [PSYoungGen: 2694440K-&amp;gt;1305132K(2796544K)] 9556775K-&amp;gt;8438926K(11185152K), 0.2406675 secs] [Times: user=1.77 sys=0.01, real=0.24 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:27:40.915-0200&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;116.115&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;:[&lt;span class=&quot;node&quot;&gt;GC&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;(&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;)[&lt;span class=&quot;node&quot;&gt;PSYoungGen&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;2694440K-&amp;gt;1305132K&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(2796544K)&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;]&lt;span class=&quot;node&quot;&gt;9556775K-&amp;gt;8438926K&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(11185152K)&lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;0.2406675 secs&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;]&lt;span class=&quot;node&quot;&gt;[Times: user=1.77 sys=0.01, real=0.24 secs]&lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:27:40.915-0200&lt;/span&gt; – GC가 일어난 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;116.115&lt;/span&gt; –GC가 일어났을 때, JVM이 수행된 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;GC&lt;/span&gt; – Minor GC / Full GC를 구분하는 플래그, 여기서는 Minor GC를 의미한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;/span&gt; – GC가 일어난 원인, 여기서는 Young 영역에서 새로운 객체를 생성하기 위한 공간이 부족해서 발생한 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;PSYoungGen&lt;/span&gt; – Garbage Collector의 이름. 이 Collector는 Young 영역에 대한 GC를 수행하는데, 멀티 스레드 기반으로 병렬로 수행되는 collector이며, Mark-Copy / Stop-The-World 이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2694440K-&amp;gt;1305132K&lt;/span&gt; – GC 전후의 Young 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(2796544K)&lt;/span&gt; – Young 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;9556775K-&amp;gt;8438926K&lt;/span&gt; – GC 전후의 Heap 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(11185152K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.2406675 secs&lt;/span&gt; – GC가 수행된 시간 (초)&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=1.77 sys=0.01, real=0.24 secs]&lt;/span&gt; – GC가 수행된 시간인데, 각 시간은 다음과 같다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real –애플리케이션이 GC로 인해 멈춘 시간이다. Parallel GC에서 이 시간은 user와 sys 시간을 GC 수행하는 스레드 개수로 나눈 것에 근접한다. 여기서는 8개의 스레드가 GC를 수행했다는 것을 알 수 있다. GC의 모든 로직이 완전히 병렬적으로 수행되지는 않을 것이므로, user와 sys 시간을 스레드 개수로 나눈 값보다는 높다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;GC가 수행되기 전의 Heap 사용량은 9,556,775K 였는데, 이 중 Young 영역의 사용량은 2,694,440K 이다.이는 GC가 수행되기 전, Old 영역의 사용량은 6,862,335K 라는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;GC가 수행되고 난 후에 Young 영역의 사용량은 1,389,308K 가 줄었지만 Heap 영역의 사용량은 1,117,849K 밖에 줄어들지 않았다. 이를 통해 나머지 271,459K 크기에 해당하는 객체들은
모두 Young 영역에서 Old 영역으로 이동하였다는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;full-gc-1&quot;&gt;Full GC&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T14:27:41.155-0200: 116.356: [Full GC (Ergonomics) [PSYoungGen: 1305132K-&amp;gt;0K(2796544K)] [ParOldGen: 7133794K-&amp;gt;6597672K(8388608K)] 8438926K-&amp;gt;6597672K(11185152K), [Metaspace: 6745K-&amp;gt;6745K(1056768K)], 0.9158801 secs] [Times: user=4.49 sys=0.64, real=0.92 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:27:41.155-0200&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;:&lt;span class=&quot;node&quot;&gt;116.356&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;:[&lt;span class=&quot;node&quot;&gt;Full GC&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt; (&lt;span class=&quot;node&quot;&gt;Ergonomics&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;)&lt;span class=&quot;node&quot;&gt;[PSYoungGen: 1305132K-&amp;gt;0K(2796544K)]&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;[&lt;span class=&quot;node&quot;&gt;ParOldGen&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;:&lt;span class=&quot;node&quot;&gt;7133794K-&amp;gt;6597672K &lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(8388608K)&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;8438926K-&amp;gt;6597672K&lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(11185152K)&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;[Metaspace: 6745K-&amp;gt;6745K(1056768K)] &lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;0.9158801 secs&lt;sup&gt;12&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;[Times: user=4.49 sys=0.64, real=0.92 secs]&lt;sup&gt;13&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T14:27:41.155-0200&lt;/span&gt; – GC가 일어난 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;116.356&lt;/span&gt; – GC가 일어났을 때, JVM이 수행된 시간이다. 여기서는 아까 전의 Minor GC가 일어난 후 바로 시작된 것을 알 수 있다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Full GC&lt;/span&gt; – Young 영역 및 Old 영역에 대해서 수행하는 Full GC를 가리키는 플래그이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Ergonomics&lt;/span&gt; – GC가 일어난 원인으로, 여기서는 JVM 내부 조건으로 인해 트리거되었음을 의미한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[PSYoungGen: 1305132K-&amp;gt;0K(2796544K)]&lt;/span&gt; – Minor GC 때와 비슷하게, 병렬적으로 수행되는 mark-copy / stop-the-world인 &quot;PSYoungGen&quot; 이라는 collector가 Young 영역에 대한 GC를 수행했다는 것을 알 수 있다. Young 영역의 사용량이 1,305,132K 에서 0으로 비워졌다는 것을 알 수 있다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;ParOldGen&lt;/span&gt; – Old 영역에 대해 GC를 수행하는 Collector로, 병렬적으로 수행되며 mark-sweep-compact / stop-the-world 이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;7133794K-&amp;gt;6597672K &lt;/span&gt; –GC 전후의 Old 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(8388608K)&lt;/span&gt; – Old 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;8438926K-&amp;gt;6597672K&lt;/span&gt; – Young / Old 영역에 대한 GC 전후의 Heap 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(11185152K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Metaspace: 6745K-&amp;gt;6745K(1056768K)] &lt;/span&gt; – Metaspace 영역에 대한 정보이다. 여기서 이 영역으로부터 회수된 메모리 공간은 없다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.9158801 secs&lt;/span&gt; – GC가 수행된 시간 (초)&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=4.49 sys=0.64, real=0.92 secs]&lt;/span&gt; – GC가 수행된 시간인데, 각 시간은 다음과 같다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real – 애플리케이션이 GC로 인해 멈춘 시간이다. Parallel GC에서 이 시간은 user와 sys 시간을 GC 수행하는 스레드 개수로 나눈 것에 근접한다. 여기서는 8개의 스레드가 GC를 수행했다는 것을 알 수 있다. GC의 모든 로직이 완전히 병렬적으로 수행되지는 않을 것이므로, user와 sys 시간을 스레드 개수로 나눈 값보다는 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;이 로그를 통해 Young 영역 뿐만 아니라 Old 및 Metaspace 영역에 대한 GC도 수행되었다는 것을 알 수 있다. GC 전후의 메모리 레이아웃은 다음 그림과 비슷할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;concurrent-mark-and-sweep&quot;&gt;Concurrent Mark and Sweep&lt;/h2&gt;

&lt;p&gt;이 GC의 공식적인 이름은 &lt;strong&gt;“Mostly Concurrent Mark and Sweep Garbage Collector”&lt;/strong&gt; 이다.
Young 영역에 대해서는 Parallel GC와 마찬가지로 mark-copy 알고리즘을 사용하며 stop-the-world를 일으킨다. 또한 멀티 스레드를 통해 병렬적으로 수행된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Old 영역에 대해서는 mark-sweep 알고리즘을 사용하는데, GC의 대부분 로직들이 애플리케이션 스레드와 “거의” 동시에 수행된다. (Monstly Concurrent)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 GC는 Old 영역에 대한 GC가 발생할 때, 애플리케이션 스레드가 장시간 멈추는 것을 되도록 피하고자 디자인된 것이다.
다음 두 가지 방법을 통해, 애플리케이션 스레드가 멈추는 것을 막는다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Old 영역에 대해서 compaction을 수행하지 않고, 객체를 할당할 수 있는 공간을 관리하는 자료구조 (free-list)를 따로 관리한다. compaction도 객체 복사가 일어나므로 애플리케이션 스레드를 멈추게 된다.&lt;/li&gt;
  &lt;li&gt;Mark와 sweep 단계에서는 특정 단계빼고는 애플리케이션 스레드와 병렬적으로 수행된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 의미는 애플리케이션 스레드가 GC로 인해 멈추는 시간을 현저히 줄일 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;당연히 GC를 수행하기 위해서는 CPU 코어를 사용하게 되므로 애플리케이션 스레드와 CPU 자원을 얻기 위해 경쟁하게 된다. 기본적으로 이 GC를 위해 수행되는 스레드 개수는 실제 환경의 CPU 코어 개수의 1/4 이다.&lt;/p&gt;

&lt;p&gt;이 GC를 수행하기 위해 다음과 같이 JVM 파라미터를 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:+UseConcMarkSweepGC com.mypackages.MyExecutableClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Parallel GC와는 다르게, &lt;strong&gt;Latency가 중요할 때는 애플리케이션 스레드의 멈춤을 되도록 피하는 이 GC를 고려해볼 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션 스레드와 병렬적으로 수행되는 단계가 있는 이 GC를 사용함으로써, 애플리케이션의 responsiveness가 향상된다.&lt;/p&gt;

&lt;p&gt;단, 모든 CPU 코어가 애플리케이션 스레드를 위해 사용되지 않고 GC를 위해 일부가 사용될 수도 있기 때문에, Parallel GC를 사용할 때보다는 Throughput이 줄어들 수 있다. (CPU 바운드인 애플리케이션에 한해서)&lt;/p&gt;

&lt;p&gt;다음은 이 GC를 사용했을 때의 GC 로그이다. 여기서 첫 번째 로그는 Minor GC 로그이며, 나머지는 모두 Old 영역에 대한 GC 로그이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.219-0200: 64.322: [GC (Allocation Failure) 64.322: [ParNew: 613404K-&amp;gt;68068K(613440K), 0.1020465 secs] 10885349K-&amp;gt;10880154K(12514816K), 0.1021309 secs] [Times: user=0.78 sys=0.01, real=0.11 secs]
2018-01-26T16:23:07.321-0200: 64.425: [GC (CMS Initial Mark) [1 CMS-initial-mark: 10812086K(11901376K)] 10887844K(12514816K), 0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
2018-01-26T16:23:07.321-0200: 64.425: [CMS-concurrent-mark-start]
2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-mark: 0.035/0.035 secs] [Times: user=0.07 sys=0.00, real=0.03 secs]
2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-preclean-start]
2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-preclean: 0.016/0.016 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-abortable-preclean-start]
2018-01-26T16:23:08.446-0200: 65.550: [CMS-concurrent-abortable-preclean: 0.167/1.074 secs] [Times: user=0.20 sys=0.00, real=1.07 secs]
2018-01-26T16:23:08.447-0200: 65.550: [GC (CMS Final Remark) [YG occupancy: 387920 K (613440 K)]65.550: [Rescan (parallel) , 0.0085125 secs]65.559: [weak refs processing, 0.0000243 secs]65.559: [class unloading, 0.0013120 secs]65.560: [scrub symbol table, 0.0008345 secs]65.561: [scrub string table, 0.0001759 secs][1 CMS-remark: 10812086K(11901376K)] 11200006K(12514816K), 0.0110730 secs] [Times: user=0.06 sys=0.00, real=0.01 secs]
2018-01-26T16:23:08.458-0200: 65.561: [CMS-concurrent-sweep-start]
2018-01-26T16:23:08.485-0200: 65.588: [CMS-concurrent-sweep: 0.027/0.027 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]
2018-01-26T16:23:08.485-0200: 65.589: [CMS-concurrent-reset-start]
2018-01-26T16:23:08.497-0200: 65.601: [CMS-concurrent-reset: 0.012/0.012 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;minor-gc-2&quot;&gt;Minor GC&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.219-0200: 64.322: [GC (Allocation Failure) 64.322: [ParNew: 613404K-&amp;gt;68068K(613440K), 0.1020465 secs] 10885349K-&amp;gt;10880154K(12514816K), 0.1021309 secs] [Times: user=0.78 sys=0.01, real=0.11 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:07.219-0200&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;64.322&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;:[&lt;span class=&quot;node&quot;&gt;GC&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;(&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;) 64.322: [&lt;span class=&quot;node&quot;&gt;ParNew&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;613404K-&amp;gt;68068K&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(613440K) &lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt; 0.1020465 secs&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;10885349K-&amp;gt;10880154K &lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(12514816K)&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;0.1021309 secs&lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;]&lt;span class=&quot;node&quot;&gt;[Times: user=0.78 sys=0.01, real=0.11 secs]&lt;sup&gt;12&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:07.219-0200&lt;/span&gt; – GC가 일어난 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;64.322&lt;/span&gt; – GC가 일어났을 때, JVM이 수행된 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;GC&lt;/span&gt; – Minor GC / Full GC를 구분하는 플래그, 여기서는 Minor GC를 의미한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Allocation Failure&lt;/span&gt; – GC가 일어난 원인, 여기서는 Young 영역에서 새로운 객체를 생성하기 위한 공간이 부족해서 발생한 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;ParNew&lt;/span&gt; – Garbage Collector의 이름. Collector는 Young 영역에 대한 GC를 수행하는데, 병렬적으로 수행되며 Mark-Copy / Stop-The-World 이다. 또한 이 Collector는 Old 영역에 대한 GC를 수행하는 Concurrent Mark &amp;amp; Sweep Garbage Collector와 유기적으로 수행될 수 있도록 디자인되었다.  &lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;613404K-&amp;gt;68068K&lt;/span&gt; – GC 전후의 Young 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(613440K) &lt;/span&gt; – Young 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt; 0.1020465 secs&lt;/span&gt; – GC가 수행되고 난 후의 정리 작업(clean up)을 제외한 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;10885349K-&amp;gt;10880154K &lt;/span&gt; – GC 전후의 Heap 영역의 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(12514816K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.1021309 secs&lt;/span&gt; – Collector가 Young영역에 대해서 mark-copy를 진행하는데 걸린 시간. Old 영역으로 오래된 객체를 이동시키는 것과 GC의 마지막 정리 작업과 같이 Concurrent Mark &amp;amp; Sweep Garbage Collector와 커뮤니케이션 한 시간도 포함된다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.78 sys=0.01, real=0.11 secs]&lt;/span&gt; – GC가 수행된 시간인데, 각 시간은 다음과 같다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real – 애플리케이션이 GC로 인해 멈춘 시간이다. Parallel GC와 마찬가지로, 이 시간은 user와 sys 시간을 GC 수행하는 스레드 개수로 나눈 것에 근접한다. 여기서는 8개의 스레드가 GC를 수행했다는 것을 알 수 있다. GC의 모든 로직이 완전히 병렬적으로 수행되지는 않을 것이므로, user와 sys 시간을 스레드 개수로 나눈 값보다는 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;위 로그에서 GC가 수행되기 전의 Heap 사용량은 10,885,349K 이고 Young 영역의 사용량은 613,404K 인 것으로 나온다. 이를 통해 Old 영역의 사용량은 10,271,945K 인 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;GC가 수행된 후, Young 영역의 사용량은 545,336K 가 줄었지만 Heap 영역의 사용량은 5,195K 밖에 줄지 않았다. 이는 540,141K 크기의 객체들이 Young 영역에서 Old 영역으로 이동했다는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;full-gc-2&quot;&gt;Full GC&lt;/h3&gt;

&lt;p&gt;다음 로그를 보면 알 수 있겠지만 Serial GC나 Parallel GC와는 로그 형식이 완전히 다르다.
이 로그들은 Old 영역에 대해 GC를 수행하는, CMS GC의 각 단계에 대한 로그들이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.321-0200: 64.425: [GC (CMS Initial Mark) [1 CMS-initial-mark: 10812086K(11901376K)] 10887844K(12514816K), 0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
2018-01-26T16:23:07.321-0200: 64.425: [CMS-concurrent-mark-start]
2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-mark: 0.035/0.035 secs] [Times: user=0.07 sys=0.00, real=0.03 secs]
2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-preclean-start]
2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-preclean: 0.016/0.016 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-abortable-preclean-start]
2018-01-26T16:23:08.446-0200: 65.550: [CMS-concurrent-abortable-preclean: 0.167/1.074 secs] [Times: user=0.20 sys=0.00, real=1.07 secs]
2018-01-26T16:23:08.447-0200: 65.550: [GC (CMS Final Remark) [YG occupancy: 387920 K (613440 K)]65.550: [Rescan (parallel) , 0.0085125 secs]65.559: [weak refs processing, 0.0000243 secs]65.559: [class unloading, 0.0013120 secs]65.560: [scrub symbol table, 0.0008345 secs]65.561: [scrub string table, 0.0001759 secs][1 CMS-remark: 10812086K(11901376K)] 11200006K(12514816K), 0.0110730 secs] [Times: user=0.06 sys=0.00, real=0.01 secs]
2018-01-26T16:23:08.458-0200: 65.561: [CMS-concurrent-sweep-start]
2018-01-26T16:23:08.485-0200: 65.588: [CMS-concurrent-sweep: 0.027/0.027 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]
2018-01-26T16:23:08.485-0200: 65.589: [CMS-concurrent-reset-start]
2018-01-26T16:23:08.497-0200: 65.601: [CMS-concurrent-reset: 0.012/0.012 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;CMS GC에서 Old 영역에 대한 GC가 수행되는 도중에도, Young 영역에 대한 GC가 발생할 수 있다. 
이 때 로그 상에서는 Minor GC 로그가 한데 섞여서 보일 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 1: Initial Mark&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.321-0200: 64.425: [GC (CMS Initial Mark) [1 CMS-initial-mark: 10812086K(11901376K)] 10887844K(12514816K), 0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CMS GC에서 Stop-The-World 를 일으키는 두 개의 이벤트 중 하나이다.
이 단계에서는 &lt;strong&gt;GC Root 로부터 바로 참조되거나, Young 영역의 살아있는 객체로부터 참조되는 모든 Old 영역의 객체를 mark 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/09.png&quot; alt=&quot;09.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:07.321-0200: 64.42&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: [GC (&lt;span class=&quot;node&quot;&gt;CMS Initial Mark&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;[1 CMS-initial-mark: &lt;span class=&quot;node&quot;&gt;10812086K&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(11901376K)&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;10887844K&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;(12514816K)&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:07.321-0200: 64.42&lt;/span&gt; – GC가 일어난 시간 및 JVM이 수행된 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS Initial Mark&lt;/span&gt; – GC 단계로 GC Root가 될 수 있는 모든 객체를 mark 한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;10812086K&lt;/span&gt; – Old 영역의 현재 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(11901376K)&lt;/span&gt; – Old 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;10887844K&lt;/span&gt; – Heap 영역의 전체 사용량&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;(12514816K)&lt;/span&gt; – Heap 영역의 전체 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 2: Concurrent Mark&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.321-0200: 64.425: [CMS-concurrent-mark-start]
2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-mark: 0.035/0.035 secs] [Times: user=0.07 sys=0.00, real=0.03 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 단계에서는 이전 단계인 “Initial Mark” 단계에서 mark 한 객체부터 시작해서 &lt;strong&gt;Old 영역을 순회하면서 살아있는 모든 객체들을 mark 한다.&lt;/strong&gt;
Concurrent 라는 이름이 나타내는 것처럼, 이 단계에서 애플리케이션 스레드를 멈추지 않고 동작한다.&lt;/p&gt;

&lt;p&gt;이 단계에서 살아있는 모든 객체가 &lt;strong&gt;완전히 mark 되지 않는다.&lt;/strong&gt; 애플리케이션 스레드가 돌고 있으므로, 애플리케이션의 객체들의 상태는 계속 변화할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서 볼 수 있듯이, 검은색 테두리인 “Current Object”의 그래프가 변하였다.
(Mark 하고 있는 도중에, Current Object가 가지고 있던 참조 객체가 지워졌다는 것이다.)&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;pre class=&quot;code-line&quot;&gt;2018-01-26T16:23:07.321-0200: 64.425: [CMS-concurrent-mark-start]
2018-01-26T16:23:07.357-0200: 64.460: [&lt;span class=&quot;node&quot;&gt;CMS-concurrent-mark&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;035/0.035 secs&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;[Times: user=0.07 sys=0.00, real=0.03 secs]&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS-concurrent-mark&lt;/span&gt; – &quot;Concurrent Mark&quot; 단계로, Old 영역에 있는 살아 있는 오브젝트들을 mark 한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;035/0.035 secs&lt;/span&gt; – 이 단계에서 걸린 시간으로 elapsed time(user) 및 wall clock time(real)을 나타낸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.07 sys=0.00, real=0.03 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 3: Concurrent Preclean&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-preclean-start]
2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-preclean: 0.016/0.016 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 단계도 “Concurrent” 단계로서, 애플리케이션 스레드를 멈추지 않고 동작한다.&lt;/p&gt;

&lt;p&gt;이전 단계에서 애플리케이션 스레드와 동시에 동작하였기 때문에, 객체들간의 참조 그래프가 변했을 수 있다. (Young 영역의 GC가 발생되어 Old 영역으로 객체가 이동되거나, 새로운 객체가 생성되었을 경우. &lt;strong&gt;CMS의 Old 영역 GC 도중에도 Young 영역에 대한 GC가 일어날 수 있다.&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;JVM은 &lt;strong&gt;힙 영역을 일정 크기로 나누어 각 영역을 “Card”&lt;/strong&gt;라 불리는 것으로 관리하고, 
Marking 단계에서 &lt;strong&gt;변화한 객체를 갖고 있는 Card를 dirty로 표시해두는 “&lt;a href=&quot;http://psy-lob-saw.blogspot.kr/2014/10/the-jvm-write-barrier-card-marking.html&quot;&gt;Card Marking&lt;/a&gt;” 이라는 기법을 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/11.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Concurrent Preclean” 단계에서는 이 &lt;strong&gt;Card 안에 있는 “dirty 한” 객체로부터 참조되고 있는 객체들을 mark 한다.&lt;/strong&gt; 그리고 Card의 dirty 표시는 지워질 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/12.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;strong&gt;“Final Remark” 단계를 위해 필요한 작업을 수행한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;pre class=&quot;code-line&quot;&gt;2018-01-26T16:23:07.357-0200: 64.460: [CMS-concurrent-preclean-start]
2018-01-26T16:23:07.373-0200: 64.476: [&lt;span class=&quot;node&quot;&gt;CMS-concurrent-preclean&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;0.016/0.016 secs&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;[Times: user=0.02 sys=0.00, real=0.02 secs]&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS-concurrent-preclean&lt;/span&gt; – &quot;Concurrent Preclean&quot; 단계로, 이전 mark 단계에서 변화한 객체들의 상태를 확인하고 작업을 수행한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.016/0.016 secs&lt;/span&gt; – 이 단계에서 걸린 시간으로 elapsed time(user) 및 wall clock time(real)을 나타낸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.02 sys=0.00, real=0.02 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 4: Concurrent Abortable Preclean&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-abortable-preclean-start]
2018-01-26T16:23:08.446-0200: 65.550: [CMS-concurrent-abortable-preclean: 0.167/1.074 secs] [Times: user=0.20 sys=0.00, real=1.07 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“Concurrent” 라는 것은 애플리케이션 스레드와 동시에 동작한다는 의미이기 때문에, 객체의 상태는 GC의 mark 도중에 계속 변화할 수 있다.
이 단계는 Stop-The-World를 일으키는 &lt;strong&gt;“Final Remark” 단계를 되도록 빨리 끝내기 위해서 수행된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Young (Eden) 영역의 사용량이 “CMSScheduleRemarkEdenSizeThreshold” 보다 높으면, “CMSScheduleRemarkEdenPenetration”에 설정된 비율보다 사용량이 낮아질 떄까지 &lt;strong&gt;precleaning, 즉 변화한 객체들을 계속 스캔한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;pre class=&quot;code-line&quot;&gt;2018-01-26T16:23:07.373-0200: 64.476: [CMS-concurrent-abortable-preclean-start]
2018-01-26T16:23:08.446-0200: 65.550: [&lt;span class=&quot;node&quot;&gt;CMS-concurrent-abortable-preclean&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;0.167/1.074 secs&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;[Times: user=0.20 sys=0.00, real=1.07 secs]&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS-concurrent-abortable-preclean&lt;/span&gt; – &quot;Concurrent Abortable Preclean&quot; 단계이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.167/1.074 secs&lt;/span&gt; – 이 단계에서 걸린 시간으로 elapsed time(user) 및 wall clock time(real)을 나타낸다. clock time보다 elapsed time이 더 적은 것을 알 수 있다. 원래 GC에 의해 수행되는 동작들이 병렬로 수행될 때, real time이 더 적다는 것을 확인하였었다. 근데 여기서는 실제로 GC에 의해 수행된 시간인 elapsed time이 더 적은데, 이는 GC가 어떤 동작을 위해 wait를 많이 하였다는 것읠 의미한다. &lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.20 sys=0.00, real=1.07 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;이 단계에서 수행한 결과에 따라, 다음 단계인 “Final Remark”의 수행시간에 큰 영향을 끼친다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 5: Final Remark&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:08.447-0200: 65.550: [GC (CMS Final Remark) [YG occupancy: 387920 K (613440 K)]65.550: [Rescan (parallel) , 0.0085125 secs]65.559: [weak refs processing, 0.0000243 secs]65.559: [class unloading, 0.0013120 secs]65.560: [scrub symbol table, 0.0008345 secs]65.561: [scrub string table, 0.0001759 secs][1 CMS-remark: 10812086K(11901376K)] 11200006K(12514816K), 0.0110730 secs] [Times: user=0.06 sys=0.00, real=0.01 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 단계는 Stop-The-World를 일으키는 두 번째 단계로써, Old 영역에 있는 살아있는 모든 객체들을 완전히 mark 한다.&lt;/p&gt;

&lt;p&gt;이전 단계들은 애플리케이션 스레드와 병렬적으로 수행했기 때문에, &lt;strong&gt;애플리케이션의 동작에 따라 변화하는 객체들의 상태를 빠르게 반영하지 못했을 수 있다.&lt;/strong&gt;
따라서 이 단계에서 다시 Stop-The-World를 통해 애플리케이션 스레드를 잠시 멈춤으로써, &lt;strong&gt;객체들의 상태를 완전히 반영하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMS GC는 이 단계를 &lt;strong&gt;되도록 Young 영역이 거의 비워져있을 때 수행하게 하도록 하여, Stop-The-World 를 일으키는 동작이 연쇄적으로 발생하는 것을 방지한다.&lt;/strong&gt;
(Young 영역이 가득차 있으면 Young 영역의 GC가 발생하고 오래된 객체들은 Old 영역으로 이동하는데, 그로 인해 Old 영역이 부족해지면 또 Old 영역에 대한 GC가 발생하게 되므로, 결국 Stop-The-World를 일으키는 동작이 연쇄적으로 발생할 가능성이 있다.)&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:08.447-0200: 65.550&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: [GC (&lt;span class=&quot;node&quot;&gt;CMS Final Remark&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;) [&lt;span class=&quot;node&quot;&gt;YG occupancy: 387920 K (613440 K)&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;]65.550: &lt;span class=&quot;node&quot;&gt;[Rescan (parallel) , 0.0085125 secs]&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;65.559: [&lt;span class=&quot;node&quot;&gt;weak refs processing, 0.0000243 secs]65.559&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;: [&lt;span class=&quot;node&quot;&gt;class unloading, 0.0013120 secs]65.560&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;: [&lt;span class=&quot;node&quot;&gt;scrub string table, 0.0001759 secs&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;][1 CMS-remark: &lt;span class=&quot;node&quot;&gt;10812086K(11901376K)&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;] &lt;span class=&quot;node&quot;&gt;11200006K(12514816K) &lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;, &lt;span class=&quot;node&quot;&gt;0.0110730 secs&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;] [&lt;span class=&quot;node&quot;&gt;[Times: user=0.06 sys=0.00, real=0.01 secs]&lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;2018-01-26T16:23:08.447-0200: 65.550&lt;/span&gt; –GC가 일어난 시간 및 JVM이 수행된 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS Final Remark&lt;/span&gt; –&quot;Final Remark&quot; 단계로 이전 GC 단계에서 새로이 업데이트된 객체들을 모두 포함하여, Old 영역의 살아있는 객체들을 완전히 mark 한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;YG occupancy: 387920 K (613440 K)&lt;/span&gt; – Young 영역의 현재 사용량 및 크기&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Rescan (parallel) , 0.0085125 secs]&lt;/span&gt; – 이 &quot;Rescan&quot; 동작에서 애플리케이션 스래드가 멈추어 있을 때, 살아있는 객체들을 mark 하는 것을 완료한다. 여기서는 이 동작이 병렬로 수행되었고, 0.0085125 초가 걸렸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;weak refs processing, 0.0000243 secs]65.559&lt;/span&gt; – Week reference에 대한 처리 및 이에 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;class unloading, 0.0013120 secs]65.560&lt;/span&gt; –사용하지 않는 클래스들을 언로드하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;scrub string table, 0.0001759 secs&lt;/span&gt; – Symbol 및 클래스 레벨 메타데이터 등을 참조하는 String들을 지우는 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;10812086K(11901376K)&lt;/span&gt; – 이 단계가 지난 후의 Old 영역의 사용량 및 크기이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;11200006K(12514816K) &lt;/span&gt; – 이 단계가 지난 후의 Heap 영역의 사용량 및 크기이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.0110730 secs&lt;/span&gt; – 이 단계에서 걸린 시간&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.06 sys=0.00, real=0.01 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;Mark 단계가 끝나면 Old 영역에 있는 모든 살아있는 객체들은 mark 되었을 것이며, 이제 Old 영역을 청소함으로써 새로 객체를 할당하기 위한 공간을 확보할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 6: Concurrent Sweep&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:08.458-0200: 65.561: [CMS-concurrent-sweep-start]
2018-01-26T16:23:08.485-0200: 65.588: [CMS-concurrent-sweep: 0.027/0.027 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;애플리케이션 스레드와 &lt;strong&gt;병렬적으로 수행되며, 사용하지 않는 객체들을 정리하여 빈 공간을 확보한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/13.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;2018-01-26T16:23:08.458-0200: 65.561: [CMS-concurrent-sweep-start]
2018-01-26T16:23:08.485-0200: 65.588: [&lt;span class=&quot;node&quot;&gt;CMS-concurrent-sweep&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;0.027/0.027 secs&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;] [&lt;span class=&quot;node&quot;&gt;[Times: user=0.03 sys=0.00, real=0.03 secs] &lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS-concurrent-sweep&lt;/span&gt; – &quot;Concurrent Sweep&quot; 단계로 mark 되지 않은 객체들을 정리하여 공간을 확보한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.027/0.027 secs&lt;/span&gt; – 이 단계에서 걸린 시간으로 elapsed time(user) 및 wall clock time(real)을 나타낸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.03 sys=0.00, real=0.03 secs] &lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 7: Concurrent Reset&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2018-01-26T16:23:08.485-0200: 65.589: [CMS-concurrent-reset-start]
2018-01-26T16:23:08.497-0200: 65.601: [CMS-concurrent-reset: 0.012/0.012 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CMS 알고리즘 내부에서 사용하는 데이터들을 리셋하고, 다음 사이클을 준비한다.&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line&quot;&gt;2018-01-26T16:23:08.485-0200: 65.589: [CMS-concurrent-reset-start]
2018-01-26T16:23:08.497-0200: 65.601: [&lt;span class=&quot;node&quot;&gt;CMS-concurrent-reset&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;: &lt;span class=&quot;node&quot;&gt;0.012/0.012 secs&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;] [&lt;span class=&quot;node&quot;&gt;[Times: user=0.01 sys=0.00, real=0.01 secs]&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;CMS-concurrent-reset&lt;/span&gt; – &quot;Concurrent Reset&quot; 단계로, CMS 알고리즘 내부에서 사용하는 데이터들을 리셋하고, 다음 사이클을 준비한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.012/0.012 secs&lt;/span&gt; – 이 단계에서 걸린 시간으로 elapsed time(user) 및 wall clock time(real)을 나타낸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Times: user=0.01 sys=0.00, real=0.01 secs]&lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;CMS GC는 이렇게 각 단계를 나누어, 애플리케이션 스레드와 병렬적으로 GC 동작을 수행함으로써 Stop-The-World로 인해 애플리케이션이 멈추는 시간을 줄인다.&lt;/p&gt;

&lt;p&gt;하지만 CMS GC도 단점이 있는데, &lt;strong&gt;Old 영역에 대한 Compaction을 수행하지 않음으로써 Old 영역에서 단편화가 발생할 수 있다.&lt;/strong&gt; 그리고 또한 &lt;strong&gt;큰 Heap 영역을 가지는 환경에서는 애플리케이션 스레드가 멈추는 시간을 예측하기가 힘들 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;g1&quot;&gt;G1&lt;/h2&gt;

&lt;p&gt;G1 알고리즘의 목표 중 하나는, GC로 인해 애플리케이션 스레드가 멈추는 &lt;strong&gt;Stop-The-World의 시간과 빈도를 설정을 통해 예측 가능하도록 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 G1(Garbage-First)은 soft real-time garbage collector로서, 사용자가 설정한대로 garbage collection의 성능이나 GC로 인해 멈추는 시간을 &lt;strong&gt;거의&lt;/strong&gt; 맞출 수 있다. 5 millisecond 내에, 사용자가 설정한 시간에 따라 Stop-The-World로 인해 애플리케이션 스레드가 멈추는 시간을 조정할 수 있다. Garbage-First GC는 사용자가 설정한, 이 &lt;strong&gt;“목표”&lt;/strong&gt;에 따라 멈추는 시간을 넘지 않도록 동작한다. (최대한 사용자가 의도한대로 동작한다는 것이다. 그럴 수 있다면 hard real-time garbage collector가 될 것이다.)&lt;/p&gt;

&lt;p&gt;이를 위해 G1은 다음과 같이 구현된다.&lt;/p&gt;

&lt;p&gt;앞서 살펴봤던 연속된 Young 영역 및 Old 영역으로 Heap을 관리하지 않는다. &lt;strong&gt;대신 Heap 영역을 일정한 크기의 작은 공간으로 나눈다.&lt;/strong&gt; (기본 2048개의 공간이다.)&lt;/p&gt;

&lt;p&gt;각 공간은 Eden이거나 Survivor, Old 가 된다. 물론 논리적으로 봤을 때, Eden 및 Survivor에 해당하는 공간을 합쳐서 본다면 Young 영역으로 볼 수 있다. Old 또한 마찬가지.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/14.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 구현하면 garbage collector 입장에서는 &lt;strong&gt;한 GC 사이클에 전체 Young / Old 영역에 대해서 GC를 수행할 필요가 없다는 것이다.&lt;/strong&gt; &lt;br /&gt;
G1 GC는 잘게 나누어진 공간 중 &lt;strong&gt;일정 개수의 공간을 Collection Set이라 불리는 서브셋에 포함시켜, 이 서브셋에 포함되는 공간에 대해서만 GC를 수행한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단, Young 영역에 해당하는 모든 공간에 대해서는 Collection Set에 모두 포함되어 한 GC 사이클에 모두 GC가 수행되며, &lt;strong&gt;Old 영역에 대해서만 Collection Set에 포함된 공간에 대해서만 GC를 수행한다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-05-gc_algorithms/15.png&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 GC를 수행할 때, 각 공간마다 가지고 있는 살아있는 객체의 수를 조사하는데 이 정보는 Collection Set을 만들 때 참조된다. &lt;br /&gt;
G1 GC는 살아있는 객체가 아닌 garbage collector 대상이 되는, &lt;strong&gt;더 이상 사용하지 않는 객체가 많은 공간부터 Collection Set에 포함시킨다.&lt;/strong&gt; &lt;br /&gt;
따라서 이 GC의 이름이 Garbage-First 인 것이다.&lt;/p&gt;

&lt;p&gt;G1 GC를 사용하기 위해서는 다음과 같이 JVM 파라미터를 설정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:+UseG1GC com.mypackages.MyExecutableClass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;evacuation-pause-fully-young&quot;&gt;Evacuation Pause: Fully Young&lt;/h3&gt;

&lt;p&gt;애플리케이션이 처음 시작되었을 때는, G1은 GC를 위해 참조될 정보가 없기 때문에 &lt;strong&gt;fully-young 모드로 동작한다.&lt;/strong&gt;
Young 영역이 가득찼을 경우에 애플리케이션 스레드는 잠시 멈추게 되고, Young 영역에 있는 살아있는 객체들은 Survivor 영역으로 이동시킨다. 객체 이동하는 동작을 Evacuation이라고 부르는데, 이전에 봤던 GC 알고리즘들과 거의 동일하다.&lt;/p&gt;

&lt;p&gt;Evacuation에 대한 로그는 좀 많은데, 여기서는 fully-young 모드와는 관계가 없는 로그를 빼고 살펴보도록 한다. 해당 로그들은 애플리케이션 스레드와 동시에 동작하는 concurrent 단계일 때 다시 볼 것이다. 또한 GC 스레드가 병렬로 동작할 때 남는 로그(Parallel) 들과 “Other” 단계일 때의 로그도 나누어서 볼 것이다.&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line nowrap&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.134: [GC pause (G1 Evacuation Pause) (young), 0.0144119 secs]&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Parallel Time: 13.9 ms, GC Workers: 8]&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;…&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Code Root Fixup: 0.0 ms]&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Code Root Purge: 0.0 ms]&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Clear CT: 0.1 ms]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Other: 0.4 ms]&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;…&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Eden: 24.0M(24.0M)-&amp;gt;0.0B(13.0M) &lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;Survivors: 0.0B-&amp;gt;3072.0K &lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;span class=&quot;node&quot;&gt;Heap: 24.0M(256.0M)-&amp;gt;21.9M(256.0M)]&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt; [Times: user=0.04 sys=0.04, real=0.02 secs] &lt;sup&gt;11&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;0.134: [GC pause (G1 Evacuation Pause) (young), 0.0144119 secs]&lt;/span&gt; – Young 영역에 대해서만 GC를 수행하는데, JVM이 시작되고 난 후 134ms 후에 시작되었고 0.0144 초가 걸렸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Parallel Time: 13.9 ms, GC Workers: 8]&lt;/span&gt; – 8개의 스레드에 수행되었는데 13.9ms (real time) 걸렸다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;…&lt;/span&gt; – 병렬로 동작한 동작은 따로 살펴본다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Code Root Fixup: 0.0 ms]&lt;/span&gt; – 병렬로 수행되는 GC 동작을 위해 갖고 있던 정보를 정리한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Code Root Purge: 0.0 ms]&lt;/span&gt; – 역시 GC를 위해 가지고 있던 정보를 정리한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Other: 0.4 ms]&lt;/span&gt; – GC를 위해 자잘한 일을 수행한 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;…&lt;/span&gt; – 따로 살펴본다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Eden: 24.0M(24.0M)-&amp;gt;0.0B(13.0M) &lt;/span&gt; – 이 단계 전후의 Eden 공간의 사용량 및 크기이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Survivors: 0.0B-&amp;gt;3072.0K &lt;/span&gt; – 이 단계 전후의 Survivor 크기이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;Heap: 24.0M(256.0M)-&amp;gt;21.9M(256.0M)]&lt;/span&gt; – 이 단계 전후의 Heap 영역의 사용량 및 크기이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt; [Times: user=0.04 sys=0.04, real=0.02 secs] &lt;/span&gt; – 해당 단계에서 걸린 시간으로 user 및 system, real 로 나누어서 보여주고 있다:
&lt;ul&gt;
&lt;li&gt;user – GC가 진행되는 동안 Garbage Collector에 의해 수행된 CPU 시간이다.&lt;/li&gt;
&lt;li&gt;sys – System Call과 같이 OS가 수행하거나 기다린 시간이다.&lt;/li&gt;
&lt;li&gt;real – 애플리케이션이 GC로 인해 멈춘 시간이다. 이 시간은 user와 sys 시간을 GC 수행하는 스레드 개수로 나눈 것에 근접한다. 이 케이스에 대해서는 8개의 스레드가 GC를 수행되었다. GC의 모든 로직이 완전히 병렬적으로 수행되지는 않을 것이므로, user와 sys 시간을 스레드 개수로 나눈 값보다는 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;이 단계에서 제일 시간이 많이 걸린 것은, 8개의 스레드에 의해 병렬적으로 동작한 일들이다.
다음과 같이 로그 상에서 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line nowrap&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Parallel Time: 13.9 ms, GC Workers: 8]&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt; [GC Worker Start (ms)&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 134.0, Avg: 134.1, Max: 134.1, Diff: 0.1]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Ext Root Scanning (ms)&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 0.1, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 1.2]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Code Root Scanning (ms)&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 0.0, Avg: 0.0, Max: 0.2, Diff: 0.2, Sum: 0.2]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Object Copy (ms)&lt;sup&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 10.8, Avg: 12.1, Max: 12.6, Diff: 1.9, Sum: 96.5]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Termination (ms)&lt;sup&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 0.8, Avg: 1.5, Max: 2.8, Diff: 1.9, Sum: 12.2]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Termination Attempts&lt;sup&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 173, Avg: 293.2, Max: 362, Diff: 189, Sum: 2346]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[GC Worker Other (ms)&lt;sup&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;GC Worker Total (ms)&lt;sup&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;code&gt;: Min: 13.7, Avg: 13.8, Max: 13.8, Diff: 0.1, Sum: 110.2]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[GC Worker End (ms)&lt;sup&gt;10&lt;/sup&gt;&lt;/span&gt;: Min: 147.8, Avg: 147.8, Max: 147.8, Diff: 0.0]
&lt;/p&gt;&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Parallel Time: 13.9 ms, GC Workers: 8]&lt;/span&gt; – 다음 로그에 있는 동작들이 수행된 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt; [GC Worker Start (ms)&lt;/span&gt; – 해당 동작들을 수행하기 시작할 때의 timestamp이다. Min 과 Max의 값이 많이 다르면 이는 너무 많이 스레드의 개수를 설정하였거나 JVM이 아닌 다른 프로세스가 CPU 시간을 많이 잡아먹었을 때이다.  &lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Ext Root Scanning (ms)&lt;/span&gt; – Heap 영역에 존재하지 않는 클래스 로더나 JNI 참조 정보, JVM 시스템 정보를 스캔하면서 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Code Root Scanning (ms)&lt;/span&gt; – 로컬변수와 같은 GC root로부터 참조되는 객체들을 스캔하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Object Copy (ms)&lt;/span&gt; – GC 대상이 되는 공간으로부터 객체들을 복사하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Termination (ms)&lt;/span&gt; – GC 동작을 수행 후 스레드들이 더 이상 할 작업이 없다는 것을 확인하고 종료하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Termination Attempts&lt;/span&gt; – 스레드들이 GC 동작을 종료하기 위해 시도한 횟수이다. GC 종료를 시도할 때 실패하는 경우는 GC를 위해 할 동작이 아직 있다는 것이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[GC Worker Other (ms)&lt;/span&gt; – GC를 위해 자잘한 일을 하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;GC Worker Total (ms)&lt;/span&gt; – GC 스레드들이 GC를 수행하는데 걸린 전체 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[GC Worker End (ms)&lt;/span&gt; – GC가 각자의 일을 마쳤을 때의 timestamp이다. 보통 Min 및 Avg, Max가 같지만, 그렇지 않은 경우에는 스레드들이 기다린 동작이 많거나, 해당 스레드들과 CPU 시간을 경쟁하는 다른 프로세스들이 많다는 것이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;위의 동작말고도 Evacuation 단계에서 자잘한 일들도 많이 수행되었는데 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;code-line-wrap&quot;&gt;
&lt;p class=&quot;code-line nowrap&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Other: 0.4 ms]&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Choose CSet: 0.0 ms]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Ref Proc: 0.2 ms]&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Ref Enq: 0.0 ms]&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Redirty Cards: 0.1 ms]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Humongous Register: 0.0 ms]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;[Humongous Reclaim: 0.0 ms]&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&quot;node&quot;&gt;[Free CSet: 0.0 ms]&lt;sup&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol class=&quot;code-line-components&quot;&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Other: 0.4 ms]&lt;/span&gt; – GC를 위해 기타 작업을 하는데 있어서 걸린 시간으로 GC 스레드들이 병렬로 수행한다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Ref Proc: 0.2 ms]&lt;/span&gt; – non-strong reference들과 관련된 작업을 수행하면서 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Ref Enq: 0.0 ms]&lt;/span&gt; – 남아있는 non-strong reference들을 ReferenceQueue에 큐잉하는데 걸린 시간이다.&lt;/li&gt;
&lt;li class=&quot;description&quot;&gt;&lt;span class=&quot;node&quot;&gt;[Free CSet: 0.0 ms]&lt;/span&gt; – Collection Set에 있던, GC를 수행해서 비어버린 공간들을 반환하기 위해 걸린 시간이다. 이 공간들은 다음 객체 생성할 때 쓰일 것이다. &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;concurrent-marking&quot;&gt;Concurrent Marking&lt;/h3&gt;

&lt;p&gt;G1 GC 알고리즘의 컨셉은 CMS GC와 많이 비슷하기 때문에, CMS 알고리즘을 잘 이해하고 있다면 이 알고리즘을 이해하는데도 별 어려움이 없을 것이다.
비록 디테일한 구현은 다르겠지만, 애플리케이션 스레드와 동시에 동작하는 Concurrent Mark는 매우 비슷하다.&lt;/p&gt;

&lt;p&gt;G1 GC의 Concurrent Mark는 Snapshot-At-The-Beginning 접근법에 따라, 비록 애플리케이션 스레드의 동작에 따라 객체의 그래프가 변하더라도 해당 사이클 초반에 살아있는 모든 객체를 mark 를 시도한다. 그리고 이 정보는 힙 영역의 애플리케이션 객체 상태 정보를 유지할 수 있게 하고 이는 Collection Set를 만드는데 참조된다.&lt;/p&gt;

&lt;p&gt;이 단계는 head 영역의 사용량이 일정 이상이 되었을 때 시작된다. 디폴트는 힙 전체 영역의 45%이지만, &lt;strong&gt;InitiatingHeapOccupancyPercent&lt;/strong&gt; 라는 JVM 옵션을 통해 변경할 수 있다. CMS GC랑 비슷하게 이 단계도 여러 서브 단계로 이루어져 있으며 어떤 단계는 애플리케이션과 동시에 동작하지만, 어떤 단계는 Stop-The-World 를 유발한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 1: Initial Mark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 단계에서는 GC Root로부터 바로 참조되는 객체를 mark 한다.
CMS GC는 Stop-The-World를 일으키는 단계였지만, G1 GC는 Evacuation 단계 (Young GC)로부터 트리거되기 때문에 (piggy-backed) 그 오버헤드는 덜하다. 다음 로그와 같이 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.631: [GC pause (G1 Evacuation Pause) (young) (initial-mark), 0.0062656 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 2: Root Region Scan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 단계에서는 Root 영역에 속해 있는 살아있는 객체로부터 참조되는 모든 객체를 mark 한다.
애플리케이션 스레드와 동시에 동작하며, 이 때문에 다음 Evacuation 단계 (Young GC)가 일어나기 전까지 반드시 완료해야 한다. (객체의 상태가 변화하고 있는 Young GC가 발생하면 많은 문제가 발생하기 때문이다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.362: [GC concurrent-root-region-scan-start]
1.364: [GC concurrent-root-region-scan-end, 0.0028513 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 3: Concurrent Mark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CMS GC와 매우 유사하게, 특별한 비트맵을 이용하여 힙 영역의 모든 살아있는 객체를 mark 한다. 애플리케이션 스레드와 동시에 동작한다.&lt;/p&gt;

&lt;p&gt;Snapshop-At-The-Beginning 접근법에 따라, 살아있는 객체를 모두 mark를 하려고 하는데 도중에 애플리케이션 스레드에 의해 업데이트 되는
객체 상태는 특별한 log buffer 를 통해 따로 쌓아둔다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.364: [GC concurrent-mark-start]
1.645: [GC concurrent-mark-end, 0.2803470 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 4: Remark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 단계는 Stop-The-World를 일으키는 단계로, mark 하는 단계를 완료하는 단계이다. 애플리케이션 스레드를 잠시 멈추고 log buffer에 있던 정보를 참조하여 객체 상태 업데이트를 완료한다.&lt;/p&gt;

&lt;p&gt;또한 모든 공간 (Region)에 대해서 가지고 있는 살아있는 객체의 수를 나타내는 live stat를 계산한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.645: [GC remark 1.645: [Finalize Marking, 0.0009461 secs] 1.646: [GC ref-proc, 0.0000417 secs] 1.646: [Unloading, 0.0011301 secs], 0.0074056 secs]
[Times: user=0.01 sys=0.00, real=0.01 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Phase 5: Cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;마지막 단계는, heap 영역에 있는 모든 살아있는 객체 정보를 조사한다. 또한 살아있지 않는 객체만 가지고 있는 공간은 비워진다.&lt;/p&gt;

&lt;p&gt;해당 단계에서 비어 있는 영역을 회수하는 것과 살아있는 객체의 상태를 계산하는 것과 같은 일부 로직은 애플리케이션 스레드와 동시에 동작하지만, 어떤 로직은 Stop-The-World를 일으켜 애플리케이션 스레드의 방해없이 자기 자신의 작업을 완료한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.652: [GC cleanup 1213M-&amp;gt;1213M(1885M), 0.0030492 secs]
[Times: user=0.01 sys=0.00, real=0.00 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;style&gt;
ol li, ul li {
    min-height: 1px;
    vertical-align: bottom;
}

pre, code, kbd, samp {
    font-family: consolas, 'courier new', monospace;
    font-size: 1em;
    color: #009cd5;
}

.code-line-wrap {
    margin: 30px 0;
    border-left: 3px solid #ddd;
    border-radius: 3px;
}
.code-line {
    margin: 0;
    padding: 10px;
    background: #faf8f6;
    color: #009cd5;
    line-height: 24px;
    text-shadow: 0 1px 0 #fff;
    font-family: consolas,&quot;courier new&quot;,monospace;
    overflow: auto;
}
.code-line-wrap span.node {
    display: inline-block;
    padding: 0 3px;
    line-height: 18px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #fff;
    color: #009cd5;
    white-space: nowrap;
    font-family: consolas,&quot;courier new&quot;,monospace;
}
.code-line-wrap ol {
    line-height: 20px;
}
.code-line-components {
    margin-left: 0;
    padding: 0 0 20px 3.038em;
    overflow: auto;
}
.code-line-wrap ol li {
    padding: 2px 5px;
    position: relative;
    transition-duration: 0.2s;
    border: 0 solid #fff;
}
&lt;/style&gt;

</description>
        <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2018/02/05/gc_algorithms-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2018/02/05/gc_algorithms-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Garbage Collection 기본 개념</title>
        <description>&lt;h1 id=&quot;garbage-collection-background-개념&quot;&gt;Garbage Collection Background 개념&lt;/h1&gt;

&lt;p&gt;자바에서 garbage collection 은 어떤 오브젝트를 계속 사용할 수 있을지, 아니면 버려야할지를 추적하고 각 알고리즘별로 필요한 일을 하는 것이다.&lt;/p&gt;

&lt;p&gt;먼저 JVM에 구현된, 자동 메모리 청소기인 &lt;strong&gt;Garbage Collection&lt;/strong&gt; 에 대해 알아보기 위해 몇가지 개념을 알아두어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;manual-memory-management&quot;&gt;Manual Memory Management&lt;/h2&gt;

&lt;p&gt;먼저 Garbage Collection 을 설명하기 전에 앞서 자동으로 메모리를 청소하지 않는, 즉 C나 C++ 언어에서는 메모리 관리를 개발자 입장에서 수동으로 해주어야 한다. (스마트 포인터 같은 것은 생각하지 말고)&lt;/p&gt;

&lt;p&gt;C언어나 C++언어에서 다음과 같이 사용한 메모리를 해제해주지 않으면 바로 메모리 누수가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// …
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C나 C++언어를 개발해본 사람들은 메모리를 해제해주지 않을 때가 종종 있었을 것이다. 메모리 누수가 발생한다는 것은 추후에 어떠한 문제를 반드시 일으키게 되며, 이런 개발자들을 위해(?) 더 이상 사용하지 않는 메모리에 대해서는 자동으로 해제하자는 것이 &lt;strong&gt;Garbage Collection&lt;/strong&gt; 인 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;smart-pointers&quot;&gt;Smart Pointers&lt;/h3&gt;

&lt;p&gt;C++ 에서는 객체가 소멸될 때 자동으로 호출되는 소멸자 함수를 통해 메모리를 자동으로 해제하는 방법으로 스마트 포인터가 있다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;auto_ptr&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 자동으로 호출되는 소멸자 함수를 통해, 실제 객체를 delete 시킬 수 있다.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/shared_ptr&quot;&gt;C++ shared_ptr&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/weak_ptr&quot;&gt;C++ weak_ptr&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://en.cppreference.com/w/cpp/memory/unique_ptr&quot;&gt;C++ unique_ptr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;automated-memory-management&quot;&gt;Automated Memory Management&lt;/h2&gt;

&lt;p&gt;C, C++언어에서처럼 시스템적으로 자동으로 메모리 관리를 해줄 수 있다면 개발자 입장에서는 더 이상 메모리에 대해서는 신경을 쓰지 않을 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;시스템이 어느 메모리 영역(Garbage)이 더 이상 쓰이지 않고 재사용할 수 있을지 추적하고, 그리고 회수한 메모리를 다시 할당해준다는 것은 다른 말로 쓰레기 수집(Garbage Collection)이라 부를 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;reference-counting&quot;&gt;Reference Counting&lt;/h3&gt;

&lt;p&gt;C++ 에서 shared_ptr 이라는 스마트 포인터에는 레퍼런스 카운트라는 개념이 있다. 이 스마트 포인터는 내부적으로 레퍼런스 카운트를 유지하고 있다가, 이 값이 0이되면 그 때 해당 객체의 메모리를 해제하는 것이다. 또한 자바 뿐만 아니라, Perl이나 Python, PHP와 같은 언어들도 레퍼런스 카운트라는 개념이 있다.&lt;/p&gt;

&lt;p&gt;즉, 레퍼런스 카운트가 0이 된 객체들의 메모리는 더 이상 쓰이지 않는다고 봐도 좋으며 Garbage Collection의 대상이 되는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림에서 각 vertex는 객체를 의미하며, 쓰여진 번호는 현재 객체의 &lt;strong&gt;레퍼런스 카운트&lt;/strong&gt;를 의미한다. 그래프를 보면 알 수 있겠지만 각 vertex의 진입 차수이다.&lt;/p&gt;

&lt;p&gt;초록색 구름(GC Roots)으로부터 시작하는 &lt;strong&gt;푸른색 방향 그래프의 각 vertex들은 현재 사용 중인 객체를 의미한다.&lt;/strong&gt; 이 객체들은 지역 변수일 수도 있고, 스태틱 변수나 힙에 할당한 변수일 수도 있다.&lt;/p&gt;

&lt;p&gt;그리고 위의 그림에서 &lt;strong&gt;회색으로 표시된 방향 그래프의 각 vertex들은 현재 사용 중이지 않는 객체들이다.&lt;/strong&gt; 이들 객체들은 Garbage Collection의 대상 객체이다.&lt;/p&gt;

&lt;p&gt;또한 다음과 같이 &lt;strong&gt;사이클이 생긴 붉은색 방향 그래프의 객체들도 Garbage Collection의 대상이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mark-and-sweep&quot;&gt;Mark and Sweep&lt;/h3&gt;

&lt;p&gt;JVM에서는 위의 그래프에서 보여준대로, 개념적으로 GC Roots로부터 시작하여 &lt;strong&gt;닿을 수 있는(reachable) 객체들을 식별하고, 닿지 않는 객체들은 정리하여 그 객체들이 사용하던 메모리를 다시 사용할 수 있도록 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GC Roots라 부를 수 있는 객체들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local Variable (지역 변수)&lt;/li&gt;
  &lt;li&gt;Active Threads (현재 활성화된 스레드)&lt;/li&gt;
  &lt;li&gt;Static fields (정적 변수)&lt;/li&gt;
  &lt;li&gt;JNI Reference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JVM에는 이들 객체로부터 시작해서 참조되고 있는 모든 객체들을 식별하고, 닿지 않는 객체들의 메모리를 정리하는데 이를 &lt;strong&gt;Mark and Sweep&lt;/strong&gt; 알고리즘이라 부른다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mark: GC Roots 부터 시작하여 닿을 수 있는 모든 객체들을 식별하며, 그것을 기록해둔다.&lt;/li&gt;
  &lt;li&gt;Sweep: Mark 단계에서 식별되지 못한, 즉 닿을 수 없는 객체들의 메모리를 해제하여 재사용할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JVM에서 구현된 Garbage Collection 알고리즘 (Parall GC나 CMS, G1)마다 세부 동작은 다르지만 &lt;strong&gt;개념적으로는 위의 Mark and Sweep 알고리즘을 따른다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 사이클이 생긴 그래프의 객체 포함, GC Roots 로부터 닿지 않는 객체들은 모두 메모리 정리 대상이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;stop-the-world&quot;&gt;Stop The World&lt;/h3&gt;

&lt;p&gt;Garbage Collection이 일어나면 돌고 있던 애플리케이션 스레드들은 잠시 하던 일을 멈추어야 한다. 이를 STW(Stop-The-World) 라 부르며, JVM에서는 여러가지 이유로 발생하지만 보통 GC 때문에 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;garbage-collection-in-java&quot;&gt;Garbage Collection in Java&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;fragmenting-and-compacting&quot;&gt;Fragmenting and Compacting&lt;/h2&gt;

&lt;p&gt;메모리를 정리하는 작업인 Sweep 단계에서 JVM은 닿을 수 없는 객체들을 정리하여 그 객체들이 사용하던 메모리를 회수해야 한다. 그런데 이 메모리를 정리하는 단계에서 메모리 단편화(Memory Fragmentation)가 필연적으로 발생하게 되며 다음과 같은 문제를 일으킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write operation과 같은 작업들은 사용하기에 적절한 &lt;strong&gt;다음 메모리 블록&lt;/strong&gt;을 찾기 위해 시간을 더 소모하게 된다.&lt;/li&gt;
  &lt;li&gt;보통 객체를 새로 생성할 때는 그 객체들이 점유할 메모리 공간은 &lt;strong&gt;반드시 연속적이어야 한다.&lt;/strong&gt; 따라서 메모리 단편화가 발생하면, 전체 free 메모리 공간은 여유로운데도 불구하고 객체 생성에 실패할 수가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 문제를 피하기 위해 JVM은 메모리 단편화를 없애는 추가적인 작업을 수행한다. 이 작업이 바로 &lt;strong&gt;Compaction&lt;/strong&gt; 이며 닿을 수 있는 객체, 즉 현재 사용 중인 객체들을 한 곳으로 모으는 일이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;generational-hypothesis&quot;&gt;Generational Hypothesis&lt;/h2&gt;

&lt;p&gt;앞서 설명했지만, Garbage Collection이 발생하면 현재 running하고 있던 애플리케이션 스레드를 멈춘다. 이 멈추게 되는 시간을 줄이기 위한 방법으로 많은 연구가 진행되었다.&lt;/p&gt;

&lt;p&gt;David ungar 라는 사람이 1984년에 &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.122.4295&quot;&gt;‘Generation Scavenging: A Non-disruptive High Performance Storage Reclamation Algorithm’&lt;/a&gt; 라는 논문을 발표했는데, 여기서 가설을 하나 제시하면서 &lt;strong&gt;Generational GC&lt;/strong&gt; 를 소개한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대부분의 객체들은 보통 사용하고 &lt;strong&gt;바로 버려진다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실졔 통계로도 생성된 객체의 98%는 곧바로 사용되지 않고 바로 버려진다고 한다. 이 가설을 베이스로 JVM에서 관리하는 메모리 영역은 크게 &lt;strong&gt;Young 영역 및 Old 영역으로 나누었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;메모리 공간을 이 두개의 영역으로 나눈뒤 &lt;strong&gt;새로 생성하는 객체들은 Young 영역에서만 할당하고, 상대적으로 오래 살아남는 객체들은 Old 영역으로 보낸다. 그리고 Young 영역 위주로 청소해주는 것이 기본 아이디어이다.&lt;/strong&gt; 따라서 GC가 일어날 때마다 전체 메모리 공간을 다 살펴볼 필요없이 Young 영역 위주로 청소하면 되므로 STW 시간이 줄어들게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자주 GC가 일어나게 되겠지만 STW로 길게 한 번 멈추는 것보다는 짧게 여러 번 멈추는 것이 더 이익이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 JVM은 Young 영역을 청소할 때, 한 번에 다 비우기 때문에 GC 일어난 후에 Young 영역은 연속된 여유공간이 만들어지게 되므로 메모리 단편화를 완화시킬 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 두 개의 영역을 나눔으로써 한 가지 문제가 발생하게 되는데, &lt;strong&gt;어떤 객체가 서로 다른 영역의 객체를 바라보고 있다면 어떻게 할 것인가에 대한 문제가 발생한다.&lt;/strong&gt; 가령 Old 영역에 있는 객체가 Young 영역의 객체를 참조하고 있을 경우를 고려해야 되기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;memory-pools&quot;&gt;Memory Pools&lt;/h2&gt;

&lt;p&gt;다음 그림은 JVM에서 관리하는 메모리 영역을 나타낸 것이다. GC 알고리즘마다 세부 동작은 다르긴 하지만 메모리 공간의 영역을 공통적으로 이렇게 나누고 동작한다.&lt;/p&gt;

&lt;p&gt;다음 그림과 같이 Young 영역은 Eden과 두 개의 Survivor 영역으로 이루어져 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;eden&quot;&gt;Eden&lt;/h3&gt;

&lt;p&gt;Eden 영역에서는 보통 객체가 새로 생성될 때 할당받는 공간이다. 애플리케이션 스레드는 보통 여러 개이므로, 당연히 객체 생성도 동시에 발생할 수 있다. 따라서 보통 Eden 영역도 &lt;strong&gt;Thread Local Allocation Buffer (TLAB)&lt;/strong&gt; 라는 여러 영역으로 나뉜다. 이를 통해 동기화가 필요없이 각 애플리케이션 스레드들은 자신이 필요한 공간을 할당받을 수 있다.&lt;/p&gt;

&lt;p&gt;만약 스레드들이 자신의 TLAB로부터 메모리 공간을 할당받지 못하면, 메모리 할당은 스레드들에게 공유되는 Eden 영역에서 일어나게 된다. 만약 이 영역에서도 새로 할당할 충분한 여유 공간이 없다면, Eden 영역을 포함하는 Young 영역에서 GC가 발생하게 된다. 그런데 GC가 발생했는데도 충분한 메모리를 확보하지 못한다면 Old 영역에 대해서도 GC를 수행하게 될 것이다.&lt;/p&gt;

&lt;p&gt;Eden 영역에서 GC가 수행될 때, 앞서 언급했듯이 &lt;strong&gt;GC Roots라 불리는 객체로부터 시작하여 닿을 수 있는 객체들을 식별하여 Mark하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;앞서 언급한, 특정 객체가 서로 다른 영역의 객체를 참조하고 있을 때의 문제가 여기서 발생한다. 
기껏 전체 메모리 공간을 Young 영역과 Old 영역으로 나누어 Young 영역에 대해서만 청소를 함으로써 GC에 걸리는 시간을 줄여보려고 했더니, Old 영역도 검사를 해야 되기 때문이다.&lt;/p&gt;

&lt;p&gt;JVM은 &lt;strong&gt;card-marking&lt;/strong&gt; 를 통해 해결한다. 여기서는 Old 영역에 있는 객체가 Young 영역의 객체를 참조하고 있을 경우 Mark 해두었다가 GC 대상인지 식별하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://psy-lob-saw.blogspot.kr/2014/10/the-jvm-write-barrier-card-marking.html&quot;&gt;The JVM Write Barrier - Card Marking&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GC 대상인지를 식별하는 Mark 단계가 끝나면, &lt;strong&gt;Eden 영역의 살아있는 모든 객체들은 두 개의 Survivor 영역 중 하나의 영역으로 복사되며 Eden 영역은 완전히 비워지게 된다.&lt;/strong&gt; 이를 &lt;strong&gt;“Mark and Copy”&lt;/strong&gt; 라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;survivor-spaces&quot;&gt;Survivor spaces&lt;/h3&gt;

&lt;p&gt;JVM에서는 Survivor space에 해당하는 두 개의 분리된 영역을 관리하는데 “from” / “to”로 나뉜다. 여기서 중요한 것은 &lt;strong&gt;반드시 두 영역 중 하나는 비어있는 상태여야 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비워져 있는 Survivor 영역(to)은 &lt;strong&gt;다음 Young 영역의 GC가 발생할 때, Eden 영역 및 다른 Survivor 영역(from)에 있던 객체가 이사오는 곳이다.&lt;/strong&gt; 그리고 이 GC가 끝난 후, “from”에 해당하는 Survivor 영역은 비워지게 되며 각 영역의 역할은 바뀌게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/java/2018-02-03-what_is_garbage_collection/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 Survivor 영역 사이에서 일어나는 객체들의 복사 과정은 여러 번에 걸쳐서 일어나게 되는데, Young 영역에서의 GC가 일정 수준 이상으로 발생하였고 그 때까지도 살아남는 객체가 있다면 이 객체는 앞으로도 계속 사용되는 것으로 간주되는, 장수하는 객체로 분류된다.&lt;/p&gt;

&lt;p&gt;장수하는 객체로 분류되면, &lt;strong&gt;다음 Young 영역의 GC가 발생했을 때 다른 Survivor 영역으로 이동하는 것이 아니라 Old 영역으로 이동하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 장수하는 객체를 분류하기 위해서 JVM은 각 객체마다 age라는 값을 관리한다. GC가 일어날 때마다 살아남은 객체의 age 값은 증가하게 되며, 일정 수준 이상 도달했을 경우 그 객체는 Old 영역으로 이동하게 된다.&lt;/p&gt;

&lt;p&gt;JVM에서 자바 애플리케이션을 실행시킬 때, 이 threshold를 정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;XX:+MaxTenuringThreshold=값
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 값을 0으로 설정하면 아예 Survivor 영역을 사용하지 않는다는 것이고 (바로 Old 영역으로 이동하게 되므로), 기본 값은 15이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Survivor 영역의 공간이 살아있는 모든 Young 영역의 객체를 수용할 수 없을 경우에도 Old 영역으로의 객체 이동이 일어난다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;old-generation&quot;&gt;Old Generation&lt;/h3&gt;

&lt;p&gt;Old 영역에 대한 GC 구현은 Young 영역에 대한 GC 보다 더 복잡하다. Old 영역의 GC는 Young 영역의 GC보다 빈번하게 발생하지도 않고 (자바 애플리케이션을 이상하게 구현하지 않았다면), Old 영역의 객체들은 참조되고 있어 계속 살아있는 객체로 간주된다.&lt;/p&gt;

&lt;p&gt;Old 영역에 대한 GC 알고리즘은 세부 GC 구현에 따라 다르긴 하지만, 보통 다음과 같이 수행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특별히 reserved 된 bit를 통해 GC Roots로부터 닿을 수 있는(reachable) 객체들 Mark한다.&lt;/li&gt;
  &lt;li&gt;닿지 않는(Unreachable) 객체들은 삭제한다.&lt;/li&gt;
  &lt;li&gt;메모리 단편화를 피하기 위해, Old 영역의 시작점부터 살아 있는 객체들을 모은다. (이 때 객체 복사가 발생한다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Old 영역에 대한 GC는 어떻게 구현되었던 간에, 객체 할당에 실패할 정도의 메모리 단편화는 피해야 한다. (Compaction을 하지 않는 CMS GC도 메모리 단편화가 심해지면 Full GC를 수행한다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;permgen&quot;&gt;PermGen&lt;/h3&gt;

&lt;p&gt;Java 8 이전 버전에서는 &lt;strong&gt;“Permanent Generation&lt;/strong&gt;이라는 특수한 영역이 있었는데, 여기에는 class와 같은 메타데이터나 문자열과 같은 값들이 이 곳에 위치해 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class의 meta 정보&lt;/li&gt;
  &lt;li&gt;Method의 meta 정보&lt;/li&gt;
  &lt;li&gt;Static 객체&lt;/li&gt;
  &lt;li&gt;상수화된 String 객체&lt;/li&gt;
  &lt;li&gt;Class와 관련된 배열 객체 meta 정보&lt;/li&gt;
  &lt;li&gt;JVM 내부적인 객체들과 JIT 컴파일러의 최적화 정보&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 영역의 크기가 얼마나 적당할지를 예상하는 것은 매우 어려운 것이라 자바 개발자에게 많은 고민을 안겨주었다. 이 영역이 부족해지면 Permgen space에 대한 OOM이 발생하기 때문이었다. 아무 생각없이 Collection 객체를 static 으로 선언하고 계속 값을 추가하다보면 OOM이 발생한다. 또한 메모리에 로딩된 클래스와 클래스 로더가 종료되었을 때 GC가 되지 않을 경우 메모리 누수가 발생하였다.&lt;/p&gt;

&lt;p&gt;따라서 OOM이 발생하면, 이 문제를 해결하기 위한 방법으로 이 영역에 대한 크기를 늘려줌으로써 해결하였다. (최대 사이즈는 256MB 이다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:MaxPermSize=256m com.mycompany.MyApplication
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;metaspace&quot;&gt;Metaspace&lt;/h3&gt;

&lt;p&gt;이렇게 필요한 PermGen 영역 크기를 예상하는 것은 어려운 것이었기 때문에, Java 8에서는 이 영역을 없애고, Metaspace 라는 새로운 영역이 생겼다. PermGen 영역에 저장하던 값들 중에 static 객체와 같은 값들은 다 일반 heap 영역에 저장하여 최대한 GC 대상이 되도록 하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class의 meta 정보 -&amp;gt; Metaspace&lt;/li&gt;
  &lt;li&gt;Method의 meta 정보 -&amp;gt; Metaspace&lt;/li&gt;
  &lt;li&gt;Static 객체 -&amp;gt; Heap (Young or Old)&lt;/li&gt;
  &lt;li&gt;상수화된 String 객체 -&amp;gt; Heap (Young or Old)&lt;/li&gt;
  &lt;li&gt;Class와 관련된 배열 객체 meta 정보 -&amp;gt; Metaspace&lt;/li&gt;
  &lt;li&gt;JVM 내부적인 객체들과 JIT 컴파일러의 최적화 정보 -&amp;gt; Metaspace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Class 관련 meta 정보는 그대로 Metaspace 영역에 로드된다. 그리고 이 영역의 크기 제한은 &lt;strong&gt;오직 JVM의 native 메모리 크기에 제한되며 JVM이 필요에 따라 리사이징할 수 있는 구조로 개선되었다.&lt;/strong&gt; 따라서 개발자들은 자바 클래스를 계속 추가함으로써 발생하는 PermGen 영역에 대한 OOM을 피할 수 있게되었다. 하지만 Metaspace 영역이 계속 커지게 되면 가상 메모리 부족으로 인한 swap이 많이 발생하게 될 것이다.&lt;/p&gt;

&lt;p&gt;따라서 JVM은 Metaspace 영역의 크기를 제한할 수 있도록 옵션을 제공한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -XX:MaxMetaspaceSize=256m com.mycompany.MyApplication
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;minor-gc-vs-major-gc-vs-full-gc&quot;&gt;Minor GC vs Major GC vs Full GC&lt;/h1&gt;

&lt;p&gt;Heap 메모리에 있는 각기 다른 영역에 대한 GC는 종종 &lt;strong&gt;Minor GC / Major GC / Full GC&lt;/strong&gt; 로 불리기도 한다. 여기서 중요한 것은 애플리케이션 스레드를 멈추는가? 그리고 얼마나 오래 걸리는가인 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;minor-gc&quot;&gt;Minor GC&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Young 영역에 대한 GC를 Minor GC라고 한다&lt;/strong&gt;
Minor GC에 대해서 주의깊게 살펴보아야할 것은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Minor GC는 JVM이 새로운 객체를 생성하기 위해 충분한 메모리를 확보하지 못하면 무조건 발생한다. 보통 Eden 영역이 거의 full 인 상황일 것이다.  그래서 새로운 객체를 생성하는 일이 빈번하게 발생한다면, Minor GC도 그만큼 빈번하게 발생할 것이다.&lt;/li&gt;
  &lt;li&gt;Minor GC에서는 &lt;strong&gt;Old 영역의 객체가 Young 영역의 객체를 참조하고 있을 경우, 이 Old 영역의 객체를 GC Roots로 간주하고 Mark 한다.&lt;/strong&gt; Young 영역 객체가 Old 영역의 객체를 참조하고 있는 경우는 Mark 단계에서는 무시된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Minor GC는 이름과는 다르게, 애플리케이션 스레드를 멈추는 Stop-The-World를 유발한다.&lt;/strong&gt; 이는 GC 알고리즘 종류에 상관없다. 일단 객체의 복사는 일어나기 때문이다. Eden 영역 대부분의 객체를 비울 수 있고, Survivor 영역 및 Old 영역으로의 복사가 일어나지 않는다면 이 애플리케이션 스레드의 멈춤은 무시할만한 수준이다. 그러나 반대일 경우에는 빈번하게 발생하는 애플리케이션 스레드의 멈춤이 눈에 띄게 느껴질 수 있다는 것이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Minor GC의 정의는 간단하다. &lt;strong&gt;Young 영역을 청소하는 것이라 생각하면 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;major-gc-vs-full-gc&quot;&gt;Major GC vs Full GC&lt;/h2&gt;

&lt;p&gt;Major GC와 Full GC는 다음과 같이 정의할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Major GC는 Old 영역에 대한 GC이다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Full GC는 Young 영역 및 Old 영역을 모두 포함한, 전체 Heap 영역에 대해 GC를 수행한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 GC들에 대해서 우리가 염두해두어야 할 것은 애플리케이션 스레드를 멈추는 Stop-The-World를 유발하느냐, 아니면 애플리케이션 스레드와는 별도로 동시에 수행될 수 있는가에 대해 알아두어야 한다.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2018/02/04/what_is_garbage_collection-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2018/02/04/what_is_garbage_collection-post.html</guid>
        
        <category>java</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Node.js unload module 테스트</title>
        <description>&lt;h2 id=&quot;nodejs-모듈-시스템&quot;&gt;Node.js 모듈 시스템&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_require_cache&quot;&gt;Node.js require.cache&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_the_module_object&quot;&gt;Node.js module object&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node.js 에서 require 함수를 통해 외부의 모듈을 로드시키면 다음과 같이 require.cache에 배열 형태로 캐싱된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-02-03-node_js_unload_module/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;모듈 오브젝트들은 자신이 로드한 모듈들은 children 배열에 레퍼런스들로 가지고 있으며, 자신을 로드한 부모의 모듈 또한 parent 프로퍼티에 레퍼런스로 두고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-02-03-node_js_unload_module/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 계속 레퍼런스를 통해 모듈 오브젝트들을 참조하고 있기 때문에 require 함수를 통해 같은 모듈을 계속 import 하면 &lt;strong&gt;이미 로드된 같은 오브젝트들이 리턴된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Modules are cached after the first time they are loaded. This means (among other things) that every call to require(‘foo’) will get exactly the same object returned, if it would resolve to the same file. &lt;a href=&quot;https://nodejs.org/api/modules.html#modules_caching&quot;&gt;Node.js Caching&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node.js 에서 require 함수를 통해 한번 로드된 모듈들은 더 이상 사용하지 않더라도 &lt;strong&gt;레퍼런스를 통해 모듈 오브젝트들을 참조하고 있기 때문에 메모리를 계속 점유하고 있게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;delete-module&quot;&gt;Delete module&lt;/h2&gt;

&lt;p&gt;이렇게 require 함수를 통해 로드된 모듈들 중에서 더 이상 사용하지 않는 모듈들은 다음과 같이 레퍼런스들을 delete 키워드를 통해 삭제함으로써 모듈을 언로드시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'moduleName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'moduleName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_pathCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'moduleName'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_pathCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 require.cache 배열에서 지워주고, 자신을 로드한 부모 모듈 오브젝트의 children 배열에서 자신을 가리키는 레퍼런스도 삭제해야 한다.&lt;/p&gt;

&lt;p&gt;또한 Node.js 가 모듈을 위해 모듈 파일이 위치하는 path도 캐싱하는데, 여기에 있는 레퍼런스들도 삭제해주어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-02-03-node_js_unload_module/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 코드는 모듈 그 자체를 지우는 것이 아니라, 캐싱된 모듈을 가리키는 레퍼런스를 delete 함으로써 자바스크립트 garbage collection의 대상이 되게 하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// userCodes.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;userDefinedMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./userCodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// test&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'changed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// changed&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./userCodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// changed, 한번 로드된 모듈은 캐싱되고 있다.&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./userCodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// require.cache 에서 해당 모듈의 레퍼런스를 삭제한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 로드된 모듈들은 부모 모듈에서 children 배열에 레퍼런스로 참조되고 있으므로, 이 레퍼런스 또한 삭제해야 한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_pathCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_pathCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./userCodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// test, require.cache 에서 지웠으므로 다시 리로드된다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 위의 코드는 그 모듈의 레퍼런스만 삭제하는 것이지, 그 모듈이 의존하는 다른 모듈을 삭제하는 것은 아니다. 가령 예시로든 ‘userCodes.js’ 가 다른 모듈을 import 하고 있을 경우에는 그 모듈은 언로드되지 않는다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// userCodes.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./deplibs.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 이 모듈은 언로드되지 않는다.&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;userDefinedMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉, 어느 특정 모듈이 의존성을 가지는 다른 모듈들까지 검색하여 수동으로 delete를 해주어야 완벽하게 언로드시킬 수 있는 것이다. 따라서 모듈 오브젝트의 children 배열에 있는, 모듈이 require 함수를 통해 로드한 다른 모듈들의 레퍼런스도 삭제해야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 포스트에서 언급한 모듈 언로드 방법말고, Node.js 에서 제공하는 VM 모듈을 활용하면 런타임에 코드가 담긴 모듈을 실행시키고 종료시킬 수 있다. &lt;a href=&quot;https://nodejs.org/api/vm.html&quot;&gt;Node.js VM Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/742623/deleting-objects-in-javascript&quot;&gt;Deleting Objects in JavaScript&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/9210542/node-js-require-cache-possible-to-invalidate&quot;&gt;node.js require() cache - possible to invalidate?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/37620697/is-nodes-require-cache-garbage-collected&quot;&gt;Is Node’s require cache garbage collected?&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/6676612/unloading-code-modules&quot;&gt;unloading code/modules&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/dwyl/decache&quot;&gt;decache - An easy way to delete a cached module.&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/02/03/node_js_unload_module-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/02/03/node_js_unload_module-post.html</guid>
        
        <category>node.js</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Node.js Module</title>
        <description>&lt;h2 id=&quot;nodejs-모듈&quot;&gt;Node.js 모듈&lt;/h2&gt;

&lt;p&gt;자바스크립트는 웹페이지에 있어서 보조적인 기능을 수행하기 위한 한정적인 용도로 만들어진 태생적인 한계로 다른 언어에 비해 부족한 점이 있는데, 대표적으로 모듈 기능이 없는 것이다.&lt;/p&gt;

&lt;p&gt;이를 위해 ES2015 에서는 모듈을 위한 키워드가 추가되었다. &lt;a href=&quot;https://dhsim86.github.io/web/2018/02/03/javascript_es6_module-post.html&quot;&gt;ECMAScript6 (ES2015) Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node.js는 CommonJS 방식을 따라 모듈 기능을 지원하고 있다. &lt;a href=&quot;https://nodejs.org/api/modules.html&quot;&gt;Node.js Modules&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Node.js에서도 ES2015 방식의 모듈 시스템을 v8.5.0 부터 지원한다. &lt;a href=&quot;https://nodejs.org/en/blog/release/v8.5.0/&quot;&gt;Node v8.5.0 changes&lt;/a&gt; / &lt;a href=&quot;https://github.com/nodejs/node/commit/c8a389e19f172edbada83f59944cad7cc802d9d5&quot;&gt;Node commit log: “module: Allow runMain to be ESM”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Node.js는 모듈 단위로 각 기능을 분할할 수 있는데, 모듈은 파일과 1:1 대응 관계를 가지며 각각의 모듈은 &lt;strong&gt;만의 독립적인 실행 영역(Scope) 를 가진다.&lt;/strong&gt; 따라서 client-side 자바스크립트와는 다르게 전역변수의 중복 문제가 발생하지 않는다.&lt;/p&gt;

&lt;p&gt;모듈은 &lt;strong&gt;module.exports 또는 exports&lt;/strong&gt; 객체를 통해 외부로 공개한다. 그리고 공개한 모듈은 &lt;strong&gt;require&lt;/strong&gt; 함수를 이용하여 import 시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;exports&quot;&gt;exports&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_exports&quot;&gt;Node.js exports&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;모듈은 독립적인 파일 스코프를 가지므로, 모듈 안에 선언된 모든 것들은 기본적으로 해당 모듈 내부에서만 참조가능하다. 만약 모듈 안에 선언한 항목을 외부에 공개하여 다른 모듈들이 사용할 수 있게 하고 싶다면 exports 객체를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;모듈을 파일로 작성하고, 외부에 공개할 항목을 exports 객체의 프로퍼티 또는 메소드로 정의한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// circle.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circumference&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 독립적인 파일 스코프를 가지는 모듈이다. 이 모듈에서는 area와 circumference 를 exports 객체의 메소드로 정의하였다. 변수 PI는 circle 모듈에서만 유효한 private 변수가 되고, area와 circumference 는 외부에 공개된다.&lt;/p&gt;

&lt;p&gt;위의 모듈을 다른 쪽에서 사용하기 위해서는 &lt;strong&gt;require&lt;/strong&gt; 함수를 통해 임의의 이름으로 모듈을 import 한다. 확장자는 생략 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./circle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// == require('./circle')&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`The area of a circle of radius 4 is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; The area of a circle of radius 4 is 50.26548245743669&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 때 모듈은 객체로 반환된다. 따라서 위와 같이 circle.area / circle.circumference 와 같이 참조한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;moduleexports&quot;&gt;module.exports&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_module_exports&quot;&gt;Node.js module.exports&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;exports 객체는 프로퍼티 또는 메소드를 여러 개 정의할 수 있었다. 하지만 module.exports 는 하나의 값 (기본자료형, 함수, 객체)를 할당할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// square.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 모듈에서 module.exports 에 하나의 함수를 할당하였고 다음과 같이 import 한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./square.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mySquare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`The area of my square is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mySquare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; The area of my square is 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 square 변수는 module.exports 에 할당한 값 자체이다.
exports와 module.exports는 혼동하기 쉬운데, &lt;strong&gt;exports는 module.exports에의 참조이며, module.exports의 alias이다.&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구분&lt;/th&gt;
      &lt;th&gt;모듈 정의 방식&lt;/th&gt;
      &lt;th&gt;require 함수의 호출 결과&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;exports&lt;/td&gt;
      &lt;td&gt;exports 객체 자체에는 값을 할당할 수 없으며,&lt;br /&gt; 프로퍼티 또는 메소드를 추가하는 식으로 정의해야 한다.&lt;/td&gt;
      &lt;td&gt;exports 객체에 추가한 프로퍼티와 메소드가 담긴 객체로 전달된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;module.exports&lt;/td&gt;
      &lt;td&gt;module.exports 자체에 하나의 값을 할당한다.&lt;/td&gt;
      &lt;td&gt;module.exports 객체에 할당한 값이 전달된다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;moduleexports-에-함수를-할당하는-방식&quot;&gt;module.exports 에 함수를 할당하는 방식&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// foo.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 module.exports 에는 1개의 값만 할당가능하다. 다음과 같이 객체를 정의하여 복수의 값을 하나로 묶어 공개하는 방식도 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// foo.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 3&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;require&quot;&gt;require&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_require&quot;&gt;Node.js require&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;require 함수의 파라미터로 모듈을 의미하는 파일뿐만 아니라, 디렉토리를 지정할 수도 있다.
다음과 같은 디렉토리 구조를 가지고 있다고 생각하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project /
|---- app.js
|---- module /
      |---- index.js
      |---- calc.js
      |---- print.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 모듈을 명시하지 않고, require 함수를 호출하면 해당 디렉토리의 &lt;strong&gt;index.js 를 로드한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 index.js 에서 다음과 같이 calc.js와 print.js를 require 하면 한 번의 require 로 alc.js 와 print.js 의 모든 기능을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// module/index.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./calc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./print'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// module/calc.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;minus&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// module/print.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hi!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// module/calc.js의 기능&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// module/print.js의 기능&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;코어-모듈과-파일-모듈&quot;&gt;코어 모듈과 파일 모듈&lt;/h2&gt;

&lt;p&gt;Node.js에서 기본으로 포함하고 있는 모듈을 &lt;strong&gt;코어 모듈이라고 한다.&lt;/strong&gt; 코어 모듈을 로딩할 때는 모듈 파일이 위치한 path를 명시하지 않아도 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 npm을 통해 설치한 외부 패키지 모듈 또한 path를 명시하지 않아도 된다.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/02/03/node_js_module-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/02/03/node_js_module-post.html</guid>
        
        <category>node.js</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>ECMAScript6 (ES2015) Module</title>
        <description>&lt;h2 id=&quot;자바스크립트에게-있어서-모듈&quot;&gt;자바스크립트에게 있어서 모듈&lt;/h2&gt;

&lt;p&gt;프로그램에서 모듈이란 각 기능의 분할과 그 분할의 결합으로 생각할 수 있다. 
프로그램이 커지면 &lt;strong&gt;필연적으로 코드를 쪼개는 행위 (코드의 모듈화)가 필요해진다.&lt;/strong&gt; 당연히 프로그램 로직을 하나의 파일에 우겨넣는 것 보다는 여러 개의 파일로 기능을 나누는 것이 개발하기에 더 편한다.&lt;/p&gt;

&lt;p&gt;보통 다른 언어에 대해서는 이러한 모듈화를 위해 언어 차원에서 지원한다. C언어에서는 #include, 자바는 import 를 쓰는 등, 대부분의 언어는 모듈 기능을 가지고 있다.&lt;/p&gt;

&lt;p&gt;그런데 자바스크립트, 특히 client-side 자바스크립트의 경우 &amp;lt;script&amp;gt; 태그를 통해 외부의 스크립트 파일을 가져올 수는 있지만, &lt;strong&gt;파일마다 독립적인 파일 scope를 가지고 있지 않고 하나의 전역 객체 (Global Object)에 바인딩되므로 전역변수가 중복되는 등의 문제가 발생할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자바스크립트는 웹페이지에 있어서 보조적인 기능을 수행하기 위한 한정적인 용도로 만들어진 태생적인 한계로 다른 언어에 비해 부족한 부분이 있는 것이 사실이다. 그 대표적인 것이 모듈 기능이 없는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바스크립트는 언어레벨에서 명시적인 지원을 하지 않으며 따라서 이러한 경우를 고려한 자바스크립트의 일반적인 모듈 구현은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// private&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;private name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// public &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 외부 공개&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 구현하면 변수에 대해 private / public 키워드를 사용한 것과 같은 접근제어를 할 수 있으며, 그로 인한 캡슐화로 모듈 사용이 쉬운 장점이 있지만, 여러 개의 모듈을 선언하면서 exports 객체에 프로퍼티가 겹칠 경우 앞서 선언된 값은 덮어써지는 문제가 있고, &lt;strong&gt;모듈 간의 의존성이 있을 때 의존성을 정의하기가 매우 어렵다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이것으로는 모듈화를 구현할 수는 없다.&lt;/p&gt;

&lt;p&gt;자바스크립트를 client-side에 국한되지 않고, 범용적으로 사용하기 위해서는 모듈 기능이 반드시 해결되어야 하는 핵심 과제가 되었고 이런 상황에서 제안된 것이 &lt;strong&gt;&lt;a href=&quot;http://www.commonjs.org/&quot;&gt;CommonJS&lt;/a&gt;&lt;/strong&gt; 와 &lt;strong&gt;&lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot;&gt;AMD(Asynchronous Module Definition)&lt;/a&gt;&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;결국 자바스크립트 모듈화는 크게 CommonJS 진영과 AMD 진영으로 나뉘게 되었고, 브라우저에서 모듈을 사용하기 위해서는 CommonJS 또는 AMD를 구현한 모듈 로더 라이브러리를 사용해야 하는 상황이 되었다.&lt;/p&gt;

&lt;p&gt;ES6 (ES2015)에서는 client-side 자바스크립트에서도 동작하는 모듈 기능을 추가하였지만, 대부분의 브라우저가 ES6의 모듈을 지원하지 않으므로 ES6 모듈을 사용하기 위해서는 &lt;strong&gt;&lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;&lt;/strong&gt;나 &lt;strong&gt;&lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;&lt;/strong&gt; 등의 모듈 로더 또는, &lt;strong&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;&lt;/strong&gt; 등의 모듈 번들러를 사용해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Server-side 의 node.js 는 모듈 시스템의 사실상 표준 (de facto standard)인 CommonJS를 채택하였고,  현재는 100% 동일하지 않지만 기본적으로 CommonJS 방식을 통해 모듈 기능을 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;export--import&quot;&gt;export &amp;amp; import&lt;/h2&gt;

&lt;p&gt;ES6 에서는 모듈 기능을 위해 키워드 &lt;strong&gt;export / import&lt;/strong&gt; 를 제공한다.
모듈은 독립적인 파일 스코프를 가지므로, 모듈 안에 선언한 모든 것들은 기본적으로 해당 모듈 내부에서만 참조 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;export&quot;&gt;export&lt;/h3&gt;

&lt;p&gt;만약 모듈 안에 선언한 항목을 외부에 공개하여 다른 모듈들이 사용할 수 있게 하고 싶다면 export 해야 한다. 변수 / 함수 / 클래스 모두 export 할 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 선언문 앞에 export 키워드를 사용함으로써 외부에 노출시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 위와 같이 매번 export 키워드를 사용하는 것이 싫다면, export 대상을 모아 객체로 구성하여 한 번에 export 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;import&quot;&gt;import&lt;/h3&gt;

&lt;p&gt;export 한 모듈을 로드하려면 export 된 이름으로 다음과 같이 import 한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;각각의 이름을 지정하지 않고, 하나의 이름으로 한 번에 import 할 수 있으며 이 때 import 되는 항목은 &lt;strong&gt;as 뒤에 지정한 객체의 프로퍼티가 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또는 이름을 변경하여 import 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Kim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;default&quot;&gt;default&lt;/h3&gt;

&lt;p&gt;모듈에서 하나만 export 하는 경우, &lt;strong&gt;default 키워드를 사용할 수 있다.&lt;/strong&gt; 
default를 사용할 때, var / let / const 키워드는 사용할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 다음과 같이 축약 표현 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 default 키워드를 사용해 export 한 모듈은 import 할 때, 다음과 같이 임의의 이름으로 import 한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./lib'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;아직까지 대부분의 브라우저에서는 ES6의 모듈을 지원하지 않으므로 ES6 모듈을 브라우저에서 사용하기 위해서는 앞서 언급한  &lt;strong&gt;&lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;SystemJS&lt;/a&gt;&lt;/strong&gt;나 &lt;strong&gt;&lt;a href=&quot;http://requirejs.org/&quot;&gt;RequireJS&lt;/a&gt;&lt;/strong&gt; 등의 모듈 로더 또는, &lt;strong&gt;&lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;&lt;/strong&gt; 등의 모듈 번들러를 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://d2.naver.com/helloworld/12864&quot;&gt;JavaScript 표준을 위한 움직임: CommonJS와 AMD&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://poiemaweb.com/es6-babel&quot;&gt;ECMAScript6 - Babel + Webpack&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.javarouka.me/2013/04/requirejs-javascript.html&quot;&gt;RequireJS – JavaScript 파일 및 모듈 로더&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://hjlog.me/post/117&quot;&gt;Webpack 적용기 1 : 왜 필요한가?&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/02/03/javascript_es6_module-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/02/03/javascript_es6_module-post.html</guid>
        
        <category>javascript</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 09: 스프링 프로젝트 시작하기</title>
        <description>&lt;p&gt;스프링은 어떤 종류의 애플리케이션에 대해서도 잘 들어맞도록 매우 유연하게 설계된 범용 프레임워크이다. 그래서 아키텍처의 종류나 프로젝트를 구성하는 방법에 대한 자유도가 매우 높지만, 그만큼 구성 방법이나 아키텍처를 선택할 때 주의해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;자바-엔터프라이즈-플랫폼과-스프링-애플리케이션&quot;&gt;자바 엔터프라이즈 플랫폼과 스프링 애플리케이션&lt;/h2&gt;

&lt;p&gt;스프링으로 만들 수 있는 애플리케이션의 종류에는 제한이 없다. &lt;strong&gt;자바 언어를 사용하는 모든 종류의 프로젝트라면 어디든 사용할 수 있다.&lt;/strong&gt; 하지만 스프링은 주로 자바 엔터프라이즈 환경에서 동작하는 애플리케이션을 개발하는 목적으로 사용된다.&lt;/p&gt;

&lt;p&gt;자바 엔터프라이즈 애플리케이션은 서버에서 동작하며, 클라이언트를 상대로 서비스를 제공하도록 되어 있다. 즉 클라이언트의 요청을 받아 그에 대한 작업을 수행하고, 그 결과를 돌려주는 것이 기본적인 동작 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;클라이언트와-백엔드-시스템&quot;&gt;클라이언트와 백엔드 시스템&lt;/h3&gt;

&lt;p&gt;엔터프라이즈 애플리케이션은 자신이 클라이언트가 되어서 또 다른 엔터프라이즈 시스템에 서비스를 요청할 수도 있다. 가장 많이 사용되는 구조는 클라이언트가 웹 브라우저이고 백엔드 시스템이 DB인 구성이다.&lt;/p&gt;

&lt;p&gt;스프링의 주요 기능은 웹 브라우저를 클라이언트로 하고 DB에 데이터를 저장, 조회하는데에 집중되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그렇다고 해서 꼭 클라이언트가 웹 브라우저여야 하며, 백엔드 시스템은 DB를 이용해야 하는 것은 아니다. 자바가 받아들일 수 있는 요청이나 제공하는 접속 방식을 사용한다면 클라이언트나 백엔드 시스템은 무엇이든 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애플리케이션-서버&quot;&gt;애플리케이션 서버&lt;/h3&gt;

&lt;p&gt;스프링으로 만든 애플리케이션을 자바 서버환경에 배포하려면 &lt;strong&gt;JavaEE (또는 J2EE) 서버가 필요하다.&lt;/strong&gt;
JavaEE 표준을 따르는 애플리케이션 서버는 크게 두 가지로 구분할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;경량급 WAS / 서블릿컨테이너
    &lt;ul&gt;
      &lt;li&gt;웹 모듈의 배포만 가능한 경량급 WAS 또는 서블릿/JSP 컨테이너이다. 스프링은 기본적으로 톰캣이나 제티와 같은 가벼운 서블릿 컨테이너만 있어도 충분하다. 이런 서블릿 컨테이너만으로도 엔터프라이즈 애플리케이션에 필요한 핵심기능을 모두 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WAS
    &lt;ul&gt;
      &lt;li&gt;미션 크리티컬한 시스템에서 요구하는 고도의 안정성과 고성능을 요구한다면 상용 또는 오픈소스 WAS를 사용할 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 JavaEE 표준 기술을 적극적으로 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;애플리케이션-아키텍처&quot;&gt;애플리케이션 아키텍처&lt;/h2&gt;

&lt;p&gt;아키텍처는 여러 가지 방식으로 정의되고 이해될 수 있는 용어이다. &lt;strong&gt;어떤 경계안에 있는 내부 구성요소들이 어떤 책임을 갖고 있고, 어떤 방식으로 서로 관계를 맺고 동작하는지를 규정하는 것이라고 할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아키텍처는 단순히 정적인 구조를 나타내는 것으로 생각하기 쉽지만, 실제로는 그 구조에서 일어나는 &lt;strong&gt;동적인 행위와 깊은 관계가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;계층형-아키텍처&quot;&gt;계층형 아키텍처&lt;/h3&gt;

&lt;p&gt;관심, 책임, 성격, 변하는 이유와 방식이 서로 다른 것들을 분리함으로써 &lt;strong&gt;분리된 각 요소의 응집도는 높여주고 서로의 결합도를 낮추는&lt;/strong&gt; 관심사의 분리는 아키텍처 단위로 크게 확장해볼 수도 있다.&lt;/p&gt;

&lt;p&gt;애플리케이션을 구성하는 오브젝트들을 &lt;strong&gt;비슷한 성격과 책임을 가진 것들끼리 묶을 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DAO: 데이터 엑세스 로직&lt;/li&gt;
  &lt;li&gt;서비스: 특정 기술과 환경에 종속되지 않으며 도메인의 업무에는 밀접한 관련을 갖는 POJO 오브젝트
    &lt;ul&gt;
      &lt;li&gt;주로 DAO를 이용해 정보의 저장과 검색을 진행하고, DB의 엔티티 모델과 유사한 도메인 오브젝트를 이용해 데이터를 주고 받는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프레젠테이션: 서블릿 컨테이너로부터 받은 사용자의 요청정보를 해석하고, POJO 기반의 서비스 오브젝트에게 전달하고, 결과를 받아 웹 사용자로 하여금 표시가능한 형태로 변환&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;오브젝트들의 단위 또한 유사한 성격을 가진 그룹별로 나누는 것이 좋다. 성격과 책임이 다른 것들이 얽혀 있으면 반드시 문제가 발생한다. 그래서 아키텍처 레벨에 대해서도 성격이 다른 것들은 분리하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 책임과 성격이 다른 것을 크게 그룹으로 만들어 분리해두는 것을 아키텍처 차원에서는 &lt;strong&gt;계층형 아키텍처&lt;/strong&gt;라고 부른다. 보통 웹 기반의 엔터프라이즈 애플리케이션은 3개 계층으로 분류된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3계층-아키텍처와-수직-계층&quot;&gt;3계층 아키텍처와 수직 계층&lt;/h3&gt;

&lt;p&gt;보통 다음 그림과 같이 DB나 백엔드 시스템과 연동하는 인터페이스 역할을 하는 데이터 엑세스 계층, 비즈니스 로직을 담는 서비스 계층, 웹 기반의 UI를 만들고 흐름을 관리하는 프레젠테이션 계층으로 구분한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;데이터 엑세스 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 계층은 &lt;strong&gt;DAO 계층&lt;/strong&gt;이라고도 하며, DAO 패턴을 보편적으로 사용한다. 또한 이 데이터 엑세스 계층은 DB 외에도 ERP, 레거시 시스템, 메인 프레임 등에 접근하는 역할을 하므로 EIS(Enterprise Information System) 계층이라고도 한다.&lt;/p&gt;

&lt;p&gt;데이터 엑세스 계층은 다시 세분화된 계층으로 분류할 수도 있다. 이 계층에서 다시 세분화하는 것은 추상화 수준에 따른 구분이므로, 수직적인 계층이라고도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 JdbcTemplate가 추상화를 위한 계층으로 사용되어 로우레벨의 기술들을 간접적으로 이용하게 만들 수 있다. 이런 수직적인 계층에서 사용자 정의 계층을 추가하면 그 계층은 &lt;strong&gt;하위 계층의 변화에 대응해야 하는 책임도 가지게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 추상 계층을 새로 추가하는 것이 부담되고, 때에 따라서는 유연하게 하위 계층의 API를 활용할 필요가 있다면 공통적인 기능을 분리하여 유틸리티나 헬퍼 메소드 또는 오브젝트로 제공하는 것도 좋은 방법이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;서비스 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;잘 만들어진 스프링 애플리케이션의 서비스 계층 클래스는 이상적인 &lt;strong&gt;POJO로 작성된다.&lt;/strong&gt;
POJO로 만든다면 객체지향적인 설계 기법이 적용된 코드를 통해 비즈니스 로직의 핵심을 담아내고 이를 쉽게 테스트하고 유연하게 확장할 수 있다.&lt;/p&gt;

&lt;p&gt;보통 서비스 계층은 DAO 계층을 호출하고 이를 활용해서 만들어진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;특별한 경우가 아니라면 추상화된 수직적인 계층구조를 가질 필요가 없다. 서비스 계층은 기술 API를 직접 다루지 않으므로, 기술에 일관된 방식으로 접근하거나 편하게 사용하는 추상화는 필요가 없기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;시스템 레벨이나 다른 서버에서 제공하는 기반 서비스를 사용할 때도 DAO처럼 독립적인 계층의 서비스를 이용하는 것으로 봐야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원칙적으로는 서비스 계층 코드가 기반 서비스 계층의 구현에 종속되면 안된다.&lt;/strong&gt; 추상화된 서비스 인터페이스를 통해서만 접근하도록 만들어 특정 구현과 기술에 대한 종속성을 제거해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이상적인 서비스 계층은 데이터 엑세스 및 프레젠테이션 계층이 모두 바뀌어도 유지될 수 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;프레젠테이션 계층&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 계층은 가장 복잡한 계층으로 매우 다양한 기술과 프레임워크의 조합을 가질 수 있다. &lt;strong&gt;웹과 프레젠테이션 기술은 끊임없이 발전하고 새로운 모델이 등장하기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보통 자바 엔터프라이즈 애플리케이션의 프레젠테이션 계층은 HTTP 프로토콜을 사용하는 서블릿이 바탕이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTML과 자바스크립트만을 사용하는 브라우저이든, 플래시 애플리케이션이나 RESTful 스타일 클라이언트또는 WS-* 방식의 웹 서비스 클라이언든 상관없이 대부분의 엔터프라이즈 애플리케이션을 사용하는 클라이언트들은 HTTP 프로토콜을 선호한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;화면 흐름을 결정하고 입력 값에 대한 검증, 서비스 계층의 호출과 전달되는 값의 포맷의 변화, 뷰라고 불리는 화면을 어떻게 그릴지에 대한 처리를 담당한다.&lt;/p&gt;

&lt;p&gt;스프링은 웹 기반의 프레젠테이션 계층을 개발할 수 있는 전용 웹 프레임워크를 제공할 뿐만 아니라 다양한 서드파티 웹 기술을 지원하므로 아예 프레젠테이션 계층을 통째로 스프링이 아닌 다른 웹 기술을 가져다 쓸 수도 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;계층형-아키텍처-설계의-원칙&quot;&gt;계층형 아키텍처 설계의 원칙&lt;/h3&gt;

&lt;p&gt;오브젝트와 그 관계에 적용했던 대부분의 객체지향 설계의 원칙은 &lt;strong&gt;아키텍처 레벨의 계층과 그 관계에도 동일하게 적용할 수 있다.&lt;/strong&gt; 각 계층은 응집도가 높으면서 다른 계층과 낮은 결합도를 유지할 수 있어야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;각 계층은 자신의 역할에만 충실해야하고 자신과 관련된 기술이 아닌 다른 기술의 API 사용을 삼가야 한다. 자신의 역할과 기술에만 충실한 계층을 만들면 각 계층간의 결합도는 자연스럽게 낮아질 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특정 계층에서 어느 필요한 작업을 다른 계층에게 부탁할 때, 계층 레벨에서 정의한 인터페이스를 통해서 요청하고 다음과 같이 그 인터페이스 메소드에서는 특정 계층의 기술이 드러나면 안된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findUsersByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 메소드의 문제점은 데이터 엑세스 계층의 기술과 그 역할을 다른 계층에 노출한다는 점이다. 결국 이 것을 사용하는 계층에서는 &lt;strong&gt;ResultSet&lt;/strong&gt; 이라는 데이터 엑세스 계층에서 만들어진 오브젝트를 직접 다루어야 한다. 또한 &lt;strong&gt;SQLException&lt;/strong&gt; 이라는 예외를 해석하여 분석하고 처리하는 코드도 들어간다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;계층간에 강한 결합이 생기면 유연성이 떨어지기 때문에 각 계층의 내부 구현이 변화하면 다른 계층의 코드도 함께 수정해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 메소드는 다음과 같이 특정 계층의 기술이나 구현에 종속되지 않도록 바꾸어야 한다. 또한 예외도 스프링의 &lt;strong&gt;DataAccessException&lt;/strong&gt; 처럼 특정 기술에 종속되지 않는 런타임 예외로 만들어야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findUsersByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 프레젠테이션 계층에서 주로 사용하는 오브젝트 (ex: HttpServletRequest or HttpServletResponse)들을 서비스 계층 인터페이스 메소드의 파라미터 타입으로 사용해서는 안된다.&lt;/p&gt;

&lt;p&gt;어떤 경우에라도 &lt;strong&gt;계층 사이의 낮은 결합도를 깨뜨리지 않도록 설계해야 한다.&lt;/strong&gt; 이를 위해 계층 사이의 호출은 &lt;strong&gt;인터페이스를 통해 이루어져야 한다.&lt;/strong&gt;. 인터페이스를 사용하더라도 메소드 추가 / 변경시 매우 신중하게 결정하고 계층 내부의 예상되는 변화에도 쉽게 바뀌지 않도록 해야 한다. (다른 계층에서 꼭 필요한 메소드만 노출)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;한 계층의 내부에서만 사용되도록 만든 빈 오브젝트가 있는데, DI를 통해 다른 계층에서 함부로 가져다 쓰는 것도 피해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;애플리케이션-정보-아키텍처&quot;&gt;애플리케이션 정보 아키텍처&lt;/h2&gt;

&lt;p&gt;엔터프라이즈 시스템은 &lt;strong&gt;동시에 많은 작업이 빠르게 수행되어야 하는 시스템이다.&lt;/strong&gt;
사용자의 작업 상태를 오래 유지하는 독립형 애플리케이션과는 다르게 엔터프라이즈 애플리케이션은 &lt;strong&gt;사용자의 요청을 처리하는 동안만 간단한 상태를 유지한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션의 주요 상태 정보는 주로 &lt;strong&gt;DB나 벡엔드 시스템에 분산되어서 저장된다.&lt;/strong&gt; 하나의 작업이 여러 번의 요청과 페이지에 걸쳐 일어나는 경우에 유지되는 &lt;strong&gt;임시 상태정보는 클라이언트에 일시적으로 보관되기도 하고 서버의 사용자별 세션 메모리에 저장되기도 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션을 사이에 두고 &lt;strong&gt;흘러다니는 정보를 어떤 식으로 다룰지를 결정하는 일도 아키텍처를 결정할 때 매우 중요한 기준이 된다.&lt;/strong&gt; &lt;strong&gt;단순히 데이터로 다루는 경우&lt;/strong&gt;와 &lt;strong&gt;오브젝트로 다루는 경우&lt;/strong&gt;, 두 가지 기준으로 구분해볼 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 중심 아키텍처: 애플리케이션에 흘러다니는 정보를 단순히 &lt;strong&gt;값이나 값을 담기 위한 목적의 오브젝트 형태로 취급하는 구조이다.&lt;/strong&gt; DB나 백엔드 시스템에서 가져온 정보를 값으로 다루고, 그 값을 취급하는 로직을 구현하고 그대로 프레젠테이션 계층의 뷰와 연결해주는 것이다. 보통 DB에서 돌려주는 내용을 그대로 맵이나 단순 결과 저장용 오브젝트를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;db--sql-중심의-로직-구현-방식&quot;&gt;DB / SQL 중심의 로직 구현 방식&lt;/h3&gt;

&lt;p&gt;데이터 중심 구조의 특징은 하나의 업무 트랜잭션에 &lt;strong&gt;모든 계층의 코드가 종속되는 경향이 있다는 점이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용자의 이름으로 사용자 정보를 검색하여 보여주는 작업이 있다고 했을 때, 이 아키텍처에서 &lt;strong&gt;검색 조건과 같은 비즈니스 로직은 SQL로 만들어진다.&lt;/strong&gt; 만약 클라이언트에서 사용자 정보 중에 가입일자 중에서 연도만을 보여준다고 하면, 해당하는 필드에서 연도를 추출하는 것은 &lt;strong&gt;SQL의 날짜처리 function&lt;/strong&gt;을 사용해야 한다. &lt;strong&gt;즉, SQL은 이미 화면에 어떤 식으로 출력할지를 알고 있는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQL 결과를 맵이나 오브젝트로 프레젠테이션 계층에 전달된다고 했을 때, &lt;strong&gt;서비스 계층은 별로 할 것이 없고, 프레젠테이션 계층의 해당 뷰는 SQL에서 정확히 어떤 필드값을 리턴할지, 어떤 포맷으로 전달하는지 알고 있다.&lt;/strong&gt;
프레젠테이션 계층에서는 DB에서 돌려준 값을 그대로 사용한다.&lt;/p&gt;

&lt;p&gt;따라서 이런 구조는 &lt;strong&gt;하나의 특정 업무에 모든 계층의 코드가 종속되며 업무의 내용이 바뀌면 모든 계층의 코드가 함께 변경된다.&lt;/strong&gt; 따라서 다른 단위의 업무에 재사용하기에도 힘들다. 대부분의 코드는 대응되는 작업 단위에 1:1로 매핑되고, 여러 작업에서 반복되는 기능이 있다면 그에 대한 코드는 중복되기 쉽다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;보통 서비스 계층이 프레젠테이션 계층에 전달하는 결과의 포맷은 DAO의 SQL 결과와 같고, 웹 페이지의 출력 내용과도 1:1로 대응된다. 따라서 대부분의 코드는 하나의 작업 단위에 1:1로 매핑된다. 따라서 코드의 중복이 일어나기 쉽다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 방식은 &lt;strong&gt;자바코드를 단지 DB와 웹 화면을 연결해주는 단순한 인터페이스로 전락시킨다.&lt;/strong&gt; 또한 SQL의 변화가 일어나면 모든 계층이 다 변경되어야 한다. 겉보기에는 각 계층이 독립적으로 보이긴 하지만, 그 사이를 이동하는 &lt;strong&gt;데이터가 일종의 접착제 역할을 해서 계층간의 강한 결합을 만들게 된다.&lt;/strong&gt; 따라서 변화에 매우 취약하다.&lt;/p&gt;

&lt;p&gt;로직을 DB와 SQL에 많이 담으면 확장성이 떨어지며, 복잡한 SQL을 처리하기 위해 제한된 자원인 DB에 큰 부담을 주게된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상대적으로 애플리케이션 서버와 그 안에 담긴 오브젝트는 비용이 적게 든다. 서버를 늘려 쉽게 확장할 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 SQL과 프로시저에 담긴 로직은 테스트하기에도 힘들다. 따라서 &lt;strong&gt;DB에는 부하를 가능한 주지 않는 간단한 작업만 하고, 복잡한 로직은 오브젝트에 담아 애플리케이션 내에서 처리하는 것이 낫다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;거대한-서비스-계층의-방식&quot;&gt;거대한 서비스 계층의 방식&lt;/h3&gt;

&lt;p&gt;DB에서 가져온 데이터가 애플리케이션에 흘러다니는 정보의 중심이 되는 아키텍처이기는 하지만, &lt;strong&gt;DB보다는 애플리케이션 코드의 비중을 높인 방식이다.&lt;/strong&gt; DB에는 부하가 걸리지 않도록 하면서, 주요 로직은 서비스 계층의 로직에서 처리하도록 하는 것이다. 따라서 DB / SQL 중심 구현 방식에서 객체지향 개발의 장점을 살릴 기회가 많아진다.&lt;/p&gt;

&lt;p&gt;하지만 여전히 &lt;strong&gt;SQL의 결과를 그대로 담고 있는 단순한 오브젝트나 맵을 통해 데이터를 계층간에 주고 받는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서비스 계층의 코드는 여전히 업무 트랜잭션 단위로 만들어지므로 DAO를 공유할 수 있다는 것을 제외하고 코드의 중복이 많이 발생하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 엑세스 계층의 SQL은 서비스 계층의 비즈니스 로직의 필요에 따라 만들어지기 쉽고, 따라서 계층간의 결합도는 여전히 크다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오브젝트-중심-아키텍처&quot;&gt;오브젝트 중심 아키텍처&lt;/h2&gt;

&lt;p&gt;이 아키텍처는 객체지향 분석과 모델링의 결과로 나오는 도메인 모델을 오브젝트 모델로 활용한다.
&lt;strong&gt;도메인 모델을 반영하는 오브젝트 구조를 만들고, 그 것을 각 계층 사이에서 정보를 전송하는데 사용하고 이를 이용해 비즈니스 로직이나 프레젠테이션 로직을 작성한다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;대개 도메인 모델은 DB 엔티티 설계에도 반영되기 때문에 관계형 DB의 엔티티 구조와도 유사한 형태일 가능성이 높다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 방식에서는 애플리케이션에서 사용하는 정보가 &lt;strong&gt;도메인 모델의 구조를 반영해서 만들어진 오브젝트 안에 담긴다.&lt;/strong&gt; 도메인 모델은 애플리케이션 &lt;strong&gt;전 계층에서 동일한 의미를 갖기 때문에&lt;/strong&gt; 이 오브젝트는 전 계층에서 일관된 구조를 유지한 채로 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 모델을 따르는 오브젝트 구조를 만들려면 DB에서 가져온 데이터를 도메인 오브젝트 구조에 맞게 변환해줄 필요가 있다. 단, 한 번 변환되면 그 이후의 작업은 수월해진다. 따라서 서비스 / 프레젠테이션 계층에서 DAO에서 어떤 SQL을 사용했는지, 어떤 방식으로 DB에서 조회를 했는지 알 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 계층간의 결합도는 낮아지고, 일관된 정보 모델을 사용하므로, 개발 생산겅과 코드의 품질, 테스트 편의성도 향상시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;도메인-오브젝트-사용의-문제점&quot;&gt;도메인 오브젝트 사용의 문제점&lt;/h3&gt;

&lt;p&gt;데이터 중심 아키텍처에서 쓸 수 있는 최적화된 SQL을 사용할 때에 비해 &lt;strong&gt;성능 면에서 조금 손해를 볼 수 있다.&lt;/strong&gt; 비즈니스 로직에서 도메인 오브젝트의 모든 필드가 필요할 때도 있고, 아닐 때도 있기 때문이다.&lt;/p&gt;

&lt;p&gt;또한 DB 엔티티 구조를 반영하는 도메인 오브젝트를, 특정 비즈니스 로직은 이 오브젝트와 연관된 다른 도메인 오브젝트를 사용할 때도 있고 다른 비즈니스 로직에서는 필요없을 때가 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 위해 &lt;strong&gt;지연된 로딩&lt;/strong&gt; 기법을 활용하면, 일단 최소한의 오브젝트 정보만 읽어두고 관계된 다른 오브젝트가 필요한 경우에만 다이내믹하게 DB에서 다시 읽어오게 할 수 있다. 보통 지연된 로딩 기법은 하이버네이트나 JPA와 같은 데이터 엑세스 기술에서 제공해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;빈약한-도메인-오브젝트-방식&quot;&gt;빈약한 도메인 오브젝트 방식&lt;/h3&gt;

&lt;p&gt;도메인 오브젝트에 정보만 담겨 있고, &lt;strong&gt;정보를 활용하는 아무런 기능은 담겨져 있지 않다.&lt;/strong&gt;
이 방식에서 도메인 오브젝트를 다루는 비즈니스 로직은 서비스 계층에 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SQL에 의존적인 데이터 중심의 아키텍처에 비해서는, 도메인 오브젝트를 사용함으로써 유연하고 간결하긴 하지만 여전히 서비스 계층의 메소드에는 대부분의 비즈니스 로직이 들어가 있어 재사용성이 떨어지고 코드의 중복이 발생하기 쉽다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;풍성한-도메인-오브젝트-방식&quot;&gt;풍성한 도메인 오브젝트 방식&lt;/h3&gt;

&lt;p&gt;도메인 오브젝트나 그 오브젝트가 가진 &lt;strong&gt;정보와 깊은 관계가 있는 비즈니스 로직을 도메인 오브젝트에 넣고, 서비스 계층에서는 이를 활용하도록 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이렇게 설계하면 도메인 오브젝트를 다루는 로직을 서비스 계층에 둘 때보다 응집도가 높다. &lt;strong&gt;데이터와 그것을 사용하는 기능이 한 곳에 모여있기 때문이다.&lt;/strong&gt; 특정 도메인 오브젝트에 종속되는 비즈니스 로직은 각 서비스 계층의 오브젝트가 아니라 도메인 오브젝트에 넣으면 된다.&lt;/p&gt;

&lt;p&gt;이 방식에서 서비스 계층에서는 여러 도메인 오브젝트의 기능을 조합해서 복잡한 처리를 수행하거나, 데이터 엑세스 계층, 다른 기반 계층을 호출할 필요가 있는 로직을 구현한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도메인 오브젝트는 스프링에 의해 관리되는 빈이 아니므로, 직접 데이터 엑세스 계층이나 다른 서비스 계층을 호출할 수 없기 때문이다. 도메인 오브젝트는 필요에 따라 새롭게 만들어지는 오브젝트이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2018-01-20-toby_spring_09_start_spring_project/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;풍성한 도메인 오브젝트 방식에서는 빈약한 도메인 오브젝트 방식보다 서비스 계층의 코드가 간결하여 로직을 이해하기도 쉽다.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2018/01/20/toby_spring_09_start_spring_project-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2018/01/20/toby_spring_09_start_spring_project-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 08: 스프링이란 무엇인가?</title>
        <description>&lt;p&gt;스프링은 기본적으로 IoC와 DI를 위한 컨테이너로서 동작하지만, 단순히 “스프링은 IoC/DI 프레임워크” 라고는 말할 수 없다. 스프링은 엔터프라이즈 애플리케이션 개발의 전 영역에 걸쳐 다양한 종류의 기술에 관여한다.&lt;/p&gt;

&lt;p&gt;스프링에 대해 가장 잘 알려진 정의는 이렇다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애플리케이션-프레임워크&quot;&gt;애플리케이션 프레임워크&lt;/h3&gt;

&lt;p&gt;보통 라이브러리나 프레임워크는 웹 계층을 MVC 구조로 쉽게 만든다거나 포맷과 출력장치를 유연하게 바꿀 있는 애플리케이션 로그 기능, 관계형 DB와 자바 오브젝트를 매핑해주는 ORM 기술을 제공하는 등  &lt;strong&gt;특정 분야나 기술에 특화된 목표를 가지고 개발된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그러나 스프링은 이와는 다르게 &lt;strong&gt;애플리케이션 프레임워크&lt;/strong&gt; 라는 특징을 가지고 있다.&lt;/p&gt;

&lt;p&gt;애플리케이션 프레임워크란 특정 계층이나 기술, 분야에 국한되지 않고 &lt;strong&gt;애플리케이션의 전 영역을 포괄하는 범용적인 프레임워크&lt;/strong&gt; 를 말한다. 즉, 애플리케이션 개발의 전 과정을 빠르고 편리하게 그리고 효율적으로 진행할 수 있도록 돕는데 일차적인 목표를 두는 프레임워크이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;스프링이 단지 여러 계층의 다양한 기술을 모아두었다고 애플리케이션 프레임워크라고 불리는 것이 아니다. 애플리케이션 전 영역을 관통하는 &lt;strong&gt;일관된 프로그래밍 모델과 핵심 기술을 바탕으로 각 분야의 특정에 맞는 필요를 채워주고 있다.&lt;/strong&gt; 따라서 스프링을 활용하면 애플리케이션을 빠르고 효과적으로 개발할 수 있다.&lt;/p&gt;

&lt;p&gt;보통 스프링을 IoC/DI 프레임워크나 AOP 툴이라고 보는 건 스프링에 제공하는 핵심 기술에만 주목했기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 일차적인 존재 목적은 핵심 기술에 담긴 프로그래밍 모델을 일관성있게 적용해서, 애플리케이션 전 계층과 전 영역에 전략과 기능을 제공해줌으로써, &lt;strong&gt;애플리케이션을 보다 편리하게 개발하게 해주는 애플리케이션 프레임워크로 사용되는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;경량급-lightweight&quot;&gt;경량급 (lightweight)&lt;/h3&gt;

&lt;p&gt;스프링이 경량급이라는 것은 스프링 자체가 가볍다거나 작은 규모의 기술로 만들어졌다는 것이 아닌 &lt;strong&gt;불필요하게 무겁지 않다는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;개발환경과 테스트 과정, 코드 등 매우 복잡하게 만들던 EJB에 비해, 스프링은 단순한 개발툴과 기본적인 개발환경으로도 엔터프라이즈 개발에서 필요한 주요한 기능을 갖춘 애플리케이션을 개발할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 스프링을 활용해서 만든 비즈니스 로직이 다른 프레임워크를 사용할 때에 비해서, &lt;strong&gt;가볍다고 단순하다는 것이다.&lt;/strong&gt; 스프링은 기존 코드에 불필요하게 등장하던 &lt;strong&gt;프레임워크나 서버환경에 의존적인 부분을 제거해주기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;자바-엔터프라이즈-개발을-편하게&quot;&gt;자바 엔터프라이즈 개발을 편하게&lt;/h3&gt;

&lt;p&gt;스프링은 엔터프라이즈 개발의 복잡함을, 그 근본적인 문제점에 도전하여 해결책을 제시한다. 편리한 애플리케이션 개발이란 &lt;strong&gt;복잡하고 실수하기 쉬운 로우레벨 기술에 많은 신경을 쓸 필요없이, 애플리케이션의 핵심인 비즈니스 로직을 빠르고 효과적으로 구현하는 것을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;EJB의 비전과 목표도 바로 이 것이었지만, 다른 차원의 복잡함을 애플리케이션 개발에 끌고오는 바람에 더 어려워지고 복잡해지는 문제가 있었다.&lt;/p&gt;

&lt;p&gt;스프링은 개발자들이 자신이 작성하는 비즈니스 로직에 더 많은 관심과 시간을 쏟도록 해준다. 스프링의 기본설정과 적용기술만 잘 선택하고 준비해두면, 개발할 때 스프링과 관련된 코드나 API에 대해 거의 신경 쓸 일이 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;오픈소스&quot;&gt;오픈소스&lt;/h3&gt;

&lt;p&gt;스프링은 오픈소스 프로젝트 방식으로 개발되어 왔으며, 아파치 라이언스 2.0을 사용함으로써 비교적 사용이 자유롭다. 그리고 오픈소스 개발의 한계점인 &lt;strong&gt;지속적이고 안정적인 개발이 계속될지가 불확실한 점&lt;/strong&gt; 을 개발을 책임지고 진행할 수 있는 전문 기업(스프링 소스)을 만듬으로써 해결하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-목적&quot;&gt;스프링의 목적&lt;/h2&gt;

&lt;p&gt;스프링의 목적은 &lt;strong&gt;경량급 프레임워크인 스프링을 활용해서 엔터프라이즈 애플리케이션 개발을 편하게&lt;/strong&gt; 하는 것이다.
굳이 스프링을 사용해서 엔터프라이즈 개발을 편하게 하려는 이유는 원래 &lt;strong&gt;엔터프라이즈 개발이란 편하지 않기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;엔터프라이즈-개발의-복잡함&quot;&gt;엔터프라이즈 개발의 복잡함&lt;/h3&gt;

&lt;p&gt;엔터프라이즈 시스템 개발이 복잡한 이유는 크게 두 가지 원인을 생각해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 기술적인 제약조건과 요구사항 증가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔터프라이즈 시스템이란 &lt;strong&gt;서버에서 동작하며 기업과 조직의 업무를 처리해주는 시스템&lt;/strong&gt;을 말한다. 엔터프라이즈 시스템은 많은 사용자의 요청을 동시에 처리해야 하므로 서버의 자원을 효율적으로 공유하고 분배해서 사용할 수 있어야 한다. 또한 보안과 안정성, 확장성 면에도 뛰어나야 하기 때문에 그런 점을 고려한 개발기술이 필요하다.&lt;/p&gt;

&lt;p&gt;즉, 엔터프라이즈 시스템을 개발하는 데는 &lt;strong&gt;순수한 비즈니스 로직을 구현하는 것 외에도 기술적으로 고려할 사항이 많다는 것이다.&lt;/strong&gt; 따라서 이런 기술적인 문제를 고려하면서 애플리케이션을 개발해야 하는 부담을 안게 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 비즈니스 로직의 복잡함이 증가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔터프라이즈 시스템을 이용해 기업의 핵심 업무를 처리하는 비율이 늘어났고, 그만큼 다양하고 복잡한 업무 처리 기능을 엔터프라이즈 시스템이 구현해야 한다는 점이다. 원래 기업 업무란 그 자체로 복잡한데다, 다양한 예외상황도 많고 처리해야 하는 정보의 규모도 상당하다.&lt;/p&gt;

&lt;p&gt;요즘에는 경제 흐름과 사회의 변화, 업계의 추이에 따라 &lt;strong&gt;수시로 업무 프로세스를 변경하고 조종하는 것을 상시화할 만큼 변화의 속도가 빨라졌다.&lt;/strong&gt; 이런 변화는 이를 뒷받침해주어야 하는 엔터프라이즈 시스템의 변경을 요구할 수밖에 없다. 이는 기능 요구사항과 업무 정책 등이 수시로 바뀌므로 애플리케이션을 자주 수정해주어야 하는 시대가 된 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;복잡함을 가중시키는 원인&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;엔터프라이즈 개발이 실패하는 주요 원인은 &lt;strong&gt;비즈니스 로직의 복잡함과 기술적인 복잡함&lt;/strong&gt;이다. 복잡하다는 것은 단지 양이 많고 어렵다는 뜻이 아니다. 세부 요소가 이해하기 힘든 방식으로 얽혀 있고, 그 때문에 쉽게 다루기 어렵다는 의미이다.&lt;/p&gt;

&lt;p&gt;또한 엔터프라이즈 시스템 개발이 가장 어려운 이유는 &lt;strong&gt;근본적인 비즈니스 로직과 엔터프라이즈 기술이라는 두 가지 복잡함이 한 데 얽혀있기 때문이다.&lt;/strong&gt; 만약 트랜잭션이나 각종 라이브러리, DB 관련 API 등을 비즈니스 로직 구현 코드와 함께 한데 얽혀 있다면 매우 개발이 어려워진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;전통적인 자바 엔터프라이즈 개발 기법은 대부분 비즈니스 로직의 복잡한 구현 코드와 엔터프라이즈 서비스를 이용하는 기술적인 코드가 혼재될 수밖에 없는 방식이었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;복잡함을-해결하려는-도전&quot;&gt;복잡함을 해결하려는 도전&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;제거될 수 없는 근본적인 복잡함&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;근본적으로 엔터프라이즈 개발의 복잡함을 효과적으로 상대할 수 있는 전략과 기법이 필요하다. 문제는 &lt;strong&gt;비즈니스 로직의 복잡함을 효과적으로 다루는 방법과 기술적인 복잡함을 다루는 방법이 다르다는 점이다.&lt;/strong&gt; 따라서 두 가지 복잡함이 코드에 한데 어우러져 나타나는 전통적인 개발 방식에서는 효과적으로 복잡함을 다루기가 힘들다.&lt;/p&gt;

&lt;p&gt;따라서 가장 먼저 할 일은 &lt;strong&gt;성격이 다른 두 가지 복잡함을 분리하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 실패한 해결책:EJB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;EJB도 또한 이 두 가지 종류의 복잡함을 분리하는 것이었다. 개발자가 &lt;strong&gt;로우레벨의 기술적인 복잡함에 신경 쓰지 않고 비즈니스 로직을 효과적으로 개발하는 데 더 집중할 수 있게 하자는 목표가 있었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 기존 EJB는 그런 목표를 달성하는데 실패하였다. 기술적인 복잡함을 애플리케이션 핵심 비즈니스 로직에서 분리하는 것은 성공하긴 했지만, 이를 위해 특정 인터페이스를 구현하고 특정 클래스를 상속받고 서버에 종속적인 서비스를 통해서만 접근하고 사용이 가능하게 하는 EJB 개발방식은 잘못된 선택이었다.&lt;/p&gt;

&lt;p&gt;애플리케이션 로직에서 기술적인 코드가 제거된 건 사실이지만, &lt;strong&gt;EJB라는 환경과 스펙에 종속되는 코드로 만들어져야 하는 더 큰 부담을 안게 되었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 EJB라는 틀 안에서 자바코드를 만들게 강제함으로써 &lt;strong&gt;자바 언어가 원래 갖고 있던 장점마저 잃어버렸다는 것이다.&lt;/strong&gt; EJB의 특정 클래스를 상속받게 함으로써 더 이상 상속구조를 적용하지 못하게 만들거나 다형성 적용을 제한한다거나 하는 것들이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 비침투적인 방식을 통한 효과적인 해결책:Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 EJB의 실패를 교훈으로 삼아 출발했다. EJB의 목표와 마찬가지로 &lt;strong&gt;기술적인 복잡함을 애플리케이션 핵심 로직의 복잡함에서 제거하는 데 목표를 뒀다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그러나 EJB처럼 개발자의 코드에 난입해서 지저분하고 복잡한 코드를 만들어버리는 실수를 하지는 않았다. EJB처럼 &lt;strong&gt;어떤 기술을 적용했을 때 그 기술과 관련된 코드나 규약 등이 코드에 등장하는 경우를 침투적인(invasive) 기술이라고 한다.&lt;/strong&gt; 꼭 필요해서 사용하기는 하지만 그렇다고 그 기술을 위해 특정 클래스나 인터페이스, API 등의 코드가 마구 등장한다면 그것은 침투적인 기술이 되며 복잡함을 가중시키게 된다.&lt;/p&gt;

&lt;p&gt;반면에, &lt;strong&gt;비침투적인(non-invasive) 기술은 기술의 적용 사실에 코드에 직접 반영되지 않는다는 특징이 있다.&lt;/strong&gt; 기술을 적용해야하므로 필요한 작업을 해줘야 하겠지만 애플리케이션 코드에 갑자기 등장하거나 코드의 설계와 구현 방식을 제한하지 않는다.&lt;/p&gt;

&lt;p&gt;스프링이 성공할 수 있었던 것은 바로 &lt;strong&gt;비침투적인 기술이라는 전략을 택했기 때문이다.&lt;/strong&gt; 스프링을 사용하면 &lt;strong&gt;기술적인 복잡함과 비즈니스 로직을 다루는 코드를 깔끔하게 분리할 수 있다. 중요한 것은 그 과정에서 스프링 스스로가 애플리케이션 코드에 불필요하게 나타나지 않도록 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이를 통해 성격이 다른 복잡함을 깔끔하게 분리해주어 각각의 복잡함을 효과적으로 상대할 수 있는 기반이 마련되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;복잡함을-상대하는-스프링의-전략&quot;&gt;복잡함을 상대하는 스프링의 전략&lt;/h3&gt;

&lt;p&gt;스프링의 기본적인 전략은 &lt;strong&gt;비즈니스 로직을 담은 애플리케이션 코드와 엔터프라이즈 기술을 처리하는 코드를 분리시키는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 기술적 복잡함을 상대하는 전략&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 엔터프라이즈 기술을 적용했을 때 발생하는 복잡함의 문제를 &lt;strong&gt;두 가지로 분류하고 각각에 대해 적절한 대응 방법을 제공한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;가. 첫 번째 문제: 기술에 대한 접근 방식이 일관성이 없고, 특정 환경에 종속적일 때&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;환경이 바뀌고, 서버가 바뀌고 적용되는 조건이 바뀔 때 기술이 달라지고 그에 따라 코드도 바뀌는 것은 심각한 문제이다. 비록 동일한 목적으로 만들어졌으나 API의 사용 방버이 다르고 접근 방식이 다른 기술이 난립하는 것이 현실이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 일관성 없는 기술과 서버 환경의 변화에 따른 스프링의 공략 방법은 서비스 추상화이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션 추상화나 OXM 추상화, 데이터 엑세스에 관한 일관된 예외변환 기능, 데이터 엑세스 기술에 독립적으로 적용가능한 트랜잭션 동기화 기법 등이 대표적인 예이다. &lt;strong&gt;기술적인 복잡함은 일단 추상화를 통해 로우레벨의 기술 구현 부분과 기술을 사용하는 인터페이스를 분리하고, 환경과 세부 기술에 독립적인 접근 인터페이스를 제공하는 것이 가장 좋은 해결책이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자바메일과 같은 잘못 설계된, 그러나 표준으로 자리잡은 기술에 대해서도 테스트의 편의성과 세부 환경에 독립적인 코드를 위해 서비스 추상화를 적용할 필요가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 엑세스 예외에 대한 추상화는 비즈니스 로직을 담은 서비스 레이어의 코드가 특정 기술이 발생시키는 예외에 종속되지 않도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;템플릿/콜백 패턴은 판에 박힌 반복적인 작업 흐름과 API 사용 코드를 제거해준다. 이를 통해 기술을 사용하는 코드도 핵심로직에만 집중하도록 도와준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;나. 두 번째 문제: 기술적인 처리를 담당하는 코드가 성격이 다른 코드에 섞여서 등장할 때&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비즈니스 로직 전후로 경계가 설정되어야 하는 트랜잭션이나 보안 적용, 계층 사이에 주고받는 데이터와 예외의 일괄 변환이나 로깅과 같은 것이 대표적인 예이다.&lt;/p&gt;

&lt;p&gt;이런 기술과 비즈니스 로직의 혼재로 발생하는 복잡함을 해결하기 위해 스프링의 접근 방법은 &lt;strong&gt;AOP 이다.&lt;/strong&gt; AOP는 최후까지 애플리케이션 로직을 담당하는 코드에 남아 있는 기술 관련 코드를 깔끔하게 분리하여 별도의 모듈로 관리하게 해주는 강력한 기술이다. &lt;strong&gt;기술적인 코드가 여기저기 중복돼서 나타나는 문제를 AOP를 통해 해결하였다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 비즈니스와 애플리케이션 로직의 복잡함을 상대하는 전략&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;비즈니스 로직을 담은 코드는 애플리케이션에서 가장 &lt;strong&gt;중요한 핵심이 되는 부분이다. 또한 업무의 변화에 따라 자주 변경되거나 수정되어야 하는 부분이기도 하다.&lt;/strong&gt; 엔터프라이즈 기술을 처리하는 코드와는 다르게 비즈니스 로직에 오류가 발생하면 반드시 큰 사고가 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 비즈니스 로직은 가장 중요하게 다루어져야 하고 가장 많이 신경써야 하는 부분이다. 예전에는 비즈니스 로직을 DB에 두는 것이 유행이었지만, 엔터프라이즈 시스템의 규모가 커짐에 따라 &lt;strong&gt;비즈니스 로직은 애플리케이션 안에서 처리하는 것이 추세이다.&lt;/strong&gt; DB는 단지 데이터의 저장과 복잡한 조건을 가진 검색과 같은 특화된 기능에만 활용하고 데이터 분석 및 가공, 로직을 처리하는 부분은 확장하기 쉽고 비용이 싼 애플리케이선 서버 쪽으로 이동하는 것이다.&lt;/p&gt;

&lt;p&gt;자바는 객체지향 언어의 장점을 잘 살려서 설계된 언어이다. 객체지향 프로그램 기법과 언어가 주는 장점인 유연한 설계가 가능하고 재사용성이 높다는 점을 활용한다면 자주 바뀌고 조건이 까다로운 비즈니스 로직을 효과적으로 구현할 수 있다. 환경에 종속적인 기술과 침투적인 기법으로 인해 추가된 &lt;strong&gt;군더더기에 방해만 받지 않는다면 객체지향 언어의 장점을 잘 살려 복잡함을 최대한 효과적으로 다룬 비즈니스 로직을 구현하는 것은 어렵지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 이 비즈니스 로직 구현에 있어서 전혀 관여하지 않으며 다만 &lt;strong&gt;비침투적인 기술을 통해 비즈니스 로직을 담당하는 오브젝트들에게 적절한 엔터프라이즈 기술 서비스가 제공되도록 은밀히 도와준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;결국 비즈니스 로직의 복잡함을 상대하는 전략은 &lt;strong&gt;자바라는 객체지향 기술 그 자체이다. 단지 스프링는 객체지향 언어의 장점을 제대로 살리지 못하게 방해했던 요소를 제거하도록 도와줄 뿐이다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링의-핵심도구-객체지향과-di&quot;&gt;스프링의 핵심도구: 객체지향과 DI&lt;/h3&gt;

&lt;p&gt;기술과 비즈니스 로직의 복잡함을 해결하는데에 있어서 스프링은 지향하는 것은 &lt;strong&gt;객체지향 프로그래밍의 장점을 취하자는 것이다.&lt;/strong&gt; 객체지향에 충실한 설계가 가능하도록 오브젝트를 개발하고 객체지향 설계 기법을 잘 적용할 수 있도록 &lt;strong&gt;DI와 같은 유용한 기술을 편하게 적용하도록 도와주는 것이 스프링의 기본전략이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서비스 추상화나 탬플릿/콜백, AOP와 같은 스프링의 기술은 모두 DI를 바탕으로 하고 있다. &lt;strong&gt;DI란 특별한 기술이라기보다는 유연하게 확장할 수 있는 오브젝트 설계를 하다 보면 자연스럽게 적용되는 객체지향 프로그래밍 기법일 뿐이다.&lt;/strong&gt; 스프링은 단지 그것을 더욱 편하고 쉽게 사용하도록 해준다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DI는 객체지향적인 설계와 개발로 이끌어주는 좋은 동반자이다. 오브젝트 설계시 성격이 다른 코드가 무엇이고 변경의 이유가 다른 기능은 무엇인지 생각하면서 DI를 적용하다보면 객체지향 설계의 원칙을 잘 따르고 그 장점을 살린 설계가 나올 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링을 사용하고 DI를 적용했다고 하지만 기계적인 방법으로 항상 사용하는 틀에 박힌 구조의 빈만 적용하고 나머지 코드에는 DI를 적용할 생각을 안 한다면 DI를 잘못 사용하고 있는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;기술적인 복잡함 자체를 해결하는 것이나 이 복잡함이 비즈니스 로직에 침범하지 못하도록 분리하는 경우에는 DI가 바탕이 되는 여러가지 기법이 활용된다. 반면에 비즈니스 로직 자체의 복잡함을 해결하려면 &lt;strong&gt;객체지향 설계 기법이 더 중요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링이 힘들게 비즈니스 로직 자체를 기술적인 코드와 특정 기술의 스펙이 침범하지 않도록 힘을 쓴 이유는 &lt;strong&gt;단지 코드가 좀 더 단순해지고 명확해지기 때문만이 아니다. 순수한 비즈니스 로직을 담고 있는 코드는 객체지향 분석과 설계기법을 쉽게 적용할 수 있기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉, 스프링의 기술과 전략은 &lt;strong&gt;객체지향이라는 자바 언어가 가진 강력한 도구를 극대화해서 사용할 수 있도록 돕는 것이라고 볼 수 있다.&lt;/strong&gt; 스프링만 잘 사용한다고 복잡한 엔터프라이즈 시스템 개발을 잘할 수 있는 것은 아니다. 객체지향을 잘 활용하여 복잡한 문제를 해결할 수 있는 개발자의 능력에 달려있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;pojo-프로그래밍&quot;&gt;POJO 프로그래밍&lt;/h2&gt;

&lt;p&gt;스프링의 핵심 개발자들은 &lt;strong&gt;스프링의 정수는 엔터프라이즈 서비스 기능을 POJO에 제공하는 것&lt;/strong&gt; 이라고 했다. 이를 바꾸어 말하면 엔터프라이즈 서비스 기술과 POJO라는 애플리케이션 로직을 담은 코드를 분리했다는 뜻이기도 하다.&lt;/p&gt;

&lt;p&gt;분리되었지만 반드시 필요한 엔터프라이즈 기술을 POJO 방식으로 개발된 애플리케이션 핵심 로직을 담은 코드에 제공하는 것이 스프링의 가장 강력한 특징과 목표이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링의-핵심-pojo&quot;&gt;스프링의 핵심: POJO&lt;/h3&gt;

&lt;p&gt;다음 그림은 스프링 소스의 CTO인 아드리안 콜리어가 스프링의 핵심 개념을 설명하기 위해 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링 애플리케이션은 &lt;strong&gt;POJO를 이용해서 만든 애플리케이션 코드와, POJO가 어떻게 관계를 맺고 동작하는지를 정의해놓은 설계정보로 구분된다.&lt;/strong&gt; 스프링의 주요기술인 IoC/DI, AOP와 PSA(Portable Service Abstraction, 서비스 추상화)은 애플리케이션을 POJO로 개발할 수 있게 해주는 가능기술(enabling technology)이라고 불린다.&lt;/p&gt;

&lt;p&gt;POJO는 &lt;strong&gt;Plain Old Java Object&lt;/strong&gt; 의 약자다. 다음 조건을 충족해야 POJO라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 특정 규약에 종속되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;POJO는 자바 언어와 꼭 필요한 API 외에는 종속되지 않아야 한다.&lt;/strong&gt; 따라서 EJB2나 같은 특정 규약에 따라 비즈니스 컴포넌트를 만들어야 하는 경우는 POJO가 아니다. 특정 클래스를 상속하게 하는 것과 같이 특정 규약에 따라 작성하면 객체지향적인 설계 기법을 적용하기가 어려워진다. &lt;strong&gt;규약에 종속되지 않고, 객체지향 설계의 자유로운 적용이 가능한 오브젝트여야만 POJO라고 불릴 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 특정 환경에 종속되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;POJO는 &lt;strong&gt;환경에 독립적&lt;/strong&gt;이어야하며, 비즈니스 로직을 담고 있는 POJO 클래스가 환경정보나 특정 기술을 담는 클래스나 인터페이스를 사용하면 안된다. 가령 비즈니스 로직을 담은 코드에 HttpServletRequest나 HttpSession, 캐시와 관련된 API 등이 등장하면 이는 POJO라고 부를 수 없다.&lt;/p&gt;

&lt;p&gt;요즘에는 메타정보를 추가해주는 annotation 을 많이 사용하는데, 이를 통해 코드로 표현하기에는 적절하지 않는 부가적인 정보를 담거나 그 때문에 환경에 종속되지 않는다면 POJO라고 불릴 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;특정 규약이나 환경에 종속되지 않는다고 모두 POJO 인 것은 아니다. POJO는 그 뿐만 아니라 객체지향적인 자바 언어의 기본에 충실하게 만들어져야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;POJO는 객체지향적인 원리에 충실하면서, 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브젝트를 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pojo의-장점&quot;&gt;POJO의 장점&lt;/h3&gt;

&lt;p&gt;POJO 프로그래밍의 장점은 바로 POJO가 될 수 있는 조건이 바로 장점이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;특정한 기술과 환경에 종속되지 않는 오브젝트는 그만큼 깔끔한 코드가 될 수 있다.&lt;/strong&gt; 이렇게 개발된 코드는 자동화된 테스트에 유리할 뿐만 아니라, 객체지향적인 설계를 자유롭게 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pojo-프레임워크&quot;&gt;POJO 프레임워크&lt;/h3&gt;

&lt;p&gt;스프링은 POJO를 이용한 엔터프라이즈 애플리케이션 개발을 목적으로 하는 프레임워크이다. 엔터프라이즈 애플리케이션 개발의 모든 영역과 계층에서 POJO 방식의 구현이 가능하게 하려는 목적으로 만들어졌다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-11-18-toby_spring_08_what_is_spring//01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림은 스프링이 어떻게 엔터프라이즈 시스템의 복잡함을 다루는지를 보여준다. &lt;strong&gt;스프링은 비즈니스 로직의 복잡함과 엔터프라이즈 기술의 복잡함을 분리해서 구성할 수 있도록 도와준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;자신은 기술영역에만 관여하지 비즈니스 로직을 담당하는 POJO 에서는 모습을 감춘다.&lt;/strong&gt; 스프링은 자신을 직접 노출시키지 않으면서 애플리케이션을 POJO로 쉽게 개발할 수 있게 지원해준다. 이를 통해 개발자들이 복잡한 엔터프라이즈 기술보다는 객체지향적인 설계와 개발의 원리를 집중할 수 있도록 기회를 만들어주는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-기술&quot;&gt;스프링의 기술&lt;/h2&gt;

&lt;p&gt;스프링은 POJO 프로그래밍을 지원하기 위해 &lt;strong&gt;IoC/DI, AOP, PSA 기술을 지원한다.&lt;/strong&gt; 이 세 가지 모두 객체지향의 설계와 개발원리를 잘 적용하다보면 자연스럽게 만들어지는 것이기도 하다. 다만 스프링은 그것을 통일성 있게, 더 세련된 방법으로, 자바 엔터프라이즈 개발의 전 영역에 걸쳐 효과적으로 적용될 수 있도록 프레임워크로 형태로 제공하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 기술들은 스프링 프레임워크가 만들어지는 진정한 목표인 &lt;strong&gt;POJO 기반의 엔터프라이즈 개발을 편리하게 해주는 도구이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;제어의-역전ioc--의존관계-주입depedency-injection&quot;&gt;제어의 역전(IoC) / 의존관계 주입(Depedency Injection)&lt;/h3&gt;

&lt;p&gt;IoC/DI 는 스프링의 가장 기본적인 기술이자, 스프링의 핵심 개발 원칙이기도 하다. AOP와 PSA 도 IoC/DI에 바탕을 두고 있다.&lt;/p&gt;

&lt;p&gt;IoC/DI 를 사용함으로써의 얻는 장점에 대한 가장 간단한 답변은 &lt;strong&gt;유연한 확장이 가능하게 하기 위해서&lt;/strong&gt; 라고 할 수 있다. DI는 개방 폐쇄 원칙이라는 객체지향 설계 원칙으로 잘 설명될 수 있다. 유연한 확장이라는 장점은 개방 폐쇄 원칙의 &lt;strong&gt;확장에는 열려있다&lt;/strong&gt;에 해당한다. 또한 &lt;strong&gt;변경에는 닫혀있다&lt;/strong&gt; 라는 말로도 설명할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DI의 활용 방법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 핵심기능의 변경&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DI의 가장 대표적인 적용 방법으로 바로 &lt;strong&gt;의존 대상의 구현을 바꾸는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 핵심기능의 동적인 변경&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1과 비슷하게 의존 오브젝트의 &lt;strong&gt;핵심 기능 자체를 변경하는 것이다.&lt;/strong&gt; 다만 일반적인 DI와는 다르게 &lt;strong&gt;동적으로 운영중에 매번 다르게 변경할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 부가기능의 추가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DI를 통해 오브젝트의 핵심기능은 그대로 두고, &lt;strong&gt;부가기능을 추가하는 것이다.&lt;/strong&gt; 인터페이스를 두고 사용하게 하고, 실제 사용할 오브젝트를 외부에서 주입하는 DI를 적용해두면 &lt;strong&gt;데코레이터 패턴을 활용하여 쉽게 부가기능을 추가할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;부가기능의 추가 방식을 특정 오브젝트가 아니라 좀 더 많은 대상으로 일반화해서 적용하면 AOP가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. 인터페이스의 변경&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;사용하려고 하는 오브젝트가 가진 인터페이스가 클라이언트와 호환되지 않는 경우, 또는 실제로는 비슷한 기능을 담당하는데 인터페이스가 서로 다를 경우에 DI가 유용하다.&lt;/p&gt;

&lt;p&gt;만약 어떤 오브젝트가 인터페이스가 다른 의존 오브젝트를 사용하고자할 때, &lt;strong&gt;기존 인터페이스를 구현한 오브젝트를 중간에 두어 사용하는, 오브젝트 방식의 어댑터 패턴을 적용할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 좀 더 일반화해서 아예 인터페이스가 다른 다양한 구현을 같은 방식으로 사용하도록, 중간에 인터페이스 어댑터 역할을 하는 레이어를 추가한다면 이 것이 바로 서비스 추상화이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5. 프록시&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;지연된 로딩을 이용하기 위해 DI를 통해 실제 사용할 의존 오브젝트 사용을 미룰 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 템플릿과 콜백&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;반복적으로 등장하지만 항상 고정적인 작업 흐름과 그 사이에서 자주 바뀌는 부분을 분리해서 템플릿과 콜백으로 만들고 DI를 적용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;콜백을 얼마든지 변경하면서 사용한다는 것은 개방을 통한 유연한 확장을 보여주며, 템플릿은 한 번 만들어두면 계속 재사용할 수 있다는 것은 기능의 확장에도 변하지 않는다는 폐쇄 원칙에 가장 잘 들어맞는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;7. 싱글톤과 오브젝트 스코프&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DI를 프레임워크로 이용한다는 것은 DI 대상 오브젝트를 컨테이너가 관리한다는 의미이다. 따라서 오브젝트 생성 및 관계설정, 이용, 소멸에 이르기까지 컨테이너가 주관하므로 오브젝트의 스코프를 자유롭게 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;수많은 클라이언트의 요청을 처리하는, 고성능을 요구하는 엔터프라이즈 환경에서는 상태를 갖지 않도록 만든 오브젝트가 동시에 여러 스레드의 요청을 처리하는 방식을 적용해야 한다. 이런 방식을 적용하려면 오브젝트의 개수를 제어하는 것이 매우 중요한데, 컨테이너가 오브젝트를 관리하는 IoC 방식이 유용하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. 테스트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러 오브젝트와 협력해서 동작하는 오브젝트를 효과적으로 테스트하는 방법은 &lt;strong&gt;가능한 고립시키는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;테스트 대상인 오브젝트의 기능에만 충실한 테스트가 가능하게 하려면 의존 오브젝트를 목 오브젝트로 바꿔치기 할 수 있는 DI가 유용하게 쓰일 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애스팩트-지향-프로그래밍-aop&quot;&gt;애스팩트 지향 프로그래밍 (AOP)&lt;/h3&gt;

&lt;p&gt;AOP는 객체지향 프로그래밍처럼 독립적인 프로그래밍 패러다임이 아니며 &lt;strong&gt;객체지향 기술의 한계와 단점을 극복하도록 하는 보조적인 프로그래밍 기술이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IoC/DI 를 이용해 POJO에 선언적인 엔터프라이즈 서비스를 제공할 수 있지만, 일부 서비스는 순수 객체지향적인 기법만으로는 POJO의 조건을 유지한 채로 적용하기 힘들다. 이 문제를 해결하기 위해 AOP가 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 다이내믹 프록시 사용&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;기존 코드에 영향을 주지 않고 부가기능을 적용하게 해주는 데코레이터 패턴을 응용한 것이다. 단, 부가기능을 부여할 수 있는 곳은 메소드의 호출이 일어나는 지점이라는 제약이 있다. 스프링의 가장 기본적인 AOP 구현 방식은 다이내믹 프록시를 이용하는 프록시 AOP 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 언어의 확장&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프록시 방식의 AOP 에서는 불가능한, 다양한 조인포인트를 제공하는 AspectJ 라는 툴을 이용해 메소드 호출뿐만 아니라, 인스턴스 생성 / 필드 엑세스/ 특정 호출 경로를 가진 메소드 호출 등에도 부가기능을 제공할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위빙: 클래스가 메모리로 로딩될 때 바이트코드 조작&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;포터블-서비스-추상화-psa&quot;&gt;포터블 서비스 추상화 (PSA)&lt;/h3&gt;

&lt;p&gt;스프링은 특정 환경에 종속되지 않는 POJO 프로그래밍을 위해, &lt;strong&gt;환경과 세부 기술의 변화에 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 서비스 추상화를 지원한다.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/11/18/toby_spring_08_what_is_spring-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/11/18/toby_spring_08_what_is_spring-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>스프링 Custom TransactionManager 구현</title>
        <description>&lt;h2 id=&quot;transactionmanager&quot;&gt;TransactionManager&lt;/h2&gt;

&lt;p&gt;스프링은 여러가지 트랜잭션 기술을 트랜잭션 서비스 추상화를 통해, 비즈니슬 로직이 담긴 코드의 변경이 없이 일관성이 있는 접근 방법을 제공해주고 있다. 각 기술의 트랜잭션 API를 사용하지 않고 일관된 방식으로 트랜잭션을 제어하는 작업이 가능하다.&lt;/p&gt;

&lt;p&gt;스프링은 트랜잭션 경계설정을 위해 &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html&quot;&gt;PlatformTransactionManager&lt;/a&gt;&lt;/strong&gt; 를 제공하는데, 이 추상 인터페이스는 스프링 트랜잭션 서비스 추상화의 핵심 인터페이스이다. 모든 스프링의 트랜잭션 기능과 그 코드는 이 인터페이스를 통해 로우레벨의 트랜잭션 서비스가 가능하다.&lt;/p&gt;

&lt;p&gt;정식 document에서도 나와있겠지만, 이 인터페이스에는 다음과 같이 3개의 메소드를 가지고 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트랜잭션이 어디서 시작하고 종료하는지, 그리고 종료할 때 정상종료 (commit) 인지 비정상종료 (rollback) 인지를 결정하는 &lt;strong&gt;트랜잭션 경계를 지정하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그리고 스프링은 시작과 종료를 트랜잭션 전파를 통해 자유롭게 조합하고 확장할 수 있다. 따라서 트랜잭션을 시작할 때는 &lt;strong&gt;getTransaction&lt;/strong&gt; 이라는 이름의 메소드를 사용한다. 이 메소드를 통해 트랜잭션 속성에 따라 &lt;strong&gt;새로 시작하거나 진행 중인 트랜잭션에 참여하거나, 진행 중인 트랜잭션을 무시하고 새로운 트랜잭션을 만드는 등&lt;/strong&gt; 상황에 따라 다르게 동작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;abstractplatformtransactionmanager&quot;&gt;AbstractPlatformTransactionManager&lt;/h3&gt;

&lt;p&gt;보통 트랜잭션을 사용하는데에 있어서, DB 작업이나 기타 트랜잭션이 필요한 (예를 들면 JMS와 같은 MQ) 기술이 있으면 다음과 같이 각 맞는 트랜잭션 매니저를 빈으로 등록하고 사용할 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceTransactionManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링은 다양한 로우레벨 트랜잭션 기술을 지원하기 위해, PlatformTransactionManager 인터페이스를 구현한 여러 TransactionManager를 미리 제공하는데, &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/jdbc/datasource/DataSourceTransactionManager.html&quot;&gt;DataSourceTransactionManager&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html&quot;&gt;JpaTransactionManager&lt;/a&gt;&lt;/strong&gt;,  &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jms/connection/JmsTransactionManager.html&quot;&gt;JmsTransactionManager&lt;/a&gt;&lt;/strong&gt; 등을 제공하고 있다.&lt;/p&gt;

&lt;p&gt;그런데 이들 클래스를 보면, 다음과 같은 &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/support/AbstractPlatformTransactionManager.html&quot;&gt;AbstractTransactionManager&lt;/a&gt;&lt;/strong&gt; 추상 클래스를 상속받고 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractPlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스는 PlatformTransactionManager 를 구현하는 추상 클래스로서, 스프링의 &lt;strong&gt;기본적인 트랜잭션 흐름&lt;/strong&gt; 을 구현하고 있는 클래스이다. 현재 수행 중인 트랜잭션이 있는지를 체크하는 것부터 시작해서 트랜잭션 전파에 대한 로직이나 트랜잭션 중단, 재시작 등과 같은 &lt;strong&gt;디폴트 로직&lt;/strong&gt; 을 구현하고 있다.&lt;/p&gt;

&lt;p&gt;스프링이 제공하는 &lt;strong&gt;완전한&lt;/strong&gt; 트랜잭션 매니저들도 이 추상 클래스를 상속받아 구현하였다. 다음과 같이 DataSourceTransactionManager도 AbstractTransactionManager를 상속하는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSourceTransactionManager&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractPlatformTransactionManager&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitializingBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enforceReadOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;스프링의 기본 트랜잭션 흐름을 따르지 않고, 순수한 자신만의 트랜잭션 매니저를 구현할려면 &lt;strong&gt;PlatformTransactionManager&lt;/strong&gt; 인터페이스를 바로 구현해도 되지만, 스프링의 강력한 트랜잭션 추상화 서비스를 서비스 받으려면(?) 이 &lt;strong&gt;AbstractPlatformTransactionManager&lt;/strong&gt; 를 사용하는 것도 나쁘지 않다.&lt;/p&gt;

&lt;p&gt;이 추상 클래스를 상속받아 자신만의 트랜잭션 매니저를 구현하기 위해서는 다음의 4가지 추상 메소드를 반드시 구현해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGetTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doBegin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultTransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doRollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultTransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 메소드 이름을 보면 알 수 있듯이 트랜잭션을 시작하거나(doGetTransaction, doBegin), 종료(doCommit, doRollback) 될 때 수행되어야할 로직을 구현해야 된다는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;덧붙여 다음의 3가지 메소드도 같이 오버라이드하여 자신의 로직을 구현하는 것이 좋다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isExistingTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSetRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultTransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doCleanupAfterCompletion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;스프링의 트랜잭션 흐름&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링의 트랜잭션의 흐름은 간략하게 나타내면 다음과 같다. 밑의 그림에서 볼드체로 표기된 메소드는 자신이 트랜잭션 매니저를 구현할 때, 반드시 구현해야하는 추상 메소드들이다. (&lt;strong&gt;isExistingTransaction, doCleanupAfterCompletion&lt;/strong&gt; 메소드는 제외)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-11-04-spring_custom_transactionmanager/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TransactionInterceptor의 &lt;strong&gt;invokeWithinTransaction&lt;/strong&gt; 메소드는 &lt;strong&gt;@Transactional&lt;/strong&gt; annotation이 선언된 메소드가 수행될 때, 자동으로 호출되는데 스프링의 TransactionManager 를 활용하여 트랜잭션을 시작하고 종료하는 매쉬업 코드가 구현되어 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invokeWithinTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txAttr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackPreferringPlatformTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TransactionInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createTransactionIfNecessary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinpointIdentification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;retVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceedWithInvocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 타깃 오브젝트의 메소드를 호출하여 비즈니스 로직 실행&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;completeTransactionAfterThrowing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cleanupTransactionInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commitTransactionAfterReturning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@Transactional&lt;/strong&gt; annotation이 설정된 메소드가 실행될 때, 스프링에 의해 &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/interceptor/TransactionInterceptor.html&quot;&gt;TransactionInterceptor&lt;/a&gt;&lt;/strong&gt; 및 &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api//org/springframework/transaction/interceptor/TransactionAspectSupport.html&quot;&gt;TransactionAspectSupport&lt;/a&gt;&lt;/strong&gt; 를 통해 AbstractPlatformTransactionManager 클래스의 &lt;strong&gt;getTransaction&lt;/strong&gt; 메소드가 처음으로 호출된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doGetTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExistingTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleExistingTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debugEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROPAGATION_MANDATORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROPAGATION_REQUIRED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROPAGATION_REQUIRES_NEW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PROPAGATION_NESTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doBegin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepareSynchronization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드를 보면 알겠지만 트랜잭션를 가져오는 것부터 시작해서 현재 진행 중인 트랜잭션이 있는지를 체크, 전파 속성에 따라 트랜잭션을 시작하는 코드 등이 담겨 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;customtransactionmanager-구현&quot;&gt;CustomTransactionManager 구현&lt;/h2&gt;

&lt;p&gt;앞서 언급하였듯이, 자신만의 트랜잭션 기술을 스프링의 트랜잭션 서비스 추상화를 통해 구현하려면 &lt;strong&gt;AbstractPlatformTransactionManager&lt;/strong&gt; 클래스의 추상 메소드들을 구현하면 된다. 이에 덧붙여, 추가적으로 스프링에서 제공하는 트랜잭션 관련 클래스들이 있는데, 스프링의 추상화 서비스를 제대로 활용하기 위해 이 클래스들도 사용하는 것이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;resourceholdersupport&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/ResourceHolderSupport.html&quot;&gt;ResourceHolderSupport&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;스프링 트랜잭션 추상화 레이어에서 사용하는 클래스 중의 하나로, 이 클래스와 다음에 설명할 &lt;strong&gt;TransactionSynchronizationManager&lt;/strong&gt;과 함께 &lt;strong&gt;트랜잭션과 관련된 리소스를 관리한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;타임아웃을 걸거나 리소스의 레퍼런스 카운트를 증감시키는 등의 메소드가 구현되어 있으며 이 클래스를 구현할 때는 자신이 구현하는 트랜잭션 기술에서 사용하는 리소스 (Connection이나 기타 자원들)를 여기에 두면 된다.&lt;/p&gt;

&lt;p&gt;리소스를 관리하는데에 있어서 필요한 디폴트 로직은 이미 ResourceHolderSupport 클래스에 구현되어 있다. 단 연결 해제와 같은 리소스 해제와 같은 로직이 필요하다면 &lt;strong&gt;clear()&lt;/strong&gt; 메소드를 오버라이드하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceHolderSupport&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;synchronizedWithTransaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollbackOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deadline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;smarttransactionobject&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/SmartTransactionObject.html&quot;&gt;SmartTransactionObject&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;이 인터페이스를 구현해서 자신만의 트랜잭션 오브젝트를 만든다. 스프링의 트랜잭션 추상화 레이어에서는 트랜잭션 매니저의 메소드를 호출할 때, 이 트랜잭션 오브젝트를 파라미터로서 사용한다.&lt;/p&gt;

&lt;p&gt;보통 트랜잭션 매니저에서 주로 사용하는 트랜잭션 오브젝트 클래스는 이 클래스를 상속받아 구현하며 이 클래스를 구현하지 않고 자신만의 클래스를 통해 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;여기서 구현할 메소드는 다음과 같이 2가지의 메소드인데, 특별한 기능이 필요로 하지 않는 한 구현하지 않아도 상관은 없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmartTransactionObject&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flushable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// rollback-only 를 체크하는 메소드로, 보통 ResourceHolderSupport 의 isRollbackOnly 메소드를 그대로 호출하면 된다.&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 트랜잭션을 통해 메모리 상에 변경된 사항을 persistence store에 flush하고자 할 때 호출한다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// SQL 명령을 캐싱하는 Hibernate 에서 주로 사용한다.&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;transactionsynchronizationmanager&quot;&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/support/TransactionSynchronizationManager.html&quot;&gt;TransactionSynchronizationManager&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;스프링에서는 이 클래스를 통해 각 트랜잭션 기술에서 사용하는 리소스를 관리하며 동기화한다. 관리되는 리소스는 스레드 바운드되므로, 동시성 문제도 없다. 쉽게 말해서 동시성 문제가 없는, 같은 키로 overwrite가 불가능한 맵 저장소라 생각하면 편하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dhsim86.github.io/web/2017/09/04/toby_spring_05_service_abstraction-post.html&quot;&gt;Toby’s Spring Chap 05: 서비스 추상화&lt;/a&gt; 에서 나왔듯이, 이 클래스를 사용하기 위해서는 &lt;strong&gt;initSynchronization()&lt;/strong&gt; 이나 &lt;strong&gt;clearSynchronization()&lt;/strong&gt; 메소드를 트랜잭션 코드 전후로 반드시 호출해야 했지만, AbstractPlatformTransactionManager 클래스를 사용하면 이 것이 자동으로 호출되므로 신경 쓸 필요가 없다.&lt;/p&gt;

&lt;p&gt;이 클래스를 통해 트랜잭션에서 필요한 리소스에 트랜잭션 동기화를 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;customtransactionmanager-구현-소스&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/dhsim86/custom_transactionmanager_sample&quot;&gt;CustomTransactionManager 구현 소스&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
</description>
        <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/11/04/spring_custom_transactionmanager-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/11/04/spring_custom_transactionmanager-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 07: 스프링 핵심 기술의 응용 part.3</title>
        <description>&lt;h2 id=&quot;스프링-31의-di&quot;&gt;스프링 3.1의 DI&lt;/h2&gt;

&lt;p&gt;스프링이 처음 등장한 이후, 많은 변화가 있었지만 객체지향 언어인 자바의 특징과 장점을 극대화하는 스타일과 지원하는 도구로서 꾸준히 정체성을 유지하고 있다. 많은 변화 속에서 스프링이 호환성을 지키고 안정된 기술을 유지할 수 있었던 것은 객체지향적인 코드의 장점인 &lt;strong&gt;유연성과 확장성을 스프링 스스로 충실하게 지켜왔기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링이 제공하는 모든 기술의 기초가 되는 &lt;strong&gt;DI의 원리&lt;/strong&gt; 는 변하지 않았으나, DI가 적용된 코드를 작성할 때 사용하는 도구인 자바 언어는 많은 변화가 있었다. 이런 변화가 스프링의 사용 방식에도 여러 가지 영향을 주었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애노테이션의-메타정보-활용&quot;&gt;애노테이션의 메타정보 활용&lt;/h3&gt;

&lt;p&gt;자바 코드의 메타정보를 활용한 프로그래밍 방식이다. 자바는 소스코드가 컴파일된 후 클래스 파일에 저장되었다가 JVM에 의해 로딩되어 실행된다. 그런데 자바 코드가 실행되는 것이 목적이 아니라, &lt;strong&gt;다른 자바 코드에 의해 데이터처럼 사용되기도 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;자바 코드의 일부를 &lt;strong&gt;리플렉션&lt;/strong&gt; API를 통해 어떻게 만들어졌는지 확인하고 그에 따라 동작하는 기능이 점점 많이 사용되고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;원래 리플렉션 API는 자바 코드나 컴포넌트를 작성하는 데 사용하는 툴을 개발할 때 이용하도록 만들어졌는데, 자바 코드의 메타정보를 데이터로 활용하는 스타일의 프로그래밍 방식에 더 많이 활용되고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이런 스타일의 프로그래밍에서 가장 많이 사용되는 것은 annotation 이다. 원래는 자바 코드를 실행하는데 직접 참여하지 않고 리플렉션 API를 통해 annotation의 메타정보를 조회하고 설정된 값을 가져와 참고하는 것이 전부인데, 이를 이용하는 프레임워크나 표준기술이 많이 늘고 있다.&lt;/p&gt;

&lt;p&gt;Annotation 은 애플리케이션을, 핵심로직을 담은 &lt;strong&gt;자바코드&lt;/strong&gt; 와 이를 지원하는 IoC 방식의 &lt;strong&gt;프레임워크&lt;/strong&gt;, 그리고 프레임워크가 참조하는 &lt;strong&gt;메타정보&lt;/strong&gt; 라는 세 가지로 구성하는 방식에 어울린다. 이 annotation을 프레임워크가 사용하는 메타정보로 사용할 때 유리한 점이 많다.&lt;/p&gt;

&lt;p&gt;DI를 위해 애플리케이션을 구성하는 많은 오브젝트들 간의 관계를 자바 코드를 통해 설정하면 코드 양이 많을 뿐만 아니라, 불편하다. 따라서 스프링은 초창기에는 &lt;strong&gt;XML&lt;/strong&gt; 을 활용하여 오브젝트 관계 설정용 DI 메타정보로 활용해왔다.&lt;/p&gt;

&lt;p&gt;그런데 annotation이 나오게 되면서 코드의 동작에는 영향을 주지 않지만, 메타정보로 활용하는 데는 XML에 비해 유리하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Special&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;strong&gt;@Special&lt;/strong&gt; 이라는 annotation 하나를 클래스 선언 위에 정의하였다. 그런데 이렇게 하는 것만으로도 많은 정보를 얻을 수 있다. 가장 먼저 이 annotation이 &lt;strong&gt;타입 레벨&lt;/strong&gt;, 즉 클래스에 부여되었다는 사실을 알 수 있다. 또한 이 annotation이 위치한 MyClass 클래스의 메타정보를 얻을 수 있다. 클래스의 패키지나 이름, 접근 제한자, 상속한 클래스나 구현 인터페이스 등을 알 수 있다. &lt;strong&gt;Annotation을 단순히 자바 코드 한줄로 넣는 것만으로 다양한 부가정보를 얻을 수 있는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 위의 annotation을 이용한 방법을 XML로 대체하려면 다음과 같이 작성해야 되는데, annotation 을 사용하는 방식에 비해 확실히 작성해야할 정보가 많다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x:special&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;package.MyClass&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반면에, XML를 사용하는 방식에 비해 annotation 사용하는 방식은 내용이 변경될 때 다시 빌드하는 과정을 거쳐야 한다.&lt;/p&gt;

&lt;p&gt;자바 개발의 흐름은 XML과 같은 텍스트 형태의 메타 정보 활용 방식을 자바 코드에 내장된 annotation을 활용하는 방식으로 대체하는 쪽으로 가고 있다. 스프링은 2.5부터 DI와 웹 기능 일부에 annotation을 적용하기 시작했고, 3.0에서 다양한 영역으로 활용범위를 넓혔다. 그리고 3.1부터 annotation을 활용한 메타정보 작성 방식이 거의 모든 영역으로 확대되어, XML 없이도 스프링 애플리케이션을 작성할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;정책과-관례를-이용한-프로그래밍&quot;&gt;정책과 관례를 이용한 프로그래밍&lt;/h3&gt;

&lt;p&gt;Annotation 이나 XML을 메타정보로 활용하는 프로그래밍 방식은, 코드를 이용해 명시적으로 어떻게 동작할지를 기술하는 것이 없이 &lt;strong&gt;미리 약속한 규칙이나 관례를 따라서 프로그래밍이 동작하도록 만드는 프로그래밍 스타일로 가게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 XML에서 &amp;lt;bean&amp;gt; 태그를 작성하면 그에 따라 하나의 오브젝트가 만들어진다. 미리 약속된 관례에 따라 new 키워드를 통한 인스턴스 생성 코드가 동작하는 것이다.&lt;/p&gt;

&lt;p&gt;이러한 스타일의 프로그래밍 방식은 자바 코드로 직접 모든 내용을 표현했을 때보다 &lt;strong&gt;작성해야할 코드의 양이 줄어든다는 장점이 있다.&lt;/strong&gt; 반면에 &lt;strong&gt;미리 정의돤 관례나 규칙을 알아야하고, 메타정보를 보고 프로그램이 어떻게 동작할지 이해해야 하는 부담이 되기도 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 annotation 으로 메타정보를 작성하고, 미리 정해진 정책과 관례를 통해 간결한 코드에 많은 내용을 담을 수 있는 방식을 적극 도입하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;자바-코드를-이용한-빈-설정&quot;&gt;자바 코드를 이용한 빈 설정&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;configuration-사용&quot;&gt;@Configuration 사용&lt;/h3&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;@ContextConfiguration&lt;/strong&gt; annotation 은 스프링이 DI 정보를 어디서 가져와야 하는지 지정할 때 쓰인다. &lt;strong&gt;locations&lt;/strong&gt; 엘리먼트는 DI 설정정보를 담은 XML 파일의 위치를 가리킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;@Configuration&lt;/strong&gt; 클래스를 통해, XML 대신에 클래스를 통해 DI 정보로 사용할 수도 있다. DI 설정정보를 담은 클래스는 평범한 자바 클래스에 이 annotation을 다는 것으로 만들 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ImportResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// XML의 설정정보를 가져올 수 있다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/e9b563672604f451935bd41d41d1fe20939285a2&quot;&gt;Use @Configuration class instead of applicationContext.xml&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같이 @Configuration 클래스를 사용하게 되면 더 이상 &amp;lt;context:annotation-config /&amp;gt; 태그를 XML에 사용할 필요가 없다. 컨테이너가 알아서 @PostConstruct annotation을 처리하는 빈 후처리기를 등록해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Configuration 클래스에서 정의한 빈과 XML 에서 정의한 빈은 얼마든지 서로 참조가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;bean의-전환&quot;&gt;&amp;lt;bean&amp;gt;의 전환&lt;/h3&gt;

&lt;p&gt;&amp;lt;bean&amp;gt; 으로 정의된 DI 정보는 &lt;strong&gt;@Bean&lt;/strong&gt; annotation과 정확하게 1:1 매핑된다. 즉 @Configuration 이 정의된 DI 설정 정보용 클래스에서 빈 오브젝트를 생성할 때 이 annotation을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;보통 다음과 같이 &lt;strong&gt;@Bean&lt;/strong&gt; 이 붙은 public 메소드를 통해 빈 오브젝트를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 &lt;strong&gt;메소드 이름은 빈의 아이디로 지정된다.&lt;/strong&gt; 이 메소드 안에서 실제 빈 오브젝트를 생성하는 코드와 프로퍼티 설정을 담으면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Bean annotation을 활용하여 빈 오브젝트를 생성할 때, 클래스는 반드시 public 접근 제한자를 가져야 한다. XML로 설정할 때는 내부적으로 리플렉션 API를 사용하므로 굳이 public 일 필요는 없지만, 자바 코드에서 참조할 때는 public 이어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음과 같이 parent 속성을 통해 프로퍼티 정의를 상속받는 것은, 클래스를 통한 DI 설정에서는 활용할 수 없다. 모든 프로퍼티 값을 일일이 넣어주어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testUserService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch01.springbook.user.UserServiceTest$TestUserService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userService&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/99a6acad9f8795d322de7c16bfffcea5da209eff&quot;&gt;Replace XML application context using @Configuration class.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;autowired를-이용한-자동와이어링&quot;&gt;@Autowired를 이용한 자동와이어링&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@Autowired&lt;/strong&gt; annotation을 사용하여 스프링 컨테이너가 조건에 맞는 (이름이나 타입을 기준으로) 빈 오브젝트를 찾아 자동으로 setter나 필드에 주입해주므로 DI 설정을 위한 자바 코드나 XML 설정을 대폭 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 setter에 annotation을 붙여주면, 먼저 컨테이너가 &lt;strong&gt;파라미터 타입을 보고&lt;/strong&gt; 주입 가능한 빈을 찾아 주입해준다. 만약 주입 가능한 타입의 빈 오브젝트가 2개 이상이라면, 프로퍼티와 &lt;strong&gt;동일한 이름의 빈을 찾아 주입한다.&lt;/strong&gt; 만약 찾지 못한다면 에러를 일으킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdbcTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 리플렉션 API를 통해 값을 넣어주므로, private 필드라도 주입해줄 수 있다. 그리고 단순히 필드에 값을 그래도 넣어주기만 한다면 필드에 annotation을 다는 것만으로 충분하나, 만약 위의 예처럼 주입받은 오브젝트로 별도의 처리가 필요할 경우에는 setter 에 annotation을 달고 처리 로직을 구현하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Autowired 는 먼저 타입을 기준으로 적용할 빈 오브젝트를 찾아보고, 만약 주입할 수 있는 오브젝트가 2개 이상 발견되면 다시 이름을 기준으로 최종적으로 주입할 오브젝트를 선택한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/4b7de1ac7f2bfe53a4edd1a959164e4f99b2e23b&quot;&gt;Use @Autowired annotation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;component-를-이용한-자동-빈-등록&quot;&gt;@Component 를 이용한 자동 빈 등록&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@Component&lt;/strong&gt; annotation 은 타입에 부여된다. &lt;strong&gt;이 annotation이 붙은 클래스는 빈 스캐너를 통해 자동으로 빈으로 등록된다.&lt;/strong&gt; 정확히는 &lt;strong&gt;@Component&lt;/strong&gt; 및 이 것을 메타 annotation으로 갖고 있는 annotation이 달린 (예를 들면 @Service, @Controller) 클래스가 자동 빈 등록 대상이 된다.&lt;/p&gt;

&lt;p&gt;이 annotation을 사용하기 위해서는 &lt;strong&gt;빈 스캔기능&lt;/strong&gt; 을 사용하겠다는 &lt;strong&gt;@ComponentScan&lt;/strong&gt; annotation 정의가 별도로 필요하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ch01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestApplicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 basePackages 엘리먼트는 클래스를 스캔할 기준 패키지를 지정할 때 사용한다. 여러 기준 패키지를 사용할 수도 있다. 빈 스캔 중에 @Component 붙은 클래스가 발견되면 새로운 빈 오브젝트로 등록한다. &lt;strong&gt;빈의 아이디를 따로 지정하지 않으면 클래스 이름의 첫 글자를 소문자로 바꾸어서 사용한다.&lt;/strong&gt; 만약 이름을 지정하고 싶다면 다음과 같이 사용하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoJdbc&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링은 @Component 가 아닌 이 annotation을 메타로 갖고 있는 annotation에 대해서도 자동으로 빈 등록 해준다. &lt;strong&gt;보통 여러 개의 annotation에 공통적인 속성을 부여하려면 메타 annotation을 사용한다.&lt;/strong&gt; 스프링이 DAO 빈에 대해서 사용하도록 권장하는 &lt;strong&gt;@Repository&lt;/strong&gt; annotation은 다음과 같이 @Component 를 메타 annotation으로 사용하고 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/e419f849be267ec4e2a0a7365a171bb56b1396d9&quot;&gt;Use @Component / @ComponentScan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;컨텍스트-분리&quot;&gt;컨텍스트 분리&lt;/h3&gt;

&lt;p&gt;보통 DI 설정 정보는 테스트용과 실제 서비스에서 사용되는 운영용으로 나누어야 한다. 테스트할 때는 의존 오브젝트로 mock 을 사용하고, 운영시에는 실제 사용할 의존 오브젝트를 사용해야 하기 때문이다. 따라서 &lt;strong&gt;환경에 따라 성격이 다른 DI 정보를 분리할 필요가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;실제 운영할 때 필요한 빈 오브젝트를 구성한 Configuration 클래스와 테스트용 오브젝트를 구성하는 Configuration 클래스, 2개로 나누어 사용하면 된다. 테스트 클래스에는 다음과 같이 사용할 수 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 정의하면 TestAppContext.class 를 통해 테스트할 때 필요한 빈 오브젝트를 추가적으로 DI 받을 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/56c983b2da652f0eb8b0e8235988a1bc74886cee&quot;&gt;Separated configuration class into ‘operation’ and ‘test’.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;또한 &lt;strong&gt;@Import&lt;/strong&gt; annotation을 사용하면 같은 환경에서 사용되는 빈 오브젝트들이더라도 서로 성격이 다른 오브젝트들의 구성정보를 분리시킬 수 있다. 서로 성격이 다른 빈 오브젝트를 다른 Configuration 클래스에서 구성하고, &lt;strong&gt;메인 Configuration 클래스에서 다른 Configuration 클래스들을 import 하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ch01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlServiceContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/21679a2c36a6878e4e3ab10ac31522c592adb7d5&quot;&gt;Use @Import annotation.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@Import annotation에서 설정할 클래스가 static 중첩 클래스라면 명시적으로 설정하지 않아도 된다. @Configuration 클래스안에서 다시 @Configuration static 중첩 클래스가 있다면 스프링이 자동으로 추가해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프로파일&quot;&gt;프로파일&lt;/h3&gt;

&lt;p&gt;만약 다음과 같이 운영용과 테스트용 의존 오브젝트들이 서로 다른 @Configuration 클래스에 정의되어 있다고 했을 때, 테스트할 때 충돌을 일으킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MailSender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MailSender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 테스트를 실행할 때, AppContext 와 TestAppContext 에 정의되어 있는 빈들이 함께 사용되는데 이 mailSender 라는 이름을 가진 빈이 2개가 된다. 이럴 경우에는 &lt;strong&gt;스프링이 빈 설정 정보를 읽는 순서에 따라, 뒤의 빈 설정이 앞에서 발견된 빈 설정에 우선해서 적용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 코드와 같은 순서라면 문제가 없지만, 만약 순서가 &lt;strong&gt;classes = {TestAppContext.class, AppContext.class}&lt;/strong&gt; 이면 테스트할 때 실제 운영시에 사용하는 오브젝트를 사용할 것이다.&lt;/p&gt;

&lt;p&gt;스프링에서는 환경에 따라 빈 설정정보가 달라져야 하는 경우에, 별도의 annotation을 통해 간단히 설정할 수 있도록 해준다. &lt;strong&gt;실행환경에 따라 빈 구성이 달라지는 내용을 프로파일로 정의하여 만들고 실행 시점에 어떤 프로파일의 빈 설정을 사용할지 지정하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;보통 다음과 같이 프로파일은 &lt;strong&gt;@Profile&lt;/strong&gt; annotation을 사용하여 Configuration 클래스 단위로 지정한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 @Profile이 붙은 Configuration 클래스는 @Import 나 @ContextConfiguration 에 의해 지정되어도 현재 컨테이너의 활성 프로파일 목록에 자신의 프로파일 이름이 있지 않으면 무시된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;활성 프로파일이란 스프링 컨테이너를 실행할 때 추가로 지정해주는 속성이다. 만약 프로파일을 지정하지 않으면 스프링은 디폴트 빈 설정정보로 취급하여 항상 적용시킨다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테스트 진행할 때 활성 프로파일로 “test” 프로파일을 지정하려면 &lt;strong&gt;@ActiveProfiles&lt;/strong&gt; annotation을 사용하면 된다. 그러면 “test” 프로파일로 지정된 Configuration 클래스가 사용될 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;classTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;컨테이너의-빈-등록-정보-확인&quot;&gt;컨테이너의 빈 등록 정보 확인&lt;/h3&gt;

&lt;p&gt;스프링 컨테이너는 &lt;strong&gt;BeanFactory&lt;/strong&gt; 라는 인터페이스를 구현한다. 보통 &lt;strong&gt;DefaultListableBeanFactory&lt;/strong&gt; 를 이용해 빈을 등록하고 관리하는데, 이 클래스에는 &lt;strong&gt;getBeanDefinitionNames&lt;/strong&gt; 라는 메소드가 있어 컨테이너에 등록된 모든 빈 이름을 조회할 수 있고, 빈 이름을 사용하여 실제 빈과 빈 클래스 정보 등도 조회해볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beanListTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanDefinitionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; \t&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 다음과 같이 빈 정보를 출력해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-10-28-toby_spring_07_core_apply_3/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/2255262d57cae783462e340e053f2b83876840cb&quot;&gt;ListBeanNameTest.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/10/28/toby_spring_07_core_apply_3-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/10/28/toby_spring_07_core_apply_3-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 07: 스프링 핵심 기술의 응용 part.2</title>
        <description>&lt;h2 id=&quot;서비스-추상화-적용&quot;&gt;서비스 추상화 적용&lt;/h2&gt;

&lt;p&gt;다음과 같이 구현된 “JaxbXmlSqlReader” 클래스는 좀 더 개선하고 발전시킬 부분이 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JaxbXmlSqlReader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_SQLMAP_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/sql/sqlmap.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_SQLMAP_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqlMapFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUnmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JAXBException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;자바는 JAXB 말고도 다양한 XML과 오브젝트를 매핑하는 기술이 있다. 따라서 필요에 따라 다른 기술로 손쉽게 바꾸어서 사용할 수 있게 해야 한다.&lt;/li&gt;
  &lt;li&gt;XML 파일을 좀 더 다양한 소스에서 가져올 수 있도록 할 필요가 있다. 위 코드는 미리 정해진 경로에서만 읽을 수 있지만, 이 것을 임의의 클래스패스나 파일 시스템 상의 절대 위치와 같이 다양한 곳에서 리소스를 읽을 수 있도록 할 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;oxm-서비스-추상화&quot;&gt;OXM 서비스 추상화&lt;/h3&gt;

&lt;p&gt;JAXB가 비록 JavaSE 와 JavaEE 표준에 포함되어 있긴 하지만 이 말고도 실전에서 자주 사용되는 다양한 XML-오브젝트 매핑 기술이 있다. (Castor XML, JiBX, XmlBeans, Xstream)&lt;/p&gt;

&lt;p&gt;이렇게 XML과 자바 오브젝트를 매핑해서 상호 변환해주는 기술을 간단히 OXM(Object-XML Mapping) 이라고 하는데, OXM 프레임워크와 기술들은 사용 목적이 동일해서 유사한 기능과 API를 제공한다.&lt;/p&gt;

&lt;p&gt;다양한 OXM 프레임워크 및 기술을 지원하기 위해, &lt;strong&gt;로우레벨의 구체적인 기술과 API에 종속되지 않는 추상화된 레이어와 API를 제공하여 구현 기술에 대해 독립적인 코드를 작성할 수 있도록 해주는 서비스 추상화가 필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링은 트랜잭션 뿐만 아니라, OXM에 대해서도 서비스 추상화 기능을 제공한다. 스프링이 제공하는 OXM 추상 레이어의 API를 이용해 XML 문서와 오브젝트사이의 변환을 처리하면 OXM 기술을 자유롭게 바꾸어서 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;다음 코드는 스프링이 제공하는 OXM 추상화 인터페이스 중 XML 을 자바 오브젝트로 변환하는 &lt;strong&gt;Unmarshaller&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oxm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.xml.transform.Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// XML 파일에 대한 정보를 담은 Source 타입의 오브젝트를 넘겨주면 설정에서 지정한 OXM 기술에 따라 자바 오브젝트 트리로 변환해준다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;supports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// source를 통해 제공받은 XML을 자바 오브젝트 트리로 변환하여 루트 오브젝트를 리턴&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 매핑 실패할 때 추상화된 예외를 던진다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlMappingException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/f6c2f2accdae7f81a71498ff66fe0ef22c12138f&quot;&gt;Spring OXM abstraction layer test&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/6eaf6dbbf108a6261f10ae5f49ae910ccfd2500f&quot;&gt;Implemented OxmSqlService using spring oxm abstraction layer.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;리소스-추상화&quot;&gt;리소스 추상화&lt;/h3&gt;

&lt;p&gt;OxmSqlReader 든, XmlSqlReader 든 공통적인 문제점이 있는데 다음과 같이 SQL 매핑 정보가 담긴 XML 파일을 읽으므로, 다양한 곳 (즉 파일시스템의 특정 폴더나 해당 파일이 원격에 있을 때)에 있는 XML 파일에 대해서는 지정할 수 없다는 것이 문제다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 구현되어 있기 때문에 파일 시스템이나 웹 상의 HTTP 접근을 통해 읽으려면 &lt;strong&gt;URL&lt;/strong&gt; 클래스를 사용해야 한다. 또한 서블릿 컨텍스트 내의 리소스를 가져오려면 &lt;strong&gt;ServletContext의 getResourceAsStream&lt;/strong&gt; 을 사용해야 한다. 문제는 리소스의 위치나 종류에 따라서 다른 클래스나 메소드를 사용해야 한다는 것이다.&lt;/p&gt;

&lt;p&gt;이것도 마찬가지로 리소스를 읽어야한다는 목적은 동일하지만 각기 다른 기술이 존재하는 것으로 이해할 수 있다. 따라서 리소스를 읽는 방법(기술)에 대해서도 서비스 추상화를 적용할 수 있다고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;스프링은 자바에 존재하는 &lt;strong&gt;일관성없는&lt;/strong&gt; 리소스 접근 API를 추상화해서 &lt;strong&gt;Resource&lt;/strong&gt; 라는 추상화 인터페이스를 정의하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 리소스의 존재나 읽기 가능한지 여부를 확인할 수 있다.&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;URI&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRelative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lastModified&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFilename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMockedAnswer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meterConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMockAnswer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;JsonReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;BillingResponseBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billingResponseBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BillingMeterResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billingMeterResponseBeanList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billingResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMeterList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;billingMeterResponseBeanList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;billingMeterResponseBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;billingMeterResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTimestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSharpTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billingResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링의 거의 모든 API는 외부의 리소스 정보가 필요할 때는 항상 이 Resource 추상화 인터페이스를 사용한다. 그런데 다른 빈들처럼 애플리케이션 컨텍스트에 빈 등록해서 사용하는 것이 아니라, 일반적인 java.io 의 Reader나 InputStream 처럼 값으로 사용한다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;strong&gt;추상화를 적용할 때는 빈 등록할 때처럼 구현 클래스를 지정하는 것이 아니라, 프로퍼티에 일정한 규칙을 갖는 접두어를 설정한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링에는 URL 클래스와 비슷하게 접두어를 이용하여 Resource 오브젝트를 선언하는 방법이 있다. 다음과 같이 location String 파라미터에 &lt;strong&gt;리소스의 종류와 리소스의 위치를 함께 표현&lt;/strong&gt; 하면 Resource 타입의 오브젝트로 변환해주는 &lt;strong&gt;ResourceLoader&lt;/strong&gt; 를 사용하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// location에 담긴 정보를 바탕으로 그에 적절한 Resource로 변환해준다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 표는 ResourceLoader가 인식하는 접두어와 이를 이용해 리소스를 표현한 예를 나타낸 것이다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;접두어&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;예&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;file:&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;file:/C:/temp/file.txt&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;파일 시스템의 C:/temp 폴더에 있는 file.txt를 Resource로 만들어준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;classpath:&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;classpath:file.txt&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;클래스패스의 루트에 있는 file.txt에 접근할 수 있도록 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;없음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;WEB-INF/test.dat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;접두어가 없는 경우, ResourceLoader의 구현에 따라 리소스의 위치가 결정된다. ServletResourceLoader 이면 서블릿 컨텍스트의 루트를 기준으로 해석한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;http:&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;http://www.myserver.com/test.dat&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP 프로토콜을 사용해서 접근할 수 있는 웹상의 리소스를 지정한다. ftp도 사용가능하다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;접두어를 붙이면 ResourceLoader의 구현에는 상관없이 접두어가 의미하는 위치와 방법을 이용해 리소스를 읽어온다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ResourceLoader의 대표적인 예는 스프링의 애플리케이션 컨텍스트이다. 애플리케이션 컨텍스트가 구현하는 인터페이스인 &lt;strong&gt;ApplicationContext 는 ResourceLoader를 상속받는다.&lt;/strong&gt; 스프링 컨테이너는 설정정보가 담긴 XML 파일도 ResourceLoader를 통해 Resource 형태로 읽어온다.&lt;/p&gt;

&lt;p&gt;또한 애플리케이션 컨텍스트가 외부에서 읽어오는 모든 정보는 ResourceLoader를 사용한다. 빈 프로퍼티 설정시, 프로퍼티가 Resource 타입일 때, 이 타입으로 별도 빈을 등록하지 않고 문자열 형태로 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:/file.txt&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file:/data/file.txt&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.myserver.com/file.txt&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 문자열로 된 리소스 정보를 Resource 오브젝트로 변환해서 프로퍼티에 주입할 때, &lt;strong&gt;애플리케이션 컨텍스트 자신이 ResourceLoader로서 변환과 로딩기능을 담당한다.&lt;/strong&gt; 따라서 빈 입장에서는 추상화된 Resource 타입의 오브젝트를 주입받으므로 리소스가 어떤 종류인지 상관없이 동일한 방법으로 리소스를 읽을 수 있다.&lt;/p&gt;

&lt;p&gt;Resource 타입은 다음과 같이 실제 리소스가 어떤 것이든 상관없이, getInputStream() 메소드를 통해 스트림으로 가져올 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStreamReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 스프링의 리소스 추상화를 이용해서 리소스의 위치나 접근 방법에 독립적인 코드를 쉽게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/d5c2b6651f9f57523156815ae2bd98d7e5e8be38&quot;&gt;Use Resource class for resource abstraction.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Resource 를 사용할 때는, Resource 오브젝트가 실제 리소스는 아니라는 점을 주의해야 한다. 단지 리소스에 접근할 수 있는 추상적인 핸들러일 뿐이다. 따라서 Resource 오브젝트가 만들어졌다 하더라도, 실제 리소스가 존재하지 않을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;인터페이스-상속을-통한-안전한-기능확장&quot;&gt;인터페이스 상속을 통한 안전한 기능확장&lt;/h2&gt;

&lt;p&gt;지금까지 적용해왔던 DI 는 특별한 기술이라기보다는 디자인 패턴 또는 프로그래밍 모델이라는 관점에서 이해하는 것이 자연스럽다. 스프링같은 DI 프레임워크를 적용하고 빈 설정파일을 통해 애플리케이션을 구성했다고 해서 DI를 올바르게 활용하고 있다고 볼 수는 없다. &lt;strong&gt;DI의 가치를 제대로 얻으려면 먼저 DI에 적합한 오브젝트 설계가 필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;di를-의식하는-설계&quot;&gt;DI를 의식하는 설계&lt;/h3&gt;

&lt;p&gt;DI에 필요한 유연하고 확장성이 뛰어난 오브젝트 설계를 하려면 많은 고민과 학습, 훈련, 경험이 필요하다. 이를 위해 &lt;strong&gt;DI를 의식하면서 오브젝트를 설계해나가야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;적절한 책임에 따라 오브젝트를 분리하고, 항상 의존 오브젝트는 자유롭게 확장될 수 있다는 점을 염두에 두어야 한다.&lt;/strong&gt; 또한 DI는 런타임 시에 의존 오브젝트를 다이내믹하게 연결하여 유연한 확장을 꾀하는 것이 목적이므로, 항상 확장을 염두에 두고 오브젝트 사이의 관계를 생각해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;di와-인터페이스-프로그래밍&quot;&gt;DI와 인터페이스 프로그래밍&lt;/h3&gt;

&lt;p&gt;DI를 적용할 때는 가능한 &lt;strong&gt;인터페이스를 사용해야 한다.&lt;/strong&gt; 두 오브젝트 간의 느슨한 결합을 위해 인터페이스를 통해 연결해야 한다.&lt;/p&gt;

&lt;p&gt;인터페이스를 사용하는 첫 번째 이유는 &lt;strong&gt;다형성&lt;/strong&gt; 을 얻기 위해서이다. DI 적용 예를 보면 구현 클래스를 바꿔가면서 쓸 뿐만 아니라, 프록시 / 데코레이터 / 어댑터 / 테스트 mock 등의 다양한 목적을 위해 인터페이스를 통한 다형성이 활용된다.&lt;/p&gt;

&lt;p&gt;인터페이스를 사용하는 또 다른 이유는 인터페이스 분리 원칙을 통해 &lt;strong&gt;클라이언트와 의존 오브젝트 사이의 관계를 명확히 할 수 있기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하나의 오브젝트가 여러 인터페이스를 구현할 수 있는데, 이는 &lt;strong&gt;각기 다른 관심과 목적을 가지고 있는 클라이언트들이 한 오브젝트를 바라볼 때도 있다는 것이다.&lt;/strong&gt; 어느 특정 클라이언트는 특정 인터페이스에 대해서만 관심을 가지고 있지, 그 오브젝트가 구현한 다른 인터페이스에 대해서는 관심이 없을 수 있다. 이 때 이 클라이언트에게는 관심이 없는 인터페이스의 메소드는 노출시킬 필요가 없다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 이 클라이언트는 A 인터페이스에만 관심이 있다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 이 클라이언트는 B 인터페이스에만 관심이 있다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오브젝트가 응집도 높게 설계되었다하더라도, 목적과 관심이 각기 다른 클라이언트가 있다면 인터페이스를 통해 이를 적절하게 분리해줄 필요가 있다. 이를 &lt;strong&gt;인터페이스 분리 원칙&lt;/strong&gt; 이라고 한다. 만약 인터페이스를 사용하지 않고 &lt;strong&gt;클래스를 직접 참조하게 하였다면, 인터페이스 분리 원칙과 같은 클라이언트에 특화된 의존관계를 만들 방법이 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인터페이스 분리 원칙은 &lt;strong&gt;클라이언트의 목적과 용도에 적합한 인터페이스만을 제공한다는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;인터페이스 분리 원칙이 주는 장점은 &lt;strong&gt;모든 클라이언트가 자신의 관심에 따른 접근 방식을 불필요한 간섭없이 유지할 수 있다는 점이다.&lt;/strong&gt; 따라서 변경이 필요할 때 기존 클라이언트에 영향을 주지 않는 채로 오브젝트의 기능을 확장하거나 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 의존 오브젝트가 확장되어, 기존 클라이언트에서는 &lt;strong&gt;관심이 없는 기능&lt;/strong&gt; 을 추가하고자 할 때 의존 오브젝트의 인터페이스를 바로 수정하는 것은 바람직한 것이 아니다. &lt;strong&gt;추가되는 기능을 사용해야하는 다른 클라이언트만이 사용할 수 있도록 인터페이스를 상속받거나 다른 인터페이스를 추가로 구현하여 유연한 확장을 해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;di를-이용해-다양한-구현-방법-적용&quot;&gt;DI를 이용해 다양한 구현 방법 적용&lt;/h2&gt;

&lt;p&gt;구현된 SqlRegistry 의 인터페이스를 확장하여, SQL 조회 뿐만 아니라 운영 중에 메모리 상에 로드된 SQL 구문을 변경할 수 있는 인터페이스를 만든다.&lt;/p&gt;

&lt;p&gt;운영 중인 서버 시스템에서 정보를 실시간으로 변경하는 작업을 구현할 때 가장 먼저 고려해야할 것은 &lt;strong&gt;동시성 문제&lt;/strong&gt; 이다. 한 번 초기화하고 읽기만 하는 일반적인 데이터는 동시성 문제는 없지만, 만약 수정을 가할 때 동시성 문제가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;concurrenthashmap-사용&quot;&gt;ConcurrentHashMap 사용&lt;/h3&gt;

&lt;p&gt;만약 데이터가 Collection 일 경우, &lt;strong&gt;Collections.synchronizedMap()&lt;/strong&gt; 을 통해 동기화를 해줄 수 있지만 성능에 문제가 생긴다. 따라서 HashMap 일 경우, 동기화된 해시 데이터 조작에 최적화된 &lt;strong&gt;ConcurrentHashMap&lt;/strong&gt; 을 사용하는 것이 권장된다. 이 Collection은 데이터 조작시 전체 데이터에 대해서는 락을 걸지 않고, 조회시에는 아예 락을 걸지 않는다. 따라서 어느 정도 동시성 문제를 해결하면서 성능이 보장되는 동기화된 HashMap으로 사용하기에 적절하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/310dd7fb0d36736b809c23f5f55d9ef1e4eb936f&quot;&gt;Implemented ConcurrentHashMapSqlRegistry.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;내장-db-사용&quot;&gt;내장 DB 사용&lt;/h3&gt;

&lt;p&gt;ConcurrentHashMap이 멀티스레드 환경에서 최소한의 동시성을 보장하고 성능도 나쁜 편은 아니지만, 저장되는 데이터의 양이 많고 자주 변경과 조회가 일어난다면 한계가 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인덱스를 활용한 최적화된 검색을 지원하고 동시에 많은 요청을 처리하면서 안정적인 변경작업이 가능한 기술은 데이터베이스이다.&lt;/strong&gt; 그런데 DAO가 사용할 SQL을 저장하고 관리할 목적으로 별도의 DB를 구성하는 것보다는 번거로움없이 사용가능한 내장형 DB를 사용하는 것이 좋다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;내장형 DB란 애플리케이션에 내장되어서 애플리케이션과 함께 시작하고 종료되는 DB를 말한다. 데이터는 메모리에 저장되어 IO로 인한 부하는 적다. 메모리에 컬렉션이나 오브젝트를 활용하여 데이터를 저장하는 것보다 매우 효과적으로 등록, 수정, 검색이 가능하며 격리수준, 트랜잭션, 최적화된 락킹을 적용할 수도 있다. 메모리로 읽은 데이터를 여러 가지 조건으로 검색하거나 통계를 내야하고, 조작하면서 복잡한 로직을 처리할 경우 내장형 DB를 활용하면 매우 편하게 작업을 진행할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바에서 많이 사용되는 내장형 DB는 &lt;strong&gt;Derby, HSQL, H2&lt;/strong&gt; 를 꼽을 수 있다. 모두 JDBC 드라이버를 제공하며 표준 DB와 호환되므로 JDBC 프로그래밍 모델을 그대로 따라서 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;애플리케이션과 생명주기를 같이하는 내장형 DB를 사용하기 위해서는 &lt;strong&gt;DB를 구동시키고 초기화 SQL 스크립트를 실행시키는 별도의 초기화작업이 필요하다.&lt;/strong&gt; 일단 DB를 초기화하고 난 다음에는, 내장형 DB용 JDBC 드라이버를 통해 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링은 내장형 DB를 쉽게 사용할 수 있도록 내장형 DB를 위한 서비스 추상화 기능을 제공한다. 내장형 DB를 초기화하기 위한 작업을 지원하는 &lt;strong&gt;내장형 DB 빌더&lt;/strong&gt; 를 제공하는데, 필요한 DB 접속 URL과 드라이버 등을 초기화해준다. 그리고 데이터 초기화를 위해 테이블 등을 생성하거나 초기 데이터를 삽입해주는 SQL을 실행하기도 한다.&lt;/p&gt;

&lt;p&gt;내장형 DB를 사용하기 위해 먼저 필요한 테이블을 생성할 수 있도록 &lt;strong&gt;SQL 스크립트를 준비해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLMAP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KEY_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SQL_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 만약 초기 데이터가 필요하다면, 만들어진 테이블에 삽입하는 스크립트도 준비해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'KEY1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SQL1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLMAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQL_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'KEY2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SQL2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;내장형 DB를 실행시킬 때, 위와 같이 만든 두 개의 스크립트가 실행되어야 한다. 스프링이 제공하는 내장형 DB 빌더는 DB 엔진을 생성하고 초기화 스크립트를 실행해서 테이블과 초기 데이터를 준비한 뒤에 DB에 접근할 수 있는 Connection을 생성해주는 DataSource &lt;strong&gt;(정확히는 shutdown() 메소드가 추가된 EmbeddedDataBase 타입)&lt;/strong&gt; 오브젝트르 돌려준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmbeddedDatabase&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/8972740419c75f8c882d0855a1edc34d59315f39&quot;&gt;Embedded DB, HSQLDB Test.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;내장형 DB를 이용하기 위해 &lt;strong&gt;EmbeddedDatabaseBuilder&lt;/strong&gt; 를 사용하는데, 보통 이 오브젝트는 한 번 초기화를 거치고 나서 내장형 DB를 구동하면 그 이후로는 사용할 일이 없으므로 빈으로 등록하지 않는다. 보통 이 빌더를 사용해 내장형 DB에 접근할 수 있는 &lt;strong&gt;EmbeddedDatabase&lt;/strong&gt; 타입의 오브젝트를 생성해주는 팩토리 빈을 만들어야 한다.&lt;/p&gt;

&lt;p&gt;스프링에는 팩토리 빈을 만드는 번거로운 작업을 대신해주는 전용 태그가 있다. 내장형 DB와 관련된 빈을 설정해주고 등록해주는 태그는 &lt;strong&gt;jdbc&lt;/strong&gt; 스키마에 정의되어 있다. jdbc 네임스페이스를 정의하고 간단한 전용 태그로 빈을 정의하면 내장형 DB를 쉽게 사용가능하다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
       &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:jdbc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/jdbc&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...
                http://www.springframework.org/schema/jdbc
                http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;jdbc:embedded-database&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;embeddedDatabase&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HSQL&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;jdbc:script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:schema.sql&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/jdbc:embedded-database&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 “embeddedDatabase” 라는 아이디를 가진 빈이 등록되며, 빈의 타입은 EmbeddedDatabase 타입이다. location에 정의한 스키마를 통해 내장형 DB가 초기화될 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jdbc 태그에 의해 만들어진 EmbeddedDatabase 타입 빈은 스프링 컨테이너가 종료될 때, 자동으로 shutdown() 메소드가 호출되게 되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/869443f16da8217a07f3ab6fedfefb01fc288f6e&quot;&gt;EmbeddedDbSqlRegistry Test.&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/21f9ccdcad4e0ffe8d09640316da2fa5c6ecf391&quot;&gt;Applied EmbeddedDbSqlRegistry on SqlService.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;내장형-db-트랜잭션-적용&quot;&gt;내장형 DB, 트랜잭션 적용&lt;/h3&gt;

&lt;p&gt;구현된 EmbeddedDbSqlRegistry 는 내장형 DB를 사용하므로, 조회가 빈번하게 일어나는 도중에 업데이트가 일어나더라도 데이터가 깨지는 일은 없다. 그런데 다음과 같이 하나 이상의 SQL 구문을 맵으로 파라미터를 받아 업데이트 하는 다음 메소드는 문제가 생길 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlUpdateFailureException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updateSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 메소드는 맵 형식으로 파라미터를 받아, SQL 구문을 하나씩 업데이트하도록 되어 있다. 만약 여러 개의 SQL 구문을 변경하는 도중에 키가 없어 예외가 발생하면 작업이 중단되면, &lt;strong&gt;중단되기 전에 업데이트를 완료한 SQL 구문은 그대로 DB에 반영되어 있게된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;보통 운영 중인 시스템에서 여러 SQL 구문을 업데이트하는 경우는 &lt;strong&gt;각 SQL 구문들이 서로 영향이 있기 때문이다.&lt;/strong&gt; 따라서 여러 개의 SQL 구문을 변경하는 작업은 반드시 &lt;strong&gt;한 트랜잭션 안에서 일어나야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;컬랙션으로 SQL 구문을 다룰 경우, 트랜잭션 개념을 적용하기가 힘들다. 여러 개의 엘리먼트를 트랜잭션과 같은 원자성이 보장된 상태에서 변경하려면 매우 복잡한 과정이 필요하기 때문이다. 반면에 내장형 DB의 경우 트랜잭션 적용이 가능하다.&lt;/p&gt;

&lt;p&gt;보통 &lt;strong&gt;트랜잭션 매니저는 여러 AOP를 통해 만들어지는 트랜잭션 프록시에서 같은 매니저를 공유해야하므로 싱글톤 빈으로 등록&lt;/strong&gt; 하나, 이 경우와 같이 내장형 DB에 대한 트랜잭션 매니저는 공유할 필요가 없다. 간결하게 사용할 수 있도록 트랜잭션 처리 코드로 구현하기 보다는 &lt;strong&gt;TransactionTemplate&lt;/strong&gt; 를 사용하여 템플릿 / 콜백 패턴을 적용하는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlUpdateFailureException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionCallbackWithoutResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doInTransactionWithoutResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entrySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;updateSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/6ae652cb2ba975b8a128c195cf0a9854b94151f7&quot;&gt;Applied transaction on multiple sql row update.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/10/22/toby_spring_07_core_apply_2-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/10/22/toby_spring_07_core_apply_2-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 07: 스프링 핵심 기술의 응용 part.1</title>
        <description>&lt;p&gt;스프링이 가장 가치를 두고 적극적으로 활용하려고 하는 것은 자바 언어가 기반을 두고 있는 객체지향 기술로, 이 객체지향적인 언어의 장점을 적극적으로 활용하여 코드를 작성하도록 도와준다. 스프링을 사용하는 개발자도 스프링이 제공하는 이 세 가지 기술을 필요에 따라 스스로 응용할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sql과-dao의-분리&quot;&gt;SQL과 DAO의 분리&lt;/h2&gt;

&lt;p&gt;DAO는 데이터를 가져오고 조작하는 작업의 인터페이스 역할을 하는 계층이다. 데이터 엑세스 로직이 변경되지 않더라도 DB의 테이블이나 컬럼명, SQL 문장이 바뀌면 DAO 코드가 수정되어야 한다. 따라서 &lt;strong&gt;SQL을 적절히 분리하여, DAO 코드와 다른 파일이나 위치에 두고 관리하면 좋을 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;sql-제공-서비스&quot;&gt;SQL 제공 서비스&lt;/h3&gt;

&lt;p&gt;SQL 문장을 기존 프로퍼티를 설정하는 것과 같이 애플리케이션 컨텍스트에서 DI를 해줄 수도 있지만, SQL과 DI 설정정보가 섞여 있으면 보기가 좋지 않고 관리하기에도 적절하지 않다. 또한 애플리케이션 컨텍스트에서 SQL 문장을 정의한다면 애플리케이션을 다시 시작하기 전까지는 변경이 매우 어렵다는 점이 있다.&lt;/p&gt;

&lt;p&gt;이러한 문제를 해결하기 위해, DAO가 사용할 SQL을 제공해주는 기능을 위한 독립된 서비스가 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/d86a72d8ff3c9a18624106a7c2aa6fe2a70d1d82&quot;&gt;Separated sql statement and DAO source code using SqlService.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 커밋 로그에서 DAO는 필요한 SQL 문장이 어디에 있고 어떻게 가져오는지에 신경 쓸 필요가 없고, 반대로 다양한 방법으로 구현될 수 있는 SqlService 인터페이스를 통해 DAO에는 영향을 주지 않은 채로 원하는 방식의 SQL 문장을 준비할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;인터페이스의-분리와-자기참조-빈&quot;&gt;인터페이스의 분리와 자기참조 빈&lt;/h2&gt;

&lt;p&gt;하지만 앞서 언급하였듯이, 애플리케이션 컨텍스트와 같은 스프링의 XML 설정 파일에서 SQL 정보를 넣어놓고 활용하는 것은 좋은 방법이 아니다. SQL을 저장해두는 독립적인 파일을 사용하는 것이 바람직하다. 따로 SQL 정보만 정의한 XML 파일을 통해 DAO에게 필요한 SQL 문장을 제공해주는 서비스를 만들 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jaxb&quot;&gt;JAXB&lt;/h3&gt;

&lt;p&gt;XML에 담긴 정보를 파일에서 읽어오는 방법은 다양한데, Java에서는 XML 문서정보를 동일한 구조의 오브젝트로 매핑해주는 JAXB가 있다. &lt;strong&gt;JAXB의 강점은 XML 문서 정보를 거의 동일한 구조를 지니는 오브젝트로 직접 매핑시켜준다는 것이다.&lt;/strong&gt; 이를 통해 해당 XML을 읽어 마치 오브젝트처럼 다룰 수가 있다.&lt;/p&gt;

&lt;p&gt;JAXB는 XML 문서의 구조를 정의한 &lt;strong&gt;스키마를 통해 매핑할 오브젝트의 클래스를 자동으로 생성&lt;/strong&gt; 해주는 컴파일러도 제공한다. JAXB API는 이 자동생성된 클래스의 &lt;strong&gt;annotation에 담긴 매핑정보를 통해 XML과 자동 변환작업을 수행한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-10-10-toby_spring_07_core_apply/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;스키마&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 클래스 생성에 필요한 스키마를 작성한다. 스키마는 XML 문서의 구조를 정의하고 컴파일하여 클래스를 생성할 수 있도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;schema&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;targetNamespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.epril.com/sqlmap&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;xmlns:tns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.epril.com/sqlmap&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;elementFormDefault=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qualified&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlmap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- SqlMap 정의 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;complexType&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;sequence&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sql&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxOccurs=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unbounded&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tns:sqlType&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sequence&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/complexType&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/element&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;complexType&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sqlType&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- SqlType 정의 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;simpleContent&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- value의 타입을 지정 --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;attribute&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;use=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;required&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- key의 타입 지정 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/simpleContent&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/complexType&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 JAXB 컴파일러로 컴파일하면 다음 절에 나오는 클래스들이 생성될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-10-10-toby_spring_07_core_apply/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컴파일을 진행할 때는 생성되는 클래스들이 위치할 패키지 이름을 제공해야 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;자동생성된 클래스&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAXB는 다음과 같이 자동 생성된 클래스의 annotation에 담긴 매핑정보를 활용하여 XML 에 담긴 정보와 오브젝트를 매핑시킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@XmlAccessorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XmlAccessType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@XmlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sql&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 매핑할 때 참고하는 정보가 annotation에 있다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@XmlRootElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sqlmap&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sqlmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@XmlAccessorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XmlAccessType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@XmlType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sqlType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqlType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@XmlValue&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SQL을 저장할 필드&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@XmlAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// key 애트리뷰트에담긴, 검색용 키값을 위한 String 타입의 필드&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SQL map XML&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;sqlmap&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sql&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;insert&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sql&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;select&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sql&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;delete&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sql&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sqlmap&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;sql&amp;gt; 태그는 각 SqlType 클래스 오브젝트로 매핑되며, @XmlAttribute 및 @XmlValue로 지정한 필드들에 각 키 값 및 sql 문장이 할당된다. @XmlElement에 의해 매핑된 SqlType 클래스 오브젝트들이 Sqlmap의 sql 리스트에 매핑될 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;언마샬링(unmarshalling): JAXB에서 XML 문서를 읽어 자바의 오브젝트로 변환&lt;/li&gt;
  &lt;li&gt;마샬링(marshalling): 바인딩 오브젝트를 XML 문서로 변환&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/bc9e65532026894f18ea2e35c3b5dde46c3bb209&quot;&gt;Test JAXB for sqlmap&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/f7ab4532d04fddae7f348a3e689fb5801289fc58&quot;&gt;Use XmlSqlService for getting sql statement by key.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;빈의-초기화-작업&quot;&gt;빈의 초기화 작업&lt;/h3&gt;

&lt;p&gt;다음과 같이 스프링 빈으로 등록되는 클래스의 생성자에서 복잡한 초기화 작업을 다루는 것은 좋지 않다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XmlSqlService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;XmlSqlService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUnmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sql/sqlmap.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JAXBException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;오브젝트 생성 중에 발생하는 예외는 다루기가 힘들고, 상속하기에도 불편하며 보안에도 문제가 발생할 수 있다. &lt;strong&gt;초기상태를 가지는 오브젝트를 만들어놓고, 별도의 초기화 메소드를 통해 사용하는 방법이 바람직하다.&lt;/strong&gt; 또한 코드 상에서 읽어들일 파일의 위치와 이름이 고정되어 있다. 코드와 다르게 바뀔 가능성이 있는 내용은 외부에서 DI 해주는 것이 좋다.&lt;/p&gt;

&lt;p&gt;스프링에서는 빈 오브젝트를 생성하고 DI 작업을 수행해서 프로퍼티들을 모두 주입해준 뒤에 &lt;strong&gt;미리 지정한 초기화 메소드를 호출해주는 기능을 갖고있다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 스프링 컨테이너가 빈을 생성한 뒤에 부가적인 작업을 수행할 수 있게 해주는 “빈 후처리기, BeanPostProcessor” 를 제공하는데, AOP를 위한 프록시 자동생성기 (ex: DefaultAdvisorAutoProxyCreator)가 대표적이다. 이 뿐만 아니라 annotation을 활용한 빈 설정을 지원하는 몇 가지 빈 후처리기가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음과 같이 애플리케이션 컨텍스트 설정 파일에 &amp;lt;context:annotation-config&amp;gt; 를 추가하면, 빈 설정 기능에 사용할 수 있는 특별한 annotation을 사용할 수 있게 해주는 빈 후처리기들이 등록된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dhsim86.github.io/web/2017/03/28/spring_annotations_01-post.html&quot;&gt;context:annotation-config&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:tx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
                 http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                 http://www.springframework.org/schema/context
                 http://www.springframework.org/schema/context/spring-context-4.3.xsd
                 http://www.springframework.org/schema/tx
                 http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:annotation-driven/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링에서는 &lt;strong&gt;@PostConstruct&lt;/strong&gt; 라는 annotation이 지정된 메소드가 있으면, 해당 빈의 오브젝트를 생성하고 DI 작업을 마친 뒤에 해당 메소드를 자동으로 실행시켜준다. 따라서 빈 오브젝트의 초기화 메소드를 지정하는데 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@PostConstruct 는 java.lang.annotation 패키지에 포함된 JavaEE 5나 JDK 6에 포함된 표준 annotation 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/58e341f983e30d32bad932e4c28bc8d92d68b2f8&quot;&gt;Use @PostConstruct to load sqlmap.xml file.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터페이스-분리&quot;&gt;인터페이스 분리&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XmlSqlService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqlMapFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUnmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlMapFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JAXBException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlRetrievalFailureException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlRetrievalFailureException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Can not find appropriate sql statement, key: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 XmlSqlService 클래스는 XML 포맷의 SQL 구문을 읽어와서 HasMap 타입의 컬렉션에 저장해두는 방식으로 &lt;strong&gt;고정되어 있다.&lt;/strong&gt; 만약 다른 포맷의 SQL 정보를 읽어와야 하거나 다른 방식으로 SQL 문장을 저장해둘려면 코드가 직접 수정되어야 한다. 이는 &lt;strong&gt;단일 책임의 원칙&lt;/strong&gt;을 위반한 것으로 기술의 변화가 코드의 수정을 초래한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“SQL을 가져오는 것”&lt;/strong&gt; 과 &lt;strong&gt;“SQL을 보관하고 사용하는 것”&lt;/strong&gt; 은 서로 다른 이유로 변경될 수 있는 독립적인 &lt;strong&gt;전략&lt;/strong&gt; 이다. 따라서 서로 관심이 다른 코드들을 분리하고, 유연하게 확장 가능하도록 DI를 적용해볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;책임에 따른 인터페이스 정의&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XmlSqlService 는 다음과 같은 독립적으로 변경가능한 책임이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQL 정보를 외부의 리소스로부터 로드
    &lt;ul&gt;
      &lt;li&gt;XML이든 다른 포맷의 리소스이든 애플리케이션에서 SQL을 사용할 수 있도록 메모리로 로드하는 책임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL을 보관해두고 있다가 필요할 때 제공
    &lt;ul&gt;
      &lt;li&gt;어떤 방식으로 저장하든 애플리케이션에서 정해진 인터페이스를 통해 SQL을 제공해주는 책임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DAO에 SQL을 제공해주는 “SqlService” 인터페이스를 제공하는 오브젝트는 다음과 같이 위의 두 가지 책임을 가진 오브젝트와 협력해서 동작하도록 해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-10-10-toby_spring_07_core_apply/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 &lt;strong&gt;SqlReader&lt;/strong&gt; 와 &lt;strong&gt;SqlRegistry&lt;/strong&gt; 두 가지 타입의 오브젝트를 사용하여 DAO에서 필요한 SQL 을 제공하는 기능을 구현한다. SqlRegistry의 일부 인터페이스는 런타임에 등록된 SQL 문장을 변경할 수 있도록 &lt;strong&gt;SqlUpdater&lt;/strong&gt; 와 같이 다른 곳에서 사용하게 할 수도 있다.&lt;/p&gt;

&lt;p&gt;그런데 다음과 같이 SqlReader 및 SqlRegistry 를 사용하는 SqlService 에서 SqlReader로부터 SqlRegistry로 데이터를 전달하는 코드가 필요할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addSqls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SqlService 에서는 단순히 SQL 정보를 활용하는 것이 아닌, 그냥 전달하는 것이 전부라면 위 코드와 같이 작성될 필요가 없다. 위 코드는 &lt;strong&gt;Map&lt;/strong&gt; 이라는 오브젝트로 서로 다른 두 타입(SqlReader, SqlRegistry)의 인터페이스의 파라미터를 불필요하게 강제하기 때문이다.&lt;/p&gt;

&lt;p&gt;위 코드와 같이 작성하기보다는, 다음과 같이 SqlReader 에게 SqlRegistry &lt;strong&gt;전략&lt;/strong&gt; 을 제공하면서 읽은 Sql 정보를 SqlRegistry에 등록하라고 요청하는 것이 좋다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sqlReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readSql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 외부에서 특정 포맷으로 변환한 Sql 정보를 주고받을 필요없이, SqlReader가 SqlRegistry에 Sql 정보를 직접 등록하게 함으로써, &lt;strong&gt;서로 각자의 구현 방식을 독립적으로 유지하면서 필요한 관계만 가지고 협력해서 일을 하는 구조가 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자바의 오브젝트는 데이터를 가질 수 있는데, 자신이 가진 데이터를 이용해 어떻게 작업할지는 자기 자신이 가장 잘 알고 있다. 꼭 필요하지 않은 이상, 오브젝트 내부의 데이터를 외부로 노출시킬 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-10-10-toby_spring_07_core_apply/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음 &lt;strong&gt;use self-reference to separate responsibility.&lt;/strong&gt; 커밋로그처럼, &lt;strong&gt;자기 참조 빈&lt;/strong&gt; 을 통해 책임 분리가 필요한 클래스를 유연한 구조로 만들고자 할 때 처음 시도해볼 수 있는 방법이 있다. 책임과 관심사가 복잡하게 얽혀 있는 것을 유연하게 만들 때 사용해 볼만한 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/523a7ed0ee946ecb3dfdfe36347ab32da7ffb3a8&quot;&gt;use self-reference to separate responsibility.&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/fc567d7fee215706bcfe7954ec8d386a3b94a669&quot;&gt;use independent beans implements SqlService, SqlReader, SqlRegistry.&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;디폴트 의존관계를 갖는 빈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;확장을 고려해서 기능을 분리하고, 인터페이스와 전략 패턴을 도입하고, DI를 적용해나간다면 늘어난 클래스와 인터페이스 구현과 의존관계 설정에 대한 부담은 감수해야 한다.&lt;/p&gt;

&lt;p&gt;특정 의존 오브젝트가 대부분의 환경에서 거의 디폴트로 사용된다면 디폴트 의존관계를 갖는 빈을 만드는 것을 고려해볼 필요가 있다. &lt;strong&gt;DI 를 사용한다고 해서 항상 모든 프로퍼티 설정을 둘 필요가 없으며, 자주 사용되는 의존 오브젝트는 별도의 설정이 없으면 디폴트로 사용하게 하는 것도 좋은 방법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultSqlService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseSqlService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultSqlService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setSqlReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JaxbXmlSqlReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setSqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMapSqlRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 거의 대부분의 상황에서 JAXB를 통해 SQL 문장을 XML 포맷으로 읽거나, HashMap을 통해 SQL 문장을 저장한다면 디폴트 의존 오브젝트를 사용하는 빈을 만들 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 DefaultSqlService 가 BaseSqlService 를 상속하였다는 것이 중요하다. sqlReader와 sqlRegistry 를 설정하기 위한 setter 메소드를 그대로 갖고 있어서 설정 파일에서 얼마든지 변경할 수 있으므로, 디폴트가 아닌 다른 기술을 사용하는 오브젝트를 사용하고자할 때는 설정 파일에서 해당 프로퍼티를 설정해주면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1ba668a7e9bce4faecb22334a8c9a9fd5eb9e206&quot;&gt;use DefaultSqlService.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/10/10/toby_spring_07_core_apply-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/10/10/toby_spring_07_core_apply-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 06: AOP part.3</title>
        <description>&lt;h2 id=&quot;트랜잭션-속성&quot;&gt;트랜잭션 속성&lt;/h2&gt;

&lt;p&gt;코드로 트랜잭션 경계설정을 작성할 때 보통 다음과 같이 작성된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;strong&gt;DefaultTransactionDefinition&lt;/strong&gt; 은 &lt;strong&gt;TransactionDefinition&lt;/strong&gt; 인터페이스를 구현하는 객체로 &lt;strong&gt;트랜잭션의 동작방식에 영향을 주는 네 가지 속성을 정의한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_REQUIRED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_SUPPORTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_MANDATORY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_REQUIRES_NEW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_NOT_SUPPORTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_NEVER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROPAGATION_NESTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_DEFAULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_READ_UNCOMMITTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_READ_COMMITTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_REPEATABLE_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISOLATION_SERIALIZABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIMEOUT_DEFAULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPropagationBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIsolationLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isReadOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-전파-transaction-propagation&quot;&gt;트랜잭션 전파 (Transaction Propagation)&lt;/h3&gt;

&lt;p&gt;트랜잭션 전파란 트랜잭션의 경계에서 &lt;strong&gt;이미 진행 중인 트랜잭션이 있을 때, 또는 없을 때 어떻게 동작할 것인가 결정하는 방식을 말한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-14-toby_spring_06_aop_3/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 각각 독립적인 2개의 트랜잭션이 있을 때, B 트랜잭션의 동작 방식을 결정할 수 있다.&lt;/p&gt;

&lt;p&gt;B 트랜잭션이 A 트랜잭션에 참여시킬 경우, (2)에서 예외가 발생했을 때 B 트랜잭션 내용도 롤백시킬 수 있다.
반면에 B 트랜잭션을 A 트랜잭션에 독립적인 트랜잭션으로 만들 경우, A 트랜잭션은 B 트랜잭션 상황에 무관하게 진행될 수도 있다. 즉, B의 트랜잭션 경계를 빠져나오면 A 트랜잭션과는 무관하게 커밋되거나 롤백될 수 있다. 반대로 (2)에서 예외가 발생하더라도 B 트랜잭션의 결과는 영향을 받지 않는다.&lt;/p&gt;

&lt;p&gt;대표적으로 다음과 같은 트랜잭션 전파 속성이 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_REQUIRED&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가장 많이 사용되는 트랜잭션 속성으로, &lt;strong&gt;진행 중인 트랜잭션이 없다면 새로 시작하고 이미 시작된 트랜잭션이 있다면 이에 참여한다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_REQUIRES_NEW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;항상 새로운 트랜잭션을 시작한다. 즉 트랜잭션이 있든 없든 항상 독립적인 트랜잭션을 만든다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;PROPAGATION_NOT_SUPPORTED&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 속성을 사용하면 트랜잭션 없이 동작한다. 진행 중인 트랜잭션이 있어도 무시한다.&lt;/p&gt;

&lt;p&gt;보통 트랜잭션 경계설정할 때 AOP를 통해 한 번에 많은 메소드에 동시 적용하는 방법을 사용하는데 그 중 한 두개의 메소드만 제외하고 싶을 수 있다. 포인트컷을 잘 만들어 그 메소드들만 적용안하게 할 수도 있지만, 이 속성을 그 메소드에 적용해서 포인트컷을 간결하게 할 수도 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;따라서 트랜잭션 매니저를 통해 트랜잭션을 시작할 때 다음 코드와 같이 &lt;strong&gt;getTransaction&lt;/strong&gt; 이라는 이름의 메소드를 사용하는 이유는 트랜잭션 전파속성때문이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;getTransaction&lt;/strong&gt; 메소드는 트랜잭션 전파 속성에 따라 새로운 트랜잭션을 시작할 수도 있고, 이미 진행 중인 트랜잭션에 참여만 할 수도 있다. 진행 중인 트랜잭션에 참여하는 경우, 트랜잭션 경계 끝에서 트랜잭션을 커밋하지도 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;격리수준-isolation-level&quot;&gt;격리수준 (Isolation Level)&lt;/h3&gt;

&lt;p&gt;모든 DB 트랜잭션은 격리수준을 가져야 한다. 서버 환경에서는 여러 개의 트랜잭션이 동시에 진행될 수 있는데 모든 트랜잭션이 순차적으로 진행되어 서로 독립적인 것이 좋겠지만 그러면 성능이 크게 떨어진다. &lt;strong&gt;적절하게 격리수준을 조정하여 가능한 많은 트랜잭션을 동시에 수행하면서도 문제가 발생하지 않도록 제어가 필요하다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;격리수준은 기본적으로 DB에 설정되어 있으나, JDBC 드라이버나 DataSource 등에서 재설정 가능하고 필요에 따라 트랜잭션 단위로 격리수준을 조정할 수 있다. &lt;strong&gt;DefaultTransactionDefinition&lt;/strong&gt; 의 기본 격리수준은 &lt;strong&gt;ISOLATION_DEFAULT&lt;/strong&gt; 이다. 이는 DataSource에 설정된 디폴트 격리수준을 그대로 따른다는 것이다. 특별한 작업을 수행하는 메소드의 경우에는 독자적인 격리수준을 지정할 필요가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;제한시간&quot;&gt;제한시간&lt;/h3&gt;

&lt;p&gt;트랜잭션을 수행하는데 제한시간을 설정할 수 있다. &lt;strong&gt;DefaultTransactionDefinition&lt;/strong&gt; 의 기본설정은 제한시간이 없다. 독립적인 트랜잭션을 직접 시작할 수 있는 &lt;strong&gt;PROPAGATION_REQUIRED&lt;/strong&gt; 나 &lt;strong&gt;PROPAGATION_REQUIRES_NEW&lt;/strong&gt; 와 함께 사용해야만 의미가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;읽기전용&quot;&gt;읽기전용&lt;/h3&gt;

&lt;p&gt;트랜잭션 내에서 데이터를 조작하는 시도를 막는다. 또한 데이터 엑세스 기술에 따라 성능이 향상될 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;제한시간(timeout) 및 읽기전용(readOnly) 속성은 트랜잭션이 처음 시작할 때가 아니라면 적용되지 않는다. 즉 트랜잭션에 참여할 때, 참여하는 트랜잭션 속성과 충돌하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;transactioninterceptor&quot;&gt;TransactionInterceptor&lt;/h2&gt;

&lt;p&gt;다음과 같은 어드바이스와 같이 트랜잭션 경계설정 부가기능을 사용할 때, 트랜잭션 속성을 바꾸면 이 어드바이스를 사용하는 모든 트랜잭션의 속성이 일괄적으로 바뀐다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionAdvice&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;구현하기에 따라선, 메소드마다 다른 트랜잭션 속성을 부여하고 싶을 수 있다. 메소드별로 다른 트랜잭션 속성을 적용하려면 어드바이스의 기능을 확장해야 한다. 스프링의 &lt;strong&gt;TransactionInterceptor&lt;/strong&gt; 를 사용하면 메소드 이름 패턴에 따라 트랜잭션 속성을 다르게 적용시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TransactionInterceptor 는 트랜잭션 속성 정의를 메소드 이름 패턴을 이용해서 다르게 지정할 수 있는 방법을 추가적으로 제공한다.&lt;/strong&gt; 다음과 같이 xml에 적용한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.transaction.interceptor.TransactionInterceptor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAttributes&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;props&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;PROPAGATION_REQUIRED,readOnly,timeout_30&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upgrade*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;PROPAGATION_REQUIRES_NEW,ISOLATION_SERIALIZABLE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;PROPAGATION_REQUIRED&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/props&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;xml에서 트랜잭션 속성을 정의할 때 &lt;strong&gt;메소드 이름 패턴을 키로 잡고, 문자열로써 트랜잭션 속성을 정의하면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드 이름이 하나 이상의 패턴과 일치할 때는, 등록된 이름 패턴 중에서 가장 정확히 일치하는 것이 적용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PROPAGATION_NAME, ISOLATION_NAME, readOnly, timeout_NNNN, -Exception1, +Exception2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PROPAGATION_NAME: 트랜잭션 전파 방식, PROPAGATION_ 으로 시작한다.&lt;/li&gt;
  &lt;li&gt;ISOLATION_NAME: 격리 수준, ISOLATION_ 으로 시작한다.&lt;/li&gt;
  &lt;li&gt;readOnly: 읽기 전용 설정&lt;/li&gt;
  &lt;li&gt;timeout_NNNN: timeout_ 으로 시작한다.&lt;/li&gt;
  &lt;li&gt;-Exception1: 롤백 대상으로 추가할 것을 &lt;strong&gt;”-“&lt;/strong&gt; 로 붙인다.&lt;/li&gt;
  &lt;li&gt;+Exception2: &lt;strong&gt;”+”&lt;/strong&gt; 를 통해 해당 예외에 대해서도 롤백하지 않고 커밋시키게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 속성들중 트랜잭션 전파 항목만 필수사항이고 나머지는 모두 생략가능하며 순서는 바뀌어도 상관없다.&lt;/p&gt;

&lt;p&gt;위 xml 설정과 같이 트랜잭션 매니저를 설정하는 것 외에 &lt;strong&gt;transactionAttributes&lt;/strong&gt; 프로퍼티를 통해 각 메소드 패턴별로 적용할 트랜잭션 속성을 정의할 수 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;rollbackOn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;transactionAttributes 프로퍼티는 &lt;strong&gt;TransactionAttribute&lt;/strong&gt; 인터페이스를 구현한 클래스의 오브젝트로 트랜잭션 네 가지 속성 말고도 &lt;strong&gt;어떤 예외가 발생하면 롤백을 할 것인가를 결정하는 메소드를 추가적으로 가지고 있다.&lt;/strong&gt; 이 프로퍼티를 통해 트랜잭션 부가기능의 모든 동작방식을 제어할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionAttribute&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransactionDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getQualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollbackOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링이 제공하는 &lt;strong&gt;TransactionInterceptor&lt;/strong&gt; 는 기본적으로 두 가지 종류의 예외처리 방식이 있는데, &lt;strong&gt;RuntimeException&lt;/strong&gt; 에 대해서는 트랜잭션을 롤백시키고, &lt;strong&gt;Checked 예외를 던질 경우 이 것을 예외상황으로 받아들이지 않고 비즈니스 로직에 따른 리턴 방식의 한 가지로 인식하여 트랜잭션을 커밋시킨다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이는 비즈니스적인 의미가 있는 예외상황이고 복구가능한 예외상황에서만 Checked 예외를 사용하고, 복구 불가능한 수준의 예외는 RuntimeException으로 포장해서 전달하는 방식을 따른다고 가정하기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그런데 이런 기본 예외처리 원칙을 따르지 않을 경우에는 &lt;strong&gt;rollbackOn&lt;/strong&gt; 메소드를 통해 기본 원칙과는 다른 예외처리가 가능하게 해준다. 즉, 이 것을 활용하여 특정 Checked 예외에 대해서 롤백시키고, 특정 런타임 예외에 대해서는 트랜잭션을 커밋시킬 수도 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;TransactionInterceptor는 TransactionAttribute를 &lt;strong&gt;Properties 라는 일종의 맵 타입 오브젝트로 전달받는다.&lt;/strong&gt;
즉 다음과 같이 setter 가 정의되어 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransactionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NameMatchTransactionAttributeSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameMatchTransactionAttributeSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionAttributeSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/5ee66c82588cba009b74a3a6daaaf9d4c9fd1fb2&quot;&gt;Use TransactionInterceptor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tx-네임스페이스를-통한-등록&quot;&gt;tx 네임스페이스를 통한 등록&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TransactionInterceptor&lt;/strong&gt; 및 &lt;strong&gt;TransactionAttribute&lt;/strong&gt; 타입의 속성 정보도 &lt;strong&gt;tx 스키마 전용 태그&lt;/strong&gt; 를 이용해 정의가능하다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:tx=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/tx&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...
  http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

...

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- advice 태그에 의해, TransactionInterceptor 빈이 등록된다 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:advice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transaction-manager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 트랜잭션 매니저의 빈 아이디가 &quot;transactionManager&quot; 라면 생략 가능하다. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:attributes&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;propagation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REQUIRED&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;read-only=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upgrade*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;propagation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REQUIRES_NEW&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isolation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SERIALIZABLE&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;propagation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;REQUIRED&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 디폴트 값이 스키마에 정의되어 있어 속성이 REQUIRED 라면 생략 가능하다. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:attributes&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:advice&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionPointcut&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* *..*ServiceImpl.upgrade*(..))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:advisor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;advice-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionPointcut&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;트랜잭션 속성을 개별 애트리뷰트를 통해 지정할 수 있어 읽기가 쉽고, XML 에디터의 자동 완성을 통해 편하게 작성가능하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/5a0a08560baa6bfc97a206c8a06069659a714235&quot;&gt;Use tx schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;포인트컷과-트랜잭션-속성의-적용-전략&quot;&gt;포인트컷과 트랜잭션 속성의 적용 전략&lt;/h2&gt;

&lt;p&gt;트랜잭션 부가기능을 적용할 메소드를 지정하는 작업은 포인트컷에 의해 진행되고, 전파 속성을 개별적으로 지정하는 것은 어드바이스의 트랜잭션 전파 속성에 따라 결정된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-포인트컷-표현식은-타입-패턴이나-빈-이름을-사용&quot;&gt;트랜잭션 포인트컷 표현식은 타입 패턴이나 빈 이름을 사용&lt;/h3&gt;

&lt;p&gt;일반적으로 트랜잭션을 적용할 타깃 클래스의 메소드는 모두 트랜잭션 적용 후보가 되는 것이 바람직하다. 메소드 단위까지 세밀하게 포인트컷을 정의해줄 필요는 없다. 단순한 DB 쓰기 작업을 진행하는 메소드의 경우에도 트랜잭션에 참여할 필요가 생길 수 있다.&lt;/p&gt;

&lt;p&gt;따라서 단순히 쓰기와 조회 작업만 하는 메소드에도 모두 트랜잭션을 적용하는 것이 좋다. 조회의 경우, 트랜잭션 속성을 &lt;strong&gt;읽기 전용으로 해두면 성능의 향상을 가져올 수도 있다.&lt;/strong&gt; 복잡한 조회의 경우에는 타임아웃을 걸어야 할 때도 있고, 격리 수준에 따라 조회도 반드시 트랜잭션 안에서 진행할 필요가 생긴다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;트랜잭션용 포인트컷 표현식 에는 메소드나 파라미터, 예외에 대한 패턴을 정의하지 않는 것이 바람직하다.&lt;/strong&gt; 트랜잭션 경계를 사용할 클래스들이 선정된다면 그 클래스를 포함하는 패키지나 클래스 이름에서 일정한 패턴을 결정하여 표현식으로 만든다.&lt;/p&gt;

&lt;p&gt;스프링의 빈 이름을 사용하는 &lt;strong&gt;bean()&lt;/strong&gt; 표현식을 사용하는 것도 고려해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;공통된-메소드-이름-규칙을-통해-최소한의-트랜잭션-어드바이스와-속성을-정의&quot;&gt;공통된 메소드 이름 규칙을 통해 최소한의 트랜잭션 어드바이스와 속성을 정의&lt;/h3&gt;

&lt;p&gt;기준이 되는 몇 가지 트랜잭션 속성을 정의하고 그에 따라 &lt;strong&gt;적절한 메소드 명명 규칙을 만들어두는 것이 좋다.&lt;/strong&gt;
다음과 같이 디폴트로 트랜잭션 속성을 정의하고, DB 조회 전용 메소드들은 &lt;strong&gt;get / find&lt;/strong&gt; 로 시작하는 이름으로 만들고 트랜잭션 속성에 readOnly를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:advice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:attributes&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get*&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;read-only=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- get 으로 시작하는 모든 조회 메소드에 읽기 전용 속성을 부여 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:method&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 나머지 메소드는 모두 기본 속성이 적용 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:attributes&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:advice&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;위와 같이 일반화하기에는 적당하지 않은, 특별한 트랜잭션 속성이 필요한 경우에는 해당 타깃 오브젝트에 대해 따로 어드바이스와 포인트컷 표현식을 사용하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:advisor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;advice-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bean(*Service)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- a.b 패키지에 있는 BatchJob 으로 끝나는 타입의 모든 메소드에 적용될 것이다.--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:advisor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;advice-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batchTxAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(a.b.*BatchJob.*.(..))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:advice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:attributes&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:attributes&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:advice&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:advice&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batchTxAdvice&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:attributes&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:attributes&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/tx:advice&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프록시-방식-aop는-같은-타깃-오브젝트-내의-메소드를-호출할-때는-적용되지-않는다&quot;&gt;프록시 방식 AOP는 같은 타깃 오브젝트 내의 메소드를 호출할 때는 적용되지 않는다.&lt;/h3&gt;

&lt;p&gt;프록시 방식의 AOP에서는 &lt;strong&gt;프록시를 통한 부가 기능의 적용은 클라이언트로부터 호출이 일어날 때만 가능하다.&lt;/strong&gt; 즉, 타깃 오브젝트를 사용하는 외부의 모든 오브젝트를 통해서 호출할 때는 부가 기능이 적용되나, &lt;strong&gt;타깃 오브젝트가 자기 자신의 메소드를 호출할 때는 부가 기능이 적용되지 않는다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-14-toby_spring_06_aop_3/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서 클라이언트로 호출될 때 (1번과 3번)에는 AOP가 적용되지만, 2번과 같이 자기 자신의 메소드를 호출시에는 적용되지 않는다. &lt;strong&gt;자기 자신의 메소드를 호출할 때는 프록시를 거치지 않기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위의 예에서 update 메소드의 트랜잭션 속성이 &lt;strong&gt;REQUIRES_NEW&lt;/strong&gt; 라고 했을 때, delete 메소드를 통해 호출될 경우 속성이 무시되고 트랜잭션에 단순하게 참여만 할 것이다. 또한 아예 트랜잭션 속성이 적용되지 않는 메소드를 통해 update 메소드가 호출될 경우 트랜잭션이 적용되지 않는다.&lt;/p&gt;

&lt;p&gt;스프링 정식 document 에서도 &lt;strong&gt;@Transactional&lt;/strong&gt; annotation은 &lt;strong&gt;외부 클라이언트가 호출할 수 있는 public 메소드에 걸어야하고, 외부의 클래스에서 그 메소드를 호출해야 트랜잭션이 걸린다고 나와있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/transaction.html#transaction-declarative-annotations&quot;&gt;Spring Document, Using @Transactional&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings. Consider the use of AspectJ (see below) if you need to annotate non-public methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional. Also, the proxy must be fully initialized to provide the expected behaviour so you should not rely on this feature in your initialization code, i.e. @PostConstruct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;같은 타깃 오브젝트안에서 메소드 호출이 일어날 경우에는 프록시 AOP를 통해 부여한 부가기능이 적용되지 않음을 주의해야 한다.&lt;/strong&gt; 만약 위와 같은 경우에도 부가기능을 적용하고 싶다면 AspectJ 와 같은 프록시 AOP 방식이 아닌 다른 방식으로 AOP를 적용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-경계설정의-일원화&quot;&gt;트랜잭션 경계설정의 일원화&lt;/h3&gt;

&lt;p&gt;트랜잭션 경계설정 부가기능을 여러 계층에서 중구난방으로 적용하는 것은 좋지 않다. &lt;strong&gt;특정한 계층의 경계를 트랜잭션 경계와 일치시키는 것이 좋다.&lt;/strong&gt; 보통 비즈니스 로직을 담고 있는 서비스 계층의 메소드가 트랜잭션 경계를 설정하기가 적절하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서비스 계층을 트랜잭션 경계로 정했다면, 다른 계층이나 모듈에서 DAO에 직접 접근하는 것은 차단되어야 한다.&lt;/strong&gt; 트랜잭션은 보통 서비스 계층의 메소드 조합으로 만들어지므로, 다른 모듈의 DAO에 접근하고자 할 때는 서비스 계층을 거치는게 바람직하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/ff73da0a3d9089384cd98d06deb88e80f1192810&quot;&gt;Apply transaction pointcut, advice to UserService. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;애노테이션-트랜잭션-속성과-포인트컷&quot;&gt;애노테이션 트랜잭션 속성과 포인트컷&lt;/h2&gt;

&lt;p&gt;보통 트랜잭션 속성을 적용할 때 포인트컷 표현식과 TransactionInterceptor 어드바이스를 통해 일괄적으로 적용하는 방식은 일반적인 상황에 대해서는 잘 들어맞는다. 그러나 클래스나 메소드에 따라서 제각각 속성이 다른 트랜잭션 속성이 필요할 때 앞서 설명한 것처럼 포인트컷과 어드바이스를 계속 추가해나가야 하므로, 이런 경우에는 &lt;strong&gt;메소드 이름 패턴을 통해 일괄적으로 트랜잭션 속성을 적용하는 방식은 적합하지 않다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이를 위해 스프링에서는 @Transactional annotation을 통해, 트랜잭션 속성을 정의하는 방법을 제공한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// annotation을 사용할 대상을 지정, 메소드나 타입에 지정할 수 있다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// annotation 정보가 언제까지 유지되는지를 지정&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Inherited&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 상속을 통해서도 annotation 정보를 얻을 수 있도록 한다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transactional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// transactionManager 이라는 빈 이름을 가진 트랜잭션 매니저를 디폴트로 사용한다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Propagation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Isolation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Isolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollbackFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollbackForClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noRollbackFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noRollbackForClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 속성의 모든 항목을 지정할 수 있고, 디폴트 값이 설정되어 있으므로 생략 가능하다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 annotation을 사용하기 위해 다음과 같이 애플리케이션 컨텍스트에 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;tx:annotation-driven&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@Transactional&lt;/strong&gt; 의 타깃은 메소드와 타입이다. 따라서 메소드나 클래스, 인터페이스에 지정할 수 있다. 스프링은 이 annotation이 부여된 모든 오브젝트를 &lt;strong&gt;자동으로 타깃 오브젝트로 인식한다.&lt;/strong&gt; 이 때 사용되는 포인트컷은 &lt;strong&gt;TransactionAttributeSourcePointcut&lt;/strong&gt; 인데, annotation이 부여된 모든 빈 오브젝트를 찾아 포인트컷의 선정 결과로 돌려준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-14-toby_spring_06_aop_3/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 @Transactional을 사용했을 때, 어드바이저의 동작방식을 보여준다. &lt;strong&gt;TransactionInterceptor&lt;/strong&gt; 는 메소드 이름 패턴을 통해 부여되는 일괄적인 트랜잭션 속성정보 대신에, &lt;strong&gt;@Transactional annotation의 엘리먼트에서 트랜잭션 속성을 가져오는 AnnotationTransactionAttributeSource&lt;/strong&gt; 를 가져온다. 포인트컷도 @Transactional을 통해 트랜잭션 속성 정보를 참조하도록 한다. 이를 통해 포인트컷과 트랜잭션 속성을 annotation 하나로 지정할 수 있다.&lt;/p&gt;

&lt;p&gt;스프링은 @Transactional을 적용할 때 4단계의 대체(fallback) 정책을 이용한다. 타깃 메소드 -&amp;gt; 타깃 클래스 -&amp;gt; 선언 메소드 -&amp;gt; 선언 타입 (클래스, 인터페이스 순서)의 순서에 따라 @Transactional이 적용됐는지 차례대로 확인하고 &lt;strong&gt;가장 먼저 발견되는 속성 정보를 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 코드가 정의되어 있을 때, ServiceImpl의 method1에 대해서는 &lt;strong&gt;메소드에 정의된 속성을 사용한다.&lt;/strong&gt; ServiceImpl의 &lt;strong&gt;method2에 대해서는 ServiceImpl 클래스에 정의된 속성을 사용할 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 &lt;strong&gt;클래스 레벨에서 @Transactional을 붙여 모든 메소드에 공통 트랜잭션 속성이 적용되게 하고, 특수한 속성이 필요한 메소드에 대해서 추가적으로 @Transactional 을 붙이는 것이 좋다.&lt;/strong&gt; 그러면 그 메소드에 대해서는 메소드에 붙인 @Transactional 속성을 사용할 것이다.&lt;/p&gt;

&lt;p&gt;타깃 클래스에 대해서 @Transactional 을 발견하지 못하면 스프링은 인터페이스에 대해서도 조사한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인터페이스를 사용하는 AOP가 아닌 방식으로 트랜잭션을 적용하면, 인터페이스에 정의된 @Transactional은 무시된다. 인터페이스에 정의하면 인터페이스를 통해 호출할 때만 트랜잭션이 적용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1f4a242f912be99f635f29cb703ccb560054afe2&quot;&gt;Use @Transactional&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-지원-테스트&quot;&gt;트랜잭션 지원 테스트&lt;/h2&gt;

&lt;p&gt;트랜잭션 전파 속성은 매우 유용한 개념이다. 예를 들어 &lt;strong&gt;REQUIRED&lt;/strong&gt; 로 전파 속성을 지정할 경우, 앞에서 진행 중인 트랜잭션이 있다면 참여하고, 없으면 자동으로 새로운 트랜잭션을 시작한다. &lt;strong&gt;트랜잭션 적용 때문에 불필요한 코드를 중복하는 것도 피할 수 있고 애플리케이션을 작은 기능 단위로 쪼개서 개발할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-14-toby_spring_06_aop_3/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AOP를 이용해 코드 외부에서 트랜잭션의 기능을 부여해주고 속성을 지정할 수 있게 하는 방법을 &lt;strong&gt;선언적 트랜잭션 (Declarative Transaction)&lt;/strong&gt; 이라고 하고, TransactionTemplate나 개별 데이터 기술의 트랜잭션 API를 사용해 직접 코드 안에서 사용하는 방법을 &lt;strong&gt;프로그램에 의한 트랜잭션 (Programmatic Transaction)&lt;/strong&gt; 이라고 한다.&lt;/p&gt;

&lt;p&gt;트랜잭션의 자유로운 전파와 그로 인한 유연한 개발이 가능할 수 있었던 기술적인 배경은 &lt;strong&gt;AOP로, 프록시를 이용한 트랜잭션 부가기능을 간단하게 애플리케이션 전반에 적용할 수 있다.&lt;/strong&gt; 또한 스프링의 트랜잭션 추상화를 통해 데이터 엑세스 기술이나 트랜잭션 기술에 상관없이 DAO에서 일어나는 작업들을 하나의 트랜잭션으로 묶을 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;rollback&quot;&gt;@Rollback&lt;/h3&gt;

&lt;p&gt;테스트 클래스나 테스트 메소드에 사용하는 @Transactional은 일반적인 애플리케이션 클래스에서 사용할 때와 디폴트 속성은 동일하지만, 한 가지 다른 점은 &lt;strong&gt;자동으로 롤백한다는 것이다.&lt;/strong&gt; 테스트에 적용되는 @Transactional 은 테스트가 끝나면 기본적으로 강제 롤백시킨다.&lt;/p&gt;

&lt;p&gt;만약 테스트 클래스나 메소드에서 DB 작업 결과를 반영하고 싶다면 &lt;strong&gt;@Rollback&lt;/strong&gt; annotation을 사용해야 한다. @Transactional은 기본적으로 롤백에 관한 설정이 없으므로 @Rollback 을 통해 롤백 여부를 지정한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 테스트 클래스나 테스트 메소드에서 사용하면 기본적으로 롤백시킨다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false로 지정하면 롤백시키지 않는다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transactionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 @Rollback 은 메소드 레벨에서만 지정할 수 있으므로 만약 테스트 클래스에 수행하는 모든 테스트 메소드에서 롤백하고 싶지 않다면, 다음과 같이 &lt;strong&gt;@TransactionConfiguration&lt;/strong&gt; annotation을 통해 롤백 여부를 지정해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@TransactionConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultRollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 사용하는 디폴트 트랜잭션 매니저 아이디는 &quot;transactionManager&quot; 이다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Rollback&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 여기서 @Rollback 을 사용하여 이 테스트 메소드만 롤백시킬 수 있다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notRollbackTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이 테스트에 한해서 트랜잭션을 시작되지 않도록 할 수 있다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notUseTransactionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/14/toby_spring_06_aop_3-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/14/toby_spring_06_aop_3-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 06: AOP part.2</title>
        <description>&lt;h2 id=&quot;스프링-aop&quot;&gt;스프링 AOP&lt;/h2&gt;

&lt;p&gt;스프링은 OCP의 중요한 요소인 &lt;strong&gt;유연한 확장&lt;/strong&gt; 이라는 개념을 스프링 컨테이너 자신에게도 다양한 방법으로 적용한다. 컨테이너로서 제공하는 기능 중, 변하지 않는 핵심적인 부분외에는 대부분 확장할 수 있도록 확장 포인트를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;자동-프록시-생성&quot;&gt;자동 프록시 생성&lt;/h3&gt;

&lt;p&gt;자동으로 프록시를 생성하기 위해 스프링에서 지원하는 빈 후처리기를 통해 구현할 수 있다.
스프링은 빈 후처리기가 빈으로 등록되어 있으면, 빈 오브젝트가 생성될 때마다 빈 후처리기에 보내어 후처리 작업을 요청한다. &lt;strong&gt;BeanPostProcessor&lt;/strong&gt; 인터페이스를 구현해서 만드는 이 빈 후처리기는 이름 그대로 &lt;strong&gt;스프링 빈 오브젝트로 만들어지고 난 후에 해당 빈 오브젝트를 다시 한번 가공할 수 있게 해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;빈 후처리기들 중에서 자동으로 프록시를 생성하기 위해 사용되는 클래스는 &lt;strong&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/DefaultAdvisorAutoProxyCreator.html&quot;&gt;DefaultAdvisorAutoProxyCreator&lt;/a&gt;&lt;/strong&gt; 이다. 이 클래스는 어드바이저를 이용한 &lt;strong&gt;자동 프록시 생성기&lt;/strong&gt; 이다. 빈 오브젝트의 일부를 프록시로 포장하고, 프록시를 빈으로 대신 등록시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DefaultAdvisorAutoProxyCreator 빈 후처리가 등록되어 있다면, 스프링은 빈 오브젝트를 만들 때마다 후처리기에게 빈을 보낸다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;후처리기는 &lt;strong&gt;빈으로 등록된 모든 어드바이저 내의 포인트컷을 이용해&lt;/strong&gt; 전달받은 빈이 프록시 적용 대상인지 확인한다.&lt;/li&gt;
  &lt;li&gt;프록시 적용 대상이면 내장된 프록시 생성기를 통해 현재 빈에 대한 &lt;strong&gt;프록시를 생성하고 어드바이저를 연결한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;프록시가 생성되면 전달받은 빈 오브젝트 대신에 &lt;strong&gt;프록시 오브젝트를 컨테이너에게 돌려준다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;컨테이너는 빈 후처리가 돌려준 프록시 오브젝트를 빈으로 등록한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 후처리기를 통해 일일이 ProxyFactoryBean을 빈으로 등록하지 않아도 &lt;strong&gt;여러 타깃 오브젝트에 자동으로 프록시를 적용시킬 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;확장된-포인트컷&quot;&gt;확장된 포인트컷&lt;/h3&gt;

&lt;p&gt;포인트컷은 어떤 메소드에 부가기능을 적용할지 결정해주는 역할 뿐만 아니라, &lt;strong&gt;등록된 빈 중에서 어떤 빈에 프록시를 적용할지를 결정할 수도 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ClassFilter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClassFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 프록시를 적용할 클래스인지 확인.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MethodMatcher&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMethodMatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 어드바이스를 적용할 메소드인지 확인.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 포인트컷을 통해 &lt;strong&gt;프록시를 적용할 클래스인지 판단&lt;/strong&gt; 하고 나서, 적용 대상 클래스인 경우에는 &lt;strong&gt;어드바이스를 적용할 메소드인지 확인&lt;/strong&gt; 할 수 있다. DefaultAdvisorAutoProxyCreator 빈 후처리기를 사용하기 위해 클래스와 메소드를 모두 선정하는 포인트컷이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/2b662f79f750afe68d70b8e8e601b5dd46997630&quot;&gt;Pointcut test with ClassFilter&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;포인트컷이 클래스 필터링을 통해 클래스를 걸러버리면, 부가기능이 전혀 적용되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;어드바이저를-이용하는-자동-프록시-생성기-등록&quot;&gt;어드바이저를 이용하는 자동 프록시 생성기 등록&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;DefaultAdvisorAutoProxyCreator&lt;/strong&gt; 의 동작 방식&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Advisor&lt;/strong&gt; 인터페이스를 구현한 모든 빈을 찾는다.&lt;/li&gt;
  &lt;li&gt;생성되는 모든 빈에 대해서 어드바이저의 포인트컷을 적용해보면서 &lt;strong&gt;프록시 적용 대상을 선정한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;빈 클래스가 프록시 선정 대상이면 &lt;strong&gt;프록시를 만들어 원래 빈 오브젝트가 바꿔치기한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;타깃 빈에 의존하던 다른 빈들은 프록시 오브젝트를 DI 받게 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DefaultAdvisorAutoProxyCreator를 사용하기 위해 다음과 같이 애플리케이션 컨텍스트 xml에 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 빈에서 참조되거나 코드상에서 빈 이름으로 조회할 필요가 없는 빈이라면 빈 아이디를 등록하지 않아도 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/10d946e05be19f56bdfd875f1fac3ec4c47e932f&quot;&gt;Transaction code using auto proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/10c3db691e7e78c59ae5e0c8d395459e7f70b5c3&quot;&gt;Check proxy class instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;포인트컷-표현식을-이용한-포인트컷&quot;&gt;포인트컷 표현식을 이용한 포인트컷&lt;/h3&gt;

&lt;p&gt;스프링에서는 클래스 필터나 메소드 매처를 사용하는 것이 아닌, 정규식과 비슷하게 포인트컷의 클래스와 메소드를 선정할 수 있도록 &lt;strong&gt;포인트컷 표현식&lt;/strong&gt; 이라는 방법을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;포인트컷 표현식을 사용하기 위해서는 &lt;strong&gt;AspectJExpressionPointcut&lt;/strong&gt; 클래스를 사용한다. 이 클래스를 통해 포인트컷 표현식을 사용해서 클래스와 메소드 선정 방식을 한 번에 지정할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링이 사용하는 포인트컷 표현식은 AspectJ 프레임워크에서 사용하는 문법을 확장해서 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;포인트컷 표현식 문법&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AspectJ 포인트컷 표현식은 &lt;strong&gt;포인트컷 지시자&lt;/strong&gt; 를 이용해 작성한다.&lt;/p&gt;

&lt;p&gt;포인트컷 지시자 중 &lt;strong&gt;execution()&lt;/strong&gt; 에대한 문법구조는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;execution([접근제한자 패턴] 리턴값의 타입패턴 [클래스 타입패턴.]메소드 이름패턴 (파라미터 타입패턴 | &quot;..&quot;, ...) throws 예외패턴 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;접근제한자 패턴: public이나 protected, private. 생략 가능하다.&lt;/li&gt;
  &lt;li&gt;리턴값의 타입패턴: 리턴 값의 타입, &lt;strong&gt;필수 항목&lt;/strong&gt;, * 를 써서 모든 타입에 대해 적용할 수도 있다.&lt;/li&gt;
  &lt;li&gt;클래스 타입패턴: 패키지와 타입 이름을 포함한 클래스의 타입 패턴, 생략 가능, 생략하면 모든 타입에 대해 적용된다. 이름에 * 를 사용할 수 있다. 또한 “..” 를 써서 한 번에 여래 개의 패키지를 선택할 수 있다.&lt;/li&gt;
  &lt;li&gt;메소드 이름패턴: &lt;strong&gt;필수항목&lt;/strong&gt;, 모든 메소드에 적용하려면 * 를 쓴다.&lt;/li&gt;
  &lt;li&gt;파라미터 타입패턴: &lt;strong&gt;필수항목&lt;/strong&gt;, “,” 로 구분하면서 메소드 파라미터 타입을 적는다. 파라미터가 없다면 “()” 만 사용하며, 만약 타입과 개수에 상관없이 모두 다 허용하겠다면 “..” 를 사용한다. 만약 앞에는 파라미터가 있고 뒷 부분의 파라미터만 생략하겠다면 “…“를 사용한다.&lt;/li&gt;
  &lt;li&gt;예외패턴: 예외 이름에 대한 타입 패턴이고 생략 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;패턴 요소를 생략하면 모든 경우를 다 허용하도록 되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;execution(int minus(int, int))&lt;/strong&gt;: int 타입의 리턴 값, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* minus(int, int))&lt;/strong&gt;: 리턴 타입은 상관없이, minus 라는 메소드 이름, 두 개의 int 파라미터를 가지는 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* minus(..))&lt;/strong&gt;: 리턴 타입과 파라미터의 종류 및 개수에 상관없이 minus 이름을 가진 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* *(..))&lt;/strong&gt;: 리턴 타입, 파라미터, 메소드 이름에 상관없는 모든 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* *())&lt;/strong&gt;: 리턴 타입, 메소드 이름에 상관없고 파라미터는 없는 모든 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* springbook.aop.Target.*(..))&lt;/strong&gt;: springbook.aop.Target 클래스의 모든 메소드&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* springbook.aop.*.*(..))&lt;/strong&gt;: springbook.aop 패키지의 모든 메소드, 단 서브패키지의 클래스는 포함 안된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* springbook.aop..*.*(..))&lt;/strong&gt;: springbook.aop 패키지의 모든 메소드, 서브패키지의 클래스까지 포함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;execution(* *..Target.*(..))&lt;/strong&gt;: 패키지에는 상관없이 Target 클래스의 모든 메소드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/a341034dd17964824dc912714f29135f6d490629&quot;&gt;Pointcut execution example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/5e2b189aa79b4f4f8a1aecad4e5effae6bc2cf2c&quot;&gt;Pointcut execution expression test&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;포인트컷 표현식은 execution() 말고도, &lt;strong&gt;bean()&lt;/strong&gt; 이 있다. bean(*Service) 라고 지정하면 빈 아이디가 Service로 끝나는 모든 빈을 선택한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;AspectJExpressionPointcut&lt;/strong&gt; 직접 사용시, 포인트컷 표현식을 다음과 같이 메소드 시그니처를 &lt;strong&gt;execution()&lt;/strong&gt; 안에 넣어 expression 프로퍼티에 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AspectJExpressionPointcut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AspectJExpressionPointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* *(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링 빈으로 등록하여 사용할 때는 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionPointcut&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.aop.aspectj.AspectJExpressionPointcut&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expression&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* *..*ServiceImpl.upgrade*(..))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/f989cecfa3e8e3fc4d8a8d20e5653d432d68201a&quot;&gt;Use AspectJExpressionPointcut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위의 xml과 같이 expression을 설정하면 패키지에 상관없이 ServiceImpl 로 끝나는 클래스의 upgrade로 시작하는 모든 메소드에 적용될 것이다.&lt;/p&gt;

&lt;p&gt;포인트컷 표현식은 클래스 및 메소드를 선정하는 로직이 짧은 문자열에 담기기 때문에 코드와 설정이 단순해진다. 그러나, 문자열로 된 표현식이므로 런타임 시점까지 문법의 검증이나 기능 확인이 되지 않는다는 단점이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;포인트컷 표현식을 이용하는 포인트컷이 정확히 원하는 빈, 메소드만 선정했는지 확인하는 것은 어렵다. 스프링 개발팀에서 제공하는 스프링 지원 툴을 사용하면 아주 간단하게 포인트컷이 선정한 빈, 메소드가 무엇인지 한 눈에 알 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;포인트컷 타입 패턴&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;포인트컷 표현식의 클래스 이름에 적용되는 패턴은 클래스 이름에 대한 매칭이 아니라, 타입 패턴이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upgradeLevels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestUserService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userServiceImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 클래스가 정의되어 있을 때, 포인트컷 표현식을 &lt;strong&gt;execution(* *..*ServiceImpl.upgrade*(..))&lt;/strong&gt; 과 같이 설정하면 TestUserService 까지 매칭된다. 이는 포인트컷 표현식에서 클래스 패턴은 타입에 대한 패턴이기 때문이다.&lt;/p&gt;

&lt;p&gt;마찬가지로 인터페이스를 지정하면 그 인터페이스를 구현하는 모든 클래스에 대해 매칭될 것이다. &lt;strong&gt;execution(* *..UserService.*(..))&lt;/strong&gt; 같이 지정하면 UserService 인터페이스를 구현하는 모든 클래스에 대해 적용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;aop-aspect-oriented-programming&quot;&gt;AOP (Aspect Oriented Programming)&lt;/h2&gt;

&lt;p&gt;트랜잭션 경계 설정 코드와 같은 부가기능을, 다른 비즈니스 로직과는 다르게 일반적인 객체지향적인 설계 방법으로는 독립적인 모듈화가 불가능하였다. 다이내믹 프록시라든가 빈 후처리기와 같은 복잡한 기술까지 동원하였기 때문이다.&lt;/p&gt;

&lt;p&gt;이런 부가기능에 대해서 모듈화 작업을 진행할 때 객체지향 설계 패러다임과는 다른 새로운 특성을 가지고 있어, 모듈화된 부가기능을 오브젝트라고 부르지 않고 &lt;strong&gt;애스팩트(Aspect)&lt;/strong&gt; 라고 부른다.&lt;/p&gt;

&lt;p&gt;애스팩트는 그 자체로 &lt;strong&gt;애플리케이션의 핵심 기능을 담고 있지는 않으나, 애플리케이션을 구성하는 중요 요소이고 핵심기능에 부가되어 의미를 갖는 특별한 모듈을 말한다.&lt;/strong&gt; 애스팩트는 부가될 기능을 정의한 &lt;strong&gt;어드바이스&lt;/strong&gt; 와 어드바이스를 어디에 적용할지를 결정하는 &lt;strong&gt;포인트컷&lt;/strong&gt; 을 함께 갖고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;애스팩트를 통해 분리하기 전의 코드는 부가기능과 핵심 비즈니스 로직이 한 군데에 모여 있어 설계와 코드가 모두 지저분하였다. 또한 부가기능은 여러 군데에서 나타나 중복될 확률도 높고 부가기능을 추가할 때마다 여러 곳에서 코드를 추가해야 한다.&lt;/p&gt;

&lt;p&gt;그러나 애스팩트를 통한 부가기능의 모듈화로 부가기능에 대한 코드의 중복을 피할 수가 있었고 핵심기능은 그 기능을 담은 코드로만 존재할 수 있었다. &lt;strong&gt;설계와 개발시에는 부가기능을 담은 애스팩트와 핵심기능에 해당하는 비즈니스 로직을 분리된, 독립적인 관점으로 작성할 수 있게 된 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;애플리케이션의 핵심적인 기능에서 &lt;strong&gt;부가적인 기능을 분리해서 애스팩트라는 독특한 모듈로 만들어서 설계하고 개발하는 방법을 애스팩트 지향 프로그래밍(Aspect Oriented Programming), 관점 지향 프로그래밍&lt;/strong&gt; 이라고 부른다.&lt;/p&gt;

&lt;p&gt;AOP는 객체지향프로그래밍인 OOP를 대체하는 기술은 아니고 OOP를 돕는 보조적인 기술이다. AOP를 통해 애스팩트를 분리하고 애플리케이션 핵심기능에 대해서는 OOP의 가치를 보존할 수 있도록 하는 것이다.&lt;/p&gt;

&lt;p&gt;또한 &lt;strong&gt;AOP는 애플리케이션을 다양한 측면에서 독립적으로 모델링하고, 설계하고, 개발할 수 있도록 만들어준다.&lt;/strong&gt; 애스팩트를 분리하고 개발할 수 있게 됨으로써 개발자로 하여금, 애플리케이션을 핵심 기능을 담당하는 프로그램이 아닌 부가기능을 설정하는 프로그램이라는 관점에서 바라보고 개발할 수 있다는 점에서 AOP를 &lt;strong&gt;관점 지향 프로그래밍&lt;/strong&gt; 이라고도 하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aop-적용기술&quot;&gt;AOP 적용기술&lt;/h3&gt;

&lt;p&gt;스프링은 IoC/DI 컨테이너와 다이내믹 프록시, 데코레이터 패턴, 프록시 패턴, 자동 프록시 생성 기법, 빈 오브젝트의 후처리 조작 등을 통해 AOP를 지원한다. 그중 가장 핵심적인 것은 &lt;strong&gt;프록시&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;프록시를 통해 DI로 연결된 빈 사이에 적용해 &lt;strong&gt;타깃의 메소드 호출 과정에 참여해서 부가기능을 제공하도록 만들었다.&lt;/strong&gt; MethodInterceptor 인터페이스는 프록시로부터 메소드 요청 정보를 전달받아 타깃 오브젝트의 메소드를 호출한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 AOP는 프록시 방식의 AOP 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;바이트코드-생성과-조작을-통한-aop&quot;&gt;바이트코드 생성과 조작을 통한 AOP&lt;/h3&gt;

&lt;p&gt;AOP 기술의 원조이자, 가장 강력한 AOP 프레임워크인 &lt;strong&gt;AspectJ&lt;/strong&gt; 는 프록시 방식을 사용하지 않고, &lt;strong&gt;타깃 오브젝트를 뜯어고쳐 부가기능을 직접 넣어주는 직접적인 방식을 사용한다.&lt;/strong&gt; 컴파일된 타깃의 클래스 파일 자체를 수정하거나 클래스가 JVM 상에 로딩될 때 바이트코드를 조작하는 복잡한 방법을 사용한다.&lt;/p&gt;

&lt;p&gt;이렇게 직접적인 방식을 사용함으로써 스프링 AOP와 같이 &lt;strong&gt;자동 프록시 생성 방식을 사용하지 않아도 AOP를 적용할 수 있다.&lt;/strong&gt; 그리고 프록시 방식보다 강력하고 유연한 AOP가 가능해진다.&lt;/p&gt;

&lt;p&gt;프록시 방식의 AOP는 부가기능을 부여할 대상이 &lt;strong&gt;타깃의 메소드만으로 한정되지만&lt;/strong&gt;, 바이트코드 조작을 통한 AOP에서는 &lt;strong&gt;오브젝트의 생성, 필드 값의 조회와 조작, 스태틱 초기화 등의 다양한 작업에 부가기능을 부여할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;대부분의 부가기능은 프록시 방식을 통해 메소드 호출 시점에 적용하는 것만으로 충분하나, 특별한 AOP 요구사항이 있어 스프링의 프록시 AOP 수준을 넘어서는 기능이 필요하다면 그때 AspectJ를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aop의-용어&quot;&gt;AOP의 용어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;타깃: 부가기능을 부여할 대상. 핵심기능을 담은 클래스일 수도 있으나 다른 부가기능을 제공하는 다른 프록시일 수도 있다.&lt;/li&gt;
  &lt;li&gt;어드바이스: 타깃에게 제공할 부가기능을 담을 모듈.&lt;/li&gt;
  &lt;li&gt;조인포인트: 어드바이스가 적용될 수 있는 위치, 타깃 오브젝트가 구현한 인터페이스의 모든 메소드는 조인포인트가 된다.&lt;/li&gt;
  &lt;li&gt;포인트컷: 어드바이스를 적용할 조인포인트를 선별하는 작업 또는 그 기능을 정의한 모듈. 스프링 AOP의 조인포인트는 메소드의 실행이므로 포인트컷 표현식은 메소드의 실행이라는 의미인 &lt;strong&gt;execution&lt;/strong&gt; 으로 시작한다.&lt;/li&gt;
  &lt;li&gt;프록시: 클라이언트와 타깃 사이에 투명하게 존재하면서 부가기능을 제공하는 오브젝트&lt;/li&gt;
  &lt;li&gt;어드바이저: 포인트컷과 어드바이스를 하나씩 갖고 있는 오브젝트. 스프링 AOP에서만 사용되고 자동 프록시 생성기가 이 어드바이저를 AOP 작업의 정보로 활용한다.&lt;/li&gt;
  &lt;li&gt;애스팩트: AOP의 기본 모듈로, 한 개 또는 그 이상의 포인트컷과 어드바이스의 조합으로 만들어지며 싱글톤 형태의 오브젝트로 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aop-네임스페이스&quot;&gt;AOP 네임스페이스&lt;/h3&gt;

&lt;p&gt;스프링 AOP를 적용하기 위해 추가했던 어드바이저, 포인트컷, 자동 프록시 생성기와 같은 빈들은 다른 애플리케이션 로직을 담은 빈들과는 성격이 다르다. 이런 빈들은 &lt;strong&gt;스프링 컨테이너에 의해 자동으로 인식되어 특별한 작업을 위해 사용된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스프링의 프록시 방식 AOP를 적용하려면 최소한 다음과 같은 네 가지 빈을 등록해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자동프록시 생성기: 스프링의 &lt;strong&gt;DefaultAdvisorAutoProxyCreator&lt;/strong&gt; 클래스를 빈으로 등록한다. 애플리케이션 컨텍스트가 빈을 생성할 때 빈 후처리로 참여한다. 빈으로 등록된 &lt;strong&gt;어드바이저를 이용해서 프록시를 자동으로 생성한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;어드바이스: &lt;strong&gt;부가기능을 구현한 클래스&lt;/strong&gt; 를 빈으로 등록한다.&lt;/li&gt;
  &lt;li&gt;포인트컷: 스프링의 &lt;strong&gt;AspectJExpressionPointcut&lt;/strong&gt; 을 빈으로 등록하고 &lt;strong&gt;expression&lt;/strong&gt; 프로퍼티에 포인트컷 표현식을 넣어주면 된다.&lt;/li&gt;
  &lt;li&gt;어드바이저: 스프링의 &lt;strong&gt;DefaultPointcutAdvisor&lt;/strong&gt; 클래스를 빈으로 등록해서 사용하며 어드바이스와 포인트컷을 프로퍼티로 설정하면 된다. 자동프록시 생성기에 의해 자동 검색되어 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;스프링에서는 AOP와 관련된 태그를 정의해둔 &lt;strong&gt;aop 스키마&lt;/strong&gt; 를 통해 간편하게 빈으로 등록할 수 있다. aop 스키마에 정의된 태그를 사용하려면 설정파일에 다음과 같이 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:aop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/aop&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...
  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop-4.3.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 네임스페이스 선언을 추가해준 후, aop 네임스페이스를 통해 기존 AOP 관련 빈 설정을 다음과 같이 변경할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--    
    &amp;lt;bean id=&quot;transactionPointcut&quot; class=&quot;org.springframework.aop.aspectj.AspectJExpressionPointcut&quot;&amp;gt;
        &amp;lt;property name=&quot;expression&quot; value=&quot;execution(* *..*ServiceImpl.upgrade*(..))&quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean id=&quot;transactionAdvisor&quot; class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&amp;gt;
        &amp;lt;property name=&quot;advice&quot; ref=&quot;transactionAdvice&quot;/&amp;gt;
        &amp;lt;property name=&quot;pointcut&quot; ref=&quot;transactionPointcut&quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; /&amp;gt;
--&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- AOP 설정을 담는 부모태그로, 필요에 따라 AspectJAdvisorAutoProxyCreator를 빈으로 등록해준다. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- expression 표현식을 프로퍼티로 가진 AspectJExpressionPointcut을 빈으로 등록해준다. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:pointcut&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionPointcut&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* *..*ServiceImpl.upgrade*(..))&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- advice와 pointcut의 ref를 프로퍼티로 갖는 DefaultBeanFactoryPointcutAdvisor를 빈으로 등록해준다. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;aop:advisor&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;advice-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionAdvice&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pointcut-ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionPointcut&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 주석처리된 포인트컷 및 어드바이저를 aop 태그를 통해 쉽게 AOP를 적용할 수 있다. 직접 구현한 클래스로 등록하는 어드바이스를 제외한 AOP 관련 빈들은 의미를 잘 드러내는 독립된 전용 태그를 사용하도록 권장된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/aeb468ad39e5ef0cbd1c61a32ddd23fbf4c90aac&quot;&gt;Use aop namespace&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션을 구성하는 컴포넌트 빈과 컨테이너에 의해 사용되는 기반 기능을 지원하는 빈은 구분이 되는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;애스펙트-aop&quot;&gt;애스펙트 AOP&lt;/h2&gt;

&lt;p&gt;AOP는 모듈화된 부가기능과 적용 대상(포인트 컷)의 조합을 통해 여러 오브젝트에 산재해서 나타나는 공통적인 기능을 손쉽게 개발하고 관리하는 기술이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 자바 JDK에서 지원하는 다이내믹 프록시 기술을 통해 프록시 기반의 AOP 개발 기능을 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;프록시 방식의 AOP는 데코레이터 패턴 또는 프록시 패턴을 응용해서, 기존 코드에 영향을 주지 않은 채로 부가 기능을 타킷 오브젝트에 제공하는 객체지향 프로그래밍 모델로부터 출발한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;aop-개발-방법&quot;&gt;AOP 개발 방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;AOP 인터페이스 구현과 빈 등록을 이용하는 방법
    &lt;ul&gt;
      &lt;li&gt;가장 기초적인 개발 방식으로, AOP의 구성 요소를 모두 클래스로 개발하고 빈으르 등록하여 적용한다.&lt;/li&gt;
      &lt;li&gt;스프링이 제공하는 어드바이스와 포인트컷 인터페이스를 구현하고, 어드바이저로 구성하여 빈으로 등록한다.&lt;/li&gt;
      &lt;li&gt;어드바이저를 프록시로 만들어 자동으로 바꿔치기하는 자동 프록시 생성기 빈을 등록한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AOP 인터페이스 구현과 aop 네임스페이스의 &amp;lt;aop:advisor&amp;gt; 태그 사용
    &lt;ul&gt;
      &lt;li&gt;aop 스키마의 태그를 통해 포인트컷과 어드바이저, 자동 프록시 생성기를 빈으로 등록하는 방법이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;임의의 자바 클래스와 aop 네임스페이스의 &amp;lt;aop:aspect&amp;gt; 태그 사용
    &lt;ul&gt;
      &lt;li&gt;어드바이스, 어드바이저 개념 대신 &lt;strong&gt;애스펙트&lt;/strong&gt;라는 개념을 사용한다.&lt;/li&gt;
      &lt;li&gt;일반적인 자바 클래스 및 XML 태그를 통해 애스펙트를 정의한다. (특정 인터페이스를 구현할 필요가 없다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@AspectJ 애노테이션을 통한 애스펙트 개발
    &lt;ul&gt;
      &lt;li&gt;@AspectJ는 Aspect AOP 프레임워크에서 정의되는 애노테이션을 사용하여 애스펙트를 정의할 수 있게 해준다.&lt;/li&gt;
      &lt;li&gt;Aspect AOP의 애노테이션만 차용할 뿐, 여전히 프록시 기반의 AOP 방식이다.&lt;/li&gt;
      &lt;li&gt;@Transactional과 마찬가치로 AOP의 구성요소 (포인트 컷, 어드바이스)를 애노테이션을 이용해 정의할 수도 있도록 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;애스펙트는 독립적인 AOP 모듈을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;자동-프록시-생성기와-프록시-빈&quot;&gt;자동 프록시 생성기와 프록시 빈&lt;/h3&gt;

&lt;p&gt;스프링 AOP를 사용한다면 어떤 개발 방식을 사용하든 모두 &lt;strong&gt;프록시 방식의 AOP&lt;/strong&gt;이다.
프록시 개념은 데코레이터 패턴에서 나온 것이고, 동작 원리는 JDK 다이내믹 프록시와 DI를 이용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 두 개의 클래스가 있고, Target 클래스에 AOP를 통해 부가 기능을 제공하고자 할 때 문제가 있다.
&lt;strong&gt;Client 클래스가 바로 Target 클래스를 바라보기 때문에, Client 클래스의 의존관계를 DI 컨테이너와 설정을 통해 바꿀 수 없기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 Client 클래스는 Target 클래스를 직접 의존하는 대신에 인터페이스를 통하여 느슨하게 연결하도록 해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 코드를 정의하면 인터페이스를 통해 느슨하게 연결하였으므로, DI 설정을 조작하여 중간에 프록시 객체가 끼어들 수 있다. 하지만 여전히 문제가 있다.&lt;/p&gt;

&lt;p&gt;Client 클래스는 @Autowired 애노테이션을 통한 자동 와이어링을 사용하는데, 프록시를 추가하면 &lt;strong&gt;같은 Interface 를 구현한 빈이 2개가 된다.&lt;/strong&gt; 따라서 이 때 @Autowired를 통한 자동 빈 선택이 불가능해진다.&lt;/p&gt;

&lt;p&gt;스프링은 이를 위해 자동 프록시 생성기를 이용해 컨테이너 초기화 중에 만들어진 &lt;strong&gt;빈을 바꿔치기 해 프록시 빈을 자동으로 등록한다.&lt;/strong&gt; 자동 프록시 생성기는 &lt;strong&gt;프록시 빈을 별도로 추가하는 것이 아니라, 타겟 오브젝트를 아예 자신이 포장하여 마치 그 빈처럼 동작하는 프록시 객체를 대체시키는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 자동 프록시 생성기를 통해 프록시를 생성하면 타겟 오브젝트가 빈으로 노출되지 않아 자동 와이어링을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;이 때, 다른 클라이언트인 Client2가 다음과 같이 코드를 정의해놓았었다면 또 다른 문제가 발생한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자동 프록시 생성기를 적용하기 전에는 문제가 없겠지만, AOP를 적용 후에는 타겟 오브젝트가 프록시 빈 안으로 숨겨짐으로써 문제가 발생하는 것이다. 
&lt;strong&gt;Client2 입장에서는 Target 클래스 오브젝트를 찾을 수 없다. 자동 프록시 생성기가 등록하는 프록시 빈은 Target 클래스가 구현하던 Interface를 구현하는 다른 타입일 뿐이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-09-11-toby_spring_06_aop_2/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자동 프록시 생성기의 기본 옵션은 프록시를 적용할 타겟이 구현한 모든 인터페이스를 프록시 빈도 구현하게 해주는 것이다. &lt;strong&gt;프록시 빈의 클래스는 타겟 클래스와 같은 인터페이스를 구현할 뿐 다른 타입이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;클래스를-이용한-프록시&quot;&gt;클래스를 이용한 프록시&lt;/h3&gt;

&lt;p&gt;원래 스프링이 제공하는 AOP의 프록시는 인터페이스를 구현한 프록시이다.
JDK 다이내믹 프록시가 인터페이스를 사용하고, 프록시의 원리인 데코레이터 패턴과 DI도 인터페이스를 통한 의존관계를 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;하지만 다음과 같이 인터페이스가 아닌 클래스를 직접 참조하는 경우에도 프록시를 적용시킬 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;타겟 클래스 자체를 인터페이스처럼 사용하는 것이다.&lt;/strong&gt;
클라이언트가 타겟 클래스에 의존하는 것은 변함이 없지만, 프록시를 구현할 때는 이 타겟 클래스를 상속받는 서브 클래스를 만들어 이를 프록시 빈으로 사용하는 것이다. 서브 클래스를 만들고 상속받은 모든 public 메소드를 오버라이드한다.&lt;/p&gt;

&lt;p&gt;서브 클래스니까 클라이언트에 프록시 빈을 DI할 수 있다.&lt;/p&gt;

&lt;p&gt;이 방식에는 다음과 같은 제약 사항이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;final 클래스 및 final 메소드는 적용이 되지 않는다.
    &lt;ul&gt;
      &lt;li&gt;fianl 클래스는 상속이 불가능하고, final 메소드는 오버라이드가 불가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;타겟 클래스의 생성자가 두 번 호출된다.
    &lt;ul&gt;
      &lt;li&gt;타겟 오브젝트와 프록시 빈을 생성하기 때문에 2번 호출되는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스 프록시를 만들기 위해 CGLib이라는 별도의 라이브러리를 사용하게 된다.&lt;/li&gt;
  &lt;li&gt;타겟 오브젝트의 모든 public 메소드는 모두 프록시 대상으로 삼아 오버라이드한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 이 클래스를 이용한 프록시를 제공하는 것은 어디까지나 레거시 코드나 인터페이스가 없는 외부 라이브러리 클래스에 AOP를 적용할 수 있도록 만들어준 것일 뿐, 평소에 타겟 클래스를 직접 DI받아 사용하다가 AOP가 필요해지면 이를 이용하라는 것이 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스프링은 타깃 오브젝트가 인터페이스를 구현하고 있다면 인터페이스를 사용하는 JDK 다이내믹 프록시를 통해 프록시를 만들지만, 인터페이스가 없다면 CGLib을 통한 클래스 프록시를 만든다.&lt;/p&gt;

&lt;p&gt;만약 인터페이스 유무에 상관없이 강제로 클래스 프록시를 사용하려면 다음과 같이 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
 &lt;span class=&quot;nd&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyTargetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/11/toby_spring_06_aop_2-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/11/toby_spring_06_aop_2-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 06: AOP part.1</title>
        <description>&lt;h2 id=&quot;트랜잭션-코드의-분리&quot;&gt;트랜잭션 코드의 분리&lt;/h2&gt;

&lt;p&gt;다음과 같이 비즈니스 로직을 담고 있는 코드에서 트랜잭션 경계설정을 담당하는 코드가 포함되어 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upgradeLevels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upgradeLevelsInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upgradeLevelsInternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canUpgradeLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;upgradeLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드을 봤을 때, 트랜잭션 경계설정 코드와 비즈니스 로직 코드가 서로 주고받는 정보가 없이 깔끔하게 분리되어 있다. 비즈니스 로직 코드에서 직접 DB를 다루지 않으므로, DB Connection 직접 참조같은 것을 하지 않기 때문이다. (트랜잭션 동기화 방법을 통해서)&lt;/p&gt;

&lt;p&gt;다만 아직도 이 클래스에는 비즈니스 로직과는 관계가 없는, 그러나 트랜잭션을 위한 코드가 들어있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;di-적용을-통한-트랜잭션-분리&quot;&gt;DI 적용을 통한 트랜잭션 분리&lt;/h3&gt;

&lt;p&gt;보통 DI를 통해 인터페이스를 활용한 의존 오브젝트 주입은 구현 클래스를 바꿔가면서 쓰기 위함이다. 하지만 꼭 그 목적을 위해서만 DI를 쓸 필요는 없으며 다음과 같이 관심이 다른 코드를 분리하기 위해 DI를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션 경계 설정만을 담당하는 또 다른 클래스인 &lt;strong&gt;“UserServiceTx”&lt;/strong&gt; 를 만들고, 여기서 트랜잭션 경계설정만을 담당한 후 실제 비즈니스 로직을 담당하는 &lt;strong&gt;“UserServiceImpl”&lt;/strong&gt; 에 실제 작업을 위임시키는 것이다.&lt;/p&gt;

&lt;p&gt;결국 UserService 인터페이스를 갖고 사용하는 클라이언트 측에서는 트랜잭션이 적용된 비즈니스 로직의 구현이라는 기대하는 동작이 일어날 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/c05f7741dd1febfb9bb7d6f101de0ed6d0c3b501&quot;&gt;Separate transaction code using DI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이렇게 DI를 활용하여 비즈니스 로직을 분리함으로써, 비즈니스 로직만을 담은 코드를 작성할 때 트랜잭션과 같은 기술적인 내용에는 신경쓰지 않아도 된다. 또한 비즈니스 로직에 대한 테스트를 쉽게 만들 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;고립된-단위-테스트&quot;&gt;고립된 단위 테스트&lt;/h2&gt;

&lt;p&gt;가장 편하고 좋은 테스트 방법은 가능한 작은 단위로 쪼개서 테스트하는 것이다. 테스트가 실패했을 때 그 원인을 찾기가 쉽고 테스트의 대상이 커지면 충분한 테스트를 만들기도 쉽지 않기 때문이다.&lt;/p&gt;

&lt;p&gt;그러나 테스트 대상이 다른 오브젝트와 환경에 의존하고 있다면 작은 단위의 테스트가 주는 장점을 얻기 힘들다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;복잡한-의존관계-속의-테스트&quot;&gt;복잡한 의존관계 속의 테스트&lt;/h3&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;“UserService”&lt;/strong&gt; 클래스는 여러 의존 오브젝트가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UserService 테스트의 단위는 UserService 클래스여야 하는데, 위와 같이 의존 오브젝트들이 여러 개 있다면 테스트 준비하기가 힘들고 환경이 조금이라도 달라지면 테스트가 실패할 수 있다. 하고자 하는 테스트는 UserService가 가지고 있는 비즈니스 로직인데 DB 연결이 제대로 안되거나 트랜잭션 서비스가 제대로 수행되지 않으면, UserService 를 목적으로 하는 테스트가 실패할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같이 테스트의 대상이 환경이나 외부 서버, 다른 클래스의 코드에 의해 종속되고 영향을 받지 않도록 &lt;strong&gt;고립시킬 필요가 있다.&lt;/strong&gt; 테스트 대역을 사용하여, 테스트 대상이 의존하는 오브젝트로부터 분리해서 테스트하는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;단위-테스트와-통합-테스트&quot;&gt;단위 테스트와 통합 테스트&lt;/h3&gt;

&lt;p&gt;단위 테스트의 단위는 정하기 나름이다. 사용자 관리라는 기능 전체를 하나의 단위로 볼 수도 있고, 하나의 클래스나 하나의 메소드를 단위로 볼 수도 있다. 보통은 다음과 같이 정의한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단위 테스트: 테스트 대상을 의존하는 오브젝트 대신 목 오브젝트 사용하거나 외부의 환경에 영향받지 않도록 고립시켜서 하는 테스트&lt;/li&gt;
  &lt;li&gt;통합 테스트: 두 개 이상의 성격이나 계층이 다른 오브젝트가 연동하도록 만들어 테스트하거나, 외부의 DB나 환경에 의존하는 테스트
    &lt;ul&gt;
      &lt;li&gt;스프링의 테스트 컨텍스트 프레임워크를 이용하여, 컨텍스트에서 생성되고 DI된 오브젝트를 테스트하는 것도 통합 테스트이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트 가이드라인
    &lt;ul&gt;
      &lt;li&gt;항상 단위 테스트를 먼저 고려한다.&lt;/li&gt;
      &lt;li&gt;단위 테스트 수행시, 항상 외부와의 의존관계를 차단하고 필요에 따라 목 오브젝트나 스텁을 사용하여 테스트 대역을 이용하도록 만든다.&lt;/li&gt;
      &lt;li&gt;외부 리소스에 의존하는 테스트는 통합 테스트로 만든다.
        &lt;ul&gt;
          &lt;li&gt;여러 개의 단위가 의존관계를 가지고 동작할 때를 위한 통합 테스트는 필요하다.&lt;/li&gt;
          &lt;li&gt;스프링의 테스트 컨텍스트 프레임워크를 이용하는 테스트도 통합 테스트이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DAO는 그 자체로 비즈니스 로직을 담고 있다기 보다는 DB를 통해 로직을 수행하는 인터페이스와 같은 역할을 한다. 고립된 테스트를 만들기가 어려우며, 만든다해도 가치가 없는 것이 대부분이다. 따라서 DAO는 DB까지 연동하는 테스트로 만드는 편이 효과적이다.
        &lt;ul&gt;
          &lt;li&gt;DAO 테스트는 DB라는 외부 리소스를 사용하므로, 통합 테스트로 분류된다. DAO를 테스트를 통해 충분히 검증하면, DAO를 이용하는 코드는 DAO 역할을 하는 오브젝트를 목 오브젝트나 스텁으로 대체하여 단위 테스트를 수행할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;테스트는 코드가 작성되고 빠르게 진행되는 편이 좋다. 테스트를 코드가 작성된 후에 만드는 경우에도 가능한 빨리 작성하도록 해야 한다. 테스트하기 편하게 만들어진 코드는 깔끔하고 좋은 코드가 될 가능성이 높다. 스프링이 지지하고 권장하는, 깔끔하고 유연한 코드를 만들다보면 테스트도 그만큼 만들기 쉬워지고, 테스트는 다시 코드의 품질을 높여준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;목-프레임워크&quot;&gt;목 프레임워크&lt;/h3&gt;

&lt;p&gt;단위 테스트시에 필요한 목 오브젝트나 스텁을 쉽게 만들 수 있도록 도와주는, &lt;strong&gt;Mockito&lt;/strong&gt; 와 같은 목 오브젝트 지원 프레임워크가 있다.&lt;/p&gt;

&lt;p&gt;Mockito와 같이 목 프레임워크의 특징은 의존 오브젝트를 대신하는 목 오브젝트를 일일이 준비해둘 필요가 없다는 것이다. 간단한 메소드 호출만으로도, 다음과 같이 테스트용 목 오브젝트를 만들 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockUserDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockUserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;다이내믹-프록시와-팩토리-빈&quot;&gt;다이내믹 프록시와 팩토리 빈&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프록시와-프록시-패턴-데코레이터-패턴&quot;&gt;프록시와 프록시 패턴, 데코레이터 패턴&lt;/h3&gt;

&lt;p&gt;트랜잭션 경계설정과 같은 비즈니스 로직이 아닌 코드는 전략 패턴을 통해 비즈니스 로직을 담은 클래스 외부로 빼낼 수가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 분리된 &lt;strong&gt;“부가기능”&lt;/strong&gt; 을 담은 클래스는 부가기능 외의 나머지 모든 기능은 원래 비즈니스 로직을 담은, 핵심 기능을 가진 클래스로 위임한다는 것이다. 비즈니스 로직을 담은 &lt;strong&gt;“핵심기능”&lt;/strong&gt; 을 담당하는 클래스는 부가기능을 가진 클래스의 존재 자체를 모른다. 따라서 부가기능이 핵심기능을 사용하는 구조이다.&lt;/p&gt;

&lt;p&gt;그런데 클라이언트에서 핵심기능을 가진 클래스를 직접 사용할 때, 부가기능이 적용될 기회가 없다는 점이다. 따라서 부가기능을 가진 클래스는 마차 자신이 핵심기능을 가진 클래스인 것처럼 꾸며서 &lt;strong&gt;자신을 거쳐서 핵심기능을 사용하도록 해야한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이를 위해 클라이언트는 &lt;strong&gt;인터페이스를 통해서만 핵심기능을 사용&lt;/strong&gt; 하게하고, 부가기능 자신도 &lt;strong&gt;같은 인터페이스를 구현&lt;/strong&gt; 한 뒤에, 자신이 그 사이에 끼어들어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 적용되었을 때, 자신이 가진 부가적인 기능을 적용해줄 수 있다. 비즈니스 로직 코드에서 트랜잭션 기능을 부여해주는 것이 바로 그런 대표적인 경우이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이렇게 마치 자신이 클라이언트가 사용하려는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 받아주는 것을 &lt;strong&gt;프록시(Proxy)&lt;/strong&gt; 라고 하며, 프록시를 통해 최종적으로 요청을 받아 처리하는 실제 오브젝트를 &lt;strong&gt;타깃&lt;/strong&gt; 또는 &lt;strong&gt;실체&lt;/strong&gt; 라고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프록시의 특징은 &lt;strong&gt;타깃과 같은 인터페이스를 구현했다는 것과 타깃을 제어할 수 있는 위치에 있다는 것이다.&lt;/strong&gt; 프록시의 사용 목적은 클라이언트가 타깃에 접근하는 방법을 제어하는 것과, 타깃에 부가적인 기능을 부여해주기 위해서이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;데코레이터-패턴&quot;&gt;데코레이터 패턴&lt;/h3&gt;

&lt;p&gt;타깃에 &lt;strong&gt;부가적인 기능을 런타임시에 다이내믹하게 부여해주기 위하여, 프록시를 사용하는 패턴이다.&lt;/strong&gt; 즉 코드 상에서는 어떤 방법과 순서로 프록시와 타깃이 연결되어 있는지 나타나지 않는다. 부가적인 기능을 담당하는 데코레이터는 여러 개 있을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프록시로서 동작하는 각 데코레이터들은 자신이 위임하는 대상에도 인터페이스로 접근하므로, 최종 타깃으로 위임하는 것인지 다음 단계의 데코레이터 프록시로 위임하는지 알지 못한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java의 InputStream과 OutputStream 구현 클래스는 데코레이터 패턴이 사용된 대표적인 예이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스프링에서는 다음과 같이 데코레이터의 정의와 런타임 시의 구성 방법을 DI를 통해 쉽게 데코레이터 패턴을 적용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Decorator --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.service.UserServiceTx&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transactionManager&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userServiceImpl&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Target --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userServiceImpl&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.service.UserServiceImpl&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 코드 레벨에서 데코레이터와 타깃 간의 연결은 나타내지 않고, 다이내믹하게 연결을 할 수 있다. &lt;strong&gt;데코레이터 패턴은 타깃의 코드를 손대지 않고, 클라이언트가 호출하는 방법도 변경하지 않은 채로 새로운 기능을 추가할 때 유용한 방법이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프록시-패턴&quot;&gt;프록시 패턴&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;프록시: 클라이언트와 타깃 사이에 대리 역할을 맡은 오브젝트를 총칭&lt;/li&gt;
  &lt;li&gt;프록시 패턴: 프록시를 사용하는 방법 중, &lt;strong&gt;타깃에 대한 접근방법을 제어하려는 목적&lt;/strong&gt; 을 가진 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프록시 패턴의 프록시는 &lt;strong&gt;타깃의 기능을 추가하거나 확장하지 않는다.&lt;/strong&gt; 대신 클라이언트가 &lt;strong&gt;타깃에 접근하는 방식을 변경해준다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 타깃 오브젝트가 생성하기가 복잡하거나 당장 필요하지 않은 경우, 필요한 시점까지 생성하지 않고 레퍼런스가 필요한 클라이언트 쪽에서는 프록시를 넘겨줄 수 있다. 프록시의 메소드를 통해 실제 호출하였을 때, 그 시점에 타깃 오브젝트를 생성하고 위임해주는 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;접근 권한을 제어&lt;/strong&gt; 하기 위해 프록시 패턴을 사용할 수도 있다. 특정 계층에서 타깃 오브젝트가 읽기 전용으로 강제해야된다고 했을 때, 프록시를 사용하여 데이터 변경을 유발하는 메소드는 예외를 던지게 할 수도 있다. (ex: Collections의 unmodifiableCollection())&lt;/p&gt;

&lt;p&gt;프록시 패턴은 타깃의 기능 자체에는 관여하지 않으면서 &lt;strong&gt;접근하는 방법을 제어해주는 프록시를 이용하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프록시는 코드에서 자신이 만들거나 접근할 타깃 클래스 정보를 알고 있는 경우가 많다. 생성을 지연시키는 프록시라면 타깃에 대한 구체적인 생성 방법을 알아야 하기 때문이다. 물론 프록시 패턴을 사용하는 경우라도 인터페이스를 통해 위임하게 만들 수도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;다이내믹-프록시&quot;&gt;다이내믹 프록시&lt;/h3&gt;

&lt;p&gt;프록시는 기존 코드에 영향을 주지 않으면서 &lt;strong&gt;기능을 확장하거나 접근 방법을 제어할 수 있는 유용한 방법이다.&lt;/strong&gt; 그러나 매번 새로운 클래스를 정의하고 인터페이스로부터 구현할 메소드가 많으면 번거롭기 때문에, &lt;strong&gt;자바의 리플렉션을 통해 쉽게 프록시를 만든다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프록시 작성의 문제점
    &lt;ul&gt;
      &lt;li&gt;타깃의 인터페이스를 구현하고 위임하는 코드를 작성하기가 번거롭다. 타깃의 메소드가 추가되거나 변경되면 함께 수정해야 한다.&lt;/li&gt;
      &lt;li&gt;부가기능 코드가 중복될 가능성이 높다. 보통 부가기능은 일반적인 코드가 많아 여러 곳에서 쓰일 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다이내믹 프록시는 &lt;strong&gt;리플렉션&lt;/strong&gt; 기능을 활용하여 프록시로 만드는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/cefecb7cb20e1d65d85904000c1fa34e9a1a42c8&quot;&gt;Reflection Sample Test&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;다이내믹 프록시가 동작하는 방식은 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다이내믹 프록시는 &lt;strong&gt;프록시 팩토리에 의해&lt;/strong&gt; 런타임시 다이내믹하게 만들어진다. 이 프록시는 타깃의 &lt;strong&gt;인터페이스와 같은 타입&lt;/strong&gt; 으로 만들어지며 클라이언트는 이 프록시 오브젝트를 타깃 인터페이스를 통해 사용할 수 있다. 따라서 프록시 생성시 인터페이스를 모두 구현할 필요가 없고 프록시 팩토리에게 인터페이스 정보만 알려주면 된다.&lt;/p&gt;

&lt;p&gt;다이내믹 프록시가 인터페이스 구현 클래스의 오브젝트로 만들어지긴 하지만, 필요한 부가기능 코드는 직접 작성해야 한다. 부가기능은 프록시와 독립적인 &lt;strong&gt;InvocationHandler&lt;/strong&gt; 를 구현한 오브젝트에 담는다. InvocationHandler 인터페이스는 다음과 같이 메소드 하나만 가진 간단한 인터페이스이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 invoke 메소드는 Method 인터페이스 및 메소드를 호출할 때 전달되는 파라미터인 args를 받는다. 다이내믹 프록시 오브젝트는 클라이언트의 &lt;strong&gt;모든 요청을 리플렉션 정보로 변환하여 InvocationHandler 구현 오브젝트의 invoke 메소드로 넘긴다.&lt;/strong&gt;
InvocationHandler 인터페이스 구현체에서는 Method 인터페이스 구현체 및 args를 통해 실제 타깃 오브젝트의 메소드를 호출할 수 있다. 중복되는 부가적인 기능을 InvocationHandler 인터페이스의 구현체를 통해 쉽게 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/09.png&quot; alt=&quot;09.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UppercaseHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UppercaseHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 만약 타깃 메소드에 대한 예외발생시 여기에서는 &quot;InvocationTagetException&quot; 으로 잡아야 한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 타깃 오브젝트에서 발생하는 예외가 &quot;InvocationTagetException&quot; 으로 한 번 포장되서 전달된다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//다이내믹 프록시 클래스의 로딩에 사용할 클래스 로더&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 구현할 인터페이스, 다이내믹 프록시는 하나이상의 인터페이스를 구현할 수 있다.&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UppercaseHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 부가기능과 위임코드를 담은 InvocationHandler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 리플렉션 API를 활용하여 타깃 오브젝트의 메소드를 호출한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/bc3b6cdef9263cae1f610c873cd31d8e1200f906&quot;&gt;Dynamic Proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/249bba7411386d4fcfeb92325f7f21f655bde355&quot;&gt;UserServiceTx using Dynamic Proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이렇게 다이내믹 프록시를 이용하면 타깃 인터페이스를 일일이 구현해야 하는 번거로움을 피할 수 있고, 하나의 핸들러 메소드를 구현하는 것만으로 수많은 메소드에 부가기능을 추가할 수 있어 코드 중복도 사라진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;다이내믹-프록시를-위한-팩토리-빈&quot;&gt;다이내믹 프록시를 위한 팩토리 빈&lt;/h3&gt;

&lt;p&gt;다이내믹 프록시 오브젝트는 일반적인 스프링의 빈으로 등록할 방법이 없다. 스프링 빈은 기본적으로 &lt;strong&gt;미리 정의된 클래스 이름과 프로퍼티를 가지고 해당 클래스의 오브젝트를 생성한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 클래스 이름을 가지고 리플렉션을 이용하여 파라미터가 없는 디폴트 생성자를 호출하고 오브젝트를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.util.Date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다이내믹 프록시 오브젝트는 이런 식으로 생성되지 않는다. 다이내믹 프록시 클래스는 &lt;strong&gt;내부적으로 다이내믹하게 새로 정의해서 사용되기 때문에 사전에 애플리케이션 컨텍스트를 이용하여 스프링 빈으로 정의할 방법이 없다.&lt;/strong&gt; 다이내믹 프록시 오브젝트는 &lt;strong&gt;Proxy.newProxyInstance()&lt;/strong&gt; 를 통해서만 만들 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;스프링은 미리 정의된 클래스 정보를 가지고 디폴트 생성자를 통해 오브젝트를 만드는 방법 외에, 빈을 만들 수 있는 여러가지 방법을 제공하는데 그 중에 하나가 &lt;strong&gt;팩토리 빈&lt;/strong&gt; 을 이용한 빈 생성 방법을 들 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;팩토리 빈: 스프링을 대신해서 오브젝트의 생성 로직을 담당하도록 만들어진 특별한 빈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;팩토리 빈을 만드는 방법은 여러가지가 있는데 다음과 같은 &lt;strong&gt;FactoryBean&lt;/strong&gt; 인터페이스를 구현하는 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 빈 오브젝트를 생성해서 리턴&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 생성되는 오브젝트의 타입을 리턴&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// getObject가 리턴하는 오브젝트가 싱글톤 오브젝트인지를 알려준다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 인터페이스를 구현한 클래스를 스프링 빈으로 등록하면 팩토리 빈으로서 동작한다. 스프링 빈으로 등록하기가 힘든 클래스에 대해서는 다음과 같이 FactoryBean을 활용하여 빈으로 사용될 오브젝트를 생성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageFactoryBean&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 오브젝트 생성시 필요한 정보를 팩토리 빈의 프로퍼티로 설정하여 DI 받을 수 있도록 한다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 주입된 정보는 실제 사용하고자 하는 클래스의 오브젝트를 생성할 때 사용한다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 실제 빈으로 사용될 오브젝트를 직접 생성한다. 코드를 이용하므로 복잡한 초기화 방식을 가진 오브젝트도 생성할 수 있다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 빈으로 사용되는 오브젝트의 타입을 리턴한다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// getObject 메소드가 돌려주는 오브젝트가 싱글톤인지 알려준다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch06.springbook.factorybean.MessageFactoryBean&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Factory Bean&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryBeanTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessageFromFactoryBeanTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;message&quot; 라는 이름의 빈의 타입이 Message.class 이다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Factory Bean&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFactoryBeanTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp;을 붙이면 팩토리 빈이 리턴된다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 FactoryBean을 구현한 클래스가 빈의 클래스로 지정되면, 팩토리 빈 클래스의 오브젝트의 &lt;strong&gt;getObject&lt;/strong&gt; 메소드를 통해 오브젝트를 가져오고 이를 빈 오브젝트로 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 Private 생성자를 가진 클래스도 빈으로 등록하면 리플렉션을 통해 오브젝트를 만들어주기는 한다. 그러나 Private 생성자를 가진 클래스를 빈으로 등록하는 일은 권장되지 않으며 바르게 동작하지 않을 수 있다. 따라서 이 팩토리 빈을 활용하여 빈으로 등록하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/6fdfcdbbecf51152b064a6a648babd5ed6feab43&quot;&gt;FactoryBean example&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;미리 클래스가 정의되지 않아서 일반적인 방법으로는 스프링 빈으로 등록할 수 없는 다이내믹 프록시 오브젝트를 팩토리 빈을 사용하면 스프링 빈으로 만들어줄 수 있다. 팩토리 빈의 &lt;strong&gt;getObject&lt;/strong&gt; 메소드에 다이내믹 프록시 오브젝트를 만들어주는 코드를 넣으면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/fce3afd31a8c495d5ec4ee88c521bbfa82601332&quot;&gt;Dynamic Proxy using FactoryBean&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프록시 팩토리 빈의 한계
    &lt;ul&gt;
      &lt;li&gt;하나의 클래스 안에 존재하는 여러 개의 메소드에 부가기능을 한 번에 제공할 수는 있는데 여러 개의 클래스에 공통적인 부가기능을 추가하는 것은 불가능하다. 타깃 클래스에 맞게 여러 팩토리 빈을 추가해줘야 한다.&lt;/li&gt;
      &lt;li&gt;하나의 타깃에 여러 개의 부가기능을 추가할 때, 부가기능마다 프록시 팩토리 빈이 추가되는 것을 피할 수 없다.&lt;/li&gt;
      &lt;li&gt;타깃 오브젝트마다 부가기능을 담당하고 타깃에 위임하는 &lt;strong&gt;InvocationHandler&lt;/strong&gt; 를 구현하는 오브젝트가 팩토리 빈 개수만큼 만들어진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-프록시-팩토리-빈&quot;&gt;스프링의 프록시 팩토리 빈&lt;/h2&gt;

&lt;p&gt;스프링은 일관된 방법으로 프록시를 만들 수 있게 도와주는 추상 레이어를 제공한다. 스프링의 &lt;strong&gt;ProxyFactoryBean&lt;/strong&gt; 은 프록시를 생성해서 빈 오브젝트로 등록하게 해주는 팩토리 빈이다. 이 팩토리 빈은 순수하게 프록시를 생성하는 작업만 담당하고 제공해줄 부가기능은 별도의 빈에 둘 수 있다.&lt;/p&gt;

&lt;p&gt;부가기능은 &lt;strong&gt;MethodInterceptor&lt;/strong&gt; 인터페이스를 구현해서 만든다. InvocationHandler 와 다른 점은 MethodInterceptor의 invoke 메소드에 ProxyFactoryBean 으로부터 &lt;strong&gt;타깃 오브젝트에 대한 정보까지도 함께 제공받는다.&lt;/strong&gt; 따라서 MethodInterceptor를 구현한 클래스는 타깃 오브젝트에 상관없이 독립적으로 만들 수 있으며 &lt;strong&gt;여러 프록시에서 함께 사용할 수 있을 뿐만 아니라 싱글톤 빈으로 등록 가능하다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UppercaseAdvice&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 타깃 오브젝트를 전달할 필요가 없다. MethodInvocation은 메소드 정보와 함께 타깃 오브젝트를 알고 있다.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxyFactoryBeanTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ProxyFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 타깃 설정&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UppercaseAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 부가기능을 담은 어드바이스를 추가, 여러 개 추가가능&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//getObject를 통해 프록시를 가져온다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HELLO TOBY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HI TOBY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayThankYou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;THANK YOU TOBY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/7e60bd08412c5308477992f7db65fb98b2a7b690&quot;&gt;ProxyFactoryBean example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;어드바이스&quot;&gt;어드바이스&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MethodInterceptor&lt;/strong&gt; 를 구현한 오브젝트는 타깃 오브젝트가 등장하지 않는다. &lt;strong&gt;MethodInvocation&lt;/strong&gt; 은 타깃 오브젝트의 메소드를 실행할 수 있는 기능이 있어서, MethodInterceptor는 부가기능을 제공하는데만 &lt;strong&gt;집중&lt;/strong&gt; 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉, MethodInterceptor 는 일종의 템플릿처럼 동작하고, MethodInvocation은 콜백처럼 동작하는 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또한 ProxyFactoryBean 을 이용하면 부가기능을 제공하는 MethodInterceptor 구현한 오브젝트를 &lt;strong&gt;여러 개 추가할 수 있다.&lt;/strong&gt; 즉 여러 개의 부가기능을 제공하는 프록시를 쉽게 만들 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 ProxyFactoryBean이 인터페이스 자동 검출 기능을 통해 타깃 오브젝트가 구현하고 있는 인터페이스 정보를 알 수 있으므로, 프록시를 직접 만들거나 JDK 다이내믹 프록시를 만들 때 처럼 인터페이스 정보를 제공할 필요가 없다.&lt;/p&gt;

&lt;p&gt;스프링에서는 MethodInterceptor 처럼 부가기능을 담은 오브젝트를 &lt;strong&gt;어드바이스(advice)&lt;/strong&gt; 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;포인트컷&quot;&gt;포인트컷&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/11.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;InvocationHandler 를 구현했을 때는 &lt;strong&gt;메소드의 이름을 가지고 부가기능을 적용할 대상 메소드를 선정&lt;/strong&gt; 하는 것이 있었는데, 이로 인해 InvocationHandler 오브젝트를 여러 프록시에서 &lt;strong&gt;공유할 수가 없었다.&lt;/strong&gt; 타깃과 메소드 선정하는 코드는 분리할 수는 있지만 &lt;strong&gt;한번 빈으로 등록된 오브젝트는 특정 타깃을 위한 프록시에 제한된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;부가기능을 적용할 메소드를 MethodInterceptor 에 넣는 것은 불가능하다. MethodInterceptor 오브젝트는 여러 프록시가 공유해서 사용할 수 있어서 타깃 정보를 갖지 않는다. 즉, 특정 프록시에만 적용하는 패턴을 넣으면 문제가 되는 것이다.&lt;/p&gt;

&lt;p&gt;MethodInterceptor는 프록시가 클라이언트로 받는 요청을 일일이 전달받을 필요는 없다. MethodInterceptor는 &lt;strong&gt;순수하게 재사용 가능한 부가기능 제공 코드만 남겨두는 것이다.&lt;/strong&gt; 대신 프록시에서 부가기능 적용 메소드를 선택하는 기능을 넣어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단, 프록시는 타깃을 대신해서 클라이언트의 요청을 받는 것이므로, 메소드를 선별하는 기능 자체는 또 따로 분리하는 것이 좋다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;스프링의 ProxyFactoryBean을 활용한 방법은 &lt;strong&gt;부가기능과 메소드 선정 알고리즘&lt;/strong&gt; 을 활용하는 유연한 구조를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/12.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;스프링에서 메소드 선정 알고리즘을 담은 오브젝트를 &lt;strong&gt;포인트컷(pointcut)&lt;/strong&gt; 이라고 한다. 어드바이스와 포인트컷은 모두 프록시에 DI로 주입되어 사용된다.&lt;/p&gt;

&lt;p&gt;프록시는 클라이언트로부터 요청받으면 먼저 &lt;strong&gt;포인트컷을 통해 부가기능을 부여할 메소드인지 판별한다.&lt;/strong&gt; 판별 후 적용해야 된다면 어드바이스를 호출한다. 어드바이스는 직접 &lt;strong&gt;타깃의 메소드를 호출하지 않으며, MethodInvocation 타입의 오브젝트에 있는 proceed 메소드를 호출하기만 하는 전형적인 템플릿/콜백 방식으로 동작한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;프록시로부터 어드바이스와 포인트컷을 독립시키고 DI를 사용하는 것은 &lt;strong&gt;전략패턴&lt;/strong&gt; 구조이다. 따라서 여러 프록시가 공유해서 사용가능하고, 변경이 일어나면 구현 클래스만 바꾸면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pointcutAdvisorTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ProxyFactoryBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 메소드 이름을 비교하여 대상을 선정하는 포인트컷&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NameMatchMethodPointcut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NameMatchMethodPointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMappedName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sayH*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 포인트컷과 어드바이스를 advisor로 묶어 한 번에 추가&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAdvisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultPointcutAdvisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UppercaseAdvice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HELLO TOBY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HI TOBY&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sayThankYou&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thank You Toby&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 포인트컷에 의해 매치가 안된다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/4433fb73cb5c80857871af4f65b0498ea981c578&quot;&gt;ProxyFactoryBean with pointcut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위의 코드에서 &lt;strong&gt;Advisor&lt;/strong&gt; 타입의 오브젝트로 포인트컷과 어드바이스를 한 번에 추가하는 이유는 ProxyFactoryBean에 여러 포인트컷 및 어드바이스를 추가할 수 있기 때문이다. 이와 같이 포인트컷과 어드바이스를 묶은 오브젝트를 &lt;strong&gt;어드바이저&lt;/strong&gt; 라고 한다.&lt;/p&gt;

&lt;p&gt;여러 개의 어드바이스가 등록되더라도 각 다른 포인트컷과 조합할 수 있으므로 각기 다른 메소드 선정 방식을 쓸 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionAdvice&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodInterceptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 타깃을 호출하는 기능을 가진 콜백 오브젝트를 프록시로부터 받는다. 메소드 호출 전후로 부가기능을 추가할 수 있다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MethodInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// JDK의 다이내믹 프록시와는 다르게 예외가 포장되지 않고 타깃에서 보낸 예외가 그대로 전달된다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 JDK 다이내믹 프록시와는 다르게 타깃 정보를 알 필요도 없고, 콜백 오브젝트를 통해 타깃에 위임할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/704e3096d8339812912708c04874ba8e2ab80bef&quot;&gt;Transaction code with ProxyFactoryBean&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ProxyFactoryBean 은 스프링의 DI와 템플릿/콜백, 서비스 추상화 등의 기법이 모두 적용된 것이다. 따라서 어드바이스를 여러 프록시가 공유할 수 있게 되었고 포인트컷과 자유롭게 조합이 가능하다. 메소드 선정 방식이 달라지는 경우에는 포인트컷의 설정을 따로 등록하고 어드바이저로 조합해서 적용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-07-toby_spring_06_aop/13.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/07/toby_spring_06_aop-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/07/toby_spring_06_aop-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 05: 서비스 추상화</title>
        <description>&lt;p&gt;자바에는 사용 방법과 형식은 다르지만, 기능과 목적이 유사한 기술이 존재한다. 스프링은 성격이 비슷한 여러 종류의 기술을 추상화하고 이를 일관된 방법으로 사용할 수 있도록 지원하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/c46c3cd12ef49fe09f69fd53672b57814da293e9&quot;&gt;Implemented UserService&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드 개선
    &lt;ul&gt;
      &lt;li&gt;코드에 중복된 부분은 없는가?&lt;/li&gt;
      &lt;li&gt;코드가 무엇을 하는 것인지 이해하기 불편하지 않은가?&lt;/li&gt;
      &lt;li&gt;코드가 자신이 있어야 할 자리에 있는가?&lt;/li&gt;
      &lt;li&gt;앞으로 변경이 일어난다면 어떤 것이 있을 수 있고, 그 변화에 쉽게 대응할 수 있게 작성되어 있는가?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체지향적인 코드는 다른 오브젝트의 데이터를 가져와서 작업하는 대신에, 데이터를 갖고 있는 오브젝트에게 작업을 해달라고 요청한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/e1eed87a77bbaf9e93eeda76e92a045fdefedc20&quot;&gt;Refactored&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;트랜잭션-서비스-추상화&quot;&gt;트랜잭션 서비스 추상화&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 추상화: 기능은 유사하나 사용방법이 다른 로우레벨의 다양한 기술들에 대해 추상 인터페이스와 일관성있는 접근 방법을 제공해주는 것
    &lt;ul&gt;
      &lt;li&gt;다양한 기술을 비즈니스 로직이 담긴 코드의 변경없이 자유롭게 바꿀 수 있을 뿐만 아니라 원활한 테스트가 가능하게 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션(Transaction): 더 이상 나눌 수 없는 단위 작업, 작업을 쪼개서 더 작은 단위로 만들 수 없다는 것은 트랜잭션의 핵심 속성인 원자성을 의미한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;부분적으로 성공하거나 여러 번에 걸쳐서 진행할 수 있는 작업이 아니어야 한다. 따라서 도중에 예외가 발생하면 작업을 시작하지 않은 것처럼 원래 상태로 돌려놔야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;DB는 하나의 SQL 구문에 대해서는 완벽한 트랜잭션을 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;트랜잭션 롤백(Transaction Rollback): 도중에 예외가 발생해서 작업 중단되면 이전에 수행한 SQL 작업을 취소&lt;/li&gt;
  &lt;li&gt;트랜잭션 커밋(Transaction Commit): 모든 SQL 작업이 성공적으로 마무리되면, DB에 알려주어 확정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jdbc-트랜잭션의-트랜잭션-경계-설정&quot;&gt;JDBC 트랜잭션의 트랜잭션 경계 설정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;트랜잭션의 경계: 트랜잭션이 시작하고 끝나는 위치, 복잡한 로직에서 트랜잭션 경계를 설정하는 것은 매우 중요한 작업이다. 주로 비즈니스 로직안에서 설정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 시작&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PreparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;update users....&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PreparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete users....&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;st2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 커밋&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 롤백&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JDBC에서는 &lt;strong&gt;setAutoCommit(false)&lt;/strong&gt; 를 통해 자동 커밋 옵션을 false로 줌으로써 트랜잭션을 시작한다. 트랜잭션이 한 번 시작되면, &lt;strong&gt;commit&lt;/strong&gt; 이나 &lt;strong&gt;rollback&lt;/strong&gt; 메소드가 호출될 때까지 하나의 트랜잭션으로 묶인다. (트랜잭션의 경계설정)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;트랜잭션의 경계는 하나의 Connection이 만들어지고 닫히는 범위 안에 존재한다. 이를 로컬 트랜잭션이라고 부른다. 어떤 일련의 작업이 하나의 트랜잭션으로 묶이려면 진행되는 동안 사용하는 DB Connection이 하나만 사용되어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-동기화&quot;&gt;트랜잭션 동기화&lt;/h3&gt;

&lt;p&gt;트랜잭션을 시작하기 위해 만든 Connection 오브젝트를 &lt;strong&gt;“특별한 장소”&lt;/strong&gt; 에 저장해두었다가, 이 후에 호출되는 DB 작업은 저장된 Connection을 가져다가 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-04-toby_spring_05_service_abstraction/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connection을 생성 후, 트랜잭션 동기화 저장소에 저장해둔다. (setAutoCommit(false) 로 둔채)
그리고 DB 작업을 수행할 때마다 트랜잭션 동기화 저장소에서 트랜잭션을 가진 Connection 오브젝트를 가져와 SQL 구문을 실행한다. 마지막에 Commit을 (예외가 발생했을 경우에는 rollback) 수행하여 트랜잭션을 완료시키고 저장소에서 Connection 오브젝트를 제거한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;트랜잭션 동기화 저장소는 작업 스레드마다 독립적으로 Connection 오브젝트를 저장하고 관리하므로, 멀티스레드 환경에서도 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;스프링이 제공하는 트랜잭션 동기화 관리 클래스는 &lt;strong&gt;TransactionSynchronizationManager&lt;/strong&gt; 클래스이다. 다음과 같이 트랜잭션 동기화 작업을 통해 트랜잭션을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initSynchronization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 동기화 관리 클래스를 통해 동기화 작업 초기화&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DB Connection 생성 후, 트랜잭션 시작. DB Connection 생성과 동기화 (동기화 저장소에 바인딩)를 함께 해주는 메소드이다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 트랜잭션 동기화가 된 상태로 JdbcTemplate를 사용하면 동기화시킨 DB Connection을 사용한다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canUpgradeLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;upgradeLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 정상적으로 수행 후 트랜잭션 커밋&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 예외가 발생시 롤백&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DataSourceUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;releaseConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// DB Connection을 안전하게 닫는다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unbindResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TransactionSynchronizationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearSynchronization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 동기화 작업 종료 및 정리&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1dda439fdc941df2798b915ed80525f64c66c209&quot;&gt;Use TransactionSynchronizationManager for DB transaction.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JdbcTemplate 는 DB Connection이 미리 생성되서 트랜잭션 동기화 저장소에 등록되어 있지 않거나 트랜잭션이 없는 경우에는 직접 DB Connection을 생성하고 트랜잭션을 시작해서 JDBC 작업을 수행한다. 반면에 트랜잭션 동기화를 시작해놓았으면 JdbcTemplate 는 직접 Connection을 만드는 대신, 트랜잭션 동기화 저장소에 있는 Connection을 가져와서 사용한다. 따라서 트랜잭션이 굳이 필요없다면 바로 JdbcTemplate 메소드를 호출해서 사용하고, 필요하다면 외부에서 트랜잭션 동기화를 해주면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;트랜잭션-서비스-추상화-1&quot;&gt;트랜잭션 서비스 추상화&lt;/h3&gt;

&lt;p&gt;로컬 트랜잭션은 하나의 DB에 대한 작업이 아닌, 여러 개의 DB에 대한 작업을 하나의 트랜잭션으로 묶는 것은 불가능하다. 로컬 트랜잭션은 하나의 DB Connection에 종속되기 때문이다.&lt;/p&gt;

&lt;p&gt;이를 위해 별도의 트랜잭션 매니저를 통해 트랜잭션을 관리하는 &lt;strong&gt;글로벌 트랜잭션&lt;/strong&gt; 방식을 사용해야 한다. 글로벌 트랜잭션을 사용하면 트랜잭션 매니저를 통해 여러 개의 DB가 참여하는 작업을 하나의 트랜잭션으로 묶을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;또한 JMS와 같은 트랜잭션 기능을 지원하는 서비스도 트랜잭션에 참여시킬 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;자바는 JDBC 외에 글로벌 트랜잭션을 지원하는 트랜잭션 매니저를 위해 &lt;strong&gt;JTA (Java Transaction API)&lt;/strong&gt; 를 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-04-toby_spring_05_service_abstraction/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;트랜잭션은 JDBC나 JMS API를 통해 직접 제어하지 않고, JTA를 통해 트랜잭션 매니저가 관리하도록 위임한다. 트랜잭션 매니저는 위와 같이 리소스 매니저와 XA 프로토콜을 통해 연결하여 종합적으로 트랜잭션을 제어한다. 이를 통해 여러 개의 DB나 트랜잭션을 지원하는 작업을 하나의 트랜잭션으로 통합하는 분산 트랜잭션 및 글로벌 트랜잭션을 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;InitialContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UserTransaction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;USER_TX_JNDI_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JNDI를 통해 서버의 UserTransaction 을 가져온다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// JNDI로 가져온 dataSource를 사용해야 한다.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 JTA를 사용하여 글로벌 트랜잭션을 사용할 수 있지만, 특정 기술에 종속되어버리는 문제가 있다. JDBC나 JTA, Hibernate 등, 바뀔 때마다 위의 코드를 변경해야하는 문제가 생긴다. 다음과 같이 트랜잭션 경계 설정 코드로 인해 UserDao의 특정 구현 클래스에 간적접인 의존관계가 생겼기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-04-toby_spring_05_service_abstraction/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;트랜잭션 경계설정을 담당하는 코드는 &lt;strong&gt;일정한 패턴을 갖는 유사한 구조를 갖고 있어서 이들의 공통점을 뽑아내 추상화한 트랜잭션 관리 계층을 만들 수 있다.&lt;/strong&gt; 이를 통해 애플리케이션 코드에서는 해당 계층에서 제공하는 API를 활용하여 특정 기술에 종속되지 않는 트랜잭션 경계설정 코드를 사용하도록 한다.&lt;/p&gt;

&lt;p&gt;스프링에서는 이러한 트랜잭션 기술의 공통점을 담은 트랜잭션 추상화 기술을 제공한다. 이를 통해 각 기술의 트랜잭션 API를 사용하지 않고 일관된 방식으로 트랜잭션을 제어하는 트랜잭션 경계설정 작업이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-04-toby_spring_05_service_abstraction/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSourceTransactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// JDBC 트랜잭션 추상 오브젝트 생성&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// DefaultTransactionDefinition 은 트랜잭션에 대한 속성을 담고 있다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 트랜잭션은 TransactionStatus 변수에 저장되며 트랜잭션에 대한 조작이 필요하면 이 변수를 파라미터로 넘기면 된다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TransactionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultTransactionDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 트랜잭션 시작&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 트랜잭션 동기화가 사용됨. DataSourceTransactionManager는 JdbcTemplate 에서 사용될 수 있는 방식으로 트랜잭션을 관리해준다.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;transactionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링에서 제공하는 트랜잭션 경계설정을 위한 추상 인터페이스는 &lt;strong&gt;PlatformTransactionManager&lt;/strong&gt; 이다. &lt;strong&gt;getTransaction&lt;/strong&gt; 메소드를 호출했을 때, 필요에 따라 트랜잭션 매니저가 DB Connection을 가져오는 작업도 같이 수행해준다. JDBC의 로컬 트랜잭션을 사용한다면, &lt;strong&gt;DataSourceTransactionManager&lt;/strong&gt; 를 사용할 DB의 DataSource를 생성자 파라미터로 넘겨서 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/8730c87083e2bf1aafeac8154a3b950a3bac3790&quot;&gt;Use TransactionManager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/f657e3285712f837f737a6e38b0185e5272e8e8a&quot;&gt;Use TransactionManager with DI&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 트랜잭션 추상화 기술은 트랜잭션 동기화를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 DI는 관심, 책임, 성격이 다른 코드를 깔끔하게 분리한다. 이렇게 적절하게 분리함으로써, 하나의 모듈은 한 가지 책임을 가져야된다는 “단일 책임 원칙” 에 맞게 코드를 작성할 수 있다. 이 원칙을 잘 지키면 어떠한 수정 작업이 필요할 때 변경 대상이 명확해진다. 이를 위해 인터페이스를 도입하고 DI롤 통해 연결한다. 그 결과로 단일 책임 원칙 뿐만 아니라 개방 폐쇄 원칙도 지킬 수 있고 모듈 간의 결합도가 낮아져서 서로의 변경이 영향을 주지 않고 하나의 모듈은 하나의 관심에만 가질 수 있도록 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 의존관계 주입 기술인 DI는 모든 스프링 기술의 기반이 되는 핵심이자 원리이며, DI에 담긴 원칙과 이를 응용하는 프로그래밍 모델을 자바 엔터프라이즈 기술의 문제를 해결하는데 적극 활용한다. 또한 스프링은 개발자가 작성하는 애플리케이션 코드 또한 DI를 활용해 깔끔하고 유연성있는 코드로 만들 수 있도록 적극 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;테스트-오브젝트&quot;&gt;테스트 오브젝트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;테스트 대상이 되는 오브젝트의 로직을 수정하지 않고도, 테스트에 원활히 수행할 수 있도록 타겟 오브젝트가 의존하는 의존 오브젝트를 테스트용 오브젝트로 바꿔치기 할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;이렇게 테스트 환경을 만들어주기 위해 테스트 대상이 되는 오브젝트의 기능에만 충실하게 수행하면서 빠르게, 자주 테스트를 실행할 수 있도록 사용하는 오브젝트를 &lt;strong&gt;테스트 대역 (Test Double)&lt;/strong&gt; 이라고 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트 스텁 (Test Stub): 테스트 대상 오브젝트의 의존객체로서 존재하면서 테스트 동안에 코드가 정상적으로 수행할 수 있도록 돕는 것을 말한다.
    &lt;ul&gt;
      &lt;li&gt;일반적으로 테스트 스텁은 테스트 코드 내부에서 간접적으로 사용되며, 테스트할 때는 테스트 타겟 오브젝트가 의존하는 원래 오브젝트 대신에 테스트 스텁으로 변경하여 테스트한다.&lt;/li&gt;
      &lt;li&gt;테스트 스텁이 결과를 돌려주어야 할 때도 있는데 이런 경우, 미리 테스트 중에 필요한 정보를 리턴해주도록 설정할 수도 있다.&lt;/li&gt;
      &lt;li&gt;또한 메소드를 호출하면 예외를 발생시키게 할 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;목 오브젝트 (Mock Object): 테스트 대상이 되는 타겟 오브젝트와 의존 오브젝트 사이에서 일어나는 일을 검증할 수 있도록 설계된 오브젝트이다.
    &lt;ul&gt;
      &lt;li&gt;테스트 대상이 되는 오브젝트의 로직에 집중해서 충실히 검증할 수 있도록 도움을 준다.&lt;/li&gt;
      &lt;li&gt;스텁처럼 테스트 대상이 되는 오브젝트가 정상적으로 실행하는 것을 도와준다.&lt;/li&gt;
      &lt;li&gt;테스트 대상 오브젝트와 의존 오브젝트 사이에서 입출력이 어떻게 일어났는지, 얼마나 호출했는지 등에 대한 정보를 검증할 수 있다. 따라서 테스트 대상 오브젝트의 내부에서 일어나는 일이나 다른 오브젝트 사이에서 주고받는 정보까지 검증할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-04-toby_spring_05_service_abstraction/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/04/toby_spring_05_service_abstraction-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/04/toby_spring_05_service_abstraction-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 04: 예외</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;초난감-예외처리&quot;&gt;초난감 예외처리&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 예외를 잡고 아무것도 하지 않는다. 아무것도 하지 않고 별 문제가 없는 것처럼 넘어가버리는 것은 위험하다.
비정상적인 동작의 원인이 무엇인지 찾아내기가 매우 힘들다.&lt;/p&gt;

&lt;p&gt;다음 코드와 같이 로그만 남겨서도 안되며 예외를 처리해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;예외를 처리할 때 반드시 지켜야 하는 것은 모든 예외는 적절하게 복구하든지, 아니면 작업을 중단시키고 운영자 또는 개발자에게 분명히 통보되어야 한다. 또한 예외 처리할 방법이 없다면 잡지 말아야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;예외의-종류와-특징&quot;&gt;예외의 종류와 특징&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;

&lt;p&gt;java.lang.Error 클래스의 서브클래스들이다. 에러는 시스템에 뭔가 비정상적인 상황이 발생했을 경우에 사용된다. 자바 VM에서 발생하는 것으로, &lt;strong&gt;애플리케이션 코드에서 잡으면 안된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Error를 잡아봤자 대응 방법이 없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;exception과-checked-exception&quot;&gt;Exception과 Checked Exception&lt;/h3&gt;

&lt;p&gt;java.lang.Exception 클래스와 그 서브클래스들은 Error와는 다르게 애플리케이션 코드의 작업 수행 도중에 예외상황이 발생했을 경우에 사용된다.&lt;/p&gt;

&lt;p&gt;예외는 다시 Checked 와 Unchecked 로 구분되는데, Checked 예외는 Exception 클래스의 서브클래스이면서 RuntimeException을 상속받지 않는 예외들이고, 후자는 RuntimeException을 상속한 클래스들을 말한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-03-toby_spring_04_Exception/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checked 예외는 반드시 예외를 처리하는 코드를 함께 작성해야 한다. 사용할 메소드가 Checked 예외를 던진다면 이를 catch 문으로 잡든가, 아니면 다시 메소드 밖으로 던져야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Checked 예외는 어떤 식으로든 복구할 가능성이 있는 경우에 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;runtimeexception과-unchecked-exception&quot;&gt;RuntimeException과 Unchecked Exception&lt;/h3&gt;

&lt;p&gt;이 예외들은 명시적엔 예외처리를 강제하지 않는다. 주로 프로그램의 오류가 있을 때 발생하도록 의도된 것으로 피할 수는 있지만 개발자가 부주의해서 발생할 수 있는 경우에 발생하도록 만든 것이다. 미리 조건을 체크하도록 주의 깊게 코드 작성을 한다면 피할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 예외들은 예상하지 못했던 예외상황에서 발생하는 것이 아니기 때문에 예외처리를 강제하지 않는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;예외처리-방법&quot;&gt;예외처리 방법&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외-복구&quot;&gt;예외 복구&lt;/h3&gt;

&lt;p&gt;예외상황을 파악하고 문제를 해결하여 정상 상태로 돌려놓는 것이다. 예외를 복구했으면 애플리케이션에서는 정상적으로 설계된 흐름을 따라 진행되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외-회피&quot;&gt;예외 회피&lt;/h3&gt;

&lt;p&gt;예외처리를 담당하지 않고 자신을 호출한 쪽으로 위임하는 것이다. 회피한다는 것은 반드시 다른 곳에서 예외를 대신 처리할 수 있도록 던져야 한다. 예외를 회피하는 것은 의도가 분명하고 이유가 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외-전환&quot;&gt;예외 전환&lt;/h3&gt;

&lt;p&gt;예외를 던질 때 그대로 넘기는 것이 아닌 다른 예외로 전환해서 던지는 것이다. 의미를 추가적으로 부여하여 호출한 쪽에서 이 원인을 보고 적절히 처리를 할 수 있다.&lt;/p&gt;

&lt;p&gt;또한 예외 전환시 원래 발생했던 예외를 담아서 &lt;strong&gt;중첩 예외&lt;/strong&gt; 로 만드는 것이 좋다. 또한 처리하기가 불가능한 Checked 예외를 던질 때, RuntimeException으로 포장하여 던질 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션 로직 상에서 예외 조건이 발견되거나 의도적으로 던지는 예외가 있으면 checked 예외를 사용한다. 비즈니스적인 의미가 있는 예외는 적절한 대응이나 복구 작업이 필요하기 때문이다. 그러나 복구가 불가능한 예외는 RuntimeException 으로 포장해서 다른 계층의 메소드가 throws를 남발하지 않도록 해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 JdbcTemplate는 SQLException을 Unchecked 예외인 DataAccessException으로 전환하여 던진다. 일반적으로 SQLException은 복구방법이 없기 때문이다. 발생한 예외를 빨리 전달하는 것 외에는 할 수 있는게 없다. JdbcTemplate는 DataAccessException으로 포장할 뿐만 아니라 분석이 힘든 예외정보를 의미있고 일관성있는 예외로 전환해서 추상화해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jdbc의-한계&quot;&gt;JDBC의 한계&lt;/h2&gt;

&lt;p&gt;JDBC는 자바를 이용해 DB에 접근하는 방법을 추상화된 API 형태로 정의해놓고, 각 DB 업체가 JDBC 표준을 따라 만들어진 드라이버를 제공하게 해준다. 개발자들은 표준화된 API를 통해 DB 종류에 상관없이 일관된 방법으로 개발할 수 있다.&lt;/p&gt;

&lt;p&gt;그러나 DB를 자유롭게 변경해서 사용할 수 있는 유연한 코드를 보장해주지는 못한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;비표준-sql&quot;&gt;비표준 SQL&lt;/h3&gt;

&lt;p&gt;대부분의 DB는 표준을 따르지 않는 비표준 문법 및 기능을 제공한다. 성능 향상과 최적화를 위해 비표준 SQL 문장이 들어갈 때마가 많은데 이런 코드를 사용하는 DAO는 특정 DB에 대해 종속적인 코드가 되어버린다. 만약 다른 DB로 변경시 SQL을 적지 않게 수정해야 할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;호환성없는-sqlexception의-db-에러정보&quot;&gt;호환성없는 SQLException의 DB 에러정보&lt;/h3&gt;

&lt;p&gt;DB를 사용하다가 발생할 수 있는 예외는 다양한데, DB마다 에러의 종류와 원인도 제각각이라는 점이다.
또한 SQLException의 getErrorCode 메소드로 가져올 수 있는 DB 에러코드는 DB별로 다르다.&lt;/p&gt;

&lt;p&gt;호환성없는 에러코드와 표준을 잘 따르지 않는 상태코드를 가지는 SQLException 만으로 DB에 독립적인 유연한 코드를 작성하는 것은 불가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-dataaccessexception&quot;&gt;스프링의 DataAccessException&lt;/h2&gt;

&lt;p&gt;DB 에러코드는 DB에서 직접 제공하는 것이므로 어느 정도는 일관성이 유지된다. 각 DB별로 달라지는 에러코드를 일관성있는 예외로 전달받을 수 있도록 매핑해주는 것이 좋을 수 있다.&lt;/p&gt;

&lt;p&gt;스프링은 DataAccessException 뿐만 아니라 서브클래스로 세분화된 예외를 두고 있다. 스프링은 SQLException을 단지 Unchecked 예외를 DataAccessException 으로 단순히 포장하는 것이 아니라, DB 에러코드를 참조하여 DataAccessException 의 서브클래스 예외로 전환해준다.&lt;/p&gt;

&lt;p&gt;DataAccessException은 JPA나 ORM, myBatis와 같이 데이터 엑세스 기술은 달라도 의미가 같은 예외라면 일관된 예외가 발생하도록 만들어준다. 스프링은 자바의 주요 데이터 엑세스 기술에서 발생할 수 있는 대부분의 예외를 DataAccessException 및 그 서브클래스 예외로 추상화해주고 있는 것이다.&lt;/p&gt;

&lt;p&gt;같은 상황에서 데이터 엑세스 기술에 따라 달리지는 예외를 스프링은 기술의 종류에 상관없이 드라이버나 DB 메타정보를 참고하여 DB 종류를 확인하고 DB 별로 준비된 매핑정보를 참조하여 적절한 예외 클래스를 선택하여 던진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-03-toby_spring_04_Exception/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/3edfa61cabf6015d457c14f0e89ada508451690d&quot;&gt;DuplicatedKeyException&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/03/toby_spring_04_Exception-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/03/toby_spring_04_Exception-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 03: 템플릿</title>
        <description>&lt;h2 id=&quot;개방-폐쇄-원칙과-템플릿&quot;&gt;개방 폐쇄 원칙과 템플릿&lt;/h2&gt;

&lt;p&gt;코드에서 어떤 부분은 &lt;strong&gt;변경을 통해&lt;/strong&gt; 그 기능이 다양해지고 확장하려는 성질이 있고, 어떤 부분은 &lt;strong&gt;고정되어 있고&lt;/strong&gt; 변하지 않으려는 성질이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;변화의 특성이 다른 부분을 구분해주고 다른 목적과 다른 이유에 의해 다른 시점에 독립적으로 변경할 수 있도록 효율적인 구조를 만드는 것이 개방 폐쇄 원칙이다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;템플릿: 변경이 거의 일어나지 않으며 일정한 패턴으로 유지되는 특성을 가진 부분을 자주 변경되는 부분과 독립시켜 효과적으로 활용할 수 있도록 하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;다시-보는-초난감-dao&quot;&gt;다시 보는 초난감 DAO&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 밑의 두 라인에서 예외가 발생하면 실행이 중단된다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete from users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 리소스 반환, Connection 및 PreparedStatement 는 Pool 방식으로 관리된다. close 메소드는 사용한 리소스를 다시 Pool로 돌려주는 역할을 한다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 만약 실행 중간에 예외가 발생하면 리소스가 제대로 반환되지 않을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반적으로 서버에서는 제한된 개수의 DB Connection을 만들어서 재사용 가능한 풀로 관리한다. 따라서 사용하였으면 반드시 리소스를 반환해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드의 문제는 &lt;strong&gt;예외가 어느 시점에 나는가에 따라서&lt;/strong&gt; Connection과 PreparedStatement 중 어떤 것의 close 메소드를 호출할지가 달라진다는 것이다. try-catch 블록이 2중으로 중첩되어 나오고, 이 메소드 뿐만 아니라 다른 메소드에서도 DB 관련 작업을 한다면 또 반복적으로 블록으로 감싸주어야 한다.&lt;/p&gt;

&lt;p&gt;이 문제의 핵심은 변하지 않는, 즉 많은 곳에서 중복되는 코드 (여기서는 try-catch 블록 및 예외처리 부분) 과 로직에 따라 변하는 코드를 분리하는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/22c3f9b49041259e8058957802027ce6db09677b&quot;&gt;메소드 추출&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;보통 메소드 추출시에는 분리시킨 메소드를 다른 곳에서도 사용하려고 하는데, 이것은 분리시키고 남은 메소드가 재사용이 필요한 부분으로 반대가 되었다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/fc36e6fbd73c9f3ff7a0090018ebe7004c5ccf4a&quot;&gt;템플릿 메소드 패턴 적용&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;DAO 로직마다 상속하여 새로운 클래스를 만들어야 한다. 또 확장구조가 이미 클래스를 설계하는 시점에서 고정되어 버린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1eb246c2597333eed0ad08e6c08ad2d3877dc2b6&quot;&gt;전략 패턴 적용&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;전략 패턴은 오브젝트를 아예 분리하고 클래스 레벨에서는 인터페이스를 통해서만 의존하도록 한다.&lt;/li&gt;
      &lt;li&gt;변하지 않는 부분인 컨텍스트가 어떤 전략을 사용할 것인가는 컨텍스트를 사용하는 클라이언트가 결정하여 DI 할 수 있도록 한다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/67b27105cdf9aea2b93ba91ec7643d0621763cf5&quot;&gt;Apply strategy pattern(add)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;DAO 로직마다 매번 StatementStrategy 구현 클래스를 만들어야하고, AddStatement와 같이 필요한 부가적인 정보가 필요할 경우 이 정보를 어딘가에 저장해두어야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;전략-패턴-구조-개선&quot;&gt;전략 패턴 구조 개선&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;익명-클래스-사용&quot;&gt;익명 클래스 사용&lt;/h3&gt;

&lt;p&gt;StatementStrategy 전략 클래스를 매번 독립된 클래스로 만들지 말고, 익명 클래스로 만든다.
이 방식의 장점은 내부 클래스이므로 자신이 선언된 곳의 정보, 즉 메소드의 변수에 접근할 수 있다는 것이다. 따라서 부가적인 정보가 필요할 경우에 대비해 생성자나 따로 주입을 해줄 필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/ae4f7bf38da1fa17d59ba7cb5ddbd0eae4625ca7&quot;&gt;Use anonymous inner class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;컨텍스트와-di&quot;&gt;컨텍스트와 DI&lt;/h3&gt;

&lt;p&gt;전략 패턴에서 만든 &lt;strong&gt;jdbcContextWithStatementStrategy&lt;/strong&gt; 메소드는 컨텍스트이다. 이 메소드는 JDBC의 일반적인 작업 흐름을 가지고 있어 다른 DAO에서도 사용할 수 있으므로 UserDao 클래스 밖으로 독립시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/370420ce238fb7a48e4dbcda7a8ee433c364342e&quot;&gt;Use JdbcContext&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-02-toby_spring_03_template/00.png&quot; alt=&quot;00.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-02-toby_spring_03_template/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JdbcContext는 싱글톤 빈으로서, DataSource 오브젝트를 주입받도록 되어 있다. 다른 빈을 주입받으므로 스프링 빈으로 등록되어야 한다. 인터페이스를 따로 두지 않음으로써 UserDao와 JdbcContext는 강하게 결합되어 있다. 그러나 JdbcContext 는 다른 구현으로 대체할 일이 없으므로 강력한 결합을 가진 관계를 허용하면서 스프링 빈으르 등록하여 DI 되도록 만들어도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;의존관계 주입이라는 개념을 충실히 따르자면, 인터페이스를 사이에 두어 클래스 레벨에서는 의존관계가 고정되지 않게하고, 런타임 시에 의존할 오브젝트의 관계를 다이내믹하게 주입해주는 것이 맞다. 그러나 스프링의 DI는 객체의 생성과 관계설정에 대한 권한을 외부로 위임한다는 IoC의 개념을 포괄한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;템플릿과-콜백&quot;&gt;템플릿과 콜백&lt;/h2&gt;

&lt;p&gt;JdbcContext와 익명 클래스와 같이 일정한 패턴을 갖는 작업 흐름이 있고, 그 중 일부분만 자주 바꿔서 사용하는 방식을 스프링에서는 &lt;strong&gt;템플릿/콜백 패턴&lt;/strong&gt; 이라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;템플릿: 전랙 패턴의 컨텍스트, 고정된 작업 흐름을 가진 코드가 있다.&lt;/li&gt;
  &lt;li&gt;콜백: 익명 내부 클래스로 만들어지는 오브젝트, 실행되는 것을 목적으로 다른 오브젝트 메소드에 전달되는 오브젝트이다. 템플릿안에서 호출되는 것을 목적으로 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;템플릿/콜백 패턴의 콜백은 보통 단일 메소드 인터페이스를 사용한다. 템플릿의 작업 흐름 중 특정 기능을 위해 한 번 호출되는 경우가 많기 때문이다. 만약 여러 종류의 전략을 사용한다면 하나 이상의 콜백 오브젝트를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;콜백 인터페이스의 메소드에는 보통 파라미터가 있으며 템플릿의 작업 흐름 중에 만들어지는 컨텍스트의 정보를 받을 때 사용된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;템플릿콜백의-작업-흐름&quot;&gt;템플릿/콜백의 작업 흐름&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-02-toby_spring_03_template/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트의 역할은 템플릿 안에서 실행될 로직을 담은 콜백 오브젝트를 만들고, 콜백이 참조할 정보를 제공하는 것이다.&lt;/li&gt;
  &lt;li&gt;템플릿은 정해진 작업 흐름을 따라 작업을 진행하다가 콜백 오브젝트의 메소드를 호출한다.&lt;/li&gt;
  &lt;li&gt;콜백은 템플릿이 넘겨준 파라미터와 함께 작업을 수행하고 결과를 템플릿으로 리턴한다.&lt;/li&gt;
  &lt;li&gt;템플릿은 작업을 마저 수행한다. 경우에 따라 클라이언트로 결과를 리턴해주기도 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;템플릿/콜백 에서는 미리 인스턴스 변수에 사용할 오브젝트를 저장해두는 일반 DI와는 다르게, 메소드 단위로 사용할 오브젝트를 새롭게 전달받는 방식이다. 또한 콜백 오브젝트는 내부 클래스로서 자신을 생성한 클라이언트 메소드내의 변수 등의 정보를 참조할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;콜백의-분리와-재활용&quot;&gt;콜백의 분리와 재활용&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdbcContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;workWithStatementStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatementStrategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makePreparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete from users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드에서 익명 클래스를 만드는 부분과 SQL 문장을 분리시킬 수 있다. 각 DAO의 로직마다 익명 클래스를 만드는 것은 같지만 SQL 문장은 다르다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/670cc5dfb2ccc7fee1b784e0c1b841c9481b674c&quot;&gt;Sql Query 및 익명 클래스 생성 분리&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-09-02-toby_spring_03_template/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;고정된 작업 흐름을 가지고 있으면서 여기저기서 반복되는 코드가 있다면 중복되는 코드를 분리할 방법을 생각하는 습관을 가져야 한다. 중복된 코드를 메소드로 추출하거나 인터페이스를 통한 DI로 전략 패턴을 적용해볼 수 있다. 또한 바뀌는 부분이 여러 종류가 만들어질 수 있다면 템플릿/콜백 패턴을 적용하는 것도 고려해볼 수 있을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/2e6c24bdb573f86592348516e9fe9b3d546b5cde&quot;&gt;Calculator with Template_Callback&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-jdbctemplate&quot;&gt;스프링의 JdbcTemplate&lt;/h2&gt;

&lt;p&gt;스프링에서는 JDBC를 이용하는 DAO에서 사용할 수 있도록 준비된 다양한 템플릿과 콜백을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/ab1e0ff81b49b56effe4ed368f1050b961648e2d&quot;&gt;Use JdbcTemplate&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/09/02/toby_spring_03_template-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/09/02/toby_spring_03_template-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 02: 테스트</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;애플리케이션은 계속 변하고 복잡해져 간다. 그 변화에 대응하는 첫 번째 전략이 확장과 변화를 고려한 객체지향적 설계와 그 것을 효과적으로 담아낼 수 있는 IoC / DI 같은 기술이라면, 두 번째 전략은 만들어진 코드를 확신할 수 있게 해주고, 변화에 유연하게 대처할 수 있는 자신감을 주는 테스트 기술이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트는 스프링을 학습하는 데에 있어 가장 효과적인 방법 중의 하나이다. 테스트 작성은 다양한 기술을 활용하는 방법을 이해하고 검증할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;userdao-테스트-다시-보기&quot;&gt;UserDao 테스트 다시 보기&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;웹을-통한-dao-테스트-방법의-문제점&quot;&gt;웹을 통한 DAO 테스트 방법의 문제점&lt;/h3&gt;

&lt;p&gt;웹 프로그램에서 사용하는 DAO를 테스트할 떄, 서비스 계층이나 MVC 프레젠테이션 계층까지 모든 입출력 기능을 포함한 코드와 같이 테스트를 하면, 모든 레이어의 기능을 다 구현한 뒤에야 테스트를 할 수 있고 에러 발생시 어디에서 발생한 것인지도 분간하기가 어렵다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;작은-단위의-테스트&quot;&gt;작은 단위의 테스트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;테스트하고자 하는 대상이 명확하다면, 그 대상에만 집중해서 테스트하는 것이 바람직한다.
    &lt;ul&gt;
      &lt;li&gt;한꺼번에 많은 것을 몰아서 하면 테스트 수행과정도 복잡해지고, 정확한 오류의 원인을 찾기도 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트는 가능하면 작은 단위로 쪼개서 집중해서 할 수 있어야 한다.
    &lt;ul&gt;
      &lt;li&gt;테스트 메소드는 한 번에 한 가지 검증 목적에만 충실한 것이 좋다.&lt;/li&gt;
      &lt;li&gt;테스트는 실행 순서에 상관없이 독립적으로 항상 동일한 결과가 나와야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;작은 단위의 코드에 대해 테스트를 수행하는 것을 &lt;strong&gt;단위 테스트 (Unit Test)&lt;/strong&gt; 라고 한다. 여기서 단위란 충분히 하나의 관심에 집중해서 효율적으로 테스트할 만한 범위이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;통제할 수 없는 외부의 리소스에 의존하는 테스트는 단위 테스트가 아니다. 항상 일관성있는 결과가 보장되어야 하며, 외부 환경에 영향을 받아서는 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;단위 테스트를 하는 이유는 개발자가 설계하고 작성한 코드가 원래 의도한 대로 동작하는지를 개발자 스스로 빨리 확인하기 위해서이다.
    &lt;ul&gt;
      &lt;li&gt;개발 과정에서 또는 유지보수를 하면서 기존 애플리케이션 코드에 수정을 할 때 마음의 평안을 얻고, 자신이 만지는 코드에 대해 항상 자신감을 가질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;자동수행-테스트-코드&quot;&gt;자동수행 테스트 코드&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;테스트는 자동으로 수행되도록 코드로 만들어지는 것이 중요하다.
    &lt;ul&gt;
      &lt;li&gt;자동으로 수행되는 테스트의 장점은 자주 반복할 수 있으며, 언제든지 코드를 수정하고 테스트를 해볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/b27d965ba5de007e16af759c2d5111308f9892c9&quot;&gt;[ch02] Use Junit framework for UserDaoTest.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1ec2601bd7963237983777b7510cd1f2c5d9fbe6&quot;&gt;[ch02] Update UserDaoTest.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/5c05fb5feac93c0c46f9c32db62bbd09f9a1b049&quot;&gt;[ch02] Refactored UserDaoTest.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;테스트-주도-개발-tdd&quot;&gt;테스트 주도 개발 (TDD)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;만들고자 하는 기능의 내용을 먼저 담고 있으면서, 만들어진 코드를 검증도 해줄 수 있도록 테스트 코드를 먼저 만들고, 테스트를 성공하게 해주는 코드를 작성하는 방식의 개발 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TDD의 장점은 코드를 만들어 테스트를 실행하는 사이의 간격이 매우 짧아 코드의 오류를 매우 빠르게 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링-테스트-적용&quot;&gt;스프링 테스트 적용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스프링은 Junit을 이용하는 테스트 컨텍스트 프레임워크를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;간단한 annotation 설정만으로 테스트에서 필요로 하는 애플리케이션 컨텍스트를 만들어 모든 테스트가 공유하게 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// @RunWith 는 Junit 프레임워크 테스트 실행 방법을 확장할 때 사용한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// SpringJUnit4ClassRunner 라는 확장 클래스를 지정하면 테스트가 사용할 애플리케이션 컨텍스트를 만들고 관리하는 작업을 진행해준다.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 자동으로 만들 애플리케이션 컨텍스트의 설정 파일 위치를 지정한다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 스프링 테스트 컨텍스트에 의해 자동으로 값이 주입된다.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 스프링의 Junit 확장 기능은 테스트가 실행되기 전 애플리케이션 컨텍스트를 한 번 만들어두고, 테스트 오브젝트가 만들어질 때마다 주입시켜준다. 두 개 이상의 테스트 오브젝트가 있을 때에도 마찬가지이다.&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;테스트 클래스마다 다른 설정 파일을 사용하도록 만들어도 되고, 몇 개의 테스트에서만 다른 설정 파일을 사용할 수도 있다. 스프링은 설정파일의 종류만큼 애플리케이션 컨텍스트를 만들고, 같은 설정 파일을 지정한 테스트 오브젝트끼리 이를 공유하게 해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 애플리케이션 컨텍스트는 자기 자신도 빈으로 등록한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/558884d7b753b31b33499664e54da98d24f1108d&quot;&gt;[ch02] Use spring test.
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@DirtiesContext&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;다음과 같이 애플리케이션 컨텍스트가 관계 설정한 빈들의 런타임 의존관계를 변경하면 &lt;strong&gt;@DirtiesContext&lt;/strong&gt; annotation을 통해 스프링에게 애플리케이션 컨텍스트가 변한다는 것을 알려줘야 한다. 이 annotation이 붙은 테스트 클래스에는 애플리케이션 컨텍스트를 공유하지 않고 매번 새로운 애플리케이션 컨텍스트를 만든다. &lt;strong&gt;다른 테스트가 변경된 애플리케이션 컨텍스트에 의해 영향을 주지 않게 하기 위해서이다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DirtiesContext&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/07/29/toby_spring_02_test-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/07/29/toby_spring_02_test-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Toby's Spring Chap 01: 오브젝트와 의존관계</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링이란-무엇인가&quot;&gt;스프링이란 무엇인가?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바 엔터프라이즈 애플리케이션 개발에 사용되는 애플리케이션 프레임워크&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션 프레임워크는 애플리케이션 개발을 빠르고 효율적으로 진행할 수 있도록 틀과 공통 프로그래밍 모델, 기술 API를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션의 기본틀: 스프링 컨테이너
    &lt;ul&gt;
      &lt;li&gt;스프링은 &lt;strong&gt;스프링 컨테이너&lt;/strong&gt; / &lt;strong&gt;애플리케이션 컨텍스트&lt;/strong&gt; 라는 스프링 런타임 엔진을 제공&lt;/li&gt;
      &lt;li&gt;스프링 컨테이너: 설정 정보를 참고, 애플리케이션을 구성하는 오브젝트 생성 및 관리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;공통 프로그래밍 모델: IoC/DI, 서비스 추상화, AOP
    &lt;ul&gt;
      &lt;li&gt;IoC/DI: 오브젝트의 생명주기와 의존관계에 대한 프로그래밍 모델
        &lt;ul&gt;
          &lt;li&gt;스프링은 이 유연하고 확장성이 뛰어난 코드를 만들 수 있도록 이 모델을 프레임워크의 근간으로 삼고 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서비스 추상화: 환경이나 특정 기술에 종속성이 없이 이식성이 뛰어난 유연한 애플리케이션 개발을 가능케 함
        &lt;ul&gt;
          &lt;li&gt;스프링에서는 유연한 추상 계층을 두고 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;AOP: 애플리케이션 코드에 산재해서 나타나는 부가적인 기능을 독립적으로 모듈화하는 프로그래밍 모델
        &lt;ul&gt;
          &lt;li&gt;스프링은 AOP를 사용하여 깔끔한 코드를 유지할 수 있도록 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기술 API
    &lt;ul&gt;
      &lt;li&gt;스프링은 엔터프라이즈 애플리케이션을 바로 활용할 수 있도록 기술 API를 제공&lt;/li&gt;
      &lt;li&gt;스프링의 프로그래밍 모델에 따라 구현되어 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스는 스프링 컨테이너 위에서 오브젝트로 만들어져 동작하고, 코드는 스프링의 프로그래밍 모델에 따라 작성하며 기술을 사용할 때 스프링이 제공하는 기술 API를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;프레임워크: 애플리케이션을 구성하는 오브젝트가 생성되고 동작하는 방식에 대한 틀을 제공 및 어떻게 작성되어야 하는지에 대한 기준(프로그래밍 모델)을 제시&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-성공-요인&quot;&gt;스프링의 성공 요인&lt;/h2&gt;

&lt;p&gt;스프링은 견고하고 건전한 자바와 엔터프라이즈 개발의 핵심 가치에 충실히하여 발전하게 되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순함
    &lt;ul&gt;
      &lt;li&gt;복잡한 기술인 EJB 대비, 단순한 객체지향적인 개발 모델인 &lt;strong&gt;POJO 프로그래밍&lt;/strong&gt; 모델을 지향한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;유연성
    &lt;ul&gt;
      &lt;li&gt;스프링은 유연성과 확장성이 뛰어나며, 다른 많은 프레임워크와 편리하게 접목돼서 사용가능하다.&lt;/li&gt;
      &lt;li&gt;“항상 프레임워크 기반의 접근 방법을 사용”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링-스터디&quot;&gt;스프링 스터디&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스프링의 핵심 가치와 원리에 대한 이해
    &lt;ul&gt;
      &lt;li&gt;스프링이 중요시하는 핵심 가치와 기술, 중요한 프로그래밍 모델&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스프링 기술에 대한 지식과 선택 기준 정립
    &lt;ul&gt;
      &lt;li&gt;스프링을 사용하면서 다양한 선택의 문제를 각 기술영역 별로 효과적으로 다루는 법&lt;/li&gt;
      &lt;li&gt;스프링이 제공하는 기술과 접근 방법을 알고, 선택의 기준을 마련해서 상황에 맞도록 최선의 기술과 접근 방법을 선택할 수 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스프링의 적용과 확장
    &lt;ul&gt;
      &lt;li&gt;스프링의 다양한 기술을 실제 애플리케이션 개발에 어떤 식으로 적용해야 되는지 공부해야 한다.&lt;/li&gt;
      &lt;li&gt;스프링이 제공하는 기능 말고도 그것을 확장하거나 추상화해서 사용하는 방법을 알아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;오브젝트와-의존관계&quot;&gt;오브젝트와 의존관계&lt;/h1&gt;

&lt;p&gt;스프링은 객제지향 프로그래밍 가치를 중요시하여, 가장 많이 관심을 두는 대상은 &lt;strong&gt;“오브젝트”&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션에서 오브젝트가 생성되고 다른 오브젝트와 관계를 맺고, 사용되고, 소멸되기까지의 전 과정을 진지하게 생각해야 한다.&lt;/li&gt;
  &lt;li&gt;오브젝트가 어떻게 설계되어야 하는지, 어떤 단위로 만들어지며 어떤 과정을 통해 생성되고 사용할 수 있는지 살펴봐야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 오브젝트를 어떻게 효과적으로 설계 및 구현하고, 사용하고, 이를 개선해나갈 것인가에 대한 기준을 제시한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;자바빈: 다음의 두 가지 관례를 따라 만들어진 오브젝트를 가리킨다.
    &lt;ul&gt;
      &lt;li&gt;디폴트 생성자: 파라미터가 없는 디폴트 생성자를 가져야 한다.
        &lt;ul&gt;
          &lt;li&gt;프레임워크에서 리플렉션을 통해 오브젝트를 생성하기 위해 필요하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;프로퍼티: 자바빈이 노출하는 속성에 접근할 수 있도록 Setter 및 Getter 를 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초난감 DAO
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/59386df3331b4ea04903c4b585a75cd626211acf&quot;&gt;[ch01] Implemented helplessness DAO.
&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;관심사의-분리&quot;&gt;관심사의 분리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;소프트웨어 개발에서 끝이란 개념은 없다.
    &lt;ul&gt;
      &lt;li&gt;오브젝트에 대한 설계와 이를 구현한 코드는 추후에도 요구사항에 따라 끊임없이 변한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체 설계시 염두해두어야 할 사항
    &lt;ul&gt;
      &lt;li&gt;미래의 변화에 어떻게 대비할 것인가?&lt;/li&gt;
      &lt;li&gt;변화의 폭을 최소화해야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;분리와 확장을 고려한 설계
    &lt;ul&gt;
      &lt;li&gt;분리
        &lt;ul&gt;
          &lt;li&gt;모든 변경과 발전은 한 번에 한 가지 관심사항에 집중해서 일어난다.&lt;/li&gt;
          &lt;li&gt;코드 상에서 한 가지 관심이 한 군데에 집중되게 구현해야 한다.&lt;/li&gt;
          &lt;li&gt;관심사가 같은 것끼리 모으고, 다른 것은 분리해주어야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UserDao의 관심사항
    &lt;ul&gt;
      &lt;li&gt;DB와의 연결을 위한 connection 가져오기
        &lt;ul&gt;
          &lt;li&gt;add / get 메소드에 중복되어 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;사용자 등록을 위해 SQL 문장 준비 및 실행&lt;/li&gt;
      &lt;li&gt;작업이 끝난 후 사용한 리소스 해제&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;중복-코드의-메소드-추출&quot;&gt;중복 코드의 메소드 추출&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Connection 을 가져오는 중복된 코드를 분리. 중복된 DB 연결 코드를 하나의 메소드로 묶는다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/30c1d9b6c6bfa9f0dfc5e2a702e34925f46b0e73&quot;&gt;[ch01] Separated the routine of getting DB connection
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;리팩토링: 기존의 코드를 외부의 동작방식에는 변화없이, 내부 구조를 변경해서 재구성하는 작업 또는 기술. 코드 내부의 설계가 개선되어 이해하기가 쉽고 변화에 효율적으로 대응할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;db-커넥션-만들기의-독립&quot;&gt;DB 커넥션 만들기의 독립&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;DB 커넥션을 가져오는데에 있어서 종종 변경될 가능성이 있음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상속을 통한 확장&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;상속을 통해 관심사를 서브클래스로 분리
        &lt;ul&gt;
          &lt;li&gt;DB 작업에 대한 관심은 슈퍼클래스 / DB connection 작업에 대한 관심은 서브클래스로 분리&lt;/li&gt;
          &lt;li&gt;서브클래스를 통해 오브젝트 생성 방법을 위임 (팩토리 메소드 패턴)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;변화의 성격이 다른 것을 분리하여 각 필요한 시점에 독립적으로 변경할 수 있도록 함&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DB connection 구현 코드를 제거하고, &lt;strong&gt;getConnection&lt;/strong&gt; 메소드를 추상 메소드로 정의&lt;/li&gt;
      &lt;li&gt;고객사에서는 이 추상 메소드를 구현하도록 하여 입맛에 맞게 &lt;strong&gt;getConnection&lt;/strong&gt; 메소드를 정의&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/33317774d234d53576a293429ed07180e58f1147&quot;&gt;[ch01] Separated getConnection method into subclass
&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;템플릿 메소드 패턴: 슈퍼클래스에 기본적인 로직의 흐름을 구현하고, 기능의 일부를 추상 메소드나 오버라이딩이 가능한 메소드로 만든 후, 서브클래스에서 필요에 맞게 구현하는 방법. 변하지 않는 기능은 슈퍼클래스에 구현하고 자주 변경되며 확장할 기능은 서브클래스에서 만들도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;templateMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 코드의 기본 로직을 담고 있는 &quot;템플릿 메소드&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 기본 알고리즘 코드&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hookMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;      
    &lt;span class=&quot;n&quot;&gt;abstractMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 디폴트 기능이 정의되어 있거나 서브클래스에서 선택적으로 오버라이드 가능한 &quot;훅 메소드&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstractMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 서브클래스에서 반드시 구현해야하는 추상 메소드&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abstractMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;팩토리 메소드 패턴: 서브 클래스에서 구체적인 오브젝트 생성 방법을 위임하는 방식. 슈퍼클래스 코드에서 서브클래스에서 구현하는 메소드를 호출하여 필요한 타입의 오브젝트를 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;디자인 패턴: 특정 상황에서 자주 발생하는 문제를 해결하기 위한, 재사용 가능한 솔루션. 패턴의 핵심이 담긴 목적 또는 의도를 잘 알고 적용할 상황 / 해결해야할 문제 / 각 요소의 역할을 잘 알아야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;상속을 통한 확장의 한계점
    &lt;ul&gt;
      &lt;li&gt;다중 상속의 문제점&lt;/li&gt;
      &lt;li&gt;다른 목적으로 UserDao에 상속을 적용하기 힘듬&lt;/li&gt;
      &lt;li&gt;슈퍼클래스에 변경이 일어날 경우, 서브클래스도 함께 수정해야될 수도 있음&lt;/li&gt;
      &lt;li&gt;다른 DAO에 대해서 적용할 수가 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dao의-확장&quot;&gt;DAO의 확장&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;변화의 성격
    &lt;ul&gt;
      &lt;li&gt;모든 오브젝트가 다 동일한 방식으로 변하는 것이 아니다.&lt;/li&gt;
      &lt;li&gt;변화의 성격이 다르다는 것은 변화의 이유와 시기, 주기 등이 다르다.
        &lt;ul&gt;
          &lt;li&gt;변화의 성격이 다른 것을 분리하는 것이 “관심사의 분리”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스의 분리
    &lt;ul&gt;
      &lt;li&gt;DB 커넥션과 관련된 부분을 상속을 통한 서브클래스에서가 아닌, 별도의 클래스에서 구현 후 UserDao가 이를 사용하도록 함&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/feac2bdabfd0a25131370d1e4897630a8d2c64ab&quot;&gt;[ch01] Separated the routine of getting DB connection into other class
&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클래스 분리의 문제점
    &lt;ul&gt;
      &lt;li&gt;UserDao 코드가 &lt;strong&gt;SimpleConnectionMaker&lt;/strong&gt; 특정 클래스에 종속
        &lt;ul&gt;
          &lt;li&gt;DB 커넥션 생성 기능을 변경할 방법이 없음&lt;/li&gt;
          &lt;li&gt;UserDao가 바뀔 수 있는 정보인 DB 커넥션 생성해주는 클래스에 대해 너무 많이 알고 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;인터페이스를 통한 관심사의 분리
    &lt;ul&gt;
      &lt;li&gt;두 개의 클래스가 서로 종속적으로 긴밀하게 연결되지 않도록 &lt;strong&gt;인터페이스&lt;/strong&gt; 를 통해 느슨하게 해준다.&lt;/li&gt;
      &lt;li&gt;인터페이스를 사용하면 구현 클래스가 무엇인지는 관심가질 필요가 없다.
        &lt;ul&gt;
          &lt;li&gt;사용하는 쪽에서는 인터페이스를 통해 사용하기만 하면 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/dfb01136bf2482878db89eea0774ac79d7b5818d&quot;&gt;[ch01] Use interface to loose relationship between UserDao and SimpleConnectionMaker &lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구현 코드의 문제점
    &lt;ul&gt;
      &lt;li&gt;아직도 UserDao 생성자에서는 특정 클래스 생성자를 호출함으로써 의존성이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 문제는 이 부분&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeNewConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;관계설정 책임의 분리
    &lt;ul&gt;
      &lt;li&gt;UserDao에는 아직 분리되지 않은, &lt;strong&gt;“관계설정”&lt;/strong&gt; 에 대한 관심이 분리되어 있지 않다.
        &lt;ul&gt;
          &lt;li&gt;UserDao의 모든 코드는 ConnectionMaker 인터페이스 외에는 어떤 클래스와도 관계를 가져서 안되게 해야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;UserDao를 사용하는 쪽에서 &lt;strong&gt;“관계설정”&lt;/strong&gt; 에 대한 책임을 부여한다.
        &lt;ul&gt;
          &lt;li&gt;UserDao가 어떤 ConnectionMaker 인터페이스의 구현 객체를 사용할지 결정하여 &lt;strong&gt;다이나믹한 관계&lt;/strong&gt; 가 설정되도록 한다.&lt;/li&gt;
          &lt;li&gt;외부에서 만든 오브젝트를 전달받기 위해, 메소드 파라미터나 생성자 파라미터를 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;의존관계
    &lt;ul&gt;
      &lt;li&gt;오브젝트 사이에서 런타임시에 맺어지는 관계&lt;/li&gt;
      &lt;li&gt;런타임 오브젝트 관계를 생성해주는 것은 UserDao를 사용하는 “클라이언트”의 책임이다.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/42d47c29deb52b5ded7bc651ca11db17a6891195&quot;&gt;[ch01] Use dependency injection for ConnectionMaker and UserDao &lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ConnectionMaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;의존관계의 장점
    &lt;ul&gt;
      &lt;li&gt;ConnectionMaker 인터페이스를 구현하기만 했다면, 다른 DAO에 대해서도 유연하게 적용할 수 있다.&lt;/li&gt;
      &lt;li&gt;DB 접속 방법에 대한 관심과 DB를 사용하는 관심을 서로 분리했기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;원칙과-패턴&quot;&gt;원칙과 패턴&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;개방-폐쇄-원칙&quot;&gt;개방 폐쇄 원칙&lt;/h3&gt;

&lt;p&gt;클래스나 모듈은 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UserDao는 “DB 연결 방법” 이라는 기능에 대해서는 열려 있고, UserDao의 핵심 코드는 변화에 영향을 받지 않고 닫혀 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;객체 지향 설계 원칙

- 객체지향의 특징을 잘 살릴 수 있는 설계의 특징

원칙: 예외는 있을 수는 있지만, 대부분의 상황에 잘 들어맞는 가이드라인. 좀 더 일반적인 상황에서 적용 가능한 설계 기준이라 할 수 있다.

SOLID

* SRP(The Single Responsibility Principle): 단일 책임 원칙
* OCP(The Open Closed Principle): 개방 폐쇄 원칙
* LSP(The Liskov Substitution Principle): 리스코프 치환 원칙
* ISP(The Interface Segregation Principle): 인터페이스 분리 원칙
* DIP(The Dependency Inversion Principle): 의존관계 역전 원칙

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;높은-응집도와-낮은-결합도&quot;&gt;높은 응집도와 낮은 결합도&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;응집도가 높다
    &lt;ul&gt;
      &lt;li&gt;하나의 모듈, 클래스가 하나의 책임 또는 관심사에만 집중되어 있다.&lt;/li&gt;
      &lt;li&gt;불필요하거나 직접 관련이 없는 외부의 관심이나 책임이 얽혀 있지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;높은 응집도
    &lt;ul&gt;
      &lt;li&gt;변화가 발생시, 해당 모듈에서 변하는 부분이 &lt;strong&gt;함께&lt;/strong&gt; 바뀐다.&lt;/li&gt;
      &lt;li&gt;UserDao의 경우 DB 연결 기능이 변경되더라도 코드의 변경이 없고, ConnectionMaker 에 대해서만 신경쓰면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;낮은 결합도
    &lt;ul&gt;
      &lt;li&gt;책임과 관심사가 다른 오브젝트, 모듈 사이의 관계는 &lt;strong&gt;느슨하게&lt;/strong&gt; 연결된 형태를 유지한다.&lt;/li&gt;
      &lt;li&gt;느슨한 연결: 관계를 유지하는데 꼭 필요한, 최소한의 간접적인 형태로 제공&lt;/li&gt;
      &lt;li&gt;결합도가 낮으면 변화에 쉽게 대응할 수 있고 확장에도 편리하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;결합도: 하나의 오브젝트에서 변경이 일어나면 관계를 맺고 있는 다른 오브젝트에게 변화를 요구하는 정도. 당연히 결합도가 낮을수록 변화에 잘 대응하는 코드이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;전략-패턴&quot;&gt;전략 패턴&lt;/h3&gt;

&lt;p&gt;자신의 컨텍스트에서 필요에 따라 &lt;strong&gt;변경이 필요한&lt;/strong&gt; 알고리즘 / 루틴을 인터페이스를 통해 외부로 분리하고, 이 인터페이스를 통한 느슨한 관계를 이용하여 필요에 따라 바꿔서 사용하는 디자인 패턴이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UserDao의 경우 &lt;strong&gt;DB 연결&lt;/strong&gt; 이라는 기능을 필요에 따라 인터페이스를 통해 바꾸면서 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링은 이러한 객체지향적 설계 원칙과 디자인 패턴에 나타난 장점을 개발자들이 활용할 수 있도록 해주는 프레임워크이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;제어의-역전-ioc&quot;&gt;제어의 역전 (IoC)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;오브젝트-팩토리&quot;&gt;오브젝트 팩토리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;팩토리, factory: 객체 생성 방법을 결정하고 만들어진 오브젝트를 리턴
    &lt;ul&gt;
      &lt;li&gt;오브젝트 생성 및 런타임 의존관계 설정을 팩토리로 위임
        &lt;ul&gt;
          &lt;li&gt;UserDao 및 ConnectionMaker는 각기 관심사항에 대한 비즈니스 로직을 담당&lt;/li&gt;
          &lt;li&gt;DaoFactory는 오브젝트들을 구성하고 관계를 정의하는 책임&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/c7d6fa7ff56382b893a3b1d02050891d192e5cf8&quot;&gt;[ch01] Separated the routine for creating UserDao to DaoFactory. &lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;팩토리는 애플리케이션을 구성하는 컴포넌트들의 구조와 관계를 정의한 설계도 같은 역할을 수행한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;애플리케이션의 컴포넌트 역할&lt;/strong&gt; 을 하는 오브젝트와 &lt;strong&gt;애플리케이션의 구조를 결정&lt;/strong&gt; 하는 오브젝트를 분리하느데 의미가 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;제어의 역전: 프로그램의 제어 흐름 구조가 뒤바뀜
    &lt;ul&gt;
      &lt;li&gt;일반적인 프로그램: 프로그램이 시작되는 지점에서 사용할 오브젝트를 직접 결정, 생성, 메소드 호출하고 결정한다.&lt;/li&gt;
      &lt;li&gt;제어의 역전은 이러한 흐름을 뒤집은 것이다.
        &lt;ul&gt;
          &lt;li&gt;사용할 오브젝트를 스스로 선택하지 않으며, 생성하지도 않는다. 모든 제어 권한을 다른 대상에게 위임한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;프레임워크도 제어의 역전 개념이 적용된 기술이다. 프레임워크는 단지 만들어져있거나 확장해서 사용될 수 있도록 준비된 집합이 아니다. 애플리케이션 코드가 프레임워크에 의해 사용되는, 제어의 역전의 개념이 들어가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;DaoFactory 가 컴포넌트 생성 및 관리의 책임을 지고, 다른 컴포넌트들은 수동적으로 동작하므로 제어의 역전이 적용된 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;제어의 역전에서는 프레임워크 또는 컨테이너와 같이 애플리케이션 컴포넌트의 생성과 관계 설정 등을 관리할 존재가 필요하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;스프링의-ioc&quot;&gt;스프링의 IoC&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애플리케이션-컨텍스트와-설정정보&quot;&gt;애플리케이션 컨텍스트와 설정정보&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;빈 (Bean): 스프링이 제어권을 가지고, 직접 생성하고 관계를 부여하는 오브젝트
    &lt;ul&gt;
      &lt;li&gt;스프링 빈: 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된 오브젝트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;빈 팩토리, 애플리케이션 컨텍스트: 스프링에서 빈의 생성과 제어를 담당하는 IoC 오브젝트&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;애플리케이션 컨텍스트는 별도의 정보를 참고하여 빈의 생성 및 관계 설정과 같은 제어 작업을 총괄&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;daofactory를-사용하는-애플리케이션-컨텍스트&quot;&gt;DaoFactory를 사용하는 애플리케이션 컨텍스트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DaoFactory를 자바 코드로 만들어진 애플리케이션 컨텍스트의 설정 정보로 활용가능
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;@Bean&lt;/strong&gt; / &lt;strong&gt;@Configuration&lt;/strong&gt; annotation 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Configuration&lt;/strong&gt; : 빈 팩토리를 위한 오브젝트 설정을 담당하는 클래스로 인식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Bean&lt;/strong&gt; : 오브젝트를 만들어주는 메소드에 정의&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/1815285309d66fcd2639cf70e9ab2db6bcf9b65d&quot;&gt;[ch01] Use Spring’s application context to management for components. &lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springbook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DaoFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 메소드의 이름이 빈의 이름이 된다.&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMaker&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationConfigApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DaoFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AnnotationConfigApplicationContext&lt;/strong&gt;: @Configuration annotation을 사용하는, 자바 코드를 설정 정보를 사용할 때 이 애플리케이션 컨택스트를 사용&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;getBean&lt;/strong&gt;: 애플리케이션 컨텍스트가 관리하는 오브젝트를 요청하는 메소드&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;애플리케이션-컨텍스트의-동작방식&quot;&gt;애플리케이션 컨텍스트의 동작방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;오브젝트 팩토리에 대응되는 것이 스프링의 애플리케이션 컨텍스트
    &lt;ul&gt;
      &lt;li&gt;스프링에서는 IoC 컨테이너라 하기도 하고, 스프링 컨테이너라고 부르기도 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트는 &lt;strong&gt;ApplicationContext&lt;/strong&gt; 인터페이스를 구현하며, 빈 팩토리가 구현하는 &lt;strong&gt;BeanFactory&lt;/strong&gt; 인터페이스를 상속한다.
    &lt;ul&gt;
      &lt;li&gt;애플리케이션에서 IoC를 적용해서 관리할 모든 오브젝트에 대한 생성과 관계설정을 담당&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/08.jpg&quot; alt=&quot;08.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@Configuration&lt;/strong&gt; 이 붙은 DaoFactory를 IoC 설정정보로 활용하며, DaoFactory의 userDao 메소드를 호출해서 오브젝트를 가져온 것을 &lt;strong&gt;getBean&lt;/strong&gt; 을 통해 요청될 때 전달해준다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;@Bean&lt;/strong&gt; 이 붙은 메소드의 이름을 가져와 빈 목록을 만들고, 요청시 해당 메소드를 호출하여 오브젝트를 생성 후 전달&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/09.png&quot; alt=&quot;09.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션 컨택스트를 사용하는 이유는 범용적이고 유연한 방법으로 IoC 기능을 확장하기 위해서이다.
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 구체적인 팩토리 클래스를 알 필요가 없다.
        &lt;ul&gt;
          &lt;li&gt;어떤 팩토리 클래스를 사용할지 알 필요가 없으며, 팩토리 오브젝트를 생성할 필요도 없다.&lt;/li&gt;
          &lt;li&gt;XML 을 통한 단순한 방법을 통해 설정 정보를 만들 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;종합 IoC 서비스 제공
        &lt;ul&gt;
          &lt;li&gt;오브젝트가 만들어지는 방식, 시점과 전략을 유연하게 가져갈 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;빈을 검색하는 다양한 방법을 제공
        &lt;ul&gt;
          &lt;li&gt;이름 뿐만 아니라, 타입이나 특별한 annotation 설정이 되어 있는 빈을 찾을 수도 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링-ioc의-용어-정리&quot;&gt;스프링 IoC의 용어 정리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;빈 (Bean): 스프링이 IoC 방식으로 관리하는 오브젝트, 스프링이 직접 그 생성과 제어를 담당하는 오브젝트&lt;/li&gt;
  &lt;li&gt;빈 팩토리 (Bean Factory): 스프링의 IoC 를 담당하는 핵심 컨테이너, 빈을 등록 / 생성 / 조회 / 전달하며 관리하는 기능을 담당&lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트 (Application Context): 빈 팩토리를 확장한 IoC 컨테이너. 스프링이 제공하는 각종 부가 서비스를 추가로 제공&lt;/li&gt;
  &lt;li&gt;설정정보/설정 메타정보 (Configuration Metadata): IoC를 적용하기 위해 사용하는 메타정보. IoC 컨테이너에 의해 관리되는 애플리케이션 오브젝트를 생성하고 구성할 때 사용.&lt;/li&gt;
  &lt;li&gt;컨테이너, IoC 컨테이너: IoC 방식으로 빈을 관리한다는 의미로 애플리케이션 컨텍스트나 빈 팩토리를 컨테이너 또는 IoC 컨테이너라고도 부른다.&lt;/li&gt;
  &lt;li&gt;스프링 프레임워크: IoC 컨테이너, 애플리케이션 컨텍스트를 포함해서 스프링이 제공하는 모든 기능을 총칭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;싱글톤-레지스트리와-오브젝트-스코프&quot;&gt;싱글톤 레지스트리와 오브젝트 스코프&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;애플리케이션 컨텍스트를 통해 생성된 빈은 &lt;strong&gt;디폴트로&lt;/strong&gt; 몇번 요청하더라도 &lt;strong&gt;동일한&lt;/strong&gt; 빈이 전달된다.
    &lt;ul&gt;
      &lt;li&gt;매번 동일한 빈을 돌려준다. (매번 new 메소드를 통해 새로운 빈이 생성되지 않는다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;애플리케이션 컨텍스트는 빈을 &lt;strong&gt;싱글톤&lt;/strong&gt; 으로서 저장하고 관리하는 &lt;strong&gt;싱글톤 레지스트리&lt;/strong&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링이 주로 적용되는 대상이 서버 환경인데, 이 환경은 수많은 요청을 처리해야 하는 높은 성능이 요구된다. 각 요청에 대해 새로운 오브젝트를 생성한다면 부하가 걸리게 되므로, 하나의 오브젝트만 만들어두고 요청을 처리하는 스레드들이 서로 오브젝트를 공유하면서 사용하도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;싱글톤 패턴: 어떤 클래스를 애플리케이션에서 제한된 인스턴스 개수, 주로 하나만 존재하도록 강제하는 패턴.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;싱글톤-패턴의-한계&quot;&gt;싱글톤 패턴의 한계&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;보통 싱글톤을 구현할 때 다음과 같이 구현한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionMaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connectionMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(?);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;private 생성자를 가지고 있으므로 상속이 불가능하다.
    &lt;ul&gt;
      &lt;li&gt;싱글톤 패턴은 private로 생성자를 만드는데, 다른 생성자가 없다면 상속이 불가능해진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트하기가 힘들다.
    &lt;ul&gt;
      &lt;li&gt;Mock 오브젝트 등으로 대체하기가 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서버환경에서는 싱글톤이 하나만 만들어지는 것을 보장하지 못한다.&lt;/li&gt;
  &lt;li&gt;싱글톤의 사용은 전역 상태를 만들어버리므로 바람직하지 않다.
    &lt;ul&gt;
      &lt;li&gt;아무곳에서나 static 메소드를 통해 해당 오브젝트를 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;싱글톤-레지스트리&quot;&gt;싱글톤 레지스트리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스프링은 서버환경에서 오브젝트들이 싱글톤으로 만들어져서 오브젝트 방식으로 만드는 것을 권장하는데, 싱글톤 패턴 구현 방식은 한계가 있으므로 직접 오브젝트를 만들고 관리하는 기능을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스프링 컨테이너는 싱글톤을 생성하고 관리하는 싱글톤 관리 컨테이너이다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;싱글톤 패턴이 아닌 일반 생성자로 구성된 평범한 자바 클래스도 싱글톤으로 활용할 수 있게 해준다.&lt;/li&gt;
      &lt;li&gt;일반적인 자바 클래스를 사용할 수 있으므로, 싱글톤 패턴과는 다르게 &lt;strong&gt;객체지향적인 설계 방식과 디자인 패턴을 적용하는데 아무런 제약이 없다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;싱글톤과-오브젝트-상태&quot;&gt;싱글톤과 오브젝트 상태&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;싱글톤은 멀티스레드 환경에서 여러 스레드가 동시에 접근해서 사용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;따라서 오브젝트 내부적으로 상태 정보를 가지고 있으면 안된다.&lt;/li&gt;
      &lt;li&gt;파라미터나 로컬 변수와 같은 것은 스택에 따로 만들어지므로 상관이 없음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링-빈의-스코프&quot;&gt;스프링 빈의 스코프&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스코프: 스프링이 관리하는 빈이 생성되고 존재하고, 적용되는 범위&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;싱글톤 스코프: 스프링 빈의 기본 스코프, 한 개의 오브젝트만 생성된다.&lt;/li&gt;
  &lt;li&gt;프로토타입 스코프: 빈을 요청할 때마다 새로운 빈이 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;그 외 Http 요청이 생길 때마다 생성되닌 요청 스코프 / 웹의 세션과 유사한 세션 스코프도 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;의존관계-주입-di&quot;&gt;의존관계 주입 (DI)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;제어의-역전과-의존관계-주입&quot;&gt;제어의 역전과 의존관계 주입&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;스프링 IoC 기능의 대표적인 원리는 의존관계 주입이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;의존관계&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;의존한다는 것은, 위의 그림을 예로 들때 B가 변하면 A에 영향을 미친다는 뜻이다.
    &lt;ul&gt;
      &lt;li&gt;B의 기능이 변화하면 A의 기능이 수행되는 데도 영향이 미친다.&lt;/li&gt;
      &lt;li&gt;B를 수정할 때, A로 그에 따라 수정되어야 할 수 있다.&lt;/li&gt;
      &lt;li&gt;의존관계에는 방향성이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UserDao와 같이 인터페이스를 통해서만 의존관계를 만들면 인터페이스 구현 클래스와의 관계는 느슨해지면서 영향을 덜 받게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-06-06-toby_spring_01_object_dependency/11.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;의존관계 주입&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클래스 모델이나 코드에는 런타임 시점의 의존관계가 드러나지 않는다. 그러기 위해 인터페이스에만 의존하고 있어야 한다.&lt;/li&gt;
  &lt;li&gt;런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제 3자가 설정한다.&lt;/li&gt;
  &lt;li&gt;의존관계는 외부에서 오브젝트를 주입해줌으로써 만들어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드의 문제는 코드 상에서 런타임 의존관계가 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;메소드를-이용한-의존관계-주입&quot;&gt;메소드를 이용한 의존관계 주입&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;생성자뿐만 아니라 &lt;strong&gt;Setter&lt;/strong&gt; 를 통해 의존관계를 주입할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;스프링에서는 XML 과 같은 설정 정보를 사용할 때 &lt;strong&gt;Setter&lt;/strong&gt; 를 통해 주입하는 것이 더 편하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springbook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DaoFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionMaker&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleConnectionMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;xml을-이용한-설정&quot;&gt;XML을 이용한 설정&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;스프링에서는 XML 을 통해 DI 의존관계 설정정보를 만들 수 있다.
    &lt;ul&gt;
      &lt;li&gt;자바코드로 만드는 설정정보와는 다르게, 빌드 작업도 필요 없고 빠르게 반영할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;–&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;자바 코드 설정 정보&lt;/th&gt;
      &lt;th&gt;XML 설정 정보&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;빈 설정파일&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@Configuration&lt;/td&gt;
      &lt;td&gt;&amp;lt;beans&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;빈의 이름&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@Bean methodName()&lt;/td&gt;
      &lt;td&gt;&amp;lt;bean id=”methodName”&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;빈의 클래스&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;return new BeanClass()&lt;/td&gt;
      &lt;td&gt;class=”a.b.c… BeanClass”&amp;gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xmlns:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connectionMaker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch01.springbook.user.dao.SimpleConnectionMaker&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- bean 태그는 @Bean에 대응 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- class 에는 오브젝트 생성시 사용하는 클래스 이름, 패키지까지 모두 포함 --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch01.springbook.user.dao.UserDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connectionMaker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connectionMaker&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Setter 를 통한 의존관계 주입, UserDao 클래스에는 setConnectionMaker 이름의 setter가 있어야 한다. --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- name은 Setter의 프로퍼티 이름 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ref는 Setter 를 통해 주입할 오브젝트의 빈 ID이다. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;XML 을 통한 설정정보를 활용하기 위해서는 &lt;strong&gt;GenericXmlApplicationContext&lt;/strong&gt; 를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/87cb981e00ee04b084973e38bb2ff28860ba9eff&quot;&gt;[ch01] Use XML as bean configurations. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/7045fc54788e8e542a04bdfe3416c190cec69533&quot;&gt;[ch01] Use DataSource to get connection. &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/07/29/toby_spring_01_object_dependency-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/07/29/toby_spring_01_object_dependency-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Exception Handling</title>
        <description>&lt;h1 id=&quot;java-exception-handling&quot;&gt;Java Exception Handling&lt;/h1&gt;

&lt;p&gt;개발을 진행하면서 예외 핸들링에 관한 여러 문제점들 중에 하나는 언제, 그리고 어떻게 처리를 해야하느냐는 것이다.&lt;/p&gt;

&lt;p&gt;특히 Java 에서 예외는 &lt;strong&gt;Exception&lt;/strong&gt; 클래스로부터 상속받는 checked exception들과, &lt;strong&gt;RuntimeException&lt;/strong&gt; 을 상속받는 unchecked exception으로 구분하고 있다.&lt;/p&gt;

&lt;p&gt;이 Checked Exception은, 다른 언어 (C++이나 C#)에서는 모든 예외가 unchecked 인 상황에서 Java 언어만이 가지는 독특한 특징이라 할 수 있다. 반드시 처리하거나 throws로 명시하여 전달해야 하는 것을 강제한다. 여기에서는 Java 에서의 예외에 대한 설명과 효과적인 예외처리 방법, 각종 안티패턴들을 설명한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 언급되는 &lt;strong&gt;클라이언트&lt;/strong&gt; 라함은, 예외를 발생시키는 메소드나 API를 사용하는 쪽을 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;java-exception&quot;&gt;Java Exception&lt;/h2&gt;

&lt;p&gt;앞서 언급하였듯이 Java에서는 예외에 대한 클래스들을 다음과 같이 정의하고 있다.
&lt;img src=&quot;/static/assets/img/blog/java/2017-06-29-java_exception_handling/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 모든 예외 클래스는 &lt;strong&gt;Throwable&lt;/strong&gt; 클래스를 상속받으며 이 클래스를 상속받는 서브 클래스는 &lt;strong&gt;Error&lt;/strong&gt; 와 &lt;strong&gt;Exception&lt;/strong&gt; 이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt; 는 시스템 레벨에서, 즉 메모리 부족과 같은 시스템에 뭔가 비정상적인 상황이 발생했을 경우에 사용된다. JVM에서 주로 발생시키고 애플리케이션 코드에서 이 것을 잡으려고 하면 안된다. &lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/OutOfMemoryError.html&quot;&gt;OutOfMemoryError&lt;/a&gt;&lt;/strong&gt; 나 &lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadDeath.html&quot;&gt;ThreadDeath&lt;/a&gt;&lt;/strong&gt; 같은 에러는 애플리케이션 코드에서 catch 로 잡아봤자 대응 방법이 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Error가 아닌 모든 클래스는 &lt;strong&gt;Exception&lt;/strong&gt; 클래스로부터 상속받으며, 이 클래스들은 &lt;strong&gt;Checked Exception&lt;/strong&gt; 과 &lt;strong&gt;Unchecked Exception&lt;/strong&gt; 으로 구분된다. 위 그림에서 &lt;strong&gt;RuntimeException&lt;/strong&gt; 클래스를 상속받는가, 아닌가에 따라 Checked Exception과 Unchecked Exception 으로 나뉘어진다.&lt;/p&gt;

&lt;p&gt;이 Checked Exception 과 Unchecked Exception 의 가장 명확한 구분 기준은 &lt;strong&gt;후 처리가 필요한 것인가&lt;/strong&gt; 이다.
Java에서는 Checked Exception 에 대해서 반드시 try-catch 블록을 사용하거나 throws 를 통해 해당 예외를 전달하도록 강제하며, Unchecked Exception은 명시적인 예외 처리를 하지 않아도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unchecked Exception 은 명시적인 예외 처리를 하지 않아도 되지만, &lt;strong&gt;이런 예외는 미리 조건을 체크하고 주의 깊게 코드를 작성한다면 피할 수 있는 경우가 대부분이다.&lt;/strong&gt; 피할 수 있지만 개발자가 부주의해서 일어나는 상황에 대해 발생하도록 만든 것이 Unchecked Exception 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;하위 계층에서 던져진 Checked Exception 은 이 예외를 반드시 잡아내거나 다시 throw 해야된다는 것을 강제하는데, 상위 계층에서 이런 예외들을 효율적으로 처리할 수 없는 경우에는 원하지 않는 짐이 되어버린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;보편적인-예외-처리-방법&quot;&gt;보편적인 예외 처리 방법&lt;/h2&gt;

&lt;p&gt;예외가 발생했을 때, 보편적으로 이 예외를 처리하는 방법은 다음과 같이 3가지 방법이 있다.
&lt;img src=&quot;/static/assets/img/blog/java/2017-06-29-java_exception_handling/01.jpg&quot; alt=&quot;01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외-복구&quot;&gt;예외 복구&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retryCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retryCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// do something.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// handling exception.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// clean up resource.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예외 복구의 핵심은 예외가 발생해도 애플리케이션은 정상적인 흐름으로 진행된다는 것이다. 위의 예제는 재시도를 통해 예외를 복구하는 코드이다. 복구를 통해 다시 애플리케이션이 정상적인 흐름을 타게하거나 미리 의도된 다른 흐름으로 유도시키도록 하면 비록 예외가 발생해도 정상적으로 작업을 마칠 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외처리-회피&quot;&gt;예외처리 회피&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 해당 Exception 이 발생했을 경우, caller에게 그냥 전달만 한다. 이렇게 구현할 때는 호출한 쪽에서 해당 예외를 반드시 처리한다는 확신이 있거나 효율적으로 처리를 할 수 있을 때에만 해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;예외-전환&quot;&gt;예외 전환&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DuplicateUserException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예외 전환은 위 코드처럼 예외를 잡아서 다른 특정 예외로 전달하는 것이다. 호출한 쪽에서 이 예외를 받아 처리할 때 좀 더 명확하게 처리할 수 있을 때의 방법이다. 또한 Checked Exception이 발생했을 때, 이를 &lt;strong&gt;RuntimeException&lt;/strong&gt; 으로 묶어 전달함으로서 다른 쪽에서 일일이 예외를 선언할 필요가 없도록 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;exception-handling&quot;&gt;Exception Handling&lt;/h2&gt;

&lt;p&gt;개발자로서는 우리는 어떤 문제를 해결하는 질적으로 우수한 코드를 작성하기를 바란다. 그렇지만 예외는 우리의 코드에게 일종의 부작용을 가져옴으로써, 이 것을 처리하기 위해 자신들 고유의 해결책을 찾게 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;만약 예외를 제대로 사용하지 않는다면, 예외들은 메모리를 차지하고 그 예외 객체 생성과 전파(throw), 처리(catch)를 위해 불필요하게 CPU를 점유할 것이다.&lt;/li&gt;
  &lt;li&gt;예외가 남용된다면 코드를 더 읽기 어렵게 만들게되며 이렇게 예외를 처리한 API를 가져다 쓰는 개발자들도 곤란할 것이다.&lt;/li&gt;
  &lt;li&gt;클라이언트 쪽 코드들은 단지 그 예외를 무시해버리거나 (catch 블록에서 잡아놓고 아무 일하지 않는), 그 것을 다시 던져버리는 방법을 통해 회피해버릴 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-natures-of-exceptions&quot;&gt;The natures of Exceptions&lt;/h3&gt;

&lt;p&gt;예외가 발생하는 상황은 다음과 같은 3가지의 경우이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Exceptions due to programming errors (프로그래밍 에러로 인한 예외의 발생)&lt;/p&gt;

    &lt;p&gt;이 예외들은 프로그래밍적 오류로 인해 발생한다. (NullPointerException과 같은 생성되지 않은 객체의 변수나 메소드 사용하거나 IllegalArgumentException과 같이 파라미터를 잘못 사용한 경우). 이런 원인으로 발생하는 예외는 어떤 조치를 취할 수가 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exceptions due to client code errors (클라이언트 코드들의 에러로 인해 발생하는 예외)&lt;/p&gt;

    &lt;p&gt;제공되는 API에서 허용되지 않는 것들을 시도하려고 했을 때, 만약 예외가 제공하는 유용한 정보들이 있다면 클라이언트에서는 다른 대안적인 행동을 취할 수 있게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exceptions due to resource failures (리소스 자체의 문제로 인해 발생하는 예외)&lt;/p&gt;

    &lt;p&gt;예외들은 프로그램이 사용한 리소스들을 불러들이는데 실패 혹은 리소스 자체의 문제로 인해 발생할 수 있다. 클라이언트는 해당 리소스를 사용하기 위해 일정 시간 후에 다시 시도한다거나, 실패를 로그로 남길 수도 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;best-practices-for-design&quot;&gt;Best Practices for Design&lt;/h3&gt;

&lt;hr /&gt;
&lt;p&gt;Checked Exception과 Unchecked Exception 중 어떤 것을 쓸 것인지를 결정할 때 먼저 다음을 생각해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“클라이언트 코드, 즉 호출자가 예외가 발생했을 때 어떤 조치를 취할 수 있는가?”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;만약 코드가 예외 발생으로부터 프로그램을 복구하기 위해서 다른 대안을 취할 수 있다면 Checked Exception으로 예외를 구성하는 것이 좋다. 만약 이 예외로부터 효과적은 일을 할 수 없다면 Unchecked Exception 으로 구성해야 한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;예외 발생시, 클라이언트 코드의 반응&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;예외 타입&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;클라이언트가 조치를 취할 수 없음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unchecked Exception&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;예외가 주는 정보를 통해 어느정도의 예외 복구 조치를 취할 수 있음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Checked Exception&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 프로그래밍 에러에 대해서는 Unchecked Exception 을 사용해야 한다. Unchecked Exception 은 그 예외들을 처리하라고 강요하지 않는 이점이 있으며 자바 API 에서도 NullPointerException, IllegalArgumentException 과 같은 많은 Unchecked Exception 들을 제공한다.&lt;/li&gt;
  &lt;li&gt;되도록 본인이 직접 만든 사용자 정의 예외 보다는 자바에서 제공하는 표준 예외 사용하는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;로그만 출력하는 것은 의미있는 복구 작업이 아니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;캡슐화를 유지하자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;구현에서 정의된 Checked Exception 들이 &lt;strong&gt;상위 계층으로 전달되게 하지 않는 것이 좋다.&lt;/strong&gt;
예를 들어 SQLException을 data를 다루는 코드에서 이 예외를 전혀 알지 못하는 비즈니스 계층으로 전달하는 것은 좋지 않다. 비즈니스 계층에서는 이 예외에 대해 전혀 알 필요가 없다.&lt;/p&gt;

&lt;p&gt;이 상황에서 다음 두 가지 방안 중 하나를 선택할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;만약 클라이언트 코드가 이 예외를 가지고 예외 복구를 진행할 수 있다면, SQLException 을 다른 Checked Exception 으로 변환&lt;/li&gt;
  &lt;li&gt;클라이언트 코드가 아무런 조치를 취할 수 없다면 Unchecked Exception 으로 변환해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;가령 다음의 예를 살펴보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataAccessCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 catch 블록은 단순히 예외에 대한 정보를 출력할 뿐 아무것도 하지 않는다. 클라이언트 코드가 아무 것도 할 수 없다는 것이다. 이런 경우에는 다음과 같이 작성하는 것이 좋을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dataAccessCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 SQLException을 RuntimeException 으로 변환하였다. 그러면 비즈니스 계층에서는 이 예외를 처리할 필요가 전혀 없으므로 비즈니스 계층의 코드가 복잡해지지 않을 것이다.&lt;/p&gt;

&lt;p&gt;만약 이 예외를 의미있는 조치를 취할 수 있다면 Checked Exception 으로 변환해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예외를 변환할 때, 상위 계층의 추상화 수준에 맞게 변환해서 던져야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;클라이언트 코드로 충분한 정보를 전해줄 수 없다면 새로운 사용자 정의 예외를 만들지 마라.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 코드와 같이 사용자 정의 예외를 정의한다면 아무런 유용한 정보를 주지 못한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DuplicateUserException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우리는 이 예외 클래스에 다음과 같이 메소드를 추가함으로써 클라이언트 코드가 유용한 정보를 얻을 수 있도록 도움을 줄 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DuplicateUserException&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DuplicateUserException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestedUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;availableNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 클라이언트로 정보를 주지 못한다면 사용자 정의 예외를 만들지 말고, 표준 예외를 발생시키는 것만으로도 충분한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username already exists.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;흐름제어 를 위해 예외를 사용하지 마라.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 코드는 MaximumCountReachedException 이라는 사용자 정의 예외가 흐름을 제어하는데 사용되었다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;useExceptionsForFlowControl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;increaseCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaximumCountReachedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increaseCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaximumCountReachedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MaximumCountReachedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 useExceptionsForFlowControl 메소드는 카운트를 증가시켜 예외가 발생할 때까지 무한루프를 돌리고 있다. 이렇게 코드를 작성하면 읽기 어렵게 만들뿐만 아니라, 수행속도까지 느리게 만들어버린다. (JVM의 최적화 대상에서도 빠질 수가 있다.)&lt;/p&gt;

&lt;p&gt;예외처리는 예외가 발생하는 상황에서만 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;anti-patterns&quot;&gt;Anti patterns&lt;/h2&gt;

&lt;p&gt;이 절에서는 예외 처리와 관련하여 4가지의 anti pattern 들을 소개한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;throw-all-away&quot;&gt;Throw all away&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callersCallerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;callerMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 예외 처리는 진행하지 않고 계속 throws 를 통해 상위 계층으로 던짐으로써 클라이언트 코드가 복잡해지게 만들고 있다. 결국 아무도 처리하지 않는다면 의미가 없는 형태인 것이다. 아무런 조치를 취할 수 없다면, RuntimeException 을 통해 변환하는게 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;empty-catch&quot;&gt;Empty catch&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 예외를 잡아놓고 아무런 처리를 하지 않는다면 여러 부작용을 낳게 된다. 실제 예외가 발생했더라도 아무런 정보를 얻을 수가 없고, 디버깅하기가 힘들어진다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;re-throw-without-cause&quot;&gt;Re-throw without cause&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABCException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XYZException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ABCException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 상위 계층의 추상화 수준에 맞게 예외를 변환하여 던질려고 하는데, 예외의 원인을 담지 않고 던지고 있다. 결국 상위 계층에서는 이 예외에 대해 충분한 정보를 얻지 못한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;log-and-rethrow&quot;&gt;Log and rethrow&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handleException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 예외를 받는 모든 메소드에서 해당 예외를 잡고 로깅만 하고 다시 던지고 있다. 이렇게 코드를 작성하면 예외가 발생했을 때 로그 정보를 정확하게 분석하기 어려워진다.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2017/06/29/java_exception_handling-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2017/06/29/java_exception_handling-post.html</guid>
        
        <category>java</category>
        
        <category>exception</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Intellij IDEA Community Edition에서 external tomcat 실행</title>
        <description>&lt;h1 id=&quot;intellij-idea-community-edition에서-external-tomcat-설정-및-debugging&quot;&gt;Intellij IDEA Community Edition에서 external tomcat 설정 및 debugging&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;intellij-idea-community-edition&quot;&gt;Intellij IDEA Community Edition&lt;/h2&gt;

&lt;p&gt;Intellij IDEA Community Edition 은 오픈소스로 Apache 2.0 라이센스 하에 무료로 배포된다. 개인용, 상업용으로 누구나 사용할 수 있지만, 지원하는 기능이 적다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/#chooseYourEdition&quot;&gt;Intellij IDEA Choose Edition&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://www.jetbrains.org/display/IJOS/Ultimate+Edition+vs.+Community+Edition&quot;&gt;Intellij IDEA Ultimate Edition vs Community Edition&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://intellij-support.jetbrains.com/hc/en-us/community/posts/206883615-Ask-about-Community-Edition-License&quot;&gt;Ask about Community Edition License&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-application&quot;&gt;Spring Boot Application&lt;/h2&gt;

&lt;p&gt;Intellij IDEA Community 에서는 비록 spring을 정식으로 지원하지 않지만, Spring Boot는 embedded tomcat이 있고, standalone으로 일반 java application 처럼 실행할 수 있기 때문에 main 클래스에서 다음과 같이 run이나 debug를 수행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;외부-tomcat-설정-및-실행&quot;&gt;외부 tomcat 설정 및 실행&lt;/h2&gt;

&lt;p&gt;Spring MVC와 같이 web resource를 deploy하고, 외부 tomcat을 사용하는 것이라면 추가 설정이 필요하다. (물론 Intellij IDEA Ultimate Edition을 사용하면 바로 사용할 수 있다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;maven-pomxml에-maven-war-plugin-추가&quot;&gt;maven pom.xml에 maven-war-plugin 추가&lt;/h3&gt;

&lt;p&gt;Web resource deploy를 위해 pom.xml에 다음과 같이 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;webdev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-war-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${maven.war.plugin-version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;webXml&amp;gt;&lt;/span&gt;${webXmlPath}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/webXml&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.war.plugin-version&amp;gt;&lt;/span&gt;2.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.war.plugin-version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;webAppDir&amp;gt;&lt;/span&gt;target/classes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/webAppDir&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;webXmlPath&amp;gt;&lt;/span&gt;src/main/webapp/WEB-INF/web.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/webXmlPath&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tomcat-runner-plugin-설치&quot;&gt;Tomcat Runner plugin 설치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 Tomcat Runner 라는 &lt;a href=&quot;https://plugins.jetbrains.com/plugin/8266-tomcat-runner-plugin-for-intellij&quot;&gt;Intellij plugin&lt;/a&gt;을 따로 설치해야 한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설치하면 &lt;strong&gt;Run Configuration&lt;/strong&gt; 메뉴에서 다음을 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Tomcat Installation: Tomcat이 설치된 디렉토리 설정&lt;/li&gt;
      &lt;li&gt;Modules: 자신이 개발하고 있는 web application의 루트 디렉토리 설정&lt;/li&gt;
      &lt;li&gt;VM Args
        &lt;ul&gt;
          &lt;li&gt;일반 실행: &lt;strong&gt;-Xms256m -Xms1024m&lt;/strong&gt; 과 같이 필요한 옵션 설정&lt;/li&gt;
          &lt;li&gt;디버깅 실행: &lt;strong&gt;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999&lt;/strong&gt; 추가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Before launch
        &lt;ul&gt;
          &lt;li&gt;Tomcat이 실행되기 전에 수행할 작업을 명시&lt;/li&gt;
          &lt;li&gt;maven goal로 &lt;strong&gt;compile war:exploded&lt;/strong&gt; 추가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음은 위와 같이 설정하였을 때의 모습이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위와 같이 설정 후 실행하면 Tomcat이 실행되는 것을 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;tomcat-remote-debugging&quot;&gt;Tomcat remote debugging&lt;/h2&gt;

&lt;p&gt;Intellij IDEA Community Edition에서는 자체적으로 spring을 지원하지 않으니 당연히 디버깅 feature도 지원하지 않는다. Web application을 디버깅하기 위해서는 tomcat remote debugging을 통해 디버깅을 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tomcat-실행시-java-option-추가&quot;&gt;Tomcat 실행시 java option 추가&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Tomcat 실행할 때 debug 옵션을 추가하여 IDEA에서 tomcat과 remote로 통신하면서 디버깅을 진행한다.
    &lt;ul&gt;
      &lt;li&gt;아까 전의 Tomcat Runner plugin 에서 다음 java option을 추가한다.&lt;/li&gt;
      &lt;li&gt;Debugging을 위한 포트 번호를 &lt;strong&gt;9999&lt;/strong&gt; 로 설정하였다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;remote-run-configuration&quot;&gt;Remote run configuration&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 아까 전과 같이 tomcat 실행 후, &lt;strong&gt;Run Configuration&lt;/strong&gt; 메뉴에서 &lt;strong&gt;Remote&lt;/strong&gt; 를 추가한다.
    &lt;ul&gt;
      &lt;li&gt;다음과 같이 port 번호를 9999로 설정한다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;다음과 같이 디버깅을 시작할 때 target VM에 접속이 되었나는 메시지를 확인할 수 있을 것이다.
    &lt;ul&gt;
      &lt;li&gt;이전에 debug 옵션을 준 tomcat이 실행된 상태여야 한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/06.png&quot; alt=&quot;06.png&quot; /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;디버깅 진행할 때, 다음과 같이 breakpoint가 걸리고, 변수 값과 스택 프레임도 확인할 수 있을 것이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-05-27-intellij_idea_community_tomcat/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/06/01/intellij_idea_community_tomcat-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/06/01/intellij_idea_community_tomcat-post.html</guid>
        
        <category>server programming</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 05</title>
        <description>&lt;h1 id=&quot;collections&quot;&gt;Collections&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;컬렉션 구현은 주로 성능에 관련된 개발자의 의도를 전달한다. 컬렉션 사용과 커뮤니케이션을 위한 코드 작성 사이에는 밀접한 관련이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;선형 탐색이 충분히 빠르다면 일반적인 컬렉션을 사용해도 되나, 컬렉션의 크기가 너무 커진다면 키를 통해 원소에 접근하는 것이 나을 수도 있다 생각할 수 있을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;collection의-의미&quot;&gt;Collection의 의미&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;여러 값을 가진 객체
    &lt;ul&gt;
      &lt;li&gt;컬렉션이 별도의 객체라는 사실은 중요하지 않고, 어떤 객체인가? 또는 컬렉션이 가리키는 객체가 어떤 것인가가 중요하다.&lt;/li&gt;
      &lt;li&gt;자바에서는 컬렉션을 별도의 객체로 인식하므로, 여러 값을 가진 변수라는 정체성이 희미하다.&lt;/li&gt;
      &lt;li&gt;컬렉션은 여러 값을 가진 변수이기도 하지만, 객체이기도 하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인자로 전달 가능한 객체
    &lt;ul&gt;
      &lt;li&gt;참조 호출의 효과가 나타나서, 어떤 메소드에서 컬렉션 객체의 값을 변경 (즉 원소 추가나 삭제 등)하면 Caller에서도 그 효과가 나타난다.&lt;/li&gt;
      &lt;li&gt;컬렉션이 수정되는 곳을 예측하기 어려운 상황을 피하기 위해 몇 가지 convention이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;수학적 집합
    &lt;ul&gt;
      &lt;li&gt;객체의 모임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;컬렉션 사용시 가장 일반적인 인터페이스를 사용해서 선언하고 구체적인 구현 클래스를 사용하는 것이 좋다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;크기
    &lt;ul&gt;
      &lt;li&gt;배열과는 다르게 컬렉션은 중간에 크기 수정 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;순서
    &lt;ul&gt;
      &lt;li&gt;원소의 순서가 의미가 있거나 외부에서 순서에 대한 정보가 필요한 경우 순서 정보를 보전하는 컬렉션을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Uniqueness
    &lt;ul&gt;
      &lt;li&gt;일부 연산의 경우, 어떤 원소가 컬렉션에 속해있는지 여부만 중요한 경우도 있지만, 다른 경우 어떤 원소가 몇 번 나타나는지 중요한 경우도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;컬렉션의 선택
    &lt;ul&gt;
      &lt;li&gt;성능에 관한 프로그래머의 의도를 전달한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;성능에 관련된 결정 사항들을 명확히 표현해야 한다. 성능을 좋게 하려면 대부분의 경우, 가독성이나 유연성과 같은 코드의 다른 품질을 희생해야 한다. 중요한 것은 이러한 희생을 최소화하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;인터페이스&quot;&gt;인터페이스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;배열: 가장 단순하지만 가장 유연하지 못한 컬렉션. 크기가 고정되어 있고 원소 접근 방법이 빠르다.&lt;/li&gt;
  &lt;li&gt;Iterable: 기본적인 컬렉션 인터페이스로, 순차 탐색을 지원&lt;/li&gt;
  &lt;li&gt;Collection: 원소 추가, 제거 및 원소가 존재하는지에 대한 함수를 지원&lt;/li&gt;
  &lt;li&gt;List: 원소의 순서가 의미가 있으며, 컬렉션 상의 위치를 통해 원소에 접근 가능&lt;/li&gt;
  &lt;li&gt;Set: 중복된 원소가 없는 컬렉션&lt;/li&gt;
  &lt;li&gt;SortedSet: 중복 원소가 없으며, 원소 간의 순서가 정해진 컬렉션&lt;/li&gt;
  &lt;li&gt;Map: 키에 의해 원소를 저장하고 접근하는 컬렉션&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;배열&quot;&gt;배열&lt;/h3&gt;

&lt;p&gt;가장 단순한 컬렉션 인터페이스로, 다른 컬렉션과의 변환이 복잡하다. 배열의 크기는 선언시 고정된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;단순한 연산의 경우, 다른 컬렉션에 비해 시간, 공간 모든 면에서 효율적이다. 단순한 연산이면서 성능이 중요한 경우 배열을 사용해도 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;iterable&quot;&gt;Iterable&lt;/h3&gt;

&lt;p&gt;어떤 변수를 Iterable로 선언하는 것은, 그 변수가 여러 개의 값을 가지고 있음을 말한다. 단, 지원하는 기능은 순차적인 탐색 뿐이며 기본적인 컬렉션 크기를 알아낼 수 있는 메소드는 지원하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;collection&quot;&gt;Collection&lt;/h3&gt;

&lt;p&gt;Iterable을 상속하며, 원소 추가 / 삭제 / 검색 / 크기 측정 등의 메소드를 추가로 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;list&quot;&gt;List&lt;/h3&gt;

&lt;p&gt;Collection을 기반으로 원소 간에 정해진 순서를 부여한 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;따라서 List를 사용하면 컬렉션 상에서의 인덱스를 통해 어떤 원소를 접근할 수 있다. 컬렉션 원소 사이에 순서가 의미가 있는 경우 List를 사용하는 것이 적합하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;

&lt;p&gt;중복 원소를 허용하지 않는 컬렉션이며 원소 간에 순서가 없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set은 어떤 특정 원소가 몇번 나타나는지에 대한 메소드를 지원하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;sortedset&quot;&gt;SortedSet&lt;/h3&gt;

&lt;p&gt;중복 원소를 허용하지 않으면서 원소 간의 순서가 의미가 있는 컬렉션이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;map&quot;&gt;Map&lt;/h3&gt;

&lt;p&gt;키를 통해 원소를 접근하며, 원소 간의 순서는 보장되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;

&lt;p&gt;어떤 컬렉션 인터페이스에 대한 구현체를 선택하는 것은 성능을 결정하는 중요요소 이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;컬렉션 인터페이스를 구현한 클래스를 선택할 때 고려해야 할 요소는 컬렉션의 크기이다. 수백만 개를 저장할 경우나 2~3개를 저장할 때는 분명히 선택이 달라질 것이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ArrayList
    &lt;ul&gt;
      &lt;li&gt;이 구현 클래스를 사용하면서 문제되는 부분은, 크기가 커지면서 성능이 저하되는 &lt;strong&gt;contains&lt;/strong&gt; 메소드나, &lt;strong&gt;remove&lt;/strong&gt; 메소드 등이다. 만약 이 부분이 문제가 된다면 &lt;strong&gt;HashSet&lt;/strong&gt; 을 사용하는 것을 고려해볼 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List
    &lt;ul&gt;
      &lt;li&gt;이 인터페이스를 구현한 구현 클래스는 &lt;strong&gt;ArrayList&lt;/strong&gt; 나 &lt;strong&gt;LinkedList&lt;/strong&gt; 이다.&lt;/li&gt;
      &lt;li&gt;ArrayList는 원소 접근이 빠르며, 추가 및 제거가 느리다.&lt;/li&gt;
      &lt;li&gt;LinkedList는 원소 접근은 느리지만 추가 및 삭제가 빠르다.
        &lt;ul&gt;
          &lt;li&gt;원소 변경이 잦은 경우 LinkedList 를 사용하는 것도 고려해볼 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set
    &lt;ul&gt;
      &lt;li&gt;이 인터페이스를 구현한 구현 클래스는 &lt;strong&gt;HashSet&lt;/strong&gt;, &lt;strong&gt;LinkedHashSet&lt;/strong&gt;, &lt;strong&gt;TreeSet&lt;/strong&gt; 이다.&lt;/li&gt;
      &lt;li&gt;HashSet은 가장 빠르지만 원소 간의 순서를 보장해주지 않는다.&lt;/li&gt;
      &lt;li&gt;LinkedHashSet은 원소 간의 순서는 보장해주지만, HashSet에 비해 성능이 열세이다.
        &lt;ul&gt;
          &lt;li&gt;원소 간의 순서가 필요해지면 이 클래스를 사용하는 것을 고려해볼 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TreeSet은 &lt;strong&gt;Comparator&lt;/strong&gt; 에 따라 원소를 정렬해주지만, 원소 추가/삭제 시간이 컬렉션의 크기에 따라 커진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Map
    &lt;ul&gt;
      &lt;li&gt;이 인터페이스를 구현한 구현 클래스는 &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;LinkedHashMap&lt;/strong&gt;, &lt;strong&gt;TreeMap&lt;/strong&gt; 이다.&lt;/li&gt;
      &lt;li&gt;HashMap은 가장 빠르고 단순한 Map의 구현 클래스이다.&lt;/li&gt;
      &lt;li&gt;LinkedHashMap은 LinkedHashSet과 비슷하게, 원소 간의 순서를 보장해준다.&lt;/li&gt;
      &lt;li&gt;TreeMap은 TreeSet과 비슷하게, 순차 열람이 가능하지만 원소 추가/삭제 시간이 컬렉션의 크기에 따라 커진다.
        &lt;ul&gt;
          &lt;li&gt;SortedMap의 구현 클래스이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;검색&quot;&gt;검색&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;indexOf 메소드에 걸리는 시간은 리스트의 크기에 비례한다. 단, 원소가 정렬되어 있다면 이진 검색을 통해 log2n에 비례하는 시간에 검색을 마칠 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;정렬&quot;&gt;정렬&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이진 검색과는 다르게, 정렬은 배열로 복사되어 정렬된 다음 다시 본래 컬렉션으로 복사하므로 ArrayList나 LinkedList나 속도는 비슷하다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/29/implementation_patterns_05-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/29/implementation_patterns_05-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 04</title>
        <description>&lt;h1 id=&quot;method&quot;&gt;Method&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램은 복잡한 제어 흐름이 들어 있는 커다란 루틴
    &lt;ul&gt;
      &lt;li&gt;문제: 하나의 거대한 루틴에서는 코드를 읽기가 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로그램 로직을 여러 개의 메소드로 나누면 로직 간의 연관성을 나타낼 수 있음
    &lt;ul&gt;
      &lt;li&gt;메소드 사용시 재사용 문제를 해결할 수 있다.&lt;/li&gt;
      &lt;li&gt;메소드로 분리하는 것을 통해 전체 작업은 간단해져야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메소드 관련 패턴
    &lt;ul&gt;
      &lt;li&gt;조합 메소드: 다른 메소드에 대한 호출로 메소드를 작성한다.&lt;/li&gt;
      &lt;li&gt;의도 제시형 이름: 메소드가 의도하는 바를 나타내는 이름을 사용한다.&lt;/li&gt;
      &lt;li&gt;메소드 가시성: 메소드는 가급적 전용으로 한다.&lt;/li&gt;
      &lt;li&gt;메소드 객체: 복잡한 메소드는 새로운 객체로 바꾼다.&lt;/li&gt;
      &lt;li&gt;오버라이드 메소드: 특화를 나타내기 위해 오버라이드를 사용한다.&lt;/li&gt;
      &lt;li&gt;오버로드 메소드: 같은 연산에 대해 다른 인터페이스를 제공한다.&lt;/li&gt;
      &lt;li&gt;메소드 반환 타입: 반환 타입에는 가급적 가장 일반적인 타입을 사용한다.&lt;/li&gt;
      &lt;li&gt;메소드 주석: 코드 자체에서 쉽게 얻을 수 없는 정보는 주석을 통해 나타낸다.&lt;/li&gt;
      &lt;li&gt;도우미 메소드: 주요 연산을 좀 더 명확하게 표현하기 위해 작은 전용 메소드를 사용한다.&lt;/li&gt;
      &lt;li&gt;디버그 출력 메소드: toString() 을 사용해서 유용한 디버그 정보를 출력한다.&lt;/li&gt;
      &lt;li&gt;변환: 객체 형변환은 명확하게 표현한다.&lt;/li&gt;
      &lt;li&gt;변환 메소드: 단순하고 제한적인 변환에 대해서는 원본 객체에서 변환된 객체를 반환하는 메소드를 제공한다.&lt;/li&gt;
      &lt;li&gt;변환 생성자: 대부분의 변환에 대해서는 원본 객체를 인자로 취하는 변환될 객체의 생성자를 제공한다.&lt;/li&gt;
      &lt;li&gt;생성: 객체 생성을 명확히 표현한다.&lt;/li&gt;
      &lt;li&gt;완결 생성자: 완결된 형태를 갖는 객체를 반환하는 생성자를 작성한다.&lt;/li&gt;
      &lt;li&gt;Factory 메소드: 좀 더 복잡한 객체를 생성할 때, 생성자 대신 정적 메소드를 사용&lt;/li&gt;
      &lt;li&gt;내부 Factory: 좀 더 많은 설명이 필요하거나 이후 개선이 필요한 객체 생성의 경우, 도우미 메소드로 캡슐화한다.&lt;/li&gt;
      &lt;li&gt;컬렉션 접근자 메소드: 컬렉션에 제한적인 접근만을 허용하는 메소드를 제공한다.&lt;/li&gt;
      &lt;li&gt;Boolean 설정 메소드: 커뮤니케이션에 도움이 된다면, boolean 값을 설정하는 두 개의 메소드 (상태별로)를 제공한다.&lt;/li&gt;
      &lt;li&gt;Query 메소드: isXXX 라는 이름으로 된 메소드를 사용하여 boolean 값을 반환한다.&lt;/li&gt;
      &lt;li&gt;동등성 메소드: equals()와 hashCode() 메소드를 정의&lt;/li&gt;
      &lt;li&gt;Getter 메소드: 필드 값을 반환하는 메소드를 사용&lt;/li&gt;
      &lt;li&gt;Setter 메소드: 필드 값을 설정하는 메소드를 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;조합-메소드&quot;&gt;조합 메소드&lt;/h2&gt;

&lt;p&gt;추상화 수준이 비슷한 메소드 호출로 하나의 메소드를 구성하는 것이 좋다. 다음 코드를 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 메소드에서 2번째 라인은 무엇을 의미하는 걸까? 코드를 읽다가 갑자기 추상화 수준이 다르면 읽기 흐름이 깨진다. 이 코드를 다음과 같이 변경하면 코드를 읽을 때 좀 더 이해하기가 쉬울 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0080&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 비록 짧은 메소드를 하나 더 만들었지만 compute() 메소드를 분석할 때, 더 이해하기가 쉬울 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;짧은 메소드를 많이 사용하는 것에 대한 반대 의견은 잦은 호출로 인해 성능 저하가 발생한다는 것이다. 그렇지만 CPU는 점점 빨라지고, 성능상 병목 현상을 일으키는 코드는 밀집되어 있는 경향이 있으므로 성능 문제는 실제 수행을 통해 측정 후 개선하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;코드 세부 사항을 이해하려 할 때, 긴 메소드는 오히려 방해가 된다.
    &lt;ul&gt;
      &lt;li&gt;사람은 수천줄에 이르는 코드의 세부 구현을 한 번에 이해하는 것은 불가능하다.&lt;/li&gt;
      &lt;li&gt;세부 사항을 쉽고 빠르게 이해하기 위해서는 밀접하게 관련된 코드는 모아두고, 관련성이 떨어지는 코드는 분리하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메소드를 구성할 때는 추측이 아닌 사실에 근거하고 구성하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;코드 구성이 시간을 들이면, 구현 도중에 새로 알게 되는 사실로 인해 번복하는 경우가 많다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;의도-제시형-이름&quot;&gt;의도 제시형 이름&lt;/h2&gt;

&lt;p&gt;메소드를 사용하는 쪽에서는 메소드 이름을 통해 메소드가 하고자 하는 의도를 쉽게 파악할 수 있어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;linearCustomerSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 번째 메소드 정의처럼 이름을 통해서는 메소드의 의도를 전달하고, 그 외 정보는 다른 방식으로 전달하는 것이 좋다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로그래머가 모든 정보를 당장 전달하는 것이 능사는 아니다.
    &lt;ul&gt;
      &lt;li&gt;특히 메소드가 어떻게 구현되었느냐는 것은 사용자에게 있어서 별로 중요하지 않을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findwithLinearSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findwithHashSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 메소드가 어떤 id를 가지고 선형 탐색할 지, 해쉬 탐색을 할 지는 알 수 있겠지만 사용자 입장에서는 그리 중요한 것이 아닐 수가 있다. 이런 긴 메소드 이름은 이 메소드를 쓰는 코드의 가독성이 떨어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;메소드의 이름은 그 메소드를 호출하는 코드가 표현하려는 바에 도움을 줄 수 있도록 지어야 한다.
    &lt;ul&gt;
      &lt;li&gt;기존 인터페이스에 대해 유사하게 메소드를 구현한다면 그 인터페이스에 사용된 것과 같은 이름을 사용하라.
        &lt;ul&gt;
          &lt;li&gt;가령 iterator를 구현한다고 했을 때, 그 인터페이스를 구현하는 게 아닐지라도 hasNext()나 next()와 같은 이름으로 짓는 것이 좋다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드의 이름을 지을 때는 그 메소드를 호출하는 입장에서 생각해보자. 왜 이 메소드를 사용하는 것인가? 이름은 이 질문에 답을 얻을 수 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;메소드-가시성&quot;&gt;메소드 가시성&lt;/h2&gt;

&lt;p&gt;자바에서 메소드 가시성, 즉 public, default (package), protected, private 역시 프로그래머의 의도를 전달한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;좀 더 많은 메소드를 public으로 만들수록, 그 클래스에 대한 인터페이스를 수정하기가 어려워진다.
    &lt;ul&gt;
      &lt;li&gt;메소드를 되도록 적게 노출시킴으로써 유연성에 커다란 이득을 얻을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;가시성을 선택할 경우, 두 가지 비용을 고려해야 한다.
    &lt;ul&gt;
      &lt;li&gt;유연성: 메소드를 적게 노출할 수록, 추후에 인터페이스를 수정하는 것이 용이하다.&lt;/li&gt;
      &lt;li&gt;사용 비용: 메소드가 적은 클래스의 객체를 사용할 때, 사용 측에서 그 객체를 사용하기 위해 많은 작업을 해야한다.&lt;/li&gt;
      &lt;li&gt;이 두 가지 비용을 적절하게 균형을 맞추는 것이 중요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;public
    &lt;ul&gt;
      &lt;li&gt;패키지 외부에서 이 메소드를 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;이 때 개발자는 이 메소드에 대한 코드 관리를 책임져야 한다. 메소드 로직을 수정할 경우, 모든 수정을 본인이 담당하거나 수정 사항을 알려야할 책임이 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;default (package)
    &lt;ul&gt;
      &lt;li&gt;패키지 내부에서만 이 메소드를 사용할 수 있다.&lt;/li&gt;
      &lt;li&gt;이 것을 선택하기 전에 이 메소드를 private로 구성할 수 있지 않은지 아니면 public으로 선언하는 것이 더 이득이 아닌지 생각해봐야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;protected
    &lt;ul&gt;
      &lt;li&gt;하위 클래스에서 코드를 재사용할 때 유용하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;private
    &lt;ul&gt;
      &lt;li&gt;외부에는 공개하지 않는다는 점에서 유연성을 확보해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;먼저 가장 제한적인 가시성을 가지는 private로 시작하여 필요에 따라 조금씩 가시성을 높여라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;final
    &lt;ul&gt;
      &lt;li&gt;메소드를 final로 선언하는 것은 그 메소드를 사용하는 것은 자유이나, 메소드를 더 이상 바꿀 수 없음을 의미&lt;/li&gt;
      &lt;li&gt;메소드를 변경하거나 오버라이드하면 복잡하고 미묘한 결과가 발생할 경우 유용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;static
    &lt;ul&gt;
      &lt;li&gt;복잡한 로직을 구현하는데에는 적합하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;메소드-객체&quot;&gt;메소드 객체&lt;/h2&gt;

&lt;p&gt;복잡하게 짜여진 메소드를 읽기 쉽게, 세부 구현 전달이 쉽도록 바꿔준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;많은 수의 파라미터와 임시 변수를 사용하는 메소드를 찾아 그 일부를 서브 메소드로 변환&lt;/li&gt;
  &lt;li&gt;서브 메소드의 이름을 따서 클래스 정의하고 로직 구성&lt;/li&gt;
  &lt;li&gt;메소드가 사용하는 파라미터, 임시 변수들을 그 클래스의 필드로 정의&lt;/li&gt;
  &lt;li&gt;필드 값을 설정할 수 있도록 생성자 정의&lt;/li&gt;
  &lt;li&gt;기존 메소드에서 객체 인스턴스를 생성 후, 그 객체의 메소드를 호출하는 구문으로 변경&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 리팩토링된 새로은 클래스는 다시 한 번 리팩토링하기가 쉬울 수 있다. 모든 데이터가 필드로 변경되었으므로 파라미터를 사용할 필요도 없고 리팩토링할 수 있는 여지가 많기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오버라이드&quot;&gt;오버라이드&lt;/h2&gt;

&lt;p&gt;이 오버라이드를 통해 유사한 연산 사의의 차이점을 상위 클래스와 하위 클래스로 나누어 표현할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;상위 클래스 메소드를 잘 구성하여 가급적 작은 코드로 구성하였을 경우 오버라이드하기가 쉽다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;오버라이드를 사용한다고 상위 클래스의 메소드를 호출할 수 없는 것이 아니다.
    &lt;ul&gt;
      &lt;li&gt;이러한 메소드는 이름이 같은, 하위 클래스의 메소드에서만 호출하는 것이 좋다.&lt;/li&gt;
      &lt;li&gt;여러 군데서 호출할 경우 흐름을 읽기가 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;오버로드&quot;&gt;오버로드&lt;/h2&gt;

&lt;p&gt;오버로드의 의미는 이 메소드를 사용함에 있어서 다양한 포맷이 존재한다라는 의미이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;같은 메소드 이름에 다른 수의 파라미터를 사용하는 것은 좋지 않다. 메소드 이름 뿐만 아니라 파라미터도 유심히 살펴봐야 되기 때문이다. 너무 복잡해지면 어떤 인자를 사용했을 때 어떤 메소드가 호출될지 알아야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드 오버로드는 파라미터 타입만 다를 뿐, “같은 연산”을 수행해야 한다. 메소드의 의도가 다르다면 다른 이름을 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;메소드-반환-타입&quot;&gt;메소드 반환 타입&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;메소드 작성시, 반환 타입은 기본 타입을 반환하기보다는 의도를 드러낼 수 있는 추상적인 타입을 사용하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;추후에 반환 타입을 유연하게 변경할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;도우미-메소드&quot;&gt;도우미 메소드&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;도우미 메소드의 목적은 당장 관련도가 떨어지는 세부 구현을 숨기고, 이 메소드를 사용하는 쪽에서 세부 구현 대신 도우미 메소드를 호출하게 함으로써 좀 더 코드를 읽기 쉽게 하기 위함이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;tostring&quot;&gt;toString()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발자에게 유용한 객체의 정보를 알려주기 위해 사용하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;자주 수정되므로 이를 다른 목적으로 사용할 경우 코드가 망가지기 쉽다.&lt;/li&gt;
      &lt;li&gt;그 밖의 문자열로 나타낼 수 있는 정보는 다른 메소드나 다른 클래스를 통해 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;변환-메소드&quot;&gt;변환 메소드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Polar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Cartesian&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asCartesian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 특정 정보에서 다른 형태의 객체를 얻기 위해 변환 메소드를 사용할 수 있지만, 너무 자주 사용하면 클래스 코드를 일기 어려울 뿐만 아니라, &lt;strong&gt;서로 다른 두 클래스간에 의존성이 생긴다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원래 의존성이 존재하지도 않았는데, 변환 메소드때문에 두 클래스간에 의존성이 생기는 것은 바람직하지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;변환-생성자&quot;&gt;변환 생성자&lt;/h2&gt;

&lt;p&gt;다음과 같이 다른 객체를 파라미터로 취하여 새로운 객체를 생성할 때 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Meter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Meter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 생성자는 하나의 특정 타입 객체를 여러 타입으로 변환할 때 유용하다. 변환 메소드를 사용할 때보다 해당 특정 타입의 클래스에 메소드를 일일이 추가할 필요없기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;complete-constructor&quot;&gt;Complete Constructor&lt;/h2&gt;

&lt;p&gt;객체는 연산을 하기위해 정보가 필요한데, 객체 생성시 생성자를 통해 객체를 사용하기 위한 값들을 전달할 수 있도록 해야한다.
다음과 같은 코드는 좋지 않다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 코드는 사용자 입장에서 이 객체를 생성하기 위해 어떤 파라미터들이 필요한지 정확하게 알기 어렵다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 생성하는 방법이 여러가지라면, 각 경우마다 제대로 된 객체를 생성하는 생성자를 구현해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;factory-method&quot;&gt;Factory Method&lt;/h2&gt;

&lt;p&gt;객체 생성할 때 다른 방법은 그 클래스의 static 메소드를 통해 객체를 생성하는 것이다. 이 팩토리 메소드는 이 메소드를 통해 특정 작업이 필요한 경우에만 사용해야 한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;객체를 캐시에 저장해두었다가, 캐시 히트가 발생하면 캐시에 있는 객체를 꺼내 리턴하는 경우&lt;/li&gt;
  &lt;li&gt;런타임에 타입이 결정되는 하위 클래스 객체를 반환하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;팩토리 메소드 사용하면, 코드 읽는 사람의 입장에서는 이 객체를 생성하기 위해 어떤 작업이 일어나는지 궁금해할 수 있다. 다른 사람이 내가 짠 코드를 읽는 시간을 아껴주고 싶으면 평범한 객체 생성에 대해서는 그냥 일반 생성자를 사용하라.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;collection-access-method&quot;&gt;Collection Access Method&lt;/h2&gt;

&lt;p&gt;다음과 같은 클래스가 있다고 해보자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 정의했을 때, 사용자가 직접 컬렉션을 조작하게 되므로 컬렉션 필드에 의존하는 다른 객체의 필드가 유효하지 않을 수 있다.&lt;/p&gt;

&lt;p&gt;어떤 특정 클래스 컬렉션 필드에 대해서는 제한적이지만 의미있는 접근을 제공하는 메소드를 다음과 같이 제공해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBookCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 사용자가 컬렉션에 대해서 각각의 원소마다 접근할 필요가 생긴다면 iterator를 리턴하는 것이 좋다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 만약 내부 컬렉션에 대해서 수정되는 것을 금지하고 싶다면 iterator를 오버라이드하여 특정 메소드에 대해 예외를 던지게하여 금지시킬 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 이런 컬렉션에 대한 작업을 대신하는 메소드를 많이 구현하고 있다면 설계 상에 문제가 있을 확률이 높다. 만약 클래스가 적절한 작업을 제공하고 있다면 이런 메소드를 많이 구현할 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;boolean-메소드&quot;&gt;boolean 메소드&lt;/h2&gt;

&lt;p&gt;어떤 객체의 boolean 상태를 변경하는데에 있어서 다음 코드와 같이 구현할 수 있을 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇지만 상태를 변경함에 있어서 넘어오는 파라미터가 간단한 값이라면, 다음과 같이 프로시저 형태로 제공하는 것이 인터페이스를 더욱 명확히 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만 다음 코드와 같이 상태 변경에 있어 파라미터에 따라 분기문과 같이 로직이 달라질 경우, &lt;strong&gt;setValid(boolean newState)&lt;/strong&gt; 형태로 제공하는 것이 낫다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;동등성-메소드&quot;&gt;동등성 메소드&lt;/h2&gt;

&lt;p&gt;어느 특정 객체에 대해 동일성이 아닌, 동등성을 비교해야 한다면 &lt;strong&gt;equals()&lt;/strong&gt; 와 &lt;strong&gt;hashCode()&lt;/strong&gt; 메소드를 구현해야 한다.
동등한 객체는 같은 해시 값을 가져야 하므로, &lt;strong&gt;hashCode()&lt;/strong&gt; 메소드를 구현할 때, &lt;strong&gt;equals()&lt;/strong&gt; 메소드를 구현하는데 사용한 데이터만을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;getter&quot;&gt;Getter&lt;/h2&gt;

&lt;p&gt;객체의 어떤 필드에 대해 접근을 허용하기 위한 한 가지 방법은 getXXX()와 같은 getter를 제공하는 것이다. 그런데 이런 getter를 사용한다는 것은 이 데이터를 사용하는 코드가 다른 곳에 있다는 것을 의미한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터와 그 것을 다루는 로직은 한 군데에 있어야 변경할 때도 최소 영역에만 반영되므로, 이 원칙에 따라 getter는 최소한으로 제공하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;Getter를 무작정 만들기보다는 그 getter가 필요한 로직을 객체의 필드와 가까운 곳 (예를 들면 클래스 메소드를 따로 만들던지)에 위치시킬 수 없는지 확인하자.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;setter&quot;&gt;Setter&lt;/h2&gt;

&lt;p&gt;Setter는 getter와는 다르게, 메소드 이름은 클라이언트 입장에서 짓는 것이 좋다.
다음과 같이 setter를 제공할 경우, 클래스 내부 구현이 노출된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setJustification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paragraph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CENTERED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 정의하는 것보다는 다음과 같이 인터페이스 이름을 정해주면 코드 읽기가 쉬워질 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;centered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;관건은 가급적 외부에서 setter를 사용하는 것을 최소화하는 것이다. Getter 때와 마찬가지로 데이터와 그와 관련된 로직은 한 군데에 있는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/26/implementation_patterns_04-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/26/implementation_patterns_04-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 03</title>
        <description>&lt;h1 id=&quot;behavior&quot;&gt;Behavior&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램의 행위에 대한 패턴
    &lt;ul&gt;
      &lt;li&gt;제어 흐름: 연산을 여러 단계로 나눈다.&lt;/li&gt;
      &lt;li&gt;주요 흐름: 주요 제어 흐름을 명확하게 표현한다.&lt;/li&gt;
      &lt;li&gt;메시지: 메시지를 보내어 제어 흐름을 표현한다.&lt;/li&gt;
      &lt;li&gt;선택 메시지: 여러 선택 사항을 나타내기 위해 메시지 구현자를 다양화한다.&lt;/li&gt;
      &lt;li&gt;더블 디스패치: 두 가지 축으로 메시지 구현자를 다양화해서 중첩된 선택을 표현한다.&lt;/li&gt;
      &lt;li&gt;분리 메시지: 복잡한 연산은 밀접한 단위의 연산을 나눈다.&lt;/li&gt;
      &lt;li&gt;되돌림 메시지: 메시지를 같은 수신자에게 보내서 제어 흐름에 대칭성을 부여한다.&lt;/li&gt;
      &lt;li&gt;초청 메시지: 다른 방식으로 구현될 수 있는 메시지를 보내서 미래에 일어날 변형을 대비한다.&lt;/li&gt;
      &lt;li&gt;설명 메시지: 로직을 설명하기 위해 메시지를 보낸다.&lt;/li&gt;
      &lt;li&gt;예외 흐름: 주요 흐름에 대한 표현을 방해하지 않으면서, 가급적 명확하게 예외적 제어 흐름을 표현한다.&lt;/li&gt;
      &lt;li&gt;보호 구문: 지역적 예외 흐름은 이른 반환을 통해 표현한다.&lt;/li&gt;
      &lt;li&gt;예외: 비지역적 예외 흐름은 예외로 표현한다.&lt;/li&gt;
      &lt;li&gt;체크 예외: 명시적 선언으로 예외를 처리한다.&lt;/li&gt;
      &lt;li&gt;예외 전달: 예외를 전달할 때에는 예외 처리자에게 적합한 정보를 전달할 수 있도록 필요에 따라 예외의 형태를 변화한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;제어-흐름&quot;&gt;제어 흐름&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바 언어의 경우 제어 흐름은 언어의 근간 중 하나
    &lt;ul&gt;
      &lt;li&gt;조건문을 사용해 특정 상태에서만 코드 수행&lt;/li&gt;
      &lt;li&gt;루프를 사용하면 반복적으로 코드 수행&lt;/li&gt;
      &lt;li&gt;예외를 사용하면 제어 흐름을 스택 아래쪽으로 점프 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;제어 흐름은 관련된 것들끼리 모아서 코드를 처음 보는 사람들에게도 손쉽게 이해할 수 있게 하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;주요-흐름&quot;&gt;주요 흐름&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;대부분의 프로그램에는 주요 흐름이 존재
    &lt;ul&gt;
      &lt;li&gt;언어를 통해 주요 흐름을 명확히 표현해야 한다.&lt;/li&gt;
      &lt;li&gt;예외와 같은, 아주 가끔 수행되는 코드를 명확하게 나타내면, 사람들이 이해해야 할 주요 흐름 파악이 어려울 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;메시지&quot;&gt;메시지&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바는 다음과 같이 메시지를 통해 로직을 표현한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;메시지를 제어 흐름의 메커니즘으로 사용하면 프로그램에서는 상태의 변화가 중요해진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;선택-메시지&quot;&gt;선택 메시지&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;if 문이나 switch 문 대신에 다음과 같이 객체를 통해 다형적 메시지를 사용할 수 있다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;displayShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Brush&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;brush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 &lt;strong&gt;display()&lt;/strong&gt; 메시지는 런타임에 Brush의 타입에 따라 구현을 선택한다.&lt;/li&gt;
  &lt;li&gt;이러한 선택 메시지를 사용하면 명시적 조건문의 사용을 크게 줄일 수 있으며, 추후 확장이 쉽다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;선택 메시지를 많이 사용하는 프로그램을 이해하기 위해서는 연산의 세부 구현을 이해하기 위해 여러 클래스를 살펴봐야 할 수도 있다. 과도한 선택 메시지의 사용은 좋지 않으며, 당장 연산의 변형이 필요하지 않은 경우라면 굳이 지금 선택 메시지를 사용할 필요 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;분리-메시지&quot;&gt;분리 메시지&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;여러 단계로 구성되는 복잡한 알고리즘이 있다면, 관련된 단계들을 모으고 이를 수행하기 위한 메시지를 보낼 수 있다.
    &lt;ul&gt;
      &lt;li&gt;분리 메시지는 이름을 잘 지어서 코드를 보고, 이름만으로도 이후 단계에서 어떤 일이 일어날지 짐작할 수 있어야 한다..&lt;/li&gt;
      &lt;li&gt;이름을 짓기 힘들다면, 분리 메시지를 사용하는 것이 적합하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파라미터 리스트가 긴 경우, 호출되는 모듈을 인라인시킨 후 메소드 객체등의 패턴을 사용하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;되돌림-메시지&quot;&gt;되돌림 메시지&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;대칭성을 이용하여 코드의 가독성을 높일 수 있다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 코드를 도우미 메소드를 이용해 메소드의 가독성을 높일 수 있다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Helper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;설명-메시지&quot;&gt;설명 메시지&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;소프트웨어 개발에서 개발자의 의도와 구현을 분리하는 것은 언제나 중요하다. 이를 통해 연산의 핵심을 파악할 수 있고, 필요한 경우에만 세부 구현에 관심을 기울이면 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;한 줄로 된 코드를 가급적 메소드로 구현하면 커뮤니케이션을 도울 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOADED_BIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setLoadedFlag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;예외-흐름&quot;&gt;예외 흐름&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;예외 흐름은 수행 빈도가 낮고 개념적으로 덜 중요하므로 주요 흐름에 비해 커뮤니케이션의 중요성이 떨어진다.&lt;/li&gt;
  &lt;li&gt;주요 흐름은 명료하게 나타내고, 예외 흐름은 주요 흐름의 명료성을 훼손하지 않는 범위 내에서 나타내라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;보호절&quot;&gt;보호절&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같은 두 가지의 코드가 있다고 하자.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;첫째 코드와 같이 어떤 특정 루틴을 수행하기 전에 이러한 조건이 많으면 코드를 읽을 때 방해 요소가 된다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두번째 코드와 같이 조건문만 읽으면 초기화가 되어 있으면 루틴이 수행된다는 것을 바로 알 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;if / else 는 동등한 중요성을 가지는 두 가지의 제어 흐름을 반영한다. 그러나 두 번째 코드와 같은 조건은 한 쪽의 제어 흐름이 다른 쪽보다 중요할 경우에 유용하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;다음과 같은 코드가 있다고 생각하자.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;processRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;위의 코드와 같이 중첩된 조건을 사용하면 문제가 발생할 확률도 높을 뿐만 아니라 가독성에도 좋지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음과 같이 코드를 작성하면 복잡한 제어 구조를 사용하지 않아도 되면서, 코드를 읽을 때에도 가독성이 더 뛰어나다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;processRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이와 같이 예외에 대해 프로그램을 보호하는 if문, 즉 &lt;strong&gt;보호절&lt;/strong&gt; 의 포인트는 주요 흐름과 예외 경우 처리의 차이점을 부각시키는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;예외&quot;&gt;예외&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;예외는 여러 함수 호출을 걸쳐서 제어 흐름을 바꾸는 경우에 유용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;예외에는 비용이 들어가며 호출된 메소드가 예외를 던지면 예외를 처리할 메소드까지, 호출 경로 상의 모든 메소드의 설계와 구현에 영향을 미친다.
    &lt;ul&gt;
      &lt;li&gt;예외가 발생할 경우 다음에 수행되는 문장이 다른 메소드나 다른 객체, 다른 패키지에 있을 수 있으므로 제어 흐름을 따라가기가 어렵다.&lt;/li&gt;
      &lt;li&gt;조건문이나 메시지로 구현할 수 있는 코드를 예외로 구현하면 코드를 읽고 이해하기가 더 어려워진다.&lt;/li&gt;
      &lt;li&gt;가능한 순차적 구문, 루프, 제어문 등을 사용해서 예외 처리를 진행하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예외의 위험성은 예외를 던졌는데 아무도 그 예외를 받지 않을 때이다.
    &lt;ul&gt;
      &lt;li&gt;예기치 않은 상태로 프로그램이 종료하는 경우, 사용자에게 어떤 일이 벌어졌는지 정보를 출력하는 편이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/25/implementation_patterns_03-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/25/implementation_patterns_03-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 02</title>
        <description>&lt;h1 id=&quot;state&quot;&gt;State&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;객체는 외부에 드러나는 &lt;strong&gt;행위&lt;/strong&gt; 와 행위를 지원하기 위한 &lt;strong&gt;상태&lt;/strong&gt; 를 묶어주는 편리한 단위
    &lt;ul&gt;
      &lt;li&gt;객체 사용으로 프로그램에 있는 모든 상태를 잘게 쪼개서 적당한 곳에 저장할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;객체를 통해 변경할 수 있는 상태의 범위가 훨씬 줄어들므로, 코드 수정시 어떤 영향을 받을지 분석하기 쉽다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상태 관련 패턴
    &lt;ul&gt;
      &lt;li&gt;상태: 시간에 따라 변화하는 값을 사용하여 연산&lt;/li&gt;
      &lt;li&gt;접근: 상태에 대한 접근을 제한해서 유연성을 조절&lt;/li&gt;
      &lt;li&gt;직접 접근: 객체 내의 상태를 직접 접근&lt;/li&gt;
      &lt;li&gt;간접 접근: 좀 더 나은 유연성을 위해 메소드를 통해 상태 접근&lt;/li&gt;
      &lt;li&gt;공용 상태: 클래스의 모든 인스턴스에 적용되는 상태는 필드에 저장&lt;/li&gt;
      &lt;li&gt;가변 상태: 같은 클래스의 인스턴스마다 다른 상태를 유지해야할 경우, 상태를 맵에 저장&lt;/li&gt;
      &lt;li&gt;외재 상태: 객체와 연동되는 특수 상태는 상태의 소유자가 소유하는 맵에 저장&lt;/li&gt;
      &lt;li&gt;변수: 상태 접근에 필요한 네임스페이스 제공&lt;/li&gt;
      &lt;li&gt;지역 변수: 지역 변수는 단일 범위내에서만 유효한 상태를 저장&lt;/li&gt;
      &lt;li&gt;필드: 필드는 객체 생성될 때부터 소멸될 때까지 상태를 저장&lt;/li&gt;
      &lt;li&gt;파라미터: 파라미터는 메소드가 활성화된 동안 상태를 전달&lt;/li&gt;
      &lt;li&gt;수집 파라미터: 여러 개의 메소드를 통해 복잡한 결과를 얻기 위해 파라미터 전달&lt;/li&gt;
      &lt;li&gt;파라미터 객체: 자주 사용하는 긴 파라미터 목록은 객체로 만들어서 통합&lt;/li&gt;
      &lt;li&gt;상수: 변하지 않는 상태는 상수로 저장&lt;/li&gt;
      &lt;li&gt;역할 제시형 작명: 변수 이름은 연산에서의 역할을 반영하여 짓는다.&lt;/li&gt;
      &lt;li&gt;선언형 타입: 변수에 대한 일반적 타입을 선언한다.&lt;/li&gt;
      &lt;li&gt;초기화: 변수 초기화는 가급적 선언적으로 한다.&lt;/li&gt;
      &lt;li&gt;열성적 초기화: 인스턴스가 생성될 때 필드를 초기화한다.&lt;/li&gt;
      &lt;li&gt;게으른 초기화: 초기화 비용이 높은 객체의 경우, 객체가 실제 사용되기 직전에 초기화한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;상태&quot;&gt;상태&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;상태는 프로그래밍에 있어서 유용한 도구
    &lt;ul&gt;
      &lt;li&gt;변수나 할당을 사용하지 않는 프로그래밍에서는 수많은 효과적인 사고 기법들을 포기해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;객체지향언어는 상태를 다루는데 적합한 전략
    &lt;ul&gt;
      &lt;li&gt;전체 시스템을 매우 작은 단위로 쪼갠 후, 각각에 대해 엄격한 접근을 적용하여 &lt;strong&gt;알지 못하는 사이에&lt;/strong&gt; 상태가 변해버리는 문제를 줄여준다.&lt;/li&gt;
      &lt;li&gt;객체를 사용하면 빠르고 정확하게 변수에 대한 모든 접근을 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서로 &lt;strong&gt;유사한&lt;/strong&gt; 상태를 묶어서 효과적으로 관리
    &lt;ul&gt;
      &lt;li&gt;두 개의 상태가 동일한 연산에서 사용될 경우&lt;/li&gt;
      &lt;li&gt;동일한 시점에 생성되고 소멸될 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;직접-접근&quot;&gt;직접 접근&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터를 가져오거나 저장하는 것을 나타내는 가장 간단한 방법은 다음과 같이 직접 변수 접근을 사용하는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위와 같이 직접 변수에 접근하는 것은 표현이 명확해진다. 그러나 이 명확성을 위해 유연성이 희생된다. 프로그램 여러 부분에서 어떤 변수에 직접 접근하면 수정 시, 모든 부분을 하나하나 바꾸어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;직접 접근이 많은 코드는 원활한 커뮤니케이션을 방해하는 요소이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;간접-접근&quot;&gt;간접 접근&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;메소드 호출을 통해 외부에 상태 변화를 숨김으로써 데이터에 접근하는 코드가 유연성을 확보할 수 있다.&lt;/li&gt;
  &lt;li&gt;간접 접근이 유용한 경우로 2개 이상의 데이터가 서로 의존관계가 있을 경우이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;공용-상태&quot;&gt;공용 상태&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램 작성시, 여러 연산에서 같은 데이터 요소를 사용하는 경우가 있다.
    &lt;ul&gt;
      &lt;li&gt;이런 경우는 다음과 같이 클래스로 각 데이터 요소들을 묶어 사용하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위와 같이 공용 상태를 사용하면 코드만 봐도 이 객체를 만들기 위해 어떤 작업이 필요한지 쉽게 알 수 있다. 또한 이에 대한 정보를 명확하고 정확하게 전달할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;변수&quot;&gt;변수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;변수를 범위에 따라 분류
    &lt;ul&gt;
      &lt;li&gt;지역 변수&lt;/li&gt;
      &lt;li&gt;필드 변수
        &lt;ul&gt;
          &lt;li&gt;public / default / protected / private&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;정적 변수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대부분의 경우에 지역 변수를 사용하고, 필요할 때 정적 변수와 필드 변수를 사용해서 객체 간의 의존성을 줄여야 한다.
    &lt;ul&gt;
      &lt;li&gt;어떤 메소드가 수행 될 때만 필드 변수를 유효화할 수도 있지만, 이런 코드는 좋지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변수의 생명은 가급적 변수의 범위에 가까워야 한다.
    &lt;ul&gt;
      &lt;li&gt;같은 범위에서 정의된 변수는 모두 같은 생명 기간을 가져야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;지역-변수&quot;&gt;지역 변수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;지역 변수는 변수가 선언된 지점이 속한 범위에서만 접근할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;가급적 지역 변수는 사용되기 &lt;strong&gt;직전&lt;/strong&gt; 에 선언하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;필드-변수&quot;&gt;필드 변수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;필드 변수의 범위와 생명 기간은 필드를 갖고 있는 객체와 같다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;도우미 필드: 객체의 여러 메소드에서 공통적으로 특정 객체를 파라미터로 받는다면, 파라미터를 도우미 필드로 설정하고, 생성자에서 필드를 설정하는 것도 고려&lt;/li&gt;
  &lt;li&gt;플래그: boolean과 같은 플래그 설정을 할 수 있다는 것은 &lt;strong&gt;객체가 두 가지 다른 방식으로 동작함&lt;/strong&gt; 이라고 표현하는 것이다. 플래그에 따라 결정을 내리는 코드가 &lt;strong&gt;중복되어 있다면&lt;/strong&gt; 전략 필드를 사용하는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;전략: 객체의 연산을 하는데에 있어서 여러가지 다양한 방법이 있다면 그 부분을 수행하는 객체를 필드에 저장
    &lt;ul&gt;
      &lt;li&gt;객체의 생명기간 동안 방법이 바뀌지 않는다면 생성자에서 전략 필드 설정&lt;/li&gt;
      &lt;li&gt;바뀐다면 전략 필드를 수정하는 메소드를 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;파라미터&quot;&gt;파라미터&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;파라미터 사용으로 정적 변수나 필드 변수를 사용할 때마다 객체 간의 의존성을 줄일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;다음과 같이 결과로 여러 객체를 받아야 할 경우 파라미터를 전달해서 결과를 수집하는 것이 직관적이다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;each:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getChildren&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;어떤 메소드가 특정 타입의 여러 파라미터를 취할 경우, 가변 인자를 사용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;가변 인자는 반드시 마지막 파라미터여야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 개의 파라미터가 함께 여러 메소드로 전달될 경우, 파라미터들을 묶어 하나의 객체로 표현
    &lt;ul&gt;
      &lt;li&gt;코드가 짧아지고, 의도를 좀 더 명확히 전달할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;상수&quot;&gt;상수&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;변화하지 않는 데이터를 프로그램의 여러 부분에서 사용하는 경우 &lt;strong&gt;static final&lt;/strong&gt; 로 선언
    &lt;ul&gt;
      &lt;li&gt;상수 이름을 통해 그 값의 뜻을 명확하게 전달할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;열성적-초기화&quot;&gt;열성적 초기화&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;변수가 선언되거나 생성되자마자 초기화&lt;/li&gt;
  &lt;li&gt;가능하다면 선언문에서 초기화하는 것이 좋다.
    &lt;ul&gt;
      &lt;li&gt;선언문에 필드를 초기화할 수 없다면 생성자에서 초기화
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/24/implementation_patterns_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/24/implementation_patterns_02-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 01</title>
        <description>&lt;h1 id=&quot;class&quot;&gt;Class&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;객체지향프로그래밍
    &lt;ul&gt;
      &lt;li&gt;클래스: 비슷한 성질을 가진 것을 총칭&lt;/li&gt;
      &lt;li&gt;객체: 클래스가 구체화된 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클래스 관련 패턴
    &lt;ul&gt;
      &lt;li&gt;클래스: “특정 데이터들은 함께 사용하는데 그에 관련된 로직은 이 것이다.” 라고 이야기하고 싶을 때 사용&lt;/li&gt;
      &lt;li&gt;단순한 상위클래스 이름: 클래스 계층에서 상위에 위치하는 클래스 이름은 단순하게&lt;/li&gt;
      &lt;li&gt;한정적 하위클래스 이름: 상위클래스와의 유사점과 차이점이 분명히 드러나는 이름을 짓는다.&lt;/li&gt;
      &lt;li&gt;추상 인터페이스: 인터페이스와 구현을 분리&lt;/li&gt;
      &lt;li&gt;인터페이스: 자주 변하지 않는 추상 인터페이스에는 자바의 interface 를 사용&lt;/li&gt;
      &lt;li&gt;버전 인터페이스: 하위 인터페이스를 사용해 기존 인터페이스를 안전하게 확장&lt;/li&gt;
      &lt;li&gt;추상 클래스: 자주 바뀔 것 같은 추상 인터페이스에는 추상 클래스 사용&lt;/li&gt;
      &lt;li&gt;값 객체: 산술 값처럼 동작하는 객체를 사용&lt;/li&gt;
      &lt;li&gt;특화: 관련된 연산 사이의 유사점 및 차이점을 분명하게 나타낸다.&lt;/li&gt;
      &lt;li&gt;하위 클래스: 1차원적 변화는 하위클래스를 사용해서 표현&lt;/li&gt;
      &lt;li&gt;구현자: 연산 내용이 바뀌었다면 기존 메소드를 오버라이드해서 사용&lt;/li&gt;
      &lt;li&gt;내부 클래스: 클래스 내부에서 유용하게 사용할 수 있는 코드를 모아 전용 클래스로 사용&lt;/li&gt;
      &lt;li&gt;인스턴스별 행동: 인스턴스에 따라 로직에 변화를 줌&lt;/li&gt;
      &lt;li&gt;조건문: 명시적 조건에 따라 로직에 변화를 줌&lt;/li&gt;
      &lt;li&gt;위임: 여러 종류의 객체 중 하나에 위임해서 로직에 변화를 줌&lt;/li&gt;
      &lt;li&gt;플러그인 선택자: 리플렉션을 이용한 메소드 호출로 로직에 변화를 줌&lt;/li&gt;
      &lt;li&gt;익명 내부 클래스: 필요한 메소드에서 한두 개의 메소드만 오버라이드하는 객체를 만들어서 사용&lt;/li&gt;
      &lt;li&gt;라이브러리 클래스: 마땅히 들어갈 곳이 없는 기능들을 묶어 정적 메소드로 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;class-사용&quot;&gt;Class 사용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;클래스를 사용하는 기본 이유는 &lt;strong&gt;데이터가 로직에 비해 빈번하게 변화하기 때문이다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;로직과 데이터가 함께 사용되며, 로직은 데이터에 비해 변화율이 낮다.&lt;/li&gt;
      &lt;li&gt;내부의 데이터는 관련 로직에 의해 변화하며, 각 데이터들의 변화율은 비슷하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;효과적인 프로그래밍을 위해, 로직을 클래스 단위로 어떻게 구성해야 하는지 또는 로직 사이의 차이점을 어떻게 효과적으로 표현하는지 알아야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;단순한-상위클래스-이름&quot;&gt;단순한 상위클래스 이름&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;은유를 통해 단어 하나만으로 여러 연상작용을 통해 여러 관련 정보와 내포된 의미를 전달할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;한정적-하위클래스-이름&quot;&gt;한정적 하위클래스 이름&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;하위클래스의 이름은 상위클래스와의 유사점과 차이점을 나타내야 한다.
    &lt;ul&gt;
      &lt;li&gt;어느 정도 간결성은 포기하더라도, 표현성을 택하는 것이 좋다.&lt;/li&gt;
      &lt;li&gt;이름은 가장 유사한 상위클래스의 이름을 바탕으로 짓는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;하위클래스가 상위클래스의 매커니즘만 빌려 사용하고, 그 자체로 상위클래스와 같이 중요한 위치를 지니면 단순한 이름을 짓는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;추상-인터페이스&quot;&gt;추상 인터페이스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스: 구현이 빠진 여러 연산의 집합
    &lt;ul&gt;
      &lt;li&gt;인터페이스 추가에는 비용이 발생한다.&lt;/li&gt;
      &lt;li&gt;인터페이스를 통해 &lt;strong&gt;유연성을 얻을 수 있을 때&lt;/strong&gt; 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인터페이스&quot;&gt;인터페이스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바의 interface: 다중 상속의 유연성을 제공하면서도, 복잡성과 모호성을 갖고 있지 않은 균형 잡힌 메커니즘
    &lt;ul&gt;
      &lt;li&gt;interface 자체를 바꾸는 것은 쉽지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터페이스의 이름
    &lt;ul&gt;
      &lt;li&gt;인터페이스를 구현이 빠진 클래스로 보는 경우, 상위 / 하위클래스의 이름을 짓는 것처럼 짓는다.&lt;/li&gt;
      &lt;li&gt;구현클래스의 이름을 간결하게 짓는 것이 커뮤니케이션에 도움이 되는 경우, 인터페이스의 이름은 &lt;strong&gt;“I”&lt;/strong&gt; 로 시작하게 지을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;추상-클래스&quot;&gt;추상 클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;추상 인터페이스와 실제 구현의 차이를 나타내는 다른 방법은 추상 클래스를 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추상 클래스와 자바의 interface 사용의 장단점&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;인터페이스 수정의 용이성과 단일 클래스가 여러 인터페이스 지원 여부&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;자바 interface 수정 시, 그 것을 구현한 모든 클래스도 따라 고쳐야 한다.
        &lt;ul&gt;
          &lt;li&gt;추상 클래스는 이런 문제가 없이, 기존 설계에 대한 변경 없이 새로운 연산을 얼마든지 추가 가능하다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;추상 클래스의 단점은 각 클래스가 단 1개의 상위클래스만 지정 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;버전-인터페이스&quot;&gt;버전 인터페이스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스를 바꾸고 싶은데 바꿀 수 없는 경우 버전 인터페이스 사용
    &lt;ul&gt;
      &lt;li&gt;새로운 인터페이스를 기존 인터페이스로부터 상속받아 새로운 연산 추가 가능&lt;/li&gt;
      &lt;li&gt;인터페이스 변형에는 별도의 로직이 필요
        &lt;ul&gt;
          &lt;li&gt;새로운 인터페이스가 많아진다는 것은 별도의 로직도 많이 필요 -&amp;gt; 설계를 수정할 때가 된 신호&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReversibleCommand&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recentCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReversibleCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ReversibleCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downcasted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReversibleCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;downcasted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;undo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;값-객체&quot;&gt;값 객체&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;함수형 스타일의 연산: &lt;strong&gt;상태를 변화시키지 않으며 새로운 값을 생성&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;일시적이더라도 고정적인 상황을 표현하고자 할 때 함수형 스타일, 값 객체 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상황이 변하는 경우라면 state를 두는 것이 좋다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;값 객체 구현
    &lt;ul&gt;
      &lt;li&gt;생성자에서만 모든 필드를 설정할 뿐, 다른 경로를 통해서는 필드 값을 변경해서는 안된다.&lt;/li&gt;
      &lt;li&gt;값 객체를 다루는 연산은 언제나 새로운 객체를 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;하위클래스&quot;&gt;하위클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;적절한 메소드를 오버라이드해서 사용할 경우 기존 연산과 다른 변형을 만들어낼 수 있다.&lt;/li&gt;
  &lt;li&gt;하위클래스 사용의 문제점
    &lt;ul&gt;
      &lt;li&gt;되돌리기가 쉽지 않음&lt;/li&gt;
      &lt;li&gt;하위클래스를 이해하기 위해 상위클래스도 이해해야 함&lt;/li&gt;
      &lt;li&gt;하위클래스가 상위클래스 세부 구현 특성에 의존할 수 있으므로 상위클래스 수정이 위험&lt;/li&gt;
      &lt;li&gt;상속 계층이 복잡해지면 모든 문제가 심화&lt;/li&gt;
      &lt;li&gt;동적으로 변화하는 로직을 나타낼 수 없다.
        &lt;ul&gt;
          &lt;li&gt;변화하는 로직을 나타낼 경우, 조건문이나 위임을 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하위클래스의 올바른 사용
    &lt;ul&gt;
      &lt;li&gt;상위클래스의 로직을 여러 개의 메소드로 잘게 분할&lt;/li&gt;
      &lt;li&gt;메소드가 너무 크면 하위클래스에 코드를 복사해서 수정해야 한다.
        &lt;ul&gt;
          &lt;li&gt;이럴 경우 2개 클래스 사이의 의존성이 생긴다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;내부클래스&quot;&gt;내부클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 연산을 표현하기 위해 클래스가 필요한데, 따로 만들지 않을 경우, 내부에 작은 전용클래스를 사용&lt;/li&gt;
  &lt;li&gt;자바의 이너클래스는 외부클래스에 대한 정보를 전달받을 수 있다.
    &lt;ul&gt;
      &lt;li&gt;외부클래스의 인스턴스와 분리된 내부클래스를 사용하려면 static으로 선언&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;인스턴스별-행위&quot;&gt;인스턴스별 행위&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;모든 클래스의 인스턴스들은 보통 같은 로직을 공유한다.
    &lt;ul&gt;
      &lt;li&gt;인스턴스 별로 다른 행동을 수행하게 할 경우, 특정 인스턴스의 행동을 이해하기 위해 실례를 보거나 데이터의 흐름을 분석해야 한다.&lt;/li&gt;
      &lt;li&gt;코드를 쉽게 이해시키기 위해서는 인스턴스 별 행동을 지양&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;조건문&quot;&gt;조건문&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;가장 단순한 인스턴스 별 행동의 형태는 &lt;strong&gt;if&lt;/strong&gt; 문이나 &lt;strong&gt;switch&lt;/strong&gt; 문을 사용
    &lt;ul&gt;
      &lt;li&gt;인스턴스 별 행동을 지원하면서도 모든 로직이 하나의 클래스에 들어있다.&lt;/li&gt;
      &lt;li&gt;수행 경로가 다양하면 결함 발생률이 높음.
        &lt;ul&gt;
          &lt;li&gt;조건문이 많으면 많을수록 프로그램의 안정성이 떨어진다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;RECTANGLE:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OVAL:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;TEXT:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같은 로직에서 새로운 조건을 추가하면 기존 코드에 문제가 발생하는 위험을 감수하고 직접 수정해야 한다.
상위 클래스일 경우, 하위 클래스를 사용하는 사람들은 변경 내용을 모두 공유받아야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;조건문을 지양하기 위해 하위클래스 사용이나 위임을 사용할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;중복되는 조건부 로직이나 분기문의 결과에 따라 로직이 달라지는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2017-05-24-implementation_patterns_01/00.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;위임&quot;&gt;위임&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;각 인스턴스에서 다른 로직을 수행하는 방법으로 위임이 있다.&lt;/li&gt;
  &lt;li&gt;위임: 몇 가지 객체 중 하나를 선택하여 작업을 미루는 것
    &lt;ul&gt;
      &lt;li&gt;공통 사용 로직: 위임클래스를 참조하는 클래스에서 구현&lt;/li&gt;
      &lt;li&gt;변형 로직: 여러 위임클래스에서 각각 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스 별 행동을 지원할 뿐만 아니라, 코드 공유에도 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mouseDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getTool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;SELECTING:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;CREATEING:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 코드는 새로운 조건이 발생할 경우 코드를 수정해야하고, 비슷한 분기문이 다른 메소드에도 있을 경우 같이 변경해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mouseDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getTool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mouseDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;위 코드와 같이 위임을 통해 코드에 유연성을 부여할 수 있다. 새로운 조건이 발생할 경우 기존 코드 수정없이, 위임 객체를 하나 더 생성하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;익명-내부클래스&quot;&gt;익명 내부클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;한 곳에서만 사용되는 클래스를 생성해서 일부 메소드를 오버라이드한 후, 지역적으로만 사용&lt;/li&gt;
  &lt;li&gt;효율적으로 사용하려면, API가 매우 간단하거나 상위 클래스가 대부분의 구현을 담당하고 있어서 쉽게 익명 내부클래스를 구현할 수 있어야 한다.
    &lt;ul&gt;
      &lt;li&gt;별도로 테스트하기가 어려우므로, 복잡한 로직에 적합하지 않다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;라이브러리-클래스&quot;&gt;라이브러리 클래스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 객체에도 어울리지 않는 기능은 빈 클래스를 만들어서 정적 메소드로 구현하여 라이브러리 클래스로 생성
    &lt;ul&gt;
      &lt;li&gt;메소드가 많아질 경우, 객체 지향 프로그래밍의 장점을 잃으므로, 가능하다면 라이브러리 클래스를 객체로 변환하는 것이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/24/implementation_patterns_01-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/24/implementation_patterns_01-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Implementation Patterns 00</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;code를-통한-커뮤니케이션의-단계&quot;&gt;Code를 통한 커뮤니케이션의 단계&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;생각을 하며 프로그래밍하기
    &lt;ul&gt;
      &lt;li&gt;본능에 의해 코딩하는 것을 멈추고 내가 어떤 생각을 하고 있는지 살펴보는 여유를 가지는 것이다.
        &lt;ul&gt;
          &lt;li&gt;어떤 기능이 왜 특정 객체에 있어야 하는지?&lt;/li&gt;
          &lt;li&gt;특정 메소드의 이름을 어떻게 지었는지?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다른 사람들의 중요성을 인정
    &lt;ul&gt;
      &lt;li&gt;커뮤니케이션이 가능한 코드를 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다른 사람을 위한 프로그램을 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/programming/2017-05-23-implementation_patterns_00/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;patterns&quot;&gt;Patterns&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로그래머가 일상적이고 반복적인 작업을 짧은 시간에 마치고, 진정 독창적인 문제에 더 많은 시간을 투입할 수 있다면 좀더 효율적인 프로그래밍이 가능할 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프로그램-작성시-적용되는-일반적인-법칙&quot;&gt;프로그램 작성시 적용되는 일반적인 법칙&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;프로그램을 새로 짜는 경우보다는 기존 프로그램을 읽는 경우가 많음&lt;/li&gt;
  &lt;li&gt;프로그램에 있어 &lt;strong&gt;완성&lt;/strong&gt; 은 없음. 초기 개발보다는 수정하는데 들어가는 노력이 더 큼&lt;/li&gt;
  &lt;li&gt;프로그램 구조는 몇 가지 상태와 제어 흐름 개념으로 결정&lt;/li&gt;
  &lt;li&gt;프로그램을 읽는 사람은 개념과 더불어 세부 사항까지 이해해야 함
    &lt;ul&gt;
      &lt;li&gt;세부 사항을 이해해야 전체 개념에 대한 그림을 그릴 수 있고, 전체 개념을 이해해야 세부적인 구현 내용을 이해할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;패턴은 이러한 프로그램 사이의 공통점을 기반으로 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;패턴의-적용&quot;&gt;패턴의 적용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;모든 프로그래머는 루프를 어떻게 작성해야할지 결정해야 한다.
    &lt;ul&gt;
      &lt;li&gt;이 질문에 대한 답은 어느 정도 윤곽이 잡힌 상태로, 순수하게 기술적인 문제만 남음&lt;/li&gt;
      &lt;li&gt;루프는 읽기 쉽고, 작성하기 쉬어야 하며, 효율적이어야 할 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이러한 일련의 사항들을 고려하는 것이 패턴의 시작이다. 패턴은 반복적으로 접하게 되는 문제에 대한 해결책을 제시해준다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;패턴은 프로그래머로 하여금 좀 더 재미있고, 독창적인 일에 집중할 수 있도록 도와준다.
    &lt;ul&gt;
      &lt;li&gt;패턴을 적용함으로써, 문제에 대한 해결을 빠르고 쉽게 할 수 있으며 이를 통해 시간과 에너지를 줄일 수 있기 때문이다.&lt;/li&gt;
      &lt;li&gt;패턴은 반복적으로 일어나는 문제에 대한 합리적인 해결책을 제공해준다.
        &lt;ul&gt;
          &lt;li&gt;각 패턴은 프로그래밍에서 발생하는 공통적인 문제와, 문제에 영향을 미치는 요소, 만족스런 해결책을 얻을 수 있게 하는 조언을 묶어놓은 것이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;패턴은 절대적인 진리가 아니므로, 사람의 의사 결정을 돕는 도구 정도로 생각하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;프로그래밍-이론&quot;&gt;프로그래밍 이론&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;아무리 많은 패턴을 알고 있더라도, 프로그래밍을 하면서 생기는 모든 상황을 커버할 수는 없다.
    &lt;ul&gt;
      &lt;li&gt;이를 위해 프로그래밍 이론을 통하여 새로운 문제가 발생하더라도 해결책을 모색할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;각 패턴의 배경에는 어느 정도 이론이 깔려 있고, 실제 프로그래밍할 때는 이 이론 외에 결정 사항에 영향을 미치는 많은 요소가 있다.
    &lt;ul&gt;
      &lt;li&gt;여기서는 원칙과 가치로 나눌 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;가치&quot;&gt;가치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;모든 프로그래밍에 적용되는 주제&lt;/li&gt;
  &lt;li&gt;프로그램일 잘 짜는 사람은 타인과의 &lt;strong&gt;커뮤니케이션&lt;/strong&gt; 을 중요시하고, 코드의 과도한 복잡성을 피함으로써 &lt;strong&gt;단순성&lt;/strong&gt; 을 추구하며 &lt;strong&gt;유연성&lt;/strong&gt; 있는 코드를 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;커뮤니케이션&quot;&gt;커뮤니케이션&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;개발자가 &lt;strong&gt;코드를 쉽게 이해하고, 수정하고, 사용할 수 있다면&lt;/strong&gt;, 그 코드는 개발자와 커뮤니케이션을 하고 있다고 이야기 할 수 있다.&lt;/li&gt;
  &lt;li&gt;타인을 고려해서 프로그램 작성
    &lt;ul&gt;
      &lt;li&gt;코드가 좀 더 이해하기 쉽고 깔끔해지며, 더 효율적이 되고 생각은 명확해진다.&lt;/li&gt;
      &lt;li&gt;새로운 관점에서 코드를 바라보게 되고, 스트레스가 줄어들며, 다른 사람도 볼 만한 코드가 만들어진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;도널드 크누쓰는 프로그램을 책처럼 읽을 수 있어야 한다고 주장한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;경제적인 효과
    &lt;ul&gt;
      &lt;li&gt;소프트웨어 비용의 대부분은 소프트웨어가 개발된 후에 발생&lt;/li&gt;
      &lt;li&gt;이해하기 쉬운, &lt;strong&gt;커뮤니케이션을 하고 있는&lt;/strong&gt; 코드를 작성한다면 개발 비용을 줄일 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;단순성&quot;&gt;단순성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램의 &lt;strong&gt;복잡도를 낮추면 프로그램을 읽고 사용하고 수정하는 사람들이 프로그램을 빠르게 이해할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;프로그램을 최대한 단순화하고 의미 없는 코드는 제거하라.&lt;/li&gt;
  &lt;li&gt;설계시에도 과도한 요소는 모두 빼고, 요구 사항을 분석해서 꼭 필요한 사항만을 뽑아내라.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;유연성&quot;&gt;유연성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로그램이 발전하는 방향으로 유연성을 갖추어야 함.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;프로그램 수정은 가급적 쉬워야 하므로, 추측에 의거하여 유연성을 부여하는 것보다는 단순성을 유연하게 적용 후 테스트를 철저하기 수행하는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;유연성이 있으면서도 &lt;strong&gt;당장 이득을 얻을 수 있는 패턴을 사용할 것&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;과도하게 유연성을 적용하면 코드의 복잡도를 증가시킨다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;원칙&quot;&gt;원칙&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;가치처럼 언제나 적용되는 것은 아니나, 많은 패턴에서 사용된다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;항상 중요하지만 적용하기 어려운 가치와, 적용법은 명확하지만 조금은 지엽적인 패턴 사이의 가교 역할을 수행한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;특정 문제에 어떤 패턴도 적용할 수 없는 경우나, 두 개의 패턴은 하나를 선택해야할 경우 원칙을 정함으로써 해결할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;원칙을 이해하고 있다면, 각 패턴의 세부 내용 뿐만 아니라 패턴을 사용하는 근본적인 이유에 대해 알 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;지역적-변화&quot;&gt;지역적 변화&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;코드를 수정할 때, 함께 바꾸어야 하는 부분을 최소화하라.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로그램의 어떤 부분을 수정한 것이 다른 부분에서 문제를 일으킨다면 프로그램 수정에 대한 비용이 커진다.&lt;/li&gt;
      &lt;li&gt;지역적 변화만 일으키는 코드는 커뮤니케이션이 쉽다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;구현 패턴을 사용하는 중요한 이유는 프로그램 수정 이유를 낮추기 위함인데, 이 지역적 변화의 원칙은 여러 패턴의 근간이 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;최소-중복&quot;&gt;최소 중복&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;중복된 코드가 많으면 많을수록 코드 수정은 어려워진다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;프로그램을 여러 작은 부분으로 나누어 코드의 중복을 최대한 피한다.
    &lt;ul&gt;
      &lt;li&gt;가급적 짧은 구문, 짧은 메소드 작성&lt;/li&gt;
      &lt;li&gt;작은 객체, 작은 패키지로 분할&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동일한 표현, 유사한 부분, 다른 부분을 명확히 표현&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;중복은 불가피하게 피하기가 어려울 수 있으므로 절대로 피해야 할 요소로 보기보다는, 코드 수정 비용을 높이는 위험요소로 생각하는 것이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;로직과-데이터의-결합&quot;&gt;로직과 데이터의 결합&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;데이터와 그 데이터를 처리하는 로직을 가급적 밀접하게 배치하라.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;프로그램 수정시, 데이터와 로직이 함께 있다면 수정하더라도 그 영향이 일정 영역에 머물게 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;개방폐쇄원칙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;대칭성&quot;&gt;대칭성&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램에서의 대칭성&lt;/li&gt;
  &lt;li&gt;하나의 아이디어를 프로그램 전체에서 &lt;strong&gt;일관된 방식으로 표현&lt;/strong&gt;하는 통일성&lt;/li&gt;
  &lt;li&gt;대칭성에 따라 일관된 방식으로 표현하면, 코드 중복이 발생할 경우 하나의 구현으로 통합하기 쉬움&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;선언적-표현&quot;&gt;선언적 표현&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;수행 순서가 중요하거나 조건부 구문이 없는 일반 구문의 경우, Java Annotation 등을 통한 선언적 표현을 통해 코드를 작성하는 것이 이해하기가 쉽다.
    &lt;ul&gt;
      &lt;li&gt;명령형 프로그래밍은 이해하기 위해서 수행 흐름을 따라가야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;변화율&quot;&gt;변화율&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;로직과 데이터를 함께 관리하고, &lt;strong&gt;변화율이 다른 로직과 데이터는 분리&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;하나의 객체에 있는 모든 필드는 가급적 함께 변해야 한다.
        &lt;ul&gt;
          &lt;li&gt;특정 메소드가 수행될 때만 사용하는 필드는 그 메소드의 지역변수로 사용&lt;/li&gt;
          &lt;li&gt;다른 필드와는 독립적인 &lt;strong&gt;두 개의 서로 의존적인 필드가 있다면 별도의 도우미 객체에 넣는 것이 좋다.&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;setAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 객체의 value와 currency가 서로 의존적인 필드라면 다음과 같이 묶어주는 것이 좋다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setAmount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;동기유발&quot;&gt;동기유발&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;소프트웨어는 전체 비용을 줄이는 방향으로 설계되어야 한다.
    &lt;ul&gt;
      &lt;li&gt;전체 비용 = 개발 비용 + 유지 비용&lt;/li&gt;
      &lt;li&gt;유지 비용 = 이해 비용 + 수정 비용 + 테스트 비용 + 설치 비용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초기 개발 비용에 많이 투자하는 것은 보통 전체 비용을 절감하지는 못한다.
    &lt;ul&gt;
      &lt;li&gt;미래에 코드가 어떻게 수정될 지 알 수가 없으므로, 아무리 고민을 하더라도 모든 사항에 대응할 수 있는 완벽한 코드를 짜는 것은 불가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;미래에 코드를 쉽게 확장할 수 있고, 수정이 쉬운 깔끔한 코드를 추구하면서 당장 얻을 수 있는 이득에 초첨을 맞추도록 하라.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;커뮤니케이션하기 쉬운 코드&lt;/strong&gt;를 작성함으로써, 유지 비용을 줄일 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;패턴을 사용하는 버릇을 들이면, 읽고 이해하고 수정하기 쉬운 코드를 작성할 수 있을 뿐만 아니라, 더 빠르고 자연스럽게 코드를 짤 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/programming/2017/05/23/implementation_patterns_00-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/programming/2017/05/23/implementation_patterns_00-post.html</guid>
        
        <category>design patterns</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Spring Boot Property Validation</title>
        <description>&lt;h1 id=&quot;spring-boot-property-validation&quot;&gt;Spring Boot Property Validation&lt;/h1&gt;

&lt;p&gt;application.properties 나 application.yml을 통해 property들을 설정할 때, 각 profile별로 값을 제대로 설정했는지 알고 싶을 때가 있다. 가령 &lt;strong&gt;“alpha”&lt;/strong&gt; 프로파일에는 잘 되던 것이 다른 프로파일일 때는 잘 안되서 확인해봤더니 필요한 property를 빼먹고 설정하지 않을 때가 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  profiles: alpha

property:
  option_0: option_0_value
  option_1: option_1_value

...
---

spring:
  profiles: beta

property:
  option_0: option_0_value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;strong&gt;option_1&lt;/strong&gt; property를 추가하고 배포할 때, &lt;strong&gt;beta&lt;/strong&gt; 프로파일에서 해당 property를 추가하지 않아서 문제를 일으킬 것이다.&lt;/p&gt;

&lt;p&gt;배포 중에 문제를 확인하여 고치지 말고 Spring Boot에서 지원하는 &lt;strong&gt;validation check&lt;/strong&gt; 를 통해 테스트 중에 property들이 제대로 설정했는지 테스트를 할 수 있으면 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;configurationproperties-validation&quot;&gt;ConfigurationProperties Validation&lt;/h2&gt;

&lt;p&gt;Spring Boot Reference Guide의 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-validation&quot;&gt;24.7.4 @ConfigurationProperties Validation&lt;/a&gt; 확인해보면 알겠지만 Spring Boot와 Hibernate, javax.validation 에서 제공하는 annotation을 통해 property를 설정했는지 안했는지 체크할 수 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 application.yml 에 property들을 설정했다고 해보자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mybatis:
  config-location: classpath:db/mybatis-config.xml
  mapper-locations: classpath:db/mapper/*.xml
  type-aliases-package: com.example.dao
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 property의 validation을 체크하기 위해 Spring Boot Reference Guide, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-typesafe-configuration-properties&quot;&gt;24.7 Type-safe Configuration Properties&lt;/a&gt; 절에 나와 있는 것 처럼 다음과 같이 클래스를 정의해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.context.properties.ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mybatis&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MybatisProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapperLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeAliasesPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위의 예에서는 lombok의 &lt;strong&gt;@Data&lt;/strong&gt; annotation을 통해 &lt;strong&gt;getter / setter&lt;/strong&gt; 메소드를 자동 생성하게 한다. &lt;strong&gt;Getter / setter&lt;/strong&gt; 메소드를 생략할 수 있는 경우가 있긴 하지만 일단 여기서는 lombok을 통해 추가해주었다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@ConfigurationProperties&lt;/strong&gt; annotation을 통해서 prefix에 &lt;strong&gt;“mybatis”&lt;/strong&gt; 를 줌으로써 Spring Boot가 자동으로 property를 각 필드에 적절한 값을 설정하도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 다음과 같이 Hibernate의 &lt;strong&gt;@NotEmpty&lt;/strong&gt; annotation, 그리고 Spring Boot의 &lt;strong&gt;@Configuration, @Validated&lt;/strong&gt; annotation을 통해 validation을 체크할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hibernate.validator.constraints.NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.context.properties.ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.validation.annotation.Validated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mybatis&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Validated&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MybatisProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapperLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeAliasesPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.context.SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.toast.cloud.image.properties.MybatisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlphaPropertyValidationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MybatisProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mybatisProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 테스트 클래스에서 해당 property 클래스 오브젝트를 주입받고 테스트를 진행할 때, 만약 실수로 property 설정하는 것을 잊었다면 테스트 단계에서 걸러낼 수 있을 것이다. 만약 type-aliases-package property를 실수로 설정하지 않았다면 다음과 같이 테스트 과정에서 fail이 발생하는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-13-spring_boot_property_validation/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;좀 더 복잡한 예를 살펴보자.
다음과 같이 property가 중첩되어 정의되어 있으면 어떻게 클래스를 정의할까?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/sample_db?useUnicode=true&amp;amp;characterEncoding=UTF-8
    username: sample
    password: sample1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예에서는 spring - datasource - … 단계로 property가 중첩되어 있다. 이렇게 property가 중첩되어 정의되어 있으면 똑같이 클래스를 정의할 때도 &lt;strong&gt;static 이너 클래스를 추가로 정의하고 해당 클래스의 오브젝트를 필드로 정의해야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.validation.Valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.hibernate.validator.constraints.NotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.context.properties.ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.validation.annotation.Validated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Validated&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;driverClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;@NotEmpty&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 예에서 datasource 가 중첩되어 있는데 해당 부분을 static 이너 클래스로 정의하고, 안에 필드로써 property들을 정의하였다. 그리고 해당 클래스의 오브젝트를 필드로 정의하고, javax.validation의 &lt;strong&gt;@Valid&lt;/strong&gt; annotation을 추가해주면 된다.&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/13/spring_boot_property_validation-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/13/spring_boot_property_validation-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Monitoring Spring Boot App with Actuator</title>
        <description>&lt;h1 id=&quot;monitoring-spring-boot-application-with-actuator&quot;&gt;Monitoring Spring Boot application with Actuator&lt;/h1&gt;

&lt;p&gt;Spring Boot에서 제공하는, 운영 중인 서버 애플리케이션을 모니터링하고, 관리할 수 있게 해주는 모듈인 Actuator에 대한 간략 설명 및 사용법, 그리고 이를 활용하여 web ui로 확인할 수 있는 &lt;strong&gt;spring-boot-admin&lt;/strong&gt; 에 대한 내용을 다룬 포스트이다.&lt;/p&gt;

&lt;p&gt;기본적으로 Actuator롤 사용하면, 제공하는 endpoint URL을 통해 서버 애플리케이션의 프로파일이나 등록된 빈 정보, 현재 상태를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;actuator-endpoints&quot;&gt;Actuator Endpoints&lt;/h2&gt;

&lt;p&gt;이 절에서 다루는 내용은 Spring Boot Reference Guide에서 설명한 내용을 위주로 다루며, 실제 endpoint URL을 통해 접속했을 때 어떤 정보를 확인할 수 있는지 다룬 것이다.&lt;/p&gt;

&lt;p&gt;Spring Boot에서 제공하는 기본 endpoint 리스트는 다음과 같다. 물론 개발자가 임의로 추가한 &lt;strong&gt;‘custom endpoint’&lt;/strong&gt; 도 만들 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ID&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;actuator&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;현재 애플리케이션에서 제공 중인 endpoint들의 URL을 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;autoconfig&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Spring Boot 애플리케이션이 시작하면서 자동 설정한 정보와 성공 / 실패 내역 및 이유를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;beans&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;현재 애플리케이션에 등록된 스프링 빈들의 리스트를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;configprops&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;@ConfigurationProperty 로 등록된 모든 값들을 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dump&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;운영 중인 애플리케이션의 스레드 덤프를 진행한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;env&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;애플리케이션의 모든 프로퍼티를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;health&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;현재 서버 상태, 디스크나 DB 정보를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;info&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;서버 애플리케이션의 정보를 확인한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;loggers&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;각 컴포넌트들의 configuration 정보, 로그 레벨을 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;metrics&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;메모리 상태나 스레드 개수, 클래스 정보 등을 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mappings&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mapping 된 URL path 및 빈, HTTP request method 등을 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;trace&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;최근 애플리케이션에 요청된 100개의 HTTP request를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
Endpoint를 통해 확인할 때는 json 형식으로 정보를 리턴하므로, 만약 크롬 브라우저를 사용한다면 &lt;strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=ko&quot;&gt;JSON Viewer&lt;/a&gt;&lt;/strong&gt; 를 설치하자. 이 플러그인을 통해 json 형식의 데이터도 쉽게 확인할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;actuator&quot;&gt;actuator&lt;/h3&gt;

&lt;p&gt;이 endpoint을 사용하기 위해서는 다음과 같이 &lt;strong&gt;Spring Boot HATEOAS&lt;/strong&gt; 의 의존성을 추가해주어야 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-hateoas&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;hateoas-hypermedia-as-the-engine-of-application-state&quot;&gt;&lt;strong&gt;HATEOAS (Hypermedia As The Engine Of Application State)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;HATEOAS는 RESTful API를 사용하는 클라이언트가 전적으로 서버에 의해 동적으로 상호작용을 할 수 있게 해준다. 쉽게 말하면 클라이언트가 서버에 요청할 때, 서버는 &lt;strong&gt;요청에 의존되는 URI를 HTTP response에 포함시켜 반환할 수 있다.&lt;/strong&gt;
예를 들어, 사용자 정보를 입력(POST) 하는 요청 후, 사용자를 조회(GET), 수정(PUT), 삭제(DELETE) 할 수 있는 URI를 동적으로 알려주게 되는 것이다. 이렇게 동적으로 모든 요청에 의존되는 URI 정보를 제공해줄 때 다음과 같은 이점이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;요청 URI 정보가 변경되어도 클라이언트에서 동적으로 생성된 URI를 사용한다면, 클라이언트 입장에서는 URI 수정에 따른 코드 변경이 불필요하다.&lt;/li&gt;
  &lt;li&gt;URI 정보를 통해 의존되는 요청을 예측가능하게 한다.&lt;/li&gt;
  &lt;li&gt;기존 URI 정보가 아니라 resource까지 포함된 URI를 보여주기 때문에 reesource에 대한 확신을 갖게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;actuator endpoint는 actuator URI 요청에 따른 의존되는 URI(즉 다른 endpoint들)의 정보를 제공하기 위해 HATEOAS가 필요한 것이다.&lt;/p&gt;

&lt;p&gt;애플리케이션에서 제공 중인 endpoint들의 URL들을 다음과 같이 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;autoconfig&quot;&gt;autoconfig&lt;/h3&gt;

&lt;p&gt;이 endpoint를 통해 서버 애플리케이션이 시작될 때 자동 구성되는 요소들의 정보와 적용 혹은 미적용된 이유를 표시한다.
다음과 같이 condition 과 message를 통해 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;beans&quot;&gt;beans&lt;/h3&gt;

&lt;p&gt;이 endpoint는 현재 등록된 스프링 빈들의 타입이나 스코프 등의 정보를 제공한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;configprops&quot;&gt;configprops&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@ConfigurationProperties&lt;/strong&gt; annotation으로 생성한 property 값들을 보여준다. 이는 application.properties나 application.yml 에서 설정한 property 들도 포함된다. &lt;strong&gt;@ConfigurationProperties&lt;/strong&gt; annotation과 관련해서 Spring Boot Reference 관련 절을 살펴보자. &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties&quot;&gt;(Type-safe Configuration Properties)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dump&quot;&gt;dump&lt;/h3&gt;

&lt;p&gt;이 endpoint들을 통해 스레드 덤프를 진행하여, 현재 운영 중인 서버 애플리케이션에서 동작 중인 스레드들의 정보를 확인할 수 있다. 스레드 정보뿐만 아니라 stackTrace를 통해 dump 진행 당시의 스레드들의 스택 프레임 및 해당 메소드 정보까지 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;아래와 같이 DispatcherServlet의 doService 메소드가 doDispatch 메소드를 거쳐 HTTP request에 대해 핸들링하는 것을 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;env&quot;&gt;env&lt;/h3&gt;

&lt;p&gt;Spring Boot에서 설정된 property 부터 시작해서, 현재 운영 중인 서버의 시스템 환경변수나 JVM 까지 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/05.png&quot; alt=&quot;05.png&quot; /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;health&quot;&gt;health&lt;/h3&gt;

&lt;p&gt;다음과 같이 현재 서버 상태 및 디스크, DB 정보를 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;loggers&quot;&gt;loggers&lt;/h3&gt;

&lt;p&gt;루트 로깅 레벨 및 각 컴포넌트 별로 설정된 로깅 레벨들을 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;metrics&quot;&gt;metrics&lt;/h3&gt;

&lt;p&gt;현재 실행 중인 서버 애플리케이션의 다음과 같이 보여준다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/09.png&quot; alt=&quot;09.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각각의 게이지를 항목 별로 분류하면 다음과 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Prefix&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Garbage Collector&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gc.*&lt;/td&gt;
      &lt;td&gt;GC 발생 횟수나 GC를 수행하는데 걸린 시간을 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mem.*&lt;/td&gt;
      &lt;td&gt;애플리케이션에 할당된 메모리 용량과 여유 공간을 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Heap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;heap.*&lt;/td&gt;
      &lt;td&gt;현재 메모리 사용량을 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Class Loader&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;classes.*&lt;/td&gt;
      &lt;td&gt;JVM 클래스 로더로 로드, 언로드된 클래스 개수를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;System&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;processors, uptime, instance.uptime, systemload.average&lt;/td&gt;
      &lt;td&gt;프로세스 개수와 같은 시스템 정보나 가동시간, 평균 시스템 로드 등을 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Thread Pool&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;threads.*&lt;/td&gt;
      &lt;td&gt;스레드, 데몬 스레드 개수와, JVM이 시작된 이후 최대 스레드 개수를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data Source&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;datasource.*&lt;/td&gt;
      &lt;td&gt;datasource 커넥션 수를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tomcat Session&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;httpsessions.*&lt;/td&gt;
      &lt;td&gt;Tomcat의 활성화된 세션과 최대 세션 개수를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;counter.status.&lt;em&gt;, gauge.response.&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;애플리케이션에서 서비스한 HTTP 요청에 대해 다양한 게이지와 카운터를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mappings&quot;&gt;mappings&lt;/h3&gt;

&lt;p&gt;Actuator에서 제공하는 endpoint를 포함한 controller 매핑 정보를 확인할 수 있다. 어떤 HTTP 메소드 형식을 받는지, 또한 response로 어떤 타입을 리턴하는지 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;trace&quot;&gt;trace&lt;/h3&gt;

&lt;p&gt;이 endpoint를 통해 최근 요청된 HTTP request들의 정보를 100개까지 확인가능하다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/11.png&quot; alt=&quot;11.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-admin&quot;&gt;Spring Boot Admin&lt;/h2&gt;

&lt;p&gt;Actuator에서 제공하는 endpoint들로 애플리케이션을 모니터링할 수는 있지만 좀 더 보기 좋게 모니터링을 할 수 있다.
&lt;strong&gt;&lt;a href=&quot;https://github.com/codecentric/spring-boot-admin&quot;&gt;spring-boot-admin&lt;/a&gt;&lt;/strong&gt; 은 Spring Boot 애플리케이션을 심플한 web UI를 통해 모니터링을 할 수 있도록 도와준다. Actuator의 endpoint에서 제공하는 정보를 좀 더 쉽게 확인할 수 있도록 하는 것이다. &lt;strong&gt;&lt;a href=&quot;http://codecentric.github.io/spring-boot-admin/1.4.6/&quot;&gt;Reference Guide (1.4.6)&lt;/a&gt;&lt;/strong&gt; 도 제공하니 참고하도록 하자.&lt;/p&gt;

&lt;p&gt;먼저 다음과 같이 spring-boot-admin을 사용하기 위해 의존성을 추가하자.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;de.codecentric&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-admin-server&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;de.codecentric&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-admin-server-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4.6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;spring.boot.admin.url에 서비스 진행할 Spring Boot 애플리케이션의 주소를 포트번호 포함하여 설정한다. 밑의 예는 yml 파일을 통해 설정한 것이다.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;profiles&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:10080&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
그리고 main 메소드가 있는 Spring Boot 메인클래스에 다음과 같이 &lt;strong&gt;@EnableAdminServer&lt;/strong&gt; annotation을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;de.codecentric.boot.admin.config.EnableAdminServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAdminServer&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TemplateApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TemplateApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
여기까지 진행하였으면 &lt;strong&gt;spring.boot.admin.url&lt;/strong&gt; 에 설정된 URI를 통해 다음과 같이 spring-boot-admin page로 접속할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/12.png&quot; alt=&quot;12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
메인 페이지에서는 현재 실행 중인 애플리케이션의 상태를 확인할 수 있고 다음과 같이 상세 정보도 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/13.png&quot; alt=&quot;13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;

&lt;p&gt;현재 설정된 환경설정 변수 값이나 property들을 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/14.png&quot; alt=&quot;14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;logger&quot;&gt;Logger&lt;/h3&gt;

&lt;p&gt;컴포넌트 별로 현재 로깅 레벨을 UI를 통해 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/15.png&quot; alt=&quot;15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;threads&quot;&gt;Threads&lt;/h3&gt;

&lt;p&gt;현재 실행 중인 스레드들의 정보와 stackTrace를 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/16.png&quot; alt=&quot;16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;trace-1&quot;&gt;Trace&lt;/h3&gt;

&lt;p&gt;애플리케이션으로 요청된 HTTP request들을 타임라인으로 보여주고 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-12-spring_boot_actuator/17.png&quot; alt=&quot;17.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/12/spring_boot_actuator-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/12/spring_boot_actuator-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Kafka, How many topics are</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;원본글: &lt;a href=&quot;https://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/&quot;&gt;How to choose the number of topics / partitions in a Kafka Cluster?&lt;/a&gt;&lt;/p&gt;
  &lt;h1 id=&quot;how-to-choose-the-number-of-topics--partitions-in-a-kafka-cluster&quot;&gt;How to choose the number of topics / partitions in a Kafka Cluster?&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 제목에 대한 질문은 Apache Kakfa 를 사용하는 사용자들이 궁금해하는 것 중에 하나이다. 이 포스트에서는 이 질문에 대한 답변을 위해 몇 가지 중요한 issue 및 벤치마크 테스트 결과에 다룬다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;more-partitions-lead-to-higher-throughput&quot;&gt;More partitions lead to higher throughput&lt;/h2&gt;

&lt;p&gt;먼저 한 가지 알아두어야 할 것은 Kafka가 메시지를 주고 받기 위해 사용하는 topic과 partition 단위는 Kafka가 메시징을 주고 받는데 &lt;strong&gt;병렬적으로 처리할 수 있는 단위&lt;/strong&gt; 라는 것이다. Producer와 broker 사이드에서 메시지를 각 partition으로 보낼 때 이 것은 병렬적으로 처리된다. Kafka는 어느 특정 partition에 있는 메시지는 무조건 한 특정 consumer를 담당하는 스레드로 보내게 된다. 따라서 이 병렬 처리하는 정도는 &lt;strong&gt;partition의 개수에 따라 결정되는 것이다.&lt;/strong&gt; 일반적으로 한 Kafka cluster에 partition의 개수가 많으면 많을수록 throughput은 증가할 것이다.&lt;/p&gt;

&lt;p&gt;각 partition 마다 낼 수 있는 throughput은 어떻게 producer 및 consumer가 구현되었는지에 따라 다르다. Producer의 경우에는 메시지 압축 코덱이나, 일괄 처리되는 메시지 크기, replication의 정도 등일 수 있겠다. Consumer의 경우에는 얼마나 비즈니스 로직이 각 메시지를 빨리 처리하는가에 대해 달려 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Partition의 개수를 원하는 만큼 늘리는 것이 가능하다지만, 만약 key와 같이 사용한다면 좀 더 신경써야할 부분이 있다. 만약 key와 메시지를 같이 보낼 경우, Kafka는 key 값을 해싱하여 나온 partition id로 메시지를 보낸다. 이 것은 &lt;strong&gt;같은 key 값을 가지는 메시지는 항상 같은 consumer에 의해 처리된다는 것을 보장한다. (항상 같은 partition으로 갈 것이므로)&lt;/strong&gt; 이는 특정 consumer가 메시지를 보낸 순서대로 처리할 수 있도록 하지만, 만약 partition의 개수가 바뀐다면 rebalancing에 의해 더 이상 보장되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;more-partitions-requires-more-open-file-handles&quot;&gt;More partitions requires more open file handles&lt;/h2&gt;

&lt;p&gt;Kafka에서 한 broker에 있는 각 partition들은 파일 시스템 상에서 한 디렉토리로 매핑된다. 보통 그 디렉토리에는 인덱싱을 위한 파일과 실제 데이터를 위한 파일, 2개의 파일이 존재하게 된다. (Broker는 각 partition마다 그 2개의 파일들을 open하여 사용할 것이다.)&lt;/p&gt;

&lt;p&gt;그래서 만약에 partition의 개수를 늘리면 늘릴수록, 필요한 파일 디스크립터, 핸들의 개수가 많아지므로 OS가 지원하는 최대 개수를 확인해야 한다. 보통 Kafka cluster는 한 broker 마다 30,000개의 파일 디스크립터를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;more-partitions-may-increase-unavailability&quot;&gt;More partitions may increase unavailability.&lt;/h2&gt;

&lt;p&gt;Kafka는 broker 간에 &lt;strong&gt;replication을 지원함으로써 안정성, 고가용성을 제공한다.&lt;/strong&gt; 한 partition은 여러 개의 replica(복제본)을 가질 수 있는데 서로 다른 broker에 저장된다. &lt;strong&gt;그 중 하나의 replica는 leader라 정의하고 나머지 replica는 follower라 정의한다.&lt;/strong&gt; 내부적으로는 Kafka는 모든 replica 들을 자동으로 관리하고 sync를 맞춘다.&lt;/p&gt;

&lt;p&gt;만약 leader를 가지고 있는 한 broker가 fail이 나면, Kafka는 &lt;strong&gt;자동적으로 follower를 가지고 있는 broker 들 중에 하나를 골라 leader로 사용하여 계속적인 서비스가 되도록 한다.&lt;/strong&gt; 이 프로세스는 ZooKeeper안에서 관리되고 있는, 영향을 받는 partition에 대한 메타 정보를 업데이트하면서 진행된다.&lt;/p&gt;

&lt;p&gt;어느 한 broker가 shut down 되었을 때, 다른 replica를 가지는 follower를 leader로 정하는 것이 아주 빠르게 진행된다. 보통 leader가 변경되는 것은 거의 몇 밀리세컨드 안에 진행된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그런데 이는 partition의 개수에 따라 그 시간이 증가할 수 있다.&lt;/strong&gt; 만약 한 broker가 2000개의 partition을 가지고 있고 2개의 replica를 가지고 있다고 하면, 그 broker는 1000개의 leader를 가지고 있는 것이다. 만약 이 broker가 fail이 나면 1000개의 leader가 사용하지 못하는 상태가 될 것이다. 한 partition에 대해 leader를 변경하는 것이 5 밀리세컨드가 걸린다고 하면 1000개의 leader를 다시 지정하기 위해 5초가 걸린다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;more-partitions-may-increase-end-to-end-latency&quot;&gt;More partitions may increase end-to-end latency.&lt;/h2&gt;

&lt;p&gt;End-to-end latency는 producer에 의해 메시지가 partition을 통해 consumer에 의해 처리되는 시간을 말하는데, &lt;strong&gt;Kafka는 partition에 대해 복제가 완료된 상태여야만 consumer가 그 메시지를 partition으로부터 꺼내가도록 한다.&lt;/strong&gt; 디폴트로 한 스레드가 메시지 데이터를 복제하는 것을 담당한다. 이는 partition의 개수가 많으면 많을수록 복제를 위한 시간으로 인해 producer가 보낸 메시지를 consumer가 더 늦게 받아서 처리될 수 있다는 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;원본글: &lt;a href=&quot;http://tech.marksblogg.com/kafka-topic-latency.html&quot;&gt;Kafka producer latency with large topic counts.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;kafka-producer-latency-with-large-topic-counts&quot;&gt;Kafka producer latency with large topic counts.&lt;/h1&gt;

&lt;p&gt;이 절에는 topic의 개수에 따라 미치는 latency 측면에서 벤치마크를 진행한 것을 정리한 것이다. 사실 &lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-HowmanytopicscanIhave?&quot;&gt;Kafka FAQ&lt;/a&gt;에서는 많은 수의 topic을 가지는 것보다는 적은 개수의 큰 topic을 가지는 것을 권장한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kafka-up-and-running&quot;&gt;Kafka up and running&lt;/h2&gt;

&lt;p&gt;여기서는 8GB RAM 및 140GB SSD를 장착한 Ubuntu 15.10을 사용한 환경에서 테스트를 진행하였다.
이 테스트에서는 10만개의 4KB 크기의 메시지를 보내며 10번을 반복하였다. 여기서는 topic이 1개, 그리고 50,001개 / 120,001개일 경우에 테스트를 진행한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 topic을 생성하였다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/kafka-topics.sh \
    --zookeeper 127.0.0.1:2181 \
    --create \
    --partitions 1 \
    --replication-factor 1 \
    --topic main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;각 topic마다 partition을 하나로 주고, replication-factor도 하나로 주어 replication에 대해서는 고려하지 않기로 하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 다음 순으로 topic 수를 증가시킴으로써 50,001개 / 120,001개 일 때 테스트를 진행하였다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..50000&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;bin/kafka-topics.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; 127.0.0.1:2181 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;50001..120000&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;bin/kafka-topics.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--zookeeper&lt;/span&gt; 127.0.0.1:2181 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--create&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--partitions&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--replication-factor&lt;/span&gt; 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--topic&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트는 다음과 같이 진행한다.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..10&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
    echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
    bin/kafka-run-class.sh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        org.apache.kafka.clients.tools.ProducerPerformance &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        main &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        100000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        4096 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;acks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        bootstrap.servers&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;127.0.0.1:9092 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        buffer.memory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;67108864 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        batch.size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;128000
    sleep 5
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;benchmark-results&quot;&gt;benchmark results&lt;/h2&gt;

&lt;p&gt;다음과 같이 50,000개의 topic을 가질 때 latency의 평균 값이 topic이 1개일 때와 비슷한 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-11-kafka_how_many_topics/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/11/kafka_how_many_topics-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/11/kafka_how_many_topics-post.html</guid>
        
        <category>server programming</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>RabbitMQ and Apache Kafka monitoring</title>
        <description>&lt;h1 id=&quot;rabbitmq-and-apache-kafka-monitoring&quot;&gt;RabbitMQ and Apache Kafka monitoring&lt;/h1&gt;

&lt;p&gt;RabbitMQ와 Apache Kafka 모두 운영하기 위한 monitoring feature를 제공한다.
각 MQ를 위한 monitoring tool을 통해 현재 사용 중인 메시징 시스템의 정보나 사용자 관리, 큐 관리 등을 쉽게 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;이 포스트에서는 RabbitMQ 와 Apache Kafka의 monitoring tool을 통한 기본 운영법에 대해 간략한 내용을 담는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rabbitmq&quot;&gt;RabbitMQ&lt;/h2&gt;

&lt;p&gt;먼저 RabbitMQ management feature를 통해 어떻게 관리할 수 있는지 알아보자.&lt;/p&gt;

&lt;p&gt;RabbitMQ는 기본적으로 &lt;strong&gt;rabbitmqctl&lt;/strong&gt; 이라는 &lt;strong&gt;command line tool&lt;/strong&gt; 을 통해 노드의 상태 확인 및 관리할 수 있고, virtual host, 권한 설정도 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;rabbitmqctl-사용&quot;&gt;rabbitmqctl 사용&lt;/h3&gt;

&lt;p&gt;RabbitMQ를 설치했으면, &lt;strong&gt;rabbitmqctl [commands]&lt;/strong&gt; 를 통해 command를 수행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rabbitmqctl status&lt;/strong&gt; 를 통해 현재 RabbitMQ의 노드 상태를 터미널에서 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 rabbitmqctl을 사용하면 터미널에서 command 입력을 통해 RabbitMQ를 관리할 수 있다.
다음은 rabbitmqctl을 통해 사용할 수 있는 command 들 중 일부를 나타낸 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;status: 노드의 상태를 간략히 확인한다. 현재 running 중인 애플리케이션이나, 메모리 상태 등을 확인할 수 있다.&lt;/li&gt;
  &lt;li&gt;add_user {username} {password}: 계정 추가&lt;/li&gt;
  &lt;li&gt;delete_user {username} : 계정 삭제&lt;/li&gt;
  &lt;li&gt;set_user_tags {username} {tags…}: 태그 정보 설정, 이 command를 통해 특정 유저를 administrator 로 지정할 수 있다.&lt;/li&gt;
  &lt;li&gt;list_users: 현재 등록된 유저 계정 및 권한을 보여준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;rabbitmq_management-plugin-사용&quot;&gt;rabbitmq_management plugin 사용&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;rabbitmqctl&lt;/strong&gt; 은 터미널에서 사용하는 command line tool이라 관리자가 좀 더 쉽게 관리할 수 있도록 웹브라우저를 통해 관리할 수 있는 feature를 &lt;strong&gt;rabbitmq_management&lt;/strong&gt; 플러그인을 통해 지원한다.&lt;/p&gt;

&lt;p&gt;이를 사용하기 위해 RabbitMQ 설치 후 다음과 같이 management 플러그인을 설치하자. 플러그인 설치 후 RabbitMQ를 restart 해야 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmq-plugins enable rabbitmq_management
sudo service rabbitmq-server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음과 같이 웹브라우저를 통해 사용자 계정으로 로그인하기 위해 다음과 같이 관리자 계정을 설정한다.
guest 계정을 기본적으로 제공하기는 하지만 로그인을 하지는 못할 것이다. 따라서 일단은 &lt;strong&gt;rabbitmqctl&lt;/strong&gt; command를 통해 관리자 계정을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rabbitmqctl add_user dongho 1234
sudo rabbitmqctl set_user_tags dongho administrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 관리자 계정 등록 후, 웹 브라우저로 접속하면 &lt;strong&gt;(디폴트는 http://servier_ip:15672)&lt;/strong&gt; 로 접속하면 다음과 같은 화면이 나온다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 화면에서 아까 등록한 관리자 계정으로 로그인하면 다음과 같이 관리 페이지를 확인할 수 있을 것이다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 관리페이지를 살펴보면 현재 노드의 정보나 config, log path, 포트 번호를 확인할 수 있으며 다음과 같이 메시지 큐에 대한 정보도 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;apache-kafka&quot;&gt;Apache Kafka&lt;/h2&gt;

&lt;p&gt;이번에는 Apache Kafka를 통해 어떻게 monitoring을 할 수 있는지 알아보자.&lt;/p&gt;

&lt;p&gt;먼저 다음과 같이 &lt;strong&gt;Apache Zookeeper&lt;/strong&gt; 를 실행시켜야 한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zoo.cfg&lt;/strong&gt; 를 보면 알겠지만 포트번호가 &lt;strong&gt;2181&lt;/strong&gt; 로 되어 있다. Kafka를 monitoring 하기 위해 &lt;strong&gt;&lt;a href=&quot;https://github.com/yahoo/kafka-manager&quot;&gt;Yahoo Kafka Manager&lt;/a&gt;&lt;/strong&gt; 를 사용할 것인데 이 때 zookeeper의 port 번호를 요구한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 kafka 및 kafka-manager를 실행시키자. kafka-manager를 빌드하는 방법은 kafka-manager의 &lt;a href=&quot;https://github.com/yahoo/kafka-manager&quot;&gt;github 페이지&lt;/a&gt;를 확인하도록 하자.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 다음과 같이 kafka 및 kafka-manager를 실행시켰다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-server-start.sh -daemon config/server.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka를 실행할 때는 기본 server.properties를 통해 실행하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bin/kafka-manager -Dkafka-manager.zkhosts=localhost:2181 -Dconfig.file=conf/application.conf -Dhttp.port=8777
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;kafka-manager를 따로 실행해야하는데, 기본 configuration을 통해 실행하였으며 포트번호를 8777로 주었다. 또한 실행 중인 zookeeper의 포트번호를 설정해주어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 실행하고 &lt;strong&gt;localhost:8777&lt;/strong&gt; 로 접속하면 다음과 같이 kafka manager page를 확인할 수 있을 것이다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 메뉴에서 &lt;strong&gt;Add Cluster&lt;/strong&gt; 를 통해 클러스터를 생성할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성한 클러스터를 클릭해보면, broker나 topic, consumer 같은 정보를 확인하여 모니터링할 수 있도록 지원한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/09.png&quot; alt=&quot;09.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-06-rabbitmq_kafka_monitoring/10.png&quot; alt=&quot;10.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/06/rabbitmq_kafka_monitoring-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/06/rabbitmq_kafka_monitoring-post.html</guid>
        
        <category>server programming</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Comparison between RabbitMQ and Apache Kafka</title>
        <description>&lt;h1 id=&quot;comparison-between-rabbitmq-and-apache-kafka&quot;&gt;Comparison between RabbitMQ and Apache Kafka&lt;/h1&gt;

&lt;p&gt;사용자에게 최적의 서비스를 제공하기 위한 시스템을 구성하기 위해 선택하는 메시징 시스템의 선택은 간단하지가 않다. 각 메시징 시스템은 각자 자신의 고유한 특성을 가지고 있고 그 특성에 따라 구성된 시스템의 성능이나 안정성이 크게 달라질 수가 있다. 따라서 메시징 시스템의 선택은 모든 방면에 대해 고려하여 자신이 서비스할 시스템의 특성에 맞게 해야한다.&lt;/p&gt;

&lt;p&gt;여기서는 &lt;strong&gt;Apache Kafka&lt;/strong&gt; 와 &lt;strong&gt;RabbitMQ&lt;/strong&gt; 을 간략하게나마 비교해보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;특징면&quot;&gt;특징면&lt;/h2&gt;

&lt;p&gt;메시징 시스템에서의 broker는 producer와 consumer라는 두 개 타입의 프로세스와 연결되어 있는데, 보통 메시징 시스템에서는 consumer가 각 메시지의 최종 목적지이며, consumer의 메시지 처리 속도가 메시징 시스템을 사용하는 전체 시스템의 성능과 직결된다.&lt;/p&gt;

&lt;p&gt;Kafka와 RabbitMQ 를 특징면에서 비교해보기 위해 다음과 같은 환경이 있다고 하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-comparison_between_rabbitmq_kafka/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 비교적 메시지 처리 속도가 빠른 &lt;strong&gt;“fast”&lt;/strong&gt; 한 consumer 및 처리 속도가 느린 &lt;strong&gt;“slow”&lt;/strong&gt; consumer가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data: 메시지는 consumer가 처리할 데이터를 포함하고 있는데, 이 메시지 하나를 받는 것만으로 consumer는 다른 모듈이나 consumer 를 기다릴 필요없이 바로 처리할 수가 있다. 이 것은 consumer가 이 메시지를 처리하는데 추가적으로 다른 커맨드나 데이터를 입력받을 필요없이 처리할 수 있다는 것을 의미한다. 여기서는 이 &lt;strong&gt;Data&lt;/strong&gt; 를 처리하는 consumer를 &lt;strong&gt;“fast” consumer&lt;/strong&gt; 라고 칭한다.&lt;/li&gt;
  &lt;li&gt;Command: 메시지는 consumer가 읽어서 처리해야할 명령어를 담고 있는데, 경우에 따라서 consumer는 해당 명령어를 처리하기 위해 추가적인 파라미터나 다른 모듈과의 인터랙션을 통해 작업 결과를 입력받아야 할 필요가 있다. 또한 다른 모듈과의 인터랙션을 할 때 다음과 같이 &lt;strong&gt;Internal interaction&lt;/strong&gt; 과 &lt;strong&gt;External interaction&lt;/strong&gt; 이 있다.
    &lt;ul&gt;
      &lt;li&gt;Internal interaction: Consumer는 다른 모듈과 함께 작업을 처리할 때 함수 호출과 같이 코드 상에서 인터랙션을 하거나 같은 네트워크 상에서의 통신을 할 수 있다. &lt;strong&gt;다른 모듈&lt;/strong&gt; 의 작업 처리 속도에 따라서 이런 consumer를 &lt;strong&gt;“fast”&lt;/strong&gt; or &lt;strong&gt;“slow”&lt;/strong&gt; consumer라 칭할 수 있다.&lt;/li&gt;
      &lt;li&gt;External interaction: Consumer는 작업을 처리하기 위해 서로 다른 네트워크 상의 통신이나 구축된 시스템이 아닌 다른 제 3자의 서버를 통해 처리할 필요가 있다. 이러한 consumer를 &lt;strong&gt;slow consumer&lt;/strong&gt; 라 칭한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 이러한 컨셉에서 Kafka와 RabbitMQ 를 비교해보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kafka의-강점&quot;&gt;Kafka의 강점&lt;/h2&gt;

&lt;p&gt;Kafka는 RabbitMQ에 비해 강력한 성능을 뽐낸다. &lt;a href=&quot;http://www.cloudhack.in/index.php/2016/02/29/apache-kafka-vs-rabbitmq/&quot;&gt;apache-kafka-vs-rabbitmq&lt;/a&gt; 에서도 볼 수 있겠지만 Kafka가 RabbitMQ에 비해 우월한 성능을 보이고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-comparison_between_rabbitmq_kafka/01.png&quot; alt=&quot;01.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-comparison_between_rabbitmq_kafka/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 것은 다음과 같이 디자인된 Kafka의 특성에 기인한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지는 partition으로 나뉘어진 topic에 큐잉되는데, 이 partition들을 horizontal하게 scale-out 하면서 성능 향상을 꾀할 수 있다.&lt;/li&gt;
  &lt;li&gt;메시지는 로깅 시스템처럼 순차적으로 쌓고, 순차적으로 디스크에 write 함으로써 비록 Kafka가 메시지를 파일 시스템에 저장할지라도 성능 하락폭을 크게 줄일 수 있다.&lt;/li&gt;
  &lt;li&gt;Consumer가 직접 broker로부터 메시지를 가져가기 때문에 broker 입장에서는 consumer가 지금 놀고 있는지, 아니면 어떠한 메시지를 처리하고 있는지 관리할 필요가 없어 부담이 경감된다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/&quot;&gt;Zero-copy&lt;/a&gt;를 활용하여 각 레이어 간의 불필요한 데이터 복사 및 컨텍스트 스위칭을 피한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 보통 Kafka를 사용한다면 시스템에 &lt;strong&gt;“fast” consumer&lt;/strong&gt; 가 있을 때 유리하다. 메시지를 빠르게 처리하는 환경에서는 Kafka의 장점을 100% 활용할 수 있기 때문이다. 물론 &lt;strong&gt;“slow” consumer&lt;/strong&gt; 가 있어도 메시징 처리에는 Kafka가 빠른 처리 속도를 보일 수는 있다.
하지만 Kafka에서는 한 consumer group에서 어느 특정 consumer만이 partition에 접근할 수 있으므로, &lt;strong&gt;“slow” consumer&lt;/strong&gt; 가 메시지를 처리하는 동안 그 consumer가 바라보는 (즉 어떤 partition의 leader 일 때) partition의 메시지 처리가 블록이 된다는 것을 의미한다. 하지만 Kafka의 구성을 어떻게 하느냐에 따라 다른 consumer group의 consumer가 그 메시지를 처리하게 할 수는 있다. (물론 이 메시지를 중복 처리할 때의 문제점이 없거나 해소할 경우에만, Kafka는 consumer group 들 사이에서는 브로드캐스팅하는 발행-구독 모델이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rabbitmq의-강점&quot;&gt;RabbitMQ의 강점&lt;/h2&gt;

&lt;p&gt;RabbitMQ는 Kafka에 비해 비교적 &lt;strong&gt;성숙한&lt;/strong&gt; 메시징 시스템이고, 사용하기 쉬울 뿐더러 운영면에서도 편한 점이 많다. 비록 위의 그래프에서와 같이 메시지 처리 속도는 Kafka 이 비해 열세랄지라도 서버 추가를 통해 성능을 높일 수도 있다.&lt;/p&gt;

&lt;p&gt;RabbitMQ는 다음과 같은 디자인을 따르고 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메시지는 큐에 추가되며, 복수의 consumer가 큐에 접근하여 메시지를 처리할 수 있다.&lt;/li&gt;
  &lt;li&gt;Broker는 메시지를 가용한 모든 consumer에게 분산시킬 수 있고, 비록 consumer가 처리하지 못하는 경우에 그 메시지를 다시 재전달할 수도 있다.&lt;/li&gt;
  &lt;li&gt;만약 어떤 큐에 접근하는 consumer가 하나일 때 그 큐의 메시지들간의 처리 순서는 보장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RabbitMQ도 &lt;strong&gt;“fast”&lt;/strong&gt; 한 consumer가 있을 때에 더 좋겠지만, 만약 우리 시스템에서 consumer의 속도가 &lt;strong&gt;“slow”&lt;/strong&gt; 할 때 다음과 같은 장점을 지닐 수 있다. 만약 consumer의 메시지 처리 속도가 느려 그 다음 메시지를 처리하지 못하고 큐에 쌓이는 경우에, 그 큐에 메시지를 처리할 consumer를 추가하는 것만으로도 이 문제를 해결할 수 있다. (물론 이 것은 두 메시지 간의 처리 순서가 상관없을 때의 이야기이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;Kafka와 RabbitMQ, 두 메시징 시스템 모두 좋은 시스템이지만 다음과 같은 선택을 고려해볼 수 있다.&lt;/p&gt;

&lt;p&gt;만약 단위 시간 당 처리해야할 메시지의 수가 많고, consumer가 메시지를 처리하는 것이 빠른 시스템을 구축하고자 할 때는 RabbitMQ를 쓰는 것보다 Kafka를 사용하여 높은 성능의 시스템을 구축할 수 있을 것이다. Consumer가 메시지를 처리하는 것이 느리고, 메시지를 처리하는 순서는 상관이 없을 때는 RabbitMQ를 써서 시스템의 자원을 최대한 활용하도록 하는 것이 좋을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://yurisubach.com/2016/05/19/kafka-or-rabbitmq/&quot;&gt;Kafka or RabbitMQ: depends on your messages nature&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.cloudhack.in/index.php/2016/02/29/apache-kafka-vs-rabbitmq/&quot;&gt;Apache Kafka v/s RabbitMQ – Message Queue Comparison&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/32631064/why-kafka-so-fast&quot;&gt;Why Kafka so fast (stackoverflow)&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/03/comparison_between_rabbitmq_kafka-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/03/comparison_between_rabbitmq_kafka-post.html</guid>
        
        <category>server programming</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Apache Kafka Architecture</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;원본글: &lt;a href=&quot;http://epicdevs.com/17&quot;&gt;http://epicdevs.com/17&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;apache-kafka&quot;&gt;Apache Kafka&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;는 LinkedIn 개발된 분산 메시징 시스템으로써, 2011년에 오픈소스로 공개되었다.
대용량의 실시간 로그처리에 특화된 아키텍처 설계를 통하여 기존 메시징 시스템보다 우수한 TPS를 보여주고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;kafka의-기본-구성-요소와-동작&quot;&gt;Kafka의 기본 구성 요소와 동작&lt;/h2&gt;

&lt;p&gt;Kafka는 발행-구독(public-subscribe) 모델을 기반으로 동작하며, 크게 producer, consumer, broker로 구성된다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kafka의 broker는 topic을 기준으로 메시지를 관리한다. Producer는 특정 topic의 메시지를 생성한 뒤 해당 메시지를 broker에 전달한다. Broker가 전달받은 메시지를 topic별로 분류하여 쌓아놓으면, 해당 topic을 구독하는 consumer들이 메시지를 가져가서 처리하게 된다.&lt;/p&gt;

&lt;p&gt;Kafka는 확장성(scale-out)과 고가용성(high availability)를 위하여 broker들이 클러스터로 구성되어 동작하도록 설계되어 있다. 심지어 broker가 1개 밖에 없을 때에도 클러스터로써 동작한다. 클러스터 내의 broker에 대한 분산처리는 아래의 그림과 같이 &lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache ZooKeeper&lt;/a&gt;가 담당한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/01.jpg&quot; alt=&quot;01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;기존-메시징-시스템과의-차이점&quot;&gt;기존 메시징 시스템과의 차이점&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존 메시징 시스템: &lt;a href=&quot;http://activemq.apache.org/&quot;&gt;ActiveMQ&lt;/a&gt; / &lt;a href=&quot;http://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; 등&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;대용량의 실시간 로그 처리에 특화되어 설계된 메시징 시스템으로써 기존 범용 메시징 시스템 대비 TPS가 매우 우수하다. 단, 특회된 시스템이기 때문에 범용 메시징 시스템에서 제공하는 다양한 기능들은 제공되지 않는다.&lt;/li&gt;
  &lt;li&gt;분산 시스템을 기본으로 설계되었기 때문에, 기존 메시징 시스템에 비해 분산 및 복제 구성을 손쉽게 할 수 있다.&lt;/li&gt;
  &lt;li&gt;AMQP 프로토콜이나 JMS API를 사용하지 않고 단순한 메시지 헤더를 지닌 TCP 기반의 프로토콜을 사용하여, 프로토콜에 의한 오버헤드를 감소시켰다.&lt;/li&gt;
  &lt;li&gt;Producer가 broker에게 다수의 메시지를 전송할 때 각 메시지를 개별적으로 전송해야하는 기존 메시징 시스템과는 달리, 다수의 메시지를 batch 형태로 broker에게 한 번에 전달할 수 있어 TCP/IP 라운드트립 횟수를 줄일 수 있다.&lt;/li&gt;
  &lt;li&gt;메시지를 기본으로 메모리에 저장하는 기존 메시징 시스템과는 다르게, 메시지를 파일 시스템에 저장한다.
    &lt;ul&gt;
      &lt;li&gt;파일 시스템에 메시지를 저장하기 때문에 별도의 설정을 하지 않아도 데이터의 영속성(durability)이 보장된다.&lt;/li&gt;
      &lt;li&gt;기존 메시징 시스템에서는 처리되지 않고 남아있는 메시지의 수가 많을 수록 시스템의 성능이 크게 감소하였으나, Kafka에서는 메시지를 파일 시스템에 저장하기 때문에 메시지를 많이 쌓아두어도 성능이 크게 감소하지 않는다. 또한 많은 메시지를 쌓아둘 수 있기 때문에, 실시간 처리뿐만 아니라 주기적인 batch 작업에 사용할 데이터를 쌓아두는 용도로도 활용할 수 있다.&lt;/li&gt;
      &lt;li&gt;Consumer에 의해 처리된 메시지(acknowledged message)를 곧바로 삭제하는 기존 메시징 시스템과는 달리 처리된 메시지를 삭제하지 않고 파일 시스템에 그대로 두었다가 설정된 수명이 지나면 삭제한다. 처리된 메시지를 일정 기간동안 삭제하지 않기 때문에 메시지 처리 도중 문제가 발생하였거나 처리 로직이 변경되었을 경우 consumer가 메시지를 처음부터 다시 처리(rewind)하도록 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기존의 메시징 시스템에서는 broker가 consumer에게 메시지를 push해 주는 방식인데 비해, Kafka는 consumer가 broker로부터 직접 메시지를 가지고 가는 pull 방식으로 동작한다. 따라서 consumer는 자신의 처리능력만큼의 메시지만 broker로 가져오기 때문에 최적의 성능을 낼 수 있다.
    &lt;ul&gt;
      &lt;li&gt;기존의 push 방식의 메시징 시스템에서는 broker가 직접 각 consumer가 어떤 메시지를 처리해야 하는지 계산하고 어떤 메시지를 처리 중인지 트랙킹하였는데, Kafka에서는 consumer가 직접 필요한 메시지를 broker로부터 pull 하므로, broker의 consumer와 메시지 관리에 대한 부담이 경감되었다.&lt;/li&gt;
      &lt;li&gt;메시지를 pull 방식으로 가져오므로, 메시지를 쌓아두었다가 주기적으로 처리하는 batch consumer의 구현이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;기존-메시징-시스템과의-성능-비교&quot;&gt;기존 메시징 시스템과의 성능 비교&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;producer-성능&quot;&gt;Producer 성능&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 붉은 색 그래프는 메시지를 한 번에 50개씩 batch 로 전송한 결과이고, 연두색 그래프는 한 번에 하나씩 전송한 결과이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;consumer-성능&quot;&gt;Consumer 성능&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;좀-더-자세히&quot;&gt;좀 더 자세히..&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;topic과-partition&quot;&gt;Topic과 Partition&lt;/h3&gt;

&lt;p&gt;Kafka의 topic은 partition이라는 단위로 쪼개어져 클러스터의 각 서버들에 분산되어 저장되고, 고가용성을 위하여 복제(replication) 설정할 경우, 이 또한 partition 단위로 각 서버들에 분산되어 복제되고 장애 발생시, partition 단위로 fail over가 수행된다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림은 하나의 topic이 3개의 partition에 분산되어 순차적으로 저장되는 모습을 보여준다.
각 partition은 0부터 1씩 증가하는 offset값을 메시지에 부여하는데, 이 값은 각 partition 내에서 메시지를 식별하는 ID로 사용된다. Offset 값은 partition마다 별도로 관리되므로 topic내에서 메시지를 식별할 때는 partition 번호와 offset 값을 함께 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;partition의-분산&quot;&gt;Partition의 분산&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림에서는 3개의 broker로 이루어진 클러스터에서 하나의 topic이 3개의 partition P0, P1, P2로 분산되어 저장되어 있다. Producer가 메시지를 실제로 어떤 partition으로 전송할지는 사용자가 구현한 partition 분배 알고리즘에 의해 결정된다. 예를 들어 라운드-로빈 방식의 partition 분배 알고리즘을 구현하여 각 partition에 메시지를 균등하게 분배하도록 하거나, 메시지의 키를 활용하여 알파벳 A로 시작하는 키를 가진 메시지는 P0에만 전송하고, B로 시작하는 키를 가진 메시지는 P1에만 전송하는 형태의 구성도 가능하다.&lt;/p&gt;

&lt;p&gt;좀 더 복잡한 예로써 사용자 ID의 CRC32 값을 partition의 수로 modulo 연산을 수행하여 (CRC32(ID) % partition의 수) 동일한 ID에 대한 메시지는 동일한 partition에 할당되도록 구성할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;partition의-복제&quot;&gt;Partition의 복제&lt;/h3&gt;

&lt;p&gt;Kafka에서는 고가용성을 위하여 각 Partition을 복제하여 클러스터에 분산시킬 수 있다. 아래의 그림은 해당 topic의 replication factor를 3으로 설정한 상태의 클러스터이다. 각 partition들은 3개의 replica를 가지며 각 replica는 R0, R1, R2로 표시되어 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Replication factor를 N으로 설정할 경우, N개의 replica는 1개의 leader와 N-1개의 follower로 구성된다. 위의 그림에서는 각 partition마다 하나의 leader(붉은색)가 존재하며 2개의 follower(푸른색)가 존재한다.&lt;/p&gt;

&lt;p&gt;각 partition에 대한 읽기와 쓰기는 모두 leader에서 이루어지며, follower는 단순히 leader를 복제하기만 한다. 만약 leader에 장애가 발생할 경우 follower 중 하나가 새로운 leader가 된다. Kakfa의 복제 모델인 ISR 모델은 f+1개의 replica를 가진 topic이 f개의 장애까지 버틸 수 있다고 한다.&lt;/p&gt;

&lt;p&gt;Leader에서만 읽기와 쓰기를 수행한다고 하면 부하 분산이 되지 않는다고 생각할 수 있는데, 각 partition의 leader가 클러스터 내의 broker들에게 균등하게 분배되도록 알고리즘이 설계되어 있기 때문에 부하는 자연스럽게 분산이 된다. 위의 그림처럼 3개의 broker에 P0, P1, P2의 leader가 균등하게 분배되므로 부하 또한 자연스럽게 분산되게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;consumer와-consumer-group&quot;&gt;Consumer와 Consumer Group&lt;/h3&gt;

&lt;p&gt;메시징 모델은 크게 큐(queue)모델과 발행-구독(public-subscribe) 모델로 나뉜다. 큐 모델은 메시지가 쌓여있는 큐로부터 메시지를 가져와서, consumer pool에 있는 consumer 중 하나에 메시지를 할당하는 방식이고, 발행-구독 모델은 topic을 구독하는 모든 consumer에게 브로드캐스팅하는 방식이다.&lt;/p&gt;

&lt;p&gt;Kafka에서는 consumer group 이라는 개념을 도입하여 두가지 모델을 발행-구독 모델로 일반화하였다. Kafka의 partition은 consumer group 당 오로지 하나의 consumer의 접근만을 허용하며, 해당 consumer를 partition owner라고 부른다. 따라서 동일한 consumer group에 속하는 consumer끼리는 동일한 partition에 접근할 수 없다.&lt;/p&gt;

&lt;p&gt;한 번 정해진 partition owner는 broker나 consumer 구성의 변동이 있지 않는 한 계속 유지된다. Consumer가 추가/제거되면 추가/제거된 consumer가 속한 consumer group 내의 consumer들의 partition 재분배(rebalancing)가 발생하고 broker가 추가/제거되면 전체 consumer group에서 partition 재분배가 발생한다.&lt;/p&gt;

&lt;p&gt;Consumer group을 구성하는 consumer의 수가 partition의 수보다 적으면 하나의 consumer가 여러 개의 partition을 소유하게 되고, 반대로 consumer의 수가 partition의 수보다 많으면 여분의 consumer는 메시지를 처리하지 않게 되므로 partition의 개수와 consumer 수의 적절한 설정이 필요하다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 consumer group에 다수의 consumer를 할당하면 각 consumer마다 별도의 partition으로부터 메시지를 받아오기 때문에, (producer가 각 partition에 메시지를 균등하게 분배한다고 가정할 경우) consumer group은 큐 모델로 동작하게 된다.&lt;/p&gt;

&lt;p&gt;단일 consumer로 이루어진 consumer group을 활용하면 다수의 consumer가 동일한 partition에 동시에 접근하여 동일한 메시지를 액세스하기 때문에 발행-구독 모델을 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;이처럼 하나의 consumer에 의해 독점적으로 partition이 액세스되기 때문에 동일 partition 내의 메시지는 partition에 저장된 순서대로 처리된다. 만약 특정 키를 지닌 메시지가 발생 시간 순으로 처리되어야 한다면 partition 분배 알고리즘을 적절하게 구현하여 특정 키를 지닌 메시지는 동일한 partition에 할당되어 단일 consumer에 의해 처리되도록 해야한다.&lt;/p&gt;

&lt;p&gt;그러나 다른 partition에 속한 메시지의 순차적 처리는 보장되어 있지 않기 때문에, 특정 topic의 전체 메시지가 발생 시간 순으로 처리되어야 할 경우 해당 topic의 하나의 partition만을 가지도록 설정해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;파일-시스템을-활용한-고성능-디자인&quot;&gt;파일 시스템을 활용한 고성능 디자인&lt;/h3&gt;

&lt;p&gt;Kafka는 기존 메시징 시스템과는 달리 메시지를 메모리 대신 파일 시스템에 쌓아두고 관리한다.&lt;/p&gt;

&lt;p&gt;기존 메시징 시스템에서 파일 시스템은 메시지의 영속성을 위해 성능 저하를 감수하면서도 어쩔 수 없이 사용해야하는 애물단지 같은 존재였다. 그러나 Kafka는 이런 편견을 깨고 파일 시스템을 메시지의 주 저장소로 사용하면서도 기존의 메시징 시스템보다 뛰어난 성능을 보여준다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/08.jpg&quot; alt=&quot;08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적으로 하드디스크는 메모리보다 수백-수천 배 이상 느리다. 그러나 특정 조건에서는 메모리보다 10배 이내로 느리거나, 심지어는 빠를 수도 있다. ACM Queue에 개제된 &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=1563874&quot;&gt;The Pathologies of Big Data&lt;/a&gt;에 따르면 하드디스크의 순차적 읽기 성능은 메모리에 대한 랜덤 읽기 성능보다 뛰어나며 메모리의 순차적 읽기 성능보다 7배 정도 느리다. (물론 하드디스크의 랜덤 읽기 성능은 메모리의 랜덤 읽기 성능보다 10만배나 느리다.)&lt;/p&gt;

&lt;p&gt;Kafka는 메모리에 별도의 캐시를 구성하지 않고, OS의 페이지 캐시에 이를 모두 위임한다. OS가 알아서 서버의 유휴 메모리를 페이지 캐시로 활용하여 앞으로 필요할 것으로 예상되는 메시지들을 미리 읽어들여(readahead) 디스크의 읽기 성능을 향상시킨다.&lt;/p&gt;

&lt;p&gt;Kafka의 메시지는 하드디스크로부터 순차적으로 읽혀지기 때문에 하드디스크의 랜덤 읽기 성능에 대한 단점을 보완함과 동시에 OS의 페이지 캐시를 효과적으로 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;메시지를 파일 시스템에 저장함으로써 얻는 부수적인 효과도 있다.&lt;/p&gt;

&lt;p&gt;메시지를 메모리에 저장하지 않기 때문에 메시지가 JVM 객체로 변환되면서 크기가 커지는 것을 방지할 수 있고, JVM의 GC로 인한 성능 저하 또한 피할 수 있다.&lt;/p&gt;

&lt;p&gt;Kafka 프로세스가 직접 캐시를 관리하지 않고 OS에 위임하기 때문에 프로세스를 재시작하더라도 OS의 페이지 캐시는 그대로 남아있기 때문에 프로세스 재시작 후 캐시를 워밍업할 필요가 없다는 장점도 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 Kafka에서는 파일 시스템에 저장된 메시지를 네트워크를 통해 consumer에게 전송할 때 &lt;a href=&quot;https://www.ibm.com/developerworks/linux/library/j-zerocopy/&quot;&gt;zero-copy&lt;/a&gt; 기법을 사용하여 데이터 전송 성능을 향상시켰다.&lt;/p&gt;

&lt;p&gt;일반적으로 파일 시스템에 저장된 데이터를 네트워크로 전송할 땐 아래와 같이 커널모드와 유저모드 간의 데이터 복사가 발생하게 된다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/09.gif&quot; alt=&quot;09.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;유저모드로 카피된 데이터를 애플리케이션에서 처리한 뒤 처리된 데이터를 네트워크로 전송한다면 위의 그림과 같이 커널모드와 유저모드 간의 데이터 복사는 당연히 필요하다. 그러나 애플리케이션에서의 별도 처리 없이 파일 시스템에 저장된 데이터 그대로 네트워크로 전송만 한다면 커널모드와 유저모드 간의 데이터 복사는 불필요한 것이 된다.&lt;/p&gt;

&lt;p&gt;Zero-copy 기법을 사용하면 위에서 언급한 커널모드와 유저모드 간의 불필요한 데이터 복사를 피할 수 있다. 이 기법을 사용하면 아래와 같이 파일 시스템의 데이터가 유저모드를 거치지 않고 곧바로 네트워크로 전송된다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-04-03-Apache_kafka/10.gif&quot; alt=&quot;10.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 zero-copy를 사용한 경우가 그렇지 않은 경우보다 전송 속도가 2-4배 빠른 것으로 나타났다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;File Size&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Normal Transfer Latency [in ms]&lt;/th&gt;
      &lt;th&gt;transferTo Latency (zero-copy) [in ms]&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;156&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;21MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;337&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;63MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;843&lt;/td&gt;
      &lt;td&gt;387&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;98MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1320&lt;/td&gt;
      &lt;td&gt;617&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;200MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2124&lt;/td&gt;
      &lt;td&gt;1150&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;350MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3631&lt;/td&gt;
      &lt;td&gt;1762&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;700MB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;13498&lt;/td&gt;
      &lt;td&gt;4422&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1GB&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;18399&lt;/td&gt;
      &lt;td&gt;8537&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/04/03/Apache_kafka-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/04/03/Apache_kafka-post.html</guid>
        
        <category>server programming</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>F2FS: A New File System for Flash Storage - Usenix</title>
        <description>&lt;h1 id=&quot;f2fs-a-new-file-system-for-flash-storage&quot;&gt;&lt;strong&gt;F2FS: A New File System for Flash Storage&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/conference/fast15/technical-sessions/presentation/lee&quot;&gt;https://www.usenix.org/conference/fast15/technical-sessions/presentation/lee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;authors&quot;&gt;&lt;strong&gt;Authors:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Changman Lee, Dongho Sim, Joo-Young Hwang, and Sangyeun Cho, Samsung Electronics Co., Ltd.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;open-access-content&quot;&gt;&lt;strong&gt;Open Access Content&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;USENIX is committed to Open Access to the research presented at our events. Papers and proceedings are freely available to everyone once the event begins. Any video, audio, and/or slides that are posted after the event are also free and open to everyone. Support USENIX and our commitment to Open Access.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.usenix.org/system/files/conference/fast15/fast15-paper-lee.pdf&quot;&gt;Lee PDF Download&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://www.usenix.org/sites/default/files/conference/protected-files/fast15_slides_lee.pdf&quot;&gt;View the slides&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://www.usenix.org/biblio/export/bibtex/188454&quot;&gt;BibTeX Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;abstract&quot;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;F2FS is a Linux file system designed to perform well on modern flash storage devices. The file system builds on append-only logging and its key design decisions were made with the characteristics of flash storage in mind. This paper describes the main design ideas, data structures, algorithms and the resulting performance of F2FS.&lt;/p&gt;

&lt;p&gt;Experimental results highlight the desirable performance of F2FS; on a state-of-the-art mobile system, it outperforms EXT4 under synthetic workloads by up to 3.1 (iozone) and 2 (SQLite). It reduces elapsed time of several realistic workloads by up to 40%. On a server system, F2FS is shown to perform better than EXT4 by up to 2.5 (SATA SSD) and 1.8 (PCIe SSD).&lt;/p&gt;

&lt;hr /&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
   function videoPlay() {
     var video_title = &quot;F2FS: A New File System for Flash Storage&quot;;
     if (typeof _gaq !== &quot;undefined&quot;) {
       _gaq.push(['_trackEvent', 'Video', 'Play', video_title]);
     }
   }
   jQuery(document).ready(
                          function() {
                            var video_id = &quot;usenix-media-video-1&quot;;
                            var video = document.getElementById(video_id);
                            video.addEventListener(&quot;play&quot;, videoPlay, false);
                          });
&lt;/script&gt;

&lt;div class=&quot;usenix-video-field&quot;&gt;
  &lt;h4&gt;Presentation Video&lt;/h4&gt;
    &lt;video width=&quot;744&quot; height=&quot;419&quot; id=&quot;usenix-media-video-1&quot; data-setup=&quot;{}&quot; poster=&quot;https://www.usenix.org/sites/default/files/styles/video-thumbnail/public/conference/video/lee_4.jpeg?itok=MJN-5nxY&quot; class=&quot;video-js vjs-default-skin vjs-big-play-centered&quot; preload=&quot;auto&quot; controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.mp4&quot; type=&quot;video/mp4; codecs=&amp;quot;avc1.42E01E, mp4a.40.2&amp;quot;&quot; /&gt;
               &lt;source src=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.webm&quot; type=&quot;video/webm; codecs=&amp;quot;vp8.0, vorbis&amp;quot;&quot; /&gt;
        &lt;object type=&quot;application/x-shockwave-flash&quot; data=&quot;http://releases.flowplayer.org/swf/flowplayer-3.2.1.swf&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;
       &lt;param name=&quot;movie&quot; value=&quot;http://releases.flowplayer.org/swf/flowplayer-3.2.1.swf&quot; /&gt;
       &lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;
       &lt;param name=&quot;wmode&quot; value=&quot;transparent&quot; /&gt;
       &lt;param name=&quot;flashVars&quot; value=&quot;config={'playlist':['https%3A%2F%2Fwww.usenix.org%2Fsites%2Fdefault%2Ffiles%2Fstyles%2Fvideo-thumbnail%2Fpublic%2Fconference%2Fvideo%2Flee_4.jpeg%3Fitok%3DMJN-5nxY',{'url':'https%3A%2F%2F2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com%2Ffast15%2Flee.mp4','autoPlay':false}]}&quot; /&gt;
       &lt;img src=&quot;https://www.usenix.org/sites/default/files/styles/video-thumbnail/public/conference/video/lee_4.jpeg?itok=MJN-5nxY&quot; width=&quot;640&quot; height=&quot;480&quot; title=&quot;No video playback capabilities. Please install Adobe Flash Player or download the video below&quot; /&gt;
    &lt;/object&gt;
  &lt;/video&gt;

  &lt;p&gt;&lt;a href=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.mp4&quot;&gt;Download Video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h4&gt;Presentation Audio&lt;/h4&gt;
&lt;div id=&quot;usenix-media-audio-1&quot;&gt;
  &lt;audio controls=&quot;&quot;&gt;
          &lt;source src=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.mp3&quot; /&gt;
              &lt;source src=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.ogg&quot; /&gt;
              &lt;a href=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.mp3&quot;&gt;MP3 Download&lt;/a&gt;
              &lt;a href=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.ogg&quot;&gt;OGG Download&lt;/a&gt;
      &lt;/audio&gt;
  &lt;p&gt;&lt;a href=&quot;https://2459d6dc103cb5933875-c0245c5c937c5dedcca3f1764ecc9b2f.ssl.cf2.rackcdn.com/fast15/lee.mp3&quot;&gt;Download Audio&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/linux/2017/04/01/F2FS_USENIX-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/linux/2017/04/01/F2FS_USENIX-post.html</guid>
        
        <category>file system</category>
        
        <category>kernel</category>
        
        <category>linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Spring Boot Profile 설정</title>
        <description>&lt;h1 id=&quot;spring-boot-profile-나누는-여러가지-방법&quot;&gt;Spring Boot profile 나누는 여러가지 방법&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sping-mvc-에서는&quot;&gt;Sping MVC 에서는…&lt;/h2&gt;

&lt;p&gt;Spring Boot가 아닌 기존 &lt;strong&gt;Spring MVC&lt;/strong&gt; 에서는 다음과 같이 maven 자체 profile 기능을 사용하는 경우가 많다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;local&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activeByDefault&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activeByDefault&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&amp;gt;&lt;/span&gt;local&lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.test.skip&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.test.skip&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.test.skip&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.test.skip&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;prd&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;environment&amp;gt;&lt;/span&gt;prd&lt;span class=&quot;nt&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;maven.test.skip&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maven.test.skip&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;

....
&lt;span class=&quot;nt&quot;&gt;&amp;lt;webResource&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;${basedir}/src/main/resources-${environment}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetPath&amp;gt;&lt;/span&gt;WEB-INF&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/webResource&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 &lt;strong&gt;mvn package -Dlocal / mvn package -Ddev&lt;/strong&gt; 이런식으로 profile 별로 사용하는 리소스를 다르게 할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-에서의-profile-설정&quot;&gt;Spring Boot 에서의 profile 설정&lt;/h2&gt;

&lt;p&gt;Spring Boot는 Spring MVC 처럼 maven 자체 profile 기능을 사용하는 것도 가능하기는 하지만 Spring Boot Reference Guide도 그렇고 다른 방식을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;spring-boot의-디렉토리-구조&quot;&gt;Spring Boot의 디렉토리 구조&lt;/h3&gt;

&lt;p&gt;먼저 Spring Boot의 디렉토리 구조부터 살펴보자.
Spring Boot Reference Guide에서는 다음과 같은 코드 구조를 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-structuring-your-code.html&quot;&gt;Spring Boot Reference Guide: 14. Structuring your code&lt;/a&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 보통 &lt;strong&gt;STS&lt;/strong&gt; 나 &lt;strong&gt;Intellij&lt;/strong&gt; 를 통해 Spring Boot 프로젝트를 생성하면 다음과 같이 프로젝트 디렉토리 구조가 생성된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STS&lt;/strong&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intellij IDEA&lt;/strong&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/src/main/java&lt;/strong&gt; 및 &lt;strong&gt;/src/test/java&lt;/strong&gt; 디렉토리에는 각각 자바 소스 및 테스트 소스를 놔두고, &lt;strong&gt;/src/main/resources&lt;/strong&gt; 에는 각종 리소스 및 프로퍼티 파일을 위치시킨다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt; 에서는 프로젝트 생성하면 &lt;strong&gt;webapp&lt;/strong&gt; 디렉토리가 생성되고 그 안에 css, img 등 다양한 리소스들을 넣게 되며, &lt;strong&gt;WEB-INF&lt;/strong&gt; 에는 view 파일을 생성했었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt; 에서는 &lt;strong&gt;webapp&lt;/strong&gt; 이나 &lt;strong&gt;WEB-INF&lt;/strong&gt; 는 아예 존재하지 않고, &lt;strong&gt;/src/main/resources&lt;/strong&gt; 폴더 안에는 보통 다음과 같이 리소스 파일을 구분해서 위치시킴으로써 좀 더 정확하게 관리하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;srcmainresourcesstatic&quot;&gt;&lt;strong&gt;/src/main/resources/static&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;이 디렉토리 안에는 &lt;strong&gt;static&lt;/strong&gt; 콘텐츠들을 담는다. 그럼 알아서 &lt;strong&gt;/src/main/resources&lt;/strong&gt; 경로를 default로 생각하고 하위 static 콘텐츠들을 불러온다. 보통 image, css, js 등 디렉토리를 만들고 여기서 관리하면 된다.&lt;/p&gt;

&lt;p&gt;org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration 중에서&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLASSPATH_RESOURCE_LOCATIONS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;classpath:/META-INF/resources/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:/resources/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;s&quot;&gt;&quot;classpath:/static/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;classpath:/public/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 보는 것과 같이 클래스패스 상에서 &lt;strong&gt;/META-INF/resources, /resources, /static, /public&lt;/strong&gt; 경로를 기본 탐색한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;/WEB-INF/resources&lt;/strong&gt; 의 경우 jar 파일로 배포할 때 인식하지 않기 때문에 쓰지말자.
static 콘텐츠를 서비스하는 이야기를 &lt;a href=&quot;https://spring.io/blog/2013/12/19/serving-static-web-content-with-spring-boot&quot;&gt;여기서&lt;/a&gt; 조금 더 참고해보도록 하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;srcmainresourcestemplate&quot;&gt;&lt;strong&gt;/src/main/resources/template&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;이 디렉토리 안에는 &lt;strong&gt;dynamic HTML&lt;/strong&gt; 콘텐츠들을 담는다. freemaker, groovy, thymeleaf, velocity 등과 같은 다양한 dynamic HTML에 대한 파일을 여기서 관리하는 것이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JSTL이나 freemaker 문법을 사용하려면 무조건 이 아래에 파일을 위치시켜야 한다. static 디렉토리에 view 디렉토리 만들어서 백날 해봐야 안먹힌다!&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;spring boot에서는 몇가지 제한 사항 때문에 가능하다면 JSP를 피하라고 한다. &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-jsp-limitations&quot;&gt;JSP Limitations&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;인터넷에서 가장 best인 Spring Boot 디렉토리 구조를 살펴보았지만 정답은 없었고 &lt;a href=&quot;http://stackoverflow.com/questions/40902280/what-is-the-recommended-project-structure-for-spring-boot-rest-projects&quot;&gt;stackoverflow&lt;/a&gt; 에서도 찾아보았지만 IDE에서 만들어준 디렉토리 구조가 best 인것 같았다.&lt;/p&gt;

&lt;p&gt;그럼 다음으로 Spring Boot에서 profile 설정하는 방법을 알아보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;springprofilesactive를-이용한-방법&quot;&gt;spring.profiles.active를 이용한 방법&lt;/h3&gt;

&lt;p&gt;Spring Boot에서는 각종 환경설정 정보를 &lt;strong&gt;src/main/resources&lt;/strong&gt; 안에 &lt;strong&gt;application.properties&lt;/strong&gt; 파일에 저장해두고 로드될 수 있도록 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.port=9999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 내용을 &lt;strong&gt;application.properties&lt;/strong&gt; 이름으로 &lt;strong&gt;src/main/resource&lt;/strong&gt; 안에 두면 Spring Boot 애플리케이션이 시작될 때 자동으로 로드하여 웹 서버 포트를 9999로 지정한다.&lt;/p&gt;

&lt;p&gt;이 application.properties 파일을 통하여 profile 설정하고자 할 때는 다음과 같이 &lt;strong&gt;application-{profile}.properties&lt;/strong&gt; 라는 이름으로 &lt;strong&gt;/src/main/resource&lt;/strong&gt; 에 두는 것부터 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무것도 없는 &lt;strong&gt;application.properties&lt;/strong&gt; 에는 프로파일과 관계없는 공통 속성을 설정하고, 각 환경마다 다른 설정을 각각의 &lt;strong&gt;application-{profile}.properties&lt;/strong&gt; 에 두면 된다.&lt;/p&gt;

&lt;p&gt;예를 들어 다음과 같이 속성을 설정하였다고 하자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.profiles.active=local

property.hello=default_hello
property.hi=default_hi
property.hey=default_hey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;application-local.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;property.hello=local_hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;application-dev.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;property.hi=dev_hi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;application-production.properties&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;property.hey=production_hey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음과 같이 CommandLineRunner에서 프로파일에 따라 어떤 속성값이 설정되는지 확인하였다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringbootUsepropertyApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringbootUsepropertyApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${property.hello}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${property.hi}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${property.hey}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringbootUsepropertyApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyHey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 각 프로파일 별로 다른 속성을 읽게하고 싶으면 &lt;strong&gt;java -jar&lt;/strong&gt; 커맨드를 통해 Spring Boot 애플리케이션을 시작시킬 때 다음과 같이 &lt;strong&gt;-Dspring.profiles.active=dev&lt;/strong&gt; 같이 옵션을 주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;아무것도-주지-않았을-때-java--jar-appjar&quot;&gt;아무것도 주지 않았을 때 (&lt;strong&gt;java -jar app.jar&lt;/strong&gt;)&lt;/h4&gt;

&lt;p&gt;다음과 같이 아무 옵션도 주지 않았을 때 &lt;strong&gt;propertyHello&lt;/strong&gt; 를 제외한 나머지 속성 값들은 &lt;strong&gt;application.properties&lt;/strong&gt; 에 있는 디폴트 속성 값이 설정된 것을 알 수 있다. &lt;strong&gt;spring.profiles.active=local&lt;/strong&gt; 로 설정하였기 때문에 디폴트 프로파일이 &lt;strong&gt;local&lt;/strong&gt; 로 설정되어 &lt;strong&gt;application-local.properties&lt;/strong&gt; 에 있는 &lt;strong&gt;propertyHello&lt;/strong&gt; 값이 설정된 것이다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;profile로-dev-속성을-주었을-경우-java--jar--dspringprofilesactivedev-appjar&quot;&gt;profile로 dev 속성을 주었을 경우 (&lt;strong&gt;java -jar -Dspring.profiles.active=dev app.jar&lt;/strong&gt;)&lt;/h4&gt;

&lt;p&gt;다음과 같이 공통 속성을 뺀 &lt;strong&gt;application-dev.properties&lt;/strong&gt; 있는 값만 따로 설정된 것을 알 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;production 프로파일도 마찬가지로 &lt;strong&gt;application-production.properties&lt;/strong&gt; 에 있는 값만 따로 설정되고 나머지 공통 속성은 &lt;strong&gt;application.properties&lt;/strong&gt; 있는 값이 설정된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;yaml-사용&quot;&gt;yaml 사용&lt;/h3&gt;

&lt;p&gt;Spring Boot에서는 application.properties가 아닌 &lt;strong&gt;application.yml&lt;/strong&gt; 을 이용해 프로파일 간의 속성들을 관리할 수 있다.
&lt;strong&gt;src/main/resources&lt;/strong&gt; 안에 application.properties가 아닌 &lt;strong&gt;application.yml&lt;/strong&gt; 파일을 위치시키면 자동으로 그 파일을 로드하여 설정한다.&lt;/p&gt;

&lt;p&gt;application.properties 와 마찬가지로 &lt;strong&gt;java -jar -Dspring.profiles.active=dev app.jar&lt;/strong&gt; 같이 옵션을 주어 프로파일 별로 다르게 속성을 설정할 수 있는데 &lt;strong&gt;한 yml 파일에 프로파일 간의 다른 속성들을 설정할 수 있다는 것이 다르다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;application-{profile}.properties&lt;/strong&gt; 를 통해 프로파일 설정한 것과 마찬가지로 똑같이 yml 파일을 이용해서 프로파일 별 속성이 올바르게 로드되는지 확인해보자. 다음을 &lt;strong&gt;src/main/resources&lt;/strong&gt; 안에 &lt;strong&gt;application.yml&lt;/strong&gt; 이라는 이름의 파일에 작성하면 java의 &lt;strong&gt;“-D”&lt;/strong&gt; 옵션에 따라 다르게 프로파일 속성을 로드할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  profiles:
    active: local

property:
  hello: default_hello
  hi: default_hi
  hey: default_hey

---
spring:
  profiles: local

property:
  hello: local_hello

---

spring:
  profiles: dev

property:
  hi: dev_hi

---

spring:
  profiles: production

property:
  hey: production_hey
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;.properties 파일과는 다르게 yml 파일로 작성하면 각 프로퍼티 간에 계층화시켜 작성할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;프로파일별-디렉토리-사용&quot;&gt;프로파일별 디렉토리 사용&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;src/main/resource&lt;/strong&gt; 에 두는 것이 아니라 이 디렉토리 안에 프로파일 별로 디렉토리를 생성하고 그 안에 속성을 담은 파일을 두고 싶을 수도 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-28-spring_boot_profile/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각 프로파일 디렉토리 (local, dev, production)에는 각 프로파일마다 필요한 값만 설정되어 있고 profile 디렉토리에 있는 application.properties에는 공통 속성이 있다고 했을 때 다음과 같이 jar 파일을 실행시킬 때 &lt;strong&gt;–spring-config.location&lt;/strong&gt; 을 이용하여 프로파일 별로 properties 파일을 다르게 로드하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;java -jar useproperty-0.0.1-SNAPSHOT.jar –spring.config.location=classpath:/profiles/application.properties,classpath:/profiles/local/application.properties&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;–spring.config.location에는 properties 파일을 여러 개 줄 수 있는데, 각 properties 파일에 같은 속성에 대한 값이 있다면 &lt;strong&gt;나중에 오는 properties 파일에 있는 값으로 오버라이드 된다.&lt;/strong&gt;
이런 식으로 공통 속성이 있는 properties 파일을 먼저 로드하고 프로파일 별 properties 파일은 나중에 로드함으로써 각 프로파일 별 속성을 다르게 줄 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 옵션을 사용할 때 각 파일 path 간에 빈칸을 주면 안된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 옵션을 jar 파일을 실행할 때 주기 싫고 자동으로 주고 싶다면 &lt;strong&gt;환경변수, SPRING_CONFIG_LOCATION&lt;/strong&gt; 를 활용하자.
이 것을 이용하면, 각 환경마다 미리 환경 변수를 설정해놓고 아무 옵션없이 알맞는 프로파일을 로드하는 것이 가능해지므로, 실행 스크립트 같은 것을 별도로 만들 필요 없다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;*nix system
&lt;strong&gt;export SPRING_CONFIG_LOCATION=classpath:/profiles/application.properties,classpath:/profiles/local/application.properties&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows OS
&lt;strong&gt;set SPRING_CONFIG_LOCATION=classpath:/profiles/application.properties,classpath:/profiles/local/application.properties&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/28/spring_boot_profile-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/28/spring_boot_profile-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring annotations: 02</title>
        <description>&lt;h1 id=&quot;spring-annotations-02&quot;&gt;Spring Annotations: 02&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;원본 글: &lt;a href=&quot;http://noritersand.tistory.com/457&quot;&gt;http://noritersand.tistory.com/457&lt;/a&gt;,  &lt;a href=&quot;http://noritersand.tistory.com/357&quot;&gt;http://noritersand.tistory.com/357&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;requestmapping&quot;&gt;@RequestMapping&lt;/h2&gt;

&lt;p&gt;package: org.springframework.web.bind.annotation&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Mapping&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;URL을 &lt;strong&gt;Controller&lt;/strong&gt; 의 메소드와 매핑시킬 때 사용하는 Spring의 annotation 이다.&lt;/p&gt;

&lt;p&gt;보통 클래스나 메소드 선언부에 다음과 같이 이 annotation과 함께 &lt;strong&gt;URL을 명시하여&lt;/strong&gt; 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring Blog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;URL 외에도 &lt;strong&gt;HTTP 요청 메소드 (GET / POST / PUT / DELETE) 나, 헤더 값에 매핑 될 수 있도록 -O= 옵션을 제공한다.&lt;/strong&gt;
위의 RequestMapping의 정의를 보면 옵션이 &lt;strong&gt;path나 value, params, header 등이 있는 것을 알 수 있을 것이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드 내에서 &lt;strong&gt;View Name&lt;/strong&gt; 을 별도로 설정하지 않으면 @RequestMapping의 path 로 설정한 URL이 그대로 View Name으로 설정된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;requestmapping-options&quot;&gt;@RequestMapping options&lt;/h3&gt;

&lt;h4 id=&quot;path-혹은-value&quot;&gt;path (혹은 value)&lt;/h4&gt;

&lt;p&gt;요청된 URL에 따라 매핑시킨다.
URL을 명시할 때 다음과 같이 줄 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;path = &quot;some.url.action&quot;
path = {&quot;some-url1&quot;, &quot;some-url2&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 이 옵션을 사용할 때는 다음과 같이 코드를 작성할 수 있다. 다음과 같이 작성할 경우 URL &lt;strong&gt;/hello 및 /hi&lt;/strong&gt; 의 요청은 index 메소드가 처리하게 될 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	 &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring Blog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;method&quot;&gt;method&lt;/h4&gt;

&lt;p&gt;GET, POST, PUT, DELETE 같은 &lt;strong&gt;HTTP request methoad에 따라&lt;/strong&gt; 매핑을 결정한다.
줄 수 있는 HTTP Request method 값들은 &lt;strong&gt;enum&lt;/strong&gt; 으로, 다음과 같이 정의되어 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRACE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 옵션을 &lt;strong&gt;path 옵션과 사용&lt;/strong&gt; 할 때, 다음과 같이 특정 HTTP request method와 URL로 매핑시킬 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/hi&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	 &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Spring Blog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 옵션으로 사용할 수 있는 HTTP request method 중에 &lt;strong&gt;GET / POST / PUT / PATCH / DELETE&lt;/strong&gt; 를 사용하고자 할 때 다음 annotation 들로 대체할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PostMapping&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PutMapping&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PatchMapping&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@DeleteMapping&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 annotation은 특별한 것이 아니라 그냥 &lt;strong&gt;@RequestMapping 에 옵션 method를 준 것과 다름없다.&lt;/strong&gt;
&lt;strong&gt;@GetMapping&lt;/strong&gt; annotation은 다음과 같이 정의되어 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;@RequestMapping&lt;/strong&gt; annotation 정의과 비교했을 때 &lt;strong&gt;method 옵션&lt;/strong&gt; 을 따로 줄 수 없는 것만 다른 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;params&quot;&gt;params&lt;/h4&gt;

&lt;p&gt;이 옵션은 요청된 파라미터에 따라 매핑시킬 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;params = {&quot;someParam1=someValue&quot;, &quot;someParam2&quot;}
params = &quot;!someExcludeParam&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래처럼 작성하였을 때, URL 파라미터에 &lt;strong&gt;param1 과 param2 가 존재&lt;/strong&gt; 해야하고, &lt;strong&gt;param1의 값은 a&lt;/strong&gt; 여야 하며, &lt;strong&gt;myParam&lt;/strong&gt; 는 있으면 안된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;param1=a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!myParam&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;requestparam&quot;&gt;@RequestParam&lt;/h2&gt;

&lt;p&gt;이 annotation은 &lt;strong&gt;key=value&lt;/strong&gt; 로 넘어오는 쿼리스트링 혹은 form 데이터를 메소드의 파라미터로 지정한다.
대체로 파라미터의 개수가 적을 때 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;methodName(@RequestParam(&quot;param&quot;) obj)
methodName(@RequestParam Map)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;전달되는 파라미터의 이름을 지정한다. 이름 외에 기본값(defaultValue), 필수여부(required)를 설정할 수 있다. 값이 할당될 변수의 타입이 Map 혹은 MultiValueMap 일 때는 명시하지 않는다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;obj&lt;/strong&gt; 는 지정한 이름과 일치하는 파라미터의 값을 할당할 변수이다. 보통 &lt;strong&gt;String&lt;/strong&gt; 타입을 선언하지만, 넘어온 값이 숫자일 경우에 한해 &lt;strong&gt;int 등의 숫자 타입&lt;/strong&gt; 도 가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/editBlog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;editBlogHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blogId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blogId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blogService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBlog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blogId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ModelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oper&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// value: request parameter의 이름&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//@RequestParam 어노테이션이 적용된 파라미터는 기본적으로 필수 파라미터이다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//따라서, 명시한 파라미터가 존재하지 않을 경우 400 에러가 발생한다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//여기서 파라미터에 값이 있을수도 없을수도 있는 로직을 구현하려면 다음처럼 작성한다.&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;num2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;oper&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;map-에-할당-여러-파라미터의-값을-map에-넘겨준다&quot;&gt;Map 에 할당 (여러 파라미터의 값을 Map에 넘겨준다)&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/faqDetail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;faqDetail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;searchValue&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// req.getParameter(&quot;searchValue&quot;) 와 같다.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/board/faq/faqDetail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;controlleradvice--exceptionhandler&quot;&gt;@ControllerAdvice / @ExceptionHandler&lt;/h2&gt;

&lt;p&gt;이 annotation들은 서버 애플리케이션이 운영 도중에 &lt;strong&gt;Exception&lt;/strong&gt; 이 발생했을 때 작업을 처리하기 위해 사용한다.
annotation들의 정의는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerAdvice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@ControllerAdvice&lt;/strong&gt; 가 선언된 클래스는 자동으로 스프링 빈으로 등록되며, &lt;strong&gt;@ExceptionHandler&lt;/strong&gt; annotation 은 메소드에 선언할 수 있는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;다음은 이 annotation들을 사용해서 예외처리를 담당하는 클래스를 정의한 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ControllerAdvice&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleRuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exceptionHandler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 클래스에 &lt;strong&gt;@ControllerAdvice&lt;/strong&gt; annotation을 선언해주고, 각 메소드마다 &lt;strong&gt;@ExceptionHandler&lt;/strong&gt; annotation 으로
어떠한 Exception을 처리할 것인지 정의할 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 처리하면 특정 Exception이 발생할 때 &lt;strong&gt;@ExceptionHandler&lt;/strong&gt; annotation이 선언된 메소드가 그 Exception을 받아 처리할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;리턴 값으로는 void 부터 ModelAndView 까지 다양하게 리턴할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/28/spring_annotations_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/28/spring_annotations_02-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring annotations: 01</title>
        <description>&lt;h1 id=&quot;spring-annotations-01&quot;&gt;Spring Annotations: 01&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;원본 글: &lt;a href=&quot;http://noritersand.tistory.com/156&quot;&gt;http://noritersand.tistory.com/156&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;service&quot;&gt;@Service&lt;/h2&gt;

&lt;p&gt;package: org.springframework.stereotype&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@Controller&lt;/strong&gt; 마찬가지로 &lt;strong&gt;@Component&lt;/strong&gt; annotation이 선언되어 있는 덕분에, &lt;strong&gt;@Service&lt;/strong&gt; annotation이 선언된 클래스도 스프링 빈으로 등록될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;repository&quot;&gt;@Repository&lt;/h2&gt;

&lt;p&gt;package: org.springframework.stereotype&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 annotation은 일반적으로 데이터를 처리하는 &lt;strong&gt;DAO&lt;/strong&gt; 에 사용되며, &lt;strong&gt;DB Exception&lt;/strong&gt; 이 발생할 경우, &lt;strong&gt;DataAccessException&lt;/strong&gt; 으로 변환한다. 마찬가지로 스프링 빈으로 자동 등록된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepositoryImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;required&quot;&gt;@Required&lt;/h2&gt;

&lt;p&gt;package: org.springframework.beans.factory.annotation&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@Required&lt;/strong&gt; annotation은 필수 프로퍼티임을 명시하는 것으로 설정하지 않을 경우 빈 생성할 때 예외를 발생시킨다.&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;@Required&lt;/strong&gt; annotation이 선언되어 있을 때,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Required&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 xml에 반드시 설정해야 하며, 설정하지 않으면 예외를 발생시킬 것이다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanpostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userService&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.co.UserService&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- @Required 어노테이션을 적용하였으므로 설정하지 않으면 예외를 발생시킨다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RequiredAnnotationBeanpostProcessor&lt;/strong&gt; 클래스는 스프링 컨테이너에 등록된 빈들을 조사하여 &lt;strong&gt;@Required&lt;/strong&gt; annotation이 선언된 프로퍼티 값이 설정되어 있는지 검사한다.&lt;/p&gt;

&lt;p&gt;사실 위의 xml과 같이 할 필요없이, xml 파일에 다음과 같이 &lt;strong&gt;annotation-config&lt;/strong&gt; 를 추가하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;autowired&quot;&gt;@Autowired&lt;/h2&gt;

&lt;p&gt;package: org.springframework.beans.factory.annotation&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CONSTRUCTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANNOTATION_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Autowired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스프링 빈 간의 &lt;strong&gt;의존관계를 자동설정 (DI)&lt;/strong&gt; 할 때 사용하며, 타입을 통해 의존성 있는 객체를 자동으로 주입시켜 준다.
그러므로, &lt;strong&gt;해당 타입의 빈이 존재하지 않거나 2개 이상 존재할 경우 예외를 발생시킨다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 이 annotation을 선언한 프로퍼티 중에 반드시 설정할 필요가 없을 경우에는 예외를 발생시키지 않을 수도 있다.
&lt;strong&gt;@Autowired&lt;/strong&gt; 정의를 보면 알겠지만 &lt;strong&gt;required&lt;/strong&gt; 는 디폴트가 true로 되어 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 annotation을 사용하려면 xml에 다음과 같이 &lt;strong&gt;AutowiredAnnotationBeanPostProcessor&lt;/strong&gt; 빈을 등록해야 하지만 &lt;strong&gt;@Required&lt;/strong&gt; annotation 때와 마찬가지로 &lt;strong&gt;annotation-config&lt;/strong&gt; 태그를 추가하면 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 2개 이상 같은 타입의 빈이 존재하면 예외가 발생하는데, &lt;strong&gt;@Qualifier&lt;/strong&gt; annotation를 통해 동일한 타입 빈들 중에 특정 빈을 사용하도록 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDaoTest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;qualifier&quot;&gt;@Qualifier&lt;/h2&gt;

&lt;p&gt;package: org.springframework.factory.annotation&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ANNOTATION_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qualifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 annotation은 보통 &lt;strong&gt;@Autowired&lt;/strong&gt; annotation과 같이 사용된다. 이 annotation을 사용함으로써 동일한 타입의 빈이 여러 개 존재할 경우 특정 이름의 빈을 주입할 수 있게 설정한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;resource&quot;&gt;@Resource&lt;/h2&gt;

&lt;p&gt;package: javax.annotation.Resource&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자바 6 및 JEE5에 추가된 annotation으로 애플리케이션에서 필요로 하는 자원을 자동 연결하고 싶을 때 사용한다.
스프링에서는 의존하는 빈 객체를 전달할 때 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@Autowired&lt;/strong&gt; annotation과 비슷하지만 &lt;strong&gt;@Autowired&lt;/strong&gt; 는 빈 타입으로, &lt;strong&gt;@Resource&lt;/strong&gt; 는 이름으로 연결한다는 점이 다르다.&lt;/p&gt;

&lt;p&gt;다음과 같이 xml 파일에 빈이 등록되어 있다고 하면,&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adminUserService&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.co.UserService&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 annotation을 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adminUserService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마찬가지로 다음과 같이 &lt;strong&gt;CommonAnnotationBeanPostProcessor&lt;/strong&gt; 빈을 등록해야 하지만 &lt;strong&gt;annotation-config&lt;/strong&gt; 태그로 대체할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;postconstruct&quot;&gt;@PostConstruct&lt;/h2&gt;

&lt;p&gt;package: javax.annotation&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostConstruct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빈을 생성 한 후에 초기화 작업을 따로 수행할 때 사용한다.
다음과 같이 특정 메소드에 이 annotation을 선언하면 객체 생성 후 메소드가 자동 실행된다.&lt;/p&gt;

&lt;p&gt;사용하기 위해서는 &lt;strong&gt;CommonAnnotationBeanPostProcessor&lt;/strong&gt; 빈을 등록해야 하지만 마찬가지로 &lt;strong&gt;annotation-config&lt;/strong&gt; 태그로 대체 가능하다.&lt;/p&gt;

&lt;p&gt;이 annotation과 비슷하게 객체 소멸 전에 특정 메소드가 호출될 수 있게하는 &lt;strong&gt;@PreDestroy&lt;/strong&gt; annotation 도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;inject&quot;&gt;@Inject&lt;/h2&gt;

&lt;p&gt;SR-330 표준 annotation으로 Spring 3부터 지원하는 annotation이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sessionattributes&quot;&gt;@SessionAttributes&lt;/h2&gt;

&lt;p&gt;이 annotation은 세션 상에서 &lt;strong&gt;model의 정보를 유지&lt;/strong&gt; 하고 싶을 때 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SessionAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlogController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 중간생략&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/createBlog&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBlogHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRegDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ModelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 중간생략&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;requestbody&quot;&gt;@RequestBody&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 annotation이 선언된 파라미터는 &lt;strong&gt;HTTP Request Body&lt;/strong&gt; 내용이 그대로 전달된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;penaltyInfoDtlUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestBody&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;responsebody&quot;&gt;@ResponseBody&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResponseBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;메소드에 이 annotation이 선언되면 메소드가 리턴되는 값은 &lt;strong&gt;View&lt;/strong&gt;를 통해서 출력되지 않고, &lt;strong&gt;HTTP Response Body&lt;/strong&gt; 에 내용이 직접 쓰여진다.
클라이언트로 &lt;strong&gt;JSON&lt;/strong&gt; 형태의 값으로 리턴할 때 유용하다. 객체를 넘길 경우, &lt;strong&gt;JASKSON&lt;/strong&gt; 에 의하여 문자열로 변환된다.&lt;/p&gt;

&lt;p&gt;그리고 이 annotation이 설정될 경우 애플리케이션 컨텍스트에 설정된 &lt;strong&gt;resolver&lt;/strong&gt; 를 무시한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/getVocTypeList&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getVocTypeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vocData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gvocInf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;searchVocTypeList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vocData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;pathvariable&quot;&gt;@PathVariable&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;URL의 템플릿 데이터를 &lt;strong&gt;파라미터와 매핑&lt;/strong&gt; 시키고 싶을 때 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ex.exController&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/blog/{userId}/main.action&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;restful/result&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;annotation-config&lt;/strong&gt; 태그는 annotation과 관련하여 아래 &lt;strong&gt;BeanPostProcess&lt;/strong&gt; 를 등록하는 기능을 담당한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.RequiredAnnotationBeanpostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.ConfigurationClassPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/28/spring_annotations_01-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/28/spring_annotations_01-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring annotations: 00</title>
        <description>&lt;h1 id=&quot;spring-annotations-00&quot;&gt;Spring Annotations: 00&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;원본 글: &lt;a href=&quot;http://noritersand.tistory.com/156&quot;&gt;http://noritersand.tistory.com/156&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;component&quot;&gt;@Component&lt;/h2&gt;

&lt;p&gt;package: org.springframework.stereotype&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;context:component-scan&amp;gt;&lt;/strong&gt; 태그를 application context xml 파일에 다음과 깉이 추가하면 해당 annotation 이 적용된 모든 클래스를 스프링 빈으로 등록한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.co.myproject&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 xml 파일에 해당 태그를 추가하고 적용할 기본 패키지를 base-package 속성으로 등록하면 된다. base-package 하위에 &lt;strong&gt;@Component&lt;/strong&gt; 로 선언된 클래스를 모두 빈으로 자동등록할 것이다. bean의 이름은 해당 클래스명 (첫글자는 소문자))이 사용된다.&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;include-filter&lt;/strong&gt; 와 &lt;strong&gt;exclude-filer&lt;/strong&gt; 를 사용하면 이 &lt;strong&gt;컴포넌트를 스캔하는&lt;/strong&gt; 작업에서 특정 타입이나 패턴에 매칭되는 클래스를 빈으로 자동 등록하거나 제외시킬 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.co.myproject&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;context:include-filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;regex&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*IBastisRepository&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;context:exclude-filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;annotation&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.stereotype.Controller&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context:component-scan&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작성하면 &lt;strong&gt;IBastisRepository&lt;/strong&gt; 이름으로 끝나는 클래스들은 자동으로 빈으로 등록하고, &lt;strong&gt;@Controller&lt;/strong&gt; annotation이 선언된 클래스는 빈으로 자동 등록하지 않을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;context:include-filter&amp;gt;&lt;/strong&gt; 태그와 &lt;strong&gt;&amp;lt;context:exclude-filter&amp;gt;&lt;/strong&gt; 태그는 각각 &lt;strong&gt;type&lt;/strong&gt; 속성과 &lt;strong&gt;expression&lt;/strong&gt; 속성을 가지고 있는데, &lt;strong&gt;type&lt;/strong&gt; 속성에 따라 &lt;strong&gt;expression&lt;/strong&gt; 에 올 수 있는 값이 달라진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;annotation: 클래스에 지정된 annotation이 선언되었는지 여부, expression 속성에는 &lt;strong&gt;“org.springframework.stereotype.Controller”&lt;/strong&gt; 와 같은 annotation 이름을 입력한다.&lt;/li&gt;
  &lt;li&gt;assignable: 클래스가 지정한 타입으로 할당 가능한지의 여부, expression 속성에는 &lt;strong&gt;“org.exampleClass”&lt;/strong&gt; 와 같은 타입 이름을 입력한다.&lt;/li&gt;
  &lt;li&gt;regex: 클래스 이름이 정규 표현식에 매칭되는지의 여부, expression 속성에는 &lt;strong&gt;“org.example.*Controller”&lt;/strong&gt; 와 같은 정규표현식을 쓸 수 있다.&lt;/li&gt;
  &lt;li&gt;aspectj: 클래스 이름이 AspectJ 의 표현식에 매칭되는지의 여부. expression 속성에는 &lt;strong&gt;&quot;org.example..*Controller+”&lt;/strong&gt; 와 같이 AspectJ 표현식을 입력한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;controller&quot;&gt;@Controller&lt;/h2&gt;

&lt;p&gt;package: org.springframework.stereotype&lt;/p&gt;

&lt;p&gt;Spring MVC에서 Controller 역할을 하는 클래스 선언을 이 annotation을 통해 단순하게 할 수 있다.
Controller로 사용하기 위한 클래스에 이 annotation을 선언하면 &lt;strong&gt;component-scan&lt;/strong&gt; 을 통해 스프링 빈으로 자동 등록된다.
또한 앞서 언급한 &lt;strong&gt;&amp;lt;context:exclude-filter&amp;gt;&lt;/strong&gt; 태그를 통해 자동 등록되는 것을 막을 수도 있다.&lt;/p&gt;

&lt;p&gt;이 annotation은 다음과 같이 정의되어 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;strong&gt;@Component&lt;/strong&gt; annotation이 선언되어 있는 덕분에, &lt;strong&gt;@Controller&lt;/strong&gt; annotation이 선언된 클래스도 스프링 빈으로 등록될 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;이 &lt;strong&gt;@Controller&lt;/strong&gt; annotation으로 선언된 클래스의 메서드에 다음과 같이 특정 타입이나 annotation을 사용해 자동 매핑하거나 특정 정보에 접근할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파라미터 타입&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;HttpServletRequest, HttpServletResponse, HttpSession&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Servlet API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;java.util.Locale&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;현재 요청에 대한 Locale 정보&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;InputStream, Reader&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;요청 컨텐츠에 직접 접근 시 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OutputStream, Writer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;응답 컨텐츠를 생성할 때 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@PathVariable 이 적용된 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;URL 템플릿 변수이 접근시 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestParam 이 적용된 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP 파라미터와 매핑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestHeader 이 적용된 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP 헤더와 매핑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestBody 이 적용된 변수&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP RequestBody에 접근시 사용. HttpMessageConverter를 이용해 해당 타입으로 변환한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Map, Model, ModelMap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;뷰에 전달할 모델 데이터를 설정시 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;커맨드 객체&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP 요청 파라미터를 저장한 객체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Errors, BindingResult&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP 요청 파라미터를 커맨드 객체에 저장한 결과&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SessionStatus&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;폼 처리를 완료했음을 처리하기 위해 사용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;servlet-api의-httpservletrequest-httpservletresponse-httpsession&quot;&gt;Servlet API의 HttpServletRequest, HttpServletResponse, HttpSession&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;javautillocale&quot;&gt;java.util.Locale&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;product.error.exist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;javaioinputstream--javaioreader&quot;&gt;java.io.InputStream / java.io.Reader&lt;/h4&gt;
&lt;p&gt;Request의 content를 직접 처리할 경우 (Servlet API가 제공)&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;readBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; &lt;strong&gt;@RequestParam&lt;/strong&gt; 이 적용된 파라미터&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/deleteProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productNo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;javautilmap-또는-orgspringframeworkuimodel--orgspringframeworkuimodelmap&quot;&gt;java.util.Map 또는 org.springframework.ui.Model / org.springframework.ui.ModelMap&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt; 로 데이터를 전달해야 하는 경우, 위 타입의 파라미터를 정의하고, 메소드 내부에서 &lt;strong&gt;View&lt;/strong&gt; 로 전달할 데이터를 추가&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/getProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productNo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/jsp/viewProduct.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/getProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productNo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/jsp/viewProduct.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/getProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@RequestParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productNo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/WEB-INF/jsp/viewProduct.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;command-또는-form-객체&quot;&gt;Command 또는 form 객체&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;HTTP Request로 전달된 parameter를 binding&lt;/strong&gt; 한 객체로, &lt;strong&gt;View&lt;/strong&gt; 에서 사용가능하고, &lt;strong&gt;@SessionAttribute&lt;/strong&gt; 를 통해 session에 저장되어 관리될 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/addProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 여기서 'product'가 Command(/form) 객체이다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/addProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@ModelAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updatedProduct&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 여기서 'updatedProduct'라는 이름의 'product'객체가 Command(/form) 객체이다.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;orgspringframeworkvalidationerrors-또는-orgspringframeworkvalidationbindingresult&quot;&gt;org.springframework.validation.Errors 또는 org.springframework.validation.BindingResult&lt;/h4&gt;

&lt;p&gt;바로 이전의 입력파라미터인 &lt;strong&gt;Command 또는 form 객체의 validation 결과 값을 저장하는 객체&lt;/strong&gt; 로 해당 command 또는 form 객체 바로 다음에 위치해야 함에 유의하도록 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;        
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProductValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/jsp/annotation/sales/product/productForm.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 중략&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;orgspringframeworkwebbindsupportsessionstatus&quot;&gt;org.springframework.web.bind.support.SessionStatus&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;폼 처리가 완료되었을 때 status를 처리&lt;/strong&gt; 하기 위해서 argument로 설정. SessionStatus.setComplete()를 호출하면 컨트롤러 클래스에 @SessionAttributes로 정의된 Model객체를 session에서 지우도록 이벤트를 발생시킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=add&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindingResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 중략&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;리턴 타입&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ModelAndView&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;View / Model 정보를 담고있는 ModelAndView 타입의 객체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Model&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;View에 전달할 객체 정보를 담는 Model 타입의 객체를 리턴. View 이름은 요청 URL로부터 결정된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Map, ModelMap&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;View에 전달할 객체 정보를 담는 Map 혹은 ModelMap을 환리턴. View 이름은 요청 URL로부터 결정된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;View 이름을 리턴&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;View 객체&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;View 객체를 직접 리턴. 해당 View 객체를 이용해서 View를 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;void&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;메서드가 ServletResponse나 HttpServletResponse 타입의 파라미터를 가질 때 직접 응답을 처리한다고 가정&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@ResponseBody&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;해당 annotation이 선언된 경우 리턴 객체를 HTTP response로 전송한다. HttpMessageConverter를 통해 객체를 HTTP 응답 스트림으로 변환&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;modelandview-객체&quot;&gt;ModelAndView 객체&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt; 와 &lt;strong&gt;Model&lt;/strong&gt; 정보를 모두 포함한 객체를 리턴할 경우&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;param=addView&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addProductView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelAndView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/jsp/product/productForm.jsp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// mnv.setViewName(&quot;/jsp/product/productForm.jsp&quot;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;product&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;map-modelmap&quot;&gt;Map, ModelMap&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Web View&lt;/strong&gt; 로 전달할 데이터만 리턴할 경우&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/productList.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProductList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//productList가 &quot;productList&quot;라는 이름으로 저장됨.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 View에 대한 정보를 명시적으로 리턴하지는 않았지만, 내부적으로 View name은 &lt;strong&gt;RequestToViewNameTranslator&lt;/strong&gt; 에 의해서 입력된 HTTP Request를 이용하여 생성된다. 예를 들어 &lt;strong&gt;DefaultRequestToViewNameTranslator&lt;/strong&gt; 는 입력된 HTTP Request URI를 변환하여 View name을 다음과 같이 생성한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;http://localhost:8080/display.do -&amp;gt; 생성된 View name: &lt;strong&gt;‘display’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://localhost:8080/admin/index.do -&amp;gt; 생성된 View name: &lt;strong&gt;‘admin/index’&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 자동으로 생성되는 View name에 ‘jsp/’와 같이 prefix를 붙이거나 ‘.jsp’ 같은 확장자를 덧붙이고자 할 때는 아래와 같이 속정 정의 xml(xxx-servlet.xml)에 추가하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewNameTranslator&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prefix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jsp/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;suffix&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;modelmap&quot;&gt;ModelMap&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Web View&lt;/strong&gt; 로 전달할 데이터만 리턴하는 경우.
&lt;strong&gt;Model&lt;/strong&gt; 은 Java-5 이상에서 사용할 수 있는 인터페이스이다. 기본적으로 ModelMap과 같은 기능을 제공한다.
Model 인터페이스의 구현클래스에는 BindingAwareModelMap 와 ExtendedModelMap 이 있다. View name은 위에서 설명한 바와 같이 RequestToViewNameTranslator에 의해 내부적으로 생성된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/productList.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProductList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProductList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ExtendedModelMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExtendedModelMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;productList&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;string&quot;&gt;String&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;View 이름&lt;/strong&gt; 만 리턴하는 경우&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/addProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/updateProduct.do&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateProduct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/listProduct.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;void&quot;&gt;void&lt;/h4&gt;

&lt;p&gt;메서드 내부에서 &lt;strong&gt;직접 HTTP Response를 처리&lt;/strong&gt; 하는 경우. 또는 &lt;strong&gt;View name&lt;/strong&gt; 이 &lt;strong&gt;RequestToViewNameTranslator&lt;/strong&gt; 에 의해 내부적으로 생성되는 경우&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/addView.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 중략&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// response 직접 처리&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/addView.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 중략&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// View name이 DefaultRequestToViewNameTranslator에 의해서 내부적으로 'addView'로 결정됨.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;responsebody-annotation&quot;&gt;@ResponseBody annotation&lt;/h4&gt;

&lt;p&gt;해당 annotation이 붙어 있을 경우, &lt;strong&gt;HTTP ResponseBody&lt;/strong&gt; 로 전송한다.&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/28/spring_annotations_00-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/28/spring_annotations_00-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Annotation</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;이 글은 &lt;a href=&quot;http://www.nextree.co.kr/p5864/&quot;&gt;http://www.nextree.co.kr/p5864/&lt;/a&gt; 포스트를 보고 study, 정리한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;java-annotation&quot;&gt;Java Annotation&lt;/h1&gt;

&lt;p&gt;Annotation 이란 사전을 찾아보면 &lt;strong&gt;주석&lt;/strong&gt; 이라는 뜻인데 자바에서 사용하는 주석인 “//”, “/* */” 과는 크게 다르다.
이 annotation 이란 기능은 Java 5부터 등장한 것인데, 우리가 사용하던 주석과는 다르게 설명 그 이상의 행동을 수행한다.&lt;/p&gt;

&lt;p&gt;Annotation이 붙은 코드는 annotation이 구현된 정보에 따라 연결되는 방향이 결정된다.
그래서 비즈니스 로직에는 영향이 없지만, 해당 타겟의 연결 방법이나 소스코드의 구조를 변경하는 것이 가능하다.
&lt;strong&gt;“이 속성을 어떤 용도로 사용할 것인가, 이 클래스에게 어떤 역할을 부여할 것인가”&lt;/strong&gt; 를 결정해서 붙여준다고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;Annotation은 소스코드에 메타데이터를 삽입하는 것이기 때문에 잘만 사용한다면 가독성 뿐만 아니라 체계적인 소스코드를 구성하는데 도움을 줄 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@CanSale&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드와 같이 annotation은 &lt;strong&gt;@&lt;/strong&gt; 을 붙여 사용한다. 이 annotation은 자바가 기본적으로 제공하는 것도 있고 &lt;strong&gt;(@Deprecated, @Override, @SuppressWarnings)&lt;/strong&gt;, 개발자가 직접 정의해서 사용할 수 도 있다.&lt;/p&gt;

&lt;p&gt;개발자는 annotation을 붙일 타겟과 유지시기 등을 결정하여 자신이 원하는 용도로 사용 가능하다.
이 기능을 잘 활용한다면, 비즈니스 로직과는 별도로 시스템 설정과 관련된 부가적인 사항들은 annotation을 통해 위임하고 개발자는 비즈니스 로직 구현에 집중할 수 있다.&lt;/p&gt;

&lt;p&gt;이를 이용해 AOP(Aspect Oriented Programming, 관심지향프로그래밍) 을 편리하게 구성할 수 있다. Annotation은 컴파일 시기에 처리할 수도 있고, 자바의 &lt;strong&gt;리플렉션&lt;/strong&gt; 을 통해 런타임 때 처리할 수도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;자바 리플렉션은 실행 중인 자바 클래스의 정보를 볼 수 있게 하고, 그 클래스의 구성 정보로 기능을 수행할 수 있도록 한다. 따라사 자바에서는 리플렉션 기능을 통해 annotation을 더욱 효과적으로 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;custom-annotation&quot;&gt;Custom Annotation&lt;/h1&gt;

&lt;p&gt;Annotation을 직접 정의해서 사용해보기 위해서는 먼저 annotation을 정의하는 것이 필요하다.
그 후에 원하는 타겟에 붙여서 사용하는 것이다. Annotation이 붙은 타겟을 어떻게 사용할 지에 대해 구현하면, 해당 기능을 수행될 때 타겟에 붙은 annotation에 따라 타겟의 처리 방향이 결정될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;효율적인-annotation의-사용-예&quot;&gt;효율적인 annotation의 사용 예&lt;/h2&gt;

&lt;p&gt;다음 문제를 살펴보도록 하자.
&lt;strong&gt;“다양한 타입의 객체를 단순한 map 저장소에 저장하기 위해, 서로 다른 객체에서 정의된 key 값을 어떻게 식별할까?”&lt;/strong&gt; 라는 문제이다.&lt;/p&gt;

&lt;p&gt;여러가지 방법이 있겠지만, &lt;strong&gt;“객체마다 그에 맞는 방법으로 저장”&lt;/strong&gt;, &lt;strong&gt;“인터페이스 상속을 통해 객체의 형태를 통일시켜 일관된 방법으로 데이터 처리”&lt;/strong&gt;, &lt;strong&gt;“annotation을 활용하여 데이터 처리”&lt;/strong&gt; 이렇게 3가지로 압축할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;객체마다-그에-맞는-방법으로-저장&quot;&gt;객체마다 그에 맞는 방법으로 저장&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2017-03-28-java_annotation/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가장 기초적인 방법은 서로 다른 타입의 객체에 대해 맞는 처리 방법을 일일이 지정해리주는 것이다.
그러나 이 방법은 새로운 타입이 늘어날 때마다 그에 맞는 데이터 관리 방법을 일일이 지정해주어야 한다.
또한 위 그림에서의 &lt;strong&gt;Data-Server&lt;/strong&gt; 에서 &lt;strong&gt;Service-Server&lt;/strong&gt; 의 객체의 속성을 알고 있어야 한다는 점에서 좋지 않은 설계라 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터페이스-상속을-통한-객체의-형태를-통일시켜-일관된-방법으로-데이터-처리&quot;&gt;인터페이스 상속을 통한 객체의 형태를 통일시켜 일관된 방법으로 데이터 처리&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2017-03-28-java_annotation/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 방법은 인터페이스 상속을 이용하여 &lt;strong&gt;Service-Server&lt;/strong&gt; 에 있는 모든 객체를 관리하기 위해 특정한 틀을 만드는 것이다. 이러면 &lt;strong&gt;Data-Server&lt;/strong&gt; 에서는 일관된 인터페이스를 통해 속성을 사용할 수 있으므로 객체의 타입이 늘어난다고 해도 &lt;strong&gt;Data-Server&lt;/strong&gt; 쪽의 구현은 한 번만 정의해서 데이터를 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2017-03-28-java_annotation/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 UML에서 객체 &lt;strong&gt;SkillSpec&lt;/strong&gt; 이라는 객체를 저장, 조회, 삭제하는 시스템의 클래스 다이어그램이다.
&lt;strong&gt;SkillSpec&lt;/strong&gt; 이 상속받는 &lt;strong&gt;Identifiable&lt;/strong&gt; 인터페이스에는 &lt;strong&gt;getOld, setOld&lt;/strong&gt; 메소드가 있는데 &lt;strong&gt;Data-Server&lt;/strong&gt; 에서는 이 인터페이스를 활용하여 일관된 방법으로 키를 조회할 수 있는 루틴을 구현할 수 있는 것이다.
새로운 타입의 객체를 저장하거나 조회할 때도 이 인터페이스를 상속받으면 &lt;strong&gt;Data-Server&lt;/strong&gt; 의 구현은 수정이 필요가 없어진다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Identifiable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 인터페이스를 정의했을 때 다음 코드와 같이 활용하여 데이터를 저장할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeekRoadRepositoryWithoutAnno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identifiable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekRoadRepositoryWithoutAnno&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identifiable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifiableEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifiableEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequenceMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sequenceMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sequenceMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentSequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequenceMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;identifiableEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;objectMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifiableEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 객체라도 &lt;strong&gt;Identifiable&lt;/strong&gt; 라는 인터페이스를 상속할 것이기 때문에 한 번 구현하는 것으로 모든 타입의 객체에 대해 처리할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 이 방법은 모든 객체마다 &lt;strong&gt;Identifiable&lt;/strong&gt; 인터페이스를 상속받아야 한다. 이 객체는 비즈니스 로직 구현 상, 여러 상속관계를 가질 수 있다. 또한 인터페이스를 만들 때 기존의 객체들과 속성이 충돌해서는 안되기 때문에 이를 고려하면서 구현해야 한다.
따라서 이 방법은 개발자 자신이 구현하려는 비즈니스 로직과는 관련없이 &lt;strong&gt;데이터 저장 방법을 위해 소스코드에 상속을 추가하고 고려를 해야한다는 점&lt;/strong&gt; 에서 더 이상 비즈니스 로직에만 집중할 수 없다는 약점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;annotation을-활용하여-데이터-처리&quot;&gt;Annotation을 활용하여 데이터 처리&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2017-03-28-java_annotation/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 방법은 인터페이스를 활용하는 두 번째 방법의 불편함을 해소하는 방법이다. Annotation을 사용하여 &lt;strong&gt;똑같은 루틴을 통해 처리할 수 있도록 구현이 가능&lt;/strong&gt; 하므로, 인터페이스를 상속받지 않더라도 데이터 처리를 할 수 있다.&lt;/p&gt;

&lt;p&gt;다음 코드는 데이터 처리를 위한 로직을 구현하기 위해 사용할 annotation의 정의이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@Target&lt;/strong&gt; 은 annotation의 타겟을 지정하는 것이다. 이 annotation을 클래스의 필드에 붙일 거면 &lt;strong&gt;FIELD&lt;/strong&gt;, 클래스나 enum에 붙일 때는 &lt;strong&gt;TYPE&lt;/strong&gt; 등으로 어떤 대상을 위한 annotation인지 지정한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Retention&lt;/strong&gt; 은 annotation의 지속기간이다. 개발자는 이 annotation을 소스코드에서 주석으로 사용할 것인지, 컴파일 시기까지 유지할 것인지, 런타임까지 유지할 것인지 결정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서는 Runtime 때 객체 키 값을 알아내어 데이터 처리를 해야하므로 &lt;strong&gt;RetentionPolicy.RUNTIME&lt;/strong&gt; 으로 설정한다.
다음 코드와 같이 사용할 타겟에 annotation을 적용시킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SkillSpec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@ObjectId&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SkillCategory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skillCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 oId 필드에 &lt;strong&gt;ObjectId&lt;/strong&gt; annotation을 선언하여 &lt;strong&gt;Data-Server&lt;/strong&gt; 에서 편리하게 이 객체의 key 값을 식별할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;다음으로 annotation을 통해 객체 타입과는 상관잆어 키 값을 읽어올 수 있도록 다음 클래스를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectIdAnnotator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObjectIdValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccessible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;      
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No annotated id field.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드에서 자바 리플렉션을 통해 해당 객체의 타입 정보 및 필드 정보를 얻어오고, &lt;strong&gt;field.getAnnotation(ObjectId.class)&lt;/strong&gt; 구문으로 &lt;strong&gt;@ObjectId&lt;/strong&gt; annotation이 붙은 필드의 값을 String 값으로 리턴하도록 하였다.&lt;/p&gt;

&lt;p&gt;그리고 데이터 처리를 위해 다음 코드를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeekRoadRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoredObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StoredObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekRoadRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;// ...(생략)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;StoredObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoredObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;objectMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StoredObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtomicInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequenceMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StoredObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getObjectId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ObjectIdAnnotator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setObjectIdField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;StoredObject&lt;/strong&gt; 클래스를 통해 클래스 이름과 순번으로 맵에 저장할 객체들에 유일한 시퀀스 넘버를 제공한다. 어떤 객체의 타입이라도 상관없이 &lt;strong&gt;ObjectId&lt;/strong&gt; annotation이 붙어 있는 속성에 키 값을 설정하므로 Map에 저장되는 모든 객체는 유일한 key 값을 가질 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 구현함으로써, 자바 리플렉션 및 annotation을 통해 한 번 구현으로 여러 타입의 데이터를 처리할 수 있는 것이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;meta-annotation에-대한-부가적인-설명&quot;&gt;Meta Annotation에 대한 부가적인 설명&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;@Target&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElementType.Type: 클래스, 인터페이스, enum 선언부&lt;/li&gt;
  &lt;li&gt;ElementType.CONSTRUCTOR: 생성자 선언부&lt;/li&gt;
  &lt;li&gt;ElementType.LOCAL_VARIABLE: 지역 변수 선언부&lt;/li&gt;
  &lt;li&gt;ElementType.METHOD: 메소드 선언부&lt;/li&gt;
  &lt;li&gt;ElementType.PACKAGE: 패키지 선언부&lt;/li&gt;
  &lt;li&gt;ElementType.PARAMETER: 파라미터 선언부&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;@Retention&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RetentionPolicy.RUNTIME: VM에서 유지 (리플렉션을 통해 검색 가능해짐)&lt;/li&gt;
  &lt;li&gt;RetentionPolicy.SOURCE: 컴파일 시에 class 파일에는 추가되지 않는다.&lt;/li&gt;
  &lt;li&gt;RetentionPolicy.CLASS: class 파일 안에는 annotation이 추가되지만 VM에서는 사용되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;@Documented&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 annotation을 &lt;strong&gt;Javadoc&lt;/strong&gt; 에 포함시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;@Inherited&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서브 클래스가 부모 클래스의 annotation을 상속받을 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2017/03/28/java_annotation-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2017/03/28/java_annotation-post.html</guid>
        
        <category>java</category>
        
        <category>annotation</category>
        
        <category>interface</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring DispatcherServlet</title>
        <description>&lt;h1 id=&quot;dispatcherservlet&quot;&gt;DispatcherServlet&lt;/h1&gt;

&lt;h2 id=&quot;servlet-mapping-webxml&quot;&gt;Servlet Mapping, web.xml&lt;/h2&gt;

&lt;p&gt;원래 Java 웹 프로그래밍을 할 때 다음과 같이 &lt;strong&gt;web.xml&lt;/strong&gt; 에 일일이 서블릿의 정보를 등록하여, 어떠어떠한 URL에 대한 요청을 처리할 수 밖에 없었다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;Lesson03.servlets.HelloWorld&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;MemberUpdateServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;Lesson04.MemberUpdateServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;driver&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;MemberUpdateServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/member/Lesson04/update&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇지만 Spring MVC에서 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 의 등장으로 특정 URL에 대한 처리를 위한 서블릿을 일일이 추가할 필요가 없어졌다.
DispatcherServlet 이 해당 서버 애플리케이션으로 들어오는 모든 요청을 &lt;strong&gt;핸들링&lt;/strong&gt; 해주니까 말이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;webxml의-역할-축소&quot;&gt;web.xml의 역할 축소&lt;/h2&gt;

&lt;p&gt;물론 Sping MVC에서도 &lt;strong&gt;web.xml&lt;/strong&gt; 의 역할은 아직도 중요하다. 일단 서블릿으로 DispatcherServlet 을 다음과 같이 등록하고 이 객체가 처리할 URL 적용 범위도 지정해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;appServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;classpath:/spring/servlet-context.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;appServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 고급 서비스를 위해 &lt;strong&gt;filter&lt;/strong&gt; 나 &lt;strong&gt;listener&lt;/strong&gt; 를 등록하는 역할도 web.xml의 기능으로 남아있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;

...

&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;encodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 DispatcherServlet 을 통해 web.xml에서 하던 &amp;lt;servlet&amp;gt; 매핑은 하지 않아도 좋다. 위 xml의 예와 같이 DispatcherServlet의 &lt;strong&gt;url-pattern을 ‘/’을 설정함으로써 모든 요청은 DispatcherServlet 이 핸들링하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dispatcherservlet의-역할&quot;&gt;DispatcherServlet의 역할&lt;/h2&gt;

&lt;p&gt;DispatcherServlet을 사용한다는 것은 Spring에서 제공하는 &lt;strong&gt;@MVC&lt;/strong&gt; 를 이용하겠다는 뜻이다.
@MVC는 그동한 추상적으로만 알아오고 발전했던 &lt;strong&gt;MVC (Model, View, Controller)&lt;/strong&gt; 설계 영역을 분할하여 사용자가 무조건 MVC로 애플리케이션을 설계하게끔 한다. (Spring이 전략패턴을 dependency injection 이란 이름하에 유도하는 방식과 마찬가지).
이 것은 어떤 사용자건간에, 모두 @MVC를 이용해 애플리케이션을 개발한다면 99% MVC 설계의 원칙대로 웹 애플리케이션이 제작될 수 있게 된다는 뜻이다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-27-spring_dispatcherservlet/00.jpg&quot; alt=&quot;00.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리가 @MVC 라는 이름하에 DispatcherServlet 클래스를 web.xml에 등록하는 순간, 모델 1 / 모델 2  대로 설계를 하고자 머리를 싸맬 필요가 없어진다. &lt;strong&gt;@MVC는 모델 2방식으로 설계할 수 있도록 환경을 조성해주기 때문이다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@MVC는 모델 2방식의 설계가 아니지만 코드를 작성하는 방식이 모델 2와 비슷하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;이제 DispatcherServlet의 역할이 무엇인지 알아보자.
먼저 DispatcherServlet에 대해 간단히 정의하자면 &lt;strong&gt;Model과 Controller, View를 조합하여 브라우저로 출력해주는 역할을 수행하는 클래스&lt;/strong&gt; 라 할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-27-spring_dispatcherservlet/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 두 그림은 DispatcherServlet이 어떤 식으로 클라이언트의 요청을 처리하고 응답하는지 나타낸 것이다.&lt;/p&gt;

&lt;p&gt;(1) 클라이언트가 웹 애플리케이션에 요청하면, 그 URL 요청을 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 가로챈다.
요청을 가로챌 수 있는 것은 web.xml에 등록된 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 의 &amp;lt;url-pattern&amp;gt;이 ‘/’와 같이 해당 애플리케이션의 모든 URL로 등록되었기 때문이다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;appServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;appServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) 가로챈 정보를 &lt;strong&gt;HandlerMapping&lt;/strong&gt; 에게 보내 해당 요청을 처리할 수 있는 &lt;strong&gt;Controller&lt;/strong&gt; 를 찾아낸다. 이 부분은 Spring의 디폴트 전략에 의해 &lt;strong&gt;BeanNameUrlHandlerMapping&lt;/strong&gt; 과 &lt;strong&gt;DefaultAnnotationHandlerMapping&lt;/strong&gt; 이 기본으로 설정되기 때문에 특별한 경우가 아니면 이 부분에 대해 따로 설정할 필요는 없다.&lt;/p&gt;

&lt;p&gt;(3) &lt;strong&gt;HandlerMapping&lt;/strong&gt; 이 해당 요청을 처리할 &lt;strong&gt;Controller&lt;/strong&gt; 를 찾아내면 요청을 해당 &lt;strong&gt;Controller&lt;/strong&gt; 에게 보내준다.
&lt;strong&gt;Controller&lt;/strong&gt; 는 사용자가 직접 구현하는 부분이다. @MVC는 매우 다양한 코딩 방식과 직관적이고 편리한 Controller 작성 방법을 제공하므로, 자신에 알맞는 방식으로 개발해야 한다.&lt;/p&gt;

&lt;p&gt;(4) &lt;strong&gt;Controller&lt;/strong&gt; 는 해당 요청을 처리한 후에 요청을 응답받을 &lt;strong&gt;View&lt;/strong&gt; 의 이름을 리턴하게 된다. (물론 다른 HandlerMapping 전략을 이용한다면 응답 과정이 다를 수 있다.)&lt;/p&gt;

&lt;p&gt;(5) 그 때 이 이름을 &lt;strong&gt;ViewResolver&lt;/strong&gt; 가 먼저 받아 해당하는 &lt;strong&gt;View&lt;/strong&gt; 가 존재하는지 검색한다.&lt;/p&gt;

&lt;p&gt;(6) 해당 &lt;strong&gt;View&lt;/strong&gt; 가 있다면 View에 보낸다.&lt;/p&gt;

&lt;p&gt;(7) 이 결과를 다시 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 으로 보낸다.&lt;/p&gt;

&lt;p&gt;(8) &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 은 최종 결과를 클라이언트로 전송한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dispatcherservlet의-웹-요청-흐름&quot;&gt;DispatcherServlet의 웹 요청 흐름&lt;/h2&gt;

&lt;p&gt;다시 한번 세부적으로 분석해보자. 클라이언트의 웹 요청시에 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 에서 처리하는 흐름은 다음과 같다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-27-spring_dispatcherservlet/05.jpg&quot; alt=&quot;05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 의 &lt;strong&gt;doService&lt;/strong&gt; 메소드에서부터 웹 요청의 처리가 시작된다. &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 에서 사용되는 몇몇 정보를 &lt;strong&gt;request&lt;/strong&gt; 객체에 담는 작업을 진행 후 &lt;strong&gt;doDispatch&lt;/strong&gt; 메소드를 호출한다.&lt;/p&gt;

&lt;p&gt;(2) 아래 (3) 부터 (13)의 작업은 &lt;strong&gt;doDispatch&lt;/strong&gt; 메소드 안에 있다. &lt;strong&gt;Controller / View&lt;/strong&gt; 등의 컴포넌트를 이용한 실제적인 웹 요청 처리가 이루어진다.&lt;/p&gt;

&lt;p&gt;(3) &lt;strong&gt;getHandler&lt;/strong&gt; 메소드는 &lt;strong&gt;RequestMapping&lt;/strong&gt; 객체를 이용하여 요청에 해당하는 &lt;strong&gt;Controller(Handler)&lt;/strong&gt; 를 얻는다.&lt;/p&gt;

&lt;p&gt;(4) 요청에 해당하는 &lt;strong&gt;Handler&lt;/strong&gt; 를 찾았다면 &lt;strong&gt;Handler&lt;/strong&gt; 를 &lt;strong&gt;HandlerExecutionChain&lt;/strong&gt; 이라는 객체에 담아 리턴하는데, 이 때 &lt;strong&gt;HandlerExecutionChain&lt;/strong&gt; 은 요청에 해당하는 &lt;strong&gt;intercepter&lt;/strong&gt; 들이 있다면 함께 담아서 리턴한다.&lt;/p&gt;

&lt;p&gt;(5) 실행될 &lt;strong&gt;intercepter&lt;/strong&gt; 들이 있다면 &lt;strong&gt;intercepter&lt;/strong&gt; 의 &lt;strong&gt;preHandle&lt;/strong&gt; 메소드를 차례로 실행한다.&lt;/p&gt;

&lt;p&gt;(6) &lt;strong&gt;Controller&lt;/strong&gt; 의 인스턴스는 &lt;strong&gt;HandlerExecutionChain&lt;/strong&gt; 객체의 &lt;strong&gt;getHandler&lt;/strong&gt; 메소드를 통해 얻는다.&lt;/p&gt;

&lt;p&gt;(7) &lt;strong&gt;getHandlerAdapter&lt;/strong&gt; 메소드는 &lt;strong&gt;Controller&lt;/strong&gt; 에 적절한 &lt;strong&gt;HandlerAdapter&lt;/strong&gt; 하나를 리턴한다.&lt;/p&gt;

&lt;p&gt;(8) 선택된 &lt;strong&gt;HandlerAdapter&lt;/strong&gt; 의 &lt;strong&gt;handle&lt;/strong&gt; 메소드가 수행되는데, 실제 실행은 파라미터로 넘어온 &lt;strong&gt;Controller&lt;/strong&gt; 를 실행한다.&lt;/p&gt;

&lt;p&gt;(9) 계층형 &lt;strong&gt;Controller&lt;/strong&gt; 의 경우 &lt;strong&gt;handleRequest&lt;/strong&gt; 메소드가 실행된다. &lt;strong&gt;@Controller&lt;/strong&gt; 인 경우 &lt;strong&gt;HandlerAdapter(AnnotationMethodHandlerAdapter)&lt;/strong&gt; 가 &lt;strong&gt;HandlerMethodInvoker&lt;/strong&gt; 를 통해 실행할 &lt;strong&gt;Controller&lt;/strong&gt; 의 메소드를 &lt;strong&gt;invoke()&lt;/strong&gt; 한다.&lt;/p&gt;

&lt;p&gt;(10) &lt;strong&gt;intercepter&lt;/strong&gt; 의 &lt;strong&gt;postHandle&lt;/strong&gt; 메소드가 실행된다.&lt;/p&gt;

&lt;p&gt;(11) &lt;strong&gt;resolveViewName&lt;/strong&gt; 메소드는 논리적 뷰 이름을 가지고 해당 &lt;strong&gt;View&lt;/strong&gt; 객체를 리턴한다.&lt;/p&gt;

&lt;p&gt;(12) &lt;strong&gt;Model&lt;/strong&gt; 객체의 데이터를 보여주기 위해 해당 &lt;strong&gt;View&lt;/strong&gt; 객체의 &lt;strong&gt;render&lt;/strong&gt; 메소드가 수행된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dispatcherservlet이-처리하면-안되는-것들&quot;&gt;DispatcherServlet이 처리하면 안되는 것들..&lt;/h2&gt;

&lt;p&gt;그런데 이런 방식일 경우 문제가 발생한다.
&lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 모든 요청을 &lt;strong&gt;Controller&lt;/strong&gt; 에게 넘겨주는 것은 괜찮은데, 모든 요청을 처리하다보니 이미지나 HTML을 불러오는 요청마처 전부 &lt;strong&gt;Controller&lt;/strong&gt; 로 넘긴다는 것이다. 게다가 JSP 안의 자바스크립트나 스타일시트 파일도 전부 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 요청을 가로채는 바람에 제대로 불러오지도 못하는 상황이다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-27-spring_dispatcherservlet/02.jpg&quot; alt=&quot;02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 이에 대해 예외 처리를 하지 않으면 위와 같이 에러가 로그에 기록될 것이다. &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 해당 요청을 처리할 &lt;strong&gt;Controller&lt;/strong&gt; 를 찾지 못했다는 메시지이다. 이 문제를 해결하기 위해 방법이 몇 가지가 있다.&lt;/p&gt;

&lt;p&gt;(1) &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 처리할 URL과 자바와 관련없는 Resource의 영역을 분리시키는 것&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/apps: 클라이언트가 이 URL로 접근하면 앞으로 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 담당.&lt;/li&gt;
  &lt;li&gt;/resources: 이 URL은 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 처리하지 않는 영역으로 분리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;근데 이 방식은 상당히 코드가 지저분해지는데 form에서 모든 요청을 보낼 때 &lt;strong&gt;apps&lt;/strong&gt; 라는 URL를 붙여주어야 하므로 직관적인 설계가 불가능해진다.&lt;/p&gt;

&lt;p&gt;(2) 모든 요청을 &lt;strong&gt;Controller&lt;/strong&gt; 에 등록하는 방법&lt;/p&gt;

&lt;p&gt;이 방식은 대규모 서비스를 위한 웹 애플리케이션이라면 해서는 안되는 방법이다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Spring 에서는 이 문제를 해결함과 동시에 굉장히 편리한 해결 방법을 고안해 내었다.
바로 &lt;strong&gt;&amp;lt;mvc: resource /&amp;gt;&lt;/strong&gt; 이다. 보통 IDE에서 생성하면 &lt;strong&gt;servlet-context.xml&lt;/strong&gt; 에 다음과 같은 구문이 있을 것이다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;mvc:resources&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resources/**&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;location=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resources/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 전략은 다음과 같다. 먼저 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 을 통해 요청을 처리하는데 만약 &lt;strong&gt;DispatcherServlet&lt;/strong&gt; 이 해당 요청에 대한 &lt;strong&gt;Controller&lt;/strong&gt; 를 찾을 수 없다면 2차적으로 위의 설정된 경로를 검색하여 해당 자원을 찾아내는 것이다.&lt;/p&gt;

&lt;p&gt;실제로 많은 대형 웹서비스들의 비 애플리케이션 자원 URL을 보면 철저하게 static 성격의 외부 자원들을 분리시켜 사용하고 있다.
다음은 네이버 메인 페이지에 대한 page source이다. 밑의 그림과 같이 &lt;strong&gt;static.naver.net&lt;/strong&gt; URL을 통해 이런 자원들을 분리하고 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-27-spring_dispatcherservlet/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;또한 페이스북은 &lt;strong&gt;static.ak.fbcdn.net&lt;/strong&gt; 과 같은 URL로 분리시키고 있다. 이런 예를 볼 때 차후 확장을 위해 비애플리케이션 자원은 반드시 분리해야될 영역이라는 것을 알 수 있다.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/27/spring_dispatcherservlet-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/27/spring_dispatcherservlet-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 10 : Spring Boot Actuator / Remote Shell</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part5, Spirng Boot Actuator, Production-Ready features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;spring-boot-actuator--remote-shell&quot;&gt;Spring Boot Actuator / Remote Shell&lt;/h1&gt;

&lt;p&gt;Spring Boot에서 제공하는 Actuator는 라이브 시스템에서 운영 중인 서버 애플리케이션을 모니터링하고, 관리할 수 있게 해주는 모듈이다. URI를 통해 현재 운영 중인 서버 애플리케이션의 상태를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;pomxml-추가&quot;&gt;pom.xml 추가&lt;/h2&gt;

&lt;p&gt;다음과 같이 pom.xml에 Actuator의 의존성을 추가하면 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-actuator&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 application.properties 파일에 다음 항목을 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;management.security.enabled=false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 property는 권한없이 Actuator를 통해 서버 애플리케이션의 상태를 모니터링할 수 있도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;endpoints&quot;&gt;Endpoints&lt;/h2&gt;

&lt;p&gt;Actuator의 Endpoint는 서버 애플리케이션과 상호작용을 통해 모니터를 할 수 있도록 한다.
Spring Boot는 다양한 built-in endpoint 들을 제공하며, 물론 사용자가 직접 추가해서 사용할 수도 있다.&lt;/p&gt;

&lt;p&gt;Endpoint 들은 각자 자신의 ID를 가지고 있는데, 그 ID 명으로 URL이 매핑된다. 예를 들어 &lt;strong&gt;“health”&lt;/strong&gt; endpoint는 &lt;strong&gt;/health&lt;/strong&gt; 로 매핑될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;autoconfig&lt;/strong&gt; endpoint는 Spring Boot 애플리케이션이 시작될 때 설정된 auto-configuration 정보와 왜 적용되고 적용이 안되었는지 대해 리포트한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-spring_boot_features_10/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;beans&lt;/strong&gt; Endpoint는 서버 애플리케이션이 사용하는 모든 빈들의 정보를 리포트한다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-spring_boot_features_10/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 여러 URL로 매핑되는 각 EndPoint들로 서버 애플리케이션의 상태나 정보를 확인할 수 있는 것이다.
Spring Boot가 지원하는 EndPoint는 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#production-ready-endpoints&quot;&gt;여기에서&lt;/a&gt; 확인하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;remote-shell&quot;&gt;Remote Shell&lt;/h1&gt;

&lt;p&gt;Spring Boot는 SSH 접속을 통해 모니터링할 수 있는 기능을 제공한다.
먼저 이 기능을 사용해보기 위해 다음과 같이 pom.xml에 의존성을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-remote-shell&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remote shell과 관련하여 설정할 것이 유저 아이디 및 비밀번호가 있는데 비밀번호를 설정하지 않으면 다음과 같이 애플리케이션이 시작될 때 랜덤한 비밀번호가 생성되며, 기본 유저 아이디는 &lt;strong&gt;user&lt;/strong&gt; 가 된다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-spring_boot_features_10/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 application.properties에 property를 추가하여 유저 아이디 및 비밀번호를 설정하자.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;management.shell.auth.simple.user.name=dongho
management.shell.auth.simple.user.password=1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 애플리케이션에 remote shell을 통해 ssh 접속을 해보자. (기본 포트는 2000 이다.)
다음과 같이 ssh를 통해 접속하면 이전에 설정해둔 배너가 출력되고 쉘 프롬프트가 사용자가 커맨드를 입력하기를 기다릴 것이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-spring_boot_features_10/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;remote-shell-command&quot;&gt;Remote shell command&lt;/h2&gt;

&lt;p&gt;Spring Boot는 Remote Shell에서 다양한 커맨드를 통해서 강력한 기능을 제공한다.
특히 마음에 드는 부분이 &lt;strong&gt;“dashboard”&lt;/strong&gt; 커맨드였다.&lt;/p&gt;

&lt;p&gt;이 커맨드의 실행 결과는 다음과 같이 나타난다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-spring_boot_features_10/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 스냅샷을 보면 알 수 있겠지만 현재 CPU 점유율이 높은 모듈을 리눅스 커맨드의 &lt;strong&gt;“top”&lt;/strong&gt; 처럼 보여주고,
밑에는 자바 시스템 속성들, 그리고 자바 힙 영역을 eden / servivor / old gen 으로 체계적으로 보여주고 있다.&lt;/p&gt;

&lt;p&gt;이 외에도 다른 명령어를 통해 현재 애플리케이션의 자동 설정 정보나, 빈 정보, jvm 정보까지 확인할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/24/spring_boot_features_10-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/24/spring_boot_features_10-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>REST (REpresentational State Transfer)</title>
        <description>&lt;h1 id=&quot;rest-representational-state-transfer&quot;&gt;REST (REpresentational State Transfer)&lt;/h1&gt;

&lt;p&gt;REST는 네트워크 구조 원리의 모음으로, &lt;strong&gt;리소스를 정의하고 자원에 대한 주소를 지정하는 방법에 대한 조건&lt;/strong&gt; 들을 의미한다.
즉 도메인 지향 데이터를 HTTP 위에서 부가적인 전송 레이어 없이 전송하기 위한 간단한 구조를 정의한 것이다.&lt;/p&gt;

&lt;p&gt;2000년에 Roy Fielding이 자신의 논문에서 REST(Representational State Transfer) 라고 이름을 붙인 웹의 구조적 스타일에 대한 제약 조건을 설명하였다. 그 조건들은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트 / 서버: 웹의 일관된 인터페이스를 따른다는 전체하에 클라이언트와 서버는 독립적으로 구현되어야 한다.&lt;/li&gt;
  &lt;li&gt;균일한 인터페이스: 자원 식별, 표현을 통한 자원 처리, 자기서술적 메시지, HATEOAS(Hypermedia as the Engine of Application State) 같은 인터페이스 제약에 따라 서로 일관성 있게 상호 운영되어야 한다.&lt;/li&gt;
  &lt;li&gt;계층 시스템: 웹의 일관된 인터페이스를 사용해서 프록시 또는 게이트웨이 같은 네트워크 기반의 중간 매체를 사용할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;캐시 처리: 웹 서버가 응답 데이터마다 캐시 여부를 선언할 수 있어야 한다.&lt;/li&gt;
  &lt;li&gt;무상태: 웹 서버가 클라이언트의 상태를 관리할 필요가 없어야 한다.&lt;/li&gt;
  &lt;li&gt;주문형 코드: 선택사항으로, 스크립트가 플러그인 같은 실행 가능한 프로그램을 클라이언트에 전송하여 클라이언트가 실행할 수 있도록 해야한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 REST 원리를 충실히 따르면, &lt;strong&gt;‘RESTful’&lt;/strong&gt; 하다고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;rest-api&quot;&gt;REST API&lt;/h2&gt;

&lt;p&gt;웹 서비스는 네크워크 상에서 서로 다른 시스템 간의 상호작용을 위한 기술이다.
이는 주고 받는 데이터 형식에 대한 표준을 정의함으로써 플랫폼과 프로그램 언어와는 독립된 방법으로 서로 연동할 수 있다.&lt;/p&gt;

&lt;p&gt;간단히 말하면, 클라이언트가 웹 서버에서 제공하는 API를 이용하여 데이터와 기능을 제공받을 수 있다.&lt;/p&gt;

&lt;p&gt;예전에는 SOAP (Simple Object Access Protocol)을 기반으로 웹 서비스를 많이 구현하였다. 하지만 SOAP 처리의 오버헤드 및 복잡성 때문에 요즘에는 REST 구조 스타일을 사용한 웹 서비스를 많이 사용한다. 이런 REST 구조 스타일에 적합한 API를 REST API 라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-24-REST/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;resource&quot;&gt;Resource&lt;/h2&gt;

&lt;p&gt;REST API는 URI (Uniform Resource Identifier) 경로를 사용해서 자원을 나타내고, 포워드 슬래시 (/)로 경로 구문을 나눈다.
예를 들어 bookstoare 사이트의 1번 책은 &lt;strong&gt;http://www.bookstoare.com/books/1&lt;/strong&gt; 이라고 나타낼 수 있다. 이 경로 구문은 자원 계층에서 유일한 자원을 나타낸다.&lt;/p&gt;

&lt;p&gt;그렇다면 해당 자원에 대한 행위는 어떻게 나타내야 할까? REST API에서는 &lt;strong&gt;CRUD&lt;/strong&gt; 기능을 수행할 때는 URI에 나타내지 않는다.
URI는 자원을 식별할 때만 사용하고, CRUD 기능을 수행할 때는 HTTP Request Methoad를 사용한다. 즉, &lt;strong&gt;GET, POST, PUT, DELETE&lt;/strong&gt; 메소드를 이용하여 처리한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP Method&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;의미&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CRUD&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;새로운 자원을 생성한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Create&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;자원을 조회한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Read&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;기존에 존재하는 자원을 변경한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Update&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;기존에 존재하는 자원을 삭제한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Delete&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/24/REST-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/24/REST-post.html</guid>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot with Jersey</title>
        <description>&lt;h1 id=&quot;jersey-&quot;&gt;Jersey ?&lt;/h1&gt;

&lt;p&gt;Jersey는 Java에서 Restful API를 사용하는 서버를 아주 간단하게 구현할 수 있게 도와주는 web framework이다.
GlassFish 프로젝트의 서브 프로젝트이며, JAX-RS(JSR 311) 스펙에 따른 구현체이다.&lt;/p&gt;

&lt;p&gt;JAX-RS 표준을 구현한 공식 레퍼런스 구현체로, Java 플랫폼에서는 Restful Web Service를 높은 생산성으로 쉽게 구현할 수 있게 해준다. (JAX-RS 표준이 서버만을 고려하여 작성된 데에 비해, Jersey는 클라이언트 입장에서도 서비스를 편리하게 사용할 수 있도록 구현되었다.)&lt;/p&gt;

&lt;p&gt;이 web application framework는 JAX-RS 스펙에 맞게 구현되었기 때문에, JAX-RS 를 알아야 이해할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Web MVC는 JSR-311을 따르지는 않지만 Rest 기반의 웹 서비스 개발에 필요한 기능 대부분을 구현하고 있다. 하나의 자원을 여러 개의 Representation(JSON / XML / ATOM / RSS 등)으로 표현할 수 있고, 무엇보다도 Spring이 지원하는 강력한 기능을 사용할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jax-rs-&quot;&gt;JAX-RS ?&lt;/h2&gt;

&lt;p&gt;JAX-RS는 인터페이스의 콜렉션으로, REST API를 서비스하는 서버 애플리케이션 개발을 쉽게 만들어즈는 자바 플랫폼에서 경량화된 REST 방식의 웹 애플리에키션 구현을 지원하는 자바 API 이다.
JAX-RS 기술을 이용하면 REST(Representational State Transfer) 응용 프로그램은 기타 분배 시스템 유형에 비해 개발 및 이용이 용이하다.&lt;/p&gt;

&lt;p&gt;대표적인 annotation으로 @Path, @GET, @POST, @PUT 등이 있다.&lt;/p&gt;

&lt;p&gt;만약 다음과 같은 REST 서비스를 위한 클래스를 만든다고 생각해보자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloJerseyEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jersey를 사용해서 기본적으로 다음과 같이 &lt;strong&gt;@Path&lt;/strong&gt; annotation을 붙이고 메소드를 정의하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloJerseyEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 코드와 같이 작성할 경우, &lt;strong&gt;/helloworld&lt;/strong&gt; 에 대해 HTTP 요청이 수신될 때마다 &lt;strong&gt;sayHelloWorld&lt;/strong&gt; 메소드가 호출되어 다음의 결과를 확인할 수 있다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-23-spring_boot_with_jersey/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 다음과 같이 &lt;strong&gt;@Get&lt;/strong&gt; annotation을 메소드에 붙일 경우 GET 요청에 대해서만 메소드가 호출될 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloJerseyEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Get&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론, 다음과 같이 메소드에 추가적으로 path를 붙여나갈 수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorldEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/message&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;spring-boot와의-연동&quot;&gt;Spring Boot와의 연동&lt;/h1&gt;

&lt;p&gt;Spring Boot에서는 Jersey를 활용하여 Rest API를 구현할 수 있도록 지원한다.
다음과 같이 pom.xml에 Jersey starter 의존성을 추가하여 사용가능하다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-jersey&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;먼저 Spring Boot와의 테스트를 진행하기 위해 POJO 를 추가하자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// getter, setter 생략&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 위의 POJO를 다루기 위한 service 클래스를 생성한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.annotation.PostConstruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.entity.User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dhsim86@example.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dongho Sim&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dhsim86@naver.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dongho Sim - Naver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 service 클래스는 빈 생성 후 map에 먼저 유저 정보 2개를 저장해두며, id 값을 통해 User 클래스의 오브젝트를 리턴하게 만들었다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jersey-configuration-추가&quot;&gt;Jersey configuration 추가&lt;/h2&gt;

&lt;p&gt;먼저 Spring Boot와 연동하기 위해 다음과 같은 Configuration 클래스를 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.ext.ContextResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.ext.Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.glassfish.jersey.server.ResourceConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.databind.ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.controller.HelloJerseyEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.controller.HelloWorldEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/v1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JerseyConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JerseyConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//packages(&quot;com.nhnent.hellospringboot&quot;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloJerseyEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapperContextResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Provider&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectMapperContextResolver&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ObjectMapperContextResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;objectMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드와 같이 ContextResolver 및 Jersey를 통해 URL mapping 하는 &lt;strong&gt;Endpoint&lt;/strong&gt; 클래스들을 &lt;strong&gt;register&lt;/strong&gt; 함수를 통해 등록하자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@ApplicationPath&lt;/strong&gt; annotation으로 &lt;strong&gt;“/v1”&lt;/strong&gt; 으로 등록하였다. 이는 EndPoint가 서비스하는 모든 URI가 “/v1” 밑에 매핑한다는 것을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;jersey-endpoint-추가&quot;&gt;Jersey EndPoint 추가&lt;/h2&gt;

&lt;p&gt;EndPoint는 Spring 의 Controller와 비슷하게 URL mapping하는 지원하는 클래스를 말한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 EndPoint를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.PathParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.ws.rs.core.MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.entity.User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.service.UserService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloJerseyEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEventVersion1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 EndPoint는 &lt;strong&gt;/user/{id}&lt;/strong&gt; 를 통해 들어온 id 값을 가지고 user 오브젝트를 찾아 &lt;strong&gt;JSON&lt;/strong&gt; 형태로 리턴하도록 구현하였다.
HelloJerseyEndPoint는 루트 path로 &lt;strong&gt;/users&lt;/strong&gt; 로 등록하였기 때문에, 이 클래스 안의 모든 메소드들은 이 URI 밑에 매핑된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot의 annotation을 같이 사용 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 이 클래스의 getEventVersion1 메소드에는 &lt;strong&gt;@Path(“/{id}”)&lt;/strong&gt; 와 &lt;strong&gt;@GET&lt;/strong&gt;, &lt;strong&gt;@Produces(MediaType.APPLICATION_JSON)&lt;/strong&gt; annotation을 붙였는데, 이는 &lt;strong&gt;/user/{id}&lt;/strong&gt; 에 대한 GET 요청이 들어오면 JSON 형태로 값을 리턴한다는 의미이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@GET 말고도 @POST, @DELETE, @PUT을 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“{id}”&lt;/strong&gt;와 같이 값을 넘길 때 &lt;strong&gt;@PathParam&lt;/strong&gt;으로 메소드의 파라미터와 매핑시킨다. Spring Boot의 @PathVariable과 비슷하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;@Produces&lt;/strong&gt; annotation은 이 메소드가 어떠한 형태의 값을 리턴할지를 지정하는 것이다.
다음 코드를 보면 알겠지만 다양한 형태를 지원하는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JavaDoc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET_PARAMETER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;charset&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEDIA_TYPE_WILDCARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WILDCARD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WILDCARD_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_XML_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_ATOM_XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/atom+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_ATOM_XML_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;atom+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_XHTML_XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_XHTML_XML_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xhtml+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_SVG_XML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/svg+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_SVG_XML_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;svg+xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APPLICATION_JSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;실행결과&quot;&gt;실행결과&lt;/h2&gt;

&lt;p&gt;위의 코드들을 작성 후 실행한 결과로 다음과 같이 User 클래스의 오브젝트라 JSON 형태로 리턴되는 것을 확인할 수 있었다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-23-spring_boot_with_jersey/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;
&lt;h1 id=&quot;jar로-실행&quot;&gt;jar로 실행&lt;/h1&gt;

&lt;p&gt;jar로 실행할 때 Jersey와 관련해서 다음과 같이 embedded tomcat이 실행 실패하는 문제가 있었다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-23-spring_boot_with_jersey/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류 메시지를 보니 JerseyConfig 클래스로부터 빈 생성하는 것이 실패했다고 나오는데, 이는 JerseyConfig에서 &lt;strong&gt;packages&lt;/strong&gt; 메소드를 호출했을 때 발생하는 문제였다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ApplicationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/v1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JerseyConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JerseyConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.nhnent.hellospringboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&amp;lt;&amp;lt; 이 부분&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloJerseyEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectMapperContextResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원래 packages 메소드는 풀 패키지명을 지정해서 이를 기반으로 Jersey 컴포넌트를 스캔하라는 것인데, Spring Boot와 연동할 때는 이 메소드를 쓰면 안되는 것으로 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-jersey&quot;&gt;Reference Guide에 나와있다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;따라서 Spring Boot와 연동시에는 각 EndPoint들을 register 함수를 통해 일일이 등록해야 한다.&lt;/p&gt;

&lt;p&gt;packages 메소드를 쓰지 않고 register 메소드를 통해 EndPoint를 등록하여 실행한 결과를 확인하니 문제없이 실행되는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-23-spring_boot_with_jersey/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/23/spring_boot_with_jersey-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/23/spring_boot_with_jersey-post.html</guid>
        
        <category>spring</category>
        
        <category>jersey</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 09 : Testing </title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 41 Testing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;p&gt;Spring Boot는 애플리케이션 테스트를 위해 다양한 유틸리티나 annotation들을 지원한다.
이런 테스트 환경을 지원하는 것은 spring-boot-test 및 spring-boot-test-autoconfigure 모듈이다.&lt;/p&gt;

&lt;p&gt;거의 모든 Spring Boot 개발자들은 다음과 같은 의존성을 추가하여 테스트에 사용하고 있다. 다음 의존성을 추가하는 것만으로도 Junit, AssertJ, Hamcrest, Mockito와 같은 다양한 라이브러리를 지원하기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 위의 의존성을 추가한다면 다음과 같은 테스트를 위한 라이브러리들을 사용할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Junit: The de-facto standard for unit testing Java applications.&lt;/li&gt;
  &lt;li&gt;Spring Test &amp;amp; Spring Boot Test: Utilities and Integration test support for Spring Boot applications.&lt;/li&gt;
  &lt;li&gt;AssertJ: A fluent assertion library.&lt;/li&gt;
  &lt;li&gt;Hamcrest: A library of matcher objects (also known as constraints or predicates.)&lt;/li&gt;
  &lt;li&gt;Mockito: A Java mocking framework.&lt;/li&gt;
  &lt;li&gt;JSONAssert: An assertion library for JSON.&lt;/li&gt;
  &lt;li&gt;JsonPath: XPath for JSON.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot는 Mockito 1.* 버전을 사용한다. 물론 2.x 버전도 설정에 따라 사용 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 라이브러리말고도 사용할만한 테스트용 라이브러리에 대한 의존성을 추가해서 사용가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;testing-spring-applications&quot;&gt;Testing Spring applications&lt;/h2&gt;

&lt;p&gt;Spring Boot에서는 다음과 같은 @annotation 만으로도 테스트를 쉽게 시작할 수 있다. (Spring Boot 1.4 이상)&lt;/p&gt;

&lt;p&gt;보통 테스트 클래스를 작성할 때 이렇게 작성했을 것이다. (Spring Boot 1.3)&lt;/p&gt;

&lt;p&gt;다음과 같이 @ContextConfugration annotation과 SpringApplicationContextLoader 조합으로 사용했을 수도 있고,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJunit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfugration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringApplicationContextLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 @SpringApplicationConfiguration annotation을 사용했을 수도 있고,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJunit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아니면 @IntegrationTest annotation을 조합했을 수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringJunit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@IntegrationTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot 1.4&lt;/strong&gt; 에서는 좀 더 단순해져서, @SpringBootTest annotation 단 하나만 사용하여 일반적인 테스트를 수행할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RANDOM_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootTestApplicationTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simpleTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@SpringBootTest annotation을 붙여주는 것만으로 테스트 클래스를 만들 수 있는 것이다.
이 annotation에는 &lt;strong&gt;webEnvironment&lt;/strong&gt; 라는 attribute가 있는데, 다음과 같은 파라미터를 통해 테스트의 환경을 바꿀 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MOCK: WebApplicationContext를 로드하고 서블릿 컨테이너 환경을 mocking 한다. 내장된 서블릿 컨테이너는 전혀 시작되지 않는다.&lt;/li&gt;
  &lt;li&gt;RANDOM_PORT: EmbeddedWebApplicationContext를 로드하고 내장된 서블릿 컨테이너가 시작되는데 요청을 받아들이는 port를 랜덤하게 바꾸고 시작한다.&lt;/li&gt;
  &lt;li&gt;DEFINED_PORT: 역시 EmbeddedWebApplicationContext를 로드하는데, 지정한 포트를 가지고 요청을 받아들인다. (default는 8080)&lt;/li&gt;
  &lt;li&gt;NONE: ApplicationContext를 로드하기는 하지만 서블릿 컨테이너 환경을 제공하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;@RunWith(@SpringRunner.class) 도 빼먹지 말자. 추가하지 않는다면 @SpringBootTest annotation은 무시된다.
이 구문은 JUnit에게 Spring 테스트 지원사항을 사용하겠다고 알려주는 구문이다. &lt;strong&gt;SpringRunner&lt;/strong&gt; 는 SpringJunit4ClassRunner의 새로운 이름이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@SpringBootTest annotation은 “Spring 테스트 지원의 부트스트랩입니다. (bootstrap with Spring Boot’s support)” 라는 걸 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트 시작시 먼저 @Configuration이 붙은 클래스들을 로드하려고 시도할 것이고, 실패한다면 @SpringBootApplication이 붙은 클래스를 찾을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;detecting-test-configuration&quot;&gt;Detecting test configuration&lt;/h2&gt;

&lt;p&gt;Spring Framework로 개발하다보면 &lt;strong&gt;@ContextConfugration&lt;/strong&gt; annotation을 써서 ApplicationContext를 로드했을 것이다. 아니면  &lt;strong&gt;@Configuration&lt;/strong&gt; annotation을 써서 configuration을 설정하도록 했을 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@ContextConfugration&lt;/strong&gt;: 
@ContextConfugration(locations={“/app-config.xml”, “/test-config.xml”}) 와 같이 XML 파일로부터 ApplicationContext를 로드 &lt;br /&gt;
@ContextConfugration(classes={AppConfig.class, TestConfig.class}) 와 같이 &lt;strong&gt;@Configuration&lt;/strong&gt; 클래스로부터 ApplicationContext 로드&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;@TestConfiguration&lt;/strong&gt;:
이 annotation을 &lt;strong&gt;테스트 클래스의 이너 클래스에 사용한다면&lt;/strong&gt; @SpringBootApplication 이나 @SpringBootConfiguration이 그 클래스를 찾아 반영시킨다. 만약 테스트 진행시에만 ApplicationContext를 커스터마이징하고 싶다면, &lt;strong&gt;@TestConfiguration&lt;/strong&gt; annotation을 사용할 수 있다.
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;@TestComponent, @TestConfiguration&lt;/strong&gt;: 
@SpringBootApplication이나 @ComponentScan annotation을 써서 개발을 진행할 때 테스트 시에만 사용할려고 정의해둔 여러 컴포넌트나 configuration 들도 실제 환경에서 추가될 수가 있다. 이 것을 피하기 위해 Spring Boot에서는 &lt;strong&gt;@TestComponent&lt;/strong&gt; 와 &lt;strong&gt;@TestConfiguration&lt;/strong&gt; annotation을 제공한다. 이 것은 &lt;strong&gt;src/test/java&lt;/strong&gt; 에 있는 클래스에 붙여 테스트가 아닌 환경에서는 Spring Boot의 auto configuration 진행시 추가되는 것을 피할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;@TestConfiguration 클래스는 테스트 클래스의 이너 클래스에 정의하도록 되어 있다. 만약 이너 클래스가 아닌 별도의 클래스에 정의하면, 테스트 클래스에서 사용하기 위해서는 &lt;strong&gt;@Import&lt;/strong&gt; annotation을 통해 별도로 추가시켜야 한다. 테스트 진행시 @SpringBootApplication에 의해 스캔되는 대상이 아니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;@TestComponent도 마찬가지로 실제 실행 환경에서, 테스트 용도로 사용할 빈을 자동으로 추가되는 것을 피하기 위해 @Component 대신에 쓰라고 만든 annotation으로, @SpringBootApllication에 의해 자동 스캔되는 대상이 아니다. 단, @ComponentScan을 사용시 exclude filter를 따로 추가해야 자동 스캔되는 것을 막을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/TestConfiguration.html&quot;&gt;@TestConfiguration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/TestComponent.html&quot;&gt;@TestComponent&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-excluding-config&quot;&gt;Excluding Test Configuration&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/6769&quot;&gt;Top Level @TestConfiguration classes should be picked up by SpringBootTest&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues/8421&quot;&gt;@TestComponent are not picked up during tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mocking-and-spying-beans&quot;&gt;Mocking and spying beans&lt;/h2&gt;

&lt;p&gt;때때로 테스트 진행할 때 사용하는 빈들 중 특정 빈들을 목아웃 (mock out) 하는 것이 도움이 된다는 것을 알 수 있다. 서비스 시뮬레이션을 포함하는 mocking의 일반적인 케이스는 테스트가 진행 중일 때는 사용할 수 없는 것이나 라이브 시스템에서 발생시키기 어려울 때이다.&lt;/p&gt;

&lt;p&gt;Spring Boot 1.4 이후부터 이미 존재하는 빈을 대체하거나 새로 생성하는 mockito를 다음과 같이 손쉽게 만들 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Runwith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RANDOM_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleTestApplicationWebIntegrationTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VehicleDetailsService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicleDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;vehicleDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;getVehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Honda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Civic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{username}/vehicle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sframework&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;strong&gt;@MockBean&lt;/strong&gt; annotation을 통해 VehicleDetailsService의 모형(mock)으로 mockito bean을 생성할 수 있으며, setup 메소드에 그 빈을 통해 getVehicleDetails 메소드가 호출될 때 어떻게 동작할 것인지를 기술할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ApplicationContext내에 mock을 새로 생성하거나 같은 타입의, 한 개의 bean을 mock으로 대체한다. 또한 한 테스트 메소드가 끝날 때마다 mock은 새로 초기화된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;auto-configured-test&quot;&gt;Auto-configured Test&lt;/h2&gt;

&lt;p&gt;Spring Boot의 자동 설정은 애플리케이션의 대부분의 경우에 잘 동작하지만, test 진행할 때는 기능이 조금 부족한 면이 있다.
예를 들어 Spring MVC controller들을 테스트할 때 오직 URL이 잘 매핑되었는지만 테스트 진행하고 싶을 때 (DB까지 갈 필요없이), 혹은 JPA 엔티티 클래스들을 테스트할 때 Controller 나 RestController 등 HTTP 요청을 받는 클래스는 제외하고 싶을 때가 있다.&lt;/p&gt;

&lt;p&gt;이를 위해 Spring Boot는 spring-boot-test-autoconfigure 모듈을 통해 테스트의 성격에 따라 configuration 정보들 중 일부분만 로드하고 자동 설정하여 테스트를 진행할 수 있다. &lt;strong&gt;@…Test&lt;/strong&gt; annotation들을 통해 ApplicationContext를 테스트 성격에 따라 로드하고 &lt;strong&gt;@AutoConfigure…&lt;/strong&gt; annotation을 통해 자동 설정을 커스터마이징할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@…Test annotation에 대해서 excludeAutoConfiguration 애트리뷰트를 통해 특정 configuration 클래스를 제외시킬 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;auto-configured-json-tests&quot;&gt;Auto-configured JSON tests&lt;/h3&gt;

&lt;p&gt;JSON 오브젝트가 제대로 직렬화를하는데 테스트를 진행하기 위해 &lt;strong&gt;@JsonTest&lt;/strong&gt; annotation을 통해 테스트할 수 있다.
이 annotation은 &lt;strong&gt;Jackson&lt;/strong&gt; ObjectMapper 및 &lt;strong&gt;@JsonComponent&lt;/strong&gt; 클래스, Jackson 모듈을 자동 설정한다.&lt;/p&gt;

&lt;p&gt;다음은 @JsonTest를 통해 구현된 테스트 클래스이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.json.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.context.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.json.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit4.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JsonTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyJsonTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JacksonTester&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSerialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VehicleDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Honda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Civic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert against a `.json` file in the same package as the test&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualToJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expected.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Or use JSON path based assertions&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasJsonPathStringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@.make&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extractingJsonPathStringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@.make&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Honda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testDeserialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;make\&quot;:\&quot;Ford\&quot;,\&quot;model\&quot;:\&quot;Focus\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ford&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Focus&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ford&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;auto-configured-spring-mvc-tests&quot;&gt;Auto-configured Spring MVC tests&lt;/h3&gt;

&lt;p&gt;Spring MVC Controller를 테스트 하기 위해 &lt;strong&gt;@WebMvcTest&lt;/strong&gt; annotation을 사용한다. 이 annotation을 통해 Spring MVC 를 자동 설정하고, @Conroller 및 @ControllerAdvice, @JsonComponent, Filter, WebMvcConfigurer 그리고 HandlerMethodArgumentResolve 만 스캔하여 주입한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;@Component 빈은 전혀 스캔되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 테스트를 진행할 때 &lt;strong&gt;@MockBean&lt;/strong&gt; annotation 사용할 수 있을 뿐만 아니라 &lt;strong&gt;MockMvc&lt;/strong&gt; 를 자동 설정하여 HTTP server를 시작할 필요없이 MVC Controller들을 테스트할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@MockBean&lt;/strong&gt; annotation은 Spring ApplicationContext에 mock을 주입해주는 기능을 한다. Mock은 클래스 타입이나 빈 이름을 가지고 등록되며, 만약 같은 타입의, 하나의 빈이 이미 ApplicationContext에 등록되어 있었으면 그 것을 mock으로 대체시킨다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음은 그 예제 소스이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.web.servlet.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.mock.mockito.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BDDMockito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcRequestBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MockMvcResultMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebMvcTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserVehicleController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyControllerTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserVehicleService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userVehicleService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userVehicleService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VehicleDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Honda&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Civic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sboot/vehicle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Honda Civic&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;auto-configured-data-jpa-tests&quot;&gt;Auto-configured Data JPA tests&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@DataJpaTest&lt;/strong&gt; 를 통해 entity 및 repository 클래스들을 실제 DB를 사용하지 않고 테스트를 진행할 수 있다.이 annotation을 사용할 때 in-memory의 내장된 DB를 사용하며 @Entity 가 붙은 클래스를 스캔하고, JPA repository 클래스들을 자동 설정한다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;@Component 빈은 전혀 스캔되지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 이 테스트를 진행할 때는 각 테스트에서 수행하는 쿼리문이 하나의 Transaction으로 처리되며, 테스트가 끝나면 자동 롤백된다.&lt;/p&gt;

&lt;p&gt;다음은 이 테스트를 진행하는 클래스의 예이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.orm.jpa.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@DataJpaTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestEntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sboot&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약에 테스트 진행시 실제 DB를 가지고 테스트를 진행하고 싶다면 &lt;strong&gt;@AutoConfigureTestDatabase&lt;/strong&gt; annotation을 다음과 같이 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@DataJpaTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureTestDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleRepositoryTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;auto-configured-jdbc-tests&quot;&gt;Auto-configured JDBC tests&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@JdbcTest&lt;/strong&gt; annotation을 통해 테스트를 진행하는데 @DataJpaTest annotation을 통한 JPA 테스트 진행과 거의 비슷하다.
이 테스트 또한 in-memory 내장된 DB를 사용하며, JdbcTemplate 를 자동 설정한다. 또한 테스트 중 쿼리는 Transaction으로 처리되고 자동 롤백도 지원한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.jdbc.JdbcTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JdbcTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleNonTransactionalTests&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/22/spring_boot_features_07-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/22/spring_boot_features_07-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 08 : Messaging with Kafka</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 32 messaging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;messaging-with-kafka&quot;&gt;Messaging with Kafka&lt;/h2&gt;

&lt;p&gt;먼저 Kafka를 활용한 messaging system을 Spring Boot에서 사용하기 전 개념을 짚고 넘어가도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;용어&quot;&gt;용어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MOM (Message Oriented Middleware)
    &lt;ul&gt;
      &lt;li&gt;분산 시스템 간 메시지를 주고 받는 기능을 지원하는 소프트웨어나 하드웨어 인프라&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MQ (Message Queue)
    &lt;ul&gt;
      &lt;li&gt;MOM을 구현한 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Broker
    &lt;ul&gt;
      &lt;li&gt;Message Queue 시스템&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AMQP (Advanced Message Queueing Protocol)
    &lt;ul&gt;
      &lt;li&gt;메시지 지향 미들웨어를 위한 프로토콜&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/01.jpg&quot; alt=&quot;00.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Producer가 Message를 Queue에 넣어두면, Consumer가 Message를 가져와 처리하는 방식이다.
위와 같은 구조로 통신을 하게 되면 Client와 동기 방식으로 데이터 통신을 하게 될 때 발생하는 병목현상을 완화할 수 있고, 서버의 성능을 개선시킬 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;spring-integration&quot;&gt;Spring Integration&lt;/h3&gt;

&lt;p&gt;여기서는 Apache Kafka를 통해 Spring Boot에서 messaging을 구현하겠다.&lt;/p&gt;

&lt;p&gt;일단 먼저 Kafka가 설치되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;apache-kafka&quot;&gt;Apache Kafka&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Kafka 란 LinkedIn에서 개발된 메시지 큐 시스템이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/02.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kafka는 대용량 실시건 처리를 위해 사용하는 메시징 시스템으로, Pub-Sub 구조로 되어 있다. LinkedIn, Twitter, Netflix, Tumblr 등 대용량 데이터를 다루는 업체들이 주로 Kafka를 사용하고 있다.
물론 Kafka 단독으로 처리하지는 않고, Hadoop이나 HBase 등과 연동해서 활용하는 것이다.&lt;/p&gt;

&lt;p&gt;비즈니스 소셜 네트워크로 유명한 LinkedIn은 메시징 및 로깅 처리를 위해 ActiveMQ와 Splunk를 사용하고 있었는데, LinkedIn이 글로벌 서비스로 성장하면서 처리할 데이터 양이 늘어남에 따라 기존의 기술들은 확장성이 떨어져서 LinkedIn이 확장성이 높고 신뢰성이 있는 Kafka를 개발하게 되었다.&lt;/p&gt;

&lt;p&gt;이렇게 시작된 Kafka는 LinkedIn에서 빠른 처리 속도를 보장하는 분산 메시지 큐로서의 역할을 하게 된다.
이후 Apache Top Project에 등록되면서 점차 사용하는 회사가 늘어가게 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;kafka-구성요소&quot;&gt;Kafka 구성요소&lt;/h5&gt;

&lt;p&gt;Kafka의 가장 큰 특징은 다른 메시징 시스템과는 다르게 파일시스템을 이용한다는 점이다.
메모리에 저장하는 구조가 아니기 때문에 데이터 자체의 휘발성이 없으며 효율적으로 데이터를 보관할 수 있도록 구현되었다.&lt;/p&gt;

&lt;p&gt;또한 시스템 자체가 Producer / Consumer / Broker로 매우 간단하게 구성되어 있다.
Producer 는 데이터를 Kafka로 전달하는 역할을 하고, Consumer는 Kafka에 저장된 데이터를 가져오는 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/02.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림과 같이 여러 개의 Producer와 Consumer를 구성할 수 있는데 데이터의 수집을 여러 곳에서 할 수 있고, 해당 데이터를 처리하는 것도 활용 범위에 따라 여러 개 만들어서 처리할 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;Producer와 Consumer에 대한 API를 제공하면서 어떤 서비스와도 잘 결합되게 만들어져 있다는 점도 특징이다.
특히 빅데이터 분석에 많이 사용되는 Hadoop이나 HBase와 해당 Consumer를 구성해서 바로 연동할 수 있다.&lt;/p&gt;

&lt;p&gt;Kafka에서는 토픽(Topic)을 설정해서 데이터를 전송하고, 각 토픽을 기준으로 파티션을 구성해 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;각 파티션에 들어온 순서대로 저장하고 Consumer에게 순차적으로 전달해 처리하게 된다.
물론 파티션에 따라 저장하는 정보의 양도 설정 값으로 조정 가능하다.&lt;/p&gt;

&lt;p&gt;파티션 구조를 효과적으로 사용하고 신뢰성있는 시스템을 구성하기 위해 Kafka Cluster를 구성해야 한다.
Kafka 클러스터를 구성하는 장점에 대해 LinkedIn의 엔지니어인 Jun Rao는 다음과 같이 이야기한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The benefits of Kafka replication&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;A producer can continue to public messages during failure and it can choose between latency and durability, depending on the application.&lt;/li&gt;
    &lt;li&gt;A consumer continues to receive the correct message in real time, even when there is failure.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;마지막으로, Kafka Cluster를 관리하기 위해 주키퍼(Zookeeper)를 사용해서 각 노드를 모니터링한다. Kafka를 설치하면 Zookeeper도 함께 설치된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;kafka-서버-구성&quot;&gt;Kafka 서버 구성&lt;/h5&gt;

&lt;p&gt;아래는 Kafka Cluster의 개념도이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 Kafka Cluster로 서버 3대를 이용하고 있으며 주키퍼로 모니터링하고 있다.
&lt;strong&gt;“zerg.hydra”&lt;/strong&gt; 라는 토픽으로 데이터를 전송하고 있고 파티션은 2개씩 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;broker1&lt;/strong&gt; 을 보면 &lt;strong&gt;P0/P1&lt;/strong&gt; 이 진하게 표시된 것을 알 수 있는데, 이는 브로커 1이 파티션 0의 &lt;strong&gt;리더&lt;/strong&gt; 임을 나타내는 것이다.
정상적인 경우라면 파티션 0의 데이터를 읽기 위해 리더인 브로커 1의 데이터를 활용하게 되는데, 만약 브로커1에 문제가 발생한다면
파티션 0이 복제되어 있는 브로커 2의 데이터를 사용하게 될 것이다. 이러한 브로커 2와 같이 복제되어 있는 서버를 팔로워(follower)라고 한다.&lt;/p&gt;

&lt;p&gt;신뢰성 있는 시스템을 위해 복제를 구성할 때 구글의 글로벌 분산데이터베이스인 스패너(Spanner)나 아파치의 주키퍼는 &lt;strong&gt;“Quorum Based”&lt;/strong&gt; 방식으로 복제를 구성하고 있다.d d d
이 방식은 리더가 모든 팔로워에 데이터가 전송될 때까지 기다리지 않고, 대부분의 팔로워가 데이터를 수신하면 바로 리더에서 데이터를 처리하도록 하는 것이다. 만약 데이터 처리 중에 오류가 발생하면, 복제가 완료된 팔로워들 중 하나를 새로운 리더로 추천하여 처리하도록 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;integration-with-spring&quot;&gt;Integration with Spring&lt;/h3&gt;

&lt;p&gt;먼저 Kafka와 주키퍼를 다음과 같이 설치하고 실행시킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주키퍼 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;주키퍼를 &lt;a href=&quot;http://zookeeper.apache.org/releases.html#download&quot;&gt;다운로드&lt;/a&gt; 받아서 위와 같이 디폴트 configuration를 사용하여 시작시킨다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kafka 설치&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/06.png&quot; alt=&quot;06.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kafka를 &lt;a href=&quot;http://kafka.apache.org/downloads.html&quot;&gt;다운로드&lt;/a&gt; 받아서 위와 같이 기본 설정된 configuration 파일로 daemon 형식으로 시작시킨다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;maven-dependency-추가&quot;&gt;maven dependency 추가&lt;/h4&gt;

&lt;p&gt;다음과 같이 pom.xml에 Kafka를 사용하기 위한 의존성을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-kafka&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sender-config-추가&quot;&gt;Sender Config 추가&lt;/h4&gt;

&lt;p&gt;Kafka를 사용하기 위해서는 &lt;strong&gt;KafkaTemplate&lt;/strong&gt; 를 사용해야 하는데, 먼저 &lt;strong&gt;ProducerFactory에 property를 설정하여 KafkaTemplate의 생성자에 주입시켜주어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ProducerFactory는 application.properties 파일로부터 property를 읽어 셋팅할 수도 있다.
여기서는 다음과 같이 application.properties에 Kafka 서버 주소에 대는해 property를 추가하였다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka.bootstrap.servers=localhost:9092
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음과 같이 ProducerFactory를 만들어 KafkaTemplate 생성자에 주입시켜주자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.clients.producer.ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.serialization.IntegerSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.serialization.StringSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.DefaultKafkaProducerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.ProducerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SenderConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${kafka.bootstrap.servers}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;producerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProducerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_BLOCK_MS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProducerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;producerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultKafkaProducerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;producerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;producerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위에서 sender는 producer를 의미한다. 이 빈을 통해 Kafka를 이용하여 메시지를 보낼 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;consumer-config-추가&quot;&gt;Consumer Config 추가&lt;/h4&gt;

&lt;p&gt;Kafka로부터 메시지를 받기 위해 &lt;strong&gt;@KafkaListener&lt;/strong&gt; 라는 annotation을 사용하는데, 이를 위해 &lt;strong&gt;ConsumerFactory를 사용하여 KafkaListenerContainerFactory 라는 이름의 ConcurrentKafkaListenerContainerFactory 빈을 생성해주어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다음 코드와 같이 KafkaListenerContainerFactory 빈을 생성해주자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.clients.consumer.ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.annotation.EnableKafka&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.ConsumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.DefaultKafkaConsumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.serialization.IntegerDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.kafka.common.serialization.StringDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableKafka&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReceiverConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${kafka.bootstrap.servers}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumerConfigs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bootstrapServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;IntegerDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;StringDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsumerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConsumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultKafkaConsumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerConfigs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConsumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Receiver&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위에서 receiver는 consumer를 의미한다. 이 빈을 통해 Kafka를 이용하여 메시지를 받을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sender--consumer-추가&quot;&gt;Sender / Consumer 추가&lt;/h4&gt;

&lt;p&gt;다음과 같이 Sender 를 추가한다. &lt;strong&gt;KafkaTemplate&lt;/strong&gt; 의 send 메소드를 통해 asynchronous 하게 Kafka로 메시지를 보낼 것이다.
그리고 메시지를 보낸 결과를 확인할 수 있도록 callback 을 추가하여 성공 / 실패에 따라 로그 메시지를 출력하도록 하였다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.core.KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.support.SendResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.util.concurrent.ListenableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.util.concurrent.ListenableFutureCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ListenableFuture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kafkaTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListenableFutureCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sent message='{}' with offset={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRecordMetadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unable to send message='{}'&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
다음으로, 메시지를 받아 처리할 Receiver를 추가한다. &lt;strong&gt;@KafkaListener&lt;/strong&gt; annotation은 message를 받을 listener 를 생성하는데, 이는 아까 생성해둔 &lt;strong&gt;ConcurrentKafkaListenerContainerFactory&lt;/strong&gt; 빈을 이용한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 메시지를 받아 처리할 메소드에 @KafkaListener annotation 을 붙인다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.kafka.annotation.KafkaListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Receiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Receiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@KafkaListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;helloworld.t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;received message='{}'&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
위의 예에서는 &lt;strong&gt;“helloworld.t”&lt;/strong&gt; 라는 토픽으로부터 메시지를 받아 로그 메시지를 남긴다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;controller-메소드-추가-및-테스트&quot;&gt;Controller 메소드 추가 및 테스트&lt;/h4&gt;

&lt;h5 id=&quot;controller-메소드-추가&quot;&gt;Controller 메소드 추가&lt;/h5&gt;

&lt;p&gt;그럼 이제 Controller에 Kafka를 통해 메시지를 보낼 수 있도록 해보자. Kafka를 통해 메시지를 성공적으로 보내거나 받으면 console 창에 해당되는 로그메시지가 출력될 것이다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sender&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/kakfaTest/{value}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kafkaTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;helloworld.t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;실행-결과&quot;&gt;실행 결과&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;/kakfaTest&lt;/strong&gt; path에 보낼 메시지를 붙여서 보내면 다음과 같은 로그 메시지가 출력되는 것을 확인할 수 있었다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-22-spring_boot_features_06/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/22/spring_boot_features_06-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/22/spring_boot_features_06-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>JMS, Java Messaging System</title>
        <description>&lt;h2 id=&quot;jms&quot;&gt;JMS&lt;/h2&gt;

&lt;p&gt;JMS는 Java Messaging System의 약자로 Java에서 Messaging System을 사용하기 위한 API들의 정의이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;messaging-system&quot;&gt;Messaging System&lt;/h3&gt;
&lt;p&gt;Messaing System이란 애플리케이션 사이에서의 통신을 하도록 지원해주는 시스템을 이야기한다.&lt;/p&gt;

&lt;p&gt;예를 들어, 각 지점에 설치된 매출 관리 시스템 A라는 애플리케이션과 본점에 설치된 B라는 애플리케이션이 있다고 하자.
A 애플리케이션은 매출이 발생할 때마다 그 내용을 로컬에 저장하기도 하겠지만, 그 내용을 본사에 전송해서 취합한다고 하자.&lt;/p&gt;

&lt;p&gt;일반적으로 Messaging System이 만들어기 전에는 이런 업무를 A와 B 애플리케이션 사이에 socket을 직접 연결해서 packet을 정의하고, 그 packet에 따라서 통신했다. 이 통신을 위해 packet에 대한 flow control이나 네트워크에 문제 발생시 예외처리들을 직접 프로그래밍을 해야했다.&lt;/p&gt;

&lt;p&gt;그러나 Messaging System을 통해 이런 모든 통신에 대한 여러 기능을 제공하여 통신에 대한 부분을 간결화시켜준다.&lt;/p&gt;

&lt;p&gt;Messaging System에는 이외에도 하나의 Producer가 여러 Consumer에게 메시지를 전송하는 모델이나 P2P 모델, 메시지가 전송되는 것을 보장하는 Reliable Messaging, 비동기방식으로 메시지 전달, 분산 트랜잭션, 클러스터링 등을 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-jms&quot;&gt;What is JMS?&lt;/h3&gt;

&lt;p&gt;JMS는 앞서 언급하였듯이, 이런 Messaging System을 Java에서 사용하기 위한 표준 API들의 집합이다. 우리가 DBMS를 사용할 때 JDBC를 사용하는 것처럼, JMS는 Messaging System을 사용하기 위한 API 인것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/java/2017-03-22-JMS/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 그림을 살펴보면 Java 애플리케이션은 표준화된 JMS API를 통해 Messaging System을 사용하게 된다.
JMS API는 각 Messaging System 벤더에서 제공하는 Provider Code를 통해 구현되어 있기 때문에, Java 애플리케이션 개발자는 JMS라는 표준 API만 사용한다면 대부분의 Messaging System을 이용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JMS라는 표준이 있긴하지만, 각 Messaging System의 특성에 따라 동작이 달라질 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 Messaging System의 경우 JMS API 뿐만 아니라, C/C++과 같은 Non-Java 언어를 위한 라이브러리를 따로 제공하는 경우가 있는데, 이런 경우에는 Java 애플리케이션이 다른 언어로 개발된 애플리케이션과 호환이 되므로 서로 다른 언어로 만들어진 애플리케이션과 연동하는데도 많이 쓰인다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;feature-of-jms&quot;&gt;Feature of JMS&lt;/h3&gt;

&lt;p&gt;그럼 JMS API에는 어떤 특징이 있는지 살펴보자.&lt;/p&gt;

&lt;p&gt;A 애플리케이션과 B 애플리케이션이 통신을 한다고 했을 때, 통신하는 방법은 방식에 따라 &lt;strong&gt;data-centric&lt;/strong&gt; 이냐, &lt;strong&gt;interface-centric&lt;/strong&gt; 이냐로 분리될 수 있다.&lt;/p&gt;

&lt;p&gt;RMI, IIOP, SOAP 또는 직접 TCP Packet를 정의하여 socket으로 통신하는 방식은 &lt;strong&gt;interface-centric&lt;/strong&gt; 방식이라고 한다.
데이터를 보내는 sender에서 데이터를 보내면, receiver는 어떤 데이터 형이 올지를 미리 알고 있다. (데이터 타입이 미리 약속되어 있다.) 마찬가지로, sender는 receiver가 어떤 형식의 데이터를 받을 것인지를 알고 있고, receiver는 그 데이터가 올 때까지 기다리는게 일반적인 흐름이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;즉, 서로 통신을 하는 애플리케이션들이 데이터 타입이나 동작 방법에 대해서 서로 알고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 JMS의 경우 &lt;strong&gt;data-centric&lt;/strong&gt; 방식으로, sender는 데이터를 보내기만 한다. Receiver가 데이터를 받았건 말건, 내지는 receiver의 수가 얼마나 존재하는지는 상관하지 않는다.
JMS에서 sender는 JMS의 messaging system에 데이터를 보내기만 한다. Receiver는 이렇게 messaging system에 보내진 데이터를 중계해서 받으며, 이때 데이터 타입은 미리 정해져 있는 것이 아니다. (물론 데이터를 받으면 receiver가 처리할 수 있게 알맞은 방식으로 casting 하는 것이 필요하다.)
중요한 것은 데이터 형을 몰라도 데이터를 받는 것 자체는 문제가 없고, 따라서 이런 방식에는 sender와 receiver 간의 약속이 필요하지 않다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;asynchronous-messaging&quot;&gt;Asynchronous messaging&lt;/h3&gt;

&lt;p&gt;기본적으로 JMS messaging 시스템은 asynchronous 방식의 messaging을 지원한다. &lt;strong&gt;interface-centric&lt;/strong&gt; 방식의 경우 데이터를 보내면 ack를 받거나 return 값을 받을 때까지는 sender는 waiting을 하게 되는 synchronous 방식으로 동작한다. 물론 receiver 역시, 계속 sender로부터 데이터가 오기를 기다린다.&lt;/p&gt;

&lt;p&gt;그러나 asynchronous 방식에서 sender는 일단 messaging system에 데이터를 보내며, receiver가 데이터를 받았는지 안받았는지 여부를 확인할 필요가 없다. 따라서 sender는 계속해서 데이터를 보내게 되고, 데이터를 다 보내면 다른 일을 할 것이다.
Receiver는 sender로부터 데이터가 오기만을 기다리는 것이 아니라, 필요할 때 messaging system에 저장되어 있는 데이터를 꺼내서 바로 사용하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;즉 sender와 receiver 사이의 데이터 전송 작업이 동시에 일어나지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;reliable-and-unreliable-messaging&quot;&gt;Reliable and unreliable messaging&lt;/h3&gt;

&lt;p&gt;앞에서 언급하였듯이, JMS에서 sender는 receiver의 상태에 상관없이 데이터를 보낸다고 설명하였다.
여기서 생각해야 될 것은 어떻게 sender가 보낸 데이터를 receiver가 받을 수 있도록 보장하냐라는 것이다. (네트워크 문제나 기타 이유로 데이터가 손실될 수 있다.)&lt;/p&gt;

&lt;p&gt;이러한 점은 JMS messaging system이 보장해준다. Reliable messaging의 경우, sender가 데이터를 보냈으면 system이 중간에 다운되더라도 보낸 데이터는 receiver가 받을 수 있도록 보장한다.&lt;/p&gt;

&lt;p&gt;다만, 신뢰성이 중요하지 않고 데이터가 전송되는 시간이 중요하다면 unreliable messaging을 이용하여 별도의 보장없이 데이터를 빨리 전송하는데에만 초첨을 맞출 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;queue--bus&quot;&gt;Queue / Bus&lt;/h3&gt;

&lt;p&gt;JMS messaging system에서 sender가 데이터를 보내는 destination이 되고, receiver가 데이터를 읽어오게 되는 부분을 &lt;strong&gt;Queue&lt;/strong&gt; 또는 &lt;strong&gt;Bus&lt;/strong&gt; 라고 이야기 한다.&lt;/p&gt;

&lt;p&gt;예를 들어, 포털 쇼핑몰에 입점한 여러 쇼핑몰이 있다고 하였을 때, 포털 쇼핑몰에서는 주문 내용을 데이터로 만들어 보내고, 이 데이터를 컴퓨터에 대한 주문은 &lt;strong&gt;Queue A&lt;/strong&gt; 로, 전자제품에 대한 주문은 &lt;strong&gt;Queue B&lt;/strong&gt; 로 보낸다고 하자.&lt;/p&gt;

&lt;p&gt;컴퓨터 판매 쇼핑몰은 &lt;strong&gt;Queue A&lt;/strong&gt; 로부터 주문 정보를 받고, 전자제품 쇼핑몰은 &lt;strong&gt;Queue B&lt;/strong&gt; 로부터 주문을 받을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queue&lt;/strong&gt; 는 sender와 receiver 간의 데이터를 주고 받는 채널의 역할을 한다.&lt;/p&gt;

&lt;p&gt;만약 여기서 포털 쇼핑몰이 하나 더 늘어났다고 가정했을 때, 주문 연동은 간단하게 할 수 있다. 새로운 포털 쇼핑몰이 기존 컴퓨터 판매 쇼핑몰에 주문을 넘기기 위해 &lt;strong&gt;Queue A&lt;/strong&gt; 에 주문 내용을 보내기만 하면 된다.&lt;/p&gt;

&lt;p&gt;이처럼 JMS messaging system에는 Queue의 개념을 이용하면 데이터의 경로 배정 (Routing)을 매우 유연적으로 할 수 있으며 업무 흐름 (Work flow)를 구현하는데 큰 강점으로 작용한다.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/java/2017/03/22/JMS-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/java/2017/03/22/JMS-post.html</guid>
        
        <category>java</category>
        
        <category>messaging</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 07 : Caching</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 31 caching&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;p&gt;Spring Framework는 서버 애플리케이션을 위해 다양한 캐시들을 지원한다. 기본적으로 여러 서드파티 캐시 라이브러리들을 지원하며 자신에 맞는 캐시를 골라서 사용하면 되겠다.&lt;/p&gt;

&lt;p&gt;JSR-107(JCache) 구현체들은 모두 지원하며, EHCache, Hazelcast, Infinispan, Couchbase, Redis, Caffeine, Guava 등이 기본적으로 자동 설정을 지원한다.&lt;/p&gt;

&lt;p&gt;Spring에서는 추상화된 캐시를 지원하는데 CacheManager라는 인터페이스로 구현해주면 된다. 물론 그에 따른 Cache도 구현해야 한다.&lt;/p&gt;

&lt;p&gt;먼저 다음과 같이 pom.xml에 spring-boot-starter-cache dependency 를 추가하고 @EnableCaching annotation을 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-cache&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cache.annotation.EnableCaching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableCaching&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;@EnableCaching&lt;/strong&gt; annotation은 프로젝트에서 캐시 관련 annotation &lt;strong&gt;(@Cacheable, @CacheEvict)&lt;/strong&gt; 를 사용하겠다는 선언이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트 등 캐싱을 강제로 disable 시키고 싶으면 application.properties에 spring.cache.type property를 통해 disable 시킬 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;캐싱해보자&quot;&gt;캐싱해보자&lt;/h3&gt;

&lt;p&gt;spring-boot-starter-cache는 기본 CacheManager로 &lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;을 사용하고 있어, 여기서는 &lt;strong&gt;Ehcache&lt;/strong&gt; 를 사용하여 실험하기 위해 다음과 같이 의존성을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.sf.ehcache&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ehcache&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ehcache는 Java 생태계에서 간편하게 쓰이는 캐시 라이브러리이다. Spring Framework를 사용할 때 Ehcache를 Spring이 제공하는 Cache 관련 인터페이스에 붙여서 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 자동으로 Spring Boot가 dependency에 따라 Ehcache를 사용하는지 알아보자.
CommandLineRunner를 통해 Spring Boot 애플리케이션이 시작될 때 run 메소드가 시작되도록 하여 CacheManager를 확인한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.CommandLineRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cache.CacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCommandLineRoutine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCommandLineRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyCommandLineRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cacheManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner Do.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using cache manager: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
그런데 dependency 추가하는 것만으로는 CacheManager가 바뀌지 않는다.
Ehcache를 사용하기 위한 다음 ehcache.xml 파일을 src/main/resources에 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ehcache&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:noNamespaceSchemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://ehcache.org/ehcache.xsd&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;updateCheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;diskStore&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;cache&lt;/span&gt; 	&lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findMemberCache&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;maxEntriesLocalHeap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;maxEntriesLocalDisk=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1000&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;eternal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;diskSpoolBufferSizeMB=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;timeToIdleSeconds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;timeToLiveSeconds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;600&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;memoryStoreEvictionPolicy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LFU&quot;&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;transactionalMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;persistence&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;strategy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localTempSwap&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cache&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ehcache&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 중요하게 볼 것은 &lt;strong&gt;&amp;lt;cache name=”findMemberCache”&lt;/strong&gt; 이다.
findMemberCache는 캐시의 이름으로, 내가 캐시하고 싶은 메소드에서 이 이름의 캐시를 별도의 annotation을 통해 지정하게 되면 이 캐시를 사용하게 된다.&lt;/p&gt;

&lt;p&gt;그러면 다음과 같이 Spring Boot가 실행될 때, CacheManager가 바뀌는 것을 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_05/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;controller&quot;&gt;Controller&lt;/h4&gt;

&lt;p&gt;Controller에&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;/member/cache/{name}&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/member/nocache/{name}&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;/member/refresh/{name}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;path 를 통해 각 URL에서 특정 이름에 대해 caching 및 evict에 대한 실험을 진행한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 Controller에 각 url에 대해 mapping하는 메소드를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.cache.annotation.EnableCaching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.PathVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.ResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.dao.UserRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.entity.User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;하&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableCaching&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/nocache/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNoCacheMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByNameNoCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; NoCache time: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/cache/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCacheMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByNameCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Cache time: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/refresh/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cache clear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;/member/nocache/{name}&lt;/strong&gt; 에 대해서는 캐싱을 진행하지 않고, &lt;strong&gt;/member/cache/{name}&lt;/strong&gt; 에 대해서는 캐싱을 하며, &lt;strong&gt;/member/refresh/{name}&lt;/strong&gt; 에 대해서는 캐싱된 이름을 evict 할 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 언급하였듯, &lt;strong&gt;@EnableCaching&lt;/strong&gt; annotation은 캐시 관련 annotation (@Cacheable, @CacheEvict)를 사용하겠다는 것을 나타낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;user-class-추가&quot;&gt;User class 추가&lt;/h4&gt;
&lt;p&gt;위의 controller에서 사용하는 user class는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DB를 사용하지 않을 것이므로 어떠한 annotation도 사용하지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;user-repository-추가&quot;&gt;User repository 추가&lt;/h4&gt;

&lt;p&gt;위의 User class의 오브젝트를 다루기 위한 repository 클래스를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameNoCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Repository&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepositoryImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRepositoryImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameNoCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slowQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findMemberCache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;slowQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@CacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findMemberCache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; cache clear.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;slowQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;캐싱을 위한 핵심 코드이다.
&lt;strong&gt;@Cacheable(value=”findMemberCache”, key=”#name”)&lt;/strong&gt; 은 아까 &lt;strong&gt;ehcache.xml&lt;/strong&gt; 파일에서 지정한 findMemberCache 캐시를 사용하겠다는 의미이며, key는 메소드 파라미터인 name을 사용하겠다는 것이다. 즉 name에 따라 별도로 캐시한다는 의미이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@CacheEvict(value=”findMemberCache”, key=”#name”)&lt;/strong&gt; 은 해당 캐시 내용을 지우겠다는 의미이다.
캐시 데이터가 갱신되어야 한다면 @CacheEvict가 선언된 메소드를 실행시키면서 캐시 데이터는 삭제하고 새로운 데이터를 받게 할 수 있다.&lt;/p&gt;

&lt;p&gt;캐시와 비캐시 메소드의 성능 비교를 확인하기 위해 &lt;strong&gt;slowQuery&lt;/strong&gt; 라는 메소드를 추가하였다. slowQuery는 스레드를 2초동안 sleep 시키기 때문에 &lt;strong&gt;findByNameNoCache&lt;/strong&gt; 메소드와 &lt;strong&gt;findMemberCache&lt;/strong&gt; (Cache에 데이터가 없을 경우) 메소드는 최소 2초이상의 시간이 수행된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;실험&quot;&gt;실험&lt;/h4&gt;

&lt;p&gt;위의 설명대로 URL을 주어 캐시 사용 메소드 및 비캐시 메소드 간의 성능을 측정한다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_05/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
캐시 및 비캐시 URL에 대해 4번씩 요청 결과 다음의 결과를 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_05/02.png&quot; alt=&quot;02.png&quot; /&gt;
&lt;br /&gt;
또 다음과 같이 name 별로 캐싱을 진행하는 것을 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_05/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/21/spring_boot_features_05-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/21/spring_boot_features_05-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 06 : Working with databases</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 29 / 30&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;working-with-sql-databases&quot;&gt;Working with SQL databases&lt;/h2&gt;

&lt;p&gt;Spring Framework는 SQL DB 사용을 위한 강력한 기능을 제공한다. JDBC access를 위한 JdbcTemplate부터, Hibernate를 통한 ORM (Object Relational Mapping) 까지 지원한다.&lt;/p&gt;

&lt;p&gt;Spring Framework에서는 Entity 클래스와 Repository 인터페이스 구현을 통해 기본적인 CRUD가 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;configure-a-datasource&quot;&gt;Configure a DataSource&lt;/h3&gt;

&lt;p&gt;Java의 javax.sql.DataSource 인터페이스는 DB connection을 위한 기본 메소드를 제공하며, URL을 통해 DB 연결을 진행한다. Spring Boot에서 DataSource를 설정하기 위해 application.properties에 다음과 같이 추가할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.datasource.url=jdbc:mysql://localhost/test
spring.datasource.username=dbuser
spring.datasource.password=dbpass
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;만약 위와 같은 설정을 하지 않으면 Spring Boot는 자동으로 내장된 database를 사용할 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot는 url을 보고 어떤 DB의 JDBC Driver를 사용할지 결정할 수 있으므로 꼭 driver-class-name의 설정이 필요한 것은 아니다. 만약 driver-class-name이 설정되면, Spring Boot는 이 Driver 클래스가 사용가능한지 체크하게 되므로, 반드시 관련 dependency를 추가해서 그 Driver 클래스가 사용할 수 있어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-jdbctemplate&quot;&gt;Using JdbcTemplate&lt;/h3&gt;

&lt;p&gt;Spring Boot에서 JdbcTemplate나 NamedParameterJdbcTemplate는 자동 설정되며, 다음과 같이 @Autowired annotation을 써서 사용가가 정의한 빈에서 추가할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.jdbc.core.JdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JdbcTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdbcTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jpa-and-spring-data&quot;&gt;JPA and ‘Spring Data’&lt;/h3&gt;
&lt;p&gt;JPA, Java Persistence API는 Object를 관계형 데이터베이스에 저장할 수 있도록 매핑을 해주는 기술로, sprig-boot-starter-data-jpa를 dependency로 추가함으로써 사용할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hibernate: JPA 구현 중 가장 많이 사용된다.&lt;/li&gt;
  &lt;li&gt;Spring Data JPA: JPA 기반으로 구현된 Repository 클래스들을 쉽게 사용할 수 있게 해준다.&lt;/li&gt;
  &lt;li&gt;Spring ORMs: Spring Framework에서 ORM을 지원하는 코어 모듈이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot는 기본적으로 Hibernate 5.0.x version을 사용한다. 물론 4.3.x version이나, 5.2.x version도 사용가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;jpa-사용해보기&quot;&gt;JPA 사용해보기&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;entity-추가&quot;&gt;Entity 추가&lt;/h5&gt;
&lt;p&gt;JPA에서 Entity라는 것은 데이터베이스에 저장하기 위해 사용자가 정의하는 클래스이다. 일반적으로 RDBMS에서 Table의 정의와 같은 것이다. Table의 이름이나 컬럼들에 대한 정보를 가진다. 원래 persistence.xml 파일에서 정의되지만 Spring Boot에서는 &lt;strong&gt;Entity Scanning&lt;/strong&gt; 으로 xml 파일을 추가할 필요가 없다.&lt;/p&gt;

&lt;p&gt;먼저 Table을 다음과 같이 만든다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_04/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 Entity 클래스를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.persistence.Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Entity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Id&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Column&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;@Entity annotation을 클래스의 선언 부분에 넣어주고, 멤버 필드는 테이블의 각 컬럼에 대응하면 된다.
&lt;strong&gt;기본 생성자는 반드시 넣어주어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;@Id&lt;/strong&gt; annotation: primary key에 해당하는 변수에 선언한다. @GeneratedValue는 해당 Id 값을 어떻게 자동으로 생성할지 선택할 수 있다. 이 컬럼은 autoincrement로 지정해두었다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Table&lt;/strong&gt; annotation: @Entity annotation를 사용하면 클래스의 이름과 같은 이름을 가지는 테이블과 매핑하는데, @Table annotation을 사용함으로써 이름이 다른 테이블과 매핑할 수 있다. &lt;strong&gt;@Table(name=”XXX”)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Column&lt;/strong&gt; annotation: 멤버 필드와 같은 이름을 가지는 컬럼과 자동 매핑하므로 꼭 필요한 것은 아니지만, 필드 이름과 컬럼 이름이 서로 다를 경우에 &lt;strong&gt;@Column(name=”XXX”)&lt;/strong&gt; 와 같이 매핑할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;repository-추가&quot;&gt;Repository 추가&lt;/h5&gt;
&lt;p&gt;Entity 클래스를 만들었다면, Repository 인터페이스를 구현해야 한다.
Repository 인터페이스는 DB에 엑세스하기 위해 정의된 인터페이스로, 메소드 이름으로부터 JPA 쿼리가 자동으로 만들어진다.&lt;/p&gt;

&lt;p&gt;Spring Framework에서는 Entity의 기본적인 삽입, 조회, 수정, 삭제 (CRUD)가 가능하도록 CrudRepository라는 인터페이스를 만들어두었다.&lt;/p&gt;

&lt;p&gt;다음과 같이 CrudRepository 인터페이스를 구현해서 Member 테이블에 CRUD를 할 수 있도록 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.jpa.repository.Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.repository.CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.repository.query.Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.nhnent.hellospringboot.entity.Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberRepository&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CrudRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameAndAgeLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select t from Member t where name=:name and age &amp;lt; :age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameAndAgeLessThanSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Param&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByNameAndAgeLessThanOrderByAgeDesc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 Member Entity를 사용하기 위한 클래스로, 기본적인 메소드 외에 추가적인 메소드를 지정할 수 있다.
메소드 이름을 기반(Query Method)를 통해 만들 수도 있고, @Query annotation을 이용해 기존의 SQL 처럼 사용해도 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 findByNameAndAgeLessThan 메소드와 findByNameAndAgeLessThanSQL 은 같은 루틴이다. 전자는 메소드 이름을 기반으로 쿼리를 날릴 것이고, 후자는 @Query annotation에 있는 SQL 문을 가지고 쿼리를 날릴 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;메소드 이름을 기반으로 작성하는 것은 특정한 규칙이 있으므로, 만드는 방법은 다음을 참조한다.
&lt;a href=&quot;http://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation&quot;&gt;spring.io, Query Creation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음과 같이 코드를 작성해서 추가한 Repository와 Entity 클래스를 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplicationRunnerRoutine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApplicationRunnerRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findAll() method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByNameAndAgeLessThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findAll() method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByNameAndAgeLessThanSQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findAll() method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByNameAndAgeLessThanOrderByAgeDesc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;findAll() method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 다음과 같은 결과를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_04/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;working-with-nosql-technologies&quot;&gt;Working with NoSQL technologies&lt;/h2&gt;

&lt;p&gt;Spring Data는 MongoDB, ElasticSearch, Redis, Cassandra와 같은 다양한 NoSQL을 지원한다. Spring Boot는 이러한 NoSQL을 위한 자동 설정을 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redis&quot;&gt;Redis&lt;/h3&gt;

&lt;p&gt;Redis는 “REmote DIctionary System”의 약자로 memory 기반의 key / value store 이다.
Spring Boot는 Jedis와 같은 Redis client 라이브러리를 위하 auto configuration을 지원하며, spring-boot-starter-data-redis 아티팩트 추가를 통해 쉽게 사용가능하다.&lt;/p&gt;

&lt;p&gt;먼저 다음과 같이 Redis를 사용하기 위해 pom.xml에 dependency를 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.session&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-session&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-redis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.3.8.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 Redis를 사용하기 위해 application.properties에 다음과 같이 추가한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis.host=localhost
redis.port=6379
redis.database=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서는 HttpSession을 사용하여 Cookie 값을 Redis로 저장해보겠다.
Spring Boot에서는 JedisConnectionFactory와 CookieSerializer를 @Bean annotation을 사용해서 주입할 수 있기 때문에, 다음과 같이 JedisConnectionFactory와 CookieSerializer를 리턴하는 @Bean 메소드를 정의한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.PropertySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.web.http.CookieSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.web.http.DefaultCookieSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableRedisHttpSession&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@PropertySource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:application.properties&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${redis.host}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${redis.port}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${redis.database}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;JedisConnectionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JedisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHostName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsePool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CookieSerializer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cookieSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DefaultCookieSerializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultCookieSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 소스와 같이 application.properties 에 정의한 Redis 관련 값들을 @Value annotation으로 주입받아 JedisConnectionFactory를 초기화하고, CookieSerializer로는 DefaultCookieSerializer를 사용한다.&lt;/p&gt;

&lt;p&gt;그리고 다음과 같이 controller에 테스트용 url를 만들어 Redis에 쿠키 관련 값들이 저장되는지 확인한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/session-test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 웹 브라우저로 /session-test에 접속, 현재 쿠키 값을 확인해보자.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_04/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;redis-cli를 통해 Redis 에 저장된 쿠키 값을 다음과 같이 키로 저장되어 있는 것을 확인할 수 있을 것이다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-21-spring_boot_features_04/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/20/spring_boot_features_04-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/20/spring_boot_features_04-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 05 : Developing web applications</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 27 Developing web applications&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;developing-web-applications&quot;&gt;Developing web applications&lt;/h2&gt;

&lt;p&gt;Spring Boot는 기본적으로 웹 애플리케이션 개발에 대해 강력한 기능을 제공한다. HTTP Server를 내장된 Tomcat이나 Jetty, Undertow를 통해 제공하며, spring-boot-start-web 아티팩트만 추가한다면 큰 어려움없이 빠르게 웹 애플리케이션 개발을 시작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-spring-web-mvc-framework&quot;&gt;The ‘Spring Web MVC Framework’&lt;/h3&gt;

&lt;p&gt;Spring Web MVC 프레임워크는 MVC 패턴에 입각한 (Model - View - Controller) 웹 개발 프레임워크이다.
@Controller나 @RestController를 통해 HTTP request에 대해 처리하는데 @RequestMapping을 통해 각 URL에 따른 HTTP request 처리 메소드를 매핑할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{user}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{user}/customers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserCustomers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/{user}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DELETE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@PathVariable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;spring-mvc-auto-configuration&quot;&gt;Spring MVC auto-configuration&lt;/h3&gt;

&lt;p&gt;Spring Boot는 Spring MVC 프레임워크를 사용하기 위해 auto configuration 기능을 제공한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ContentNegotiatingViewResolver / BeanNameViewResolver 빈을 포함&lt;/li&gt;
  &lt;li&gt;static resource 를 서비스할 수 있고, WebJars를 지원한다.&lt;/li&gt;
  &lt;li&gt;Converter, GenericConverter, Formatter 빈을 자동 등록한다.&lt;/li&gt;
  &lt;li&gt;HttpMessageConverters 를 지원한다.&lt;/li&gt;
  &lt;li&gt;MessageCodesResolver를 자동 등록&lt;/li&gt;
  &lt;li&gt;커스텀 파비콘을 사용할 수 있고, ConfigurableWebBindingInitializer 빈을 자동으로 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;httpmessageconverters&quot;&gt;HttpMessageConverters&lt;/h4&gt;

&lt;p&gt;Spring MVC는 HttpMessageConverter 인터페이스를 통해 HTTP request 및 response를 변환한다. 각 데이터 오브젝트들은 Jackson 라이브러리를 통해 JSON 형식으로 변환하거나 JAXB나 Jackson XML 확장을 통해 XML 형식으로 변환할 수 있으며 기본적으로 UTF-8로 인코딩한다.&lt;/p&gt;

&lt;p&gt;Spring Boot에서 만약 사용할 HttpMessageConverter 를 바꾸고 싶으면 다음과 같이 클래스를 추가해서 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.web.HttpMessageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.http.converter.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpMessageConverters&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;customConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;additional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HttpMessageConverter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpMessageConverters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;additional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h3&gt;

&lt;p&gt;Spring Boot는 예외가 발생했을 때, /error 페이지로 매핑하여 리다이렉트시킨다.
기본 에러 페이지는 JSON 포맷으로 에러에 대한 정보를 보내며, HTTP status 및 exception message를 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-20-spring_boot_features_03/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 예외 처리에 대해 커스터마이징하고자할 때, ErrorController or ErrorAttribute 인터페이스를 구현하거나, 환경변수로 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;환경변수로만-설정하는-법&quot;&gt;환경변수로만 설정하는 법&lt;/h4&gt;

&lt;p&gt;application.properties에 다음과 같이 설정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server.error.path=/error
server.error.include-stacktrace=always
server.error.whitelabel.enabled=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;server.error.path는 예외가 발생시 리다이렉트할 URI를 지정한다.&lt;/li&gt;
  &lt;li&gt;server.error.include-stacktrace는 예외가 발생했을 때 스택 트레이스를 볼 것인가를 지정한다.
    &lt;ul&gt;
      &lt;li&gt;never: 보지 않음. (기본값)&lt;/li&gt;
      &lt;li&gt;always: 항상 본다.&lt;/li&gt;
      &lt;li&gt;on_trace_param: URI에 파라미터로 trace=true로 주었을 때만 본다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;server.error.whitelabel.enabled 는 스프링 부트에서 기본적으로 제공하는 윗 그림과 같은 에러페이지를 볼 것인지를 지정한다. false로 설정할 겨우 기본 서블릿 컨테이너 에러 화면을 보게 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;errorattribute-인터페이스-구현&quot;&gt;ErrorAttribute 인터페이스 구현&lt;/h4&gt;

&lt;p&gt;ErrorAttribute는 기본적으로 Spring Boot에서 에러 처리하는 BasicErrorController에서 사용하는 인터페이스로,
예외 정보를 관리하게 된다.&lt;/p&gt;

&lt;p&gt;DefaultErrorAttributes는 Spring Boot에서 기본적으로 사용하는 클래스인데, HandlerExceptionResolver를 구현하여 예외를 가져오는 기능을 가진다.
org.springframework.boot.autoconfigure.web.DefaultErrorAttributes 클래스를 참고하여 커스터마이징한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.web.DefaultErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.context.request.RequestAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloSpringBootApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloSpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultErrorAttributes&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DefaultErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	                &lt;span class=&quot;n&quot;&gt;RequestAttributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includeStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	            &lt;span class=&quot;n&quot;&gt;includeStackTrace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAttributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includeStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;errorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;custom_data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
	                    &lt;span class=&quot;n&quot;&gt;requestAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;custom_data&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCOPE_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

	            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;errorcontroller-인터페이스-구현&quot;&gt;ErrorController 인터페이스 구현&lt;/h4&gt;

&lt;p&gt;Spring Boot에서는 예외 발생시, ErrorController 인터페이스를 찾아서 getErrorPath 메소드를 실행시켜 예외를 처리할 URI를 얻는다.
기본 설정된 클래스는 org.springframework.boot.autoconfigure.web.BasicErrorController 이며, 내부에서는 getErrorPath 메소드로 가져온 URI의 요청도 처리하는 역할을 가지고 있다.
커스터마이징시에 이 클래스를 참고하여 구현하면 된다.&lt;/p&gt;

&lt;p&gt;ErrorAttribute와 마찬가지로 다음과 같이 Spring 빈으로 선언만 하면 사용가능하다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BasicErrorController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errorController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ErrorAttributes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServerProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BasicErrorController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includeStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAttr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrorAttributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;includeStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//custom code&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorAttr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;custom-error-pages&quot;&gt;Custom Error pages&lt;/h4&gt;

&lt;p&gt;만약 HTTP status에 따라 커스터마이징한 Error 페이지를 보여주고 싶다면 다음과 같이 /error 폴더를 만들어 그 안에 html이나 FreeMaker, jsp 등을 넣어두면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;src
    &lt;ul&gt;
      &lt;li&gt;main
        &lt;ul&gt;
          &lt;li&gt;java
            &lt;ul&gt;
              &lt;li&gt;source codes&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;resources
            &lt;ul&gt;
              &lt;li&gt;public
                &lt;ul&gt;
                  &lt;li&gt;error
                    &lt;ul&gt;
                      &lt;li&gt;404.html&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;templates
                &lt;ul&gt;
                  &lt;li&gt;error
                    &lt;ul&gt;
                      &lt;li&gt;5xx.ftl&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/20/spring_boot_features_03-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/20/spring_boot_features_03-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 04 : Logging</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 26 Logging&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;logging&quot;&gt;Logging&lt;/h2&gt;

&lt;p&gt;Spring Boot는 개발자에게 알려야할 메시지를 로깅 라이브러리를 통해 로그로 출력한다.
만약 pom을 통해 spring-boot-start 또는 spring-boot-start-web 아티팩트를 추가한 상태에서는 spring-boot-starter-logging 아티팩트도 자동 포함하므로, 로깅을 위해 별도의 라이브러리를 추가할 필요가 없다.&lt;/p&gt;

&lt;p&gt;Spring Boot는 디폴트로 Logback 로깅 라이브러리를 사용하여 로그를 출력하며, 개발자는 추상체인 SLF4J를 통해 로그를 기록하면 된다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Java에서 로깅을 위한 다양한 로깅 라이브러리가 있지만, Spring Boot가 제공하는 default 로깅 라이브러리도 충분히 사용할만 하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음 코드와 같이 slf4j.Logger 를 통해 로깅을 할 수 있다.
밑의 코드는 info를 통해 INFO 레벨로 로깅한다. debug나 error와 같은 레벨도 메소드로서 호출한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.CommandLineRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCommandLineRoutine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCommandLineRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner Do.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;log-format&quot;&gt;Log Format&lt;/h3&gt;

&lt;p&gt;가장 기본적인 로그 포맷은 다음과 같다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-20-spring_boot_features_02/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Date and Time: 기본적으로 ms 단위&lt;/li&gt;
  &lt;li&gt;Log Level: ERROR, WARN, INFO, DEBUG 그리고 TRACE 레벨로 나뉘어진다.&lt;/li&gt;
  &lt;li&gt;Process ID&lt;/li&gt;
  &lt;li&gt;—: Separator&lt;/li&gt;
  &lt;li&gt;Thread Name&lt;/li&gt;
  &lt;li&gt;Logger Name&lt;/li&gt;
  &lt;li&gt;로그 메시지&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;console-output&quot;&gt;Console Output&lt;/h3&gt;

&lt;p&gt;로깅을 하게 되면, console에 로그 메시지를 출력하게 되는데, 기본적으로 ERROR, WARN, INFO 레벨의 로그 메시지가
출력되고, –debug 옵션에 따라서 DEBUG 레벨의 로그 메시지도 추가적으로 출력할 수 있다.&lt;/p&gt;

&lt;p&gt;DEBUG나 TRACE 레벨의 로그 메시지를 출력하기 위해 application.properties에 다음과 같이 property를 셋팅하면 출력할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;debug=true
trace=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;file-output&quot;&gt;File Output&lt;/h3&gt;

&lt;p&gt;Spring Boot는 console에만 로그 메시지를 출력하므로, 파일에 쓸려면 logging.file이나 logging.path property를 application.properties에 추가해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본적으로 console과 같이 ERROR, WARN, INFO 레벨의 로그 메시지가 파일에 쓰여지게 되며, 로그 파일이 10MB가 넘어가게 되면 다시 파일 처음으로 돌아가 덮어쓰게 된다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/20/spring_boot_features_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/20/spring_boot_features_02-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 03 : Part 4, Chapter.23 ~ 25</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part4, Chapter 25까지의 Review&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;springbootapplication&quot;&gt;SpringBootApplication&lt;/h2&gt;

&lt;p&gt;SpringApplication 클래스는 main method로부터 시작하는 Spring 애플리케이션을 쉽게 시작할 수 있도록 도와주는 클래스이다.
보통 Spring Boot를 사용한다면 다음과 같이 main method가 작성되어 있을 것이다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySpringConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-17-spring-boot-features/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;만약 애플리케이션을 시작하는데 실패하면 FailureAnalyzers를 통해 에러 메시지를 확인하여 대응할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-17-spring-boot-features/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-boot-banner&quot;&gt;Spring Boot Banner&lt;/h2&gt;

&lt;p&gt;배너는 Spring Boot 애플리케이션이 시작될 때, 출력되는 것으로 banner.txt를 클래스패스에 추가하는 것으로 기본적으로 출력되는 배너를 바꿀 수 있다.&lt;/p&gt;

&lt;p&gt;Spring Boot 1.1 버전부터 커스터마이징이 가능하지만 1.4버전까지 업데이트되면서 그림파일도 넣을 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://5mango.com/_10&quot;&gt;Spring Boot 시작배너 바꾸기&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그림파일을 아스키코드로 바꾸어 변경해주는 것을 통해 사용하고 싶은 그림으로 배너를 바꿀 수 있다. 그리고 1.4버전부터는 gif, jpg, png 이미지 파일을 직접 배너로 설정하는 것도 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사용하고 싶은 배너를 banner.txt 라는 이름으로 src/main/resource 폴더에 넣어주기만 하면 다음과 같이 바뀌는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-03-17-spring-boot-features/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;customizing-springapplication&quot;&gt;Customizing SpringApplication&lt;/h2&gt;

&lt;p&gt;main 메소드에서 SpringApplication이 사용하는 디폴트 설정들을 쓰지 않고 몇몇 부분들을 정의하여 사용하고자할 때, main 메소드에서 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloSpringBootApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//SpringApplication.run(HelloSpringBootApplication.class, args);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloSpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBannerMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;SpringApplcation.run static 메소드는 내부적으로 SpringApplication을 생성 후 run을 호출한다. run static 메소드를 사용하는 대신에 직접 SpringApplication 객체를 생성 후 run 을 호출하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;SpringApplication 객체의 run 메소드로 넘어가는 파라미터인 args 는 @Configuration class의 정보나 XML configuration 등 Spring 빈을 생성하기 위해 스캔해야될 정보이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;소스가 아니더라도 src/main/resources 에 있는 application.properties를 통해 SpringApplication 설정 정보를 다음과 같이 변경할 수 도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; spring.mvc.view.prefix: /WEB-INF/jsp/
 spring.mvc.view.suffix: .jsp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;accessing-argument-banner&quot;&gt;Accessing Argument Banner.&lt;/h2&gt;

&lt;p&gt;SpringApplication run 에 넘겨지는 파라미터, args를 확인하고 싶다면 다음과 같이 ApplicationArgument 인터페이스를 통해 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.ApplicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArgsCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgsCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgsCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOptionNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ArgsCheck&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOptionValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러면 console 창에서 다음 그림과 같이 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-17-spring-boot-features/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-the-applicationrunner-or-commandlinerunner&quot;&gt;Using the ApplicationRunner or CommandLineRunner&lt;/h2&gt;

&lt;p&gt;SpringApplication을 시작할 때, 수행해야할 루틴이 있다면 ApplicationRunner나 CommandLineRunner 인터페이스 구현을 통해 자신이 원하는 루틴을 실행할 수 있도록 할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;루틴은 SpringApplication.run 이 끝나기 전에 한 번 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;CommandLineRunner 인터페이스는 Spring Boot Application에 전해지는 파라미터를 String 배열 형식을 접근할 수 있다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCommandLineRoutine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCommandLineRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommandLineRunner Do.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ApplicationRunner는 파라미터를 ApplicationArguments 형식으로 접근가능하다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplicationRunnerRoutine&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyApplicationRunnerRoutine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ApplicationRunner Do.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 코드를 작성하였을 때 다음과 같이 콘솔에서 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-17-spring-boot-features/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-yaml-instead-of-properties&quot;&gt;Using YAML instead of Properties&lt;/h2&gt;

&lt;p&gt;Spring Boot에서는 application.propertes 대신에 YAML 형식의 파일을 대신 property 추가에 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;YAML 파일 형식에서는 다음과 같이 property를 셋팅한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring:
  mvc:
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 한 property에 여러 개의 값을 추가하고 싶을 때는 - 를 쓸 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my:
  servers:
    - dev.bar.com
    - foo.bar.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 property를 사용하고자 할 때는 다음과 같이 java code를 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.context.properties.ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YAMLTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그러면 2개의 server 도메인 이름이 &lt;strong&gt;servers&lt;/strong&gt; List에 차례로 주입될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;multi-profile-yaml&quot;&gt;multi-profile YAML&lt;/h3&gt;

&lt;p&gt;spring.profiles를 사용해 한 YAML 파일에서 다양한 프로파일에 대한 property를 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  address: 192.168.1.100
---
spring:
  profiles: development
server:
  address: 127.0.0.1
---
spring:
  profiles: production
server:
  address: 192.168.1.120
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 상황에서 development 프로파일에 대해서는 server.address가 127.0.0.1로 셋팅되고, 프로파일을 지정하지 않았을 경우 192.168.1.100으로 셋팅된다.&lt;/p&gt;

&lt;p&gt;밑의 YAML 파일에서는 &lt;strong&gt;security.user.password property&lt;/strong&gt; 는 오로지 development 프로파일에 대해서만 셋팅된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  port: 8000
---
spring:
  profiles: development
security:
  user:
    password: weak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇지만 다음과 같이 작성하면 모든 프로파일에 대해서 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server:
  port: 8000
security:
  user:
    password: weak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;type-safe-configuration-properties&quot;&gt;Type-safe Configuration Properties&lt;/h2&gt;

&lt;p&gt;다음과 같은 class를 통해 @Value annotation 및 properties 파일을 사용할 필요없이 property를 설정하는 것과 같은 효과를 낼 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;security&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRemoteAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setRemoteAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InetAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Security&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRoles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setRoles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스는 다음과 같이 property들을 정의한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;foo.enabled 는 false로 정의된다.&lt;/li&gt;
  &lt;li&gt;foo.remote-address는 String 타입으로 정의된다.&lt;/li&gt;
  &lt;li&gt;이너 클래스를 통해, foo.security.password / foo.security.roles가 정의된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 클래스로 정의된 property를 다른 곳에서 사용하고자 할 때는 다음과 같이 @EnableConfigurationProperties 를 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FooProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;relaxed-binding&quot;&gt;Relaxed Binding&lt;/h2&gt;

&lt;p&gt;Spring Boot는 @ConfigurationProperties annotation으로 properties 파일로부터 property를 읽어 특정 클래스의 필드로 로드할 때, 필드의 이름과 properties안에 있는 해당되는 property 이름이 완전히 같지 않아도 된다.&lt;/p&gt;

&lt;p&gt;예를 들어 다음과 같이 person 으로 시작하는 property로 구성하는 클래스가 있다고 하자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OwnerProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setFirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 클래스의 필드 &lt;strong&gt;“firstName”&lt;/strong&gt; 에 대해 properties 파일에서는 다음과 같이 다양한 property 이름으로도 로드될 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;person.firstName

person.first-name

person.first_name

PERSON_FIRST_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;많이 사용되는 @Value annotation은 이것을 지원하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/17/spring_boot_features-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/17/spring_boot_features-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 02 : Part 3</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot Reference Guide Part 3 Review&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;build-systems&quot;&gt;Build Systems&lt;/h2&gt;

&lt;p&gt;Spring Boot는 introduction을 review 할 때도 언급하였지만, maven이나 gradle과 같은 dependency managment를 함께 사용할 것을 강력히 권장한다. 또한 기본적으로 사용되는 의존성있는 라이브러리 및 version을 미리 구성해준다. 이렇게해서 개발자는 어떤 의존성을 사용할지, 또는 각 의존성간 어떤 버전이 호환성이 좋은지 걱정할 필요없이 즉시 작업을 시작할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dependency-management&quot;&gt;Dependency management&lt;/h3&gt;

&lt;p&gt;Dependency management를 사용할 때, Spring MVC에서 하던 것처럼 version을 일일이 설정할 필요가 없다. Spring Boot는 version별 release list를 관리해주며, Spring Boot가 업데이트가 되면 자동적으로 프로젝트에서 사용하던 의존성 library들이 업데이트 될 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;입맛에 맞는 원하는 version을 설정할 수도 있다. 하지만 Spring Boot Reference Guide에서는 권장하지는 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;maven&quot;&gt;Maven&lt;/h3&gt;

&lt;p&gt;Maven 사용자는 아래와 같이 pom.xml에 추가함으로써 Spring Boot를 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.3.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이  spring-boot-starter-parent 를 상속하는 경우 UTF-8 소스 인코딩이나 pom.xml 내에 &lt;version&gt; 태그를 생략할 수 있는 다음과 같은 특징들이 적용된다.&lt;/version&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기본 컴파일 레벨을 Java 1.8로 지정&lt;/li&gt;
  &lt;li&gt;UTF-8 소스 인코딩&lt;/li&gt;
  &lt;li&gt;spring-boot-starter-dependencies 를 상속하여 &lt;version&gt; 태그를 생략하고 의존성을 관리&lt;/version&gt;&lt;/li&gt;
  &lt;li&gt;resource filtering&lt;/li&gt;
  &lt;li&gt;exec plugin, surefire, Git commit ID, shade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;changing-dependencies-version&quot;&gt;Changing Dependencies Version&lt;/h4&gt;

&lt;p&gt;만약 spring-boot-starter-parent 에서 사용하는 의존성 라이브러리들의 버전을 입맛에 바꾸고 싶다면 다음과 같이 수정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;spring-data-releasetrain.version&amp;gt;&lt;/span&gt;Fowler-SR2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/spring-data-releasetrain.version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;package-project-as-jar&quot;&gt;Package project as jar.&lt;/h4&gt;

&lt;p&gt;Spring Boot는 하나의 jar 파일로 패키징할 수 있도록 지원한다. 만약 하나의 executable jar 파일로 만들고 싶다면 &lt;plugins&gt; 섹션에 다음과 같이 추가한다.&lt;/plugins&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;locating-the-main-application-classes&quot;&gt;Locating the main application classes&lt;/h4&gt;

&lt;p&gt;Spring Boot에서는 main method를 가지는 main application class를 다음과 같이 root package에 놓는 것을 권장한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;com
    &lt;ul&gt;
      &lt;li&gt;example
        &lt;ul&gt;
          &lt;li&gt;myproject
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;Application.java&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;domain
                &lt;ul&gt;
                  &lt;li&gt;Customer.java&lt;/li&gt;
                  &lt;li&gt;CustomerRepostiory.java&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;service
                &lt;ul&gt;
                  &lt;li&gt;CustomerService.java&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;web
                &lt;ul&gt;
                  &lt;li&gt;CustomerController.java&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보통 @EnableAutoConfiguration annotation을 main application class에 사용하는데, 이것은 암묵적으로 다른 Package에 있는 빈을 찾기 위한 Base 로 정의하기 때문이다. main application class에는 @EnableAutoConfiguration이나 @ComponentScan, @SpringBootApplication annotation을 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@Configuration&lt;/strong&gt;:
  현재의 클래스가 Spring의 설정 파일임을 애플리케이션 컨텍스트에 알려주는 역할
  만약 다른 클래스에도 추가할려면 @Configuration을 일일이 추가하는 것보다는 @Import annotation을 사용하도록 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@EnableAutoConfiguration&lt;/strong&gt;:
   Spring Boot autoconfiguration은 추가된 jar dependency 기반으로 Spring application을 자동으로 설정하는 것을 시도한다. 예를 들어 HSQL DB가 class path에 있으면, DB 연결 빈을 정의하지 않아도 자동적으로 in-memory 데이터베이스에 접근할 것이다.
   자동 설정은 비 침입적으로, DataSource 빈을 추가한다면 디폴트로 자동 설정되는 것은 사라질 것이다.
   이 annotation은 하나만 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@ComponentScan&lt;/strong&gt;:
  Spring에게 패키지안에서 다른 컴포넌트, 설정, 서비스를 스캔하도록 한다. 이를 통해 사용자가 추가한 Controller / Service 클래스를 찾는 것이 가능해진다. @Component, @Service, @Repository, @Controller와 같은 &lt;strong&gt;Stereotype&lt;/strong&gt; 컴포넌트들이 자동적으로 Spring 빈으로 추가된다.
  &lt;a href=&quot;http://thswave.github.io/spring/2015/02/02/spring-mvc-annotaion.html&quot;&gt;@ComponentScan analysis&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@SpringBootApplication&lt;/strong&gt;:
  @Configuration, @EnableAutoConfiguration, @ComponentScan annotation들을 main application class에서 함께 사용하는 대신에, 이 annotation으로 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;configuration-classes&quot;&gt;Configuration Classes&lt;/h2&gt;

&lt;p&gt;Spring Boot는 Java 기반의 configuration을 추천한다. XML도 지원하긴 하지만, 메인 configuration은 자바 config로 하는 것을 추천한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XML 및 Java 기반, 둘다 사용할 경우, 한 쪽에서 다른 쪽의 설정 정보를 import 해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;importing-additional-configuration-classes&quot;&gt;Importing Additional Configuration Classes&lt;/h2&gt;

&lt;p&gt;꼭 모든 설정 정보를 &lt;strong&gt;@Configuration 을 통해 한 클래스에 몰아넣을 필요는 없다.&lt;/strong&gt;
&lt;strong&gt;@Import&lt;/strong&gt; annotation을 통해 다른 설정 정보를 가진 클래스를 import 할 수 있다. 아니면 &lt;strong&gt;@Component Scan&lt;/strong&gt; annotation을 활용하여 자동으로 추가시킬 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;importing-xml-configuration&quot;&gt;Importing XML Configuration&lt;/h2&gt;

&lt;p&gt;XML을 어쩔 수 없이 사용해야 하는 경우, &lt;strong&gt;@Configuration&lt;/strong&gt; 클래스에서 해당 XML을 import하는 것을 권장한다. 이 때 사용하는 annotation은 &lt;strong&gt;@ImportResource&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;autoconfiguration&quot;&gt;AutoConfiguration&lt;/h2&gt;

&lt;p&gt;@EnableAutoConfiguration을 사용하면 자동 설정을 진행하지만 사용자가 원하는대로 특정 configuration class를 다음과 같이 제외할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.EnableAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ogg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSourceAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드같이 작성하지 않아도, 자동 설정되는 클래스는 &lt;strong&gt;spring.autoconfigure.exclude&lt;/strong&gt; property에 추가함으로써 조정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;developer-tools&quot;&gt;Developer tools&lt;/h2&gt;

&lt;p&gt;Spring Boot 1.3에서 Spring application 개발에 있어서 편리함을 제공하고자 추가된 프로젝트이다.
이를 통해 코드 변경시 서버 자동 재시작이나, 원격으로 디버깅, 업데이트, 리스타트 기능 등을 제공한다. 이것을 사용하기 위해 maven을 사용한다면 pom.xml에 다음과 같이 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;devtools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;disable-cache&quot;&gt;Disable Cache&lt;/h3&gt;

&lt;p&gt;몇몇 Spring Boot 라이브러리들은 성능 향상을 위해 일정 부분을 캐싱해둔다. Template Engine의 경우, 매번 template 파일을 파싱하는 것을 방지하기 위해 파싱된 template들을 캐싱한다. 또한 Spring MVC 또한 HTTP caching header를 통해 static resource들을 서비스하고 있다.&lt;/p&gt;

&lt;p&gt;이런 캐싱은 실제 서비스할 때는 유용한 것이지만, 개발 진행 중일 때는 개발자가 변경한 부분이 반영되지 않아 바로 확인할 수 없을 수 있는 단점이 있다. 따라서 Spring Boot에서 제공하는 developer tool, spring-boot-devtools를 사용하면 기본적으로 캐싱하는 옵션을 disable 시킨다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;캐시 옵션은 application.properties 파일에 추가함으로써 조정할 수 있지만 developer tool을 사용하면 자동적으로 필요한 캐싱 옵션을 설정한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;automatic-restart&quot;&gt;Automatic Restart&lt;/h3&gt;

&lt;p&gt;Developer tool을 사용하면 classpath에 있는 class source의 변경이 일어날 때마다 자동으로 서버를 재시작한다. 따라서 개발자에게는 코드 수정이 일어날 때마다 빠르게 확인해 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Restart
 Spring Boot는 두개의 클래스로더를 통해 서버를 재시작할 수 있는 메커니즘을 제공하는데, third-party 등에서 제공하는 jar파일에 대해서는 base 클래스로더를 통해 로드되며, 코드 수정이 일어나는 클래스에 대해서는 restart 클래스로더를 통해 로드된다.
 만약 재시작할 필요가 있을 때, restart 클래스로더를 통해 다시 시작하면 됨으로써 개발자가 직접 재시작하는 것보다 더 빠르게 서버를 시작할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Excluding resource
 몇몇의 resource 파일들은 변경이 일어나도 상관이 없다. /META-INF나 /resource, /static 폴더 등에 있는 파일들은 변경이 발생하도 재시작하지 않는다. 다만 Live Reload를 통해 해당 resource 파일들이 변경될 때 바로 확인해 볼 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Live Reload
 Developer tool은 embedded LiveReload 서버를 제공하여, resource 파일의 변경이 일어날 때마다 browser를 refresh 함으로써 반영한 부분을 확인해볼 수 있다. LiveReload 를 위해 크롬이나 사파리, 파이어폭스 등에서 extension을 제공한다.
 만약 Live Reload를 사용하지 않으려면 다음과 같이 application.properties에 추가한다.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; spring.devtools.livereload.enabled=false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;trigger-file&quot;&gt;trigger file&lt;/h3&gt;

&lt;p&gt;보통 IDE를 사용하면 (특히 Intellij) 소스 파일을 에디트할 때마다 계속 컴파일하면서 변경하는 경우가 있다. 이럴 때, 트리거 파일을 통해 어느 특정 시점에 서버를 재시작하여 반영 여부를 확인해볼 수 있다.
 트리거 파일은 이 파일에 변경이 일어날 때만 서버를 자동 재시작하는 특별한 파일이다.&lt;/p&gt;

&lt;p&gt;이 트리거 파일은 다음과 같이 application.properties에 추가할 수 있다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; spring.devtools.restart-trigger-file=...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;remote-applications&quot;&gt;Remote applications&lt;/h3&gt;

&lt;p&gt;Develop tool은 local에 대해서만 사용되는 것이 아니라, 원격에 대한 애플리케이션에 대해서도 사용할 수 있다.&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/17/spring_boot_ref_using-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/17/spring_boot_ref_using-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring Boot Reference Guide Review 01 : Part 1 / 2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring Boot 설명 / Spring Boot Refrence Guide Part 1/2 Review&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;spring-boot-getting-started&quot;&gt;Spring Boot Getting Started!&lt;/h2&gt;

&lt;p&gt;Spring Boot는 Spring Framework를 사용하는 프로젝트를 아주 간편하게 셋업할 수 있는, Spring Framework의 서브 프로젝트이다.
 Spring application을 개발하는데 있어 필요한 의존성과 xml 구성 등의 일반적인 공통된 설정 작업을 자동으로 진행해주고, 개발자는 즉시 application 로직 개발을 시작할 수 있도록 지원하는 도구이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존의 Spring framework를 이용한 개발환경 구축은 제법 많은 XML 설정파일들의 작성량을 요구했다. 그래서 잘 만들어놓은 설정 파일을 복사해서 사용하거나 검색을 통해 얻은 정보를 그대로 복사해서 사용하는 경우가 다반사였는데, 실상 특별한 경우의 설정을 제외하고는 거의 항상 동일한 옵션을 가져가게 되는 것이 사실이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot는 Spring을 기반으로 하는, 바로 출시할 수 있는 수준의 ‘실행가능한’, 단독실행형 서버 애플리케이션을 만들기 위해 사용한다. Spring Platform과 서드파티 라이브러리들에 대한 선택을 최소한의 논의로 결정할 수 있도록 해준다.
 그러한 부분에서 Spring Boot는 반복되는 개발환경 구축을 위한 코드 작성 등의 작업을 확연히 줄여주고, 빠르고 쉽게 프로젝트를 작성할 수 있도록 도와주는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;https://projects.spring.io/spring-boot/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;spring-boot의-목표&quot;&gt;Spring Boot의 목표&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;매우 빠르게 모든 Spring 개발에 대한 광범위한 접근을 제공한다.&lt;/li&gt;
  &lt;li&gt;차이가 있겠지만, 기본값으로부터 요구사항들에 따라 분기하며 빠르게 진행할 수 있다.&lt;/li&gt;
  &lt;li&gt;프로젝트 환경 구축에서 큰 영역을 차지하는 비기능적인 기능들을 기본적으로 제공한다. (내장형 서버, 시큐리티, 측정, 상태점검, 외부설정 등)&lt;/li&gt;
  &lt;li&gt;절대적으로 XML 기반 설정을 요구하거나 그 이상의 코드 작성을 하지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring Boot를 이용해 -jar를 이용하여 Java 애플리케이션을 만들거나, 이전 외부 tomcat를 사용하는 것처럼 웹앱을 만들 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수작업으로 초기 셋업없이 간단히 프로젝트를 생성할 수 있다. Spring에서 제공하는 STS를 사용해 기본적인 프로젝트 성격과 필요로 하는 라이브러리를 선택할 수 있다.&lt;/li&gt;
  &lt;li&gt;프로젝트마다 일상적으로 설정하게 되는 사항을 이미 내부적으로 가지고 있고, 개별적으로 차이가 나는 부분만 설정 파일에 집어넣으면 된다. DB 드라이버나, 트랜잭션과 같은 것은 알아서 처리된다.&lt;/li&gt;
  &lt;li&gt;Spring Security, JPA와 같은 다른 Spring Framework 구성 요소를 쉽게 가져다 쓸 수 있으며, 이 과정에서 프로토타이핑이나 기능을 시험해보는 시간이 단축된다.&lt;/li&gt;
  &lt;li&gt;Tomcat이나 Jetty를 기본 내장할 수 있으며, 서블릿 컨테이너가 내장될 수 있으므로 간단히 jar 파일 형태로 간단히 만들어 배포 가능하다.&lt;/li&gt;
  &lt;li&gt;maven pom.xml에서 의존 라이브러리의 버전을 일일이 지정하지 않아도, Spring Boot가 권장하는 버전을 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;system-requirement&quot;&gt;System Requirement&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Boot 2.0.3 버전을 기준으로, Java 8이나 9 / Spring Framework 5.0.7 이상을 요구한다.&lt;/li&gt;
  &lt;li&gt;Spring Boot는 어떠한 IDE나 Text Editor도 상관이 없으며, jar 파일을 classpath에 넣어두는 것만으로도 사용가능하다.
    &lt;blockquote&gt;
      &lt;p&gt;하지만 gradle이나 maven과 같은 dependency management tool을 사용하는 것이 좋다.
 Spring Boot는 maven 3.2 / gradle 4 이상과 호환된다.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;servlet-container&quot;&gt;Servlet Container&lt;/h4&gt;

&lt;p&gt;Spring Boot에 내장된 Servlet Container는 Spring Boot 2.0.3 기준으로 다음과 같이 지원한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Servlet Version&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Java Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tomcat 8.5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java 7+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Jetty 9.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java 8+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Undertow 1.4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java 7+&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;또한 Spring Boot 애플리케이션을 서블릿 3.1 이상을 지원하는 컨테이너에 배포 가능하다.&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;h2 id=&quot;hello-spring-boot&quot;&gt;Hello Spring Boot!&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;STS 3.8.4 기준으로 Spring Start Project를 생성하면 다음과 같은 class가 이미 만들어져 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ServletInitializer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.builder.SpringApplicationBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.web.support.SpringBootServletInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletInitializer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootServletInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

 &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloSpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//HelloSpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloSpringBootApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloSpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위의 클래스는 단독실행 및 스크립트를 통한 실행을 지원하기 위해 Spring Boot 개발환경에서 반드시 작성되어야하는 애플리케이션 클래스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;springbootapplication&quot;&gt;@SpringBootApplication&lt;/h3&gt;
&lt;p&gt;이 annotation은 Spring Boot의 가장 핵심적인 부분으로, 프로젝트 개발환경에서 많이 사용하는 annotation들을 쉽고 빠르게 사용할 수 있도록 다음과 같은 annotation들의 속성들을 포함하고 있는 annotation이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;@Configuration&lt;/li&gt;
  &lt;li&gt;@EnableConfiguration&lt;/li&gt;
  &lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@EnableAutoConfiguration&lt;/strong&gt;
   Spring Boot autoconfiguration은 추가된 jar dependency 기반으로 Spring application을 자동으로 설정하는 것을 시도한다. 예를 들어 HSQL DB가 class path에 있으면, DB 연결 빈을 정의하지 않아도 자동적으로 in-memory 데이터베이스에 접근할 것이다.
   자동 설정은 비 침입적으로, DataSource 빈을 추가한다면 디폴트로 자동 설정되는 것은 사라질 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 @SpringBootApplication annotation을 추적해보면, 이 클래스가 자바 Configuration을 사용하며, AutoConfiguration을 허용하며, 해당 Class가 있는 위치부터 컴포넌트를 스캔해서 빈으로 등록하는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excludeFilters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeExcludeFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;nd&quot;&gt;@Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoConfigurationExcludeFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringBootApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;따라서 이 annotation이 선언된 메인 Spring Boot 애플리케이션 클래스는 프로젝트 패키지 루트에 지정하는 것이 좋다. 그래야 별다른 설정없이도 컴포넌트 스캔이 동작되어 클래스를 검색해 빈으로 등록할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;이 annotation을 사용하게 되면 특별한 이유가 없는 한, 개발자는 자동설정을 별도로 할 필요가 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;spring-boot의-autoconfiguration&quot;&gt;Spring Boot의 autoconfiguration&lt;/h3&gt;

&lt;p&gt;Spring Boot의 자동 설정은 Java Configuration을 기반으로 하는데, 이와 관련된 설정은 이미 &lt;strong&gt;spring-boot-autoconfiguration&lt;/strong&gt; 이라고 하는 프로젝트 안에 추가되어 있다.&lt;/p&gt;

&lt;p&gt;여기서 우리가 사용하는 Web 과 관련된 &lt;strong&gt;WebMvcAutoConfiguration&lt;/strong&gt; 을 살펴보자.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConditionalOnWebApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConditionalOnClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebMvcConfigurerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebMvcConfigurationSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ordered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HIGHEST_PRECEDENCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DispatcherServletAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcAutoConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_SUFFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HiddenHttpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderedHiddenHttpMethodFilter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hiddenHttpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OrderedHiddenHttpMethodFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Servlet 및 DispatcherServlet, WebMvcConfigurerAdapter 클래스가 있고, WebMvcConfigurationSupport가 없을 때 우선권을 추가로 설정해서 빈을 등록하고, 이 설정 후에 DispatcherServletAutoConfiguration을 설정하라고 되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;springapplicationrun-method&quot;&gt;SpringApplication.run method&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//SpringApplication.run method&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;HelloSpringBootApplication의 main 메소드가 Spring Framework를 수행하기 위해 사용하는 SpringApplication 클래스는 Spring 기반의 web application을 구동하는 편리한 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;Spring MVC에서 servlet context 설정과 같은 복잡한 과정 대신에, main 메소드에서 SpringApplication의 run static 메소드에 class 및 main 메소드의 파라미터, args만 넘기는 것으로 Spring Framework를 실행한다. 과연 run method 에서는 어떤 일을 할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 메소드에서 하는 역할은 크게 두가지이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main Class 셋팅
SpringApplication run static 메소드는 내부적으로 SpringApplication 객체를 생성하여 생성자로 application class 를 넘기고, args는 run 메소드에 넘기는데 application class, 즉 개발자가 만든 main class로 다음 코드와 같이 셋팅하는 것을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rawtypes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;webEnvironment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deduceWebEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;setInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ApplicationContextInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;setListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSpringFactoriesInstances&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deduceMainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;파라미터로 넘어간 application class를 바로 mainApplicationClass로 설정해도 될 것 같았지만, 그렇지 않고 deduceMainApplicationClass 함수를 사용하여 설정한다. 다음 코드와 같이 StackTrace를 사용해여 main 메소드를 가지는 클래스를 찾아 셋팅한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deduceMainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StackTraceElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StackTraceElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTraceElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackTraceElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethodName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ㄴ&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackTraceElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Swallow and continue&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext (ConfigurableApplicationContext) 생성 및 refresh
  SpringApplication run 메소드에서는 ConfigurableApplicationContext를 생성하고, refreshContext 메소드를 실행하여 Spring 을 구동한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;StopWatch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;FailureAnalyzers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;configureHeadlessProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;SpringApplicationRunListeners&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRunListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;starting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ApplicationArguments&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultApplicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;ConfigurableEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prepareEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;analyzers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FailureAnalyzers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;prepareContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;printedBanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;refreshContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;afterRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStartupInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StartupInfoLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainApplicationClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getApplicationLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopWatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;handleRunFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;analyzers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;writing-your-code&quot;&gt;Writing your code&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nhnent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hellospringboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@RestController&lt;/strong&gt;
  Spring 4.0에 추가된 annotation으로 &lt;strong&gt;@Controller 및 @ResponseBody&lt;/strong&gt; 를 합쳐놓은 기능을 제공한다. @Conroller annotation과는 달리 요청을 처리하는 모든 메소드에 @ResponseBody를 추가할 필요가 없다. 또한 클래스에 속한 메소드들이 &lt;strong&gt;객체&lt;/strong&gt;를 리턴할 때 JSON 형태로 직렬화된다. (Jackson2 라이브러리가 있다면.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;@ResponseBody&lt;/strong&gt;
 메소드에 이 annotation이 선언되어 있다면 메소드에서 리턴되는 값은 View를 통해 출력되지 않고, &lt;strong&gt;HTTP Response Body&lt;/strong&gt; 에 직접 쓰여지게 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;properties&quot;&gt;Properties&lt;/h4&gt;

&lt;p&gt;Spring Boot는 별다른 설정없이 즉시 시작할 수 있는 프로퍼티 환경을 제공한다.
디렉토리 내 ‘resources’ 하위에 ‘application.properties’ 라는 파일을 생성해두면 기본적으로 해당 파일에 있는 프로퍼티를 Spring Boot가 참조한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용되는 property는 이 포스트의 하단에 첨부하였으니 참고&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;프로퍼티 생성위치는 바꿀 수 있다.&lt;/li&gt;
  &lt;li&gt;다른 프로퍼티를 여러 개 생성해서 쓸 수 있다.&lt;/li&gt;
  &lt;li&gt;Spring Boot의 프로퍼티는 우선순위로 오버라이드된다.
    &lt;ul&gt;
      &lt;li&gt;Command Line &amp;gt; System Properties &amp;gt; @Property Source &amp;gt; application.properties&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;usage&quot;&gt;Usage&lt;/h5&gt;

&lt;p&gt;application.properties 파일을 다음과 같이 작성한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello_spring_boot.print.hello=Hello Spring Boot!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음과 같이 /로 접속했을 때 출력할 수 있도록 @Value annotation을 사용해서 실험해본다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloRestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${hello_spring_boot.print.hello}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 localhost로 접속했을 때 다음과 같이 application.properties에 추가한 것이 출력되는 것을 확인할 수 있다.
&lt;img src=&quot;/static/assets/img/blog/web/2017-03-16-spring_boot_introduce/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;참고-applicationproperties-option&quot;&gt;참고: application.properties option&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# This sample file is provided as a guideline. Do NOT copy it in its
# entirety to your own application.               ^^^
# ===================================================================


# ----------------------------------------
# CORE PROPERTIES
# ----------------------------------------

# BANNER
banner.charset=UTF-8 # Banner file encoding.
(배너 인코딩 설정)
banner.location=classpath:banner.txt # Banner file location.
(배너 파일 위치)

# LOGGING
logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback)
(로깅 파일 위치)
logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
(로깅 exception 사용시 conversion word사용)
logging.file= # Log file name. For instance `myapp.log`
(로그 파일 이름)
logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`
(로그 찍을 레벨)
logging.path= # Location of the log file. For instance `/var/log`
(로깅 파일 위치)
logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.
(콘솔 로깅에 붙일 패턴)
logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.
(파일 로깅에 붙일 패턴)
logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.
(로그레벨에 붙일 패턴)
logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.
(로깅시스템 shutdown hook 설정)

# AOP
spring.aop.auto=true # Add @EnableAspectJAutoProxy.
(AOP 자동 사용 설정)
spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).
(subclass-based aop 사용 여부)

# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.index= # Application index.
(애플리케이션 인덱스)
spring.application.name= # Application name.
(애플리케이션 이름)

# ADMIN (SpringApplicationAdminJmxAutoConfiguration)
spring.application.admin.enabled=false # Enable admin features for the application.
(애플리케이션 관리자 활성화)
spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.
(애플리케이션 관리자 jmx이름 설정)
(JMX는 java management extension의 약자이다.
JDK 1.5부터 기본적으로 탑재되어 제공되고 있다.
Application 관리를 위한 다양한 기능을 제공할 목적으로 시작되었다.
Non-Java resources와 하드웨어에 대해 wrapping한 인터페이스를 제공하며,
API를 외부로 노출해 application 설정 및 통계데이터를 수집할수도 있다.)

# AUTO-CONFIGURATION
spring.autoconfigure.exclude= # Auto-configuration classes to exclude.
(spring의 autoconfiguration 제외 여부)

# SPRING CORE
spring.beaninfo.ignore=true # Skip search of BeanInfo classes.
(BeanInfo class 검색 무시)

# SPRING CACHE (CacheProperties)
spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.
(스프링 캐쉬 이름 설정)
spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.
(스프링 캐쉬 설정 파일 위치)
spring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.
(캐쉬 guava 스펙)
spring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.
(캐쉬 hazelcast 설정 위치)
spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.
(캐쉬 infinispan 설정 위치)
spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.
(jcash 설정 위치)
spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.
(캐쉬추가 이름)
spring.cache.type= # Cache type, auto-detected according to the environment by default.
(캐쉬 타입)

# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)
spring.config.location= # Config file locations.
(스프링 설정 파일 위치)
spring.config.name=application # Config file name.
(스프링 설정 파일 이름)

# HAZELCAST (HazelcastProperties)
spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.
(스프링 hazelcast 설정 파일 위치)
(hazelcast : 프로그램들을 그룹화(clustering)해서 그룹 간에 데이터를 가변적으로 분산시켜주기 위한 것)

# JMX
spring.jmx.default-domain= # JMX domain name.
(jmx 기본 도메인 이름)
spring.jmx.enabled=true # Expose management beans to the JMX domain.
(jmx 도메인 사용 여부)
spring.jmx.server=mbeanServer # MBeanServer bean name.
(jmx server 이름)

# Email (MailProperties)
spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.
(이메일 인코딩)
spring.mail.host= # SMTP server host. For instance `smtp.example.com`
(이메일 호스트 주소)
spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.
(세션 JNDI 이름)
spring.mail.password= # Login password of the SMTP server.
(SMTP서버 패스워드)
spring.mail.port= # SMTP server port.
(SMTP서버 포트)
spring.mail.properties.*= # Additional JavaMail session properties.
(추가적인 javamail 세션 속성)
spring.mail.protocol=smtp # Protocol used by the SMTP server.
(SMTP서버 프로토콜)
spring.mail.test-connection=false # Test that the mail server is available on startup.
(시작시 mail server 테스트 여부)
spring.mail.username= # Login user of the SMTP server.
(mail server 로그인 유저 이름)

# APPLICATION SETTINGS (SpringApplication)
spring.main.banner-mode=console # Mode used to display the banner when the application runs.
(배너 모드 설정 - 어디에 display할건지)
spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.
(배너 위치)
spring.main.web-environment= # Run the application in a web environment (auto-detected by default).
(application을 web environment에서 시작 할 것인지 여부)

# FILE ENCODING (FileEncodingApplicationListener)
spring.mandatory-file-encoding= # Expected character encoding the application must use.
(file 인코딩 종류)

# INTERNATIONALIZATION (MessageSourceAutoConfiguration)
spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.
(스프링 메시지)
spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.
(스프링 캐쉬 관련)
spring.messages.encoding=UTF-8 # Message bundles encoding.
(메시지 인코딩)
spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.
(fallback 여부)

# OUTPUT
spring.output.ansi.enabled=detect # Configure the ANSI output (can be &quot;detect&quot;, &quot;always&quot;, &quot;never&quot;).
(결과물 속성)

# PID FILE (ApplicationPidFileWriter)
spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.
(pid 파일 에러 여부)
spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).
(pid 파일 위치)

# PROFILES
spring.profiles.active= # Comma-separated list of active profiles.
(스프링 프로파일 active)
spring.profiles.include= # Unconditionally activate the specified comma separated profiles.
(스프링 프로파일 추가)

# SENDGRID (SendGridAutoConfiguration)
spring.sendgrid.username= # SendGrid account username
(스프링 sendgrid 이름)
(SendGrid is a cloud-based SMTP provider that allows you to send email without having to maintain email servers.)
spring.sendgrid.password= # SendGrid account password
(snedgrid 패스워드)
spring.sendgrid.proxy.host= # SendGrid proxy host
(sendgrid 호스트 서버)
spring.sendgrid.proxy.port= # SendGrid proxy port
(sendgrid 호스트 포트)


# ----------------------------------------
# WEB PROPERTIES
# ----------------------------------------

# MULTIPART (MultipartProperties)
multipart.enabled=true # Enable support of multi-part uploads.
(multipart upload 사용 여부) - 파일 업로드 데이터 형식
multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.
(멀티파트 파일 사이즈 trheshold)
multipart.location= # Intermediate location of uploaded files.
(업로드된 파일의 파일 주소)
multipart.max-file-size=1Mb # Max file size. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.
(최대 파일 사이즈)
multipart.max-request-size=10Mb # Max request size. Values can use the suffixed &quot;MB&quot; or &quot;KB&quot; to indicate a Megabyte or Kilobyte size.
(최대 요청 사이즈)

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.address= # Network address to which the server should bind to.
(bind 될 서버 주소)
server.compression.enabled=false # If response compression is enabled.
(서버 compression 사용 여부)
server.compression.excluded-user-agents= # List of user-agents to exclude from compression.
(추가적인 useragents)
server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`
(mime 타입설정)
server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048
(최소 response 사이즈)
server.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`
(서버 파라미터)
server.context-path= # Context path of the application.
(서버 애플리케이션 context path)
server.display-name=application # Display name of the application.
(서버 애플리케이션 이름 보이기)
server.error.include-stacktrace=never # When to include a &quot;stacktrace&quot; attribute.
(서버에러시에 stacktrace할것인지 여부)
server.error.path=/error # Path of the error controller.
(서버 에러 위치)
server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.
(에러 whitelabel 사용 여부)
server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.
(jsp servlet 클래스이름)
server.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet
(jsp servlet 초기화 파라미터 )
server.jsp-servlet.registered=true # Whether or not the JSP servlet is registered
(jsp servlet 등록)
server.port=8080 # Server HTTP port.
(서버 포트)
server.server-header= # The value sent in the server response header (uses servlet container default if empty)
(서버 헤더)
server.servlet-path=/ # Path of the main dispatcher servlet.
(서버 서플릿 path)
server.session.cookie.comment= # Comment for the session cookie.
(세션 쿠키 주석)
server.session.cookie.domain= # Domain for the session cookie.
(세션 쿠키 도메인 주소)
server.session.cookie.http-only= # &quot;HttpOnly&quot; flag for the session cookie.
(http only cookie 설정)
server.session.cookie.max-age= # Maximum age of the session cookie in seconds.
(세션 max-age seconds 속성)
server.session.cookie.name= # Session cookie name.
(세션 쿠키 이름)
server.session.cookie.path= # Path of the session cookie.
(세션 쿠키 path)
server.session.cookie.secure= # &quot;Secure&quot; flag for the session cookie.
(세션 쿠키 secure)
server.session.persistent=false # Persist session data between restarts.
(세션 쿠키 다시 시작 여부)
server.session.store-dir= # Directory used to store session data.
(세션 저장 위치)
server.session.timeout= # Session timeout in seconds.
(세션 timeout 시간 설정)
server.session.tracking-modes= # Session tracking modes (one or more of the following: &quot;cookie&quot;, &quot;url&quot;, &quot;ssl&quot;).
(세션 tracking mode)
server.ssl.ciphers= # Supported SSL ciphers.
(ssl 관련 속성)
server.ssl.client-auth= # Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a trust store.
server.ssl.enabled= #
server.ssl.key-alias= #
server.ssl.key-password= #
server.ssl.key-store= #
server.ssl.key-store-password= #
server.ssl.key-store-provider= #
server.ssl.key-store-type= #
server.ssl.protocol= #
server.ssl.trust-store= #
server.ssl.trust-store-password= #
server.ssl.trust-store-provider= #
server.ssl.trust-store-type= #
server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.
(톰켓 accesslog 파일 위치)
server.tomcat.accesslog.enabled=false # Enable access log.
(톰켓 accesslog 여부)
server.tomcat.accesslog.pattern=common # Format pattern for access logs.
(톰캣 로그파일에 붙일 패턴)
server.tomcat.accesslog.prefix=access_log # Log file name prefix.
(톰캣 엑세스로그파일 앞에 붙일 이름)
server.tomcat.accesslog.suffix=.log # Log file name suffix.
(톰켓 엑세스로그파일 뒤에 붙일 이름)
server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.
(백그라운드 delay second 설정)
server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.
(톰켓 base directory 설정)
server.tomcat.internal-proxies=10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\
        169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\
        127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3} # regular expression matching trusted IP addresses.
(톰켓 internap ip adress 속성 설정)
server.tomcat.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.
(max http header 사이즈 설정)
server.tomcat.max-threads=0 # Maximum amount of worker threads.
(최대 스레드 설정)
server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.
(톰켓 포트 헤더)
server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named &quot;X-Forwarded-Proto&quot;.
(톰켓 프로토콜 헤더)
server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.
(헤더 http value 설정)
server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`
(ip header 설정)
server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.
(uri 인코딩 설정)
server.undertow.accesslog.dir= # Undertow access log directory.
(undertow의 accesslog 파일 위치)
(Undertow는 Java로 작성된 유연하면서 고성능의 웹서버이며 NIO기반의 blogcking / Non-blocking API를 제공한다.
Undertow는 컴퍼지션 아키텍처를 제공하여 작은 단위의 용도를 갖는 핸들러들를 연결하여 웹서버를 구축 할 수 있다.
컴포지션 아키텍처는 Full Java EE Servlet 3.1 컨테이너에서 부터 Low Level의 Non-blocking 핸들러
또는 그 중간 수준의 기능을 선택을 할 수 있는 유연성을 제공해 준다.)

server.undertow.accesslog.enabled=false # Enable access log.
server.undertow.accesslog.pattern=common # Format pattern for access logs.
server.undertow.buffer-size= # Size of each buffer in bytes.
server.undertow.buffers-per-region= # Number of buffer per region.
server.undertow.direct-buffers= # Allocate buffers outside the Java heap.
server.undertow.io-threads= # Number of I/O threads to create for the worker.
server.undertow.worker-threads= # Number of worker threads.
server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.
(foward header 사용)

# FREEMARKER (FreeMarkerAutoConfiguration)
(FreeMarker는 Velocity와 마찬가지로 templating 언어이다.
우리가 Jsp를 코딩하다보면 날코딩으로 생산성이 떨어진다.
그래서 우리는 좀더 편리하게 사용하기위해서 템플릿 엔진을 사용한다.
그리고 가장 큰 장점은 매크로 기능으로 기능을 만들어서 사용할 수 있다는 점이다.)
spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.freemarker.cache=false # Enable template caching.
spring.freemarker.charset=UTF-8 # Template encoding.
spring.freemarker.check-template-location=true # Check that the templates location exists.
spring.freemarker.content-type=text/html # Content-Type value.
spring.freemarker.enabled=true # Enable MVC view resolution for this technology.
spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.
spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name &quot;springMacroRequestContext&quot;.
spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.
spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.
spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.
spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.
spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.
spring.freemarker.view-names= # White list of view names that can be resolved

# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)
(그루비 템플릿 - 타입아 유연하고 간결한 동적 객체지향 언어 관련 옵션)
spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.groovy.template.cache= # Enable template caching.
spring.groovy.template.charset=UTF-8 # Template encoding.
spring.groovy.template.check-template-location=true # Check that the templates location exists.
spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer
spring.groovy.template.content-type=test/html # Content-Type value.
spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.
spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.
spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name &quot;springMacroRequestContext&quot;.
spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.
spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.
spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.
spring.groovy.template.view-names= # White list of view names that can be resolved.

# SPRING HATEOAS (HateoasProperties)
spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.
(HATEOASHATEOAS는 RESTful API를 사용하는 클라이언트가 전적으로 서버에 의해 동적으로 상호작용을 할 수 있다. 쉽게 말하면 클라이언트가 서버에 요청시 서버는 요청에 의존되는 URI를 Response에 포함시켜 반환한다. 옵션)
(http://blog.woniper.net/219)

# HTTP message conversion
spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to &quot;gson&quot; to force the use of Gson when both it and Jackson are on the classpath.
(http message 설정)

# HTTP encoding (HttpEncodingProperties)
spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.
(http encoding 설정)
spring.http.encoding.enabled=true # Enable http encoding support.
(http 인코딩 여부)
spring.http.encoding.force=true # Force the encoding to the configured charset on HTTP requests and responses.
(http 인코딩 강제 여부)

# JACKSON (JacksonProperties)
(스프링 json 자동 생성 관련 속성)
spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`
spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.
spring.jackson.generator.*= # Jackson on/off features for generators.
spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, &quot;date-format&quot; will be used as a fallback if it is configured with a format string.
spring.jackson.locale= # Locale used for formatting.
spring.jackson.mapper.*= # Jackson general purpose on/off features.
spring.jackson.parser.*= # Jackson on/off features for parsers.
spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.
spring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.
spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`

# JERSEY (JerseyProperties)
(스프링을 이용하여 RESTFul api를 만드는데 도와줌)
spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of &quot;@ApplicationPath&quot; if specified.
spring.jersey.filter.order=0 # Jersey filter chain order.
spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.
spring.jersey.type=servlet # Jersey integration type. Can be either &quot;servlet&quot; or &quot;filter&quot;.

# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)
(스프링 모바일 디바이스 뷰 속성)
spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.
spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.
spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.
spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.
spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.
spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.
spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.
spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.

# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)
spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.
(스프링 모바일 속성 사이트 여부)

# MUSTACHE TEMPLATES (MustacheAutoConfiguration)
(Mustache template 속성 선언)
(Mustache는 제어 구조를 갖춘 것 중 문법이 간단하고 가장 많은 언어로 포팅된 템플릿 엔진입니다.
Mustache를 기반으로 이를 확장한 템플릿 엔진도 여럿 있는데 대표적으로는 헬퍼 개념을 추가한
Handlebars와 트위터에서 만든 Hogan.js를 들 수 있다.)
spring.mustache.cache=false # Enable template caching.
spring.mustache.charset=UTF-8 # Template encoding.
spring.mustache.check-template-location=true # Check that the templates location exists.
spring.mustache.content-type=text/html # Content-Type value.
spring.mustache.enabled=true # Enable MVC view resolution for this technology.
spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.
spring.mustache.suffix=.html # Suffix to apply to template names.
spring.mustache.view-names= # White list of view names that can be resolved.

# SPRING MVC (WebMvcProperties)
(스프링 mvc 관련 옵션들)
spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.
spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.
spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.
spring.mvc.dispatch-options-request=false # Dispatch OPTIONS requests to the FrameworkServlet doService method.
spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.
spring.mvc.ignore-default-model-on-redirect=true # If the content of the &quot;default&quot; model should be ignored during redirect scenarios.
spring.mvc.locale= # Locale to use.
spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.
spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.
spring.mvc.static-path-pattern=/** # Path pattern used for static resources.
spring.mvc.throw-exception-if-no-handler-found=false # If a &quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process a request.
spring.mvc.view.prefix= # Spring MVC view prefix.
spring.mvc.view.suffix= # Spring MVC view suffix.

# SPRING RESOURCES HANDLING (ResourceProperties)
(스프링 리소스 핸들링 관련 속성)
spring.resources.add-mappings=true # Enable default resource handling.
(스프링 리소스 핸들링 enable)
spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.
(스프링 리소스 캐쉬 관련 속성)
spring.resources.chain.cache=true # Enable caching in the Resource chain.
(리소스 체인 캐쉬 활성화)
spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.
(리소스 체인 활성화)
spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.
(html5 캐쉬 속성 활성화)
spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.
(strategy content 활성화)
spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.
(strategy content path)
spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.
(version strategy 활성화)
spring.resources.chain.strategy.fixed.paths= # Comma-separated list of patterns to apply to the Version Strategy.
(version strategy path)
spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.
(version strategy version)
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.
(리소스 static location)

# SPRING SOCIAL (SocialWebAutoConfiguration)
spring.social.auto-connection-views=false # Enable the connection status view for supported providers.
(spring social 활성화)

# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)
spring.social.facebook.app-id= # your application's Facebook App ID
(스프링 facebook 연동 id)
spring.social.facebook.app-secret= # your application's Facebook App Secret
(스프링 facebook app secret 속성)

# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)
spring.social.linkedin.app-id= # your application's LinkedIn App ID
(스프링 링크드인 app-id)
spring.social.linkedin.app-secret= # your application's LinkedIn App Secret
(스프링 링크드인 app secret 속성)

# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)
(스프링 트위터 속성)
spring.social.twitter.app-id= # your application's Twitter App ID
spring.social.twitter.app-secret= # your application's Twitter App Secret

# THYMELEAF (ThymeleafAutoConfiguration)
(스프링 THYMELEAF 속성)
(Thymeleaf는 Tiles, FreeMarker, SiteMesh처럼 자바에서 사용할 수 있는 뷰 템플릿 엔진이다. 스프링소스에서 만든건지는 모르겠지만 스프링소스에서 열심히 밀고 있기는 하고 Spring MVC와 통합이 잘 되어 있다.)
spring.thymeleaf.cache=true # Enable template caching.
spring.thymeleaf.check-template-location=true # Check that the templates location exists.
spring.thymeleaf.content-type=text/html # Content-Type value.
spring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.
spring.thymeleaf.encoding=UTF-8 # Template encoding.
spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.
spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.
spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.
spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.
spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.
spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.

# VELOCITY TEMPLATES (VelocityAutoConfiguration)
(스프링 VELOCITY TEMPLATE 속성)
(Velocity Template Engine은 애플리케이션이나 서블릿 내에서 데이터를 표현하게 만들어 준다.
주로 서블릿 기반의 웹사이트들과 같은 다이나믹한 개발에 사용되는데 Velocity의 템플릿과 자바 코드간의
깔끔한 분리는 모델 2 스타일 Model-View-Controller(MVC) 웹 개발에 대하여 이상적으로 만들어 줄 수 있다.
일반적인 템플릿 엔진들처럼 Velocity는 코드생성, XML 생성과 변환, 그리고 텍스트 스트림 프로세싱과 같은 많은
다른 목적들에도 적합하다.)
spring.velocity.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.velocity.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.velocity.cache= # Enable template caching.
spring.velocity.charset=UTF-8 # Template encoding.
spring.velocity.check-template-location=true # Check that the templates location exists.
spring.velocity.content-type=text/html # Content-Type value.
spring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.
spring.velocity.enabled=true # Enable MVC view resolution for this technology.
spring.velocity.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.
spring.velocity.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.velocity.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name &quot;springMacroRequestContext&quot;.
spring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.
spring.velocity.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.
spring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.
spring.velocity.properties.*= # Additional velocity properties.
spring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.velocity.resource-loader-path=classpath:/templates/ # Template path.
spring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.
spring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`
spring.velocity.view-names= # White list of view names that can be resolved.



# ----------------------------------------
# SECURITY PROPERTIES
# ----------------------------------------
# SECURITY (SecurityProperties)
(스프링 보안 속성)
security.basic.authorize-mode=role # Security authorize mode to apply.
security.basic.enabled=true # Enable basic authentication.
security.basic.path=/** # Comma-separated list of paths to secure.
security.basic.realm=Spring # HTTP basic realm name.
security.enable-csrf=false # Enable Cross Site Request Forgery support.
security.filter-order=0 # Security filter chain order.
security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.
security.headers.cache=true # Enable cache control HTTP headers.
security.headers.content-type=true # Enable &quot;X-Content-Type-Options&quot; header.
security.headers.frame=true # Enable &quot;X-Frame-Options&quot; header.
security.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).
security.headers.xss=true # Enable cross site scripting (XSS) protection.
security.ignored= # Comma-separated list of paths to exclude from the default secured paths.
security.require-ssl=false # Enable secure channel for all requests.
security.sessions=stateless # Session creation policy (always, never, if_required, stateless).
security.user.name=user # Default user name.
security.user.password= # Password for the default user name. A random password is logged on startup by default.
security.user.role=USER # Granted roles for the default user name.

# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties
(스프링 OAUTH2 클라이언트 속성)
(외부 사이트와 인증기반의 데이터를 연동할 때 ID, Password를 넘기는 방법은 매우 위험하다.
ID, Password는 그 사용자의 모든 권한을 얻는 것이기 때문에 ID 도용 위험이 크다.
그래서 ID, Password를 사용자 임시 인증을 위한 Token을 제공하는 방식을 사용한다.
그러나 이 방법이 각 서비스마다 제각각이어서 개발자들은 인증 연동을 각 서비스별로 따로 해야 한다.
그러다 보니 표준적인 방법이 필요했고, 그 표준 방법이 OAuth이다.)
security.oauth2.client.client-id= # OAuth2 client id.
security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default

# SECURITY OAUTH2 RESOURCES (ResourceServerProperties
(스프링 OAUTH2 리소스 속성)
security.oauth2.resource.id= # Identifier of the resource.
security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.
security.oauth2.resource.service-id=resource #
security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.
security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.
security.oauth2.resource.user-info-uri= # URI of the user endpoint.

# SECURITY OAUTH2 SSO (OAuth2SsoProperties
(스프링 OAUTH2 SSO속성)
security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter
security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server


# ----------------------------------------
# DATA PROPERTIES
# ----------------------------------------

# FLYWAY (FlywayProperties)
(data flyaway관련 속성)
(데이터베이스 형상관리 툴.
로컬에서 변경한 데이터베이스의 스키마나 데이터를 운영 데이터베이스에 반영하는 것을 누락하는것을 막기 위해 사용한다.
또한 개발 DB와 운영 DB의 스키마를 비교하거나, 운영 DB에 수작업을 가하는 노가다와 위험성을 줄이기 위해 사용한다.
생성한 형상을 새로운 DB에 적용하면 그게 마이그레이션이다.)
flyway.baseline-description= #
flyway.baseline-version=1 # version to start migration
flyway.baseline-on-migrate= #
flyway.check-location=false # Check that migration scripts location exists.
flyway.clean-on-validation-error= #
flyway.enabled=true # Enable flyway.
flyway.encoding= #
flyway.ignore-failed-future-migration= #
flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.
flyway.locations=classpath:db/migration # locations of migrations scripts
flyway.out-of-order= #
flyway.password= # JDBC password if you want Flyway to create its own DataSource
flyway.placeholder-prefix= #
flyway.placeholder-replacement= #
flyway.placeholder-suffix= #
flyway.placeholders.*= #
flyway.schemas= # schemas to update
flyway.sql-migration-prefix=V #
flyway.sql-migration-separator= #
flyway.sql-migration-suffix=.sql #
flyway.table= #
flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
flyway.user= # Login user of the database to migrate.
flyway.validate-on-migrate= #

# LIQUIBASE (LiquibaseProperties)
(LIQUIBASE 속성)
(데이터베이스 변경 관리를 체계적으로 자동화해 주는 open source(LGPL)로 LiquiBase)
liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.
liquibase.check-change-log-location=true # Check the change log location exists.
liquibase.contexts= # Comma-separated list of runtime contexts to use.
liquibase.default-schema= # Default database schema.
liquibase.drop-first=false # Drop the database schema first.
liquibase.enabled=true # Enable liquibase support.
liquibase.labels= # Comma-separated list of runtime labels to use.
liquibase.parameters.*= # Change log parameters.
liquibase.password= # Login password of the database to migrate.
liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
liquibase.user= # Login user of the database to migrate.

# DAO (PersistenceExceptionTranslationAutoConfiguration)
(스프링 DAO관련 속성)
spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.

# CASSANDRA (CassandraProperties)
(CASSANDRA 속성)
(카산드라는 구글의 BigTable 컬럼 기반의 데이타 모델과 FaceBook에서 만든 Dynamo의 분산 모델을 기반으로 하여 제작되어 Facebook에 의해 2008년에 아파치 오픈소스로 공개된 분산 데이타 베이스 입니다.)
spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.
spring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.
spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.
spring.data.cassandra.consistency-level= # Queries consistency level.
spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.
spring.data.cassandra.fetch-size= # Queries default fetch size.
spring.data.cassandra.keyspace-name= # Keyspace name to use.
spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.
spring.data.cassandra.port= # Port of the Cassandra server.
spring.data.cassandra.password= # Login password of the server.
spring.data.cassandra.read-timeout-millis= # Socket option: read time out.
spring.data.cassandra.reconnection-policy= # Reconnection policy class.
spring.data.cassandra.retry-policy= # Class name of the retry policy.
spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.
spring.data.cassandra.ssl=false # Enable SSL support.
spring.data.cassandra.username= # Login user of the server.

# ELASTICSEARCH (ElasticsearchProperties)
(ELASTICSEARCH 관련 속성)
(elasticsearch는 Shay Banon이 Lucene을 바탕으로 개발한 분산 검색엔진입니다.
설치와 서버 확장이 매우 편리하기 때문에 개발하고 있는 시스템에 검색 기능이 필요하다면 elasticsearch를 적용하는 것을 권장하고 싶습니다.
분산 시스템이기 때문에 검색 대상 용량이 증가했을 때 대응하기가 무척 수월하다는 것이 장점입니다.)
spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.
spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.
spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.
spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.

# MONGODB (MongoProperties)
(스프링 데이터 mongodb속성)
spring.data.mongodb.authentication-database= # Authentication database name.
spring.data.mongodb.database=test # Database name.
spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.
spring.data.mongodb.grid-fs-database= # GridFS database name.
spring.data.mongodb.host=localhost # Mongo server host.
spring.data.mongodb.password= # Login password of the mongo server.
spring.data.mongodb.port=27017 # Mongo server port.
spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.
spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.
spring.data.mongodb.username= # Login user of the mongo server.

# DATA REST (RepositoryRestProperties)
(DATA REST 관련 속성)
(Spring에서 REST 서비스를 만들 때 가장 빠르고 효율적으로 만들 수 있는 기술이다.)
spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.
spring.data.rest.default-page-size= # Default size of pages.
spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.
spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.
spring.data.rest.max-page-size= # Maximum size of pages.
spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.
spring.data.rest.return-body-on-create= # Return a response body after creating an entity.
spring.data.rest.return-body-on-update= # Return a response body after updating an entity.
spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.

# SOLR (SolrProperties)
(SOLR관련 속성)
(Solr는 단독 애플리케이션 서버 형태로 작동하며, REST 형식의 API를 제공한다.
문서들은 HTTP를 이용해서 XML, JSON, CSV 혹은 바이너리 형태등으로 색인요청을 할 수 있다.
검색 역시 HTTP GET 으로 요청하며, 검색결과는 XML, JSON, CSV, 바이너리 형태로 가져올 수 있다.)
spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if &quot;zk-host&quot; is set.
spring.data.solr.repositories.enabled=true # Enable Solr repositories.
spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.

# DATASOURCE (DataSourceAutoConfiguration &amp;amp; DataSourceProperties)
(DATASOURCE관련 속성)
(jdbc를 사용하여 db에 접속하기 위해서는 드라이버를 로드하고 db에 접속하여 connection 객체를 받아와야 한다.
이런식이면 db에 쿼리를 보낼때 마다 드라이버를 로드하고 커넥션을 생성하고 닫게되는데 커넥션을 생성하고 다는데
시간이 소모되기에 동시접속자가 많은 사이트의 경우 전체의 성능을 낮추는 원인이 된다.
(드라이버도 한번만 로드하면 되는데 불필요하게 여러번 로드하게 된다)
이런 문제를 해결하기 위해 &quot;커넥션 풀&quot;을 사용하는데 javax.sql.DataSource 를 사용하면 된다.)
spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.
spring.datasource.data= # Data (DML) script resource reference.
spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.initialize=true # Populate the database using 'data.sql'.
spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).
spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp;amp; password are ignored when set.
spring.datasource.max-active= # For instance 100
spring.datasource.max-idle= # For instance 8
spring.datasource.max-wait=
spring.datasource.min-evictable-idle-time-millis=
spring.datasource.min-idle=8
spring.datasource.name=testdb # Name of the datasource.
spring.datasource.password= # Login password of the database.
spring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).
spring.datasource.schema= # Schema (DDL) script resource reference.
spring.datasource.separator=; # Statement separator in SQL initialization scripts.
spring.datasource.sql-script-encoding= # SQL scripts encoding.
spring.datasource.test-on-borrow= # For instance `false`
spring.datasource.test-on-return= # For instance `false`
spring.datasource.test-while-idle= #
spring.datasource.time-between-eviction-runs-millis= 1
spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
spring.datasource.url= # JDBC url of the database.
spring.datasource.username=
spring.datasource.validation-query=

# H2 Web Console (H2ConsoleProperties)
(H2 Web Console 관련 속성)
(H2 DBMS는 HSQLDB의 후속 버젼으로 많은 기능과 CONSOL을 제공하여 기존의 HSQLDB 보다 쉬게 이용 할수 있다.)
spring.h2.console.enabled=false # Enable the console.
spring.h2.console.path=/h2-console # Path at which the console will be available.

# JOOQ (JooqAutoConfiguration)
(JOOQ관련 속성)
spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
(JPA는 java persistence api로 데이터베이스를 객최화 하여 연동, 관리가 가능하다.)
spring.data.jpa.repositories.enabled=true # Enable JPA repositories.
(jpa 레포지토리 활성화)
spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the &quot;databasePlatform&quot; property.
(사용할 jpa database 종류 선언)
spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum.
(jpa 플랫폼 이름)
spring.jpa.generate-ddl=false # Initialize the schema on startup.
(시작시 스키마 초기화 여부)
spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the &quot;hibernate.hbm2ddl.auto&quot; property. Default to &quot;create-drop&quot; when using an embedded database, &quot;none&quot; otherwise.
(ddl mode 여부)
spring.jpa.hibernate.naming-strategy= # Naming strategy fully qualified name.
(Qualified name 이름)
spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
(jpa 이름)
spring.jpa.properties.*= # Additional native properties to set on the JPA provider.
(jpa 속성)
spring.jpa.show-sql=false # Enable logging of SQL statements.
(로깅에 sql statement를 찍을 것인지 여부)

# JTA (JtaAutoConfiguration)
(JTA관련 속성)
(JTA(Java Transaction API)은 플랫폼마다 상이한 트랜잭션 매니저들과 어플리케이션들이 상호작용할 수 있는 인터페이스를 정의하고 있다.)
spring.jta.log-dir= # Transaction logs directory.

# ATOMIKOS
(ATOMIKOS관련 속성)
spring.jta.checkpoint-interval=500 # Interval between checkpoints.
spring.jta.console-file-count=1 # Number of debug logs files that can be created.
spring.jta.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.
spring.jta.console-file-name=tm.out # Debug logs file name.
spring.jta.console-log-level= # Console log level.
spring.jta.default-jta-timeout=10000 # Default timeout for JTA transactions.
spring.jta.enable-logging=true # Enable disk logging.
spring.jta.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.
spring.jta.log-base-dir= # Directory in which the log files should be stored.
spring.jta.log-base-name=tmlog # Transactions log file base name.
spring.jta.max-actives=50 # Maximum number of active transactions.
spring.jta.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.
spring.jta.output-dir= # Directory in which to store the debug log files.
spring.jta.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.
spring.jta.service= # Transaction manager implementation that should be started.
spring.jta.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.
spring.jta.transaction-manager-unique-name= # Transaction manager's unique name.
spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.
spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.
spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.
spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.
spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.
spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.
spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.
spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.
spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.
spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.
spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.
spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.
spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.
spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.
spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.
spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.
spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.
spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.
spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.

# BITRONIX
(BITRONIX관련 속성)
spring.jta.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.
spring.jta.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.
spring.jta.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.
spring.jta.current-node-only-recovery=true # Recover only the current node.
spring.jta.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.
spring.jta.default-transaction-timeout=60 # Default transaction timeout in seconds.
spring.jta.disable-jmx=false # Enable JMX support.
spring.jta.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.
spring.jta.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.
spring.jta.force-batching-enabled=true #  Set if disk forces are batched.
spring.jta.forced-write-enabled=true # Set if logs are forced to disk.
spring.jta.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.
spring.jta.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.
spring.jta.jndi-user-transaction-name= # JNDI name of the UserTransaction.
spring.jta.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.
spring.jta.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.
spring.jta.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.
spring.jta.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.
spring.jta.resource-configuration-filename= # ResourceLoader configuration file name.
spring.jta.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.
spring.jta.skip-corrupted-logs=false # Skip corrupted transactions log entries.
spring.jta.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.
spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.
spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.
spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.
spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.
spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.
spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.
spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.
spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.
spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.
spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.
spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.
spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.
spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.
spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.
spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.
spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.
spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.
spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.
spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.
spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.
spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.
spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.
spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.
spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.
spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.
spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.
spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.
spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.
spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.
spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.
spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.
spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.
spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.
spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.
spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.

# EMBEDDED MONGODB (EmbeddedMongoProperties)
(EMBEDDED mongodb 속성)
spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.
spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.

# REDIS (RedisProperties)
(REDIS 관련 속성)
(Redis는 &quot;REmote DIctionary System&quot;의 약자로 메모리 기반의 Key/Value Store 이다.
Cassandra나 HBase와 같이 NoSQL DBMS로 분류되기도 하고, memcached와 같은 In memory 솔루션으로 분리되기도 한다.)
spring.redis.database=0 # Database index used by the connection factory.
spring.redis.host=localhost # Redis server host.
spring.redis.password= # Login password of the redis server.
spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-idle=8 # Max number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.port=6379 # Redis server port.
spring.redis.sentinel.master= # Name of Redis server.
spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
spring.redis.timeout=0 # Connection timeout in milliseconds.


# ----------------------------------------
# INTEGRATION PROPERTIES
# ----------------------------------------

# ACTIVEMQ (ActiveMQProperties)
(ACTIVEMQ관련 속성)
(Apache ActiveMQ는 가장 유명하고 강력한 오픈 소스 메시지 브로커입니다. Apache ActiveMQ는 빠르고, 다양한 언어 환경의 클라이언트들과 프로토콜을 지원하며, JMS 1.1과 J2EE 1.4를 지원하는 동시에 매우 고급 기능들을 지원하며 Apache 2.0 라이센스에 의해 릴리즈 됩니다.)
spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`
spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.
spring.activemq.password= # Login password of the broker.
spring.activemq.pooled=false # Specify if a PooledConnectionFactory should be created instead of a regular ConnectionFactory.
spring.activemq.user= # Login user of the broker.

# ARTEMIS (ArtemisProperties)
(ARTEMIS관련 속성)
spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.
spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.
spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.
spring.artemis.embedded.persistent=false # Enable persistent store.
spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.
spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.
spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.
spring.artemis.host=localhost # Artemis broker host.
spring.artemis.mode= # Artemis deployment mode, auto-detected by default. Can be explicitly set to &quot;native&quot; or &quot;embedded&quot;.
spring.artemis.port=61616 # Artemis broker port.

# SPRING BATCH (BatchProperties)
(SPRING batch 관련 속성)
spring.batch.initializer.enabled=true # Create the required batch tables on startup if necessary.
(스프링 batch 초기화 활성화)
spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.
(스프링 batch job 활성화)
spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.
(시작시에 수행할 스프링 batch job 이름들 입력)
spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
(spring batch schema)
spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.
(spring batch table prefix)

# HORNETQ (HornetQProperties)
(HORNETQ 관련 속성)
spring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.
spring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.
spring.hornetq.embedded.enabled=true # Enable embedded mode if the HornetQ server APIs are available.
spring.hornetq.embedded.persistent=false # Enable persistent store.
spring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.
spring.hornetq.embedded.server-id= # Server id. By default, an auto-incremented counter is used.
spring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.
spring.hornetq.host=localhost # HornetQ broker host.
spring.hornetq.mode= # HornetQ deployment mode, auto-detected by default. Can be explicitly set to &quot;native&quot; or &quot;embedded&quot;.
spring.hornetq.port=5445 # HornetQ broker port.

# JMS (JmsProperties)
(JMS 관련 속성)
(스프링은 JDBC API를 통합했듯이 JMS API도 사용하기 쉽게 JMS 통합 프레임워크를 제공한다. JMS는 기능적으로 대략 두 부분으로 나눌 수 있는데 메시지의 생산(production)과 소비(consumption)이다. JmsTemplate 클래스는 메시지 생산과 동기적인 메시지 수신에 사용한다. Java EE의 메시지주도 빈(bean) 방식과 유사한 비동기적인 수신에 대해서 스프링은 메시지주도 POJO(MDP, Message-Driven POJOs)를 생성하는데 사용하는 다수의 메시지 리스너 컨테이너를 제공한다.)
spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.
spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.
spring.jms.listener.auto-startup=true # Start the container automatically on startup.
spring.jms.listener.concurrency= # Minimum number of concurrent consumers.
spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.
spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.

# RABBIT (RabbitProperties)
(RABBIT관련 속성)
spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect to.
spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.
spring.rabbitmq.host=localhost # RabbitMQ host.
spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.
spring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.
spring.rabbitmq.listener.concurrency= # Minimum number of consumers.
spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.
spring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).
spring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.
spring.rabbitmq.password= # Login to authenticate against the broker.
spring.rabbitmq.port=5672 # RabbitMQ port.
spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.
spring.rabbitmq.ssl.enabled=false # Enable SSL support.
spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.
spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.
spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.
spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.
spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.
spring.rabbitmq.username= # Login user to authenticate to the broker.
spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.


# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------

# ENDPOINTS (AbstractEndpoint subclasses)
(ENDPOINTS 관련 속성)
endpoints.enabled=true # Enable endpoints.
endpoints.sensitive= # Default endpoint sensitive setting.
endpoints.actuator.enabled=true # Enable the endpoint.
endpoints.actuator.path= # Endpoint URL path.
endpoints.actuator.sensitive=false # Enable security on the endpoint.
endpoints.autoconfig.enabled= # Enable the endpoint.
endpoints.autoconfig.id= # Endpoint identifier.
endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.beans.enabled= # Enable the endpoint.
endpoints.beans.id= # Endpoint identifier.
endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.configprops.enabled= # Enable the endpoint.
endpoints.configprops.id= # Endpoint identifier.
endpoints.configprops.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.
endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.docs.curies.enabled=false # Enable the curie generation.
endpoints.docs.enabled=true # Enable actuator docs endpoint.
endpoints.docs.path=/docs #
endpoints.docs.sensitive=false #
endpoints.dump.enabled= # Enable the endpoint.
endpoints.dump.id= # Endpoint identifier.
endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.env.enabled= # Enable the endpoint.
endpoints.env.id= # Endpoint identifier.
endpoints.env.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.
endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.flyway.enabled= # Enable the endpoint.
endpoints.flyway.id= # Endpoint identifier.
endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.health.enabled= # Enable the endpoint.
endpoints.health.id= # Endpoint identifier.
endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).
endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.
endpoints.info.enabled= # Enable the endpoint.
endpoints.info.id= # Endpoint identifier.
endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.jolokia.enabled=true # Enable Jolokia endpoint.
endpoints.jolokia.path=/jolokia # Endpoint URL path.
endpoints.jolokia.sensitive=true # Enable security on the endpoint.
endpoints.liquibase.enabled= # Enable the endpoint.
endpoints.liquibase.id= # Endpoint identifier.
endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.logfile.enabled=true # Enable the endpoint.
endpoints.logfile.path=/logfile # Endpoint URL path.
endpoints.logfile.sensitive=true # Enable security on the endpoint.
endpoints.mappings.enabled= # Enable the endpoint.
endpoints.mappings.id= # Endpoint identifier.
endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.metrics.enabled= # Enable the endpoint.
endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.
endpoints.metrics.id= # Endpoint identifier.
endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.shutdown.enabled= # Enable the endpoint.
endpoints.shutdown.id= # Endpoint identifier.
endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.trace.enabled= # Enable the endpoint.
endpoints.trace.id= # Endpoint identifier.
endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.

# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)
(ENDPOINTS 속성)
endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.
endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.
endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.
endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.
endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.
endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.

# JMX ENDPOINT (EndpointMBeanExportProperties)
(JMX endpoint 관련 속성)
endpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.
endpoints.jmx.enabled=true # Enable JMX export of all endpoints.
endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.
endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.

# JOLOKIA (JolokiaProperties)
(JOLOKIA 관련 속성)
jolokia.config.*= # See Jolokia manual

# MANAGEMENT HTTP SERVER (ManagementServerProperties)
(HTTP 서버 관련 management 속성)
management.add-application-context-header=true # Add the &quot;X-Application-Context&quot; HTTP header in each response.
management.address= # Network address that the management endpoints should bind to.
management.context-path= # Management endpoint context-path. For instance `/actuator`
management.port= # Management endpoint HTTP port. Use the same port as the application by default.
management.security.enabled=true # Enable security.
management.security.role=ADMIN # Role required to access the management endpoint.
management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).

# HEALTH INDICATORS (previously health.*)
(spring 상태 관련 속성 - )
management.health.db.enabled=true # Enable database health check.
(데이터베이스 상태 체크 활성화)
management.health.defaults.enabled=true # Enable default health indicators.
(상테 인디케이터 활성화)
management.health.diskspace.enabled=true # Enable disk space health check.
(디스크 공간 상태 활성화)
management.health.diskspace.path= # Path used to compute the available disk space.
(디스크 공간 관련 path)
management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.
(디스크 공간 minimum threshold)
management.health.elasticsearch.enabled=true # Enable elasticsearch health check.
(엘라스틱 서치 상태 체크 활성화)
management.health.elasticsearch.indices= # Comma-separated index names.
(엘라스틱 index name)
management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.
(엘라스틱 response timeout설정)
management.health.jms.enabled=true # Enable JMS health check.
(java message service 상태 체크 활성화)
management.health.mail.enabled=true # Enable Mail health check.
(mail 상태 체크 활성화)
management.health.mongo.enabled=true # Enable MongoDB health check.
(mongodb 상태 체크 활성화)
management.health.rabbit.enabled=true # Enable RabbitMQ health check.
(rabbitMQ 상태 체크 활성화)
management.health.redis.enabled=true # Enable Redis health check.
(redis 상태 체크 활성화)
management.health.solr.enabled=true # Enable Solr health check.
(solr 상태 체크 활성화)
management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.
(health status 관련 속성)

# TRACING ((TraceProperties)
management.trace.include=request-headers,response-headers,errors # Items to be included in the trace.
(트레이스 관련 속성 선언)

# REMOTE SHELL
(remote shell 관련 속성)
shell.auth=simple # Authentication type. Auto-detected according to the environment.
shell.auth.jaas.domain=my-domain # JAAS domain.
shell.auth.key.path= # Path to the authentication key. This should point to a valid &quot;.pem&quot; file.
shell.auth.simple.user.name=user # Login user.
shell.auth.simple.user.password= # Login password.
shell.auth.spring.roles=ADMIN # Comma-separated list of required roles to login to the CRaSH console.
shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.
shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).
shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.
shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.
shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.
shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.
shell.ssh.enabled=true # Enable CRaSH SSH support.
shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.
shell.ssh.key-path= # Path to the SSH server key.
shell.ssh.port=2000 # SSH port.
shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.
shell.telnet.port=5000 # Telnet port.

# GIT INFO
spring.git.properties= # Resource reference to a generated git info properties file.
(git 속성)

# METRICS EXPORT (MetricExportProperties)
(metrics 추출)
spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.
spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.
spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.
spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).
spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.
spring.metrics.export.includes= # List of patterns for metric names to include.
spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).
spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.
spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.
spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.
spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.
spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.
spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.


# ----------------------------------------
# DEVTOOLS PROPERTIES
# ----------------------------------------

# DEVTOOLS (DevToolsProperties)
(devtools 관련 속성)
spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.
spring.devtools.livereload.port=35729 # Server port.
spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.
spring.devtools.restart.additional-paths= # Additional paths to watch for changes.
spring.devtools.restart.enabled=true # Enable automatic restart.
spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.
spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.
spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.
spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.

# REMOTE DEVTOOLS (RemoteDevToolsProperties)
(remote devtools 관련 속성)
spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.
spring.devtools.remote.debug.enabled=true # Enable remote debug support.
spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.
spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.
spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.
spring.devtools.remote.restart.enabled=true # Enable remote restart.
spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).
spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/03/16/spring_boot_introduce-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/03/16/spring_boot_introduce-post.html</guid>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring에서 Redis 사용하기</title>
        <description>&lt;h2 id=&quot;overview-redis&quot;&gt;Overview Redis&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Redis는 “REmote DIctionary System”의 약자로 &lt;strong&gt;memory 기반의 key / value store&lt;/strong&gt; 이다.
 Cassandra나 HBase와 같이 NoSQL DBMS로 분류되기도 하고, memcached와 같은 In memory solution으로 분류되기도 한다.&lt;/p&gt;

&lt;p&gt;성능은 memcached에 버금가면서 다양한 데이터 구조를 지원함으로써, Message Queue, Shared Memory, Remote Dicitionary 용도로 사용될 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 점 때문에 인스타그램, 라인플러스의 LINE 메신저, StackOverflow, Blizzard, digg 등 여러 소셜 서비스에 널리 사용되고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BSD 라이센스 기반의 오픈 소스이며, 최근 VMWare에 인수되어 계속되어 업그레이드되고 있다.
16,000 라인 정도의 C code로 작성되어 있으며, Action script, C, C#, C++, Java, Node.js, Objective-c 등 다양한 언어를 지원한다. &lt;a href=&quot;https://redis.io/clients&quot; title=&quot;https://redis.io/clients&quot;&gt;https://redis.io/clients&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;keyvalue-store&quot;&gt;Key/Value Store&lt;/h3&gt;

&lt;p&gt;Redis는 기본적으로 key / value store 이다. 특정 키 값에 값을 저장하는 구조로 되어 있고, 기본적인 PUT / GET operation을 지원한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/key-value.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/key-value.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;단, 이 모든 데이터는 memory에 저장되고, 이로 인하여 매우 빠른 write / read 속도를 보장한다. 그래서 전체 저장 가능한 데이터 용량은 물리적인 memory 크기를 넘을 수 있다. (물론 OS의 disk swapping 영역 등을 사용하여 확장은 가능하겠지만, 성능이 급격하게 떨어지므로 의미가 없다.)&lt;/p&gt;

&lt;p&gt;데이터 엑세스는 memory에서 일어나지만 server restart와 같이 서버가 내려갔다가 올라오는 상황에서 데이터 저장하는 것을 보장하기 위해 disk를 persistence store로 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;다양한-데이터-타입&quot;&gt;다양한 데이터 타입&lt;/h3&gt;

&lt;p&gt;단순한 memory 기반의 key / value store 라면 이미 memcached를 사용해도 되는데 어떤 차이가 있길래 redis가 각광받고 있는 것일까?&lt;/p&gt;

&lt;p&gt;Redis가 key / value store 이기는 하지만 value가 단순한 object가 아니라 자료구조르 갖기 때문에 큰 차이를 보인다.
 Redis가 지원하는 데이터 타입은 크게 아래와 같이 5가지가 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;string&quot;&gt;String&lt;/h4&gt;

&lt;p&gt;일반적인 문자열로 최대 512MByte 길이까지 지원한다.
 Text 문자열 뿐만 아니라 integer와 같은 숫자나 jpg와 같은 binary file 까지 저장할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://redis.io/commands#string&quot; title=&quot;https://redis.io/clients&quot;&gt;https://redis.io/commands#string&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;set&quot;&gt;Set&lt;/h4&gt;

&lt;p&gt;set은 string의 집합이다. 여러 개의 값을 하나의 value 내에 넣을 수 있다고 생각하면 되며, 블로그 포스트의 tagging에 사용될 수 있다.
 재미있는 점은 set 간의 연산을 지원하는데, 집합인만큼 교집합, 합집합, 차이 (Differences)를 매우 빠른 시간내에 추출할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/data_type_set.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/data_type_set.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/commands#set&quot; title=&quot;http://redis.io/commands#set&quot;&gt;http://redis.io/commands#set&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;sorted-set&quot;&gt;Sorted Set&lt;/h4&gt;

&lt;p&gt;Set에 “score” 라는 필드가 추가된 데이터 형으로 score는 일종의 &lt;strong&gt;가중치&lt;/strong&gt; 이다.
 Sorted set 에서 데이터는 오름차순으로 내부 정렬되며, 정렬이 되어 있는 만큼 score 값 범위에 따른 query (range query), top rank에 따른 query 등이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/data_type_sortedset.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/data_type_sortedset.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/commands#sorted_set&quot; title=&quot;http://redis.io/commands#sorted_set&quot;&gt;http://redis.io/commands#sorted_set&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;hashes&quot;&gt;Hashes&lt;/h4&gt;

&lt;p&gt;Hash는 value 내에 field / string value 쌍으로 이루어진 테이블을 저장하는 데이터 구조체이다.
 RDBMS에서 PK 1개와 string 필드 하나로 이루진 테이블이라고 이해하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/data_type_hash.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/data_type_hash.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/commands#hash&quot; title=&quot;http://redis.io/commands#hash&quot;&gt;http://redis.io/commands#hash&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;list&quot;&gt;List&lt;/h4&gt;

&lt;p&gt;List는 string 들의 집합으로 저장되는 데이터 형태는 set 과 유사하지만, 일종의 양방향 linked list라고 생각하면 된다.
 List 앞과 뒤에서 PUSH / POP 연산을 이용해서 데이터를 넣거나 뺄 수 있고, 지정된 INDEX 값을 이용하여 지정된 위치에
 데이터를 넣거나 뺄 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/data_type_list.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/data_type_list.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/commands#list&quot; title=&quot;http://redis.io/commands#list&quot;&gt;http://redis.io/commands#list&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;h3 id=&quot;데이터-구조체-정리&quot;&gt;데이터 구조체 정리&lt;/h3&gt;

&lt;p&gt;지금까지 간략하게 redis가 지원하는 데이터 구조체들에 대해서 살펴보았다.
 Redis 데이터 구조체의 특징을 다시 요약하자면,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Value가 일반적인 string 뿐만 아니라, set, list, hash와 같은 집합형 데이터 구조를 지원한다.&lt;/li&gt;
  &lt;li&gt;저장된 데이터에 대한 연산이나 추가 작업 가능하다. [합집합, 교집합, Range Query 등]&lt;/li&gt;
  &lt;li&gt;set은 일종의 집합, sorted set은 오름차순으로 정렬된 집합, hash는 키 기반의 테이블, list는 일종의 링크드 리스트와 같은 특성을 지니고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;일반적인 집합형 데이터 구조 (set, list, hash) 등은 redis에서 하나의 키당 총 2^32개의 데이터를 이론적으로 저장할 수 있으나, 최적의 성능을 낼 수 있는 것은 일반적으로 1,000 ~ 5,000개 사이로 알려져 있다.&lt;/p&gt;

&lt;p&gt;데이터 구조에 따른 저장 구조를 정리해서 하나의 그림에 도식화해보면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/data_type_summary.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/data_type_summary.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;persistence&quot;&gt;Persistence&lt;/h3&gt;

&lt;p&gt;앞서도 언급하였듯이, redis는 데이터를 disk에 저장할 수 있다. memcached의 경우 메모리에만 데이터를 저장하기 때문에 서버가 shutdown 된 후에 데이터는 유실되지만, redis는 restart 후에 disk에 저장해놓은 데이터를 다시 읽어서 memory에 logging 하기 때문에 데이터가 유실되지 않는다.&lt;/p&gt;

&lt;p&gt;Redis 에서는 데이터를 저장하는 방법이 snapshotting 방식과 AOF (Append On File) 두가지가 있다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;snapshotting&quot;&gt;Snapshotting&lt;/h4&gt;

&lt;p&gt;순간적으로 memory에 있는 전체 내용을 disk에 저장하는 방식이다.
 SAVE와 BGSAVE 방식이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SAVE는 blocking 방식으로 순간적으로 redis의 모든 동작을 정지시키고, 그 때의 snapshot을 disk에 저장한다.&lt;/li&gt;
  &lt;li&gt;BGSAVE는 non-blocking 방식으로 별도의 process를 띄운 후, 명령어 수행 당시의 메모리 snapshot을 disk에 저장하며, 저장 순간에 redis는 동작을 멈추지는 않고 정상적으로 계속 동작한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;장점: memory의 snapshot을 그대로 뜬 것이기 때문에, 서버 restart시 snapshot만 load하면 되므로, restart 시간이 빠르다.
단점: snapshot을 추출하는데 시간이 오래 걸리며, snapshot 추출된 후 서버가 down 되면 snapshot 추출 이후 데이터는 유실된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;aof&quot;&gt;AOF&lt;/h4&gt;

&lt;p&gt;AOF (Append On File) 방식은 redis의 모든 write / update operation 자체를 모두 별도의 log 파일에 기록하는 형태이다. 서버가 restart될 때 기록된 write / update operation을 순차적으로 재실행하며 데이터를 복구한다. operation이 발생할 때마다 매번 기록하기 때문에, RDB 방식과는 달리 특정 시점이 아니라 항상 현재 시점까지의 log를 기록할 수 있으며 기본적으로 non-blocking 방식이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;장점: log 파일에 대해서 append만 하기 때문에 log write 속도가 빠르며, 어느 시점에 server가 down 되더라도 데이터 유실은 발생하지 않는다.
단점: 모든 write / update operation에 대해 log을 남기게 되므로 log 데이터 양이 RDB 방식에 비해 과대하게 크며, 복구시 저장된 write / update operation을 replay 하게 되므로 restart 속도가 느리다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;권장되는-사용법&quot;&gt;권장되는 사용법&lt;/h4&gt;

&lt;p&gt;RDB와 AOF 방식의 장단점을 상쇄하기 위해 두 가지 방식을 혼용해서 사용하는 것이 바람직하다.
 즉, 주기적으로 snapshot을 백업하고, 다음 snapshot 까지의 저장을 AOF 방식으로 수행한다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 서버가 restart될 때 백업된 snapshot을 reload 하고, 소량의 AOF log만 replay하면 되기 때문에 restart 시간을 절약하고 데이터의 유실을 방지할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://redis.io/topics/persistence&quot; title=&quot;http://redis.io/topics/persistence&quot;&gt;참고&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;redis-참고-자료&quot;&gt;Redis 참고 자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Redis 공식 문서: &lt;a href=&quot;http://redis.io/documentation&quot; title=&quot;http://redis.io/documentation&quot;&gt;http://redis.io/documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redis monitoring tool: &lt;a href=&quot;http://charsyam.wordpress.com/2012/06/20/redis-monitoring-tool-redislive-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/&quot; title=&quot;http://charsyam.wordpress.com/2012/06/20/redis-monitoring-tool-redislive-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/&quot;&gt;reference_redis_monitoring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redis common use case: &lt;a href=&quot;http://highscalability.com/blog/2011/7/6/11-common-web-use-cases-solved-in-redis.html&quot; title=&quot;http://highscalability.com/blog/2011/7/6/11-common-web-use-cases-solved-in-redis.html&quot;&gt;http://highscalability.com/blog/2011/7/6/11-common-web-use-cases-solved-in-redis.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Web 기반 redis test console &lt;a href=&quot;http://try.redis.io/&quot; title=&quot;http://try.redis.io/&quot;&gt;http://try.redis.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redis clustering &lt;a href=&quot;https://redis.io/presentation/Redis_Cluster.pdf&quot; title=&quot;https://redis.io/presentation/Redis_Cluster.pdf&quot;&gt;https://redis.io/presentation/Redis_Cluster.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;redis-with-spring-framework&quot;&gt;Redis with Spring framework&lt;/h2&gt;

&lt;p&gt;이 장에서는 Spring에서 Redis 를 이용하는 법을 설명한다.&lt;/p&gt;

&lt;p&gt;Jedis, Jredis… 등의 redis client libary를 추가해 사용하는 것과 spring 에서 제공하는 RedisTemplate를 함께 사용하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;RedisTemplate를 사용하면 redis client libary 종류에 상관없이 사용할 수 있어 좋고, redis가 지원하는 자료구조를 사용하기 좋게 랩핑을 해준다.&lt;/p&gt;

&lt;p&gt;Jedis를 그냥 써도 좋지만, byte[] 타입으로 converting 노가다를 해야한다.
 여기서는 RedisTemplate를 이용해 redis를 사용하는 법을 설명한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;pomxml에-추가&quot;&gt;pom.xml에 추가&lt;/h3&gt;

&lt;p&gt;처음에는 당연히 RedisTemplate를 사용하기 위해 pom.xml에 추가해야 한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 pom.xml에 필요한 library를 추가한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jedis client는 내부적으로 apache의 common-pool2를 사용하는데 각 library에서 version 의존성이 있으므로 주의해야 한다.
&lt;a href=&quot;https://groups.google.com/forum/#!topic/jedis_redis/sZXLV3hHCwQ&quot; title=&quot;https://groups.google.com/forum/#!topic/jedis_redis/sZXLV3hHCwQ&quot;&gt;https://groups.google.com/forum/#!topic/jedis_redis/sZXLV3hHCwQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_maven_00.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_maven_00.jpg&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_maven_01.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_maven_01.jpg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;applicationcontextxml에-추가&quot;&gt;applicationContext.xml에 추가&lt;/h3&gt;

&lt;p&gt;다음과 같이 필요한 redis에 필요한 네임스페이스를 사용을 위해 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_context.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_context.jpg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;redis-설치&quot;&gt;Redis 설치&lt;/h3&gt;

&lt;p&gt;Redis를 다음과 같이 설치 후, 테스트를 해본다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;여기서는 OSX에서 실험하였다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_install.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_install.jpg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;기본적인-사용법&quot;&gt;기본적인 사용법&lt;/h3&gt;

&lt;p&gt;Redis에 저장할 데이터를 담고 있는 간단한 클래스를 만들고 unit test를 통해 실제로 값이 제대로 redis에 써지고 읽히는지 확인하도록 한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;user-class&quot;&gt;User class&lt;/h4&gt;

&lt;p&gt;다음과 같이 아이디 및 이름을 가지는 간단한 클래스를 만든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/user.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/user.jpg&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;test-setup&quot;&gt;Test setup&lt;/h4&gt;

&lt;p&gt;Redis 를 사용하기 위해 필요한 객체들을 선언하고, 초기화할 준비한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring의 application context를 통해 bean 주입을 통해 초기화하지 않았으며, 테스트 클래스에서 직접 초기화하도록 해보았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_test_setup.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_test_setup.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JedisConnectionFactory: Redis에 접속할 수 있도록 필요한 connection 정보를 담고 있는 redis client, Jedis의 connection factory이다.&lt;/li&gt;
  &lt;li&gt;StringRedisSerializer: Redis에 데이터를 저장할 때 string 형태로 직렬화하기 위해 필요하다.&lt;/li&gt;
  &lt;li&gt;Jackson2JsonRedisSerializer: 위의 User class와 같이 한 오브젝트에 다양한 타입의 데이터가 있을 때, json 형태로 redis에 저장하기 위해 필요하다.&lt;/li&gt;
  &lt;li&gt;RedisTemplate: Spring에서 redis를 간단하게 사용할 수 있도록 해준다.&lt;/li&gt;
  &lt;li&gt;ValueOperations: Redis에 저장하는 각 데이터 타입에 따라 operation을 쉽게 사용할 수 있도록 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;redis-test&quot;&gt;Redis Test&lt;/h4&gt;

&lt;p&gt;위와 같이 Setup 함수에서 redis를 사용하기 위해 필요한 객체들을 초기화한 후, ValueOperations를 통해 User class 인스턴스의 정보를 set 한 후, get을 다시해보았다. 다음과 같이 테스트를 통과하는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_test_simple_test00.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_test_simple_test00.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;redis-cli를 통해 실제 redis server에서 해당 키값에 대한 정보가 저장되었는지 확인하였다. 다음과 같이 json 형태로 저장되어 있는 것을 확인할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-18-spring_redis_linkage/redis_cli_after_test00.jpg&quot; alt=&quot;2017-02-18-spring_redis_linkage/redis_cli_after_test00.jpg&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/02/18/spring_redis_linkage-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/02/18/spring_redis_linkage-post.html</guid>
        
        <category>redis</category>
        
        <category>spring</category>
        
        <category>database</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Spring 에서 mockito 기본 사용법</title>
        <description>&lt;h1 id=&quot;overview-mockito&quot;&gt;Overview mockito&lt;/h1&gt;
&lt;p&gt;mockito는 유닛 테스트를 위한 java mocking framework이다.
 mockito를 사용하면 대부분의 비즈니스 로직을 검증가능한데, 여기서는 기본 사용법에 대해 작성하였다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;declare-maven-dependency&quot;&gt;Declare Maven Dependency&lt;/h2&gt;
&lt;p&gt;mocktio는 maven repository를 지원하는데, 다음과 같이 pom.xml에서 선언하면 사용 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;maven-repository&quot;&gt;Maven repository&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_00.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_00.jpg&quot; /&gt;
여기서는 mocktio를 1.10.19, junit을 4.12 버전으로 사용한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mockito-usage-examples&quot;&gt;Mockito usage examples&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mock&quot;&gt;mock()&lt;/h3&gt;

&lt;p&gt;mock() 메소드는 mock 객체를 만들어서 반환한다.
예를 들어 다음과 같이 Person 클래스를 만들고 테스트한다고 가정하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_01.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 다음과 같이 mock 메소드를 통해 mock 객체를 만들 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_02.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mock-1&quot;&gt;@Mock&lt;/h3&gt;

&lt;p&gt;mock() 메소드 말고도 mock 객체를 만들기 위해 @Mock annotation을 선언하는 방법도 있다.
이 방법은 다음과 같이 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_03.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MockitoAnnotations.initMocks(this)를 이용하면, Mockito annotation이 선언된 변수들을
객체로 만들어낸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;when-01&quot;&gt;When 01&lt;/h3&gt;

&lt;p&gt;아주 간단한 when() 메소드 사용법이다.
when() 메소드는 지정 메소드에 대해 반환해줄 값을 설정할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_04.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 예에서 Person 클래스의 getName() 메소드에서 “Dongho Sim”을 리턴하도록 설정하였지만,
getAge() 메소드에 대해서는 24를 리턴하도록 하였다. 39번 라인에서 AssertionError가 발생하는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;when-02&quot;&gt;When 02&lt;/h3&gt;

&lt;p&gt;다음 getList() 메소드와 같이 조금 복잡한 메소드에 대해서 return을 어떻게 사용을 해야할까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_05.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;매개변수가 어떤 값이라도 관계가 없다면, any…로 시작하는 메소드를 사용한다.
밑의 예에서는 anyString() 밑 anyInt()를 사용하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_06.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만약 특정 값을 넣어야 한다면, eq() 메소드를 사용하여 매개변수 값을 넣어준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dothrow&quot;&gt;doThrow&lt;/h3&gt;
&lt;p&gt;테스트할 클래스의 어떤 메소드에서 특정 예외를 던지고 싶을 때에는 doThrow() 메소드를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_07.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 예에서는 Person클래스의 setName() 메소드 호출시,  IllegalArgumentException이 던지도록 하였다.
@Test annotation에 해당 exception을 설정하였으므로, 테스트가 통과하는 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;donothing&quot;&gt;doNothing&lt;/h3&gt;

&lt;p&gt;리턴 값이 없는 메소드에 대해서 when을 걸 때는 doNothing()을 사용하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_08.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;verify&quot;&gt;Verify&lt;/h3&gt;

&lt;p&gt;Verify() 메소드는 테스트할 특정 메소드가 호출되었는지를 여러가지 조건으로 체크한다.
단순한 호출 횟수 뿐만 아니라, 타임아웃 시간까지 지정해서 체크할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_09.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_09.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 예에서 setName() 메소드에 “ETC” 라는 String을 넣은적이 없으므로, fail이 발생하는 것이다..&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;injectmocks&quot;&gt;@InjectMocks&lt;/h3&gt;

&lt;p&gt;만약 테스트할 클래스 내부에 다른 클래스를 포함할 경우에 어떻게 테스트해야할까?
비즈니스 로직을 점검할 때 일일이 외부에서 주입하도록 setter 메소드나 생성자를 구현해야할까?&lt;/p&gt;

&lt;p&gt;mocktio 에서는 이런 경우를 위해 @InjectMocks annotation을 제공한다.
이 annotation은 @Mock이나 @Spy annotation이 붙은 mock 객체를 테스트 클래스의 멤버 클래스와 일치하면
주입시켜준다.&lt;/p&gt;

&lt;p&gt;예를 들어 다음과 같이 AuthDao와 AuthService 클래스가 있다고 하자.
AuthService는 AuthDao를 포함하고 AuthService의 isLogin() 메소드는 AuthDao를 사용하여 로직을 구현하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_10.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_10.jpg&quot; /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_11.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_11.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트하고 싶은 것은 AuthService의 isLogin() 메소드이다.
이 메소드에서는 AuthDao의 isLogin() 메소드의 반환 값에 따라 다르게 동작한다.&lt;/p&gt;

&lt;p&gt;따라서 AuthService의 isLogin() 메소드를 테스트하고 싶을 때, AuthDao의 isLogin() 메소드가 리턴하는
값을 조작할 필요가 있다.&lt;/p&gt;

&lt;p&gt;다음은 해당 상황을 mockito 로 처리한 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-02-12-spring_mockito_usage/2017-02-12-spring_mockito_usage_12.jpg&quot; alt=&quot;2017-02-12-spring_mockito_usage_12.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 예에서 @InjectMocks annotation을 써서 AuthService 객체에 AuthDao 객체를 주입하고 있으며,
해당 AuthDao 객체의 isLogin 메소드는 “Dongho Sim” String을 받을 때 true를 리턴하도록 설정하였다.&lt;/p&gt;

&lt;p&gt;따라서 “Dongho Sim” String을 매개 변수로 전달하면 true를 리턴하고, 그 외에는 false를 리턴할 것이다.&lt;/p&gt;

&lt;h3 id=&quot;source-link&quot;&gt;&lt;a href=&quot;https://github.com/dhsim86/tobys_spring_study/commit/fbb6f68d9bf9904bc10f76322ca3611b6e6822d8&quot;&gt;Source Link&lt;/a&gt;&lt;/h3&gt;

</description>
        <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/02/12/spring_mockito_usage-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/02/12/spring_mockito_usage-post.html</guid>
        
        <category>mockito</category>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code class=&quot;highlighter-rouge&quot;&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>3 Steps (2 minutes) to Setup Your Personal Website with Jalpc</title>
        <description>&lt;p&gt;Everyone wants to have a personal website, you can display your infomation to public, post blogs and make friends. If you are CS engineer, haveing a self website will benefit your interview.&lt;/p&gt;

&lt;p&gt;So, if you like this website &lt;a href=&quot;https://jarrekk.github.io/Jalpc/&quot;&gt;https://jarrekk.github.io/Jalpc/&lt;/a&gt; or &lt;a href=&quot;http://www.jarrekk.com&quot;&gt;http://www.jarrekk.com&lt;/a&gt; and are willing to have a website, here is a way to build your website in 3 steps(2 minutes). Following are steps to setup your website(make sure you have basic knowledge of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, if you want to custom css/js &lt;a href=&quot;https://github.com/npm/npm&quot;&gt;NPM&lt;/a&gt; is needed):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fork &lt;a href=&quot;https://github.com/jarrekk/Jalpc&quot;&gt;this project – Jalpc&lt;/a&gt; at &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;. If you want to edit website at github, do it as following gif or clone forked repository. &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone git@github.com:github_username/Jalpc.git&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;!-- ![edit](/static/assets/img/blog/3steps/edit.gif) --&gt;
 &lt;img src=&quot;/static/assets/img/blog/3steps/edit.gif&quot; width=&quot;75%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enter into repository directory and edit following file list:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;: edit ‘Website settings’, ‘author’, ‘comment’ and ‘analytics’ items.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/landing.yml&lt;/strong&gt;: custom sections of index page.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/index/&lt;/strong&gt;: edit sections’ data to yours at index page, please notice comment at each file.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;_data/blog.yml&lt;/strong&gt;: edit navbar(categories) of blog page, if you have different/more blog page, copy &lt;code class=&quot;highlighter-rouge&quot;&gt;blog/python.html&lt;/code&gt; and change it to your category HTML file, and edit &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;/python/&lt;/strong&gt; to your category name at items &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;permalink&lt;/strong&gt;, make sure title is the same as permalink but capitalized first letter(except HTML).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt;: If you wanna release website at your own domain name: edit it and create &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch; if you want to use &lt;em&gt;github_username.github.io&lt;/em&gt;: leave it blank.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Go to repo’s settings panel, config &lt;strong&gt;GitHub Pages&lt;/strong&gt; section to make sure website is released.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push changes to your github repository and view your website, done!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From now on, you can post your blog to this website by creating md files at &lt;code class=&quot;highlighter-rouge&quot;&gt;post/&lt;/code&gt; directory and push it to GitHub, you can clear files at this directory before you post blogs.&lt;/p&gt;

&lt;p&gt;If you like this repository, I appreciate you star this repository. Please don’t hesitate to mail me or post issues on GitHub if you have any questions. Hope you have a happy blog time!😊&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/html/2017/01/31/3-steps-to-setup-website-with-Jalpc.html</guid>
        
        <category>Jalpc</category>
        
        <category>Jekyll</category>
        
        
        <category>HTML</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 05: Spring IoC Container</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 08&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;spring-ioc-container&quot;&gt;Spring IoC Container&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;의존성-주입di와-역제어ioc&quot;&gt;의존성 주입(DI)와 역제어(IoC)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;의존성 주입을 일반적인 용어로 역제어(IoC; Inversion of Control).&lt;/li&gt;
  &lt;li&gt;역제어의 형태가 의존성 주입&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;IoC 란 개발자가 작성한 코드에 따라 제어가 이루어지는 것이 아니라, 외부에 의해 코드의 흐름이 바뀌는 것을 의미&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의존성-주입&quot;&gt;의존성 주입&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이전에는 자신이 사용할 객체(의존 객체, Dependencies)를 자신이 직접 만들어서 썼다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectListController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ProjectDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProjectDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;앞의 방식과 반대는 방식이 의존성 주입이다. 내부에서 생성하는 것이 아닌 외부에서 의존 객체를 주입해주는 방식이다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProjectListController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ProjectDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setProjectDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProjectDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;초창기에는 애플리케이션의 크기가 작아 객체가 필요할 때마다 직접 생성해서 사용해도 문제가 되지 않았다. 하지만 규모가 커지면서 성능이나 유지 보수에 문제가 생기게 된다. 이러한 문제를 해결하기 위해 등장한 것이 의존성 주입이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-xml-기반-빈-관리-컨테이너&quot;&gt;Spring XML 기반 빈 관리 컨테이너&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Spring Framework는 객체 관리 컨테이너 (IoC 컨테이너)를 제공한다.&lt;/li&gt;
  &lt;li&gt;Spring에서는 자바 객체를 &lt;strong&gt;빈(bean)&lt;/strong&gt; 이라고 하며, 객체 관리 컨테이너를 &lt;strong&gt;빈 컨테이너&lt;/strong&gt; 라고도 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;applicationcontext-interface&quot;&gt;ApplicationContext interface&lt;/h3&gt;

&lt;p&gt;Spring은 IoC 컨테이너가 갖추어야 할 기능들을 &lt;strong&gt;ApplicationContext&lt;/strong&gt; interface에 정의해 두었다. Spring에서 제공하는 IoC 컨테이너들은 모두 이 ApplicationContext interface로부터 상속받는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-30-java_web_programming_05/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spring에서 빈 정보는 XML 파일에 저장해두고, &lt;strong&gt;ClassPathXmlApplicationContext&lt;/strong&gt; 나 &lt;strong&gt;FileSystemXmlApplicationContext&lt;/strong&gt; 클래스를 사용하여 빈을 자동 생성한다.
    &lt;ul&gt;
      &lt;li&gt;ClassPathXmlApplicationContext: 자바 클래스 경로에서 XML로 된 빈 설정 파일을 검색&lt;/li&gt;
      &lt;li&gt;FileSystemXmlApplicationContext: 파일 시스템 경로에서 빈 설정 파일을 검색&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;WebApplicationContext&lt;/strong&gt;: &lt;strong&gt;web.xml&lt;/strong&gt; 파일에 설정된 정보에 따라 XML 파일을 검색&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;bean-tag&quot;&gt;&amp;lt;bean&amp;gt; tag&lt;/h3&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.Score&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;bean&amp;gt; 태그를 통해 자바 빈을 선언할 때 id 속성이나 name 속성에 빈 이름을 지정할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;항목&lt;/th&gt;
      &lt;th&gt;id 속성&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;name 속성&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;용도&lt;/td&gt;
      &lt;td&gt;빈 식별자를 지정한다. 중복되어서는 안된다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;인스턴스의 별명을 추가할 때 사용, id와 마찬가지로 중복되어서는 안된다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;여러 개의 이름 지정&lt;/td&gt;
      &lt;td&gt;불가능&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;콤마, 세미콜론 또는 공백을 사용하여 여러 개의 이름 지정 가능. (첫번째 이름은 컨테이너에서 빈을 보관할 때 사용, 나머지 이름은 빈의 별명)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;빈 이름 작성 규칙&lt;/td&gt;
      &lt;td&gt;제약 없음&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;제약 없음&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/6402c1a91bafc245b43be3c3d01fb380efea13c2&quot;&gt;[ch08] 8.3 Use ClassPathXmlApplicationContext
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같이 빈의 이름을 설정하지 않으면 컨테이너에 보관할 때 &lt;strong&gt;패키지 이름 + 클래스 이름 + 인덱스&lt;/strong&gt; 로 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- exam.test01.Score#0 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- exam.test01.Score 는 첫 번째 빈인 exam.test01.Score#0 에 대한 별명이 된다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.Score&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/fb201d072d82393079b1118a8ce2a579729e9689&quot;&gt;[ch08] 8.3 Use anonymous bean
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;constructor-arg-tag&quot;&gt;&amp;lt;constructor-arg&amp;gt; tag&lt;/h3&gt;

&lt;p&gt;생성되는 인스턴스에 대해 호출될 생성자를 지정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.Score&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- value 를 통해 매개변수 값을 지정한다--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- type 속성은 매개변수의 타입, 타입은 생략가능하며, 생략하면 자동 형변환을 수행 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.lang.String&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/constructor-arg&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;91&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/constructor-arg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 정의했을 때, &lt;strong&gt;Score(String name, float value)&lt;/strong&gt; 생성자가 호출될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/f19145a69de65c6d1e6b5b9cc9f7f466e46bc39e&quot;&gt;[ch08] 8.3 contructor-args usage
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;‘c’&lt;/strong&gt; 네임스페이스를 사용하면, &lt;strong&gt;c:&lt;/strong&gt; 로 시작하는 속성을 통해 생성자의 파라미터를 지정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:p=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/c&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;class&quot;exam.test01.Score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;c:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;c:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;91&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성자를 통해 의존 객체를 주입할 때, 새로 빈을 생성하여 넘겨주고 싶다면 자식 태그로 &amp;lt;bean&amp;gt; 을 다음과 같이 선언하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.Score&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.final&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/constructor-arg&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;property-tag&quot;&gt;&amp;lt;property&amp;gt; tag&lt;/h3&gt;

&lt;p&gt;인스턴스를 선언할 때 프로퍼티 값을 설정할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test01.Score&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 정의하면 Score 클래스의 &lt;strong&gt;setName(String name) / setValue(int value)&lt;/strong&gt; 가 호출된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/e422e93a27c53f54d09f1c959016662d62076fdb&quot;&gt;[ch08] 8.3 property usage.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;‘p’&lt;/strong&gt; 네임스페이스를 사용하면, &lt;strong&gt;p:&lt;/strong&gt; 로 시작하는 속성을 통해 프로퍼티를 설정할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:p=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/p&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;score&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;class&quot;exam.test01.Score&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의존-객체-주입&quot;&gt;의존 객체 주입&lt;/h3&gt;

&lt;p&gt;다음과 같이 Car 클래스가 의존하는 객체인 Engine 타입의 빈을 주입할려면 다음과 같이 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Car&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;pride&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engine1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engine1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;lt;ref&amp;gt; 태그를 이용하여 빈의 레퍼런스를 설정하면 해당 빈을 찾아 주입해줄 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/45587907c0a1be3e8951446cee7e92bc10867115&quot;&gt;[ch08] 8.3 Use dependency Injection.
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/a992e733092c9e45ef5eb3130beeda44da7945be&quot;&gt;[ch08] 8.3 Use dependency Injection with new bean.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;컬렉션-값-주입&quot;&gt;컬렉션 값 주입&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;array-list-set&quot;&gt;Array, List, Set&lt;/h4&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engine1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Car&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;pride&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engines&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Engine&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bean =&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;engine1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;values&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;20&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;java.util.Set 타입도 같은 방식으로 설정할 수 있는데, 값을 넣을 때 기존에 등록된 객체와 같이 같은지 조사하여 같지 않을 경우에만 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/ff45f7cc518e218f16215f1d16290f02dcc58278&quot;&gt;[ch08] 8.3 Use dependency Injection with list.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;map-properties&quot;&gt;Map, Properties&lt;/h4&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 다음과 같이 java.util.Properties 타입의 값을 설정 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spareTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Tire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;props&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;205&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;prop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ratio&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;65&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prop&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/props&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- java.util.Map 타입의 값을 설정 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.Car&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;airbag&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dual&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt; sunroof &lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt; yes &lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sparetire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spareTire&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/map&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/2231eb927408c1d08d2e968a1037b689a642d28e&quot;&gt;[ch08] 8.3 Use dependency Injection with map, props.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;팩토리-메서드와-팩토리-빈&quot;&gt;팩토리 메서드와 팩토리 빈&lt;/h3&gt;

&lt;p&gt;팩토리 메소드 패턴을 이용하여 빈 생성을 하고자 할 때 다음과 같이 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TireFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hankookTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.TireFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createTire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kumhoTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.TireFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createTire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kumho&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Spring에서 빈 생성을 담당하는 팩토리 메소드는 반드시 static 으로 선언해야 된다.
    &lt;ul&gt;
      &lt;li&gt;class 속성에 팩토리 클래스 이름을 지정한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;factory-method&lt;/strong&gt; 속성에는 반드시 static 메소드 이름을 지정한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;팩토리 메소드에 넘겨줄 매개변수 값은 &amp;lt;constructor-arg&amp;gt; 태그로 지정한다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;“hankookTire” 와 “kumhoTire” 라는 id로 등록된 객체는 TireFactory 객체가 아니라 Tire 객체이다.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/3d1ba384b5c6c7912901891f5205ffc3527ebedc&quot;&gt;[ch08] 8.3 Use factory method.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 팩토리 클래스의 객체를 만들고, 이 팩토리 객체로부터 인스턴스를 생성할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TireFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tireFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test.TireFactory&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hankookTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tireFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createTire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kumhoTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tireFactory&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createTire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kumho&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;팩토리 객체를 빈으로 생성하고, &lt;strong&gt;factory-bean&lt;/strong&gt; 을 통해 해당 빈의 아이디를 지정한다.
    &lt;ul&gt;
      &lt;li&gt;class 속성은 지정하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/5b1ffe205bdb2a98b1620a782f1c99c1a5e8062e&quot;&gt;[ch08] 8.3 Use factory bean.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;스프링-규칙에-따른-팩토리-빈&quot;&gt;스프링 규칙에 따른 팩토리 빈&lt;/h3&gt;

&lt;p&gt;Spring 에서는 팩토리 빈이라면 갖추어야 할 규칙을 &lt;strong&gt;org.springframework.beans.factory.FactoryBean&lt;/strong&gt; 인터페이스에 정의하였다. 팩토리 클래스를 만들 때 이 인터페이스에 따라 메소드를 구현하면 된다.
&lt;a href=&quot;factory-bean&quot;&gt;What’s a FactoryBean?&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그런데 &lt;strong&gt;FactoryBean&lt;/strong&gt; 인터페이스를 직접 구현하기보다는 Spring에서 제공하는 추상 클래스를 상속하는 것이 일반적이다.
&lt;strong&gt;org.springframework.beans.factory.config.AbstractFactoryBean&lt;/strong&gt; 은 FactoryBean 인터페이스를 미리 구현하였다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanClassLoaderAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanFactoryAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitializingBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DisposableBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 클래스에는 &lt;strong&gt;createInstance()&lt;/strong&gt; 라는 추상 메소드가 있다. 빈을 생성할 때 팩토리 메소드로써 &lt;strong&gt;getObject()&lt;/strong&gt; 가 호출되는데, 이 메소드는 내부적으로 &lt;strong&gt;createInstance()&lt;/strong&gt; 메소드를 호출한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;createInstance(): &lt;strong&gt;AbstractFactoryBean&lt;/strong&gt; 클래스를 상속받을 때는 이 메소드에 빈 생성 코드를 구현해야한다.&lt;/li&gt;
  &lt;li&gt;getObjectType(): 팩토리 메소드인 &lt;strong&gt;getObject()&lt;/strong&gt; 가 생성하는 객체의 타입을 알려주는 역할을 하는데, 이 메소드도 구현해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TireFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;maker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Tire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tire&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createHankookTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createKumhoTire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;타입 매개변수 T에 생성할 빈의 인스턴스 타입을 지정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hankookTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test13.TireFactory&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;팩토리 역할을 수행하는 메소드를 지정할 필요가 없다. Spring IoC 컨테이너는 FactoryBean 타입의 클래스일 경우, &lt;strong&gt;이 클래스의 인스턴스를 직접 보관하는 것이 아니라 이 클래스가 생성한 빈을 컨테이너에 보관한다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;TireFactory 객체를 보관하는 것이 아닌, 이 객체가 생성하는 Tire 객체를 “hankookTire” 라는 이름으로 컨테이너에 보관한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/831f969ac509296d560c34ce01bae4f1779c211f&quot;&gt;[ch08] 8.3 Use AbstractFactoryBean.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;빈의-범위-설정&quot;&gt;빈의 범위 설정&lt;/h2&gt;

&lt;p&gt;Spring IoC 컨테이너는 빈 생성시, 기본으로 하나만 생성한다. 따라서 &lt;strong&gt;getBean()&lt;/strong&gt; 메소드를 호출하면 계속 동일한 객체를 반환한다. 하지만 설정을 통해 이런 빈의 생성 방식을 조정할 수 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;범위&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;singleton&lt;/td&gt;
      &lt;td&gt;오직 하나의 빈만 생성 (기본 설정)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prototype&lt;/td&gt;
      &lt;td&gt;getBean() 을 호출할 때마다 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;request&lt;/td&gt;
      &lt;td&gt;HTTP 요청이 발생할 때마다 생성, 웹 애플리케이션에서만 이 범위를 설정 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;session&lt;/td&gt;
      &lt;td&gt;HTTP 세션이 생성될 때마다 생성, 웹 애플리케이션에서만 이 범위를 설정 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;globalsession&lt;/td&gt;
      &lt;td&gt;전역 세션이 준비될 때 빈을 생성. 웹 애플리케이션에서만 이 범위를 설정 가능, 포틀릿 컨텍스트에서 사용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;singleton--prototype&quot;&gt;singleton / prototype&lt;/h3&gt;

&lt;p&gt;다음과 같이 scope 속성을 통해 빈 생성 방식을 prototype 형식으로 변경할 수 있다.
&lt;strong&gt;kiaEngine&lt;/strong&gt; 이름의 빈을 getBean 메소드가 호출될 때마다 새로 생성할 것이다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyundaiEngine&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test14.Engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hyundai&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1997&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kiaEngine&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test14.Engine&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kia&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cc&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3000&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/66f30d06aa5dfc7b191963dc2d3bb7a29c9b282b&quot;&gt;[ch08] 8.8 Setting bean scope.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;date-타입-주입&quot;&gt;Date 타입 주입&lt;/h3&gt;

&lt;p&gt;빈 설정 파일은 XML 이므로, 결국 프로퍼티의 값은 문자열로 표현하게 된다.
문자열은 숫자로 변환하기 쉽기 때문에, 숫자 타입의 프로퍼티일 경우 추가 작업없이 자동 변환해주는데에 비해 다른 타입에 대해서는 변환해주지 않는다.&lt;/p&gt;

&lt;p&gt;여기서는 &lt;strong&gt;java.util.Date&lt;/strong&gt; 타입의 프로퍼티 값을 설정한다.
&lt;strong&gt;SimpleDateFormat&lt;/strong&gt; 클래스와 팩토리 메소드 방식을 통해 날짜 값을 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateFormat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.text.SimpleDateFormat&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hankookTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test15.Tire&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createdDate&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateFormat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2014-5-5&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kumhoTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test15.Tire&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kumho&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createdDate&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateFormat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;factory-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2014-1-14&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;constructor-arg 태그의 value는 Tire 클래스 생성자의 파라미터로 들어가는 것이 아니라, 팩토리 메소드로 설정한 SimpleDateFormat의 parse 메소드의 파라미터로 들어간다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/7fcc0817385c60e2d6a7b05de2da553971040008&quot;&gt;[ch08] 8.9 Injection bean of java.util.Date.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;커스텀-프로퍼티-에디터&quot;&gt;커스텀 프로퍼티 에디터&lt;/h3&gt;

&lt;p&gt;java.util.Date 값을 설정한 위의 방식은 날짜 프로퍼티 값을 설정할 때마다 팩토리 메소드 빈을 선언해야 한다는 것이다. 이런 불편한 점을 해소하기 위해, Spring IoC 컨테이너는 &lt;strong&gt;프로퍼티 에디터&lt;/strong&gt; 를 도입하였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로퍼티 에디터: 문자열을 특정 타입의 값으로 변환해주는 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spring 에서는 java.util.Date 처럼 자주 사용하는 타입에 대해 몇 가지 프로퍼티 에디터를 제공한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CustomDateEditor: 날짜 형식의 문자열을 java.util.Date 객체로 변환&lt;/li&gt;
  &lt;li&gt;URLEditor: URL 형식의 문자열을 java.net.URL 객체로 변환&lt;/li&gt;
  &lt;li&gt;그외 프로퍼티 에디터는 &lt;strong&gt;org.springframework.beans.propertyeditors&lt;/strong&gt; 패키지에 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;SimpleDateFormat 빈 생성
    &lt;ul&gt;
      &lt;li&gt;문자열을 java.util.Date 객체를 생성해 줄 SimpleDateFormat 빈 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CustomDateEditor&lt;/strong&gt; 빈 생성
    &lt;ul&gt;
      &lt;li&gt;날짜 프로퍼티 값을 처리해주는 빈 생성, 생성자로 SimpleDateFormat 빈을 주입&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CustomPropertyEditorRegistrar&lt;/strong&gt; 클래스 정의 및 빈 생성
    &lt;ul&gt;
      &lt;li&gt;Spring IoC 컨테이너에 CustomDateEditor 를 설치하기 위해 에디터 등록기 정의가 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;List 객체에 에디터 등록기 add
    &lt;ul&gt;
      &lt;li&gt;최종적으로는 에디터 등록기 리스트를 넘겨줘야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CustomEditorConfigurer&lt;/strong&gt; 객체에 리스트를 넘김
    &lt;ul&gt;
      &lt;li&gt;이 객체는 프로퍼티 에디터 등록기를 실행하여 IoC 컨테이너에 설치한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;custompropertyeditorregistrar-정의&quot;&gt;CustomPropertyEditorRegistrar 정의&lt;/h4&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;PropertyEditorRegistrar&lt;/strong&gt; 를 구현한 CustomPropertyEditorRegistrar 클래스를 정의해야 한다.
이 클래스에는 IoC 컨테이너가 프로퍼티 에디터를 설치할 때 &lt;strong&gt;registerCustomEditors&lt;/strong&gt; 메소드를 호출하는데, 에디터 등록기는 이 메서드를 구현해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomPropertyEditorRegistrar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertyEditorRegistrar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomDateEditor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCustomDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomDateEditor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;customDateEditor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerCustomEditors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyEditorRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customDateEditor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 registerCustomEditors는 java.util.Date 타입에 대해 프로퍼티 에디터를 등록하는데, 이 java.util.Date 타입의 프로퍼티 값을 처리할 때 customDateEditor 가 사용된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;xml-설정&quot;&gt;xml 설정&lt;/h4&gt;

&lt;p&gt;다음과 같이 앞서 정의한 &lt;strong&gt;CustomPropertyEditorRegistrar&lt;/strong&gt; 타입의 빈에 &lt;strong&gt;CustomDateEditor&lt;/strong&gt; 빈을 주입하고, 이 빈을 &lt;strong&gt;CustomEditorConfigurer&lt;/strong&gt; 에 리스트로 프로퍼티를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateFormat&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.text.SimpleDateFormat&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateEditor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.propertyeditors.CustomDateEditor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateFormat&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customPropertyEditorRegistrar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test16.CustomPropertyEditorRegistrar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customDateEditor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dateEditor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;propertyEditorRegistrars&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customPropertyEditorRegistrar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hankookTirme&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test15.Tire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hankook&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createdDate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2014-5-5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kumhoTire&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test15.Tire&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;maker&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Kumho&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;createdDate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2014-1-14&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/0372edf00055ac79432cf18ac27c1d74002efb60&quot;&gt;[ch08] 8.9 Use custom property editor.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-annotations&quot;&gt;Using annotations&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;autowired-basic-usage&quot;&gt;@Autowired basic usage&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;@Autowired&lt;/strong&gt; annotation을 통해 간단히 의존 객체를 주입 가능.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;이 기능을 사용하기 위해 다음과 같이 빈 설정 파일에 다음 객체를 선언해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcess&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 &lt;strong&gt;AutowiredAnnotationBeanPostProcess&lt;/strong&gt; 클래스는 빈의 후 처리기 (post processor)로서 빈을 생성 후 @Autowired 로 선언된 setter를 찾아 호출하는 역할을 수행한다. 파라미터 타입과 일치하는 빈을 찾아 주입해준다. 타입 일치하는 빈이 없거나 2개 이상인 경우, 예외를 발생시킨다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hyundaiEngine&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test17.Engine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hyundai&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exam.test17.Car&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sonata&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook_spring/commit/849d977033d88c2bfd6ba311e5af7119809dd1c8&quot;&gt;[ch08] 8.10 Apply @Autowired annotation.
&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AutowiredAnnotationBeanPostProcessor 객체를 선언하는 대신, 다음과 같이 &lt;strong&gt;annotation-config&lt;/strong&gt; 를 추가하면 사용할 수 있다.
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;autowired-required&quot;&gt;@Autowired required&lt;/h3&gt;

&lt;p&gt;다음과 같이 required 속성을 false로 지정하면 setter에 주입할 빈을 못찾아도 예외가 발생하지 않는다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;qualifier&quot;&gt;@Qualifier&lt;/h3&gt;

&lt;p&gt;@Autowired annotation 사용시, 주입할 수 있는 빈 객체가 여러 개일 경우 예외를 발생시킨다. 이 상황에서 적절한 빈을 주입시킬 수 있게 해주기 위해, &lt;strong&gt;@Qualifier&lt;/strong&gt; annotation을 사용한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마찬가지로 이 annotation을 후처리하기 위해 별도의 후처리를 담당하는 클래스를 정의해야 하지만, context:annotation-config 를 통해 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;annotation&lt;/th&gt;
      &lt;th&gt;post processor&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@Autowired, @Value, @Inject (JSR-330)&lt;/td&gt;
      &lt;td&gt;AutowiredAnnotationBeanPostProcessor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JSR-250 annotation (javax.annotation.*)&lt;/td&gt;
      &lt;td&gt;CommonAnnotationBeanPostProcessor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@PersistenceUnit, @PsersistenceContext&lt;/td&gt;
      &lt;td&gt;PersistenceAnnotationBeanPostProcessor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Required&lt;/td&gt;
      &lt;td&gt;RequiredAnnotationBeanPostProcessor&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;@Qualifier&lt;/strong&gt; annotation을 다음과 같이 사용한다. Annotation 에 들어가는 문자열은 주입할 빈의 id 이다. 빈 컨테이너는 이 id 값과 일치하는 이름을 가진 빈을 찾아 주입한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kiaEngine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;resource&quot;&gt;@Resource&lt;/h3&gt;

&lt;p&gt;간단히 말해, 이 annotation은 &lt;strong&gt;@Autowired + @Qualifier&lt;/strong&gt; 이다. 이름으로 의존 객체를 지정할 경우, 이 annotation을 사용할 것을 권장한다. 단, required 속성이 없으므로 반드시 주입가능한 빈이 있어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kiaEngine&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;빈-자동-등록&quot;&gt;빈 자동 등록&lt;/h2&gt;

&lt;p&gt;스프링에서는 &lt;strong&gt;@Component&lt;/strong&gt; annotation을 사용하여, 이 annotation이 붙은 클래스로부터 객체를 자동 생성하여 빈으로 등록한다. 이 annotation 외에도 클래스의 역할에 따라 붙일 수 있는 annotation을 추가로 제공한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;annotation&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@Component&lt;/td&gt;
      &lt;td&gt;빈 생성 대상이 되는 모든 클래스에 대해 선언 가능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Repository&lt;/td&gt;
      &lt;td&gt;DAO와 같은 persistence 역할을 수행하는 클래스에 선언&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Service&lt;/td&gt;
      &lt;td&gt;서비스 역할, 비즈니스 로직이 들어가는 루틴이 있는 클래스에 선언&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Controller&lt;/td&gt;
      &lt;td&gt;MVC 구조에서 Controller 역할을 수행하는 클래스에 선언&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;위의 annotation을 사용하기 위해, 다음과 같은 태그를 빈 설정 파일에 추가해야 한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kr.co.myproject&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;위에서 base package에 정의된 패키지 하위에 @Component가 선언된 클래스를 모두 빈으로 자동 등록한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;car&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 annotation에서 들어가는 문자열은 빈의 이름이다.&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/30/java_web_programming_05-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/30/java_web_programming_05-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 04: Persistence Framework</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 07&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;persistence-framework&quot;&gt;Persistence Framework&lt;/h1&gt;

&lt;p&gt;JDBC API를 직접 호출할 필요없이, 데이터베이스에 접근하여 CRUD 진행, 개발자 대신에 프레임워크가 JDBC API 호출&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Persistence: 데이터의 지속성, 애플리케이션을 종료하고 다시 실행해도 이전에 저장한 데이터를 다시 로드하는 기술
Persistence Framework: 데이터의 저장, 조회, 변경, 삭제를 다루는 클래스 / 설정 파일 집합&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;SQL Mapper: SQL 문장으로 직접 DB 데이터를 다룸 &lt;strong&gt;(MyBatis)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;ORM (Object-Relational Mapper): 자바 객체를 통해 간접적으로 DB 데이터를 다룸 &lt;strong&gt;(Hibernate, TopLink)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;orm-object-relational-mapper&quot;&gt;ORM (Object-Relational Mapper)&lt;/h2&gt;

&lt;p&gt;프레임워크에서 제공하는 API와 전용 객체 질의어를 통해 데이터를 다룸.
객체 질의어를 사용함으로써, SQL 문장을 몰라도 됨. (DBMS에 맞추어 SQL 문장을 생성)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hibernate 는 HQL 이라는 객체 질의어 제공&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;한계
    &lt;ul&gt;
      &lt;li&gt;테이블과 객체를 연결, 객체를 통해 간접적으로 다루기 위해 DB의 정규화가 잘 되어 있어야 함.&lt;/li&gt;
      &lt;li&gt;DB 특징에 맞추어 최적화를 할 수가 없음
        &lt;ul&gt;
          &lt;li&gt;DBMS는 각자 자신만의 특별한 기능을 전용 SQL을 통해 제공, ORM에서는 SQL 문장을 작성하지 않으므로 활용 불가&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;mybatis&quot;&gt;MyBatis&lt;/h1&gt;

&lt;p&gt;MyBatis는 SQL Mapper를 제공, 개발과 유지보수가 쉽도록 SQL 문장을 코드와 분리.
-&amp;gt; 데이터베이스 프로그래밍을 간결화&lt;/p&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;일반적인 JDBC 프로그래밍&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;update projects set &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; pname = ?,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; contents = ?,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; state = ?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot; where pno = ?&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;MyBatis 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SQL 문을 다루는 문장이 없음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;update projects set
 pname=#{title},
 content=#{content},
 state=#{state},
 where pno=#{no}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같이 pom.xml에 MyBatis 의존성 (version: 3.3.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.3.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;mybatis의-핵심-컴포넌트&quot;&gt;Mybatis의 핵심 컴포넌트&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SqlSession&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;실제 SQL을 실행하는 객체, SQL을 처리하기 위해 JDBC 드라이버 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SqlSessionFactory&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SqlSession 객체 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SqlSessionFactoryBuilder&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mybatis 설정 파일의 내용을 토대로 SqlSessionFactory 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mybatis 설정 파일&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DB 연결정보, 트랜잭션 정보, mybatis 제어 정보등의 설정 포함, SqlSessionFactory 생성시 사용&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SQL Mapper 파일&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SQL 문을 담고 있는 파일, SqlSession 객체가 참조&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sqlsession&quot;&gt;SqlSession&lt;/h2&gt;

&lt;p&gt;SqlSession: SQL 문장을 실행하는 도구&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;직접 생성할 수 없고, SqlSessionFactory를 통해서만 얻을 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;selectList&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;select 문을 실행, 값 객체 (Value Object) 목록을 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;selectOne&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;select 문을 실행, 하나의 값 객체를 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;insert&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;insert 문을 실행, 반환값은 입력한 데이터 개수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;update&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;update 문을 실행, 반환값은 변경한 데이터 개수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;delete&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;delete 문을 실행, 반환값은 삭제한 데이터 개수&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;selectlist&quot;&gt;selectList&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selectList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;sqlId: SQL Mapper의 네임스페이스 이름 + SQL 문의 아이디&lt;/li&gt;
  &lt;li&gt;값이 필요하다면 두 번째 파라미터로 값 객체를 넘김&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqlSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao.selectList&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mapper&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;namespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultMap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;projectResultMap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    select pno, pname, sta_date, end_date, state
    from projects
    order by pno desc
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;insert&quot;&gt;insert&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sqlSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao.insert&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;insert&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;insert&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parameterType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  insert into projects(pname, content, sta_date, end_date, state, cre_date, tags)
  values (#{title}, #{content}, #{startDate}, #{endDate}, 0, now(), #{tags})
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/insert&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;#{} 자리에 property 객체의 프로퍼티 값&lt;/li&gt;
  &lt;li&gt;#{title}의 경우 project 객체의 getTitle() 메소드의 반환값이 놓임
    &lt;blockquote&gt;
      &lt;p&gt;객체의 프로퍼티: 인스턴스 변수를 말하는 것이 아닌, getter / setter를 가리키는 용어. 프로퍼티 이름은 getter / setter 메소드의 이름에서 추출&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;selectone--delete&quot;&gt;selectOne / delete&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sqlSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selectOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao.selectOne&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sqlSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao.delete&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;delete&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parameterType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  delete from projects
  where pno=#{value}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/delete&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Primitive 타입의 경우 각 해당하는 타입의 랩퍼 클래스 객체로 auto-boxing (int -&amp;gt; Integer)&lt;/li&gt;
  &lt;li&gt;SQL mapper에서 사용시, #{}에 들어갈 이름으로 아무 이름이나 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;commit--rollback&quot;&gt;commit / rollback&lt;/h3&gt;

&lt;p&gt;DBMS는 insert / update / delete 문을 실행할 때 그 작업 결과를 임시 데이터베이스에 보관
-&amp;gt; 클라이언트의 요청이 있을 때 운영 데이터베이스에 반영&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;commit: 임시 데이터베이스에 보관된 작업 결과를 운영 데이터베이스에 적용 요청&lt;/li&gt;
  &lt;li&gt;rollback: 임시 데이터베이스의 작업 결과를 반영하지 않고 취소 요청&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;autocommit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;자동으로 commit 하고 싶을 때 다음과 같이 지정&lt;/li&gt;
      &lt;li&gt;트랜잭션을 다룰 수는 없음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SqlSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqlSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SqlSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sql-mapper&quot;&gt;SQL Mapper&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mapper&quot;&gt;&amp;lt;mapper&amp;gt;&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;mapper&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;namespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.dao.ProjectDao&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/mapper&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;namespace 속성은 자바의 패키지처럼 SQL문을 묶는 용도로 사용. 모든 SQL 문장은 &amp;lt;mapper&amp;gt; 태그에 놓임&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;select-insert-update-delete&quot;&gt;&amp;lt;select&amp;gt;, &amp;lt;insert&amp;gt;, &amp;lt;update&amp;gt;, &amp;lt;delete&amp;gt;&lt;/h3&gt;

&lt;p&gt;각 select / insert / update / delete 문을 각 태그에 맞추어 사용&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;id 를 통해 각 SQL 문을 구분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;resulttype&quot;&gt;resultType&lt;/h3&gt;

&lt;p&gt;select 문을 실행하면, 결과가 생성되는데 이 결과를 담을 객체를 지정하는 속성&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.vo.Project&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;보통 클래스의 이름 (full qualified name) 이 온다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 mybatis 설정 파일에 다음과 같이 alias가 설정되어 있다면 그 alias에 정의된 이름을 사용 가능&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;typeAliases&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;typeAlias&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spms.vo.Project&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alias=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/typeAliases&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mybatis는 select 결과를 저장하고자, &lt;strong&gt;resultType&lt;/strong&gt; 에 선언된 클래스의 인스턴스를 생성한다.
그리고 각 컬럼에 대응하는 &lt;strong&gt;setter&lt;/strong&gt; 메소드를 찾아 호출하여 컬럼 값을 인스턴스의 필드에 저장한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;만약 해당하는 setter가 없으면 그 컬럼 값은 저장되지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;db-column-이름-및-setter-불일치-해결&quot;&gt;DB column 이름 및 setter 불일치 해결&lt;/h3&gt;

&lt;p&gt;위에서 해당하는 setter가 없으면 그 컬럼 값은 저장되지 않는데 다음 두 가지 방법으로 해결&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SQL 문에 as를 통한 별명 사용&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  select
   PNO as no,
   PNAME as title,
   ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&amp;lt;resultMap&amp;gt;
SQL 문에 각 컬럼마다 별명을 붙이는 대신, &amp;lt;resultMap&amp;gt; 태그를 통해 컬럼과 연결될 &lt;strong&gt;setter&lt;/strong&gt; 메소드 정의&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resultMap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;project&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;projectResultMap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PNO&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PNAME&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STA_DATE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;startDate&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;javaType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java.sql.Date&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resultMap&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;lt;resultMap&amp;gt; 태그의 type: 컬럼 데이터를 저장할 클래스의 이름 또는 별명&lt;/li&gt;
  &lt;li&gt;&amp;lt;result&amp;gt; 태그
    &lt;ul&gt;
      &lt;li&gt;컬럼과 &lt;strong&gt;setter&lt;/strong&gt; 메소드의 연결을 정의&lt;/li&gt;
      &lt;li&gt;column 에는 컬럼 이름 지정 / property 에는 객체의 프로퍼티 이름 지정&lt;/li&gt;
      &lt;li&gt;javaType: 컬럼의 값을 특정 자바 객체로 변환, 지정하지 않을 경우 setter 메소드의 파라미터 타입으로 변환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&amp;lt;id&amp;gt; 태그
    &lt;ul&gt;
      &lt;li&gt;이 태그에서 지정한 프로퍼티는 객체 식별자로 사용됨&lt;/li&gt;
      &lt;li&gt;select를 통해 생성된 결과 객체들은 캐싱해두는데, 이 임시 저장된 객체를 구분하기 위한 값으로 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;MyBatis는 결과 레코드에 대해 객체 캐싱을 제공. 결과 객체를 풀 (pool) 에 보관해두었다가, 다시 질의가 들어오면 객체 풀에 저장된 객체 중에서 &lt;strong&gt;id&lt;/strong&gt; 에 지정된 컬럼의 값과 일치하는 객체를 찾음&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;select-태그에-resultmap-적용&quot;&gt;&amp;lt;select&amp;gt; 태그에 resultMap 적용&lt;/h3&gt;

&lt;p&gt;select 결과에 대해 &amp;lt;resultMap&amp;gt; 에 정의된 대로 자바 객체를 생성하고 싶다면, 다음과 같이 resultMap 속성에 id 지정&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;selectList&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultMap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;projectResultMap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/28/java_web_programming_04-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/28/java_web_programming_04-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming: Custom ApplicationContext</title>
        <description>&lt;h1 id=&quot;custom-applicationcontext&quot;&gt;Custom ApplicationContext&lt;/h1&gt;

&lt;p&gt;이 포스트는 자바 웹 개발을 진행할 때 가장 많이 사용하는 framework인 Spring에서의 IoC 컨테이너, 즉 ApplicationContext에 대한 이해를 하고자, &lt;strong&gt;Spring을 사용하지 않고 특정 파일로부터 내용을 읽어 자동으로 필요한 빈 생성 및 의존관계 주입을 수행하는 “Custom ApplicationContext”&lt;/strong&gt; 를 직접 구현하는 내용을 다룬 포스트이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;property-파일&quot;&gt;Property 파일&lt;/h2&gt;

&lt;p&gt;Spring MVC에서 주로 사용하는, 스프링 빈 정보를 담고 있는 일명 ApplicationContext…xml 과 같은 파일을 만들어보자. 여기서는 간단하게 &lt;strong&gt;key=value&lt;/strong&gt; 로 구성하도록 한다. 가령 다음과 같이 작성할 수 있을 것이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dataSource=org.apache.commons.dbcp.BasicDataSource
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 key는 사용하고자 하는 빈의 이름, 즉 ID 이며 value는 해당 빈의 &lt;strong&gt;fully qualified class name&lt;/strong&gt; 으로 지정한다.&lt;/li&gt;
  &lt;li&gt;ApplicationContext는 이 파일을 읽어 해당 &lt;strong&gt;빈의 이름을 key 값으로 삼고 value에 있는 클래스 이름을 바탕으로 빈을 생성&lt;/strong&gt;하도록 할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-annotation&quot;&gt;Custom Annotation&lt;/h2&gt;

&lt;p&gt;Spring에서는 ApplicationContext.xml로부터 정보를 읽어 빈 생성 및 주입을 하지만, annotation을 통해 스프링 빈을 선언하고 다음과 같이 xml에 정의하면 자동으로 특정 annotation이 선언된 클래스를 검색하여 빈을 관리하다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.nhnent.spring&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;strong&gt;@Component&lt;/strong&gt; 가 선언된 클래스에 대해서 Spring은 자동으로 빈 생성하고 의존관계를 주입할 것이다.
component-scan에 대한 자세한 내용은 다음 글을 참조하자.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://thswave.github.io/spring/2015/02/02/spring-mvc-annotaion.html&quot;&gt;스프링 &amp;lt;context:component-scan&amp;gt; 분석&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기서도 &lt;strong&gt;@Component&lt;/strong&gt; 라는 이름으로 custom annotation을 다음과 같이 정의한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.annotation.Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.annotation.RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위에서 value 라는 이름으로 들어가는 값은 해당 annotation이 선언되는 클래스의 ID, 즉 빈 이름으로 사용할 것이다.&lt;/li&gt;
  &lt;li&gt;ApplicationContext는 이 annotation이 선언된 클래스를 스캔한 다음에, 해당 빈 이름으로 인스턴스를 생성하도록 할 것이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@Retention&lt;/strong&gt; annotation은 해당 annotation의 정보를 언제까지 유지할 것인지 지정한다. 여기서는 &lt;strong&gt;RUNTIME&lt;/strong&gt; 으로 지정하여 실행 중일 때도 annotation 정보를 참조할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-contextloaderlistener&quot;&gt;Custom ContextLoaderListener&lt;/h2&gt;

&lt;p&gt;Tomcat과 같은 ServletContainer는 웹 애플리케이션의 상태를 모니터링 할 수 있도록 &lt;strong&gt;웹 애플리케이션의 시작에서 종료까지, 주요한 사건에 대한 알림 기능을 제공한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-27-custom_application_context/00.jpg&quot; alt=&quot;00.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 &lt;strong&gt;ServletContextListener&lt;/strong&gt; 라고 하는데, Spring에서는 ApplicationContext를 등록하고 DB 연결 기능이나 로깅 같은 서비스를 만드는데 이 ServletContextListener 인터페이스를 구현한 &lt;strong&gt;ContextLoaderListener&lt;/strong&gt; 를 제공한다.
Spring 으로 웹 개발을 하면 으레 web.xml에는 다음과 같이 ContextLoaderListener 선언이 있을 것이다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Creates the Spring Container shared by all Servlets and Filters --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;여기서도 Custom ContextLoaderListener 를 구현하여, &lt;strong&gt;애플리케이션이 시작될 때 ApplicationContext가 프로퍼티와 annotation을 통해 필요한 빈 생성 및 의존관계 주입을 진행&lt;/strong&gt; 하도록 할 것이다.&lt;/p&gt;

&lt;p&gt;다음과 같이 ServletContextListener 인터페이스로부터 구현하도록 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@WebListener&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Custom ApplicationContext 선언&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ApplicationContext가 property 파일이나 Annotation을 통해 빈 생성 및 의존 관계 주입&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextDestroyed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// DB 연결 종료와 같은 자원 해제 코드&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;contextInitialized&lt;/strong&gt; 메소드는 ServletContainer가 실행될 때 자동으로 호출하는 부분이다. 여기서 ApplicationContext는 정의한 property 파일과 annotation을 통해 클래스 스캔 및 빈 생성, 의존관계 주입을 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;contextDestroyed&lt;/strong&gt; 메소드는 애플리케이션이 종료될 때 호출된다. 여기서 DB 연결 종료나 자원 해제 코드가 들어갈 것이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;@WebListener&lt;/strong&gt; annotation은 web.xml에 등록할 필요없이 해당 클래스 오브젝트를 등록할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;custom-applicationcontext-정의&quot;&gt;Custom ApplicationContext 정의&lt;/h2&gt;

&lt;p&gt;Custom ApplicationContext는 위에서 준비한 property 파일과 @Component annotation, 그리고 custom ContextLoaderListener를 통해 자동으로 빈을 생성하고 빈 간의 의존관계를 주입하도록 구현할 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;key--value-를-통한-빈-관리&quot;&gt;key / value 를 통한 빈 관리&lt;/h3&gt;

&lt;p&gt;앞서 만든 property 파일에는 &lt;strong&gt;key=value&lt;/strong&gt; 쌍으로 빈 정보를 정의하였고, @Component annotation 또한 annotation 정보로 빈의 이름을 정의하도록 하였다.&lt;/p&gt;

&lt;p&gt;여기서 ApplicationContext는 &lt;strong&gt;key를 빈의 이름으로 value를 해당 빈 오브젝트&lt;/strong&gt; 로 관리하도록 할 것이다. 그럼 다음과 같이 ApplicationContext를 구현할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;Hashtable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hashtable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Hashtable 타입으로 정의된 objTable을 통해 빈의 이름을 key 값으로 가지고, 해당 빈의 인스턴스를 value로 가지도록 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;getBean&lt;/strong&gt; 메소드를 통해 해당 빈의 이름이 파라미터로 넘어오면 해당 객체를 리턴하도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;property-파일로부터-빈-생성&quot;&gt;property 파일로부터 빈 생성&lt;/h3&gt;

&lt;p&gt;먼저 ApplicationContext가 property 파일을 읽어 빈 생성 및 관리를 할 수 있도록 하자.
앞서 만든 property 파일은 다음과 같이 &lt;strong&gt;key=value&lt;/strong&gt; 쌍으로 만들었다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dataSource=org.apache.commons.dbcp.BasicDataSource
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 파일을 쉽게 읽을 수 있도록 Java 에서는 &lt;strong&gt;Properties&lt;/strong&gt; 클래스를 제공한다. 위와 같은 파일이 있을 때 코드 상에서 다음과 같이 쉽게 파일을 읽어 key / value 를 로드할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ApplicationContext에서도 해당 클래스를 통해 property 파일을 읽어 value, 즉 클래스 이름을 통해 빈의 인스턴스를 생성하고 &lt;strong&gt;objTable&lt;/strong&gt; 에 key (빈의 이름)으로 관리하도록 다음과 같이 구현한다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;prepareObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext 생성자에서 &lt;strong&gt;propertiesPath&lt;/strong&gt;, 즉 property 파일의 경로를 받아 해당 파일을 읽어 빈을 생성하고, &lt;strong&gt;objTable&lt;/strong&gt; 에 등록하도록 하였다. 이 생성자는 아까 정의한 custom ContextLoaderListener 에서 호출할 것이다.&lt;/li&gt;
  &lt;li&gt;Properties 클래스를 통해 key 값으로 해당 value, 즉 클래스 이름을 얻어 인스턴스를 생성하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;annotation을-통한-빈-생성&quot;&gt;Annotation을 통한 빈 생성&lt;/h3&gt;

&lt;p&gt;이번에는 아까 정의한 &lt;strong&gt;@Component&lt;/strong&gt; annotation 을 통해 빈 생성을 하도록 하자. 여기서는 &lt;strong&gt;리플렉션&lt;/strong&gt; 이라는 클래스의 정보를 분석하는 기법을 사용할 것이다. 예를 들어 자바 클래스 가진 모든 필드의 이름을 얻거나 메소드의 리스트를 얻을 수 있다.&lt;/p&gt;

&lt;p&gt;자바에서는 기본적으로 &lt;strong&gt;java.lang.reflect&lt;/strong&gt; 패키지를 통해 리플렉션 기능을 제공하지만 여기서는 &lt;strong&gt;Reflections&lt;/strong&gt; 라이브러리를 사용한다. 특정 패키지를 베이스로 하여 모든 클래스를 검색하는 기능을 필요한데 자바에서 제공하는 기본 리플렉션 기능으로는 코드가 길어지기 때문이다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;Reflections&lt;/strong&gt; 라이브러리를 사용하기 위해 다음과 같이 의존성을 추가한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.reflections&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;reflections&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.9.10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reflections 라이브러리의 사용법은 다음 사이트를 참조한다. &lt;strong&gt;&lt;a href=&quot;http://static.javadoc.io/org.reflections/reflections/0.9.10/org/reflections/Reflections.html&quot;&gt;Class Reflections&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 라이브러리를 써서 ApplicationContext는 특정 annotation &lt;strong&gt;(여기서는 @Component)&lt;/strong&gt; 이 선언된 모든 클래스를 검색하여 인스턴스를 생성하도록 한다. 다음과 같이 구현할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prepareAnnotationObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prepareAnnotationObjects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Reflections&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reflections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reflector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTypesAnnotatedWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Reflections 클래스의 &lt;strong&gt;getTypesAnnotatedWith&lt;/strong&gt; 메소드를 통해 해당 annotation의 class를 파라미터로 넘기면 이 annotation이 정의된 모든 클래스의 리스트를 Set 형태로 리턴한다.&lt;/li&gt;
  &lt;li&gt;리턴된 &lt;strong&gt;Set을 통해 클래스 이름을 얻어 인스턴스를 생성하고, @Component annotation의 value 값을 통해 해당 빈의 이름을 얻어 objTable에 등록&lt;/strong&gt;하였다. 따라서 @Component annotation을 사용할 때 다음과 같이 선언해야 한다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCustomMemberDao&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;위와 같이 빈의 이름을 설정하면 ApplicationContext는 해당 이름으로 빈을 등록할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의존관계-주입&quot;&gt;의존관계 주입&lt;/h3&gt;

&lt;p&gt;Property 파일 및 Annotation을 통해 빈을 생성했으니, 이제 등록한 빈 간의 의존관계를 주입할 차례이다.&lt;/p&gt;

&lt;p&gt;여기서는 등록한 빈 오브젝트의 &lt;strong&gt;Class&lt;/strong&gt;를 통해 메소드 리스트를 얻어 &lt;strong&gt;set&lt;/strong&gt; 으로 시작하는 모든 메소드, 즉 &lt;strong&gt;setter&lt;/strong&gt;를 모두 검색하여 해당 메소드의 파라미터 타입과 일치하는 빈을 서로 주입하도록 할 것이다.&lt;/p&gt;

&lt;p&gt;다음과 같은 메소드를 통해 특정 오브젝트의 클래스 정보, 메소드 리스트, 파라미터 타입을 얻을 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findObjectByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.getClass().getMethods()&lt;/strong&gt; 를 통해 메소드 리스트를 얻는다.&lt;/li&gt;
  &lt;li&gt;메소드마다 &lt;strong&gt;.getName().startsWith(“set”)&lt;/strong&gt; 을 통해 setter 인지 검사하고, 찾으면 &lt;strong&gt;getParameterTypes()[0]&lt;/strong&gt; 를 통해 파라미터 타입을 얻는다. getParameterTypes 메소드는 파라미터 리스트를 배열로 리턴한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이를 이용해 다음과 같이 ApplicationContext 클래스에서 구현할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;injectDependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;injectDependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;callSetter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callSetter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;set&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findObjectByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findObjectByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext 생성자의 마지막에 빈 간의 의존관계를 설정하도록 하였다.&lt;/li&gt;
  &lt;li&gt;의존관계 설정시, setter를 찾아 해당 파라미터 타입과 일치하는 빈, 즉 &lt;strong&gt;isInstance&lt;/strong&gt; 메소드를 통해 해당 빈이 그 타입의 인스턴스이면 &lt;strong&gt;invoke&lt;/strong&gt; 를 통해 해당 빈이 주입될 수 있도록 하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;contextloaderlistener-에서의-applicationcontext-호출&quot;&gt;ContextLoaderListener 에서의 ApplicationContext 호출&lt;/h3&gt;

&lt;p&gt;Spring으로 웹 개발 진행할 때 web.xml에서 빈 정보를 담는 context xml 의 path를 다음과 같이 지정한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;classpath:/spring/root-context.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서도 마찬가지로 web.xml에 property 파일이 저장된 path를 지정하고 ContextLoaderListener가 이 path를 ApplicationContext 생성자로 넘겨 property 파일을 읽을 수 있도록 한다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;/WEB-INF/application-context.properties&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 &lt;strong&gt;contextInitialized&lt;/strong&gt; 메소드에서 &lt;strong&gt;contextConfigLocation&lt;/strong&gt; 값을 얻은 후에 ApplicationContext를 생성하도록 하여, 웹 애플리케이션이 시작될 때 자동으로 빈 생성 및 의존관계를 주입할 수 있도록 하였다.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextConfigLocation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;applicationContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertiesPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring 에서 제공하는 여러가지 ApplicationContext 와 비교하면 아주 간단한 로직이지만 Spring Framework에서 어떻게 컨테이너가 빈을 생성하고 의존관계를 주입할 수 있는지 이해를 쉽게 이해할 수 있을 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;해당 내용은 Java Web Development Workbook Chapter. 06 의 내용을 바탕으로 작성된 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/27/custom_application_context-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/27/custom_application_context-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>spring</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 03: Mini MVC Framework</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 06&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;front-controller&quot;&gt;Front Controller&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;컨트롤러를 만들다 보면 요청 데이터를 처리하는 코드나, 모델과 뷰 제어코드가 중복되는 경우가 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;front-controller-pattern&quot;&gt;Front Controller Pattern&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-26-java_web_programming_03/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;웹 브라우저에서 요청들어올 때, &lt;strong&gt;프론트 컨트롤러&lt;/strong&gt; 에서 요청을 받음
    &lt;ul&gt;
      &lt;li&gt;VO 객체 생성 후, 데이터를 담음&lt;/li&gt;
      &lt;li&gt;ServletRequest 보관함에 VO 객체 저장&lt;/li&gt;
      &lt;li&gt;요청 URL에 따라 페이지 컨트롤러로 위임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;페이지 컨트롤러는 DAO를 사용하여 VO 객체 처리
    &lt;ul&gt;
      &lt;li&gt;화면 생성을 위한 데이터 준비 후, ServletRequest 보관소에 저장&lt;/li&gt;
      &lt;li&gt;프론트 컨트롤러로 뷰 정보를 넘김&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프론트 컨트롤러는 JSP로 실행 위임
    &lt;ul&gt;
      &lt;li&gt;오류 발생시 error 페이지로 실행 위임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JSP는 데이터를 가지고 화면 생성 후 출력&lt;/li&gt;
  &lt;li&gt;프론트 컨트롤러는 응답 완료&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프론트 컨트롤러 디자인 패턴에서는 두 개의 컨트롤러를 사용하여 웹 브라우저 요청 처리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프론트 컨트롤러: VO 객체 준비, 뷰 컴포넌트로 위임, 오류 처리 등 공통 작업&lt;/li&gt;
  &lt;li&gt;페이지 컨트롤러: 요청한 페이지만을 위한 작업 수행&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;디자인 패턴: 시스템이 운영되면서 검증된 방법을 체계적으로 분류되어 정의된 것&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;프레임워크-디자인-패턴을-적용해-만든-사례-중-베스트를-모아-하나의-개발-틀로-표준화&quot;&gt;프레임워크: 디자인 패턴을 적용해 만든 사례 중 베스트를 모아 하나의 개발 틀로 표준화&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;구현&quot;&gt;구현&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/6d803f61cd555875806931046701c97d8194d088&quot;&gt;[ch06] 6.1 Implemented DispatcherServlet.
&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/df970742bdb81726048959595023f57ea1873e46&quot;&gt;[ch06] 6.1 Updated servlets according to DispatcherServlet.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HttpServlet 요청 처리 방법
    &lt;ul&gt;
      &lt;li&gt;HttpServlet의 service 메소드 오버라이딩 (GenericServlet의 service 메소드가 아님)
        &lt;ul&gt;
          &lt;li&gt;매개변수로 ServletRequest, ServletResponse가 아닌 &lt;strong&gt;HttpServletRequest&lt;/strong&gt;, &lt;strong&gt;HttpServletResponse&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;클라이언트로부터 요청 발생
        &lt;ul&gt;
          &lt;li&gt;서블릿 컨테이너는 규칙에 따라 Servlet 인터페이스의 &lt;strong&gt;service&lt;/strong&gt; 메소드 호출&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;service&lt;/strong&gt; (ServletRequest, ServletResponse) 메소드는 HttpServlet 클래스에 추가된
&lt;strong&gt;service&lt;/strong&gt; (HttpServletRequest, HttpServletResponse) 메소드 호출.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;service&lt;/strong&gt; (HttpServletRequest, HttpServletResponse) 메소드는 HTTP 요청 프로토콜 분석 후 &lt;strong&gt;doGet / doPost&lt;/strong&gt; 호출&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;요청-url에서-서블릿-경로-알아내기&quot;&gt;요청 URL에서 서블릿 경로 알아내기&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프론트 컨트롤러의 역할: 클라이언트의 요청을 적절한 페이지 컨트롤러에게 전달
    &lt;ul&gt;
      &lt;li&gt;요청을 처리할 서블릿의 URL을 알아내야 함.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HttpServletRequest의 메소드를 이용, 요청 URL에서 특정 정보를 추출가능
    &lt;ul&gt;
      &lt;li&gt;ex: http://localhost:9999/web06/member/list.do?pageNo=1&amp;amp;pageSize=10
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;메서드&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
      &lt;th&gt;반환값&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;getRequestURL()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;요청 URL 리턴 (단, 매개변수 제외)&lt;/td&gt;
      &lt;td&gt;http://localhost:9999/web06/member/list.do&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getRequestURI()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;서버 주소를 제외한 URL&lt;/td&gt;
      &lt;td&gt;/web06/member/list.do&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getContextPath()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;웹 애플리케이션 경로&lt;/td&gt;
      &lt;td&gt;/web06&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getServletPath()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;서블릿 경로&lt;/td&gt;
      &lt;td&gt;/member/list.do&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getQueryString()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;요청 매개변수 정보&lt;/td&gt;
      &lt;td&gt;pageNo=1&amp;amp;pageSize=10&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;controller-추가&quot;&gt;Controller 추가&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;페이지 컨트롤러를 서블릿으로 만들 필요가 없음
    &lt;ul&gt;
      &lt;li&gt;일반 클래스로 전환, 메소드로 호출&lt;/li&gt;
      &lt;li&gt;프론트 컨트롤러와 일반 클래스로 전환된 컨트롤러 사이에 인터페이스 정의 및 구현
&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/819632323644a2951361b01eb926d373e60dac1d&quot;&gt;[ch06] 6.2 Implemented controllers.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;di를-이용한-빈-의존성-관리&quot;&gt;DI를 이용한 빈 의존성 관리&lt;/h2&gt;

&lt;p&gt;특정 작업 수행시, 사용하는 객체를 &lt;strong&gt;“의존객체”&lt;/strong&gt;, 이 관계를 &lt;strong&gt;의존관계&lt;/strong&gt; 라고 한다.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-26-java_web_programming_03/01.jpg&quot; alt=&quot;01.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;B 객체를 A객체가 사용할 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의존-객체와의-결합도-증가에-따른-문제&quot;&gt;의존 객체와의 결합도 증가에 따른 문제&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;의존 객체 사용시, 사용하는 쪽과 객체사이의 결합도가 높으면 변경이 발생할 때 바로 영향을 받음&lt;/li&gt;
  &lt;li&gt;의존 객체를 다른 객체로 대체하기가 어려움&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;의존-객체를-외부에서-주입&quot;&gt;의존 객체를 외부에서 주입&lt;/h3&gt;

&lt;p&gt;의존객체를 직접 생성 및 관리하는 것이 아닌 &lt;strong&gt;외부에서 주입&lt;/strong&gt; 받는 방식
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-26-java_web_programming_03/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;의존 객체를 전문으로 관리하는 &lt;strong&gt;빈 컨테이너&lt;/strong&gt; 를 사용&lt;/li&gt;
  &lt;li&gt;빈 컨테이너: 의존 객체를 관리 및 주입해주는 역할 (DI, Dependency Injection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터페이스-사용&quot;&gt;인터페이스 사용&lt;/h3&gt;

&lt;p&gt;의존객체를 사용시, 구체적인 클래스 대신 &lt;strong&gt;인터페이스를 사용&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터페이스를 통해 의존객체가 갖추어야할 규격을 정의, 유연성 확보&lt;/li&gt;
  &lt;li&gt;사용할 의존객체에 대한 선택 폭을 넓히고, 확장성 고려, 교체하기 쉬움
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-26-java_web_programming_03/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/aa3e526bb5d73d2a8390e9f2dc32e4bd24ec9551&quot;&gt;[ch06] 6.3 Use dependency injection on MemberDao and interface.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;리플렉션-api를-이용한-프론트-컨트롤러-개선&quot;&gt;리플렉션 API를 이용한 프론트 컨트롤러 개선&lt;/h2&gt;

&lt;p&gt;다음과 같이 페이지 컨트롤러를 추가할 때마다 코드를 변경해야 함.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/list.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/add.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;member&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/update.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;databinding-정의&quot;&gt;DataBinding 정의&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ServletRequestBinder&lt;/strong&gt; 를 이용하여 페이지 컨트롤러가 원하는 형식의 값 VO 객체를 생성&lt;/li&gt;
  &lt;li&gt;페이지 컨트롤러가 원하는 데이터 형식을 알아내기 위한 인터페이스 정의
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataBinding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDataBinders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new Object[] {&quot;Data name&quot;, Data Type, &quot;Data name&quot;, Data Type, ...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Object 배열은 데이터의 이름과 타입 정보를 담은 배열&lt;/li&gt;
  &lt;li&gt;프론트 컨트롤러가 이 배열을 통해 데이터 정보를 얻어옴&lt;/li&gt;
  &lt;li&gt;프론트 컨트롤러는 &lt;strong&gt;Reflection API&lt;/strong&gt; 를 통해 해당 타입의 오브젝트를 생성 후, request 파라미터로부터 값을 오브젝트에 주입&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;reflection-api&quot;&gt;Reflection API&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;클래스나 메소드의 내부 구조를 조사할 때 사용&lt;/li&gt;
  &lt;li&gt;이 API를 사용하여 컨트롤러가 필요한 타입을 조사하여 알맞게 값을 주입시켜줄 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/3e216743932df295d0be19ca948aa4ec38e77a55&quot;&gt;[ch06] 6.4 Used reflection API.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;프로퍼티를-이용한-객체-관리&quot;&gt;프로퍼티를 이용한 객체 관리&lt;/h2&gt;

&lt;p&gt;다음과 같이 DAO나 페이지 컨트롤러를 추가할 때마다 ContextLoaderListener에서 코드를 변경해야 함&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySqlMemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/auth/login.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberLoginController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/auth/logout.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberLogoutController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/member/list.do&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberListController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;applicationcontext-를-통한-객체-생성-및-관리&quot;&gt;ApplicationContext 를 통한 객체 생성 및 관리&lt;/h3&gt;

&lt;p&gt;ContextLoaderListener 에서 ApplicationContext를 생성 및 객체 관리&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ApplicationContext 생성&lt;/li&gt;
  &lt;li&gt;ApplicationContext 는 프로퍼티 파일을 로드&lt;/li&gt;
  &lt;li&gt;프로퍼티 파일에 선언되어 있는대로 객체 생성 및 객체 테이블에 저장&lt;/li&gt;
  &lt;li&gt;객체 테이블에 저장된 각 객체에 대해 의존 객체를 찾아 주입
    &lt;ul&gt;
      &lt;li&gt;타입과 일치하는 의존 객체를 찾아 주입&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;프로퍼티-파일의-로딩&quot;&gt;프로퍼티 파일의 로딩&lt;/h4&gt;

&lt;p&gt;ApplicationContext 생성자가 호출될 때, 매개변수로 지정된 프로퍼티 파일의 내용을 로딩.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;java.util.Properties&lt;/strong&gt; 사용&lt;/li&gt;
  &lt;li&gt;Properties 는 “이름=값” 형태로 된 파일을 다룰 때 사용하는 클래스
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;load()&lt;/strong&gt;: 파일을 읽어, 프로퍼티 내용을 키-값 형태로 맵에 보관&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;keySet()&lt;/strong&gt;: 키 목록 반환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;key 값을 통해 value (type)을 얻어 필요한 빈을 생성&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;objTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/00751f14e53c3647c110cf142237b60c93fac948&quot;&gt;[ch06] 6.5 Used ApplicationContext.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;annotation을-이용한-객체-관리&quot;&gt;Annotation을 이용한 객체 관리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Annotation
    &lt;ul&gt;
      &lt;li&gt;컴파일이나 배포, 실행 시 참조할 수 있는 특별한 주석&lt;/li&gt;
      &lt;li&gt;클래스나 필드, 메소드에 대해 부가 정보를 등록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ApplicationContext는 자바 classpath를 뒤져서 annotation이 붙은 클래스를 검색&lt;/li&gt;
  &lt;li&gt;Annotation에 지정된 정보에 따라 인스턴스 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.annotation.Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.annotation.RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;interface 키워드 앞에 &lt;strong&gt;@&lt;/strong&gt; 가 붙음&lt;/li&gt;
  &lt;li&gt;객체 이름을 저장하는 용도로 사용할 &lt;strong&gt;“value”&lt;/strong&gt; 속성을 정의
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;: 기본값을 지정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;annotation-유지-정책&quot;&gt;Annotation 유지 정책&lt;/h3&gt;

&lt;p&gt;Annotation 정보를 언제까지 유지할 것인지 설정&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;RetentionPolicy.SOURCE&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;소스파일에서만 유지, 컴파일할 때 제거됨, 클래스 파일에 annotation 정보가 없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RetentionPolicy.CLASS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;클래스파일에 기록됨, 실행시에는 유지되지 않음, 실행 중일 때는 클래스에 기록된 정보를 꺼낼 수 없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RetentionPolicy.RUNTIME&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;클래스파일에 기록됨, 실행시에도 유지됨. 실행 중일 때도 정보 참조 가능&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Annotation 정책을 지정하지 않으면 디폴트로 RetentionPolicy.CLASS 로 지정됨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;reflections-package를-사용&quot;&gt;Reflections package를 사용&lt;/h4&gt;

&lt;p&gt;자바 classpath를 뒤져서 클래스 정보를 추출하기 위해 &lt;strong&gt;“Reflections”&lt;/strong&gt; 오픈소스 라이브러리 사용&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자바에서 제공하는 Reflection API 사용하는 것보다 쉽게 추출 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.reflections&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;reflections&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.9.10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/f1c8738a6a6c859c496508981712ad6fbb3d4cd9&quot;&gt;[ch06] 6.6 Use annotation to regiter bean with Reflections library.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;project-관리-구현&quot;&gt;Project 관리 구현&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/52af366be24e86ddd6b2b4d3f714a1dd58a31dc1&quot;&gt;[ch06] 6.7 Exercise #0, Implemented printing the list of projects.&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/f23c69a9d1c81f2669278855827763c24d5d6f4d&quot;&gt;[ch06] 6.7 Exercise #1, Implemented the management of projects.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/26/java_web_programming_03-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/26/java_web_programming_03-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 02: MVC Architecture</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 05&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mvc-model-view-architecture&quot;&gt;MVC (Model-View-Architecture)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Model
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;비즈니스 로직 및 데이터 처리&lt;/strong&gt; 담당&lt;/li&gt;
      &lt;li&gt;사용자가 요청한 데이터를 다루는 일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;View
    &lt;ul&gt;
      &lt;li&gt;모델이 처리한 결과, &lt;strong&gt;화면 생성&lt;/strong&gt; 담당&lt;/li&gt;
      &lt;li&gt;모델이 처리한 데이터나 작업 결과를 가지고 화면을 만듬&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controller
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;요청 처리 및 흐름 제어&lt;/strong&gt; 담당&lt;/li&gt;
      &lt;li&gt;클라이언트 요청받을 시, 모델 컴포넌트 호출
        &lt;ul&gt;
          &lt;li&gt;모델에 데이터 전달하기 쉽게 가공&lt;/li&gt;
          &lt;li&gt;결과에 대한 화면 생성하도록 뷰에 전달&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;화면 생성 부분을 별도로 분리하였으므로, 뷰 교체만으로 사용자 화면을 쉽게 변경 가능&lt;/li&gt;
      &lt;li&gt;원 소스 멀티 유즈 구현 가능
        &lt;ul&gt;
          &lt;li&gt;모델 컴포넌트가 작업한 결과를 다양한 뷰 컴포넌트로 클라이언트가 원하는 형식으로 출력 가능&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;코드 재사용 용이
        &lt;ul&gt;
          &lt;li&gt;재사용가능하므로 개발속도가 빨라짐&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;mvc-구동-원리&quot;&gt;MVC 구동 원리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MVC 구조 (웹 애플리케이션)
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 서버가 요청을 받아 서블릿 컨테이너로 넘김.&lt;/li&gt;
  &lt;li&gt;서블릿 컨테이너는 서블릿 찾아서 실행&lt;/li&gt;
  &lt;li&gt;서블릿(Controller)은 실제 업무를 처리하는 모델 자바 객체의 메서드 호출
    &lt;ul&gt;
      &lt;li&gt;웹 브라우저가 보낸 데이터를 저장하거나 변경해야 한다면, 그 &lt;strong&gt;데이터를 가공하여 값 객체&lt;/strong&gt; 를 생성 후 모델 객체의 메서드 호출 때 인자로 넘김&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;모델 객체는 JDBC를 활용, &lt;strong&gt;값 객체&lt;/strong&gt; 를 데이터베이스에 넘기거나 질의 결과를 받아서 값 객체로 만들어 반환&lt;/li&gt;
  &lt;li&gt;서블릿은 결과를 &lt;strong&gt;JSP&lt;/strong&gt; 에 전달&lt;/li&gt;
  &lt;li&gt;JSP는 서블릿으로부터 받은 값 객체를 참조하여 출력할 결과 화면을 만듬&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jsp&quot;&gt;JSP&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 브라우저가 출력할 &lt;strong&gt;화면을 생성&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서블릿이 직접 출력 함수를 이용해 화면을 만드는 것보다 용이.&lt;/li&gt;
      &lt;li&gt;콘텐츠를 출력하는 코딩을 &lt;strong&gt;단순화&lt;/strong&gt; 가 목적&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JSP의 실행
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/02.png&quot; alt=&quot;02.png&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;JSP 파일 작성 후 클라이언트가 요청하면 &lt;strong&gt;JSP 파일에 대응하는 자바 서블릿&lt;/strong&gt; 실행&lt;/li&gt;
      &lt;li&gt;서블릿이 없거나 JSP 파일이 변경되었다면 JSP 엔진을 통해 JSP 파일을 해석 후 &lt;strong&gt;서블릿 자바 소스 생성&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;서블릿 자바 소스는 자바 컴파일러를 통해 클래스 파일로 컴파일 됨&lt;/li&gt;
      &lt;li&gt;생성된 서블릿은 service 함수를 통해 서비스하고 출력 메서드를 통해 HTML 화면을 웹 브라우저로 보냄&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JSP 엔진이 자바 출력문을 생성하므로 HTML 작성하기가 쉬워짐&lt;/li&gt;
  &lt;li&gt;뷰 컴포넌트를 만들 때 JSP 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;httpjsppage-인터페이스&quot;&gt;HttpJspPage 인터페이스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSP 엔진은 JSP 파일로부터 서블릿 클래스 생성할 때 &lt;strong&gt;HttpJspPage&lt;/strong&gt; 인터페이스를 구현한 클래스 생성
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/03.png&quot; alt=&quot;03.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;JspPage
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;jspInit&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;JspPage에 생성된 &lt;strong&gt;jspInit&lt;/strong&gt; 은 JSP 객체 (JSP로부터 생성된 서블릿 객체)가 생성될 때 호출
            &lt;ul&gt;
              &lt;li&gt;자동 생성된 서블릿 코드를 보면 init 호출될 때 &lt;strong&gt;jspInit을 호출&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;JSP 페이지에서 init 오버라이딩이 아닌 &lt;strong&gt;jspInit&lt;/strong&gt; 을 오버라이딩&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;jspDestory&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;JSP 객체가 언로드될 때 호출&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;_jspService&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;JSP 페이지가 해야 할 작업이 들어 있는 메서드&lt;/li&gt;
          &lt;li&gt;서블릿 컨테이너가 service를 호출하면 service에서는 &lt;strong&gt;_jspService&lt;/strong&gt; 호출&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-jsp-객체-분석&quot;&gt;5. JSP 객체 분석&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 클래스 이름은 Hello_jsp, 이름 짓는 방식은 서블릿 컨테이너마다 다름&lt;/li&gt;
  &lt;li&gt;Hello_jsp는 HttpJspBase를 상속
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;HttpJspBase&lt;/strong&gt;는 톰캣에서 제공하는 클래스로, &lt;strong&gt;HttpJspPage&lt;/strong&gt; 인터페이스 구현 및 &lt;strong&gt;HttpServlet&lt;/strong&gt; 클래스 상속받은 클래스&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_jspService&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;매개변수는 HttpServletRequest, HttpServletResponse&lt;/li&gt;
      &lt;li&gt;로컬 변수 중 반드시 존재해야하는 객체 (JSP 내장 객체)&lt;/li&gt;
      &lt;li&gt;jsp 파일에 생성한 출력문을 그대로 &lt;strong&gt;_jspService&lt;/strong&gt; 메서드에서 구현됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;httpjspbase&quot;&gt;HttpJspBase&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HttpServlet 클래스 상속 및 HttpJspPage 인터페이스 구현
    &lt;ul&gt;
      &lt;li&gt;init -&amp;gt; jspInit 호출&lt;/li&gt;
      &lt;li&gt;destory -&amp;gt; jspDestroy 호출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jsp-구성-요소&quot;&gt;JSP 구성 요소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;템플릿 데이터
    &lt;ul&gt;
      &lt;li&gt;클라이언트로 출력되는 콘텐츠 (HTML, 자바스크립트, 스타일 시트 등)&lt;/li&gt;
      &lt;li&gt;별도의 문법이 없이 &lt;strong&gt;문서 작성 하듯 출력할 내용을 작성&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taglib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Lesson05.Member&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %&amp;gt;
&amp;lt;%@ page import=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %&amp;gt;
&amp;lt;%@ page import=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; %&amp;gt;

...

&amp;lt;%
    if (member.getEmail() != null) {
%&amp;gt;
&amp;lt;%=member.getName()%&amp;gt;
&amp;lt;a style=&quot;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;color:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
   href=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContextPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()%&amp;gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;Logout&amp;lt;/a&amp;gt;
&amp;lt;%
    }
%&amp;gt;

...
&amp;lt;%!
    private String calculate(int a, int b, String op) {
        int r = 0;

        if (&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.equals(op)) {
            r = a + b;
        }
        else if (&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.equals(op)) {
            r = a - b;
        }
        else if (&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.equals(op)) {
            r = a * b;
        }
        else if (&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JSP 전용 태그
    &lt;ul&gt;
      &lt;li&gt;특정 &lt;strong&gt;자바 명령문으로 바뀜&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&amp;lt;%@ 지시자 속성=”값” 속성=”값” … %&amp;gt;
        &lt;ul&gt;
          &lt;li&gt;지시자나 속성에 따라 자바 코드 생성&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;page&lt;/strong&gt; 지시자
            &lt;ul&gt;
              &lt;li&gt;JSP 페이지와 관련된 속성을 정의&lt;/li&gt;
              &lt;li&gt;language 속성
                &lt;ul&gt;
                  &lt;li&gt;스크립트릿이나 표현식, 선언부 작성시 사용할 프로그래밍 언어 명시&lt;/li&gt;
                  &lt;li&gt;JSP 페이지에 삽입되는 코드의 스크립팅 언어를 지정&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;contentType 속성
                &lt;ul&gt;
                  &lt;li&gt;출력할 데이터의 MIME 타입과 문자 집합&lt;/li&gt;
                  &lt;li&gt;자바가 문자열 출력시 pageEncoding이나 contentType에 설정된 &lt;strong&gt;문자 집합으로 변환&lt;/strong&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;pageEncoding 속성
                &lt;ul&gt;
                  &lt;li&gt;출력할 데이터의 문자 집합&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;pageEncoding 및 contentType 속성은 &lt;strong&gt;response.setContentType&lt;/strong&gt; 호출 코드 생성&lt;/li&gt;
              &lt;li&gt;import 속성
                &lt;ul&gt;
                  &lt;li&gt;java의 import 처리
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/04.png&quot; alt=&quot;04.png&quot; /&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;스크립트릿 &amp;lt;% … %&amp;gt;
            &lt;ul&gt;
              &lt;li&gt;JSP 페이지 안에 자바 코드 생성시 스크립트릿 태그 (&amp;lt;% %&amp;gt;)안에 작성&lt;/li&gt;
              &lt;li&gt;서블릿 파일 생성 시 그대로 복사&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;_jspService&lt;/strong&gt; 함수 내부에 복사됨&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;JSP 내장 객체
            &lt;ul&gt;
              &lt;li&gt;JSP에서는 선언없이 바로 사용가능한 9개 객체 정의&lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;request, response, pageContext, session, application, config, out, page, exception&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;스크립트릿 및 표현식 (&amp;lt;%= %&amp;gt;)에서 작성된 자바코드는 &lt;strong&gt;_jspService&lt;/strong&gt; 메서드로 복사될 때 &lt;strong&gt;JSP 내장 객체를 선언한 문장 뒤에 놓임.&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;선언문 &amp;lt;%! … %&amp;gt;
            &lt;ul&gt;
              &lt;li&gt;서블릿 클래스의 멤버 (변수나 메서드)를 선언할 때 사용&lt;/li&gt;
              &lt;li&gt;JSP 내에 어디에 있든 상관없음.
                &lt;ul&gt;
                  &lt;li&gt;&lt;strong&gt;_jspService 밖&lt;/strong&gt; 의 클래스 블록에 복사됨&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;표현식 &amp;lt;%= %&amp;gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;문자열 출력 때&lt;/strong&gt; 사용, out.print()의 인자 값으로 복사됨&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;_jspService&lt;/strong&gt; 안에 순서대로 복사&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/e4aff02d5bd4bda61e6c333ec52d7108e484ac8b&quot;&gt;[ch05] 5.3, Implemented Hello, Calculator JSP file.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서블릿에서-뷰-분리하기&quot;&gt;서블릿에서 뷰 분리하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿은 데이터를 준비 (모델 역할) / JSP에 전달 (컨트롤러 역할)&lt;/li&gt;
  &lt;li&gt;JSP는 준비한 데이터를 가지고 웹 브라우저로 출력할 화면을 만듬&lt;/li&gt;
  &lt;li&gt;JSP에 데이터를 준비하기 위해 &lt;strong&gt;값 객체 (VO)&lt;/strong&gt; 가 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;/Lesson05/MemberAdd.jsp&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RequestDispatcher&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;다른 서블릿이나 JSP로 작업 위임시 사용&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;HttpServletRequest&lt;/strong&gt; 로부터 얻음&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;forward&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;서블릿으로 제어권 위임. 돌아오지 않음.&lt;/li&gt;
          &lt;li&gt;jsp에서 jsp로 포워드 위임 &lt;jsp:forward page=&quot;.jsp&quot;&gt;&lt;/jsp:forward&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;include&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;제어권을 넘기면 그 서블릿이 작업 후 다시 제어권이 돌아옴&lt;/li&gt;
          &lt;li&gt;jsp에서 jsp로 인클루딩 위임 &lt;jsp:include page=&quot;.jsp&quot;&gt;&lt;/jsp:include&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/05.png&quot; alt=&quot;05.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ServletRequest
    &lt;ul&gt;
      &lt;li&gt;클라이언트 요청을 다루는 기능외에, &lt;strong&gt;어떤 값을 보관하는 보관소 기능도 지님.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;setAttribute
        &lt;ul&gt;
          &lt;li&gt;값을 보관.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;getAttribute
        &lt;ul&gt;
          &lt;li&gt;값을 꺼냄
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/06.png&quot; alt=&quot;06.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/07.png&quot; alt=&quot;07.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/e0d969a0ead645d8df5f61d38445a77ab5865c87&quot;&gt;[ch05] 5.4, Delegated the role of output in MemberListServlet class to MemberList.jsp.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/75a56320b6268fa3dfc689f748e3283bc9cc4e04&quot;&gt;[ch05] 5.5, Forward Error.jsp when exception invoked and include Header / Tail.jsp&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;데이터-보관소&quot;&gt;데이터 보관소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 공유 방법. 서블릿 기술은 네 가지 종류의 데이터 보관소를 제공
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/08.png&quot; alt=&quot;08.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServletContext&lt;/strong&gt; 보관소
    &lt;ul&gt;
      &lt;li&gt;웹 애플리케이션이 &lt;strong&gt;시작될 때 생성 및 종료될 때까지 유지&lt;/strong&gt; 되는 객체&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;모든 서블릿이 사용 가능&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;jsp에서는 &lt;strong&gt;application&lt;/strong&gt; 변수를 통해 참조&lt;/li&gt;
      &lt;li&gt;HttpServlet으로 부터 상속 후, init 및 destroy 메서드 오버라이딩 후 보관소 사용&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/7e0cbaf44ef2bb732b4f9838dbba1abc5387da16&quot;&gt;[ch05] 5.6, Used the data of ServletContext.&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HttpSession&lt;/strong&gt; 보관소
    &lt;ul&gt;
      &lt;li&gt;클라이언트 &lt;strong&gt;최초 요청시 생성 후 브라우저를 닫을 때까지&lt;/strong&gt; 유지
        &lt;ul&gt;
          &lt;li&gt;클라이언트 당 하나 생성&lt;/li&gt;
          &lt;li&gt;HttpSession 객체는 그 웹브라우저로부터 일정 시간 동안 timeout 요청이 없으면 삭제 됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;로그인할 때 초기화, 로그아웃하면 비움.&lt;/li&gt;
      &lt;li&gt;jsp에서는 &lt;strong&gt;session&lt;/strong&gt; 변수를 통해 참조&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/a53bb3830196ccde678f34e73c0c36e2229e659f&quot;&gt;[ch05] 5.6, Used the data of HttpSession.&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ServletRequest&lt;/strong&gt; 보관소
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;요청이 들어올 때 생성 후 응답할 때까지 유지&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;포워딩이나 인클루딩하는 서블릿들 사이에서 값을 공유할 때 유용
        &lt;ul&gt;
          &lt;li&gt;request나 response를 같이 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;request&lt;/strong&gt; 변수를 통해 참조
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;JspContext&lt;/strong&gt; 보관소
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;jsp 페이지를 실행하는 동안만 유지&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;jsp 페이지 내부에서만 사용될 데이터 공유하는데 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;태그 핸들러는 JspContext만 참조가능 (Include된 jsp에서 다른 jsp의 로컬 변수는 참조 불가)&lt;/li&gt;
      &lt;li&gt;jsp에서는 &lt;strong&gt;pageContext&lt;/strong&gt; 를 통해 참조&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;모든 보관소는 setAttribute 및 getAttribute를 통해 값을 다룸&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jsp-액션-태그&quot;&gt;JSP 액션 태그&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;JSP에서 기본으로 제공하는 태그&lt;/li&gt;
  &lt;li&gt;
    &lt;jsp:useBean&gt;
&lt;/jsp:useBean&gt;
    &lt;ul&gt;
      &lt;li&gt;application, session, request, page 보관소에 저장된 자바 객체를 꺼낼 수 있음&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/216642d0148bf249d6805f05b7ab7305453f14f4&quot;&gt;[ch05] 5.6, Used &amp;lt;jsp:useBean … /&amp;gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5.7 Exercise
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/efa163c7299540903e5194f7f42d478af27d10b8&quot;&gt;[ch05] 5.7, solved exercise.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;el&quot;&gt;EL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;콤마와 대괄호를 사용하여 자바 빈의 프로퍼티나 맵, 리스트, 배열의 값을 쉽게 꺼내주는 기술&lt;/li&gt;
  &lt;li&gt;static으로 선언된 메서드를 호출 가능&lt;/li&gt;
  &lt;li&gt;${} -&amp;gt; 즉시 적용.&lt;/li&gt;
  &lt;li&gt;#{} -&amp;gt; 지연 적용. 시스템에서 필요하다고 판단하면 사용
    &lt;ul&gt;
      &lt;li&gt;객체의 프로퍼티보다는 사용자가 입력한 값을 객체의 프로퍼티에 담는 용도&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;pageContext.findAttribute
    &lt;ul&gt;
      &lt;li&gt;보관소를 뒤져서 객체를 찾음.&lt;/li&gt;
      &lt;li&gt;JspContext -&amp;gt; ServletRequest -&amp;gt; HttpSession -&amp;gt; ServletContext -&amp;gt; null&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ServletRequest에서 값을 꺼내는 코드
    &lt;ul&gt;
      &lt;li&gt;${requestScope.member.no}
        &lt;ul&gt;
          &lt;li&gt;Member obj = (Member)request.getAttribute(“member”);
int value = ojb.getNo();&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;보관소를 지정하면 해당 보관소에서만 객체를 찾음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/5a6fb0f6507ffd6ece0bcc03169bfa428f525774&quot;&gt;[ch05] 5.8, Added ELTest.jsp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/b605749655ad4f563fb388537b360d5399b50855&quot;&gt;[ch05] 5.8, Updated MemberUpdate.jsp using EL.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jstl&quot;&gt;JSTL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Maven Dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- JSTL --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jstl&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;taglibs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;standard&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JSTL 확장 태그를 사용
    &lt;ul&gt;
      &lt;li&gt;&amp;lt;%@ taglib uri=“사용할 태그의 라이브러리 URI” prefix=“접두사” %&amp;gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/7a835c8e1c9c7b093782d81e92810c673c6ed04a&quot;&gt;[ch05] 5.9, Added JSTLTest.jsp&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/7fe7f26ea2d0e57f11007cb3d55d41ac4995b9fd&quot;&gt;[ch05] 5.9, Updated MemberList.jsp using JSTL.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dao&quot;&gt;DAO&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;데이터 처리&lt;/strong&gt; 를 전문으로 하는 객체 (Data Access Object)
    &lt;ul&gt;
      &lt;li&gt;DB나 파일 / 메모리 등을 이용, 애플리케이션 데이터를 CRUD 하는 역할&lt;/li&gt;
      &lt;li&gt;하나의 DB 테이블이나 뷰에 대응&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/d616b7a0b1e963dd41611aafb65aaec78dd81486&quot;&gt;[ch05] 5.10, Added MemberDao and changed servlet classes.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servletcontextlistener&quot;&gt;ServletContextListener&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;리스너: 서블릿 컨테이너는 웹 애플리케이션의 상태를 모니터링할 수 있도록 &lt;strong&gt;알림&lt;/strong&gt; 기능 제공.
    &lt;ul&gt;
      &lt;li&gt;규칙에 따라 객체를 만들어 DD파일 (web.xml)에 등록&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/09.jpg&quot; alt=&quot;09.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;특정 사건이 발생할 때 서블릿 컨테이너는 리스너의 메소드를 호출&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servletcontextlistener-1&quot;&gt;ServletContextListener&lt;/h3&gt;

&lt;p&gt;웹 애플리케이션이 시작하거나 종료할 때 발생
-&amp;gt; 서블릿 컨테이너는 &lt;strong&gt;javax.servlet.ServletContextListener&lt;/strong&gt; 의 메소드 호출&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dao-공유&quot;&gt;DAO 공유&lt;/h4&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;conn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEmail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서블릿이 요청을 처리할 때마다 매번 DAO 인스턴스를 생성
-&amp;gt; 많은 garbage가 생성, 실행 시간이 길어짐.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서블릿 간의 공유: 여러 서블릿이 사용하는 객체를 ServletContext에 저장&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;DAO 객체 준비: 웹 애플리케이션 이벤트 (생성) 발생시 객체 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@WebListener&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContextListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextInitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInitParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memberDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contextDestroyed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContextEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위 코드같이 웹 애플리케이션이 시작되면 &lt;strong&gt;contextInitialized&lt;/strong&gt; 가 호출되어 memberDao 객체를 준비할 것이다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/0f6202d01aac88ed95e3b53e128bdd75fd1771ce&quot;&gt;[ch05] 5.11, Used ServletContextListener.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;db-connection-pool&quot;&gt;DB Connection Pool&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DB Connection 객체를 여러 개 생성하여 풀(pool)에 담아놓고 필요할 때 꺼내쓰는 방식&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;풀링: 자주 쓰는 객체를 미리 만둘어두고, 필요할 때마다 꺼내 쓰고 반납하는 방식&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;하나의 DB Connection 사용할 때 문제점
    &lt;ul&gt;
      &lt;li&gt;DB 작업하다 예외가 발생시 다시 이전 상태로 돌릴 필요가 있음. &lt;strong&gt;rollback&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;롤백할 경우에 다른 DAO가 작업한 것까지 되돌려짐
-&amp;gt; 롤백할 때는 자기 자신 것만 이전 상태로 돌아가야 됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DB Connection Pool
    &lt;ul&gt;
      &lt;li&gt;SQL 작업할 때마다 DB Connection을 생성하면 사용자 인증 / 권한 검사 등 실행속도가 느려짐&lt;/li&gt;
      &lt;li&gt;이를 개선하기 위해 DB Connection Pool 생성&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/1c860a3c3bbaa57728f4685d5213ebb3fc0fbcd0&quot;&gt;[ch05] 5.12, Used DBConnectionPool.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;datasource와-jndi&quot;&gt;DataSource와 JNDI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;javax.sql&lt;/strong&gt; 패키지
java.sql 패키지의 기능을 보조하기 위해 만든 확장 패키지.
    &lt;ul&gt;
      &lt;li&gt;서버 쪽 데이터 소스에 대한 접근을 쉽게 하고, 좀 더 다양한 방법으로 데이터를 다룰 수 있는 API를 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;javax.sql&lt;/strong&gt; 의 주요기능
    &lt;ul&gt;
      &lt;li&gt;DriverManager를 대체할 수 있는 DataSource 인터페이스 제공&lt;/li&gt;
      &lt;li&gt;Connection 및 Statement 풀링&lt;/li&gt;
      &lt;li&gt;분산 트랜잭션 처리&lt;/li&gt;
      &lt;li&gt;Rowsets의 지원&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;datasource&quot;&gt;DataSource&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DriverManager를 통해 DB Connection을 얻는 것보다 더 좋은 기법 제공
    &lt;ul&gt;
      &lt;li&gt;DataSource는 서버에서 관리 -&amp;gt; DB나 JDBC 드라이버가 변경되어도 &lt;strong&gt;코드 변경&lt;/strong&gt; 없음.
        &lt;ul&gt;
          &lt;li&gt;DataSource는 Tomcat이 관리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Connection과 Statement 객체를 풀링 가능
        &lt;ul&gt;
          &lt;li&gt;자체적으로 커넥션풀 기능을 구현&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;분산 트랜잭션 처리 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-25-java_web_programming_02/10.jpg&quot; alt=&quot;10.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pom.xml 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;commons-dbcp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;commons-dbcp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;commons-pool&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;commons-pool&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/8e1934ba0664c087fbbd0f273a18ba8948b9fee5&quot;&gt;[ch05] 5.13. Used BasicDataSource.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DataSource가 만들어주는 Connection은 DriverManager가 만드는 Connection을 &lt;strong&gt;한 번 랩핑한&lt;/strong&gt; 객체&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jndi-java-naming-and-directory-interface-api&quot;&gt;JNDI (Java Naming and Directory Interface API)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 서비스에 접근하는데 필요한 API
    &lt;ul&gt;
      &lt;li&gt;애플리케이션인 이 API를 사용, 서버의 자원 (데이터베이스 서버, 메시징 시스템과 같은 연결 제공 객체) 검색&lt;/li&gt;
      &lt;li&gt;자원을 서버에 등록할 때 고유한 JNDI 이름 등록
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;JNDI Name&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;Resource&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/env&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;응용 프로그램 환경 항목&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/env/jdbc&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;JDBC DataSource&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/ejb&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;EJB 컴포넌트&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/UserTransaction&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;UserTransaction 객체&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/env/mail&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;JavaMail 연결 객체&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/env/url&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;URL 정보&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;java:comp/env/jms&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;JMS 연결 객체&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 컨테이너 관리하는 DataSource를 사용하기 위해 서버 설정
-&amp;gt; Tomcat의 경우, context.xml 및 web.xml 을 수정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Context.xml --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;Context&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;WatchedResource&amp;gt;&lt;/span&gt;WEB-INF/web.xml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/WatchedResource&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Resource&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc/studydb&quot;&lt;/span&gt;           &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;JNDI&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;auth=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Container&quot;&lt;/span&gt;              &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;resource&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javax.sql.DataSource&quot;&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;resource&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxActive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;                &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Maximum&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connections.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxIdle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;                   &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Maintaining&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connections.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;maxWait=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10000&quot;&lt;/span&gt;               &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;preparing&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connection.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;study&quot;&lt;/span&gt;              &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;name.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;password=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;study&quot;&lt;/span&gt;              &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;password.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;driverClassName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;JDBC&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;driver&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;name.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost/studydb&quot;&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;url.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;closeMethod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;        // close method name. When web application closed, it will invoked.
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Context&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- web.xml --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;resource-ref&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;res-ref-name&amp;gt;&lt;/span&gt;jdbc/studydb&lt;span class=&quot;nt&quot;&gt;&amp;lt;/res-ref-name&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- JNDI nae --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;res-type&amp;gt;&lt;/span&gt;javax.sql.DataSource&lt;span class=&quot;nt&quot;&gt;&amp;lt;/res-type&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Return type --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;res-auth&amp;gt;&lt;/span&gt;Container&lt;span class=&quot;nt&quot;&gt;&amp;lt;/res-auth&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Author of resource --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource-ref&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Get JNDI Resource.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InitialContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java:comp/jdbc/studydb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;memberDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/25/java_web_programming_02-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/25/java_web_programming_02-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 01: Servlet and JDBC</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 04&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;retrieve-database&quot;&gt;Retrieve Database&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿이 주로 하는 일은 클라이언트가 요청한 데이터를 다루는 일 &lt;strong&gt;(CRUD)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;데이터 입력 / 변경 / 삭제 등을 처리하려면 DB의 도움을 받아야 함
    &lt;ul&gt;
      &lt;li&gt;DB에 요청을 전달하고 결과를 받을 때 사용하는 도구
        &lt;ul&gt;
          &lt;li&gt;자바에서는 &lt;strong&gt;JDBC&lt;/strong&gt; 를 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DB에 명령을 내릴 때 사용할 언어
        &lt;ul&gt;
          &lt;li&gt;SQL&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;prepare-jdbc-driver-for-mysql&quot;&gt;Prepare JDBC driver for mysql.&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.1.40&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;database-연결&quot;&gt;Database 연결&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Statement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerDriver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdbc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost/studydb?useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;study&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;study&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;select mno, mname, email, cre_date&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; from members&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot; order by mno asc&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DriverManager를 이용, &lt;strong&gt;java.sql.Driver&lt;/strong&gt; 인터페이스 구현체 등록
    &lt;ul&gt;
      &lt;li&gt;mysql JDBC driver는 &lt;strong&gt;com.mysql.jdbc.Driver&lt;/strong&gt; 클래스&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;DriverManager는 이 인터페이스에서 connect 메서드를 통해 DB 연결 수행&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;java.sql.Driver&lt;/strong&gt; interface 메서드
        &lt;ul&gt;
          &lt;li&gt;getMajorVersion / getMinorVersion&lt;/li&gt;
          &lt;li&gt;acceptsURL: JDBC URL이 이 드라이버에서 사용가능 여부&lt;/li&gt;
          &lt;li&gt;connect: 데이터베이스 연결&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DriverManager의 getConnection 메서드를 통해 mysql 서버 연결
    &lt;ul&gt;
      &lt;li&gt;1 번째 파라미터: JDBC URL
        &lt;ul&gt;
          &lt;li&gt;DriverManager는 이 URL를 승인하는 드라이버 찾아 연결&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2/3 번째 파라미터: 사용자 아이디 및 암호
        &lt;ul&gt;
          &lt;li&gt;리턴 값: DB 접속 정보를 다루는 java.sql.Connection 인터페이스의 구현체&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JDBC URL
        &lt;ul&gt;
          &lt;li&gt;ex) jdbc:mysql://localhost/studydb&lt;/li&gt;
          &lt;li&gt;jdbc:mysql -&amp;gt; JDBC 드라이버 이름&lt;/li&gt;
          &lt;li&gt;//localhost/studydb: 서버 주소 및 DB 이름&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;java.sql.Connection: DB 접속 정보를 다룸&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;createStatement, prepareStatement, prepareCall: SQL문을 실행하는 객체 리턴
-&amp;gt; &lt;strong&gt;java.sql.Statement&lt;/strong&gt; 인터페이스의 구현체&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;commit / rollback: 트랜잭션 처리&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;java.sql.Statement: SQL문을 서버에 쿼리 날릴 수 있음.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;executeQuery: SQL 문을 실행. 보통 select 구문&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;executeUpdate: DML / DDL 관련 SQL 문 (ResultSet 만들지 않는 것)
        &lt;ul&gt;
          &lt;li&gt;DML: insert, update, delete (Data Manipulation Language)&lt;/li&gt;
          &lt;li&gt;DDL: create, alter, drop (Data Definition Language)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;execute: select 뿐만 아닌 DML / DDL 모두 실행 가능&lt;/li&gt;
      &lt;li&gt;executeBatch: addBatch 메서드로 등록한 여러 개의 SQL문을 한 번에 처리.&lt;/li&gt;
      &lt;li&gt;리턴 값: 질의 결과인 java.sql.ResultSet 인터페이스의 구현체 리턴
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;java.sql.ResultSet: SQL 질의 결과
    &lt;ul&gt;
      &lt;li&gt;first: 서버에서 첫 번째 레코드를 리턴&lt;/li&gt;
      &lt;li&gt;last: 서버에서 마지막 레코드 리턴&lt;/li&gt;
      &lt;li&gt;previous: 서버에서 이전 레코드 리턴&lt;/li&gt;
      &lt;li&gt;next: 서버에서 다음 레코드 리턴&lt;/li&gt;
      &lt;li&gt;getXXX: 레코드에서 특정 컬럼의 값을 꺼내어 XXX라는 타입에 따라 리턴.
ex) getInt(“MNO”)&lt;/li&gt;
      &lt;li&gt;updateXXX: 레코드의 특정 컬럼의 값을 변경&lt;/li&gt;
      &lt;li&gt;deleteRow: 현재 레코드를 지움&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/2fcf87872e851f78aeafa139b3f9613a3637b183&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/2fcf87872e851f78aeafa139b3f9613a3637b183&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;java.sql.PreparedStatement
    &lt;ul&gt;
      &lt;li&gt;반복적인 질의를 하거나 입력 매개변수가 많을 때 유용.
        &lt;ul&gt;
          &lt;li&gt;SQL문을 미리 준비해두어 컴파일해놓고, 입력 매개변수 값만 추가하여 전송&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이미지나 바이너리 데이터를 사용할 때 PreparedStatement만 가능&lt;/li&gt;
      &lt;li&gt;입력 매개 변수 인덱스는 SQL문에서 ‘?’로 표시된 입력 항목으로 1부터 시작.
        &lt;ul&gt;
          &lt;li&gt;문자열이면 setString, 정수면 setInt&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;update할 때 executeUpdate 호출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL문을 서버로 보내는 것인가?
    &lt;ul&gt;
      &lt;li&gt;로컬에서 &lt;strong&gt;SQL문을 실행하는 것이 아니라 JDBC API에서 SQL문을 보내고 결과를 받는 역할&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;DB 전용 프로토콜에 맞게 변환하여 보내고 받음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;httpservlet&quot;&gt;HttpServlet&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_01/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;GenericServlet&lt;/strong&gt; 의 하위 클래스&lt;/li&gt;
  &lt;li&gt;일반적인 서블릿 객체는 반드시 &lt;strong&gt;service&lt;/strong&gt; 메서드를 구현해야 함.&lt;/li&gt;
  &lt;li&gt;HttpServlet의 경우 먼저 service 함수가 호출되고, 클라이언트의 요청에 따라 &lt;strong&gt;doGet / doPost / doPut&lt;/strong&gt; 등의 메서드를 호출&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/ea4a2e34907c04ae445365b619b9adda2c3c7836&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/ea4a2e34907c04ae445365b619b9adda2c3c7836&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;refresh&quot;&gt;Refresh&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HttpServletResponse의 addHeader 메서드를 이용, &lt;strong&gt;Refresh 헤더&lt;/strong&gt; 를 추가함으로써 클라이언트의 웹브라우저가 자동으로 URL 열도록 함.
    &lt;ul&gt;
      &lt;li&gt;response.addHeader(“Refresh”, “1; url=list”);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTML 본문의 &amp;lt;head&amp;gt; 태그안에 &lt;meta /&gt; 태그를 이용해 Refresh 헤더를 추가 가능
    &lt;ul&gt;
      &lt;li&gt;&amp;lt;meta http-equiv=’Refresh’ content=’1; url=list’&amp;gt;”);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/f8cb79246c521ed65615e3aa04a8b6ea9b2eb913&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/f8cb79246c521ed65615e3aa04a8b6ea9b2eb913&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;redirect&quot;&gt;Redirect&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 페이지의 해당 결과를 출력하지 않고 다른 페이지로 이동할 때 Redirect 사용
    &lt;ul&gt;
      &lt;li&gt;response.sendRedirect(“list”)
        &lt;ul&gt;
          &lt;li&gt;상대 경로를 사용&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;클라이언트에서는 HTTP 응답 코드를 302로 받음
        &lt;ul&gt;
          &lt;li&gt;302: 요청한 자원이 다른 URL로 이동되었으니 Location 헤더에 있는 주소로 다시 요청할 것.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/4b15d454fc3eaffd1db7966ab4247eeaa522f8e5&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/4b15d454fc3eaffd1db7966ab4247eeaa522f8e5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서블릿-초기화-매개변수&quot;&gt;서블릿 초기화 매개변수&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 생성 및 초기화, &lt;strong&gt;init()&lt;/strong&gt; 을 호출할 때 서블릿 컨테이너가 전달하는 데이터&lt;/li&gt;
  &lt;li&gt;초기화 매개변수 전달 방법
    &lt;ul&gt;
      &lt;li&gt;초기화 매개변수, web.xml
        &lt;ul&gt;
          &lt;li&gt;
            &lt;init-param&gt; 서블릿 초기화 매개변수 설정 태그, &lt;servlet&gt;의 자식 엘리먼트
&lt;/servlet&gt;&lt;/init-param&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;this.getInitParameter&lt;/strong&gt; 로 얻을 수 있음.
            &lt;ul&gt;
              &lt;li&gt;this.getInitParameter(“driver”)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;매개변수를 선언한 서블릿에서만 사용가능&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/36afd540e4b7cd3a5d32aa2f4a98c0a500ea3695&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/36afd540e4b7cd3a5d32aa2f4a98c0a500ea3695&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;컨텍스트 초기화 매개변수
        &lt;ul&gt;
          &lt;li&gt;
            &lt;context-param&gt; 서블릿들이 공유하는 초기화 매개 변수 설정 태그
&lt;/context-param&gt;
          &lt;/li&gt;
          &lt;li&gt;ServletContext sc = this.getServletContext() 식으로 객체를 얻은 후,&lt;/li&gt;
          &lt;li&gt;sc.getInitParameter(“driver”) 로 얻을 수 있음&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/721b501c24e284682b33caa99375e0f6a41871c7&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/721b501c24e284682b33caa99375e0f6a41871c7&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;MemberDeleteServlet class
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/9e64996750182cacc22c64c2209d3af1f015c979&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/9e64996750182cacc22c64c2209d3af1f015c979&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;MemberListServlet class
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/8379248c6bbe439ab5583f19c8de02dde20d3e49&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/8379248c6bbe439ab5583f19c8de02dde20d3e49&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;필터&quot;&gt;필터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 공통적으로 실행 전 후에 어떤 작업을 하고자 할 때 사용
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 보낸 데이터의 암호 해제, 필요한 자원을 준비, 로그 남기기 등&lt;/li&gt;
      &lt;li&gt;서블릿에 담는다면 서블릿마다 코드 삽입해야 하므로 번거로움
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_01/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구현&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- filters --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-class&amp;gt;&lt;/span&gt;Lesson04.CharacterEncodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-class&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;encoding&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- filter mapping --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;CharacterEncodingFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;web.xml에서 &lt;filter&gt; 태그 및 &lt;filter-mapping&gt;을 통해 매핑&lt;/filter-mapping&gt;&lt;/filter&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;init-param&gt; 등을 통해 필터 초기화 매개변수를 설정할 때, FilterConfig 객체를
통해 꺼낼 수 있음. config.getInitParameter(&quot;&quot;)
&lt;/init-param&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;init()&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;필터 객체가 생성되고 나서 준비 작업을 위해 한 번 호출됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;doFilter()&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;필터와 연결된 URL에 대한 요청이 들어올 때 항상 호출&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;nextFilter&lt;/strong&gt; 는 다음 필터를 가리킴 (nextFilter.doFilter 호출)&lt;/li&gt;
      &lt;li&gt;서블릿 실행되기 전에 작업이 있으면 &lt;strong&gt;doFilter 호출 전에&lt;/strong&gt; 작성&lt;/li&gt;
      &lt;li&gt;서블릿 실행된 후 작업이 있으면 &lt;strong&gt;doFilter 호출 후에&lt;/strong&gt; 작성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;destroy()
    &lt;ul&gt;
      &lt;li&gt;서블릿 컨테이너가 웹 애플리케이션을 종료하기 전에 필터들에 destroy 호출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/19bc501f927555bee31be1502059ce67be125bdf&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/19bc501f927555bee31be1502059ce67be125bdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;href를-통한-서블릿-호출&quot;&gt;href를 통한 서블릿 호출&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_01/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/25/java_web_programming_01-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/25/java_web_programming_01-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Java Web Programming Summary Note 00: Servlet Programming</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Java Web Development Workbook Chapter. 03&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;servlet-programming&quot;&gt;Servlet Programming&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;서블릿&lt;/strong&gt; 기술을 이용해 웹 애플리케이션 개발&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cgi&quot;&gt;CGI&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 애플리케이션은 웹 서버가 프로그램 찾아서 실행 및 결과를 리턴받음.&lt;/li&gt;
  &lt;li&gt;웹 서버는 그 결과를 &lt;strong&gt;HTTP 형식&lt;/strong&gt; 에 맞추어 웹 브라우저로 리턴.&lt;/li&gt;
  &lt;li&gt;CGI: 웹 서버와 프로그램 사이의 데이터를 주고 받는 규칙
    &lt;ul&gt;
      &lt;li&gt;Common Gateway Interface
&lt;br /&gt;
        &lt;h3 id=&quot;cgi-program&quot;&gt;CGI Program&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 서버에 의해 실행되며, &lt;strong&gt;CGI 규칙&lt;/strong&gt; 에 따라 웹 서버와 데이터를 주고받는 프로그램&lt;/li&gt;
  &lt;li&gt;Compile Language: C / C++ / Java&lt;/li&gt;
  &lt;li&gt;Script Language: Perl, PHP, Python, VBScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;java-cgi-program&quot;&gt;Java CGI Program&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Compile 방식, Servlet&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;웹 서버와 직접 데이터를 주고 받지 않으며&lt;/strong&gt;, 전문 프로그램, 서블릿 컨테이너 (ex. Tomcat) 에 의해 관리&lt;/li&gt;
  &lt;li&gt;서블릿 컨테이너
    &lt;ul&gt;
      &lt;li&gt;서블릿의 생성 및 실행, 소멸 관리&lt;/li&gt;
      &lt;li&gt;서블릿을 대신하여 CGI 규칙에 따라 웹 서버와 교환&lt;/li&gt;
      &lt;li&gt;개발자는 &lt;strong&gt;서블릿 컨테이너와 서블릿의 규칙&lt;/strong&gt; 을 알아야 함.
        &lt;ul&gt;
          &lt;li&gt;JavaEE 기술 사양에 포함되어 있음
  &lt;br /&gt;
   &lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_00/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servlet-jsp-vs-java-ee-vs-was&quot;&gt;Servlet, JSP vs Java EE vs WAS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java EE with Servlet
    &lt;ul&gt;
      &lt;li&gt;Java EE 기술 사양은 여러가지 복합 기술들을 정의&lt;/li&gt;
      &lt;li&gt;계속 버전 업되고 새로운 기술들이 추가됨&lt;/li&gt;
      &lt;li&gt;Java로 웹 애플리케이션을 개발한다는 것은 Servlet과 JSP 기술을 이용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WAS
    &lt;ul&gt;
      &lt;li&gt;애플리케이션 서버: 서버 쪽 애플리케이션 생성과 실행, 소멸을 관리&lt;/li&gt;
      &lt;li&gt;WAS: 서블릿과 서블릿 컨테이너와 같이 웹 기술을 기반으로 하는 서버, Web Application Server
        &lt;ul&gt;
          &lt;li&gt;Java에서 말하는 WAS란 Java EE 기술 사양을 준수하여 만든 서버&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서블릿 컨테이너: 서블릿, JSP 등 웹 부분만 구현한 서버 (웹 컨테이너)
        &lt;ul&gt;
          &lt;li&gt;Tomcat, Resin, Jetty.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;web-project-directory-구조&quot;&gt;Web Project Directory 구조&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;src
    &lt;ul&gt;
      &lt;li&gt;Java source, 서블릿 클래스, 필터, 리스너&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;build / classes
    &lt;ul&gt;
      &lt;li&gt;Java clsss 파일&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebContent
    &lt;ul&gt;
      &lt;li&gt;HTML, CSS, JavaScript, JSP, 이미지 파일 등 웹 콘텐츠&lt;/li&gt;
      &lt;li&gt;웹 애플리케이션을 배치할 때 그대로 복사됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebContent / WEB-INF
    &lt;ul&gt;
      &lt;li&gt;웹 애플리케이션의 설정과 관련된 파일&lt;/li&gt;
      &lt;li&gt;클라이언트에서 요청 불가&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebContent / WEB-INF / web.xml
    &lt;ul&gt;
      &lt;li&gt;웹 애플리케이션 배치 설명서. (Deployment Descriptor)&lt;/li&gt;
      &lt;li&gt;웹 애플리케이션 컴포넌트들의 배치 정보&lt;/li&gt;
      &lt;li&gt;서블릿 컨테이너는 클라이언트 요청을 처리할 때, 이 정보를 참고&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebContent / WEB-INF / lib
    &lt;ul&gt;
      &lt;li&gt;Java Archive (.jar) 파일을 두는 디렉토리.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;javaxservletservlet-interface&quot;&gt;javax.servlet.Servlet interface&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서블릿 클래스는 &lt;strong&gt;javax.servlet.Servlet&lt;/strong&gt; 인터페이스를 구현&lt;/li&gt;
  &lt;li&gt;서블릿 컨테이너가 서블릿에 대해 호출할 메서드를 정의한 것이 Servlet 인터페이스&lt;/li&gt;
  &lt;li&gt;서블릿의 생명 주기 메서드
    &lt;ul&gt;
      &lt;li&gt;init
        &lt;ul&gt;
          &lt;li&gt;서블릿 컨테이너가 서블릿 생성 후 초기화 작업 수행&lt;/li&gt;
          &lt;li&gt;클라이언트 요청 처리 전 준비할 작업&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;service
        &lt;ul&gt;
          &lt;li&gt;클라이언트가 요청할 때마다 호출&lt;/li&gt;
          &lt;li&gt;서비스 작업&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;destroy
        &lt;ul&gt;
          &lt;li&gt;서블릿 컨테이너가 종료되거나 웹 애플리케이션이 멈출 때, 비활성화시킬 때&lt;/li&gt;
          &lt;li&gt;자원 해제, 데이터 저장 등 마무리 작업&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;서블릿의 기타 메서드
        &lt;ul&gt;
          &lt;li&gt;getServletConfig
            &lt;ul&gt;
              &lt;li&gt;서블릿 설정 정보를 다루는 ServletConfig 객체 리턴&lt;/li&gt;
              &lt;li&gt;서블릿 이름과 초기 매개변수 값, 환경정보&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;getServletInfo
            &lt;ul&gt;
              &lt;li&gt;서블릿을 작성한 사람에 대한 정보, 서블릿 버전, 권리 등&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서블릿-배치-정보-작성-webxml&quot;&gt;서블릿 배치 정보 작성 (web.xml)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹 애플리케이션의 배치 정보를 담고 있는데, 서블릿 컨테이너가 이를 참고&lt;/li&gt;
  &lt;li&gt;서블릿 선언&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;AppInitServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;AppInitServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 URL 부여&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-mapping&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;AppInitServlet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/AppInit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/servlet-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿을 요청할 때 클라이언트가 사용할 URL 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서블릿-구동-절차&quot;&gt;서블릿 구동 절차&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트 요청 -&amp;gt; 서블릿 컨테이너는 서블릿 검색&lt;/li&gt;
  &lt;li&gt;서블릿이 없으면 서블릿 클래스 로딩, 인스턴스 준비 및 생성자 및 &lt;strong&gt;init()&lt;/strong&gt; 호출&lt;/li&gt;
  &lt;li&gt;클라이언트의 요청을 처리하는 &lt;strong&gt;service()&lt;/strong&gt; 호출&lt;/li&gt;
  &lt;li&gt;service()에서 만든 결과를 HTTP 프로토콜에 맞추어 클라이언트에 response.&lt;/li&gt;
  &lt;li&gt;시스템 운영자가 서블릿 컨테이너나 웹 애플리케이션을 종료하면 생성된 모든 서블릿에 대해 &lt;strong&gt;destroy()&lt;/strong&gt; 호출&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;서블릿-인스턴스&quot;&gt;서블릿 인스턴스&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;서블릿 인스턴스는 하나만 생성되어 웹 애플리케이션이 종료될 때까지 사용.&lt;/li&gt;
  &lt;li&gt;인스턴스 변수에 특정 사용자를 위한 데이터를 저장하거나 일시적 데이터 보관용도로 사용하면 안됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;welcome-file&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웰컴 파일은 디렉토리의 기본 웹 페이지&lt;/li&gt;
  &lt;li&gt;여러 개 정의되어 있으면 위에서부터 아래로 순차적으로 조회. 먼저 찾은 것을 response.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- welcome file setting --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file-list&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;index.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.html&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.htm&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;welcome-file&amp;gt;&lt;/span&gt;default.jsp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/welcome-file-list&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;웹-애플리케이션-배치&quot;&gt;웹 애플리케이션 배치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;프로젝트의 Web 폴더에 들어있는 모든 파일과 폴더가 배치 폴더(Context root)로 복사
    &lt;ul&gt;
      &lt;li&gt;WebContent 폴더에 있는 모든 내용이 배치 폴더로 폭사&lt;/li&gt;
      &lt;li&gt;컴파일된 자바 클래스들은 &lt;strong&gt;배치폴더/WEB_INF/classes&lt;/strong&gt; 에 복사&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;웹 아카이브 (.war), Web Archive
    &lt;ul&gt;
      &lt;li&gt;배치할 파일들을 하나의 웹 아카이브 파일로 만들어 배치 폴더에 복사&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;genericservlet&quot;&gt;GenericServlet&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Servlet 인터페이스를 구현할 때의 문제점인 “모든 추상 메서드를 구현해야한다” 라는 단점을 해소하기 위해 &lt;strong&gt;GenericServlet&lt;/strong&gt; 추상 클래스 사용&lt;/li&gt;
  &lt;li&gt;하위 클래스에게 공통의 필드와 메서드를 상속.
&lt;strong&gt;init() / destroy() / getServletConfig() / getServletInfo()&lt;/strong&gt; 를 미리 구현하여 상속&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;service()를 별도로 구현&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;GenericServlet에 구현되어 있지 않음.
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_00/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servletrequest&quot;&gt;ServletRequest&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAttributeNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnsupportedEncodingException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentLengthLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ServletInputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getScheme&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServerName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServerPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRemoteHost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Enumeration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocales&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isSecure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/** @deprecated */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRealPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRemotePort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocalAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocalPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getServletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AsyncContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AsyncContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAsyncStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAsyncSupported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AsyncContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAsyncContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DispatcherType&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDispatcherType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트의 요청 정보를 다룰 때 사용.&lt;/li&gt;
  &lt;li&gt;getParameter: GET 이나 POST 요청으로 들어온 매개변수 값을 꺼낼 때 사용.&lt;/li&gt;
  &lt;li&gt;getRemoteAddr: 서비스를 요청한 클라이언트의 IP 주소&lt;/li&gt;
  &lt;li&gt;getScheme: 클라이언트가 요청한 URI 형식 scheme (http / https 등)&lt;/li&gt;
  &lt;li&gt;getProtocol: 요청 프로토콜의 이름과 버전 (HTTP/1.1)&lt;/li&gt;
  &lt;li&gt;getParameterNames: 요청 정보에서 매개변수 이름만 추출하여 반환&lt;/li&gt;
  &lt;li&gt;getParameterValues: 요청 정보에서 매개변수 값만 추출하여 반환&lt;/li&gt;
  &lt;li&gt;getParameterMap: 요청 정보에서 매개변수들을 Map 객체에 담아서 반환&lt;/li&gt;
  &lt;li&gt;setCharacterEncoding: POST 요청의 매개변수에 대해 문자 집합 설정.
기본값: ISO-8859-1 -&amp;gt; UTF-8로 변경 가능
    &lt;ul&gt;
      &lt;li&gt;GET 요청의 매개변수에 대해서는 Tomcat 실행 환경 변경
        &lt;ul&gt;
          &lt;li&gt;URIEncoding&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servletresponse&quot;&gt;ServletResponse&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ServletOutputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setCharacterEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setContentLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setContentLengthLong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBufferSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBufferSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flushBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resetBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCommitted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;응답과 관련된 기능 제공&lt;/li&gt;
  &lt;li&gt;setContentType: 출력할 데이터의 인코딩 형식과 문자 집합 지정 (“text/plain”)
    &lt;ul&gt;
      &lt;li&gt;클라이언트는 지정된 형식에 맞추어 렌더링&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;setChracterEncoding: 출력할 데이터의 문자 집합 설정 (“UTF-8”)
기본값: ISO-8851-1&lt;/li&gt;
  &lt;li&gt;getWriter: 출력 스트림 객체 반환
-&amp;gt; 이미지나 동영상과 같은 바이너리 데이터를 출력: getOutputStream 사용&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/3de1f6b204f126e1b665d09050b50e4c3c7aaf72&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/3de1f6b204f126e1b665d09050b50e4c3c7aaf72&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;servlet에-데이터-전달-예제&quot;&gt;Servlet에 데이터 전달 예제&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-24-java_web_programming_00/02.png&quot; alt=&quot;02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;webservlet-애노테이션&quot;&gt;@WebServlet 애노테이션&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;클래스위의 @WebServlet(“”) 으로 서블릿 배치 정보 설정 가능.
    &lt;ul&gt;
      &lt;li&gt;web.xml 에서 서블릿 선언 및 매핑부분 생략 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhsim86/java_webdev_workbook/commit/a700245c92f62e6f842c97a1e05bec5704eb1362&quot;&gt;https://github.com/dhsim86/java_webdev_workbook/commit/a700245c92f62e6f842c97a1e05bec5704eb1362&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/24/java_web_programming_00-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/24/java_web_programming_00-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>Http 상태코드</title>
        <description>&lt;h1 id=&quot;http-상태코드&quot;&gt;HTTP 상태코드&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;상태코드의-역할&quot;&gt;상태코드의 역할&lt;/h2&gt;

&lt;p&gt;클라이언트가 서버를 향해 request를 보낼 때 서버에서 그 request를 어떻게 처리하였는지 알려주는 것이다.
가령 다음과 같이 클라이언트가 &lt;strong&gt;GET&lt;/strong&gt; 메소드를 통해 request를 보내면 서버가 response의 &lt;strong&gt;첫 번째 줄&lt;/strong&gt;에 HTTP 버전과 더불어, 처리 결과에 대한 상태 코드를 보내준다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/static/assets/img/blog/web/2017-01-01-http_status_code/00.png&quot; alt=&quot;00.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에 예에서 &lt;strong&gt;GET /monitor/l7check HTTP/1.1&lt;/strong&gt; 를 하였을 때, &lt;strong&gt;HTTP/1.1 200&lt;/strong&gt; 과 같이 200이라는 상태코드를 보내준다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;상태코드-클래스&quot;&gt;상태코드 클래스&lt;/h2&gt;

&lt;p&gt;상태 코드는 &lt;strong&gt;200 OK&lt;/strong&gt; 와 같이 3자리 숫자와 설명으로 나타난다.
3자리 숫자에서 첫 번째 자리는 해당 response의 클래스를 나타낸다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;–&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;클래스&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1xx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Informational&lt;/td&gt;
      &lt;td&gt;Request를 받아들여 처리중&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2xx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Success&lt;/td&gt;
      &lt;td&gt;Request를 정상적으로 처리하였음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3xx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Redirection&lt;/td&gt;
      &lt;td&gt;Request를 완료하기 위해 추가 동작이 필요하다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4xx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client Error&lt;/td&gt;
      &lt;td&gt;클라이언트의 오류로 인해 서버는 Request를 처리할 수 없음&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5xx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Server Error&lt;/td&gt;
      &lt;td&gt;서버 측의 에러로 인해 Request 처리 실패&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP 상태 코드는 RFC2616 및 WebDAV(RFC4918, 5842) / Additional HTTP Status Code (RFC6585) 등에 정의된 것을 보면 60 종류가 넘지만 실제로 자주 사용되는 것은 일부분이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;1xx-informational&quot;&gt;1xx, Informational&lt;/h2&gt;

&lt;p&gt;참고 정보로 서버가 클라이언트의 Request가 접수되었고 현재 처리하고 있다는 의미이다.
HTTP/1.0 이후로 정의되지 않았다. 서버들도 클라이언트에게 보통 이 코드를 보내지는 않는다.&lt;/p&gt;

&lt;h3 id=&quot;100-continue&quot;&gt;100, Continue&lt;/h3&gt;

&lt;p&gt;요청된 초기 Request는 접수되었고 클라이언트는 계속해서 Request를 보낼 수 있다는 것이다. 클라이언트는 전체 Request의 나머지 부분도 전송해야하며, 완료되었다면 이 응답을 무시해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;101-switching-protocols&quot;&gt;101, Switching Protocols&lt;/h3&gt;

&lt;p&gt;서버는 &lt;strong&gt;Upgrade&lt;/strong&gt; 헤더 필드에 명시된 프로토콜로 교환하기 위한 클라이언트 Request 에 따르고 있다는 것을 의미한다. 보통 이 상태코드는 다음과 같이 &lt;strong&gt;WebSocket을 사용할 때 많이 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;websocket-protocol&quot;&gt;WebSocket Protocol&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;WebSocket은 클라이언트와 서버 사이에 지속적이고 완전한 양방향 연결 스트림을 만들어주는 기술이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WebSocket은 2011년 &lt;a href=&quot;https://tools.ietf.org/html/rfc6455&quot;&gt;RFC6455&lt;/a&gt;에 의해 표준화된 것으로, 연결을 유지하지 않고 실시한 상호작용성이 떨어지는 HTTP 프로토콜의 단점을 개선하기 위해 만들어진 규약이다. WebSocket은 HTTP를 기반으로 하면서도 HTTP의 문제점을 해결하는 것을 목표로 하고 있다.&lt;/p&gt;

&lt;p&gt;이 WebSocket의 프로토콜은 HTTP를 기반으로 하지만 HTTP 프로토콜과는 전혀 다른 프로토콜이다. HTTP를 기반으로 한다는 의미는 WebSocket 연결을 맺는 과정에서 HTTP가 개입한다는 의미이다.&lt;/p&gt;

&lt;p&gt;먼저 HTTP 프로토콜을 통해 WebSocket을 사용할 수 있는지, 클라이언트가 서버에게 묻는데 서버가 WebSocket을 지원하면 이 때 &lt;strong&gt;101 상태코드를 통해 protocol switching&lt;/strong&gt; 을 하겠다고 응답한다. 이 후 클라이언트와 서버사이에는 WebSocket 프로토콜을 통해 통신하게 된다. (WebSocket Handshake)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;WebSocket Handshake
&lt;br /&gt;
&lt;img src=&quot;/static/assets/img/blog/web/2017-01-01-http_status_code/01.png&quot; alt=&quot;01.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음과 같이 &lt;strong&gt;101 상태코드를 통해&lt;/strong&gt; WebSocket Handshake 과정에서 처음 HTTP 프로토콜을 통해 WebSocket 사용 가능 여부를 묻고 응답하게 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /mychat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat
Sec-WebSocket-Version: 13
Origin: http://example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;2xx-success&quot;&gt;2xx, Success&lt;/h2&gt;

&lt;p&gt;서버가 Request를 성공적으로 수신하였고 이해했으며, 정상적으로 처리하였다는 의미이다. 사실 200과 206을 제외하고는 볼 일이 거의 없다.&lt;/p&gt;

&lt;h3 id=&quot;200-ok&quot;&gt;200 OK&lt;/h3&gt;

&lt;p&gt;서버가 Request를 정상적으로 처리하였다는 의미이며 가장 일반적으로 볼 수 있는 HTTP 상태코드이다.
이 상태코드와 함께 추가적으로 오는 정보는 HTTP Request 메소드에 따라 다르다.&lt;/p&gt;

&lt;h3 id=&quot;201-created&quot;&gt;201 Created&lt;/h3&gt;

&lt;p&gt;서버에서 새로운 URI가 만들어질 때마다 사용되며 이 상태코드와 함께, 새로운 데이터가 위치한 곳을 Location 헤더에 포함하여 보내준다.&lt;/p&gt;

&lt;p&gt;서버는 201 상태코드를 보내주기 전에 반드시 새로운 URI에 해당하는 리소스를 서버에 생성해두어야 한다. 만약 리소스를 즉각적으로 만들 수 없다면, &lt;strong&gt;202 accepted&lt;/strong&gt; 로 보내주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;202-accepted&quot;&gt;202 Accepted&lt;/h3&gt;

&lt;p&gt;클라이언트의 Request를 받아들이기는 했는데, 아직 처리가 완료되지 않았음을 나타낸다.
그런데 이 Request에 대한 처리는 처리될 수도 있고, 처리되지 않을 수도 있다.&lt;/p&gt;

&lt;p&gt;이 상태코드의 궁극적인 목표는 서버가 클라이언트에 대한 Request 처리를 즉각적으로 완료할 수 없을 때, 먼저 이 상태코드를 보내고 다른 Request를 수신하기 위함이다.&lt;/p&gt;

&lt;p&gt;이 상태코드와 함께 해당 Request에 대한 처리를 언제 완료할 수 있는지에 대한 예상 완료시간, 현재 상태를 함께 보내주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;204-no-content&quot;&gt;204 No Content&lt;/h3&gt;

&lt;p&gt;서버가 Request를 처리하는 것은 성공했는데, Response를 보낼 때 주어지는 헤더나 바디 내용이 없다는 뜻이다.
새로운 내용이 없으므로 웹 브라우저에게 이전 페이지를 계속해서 보여주라고 알려주는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;205-reset-content&quot;&gt;205 Reset Content&lt;/h3&gt;

&lt;p&gt;새로운 문서가 없더라도 브라우저에서 화면을 초기화하고 문서를 새로 표시한다는 것이다.
이 상태코드는 주로 사용자 입력을 받는 폼이 있는 웹 페이지에 대해 유용하다. 사용자 입력을 받고, 그 폼의 내용을 지워 다른 입력을 또 받고자할 때 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;206-partial-content&quot;&gt;206 Partial Content&lt;/h3&gt;

&lt;p&gt;이 상태코드는 Range 헤더에 의해 범위가 지정된 Request에 대해 서버가 받았음을 나타낸다. Response에는 Content-Range 헤더를 포함해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;3xx-redirect&quot;&gt;3xx, Redirect&lt;/h2&gt;

&lt;p&gt;3xx 대의 상태코드는 Request를 정상적으로 처리하기 위해 클라이언트 측에서 특별한 처리를 수행해야 함을 나타낸다.&lt;/p&gt;

&lt;h3 id=&quot;300-multiple-choices&quot;&gt;300, Multiple Choices&lt;/h3&gt;

&lt;p&gt;요청한 리소스가 여러 곳에 있을 때 어떠한 리소스를 원하는지를 서버가 묻는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;301-moved-permanently&quot;&gt;301, Moved Permanently&lt;/h3&gt;

&lt;p&gt;요청된 리소스의 위치가 영구적으로 변했음을 나타낸다. 이후에는 실제 변경된 URI를 사용해야 된다는 것을 나타낸다.
변경된 URI는 Response의 Location 필드를 통해 알 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;302-found&quot;&gt;302 Found&lt;/h3&gt;

&lt;p&gt;요청된 URI는 일시적으로 새로운 URI를 가진다. 301과 비슷하지만 변경된 URI는 일시적인 것으로, 다시 원래대로의 URI를 가질 수 있다. 클라이언트는 이 응답을 받자마자 Request를 완전히 처리하기 위해 새로운 URI를 사용해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;303-see-other&quot;&gt;303 See Other&lt;/h3&gt;

&lt;p&gt;이 상태코드는 리소스가 다른 URI에 있는데, &lt;strong&gt;GET 메소드&lt;/strong&gt; 를 통해 얻어야 한다는 것을 강조한다. 302 Found와 같은 기능인데 다른 URI에 대한 Request를 보낼 때 &lt;strong&gt;GET 메소드&lt;/strong&gt;를 사용해야 된다는 것을 명확히 한다.&lt;/p&gt;

&lt;p&gt;주로 POST 메소드를 통해 엑세스한 CGI 프로그램의 처리 결과를 별도의 URI를 통해 받게할 때 303을 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;301, 302, 303 상태코드에 대해서 대부분의 브라우저는 GET 메소드를 통해 변경된 URI에 대해 다시 재송신하도록 되어 있다. 301, 302의 사양은 POST 메소드를 GET 메소드로 바꾸는 것을 금지하고 있지만 대부분의 브라우저는 이렇게 구현되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;304-not-modified&quot;&gt;304, Not Modified&lt;/h3&gt;

&lt;p&gt;클라이언트가 조건부 Request를 보냈을 때 리소스에 대한 엑세스는 허락하지만 조건이 충족되지 않았다는 것을 의미한다.
&lt;strong&gt;If-Since-Modified&lt;/strong&gt; 헤더에 시간을 설정하고 클라이언트가 Request를 보내면 서버는 그 시간 이후로 해당 리소스의 변경이 없다면 304 상태코드만 보내고 리소스의 내용은 보내주지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;305-use-proxy&quot;&gt;305, Use Proxy&lt;/h3&gt;

&lt;p&gt;리소스를 프록시를 통해서만 받으라는 의미이다. Response의 Location 필드에 프록시 URI가 명시되어 있으며 이 후에 이 프록시 URI를 통해 접근해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;307-temporary-redirect&quot;&gt;307, Temporary Redirect&lt;/h3&gt;

&lt;p&gt;요청된 리소스의 URI가 일시적으로 옮겨졌다는 것으로 302와 비슷한데 307의 경우에는 브라우저 사양에 따라 POST 메소드에 대해 GET으로 치환하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4xx-client-error&quot;&gt;4xx, Client Error&lt;/h2&gt;

&lt;p&gt;이 상태코드들은 클라이언트의 원인으로 에러가 발생했음을 나타낸다.&lt;/p&gt;

&lt;h3 id=&quot;400-bad-request&quot;&gt;400, Bad Request&lt;/h3&gt;

&lt;p&gt;클라이언트가 보낸 Request 문법이 잘못되었다는 것을 나타낸다. 이 에러가 발생한 경우, 클라이언트 측에서는 Request를 재검토 후 재송신할 필요가 있다.&lt;/p&gt;

&lt;h3 id=&quot;401-unauthorized&quot;&gt;401, Unauthorized&lt;/h3&gt;

&lt;p&gt;인증이 필요한 리소스에 대해 인증없이 접근할 경우 발생한다. 이 상태 코드를 사용할 때 서버는 반드시 클라이언트로 어느 인증 방식을 사용할 것인지 WWW-Authenticate 헤더 필드에 포함하여 보내주어야 한다. 단순히 권한이 없다는 403, Forbidden을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;클라이언트가 Authorization 헤더 필드에 값을 넣은 채로 Request를 보낸 경우라면, 이 상태코드는 단순히 인증이 거절되었다는 것을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;402-payment-required&quot;&gt;402, Payment Required&lt;/h3&gt;

&lt;p&gt;이 코드는 HTTP 로 구현된 것은 아닌데, 서버의 리소스를 획득하기 위해 추가적인 지불이 필요하다는 것을 나타낸다.&lt;/p&gt;

&lt;h3 id=&quot;403-forbidden&quot;&gt;403, Forbidden&lt;/h3&gt;

&lt;p&gt;서버가 리소스에 대한 접근을 거부할 때 사용한다. 이 에러는 서버 자체 또는 서버에 있는 리소스에 대한 접근 권한이 없을 경우 발생하며 이 떄 뜨는 것이 403 에러이다.&lt;/p&gt;

&lt;h3 id=&quot;404-not-found&quot;&gt;404, Not Found&lt;/h3&gt;

&lt;p&gt;해당 리소스가 서버에 없다는 뜻이다. 이 상태 코드는 클라이언트 에러에 해당하는 상태 코드들 중 가장 많이 보게된다. 또한 서버가 Request를 거부하고싶은데 이유를 명시하고 싶지 않는 경우에도 이 것을 사용할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;405-method-not-allowed&quot;&gt;405, Method Not Allowed&lt;/h3&gt;

&lt;p&gt;클라이언트가 해당 리소스에 대해 잘못되었거나 허용되지 않는 메소드를 통해 접근하였을 때 사용하는 상태 코드이다.
Response의 Allow 헤더 필드에는 해당 리소스에 사용할 수 있는 메소드 목록을 포함한다.&lt;/p&gt;

&lt;h3 id=&quot;406-not-acceptable&quot;&gt;406, Not Acceptable&lt;/h3&gt;

&lt;p&gt;요청은 정상이긴한데, 서버에서 받아들일 수 없는 경우에 사용한다.
Spring 에서 오브젝트를 JSON으로 변환해서 보내주는 과정에서 에러가 있으면 이 상태 코드가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/16335591/spring-mvc-json-406-not-acceptable&quot;&gt;spring-mvc-json-406-not-acceptable&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;407-proxy-authentication-required&quot;&gt;407, Proxy Authentication Required&lt;/h3&gt;

&lt;p&gt;401과 유사한데, 클라이언트는 프록시에서 인증이 먼저 필요하다는 것을 명시한다. 클라이언트는 프록시 서버에 인증한 후 다시 시도해봐야 한다.&lt;/p&gt;

&lt;h3 id=&quot;408-request-timeout&quot;&gt;408, Request Timeout&lt;/h3&gt;

&lt;p&gt;클라이언트의 요청이 서버에서 지정한 시간내에 처리하지 못했음을 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;5xx-server-error&quot;&gt;5xx, Server Error&lt;/h2&gt;

&lt;p&gt;이 상태 코드들은 서버 측의 에러가 있을 경우 사용하는 코드들이다.&lt;/p&gt;

&lt;h3 id=&quot;500-internal-server-error&quot;&gt;500, Internal Server Error&lt;/h3&gt;

&lt;p&gt;서버에서 오류가 발생하 작업을 수행할 수 없을 경우에 볼 수 있다. HTTP Request에 대한 리소스가 JSP, PHP, 서블릿등과 같은 프로그램일 경우 루틴이 동작하다가 에러가 발생할 경우 이 상태코드를 보낸다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;서버 개발자는 오류에 대한 내용, 즉 프로그램 언어, Exception 내용, 웹 서버의 종류 등이 클라이언트로 노출되지 않도록 해야한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;501-not-implemented&quot;&gt;501, Not Implemented&lt;/h3&gt;

&lt;p&gt;클라이언트의 Request를 서버가 수행할 없음을 나타낸다.&lt;/p&gt;

&lt;h3 id=&quot;502-bad-gateway&quot;&gt;502, Bad Gateway&lt;/h3&gt;

&lt;p&gt;게이트웨이가 잘못된 프로토콜을 통해 연결하거나 프로토콜에 문제가 있어 통신이 제대로 되지 않았을 경우에 사용한다.
보통 서버에 과부하가 걸려있거나 네트워크가 잘못된 연결을 했을 경우에 발생한다.&lt;/p&gt;

&lt;h3 id=&quot;503-service-temporarily-unavailable&quot;&gt;503, Service Temporarily Unavailable&lt;/h3&gt;

&lt;p&gt;해당 리소스를 사용할 수는 없지만, 앞으로 복구된다는 의미이다. 보통 서버가 유지보수 중이거나 터졌을 때 발생하며, Retry-After 헤더 필드를 Response 에 포함하여 보냄으로써 클라이언트가 언제부터 다시 리소스를 사용할 수 있는지 알 수 있게 할 수 있다. 만약, 이 필드가 없다면 클라이언트는 500 에러처럼 처리해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;504-gateway-timeout&quot;&gt;504, Gateway Timeout&lt;/h3&gt;

&lt;p&gt;클라이언트와 오리진 서버사이에 프록시 서버나 게이트웨이가 있을 때 이 서버가 오리진 서버로부터 정해진 시간내에 Response를 받지 못했을 경우에 사용한다.&lt;/p&gt;

&lt;h3 id=&quot;505-http-version-not-supported&quot;&gt;505, HTTP Version Not Supported&lt;/h3&gt;

&lt;p&gt;서버가 Request에 사용된 HTTP Version을 지원하지 않을 경우에 사용한다. 웬만해서는 볼 수 없다.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://dhsim86.github.io/web/2017/01/01/http_status_code-post.html</link>
        <guid isPermaLink="true">https://dhsim86.github.io/web/2017/01/01/http_status_code-post.html</guid>
        
        <category>java</category>
        
        <category>web</category>
        
        
        <category>Web</category>
        
      </item>
    
  </channel>
</rss>
