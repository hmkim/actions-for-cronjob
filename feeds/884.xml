<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Hyeonil's Note</title>
  <link>https://blog.nuti.pe.kr/</link>
  <updated>2019-05-12T12:51:17+00:00</updated>
  <id>https://blog.nuti.pe.kr</id>
  <author>
    <name>Hyeonil Jeong</name>
    <email></email>
  </author>
  <image>
    <title>Hyeonil's Note</title>
    <url>https://blog.nuti.pe.kr/public/img/profile2.jpg</url>
    <link>https://blog.nuti.pe.kr/</link>
    <description>Hyeonil's Dev Note
</description>
  </image>

  
  <entry>
    <title>2019-05-12 Daily Post</title>
    <link href="https://blog.nuti.pe.kr/2019/05/12/diary/"/>
    <updated>2019-05-12T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/05/12/diary</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;클로저&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#클로저&quot;&gt;1. 클로저&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바스크립트의 클로저 개념을 4년만에 이해했다.
지금은 이해하고있지만 곧 다시 잊고 헷갈릴지도 모르겠다.
자바스크립트를 그냥 사용만 해보고 요즘 처음으로 공부해보고 있는데 알고있으면 도움이 많이 될 것 같다.
이것도 언젠가는 블로그에 정리해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;angular_js&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#angular_js&quot;&gt;2. Angular JS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Angular JS? Angular? 버전 올라가면서 1과 2~가 부르는 명칭이 다르다했는데 기억이 안난다.
프론트엔드에 대해서 잘 모르고 실무에서는 프레임워크를 안써봐서 프론트엔드 프레임워크에 대해서는 잘 모르는데, 최근에 조금 보니 좋은것 같다.
Angular JS는 별로 좋지않다고 들었던 것 같은데 악명(?)에 비해서는 프론트엔드 멍청이가 보기에는 꽤나 좋은 프레임워크인 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;3. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Analytics는 생각보다 많은 정보를 수집해서 가지고 있다.
브라우저 정보부터 사용자 행동패턴까지 수집한 정보를 가공해서 많은 부분에 활용할 수 있도록 한다.
Google Analytics의 API에 대해서 보고 있는데, Google Analytics에서 웹 클라이언트로 제공해주는 사이트보다 훨씬 많은 것을 할 수 있는 것 같다.
필터링의 경우 사이트에서는 일부 제약이 있지만 API를 사용하면 제약이 많이 없어진다.
조회 성능때문에 제약을 걸어둔건가 싶기도 한데 좀 더 알아봐야겠다.
정리가 어느정도 되면 포스트 작성해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;잡담&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#잡담&quot;&gt;4. 잡담&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최근들어 평일에는 어렵지만 주말에는 가급적이면 운동을 하고있다.
이제 2주째인데 주말에만 하면 살이 안빠지려나 싶다.
평일에도 할 수 있으면 해야지 싶은데 퇴근하면 만사가 귀찮으니 하려나 싶다.
그래도 술은 많이 줄였으니 조금은 가능성이 있어보인다.
정 안되면 스트레칭정도라도 하려고 노력해봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그는 1일 단위로 작성하려했는데 점점 1주일 단위가 되고있다.
1일 단위로 쓰면 내용이 별로 없기도 하고 평일에는 만사가 귀찮아서 안하게되는 것 같다.
그래도 노력이라도 해봐야겠다. 일기라도 쓸까&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>2019-05-05 Daily Post</title>
    <link href="https://blog.nuti.pe.kr/2019/05/05/diary/"/>
    <updated>2019-05-05T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/05/05/diary</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;계약에_의한_설계design_by_contract&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#계약에_의한_설계design_by_contract&quot;&gt;1. 계약에 의한 설계(Design by Contract)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;얼마전 스프링캠프에서 계약에 의한 설계(Design by Contract)라는 말을 들었다.
처음 듣는 용어라서(지금 생각해보면 들었을것 같은데 기억나지 않으니 처음듣는 것이다) 조금 찾아봤는데, 선행조건과 후행조건, 그리고 불변식이 핵심적인 내용이다.
간단하게 요약하자면 어떤 메소드 M에 a라는 값이 입력값으로 들어갔을 때 이 메소드는 항상 b라는 값을 반환한다는 것을 보장한다는 것이다.
선행조건과 후행조건으로는 a의 값과 b의 값에 대한 조건이 될 수 있다.(예를 들면 null이 아니다 라던지..)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 용어와 설계기법은 모르고 있었지만 설계를할 때 가능한 지키려하는 방법 중 하나라서 친숙한 설계방법이었다.
개인적인 생각으로 저런 방법으로 설계를 함으로써 메소드의 역할과 책임이 분명해진다고 생각한다.
역할과 책임이 분명해짐으로 디버깅이 편하고, 무엇보다 입력값에 대한 반환값이 보장되어 TC작성에 유리한 설계방법이다.
특정 기능에 대해 입력값과 반환값이 보장되므로 보장되는 값으로 메소드를 실행해서 반환값을 확인하면 되기 때문이다.
또한, 기능간의 호출관계를 정리하기 좋은 설계방법이라고 생각한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;함수형 프로그래밍에서 함수가 되기 위한 조건 중 하나(맞나&amp;#8230;&amp;#8203;?)에도 이와 같은 조건이 필요했던 것으로 기억하여 무슨차이가 있나 생각해봤다.
고민하다 지인에게 질문을 했는데 지인피셜로 함수형 프로그래밍에서 이 개념을 포함하는 것이라 한다.
좀 더 자세한 내용은 독립 포스트로 작성해봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;2. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Analytics는 페이지 로딩 시 &lt;code&gt;ga('send', 'pageview')&lt;/code&gt;로 페이지 조회 정보를 전송한다.
지금까지 페이지 조회에 대한 정보만 수집해서 분석하는 기능만 있는 줄 알았는데 생각보다 할 수 있는 기능이 많은 것 같다.
페이지 조회 외에도 이벤트 발생 시에도 &lt;code&gt;ga&lt;/code&gt; 함수를 호출해서 이벤트 전환 정보를 기록할 수도 있다.
또한, GA에서 제공하는 Dimension 값을 지정하거나 Custom Dimension 값을 지정해서 특정 사용자의 정보를 지정해서 특정 사용자의 행동 패턴도 파악할 수 있다.
아직 알아볼 기능이 많지만 이것도 공부를 좀 더 한 후 독립 포스트로 작성해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;블로그_카테고리_정리&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#블로그_카테고리_정리&quot;&gt;3. 블로그 카테고리 정리&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그 카테고리가 많아서 정리를 했다. 일단 이대로 글을 계속 써보다가 개편해야될거같으면 다시 해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;디자인패턴&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#디자인패턴&quot;&gt;4. 디자인패턴&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;디자인패턴을 자주 검색해서 찾아본다. 검색하는 횟수가 좀 많아졌는데 그냥 블로그에 정리해놔야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ddd&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#ddd&quot;&gt;5. DDD&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최범균님이 쓴 DDD START! 를 읽기 시작했다.
내용이 생각보다 심오한거같다.
앞부분만 조금 읽고 전반적으로 어떤내용을 다루는지 한 번 훑어본 다음에 책을 덮었다.
오늘은 정신이 좀 산만해서 집중이 잘 될때 제대로 읽어야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;잡담&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#잡담&quot;&gt;6. 잡담&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그에 정리한다고 한 내용은 언제 정리를 할지 모르겠다. 매번 한다하고 안한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;날이 엄청 풀리다 못해 더워졌다.
어린이날이다. 일요일이지만 대체휴일로 내일도 쉰다. 쉬면뭐하나 공부하고 운동해서 살이나 빼야지 ㅠㅠ&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이전회사에서 퇴사한지 1년 조금 넘게 지났다. 아직도 이전회사에서 사용하는 특정 모듈의 에이전트정보가 나한테 문자로 온다.
처음에는 웃겼는데 이거 정보 빼달라고 연락해야되나..&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>2019-04-30 Daily Post</title>
    <link href="https://blog.nuti.pe.kr/2019/04/30/diary/"/>
    <updated>2019-04-30T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/04/30/diary</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;1. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;구글 어낼리틱스에서 유용하고 사용할만한 몇가지 기능을 알게되었다.
사용법도 조금씩 익혀가고 있다.
아직은 블로그에 달아놓기만 하고 제대로 활용하고있지 못한데 사용법을 조금씩 익히면서 유의미한 데이터를 볼 수 있는 방법을 조금씩 찾아봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;현금영수증_용도변경&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#현금영수증_용도변경&quot;&gt;2. 현금영수증 용도변경&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;어제 홈택스에 용도변경신청을 했는데 오늘 답변이 왔다.
접수가 완료됐고, 변경되는데 1주일정도 걸린다고 한다.
생각보다 오래 걸리기는 하지만 되는게 어디야 기다려야지.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fiddler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#fiddler&quot;&gt;3. Fiddler&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아직 사용법이 익숙하진 않지만 fiddler를 통해 웹 요청을 확인한다.
주로 브라우저 개발자툴을 이용하기는 하지만 화면전환이 일어나는 곳에서는 피들러를 사용하고 있다.
피들러에서 프록시 설정을 하고, 모바일 기기에서 wifi 설정에서 프록시 설정을 하면 피들러를 사용하는 pc를 프록시할 수 있다.
http 뿐만 아니라 https도 약간의 설정과 신뢰과정을 거치면 요청을 중간에 가로챌 수 있다.
모바일 앱에서 요청을 보내고 그 요청을 피들러가 있는 프록시 서버에서 가로채서 요청/반환 값을 변조할 수 있다.
신뢰 과정을 거쳐야하기 때문에 해킹을 하는데 사용하기는 어렵지만 장난치기 좋을것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grails&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#grails&quot;&gt;4. Grails&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;망할 grails는 아무리 봐도 줏대가 없다.
프레임워크에서 사용하는 변수인데도 언제는 콜렉션 객체였다가 언제는 문자열 객체가 된다.
계층파괴는 둘째치고 이건 진짜 좀 너무하는거 아닌가?
마음에 드는건 기본 테스트 Framework로 Spock을 사용한다는거 하나뿐이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;5. etc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;봄이여서 그런지 벌이 많이 나오고있다. 무섭다.
내일은 근로자의날이라 쉰다 너무 좋다 ^^&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;끄읕!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>2019-04-29 Daily Post</title>
    <link href="https://blog.nuti.pe.kr/2019/04/29/diary/"/>
    <updated>2019-04-29T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/04/29/diary</id>
    <content type="html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;얼마나 자주, 오래 할 지는 모르겠지만 오늘부터는 가급적 그 날 알게된 것이나 겪은 일을 블로그에 기록하려 한다.
개발과 관련된 내용일 수도 있고, 전혀 관련없는 내용일 수도 있다.
그냥 글쓰기 연습겸 일기장처럼, 낙서장처럼 끄적일 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;현금영수증_용도변경&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#현금영수증_용도변경&quot;&gt;1. 현금영수증 용도변경&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;현금영수증을 개인소득공제에서 지출증빙으로 용도변경 할 일이 생겼다.
판매 사이트나 판매단체에서는 딱히 이렇다할 방법이 없는것 같다.
지인으로부터 국세청에서 용도변경이 가능하다는 정보를 얻었다.
국세청에 문의해본 결과 인터넷으로 용도변경 신청시 필요한 서류는 신분증 사본(주민등록증, 운전면허증, 여권)과 건 별 내역서 혹은 현금영수증 사본(날짜, 승인번호 9자리, 금액이 모두 기재되어 있어야 함, 홈택스에서 다운 가능)이 필요하다는 답변을 받았다.
또한, 소비자 발급수단관리에 지출증빙 귀속 사업장이 입력되어있어야 한다고 한다.
그래서 필요한 서류를 준비해서 국세청에 용도변경 신청을 했다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;browser_request_content_type&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#browser_request_content_type&quot;&gt;2. Browser Request Content Type&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;브라우저에서 웹 서버로 요청을 보내면 무조건 Request Header에 Content Type이 포함된다고 생각하고 있었다.
그런데 오늘 보니 그게 아니였다. 그냥 GET 요청이면 Request Header에 Content Type이 포함되지 않는다.
이게 특정 브라우저에서만 그런지 모든 브라우저에서 동일한 것인지 까지는 확인해보지 않았지만 처음 알게된 사실이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apache_poi&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#apache_poi&quot;&gt;3. apache poi&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;엑셀과 관련된 기능을 처리하기 위해 많이 사용하는 라이브러리다.
이 apache poi가 특정 버전에서 특정 버전으로(minor) 올라가면서 어떤 기능의 기본 값(default value)이 바뀐다는 것을 얼마전에 알게 되었다.
오늘 버전을 올리면서 기본 값 뿐만 아니라 이 라이브러리를 사용하여 템플릿(?)처럼 기능을 제공하는 다른 라이브러리에서도 버전호환성이 맞지 않아 문제가 발생한다는 것을 알게되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grails_filter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#grails_filter&quot;&gt;4. Grails Filter&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Grails의 Filter에서 uri로 필터를 지정할 수 있다는 것을 알고 있었다.
uri에 **를 사용해서 하위 경로를 포함시켜 필터를 적용할 수 있다.
그런데 서로 다른 패턴으로 동일한 필터를 적용시킬 수 있을 줄 알았는데 적용이 안된다.
controller로 조건을 걸 때는 'example*|sample*' 처럼 여러 패턴을 하나의 필터에 적용할 수 있는데 uri는 안된다.
uri도 여러 패턴을 적용할 수 있게 해줬으면 좋겠다는 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;asciidoc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#asciidoc&quot;&gt;5. asciidoc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그를 asciidoc으로 쓰고 travisCI를 통해 빌드를 해서 github page로 관리를 하는데,
이 글을 쓰면서 특수문자 치환방지를 위해서 역슬래시(\)를 쓰면 된다는 것을 알게됐다.
근데 적용하고 보니 역슬래시도 같이나온다. 다시 알아봐야겠다.
그런데 역슬래시를 쓰고싶은데 역슬래시 치환방지는 어떻게 하는거지? 그냥 쓰면 되나?
일단 그냥 써봐야지&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;6. etc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;스프링캠프 참석 이후 자극을 받게 되었고, 이제 다시 공부를 조금씩 시작하려고 한다.
아예 안한 것은 아니지만 했다고 볼 수도 없었다.
책을 폈는데 눈에 들어오지 않는다.
오랫만에 하는거니깐 처음부터 무리하지 말아야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 글쓰기도 정말 얼마나 오래할 지 모르겠다.
매일은 아니더라도 가끔 한번씩은 써야지 라고 생각하고 있는데 첫날부터 이런 생각을 하는 것을 보면 정말 오래 못쓰겠지 싶다.
블로그도 쓰는 김에 카테고리 정리도 조만간 해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;끄읕!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>SpringCamp 2019 참석 후기</title>
    <link href="https://blog.nuti.pe.kr/2019/04/28/spring-camp-2019/"/>
    <updated>2019-04-28T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/04/28/spring-camp-2019</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;Intro&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#Intro&quot;&gt;1. Intro&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SpringCamp는 2016년, 2017년 그리고 그 이후 2년만에 참석하는 것이다.
총 세 번 참석을 했는데, 지난번에 참석했을 때 모두 기억이 좋게 남아있어서 또 참석하게 되었다.
사실 작년에도 참석을 하고있었지만&amp;#8230;&amp;#8203; 티켓 판매사이트에서 티켓 판매 오픈을 이상하게 하는 바람에 멍떄리다가 티켓팅에 실패했다.
올해는 2번으로 나눠서 티켓판매를 했는데, 첫 날 작년처럼 멍때리다 실패하고, 두 번째 날 겨우 티켓팅에 성공했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;올해는 주로 코틀린과 모니터링에 대한 세션이 많았고, 개발 경험에 대해서 공유하는 세션들도 있었다.
코틀린은 아니지만 DSL을 사용하고 있는 입장에서 DSL을 명세를 작성하거나 스크립트를 작성하는 것이 아닌 비즈니스 애플리케이션을 구현하는데 사용한다는 것에 대해 회의적인 생각을 가지고 있어서 코틀린에는 큰 관심이 없기 떄문에 코틀린과 관련된 세션은 듣지 않고 다른 세션 위주로 참석을 했다.
참석한 세션의 내용 대부분이 만족스러웠고, 내가 가진 경험이나 생각과 비교를 하면서 들을 수 있어서 만족스러웠다.
또한, 스프링의 기능이나 모듈등에 대해서 새로 알게된 것들이 있어서 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;참석한 세션은 아래와 같고, 하루가 지났다고 기억이 자세히나지 않는 부분이 많지만 기억나는 내용 및 요약한 내용을 정리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실전에 써먹는 스프링 부트 (김지헌님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring With Actuator (서경원님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바에서 null을 안전히 다루는 방법 (박성철님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무엇을 테스트할 것인가? 어떻게 테스트할 것인가? (권용근님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당신도 할 수 있는 레거시 프로젝트 개선 이야기 (이경일님)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring-boot&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring-boot&quot;&gt;2. 실전에 써먹는 스프링 부트 (김지헌님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;업무에서 스프링 부트를 사용하고 있지는 않지만 개인적으로 공부를 조금씩이나마 하고 있고, 좀 더 알고 싶어서 세션에 참석했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;스프링부트&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#스프링부트&quot;&gt;2.1. 스프링부트&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Netflix도 자바와 관련된 시스템은 모두 스프링 부트로 전환했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Spring Boot&lt;/code&gt; - &lt;code&gt;Spring Cloud&lt;/code&gt; - &lt;code&gt;Spring Cloud Data Flow&lt;/code&gt;(&lt;a href=&quot;https://spring.io&quot; class=&quot;bare&quot;&gt;https://spring.io&lt;/a&gt; 에 있는 세가지인데 무엇을 설명했는지 기억이 안난다&amp;#8230;&amp;#8203;ㅠㅠ)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발자가 손쉽게 부트앱을 만들 수 있다고 스프링에서 홍보중이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spring Boot&lt;/code&gt;는 &lt;code&gt;Spring Framework&lt;/code&gt;를 기반으로한 개발 플랫폼으로 &lt;code&gt;Spring Boot Starter&lt;/code&gt;, &lt;code&gt;Spring Framework&lt;/code&gt;, &lt;code&gt;Build Tool(Gradle, Maven)&lt;/code&gt;으로 구성되어 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#gradle&quot;&gt;2.2. Gradle&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Gradle&lt;/code&gt;은 &lt;code&gt;Kotlin DSL&lt;/code&gt;과 &lt;code&gt;Groovy DSL&lt;/code&gt;이 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Kotlin DSL의 장점&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;빠른 문서보기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 자동완성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;에러 강조표시&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 리팩토링&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Spring Boot Gradle Plugin&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;의존성 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행가능한 아카이브 패키징&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 배포&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actuator 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bombill_of_material&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bombill_of_material&quot;&gt;2.3. BOM(Bill of Material)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BOM&lt;/code&gt;으로 인해 버전을 명시적으로 작성하지않아도 된다.(호환 버전을 자동으로 import)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring-boot-dependencies&lt;/code&gt; 모듈이 의존성 관리를 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enforce platform&lt;/code&gt;으로 다른 &lt;code&gt;BOM&lt;/code&gt; 파일 가져올 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#code&quot;&gt;2.4. Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@Profile&lt;/code&gt; 어노테이션으로 프로파일에 따라 다른 빈 설정 및 주입을 할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;스프링 부트 자동구성(AutoConfiguration)&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Conditional~~&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;애플리케이션 속성을 실행시점에 외부에서 변경한다.&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실행 시점에 실행 파라미터(?)로 주입&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무슨 json 을 만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ConfigurationProperties Example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;example.tt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ExampleProperties&lt;/span&gt; {
  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name;
  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기&quot;&gt;2.5. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;스프링 부트를 공부용으로 하는 작은 토이 프로젝트에서는 사용하고있다.
하지만 공부를 하는 것과 실무를 하는 것에는 차이가 있기 떄문에 공부를 하면서 알지 못한 처음보는 기능들을 알게되어서 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;monitoring-with-actuator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#monitoring-with-actuator&quot;&gt;3. Monitoring With Actuator (서경원님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;두번째 세션은 부종민님의 &lt;code&gt;websocket&lt;/code&gt; 세션과 고민을 많이 하다가 밝히기 어려운 이유로 서경원님의 세션에 참석했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why_how_monitoring&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#why_how_monitoring&quot;&gt;3.1. Why &amp;amp; How Monitoring&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장애 예방, 원인 파악, 조치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;변경에 대한 상태 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;성능 개선&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장기적인 서비스 상태 분석&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지표가 필요하다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;모니터링을 하는데 지표를 어디서 어떻게 획득할 것인가?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;nhn_모니터링_시스템&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#nhn_모니터링_시스템&quot;&gt;3.2. NHN 모니터링 시스템&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서버 인프라 지표 수집&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 지표 수집&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모니터링 차트 제공&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지표 감시 및 알림&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spring_boot_actuator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_boot_actuator&quot;&gt;3.3. Spring Boot Actuator&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot 애플리케이션 모니터링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어 도구 제공 - &lt;code&gt;endpoints&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 지표 제공 - &lt;code&gt;metrics&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dependency&lt;/code&gt; 추가하면 &lt;code&gt;AutoConfiguration&lt;/code&gt;에 의해서 자동으로 등록한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 종류의 &lt;code&gt;endpoints&lt;/code&gt; 를 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용할 &lt;code&gt;endpoints&lt;/code&gt;를 설정을 통해서 제어 가능 및 외부 노출 설정이 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enabled-by-default=false&lt;/code&gt;로 해서 기본 사용 옵션을 끌 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring-security&lt;/code&gt;로 endpoint 권한 설정 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;metrics_endpoint&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#metrics_endpoint&quot;&gt;3.4. Metrics Endpoint&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jvm&lt;/code&gt;, &lt;code&gt;jdbc&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt;, &lt;code&gt;library&lt;/code&gt; 등 여러가지 &lt;code&gt;metrics&lt;/code&gt; 제공한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Boot1&lt;/code&gt;에서 &lt;strong&gt;계층형&lt;/strong&gt;이었지만 2에서 &lt;strong&gt;&lt;code&gt;Dimension&lt;/code&gt;구조&lt;/strong&gt;로 변경(Tag를 붙입)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dimension구조 장점&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이해하기 쉬움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 관점에서 지표 분석 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유연함 손쉬운 Tag 추가/삭제&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;RED Method - 반드시 측정해야하는 metrics&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Request Rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request Errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request Duration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hystrix - Circuit Breaker 장애 내성 / 지연 내성&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;micrometer&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#micrometer&quot;&gt;3.5. Micrometer&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;설정밥법&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dependency 추가 - AutoConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prometheus endpoint 추가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_2&quot;&gt;3.6. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컨디션이 좋지 않아 많이 졸으면서 들었는데 &lt;code&gt;Actuator&lt;/code&gt;라는 모듈을 통해서 모니터링을 할 수 있고, 지표를 볼 수 있다는 새로운 사실을 알게되어 좋았다.
여러 서버를 돌린다면 &lt;code&gt;actuator&lt;/code&gt;를 통해서 서버에서 지표를 제공하고, 그 지표를 수집하는 저장소와 가시화할 수 있는 방법이 추가로 필요할 텐데 이에 맞춰서 인프라를 구축한다면 좋겠다는 생각을 했다.
다만, 전사적인 인프라를 구축하는데 사용하는데는 약간 무리가 있지 않을까 라는 생각을 하게 되었는데, 다른 한 편으로는 잘 알지는 못하지만 전사적으로 사용하는데 무리가 없으니 사용하고 있겠지 라고 생각했다.
또한, &lt;code&gt;actuator&lt;/code&gt;에서 가시화하는 일부 환경(?)에 맞춰서 효율적으로 데이터를 전달해준다는 정보는 정말 좋은 팁이였던 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;handle-null&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#handle-null&quot;&gt;4. 자바에서 null을 안전히 다루는 방법 (박성철님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바개발자라면 모두 궁금해할 만한 주제였다고 생각한다. 개발을 하는 과정에서 &lt;code&gt;null&lt;/code&gt;체크를 한다고 했지만 발생하는 &lt;code&gt;NullPointerException&lt;/code&gt;.
자바개발자가 가장 흔히 볼 수 있는 &lt;code&gt;Exception&lt;/code&gt;이고, 고민을 많이 하는 부분이라고 생각한다.
많은 개발자들에게 고통을 주는 &lt;code&gt;null&lt;/code&gt;을 안전하게 다루는 방법이라 하여 흥미가 생겨 이 세션을 듣게 되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;null에_대해서&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#null에_대해서&quot;&gt;4.1. null에 대해서&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JVM 언어 전쟁&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2000년대 중반 동적 티이핑/스크립팅 언어가 유행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2010년 전후 함수형 프로그래밍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2010년대 중반 null 안정성(실론, 코들린)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;null 참조&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;레코드 핸들링: 객체지향의 시초가 된 논문&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특별한 값이 없음을 나타내려고 null을 도입했고 이 값을 사용하려고 할 때 오류를 내도록 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두 참조값이 null 일 때 두 참조는 동일하다고 판단&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;자바의 null 참조&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;의미가 모호함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초기화되지 않음, 정의되지 않음, 값이 없음, null 값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 참조의 기본 상태(값?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 참조는 null 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;null을_안전하게_다루는_방법&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#null을_안전하게_다루는_방법&quot;&gt;4.2. null을 안전하게 다루는 방법&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;자바 기본 장치&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단정문(assertion)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공개 메서드에서 사용하지 않아야 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소비자이면서 생산자일 때 만 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enableassertions 또는 -ea 옵션으로 활성화&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Objects&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;null을 핸들링할 수 있는 메소드들이 추가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Optional&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;변수와 반환값에 null을 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional에 값이 있다가 확신하지 않는 한 get을 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isPresent나 get은 가능한 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필드 매개변수등으로는 사용하지 말라&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;직렬화 불가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환값은 사용해도 된다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;null 잘 쓰는 법&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API에 최대한 쓰지 말아라&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;null로 지나치게 유연한 메서드를 만들지 말고 명시적인 메서드를 만들어라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null을 반환하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환 값이 꼭 있어야 한다면 null을 반환하지 말고 예외를 던져라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빈 반환값은 Null 객체&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사전조건과 사후조건을 확인하라: 계약에 의한 설계&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design by Contract&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(개인적으로 좀 더 공부가 필요할 것 같음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null의 범위를 지역(클래스 메서드)화&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_3&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_3&quot;&gt;4.3. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;발표자 분께서 &lt;code&gt;null&lt;/code&gt;을 다루는 몇가지 방법에 대해서 공유를 해주셨고,
주의할 점에 대해서 공유를 해주셨는데 누군가 알려주지 않았지만 느낌적인 느낌으로 발표내용처럼 하고있던 부분들이 있어서 숙제검사를 받은 느낌이라 좋았고,
주의해야될 부분들이 정말 꿀팁이였던 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#testing&quot;&gt;5. 무엇을 테스트할 것인가? 어떻게 테스트할 것인가? (권용근님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;평소에 테스트에 대해서 많은 관심을 가지고 있기 때문에 꼭 듣고싶었던 세션이다.
세션을 들어가기 전부터 기대를 많이 했고 내용이 궁금했다.
결론적으로는 이번 SpringCamp에서 가장 만족한 세션이었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;테스트로부터_얻을_수_있는것&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#테스트로부터_얻을_수_있는것&quot;&gt;5.1. 테스트로부터 얻을 수 있는것&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;안정감과 자신감이 생긴다&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;무엇을_테스트할_것인가&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#무엇을_테스트할_것인가&quot;&gt;5.2. 무엇을 테스트할 것인가?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 요구사항 정리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구현 vs 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구현은 언젠가 변할 수 있고 테스트는 구현에서 무엇을 하는지 알 수 없고 알 필요도 없다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;테스트 불가능한 것&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;외부 요청&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 저장소&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;어떻게_테스트할_것인가&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#어떻게_테스트할_것인가&quot;&gt;5.3. 어떻게 테스트할 것인가?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트할 수 없는 것을 바운더리 레이어까지 올려서 피해를 최소화한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어할 수 없는 영역을 파라미터로 받을 수 있는지 검토한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 요구사항 및 설계가 변경될 수 있다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Java, Spring Framework&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트를 할 때 &lt;code&gt;Spring Context&lt;/code&gt;가 굳이 필요하지 않다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트를 할 때 비즈니스 프레임워크에 의존하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Test Double&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;무엇을 &lt;code&gt;Test Double&lt;/code&gt;로 처리?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트가 구현을 알아야 함? &amp;#8658; 알 필요 없다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어할 수 없는 영역을 &lt;code&gt;Test Double&lt;/code&gt;로 처리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Embedded&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링에 내장된 시스템을 최대한 활용(ex. H2)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tip_rule&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#tip_rule&quot;&gt;5.4. Tip &amp;amp; Rule&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트는 상호 독립적이어야 한다.(데이터간 의존성이 있어서는 안된다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트안에 의도가 드러날 수 있도록 해라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트코드도 리팩토링 대상이다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_4&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_4&quot;&gt;5.5. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;앞서 언급했지만 평소에 테스트에 대해서 많은 관심을 가지고 있어서 가장 기대를 했고 주의깊게 들은 세션이다.
전체적으로 나와 비슷한 생각의 내용으로 발표를 하셔서 방향을 잘 잡아가고 있구나 라고 검사를 받은 느낌이 들어서 기분이 좋았다.
다만 &lt;code&gt;Test Double&lt;/code&gt; 대상을 선git 정하는 부분에 대해서는 생각이 다른 부분이 있었다.
몇몇 이유때문에 테스트에서는 구현에서 어떤 행위를 하는지 알 수 있고 알아야 한다고 생각한다.
잘 못된 생각을 하고있을 수도 있지만 결론적으로 생각이 바뀌진 않았다.
생각이 바뀌진 않았지만 다른 사람의 생각을 듣고 고민을 하고 다시 생각해볼 수 있는 계기가 되어 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improvement-legacy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#improvement-legacy&quot;&gt;6. 당신도 할 수 있는 레거시 프로젝트 개선 이야기 (이경일님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;누구나 경험해본, 경험하고 있는, 경험할 예정인 레거시 프로젝트를 개선한 경험을 공유하는 세션이여서 매우 흥미로운 주제이고 궁금해서 세션을 들었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드란&quot;&gt;6.1. 레거시 코드란?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;막막한 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복잡한 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;남(주로 퇴사자)이 짠 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트코드로 커버되지 않으며 유지보수가 되고있지 않은 코드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방치되고있는 코드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오랜 시간 안정적으로 돌아가는 코드&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드를_외면하는_이유&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드를_외면하는_이유&quot;&gt;6.2. 레거시 코드를 외면하는 이유?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다른사람이 짠 코드는 수정하기 싫다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신규프로젝트가 재미있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조직에서 인정받기 어렵다(ex. 평가가 좋지 않다&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드_개선&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드_개선&quot;&gt;6.3. 레거시 코드 개선&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDD? MSA?&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하면 좋긴 하다&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;내편으로 만들기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;왜 이렇게만들었어 지만 잘 동작은 하고 있음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로직 파악하기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;직접 돌려보면서 파악하는 것이 중요&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 케이스를 봐야함&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하지만 테스트케이스가 없을수도 있다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;급한불부터 끄기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드 리팩토링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리팩토링 대상 우선순위 정하기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불필요하거나 수정하기 어려운(? 유지보수하기 어려운?) 것은 과감하게 삭제&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;한걸음씩 가기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드 패키지 분리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분리가 용이하도록 설계 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드를 분리할 수 있는 부분은 분리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개선을 하면서 코드 단위가 커지면 또 분리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;아픈 곳 고치기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리소스 사용량이 많은 부분은 추출&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로컬 캐시를 사용할 수 있는 부분은 로컬캐시를 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory Leak이 있는지 검토(?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Matcher_AppendReplacement &amp;#8658; 메모리 효율이 좋음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOM Killer가 죽일 떄가 있는데 이런 경우 로그를 확인해서 왜 죽였는지 파악&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v.v2.2 이상이 아니면 쓰지 않는것이&amp;#8230;&amp;#8203;(안정화가 안됐을 가능성이 높다)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;조금 더 다듬기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RAM Drive를 사용할 수 있는가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Cloud Config&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설정을 Cloud로 관리해서 배포 없이 설정 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;basedir&lt;/code&gt;이 &lt;code&gt;/tmp/&lt;/code&gt; 밑에 들어가서 삭제될 수 있기 때문에 &lt;code&gt;basedir&lt;/code&gt; 수정하는것이 좋음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC 튜닝 포인트 확인&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_5&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_5&quot;&gt;6.4. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이경일님의 세션은 레거시 코드를 개선해나간 과정에서 경험한 내용을 공유해주셨다.
세션을 들으면서 레거시 코드를 개선할 때 살펴봐야할 부분들과 주의할 부분 그리고 개선하는 순서 및 개선방법에 대해 생각을 해보게 되었고, 이후에 레거시를 개선한다면 많은 도움이 될 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;postscript&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#postscript&quot;&gt;7. 후기&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;전체적으로 참석한 세션이 모두 만족스러웠지만 특히 권용근님의 &lt;strong&gt;&quot;무엇을 테스트할 것인가? 어떻게 테스트할 것인가?&quot;&lt;/strong&gt;와
이경일님의 &lt;strong&gt;&quot;당신도 할 수 있는 레거시 프로젝트 개선 이야기&quot;&lt;/strong&gt; 세션이 정말 재미있었다.
이 중에도 권용근님의 세션이 정말 좋았는데, 앞서 작성한 후기 내용처럼 내가 생각하는 부분과 유사해서 '방향을 잘 잡아가고 있구나' 라고 생각을 할 수 있었고,
발표 내용중에 내가 생각하는 부분과 다른 부분에서는 '저렇게 할 수도 있구나, 저렇게 해서 얻는 이점이 뭐지?'라고 비교 및 고민을 해볼 수 있게되어 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;멀티리전 가용성을 위한 글로벌 캐싱 - Hidden micro services (정윤진님, 김필중님)&lt;/strong&gt;, &lt;strong&gt;Local Cache와 Invalidation Message Propagation 전략을 활용하여 API 성능 튜닝하기 (김민규님)&lt;/strong&gt;
이 두 세션도 듣고 싶었지만 컨디션이 좋지 않아 일찍 귀가를 해서 듣지 못해 조금 아쉬운 부분이 남았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최근에 조금 많이 안일해져서 이전처럼 공부를 많이 하고 있지 않았는데, 이번에 SpringCamp에 참석해서 나에게 다시 자극을 줄 수 있는 계기기 되었고 이로 인해 정말 참석을 잘 했다 라는 생각을 한다.
이번 행사에서 아쉬운 부분이 조금은 있었지만 SpringCamp는 참석할 때 마다 매우 만족하고 있고, 다음 SpringCamp도 벌써 기대가 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>기능 요구사항 명세(Specification)</title>
    <link href="https://blog.nuti.pe.kr/2019/02/17/specification/"/>
    <updated>2019-02-17T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2019/02/17/specification</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#intro&quot;&gt;1. Intro&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개발 경력이 많지는 않지만 백엔드 개발을 하며 느낀 분석, 설계, 문서화에 대해 기술한 포스트입니다.
의식의 흐름대로 작성한 내용이라 부족한 부분이 많을 수 있는데 잘 못된 내용이나 수정되어야하거나 추가되어야 할 내용이 있다면 글을 읽고 지적 부탁드리고,
문의를 남겨주시면 최대한 답변드리도록 하겠습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;인간은 망각의 동물이다. 본인이 개발을 하더라도 시간이 지난다면 왜 그런식으로 개발을 했는지 잊어버리는 경우가 많다.
본인의 개발을 한 내용에 대해서도 그런데 다른사람이 개발한 내용은 어떠할까?
그 사람이 개발한 내용을 알기 위해 개발한 당사자를 찾아가서 왜 그런식으로 개발했는지, 어떤 이유가 있어서 이런 행위를 하는지 히스토리 확인을 해야된다.
이것도 그 사람과 알고있다는 가정하에 아주 좋은 케이스다.
다른사람에게 물어봤더니 그 사람도 왜 그렇게 했는지 기억해는데 한참이 걸리고, 개발한 당사자에게 물어볼 수 없는 상황이 많다.
이러한 이유때문에 기능개발을 할 때는 그 기능이 어떤 행위를 하는지에 대해 문서로 남겨놔야하고, 그 문서를 통해 본인 혹은 다른 사람들이 그 기능이 어떤 행위를 하는지 알 수 있게 해야한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;또한, 기능에 대한 문서를 작성하다 보면 그 기능이 해야하는 행위가 더욱 명확해지는 경우가 많다.
기능의 행위가 명확해지면 개발범위에 대해서 파악하는 것이 좀 더 수월해지고, 어떤식으로 개발을 할 지에 대한 설계가 가능해진다.
개발의 설계가 된다는 것은 기능 분리 및 관심사 분리가 가능해지는 것이고, 이는 이러한 과정을 거치지 않은 코드보다 뛰어난 품질의 코드를 작성하는데 도움이 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;물론 본인의 기억력에 대해서 엄청난 자신감을 가지고 있고, 다른 사람에게 그 기능이 무슨 행위를 하는지 전달할 필요나 생각이 없는 경우,
문서를 작성하지 않아도 머리속에서 설계가 가능하다면 문서를 작성할 필요는 없다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이번 포스트에서는 웹 프로그램의 백엔드 기능을 개발하는 과정에서 기능을 분석하고 이를 문서로 남기는 방법에 대해 작성을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;기능_분석_및_설계&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기능_분석_및_설계&quot;&gt;2. 기능 분석 및 설계&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개발을 진행하면서 개발하는 기능에 대해서 분석행위를 하지 않는 사람은 없을 것이다.
분석행위를 하지 않는다는 것은 본인이 무엇을 개발하는지도 모르고 기계처럼 다른 사람의 지시에 의해서 타이핑을 하는것이지 개발을 하는것이 아니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기획자가 따로 있어서 화면설계서를 보면서 기능개발을 한다고 가정을 해보겠다.
화면에서 어떤 버튼을 클릭하면 어떤 조건에 대해서 검사를 하고, 조건이 만족되면 어떤 결과가 도출된다는 것이 정의되어 있을 것이다.
이때 백엔드를 개발할때는 화면에 대한 생각을 없애야 한다.
&lt;strong&gt;화면에서 발생하는 하나의 트리거에 의해서 백엔드에서는 두가지, 세가지 이상의 기능이 실행될 수 있다.&lt;/strong&gt;
그렇기 때문에 화면을 참고해서 우선 기능분리를 해야된다.
앞의 예를 조금 더 자세하게 해서 사용자가 회원가입을 하기 위해 정보를 입력하고 가입 버튼을 눌렀을 때 아이디 중복검사, 비밀번호 정합성 검사를 거친 뒤 이를 만족하면 회원정보를 저장하고, 저장된 정보를 반환하는 기능을 개발해야된다고 가정을 하겠다.
기능 분석을 하지 않고 그저 화면설계서에 정의된 내용대로 가입 버튼을 눌렀으니 하나의 메소드에서 화면설계서에서 정의된 내용을 모두 하도록 개발을 한다고 가정을 해보겠다.
화면에서 하나의 트리거에 의해 발생했으니 하나로 묶어서 개발을 해서 결과값을 반환하게 된다면 처음 개발은 편할 것이다. 또한 코드가 한곳에 있으니 코드를 추적하기 쉬워보이기도 한다.
하지만 기능이 확장되거나 재사용되는 경우를 생각해보면 분리해서 개발하는 것이 좋다.
비밀번호 수정하는 기능이 추가되어 비밀번호 정합성 로직이 다른데도 필요하다고 생각을 해보자.
그렇다면 이때서야 비밀번호 정합성을 검사하는 로직을 분리해서 구성을 하거나, &lt;strong&gt;최악의 경우 Copy&amp;amp;Paste로 코드를 복사해서 사용할 것이다.&lt;/strong&gt;
비밀번호 정합성을 검사하는 로직이 그래도 메소드 내부에서 잘 구분되어 있어서 분리하기 쉽다면 좋지만, 다른 부분과 엮여서 분리하기 어려운 경우도 많다.
이 때문에, 최초에 개발을 진행하기 전에 기능에 대한 분석이 필요한 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;기능 분석을 할 때 우선 어떤 기능들이 있는지 기능 리스트업을 해야된다.&lt;/strong&gt;
앞의 예시에서는 아이디 중복검사, 비밀번호 정합성 검사, 회원정보 저장 이렇게 3가지 기능이 있다.
이 외에도 &lt;code&gt;비기능 요구사항&lt;/code&gt;에 의해 실행 로그를 저장한다고 한다면 로그를 저장하는 기능까지 4가지 기능이 필요하게 된다.
기능 리스트업을 하면 상세 기능에 대한 분석이 필요하다. 비밀번호 정합성 검사를 예로들면 어떠한 규칙으로 정합성 검사를 하는지에 대해 분석을 하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;기능에 대한 분석이 완료되면 설계를 하게 될 것이다.&lt;/strong&gt;
회원정보를 저장하는데는 아이디 중복검사와 비밀번호 정합성 검사는 &lt;code&gt;기능 요구사항&lt;/code&gt;이므로 기능 실행에 대한 필수 필요조건이 되고 &lt;code&gt;UseCase&lt;/code&gt;로 표현하면 &lt;code&gt;include&lt;/code&gt; 관계가 된다.
따라서 회원정보를 저장하는 로직에서 아이디 중복검사와 비밀번호 정합성 검사를 호출해서 사용하도록 개발을 할 수 있다.
실행 로그를 저장하는 행위는 &lt;code&gt;비기능 요구사항&lt;/code&gt;으로 회원정보를 저장하는 로직에서는 실행 로그가 저장되는지 알 필요가 없다.
따라서 실행로그를 저장하는 행위는 회원정보를 저장하는 로직에 포함되지 않고, 회원정보를 저장하는 로직이 실행는 전 후로 실행되도록 개발을 할 수 있을 것이다.
이런 식으로 기능에 대한 기본 분석 이후에 기능의 호출 관계 및 실행 순서에 대해서 설계를 할 수 있다.
또한 이런식으로 기능을 분석해서 분리해서 개발을 하게 된다면 이후에 동일한 기능을 사용하는 기능이 추가될 때 추가개발범위가 줄어들게되는 이점이 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능을 분리하는 것은 어려운 일이다.
추가확장의 가능성이 없어서 분리할 필요가 없는데 분리하여 오버스펙이 될 수도 있고, 추가확장의 가능성이 없어서 분리하지 않았지만 뜬금없이 추가확장이 되는 경우도 있다.
이 때문에 기능을 분리할 지 하나로 합칠지에 대해서는 많은 고민이 필요하고 많은 경험이 필요하다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;기능_명세_작성&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기능_명세_작성&quot;&gt;3. 기능 명세 작성&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능 명세를 작성하는데는 특별한 룰은 없는 것 같다. 분석된 기능의 내용을 상세하게 기록하면 된다.
필자의 경우에는 우선 기능의 기본 기능에 대해 작성을 한다.
기본 기능에 대해서 작성한 이후에는 특이케이스 및 예외사항에 대해 작성을 한다.
그 다음에는 어떤 값을 가지고 이 기능을 실행하면 어떤 결과가 도출되는지에 대해 작성을 한다.
기능 명세는 상세하게 작성하면 할 수록 좋다. 그만큼 기능에 대해서 더욱 명확해지기 때문이다.
이렇게 작성한 명세서는 시나리오별로 잘 분리해서 &lt;code&gt;Test Case&lt;/code&gt;로도 사용할 수 있다.
기능분리를 했고, Input/Output에 대한 내용을 정리했고, 특이케이스 및 예외사항에 대해 정의를 했기 때문에 가능한 일이다.
또한, 분석과정에서 기능의 호출관계에 대해서도 분석을 했기 때문에 &lt;code&gt;Mock&lt;/code&gt; 대상에 대해서도 명확해지게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능 명세를 작성하면서 주의할 점은 백엔드 기능에 대해 정의하는 것이므로 화면에 대한 내용이 들어가면 안된다는 것이다.
&lt;strong&gt;백엔드 개발자는 기능분석/설계를 하는 과정에서는 어떠한 경우라도 화면을 배제해야 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;결론&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#결론&quot;&gt;4. 결론&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능을 분석하고 명세를 작성하는 것은 매우 어려운 일이라고 생각한다. 초기 개발과정에서는 쓸데없는 일로 오히려 리소스만 더 소모하는 것으로 보여질 수도 있다.
하지만 지금 당장이 아닌 미래를 본다면 충분히 가치있는 행동이고, 꼭 필요한 행동이다.
문서를 작성하다보면 더욱 많은 고민을 하게 될 것이고, 코드 뿐만 아니라 개인에게도 고민을 통해 얻는 이점이 충분히 있다고 생각을 한다.
또한, 기능을 분석/설계하는 행위와 명세를 작성하는 행위는 &lt;code&gt;Test Case&lt;/code&gt;를 작성하는것이나 &lt;code&gt;클린코드&lt;/code&gt;를 작성하는 것과도 밀접한 연관관계를 가지고 있기 때문에 이에 숙달되면 개발을 하는데 많은 도움이 될 것이라 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;문서를 작성하지 않는 것보다 더욱 위험한 행동은 문서를 업데이트 하지 않는 것이다.&lt;/strong&gt;
없는 정보는 처음부터 찾아보면 되지만 잘못된 정보는 처음부터 찾아보지 않을 수 있고 이로인해 잘못된 판단을 할 수 있기 때문이다.
문서를 작성하지 않았다면 지금부터라도 문서를 작성하는 것에 습관을 들이고, 문서를 업데이트하는 습관을 들이는 것을 추천한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>JVM Memory</title>
    <link href="https://blog.nuti.pe.kr/2018/12/29/jvm-1/"/>
    <updated>2018-12-29T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/12/29/jvm-1</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jvm&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jvm&quot;&gt;1. JVM?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정의된 스펙을 구현한 하나의 독자적인 프로세스 형태로 구동되는 &lt;code&gt;Runtime Instance&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 프로그램의 모든 것들을 실행시키는 기본 데몬&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Class&lt;/code&gt; 파일을 로딩하고 `ByteCode`를 해석하는 과정을 거쳐 메모리 리소스를 할당하고 관리하며 정보를 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Thread&lt;/code&gt; 관리 및 `Garbage Collection`과 같은 메모리 정리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;용어&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#용어&quot;&gt;1.1. 용어&lt;/a&gt;&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;용어&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사용자가 작성한 Java 코드&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Compiler&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Source 파일을 JVM이 해석할 수 있는 Java Byte Code로 변경하는 Compiler&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Byte Code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Compiler에 의해 수행될 결과물(.class 파일)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class Loader&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM 내로 .class파일들을 Load 하여 Loading된클래스들을 Runtime Data Area에 배치&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Execution Engine&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Loading된 클래스의 Byte Code를 해석&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Runtime Data Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM이 프로그램을 수행하기 위해 OS에서 할당 받은 메모리 공간&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Method Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;클래스, 변수, Method, static변수,상수 정보 등이 저장되는 영역으로 모든 Thread가 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Heap Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;new 명령어로 생성된 인스턴스와 객체가 저장되는 영역으로 Garbage Collection 대상이고 모든 Thread가 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stack Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Method 내에서 사용되는 값들(Argument, Local Variable, Return Value)이 저장되는 영역으로 메소드가 호출될 때 LIFO로 하나씩 생성되고,
메소드 실행이 완료되면 LIFO로 하나씩 삭제(Thread별로 하나씩 생성)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PC Register&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU의 Register와 비슷한 역할로 현재 수행중인 JVM 명령의 주소값이 저장(Thread별로 하나씩 생성)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Native Method Stack&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 언어(C/C++)의 메소드 호출을 위해 할당되는 구역으로 언어에 맞게 Stack이 형성&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java_heap&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#java_heap&quot;&gt;2. Java Heap&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;용어&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Eden(Young)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Object가 생성될 때 Heap에 최초로 할당되는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Survivor (Young)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Eden 영역이 꽉 차서 Minor GC가 발생할 때 살아남은 Live Object들이 이동되는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tenured(Old)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Young Generation에서 Live Object로 오래 살아남은 Object들이 이동되는 영역(특정 회수 이상 참조되어 기준 Age를 초과한 Object)
비교적 오랫동안 참조되어 이용되고 있고 앞으로도 계속 사용될 확률이 높은 Object들이 저장&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Permanent&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class와 Method의 Meta 정보나 Static 변수와 같은 상수 정보들이 저장되는 영역(Java 8 이후로 사라짐)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Metaspace(Native)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 8부터 생긴 영역으로 Permanent 영역에서 저장하던 정보 중 Static Object를 제외한 정보들을 저장하는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Heap 영역은 JVM에 의해 관리되는 영역이고, Native 메모리는 OS레벨에서 관리하는 영역&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Permanent 초기치와 최대치 확인&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;java -XX:+PrintFlagsFinal -version -server | grep &amp;quot;PermSize&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Metaspace 초기치와 최대치 확인&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;java -XX:+PrintFlagsFinal -version -server | grep &amp;quot;MetaspaceSize&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>SpringOne Tour 2018 Memo</title>
    <link href="https://blog.nuti.pe.kr/2018/11/08/spring-one/"/>
    <updated>2018-11-08T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/11/08/spring-one</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;전반적인_후기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#전반적인_후기&quot;&gt;1. 전반적인 후기&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full_stack_reactive_kotlin_with_spring_framework_5_spring_boot2_project_reactor&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#full_stack_reactive_kotlin_with_spring_framework_5_spring_boot2_project_reactor&quot;&gt;2. Full Stack Reactive Kotlin! with Spring Framework 5, Spring Boot2, &amp;amp; Project Reactor&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reactive Spring with Spring Boot 2.0&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mark Heckler, Developer Advocate, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;site: www.thehecklers.com&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;twitter: @mkheck&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;트위터 홍보중..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 다음 이메일 홍보중&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일하는거 증명해야된다고 자꾸 사진찍음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 아저씨 뭐하는 아저씨야&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking, event-driven application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scale with a small number of threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backpresure as a key ingredient&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;thread가 대기하는 비효율적인 상황을 없애고 효율적으로 쓰도록 한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적은 수의 thread로 많은 요청을 처리할 수 있도록한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Callback이 많을수록 보기 어려워짐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive_streams_4_interfaces&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reactive_streams_4_interfaces&quot;&gt;2.1. Reactive Streams: 4 interfaces&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Publisher&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;값을만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subscriber&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;소비자&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subscription&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;???&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processor&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Subscriber와 Subscription을 사용함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;project_reactor_a_quick_overview&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#project_reactor_a_quick_overview&quot;&gt;2.2. Project Reactor: a quick overview&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;피보탈에서 진행중&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바 8 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring In Busy????? 뭐야이게&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flux를 반환&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lets_code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#lets_code&quot;&gt;2.3. Let&amp;#8217;s Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;start.spring.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코틀린 설명중&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라이브 코딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코틀린 신기하당&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;helpful_resources&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#helpful_resources&quot;&gt;2.4. Helpful resources&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;www.reactive-streams.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;projectreactor.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github.com/mkheck/FSR&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud_native_spring&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cloud_native_spring&quot;&gt;3. Cloud-Native Spring&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Josh Long, Spring Developer Advocate, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;twitter: @starbuxman&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 아저씨도 사진찍음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;책 커버 동물때문에 책내는데 2년 걸렸다고함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReactiveSpringBook.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시작부터 라이브코딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactive Web, Lombok, actuator, gateway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;r2jdbc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이아저씨 이상해&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라우터 게이트웨이용으로만 쓰면 좋을거같다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초당 리퀘스트 갯수 개한할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뭔가 빠르게 코딩 잘하기는 한다..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대규모에서 Http가 아니라 RSocket을 사용해서도 할 수 있음(byte stream)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분산환경 및 더 빠르게 할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_cloud_gateway&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_cloud_gateway&quot;&gt;4. Spring Cloud Gateway&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Younjin Jeong, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다양한 클라이언트에서 각 서비스로 직접 접근을 했었음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 l7이나 proxy를 통해서 구현하기도 했지만 점점 처리해야되는 요구사항이 많아짐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;게이트웨이를 두고 헤더나 다른 값들을 통해 추가적이 요구사항을 충족할 수 있도록 하게 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mesh: 사이드캅(?) 패턴과 프록시 패턴의 혼용?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul - netflix.github.com?&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청을 어디로보낼지 결정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul2 - 비동기를 지원하기 위해 개발&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Latency, Thread Count, Concurrent Connections가 중요함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul2를 넣지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot 2.0 + Project Reactor + Netty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유레카: Service Discovery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ribbon: Latency에 따라 요청을 핸들링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;curl은 사람이 쓸게 아님..HTTPie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fallbackUri &amp;gt; Service API에 문제 발생 시 미리지정한 Fallback Message를 줄 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zipkin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud_event_driven_architectures_with_spring_cloud_stream_2_0&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cloud_event_driven_architectures_with_spring_cloud_stream_2_0&quot;&gt;5. Cloud Event Driven Architectures with Spring Cloud Stream 2.0&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jakub Pilimon, Principal Technologist Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pillopl.github.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github.com/ddd-by-examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도메인을 어떻게 Discover 하는지&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트를 발견하고 이벤트의 트리거를 찾는다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트간의 연관관계(?)를 파악한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;effect of events on invariants&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;용어를 정의한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메세지가 중요하다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event와 행위(Behavior)가 비슷한거같은데&amp;#8230;&amp;#8203;뭐가다른거지&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동일한 처리를 하는것 같아도 행위가 다르면 별도로 메소드 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;given에 값이 들어가는 것 뿐만 아니라 전처리(선행 행위)를 쓸수있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.vavr.io.collection.List.ofAll(&amp;#8230;&amp;#8203;).foldLeft&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;include, exclude가 아닌 broker를 두고 broker가 호출하는 식으로 사용하는것이 흐름을 파악하기 쉽다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer, Producer는 서로가 누구인지 알 필요가 없음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;APPLICATION_STREAM_JSON_VALUE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인텔리제이에 되게 신기한기능있다&amp;#8230;&amp;#8203;. 블록지정해서 메소드를 만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;굳이 하나로 다 쓸 필요 없이 and 라는 좋은것이 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_functions_serverless_and_you&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_functions_serverless_and_you&quot;&gt;6. Spring, Functions, Serverless and You&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nate Schutta, Solution Architect, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IaaS(Infrastructure as a Service)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cloudfoundary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;집중이 안댐 ㅠㅠ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_boot_spring_cloud_on_pivotal_application_service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_boot_spring_cloud_on_pivotal_application_service&quot;&gt;7. Spring Boot &amp;amp; Spring Cloud on Pivotal Application Service&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Younjin Jeong, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Full Cycle Developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivotal Application Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cred Hub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivotal 제품 소개 위주&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using_spinnaker_to_create_a_development_workflow_on_kubernates&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#using_spinnaker_to_create_a_development_workflow_on_kubernates&quot;&gt;8. Using Spinnaker to Create a Development Workflow on Kubernates&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paul Czarkowski, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;맥주(kloud)가 기술적이라함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;피보탈에서 돈받아서 피보탈얘기를 해야한다함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kubernates master가 여러 worker를 관리함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StatefulSet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spinnaker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Halyard&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@_@&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Spring MVC</title>
    <link href="https://blog.nuti.pe.kr/2018/10/21/spring-mvc/"/>
    <updated>2018-10-21T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/10/21/spring-mvc</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;term&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#term&quot;&gt;1. 기본 용어&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-mapping&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-mapping&quot;&gt;1.1. @RequestMapping&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DefaultAnnotationHandlerMapping에서 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url과 컨트롤러 메소드 매핑정보 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스, 메소드 레벨에 사용 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url, method, parameter, header 정보를 통해 구분 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url에 ANT스타일의 와일드카드 사용 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상속 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/**/action&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/user/{userId}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;({&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;})
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/user/{userId}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.GET)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, params=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;env=mobile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, params=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;env=!mobile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, headers=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;content-type=application/json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;controller&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#controller&quot;&gt;1.2. @Controller&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controller를 정의&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 값들을 매핑할 수 있도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SampleController&lt;/span&gt; {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;servlet&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#servlet&quot;&gt;1.3. HttpServletRequest, HttpServletResponse&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서블릿의 HttpServletRequest와 HttpServletResponse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(HttpServletRequest request, HttpServletResponse response) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;http-session&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#http-session&quot;&gt;1.4. HttpSession&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;세션관리 객체&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(HttpSession session) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;web-request&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#web-request&quot;&gt;1.5. WebRequest&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HttpServletRequest의 정보를 대부분 그대로 갖고 있는 서블릿 API에 종속적이지 않은 오브젝트 타입&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서블릿과 프틀릿 환경 양쪽에 모두 적용 가능한 범용적인 핸들러 인터셉터를 만들 때 활용하기 위함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;native-web-request&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#native-web-request&quot;&gt;1.6. NativeWebRequest&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebRequest 내부에 감춰진 HttpServeltRequest와 같은 환경종속적인 오브젝트를 가져올 수 있는 메소드가 추가되어있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;path-variable&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#path-variable&quot;&gt;1.7. @PathVariable&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;url로 들어가는 패스 변수를 받는다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl https://sample.nuti.pe.kr/home/1&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@RequestMappint&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/{id}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; id) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-param&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-param&quot;&gt;1.8. @RequestParam&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;요청에서 쿼리스트링을 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl https://sample.nuti.pe.kr/home?id=1&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; id) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cookie-value&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cookie-value&quot;&gt;1.9. @CookieValue&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;쿠키값을 받음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필수여부 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -b 'auth=abc' https://sample.nuti.pe.kr&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@CookieValue&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, required=&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, defaultValue=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; auth) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-header&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-header&quot;&gt;1.10. @RequestHeader&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;헤더 정보를 받음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필수여부 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -H 'Content-Type: application/json' https://sample.nuti.pe.kr&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestHeader&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, required=&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; contentType) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-map&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-map&quot;&gt;1.11. Map, Model, ModelMap&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모델 정보를 담는데 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt; model) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(Model model) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(ModelMap model) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-attribute&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-attribute&quot;&gt;1.12. @ModelAttribute&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생략가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모델 정보를 객체에 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라이언트에서 받은 정보를 매핑할 수도 있고, 서버에서 등록한 정보도 매핑할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(User user) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User user) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) User user) {
  ...
}

&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getUserId(HttpServletRequest request) {
  &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; userId = request.getAttribute(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;) userId;
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; userId) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-body&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-body&quot;&gt;1.13. @RequestBody&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;payload를 mapping&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -X POST -H 'Content-Type: application/json' -d '{ &amp;quot;idx&amp;quot;: 1, &amp;quot;id&amp;quot;: &amp;quot;user&amp;quot; }'&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestBody&lt;/span&gt; User user) {
  ..
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;value&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#value&quot;&gt;1.14. @Value&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로퍼티값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상수 값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 메소드를 호출한 결과 값&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#{systemProperties['user.home']}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; userHome;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-and-view&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-and-view&quot;&gt;1.15. ModelAndView&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;반환하는 객체와 뷰를 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ModelAndView index(Device device) {
  ModelAndView mav = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ModelAndView();

  mav.addObject(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;isMobileDevice&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, device.isMobile());
  mav.setViewName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mav;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;view&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#view&quot;&gt;1.16. 뷰 지정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String으로 뷰 이름을 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void로 사용할 시 url을 통해 view 지정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이외 모델 사용시 url을 통해 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(Model model) {
  ...
  return &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
}

&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(Model model) {
  ...
}

&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; User method() {
  ...
}

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(RedirectAttributes redirectAttributes) {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;redirect:/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;response-body&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#response-body&quot;&gt;1.17. @ResponseBody&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;반환값을 응답 본문으로 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@ResponseBody&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method() {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;Hello&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sessionattributes&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sessionattributes&quot;&gt;@SessionAttributes&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모델 객체를 세션에 저장해서 사용할 수 있도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션의 값을 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@SessionAttributes&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SampleController&lt;/span&gt; {
  ...

  &lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User user) {
    ...
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;session-status&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session-status&quot;&gt;1.18. SessionStatus&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;세션을 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용이 완료된 세션을 제거하지 않으면 메모리 누수가 발생할 수 있으므로 사용 후 제거해야함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(SessionStatus sessionStatus) {
  sessionStatus.setComplete();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;binder&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#binder&quot;&gt;1.19. @InitBinder, WebDataBinder&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 파라미터를 바인딩 및 검증&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allowedFields, disallowedFields&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; AgentValidator agentValidator;

&lt;span class=&quot;annotation&quot;&gt;@InitBinder&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; initAgentBinder(WebDataBinder dataBinder) {
  dataBinder.setValidator(agentValidator);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;validator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#validator&quot;&gt;1.20. Validator&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute로 바인딩되는 모델의 데이터 검&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;AgentValidator&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Validator&lt;/span&gt; {
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; supports(&lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.class.isAssignableFrom(clazz));
  }

  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; validate(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target, Errors errors) {
    &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; agentList = &lt;span class=&quot;predefined-type&quot;&gt;Arrays&lt;/span&gt;.asList(OS_ANDROID.getName(), OS_IOS.getName());
    ErrorCode error = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;

    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; agent = (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;) target;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (! agentList.contains(agent)) {
      error = ErrorCode.UnsupportedAgent;
    }

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      errors.reject(error.getCode(), error.getMessage());
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;valid&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#valid&quot;&gt;1.21. @Valid&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute의 값을 검증&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/{agent}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method = RequestMethod.GET)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; JigjakVersion getVersion(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;annotation&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; agent, BindingResult bindingResult) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;errors-binding-result&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#errors-binding-result&quot;&gt;1.22. Errors, BindingResult&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute의 Validation 결과를 담음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User, BindingResult result) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bindingResult.hasErrors()) {
    ObjectError error = bindingResult.getAllErrors().get(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ResourceNotFoundException(UnsupportedAgent);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;converter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#converter&quot;&gt;1.23. Converter&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터 바인딩 시 데이터를 변환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex) String &amp;#8594; 클래스&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스 &amp;#8594; String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Converters&lt;/span&gt;&amp;lt;S, T&amp;gt; {
  T convert(S source);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conversion-service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#conversion-service&quot;&gt;1.24. ConversionService&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 값 바인딩 시 데이터 타입 변환에 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InitBinder 혹은 ConfigurableWebBindingInitializer를 통해 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.springframework.context.support.ConversionServiceFactoryBean&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.converter.CustomConverter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; ConversionService conversionService;

&lt;span class=&quot;annotation&quot;&gt;@InitBinder&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; initBinder(WEbDataBinder dataBinder) {
  dataBinder.setConversionService(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.conversionService);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;formatter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#formatter&quot;&gt;1.25. Formatter, FormattingConversionService&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오브젝트 &amp;gt; 문자열&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문자열 &amp;gt; 오브젝트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;locale이 포함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;number-format&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#number-format&quot;&gt;1.26. @NumberFormat&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;숫자, 문자 포맷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@NumberFormat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;$###,##0.00&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;predefined-type&quot;&gt;BigDecimal&lt;/span&gt; price;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;date-time-format&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#date-time-format&quot;&gt;1.27. @DateTimeFormat&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;날짜, 문자 포맷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@DateTimeFormat&lt;/span&gt;(pattern=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;yyyy/MM/dd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt; date;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;message-converter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#message-converter&quot;&gt;1.28. Message Converter&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청본문과 응답 본문을 다룸&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bytearrayhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bytearrayhttpmessageconverter&quot;&gt;1.28.1. ByteArrayHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;byte[] 지원&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application/octet-stream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;stringhttpconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#stringhttpconverter&quot;&gt;1.28.2. StringHttpConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;xml, json같이 문서 포맷이 있다면 적절한 파서를 붙여서 활용할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;formhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#formhttpmessageconverter&quot;&gt;1.28.3. FormHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application/x-www-form-urlencoded&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;sourcehttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sourcehttpmessageconverter&quot;&gt;1.28.4. SourceHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application/json&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application/*+xml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;text/xml&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jaxb2rootelementhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jaxb2rootelementhttpmessageconverter&quot;&gt;1.28.5. Jaxb2RootElementHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JAXB2의 @XmlRootElement, @XmlType이 붙은 클래스를 이용해 XML과 오브젝트를 변환할 때 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;marshallinghttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#marshallinghttpmessageconverter&quot;&gt;1.28.6. MarshallingHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Marshaller와 UnMarshaller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML문서와 자바 오브젝트 사이의 변환을 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mappingjacksonhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mappingjacksonhttpmessageconverter&quot;&gt;1.28.7. MappingJacksonHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jackson ObjectMapper를 통해서 JSON 문서와 자바오브젝트 변환을 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mvc-annotation-driven&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-annotation-driven&quot;&gt;1.29. mvc:annotation-driven&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MVC에서 지원하는 빈을 자동으로 등록&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라이브러리의 존재 여부를 파악해서 자동으로 관련 빈을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;defaultannotationhandlermapping&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#defaultannotationhandlermapping&quot;&gt;1.29.1. DefaultAnnotationHandlerMapping&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@RequestMapping을 이용한 핸들러 매핑 전략을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;annotationmethodhandleradapter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#annotationmethodhandleradapter&quot;&gt;1.29.2. AnnotationMethodHandlerAdapter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DispatcherServlet이 자동으로 등록해주는 디폴트 핸들러 어댑터&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configurablewebbindinginitializer&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#configurablewebbindinginitializer&quot;&gt;1.29.3. ConfigurableWebBindingInitializer&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모든 컨트롤러 메소드에 자동으로 적용되는 WebDataBinder 초기화용 빈을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;메세지_컨버터&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#메세지_컨버터&quot;&gt;1.29.4. 메세지 컨버터&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본 컨버터와 라이브러리 유무에 따라 Jaxb2RootElementHttpMessageConverter, MappingJacksonHttpMessageConverter 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;validator_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#validator_2&quot;&gt;1.29.5. validator&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모든 컨테이너에 일괄 적용하는 validator 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;conversion_service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#conversion_service&quot;&gt;1.29.6. conversion-service&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Default: FormattingConversionServiceFactoryBean&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:annotation-driven&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;conversion-service&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myConversionService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myConversionService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;FormattingConversionServiceFactoryBean&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;interceptors&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#interceptors&quot;&gt;1.30. Interceptors&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 전후로 작업할 내용 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.GlobalInterceptor&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:intercptors&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptor&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:mapping&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.HomeInterceptor&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:interceptor&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:interceptors&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;view-controller&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#view-controller&quot;&gt;1.31. view-controller&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;뷰로 매핑만 할 경우&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:view-controller&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;view-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mvc-extension&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-extension&quot;&gt;2. MVC 확장 포인트&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;session-attrubute-store&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session-attrubute-store&quot;&gt;2.1. SessionAttributeStore&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@SessionAttribute 에 의해 지정된 모델은 세션에 저장된&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션은 메모리에 저장됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 문제를 해결하기 위해 별도의 저장소를 사용해서 사용할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;web-argument-resolver&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#web-argument-resolver&quot;&gt;2.2. WebArgumentResolver&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어플리케이션에 특화된 컨트롤러 파라미터 타입을 추가할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;암호화된 정보를 복호화해서 파라미터로 넘김&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-and-view-resolver&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-and-view-resolver&quot;&gt;2.3. ModelAndViewResolver&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 메소드의 리턴 타입과 메소드 정보, 어노테이션 정보등을 통해 ModelAndView를 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;활용도는 낮음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;handler-method-return-value-handler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#handler-method-return-value-handler&quot;&gt;2.4. HandlerMethodReturnValueHandler&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리턴 값을 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RequestMaiingHalderAdapter의 customReturnValueHandlers 프로퍼티에 주입&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;url-resource-manage&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#url-resource-manage&quot;&gt;3. url과 리소스 관리&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mvc-default-servlet-handler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-default-servlet-handler&quot;&gt;3.1. &amp;lt;mvc:default-servlet-handler /&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;servlet path가 /일 경우 모든 요청이 DispatcherServlet으로 전달됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 함께 사용해야됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@RequestMapping 정보에 의존&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매핑된 정보를 찾을 수 없을 시 가장 우선순위가 낮은 디폴트 서블릿 매핑 전략을 통해 컨테이너가 제공하는 디폴트 서블릿으로 요청이 포워딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작원리는 이해할 필요는 없고 같이 사용해야된다는 것만 기억&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;url-resource&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#url-resource&quot;&gt;3.2. &amp;lt;url:resource /&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청에 따라 리소스 경로를 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:resources&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;mapping&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/resources/**&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;location&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/resources/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Spock Framework</title>
    <link href="https://blog.nuti.pe.kr/2018/07/14/spock-framework/"/>
    <updated>2018-07-14T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/07/14/spock-framework</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spock_framework&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spock_framework&quot;&gt;1. Spock Framework?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spock Framework&lt;/code&gt;는 &lt;code&gt;Groovy&lt;/code&gt; 언어에서 동작하는 &lt;code&gt;명세&lt;/code&gt; 프레임워크로 &lt;code&gt;BDD&lt;/code&gt;를 편하게할 수 있도록 도와준다.
&lt;code&gt;Spock&lt;/code&gt;은 &lt;code&gt;Java&lt;/code&gt;와 &lt;code&gt;Groovy&lt;/code&gt; 어플리케이션을 위한 명세 프레임워크로 &lt;code&gt;Groovy(DSL)&lt;/code&gt;로 작성하므로 간결하고 직관적인 장점이 있다.
또한, 기존의 &lt;code&gt;Java&lt;/code&gt;의 &lt;code&gt;JUnit&lt;/code&gt;, &lt;code&gt;Hamcrest&lt;/code&gt;, &lt;code&gt;Mockito&lt;/code&gt;를 전부 다 학습하는 것보다 손쉽게 학습할 수 있고,
&lt;code&gt;Mock&lt;/code&gt;, &lt;code&gt;Stub&lt;/code&gt;, &lt;code&gt;Spy&lt;/code&gt;등 사용이 편리하고 명세를 작성하기 편리하다.
&lt;code&gt;Java&lt;/code&gt;와 &lt;code&gt;Groovy&lt;/code&gt; 어플리케이션을 위한 프레임워크이므로 &lt;code&gt;Java&lt;/code&gt;환경에서도 사용할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lifecycle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#lifecycle&quot;&gt;2. Lifecycle&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;setup: 메소드 실행 전에 실행(given)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when: 행위에 대한 명세를 작성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;then: 행위에 대한 예측을 작성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expect: 행위에 대한 명세와 예측을 작성(when + then)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cleanup: 메소드 실행 후에 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;where: 여러 값에 대해 반복행위를 할 때 작성&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/spock/spock-lifecycle.png&quot; alt=&quot;spock lifecycle&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Spock Lifecycle&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;출처: &lt;a href=&quot;http://spockframework.org/spock/docs/1.1/spock_primer.html&quot; class=&quot;bare&quot;&gt;http://spockframework.org/spock/docs/1.1/spock_primer.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example&quot;&gt;3. Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hyeonil/spock-examples&quot;&gt;기본 예시&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;앞서 &lt;code&gt;BDD&lt;/code&gt; &lt;a href=&quot;http://blog.nuti.pe.kr/2018/07/14/bdd/&quot;&gt;포스트에서 작성한 예시&lt;/a&gt;를 &lt;code&gt;Spock&lt;/code&gt;으로 변환하게 되면 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; kr.pe.nuti.home.api.service.todo

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.domain.todo.TodoItem&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.enumeration.todo.TodoState&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.exception.todo.IllegalStateChangeException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.repository.todo.TodoItemRepository&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Issue&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Narrative&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.See&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Specification&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Title&lt;/span&gt;

&lt;span class=&quot;annotation&quot;&gt;@Title&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@Narrative&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
Todo Management System을 사용하는 사용자가
Todo Item의 상태관리를 위해서
각각의 Todo Item의 상태를 변경할 수 있다.
상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TodoServiceStateChangeSpec&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; Specification {

  TodoService service
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; todoItemRepository

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;setup&lt;/span&gt;() {
    todoItemRepository = Mock(TodoItemRepository)
    service = Spy(TodoService)
    service.todoItemRepository = todoItemRepository
  }

  &lt;span class=&quot;annotation&quot;&gt;@See&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://github.com/hyeonil/smart-home-api/issues/6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;])
  &lt;span class=&quot;annotation&quot;&gt;@Issue&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo상태를 Doing상태로 변경하면 상태가 변경된다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;() {
    &lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo 상태의 Todo Item&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.TODO])
    TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.DOING])
    todoItemRepository.findById(_) &amp;gt;&amp;gt; Optional.of(savedItem)
    todoItemRepository.save(_) &amp;gt;&amp;gt;  changedItem

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;])

    &lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 Doing으로 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; result = service.changeState(item, TodoState.DOING)

    &lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태가 Doing으로 변경된다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; * service.getItem(_)
    result.state == TodoState.DOING
  }

  &lt;span class=&quot;annotation&quot;&gt;@See&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://github.com/hyeonil/smart-home-api/issues/6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;])
  &lt;span class=&quot;annotation&quot;&gt;@Issue&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;() {
    &lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo 상태의 Todo Item&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.TODO])
    todoItemRepository.findById(_) &amp;gt;&amp;gt; Optional.of(savedItem)

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;])

    &lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 Done으로 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    service.changeState(item, TodoState.DONE)

    &lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; * service.getItem(_)
    thrown(IllegalStateChangeException)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>BDD</title>
    <link href="https://blog.nuti.pe.kr/2018/07/14/bdd/"/>
    <updated>2018-07-14T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/07/14/bdd</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bddbehavior_driven_development란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bddbehavior_driven_development란&quot;&gt;1. BDD(Behavior-Driven Development)란?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;는 &lt;code&gt;TDD&lt;/code&gt;에서 파생된 개발 방법론으로 테스트에 대한 집중보다는 명세와 행위에 대해 비중을 두고 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tdd&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#tdd&quot;&gt;1.1. TDD&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/tdd.jpg&quot; alt=&quot;tdd&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. TDD&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TDD&lt;/code&gt;는 &lt;code&gt;Test Case(이하 TC)&lt;/code&gt;를 작성하고 실패를 확인 후 실제 비즈니스 코드를 작성, &lt;code&gt;TC&lt;/code&gt; 성공확인을 하나의 반복주기로 잡고,
이를 반복해서 진행하는 것을 요구한다.
하지만 &lt;code&gt;TC&lt;/code&gt;를 작성하는데 의문점이 있다.
코드가 없는데 무엇을 테스트할 것인가?
&lt;code&gt;TDD&lt;/code&gt;를 보면 무엇을 테스하는지에 대한 명시는 되어있지 않다.
또한, 보통 테스트라 하면 제품이 나오면 그 제품을 사용해보면서 제대로 작동하는지 확인을 해보는 과정인데,
제품이 나오지도 않았는데 테스트를 한다라는 것부터 모순이 생긴다.
이를 개선한 것이 &lt;code&gt;BDD&lt;/code&gt;라고 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bddbehavior_driven_development&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bddbehavior_driven_development&quot;&gt;1.2. BDD(Behavior-Driven Development)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;는 위에서 언급한바와 같이 &lt;code&gt;TDD&lt;/code&gt;에서 파생된 개발방법론이고, 코드의 구현과 테스트 보다는 행위(동작, 명세)에 집중하고 있다.
&lt;code&gt;BDD&lt;/code&gt;에서는 기능의 &lt;code&gt;TC&lt;/code&gt;를 작성하는 것이 아닌 명세를 작성하는 것이고, 요구사항 분석 후 기능 설계 및 명세작성, 코드구현의 순서로 진행을 하게된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;에서 &lt;code&gt;테스트(Test)&lt;/code&gt; 라는 단어를 사용하지 않고 &lt;code&gt;명세(Specification)&lt;/code&gt;를 사용함으로써 많은 것이 바뀌게 된다.
&lt;code&gt;TDD&lt;/code&gt;에서는 &lt;code&gt;테스트&lt;/code&gt;라는 단어를 사용하게 되어 혼란과 모순을 가지게 되었는데,
&lt;code&gt;BDD&lt;/code&gt;에서는 이를 &lt;code&gt;명세&lt;/code&gt;라는 단어로 사용함으로써, 제품이 생산되기 전에 제품에 대한 명세를 작성하게 되는 것이므로 이에 대한 모순이 사라지게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bdd_template&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bdd_template&quot;&gt;2. BDD Template&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;Title: 스토리에대한 제목을 간략하고 명확하게 작성
User Story
  Who 누가
  Why 왜
  What 무엇을 하는지
Scenario
  Given 어떤 값이 주어졌을 때
  When 어떤 행위를 하게 되면
  Then 어떤 결과를 도출한다&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bdd_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bdd_example&quot;&gt;3. BDD Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;할일을 관리할 수 있는 프로그램을 만든다고 가정을 한다.
그렇다면 기획자 혹은 개발자는 고객과 커뮤니케이션을 하며 프로그램에 대한 요구사항을 수집하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;할일을 관리할 수 있는 시스템을 개발한다.
Todo Item을 등록/수정/삭제 할 수 있다.
Todo/Doing/Done 할 수 있고 Archive할 수 있어야 한다.
Todo Item을 등록할 때 Todo 상태로 시작한다.
상태변경을 할 수 있고 상태 변경은
Todo &amp;gt; Doing, Doing &amp;gt; Done, Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
Archive는 Todo/Doing/Done 모든 상태에서 가능하다.
목록보기/상세보기 기능을 포함한다.
페이징 기능은 스펙에서 제외하고 현재 스펙에서는 전체 목록을 한번에 조회한다.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;수집한 요구항이 위와 같다고 하면 아래 그림과 같은 &lt;code&gt;Use Case Diagram&lt;/code&gt;과 &lt;code&gt;Class Diagram&lt;/code&gt;을 그릴 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/use-case-diagram.png&quot; alt=&quot;use case diagram&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Use Case Diagram&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/class-diagram.png&quot; alt=&quot;class diagram&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Class Diagram&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 예시에서 &lt;strong&gt;상태변경&lt;/strong&gt;을 통해 명세작성 예시를 진행하도록 하겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;Title: Todo Item의 상태를 변경한다.

User Story
Who: Todo Management System을 사용하는 사용자가
Why: Todo Item의 상태관리를 위해서
What: 각각의 Todo Item의 상태를 변경할 수 있다.
      상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
      Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.

Scenario 1: Todo상태를 Doing상태로 변경하면 상태가 변경된다.
Scenario 2: Doing상태를 Done상태로 변경하면 상태가 변경된다.
Scenario 3: Done상태를 Doing상태로 변경하면 상태가 변경된다.
Scenario 4: Doing상태를 Todo상태로 변경하면 상태가 변경된다.
Scenario 5: Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.
Scenario 6: Done상태를 Todo상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;일반 글로 위와 같은 명세를 작성할 수 있고 아래와 같이 코드로 명세를 작성할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.service.todo&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.Application&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.JpaConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.WebConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.domain.todo.TodoItem&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.enumeration.todo.TodoState&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.exception.todo.IllegalStateChangeException&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.repository.todo.TodoItemRepository&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Assert&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Before&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Test&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.InjectMocks&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mock&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.MockitoAnnotations&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Spy&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.test.context.ContextConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.test.context.junit4.SpringJUnit4ClassRunner&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.util.Optional&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.hamcrest.Matchers.is&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.ArgumentMatchers.any&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mockito.verifyNoMoreInteractions&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mockito.when&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;/**
 * Title: Todo Item의 상태를 변경한다.
 * User Story:
 * Todo Management System을 사용하는 사용자가
 * Todo Item의 상태관리를 위해서
 * 각각의 Todo Item의 상태를 변경할 수 있다.
 * 상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
 * Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
 */&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)
&lt;span class=&quot;annotation&quot;&gt;@ContextConfiguration&lt;/span&gt;(classes = {JpaConfiguration.class, WebConfiguration.class, Application.class})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TodoServiceStateChangeTest&lt;/span&gt; {

  &lt;span class=&quot;annotation&quot;&gt;@Mock&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; TodoItemRepository todoItemRepository;

  &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Spy&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@InjectMocks&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; TodoService service;

  &lt;span class=&quot;annotation&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; setup() {
    MockitoAnnotations.initMocks(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;);
  }

  &lt;span class=&quot;comment&quot;&gt;/**
   * Todo상태를 Doing상태로 변경하면 상태가 변경된다.
   * @throws Exception
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testStateChangeFromTodoToDoing() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// given Todo 상태의 Todo Item&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    savedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
    savedItem.setState(TodoState.TODO);
    TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    changedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
    changedItem.setState(TodoState.DOING);
    when(todoItemRepository.save(any(TodoItem.class))).thenReturn(changedItem);
    when(todoItemRepository.findById(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;)).thenReturn(Optional.of(savedItem));

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    item.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// when Todo Item의 상태를 Doing으로 변경한다.&lt;/span&gt;
    TodoItem result = service.changeState(item, TodoState.DOING);

    &lt;span class=&quot;comment&quot;&gt;// then Todo Item의 상태가 Doing으로 변경된다.&lt;/span&gt;
    Assert.assertThat(result.getState(), is(TodoState.DOING));
    verifyNoMoreInteractions(service);
  }

  &lt;span class=&quot;comment&quot;&gt;/**
   * Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.
   * @throws Exception
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;(expected = IllegalStateChangeException.class)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testStateChangeFromTodoToDoneThrownException() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;comment&quot;&gt;// given Todo 상태의 Todo Item&lt;/span&gt;
      TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      savedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
      savedItem.setState(TodoState.TODO);
      TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      changedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
      changedItem.setState(TodoState.DOING);
      when(todoItemRepository.findById(any(&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt;.class))).thenReturn(Optional.of(savedItem));
      when(todoItemRepository.save(any(TodoItem.class))).thenReturn(changedItem);

      TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      item.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);

      &lt;span class=&quot;comment&quot;&gt;// when Todo Item의 상태를 Done으로 변경한다.&lt;/span&gt;
      service.changeState(item, TodoState.DONE);

      &lt;span class=&quot;comment&quot;&gt;// then Todo Item의 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {
      verifyNoMoreInteractions(service);
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; e;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.com/hyeoniljeong/bdd_spock_framework&quot;&gt;관련 slide 자료&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;4. References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Behavior-driven_development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/User_story&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/User_story&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Spring AOP(Aspect Oriented Programming)</title>
    <link href="https://blog.nuti.pe.kr/2018/06/13/spring-aop/"/>
    <updated>2018-06-13T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/06/13/spring-aop</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;개요&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#개요&quot;&gt;1. 개요&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;AOP&lt;/code&gt;는 스프링의 기반 기술 중 하나로 이해하기 힘든 용어와 개념을 가졌다.
&lt;code&gt;AOP&lt;/code&gt;는 자바의 &lt;code&gt;Reflection API&lt;/code&gt;를 활용해서 구현을 하게되고, 주로 비즈니스 요구사항이 아닌 부분들을 처리하기 위해 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reflection_api&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reflection_api&quot;&gt;2. Reflection API&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/jvm-architecture.jpg&quot; alt=&quot;jvm architecture&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. JVM Architecture&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바의 Reflection API는 컴파일 레벨에서 실행될 클래스를 정하는 것이 아닌, 런타임에 실행할 클래스 파일을 정하게 할 수 있다.
또한, 런타임에서 클래스의 공개되지 않은 필드에 대한 정보를 볼 수 있고 조작할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;주로 JDBC나 MyBatis에서 많이 사용한다.
예시는 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reflection_api_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reflection_api_example&quot;&gt;2.1. Reflection API Example&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.METHOD
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; LogDetail {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.TYPE
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; TrackLog {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.util&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.TrackLog&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.Field&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.BooleanUtil.not&lt;/span&gt;;

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogUtil&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; LogUtil() {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalAccessError&lt;/span&gt;();
  }

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argValues(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; depth) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalAccessException&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }
    &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; cls = arg.getClass();

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cls.isPrimitive() || cls.isAssignableFrom(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.class) || not(cls.isAnnotationPresent(TrackLog.class))) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg.toString();
    }

    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();
    builder.append(whiteSpace(depth)).append(cls.getName()).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Field&lt;/span&gt; field : cls.getDeclaredFields()) {
      field.setAccessible(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
      &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; fieldObj = field.get(arg);
      builder.append(whiteSpace(depth + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;))
          .append(field.getName())
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
          .append(argValues(fieldObj, depth + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }

    builder.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.toString();
  }

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; whiteSpace(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; depth) {
    &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; appender = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; i &amp;lt; depth; i++) {
      builder.append(appender);
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.toString();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.handler&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.LogDetail&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.LogUtil&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.Logger&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.Method&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.BooleanUtil.not&lt;/span&gt;;

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogDetailMethodInvocationHandler&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;InvocationHandler&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt; logger = LoggerFactory.getLogger(LogDetailMethodInvocationHandler.class);

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target;

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; LogDetailMethodInvocationHandler(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target) {
    &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.target = target;
  }

  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; invoke(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; proxy, &lt;span class=&quot;predefined-type&quot;&gt;Method&lt;/span&gt; method, &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Throwable&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (not(method.isAnnotationPresent(LogDetail.class))) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; method.invoke(target, args);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; className = method.getDeclaringClass().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; methodName = method.getName();
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; argBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg : args) {
      argBuilder.append(LogUtil.argValues(arg, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argString = argBuilder.toString();

    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;invoke method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);
    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method arguments: {}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, argString);

    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; result  = method.invoke(target, args);

    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;finish the method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 예시는 &lt;code&gt;LogDetail&lt;/code&gt;이라는 어노테이션을 가진 메소드에 대해서 해당 메소드의 파라미터 정보를 상세하게 로깅하는 것이다.
런타임에서 메소드의 정보를 분석해서 어노테이션 표기 여부에 따라 로그를 남기고 메소드를 실행시키게 된다.
또한, &lt;code&gt;LogUtil.argValues&lt;/code&gt;는 Object의 정보를 상세하게 분석해서 Object 내부의 필드정보를 보여줄 수 있도록 되어있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Reflection API&lt;/code&gt;는 이런식으로 컴파일 타임에 어떤 클래스의 인스턴스가 실행될 지 알 수 없는 경우에 런타임에서 클래스정보를 분석하고 실행할 수 있도록 할 때 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proxy_pattern&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#proxy_pattern&quot;&gt;3. Proxy Pattern&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/proxy_pattern.png&quot; alt=&quot;proxy pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Proxy Pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클라이언트가 실제 사용하려 하는 기능에 부가적인 기능을 더해서 자신이 핵심 기능인 척 위장하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟은 프록시가 있는지 알아서는 안된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟의 기능을 확장 및 접근 방법을 제어할 수 있는 유용한 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 Object에 대한 접근을 제어&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object의 생성에 관여를 하기도 함&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생성이 복잡한 경우&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당장 생성이 필요하지 않은 경우에 바로 생성하지 않고, 필요한 시기에 생성&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원격 Object를 이용하는 경우에 사용&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RMI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EJB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object에 대한 접근권한을 제어하기 위해 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;decorator_pattern&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#decorator_pattern&quot;&gt;4. Decorator Pattern&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/decorator_pattern.png&quot; alt=&quot;decorator pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Decorator Pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object에 부가적인 기능을 부여하기 위해 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 시점에 어떤 방법과 순서로 연결되어 사용하는지 정해지지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InputStream, OutputStream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;프록시_패턴과의_차이&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#프록시_패턴과의_차이&quot;&gt;4.1. 프록시 패턴과의 차이&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프록시는 어떤 오브젝트를 사용하기 위해 대리인 역할을 맡은 오브젝트를 사용하는 방법을 총칭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프록시패턴 프록시를 사용하는 방법 중 타겟에 대한 접근 방법을 제어하려는 목적&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟을 생성하기 복잡하거나 당장 필요하지 않은 경우에 타겟을 바로 생성하지 않고 프록시를 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 타겟을 사용할 때 타겟을 생성(Lazy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기능에 대한 접근 권한을 제어하는 목적으로도 사용(읽기/쓰기 권한)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신이 만들거나 접근할 타겟을 알고있는 경우가 많음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proxy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#proxy&quot;&gt;5. Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Client와 사용 대상 Object 사이에서 대리 역할을 하는 Object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object의 핵심 기능에 부가적인 기능을  추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object는 Proxy Object의 존재 여부를 모름&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object를 Target 또는 Real Object라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dynamic_proxy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#dynamic_proxy&quot;&gt;6. Dynamic Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/dynamic-proxy.jpg&quot; alt=&quot;dynamic proxy&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Dynamic Proxy&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프록시는 매 Class, Method마다 Proxy를 정의해주어야 한다는 단점이 존재&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAVA의 Reflection API를 통해 Runtime에 동적으로 Proxy하도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aop&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#aop&quot;&gt;7. AOP&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/aop.png&quot; alt=&quot;aop&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. AOP&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advice&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;타겟이 필요 없는 순수한 부가 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링에서는 부가기능을 제공하는 Object를 Advice라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pointcut&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;부가기능 적용 대상 선정 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링에서는 메소드 선정 알고리즘을 담은 Object를 Pointcut이라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advisor&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pointcut + Advice&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join Point&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advice가 적용될 수 있는 위치&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aspect&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;독립적인 모듈화가 불가능한 모듈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 자체로 핵심 기능을 담고 있지는 않지만, 어플리케이션을 구성하는 중요한 한 가지 요소이고, 핵심 기능에 부가되어 의미를 갖는 특별한 모듈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;핵심적인 기능에서 부가적인 기능을 분리해서 Aspect라는 독특한 모듈로 만들어 설계하고 개발하는 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;객체지향을 좀 더 편하고 객체지향답게 사용할 수 있도록 하는 개념&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aop_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#aop_example&quot;&gt;8. AOP Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;expression&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#expression&quot;&gt;8.1. Expression&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;execution([접근제한자 패턴] 타입패턴 [타입패턴.]이름패턴 (타입패턴 | “..}, …) [throws 예외 패턴])&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ex) public int springbook.learningtest.spring.pointcut.Target.mins(int, int) throws java.lang.RuntimeException&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;접근 제한자, 생략 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리턴 값의 타입을 나타내는 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;springbook.learningtest.spring.pointcut.Target&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패키지 및 클래스 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minus&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(int, int)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 파리미터 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;throws java.lang.RuntimeException&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예외 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-pointcuts&quot;&gt;참고링크&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example_code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example_code&quot;&gt;8.2. Example Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.METHOD
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; LogDetail {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.aspect&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.LogDetail&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.LogUtil&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.ProceedingJoinPoint&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.annotation.Around&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.annotation.Aspect&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.Logger&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;;

&lt;span class=&quot;annotation&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogDetailAspect&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt; logger = LoggerFactory.getLogger(LogDetailAspect.class);

  &lt;span class=&quot;annotation&quot;&gt;@Around&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;execution(* kr.pe.nuti.home.api..*.*(..)) &amp;amp;&amp;amp; @annotation(logDetail)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; aroundTargetObject(ProceedingJoinPoint joinPoint, LogDetail logDetail) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Throwable&lt;/span&gt; {
    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target = joinPoint.getTarget();
    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args = joinPoint.getArgs();

    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; className = target.getClass().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; methodName = joinPoint.getSignature().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; argBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg : args) {
      argBuilder.append(LogUtil.argValues(arg, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argString = argBuilder.toString();

    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;invoke method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);
    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method arguments: {}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, argString);

    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; result  = joinPoint.proceed(args);

    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;finish the method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TodoItem changeState(&lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoItem todo, &lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoState state) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; IllegalStateChangeException {
  TodoItem savedItem = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.getItem(todo.getIdx());

  &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; possibleToChangeState = TodoState.isPossibleToChangeState(savedItem.getState(), state);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (not(possibleToChangeState)) {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateChangeException();
  }

  savedItem.setState(state);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todoItemRepository.save(savedItem);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Java Exception</title>
    <link href="https://blog.nuti.pe.kr/2018/06/06/java-exception/"/>
    <updated>2018-06-06T00:00:00+00:00</updated>
    <id>https://blog.nuti.pe.kr/2018/06/06/java-exception</id>
    <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;개요&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#개요&quot;&gt;1. 개요&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바 계통 언어에서는 오류를 표현하는 2가지 방법이 존재한다.
첫 번째는 &lt;code&gt;Error&lt;/code&gt; 클래스인데 &lt;code&gt;Error&lt;/code&gt; 클래스를 상속받는 하위 클래스는 시스템 오류를 표현하게 된다.
두 번째는 &lt;code&gt;Exception&lt;/code&gt; 클래스로 어플리케이션 레벨에서 개발자가 예외사항을 표현하기 위해 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이번 포스팅에서는 &lt;code&gt;Error&lt;/code&gt;와 &lt;code&gt;Exception&lt;/code&gt;에 대해서 작성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;error&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#error&quot;&gt;2. Error&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Error&lt;/code&gt; 클래스는 시스템 오류를 표현하는 것으로 주로 &lt;code&gt;JVM&lt;/code&gt;에서 사용한다.
어플리케이션 레벨에서 사용하는 경우도 있기는 한데 거의 사용되지 않고, &lt;code&gt;try~catch&lt;/code&gt;로 처리할 수 없다.
시스템 오류를 표현하는 것이므로 어플리케이션 개발자가 관여하게될 가능성이 매우 낮다.
흔히 볼 수 있는 &lt;code&gt;Error&lt;/code&gt; 클래스의 구현체는 &lt;code&gt;OutOfMemoryError&lt;/code&gt;와 &lt;code&gt;StackOverflowError&lt;/code&gt;가 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exception&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#exception&quot;&gt;3. Exception&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt; 클래스는 어플리케이션을 개발하는 과정에서 로직을 처리하는 중에 예외사항이 발생할 경우 사용하게 된다.
&lt;code&gt;Exception&lt;/code&gt;은 크게 &lt;code&gt;Checked Exception&lt;/code&gt;과 &lt;code&gt;Unchecked Exception&lt;/code&gt;으로 구분되는데 이 둘의 차이는 아래 표와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Checked Exception&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Unchecked Exception&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적 처리&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적으로 처리해야 함&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적인 처리를 강요하지 않음&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;처리 시점&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Compile Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Application Runtime&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;대표 Class&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exception 클래스와 하위 클래스 중 RuntimeException과 그 하위 클래스를 제외&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RuntimeException&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바에서는 &lt;code&gt;Exception&lt;/code&gt;을 처리하는 과정에서 &lt;code&gt;RuntimeException&lt;/code&gt;과 그 하위 클래스들을 특별하게 취급하여 &lt;code&gt;Compile Time&lt;/code&gt;에서 처리를 강제하지 않고, &lt;code&gt;Runtime&lt;/code&gt;에서 처리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;주로 개발자에게 예외사항이 발생할 수 있음을 알려주기 위하거나, 비즈니스 요구사항을 표현하기 위해서 &lt;code&gt;CheckedException&lt;/code&gt;을 사용하게 된다.
반대로 &lt;code&gt;Unchecked Exception&lt;/code&gt;은 반드시 처리하지 않아도 되는 경우나, 굳이 개발자가 알 필요가 없을 경우 사용하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt;을 사용하게 되면 비즈니스 로직에서 &lt;code&gt;true/false&lt;/code&gt; 혹은 &lt;code&gt;object/null&lt;/code&gt;을 사용하는 것에 비해서 훨씬 다양하게 예외사항을 표현할 수 있고, 비즈니스 요구사항을 코드로 깔끔하게 담을 수 있다.
또한 의미와 용도에 맞는 &lt;code&gt;Exception&lt;/code&gt;을 다양하게 사용하게 된다면, 디버깅이나 유지부수에도 큰 이점을 가질 수 있다.
&lt;code&gt;Exception&lt;/code&gt;은 주로 분석/설계 단계에서 정의를 하게 된다.
실제 비즈니스 로직을 구현하면서 메소드에 &lt;code&gt;throws&lt;/code&gt;를 명시적으로 작성함으로써 해당 메소드를 사용하는 개발자에게 예외사항이 발생할 수 있음을 열려준다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;예시&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#예시&quot;&gt;4. 예시&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=