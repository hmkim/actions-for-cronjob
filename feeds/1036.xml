<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Dean Inkyu Heo on Medium]]></title>
        <description><![CDATA[Stories by Dean Inkyu Heo on Medium]]></description>
        <link>https://medium.com/@deanheo?source=rss-50fa857c7c0b------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*UEMr1Y9JFlSj9MqEHRMaPw.jpeg</url>
            <title>Stories by Dean Inkyu Heo on Medium</title>
            <link>https://medium.com/@deanheo?source=rss-50fa857c7c0b------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 14 May 2019 02:58:00 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@deanheo" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Learn ES6 (ECMAScript 2015)]]></title>
            <link>https://medium.com/@deanheo/learn-es6-ecmascript-2015-b5c98fa0a8da?source=rss-50fa857c7c0b------2</link>
            <guid isPermaLink="false">https://medium.com/p/b5c98fa0a8da</guid>
            <category><![CDATA[ecmascript2015]]></category>
            <category><![CDATA[es6]]></category>
            <category><![CDATA[ecmascript-6]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Dean Inkyu Heo]]></dc:creator>
            <pubDate>Tue, 26 Jul 2016 08:47:16 GMT</pubDate>
            <atom:updated>2016-07-26T10:46:24.052Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*usstqcNlXCIDn2ztUpR0Cg.png" /></figure><h4>ES6 환경구축</h4><p>Webstome 인 경우</p><ol><li>Preferences</li><li>Languages &amp; Frameworks</li><li>ECMAScript6 선택</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*ypM0ZhJ8tgz-o3ZPUDmKvw.png" /></figure><p>텍스트에디터 인 경우</p><ul><li>2가지의 Transpiler(컴파일러) “Babel, Traceur” 중 선택해서 설치</li><li>ES6로 코딩하고 상위의 컴파일러를 통해 ES5 호환 코드로 변환</li><li>Command Line보다는 Gulf 나 Grunt 로 빌드하는 것이 편함</li><li>(자세한 방법은 추후 업로드 예정)</li></ul><h4>브라우저 호환성</h4><p>컴파일러부터, 브라우저, 모바일 호환성에 대한 테이블</p><p><a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a></p><h4>ES5와의 차이점</h4><p><a href="http://es6-features.org/#Constants">ECMAScript 6: New Features: Overview and Comparison</a></p><h4>ES6 배워보기</h4><p><a href="https://babeljs.io/docs/learn-es2015/">Learn ES2015 · Babel</a></p><p><strong>1. Arrow Function(화살표 함수) : ‘=&gt;’</strong></p><p>function과 return을 생략하고 ‘=&gt;’ 로 대체해서 사용할 수 있습니다. 일반 function과는 다르게 arrow function에서 this는 해당 스코프의 this 값과 같습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*vlQH_coF1Do4OcFcNYoLfw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*MghULKzm45vpieiFOEsllg.png" /></figure><p><strong>2. The let keyword : ‘let’</strong></p><p>let 키워드는 var보다 더욱 정밀한 스코프 접근을 하게 합니다.</p><p>var는 스코프의 범위가 난해합니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*VBIDHxPXz8GZVIyO-Mmdug.png" /></figure><p>var 대신 let을 사용하면, 자신을 정의한 블록, 또는 하위블록에서만 접근이 가능하며 블록 밖에서는 불가능합니다. 변수에서 var 다음 다시 var를 선언 후 값을 넣어주면 출력값이 마지막에 적용된 값으로 나옵니다. 하지만, let 키워드를 두 번 사용하면, typeError 메시지가 나옵니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*I4dofX1y5_FZgCErzXKfRg.png" /></figure><p>위에는 for loop의 i를 var로 선언하고 아래는 let으로 선언했습니다.</p><p>각각의 스코프를 가지고 있는 것을 볼 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*mcQ1S2YDuIsERSck-xWQPw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*9Wb3rOVEG6hEo_bLvlOoYg.png" /></figure><p><strong>3. The const keyword : ‘const’</strong></p><p>읽기전용 변수입니다. APIkey나 port 등 상수를 표현할 때 사용합니다. 또한, Block-Scope 변수라 let으로 선언한 변수와 규칙이 같습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*3IRHxpo4HToqydFbu68UfQ.png" /></figure><p><strong>4. Using the ES6 spread operator : ‘…’</strong></p><p>… 연산자는 배열을 쪼개 단일 요소로 만들어 줍니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*NT5p-Y6RP6bd3KrSP6_aZA.png" /></figure><p>… 연산자를 사용하지 않았을 때 배열 형태로 push 되는 것을 볼 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*YZlQo2pxpZSuOUwctyALnw.png" /></figure><p>… 연산자를 사용 시 각각의 요소로 push 되는 것을 볼 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*ETm4GI4SCb-XnuS9soCHdg.png" /></figure><p>이런 식으로 응용할 수도 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*H-xKT3jNed7-cypAerAq7g.png" /></figure><p>만약 Webstorm에서 SyntaxError: Unexpected token … 오류가 난다면</p><p>Run — Edit Configurations에서 Node parameters에 — harmony를 추가해주세요.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*-mK-zfJhq6_5_CsABsJmBQ.png" /></figure><p><strong>5. String Templates</strong></p><p>“ ` “기호로 감싸서 사용할 수 있습니다. “ ‘ “(따옴표)가 아닌 “ ` “(틸데) 기호입니다</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*xBzYvJecxIdTDPtCSlZluA.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*1q9d_4I2ztMwv9CgCiVuZg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*dU7EcgFKIaYo21FG-jP7Sg.png" /></figure><p><strong>6. Destructuring Assignment</strong></p><p>객체와 배열에 있는 값들을 해체해서 할당할 수 있습니다. 객체를 쪼개서 name과 job이라는 변수에 할당하였습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*Ivm2GGw4EvQfX9C6TfCo3g.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*n_X27uhAACcIl8RUoMN_zg.png" /></figure><p>이런 식으로 배열을 쪼개어 할당할 수도 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*3ZH-GAayGMSmCiEr_jryqA.png" /></figure><p>이런 식으로 응용할 수 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*0fm1uiaGSnN9TZTSkUFPQA.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*OSufVO5krMxE_SMrOzE9iQ.png" /></figure><p>만약 Webstorm에서 SyntaxError: Unexpected token 오류가 난다면</p><p>Run — Edit Configurations에서 Node parameters에 — harmony<em>destructuring</em></p><p>를 추가해주세요.</p><p><strong>7. Promises</strong></p><p>Promise는 이른바 콜백 지옥을 극복할 수 있는 패턴 중의 하나입니다. 설명하기엔 너무 길어질 것 같아 참고할 수 있는 사이트를 추천하겠습니다.</p><p><a href="http://programmingsummaries.tistory.com/325">http://programmingsummaries.tistory.com/325</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*nweDJqLf5ndwUMnCa6_eAg.png" /></figure><p><strong>8. Generators</strong></p><p>제가 알고 있던 Javascript가 맞는지 의문이 들 정도의 혼란스러운 개념입니다.</p><p><a href="http://www.bsidesoft.com/?p=2053">http://www.bsidesoft.com/?p=2053</a></p><p>yield, next(), next().value, done 정도만 이해하면 될 것 같습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*8mQD-YAo8Zyo35lzkZGdwg.png" /></figure><p><strong>9. Maps and WeakMaps</strong></p><p>map이라는 일종의 자료구조 형태가 있습니다. Key, Value pair로 이루어져 있습니다.</p><p>map의 property에는 set(), get(), size(), has(), clear()가 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*CosEvsgblPZJGrPtkfgJfw.png" /></figure><p>Iterator는 keys(), entries(), values가 있습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*vrYaeP6tGNbK83qYByNb_Q.png" /></figure><p>메모리 관리의 효율성을 위해 weakMap을 사용하기도 하지만 생략하겠습니다.</p><p><strong>10. Rest Parameters</strong></p><p>forEach를 이용해 기존에 사용되던 arguments keyword와 비교해 보겠습니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*KJVI9bain3XMWTBJp7UcGg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/proxy/1*wmRaYgqyTiLn6bsb_H_oVA.png" /></figure><p>짧게나마 이렇게 요약해 보았습니다.</p><p>위에서 언급하진 않았지만 import, export도 중요 하고 Array.from()도</p><p>훑어보면 많은 도움이 될 것 같네요.</p><p>Uncaught SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode.</p><p>이런 경우를 만났다면, ‘use strict’; 구문으로 스트릭트 모드를 추가해주면 됩니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b5c98fa0a8da" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Code/States - Week 01]]></title>
            <link>https://medium.com/@deanheo/code-states-week-1-2824c63ccc3a?source=rss-50fa857c7c0b------2</link>
            <guid isPermaLink="false">https://medium.com/p/2824c63ccc3a</guid>
            <category><![CDATA[technology]]></category>
            <category><![CDATA[coding]]></category>
            <category><![CDATA[codestates]]></category>
            <dc:creator><![CDATA[Dean Inkyu Heo]]></dc:creator>
            <pubDate>Sun, 08 May 2016 14:10:36 GMT</pubDate>
            <atom:updated>2016-07-27T06:47:53.961Z</atom:updated>
            <content:encoded><![CDATA[<p>첫 한국형 Bootcamp인 CodeStates의 Immersive Course 1기에 참여하게 되었다. 여타 해외의 Bootcamp에서는 자신의 경험을 블로그에 올리는 것을 추천하고 있는데, CodeStates에서도 그것을 추천했다. 필자도 전부터 공부한 것을 블로그에 올리고 싶다는 생각을 했었는데 생각보다 많은 시간을 필요로 하는 작업 이어서 미루고 있다가 이번 기회에 꾸준히 써보기로 했다. Immersive-course는 “아침 9시부터 저녁 8시+@”까지 코워킹 스페이스인 “하이브아레나”에서 진행되었다.</p><p>제일 처음 한 것은 같이 시작하게 된 동기들(이미 Pre Course를 같이해서 다 아는 사람들이었지만) 및 Staff와의 인사였다. 그러고는 바로 Pair Programming을 위해 2인 1조로 팀을 짜게 되었는데, 이제부터는 계속 Pair Programming으로 진행된다고 하였다. 평소 알고 있던 “역할을 분담하여 서로 코딩하여 종합하는” 그런 방식이 아닌, Navigator와 Driver로 나누어 한 명이 말하고 남은 한 명은 타이핑하는 그런 방식이었다. 상당히 생소하면서도 이게 무슨 의미가 있을까 하는 생각이 들었다. 자신의 문제 해결 방식과 pair의 문제 해결 방식을 비교하고 이해하는 취지라는 것을 깨달은 것은 첫 주가 지나고 나서였다. 뒤에 나올 내용이지만, Recursion을 복습할 때나 Data Structure를 구현해볼 때 혼자 코딩할 때에는 전혀 몰랐던 나의 단점들이 적나라하게 드러났다. 타인의 코드를 빠른 시간에 이해하는 능력이 부족하였으며, 나의 코드조차 남에게 정확한 설명을 하지 못했다. 왜 Pair Programming을 중요하게 여기는지 알게 된 경험이었다.</p><h4>Week 1 Day 1 — Underbar Library</h4><p>첫날엔 Pre-course에서 진행했었던 Underbar Library에 대해 복습해보는 시간을 가졌다. Underbar(Underscore)란 Javascript의 Library 중 하나인데, 기존에 존재하는 Library의 소스를 지우고 스스로 Library의 함수를 만들어 보는 과제를 수행했다. Underbar에는 JQuery에서 지원하는 each, reduce 메소드와 동일한 역할을 하는 메소드들이 많아서 다음에 JQuery를 다룰 때 매우 큰 도움이 되었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/998/1*9M0kqoTHDeJbkd5kz77-tw.png" /><figcaption>Underbar 과제 중 once함수 구현</figcaption></figure><h4>Week 1 Day 2 — Recursion &amp; Toy Problem</h4><p>둘째 날에도 마찬가지로 Pre-course에서 했었던 Recursion에 대해 복습했었다. Object 혹은 Array에 들어있는 값들을 문자열화(Stringfy) 하는 것까지 했었는데 역으로 문자열을 Object, Array로 바꾸는 건 못하고 끝이 나버렸다. Recursion은 해도 해도 어렵다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/726/1*-TRMUuFVtIjJMReXqW37Cg.png" /><figcaption>Recursion을 이용해 문자열로 바꾸는 소스</figcaption></figure><p>이때는 이름이 왜 stringifyJSON 인지 몰랐는데, 시간이 흐르고 다시 보니 JSON.stringify를 직접 구현해본 것이라는 걸 깨달았다.</p><p>Immersive Course는 오전에 특별한 일정이 없는 경우 간단한 Toy Problem을 풀고 하루를 시작한다. 오늘은 rockPaperScissors 라는 이름의 문제를 풀었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/824/1*osBlD0Z5aTG3YWzHuBmkuQ.png" /><figcaption>rockPaperScissors 문제</figcaption></figure><h4>Week 1 Day 3–6 — Data Structure &amp; Code Reuse Module</h4><p>남은 나흘동안 Data Structure와 Code Reuse Module에 대해 공부했다. Stack과 Queue는 functional, functional-shared, prototypal, pseudoclassical, 이 4가지로 구현했고 그 밖에 Binary Search Tree, Grape, HashTable, LinkedList, Set, Tree를 구현해 보았다. 2번의 자료구조 수업을 들었지만 한 번도 구현해 본 적이 없어서, 코딩하면서 애를 많이 먹었다. 특히 Grape에서 테스트 통과에만 신경 썼는지 큰 실수를 저질러 처음부터 다시 짜기도 했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yKJ7pEL624uUPEUWD_gkWw.png" /><figcaption>4가지의 방식으로 구현한 Stack</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KZeMqHkJLZXqNVz949mdtQ.png" /><figcaption>여러가지의 자료구조를 구현</figcaption></figure><p>첫 주차에는 sprint 외에도 많은 부가 강의가 있었다. Google 사의 찬우님께서 Analysis of Algorithms과 Advanced Data Structures에 대해 강의해 주셨고, Amazon사의 호영 님게서 Intro to Data Structures &amp; Big O notation 이라는 주제로 강의를 해주셨다. 같은 Big O notation 주제로 Mattermark사의 형진님께서 한 번 더 강의를 해주셨는데 강의자료는 조금 어려워서 따로 자료를 찾아보았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ACq5Nn3KkesFCciAUDwlMQ.png" /><figcaption>강의자료 중 일부</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/990/1*ZWJfAV_A2t0jj439rKbMfw.png" /><figcaption>쉽게 이해할 수 있는 시간복잡도</figcaption></figure><p>테크니컬 한 강의만 진행된 것이 아니라 정신교육(?)시간도 있었다. 테크니컬 멘토인 공현우 선생님께서 “벽돌 모으기”라는 주제로 이야기하셨다. 쌩뚱 맞는 제목일 수도 있지만, 벽돌 모으기와 집 짓기를 프로그래밍과 연결지어보면 대충 느낌이 올 거라 믿는다. 그동안의 나는 “벽돌수집가”였기에 집을 지어본 적이 거의 없다. 이를 반성하고 기회가 된다면 집 짓기에 들어가려고 마음먹었다. <em>지금은 2일에 한 번씩 집이 지어진다.</em></p><p>아침 9시부터 저녁 8시까지 라고 하지만 정작 8시에 가는 사람은 많지 않았다. 필자에게는 첫 주부터 밤을 새우고 하이브아레나를 내 집 삼아 잠자는 그런 상황이 벌어졌다. 나머지 공부 및 정리가 필요했다 :( 나는 워낙 올빼미형 인간이고 새벽에 혼자 조용히 공부하는걸 좋아하는 터라.. 사실 밤샘 코딩도 좋다.</p><p>이상으로 Week 1 의 리뷰를 마친다.</p><blockquote><strong><em>“This year I will make this goal become a reality.”</em></strong></blockquote><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2824c63ccc3a" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Code/States — Focusing the one thing]]></title>
            <link>https://medium.com/@deanheo/code-states-focusing-the-one-thing-69f728d670d8?source=rss-50fa857c7c0b------2</link>
            <guid isPermaLink="false">https://medium.com/p/69f728d670d8</guid>
            <category><![CDATA[codestates]]></category>
            <category><![CDATA[programming]]></category>
            <category><![CDATA[coding]]></category>
            <dc:creator><![CDATA[Dean Inkyu Heo]]></dc:creator>
            <pubDate>Sun, 01 May 2016 06:21:06 GMT</pubDate>
            <atom:updated>2016-05-08T14:08:58.435Z</atom:updated>
            <content:encoded><![CDATA[<p>학부에서 “컴퓨터공학”을 전공한 필자는 스타트업에도 뛰어들어 보았고, 관련업계에 몸을 담궈도 보았다. 그러면서 참 많은 것들을 보고 느껴왔다. 이를테면 개발자 들이 받는 대우, 비전, 그런것들 말이다. 지금 돌이켜보면 그 때 고착된 생각들은 우물안 개구리의 그것과 별반 다를 바 없었다.</p><p>당시 그것에 싫증을 느낀 나는 IT가 아닌 다른 세상으로 떠났었다. 금융과 관련된 것을 배우고 싶어서 다시 학부로 돌아가기도 했다. (사실 그곳에서도 복수전공이 컴퓨터공학이었지만)</p><p>그러던 어느 날 우연히 페이스북에서 한 글을 보게되었다. 한국에 미국형 부트캠프가 생긴다는 것이었다. 부랴부랴 설명회에 참가신청을하고 참석하였는데, 그 곳에서는 믿기힘든 이야기만 할 뿐이었다. 3개월이라는 단기간의 학습 이후 실리콘밸리에 위치한 Microsoft, Google과 같은 대기업으로의 취업, 고소득의 연봉, 화려하게 캐스팅된 인스트럭터들. 사실 처음엔 의구심이 들었던것은 사실이다. 그 곳에 참여한 사람들 중 필자와 같은 생각을 한 사람들도 더럿 있을것이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/320/1*udhgH25bIWU1AQeYvwVKCQ.jpeg" /><figcaption>Code/States Logo</figcaption></figure><p>정신을 차렸을 땐 이미 Code/States(이하 CodeStates)의 Pre Course(본 과정에 들어가기에 앞서 기본교육을 받는 과정)에 등록해 Javascript를 공부하고있었다. CodeStates는 실리콘밸리의 부트캠프 중 하나인 Hack Reactor의 교육 쿼리큘럼과 비슷했는데, Javascript를 주축으로한 교육이었다. 10여년 전에는 홀대받던 Javascript가 강력해져서 돌아왔다는 것을 다시한번 상기할 수 있었다.</p><p>두 곳의 학교에서 컴퓨터공학을 전공하고 또한 모 학원에서 C언어 기초를 가르쳐왔기 때문에 대강의 과정(학교에 학원에서 가르쳐주는 그저그런 쿼리큘럼)을 유추해볼 수 있었으나, 시작부터 전혀 예상치도 못한 것들을 만나보게되었다. Pre Course에 대한 리뷰는 추후에 할 예정이지만 조금 언급하자면, 모든게 색다른 경험이었다고 말할 수 있다. 미국의 Coding Bootcamp들에 대해서는 검색만으로도 충분한 정보를 얻을 수 있으니 이 점은 생략하고자한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*H2PLTeiMVltTWrdROA9JYg.jpeg" /></figure><p>지금 필자는 CodeStates의 Pre Course 과정을 다행히도 무사히 마치고 본 코스인 Immersive Course에 참여할 기회를 얻어 하루하루 행복하지만 고된 삶(?)을 살고있다. 이 다음부터는 매주 학습하면서 느낀 점들을 써볼까 한다.</p><blockquote><strong>“This year I will make this goal become a reality.”</strong></blockquote><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=69f728d670d8" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>