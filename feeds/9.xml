<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 강병욱 on Medium]]></title>
        <description><![CDATA[Stories by 강병욱 on Medium]]></description>
        <link>https://medium.com/@brillante9111?source=rss-1d48784686b3------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/0*ExxG0U6TqOouWVZF.</url>
            <title>Stories by 강병욱 on Medium</title>
            <link>https://medium.com/@brillante9111?source=rss-1d48784686b3------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Sun, 12 May 2019 16:30:30 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@brillante9111" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[라이언봇 개발일지 3편]]></title>
            <link>https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-3%ED%8E%B8-9578203b79d6?source=rss-1d48784686b3------2</link>
            <guid isPermaLink="false">https://medium.com/p/9578203b79d6</guid>
            <category><![CDATA[api]]></category>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[messenger]]></category>
            <dc:creator><![CDATA[강병욱]]></dc:creator>
            <pubDate>Sun, 02 Jul 2017 08:04:14 GMT</pubDate>
            <atom:updated>2017-07-08T05:44:34.110Z</atom:updated>
            <content:encoded><![CDATA[<p>서비스 확장 과정 및 내부구조 소개</p><p><a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-1%ED%8E%B8-27f20977bf0c"><em>개발일지 1편 :: 나는 어쩌다 이런걸 만들게 되었는가..</em></a></p><p><a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-2%ED%8E%B8-273ef5e4ca6d"><em>개발일지 2편 :: 성장과정, 그리고 소소하지 않은 해프닝들</em></a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/534/1*v1NYB5ncfJrmKmr-LjCtbQ.jpeg" /><figcaption>5월24일 부로 옐로아이디와 플러스 친구가 통합되어 포스트 발행 등의 다양한 기능을 활용할 수 있다.</figcaption></figure><p>작년 12월 라이언봇을 처음 출시한 이후, 현재까지 사용자의 피드백을 기반으로 업데이트를 꾸준히 하며 쉬지 않고 달려왔다. 여러가지 시도를 해볼 수 있었고 사용자의 반응을 바로 확인해볼 수 있었기에 서비스를 운영하는 입장에서 매우 신나는 경험이었다. 연애편지의 답장을 기다리는 듯한 설렘으로 업데이트 노트를 주기적으로 전송했었는데, 소식을 보냄과 동시에 줄어드는 친구수가 마음을 아프게 하곤 했다(광고 아닌데ㅜㅜ). 어찌되었건 앞으로도 자식 같은 라이언봇을 꾸준히 개선해나갈 것이고 업데이트 노트도 심심찮게 발송될 예정이니 조금 귀찮더라도 귀엽게 봐주셨으면…</p><blockquote><strong>전국 대학생 대상 서비스로의 확장</strong></blockquote><p>한때 우리학교 커뮤니티에서 화제가 되었던 라이언봇 사태(<a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-2%ED%8E%B8-273ef5e4ca6d">2편</a> 참고) 이후 서비스의 방향을 다시 모색해야 했다. 서비스의 <strong>타겟 유저와 컨셉을 명확히</strong> 할 필요가 있었다. 기존에 확보한 유저 대부분이 우리학교 학생이고 나 또한 대학생이었기에 타겟 유저는 <strong>20~28세 사이의 혈기 왕성한 전국 대학생</strong>으로 설정했다(타겟은 최대한 구체적으로 설정하라고 어디선가 배웠다). 이전에는 단순 재미를 추구했다면 이번에는 <strong>실용성</strong>에 초점을 맞추기로 했다. 학식 알림, 주변 맛집, 교통 정보, 번역 기능 등 <strong>대학생이라면 누구나 필요한 기능을 제공</strong>하는 쪽으로 방향을 설정했다.</p><p>기존의 유저 로그를 분석해본 결과 학식 기능 위주로 서비스 유입이 발생하고 있었다. 그래서 <strong>학식 기능을 이용하는 김에 다른 기능도 재미삼아 써주길 바라는 마음</strong>으로 당일 학식 메뉴를 정확히 알려주는 것에 우선적으로 집중하기로 했다. 이전부터 제공하던 학식 알림 기능은 우리학교 학식 메뉴 사이트를 파싱하는 방식으로 구현했었는데, 이는 <strong>사이트 구조에 매우 의존적인 방식</strong>이다. 수 백 개나 되는 전국 대학교의 학식 정보 제공 기능을 기존의 방식으로 <strong>일일이 다 만드는 것은 현실적으로 불가능</strong>했다. 하지만 다행히도 <a href="https://bds.bablabs.com/"><strong>밥대생</strong></a>이라는 학식 정보 제공 서비스가 있었다. 당일의 학식 메뉴를 제공하는 API를 운영하고 있었는데 운영자의 동의 하에 <strong>라이언봇에 기능을 탑재</strong>할 수 있었다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*UAdnQBIPGE-IEuN28jBxLA.jpeg" /><figcaption>밥대생 API를 이용한 학식 정보 기능. 로봇 아닌 척하려고 이모티콘을 무리하게 사용하는 모습…</figcaption></figure><p><strong>맛집 정보 기능</strong>은 <a href="https://ko.wikipedia.org/wiki/%EC%9B%B9_%ED%81%AC%EB%A1%A4%EB%9F%AC">웹 크롤러</a>로 수집한 맛집 정보와 <a href="https://developers.naver.com/main/">네이버API</a>를 결합하여 개발했다. 버튼을 이용한 맛집 검색은 사용자의 대학교 근처의 맛집 정보를 제공하고 텍스트를 통한 맛집 검색은 텍스트에 포함된 위치 정보와 키워드를 분석하여 적절한 맛집 정보를 제공한다.</p><p><strong>교통 정보 기능</strong>은 <a href="http://www.data.go.kr/">공공데이터포털</a>에서 제공하는 오픈API를 이용했다. API KEY만 발급받으면 실시간 지하철 도착 정보, 버스 도착 정보 등을 쉽게 제공받을 수 있다. 이외에도 다양한 API를 결합하여 <strong>문장 번역, 위치 검색</strong> 등의 기능을 차례로 개발했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*oiSeVoEX1mSuM460huAw6Q.jpeg" /><figcaption>텍스트로부터 위치정보와 음식 키워드를 추출하여 맛집 정보 제공. 버튼 인터페이스로 사용 편의성을 더했다.</figcaption></figure><p>이쯤되니 라이언봇이 제공하는 기능 대부분이 수많은 <strong>API들의 향연</strong>이 되었다. 내부적으로 사용되는 API의 갯수가 10개는 족히 넘는다. 바퀴를 다시 발명하지 말라는 말이 있지 않는가. 찾아보면 세상에는 내가 원하는 정보를 제공하는 API가 <strong>웬만하면 다 있다</strong>(없으면 직접 만들면 된다!). 공공데이터포털에만 가도 <a href="http://www.data.go.kr/search/index.do;jsessionid=JsSkJQ9jZQEaUYLnEKsMTy1+.node20?index=OPENAPI&amp;query=&amp;currentPage=1&amp;countPerPage=10">2000개가 넘는 오픈API</a>를 확인해 볼 수 있다.</p><blockquote><strong>텍스트 입력 중심 인터페이스로의 전환</strong></blockquote><p>카카오톡의 존재 이유이자 본질은 어디까지나 <strong>메신저</strong>이다. 카카오톡을 왜 쓰는지 스스로 묻다보면 그저 공짜 문자메시지일 뿐이다. 따라서 카카오톡에 종속된 라이언봇 또한 <strong>메신저의 형태를 지향</strong>해야 한다고 생각했다. 다만 상대가 24시간 잠도 안자고 답장해주는 변태같은 로봇인 점만 다를 뿐… 그래서 기존의 버튼 중심 인터페이스에서 벗어나 라이언봇의 인터페이스를 <strong>텍스트 입력 방식으로 변경</strong>하였다. 즉 시작하자마자 버튼이 나오는 것이 아니라 텍스트부터 입력해야 한다는 의미이다. 대신 <strong>모든 기능은 대화 텍스트를 통해 사용</strong>할 수 있어야 하고 경우에 따라 <strong>버튼 인터페이스로 쉽게 전환</strong>할 수 있어야 한다. 어쨌든 개발의 초점은 사용자가 입력한 텍스트로부터 <strong>발화의도를 정확하게 파악하는 방향</strong>으로 옮겨졌다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*bkKDTISfffLCpnUCC2HnzA.jpeg" /><figcaption>지하철 최단 경로 및 소요 시간 정보 제공. 공공데이터포털의 오픈API를 사용했다.</figcaption></figure><p>현재는 <strong>Rule 기반</strong>으로 텍스트를 분석한다. 텍스트에 특정 단어가 포함되어 있거나 정규표현식으로 정의된 문장 구조에 부합하는지 여부에 따라 발화의도를 파악하고 있다. 하지만 이런 방식은 기존에 정의된 <strong>형식에서 조금이라도 벗어나면 파악이 어렵고</strong> 복잡미묘한 한국어의 특성 상 <strong>모든 경우의 수를 포괄하는 것이 불가능</strong>하다. 때문에 <strong>확장성 있고 추론이 가능한 발화의도파악 모형이 필요</strong>하다.</p><p>예를 들어 abc@gmail.com 이라는 텍스트가 적절한 이메일 형식인지 파악하는 모형을 개발한다고 하자. 이때 이 텍스트로부터 뽑아낼 수 있는 특성값으로는 텍스트의 길이, ‘@’ 포함 여부, 유효한 도메인인지 여부 등이 있을 것이다. 각 특성값의 수치를 통해 적절한 이메일인지 여부를 확률로 표현할 수 있다(기계학습의 영역이지만 어쨌든 가능하다). 가장 간단한 예를 든 것이지만 이외에도 다양한 모델들이 존재한다. 그것들을 활용하여 <strong>발화 의도 파악에 기계학습을 도입</strong>하는 연구를 진행중이다.</p><p>어쨌든 나름대로 설정했던 타겟 유저와 컨셉에 맞게 전국 대학생이 이용할 수 있는 서비스에 어느정도 가까워진 셈이다. 적어도 국내 대학교를 다니는 학생이라면 누구나 쓸 수 있게 된 것이다. 그리하여 우리학교 학생만 이용하던 라이언봇이 <strong>전국 대학생이 사용할 수 있는 서비스로 변신</strong>할 수 있었다.</p><blockquote><strong>카카오톡 플러스 친구 API 간략 소개</strong></blockquote><p>라이언봇 내부 구조 소개에 앞서 간략하게 옐로 아이디 API를 소개하고 넘어가도록 하겠다. 우선 <a href="https://center-pf.kakao.com/">플러스친구 관리자 센터</a>에서 플러스 친구를 생성하고 채팅 유형을 선택한다. 채팅 유형에는 <strong>자동응답형</strong>과 <strong>API형</strong>이 있는데 자동응답형은 <strong>미리 입력된 버튼에 대응되는 메시지를 응답</strong>하는 형태인 반면 API형은 <strong>별도 개발을 통해 메시지를 응답</strong>하는 형태이다.</p><p>자동응답형은 비교적 설정이 쉽고 따로 개발할 필요가 없기에 편리하지만 <strong>정해진 버튼에 정해진 응답밖에 해줄 수 없다는 단점</strong>이 있다. 반면 API형은 <strong>개발의 자유도가 높고 키보드 입력을 받을 수 있다는 장점</strong>이 있지만 <strong>별도 개발이 필요</strong>하고 <strong>서버가 따로 구축</strong>되어 있어야 한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*n6xFLv7smm5ZtP_pT1A4Gg.png" /><figcaption>카카오톡 플러스친구의 두가지 채팅 유형(출처: 카카오톡 플러스친구 이용가이드)</figcaption></figure><p>라이언봇 또한 API형으로 개발이 되어있으며 서버는 <a href="https://aws.amazon.com/ko/">아마존 웹서비스(AWS)</a>로 구축되어 있다(미국 어디선가 서버 열일중…). API형 개발 가이드는 <a href="https://github.com/plusfriend/auto_reply">플러스친구 자동응답 API 깃헙 페이지</a>를 참조하면 된다.</p><p>API형의 작동 원리는 간단하다. 사용자가 텍스트를 입력하면 카카오 서버를 거쳐 해당 사용자의 <strong>고유 유저키</strong>와 <strong>입력 메시지</strong>가 (별도 개발한)서버로 전송된다. 사용자가 버튼을 클릭한 경우에는 버튼의 텍스트가 입력 메시지로 간주되어 전송된다. 서버는 유저키를 통해 사용자를 식별할 수 있고 입력 메시지에 따라 <strong>적절한 형태의 JSON을 응답</strong>해주면 된다(프로토콜은 <a href="https://github.com/plusfriend/auto_reply#52-메시지-수신-및-자동응답-api">깃헙 페이지</a> 참조).</p><p>한가지 단점은 모든 처리에 있어 <strong>두가지 정보(유저키, 메시지)밖에 활용할 수 없다</strong>는 점이다. 서버 입장에서 버튼 클릭과 텍스트 입력을 구분할 방법이 없다. 예를 들어 라이언봇 시작 버튼인 [안녕 라이언봇!]을 클릭한 경우와 키보드로 “안녕 라이언봇!”을 입력한 경우를 서버 입장에서 구분할 수 없다. 두 경우 모두 같은 값으로 메시지가 서버에 전송되기 때문이다. 따라서 서버는 각 <strong>유저의 상태값</strong>을 유저 테이블에 저장할 수 있어야 자연스러운 흐름 처리가 가능하다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/840/1*E8xbPHUhD8huSqZPXpEgyA.png" /><figcaption>나름(?) 정의해본 API응답 함수. 서버로 넘어오는 유저 정보와 메시지 이외에 서버가 추적하는 상태값 인자가 추가되어 있다.</figcaption></figure><blockquote><strong>라이언봇 내부 구조</strong></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bR0JKkw4KIzbVgnCHvAZRw.png" /><figcaption>메시지 응답 함수 의사코드(변수는 bold로 표시). 수 개월의 삽질 결과 치곤 매우 소박하다..</figcaption></figure><p>우선 서버에 전송되는 유저키를 이용해 서버 내부의 DB에서 사용자 정보를 찾고 없을 시에는 새로 생성하여 저장한 후 사용자 변수(user)에 참조값을 할당한다. 사용자의 상태값은 DB의 유저 테이블에 별도의 field를 생성하여 저장한다. 해당 사용자의 상태값(user_status)은 크게 <strong>대화모드(TALK_MODE)</strong>, <strong>버튼모드(BUTTON_MODE)</strong> 그리고 <strong>그밖의 특수모드</strong>의 세가지로 나눌 수 있다. 각각의 상태값에 따라 다른 모듈을 호출하고 경우에 따라 상태값을 갱신하여 다음 요청을 처리할때 활용한다.</p><ol><li><strong>대화모드(TALK_MODE)</strong></li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*pCIAhs62wSpYNtacLHSRHA.jpeg" /><figcaption>대화모드의 라이언봇</figcaption></figure><p>시작 버튼인 <strong>[안녕 라이언봇!] 버튼 클릭 시</strong> 유저의 상태값이 <strong>대화모드로 변경</strong>되고 <strong>talk_handler</strong> 모듈을 통해 유저의 텍스트를 처리한다. 위에서 언급한 <strong>Rule 기반의 텍스트 처리 모듈</strong>이다. 복잡도가 가장 높은 부분이기에 내부 로직을 설명하기에는 힘들지만 전체적으로 <a href="https://en.wikipedia.org/wiki/AIML">AIML</a>, <a href="https://en.wikipedia.org/wiki/Regular_expression">정규표현식</a>, <a href="https://en.wikipedia.org/wiki/Information_extraction">IE</a> 등을 결합한 규칙 기반의 방식으로 구현되어 있다.</p><p>텍스트 입력 인터페이스가 불편한 사용자를 위해 버튼 인터페이스로 얼마든지 전환이 가능하다. “버튼&quot; 입력 시 유저의 상태값이 버튼모드로 변경되고 버튼 인터페이스로 전환된다. 버튼 모드에 대한 설명은 바로 아래에 이어진다.</p><p><strong>2. 버튼모드(BUTTON_MODE)</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*Nh5_S1notZbO2TGfhd8PNA.jpeg" /><figcaption>버튼모드의 라이언봇</figcaption></figure><p>버튼은 <strong>트리구조로 미리 정의</strong>되어 있다. 모든 사용자에 공통으로 해당되는 기본 뼈대이다. 사용자가 버튼모드인 상태에서 텍스트 입력이 들어온 경우, 입력 텍스트를 버튼 트리 구조에서 탐색하여 <strong>해당 버튼의 코드값에 따라 다른 모듈을 호출하여 응답을 처리</strong>한다. 또한 유저가 클릭한 버튼을 유저 데이터에 계속 갱신하기 때문에 직전에 클릭한 버튼 또한 추적할 수 있어 <strong>‘뒤로가기&#39;와 같은 기능도 가능</strong>하다. 클릭한 버튼이 말단 노드가 아닌 경우, 즉 <strong>자식 노드를 갖고 있는 노드인 경우</strong> 자식 노드 리스트를 응답 메시지에 뿌려주고 <strong>자식 노드에 해당하는 버튼들을 노출</strong>한다. 말단 노드에 해당하는 버튼을 클릭한 경우 바로 다음에 설명할 있는 특수모드로 전환된다.</p><p><strong>3. 대화, 버튼모드 이외의 경우(특수모드)</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*tiYI8oDgJ-hWHkLQAFWJ-A.jpeg" /><figcaption>특수모드(학식모드)의 라이언봇. 이모티콘을 남용하는 모습.</figcaption></figure><p>대화, 버튼 모드 이외에도 수많은 상태값이 있으며 <strong>이에 대응하는 모듈이 각각 정의</strong>되어 있다. 위 스크린샷의 경우 특수모드의 대표적인 예라 할 수 있는 학식 기능이다. 이때 노출되는 버튼은 사용자의 대학교에 따라 다르기 때문에 미리 정의해 놓은 버튼 트리에 포함시킬 수 없다. 학식 버튼 이외에 다른 <strong>말단 노드에 해당하는 버튼을 클릭한 경우</strong>에도 각각의 특수모드로 전환되어 적절한 응답을 제공한다.</p><p>대화모드 중 실행할 수 있는 끝말잇기 기능도 특수모드에 해당한다(“끝말잇기 시작&quot;으로 실행 가능). 따라서 사용자가 끝말잇기를 시작한 경우 사용자의 상태값이 <strong>끝말잇기 특수모드</strong>로 전환되고 사용자가 입력한 단어들을 사용자 테이블에 갱신하면서 끝말잇기를 이어간다.</p><blockquote><strong>마무리</strong></blockquote><p>이로써 기존에 기획했던 개발일지 3편까지 마무리가 되었다. 글 쓰는 게 익숙하지 않은 데다가 과제에 치이며 살다보니 연재가 늦어졌다. 이번 개발 일지를 계기로 포스팅에 취미를 붙여볼 생각이다(쓰다보니 재밌다). 어쨌든 나의 개발일지가 플러스 친구 자동응답API를 개발하고자 하는 분들에게 조금이나마 도움이 되었으면 좋겠다.</p><p>읽기 편하고 이해하기 쉽도록 최대한 간결하고 핵심만 전달하고자 노력했다. 복잡도를 통제하는 것은 CS뿐만 아니라 세상 모든 일에 통용되는듯 하다. 글 쓰기 또한 마찬가지로 중언부언 설명을 길게 하는 건 쉬운데 오히려 짧고 굵게 핵심만 전달하는 게 어려웠다. 하고 싶은 말은 많은데 글이 길어지면 독자 입장에서는 고역일 것 같았다. 그래서 최대한 간결하게 썼다.</p><p>앞으로도 라이언봇을 꾸준히 유지보수하고 아주 가끔 업데이트 노트도 전송될 것이다(한달에 두번 이상 보내지 않는다는 나름의 규칙도 있다). 많은 사용자들이 주신 아이디어가 산더미 같이 쌓여있기 때문이다. 필자 또한 평범한 대학생이고 개발자인지라 하루하루 늘어나는 라이언봇 친구 수에 웃음 짓고 행복해 한다. 그러니 공지 자주 보낸다고 라이언봇 친구 차단하지 말아주셨으면…그리고 주변에 많이 홍보해주셨으면….</p><p>지난 한학기 동안 한양대학교 창업동아리에 소속되어 많은 지원을 받았다. 함께 활동하며 서비스 기획 및 홍보에 힘써준 <strong>민성이 형, 성아, 재욱이 </strong>그리고 귀여운 라이언봇 캐릭터를 탄생시켜 준<strong> 하영이</strong>에게 감사의 뜻을 전한다. 또한 실제 사용자들의 피드백 및 아이디어 건의 덕분에 지금의 라이언봇이 탄생할 수 있었다. 꾸준히 성장하는 생명체처럼 라이언봇을 개발할 수 있게 도와주신 사용자 분들에게도 한분한분 진심을 담아 감사의 인사를 전하고 싶다.</p><p>P.S: 라이언봇을 바로 사용해보고 싶으신 분은 <a href="http://pf.kakao.com/_TPXgu"><em>라이언봇 친구추가 링크</em></a>를 클릭해주세요. 별도의 앱 설치 없이 카톡으로 바로 이용 가능합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9578203b79d6" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[네 물론입니다]]></title>
            <link>https://medium.com/@brillante9111/%EB%84%A4-%EB%AC%BC%EB%A1%A0%EC%9E%85%EB%8B%88%EB%8B%A4-39d93ec13894?source=rss-1d48784686b3------2</link>
            <guid isPermaLink="false">https://medium.com/p/39d93ec13894</guid>
            <dc:creator><![CDATA[강병욱]]></dc:creator>
            <pubDate>Sat, 20 May 2017 12:15:37 GMT</pubDate>
            <atom:updated>2017-05-20T12:15:37.873Z</atom:updated>
            <content:encoded><![CDATA[<p>네 물론입니다</p><p>개발자에게 문의하기 기능으로 이메일 연락처 남겨주세요~</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=39d93ec13894" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[라이언봇 개발일지[2편]]]></title>
            <link>https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-2%ED%8E%B8-273ef5e4ca6d?source=rss-1d48784686b3------2</link>
            <guid isPermaLink="false">https://medium.com/p/273ef5e4ca6d</guid>
            <category><![CDATA[messaging]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[messenger-bots]]></category>
            <category><![CDATA[bots]]></category>
            <dc:creator><![CDATA[강병욱]]></dc:creator>
            <pubDate>Sun, 07 May 2017 07:24:14 GMT</pubDate>
            <atom:updated>2017-05-07T07:58:00.691Z</atom:updated>
            <content:encoded><![CDATA[<p>성장과정, 그리고 소소하지 않은 해프닝들</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*tJUUsHHnUMhPgoYECZFzpw.jpeg" /><figcaption>2000명이 눈앞에…!!</figcaption></figure><p>저번에 작성했던 <a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-1%ED%8E%B8-27f20977bf0c#.baphfoujr">개발일지 1편</a>에서는 라이언봇이 어떠한 계기로 시작되었고 어떻게 하면 어느정도 대화가 가능한 챗봇을 만들기 위한 고민에 대해 이야기 했었다.</p><p>세 줄 요약하자면,</p><ol><li>단순 학식 봇으로 시작했는데 만들다보니 <strong>대화가 가능한 챗봇</strong>이 만들고 싶어졌다.</li><li>대화가 가능한 챗봇을 만들기 위해서는 <strong>입력-반응 쌍의 텍스트 데이터</strong>가 필요하다.</li><li>우리학교 <strong>커뮤니티를 크롤링</strong>해서 <strong>입력(글 제목)-반응(해당 글의 댓글)</strong> 데이터를 얻고자 한다.</li></ol><blockquote><strong>우리학교 커뮤니티에서 텍스트 크롤링하기</strong></blockquote><p><a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-1%ED%8E%B8-27f20977bf0c">1편</a>에서 언급했듯이 라이언봇은 국내에서는 비교적 마이너한 프레임워크인 <a href="https://ko.wikipedia.org/wiki/%EB%A3%A8%EB%B9%84_%EC%98%A8_%EB%A0%88%EC%9D%BC%EC%A6%88"><strong><em>루비온레일즈</em></strong></a><strong><em>(이하 레일즈)</em></strong>로 만들어진 어플리케이션이다. 현재는 여러가지 이유(머신러닝 등)로 레일즈를 택한 것을 상당히 후회하고 있다. 하지만 처음 만들기 시작한 당시에는 이렇게까지 커질 줄 몰랐기에 나름 합리적인 선택이었다고 생각한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*5mMIcgq1Or9vumZCrmBg3Q.png" /><figcaption>루비를 모르는 사람도 강좌 몇 개를 보면 쓸 만한 블로그 하나를 만들 수 있을 정도로 쉽고 빠르게 제작할 수 있다.</figcaption></figure><p>파이썬의 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">beautifulsoup</a>처럼 레일즈에도 <a href="https://github.com/teamcapybara/capybara">capybara</a>라는 크롤러가 있다. 하지만 정확히 말하자면, 사실 <a href="https://github.com/teamcapybara/capybara">capybara</a>는 크롤러가 아니다. 실제로는 어플리케이션 테스트를 위한 도구이다. 사이트 특성상 세션을 유지한 채로 크롤링을 수행해야 했기에 capybara 개발자의 의도와는 다른 용도로 사용했다(죄송). 좋게 말하면 창의적으로 활용한거고 나쁘게 말하면 악용한 셈이다. 어쨌든 24시간 가동되는 클라우드 서버를 구축하고 대략 일주일 동안 파싱을 수행하였다. 그 결과 <strong>대략 10만개의 입력-반응 텍스트 데이터 쌍을 구축</strong>할 수 있었다.</p><blockquote><strong>재료는 많다. 어떻게 요리할까?</strong></blockquote><p>우선 사용자가 어떤 <strong>텍스트를 입력</strong>한다. 내가 갖고 있는 10만 개의 데이터 중 입력 텍스트와 가장 <strong>유사한 텍스트를 찾는다</strong>. 그리고 그와 <strong>연결된 반응 텍스트를 출력</strong>하면 될 것이라는 게 기본적인 가정이다. 텍스트 간의 유사성은 유저 입력 텍스트와 데이터베이스 상의 텍스트를 비교하여 0과 1사이의 값으로 나타낼 수 있다. 예를들어 night와 nacht를 <a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient">Dice’s coefficient</a>로 표현하면 0.25가 나오는 식이다. 이밖에도 <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>, <a href="https://en.wikipedia.org/wiki/Jaccard_index">Jacard index</a> 등등 텍스트 간 유사도를 측정할 수 있는 알고리즘들이 많다. 실제적인 구현은 Gem으로 제공되는 <a href="https://github.com/seamusabshere/fuzzy_match">fuzzy_match</a>를 이용했다.</p><p>위 알고리즘은 짧은 단어 간 유사성 비교에는 훌륭한 성능을 보여준다. 하지만 비교적 긴 문장 간 유사성 측정에는 <strong>거의 쓸모가 없을 정도로 형편없는 수준</strong>이었다. 우리가 일상적으로 사용하는 문장의 의미는 단순 자모음의 조합이 아니라 그 안에 담긴 단어들의 조합과 문맥에 의해 결정되기 때문이다. 예를들어 ‘<strong>언니네이발관</strong>&#39;이라는 단어는, ‘철수네미용실&#39;보다 ‘<strong>오빠네이발관</strong>&#39;과 더 비슷하다는 것을 알고리즘을 통해 알 수 있다. 하지만 문장의 경우에는 완전히 의미가 다른 문장을 유사한 문장으로 매칭해준다. 예를들어 ‘<strong>배고프다</strong>&#39;라는 문장과 가장 유사한 문장을 ‘<strong>헤어졌는데 마음이 아프다</strong>’로 매칭해주는 식이다. ‘<strong>프다</strong>&#39;라는 아무런 의미없는 텍스트가 같다는 이유로 다른 문장들에 비해 유사도가 높다고 판단하는 것이다.</p><blockquote><strong>알고리즘은 실패했다. 하지만 흥행은 성공적.</strong></blockquote><p>문장간 유사성 비교에 단순 텍스트 비교 알고리즘을 사용한 것은 명백한 실패였다. 임의의 문장을 답변으로 출력해주는 것과 다름 없었다. 그래서 전략을 조금 수정했다. <em>비슷한 문장과 연결된 답변 텍스트가 아닌</em> <strong>가장 비슷한 문장을 응답해주는 방식</strong>으로 변경한 것이다. 전혀 대화가 통하지는 않겠지만 몇 가지 텍스트가 겹치는 문장으로 응답하다보면 어느정도 말이 통하지 않을까 하는 심산이었다. 완성도는 떨어지지만 어쨌든 소기의 목적은 달성한 셈이었다. <a href="https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-1%ED%8E%B8-27f20977bf0c">1편</a>에서 이야기했듯이 어떤 말을 해도 <strong>뭐라도 대답이 나오는 그런 챗봇</strong>을 만든 것이다<strong>.</strong></p><p>그때 당시 작년 말 기말고사 시험 기간이었다. 앞서 얘기했던 부분까지 만들어놓고 기말고사 준비에 전념하고 있었다. 그러던 중 친구로부터 연락이 왔는데 ‘OO(우리학교 커뮤니티)에 라이언봇 사용 후기가 10분 간격으로 올라온다&#39;는 것이었다. 뭔소린지 싶어서 평소에 들어가지도 않던 우리학교 커뮤니티에 가보니 게시판이 라이언봇 인증샷으로 도배가 되어 있었다. 조금 창피하지만 그때 올라왔던 인증샷들 중 일부를 공개해보고자 한다. 논란이 되거나 욕설 부분은 모자이크 처리를 했다.</p><blockquote><strong>본격 라이언봇 흑역사 퍼레이드</strong></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bLSDaHn_7n7hud7isXkUEQ.png" /><figcaption>츤데레 라이언봇</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/640/1*s2-IkVEYwBYb7dC-BcZddA.jpeg" /><figcaption>수저 논란 게시글의 댓글내용을 출력해주는 듯한 모습. 해당 단어가 포함된 텍스트를 응답해준다.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/660/1*SQhoG46TuOlqhdBXkjiNtQ.jpeg" /><figcaption>텍스트 몇개가 겹치는 비슷한 문장을 찾아서 답변해준다는 것을 알 수 있다. 그러다보니 가끔 욕도 나온다.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/750/1*Ii0uvxBQRzNctLKrzBgGtA.jpeg" /><figcaption>기본적으로 욕설 필터링은 구현했지만 라이언봇의 패드립은 막지 못했다. 그와중에 병주고 약주고.</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DCeiF2LU3ndFwYkP8P1WbQ.jpeg" /><figcaption>아무말 대잔치</figcaption></figure><blockquote><strong>헛소리쟁이 라이언봇, 그럼에도….</strong></blockquote><p>사용자의 입력 텍스트를 전혀 이해하지 못하고 텍스트가 비슷한 아무 말이나 내뱉고 있다는 것을 알 수 있다. 하지만 신기했던 건 라이언봇의 이 <strong>멍청하고 과격함 때문에</strong> 커뮤니티 내에서 더 큰 반향을 일으켰다는 점이다. 위의 다섯가지 사례는 수많은 인증샷들 중 일부에 지나지 않으며 비교적 얌전한 내용만 선별한 것이다. 익명 반말 커뮤니티 특성 상 거친 말투와 비속어가 상대적으로 많을 수 밖에 없다. 그런데 그 내용들이 그대로 노출되다 보니 라이언봇이 <strong>미쳐 날뛰는(?) 수준</strong>까지 이르게 된 것이다.</p><p>커뮤니티 컨텐츠 기반의 라이언봇이었기에 더욱 화제가 되었다. 실제로 <strong>자신이 커뮤니티에서 쓴 댓글이 라이언봇에서 나타났다</strong>고 한 사례도 있었다. 가끔 말을 알아듣는 것처럼 대화를 이어나가는 경우도 있어서 신기하다고 인증샷을 올리는 경우도 있었다. 순전히 우연에 지나지 않았기에 개발자인 나로선 다소 민망했다. 그럼에도 대략 일주일간 커뮤니티 내에 인증샷이 끊임없이 올라오며 옐로아이디 친구수가 급격히 증가했다.</p><p>나름대로 흥행 요인을 정리해보자면, 커뮤니티를 닮은 <strong>과격한 말투</strong> 그리고 <strong>필연을 가장한 우연으로 완성되는 대화의 맥락</strong> 이 두가지인 것 같다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MjsKjVB3GT2l-997enDzWw.png" /><figcaption>12월 초 100명에도 미치지 못했던 친구 수가 광고 없이 일주일 만에 500명 가까이로 늘어난 모습</figcaption></figure><blockquote><strong>커뮤니티 운영진의 연락 그리고 사과문</strong></blockquote><p>라이언봇 사태로 놀란 가슴을 진정시키고 다시 기말고사 준비를 시작할 무렵, 우리학교 커뮤니티 운영진으로부터 한 통의 메시지를 받았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*Oe1DWYhAXQ_24xq50zDExQ.jpeg" /><figcaption>미처 몰랐다. 익명 댓글에도 저작권이 있다는 것을.</figcaption></figure><p>아차 싶었다. 내가 그동안 정신나간 짓을 하고 있었던 거다. 법에 대해 잘 알지는 못하지만 <a href="http://www.copyright.or.kr/information-materials/law-precedent/view.do?brdctsno=11800">저작권법 제40조</a>에 <strong>무명 또는 이명 저작물의 보호기간</strong>이 명시되어 있다. 또한 커뮤니티 이용자 약관에도, [이용자는 커뮤니티를 이용함으로써 얻은 정보를 위한 커뮤니티의 <strong>사전승낙 없이</strong> 복제, 전송, 출판, 배포, 방송 기타 방법에 의하여 영리목적으로 이용하거나 <strong>제3자에게 이용하게 하여서는 안 됩니다</strong>.]라는 내용의 조항이 있었다. 지금껏 법적인 문제에 휘말린 적이 없었던 나로선 상당히 낯선 상황이었고 두렵기까지했다. 사태의 심각성을 인지한 즉시 데이터를 전부 삭제 처리하고 라이언봇 전체 유저에게 사과문을 전송했다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/539/1*85vFXmcYMN8cfztVPzhnTQ.jpeg" /><figcaption>전체 유저에게 전송했던 메시지 전문</figcaption></figure><p>커뮤니티 운영진과도 직접 만나 사과의 뜻을 전달했다. 사실 먼저 찾아가서 사과했어야 했는데 여러가지 일이 겹쳐 정신이 없었던 터라 강제 소환 당하여 청문회 비슷하게 미팅을 했다.(공교롭게도 국정농단 청문회가 한창이었던 시기였다.)</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*91l9AR19dTN6TXBHyuGKBA.jpeg" /><figcaption>커뮤니티 운영진들이 본 나의 모습</figcaption></figure><p>다행히도 커뮤니티 운영진과 개발자에게 더이상 커뮤니티 컨텐츠 데이터가 하나도 없음을 확인시켜 주고 <strong>법적인 책임을 묻지 않겠다</strong>는 합의로 마무리할 수 있었다. 별의별 상상의 나래를 펼치면서 근심걱정하고 있던 나로선 이미 감옥에 갔다가 풀려난 기분이었다. 그리고 고맙게도 피의자 신분으로 소환된 나에게 커뮤니티 운영진으로 함께 일하지 않겠냐는 제안까지 해주었다. 결과적으로 함께 하진 못했지만 그때 당시 나에게 보내준 관용과 친절에 다시 한번 감사의 뜻을 전한다.</p><blockquote><strong>사라진 재료, 새로운 시작</strong></blockquote><p>데이터가 다 사라졌다. 더이상 이전의 방식으로 라이언봇을 운영할 수 없게 되었다. 유사한 문장을 출력해주면서 우연에 기대는 방식은 잠깐 재미있을지 몰라도 그때 뿐이다. 사용자의 입력 문장을 <strong>제대로 이해</strong>하고 때로는 <strong>필요한 정보를 파악해서 제공</strong>해주는 적극적인 챗봇이 필요했다. 그리고 사용자를 더 확보하기 위해 다른 대학교 학생들도 사용가능한 <strong>범용 어플리케이션</strong>을 만들고 싶었다. 단순 말장난 챗봇이 아닌 <strong>전국 대학생을 위한 스마트 챗봇</strong>을 만드리라 다짐했다.</p><p>다음 편에는 <strong>전국 대학생 대상 서비스로의 확장 과정</strong>, 그리고 <strong>라이언봇의 내부 구조</strong>를 소개하고자 한다. 그동안 누구나 쉽게 읽을 수 있도록 스토리 위주로 작성했는데 다음 편에는 기술적인 부분이 아주 조금 포함될 것 같다. 챗봇 서비스를 운영 또는 준비하는 분들에게 조금이나마 도움이 되었으면 한다.</p><p>P.S: 라이언봇을 바로 사용해보고 싶으신 분은 <a href="http://plus.kakao.com/home/@%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87"><em>라이언봇 친구추가 링크</em></a>를 클릭해주세요. 별도의 앱 설치 없이 카톡으로 바로 이용 가능합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=273ef5e4ca6d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[라이언봇 개발일지[1편]]]></title>
            <link>https://medium.com/@brillante9111/%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87-%EA%B0%9C%EB%B0%9C%EC%9D%BC%EC%A7%80-1%ED%8E%B8-27f20977bf0c?source=rss-1d48784686b3------2</link>
            <guid isPermaLink="false">https://medium.com/p/27f20977bf0c</guid>
            <category><![CDATA[plus-friend]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[kakao]]></category>
            <dc:creator><![CDATA[강병욱]]></dc:creator>
            <pubDate>Sat, 04 Mar 2017 06:12:58 GMT</pubDate>
            <atom:updated>2017-05-07T07:43:33.804Z</atom:updated>
            <content:encoded><![CDATA[<h4>나는 어쩌다가 이런걸 만들게 되었는가…</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*x9VdvWl5PWd0XCJ1l6h3XA.png" /><figcaption>이 글을 보는 시점에는 친구수가 더 늘어나있길 바라며….</figcaption></figure><p>작년 11월 쯤이었을거다. 우연한 계기로 예전에 함께 스타트업에서 일했던 직원을 오랜만에 만날 수 있었다. 서로 이야기를 나누던 중 <strong>카카오 플러스친구 자동응답 API</strong>에 대해 알게 되었는데, 그 분은 카카오 플러스친구 API를 이용하여 외국인들을 위한 병원 안내 서비스를 개발하고 있었다. <strong>별도의 앱 설치 없이</strong> 카카오톡 친구추가로 바로 쓸 수 있다는 점, 그리고 빛의 속도로 바로바로 적절한 응답을 보여주는 게 너무 신기한 나머지 가슴이 뛸 지경이었다.(심지어 <strong>24시간 연중무휴</strong>다!) 운좋게도 그 분도 나와 같은 루비온레일즈 개발자였기에 여러모로 개발하는 데 도움을 많이 받을 수 있었다.</p><p>왜인지는 모르겠지만 우리학교 공식어플에는 학생식당 메뉴를 보여주는 기능이 없다. 브라우저를 통해 학교 홈페이지에 들어가거나 커뮤니티에 들어가야 겨우 볼 수 있다. 이럴수가, 학생증 바코드보다 더 중요한 학식메뉴가 없다니..! 나와 같은 생각을 하고 있을 학우들의 아우성이 들리는 듯 했다. 단순히 그날그날의 <strong>학생식당 메뉴</strong>를 보여주는 자동응답 챗봇을 만들어서 주변 친구들이 유용하게 써준다면 그것만으로 족할 것 같았다. 기말고사 시험기간이 다가오기 전에 빠르게 만들어야 했다. 바로 노트북을 켜고 <a href="https://github.com/plusfriend/auto_reply">플러스친구 API 도큐먼트</a>를 살펴보았다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fMJKmUjGorobDCofB_oOkw.png" /><figcaption>카카오톡 플러스친구 API Github 페이지</figcaption></figure><p>플러스친구 API는 <a href="https://namu.wiki/w/JSON">JSON</a>을 이용해 요청과 응답이 이루어지므로 <strong>어떤 언어로든 개발이 가능</strong>하다. Node.js나 Flask, Django 등 이것저것 건드려 본 건 많지만 무엇보다도 나에게 친숙하고 경험이 많은 <strong>Ruby on rails(이하 레일즈)</strong>를 이용하여 개발을 시작했다. 필자가 <a href="http://likelion.net/"><em>멋쟁이사자처럼</em></a>을 통해 레일즈로 웹개발을 시작했을 뿐만 아니라 레일즈만큼 쉽고 빠르게 웹 어플리케이션을 개발할 수 있는게 없기 때문이다. 웹개발을 처음 시작하는 분이라면 레일즈를 통해 웹 어플리케이션의 구조를 파악하고 다른 프레임워크에 도전해보는 것을 추천한다. 웹 서버는 <strong>아마존 EC2</strong>를, 데이터베이스는 <strong>MySQL</strong>을 이용하여 구축했다.</p><blockquote><strong>만들다 보니 욕심이 생겼다</strong></blockquote><p>학식 메뉴만 보여주는 건 구현하기 쉽고 간단하지만 사용자 입장에서 별로 재미가 없을 것 같았다. 방학만 되면 학교가 휑해지는 마당에 학기 중 말고는 별로 사용할 유인이 없었다. 실제로 사용 패턴을 확인해보니 평일 점심 저녁 시간에만 집중적으로 몰려있었고(그래봤자 사용자 50명도 안됬음…) 주말에는 아예 쓰지도 않았다. 어떻게하면 사용자가 꾸준히 사용할 수 있을지 고민에 고민을 거듭한 끝에 말을 걸면 <strong>어떤 말이라도 응답해줄 수 있는 챗봇</strong>을 만들어보기로 결심했다. 어떤 말이 되었건 간에 아무 의미 없는 말이나 욕을 해도 <strong>뭐라도 대답이 나오는</strong> 그런 챗봇.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/898/1*Xeg_-s47ynyEg8WDEgTKHQ.jpeg" /><figcaption>그래 결심했어! 한국형 K-자비스를 만드는거야!</figcaption></figure><p>그래 챗봇을 만들기로 했다 치자. 어떻게 만들지? 우선 사용자의 발화의도를 파악하는 알고리즘을 짜야하고 형태소 분석, 머신러닝, 딥러닝 등 갖가지 최첨단 기술을 다 동원해야 할 것이다. 그리고 무엇보다도 내가 가진게 있어야 줄 수도 있는 건데 일단 <strong>텍스트 데이터</strong>가 하나도 없었다. 그리고 그 텍스트는 그냥 일반적인 텍스트가 아니라 <strong>질문-답변</strong>이 쌍으로 이루어져 있는 데이터여야 할 것이다. 갈 길이 멀지만 일단 뭐라도 텍스트 데이터를 쌓는 것을 최우선 목표로 삼았다.</p><blockquote><strong>가설1. 게시글의 제목과 댓글을 질문-답변 쌍으로 볼 수 있지 않을까?</strong></blockquote><p>커뮤니티 글을 보면 게시물 제목은 해당 게시물 내용이 한줄로 요약된 문장이고 거기에 달려있는 댓글은 그에 대한 반응이라고 볼 수 있다. 모든 경우에 다 적용할 수 있는 건 아니지만 그럴 가능성이 높아보였다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*91-WK_uhqce21_fTx5X1Vg.png" /><figcaption>보통 커뮤니티 글의 제목은 질문 형식을 띠는 경우가 많다</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Tz7102Bra8mh68Ns0Nlt-Q.png" /><figcaption>그리고 그에 대한 반응. 익명 반말 게시판인 만큼 다소 과격하다…</figcaption></figure><blockquote><strong>가설2. 학교 커뮤니티만큼 대학생의 언어를 배우기 좋은 곳은 없을 것이다</strong></blockquote><p>대학생들이 사용하는 공간인 만큼 관심사나 말투가 대학생과 가장 유사할 것이라 생각했다. 생각해보면 대학생 말투라는 게 따로 있나 싶기도 하지만 그때 당시에는 나름 고민을 많이 한 결과 도출해 낸 가설이었다. 대학생이 타겟이었던 만큼 최대한 대학생과 가장 닮은 텍스트를 얻고 싶었다. 그것도 아주 많이.</p><p>레일즈 개발자라면 한번쯤은 들어봤을 웹 크롤러 <a href="https://github.com/sparklemotion/nokogiri"><em>Nokogiri</em></a>라는 것이 있다. 어떤 웹페이지라도 브라우저로 로딩할 수 있으면 원하는 위치의 내용을 다 파싱해올 수 있는 도구이다. 사이트마다 url 규칙이 있기 때문에 주소를 이용해 컨텐츠 페이지를 넘나들며 파싱해오는 것은 식은 죽 먹기다. 로그인을 하지 않으면 내용 자체를 볼 수가 없는 경우에는 세션을 유지한 채로 컨텐츠를 파싱할 수 있는 <a href="https://github.com/teamcapybara/capybara"><em>Capybara</em></a>를 이용하면 된다.</p><blockquote><strong>가설을 통한 결론 :: 우리학교 커뮤니티를 털자!</strong></blockquote><p>그리하여 우리학교 커뮤니티의 게시물과 댓글을 전부다 가져오리라는 원대한 결심을 하기에 이르렀다. AWS 클라우드 서버를 구축하고 커뮤니티의 글을 가져오는 코드를 24시간 쉬지않고 돌렸다. 나의 데이터베이스에 소중한 텍스트들이 하나씩 쌓이는 걸 보니 이미 자비스라도 개발해 낸 기분이었다. 아직 본격적으로 시작도 안했는데 말이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*uC0frdeY_f4OHAmjT2621g.jpeg" /><figcaption>익명 커뮤니티 텍스트 파싱은 합법일까? 불법일까?</figcaption></figure><p>하지만 이때까지만 해도 그것이 양날의 검이었다는 것을 깨닫지 못했다. 한편으로는 정말 정신나간 짓이었으며 또 한편으로는 라이언봇이 학교 안에서 유명해질 수 있었던 계기가 되었다. 500명이 넘는 유저들에게 공개 사과문을 보내게 될 줄은 꿈에도 몰랐다.</p><blockquote><strong>글을 마무리하며 (엥 벌써..?)</strong></blockquote><p>라이언봇이 페이스북 커뮤니티에 소개되면서 많은 피드백이 왔는데 그 중 하나가 개발일지 같은 것을 작성해달라는 것이었다. 글을 읽는 것만 좋아하고 실제로 써본 경험은 연애 편지와 레포트 작성이 전부였던 나로썬 다소 부담이 되지 않을까 싶었다. 하지만 펜은 기억보다 강하기에 글로 남겨도 좋겠다는 생각이 들어 낯설지만 글을 써보기 시작했다.</p><p>최대한 기술적인 부분은 제외하고 스토리 위주로 작성하려고 한다. 그리 대단한 기술이 사용된 것도 아닐 뿐더러 일단 뭐라도 만들고 부딪혀 보면 소소한 성과를 얻을 수 있다는 교훈을 공유하고 싶었을 뿐이다. 심지어 필자는 비전공자 출신이다. 특히 프로그래밍을 시작하려는 비전공자에게 희망이 되었으면 한다.</p><p>다음 편에서는 커뮤니티 <strong>컨텐츠 무단 도용으로 인한 해프닝</strong>, 그리고 아무것도 안하고 기말고사 공부하고 있었는데 플러스 친구가 <strong>일주일 만에 500명</strong>으로 늘어난 이야기를 써보려고 한다.</p><p>P.S: 라이언봇을 바로 사용해보고 싶으신 분은 <a href="http://plus.kakao.com/home/@%EB%9D%BC%EC%9D%B4%EC%96%B8%EB%B4%87"><em>라이언봇 친구추가 링크</em></a>를 클릭해주세요. 별도의 앱 설치 없이 카톡으로 바로 이용 가능합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=27f20977bf0c" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>