<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>영찬 블로그</title>
    <description>삽질한거 나만 보기 아까워서 올림</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Generic rules</title>
        <description>
          제너릭이 짱이다 - 
          재밌는 글을 찾았다. C#의 LINQ가 설계 오류로 느리다는 내용이다. 원글 링크 보면 대충 다음과 같이 인터페이스를 인자로 받는 코드를 void A(IAnswer i) { ... } 다음과 같이 제너릭으로 바꿔야 한다는 글이다. void A&amp;lt;TAnswer&amp;gt;(TAnswer t) where TAnswer : IAnswer { ... } 다를 게 없어 보이는 코드이지만 실제로 작동하는 방식은 꽤...
        </description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0900</pubDate>
        <link>/2019-02-18-Generic-Rules/</link>
        <guid isPermaLink="true">/2019-02-18-Generic-Rules/</guid>
      </item>
    
      <item>
        <title>Look Back At 2018</title>
        <description>
          2018년 회고 - 
          어느새 2018년 12월 25일, 크리스마스가 되어 버렸다. 올해에도 역시 크리스마스를 기념하여 2018년을 되돌아보는 시간을 가지려고 한다. 회사 10월에 홍대에 있는 회사에 입사하였다. 회사 생활을 재밌고 벌써 많은 것을 공부하고 배웠다. 공부 솔직히 올해 학교에서의 나는 공부와 개발보다는 게임을 많이 했고 더 많이 놀았다. 그렇다고 공부와 개발을 하지 않은 것은 아니다....
        </description>
        <pubDate>Tue, 25 Dec 2018 00:00:00 +0900</pubDate>
        <link>/2018-12-25-Look-Back-At-2018/</link>
        <guid isPermaLink="true">/2018-12-25-Look-Back-At-2018/</guid>
      </item>
    
      <item>
        <title>Ascii Fluids Deobfuscation</title>
        <description>
          Yusuke Endoh의 Ascii Fluids 코드 분석 - 
          프로그래밍의 흑마법, 코드골프 등에 관심이 있는 사람들이라면 한번쯤은 IOCCC에 대해 들어봤을 것이다. 아니면 IOCCC을 들어본 적은 없더라도 ASCII fluid dynamics 라는 영상은 봤을 지도 모른다. 그리고 이 프로그램의 소스 코드는 다음과 같다. # include&amp;lt;stdio.h&amp;gt;// .IOCCC Fluid- # # include &amp;lt;unistd.h&amp;gt; //2012 _Sim!_ # # include&amp;lt;complex.h&amp;gt; //|||| ,____. IOCCC- # #...
        </description>
        <pubDate>Mon, 06 Aug 2018 00:00:00 +0900</pubDate>
        <link>/2018-08-06-IOCCC-Fluid-Dynamics/</link>
        <guid isPermaLink="true">/2018-08-06-IOCCC-Fluid-Dynamics/</guid>
      </item>
    
      <item>
        <title>String Interning</title>
        <description>
          C#의 string.Intern - 
          들어가며 C#의 string.Intern 이라는 메서드는 문자열 풀에서 문자열을 풀링시켜 메모리를 아끼고 메모리 비교를 더 빠르게 해준다. 쓰는건 정말 간단하다. a = string.Intern(&quot;this is string&quot;) 으로 문자열을 넘기면 끝이다. 간단하게 퍼포먼스 비교를 해보자. string a = &quot;dolphin&quot;; string b = &quot;dol&quot;; b += &quot;phin&quot;; bool res = false; var sw =...
        </description>
        <pubDate>Thu, 14 Jun 2018 00:00:00 +0900</pubDate>
        <link>/2018-06-14-String-Interning/</link>
        <guid isPermaLink="true">/2018-06-14-String-Interning/</guid>
      </item>
    
      <item>
        <title>소수 찾기</title>
        <description>
          평범하지 않게 소수 찾기 - 
          백준 온라인 저지에는 소수 찾기라는 문제가 있다. 100개 이하의 수들이 주어지고, 이들은 1000보다 작을 때 이들 중 소수들의 개수를 출력하는 프로그램을 작성하는 문제이다. 백준 온라인 저지같은 알고리즘 해결 문제 사이트는 문제를 빠르게, 효율적으로 문제를 푸는 것이 목표인 모범생(?)들이 있는가 하면, 어떻게든 더 짧은 코드를 작성하려 하는 숏코딩을 좋아하는 변태들도 있다....
        </description>
        <pubDate>Wed, 02 May 2018 00:00:00 +0900</pubDate>
        <link>/2018-05-02-Find-Primes/</link>
        <guid isPermaLink="true">/2018-05-02-Find-Primes/</guid>
      </item>
    
      <item>
        <title>Array Or Object Creation</title>
        <description>
          너는 알지도 모르지만 나는 몰랐던 C# 개체 및 컬렉션 이니셜라이저 - 
          ????!? 다음 코드의 실행 결과는 무엇일까? class A { public int[] arr; static void Main() { var x = new A() { arr = { 1, 2, 3, 4, 5 } }; Console.WriteLine(string.Join(&quot;, &quot;, x.arr)); } } 내가 무엇에 대해 얘기하려고 하는지 아는 사람은 바로 결과를 말할 수 있겠지만 그렇지...
        </description>
        <pubDate>Sat, 27 Jan 2018 00:00:00 +0900</pubDate>
        <link>/2018-01-27-Array-Or-Object-Creation/</link>
        <guid isPermaLink="true">/2018-01-27-Array-Or-Object-Creation/</guid>
      </item>
    
      <item>
        <title>Look Back At 2017</title>
        <description>
          2017년 회고 - 
          어느새 2017년 12월 25일, 크리스마스가 되어 버렸다. 크리스마스에 딱히 할 것도 없고 해서 2017년을 되돌아보는 시간을 가지려고 한다. 공부 2017년 초반에 파이썬을 배워서 지금까지 유용하게 쓰고 있다. 파이썬의 강력한 메타 프로그래밍이 꽤나 재밌어서 The Fun Of Reinvention 이라는 포스트도 작성했다. 우물 안 개구리 수준이지만 C# 공부를 꾸준히 하여 더 깊이...
        </description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0900</pubDate>
        <link>/2017-12-25-Look-Back-At-2017/</link>
        <guid isPermaLink="true">/2017-12-25-Look-Back-At-2017/</guid>
      </item>
    
      <item>
        <title>Covariance and Contravariance</title>
        <description>
          C#의 Covariance(공변성)와 Contravariance(반공변성)에 대하여 - 
          들어가며 OOP에 대한 기본만 알고 있어도 상속이라는 개념은 잘 알고 있을 것이다. 그럼 이제 가장 간단한 부모 관계 자식을 가지는 Pet 클래스와 Cat 클래스를 다음과 같이 선언하자. class Pet { } class Cat : Pet { } 다음의 코드는 정상적으로 컴파일 된다. 모든 Cat는 Pet이다가 당연하기 때문이다. Pet Pet =...
        </description>
        <pubDate>Sun, 10 Dec 2017 00:00:00 +0900</pubDate>
        <link>/2017-12-10-Covariance-and-Contravariance/</link>
        <guid isPermaLink="true">/2017-12-10-Covariance-and-Contravariance/</guid>
      </item>
    
      <item>
        <title>Something Wrong In Csharp Tuple</title>
        <description>
          C#의 튜플은 어디서부턴가 잘못되었다 - 
          이 포스트에 있는 코드들은 VS2017 .Net Framework 4.7 에서 테스트 되었습니다 문제의 시작 간단한 정수 배열에 대해, foreach 문을 사용하여 배열의 모든 원소를 출력할 때는 보통 다음과 같은 코드를 사용한다. int[] list = { 3, 1, 4, 1, 5, 9, 2 }; foreach (var i in list) { Console.WriteLine(i); }...
        </description>
        <pubDate>Tue, 22 Aug 2017 00:00:00 +0900</pubDate>
        <link>/2017-08-22-Something-Wrong-In-Csharp-Tuple/</link>
        <guid isPermaLink="true">/2017-08-22-Something-Wrong-In-Csharp-Tuple/</guid>
      </item>
    
      <item>
        <title>The Fun Of Reinvention</title>
        <description>
          파이썬3.6으로 흑마법을 부려보자 - 
          이 글은 The Fun Of Reinvention 를 보고 정리한 글입니다. 1. 어노테이션 파이썬에서 최대공약수를 구하는 함수를 작성하면 다음과 같다. def gcd(a, b): while b: a, b = b, a % b return a &amp;gt;&amp;gt;&amp;gt; gcd(27, 36) 9 알다시피, 파이썬은 동적 타입 언어이다. 우리는 a, b는 당연히 정수이고 사용자도 그렇게 사용할거야...
        </description>
        <pubDate>Sun, 02 Jul 2017 00:00:00 +0900</pubDate>
        <link>/2017-07-02-The-Fun-Of-Reinvention/</link>
        <guid isPermaLink="true">/2017-07-02-The-Fun-Of-Reinvention/</guid>
      </item>
    
  </channel>
</rss>
