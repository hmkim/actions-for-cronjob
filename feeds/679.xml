<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[1ilsang Dev Story]]></title>
			<link>http://1ilsang.blog.me</link>
			
				<image>
					<url><![CDATA[http://blogpfthumb.phinf.naver.net/MjAxNzA1MjZfMTAw/MDAxNDk1Nzg0NzA2MjA1.pJgZcgYeZb8WIFR2TiSLGjZiT_mgdgIgBB3r70kfw04g.Clj4QjqY1MleNPgxvjlBfxHC-iIWRjZQ-FSk7nOnQZsg.GIF.1ilsang/blog_char.gif?type=m2]]></url>
					<title><![CDATA[1ilsang Dev Story]]></title>
					<link>http://1ilsang.blog.me</link>
				</image>
			
			<description><![CDATA[개발자.            
                                               
20대 생활을 차곡차곡 모아
일기장 처럼 쓰고 있어요. 
                                             
많은 분들이 좋은 정보 얻어가시길!!    
                             
                                                
이웃은 언제나 환영입니다.]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Mon, 13 May 2019 07:12:25 +0900</pubDate>

			
				<item>
					<author></author>
					<category><![CDATA[빅스비 캡슐 챌린지]]></category>
					<title><![CDATA[빅스비 캡슐 챌린지 2019 에 도전]]></title>
					<link>http://1ilsang.blog.me/221520670673</link>
					<guid>http://1ilsang.blog.me/221520670673</guid>
					<description><![CDATA[싸피하면서 뭐 하나 하고싶었는데 마침 빅스비 챌린지가 있어서 반 친구들과 지원했다.수상을하겠어!! 라는 큰 목표는 아니고 그냥 빅스비 개발 어떻게 하는지 맛보고 친구들과 좋은 추억을 쌓는게 목표다.마침 빅스비 오피스 아워가 열려서 참여했다.뭔가 빅스비 캡슐 개발이라 어려울거 같아서 부담이 컸는데 비기너를 위한 가이드가 생각외로 잘 되어있었다.격주로 서초사옥에서 교육도 해주고 한글화도 열심히 하고 계시는거 같다.다만 빅스비 툴이 아직 좀 미흡한거 같았다.파일명 변경시 소스코드 일일이 찾아 변경해야 하는게 흠좀무...빅스비 로고 마음에 들어서 하나 붙였다 ㅎㅎ맥북이 끔찍한 혼종이 되어가고있다........]]></description>
					<pubDate>Tue, 23 Apr 2019 15:11:14 +0900</pubDate>
					<tag><![CDATA[빅스비,삼성,공모전]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[OperatingSystem]]></category>
					<title><![CDATA[OS? Oh Yes! 리뷰]]></title>
					<link>http://1ilsang.blog.me/221520656762</link>
					<guid>http://1ilsang.blog.me/221520656762</guid>
					<description><![CDATA[누워서 읽는 os 라 해서 편하게 읽은 OS? Oh YES! 책이다.이 책을 어디에서 추천해서 읽게 되었다.정확히 기억이 안난다 주니어에게 추천하는 도서목록 이런거였던거 같은데...것보다 면접전에 한번 훑어보고 싶어서 가벼운 마음으로 읽었다.선 요약을 하자면,가벼운 마음으로 읽기에 좋긴 한데 너무 가벼운 마음으로 읽기엔 어렵단거다.생각외로 깊이 들어갔고 다루는 범위가 넓었다.운체를 복습해보고자 하는 사람이라면 이 책을 추천한다.페이지도 280인가? 얇아서 복습용으로 좋은거 같다.그리고 예시를 많이 들어주기 때문에 이해하기에 확실히 좋았다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Tue, 23 Apr 2019 14:56:05 +0900</pubDate>
					<tag><![CDATA[운영체제,os]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[참여 세미나/해커톤]]></category>
					<title><![CDATA[제 26회 네트워크 전문가 따라잡기 'N.EX.T' 참여]]></title>
					<link>http://1ilsang.blog.me/221518690638</link>
					<guid>http://1ilsang.blog.me/221518690638</guid>
					<description><![CDATA[제 26회 네트워크 전문가 따라잡기 &#x27;N.EX.T&#x27; 참여네트워크 공부하면서 재밌어서 더 재밌는거 없을까 찾아보다가 눈에 들어온 네전따 세미나였다.클라우드에도 관심이 많아서 세션이 아주 재밌어 보였다!!그래서 재웅이형이랑 가봤다ㅎㅎ역삼에 사니까 이런 세미나 돌아다니기 정말 편하다.역곡에 살았을땐 진짜... 각오하고 나와야했는데 흑흑ㅠㅠ도착하니 사람이 엄청많았다.ㅡ.ㅡ거의 맨 뒤라서 글씨도 작게 보였다.다행히도 PPT 를 공유해 주셔서 노트북으로 볼 수 있었다.무우려 7시간의 세션이라 좀많이 각오했는데 생각보단 버틸만했다.맥북 아주 사랑해먼저 요약하자면, 세션은 전반적으로 어려웠다.그.......]]></description>
					<pubDate>Sat, 20 Apr 2019 23:57:05 +0900</pubDate>
					<tag><![CDATA[네전따,네트워크전문가따라잡기,tcp,dns]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 5052. 전화번호 목록 - 트라이(Trie)]]></title>
					<link>http://1ilsang.blog.me/221518648956</link>
					<guid>http://1ilsang.blog.me/221518648956</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/5052쉬운 트라이 문제이다.나는 트라이에 대한 이해보다 트라이를 구현하는게 조금 힘들었다....트라이란 무엇인가?trie 는 retrieval 의 약자로, 단어 처럼 검색에 특화된 &#x27;자료구조&#x27; 이다.&#x27;자료구조&#x27; 다!! 그러므로 구현하기 나름이다.접두어 트리로 이루어진 트라이는 문자열의 중복을 찾을때 매우 편리하다.트라이를 만들고 insert 해주면서 문자열이 끝났는데 리프가 아닌지 체크해서 답을 출력해 주면 된다.처음에 정렬을 해주는 이유는 번호 순대로 오기 때문에 정렬을 통해 시간을 더 줄일 수 있다.991123123113991이렇게 있으면123113991991123정렬을 통해 바.......]]></description>
					<pubDate>Sat, 20 Apr 2019 22:50:08 +0900</pubDate>
					<tag><![CDATA[trie,트라이,boj,algorithm,ps]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 2623. 음악프로그램 - 위상정렬(Topological sorting)]]></title>
					<link>http://1ilsang.blog.me/221516973427</link>
					<guid>http://1ilsang.blog.me/221516973427</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/2623그냥 위상정렬 시키면 되는 문제다.위상정렬은 아래에 정리했다.http://1ilsang.blog.me/221516936340큐가 n 번 노드까지 돌지 못했다는건 싸이클이 생겼다는 것.그럼 이만!https://github.com/1ilsang/study/]]></description>
					<pubDate>Thu, 18 Apr 2019 18:43:12 +0900</pubDate>
					<tag><![CDATA[boj,algorithm,ps]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1516. 게임 개발 - 위상정렬(Topological sorting)]]></title>
					<link>http://1ilsang.blog.me/221516936340</link>
					<guid>http://1ilsang.blog.me/221516936340</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/1516위상정렬 문제이다.일단 위상정렬이 무엇인가? 하면 그래프의 노드들에 순서를 지정한다는 뜻이다.??위상정렬이 필요한 이유에 대해서 먼저 알아보자.나는 이 말이 참 와닿았는데, 스타크래프트에서 벙커를 짓기 위해선 배럭이 필요하다.이렇게 어떠한 작업을 하기 위해 반드시 선행되어야만 하는 일이 있을 때, 이것을 위상이라 보면 된다.즉, 위상 정렬은 어떤 노드로 이동하기 위해 필요한 위상들을 정렬시키는 것과 같다.그러면 이 문제를 위상 정렬에 빗대어 재해석해보자.목표는 모든 건물들이 완성되는 &#x27;최소 시간&#x27; 이므로 1. 위상을 먼저 구한 다음2. 정렬하면서 최소 시간으.......]]></description>
					<pubDate>Thu, 18 Apr 2019 17:55:29 +0900</pubDate>
					<tag><![CDATA[boj,algorithm,ps,위상정렬,topologicalsort]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[참여 세미나/해커톤]]></category>
					<title><![CDATA[네이버 테크 콘서트(FRONT END) 갔다왔다]]></title>
					<link>http://1ilsang.blog.me/221511724504</link>
					<guid>http://1ilsang.blog.me/221511724504</guid>
					<description><![CDATA[백엔드를 목표로 개발하고 있긴 한데 옛생각도나서 프론트 테크콘을 지원했다.흑흑 갓갓들이 많이 보여서 쭈구리 상태였다. 나도 잘해져서 발표하고싶다.전반적으로 마음에 들었다.그 중 웹 개발 트랜드, 데이터 상태 관리, FE 성능 분석은 공감도 많이 되고 실질적인 내용이라 더더 좋았다.그럼 이만!]]></description>
					<pubDate>Fri, 12 Apr 2019 09:39:37 +0900</pubDate>
					<tag><![CDATA[네이버,front,frontend]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[OperatingSystem]]></category>
					<title><![CDATA[실습과 그림으로 배우는 리눅스 구조 리뷰]]></title>
					<link>http://1ilsang.blog.me/221510157603</link>
					<guid>http://1ilsang.blog.me/221510157603</guid>
					<description><![CDATA[실습과 그림으로 배우는 리눅스 구조 리뷰면접 준비겸 운영체제를 해야겠다고 생각을 많이 했는데 좋은 책을 받아 리뷰해 보려고 한다.내가 이 책을 선택한 이유는 아래와 같다.1. 책이 가볍다.이거 별거 아닌거 같은데 진짜 중요하다. 이 책 진짜 가볍다. 동일 페이지의 다른 책보다 후럽배 가벼운덧2. 소제목이 인상적이었다.&#x27;개발자가 알아야하는 OS와 하드웨어의 기초&#x27;내가 가장 원했던 내용이었다.운영체제 기초를 빠르게 돌아보고 싶었고 하드웨어 기초를 보고 싶었다.우ㅖ냐면 난 허접이니까 ㅎ.ㅎ;;책은 전반적으로 매우 친절하다고 생각한다.그 이유는 과정을 모두 보여주고, 복잡한 스크립팅이 없다........]]></description>
					<pubDate>Wed, 10 Apr 2019 13:30:00 +0900</pubDate>
					<tag><![CDATA[리눅스,리뷰,책]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 3109. 빵집 - DFS]]></title>
					<link>http://1ilsang.blog.me/221506048119</link>
					<guid>http://1ilsang.blog.me/221506048119</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/3109처음에 너무 어렵게 접근해서 고통받았던 문제.이거 잘 생각해보면 이미 지나간놈을 다시 지나갈 이유가 전혀 없다(백트래킹 할 필요도 없다는 것)파이프 개수가 최대가 되는게 목표인데 이렇게 하기 위해선 제일 왼쪽위에놈이 제일 오른쪽 위로 가야 이상적이다.그러므로 DFS 를 들어가면서 대각선위 - 오른쪽 - 대각선아래 순으로 쭉쭉 들어가면 그게 최선이 된다.(그리디 적으로 생각해 보자)return 문의 중요성을 보여준 DFS 였다.그럼 이만!https://github.com/1ilsang]]></description>
					<pubDate>Fri, 05 Apr 2019 10:26:31 +0900</pubDate>
					<tag><![CDATA[dfs,algorithm,boj,ps]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 15961. 회전 초밥 - 슬라이딩 윈도우]]></title>
					<link>http://1ilsang.blog.me/221505885296</link>
					<guid>http://1ilsang.blog.me/221505885296</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/15961요즘 숏코드에 맛들렸는데 이 문제 풀면서 전위/후위 까지 다뤄서 너무 좋았다.너무 재밌는 문제였당 ㅎㅎ조건은 단순한데, 쿠폰으로 먹을 수 있는게 하나 있고k 개 만큼 연속으로 먹었을 때 쿠폰까지 합해서 먹을 수 있는 가장 최대 가지수를 출력하면 된다.Hash 인가? 고민했는데 그냥 덱을 쓰면 된다.근데 덱까지도 갈 필요없다. 그냥 카운팅 배열 하나 만들어서 인덱스에 해당하는 값을 ++ -- 만 해주면 푸는 문제.슬라이딩 윈도우 치면서 마지막값, 새로운 값 만 갱신하면 된다.다만 주의할 점은 &#x27;회전&#x27; 초밥이므로 n을 넘어가 다시 0~k-1까지 온다는 점이다.이 경우 때문에 i .......]]></description>
					<pubDate>Fri, 05 Apr 2019 01:58:11 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,slidingwindow]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[JUNGOL] 1733. 오목 - 완전탐색]]></title>
					<link>http://1ilsang.blog.me/221504305725</link>
					<guid>http://1ilsang.blog.me/221504305725</guid>
					<description><![CDATA[http://www.jungol.co.kr/bbs/board.php?bo_table&#x3D;pbank&amp;wr_id&#x3D;1006&amp;sca&#x3D;2040그냥 오목이 된게 누군지 찾는 문제.다만 여기서 조금 까다로운 부분이 5개 이상이 연속되어 있는 경우다.무조건 5개여야만하고 5개 이상이 연속되면 승리로 쳐주지 않는다 -_-;그래서 8방향(상하좌우대각선) 모두 탐색하면서 들어갈 때마다 링크드리스트에 좌표를 넣어주고무조건 5개일때만 정렬해서 값을 출력하도록 했다.체크배열을 3차원으로 디렉션을 넣어주었는데 그래야만 불필요한 접근을 막을 수 있다.그럼 이만!https://github.com/1ilsang]]></description>
					<pubDate>Wed, 03 Apr 2019 11:28:49 +0900</pubDate>
					<tag><![CDATA[jungol,ps,algorithm,bruteforce,brute]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 7785. 회사에 있는 사람 - Hash (체이닝 해쉬 구현)]]></title>
					<link>http://1ilsang.blog.me/221502915637</link>
					<guid>http://1ilsang.blog.me/221502915637</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/7785Map 을 쓰면 굉장히 쉬운 문제인데 해쉬 공부하는겸 직접 구현해 보았다.하면서 해쉬를 많이 이해하게 된듯...해쉬 체이닝 구현하면서 내가 느낀건 링크드 리스트와 그냥 똑같다는 점이다.애초에 그런 식으로 링크를 걸어가니 같을수밖에 없지만...자료구조 중에서도 특히 링크드 리스트를 정말 잘 다뤄야 하는거 같다.어려웠따.https://github.com/1ilsang]]></description>
					<pubDate>Mon, 01 Apr 2019 18:58:35 +0900</pubDate>
					<tag><![CDATA[boj,algorithm,ps,hash]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1786. 찾기 - 라빈카프 + 해쉬 and KMP]]></title>
					<link>http://1ilsang.blog.me/221502910608</link>
					<guid>http://1ilsang.blog.me/221502910608</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/1786BOJ 1786. 찾기 - 라빈카프 + 해쉬 and KMP꼭 해쉬와 문자열을 짚고 싶었는데 이번 기회에 해쉬를 직접 구현하면서 많은 것을 배울 수 있었다.링크드 리스트는 모든 구현의 초석인듯..이 코드는 해쉬를 직접 구현한 라빈카프 이건 KMP 버전.진심 KMP 는 다시 제대로 정리해야겠다. 굉장히 혼란이었다...고통 그자체였다문자열 조금씩 푸니까 접근할 수 있는 문제들이 확 늘어나고 있는 느낌이다.보이어 무어까지 쭉 달려야지!!!그럼 E만https://github.com/1ilsang]]></description>
					<pubDate>Mon, 01 Apr 2019 18:51:58 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,rabinkarp,hash,kmp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 12791. Startman - Hash (체이닝 해쉬 직접 구현)]]></title>
					<link>http://1ilsang.blog.me/221502800659</link>
					<guid>http://1ilsang.blog.me/221502800659</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/12791BOJ 12791. Startman - Hash (체이닝 해쉬 직접 구현)해쉬를 사용하면 쉽게 풀 수 있는 문제다.나는 이참에 해쉬를 직접 구현해 보려고 했다.Hash 코드는 31씩(원시소수) 곱해주며 1e6 + 9 로 모듈러 해준다.여기서 1e6 + 9 는 버킷의 사이즈와 동일하다.물론 이 문제에선 인트형 귀찮아서 해쉬코드 안쓰고 바로 키값에 박아버렸다.키 값이 중복되는 경우가 있으므로(해쉬 충돌이라 생각하면 된다)이땐 새로운 Node 를 만들어 체인(next)을 걸어주면 된다.링크드 리스트 구현과 동일하기 때문에 큰 무리 없을거라 생각한다.그럼 이만 !]]></description>
					<pubDate>Mon, 01 Apr 2019 16:51:56 +0900</pubDate>
					<tag><![CDATA[hash,boj,algorithm,ps]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[삼성 SSAFY]]></category>
					<title><![CDATA[SSAFY MeetUp]]></title>
					<link>http://1ilsang.blog.me/221501830817</link>
					<guid>http://1ilsang.blog.me/221501830817</guid>
					<description><![CDATA[오늘 알고리즘 시험을 보고 싸피데이를 했다.MC로 개그맨 안상태씨가 오셨다. 성격이 정말 좋으신듯하다.경품 준다길래 맥북까지들고 찍었는데 역시 나는 안됐다.맥북들고 찍어서 그런가!!!!???!스티커가 귀여웠다.그리고 제도샤프가 들어있는 필통 좀 맘에든다.강연 3개하고 시상을 했는데A+ 받은 인원들 시상을 했다.대표로 가장 빨리 푼 기인이가 받았다. 아주자랑스러워그리고 사실 오늘 포스팅의 메인이다.싸피에서 클래식이라니?? 라고 생각했는데 진짜 여태 있었던 모든 강연중 최고였다.클래식 음악을 소개하며 잘못 알려진 사실과 생애시절 등을 잠깐 소개하고 연주해주셨는데구성 방식이나 재미있는 이.......]]></description>
					<pubDate>Sun, 31 Mar 2019 13:46:54 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[사람같이살기]]></category>
					<title><![CDATA[0329]]></title>
					<link>http://1ilsang.blog.me/221500790683</link>
					<guid>http://1ilsang.blog.me/221500790683</guid>
					<description><![CDATA[오늘은 헬스장을 등록하고ㅡ 책을 삿다.팔굽혀펴기랑 턱걸이 했는데 진짜 ㄹㅇㅋㅋ 첫날이라 신나서 했더니 팔 나갈꺼같다끝나고 뼈해장국먹었는데 진짜 존맛이었따.이맛에 운동하는거같다.밥먹구 바로 카페가서 영어했다ㅎㅎ이거 뭔지 기억이 안난다;; 우유+달달한거+타피오카펄 느낌이다.역삼근처에 12시까지 하는 카페가 거의 없어서 커피빈을 자주 가는데 이때까지 멤버쉽 안한거 후회했다.그래서 바로 4만원 카드 질러버림 ㅎㅎ 주말엔 공짜로 먹겠당그리고 Day2 까지 했다.생각외로 단어들이 쉬워서(중등 영어다) 빨리빨리 나갈 수 있었다.단어 외우다 드는 생각인데 지금 서블릿했으니까 https://quizlet.com/ko여기.......]]></description>
					<pubDate>Fri, 29 Mar 2019 22:11:05 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[사람같이살기]]></category>
					<title><![CDATA[사람같이살기 프로젝트 시작! + 1/4 돌아보기]]></title>
					<link>http://1ilsang.blog.me/221499758077</link>
					<guid>http://1ilsang.blog.me/221499758077</guid>
					<description><![CDATA[요즘 인생 너무 막살아서 뜻하는대로 잘 안되고 연초의 목표도 많이 흔들리는거 같아 111B를 시작하려고 한다.(111B는 매일 하루동안 작업한 달성치를 블로그에 적겠다는 것ㅎㅎㅎ)잠시 돌아보는 연초의 분노(...)와 각오연초와 비교해 보았을 때 1/4이 지난 지금 나를 돌아보자.0. SSAFY꾸준히 하고있따.개인적으로 기대보다 더 좋아서 아주 만족하는중. 알고리즘도 많이하고 자바도하고 김태희교수님 체고지각하지말자!!1. 알고리즘약 3달간 120문제 정도 풀었따.싸피 덕분에 더 열심히 풀 수 있었던거 같다. 알고리즘도 조금 더 다양히 알 수 있게 된거같다.코포도 도전했다. 근데 알고리즘 이전에 영어가 안되서 뭐 풀.......]]></description>
					<pubDate>Thu, 28 Mar 2019 18:03:24 +0900</pubDate>
					<tag><![CDATA[사람같이살기]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[물건리뷰]]></category>
					<title><![CDATA[라이크에이블에서 커플 하드케이스 를 맞췄어요! - 아이폰7 갤럭시S7]]></title>
					<link>http://1ilsang.blog.me/221499158082</link>
					<guid>http://1ilsang.blog.me/221499158082</guid>
					<description><![CDATA[라이크에이블에서 커플 하드케이스 를 맞췄어요! - 아이폰7 갤럭시S7기존에 쓰던 하드케이스가 많이 닳아서 새로운 휴대폰 하드케이스를 사려고 고민하던차여자친구와 함께 커플 하드케이스를 맞추기로 했습니다.웹 서핑을 하던 도중 라이크에이블 사이트를 만나게 되었고 우연히 레옹 하드케이스를 보게 되었습니다.보자마자 너무 예뻐서 바로 질러버림ㅋㅋ배송이 칼같아서 좋았습니다.구매하자마자 바로 받은 느낌이었습니다.어서 받고 싶었는데 너무 기분 좋았어요!!배송 문자 받구 신나서 집으로 뛰어왔습니다 ㅋ.ㅋ뒤에 지퍼백이 보이는데 지퍼백에 케이스가 담겨서 왔어요!처음엔 뭐지? 했.......]]></description>
					<pubDate>Thu, 28 Mar 2019 00:55:54 +0900</pubDate>
					<tag><![CDATA[라이크에이블핸드폰케이스,라이크에이블폰케이스,휴대폰케이스,아이폰케이스,폰케이스,핸드폰케이스,폰케이스쇼핑몰,케이스쇼핑몰,라이크에이블]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 11722. 가장 긴 감소하는 부분 수열 - DP]]></title>
					<link>http://1ilsang.blog.me/221496245689</link>
					<guid>http://1ilsang.blog.me/221496245689</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/11722BOJ 11722. 가장 긴 감소하는 부분 수열 - DPDP를 활용해서 풀면 쉬운 문제다.가장 긴 감소하는 부분 수열이므로 뒤에서부터 돌리면서 해당 위치의 DP + 1 한게 현재 DP보다 더 큰지 보고 갱신하면 된다.왜 이게 가능하냐면 지금 수보다 작은 값의 DP 값은 그 값 까지의 계산을 미리 해놓은 것이므로 + 1 만 해주면 된다.그로먼 이만!https://github.com/1ilsang/Study/]]></description>
					<pubDate>Sun, 24 Mar 2019 19:40:16 +0900</pubDate>
					<tag><![CDATA[dp,algorithm,ps,boj]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 6593. 상범 빌딩 - BFS]]></title>
					<link>http://1ilsang.blog.me/221496156548</link>
					<guid>http://1ilsang.blog.me/221496156548</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/65933차원이라 좀 어려워 보이지만 한칸씩 움직이는걸 잘 생각해보면 쉽게 풀 수 있는 문제이다.그냥 단순히 4방향 BFS 돌리던걸 위, 아래 하나씩만 더 넣어주면 되는 문제.끝!https://github.com/1ilsang/Study]]></description>
					<pubDate>Sun, 24 Mar 2019 17:10:45 +0900</pubDate>
					<tag><![CDATA[algorithm,boj,bfs,ps]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[삼성 SSAFY]]></category>
					<title><![CDATA[위메프오 포인트를 받웠워]]></title>
					<link>http://1ilsang.blog.me/221494539614</link>
					<guid>http://1ilsang.blog.me/221494539614</guid>
					<description><![CDATA[오늘 점심때 커피사러 나갔는데 픽업번호가 555 번이었다.신기하다 하고 넘어갔는디555 번 당첨으로 만원 포인트를 받았다.만원이면 무우려 아메리카노가 4잔이다신나는 하루였다.집가면서 로또사야지]]></description>
					<pubDate>Fri, 22 Mar 2019 12:21:27 +0900</pubDate>
					<tag><![CDATA[경품]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D4] 1238. [S/W 문제해결 기본] 10일차 - Contact]]></title>
					<link>http://1ilsang.blog.me/221491864280</link>
					<guid>http://1ilsang.blog.me/221491864280</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AV15B1cKAKwCFAYDSWEA D4] 1238. [S/W 문제해결 기본] 10일차 - Contact간단한 BFS이다.다만 마지막에 도달했을 때마다 갱신을 해주는게 필요한데 이거만 처리하면 되는 문제.여기서 중복에 대한 조건이 나오는데 나는 Set 으로 입력 값을 걸러주었다.들어오는 값을 String 형태로 바꾸어 비교하면 쉽게 처리할 수 있다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Tue, 19 Mar 2019 10:53:35 +0900</pubDate>
					<tag><![CDATA[bfs,set]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[삼성 SSAFY]]></category>
					<title><![CDATA[삼성전자 S/W test A형(A+) 붙웠워]]></title>
					<link>http://1ilsang.blog.me/221488889138</link>
					<guid>http://1ilsang.blog.me/221488889138</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/sst/common/userTestList.do?외부랑 같이봤는데 싸피는 같은 시간동안 한문제 더 풀었다...다음은 B형이다~]]></description>
					<pubDate>Fri, 15 Mar 2019 13:14:45 +0900</pubDate>
					<tag><![CDATA[ssafy]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[JAVA]]></category>
					<title><![CDATA[처음해보는 자바 프로그래밍 리뷰 + 생각정리]]></title>
					<link>http://1ilsang.blog.me/221484962958</link>
					<guid>http://1ilsang.blog.me/221484962958</guid>
					<description><![CDATA[오늘의 리뷰책은 처음 해보는 자바 프로그래밍이다.예전부터 루비페이퍼 책들을 좋아했는데 이번에는 조금 더 특별한거 같다.그 이유는 바로 저자가 오정임님이신것!!내가 서블릿을 처음 접할때 처음 해보는 Servlet &amp; JSP 웹 프로그래밍 책을 읽으면서 서블릿을 쉽게 이해할 수 있었다.http://1ilsang.blog.me/221017860383(당시 썻던 리뷰. 무려 2년전이다!)이때 자바 프로그래밍을 모르던 내가 바로 서블릿을 공부하면서 어려움이 많았는데 이 책 덕분에 쉽게 다가갈수 있었다.그때 기억이 매우 좋아서 루비페이퍼 관련 책들로 많이 읽었었는데 이렇게 다시 좋은 책을 만나게 되어 기쁘다.2년이나 지난 지금, 다시 기본서 &#x.......]]></description>
					<pubDate>Sun, 10 Mar 2019 21:58:56 +0900</pubDate>
					<tag><![CDATA[자바,java,자바프로그래밍,처음배우는,리뷰,책리뷰,처음해보는자바프로그래밍,책]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 16953. A → B - BFS, Set]]></title>
					<link>http://1ilsang.blog.me/221481577668</link>
					<guid>http://1ilsang.blog.me/221481577668</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/16953BOJ 16953. A → B - BFS, Set어떠한 숫자(문자열)가 목표 숫자(문자열)가 되는지 확인하는 방식의 문제들은 BFS로 쉽게 해결할 수 있다.여기서 중요한 점은 &#x27;중복&#x27;을 어떻게 제거할 것인가? 에 대한 의문인데,Set 을 활용하면 쉽게 해결할 수 있다.BFS 를 돌리면서 큐에 넣기 전에 Set 에 해당 값이 존재하는지 확인하고,있으면 그냥 넘어가고 없다면 추가한 다음 큐에 넣어주면 된다.그리고 pop 될 때 마다 해당 값이 target 과 동일한지 보면 끝.(여기서 Long 을 쓴 이유는 문제의 최대값이 10억인데, 맨 마지막에 1이 더붙을 수 있기 때문이다. ; 백억은 int를 넘어감)그럼 이만!]]></description>
					<pubDate>Wed, 06 Mar 2019 14:09:15 +0900</pubDate>
					<tag><![CDATA[algorithm,boj,ps,bfs,set,string,long]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D3] 5986. 새샘이와 세 소수 - 에라토스테네스의 체, 조합]]></title>
					<link>http://1ilsang.blog.me/221476838936</link>
					<guid>http://1ilsang.blog.me/221476838936</guid>
					<description><![CDATA[https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AWaJ3q8qV-4DFAUQSWEA D3] 5986. 새샘이와 세 소수 - 에라토스테네스의 체, 조합소수의 합이 N이 되는지 확인하는 문제다.소수는 변경되지 않으므로 맨 처음 테케를 받을때 999까지의 소수를 구해준다.이때 에라토스테네스의 체를 사용하면 훨씬 빠르게 구할 수 있다.체로 소수들을 거르고 거른 소수들을 배열에 담아준다.그 후 index 에 접근하면서 3개의 조합을 만들면 된다.이때 2+2+3 &#x3D; 72+3+2 &#x3D; 7이런 식으로 중복 조합이 생길 수 있다.중복을 제외하는 경우는 순열을 만들 때 재귀를 들어가며 현재 순열의 위치를 넘기면 해결할 수.......]]></description>
					<pubDate>Thu, 28 Feb 2019 11:44:48 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,swea,에라토스테네스의체,에라토스테네스,조합,순열,중복조합,백트래킹,backtracking]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D6] 1263. [S/W 문제해결 응용] 8일차 - 사람 네트워크2 - Dijkstra, 플로이드 워셜]]></title>
					<link>http://1ilsang.blog.me/221476247458</link>
					<guid>http://1ilsang.blog.me/221476247458</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AV18P2B6Iu8CFAZN한 노드에서 다음 노드까지의 모든 거리를 구하고그 값들의 합이 가장 적은 값을 출력하면 되는 문제다.1. 다익스트라로 N번 노드만큼 돌리거나2. 플로이드 워셜로 N^3 만큼 돌려 푼다.플로이드는 시간이 오래 걸리지만 코드가 매우 간단해 알아두면 편하다.1. 다익스트라2. 플로이드 워셜플로이드의 경우 n^3 으로 모든 경우를 탐색한다.시간복잡도는 큰 손해를 보지만 코드가 짧고 음수를 해결할 수 있으므로 빠르게 풀어야할 때 쓰면 좋을것 같다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Wed, 27 Feb 2019 17:25:02 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,swea,floyd,floydwarshall,dijkstra,graph]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D6] 1257. [S/W 문제해결 응용] 6일차 - K번째 문자열 - Suffix Array, LCP]]></title>
					<link>http://1ilsang.blog.me/221475165220</link>
					<guid>http://1ilsang.blog.me/221475165220</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AV18KWf6ItECFAZNSWEA D6] 1257. [S/W 문제해결 응용] 6일차 - K번째 문자열이 문제는 단순하게 Set 을 사용해 모든 부분집합을 추가하고 정렬시킨뒤 k 번째 값을 출력하는 것으로 마무리 할 수도 있다.하지만 이번 기회에 Suffix Array 와 LCP (최장 공통 부분 문자열)를 정리해보자 싶어 해당 방법으로 풀었다.우선 Suffix Array (접미사 배열)을 만들어 준다.food 를 예로 보면 아래와 같이 된다.food, ood, od, d 이렇게 접미사 4개가 존재하게 된다.(food 의 length 만큼 생긴것을 확인)얘네들을 사전순으로 정렬하게 되면 아래와 같이 된다.......]]></description>
					<pubDate>Tue, 26 Feb 2019 14:19:46 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,suffixarray,suffix,lcp,최장공통부분문자열]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 9205. 맥주 마시면서 걸어가기 - BFS]]></title>
					<link>http://1ilsang.blog.me/221471480791</link>
					<guid>http://1ilsang.blog.me/221471480791</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/9205BOJ 9205. 맥주 마시면서 걸어가기 - BFS점 사이의 거리가 1000 인 애들을 BFS 로 돌아서 마지막 지점에 도달하는지 확인하면 된다.1. 모든 점들의 거리를 구해놓고2. 0번째(상근이 집) 부터 BFS 를 들어간다.3. 0번째부터 n+2번째까지 모두 돌면서 그 거리가 1000 안이면 큐에 넣어준다.4. BFS 돌리면서 pop 되는 애가 n + 1이 되는지(락 페스티벌 주소) 확인한다.5. 락 페스티벌까지 도달하면 happy 안되면 sad 출력끝.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Thu, 21 Feb 2019 17:28:37 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bfs]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[먹방]]></category>
					<title><![CDATA[광저우 가볼만한곳 맛집 거대숯불구이!]]></title>
					<link>http://1ilsang.blog.me/221470365002</link>
					<guid>http://1ilsang.blog.me/221470365002</guid>
					<description><![CDATA[광저우 가볼만한곳 맛집 거대숯불구이!안녕하세요!오늘은 광저우에 위치한 거대숯불구이 맛집을 소개해보려고 합니다.거대숯불구이 는 광저우 맛집으로 가볼만한곳 순위에 드는 굉장히 맛있는 집입니다 ㅠㅠ가게 이름이 &#x27;거대숯불구이&#x27; 입니다.ㅋㅋ아직도 기억에 강하게 남아있어 리뷰를 하려고 많이 생각하고 있었는데이번 기회에 리뷰하게 되어 굉장히 기분이 좋네요!!먼저 식당의 내부부터 볼껀데요, 광저우 가볼만한곳 거대숯불구이는 낮과 밤 모두 독특하고 세련된 분위기를 보여주고 있습니다.가족단위의 좌석 뿐만 아니라 단체석 또한 준비되어 있습니다.가게가 탁 트여서 답답하지도 않고 분위기가 너무 좋아남녀.......]]></description>
					<pubDate>Wed, 20 Feb 2019 13:02:34 +0900</pubDate>
					<tag><![CDATA[광저우,광저우가볼만한곳,맛집,거대숯불구이,갈비,광저우맛집]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D4] 1251. 하나로 - kruskal, union-find]]></title>
					<link>http://1ilsang.blog.me/221470205431</link>
					<guid>http://1ilsang.blog.me/221470205431</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AV15StKqAQkCFAYDSWEA D4] 1251. 하나로 - kruskal, union-find간선을 찾고 그 간선 비용의 최소값을 구하는 문제이다.프림 혹은 크루스칼을 사용하면 되는데 나는 크루스칼을 사용했다.크루스칼의 작동 방식은 위와 같다. 간선들의 집합에서 그 비용이 가장 작은 간선부터 선택해 그래프를 완성해 나간다.이때 이 부분이 중요한데, 가장 작은 가중치의 간선들을 선택하면서 이 간선을 선택할 경우 &#x27;사이클&#x27;이 되는지 꼭 확인해야한다.그리고 이 간선이 사이클이 되는지 찾고, 안된다면 트리에 추가해주는게 Union-find 알고리즘이다.서로.......]]></description>
					<pubDate>Wed, 20 Feb 2019 09:41:18 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,swea,kruskal,union,find,disjointset]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 3876. sed 이용 - BFS, Map]]></title>
					<link>http://1ilsang.blog.me/221463846212</link>
					<guid>http://1ilsang.blog.me/221463846212</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/3876나는 1. 바꿀 수 있는 패턴들을 map 에 넣고2. BFS를 돌린다.(시작 문자열을 맨 처음 넣는다)3. map 을 순회하면서4. 순회해서 나온 엘리멘트로 시작 문자열을 replace 한다.5. replace 된 문자열이 chk map 에 속해있는지 확인한다.6. chk map 에 contain 되어있지 않으면7. 큐에 넣는다.반복.이렇게 하다 목표 문자열을 만나면 이때까지 지나오면서 + 1 해준 p 값을 출력하고만나지 못하면 -1 을 출력하면 된다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Tue, 12 Feb 2019 12:47:07 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bfs,map,hashmap]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1938. 통나무 옮기기 - BFS]]></title>
					<link>http://1ilsang.blog.me/221462911169</link>
					<guid>http://1ilsang.blog.me/221462911169</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/1938통나무를 옮기는데 여러 조건들이 있다.조건을 잘 따라가며 처리하면 된다.여기서 핵심적인 부분은 &#x27;회전&#x27; 이다.BFS 를 돌리면서 회전할수 있는지 확인하고, 회전할 수 있다면 회전한 상태로 큐에 넣어주면 된다.이때 방문을 확인하는 chk 배열은 [행][열][방향] 의 3차원으로 두어 방향(가로, 세로)마다 따로 방문체크를 해주면 되는 문제다.나는 통나무에 해당하는 3개의 좌표를 기억하지 않고 그냥 중심점만 기억해서 처리해 주었다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Mon, 11 Feb 2019 11:51:57 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bfs]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[SWEA D3] 5607. [Professional] 조합 - 페르마의 소정리]]></title>
					<link>http://1ilsang.blog.me/221461026692</link>
					<guid>http://1ilsang.blog.me/221461026692</guid>
					<description><![CDATA[https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId&#x3D;AWXGKdbqczEDFAUoSWEA D3] 5607. [Professional] 조합 - 페르마의 소정리조합으로 풀면 된다는건 알겠는데 수가 무려 100만이다.그러므로 스마트한 방식으로 문제를 풀어야 한다.여기서 필요한게 페르마의 소정리이다.여기서 중요한 점은 a^(p-1) &#x3D; 1 (mod p) 라는 점이다.일단 이걸 짚어두고 조합식을 봐보자.nCr &#x3D; n! / r!(n-r)! 이다.여기서 나누기는 MOD 연산이 안된다. 그러므로 곱하기로 변경해야하는데1/r!(n-r)! 는 (r!(n-r)!)^-1 과 동일하다.그러므로 (r!(n-r)!) 를 a 로 두고 페르마식을 다시 돌아보자.a^(p-1) &#x3D; 1.......]]></description>
					<pubDate>Fri, 08 Feb 2019 17:20:36 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,swea,조합,permat,페르마의소정리]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1915. 가장 큰 정사각형 - DP]]></title>
					<link>http://1ilsang.blog.me/221459856997</link>
					<guid>http://1ilsang.blog.me/221459856997</guid>
					<description><![CDATA[BOJ 1915. 가장 큰 정사각형 - DPhttps://www.acmicpc.net/problem/1915처음에는 n, m 중 작은 값을 찾아 그 값부터 정사각형을 모두 비교하는 식으로 했다가 시간초과가 났다.정사각형을 체크할 때 가장 큰 정사각형은 결국 그 정사각형 안에 정사각형이 존재하는 꼴이 되므로 dp 로 풀수 있다.(큰 정사각형 안의 작은 정사각형은 굳이 체크해주지 않아도 되기 때문에)위의 점화식이 핵심이다.위와 같은 표가 있다면 점화식으로 접근하면 아래와 같이 변하게 된다.즉 길이가 2인 정사각형이 최대가 된다는 뜻이 된다.(이전의 값들 중 정사각형이 될 수 있는 좌표 - 왼쪽, 위, 대각선왼쪽 는 3개가 전부이기 때문이다.)그럼 이만!https://git.......]]></description>
					<pubDate>Thu, 07 Feb 2019 11:10:26 +0900</pubDate>
					<tag><![CDATA[java,algorithm,ps,boj,dp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 2589. 보물섬 - BFS]]></title>
					<link>http://1ilsang.blog.me/221458968197</link>
					<guid>http://1ilsang.blog.me/221458968197</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/2589BFS 돌리면서 가장 큰 값만 찾으면 되는 문제다.그럼 이만!https://github.com/1ilsang/Study/tree/master/Algorithm]]></description>
					<pubDate>Tue, 05 Feb 2019 21:37:55 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bfs]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[자바 채팅 어플]]></category>
					<title><![CDATA[자바 어플을 만들었워]]></title>
					<link>http://1ilsang.blog.me/221458407029</link>
					<guid>http://1ilsang.blog.me/221458407029</guid>
					<description><![CDATA[https://github.com/1ilsang/java-mvc-chatting]]></description>
					<pubDate>Mon, 04 Feb 2019 17:56:55 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[OUTPUT]]></category>
					<title><![CDATA[자바 채팅 어플을 만들었다.]]></title>
					<link>http://1ilsang.blog.me/221458406496</link>
					<guid>http://1ilsang.blog.me/221458406496</guid>
					<description><![CDATA[코드 및 자세한 설명은 깃헙에 있습니다.https://github.com/1ilsang/java-mvc-chatting]]></description>
					<pubDate>Mon, 04 Feb 2019 17:55:37 +0900</pubDate>
					<tag><![CDATA[java,chatting,thread,awt]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[OUTPUT]]></category>
					<title><![CDATA[헉스 이달의 블로그 선정]]></title>
					<link>http://1ilsang.blog.me/221457497687</link>
					<guid>http://1ilsang.blog.me/221457497687</guid>
					<description><![CDATA[오랜만에 포스팅하러 들어왔는데 이달의 블로그에 소개되었다.이런거 처음이야...당황해서 바로 접속해봤다.알고리즘 태그가 많은데 ㄷㄷ ㄹㅇ허접이라 부끄럽다.요즘 자바 채팅 어플 만드느라 정신없어서 블로그에 글을 많이 못썻는데 다시 열심히 해야겠다.다음 포스팅은 그동안 만든 자바 채팅어플을 소개하겠다.그럼 이만!]]></description>
					<pubDate>Sun, 03 Feb 2019 01:00:14 +0900</pubDate>
					<tag><![CDATA[이달의블로그]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Unix / Linux]]></category>
					<title><![CDATA[이것이 Fedora 리눅스다 리뷰]]></title>
					<link>http://1ilsang.blog.me/221457395768</link>
					<guid>http://1ilsang.blog.me/221457395768</guid>
					<description><![CDATA[이것이 Fedora 리눅스다 리뷰요즘 GCP로 서버를 띄우면서 도커와 리눅스 환경에 관심이 많아졌다.그러던중 이것이 Fedora 리눅스다 책을 보게 되어 재밌게 읽을 수 있었다.개인적으로 느끼는 거지만 &#x27;이것이&#x27; 시리즈 표지가 프라모델 그림인게 항상 마음에 든다.내가 느낀 이 책은 정말 친절하다 였다.혹시모를 오류에 대비해 여러 방향의 가이드를 제시해주고 다양한 오류를 어떻게 파헤쳐 나가는지 알려준다.또한 그림과 콘솔화면의 적절한 분배로 흐름을 잃지 않고 따라갈 수 있었다.초보자도 큰 어려움 없이 리눅스 환경을 접할 수 있고 천천히 따라갈 수 있다.리눅스 환경을 처음 접하거나, 깊게 알아보려는 분들.......]]></description>
					<pubDate>Sat, 02 Feb 2019 21:59:05 +0900</pubDate>
					<tag><![CDATA[]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1764. 듣보잡 - Set, 정렬]]></title>
					<link>http://1ilsang.blog.me/221450009809</link>
					<guid>http://1ilsang.blog.me/221450009809</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/1764문자열 처리랑 set, sort 사용만 할줄 알면 쉽게 풀 수 있는 문제이다.따로 할 말이 없당...Set. Collections.sort, ArrayList 사용법만 알면 된다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Thu, 24 Jan 2019 15:22:27 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,java,set,collection,arraylist,sort]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 11723. 집합 - 비트마스크]]></title>
					<link>http://1ilsang.blog.me/221446095017</link>
					<guid>http://1ilsang.blog.me/221446095017</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/11723BOJ 11723. 집합 - 비트마스크문제의 요구조건만 채우면 되는 쉬운 문제... 라고 생각했는데 연산의 수가 3백만이라 어떻게할까 고민했던 문제이다.정답은 비트마스크!보면 x 가 20 보다 작으므로 충분히 비트마스크로 가능하다.각 자리수를 키로 잡아 해결하면 된다.나는 0을 계산하기 싫어서 n - 1 을 계속 해줬다.위의 표에 1이 뜻하는 것이 무엇일까?7, 5, 3, 1 의 수가 존재하는 집합을 의미한다.이렇게 각 자리수에 1 혹은 0 을 통해 존재유무를 표시하고 비트연산으로 쉽게 처리하면 된다.만약 1이라는 수가 있는지 궁금하다면 쉬프트 연산으로 1 만큼 이동해 1이 존재하는지 본다( &amp;.......]]></description>
					<pubDate>Sat, 19 Jan 2019 19:50:23 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bitmask]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[1327. 소트 게임 - BFS, Set]]></title>
					<link>http://1ilsang.blog.me/221445986259</link>
					<guid>http://1ilsang.blog.me/221445986259</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/13271327. 소트 게임 - BFS, Set어떻게 접근하지 싶었는데 숫자를 하나의 노드로 보고 BFS 를 돌리면 쉽게 풀 수 있다.어짜피 N 이 8이기 때문에 그냥 완전탐색으로 돌려버려도 된다.만약 54321 이 주어지고 K가 3 이라고 한다면34521, 52341, 54123 으로 BFS 를 들어가고( i &#x3D; 0부터 i &lt;&#x3D; str.size() - k 까지)34521 에서 다시54321, 3251, 34125 를 BFS 들어가는 식으로 반복하면 된다.(이때 54321의 경우 이전에 방문했으므로 다시 들어가지 않으므로 자연스럽게 배제된다)그렇다면 54321을 이전에 방문했는지는 어떻게 알 수 있을까?Set 자료형을 사용하면 된다. 셋의 경우 중복된 키값.......]]></description>
					<pubDate>Sat, 19 Jan 2019 16:36:29 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bfs,set]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 16235. 나무 재테크 - 삼성 기출]]></title>
					<link>http://1ilsang.blog.me/221444955903</link>
					<guid>http://1ilsang.blog.me/221444955903</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/16235BOJ 16235. 나무 재테크 - 삼성 기출문제가 잘 이해 안됐던 문제.문제의 요구대로 풀면 맞출 수 있는 문제다.자꾸 틀려서 뭐가 틀려서 뭐가 틀렸는지 몰랐는데 x, y, z 에서 x, y 가 뒤집어지는게 아니다.이런 짜잘한 부분으로 틀리는거 너무 화난다.핵심은 봄/여름 을 합친다는 것과 vector 를 잘 활용하는 것이다.2차원 배열에서 각 좌표의 값이 여러개가 존재해야할 때 vector&lt;int&gt; v[R][C] 로 쉽게 구현할 수 있다.또한 봄/여름의 경우 잘 생각해보면 어짜피 봄에 양분을 먹지 못한애들은 다 죽고 죽은 애들이 여름에 양분이 된다.그러므로 이 작업을 하나로 합쳐서 한방에 처리하는게.......]]></description>
					<pubDate>Fri, 18 Jan 2019 10:08:13 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,simulation]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 1194. 달이 차오른다, 가자. - 비트마스크]]></title>
					<link>http://1ilsang.blog.me/221442344756</link>
					<guid>http://1ilsang.blog.me/221442344756</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/1194BOJ 1194. 달이 차오른다, 가자. - 비트마스킹http://1ilsang.blog.me/221419824897이 문제는 벽 부수고 이동하기의 진화버전인거 같다.키가 여러개가 존재하고 키에 해당하는 문도 여러개가 존재한다.각 키(a to f)를 비트연산으로 체크해준다 1 &lt;&lt; 7 이므로 최대 128이므로 충분히 가능하다.여기서 각 비트를 키를 가지고 있냐 없냐로 보면 된다.0000001 의 경우 f 키를 가지고 있고1000001 는 a 와 f 를 가지고 있는 것이다.비트로 가지고 있는 키 정보를 chk 배열의 3번째로 넣고 방문할때마다 키가 있는지 체크해주면 된다.1에 도착했다면 바로 끝내주면 끝.여기서 nk 부분을 처리해.......]]></description>
					<pubDate>Tue, 15 Jan 2019 10:18:26 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,bitmask]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[코포에 처음으로 도전해봤다.]]></title>
					<link>http://1ilsang.blog.me/221439627104</link>
					<guid>http://1ilsang.blog.me/221439627104</guid>
					<description><![CDATA[신년 계획중에 있었던 삼성B형과 코포 파랑. ㄷㄷ요즘 백준을 열심히 풀다보니 나도 초록색 달아보고 싶어서 무작정 코포에 도전했다.div3 가 제일 쉬운건데 한문제밖에 못풀었다.. -_-;영어를 못해서... 라고 하기엔 너무 에바참치 나는 구데기다ㅠㅠㅠzz; 한문제만 더 맞았어도 민트였을텐데 구데기다ㄹㅇ그리고 300문제도 넘었다!!근데 제대로 아는게 없다ㅎㅎㅎ열심히 풀어야지...ㅋㅋ백준아이디 신난다~그럼 이만!]]></description>
					<pubDate>Fri, 11 Jan 2019 15:10:19 +0900</pubDate>
					<tag><![CDATA[코드포스]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[소설 / 독후감]]></category>
					<title><![CDATA[IT 트렌드 스페셜 리포트 2019 리뷰]]></title>
					<link>http://1ilsang.blog.me/221438771773</link>
					<guid>http://1ilsang.blog.me/221438771773</guid>
					<description><![CDATA[2019 년 트렌드를 알고자 IT 트렌드 스페셜 리포트 2019 를 구매했다.이 책은 시리즈로 매년 나오고 있다.한 해의 시작겸 구매해봤는데 여러 재미있는 내용들을 다뤄서 흥미로웠다.이건 별개지만 책 표지가 너무 깔끔해서 좋았다. ㅋㅋ 책은 이런이런게 있다 식으로 겉핥기가 아닌 꽤 깊이있게 설명한다.물론 전공서보단 얕지만 핵심적인 내용들을 수록하고 있어서 해당 분야에 관심있는 전공자, 이제 시작해보려는 입문자 등모두에게 괜찮은 내용이다.나는 내가 하는 백엔드 분야와 연결하면서 봤다.또한 내 분야를 넘어 다른 IT 트랜드를 알 수 있어서 좋았다.아래는 목차이다.나는 5G 와 대화형 플랫폼, 블록체인이 흥미로.......]]></description>
					<pubDate>Thu, 10 Jan 2019 15:05:01 +0900</pubDate>
					<tag><![CDATA[it]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 12865. 평범한 배낭 - knap-sack, DP]]></title>
					<link>http://1ilsang.blog.me/221438509136</link>
					<guid>http://1ilsang.blog.me/221438509136</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/12865BOJ 12865. 평범한 배낭 - knap-sack, DP배낭문제의 정석이다.나는 2차원 배열을 좀 더 효율적으로 쓰기 위해서 토글방식으로 dp 를 세웠다.배낭에 대한 설명은 위의 깃블로그에 자세하게 설명되어 있다.2, 3, 5 의 무게를 가진 3가지 물건이 있다고 했을 때,i 를 배낭의 최대 무게인 k 까지 돌린다.이때 각 i 마다 2를 먼저 넣고, 그 다음에 3을 넣고, 그 다음에 5를 넣는 방식으로 2차원 dp 테이블을 채우면 마지막이 답이 된다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Thu, 10 Jan 2019 09:38:10 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,knapsck,dp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 2210. 숫자판 점프 - Backtracking, Set]]></title>
					<link>http://1ilsang.blog.me/221437086301</link>
					<guid>http://1ilsang.blog.me/221437086301</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/2210BOJ 2210. 숫자판 점프 - Backtracking, Set1. DFS를 돌리면서 들어간다.2. 깊이가 6이 되면3. 지금까지의 값을 set 에 넣어준다.4. set의 사이즈를 출력.set 의 경우 중복이 없는 자료구조기 때문에 set에 중복된 값이 들어가면 알아서 없애준다.기존에는 벡터에 넣어서 size 가 6이 되면 처리했는데 생각해보니 깊이를 들어갈 때마다 10 씩 곱해주면 알아서 6자리가 된다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Tue, 08 Jan 2019 15:19:40 +0900</pubDate>
					<tag><![CDATA[boj,algorithm,ps,backtracking,set]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author></author>
					<category><![CDATA[Algorithm]]></category>
					<title><![CDATA[BOJ 2146. 다리 만들기 - DFS, BFS 동시에]]></title>
					<link>http://1ilsang.blog.me/221436934491</link>
					<guid>http://1ilsang.blog.me/221436934491</guid>
					<description><![CDATA[https://www.acmicpc.net/problem/2146BOJ 2146. 다리 만들기 - DFS, BFS 동시에DFS를 돌리면서 섬의 경계부분에 있는(0과 만나는) 좌표를 큐에 넣어준다.그 후 BFS 돌리면서 가장 먼저 다른 섬의 경계(1)을 만나는 최소 값을 갱신해 준다.그렇게 3섬을 반복해주면 최소 값을 구할 수 있다.그럼 이만!https://github.com/1ilsang/Study]]></description>
					<pubDate>Tue, 08 Jan 2019 12:11:50 +0900</pubDate>
					<tag><![CDATA[algorithm,ps,boj,dfs,bfs]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
