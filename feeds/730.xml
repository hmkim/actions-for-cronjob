<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by 이재호 on Medium]]></title>
        <description><![CDATA[Stories by 이재호 on Medium]]></description>
        <link>https://medium.com/@mini.chicken.dev?source=rss-f7bcdd6ea4d2------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*0kvkuCzHBSc3gkE9en29nQ@2x.jpeg</url>
            <title>Stories by 이재호 on Medium</title>
            <link>https://medium.com/@mini.chicken.dev?source=rss-f7bcdd6ea4d2------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 13 May 2019 23:42:34 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@mini.chicken.dev" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[could i translate this post to korean?]]></title>
            <link>https://medium.com/@mini.chicken.dev/could-i-translate-this-post-to-korean-626d35833723?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/626d35833723</guid>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Thu, 19 Jul 2018 23:23:40 GMT</pubDate>
            <atom:updated>2018-07-19T23:23:40.266Z</atom:updated>
            <content:encoded><![CDATA[<p>could i translate this post to korean?</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=626d35833723" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TypeScript 시작하기]]></title>
            <link>https://medium.com/@mini.chicken.dev/typescript-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-d060b64cbcd9?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/d060b64cbcd9</guid>
            <category><![CDATA[vscode]]></category>
            <category><![CDATA[typescript]]></category>
            <category><![CDATA[nodejs]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Sat, 30 Jun 2018 18:20:05 GMT</pubDate>
            <atom:updated>2018-06-30T18:22:33.556Z</atom:updated>
            <content:encoded><![CDATA[<p>TypeScript는 MicroSoft에서 개발하며 유지보수 하는 오픈소스 프로그래밍 언어이다.</p><p>기본적으로 JavaScript의 슈퍼셋인언어이다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/546/1*-tW_05R0NQd3C3UJxTpQ9g.png" /><figcaption>TypeScript Diagram</figcaption></figure><p>기존 JavaScript에서는 Type 미지원으로 인하여 잦은 오타 및 개발자가 parameter나 Type을 혼돈하는 경우가 많았다.</p><p>코드 어시스턴트나 Type을 지원함으로써 개발자의 실수와 Type오류를 줄였다.</p><h3>개발환경 설정하기</h3><p>TypeScript는 MicroSoft에서 개발하다보니 MicroSoft사의 VSCode에서 많은 지원을 해준다. 또 VSCode는 많은플렛폼(Mac, Windows, Linux)를 지원한다.</p><p>설치는 <a href="https://code.visualstudio.com/">이곳</a>에서 다운로드 받는다.</p><p>TypeScript로 개발을 하기 위해서는 <a href="https://nodejs.org/ko/">NodeJS</a>가 설치되어 있어야 한다.</p><blockquote>$ npm install -g typescript</blockquote><p>로 TypeScript 컴파일러를 설치한다. 이후 명령어는 <strong>tsc</strong>다.</p><blockquote>$ mkdir &lt;project-name&gt;</blockquote><blockquote>$ npm init</blockquote><blockquote>$ tsc — init</blockquote><p>이와 같이 프로젝트를 생성하면 package.json과 tsconfig.json이 생성될것이다.</p><p>tsconfig.json을 다음과 같이 수정한다</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/441/1*_3J-3r7BrKbS6mxWz3htLQ.png" /><figcaption>tsconfig.json 설정</figcaption></figure><p>compilerOptions의 tartget은 javascript로 변환할때의 ECMA 버전이다.</p><p>module은 JavaScript에서 범용적인 사용을 위해 모듈화를 할때 사용되는 방식을 명시하는것 인데 AMD/CommonJS가 대표적이다. 자세한건 <a href="https://d2.naver.com/helloworld/12864">여기</a>에서</p><p>sourceMap은 디버그가 가능하도록해주는 SourceMap을 생성여부이다.</p><p>outDir은 컴파일된 파일의 위치를 지정한다. 없으면 기본적으로 ts파일과 동일한 디렉토리에 컴파일된 파일이 생성된다.</p><p>include는 ts파일의 범위를 지정한다. 예로 node_modules와 같은 디렉토리는 컴파일 할 필요가 없고 컴파일시 매우 느리게 된다.</p><p>이제 소스폴더를 만들고 예제를 돌려보자!!</p><blockquote>$ mkdir src</blockquote><blockquote>$ touch app.ts</blockquote><pre>class Person {</pre><pre>private fullName: String = null;</pre><pre>constructor(private firstName: String, private lastName: String) {</pre><pre>this.fullName = firstName + “ “ + lastName;</pre><pre>}</pre><pre>public getName(): String{</pre><pre>return this.fullName;</pre><pre>}</pre><pre>}</pre><pre>let person: Person = new Person(“Chicken”, “mini”);</pre><pre>console.log(person.getName());</pre><blockquote>$ tsc</blockquote><blockquote>$ node ./dist/app.js</blockquote><p>Chicken mini라고 출력되는것을 확인 할 수 있다.</p><p>허나 이러면 매번 번거롭게 컴파일 해야한다. 따라서 VSCode의 task를 이용해보자</p><p>F5를 누르고 <strong>작업 구성</strong>을 누른다</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/419/1*YQ3aTVerPiIUfHdIUACLFw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/602/1*84lzwg-R4oC95nE4ENju5w.png" /></figure><p>tsc 빌드-tsconfig.json을 선택한다.</p><p>.vscode폴더와 task.json이 생성된다.</p><p>생성된 task.json을 다음과 같이 수정한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/696/1*-z50UgJqUDFxsAhNzGnTXg.png" /><figcaption>수정된 task.json</figcaption></figure><p>다시 F5를 눌러 환경을 선택해준다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/599/1*ElM3XxyEuCjuSHit7V3WUg.png" /><figcaption>환경 선택</figcaption></figure><p>선택을 하고나면 launch.json이 생성된다. 생성된 launch.json을 다음과 같이 수정한다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/769/1*ExDfoeEVbweAoGadeyXwmw.png" /><figcaption>수정된 launch,json</figcaption></figure><p>이후 vscode의 디버깅 기능화 F5버튼으로 컴파일후 자동 실행할 수 있다.</p><p>TIPS: VSCode의 유저설정으로</p><p>“debug.internalConsoleOptions”: “openOnSessionStart”</p><p>를 추가하면 매번 F5 누를때마다 디버그 콘솔이 뜬다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d060b64cbcd9" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kotlin 시작하기 — Hello World!!! 신기한 코드]]></title>
            <link>https://medium.com/@mini.chicken.dev/kotlin-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-hello-world-%EC%8B%A0%EA%B8%B0%ED%95%9C-%EC%BD%94%EB%93%9C-a1435c9f141d?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/a1435c9f141d</guid>
            <category><![CDATA[kotlin]]></category>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Sat, 02 Dec 2017 17:03:04 GMT</pubDate>
            <atom:updated>2017-12-02T17:03:04.522Z</atom:updated>
            <content:encoded><![CDATA[<pre>fun main(args: Array&lt;String&gt;){<br>    <em>println</em>(&quot;Hello World!!!&quot;)<br>}<br>//app.kt</pre><p>위 코드는 정말로 간단한 Kotlin Hello World 예제입니다.</p><p>그런데 Java와 비교 해보면 코드가 정말로 신기할정도로 다름니다.</p><p>우선 Class가 없고요 static 메소드가 없습니다.</p><p><a href="https://medium.com/@mini.chicken.dev/sdkman-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-d66d14b0341e">SDKMAN</a>을 사용하여 Kotlin을 설치하면 Command Line에서 코틀린을 컴파일 할 수 있습니다.</p><pre>$ sdk install kotlin</pre><p>설치가 완료 되었으면 Hello World 예제를 컴파일 후 Disassemble해보겠습니다.</p><p>javap는 Package, Protected, Public과 class안의 method를 출력해줌니다.</p><pre>$ kotlinc app.kt <br>$ javap AppKt.class<br>Compiled from “app.kt”<br>public final class AppKt {<br> public static final void main(java.lang.String[]);<br>}</pre><p>Class가 파일 명에 따라 생성되었으며 뒤에 Kt가 붙은것을 확인할 수 있습니다.</p><p>이 덕분에 Java에서 같은 메소드를 사용해도 중복되지 않습니다.</p><p>또한 static final이 메소드 명에따라 자동으로 붙은 것을 확인할 수 있습니다.</p><p>Java에서는 함수를</p><pre>&lt;<strong>ReturnType</strong>&gt; &lt;<strong>FunctionName</strong>&gt;(&lt;<strong>Parameter Type</strong>&gt; &lt;<strong>Parameter Name</strong>&gt;) </pre><p>형태로 선언하였지만 Kotlin에서는</p><pre><strong>fun</strong> &lt;<strong>FunctionName</strong>&gt;(&lt;<strong>Parameter Name</strong>&gt; : &lt;<strong>Parameter Type</strong>&gt;):&lt;<strong>Return Type</strong>&gt;</pre><p>형태로 선언합니다.</p><p>Parameter는 없을 경우에는 생략이 가능하며 Return Type 또한 생략 할 수 있지만 Return Type이 존제하면 명시하여야 합니다.</p><p>Kotlin에서는 특이하게 Expression Bodies로 함수를 더욱 간단히 할 수 있습니다.</p><p>간단히 변환값만 리턴하는 함수라면 간한히 줄일 수 있습니다.</p><pre>fun expression(a: Int, b: Int): Int {<br>    if(a &gt; b){<br>        return a<br>    } else{<br>        return b<br>    }<br>}<br><br>fun expression1(a: Int, b: Int) = if (a &gt; 0) a else b<br><br>fun main(args: Array&lt;String&gt;){<br>    <em>println</em>(<em>expression</em>(3,1))<br>    <em>println</em>(<em>expression1</em>(3,1))<br>}</pre><pre>&gt;&gt;&gt;3<br>&gt;&gt;&gt;3</pre><p>혹은 아예 Lamda를 사용하여 함수를 생략할 수 있습니다.</p><pre><em>println</em>(<strong>{</strong>a: Int, b: Int <strong>-&gt; </strong>if(a&gt;b) a else b<strong>}</strong>(3,1))</pre><p>Kotlin에서 변수를 선언 할려면 var 이나 val을 사용합니다. 기본적으로 Type은 자동으로 추론되며 적지 않아도 됨니다. 허나 명시적으로 적을 수 있습니다.</p><p>val을 사용하여 상수를 선언 할 수 있습니다.</p><pre>var number = 4;<br>var number1: Int = 4</pre><pre>val number2 = 3;<br>//number2 = 4 #err<br>val number3: Int =3;<br>//number3 = 4 #err</pre><p>Kotlin에서는 기본적으로 null을 허용하지 않습니다. Kotlin이 안전한 이유중 하나 이죠.</p><p>Kotlin에서 null인 변수를 선언 할려면 ? 을 사용하여 선언 할 수 있습니다.</p><pre>var <em>some</em>: Int? = null</pre><p>Type 뒤에 ? 을 붙여 null을 선언 할 수 있습니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a1435c9f141d" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SDKMAN! 설치하기]]></title>
            <link>https://medium.com/@mini.chicken.dev/sdkman-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-d66d14b0341e?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/d66d14b0341e</guid>
            <category><![CDATA[sdkman]]></category>
            <category><![CDATA[gvm]]></category>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Sat, 02 Dec 2017 15:37:08 GMT</pubDate>
            <atom:updated>2017-12-02T15:37:08.869Z</atom:updated>
            <content:encoded><![CDATA[<p>SDKMAN은 Unix기반의 시스템에서 여러 SDK(Software Development Kits)를 관리하는 도구 입니다.</p><p>전에 GVM(Groovy enVironment Manager)로 불리었으며 Ruby 커뮤니티에서 사용되었던 RVM 및 rbenv도구에서 영감을 얻은 도규 입니다.</p><pre>$ curl -s &quot;https://get.sdkman.io&quot; | bash</pre><p>Enjoy!!!란 메시지가 출력되면, 정상적으로 설치된 것 입니다.</p><pre>$ source &quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</pre><p>후 바로 sdkman을 사용하실 수 있습니다.</p><pre>$ sdk version<br>&gt;&gt;&gt;<br>==== BROADCAST =================================================================<br>* 30/11/17: Gradle 4.4-rc-5 released on SDKMAN! #gradle<br>* 29/11/17: Groovy 3.0.0-alpha-1 released on SDKMAN! #groovylang<br>* 28/11/17: Kotlin 1.2.0 released on SDKMAN! #kotlin<br>================================================================================</pre><pre>SDKMAN 5.5.13+272</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d66d14b0341e" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kotlin 시작하기 — Hello World!!!]]></title>
            <link>https://medium.com/@mini.chicken.dev/kotlin-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-hello-world-baddb0a26a89?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/baddb0a26a89</guid>
            <category><![CDATA[kotlin]]></category>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Sat, 02 Dec 2017 15:21:02 GMT</pubDate>
            <atom:updated>2017-12-02T15:21:02.274Z</atom:updated>
            <content:encoded><![CDATA[<p>Kotlin은 자바 플렛폼을 타겟을 한 새로운 프로그래밍 언어입니다. 또한 간결하고 안전하고 Java와 호환가능합니다.</p><p>Java가 사용되는 곳이면 Kotlin을 사용 할 수 있고 또한 Java와 함께 Kotlin을 사용 할 수 있습니다. 따라서 기존 프로젝트에 무리 없이 Kotlin사용이 가능합니다.</p><p>Kotlin을 시작 하기 위해서 프로젝트를 생성 합니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/777/1*aNVQbCczn2nPAcKmx0fi6g.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/829/1*NYWAc5rbDqRIuzLKQW1aPw.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/829/1*XB9-RSZhzcCZFVl4td7X1g.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/829/1*LVlfWMLApWcP9KPvqo1pkg.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/829/1*EGO6keuh3uT68FZ3peWutA.png" /></figure><p>프로젝트와 패키지 생성후 app.kt 파일을 만들어 둠니다.</p><pre>package com.github.minichicken<br><br>fun main(args: Array&lt;String&gt;){<br>    <em>println</em>(&quot;Hello World!!!&quot;)<br>}</pre><pre>&gt;&gt;&gt; Hello World!!!!</pre><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=baddb0a26a89" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Linux에서 Unity 3D git 설정하기]]></title>
            <link>https://medium.com/@mini.chicken.dev/linux%EC%97%90%EC%84%9C-unity-3d-git-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-18ac9a1d213a?source=rss-f7bcdd6ea4d2------2</link>
            <guid isPermaLink="false">https://medium.com/p/18ac9a1d213a</guid>
            <category><![CDATA[git]]></category>
            <category><![CDATA[unity3d]]></category>
            <category><![CDATA[linux]]></category>
            <dc:creator><![CDATA[이재호]]></dc:creator>
            <pubDate>Sat, 02 Dec 2017 13:54:47 GMT</pubDate>
            <atom:updated>2017-12-02T13:54:47.371Z</atom:updated>
            <content:encoded><![CDATA[<p>유니티에서 바로 git을 사용해서 소스코드를 공유하면 scenes, prefabs 그리고 assets가 제대로 merge되지 않고 깨지는 경우가 있습니다.</p><p>따라서 제대로 merge를 하기 위해서는 UnityYAMLMerge라는 도구를 사용합니다.</p><p>Unity에서 메뉴에서 Edit -&gt; Project Settings -&gt; Editor로 가서 다음과 같이 설정 합니다.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/325/1*x4AZVzk9YWr8Gq8KfQ6Fgw.png" /></figure><p>Version Control Mode를 Visible Meta Files로 변경합니다. *.meta 파일은 Unity 오브젝트의 속성을 관리하는 파일입니다. 이 파일을 공유하여 Unity오브젝트 설정을 유지 할 수 있습니다.</p><p>Asset Serialization을 Force Text로 변경합니다. 기본적으로 Mixed로 설정이 되어있습니다. Binary 나 Mixed로 설정이 되면 git에서는 merge가 제대로 되지 않아 설정이 유지되지 않습니다.</p><p>UnityYAMLMerge 도구는 기본적으로 유니티 설치시 자동으로 설치됨니다.</p><p>리눅스에서 UnityYAMLMerge는 /opt/Unity/Editor/Data/Tools에 위치해 있습니다.</p><p>.git/config파일을 열어 다음 내용을 추가합니다.</p><pre>[merge]<br>    tool = unityyamlmerge</pre><pre>[mergetool &quot;unityyamlmerge&quot;]<br>    trustExitCode = false<br>    cmd = &#39;/opt/Unity/Editor/Data/Tools/UnityYAMLMerge&#39; merge -p &quot;$BASE&quot; &quot;$REMOTE&quot; &quot;$LOCAL&quot; &quot;$MERGED&quot;</pre><p>이후 적절히 .gitignore 파일을 설정하여 유니티 git 설정을 마무리 합니다.</p><p>자세한 내용은 <a href="https://docs.unity3d.com/Manual/SmartMerge.html">https://docs.unity3d.com/Manual/SmartMerge.html</a> 에서 확인가능합니다.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=18ac9a1d213a" width="1" height="1">]]></content:encoded>
        </item>
    </channel>
</rss>