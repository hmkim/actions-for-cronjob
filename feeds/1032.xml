<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-578282567400059547</id><updated>2019-02-01T20:38:32.225+09:00</updated><category term="kafka"/><category term="cargo"/><category term="configuration"/><category term="couchbase"/><category term="angularjs"/><category term="kafka-0.9"/><category term="kafka-consumer"/><category term="kafka-producer"/><category term="kafkaConsumer"/><category term="rust"/><category term="rustlang"/><category term="CD"/><category term="CI"/><category term="KafkaBroker"/><category term="adpater-pattern"/><category term="annotationprocessing"/><category term="branchperfeature"/><category term="cms"/><category term="commandlinerunner"/><category term="compile"/><category term="compiler"/><category term="compilertree"/><category term="continuous-delivery"/><category term="continuous-integration"/><category term="continuousdelivery"/><category term="continuousdeployment"/><category term="continuousintegration"/><category term="decorator-pattern"/><category term="designpattern"/><category term="dma"/><category term="dynitruk"/><category term="emscripten"/><category term="enterprise-pattern"/><category term="facade-pattern"/><category term="feature-toggle"/><category term="featurefreeze"/><category term="featuretoggle"/><category term="g1"/><category term="garbage-collection"/><category term="garbage-collector"/><category term="garbagecollection"/><category term="garbagecollector"/><category term="gh-pages"/><category term="gitflow"/><category term="github"/><category term="githubflow"/><category term="io"/><category term="java"/><category term="javaagent"/><category term="javac"/><category term="javaxtools"/><category term="jvm"/><category term="kafka-broker"/><category term="kafka-config"/><category term="kafka-consumer-client"/><category term="kafka-internal"/><category term="kafka0.9"/><category term="kafkaConfig"/><category term="kafkaConsumerClient"/><category term="kafkaProducer"/><category term="lifetime"/><category term="lombok"/><category term="macro"/><category term="mainline-model"/><category term="mainlinemodel"/><category term="metaprogramming"/><category term="microservices"/><category term="msa"/><category term="ownership"/><category term="pact"/><category term="pacto"/><category term="proxy-pattern"/><category term="rust-to-webassembly"/><category term="sendfile"/><category term="serial-collector"/><category term="serialcollector"/><category term="share-as-little-as-possible"/><category term="share-as-much-as-possible"/><category term="soa"/><category term="spring-cloud"/><category term="spring-cloud-bus"/><category term="spring-cloud-config"/><category term="spring-cloud-starter-bus-redis"/><category term="springbatch junit"/><category term="springboot"/><category term="springcloud"/><category term="springcloudbus"/><category term="springcloudconfig"/><category term="springcloudstarterbusredis"/><category term="throughput-collector"/><category term="throughputcollector"/><category term="transferTo"/><category term="vertx"/><category term="vertx-cpu"/><category term="vertx-eventloop"/><category term="vertx-singlethread"/><category term="webassembly"/><category term="zerocopy"/><title type='text'>fn(Rice) -&gt; Code</title><subtitle type='html'>잊지말자용! 개발에 필요한 내용을 기록하는 블로그입니다.&#xa;&#xa;&lt;p&gt;&#xa;&lt;a href=&quot;https://twitter.com/_freestrings&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/changseok.han&quot;&gt;Facebook&lt;/a&gt;&#xa;&lt;/p&gt;</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default?alt=atom'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default?alt=atom&amp;start-index=26&amp;max-results=25'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>26</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-779460356721946053</id><published>2017-04-03T23:12:00.000+09:00</published><updated>2017-06-05T15:24:38.468+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="compile"/><category scheme="http://www.blogger.com/atom/ns#" term="emscripten"/><category scheme="http://www.blogger.com/atom/ns#" term="rust"/><category scheme="http://www.blogger.com/atom/ns#" term="rust-to-webassembly"/><category scheme="http://www.blogger.com/atom/ns#" term="webassembly"/><title type='text'>Rust를 Webassembly로 컴파일 하기</title><content type='html'>Rust를 Webassembly로 컴파일 하는 방법과 방법을 정리 해 둔다.&lt;br /&gt;&lt;br /&gt;환경 구축이라 순차적으로 따라하면 될것 같지만, 막상 해 보면 시간도 오래 걸리고 잘 안된다. &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;컴파일 환경 구축 부터&amp;nbsp;&lt;b&gt;Cargo &lt;/b&gt;로 빌드하는 방법&lt;/span&gt; 까지 정리 해 둔다.&lt;br /&gt;&lt;h3&gt;    OS 선택 &lt;/h3&gt;&lt;div&gt;Rust와 Emscripten이 설치 되는 OS면 된다. Rust는 Windows, Mac, Ubuntu OS에서 실행 되는 것을 확인 했지만 Emscripten은 우분투 최신 버전과 14.04에서만 테스트를 해 보았기 때문에 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;최신 Ubuntu&lt;/span&gt; 기준으로 정리를 해둔다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;Docker Image 만들어 두면 편할 것 같았는데, 막상 컴파일 환경을 이미지로 빌드하고 보니 이미지 크기가 25GB&lt;/span&gt;를&amp;nbsp;넘는 문제가 있다. &lt;/div&gt;&lt;h3&gt;    Rust 설치 &lt;/h3&gt;&lt;div&gt;Rust 설치와 &lt;a href=&quot;http://free-strings.blogspot.com/2017/03/cargo-cargo.html&quot; target=&quot;_blank&quot;&gt;Cargo에 대한 설명은&amp;nbsp;Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지&lt;/a&gt;&amp;nbsp;참고 &lt;/div&gt;&lt;h3&gt;    안정된 Rust 버전과 wasm32 타겟 설치&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;rustup install stable&lt;br /&gt;rustup default stable&lt;br /&gt;rustup target add wasm32-unknown-emscripten&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Emscripten 설치 &lt;/h3&gt;&lt;div&gt;참고:&amp;nbsp; &lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://kripken.github.io/emscripten-site/docs/building_from_source/building_emscripten_from_source_on_linux.html#building-emscripten-on-linux&quot; target=&quot;_blank&quot;&gt;http://kripken.github.io/emscripten-site/docs/building_from_source/building_emscripten_from_source_on_linux.html#building-emscripten-on-linux&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;우분투 14.04에서는 설치 중에 cmake 버전 때문에 문제가 생긴다. cmake 최신 버전을 설치 해주면 문제 없다.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;최신 우분투에서는 아래 순으로 진행하면 된다. docker에서 실행 한 순서 이기 때문에 sudo로 실행하지 않는다. &lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;apt-get update&lt;br /&gt;apt-get install build-essential&lt;br /&gt;apt-get install cmake&lt;br /&gt;apt-get install python2.7&lt;br /&gt;apt-get install nodejs&lt;br /&gt;apt-get install default-jre&lt;br /&gt;ln -s /usr/bin/python2.7 /usr/bin/python #링크를 생성해 주자&lt;br /&gt;apt-get install curl&lt;br /&gt;curl -o emsdk-portable.tar.gz https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz&lt;br /&gt;tar -xvzf emsdk-portable.tar.gz&lt;br /&gt;cd emsdk-portable&lt;br /&gt;./emsdk update&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;아래에서 시간이 엄청 많이 걸린다.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;그리고 &lt;b&gt;nodejs&lt;/b&gt;와 &lt;b&gt;node&lt;/b&gt; 문제 인것 같은데 pre-built 환경을 구성 하면서 node를 설치 했지만 중간에 node 4.1.1 버전이 설치된다. node 설치는 오래 걸리지 않으므로 무시하자. &lt;/div&gt;&lt;div&gt;여기 까지 진행하면&amp;nbsp;아래 메시지를 확인 가능&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;./emsdk install latest&lt;br /&gt;Done installing tool &#39;emscripten-tag-1.37.9-64bit&#39;.&lt;br /&gt;Done installing SDK &#39;sdk-tag-1.37.9-64bit&#39;.&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Emscripten 최신 버전 활성화&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;./emsdk activate latest&lt;br /&gt;source ./emsdk_env.sh&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    emcc 버전 체크&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;emcc -v&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.37.9&lt;br /&gt;clang version 4.0.0 &amp;nbsp;(emscripten 1.37.9 : 1.37.9)&lt;br /&gt;Target: x86_64-unknown-linux-gnu&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    1.37.0 이하라면 update&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;apt-get install git-core&lt;br /&gt;./emsdk update&lt;br /&gt;./emsdk install sdk-incoming-64bit&lt;br /&gt;./emsdk activate sdk-incoming-64bit&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Rust 코드 컴파일 &lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cat hello.rs&lt;br /&gt;fn main() {&lt;br /&gt;&amp;nbsp; println!(&quot;hello&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;rustc --target==wasm32-unknown-emscripten hello.rs -o hello.html&lt;br /&gt;&lt;br /&gt;ls -al&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 816159 Apr &amp;nbsp;3 12:16 hello.asm.js&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 102727 Apr &amp;nbsp;3 12:16 hello.html&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 247359 Apr &amp;nbsp;3 12:16 hello.js&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root &amp;nbsp; &amp;nbsp; 35 Apr &amp;nbsp;3 12:10 hello.rs&lt;br /&gt;-rw-r--r-- &amp;nbsp;1 root root 155653 Apr &amp;nbsp;3 12:16 hello.wasm&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;    Cargo 로 빌드하기 &lt;/h3&gt;&lt;h4&gt;    프로젝트 생성 &lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo new hello&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    &lt;strike&gt;Cargo.toml에 rustc 옵션 추가&lt;/strike&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;[package]&lt;br /&gt;name = &quot;rust-wasm&quot;&lt;br /&gt;version = &quot;0.1.0&quot;&lt;br /&gt;authors = [&quot;freestrings &amp;lt;freestrings@gmail.com&amp;gt;&quot;]&lt;br /&gt;&lt;br /&gt;[dependencies]&lt;br /&gt;&lt;br /&gt;[target.wasm32-unknown-emscripten]&lt;br /&gt;rustflags=[&quot;-o rust-wasm.html&quot;]&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div&gt;테스트 코드 &lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cat src/main.rs&lt;br /&gt;fn main() {&lt;br /&gt;&amp;nbsp; println!(&quot;hello&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    컴파일&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo rustc --target=wasm32-unknown-emscripten&lt;br /&gt;ls -al target/wasm32-unknown-emscripten/debug/deps/&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;-rw-r--r-- 1 root root 6769048 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.asm.js&lt;br /&gt;-rw-r--r-- 2 root root &amp;nbsp;310906 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.js&lt;br /&gt;-rw-r--r-- 1 root root 1667847 Apr &amp;nbsp;2 12:08 rust_wasm-5d7a20a47b6ec337.wasm&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;    실행&lt;/h4&gt;&lt;div&gt;&lt;strike&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;아직 html 생성은 지원하지 않는다&lt;/span&gt;.&lt;/strike&gt; 그래서 target/wasm32-unknown-emscripten/debug/deps/ 아래 hello.html 파일(html 파일 이름은 편한대로 해도 된다) 을 생성해야 한다. 당연히 .wasm 파일을 호출 하는 코드가 있어야 할텐데, 아래는 실행에 필요한 최소 내용이다. html에 붙여 넣어 주자.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;target/wasm32-unknown-emscripten/debug/deps/ 디렉토리에 html 파일을 넣는 이유는 .js 파일에 .wasm 파일 경로가 동일 디렉토리로 되어 있기 때문.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;파이어폭스 52&lt;/span&gt; 버전 부터는 Webassembly를 기본 지원하고 있기 때문에 최신 파이어폭스에서 결과를 확인하면 편하다. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;html hljs&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;br /&gt;&amp;lt;html lang=&quot;en-us&quot;&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;textarea class=&quot;emscripten&quot; id=&quot;output&quot; rows=&quot;20&quot; style=&quot;width:100%&quot;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script async type=&quot;text/javascript&quot; src=&quot;JS 파일&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; var Module = {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print: (function() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var element = document.getElementById(&#39;output&#39;);&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return function(text) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; element.innerHTML += text;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })()&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; };&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;컴파일2&amp;nbsp;&lt;/h4&gt;&lt;div&gt;프로젝트 루트 ./cargo (없으면 생성) 아래 config 파일을 생성하고 링커 속성을 지정해 준다. 링커 속성은 target에 플랫폼이 컴파일 될 때 rustc에 전달된다.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;echo &quot;emcc \&quot;-o\&quot; \&quot;test.html\&quot; \&quot;-02\&quot; \$@&quot; &amp;gt; ./emcc_conf&lt;br /&gt;&lt;br /&gt;cat ./cargo/config&lt;br /&gt;[target.wasm32-unknown-emscripten]&lt;br /&gt;linker = &quot;/work/emcc_conf&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4&gt;    참고 &lt;/h4&gt;&lt;div&gt;설치 관련해서는 &lt;a href=&quot;https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde&quot; target=&quot;_blank&quot;&gt;https://hackernoon.com/compiling-rust-to-webassembly-guide-411066a69fde&lt;/a&gt;&amp;nbsp;가 정리가 가장 잘 되어 있다.&lt;br /&gt;&lt;br /&gt;그리고 Emscripten이나 LLVM 기본 이해는&amp;nbsp;     &lt;a href=&quot;https://www.slideshare.net/Hybrid0/llvm-28276305&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/Hybrid0/llvm-28276305&lt;/a&gt;&amp;nbsp;가 읽을 만하고, WebAssembly는&amp;nbsp;&lt;a href=&quot;https://www.slideshare.net/gyeongseokseo/web-assembly-70493156&quot; target=&quot;_blank&quot;&gt;https://www.slideshare.net/gyeongseokseo/web-assembly-70493156&lt;/a&gt;&amp;nbsp;가     읽을 만하다.&amp;nbsp; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/779460356721946053/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/04/rust-webassembly.html#comment-form' title='1개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/779460356721946053'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/779460356721946053'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/04/rust-webassembly.html' title='Rust를 Webassembly로 컴파일 하기'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-4264508961041754751</id><published>2017-03-28T01:04:00.001+09:00</published><updated>2017-04-14T23:16:53.582+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="rust"/><category scheme="http://www.blogger.com/atom/ns#" term="rustlang"/><title type='text'>Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지</title><content type='html'>왜?&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Rust를 배워보자&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Cargo?&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Cargo는 &lt;a href=&quot;https://www.rust-lang.org/&quot; target=&quot;_blank&quot;&gt;Rust&lt;/a&gt;의 패키지 매니저다. 자바의 &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;Maven&lt;/a&gt;이나 &lt;a href=&quot;https://gradle.org/&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;같은 걸로 생각하면 된다. Cargo로 프로젝트 생성 부터 배포, 커스텀 빌드까지 정리 해 두기로 한다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;목차&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;설치&lt;/li&gt;&lt;li&gt;프로젝트 생성&lt;/li&gt;&lt;li&gt;빌드&lt;/li&gt;&lt;li&gt;실행&lt;/li&gt;&lt;li&gt;유닛 테스트 실행&lt;/li&gt;&lt;li&gt;배포&lt;/li&gt;&lt;li&gt;커스텀 빌드&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4&gt;설치&lt;/h4&gt;기본적으로 Cargo는 Rust와 같이 배포가 되기 때문에 &lt;b&gt;rustc&lt;/b&gt;가 설치 되어 있다면 Cargo도 설치 되어 있다고 보면 된다.&lt;br /&gt;&lt;br /&gt;설치는 간단하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;curl https://sh.rustup.rs -sSf | sh&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;info: downloading installer&lt;br /&gt;&lt;br /&gt;Welcome to Rust!&lt;br /&gt;&lt;br /&gt;...&lt;br /&gt;Current installation options:&lt;br /&gt;&lt;br /&gt;  default host triple: x86_64-unknown-linux-gnu&lt;br /&gt;  default toolchain: stable&lt;br /&gt;  modify PATH variable: yes&lt;br /&gt;&lt;br /&gt;1) Proceed with installation (default)&lt;br /&gt;2) Customize installation&lt;br /&gt;3) Cancel installation&lt;br /&gt;&lt;br /&gt;...&lt;br /&gt;To configure your current shell run source $HOME/.cargo/env&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;1) Proceed with installation (default)&lt;/span&gt;&amp;nbsp;를 선택해서 진행하면 된다. 설치된 실행 파일들을 자동으로 PATH에 등록되지 않기 때문에 설치 메시지에서 알려 주는 대로&amp;nbsp;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;source $HOME/.cargo/env&lt;/span&gt;&amp;nbsp;를 해줘야 한다. ( ~/.bash_profile이나 ~/.profile에 추가해 두면 매번 실행하지 않아도 된다. )&lt;br /&gt;&lt;br /&gt;기본 설치를 하지 않고 &lt;b&gt;2) Customize installation&lt;/b&gt;을 선택하면 stable/beta/nightly 중에서 툴체인을 선택하거나 컴파일 타겟을 바꿀 수 있다. 나중에 필요하면&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;rustup&lt;/b&gt;명령으로 툴체인이나 타겟은 바꿀 수 있으니 기본으로 설치해도 무방하다.&lt;br /&gt;&lt;br /&gt;설치 디렉토리($HOME/.cargo) 아래 bin 디렉토리를 보면 &lt;b&gt;cargo&lt;/b&gt;&amp;nbsp;실행 파일을 확인 할 수 있다. 그 밖에 &lt;b&gt;rustc&lt;/b&gt; 컴파일러는 물론이고 디버거등도 기본 설치 됨을 알 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;root@11382ab871ac:/# ls -al /root/.cargo/bin&lt;br /&gt;total 57032&lt;br /&gt;drwxr-xr-x 2 root root 4096 Mar 21 14:28 .&lt;br /&gt;drwxr-xr-x 3 root root 4096 Mar 21 13:38 ..&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 cargo&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rust-gdb&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rust-lldb&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustc&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustdoc&lt;br /&gt;-rwxr-xr-x 6 root root 9728608 Mar 21 14:28 rustup&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;cargo help&lt;/b&gt;&amp;nbsp;를 보면 Cargo로 빌드, 유닛 테스트, 문서 생성 그리고 배포에 이르기 까지 개발에 필요한 일련의 기능이 포함 되어 있음을 알 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo help&lt;br /&gt;...&lt;br /&gt; build    Compile the current project&lt;br /&gt; check    Analyze the current project and report errors, but don&#39;t build object files&lt;br /&gt; clean    Remove the target directory&lt;br /&gt; doc      Build this project&#39;s and its dependencies&#39; documentation&lt;br /&gt; new      Create a new cargo project&lt;br /&gt; init     Create a new cargo project in an existing directory&lt;br /&gt; run      Build and execute src/main.rs&lt;br /&gt; test     Run the tests&lt;br /&gt; bench    Run the benchmarks&lt;br /&gt; update   Update dependencies listed in Cargo.lock&lt;br /&gt; search   Search registry for crates&lt;br /&gt; publish  Package and upload this project to the registry&lt;br /&gt; install  Install a Rust binary&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;프로젝트 생성&lt;/h4&gt;프로젝트 생성은 init/new 두가지 방법이 있다. 생성 할 때 디렉토리를 지정 하느냐 현재 디렉토리에 생성 하느냐 정도의 차이가 있을 뿐 이다. 프로젝트가 생성되면 자동으로&amp;nbsp;&lt;b&gt;Git 저장소가 &amp;nbsp;init&lt;/b&gt;이 되고&amp;nbsp;커밋에 제외 될 파일들도&amp;nbsp;&lt;b&gt;.gitignore&lt;/b&gt;에&amp;nbsp;등록되어 생성 된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;$ mkdir hello&lt;br /&gt;$ cd hello&lt;br /&gt;$ cargo init&lt;br /&gt;$ hello git:(master) ✗ tree -a&lt;br /&gt;.&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── .git&lt;br /&gt;├── .gitignore&lt;br /&gt;└── src&lt;br /&gt; └── lib.rs&lt;br /&gt;&lt;br /&gt;$ hello git:(master) ✗ cat .gitignore&lt;br /&gt;target&lt;br /&gt;Cargo.lock&lt;/code&gt;&lt;/pre&gt;코드는&amp;nbsp;&lt;b&gt;src&lt;/b&gt;&amp;nbsp;디렉토리 위치한다. --lib 옵션(기본: 생략가능)을 인자로 주면 기본으로 lib.rs가 생성되고 --bin 옵션엔 main.rs가 기본으로 생성 된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo init --bin (또는 --lib)&lt;/code&gt;&lt;/pre&gt;lib.rs와 main.rs 두 파일의 차이는 라이브러리 형태 배포가 목적일 땐 lib.rs를 실행 어플리케이션이 목적일 땐 main.rs를 사용한다. 물론, 라이브러리 면서 동시에 실행 어플리케이션일 경우는 두 파일을 같이 사용하면 된다.&lt;br /&gt;&lt;h4&gt;빌드&lt;/h4&gt;&lt;div&gt;빌드는 &lt;b&gt;cargo build &lt;/b&gt;명령으로 프로젝트를 빌드 할 수 있다. 기본 --debug 모드로 컴파일 되고 &lt;b&gt;target&lt;/b&gt; 폴더 아래 빌드 결과가 생성된다. release로 빌드되면 release 폴더가 생성 된다.&amp;nbsp;&lt;/div&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;└── target&lt;br /&gt;    └── debug&lt;br /&gt;        ├── build&lt;br /&gt;        ├── examples&lt;br /&gt;        ├── native&lt;br /&gt;...&lt;/code&gt;&lt;/pre&gt;build나 run 같은 서브 명령어 대부분이 비슷한 실행 옵션을 가지기 때문에 세부적인 옵션은 cargo run 부분에서 같이 정리해 둔다.&lt;br /&gt;&lt;br /&gt;빌드와 유사한 명령으로&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo&amp;nbsp;check&lt;/b&gt;&amp;nbsp;명령이 있다. 문법 체크 정도로 생각 하면 된다.&lt;br /&gt;&lt;br /&gt;빌드는 dependency에 있는 모듈들이 같이 컴파일 되기 때문에 시간이 오래 걸린다. 이럴 때 작성 중인 어플리케이션의 문법 체크만 할 수 있다면 시간을 많이 절약 할 수 있다. 이것이 cargo check의 주된 용도다. Rust 1.16릴리즈의 주기능으로 소개 하고 있다. (&lt;a href=&quot;https://blog.rust-lang.org/2017/03/16/Rust-1.16.html&quot;&gt;https://blog.rust-lang.org/2017/03/16/Rust-1.16.html&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;실행&lt;/h4&gt;&lt;b&gt;cargo run&lt;/b&gt;은 main.rs 컴파일 후 실행 하는 것과 동일하다. (lib.rs는 실행 목적이 아니기 때문에 cargo run으로 실행 할 수 없다.)&lt;br /&gt;&lt;br /&gt;&lt;b&gt;cargo run&lt;/b&gt; 옵션 중 몇 가지를 살펴 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;--bin NAME           Name of the bin target to run&lt;br /&gt;--example NAME       Name of the example target to run&lt;br /&gt;-j N, --jobs N       Number of parallel jobs, defaults to # of CPUs&lt;br /&gt;--release            Build artifacts in release mode, with optimizations&lt;br /&gt;--features FEATURES  Space-separated list of features to also build&lt;br /&gt;--all-features       Build all available features&lt;br /&gt;--no-default-features   Do not build the `default` feature&lt;br /&gt;--target TRIPLE      Build for the target triple&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;--bin&lt;/b&gt;은 실행 할 타겟을 지정 하는 옵션이다. 보통의 경우 워크스페이스 안에서 다른 실행 타겟을 지정 할 일이 없기 때문에 그렇게 유용한 기능은 아니다. 가령, &lt;b&gt;cargo new hello&lt;/b&gt;와 같이 &lt;b&gt;hello&lt;/b&gt;패키지를 만들고 빌드한 경우&amp;nbsp;&lt;b&gt;cargo run&lt;/b&gt;과 &lt;b&gt;cargo run --bin hello&lt;/b&gt;는 차이가 없다. &lt;b&gt;cargo run --bin hello2&lt;/b&gt;와 같이 실행 할 일이 없다는 말이다.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;--example 옵션&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;cargo는 문서화나 유닛 테스트도 지원 하지만 예제를 별도로 실행 할 수 있는 환경도 제공 한다.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;examples&lt;/b&gt;&amp;nbsp;디렉토리&lt;/span&gt;에 &quot;hello example&quot;을 출력하는 예제를 만들어 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  cargo-test git:(master) ✗ tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.lock&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── examples&lt;br /&gt;│   └── hello.rs&lt;br /&gt;├── src&lt;br /&gt;│   └── main.rs&lt;br /&gt;&lt;br /&gt;➜  cargo-test git:(master) ✗ cat examples/hello.rs&lt;br /&gt;fn main() {&lt;br /&gt; println!(&quot;hello example!&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;examples 디렉토리이 있는 어플리케이션은&amp;nbsp;--example 옵션으로 실행 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo run --example hello&lt;br /&gt;hello example!&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;조건부 컴파일&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Rust는 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;조건부 컴파일&lt;/b&gt;을 지원한다. 코드에 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&quot;cfg&quot; 속성에 &quot;feature&quot;를 기술&lt;/span&gt;해 두면 조건부로 컴파일 할 수 있다. ( &lt;u&gt;Rust attribute&lt;/u&gt;:&amp;nbsp;&lt;a href=&quot;https://doc.rust-lang.org/book/attributes.html&quot;&gt;https://doc.rust-lang.org/book/attributes.html&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;br /&gt;가령, mysql 실행 환경으로 조건부 빌드 한다면 아래와 같이 사용 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;fn main() {&lt;br /&gt; let datasource = Datasource {};&lt;br /&gt; datasource.stmt();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;struct Datasource {}&lt;br /&gt;&lt;br /&gt;#[cfg(feature = &quot;postgres&quot;)]&lt;br /&gt;impl A {&lt;br /&gt; pub fn stmt(self) {&lt;br /&gt;     println!(&quot;postgres!&quot;);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;#[cfg(feature = &quot;mysql&quot;)]&lt;br /&gt;impl A {&lt;br /&gt; pub fn stmt(self) {&lt;br /&gt;     println!(&quot;mysql!&quot;);&lt;br /&gt; }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo run --example hello --features mysql&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;background-color: white;&quot;&gt;--target&lt;/span&gt; 옵션&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;target은 실행 환경을 말한다. 예를들어 &lt;b&gt;Synology NAS&lt;/b&gt;에서 Rust 프로그램을 구동 하려면 &lt;b&gt;armv7-unknown-linux-gnueabihf&lt;/b&gt;&amp;nbsp;타겟을 지정해야 한다.&lt;br /&gt;&lt;br /&gt;아래는 실제 &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;Docker&lt;/a&gt;로 만든 &lt;a href=&quot;https://hub.docker.com/r/freestrings/rust-build-armv7/&quot; target=&quot;_blank&quot;&gt;Synology&amp;nbsp;용 Rust 컴파일 환경&lt;/a&gt;이다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;FROM ubuntu:latest&lt;br /&gt;&lt;br /&gt;RUN apt-get update \&lt;br /&gt; &amp;amp;&amp;amp; apt-get install -y curl file sudo build-essential&lt;br /&gt;&lt;br /&gt;RUN apt-get install -qq gcc-arm-linux-gnueabihf&lt;br /&gt;&lt;br /&gt;ENV PATH &quot;/root/.cargo/bin:$PATH&quot;&lt;br /&gt;&lt;br /&gt;RUN curl https://sh.rustup.rs &amp;gt; rustup.sh \&lt;br /&gt; &amp;amp;&amp;amp; sh rustup.sh -y \&lt;br /&gt; &amp;amp;&amp;amp; rustup target add armv7-unknown-linux-gnueabihf \&lt;br /&gt; &amp;amp;&amp;amp; mkdir -p ~/.cargo \&lt;br /&gt; &amp;amp;&amp;amp; echo &quot;[target.armv7-unknown-linux-gnueabihf]\nlinker = \&quot;arm-linux-gnueabihf-gcc\&quot;&quot; &amp;gt; ~/.cargo/config&lt;br /&gt;&lt;br /&gt;RUN echo &quot;cargo build --release --target=armv7-unknown-linux-gnueabihf&quot; &amp;gt; /release.sh&lt;br /&gt;&lt;br /&gt;VOLUME /work&lt;br /&gt;WORKDIR /work&lt;br /&gt;&lt;br /&gt;CMD [&quot;/bin/bash&quot;, &quot;/release.sh&quot;]&lt;/code&gt;&lt;/pre&gt;Docker image를 이용해 코드를 컴파일 해 보면 target 디렉토리 아래&amp;nbsp;&lt;b&gt;armv7-unknown-linux-gnueabihf &lt;/b&gt;를 확인 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;docker run -it --rm -v “$PWD”:/work freestrings/rust-build-armv7&lt;br /&gt;tree&lt;br /&gt;…&lt;br /&gt;&lt;br /&gt;├── src&lt;br /&gt;│   └── main.rs&lt;br /&gt;├── target&lt;br /&gt;│   ├── armv7-unknown-linux-gnueabihf&lt;br /&gt;│   │   └── release&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/freestrings/markdang&quot;&gt;Rust로 작성한 ID3 tagger&lt;/a&gt;를 Synology에서 컴파일하고 실행한 결과&lt;/div&gt;&lt;div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s1600/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;564&quot; src=&quot;https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s640/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;실제 Synology NAS에서 동작화면&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h4&gt;유닛 테스트&lt;/h4&gt;유닛테스트는&amp;nbsp;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;cargo test&lt;/b&gt;&lt;/span&gt;로 실행 할 수 있는다.&amp;nbsp;&lt;b&gt;cargo init --lib&lt;/b&gt;로 프로젝트를 생성 하면 기본 코드를 생성 해 준다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test]&lt;br /&gt;    fn it_works() {&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;`it_works()`에 간단한 내용을 넣고 유닛 테스트를 실행 해 보자.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test]&lt;br /&gt;    fn it_works() {&lt;br /&gt;       println!(&quot;###it works!###&quot;);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cargo test&lt;br /&gt;   Compiling test1 v0.1.0 (file:///home/han/test1)&lt;br /&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.43 secs&lt;br /&gt;     Running target/debug/deps/test1-392907a04c6c34cd&lt;br /&gt;&lt;br /&gt;running 1 test&lt;br /&gt;test tests::it_works ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;&lt;br /&gt;   Doc-tests test1&lt;br /&gt;&lt;br /&gt;running 0 tests&lt;br /&gt;&lt;br /&gt;test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured&lt;/code&gt;&lt;/pre&gt;유닛 테스트는 통과 했지만 “###it_works!###”는 출력 되지 않는다.&amp;nbsp;&lt;b&gt;cargo test --help&lt;/b&gt;를 보면&amp;nbsp;&lt;b&gt;--nocapture&lt;/b&gt;가 없으면 출력이 보이지 않는다고 한다. (디버깅용으로 문자열을 넣었는데 보는데 안보이면 난감하다.)&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;Usage:&lt;br /&gt;    cargo test [options] [--] [&lt;args&gt;...]&lt;br /&gt;…&lt;br /&gt;&lt;br /&gt;By default the rust test harness hides output from test execution to&lt;br /&gt;keep results readable. Test output can be recovered (e.g. for debugging)&lt;br /&gt;by passing `--nocapture` to the test binaries:&lt;br /&gt;&lt;br /&gt;  cargo test -- --nocapture&lt;/args&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cargo test -- --nocapture&lt;br /&gt;    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs&lt;br /&gt;     Running target/debug/deps/test1-392907a04c6c34cd&lt;br /&gt;&lt;br /&gt;running 1 test&lt;br /&gt;###it works!###&lt;br /&gt;test tests::it_works ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;...&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;유닛 테스트 작성 방법&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Rust에서&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;유닛 테스트 작성 방법은 두가지&lt;/b&gt;다.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/book/crates-and-modules.html&quot;&gt;모듈&lt;/a&gt;에 #[cfg(test)]속성을 선언한 뒤 테스트 케이스에 #[test] 속성을 선언하는 방법&amp;nbsp;&lt;/li&gt;&lt;li&gt;프로젝트 루트에 tests 폴더 생성하는 방법&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  tests git:(master) ✗ tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.toml&lt;br /&gt;├── src&lt;br /&gt;│&amp;nbsp;&amp;nbsp; └── lib.rs&lt;br /&gt;└── tests&lt;br /&gt;    └── hello_test.rs&lt;/code&gt;&lt;/pre&gt;tests/*.rs 파일에는 &lt;b&gt;cfg&lt;/b&gt;속성 없이 &lt;b&gt;#[test]&lt;/b&gt;&amp;nbsp;속성만 적어주면 된다. 실제 사용된 코드를 보면 쉽게 이해할 수 있다. (&lt;a href=&quot;https://github.com/freestrings/rtag/tree/master/tests&quot;&gt;https://github.com/freestrings/rtag/tree/master/tests&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;b&gt;cargo test&lt;/b&gt;는 아직 &lt;b&gt;test suite&lt;/b&gt;같은 것이 없다.&lt;/span&gt;&amp;nbsp;단위 test별 순차 실행이 아니라 병렬 실행이기 때문에 순서 보장도 되지 않는다. 테스트 케이스 4개정도 만들어 실행 해 보면 확인 가능하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;➜  test1 git:(master) ✗ cargo test&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;running 4 tests&lt;br /&gt;test tests::t3 ... ok&lt;br /&gt;test tests::t1 ... ok&lt;br /&gt;test tests::t2 ... ok&lt;br /&gt;test tests::t4 ... ok&lt;br /&gt;&lt;br /&gt;test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;그리고 특정 유닛 테스트만 실행 해 볼 수 있는데 테스트 케이스명(메소드 이름)을 명시해 주면된다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;cargo test t1&lt;/code&gt;&lt;/pre&gt;아직 복수개의 유닛 테스트를 실행하는 방법이나 패턴 같은 것은 제공하지 않는 것 같지만, &lt;b&gt;동일한&amp;nbsp;테스트 케이스명으로 시작되는 테스트는 모두 실행&lt;/b&gt; 시킬 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;tree&lt;br /&gt;.&lt;br /&gt;├── Cargo.lock&lt;br /&gt;├── Cargo.toml&lt;br /&gt;└── src&lt;br /&gt;    ├── sub&lt;br /&gt;    │   └── mod.rs&lt;br /&gt;    └── lib.rs&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/lib.rs&lt;br /&gt;mod sub;&lt;br /&gt;&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test] fn t1() {}&lt;br /&gt;    #[test] fn t2() {}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;➜  test1 git:(master) ✗ cat src/sub/mod.rs&lt;br /&gt;#[cfg(test)]&lt;br /&gt;mod tests {&lt;br /&gt;    #[test] fn t1() {}&lt;br /&gt;    #[test] fn t2() {}&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;# t1으로 시작&lt;br /&gt;cargo test t1&lt;br /&gt;running 2 tests&lt;br /&gt;test sub::tests::t1 … ok&lt;br /&gt;test tests::t1 … ok&lt;br /&gt;&lt;br /&gt;# t로 시작&lt;br /&gt;cargo test t&lt;br /&gt;running 4 tests&lt;br /&gt;test sub::tests::t1 … ok&lt;br /&gt;test tests::t1 … ok&lt;br /&gt;test tests::t2 … ok&lt;br /&gt;test sub::tests::t2 … ok&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;그 밖에 &lt;b&gt;cargo test&lt;/b&gt;&amp;nbsp;옵션은 run과 거의 동일하다.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;소스코드 문서화와 실행&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;참고(&amp;nbsp;&lt;a href=&quot;https://doc.rust-lang.org/book/documentation.html#documentation-as-tests&quot; target=&quot;_blank&quot;&gt;https://doc.rust-lang.org/book/documentation.html#documentation-as-tests&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;br /&gt;Markdown으로 작성해서 쉽게 문서화 할 수 있기도 하지만 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;예시된 코드가 실제 동작 가능 해야&lt;/span&gt;&amp;nbsp;한다. 주석내 코드를 문서화 시점에 컴파일하고 실행 한다는 이야기다. Markdown 코드 블럭을 사용하면&amp;nbsp;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;rustdoc이&amp;nbsp;자동으로 main() wrapper를 코드에 붙이기 때문&lt;/b&gt;이다. rust test로 문서화 주석내 코드를 실행 해 볼 수 있다. 혹시, 리소스를 삭제하는 예시가 있다면 조심 해야 한다.&lt;br /&gt;&lt;br /&gt;문서화 주석은 Triple Slash를 사용하거나 아래 처럼 사용 할 수 도 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;//!# Example: reading V1 frame.&lt;br /&gt;//!&lt;br /&gt;//! ```rust&lt;br /&gt;//! use rtag::metadata::Unit;&lt;br /&gt;//! use rtag::metadata::MetadataReader;&lt;br /&gt;//!&lt;br /&gt;//! for m in MetadataReader::new(&quot;./test-resources/v1-v2.mp3&quot;).unwrap() {&lt;br /&gt;//!     match m {&lt;br /&gt;//!         Unit::FrameV1(frame) =&amp;gt; {&lt;br /&gt;//!             assert_eq!(&quot;Artist&quot;, frame.artist);&lt;br /&gt;//!             assert_eq!(&quot;!@#$&quot;, frame.comment);&lt;br /&gt;//!             assert_eq!(&quot;1&quot;, frame.track);&lt;br /&gt;//!             assert_eq!(&quot;137&quot;, frame.genre);&lt;br /&gt;//!         },&lt;br /&gt;//!         _ =&amp;gt; ()&lt;br /&gt;//!     }&lt;br /&gt;//! }&lt;br /&gt;//! ```&lt;/code&gt;&lt;/pre&gt;그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;no_run 속성을 사용하면 실행 없이 컴파일만&lt;/span&gt;&lt;/span&gt; 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;/// ```rust,no_run&lt;br /&gt;/// loop {&lt;br /&gt;///     println!(&quot;Hello, world&quot;);&lt;br /&gt;/// }&lt;br /&gt;/// ```&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;배포&lt;/h4&gt;&lt;a href=&quot;https://crates.io/&quot;&gt;https://crates.io/&lt;/a&gt; 사이트가 Rust 커뮤니티에서 호스팅 하는 공식 모듈 저장소다. 배포를 하면 여기에 등록 된다.&lt;br /&gt;&lt;br /&gt;전반적인 방법은 &lt;a href=&quot;http://doc.crates.io/crates-io.html&quot;&gt;http://doc.crates.io/crates-io.html&lt;/a&gt; 에 잘 기술 되어 있다. 내용이 많긴 하지만 배포 자체는 간단하다 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo login&lt;/b&gt;으로 최초 로그인을 한번 해 두면 되고 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;cargo publish&lt;/b&gt;로 배포하면 된다.&lt;br /&gt;&lt;br /&gt;나머지는 Cargo.toml 파일을 기술하는 방법들인데 양이 좀 있어서 다른 글에서 정리 하기로 하고 한가지 주의할 부분만 정리하면,&lt;br /&gt;&lt;br /&gt;&lt;b style=&quot;background-color: #f6b26b;&quot;&gt;배포는 10M제한&lt;/b&gt;이 있어서 &lt;b&gt;include, exclude&lt;/b&gt;를 잘 적어 줘야 한다. 보통 유닛 테스트에 필요한 mp3 파일들은 모듈에 포함 시켜 배포 할 필요가 없다. [package] 카테고리 아래 exclude 속성을 적어 패키징 때 제외할 파일을 나열 하거나, include 속성으로 포함 할 파일 들만 지정 할 수 있다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;[package]&lt;br /&gt;name = &quot;rtag&quot;&lt;br /&gt;version = &quot;0.3.4&quot;&lt;br /&gt;authors = [&quot;Changseok Han&lt;freestrings gmail.com=&quot;&quot;&gt;&quot;]&lt;br /&gt;description = &quot;Library for reading and writing a id3 metadata&quot;&lt;br /&gt;repository = &quot;https://github.com/freestrings/rtag&quot;&lt;br /&gt;license = &quot;MIT&quot;&lt;br /&gt;keywords = [&quot;library&quot;, &quot;id3&quot;, &quot;music&quot;, &quot;mp3&quot;]&lt;br /&gt;include = [&quot;src/*.rs&quot;, &quot;tests/*.rs&quot;, &quot;Cargo.toml&quot;]&lt;/freestrings&gt;&lt;/code&gt;&lt;/pre&gt;include와 exclude를 같이 적어 줄 때는 파일이 중복되지 않게 신경을 써야 한다.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;커스텀 빌드&lt;/h4&gt;빌드나 배포가 간단하면 좋겠지만 환경 구성이 필요 할 경우 &lt;b style=&quot;background-color: #f6b26b;&quot;&gt;빌드 스크립트&lt;/b&gt;를 사용 할 수 있다. (&amp;nbsp;&lt;a href=&quot;http://doc.crates.io/build-script.html&quot;&gt;http://doc.crates.io/build-script.html&lt;/a&gt;&amp;nbsp;)&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;bash hljs&quot;&gt;&lt;br /&gt;[package]&lt;br /&gt;# ...&lt;br /&gt;build = &quot;build.rs&quot;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Rust도 다른 언어와 마찬가지로 FFI(Foreign Function Interface)를 지원한다. C로 개발된 모듈과 연동 할 수 있지만 아래와 같은 선언이 필요하고 C코드도 컴파일 해야 한다. 이럴 경우 빌드 스크립트가 필요하다.&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;&lt;br /&gt;...&lt;br /&gt;#[link(name = &quot;id3v2&quot;)]&lt;br /&gt;extern {&lt;br /&gt;    // frame&lt;br /&gt;    fn parse_text_frame_content(ptr: *mut ID3v2_frame) -&amp;gt; *mut ID3v2_frame_text_content;&lt;br /&gt;&lt;br /&gt;    // id3v2lib&lt;br /&gt;    fn load_tag(file_name: *const c_char) -&amp;gt; *mut ID3v2_tag;&lt;br /&gt;    fn set_tag(file_name: *const c_char, tag: *mut ID3v2_tag);&lt;br /&gt;&lt;br /&gt;    fn tag_get_title(ptr: *mut ID3v2_tag) -&amp;gt; *mut ID3v2_frame;&lt;br /&gt;    fn tag_get_artist(ptr: *mut ID3v2_tag) -&amp;gt; *mut ID3v2_frame;&lt;br /&gt;    ...&lt;br /&gt;}&lt;br /&gt;...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Git 저장소에서 파일을 내려 받고 컴파일 하는 코드&lt;br /&gt;&lt;pre&gt;&lt;code class=&quot;rust hljs&quot;&gt;➜  rust-ffi git:(master) cat build.rs &lt;br /&gt;extern crate git2;&lt;br /&gt;&lt;br /&gt;use std::env;&lt;br /&gt;use std::fs;&lt;br /&gt;use std::process::Command;&lt;br /&gt;use std::path::Path;&lt;br /&gt;use git2::Repository;&lt;br /&gt;&lt;br /&gt;fn main() {&lt;br /&gt;    let url = &quot;https://github.com/larsbs/id3v2lib.git&quot;;&lt;br /&gt;&lt;br /&gt;    let base_path_str = env::current_dir().unwrap();&lt;br /&gt;    let base_path = Path::new(&amp;amp;base_path_str);&lt;br /&gt;    let id3v2_path = base_path.join(&quot;target/debug/build/id3v2lib&quot;);&lt;br /&gt;    let id3v2_build_path = id3v2_path.join(&quot;build&quot;);&lt;br /&gt;    let id3v2_library_dir = id3v2_build_path.join(&quot;src&quot;);&lt;br /&gt;    let id3v2_library_path = id3v2_library_dir.join(&quot;libid3v2.a&quot;);&lt;br /&gt;&lt;br /&gt;    if id3v2_path.exists() {&lt;br /&gt;        // TODO git pull&lt;br /&gt;    } else {&lt;br /&gt;        Repository::clone(url, id3v2_path).unwrap();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    match fs::create_dir_all(id3v2_build_path.to_str().unwrap()) {&lt;br /&gt;        Ok(()) =&amp;gt; {&lt;br /&gt;            let status = Command::new(&quot;cmake&quot;)&lt;br /&gt;                .current_dir(id3v2_build_path.to_str().unwrap())&lt;br /&gt;                .arg(&quot;..&quot;)&lt;br /&gt;                .status()&lt;br /&gt;                .expect(&quot;failed to cmake&quot;);&lt;br /&gt;            assert!(status.success());&lt;br /&gt;&lt;br /&gt;            let status = Command::new(&quot;make&quot;)&lt;br /&gt;                .current_dir(id3v2_build_path.to_str().unwrap())&lt;br /&gt;                .status()&lt;br /&gt;                .expect(&quot;failed to make&quot;);&lt;br /&gt;            assert!(status.success());&lt;br /&gt;&lt;br /&gt;            assert!(id3v2_library_path.exists());&lt;br /&gt;&lt;br /&gt;            println!(&quot;cargo:rustc-link-search=native={}&quot;, id3v2_library_dir.to_str().unwrap());&lt;br /&gt;            println!(&quot;cargo:rustc-link-lib=static=id3v2&quot;);&lt;br /&gt;        },&lt;br /&gt;        Err(_) =&amp;gt; ()&lt;br /&gt;    }&lt;br /&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;빌드 스크립트 역시 cargo build 명령으로 실행 할 수 있다.&lt;br /&gt;&lt;h4&gt;정리&lt;/h4&gt;&lt;div&gt;사이드 프로젝트를 진행 하면서 느낀 점은 Cargo는 사용법이 단순하고 무엇보다 Docker 처럼 배포가 간단해서 좋았다. 유닛 테스트는 다른 프레임 워크에 비해 기능이 부족 한게 약간 아쉽지만, 개인 프로젝트 전체 사이클을 소화 하는데는 부족함이 없었던 것 같다.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/4264508961041754751/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/03/cargo-cargo.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/4264508961041754751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/4264508961041754751'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/03/cargo-cargo.html' title='Cargo 패키지 시스템 - Cargo로 프로젝트 생성부터 배포까지'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-rRpNwHnWqKQ/WNkte9fD2PI/AAAAAAAAAzw/s1SKuvRxWsk9rADE8zqeIS5THJYN8LXGQCLcB/s72-c/Screenshot%2Bfrom%2B2017-03-12%2B15-09-25.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-166631988878767666</id><published>2017-03-27T00:08:00.001+09:00</published><updated>2017-03-28T01:03:53.218+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="cargo"/><category scheme="http://www.blogger.com/atom/ns#" term="lifetime"/><category scheme="http://www.blogger.com/atom/ns#" term="macro"/><category scheme="http://www.blogger.com/atom/ns#" term="ownership"/><category scheme="http://www.blogger.com/atom/ns#" term="rustlang"/><title type='text'>Rust를 배워보자</title><content type='html'>개인적으로 명시적으로 컴파일 되는 언어를 좋아 하고 Rust의 오너쉽(Ownership)모델이 이색적이어서 기회가 되면 Rust를 익혀 봐야지 했었다. 마침 소장하고 있는 mp3 파일들을 정리를 하던 중이라 &lt;a href=&quot;http://id3.org/&quot;&gt;ID3&lt;/a&gt; 검색기 겸  태거(Tagger)를 만들어 보기로 마음 먹었다. 대충 문법만 읽고 시작했다가 큰코 다쳤던 삽질기를 정리 해 둔다.&lt;br /&gt;&lt;br /&gt;짧은 소감은 오너쉽 모델 때문에 코딩이 더디다. 평소의 코딩 패턴도 바뀐다. 그렇지만 컴파일만 통과하면 견고한 결과물을 얻을 수 있다. 물론, 다른 언어로 개발하면 프로그램이 견고하지 않다는 뜻은 아니다. Mutable 변수와 Immutable 변수로 선언하는데 그치지 않고 값을 넘겨 줄 때 즉, 빌려줄 때 &quot;소유권 이전&quot;, &quot;읽기용 참조&quot; 그리고 &quot;수정용 참조&quot;로 명시 할 수 있어서 예상치 못한 데이터 변경 오류에 견고하다는 의미다.&lt;br /&gt;&lt;br /&gt;개발 할 땐 참고 서적/사이트, 개발 툴과 정보를 얻을 수 있는 커뮤니티를 중요하게 생각 하는 편인데, &lt;br /&gt;&lt;br /&gt;아직 Rust 관련된 책이 몇 권 없는게 아쉬웠다. 그렇지만 공식 사이트 &lt;a href=&quot;http://rust-lang.github.io/book&quot;&gt;http://rust-lang.github.io/book&lt;/a&gt;과 &lt;a href=&quot;https://doc.rust-lang.org/&quot;&gt;https://doc.rust-lang.org&lt;/a&gt; 이 훌륭해서 개인적으로 언어를 익히기엔 충분했고,&lt;br /&gt;&lt;br /&gt;패키지 시스템인 Cargo(&lt;a href=&quot;https://crates.io/&quot;&gt;https://crates.io/&lt;/a&gt;)가 마크다운 형식의 문서화 지원하고, Git 연동, 유닛 테스트 환경 그리고 크로스 컴파일 환경, 모듈 레지스터리 서비스 연동등을 제공한다. 물론, 빌드 스크립트도 작성 할 수 있고, 시스템 언어라서 크로스 컴파일도 지원한다. 무엇보다 사용법이 단순해서 학습곡선이 낮다는 점이 좋다.&lt;br /&gt;&lt;br /&gt;사용해본 개발툴은 Intellij와 Visual Studio Code 두가지 인데, IntelliJ는 IDE인 만큼 리팩토링 기능이나 호출자(Caller) 보기와 같은 기능이 더 지원 되지만 많이 무거웠지만, 양쪽 모두 코드 정의 가기(Go to Definition)가 잘 동작해서 표준 “std” 모듈은 물론, 프로젝트에 사용한 모듈의 코드를 볼 수 있어 큰 불편함은 없다. 인텔리J를 통해 컴파일 하면 노트북 팬이 너무 돌아서 후반엔 가벼운 VSCode를 사용했다.&lt;br /&gt;&lt;br /&gt;그 밖에 &lt;a href=&quot;https://users.rust-lang.org/&quot;&gt;https://users.rust-lang.org/&lt;/a&gt; 에는 매일 새글들이 올라오고 댓글도 잘 달리는 편이며, 커뮤니티 운영팀(&lt;a href=&quot;https://www.rust-lang.org/en-US/team.html#Community-team&quot;&gt;https://www.rust-lang.org/en-US/team.html#Community-team&lt;/a&gt;)과 문서팀(&lt;a href=&quot;https://www.rust-lang.org/en-US/team.html#Documentation-team&quot;&gt;https://www.rust-lang.org/en-US/team.html#Documentation-team&lt;/a&gt;)도 공식적으로 운영되고 있어서 Rust는 전반적으로 정돈되고 관리되는, 조직적인 프로젝트 느낌을 받았다.&lt;br /&gt;&lt;br /&gt;삽질 영역을 나누어 보니 크게 아래 정도다. 파트로 나누어 정리 해 두기로,,&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Cargo 패키지 시스템&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://free-strings.blogspot.com/2017/03/cargo-cargo.html&quot; target=&quot;_blank&quot;&gt;Cargo로 프로젝트 생성부터 배포까지&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Cargo.toml과 모듈 버전관리&lt;/li&gt;&lt;li&gt;Synology NAS에서 동작 할 수 있게 크로스 빌드&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Null이 없다. try~catch도 없다. Option과 Result&lt;/li&gt;&lt;li&gt;자바가 아니다. Trait과 Generic&lt;/li&gt;&lt;li&gt;상속을 표현 할 수 없다. enum, struct 그리고 match&lt;/li&gt;&lt;li&gt;삽질의 연속. Ownership과 Lifetime&lt;/li&gt;&lt;li&gt;기타. Macro, Closure&lt;/li&gt;&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/166631988878767666/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2017/03/rust.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/166631988878767666'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/166631988878767666'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2017/03/rust.html' title='Rust를 배워보자'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-7890330171288412482</id><published>2016-10-09T00:45:00.000+09:00</published><updated>2017-03-26T23:56:33.465+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="vertx"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-cpu"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-eventloop"/><category scheme="http://www.blogger.com/atom/ns#" term="vertx-singlethread"/><title type='text'>[Vert.x] Vertlcle, Event Loop 그리고 Thread</title><content type='html'>Vert.x 실행 할 때 Verticle 개수와 CPU 개수나 Thread 개수 연관 등이 궁금해서 잠시 테스트 해 보았다.&lt;br /&gt;&lt;br /&gt;Vert.x의 Verticle은 Event Loop에서 동작한다. 여기서 Event Loop는 Netty의 &quot;io.netty.channel.nio.NioEventLoop&quot;를 말하며, NIO Selector 기반이다.&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;NIO Selector &lt;a href=&quot;http://tutorials.jenkov.com/java-nio/selectors.html&quot; target=&quot;_blank&quot;&gt;설명&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;간단한 EventLoop &lt;a href=&quot;https://gist.github.com/AdoHe/30a33f3eb206c7639fe0)%20%20-%20NioEventLoop.java&quot; target=&quot;_blank&quot;&gt;구현&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/netty/netty/blob/eb7f751ba519cbcab47d640cd18757f09d077b55/transport/src/main/java/io/netty/channel/nio/NioEventLoop.java&quot; target=&quot;_blank&quot;&gt;NioEventLoop.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Event Loop Pool 개수는 NioEventLoop를 생성하는 개수가 된다. Event Loop Pool 개수를 지정 하지 않으면 아래가 기본 공식이다.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;2 * Runtime.getRuntime().availableProcessors()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Vert.x의 Verticle은 Event Loop에서 동작한다 했다. 정확히는 Event Loop는 Single Threaded Executor이고 Verticle은 하나의 실행 Task이다. Verticle이 실행 될 때 Thread 이름과 함께 로그를 남겨 보면 Verticle을 실행한 Event Loop의 Thread를 확인 할 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.App - !!!Start App!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-3               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!!&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-4               &lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!!&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;코드로 Event Loop Pool 크기를 지정 할 수 있는데,&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;VertxOptions vertxOptions &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; VertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;vertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;setEventLoopPoolSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;vertx &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Vertx&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;vertx&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;vertxOptions&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Event Loop Pool 개수를 Verticle 개수 보다 적게 만들어 보면 하나의 Event Loop에서 여러 개의 Verticle이 실행 됨을 알 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.App - !!!Start App!!! 17&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! 21&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! 21&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-0&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!! 22&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.web.Http - !!!Start Http!!! 22&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;그리고 스트레스 테스트를 해보면 Verticle 인스턴스는 처음 실행 된 Thread 에서 실행 되는 것을 알 수 있다. &amp;nbsp;(코드를 살펴보지 않아서 Event Loop가 생성 될 때 Verticle이 할당되는 것인지 실행 시점에 순차적으로 Verticle을 호출 하는 지는 알 수 없다,,)&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - !!!Start Redis!!! fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-2&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@64a96df&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;[&lt;/span&gt;vert.x-eventloop-thread-1&lt;span style=&quot;color: #333333;&quot;&gt;]&lt;/span&gt; INFO  fs.redis.Redis - Receive: fs.redis.Redis@10a7c8fe&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;정리하면&lt;/h3&gt;&lt;span style=&quot;background-color: #f6b26b;&quot;&gt;NIO Selector = NioEventLoop = SingleThreadEventLoop = Vert.x Event Loop&lt;/span&gt;의 관계가 된다. 그리고 &lt;span style=&quot;background-color: #f6b26b;&quot;&gt;Event Loop : Verticle = 1 : N &lt;/span&gt;의 관계도 성립 되며 Event Loop에서 여러 개의 Verticle이 실행되는 것은 Single Thread Executor 에서 실행되는 여러 Task의 관계로 볼 수 있다. 그래서 꼭 Core 개수와 Verticle 개수가 일치가 성능을 &amp;nbsp;좌우 하지 않음을 알 수 있다.&lt;br /&gt;&lt;h4&gt;참고&lt;/h4&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;siege -b -c100 -t 10S http://127.0.0.1:8080/vertx&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 1 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:          8866 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.58 secs&lt;br /&gt;Data transferred:         0.34 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.11 secs&lt;br /&gt;Transaction rate:       925.47 trans/sec&lt;br /&gt;Throughput:          0.04 MB/sec&lt;br /&gt;Concurrency:         99.24&lt;br /&gt;Successful transactions:        8866&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.33&lt;br /&gt;Shortest transaction:         0.10&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:          9706 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.92 secs&lt;br /&gt;Data transferred:         0.37 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.10 secs&lt;br /&gt;Transaction rate:       978.43 trans/sec&lt;br /&gt;Throughput:          0.04 MB/sec&lt;br /&gt;Concurrency:         99.56&lt;br /&gt;Successful transactions:        9706&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.16&lt;br /&gt;Shortest transaction:         0.10&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 2 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:         20908 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.55 secs&lt;br /&gt;Data transferred:         0.80 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.05 secs&lt;br /&gt;Transaction rate:      2189.32 trans/sec&lt;br /&gt;Throughput:          0.08 MB/sec&lt;br /&gt;Concurrency:         99.52&lt;br /&gt;Successful transactions:       20908&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.25&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:         22316 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.94 secs&lt;br /&gt;Data transferred:         0.85 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.04 secs&lt;br /&gt;Transaction rate:      2245.07 trans/sec&lt;br /&gt;Throughput:          0.09 MB/sec&lt;br /&gt;Concurrency:         99.45&lt;br /&gt;Successful transactions:       22316&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.11&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;-------------------------------------------------&lt;br /&gt;- 4 core&lt;br /&gt;- 5 verticle&lt;br /&gt;- 8 event loop pool count&lt;br /&gt;&lt;br /&gt;1회&lt;br /&gt;Transactions:         19887 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.04 secs&lt;br /&gt;Data transferred:         0.76 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.05 secs&lt;br /&gt;Transaction rate:      2199.89 trans/sec&lt;br /&gt;Throughput:          0.08 MB/sec&lt;br /&gt;Concurrency:         99.67&lt;br /&gt;Successful transactions:       19887&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.14&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;br /&gt;2회&lt;br /&gt;Transactions:         21064 hits&lt;br /&gt;Availability:        100.00 %&lt;br /&gt;Elapsed &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          9.38 secs&lt;br /&gt;Data transferred:         0.80 MB&lt;br /&gt;Response &lt;span style=&quot;color: #007020;&quot;&gt;time&lt;/span&gt;:          0.04 secs&lt;br /&gt;Transaction rate:      2245.63 trans/sec&lt;br /&gt;Throughput:          0.09 MB/sec&lt;br /&gt;Concurrency:         99.35&lt;br /&gt;Successful transactions:       21064&lt;br /&gt;Failed transactions:            0&lt;br /&gt;Longest transaction:         0.11&lt;br /&gt;Shortest transaction:         0.00&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/freestrings/playground/tree/master/vert.x&quot; target=&quot;_blank&quot;&gt;테스트 코드&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/7890330171288412482/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/10/vertx-vertical-event-loop-thread.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7890330171288412482'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/7890330171288412482'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/10/vertx-vertical-event-loop-thread.html' title='[Vert.x] Vertlcle, Event Loop 그리고 Thread'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-3583323039308797756</id><published>2016-06-14T14:43:00.000+09:00</published><updated>2017-03-26T23:56:14.868+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-internal"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-producer"/><title type='text'>[코드로 보는 카프카] Producer: BufferPool</title><content type='html'>&amp;nbsp;카프카 프로듀서는 메시지를 전송할 때 ByteBuffer를 사용한다. ByteBuffer는 생성하는 쓰레드에서 큰 메모리 단위를 생성하거나 여러 버퍼에 할당된 메모리를 해제할 때 쓰레드는 기아가 되거나 데드락이 될 수 있다. 이런 문제 때문에 프로듀서는 BufferPool을 사용한다. &amp;nbsp;이 BufferPool은 충분한 메모리가 확보 될 때 까지 쓰레드를 기다리게 할 수 있고, 이미 생성된 ByteBuffer를 재사용 할 수 있으며, 제한된 메모리로 동작할 수 있게 한다.&lt;br /&gt;&lt;br /&gt;실제 &lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/clients/producer/internals/BufferPool.java&quot; target=&quot;_blank&quot;&gt;BufferPool.java&lt;/a&gt;는 메트릭 관련 코드도 있고 다른 변수들이 있어 예시보다는 쬐~금 복잡하지만 allocate와 deallocate 부분만 간단히 구현해보고 메모리를 제한하는 방법과 쓰레드를 처리하는 동작 방식에 대해 알아 두기로 한다.&lt;br /&gt;&lt;br /&gt;코드를 보기 앞서 ByteBuffer.allocate와 ReentrantLock에 대해 먼저 알아보자.&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;ByteBuffer.allocate &amp;nbsp;vs ByteBuffer.allocateDirect&lt;/h4&gt;&lt;br /&gt;BufferPool은 allocate를 사용한다. 왜 allocateDirect를 사용하지 않는지는 &lt;a href=&quot;http://www.informit.com/articles/article.aspx?p=2133373&amp;amp;seqNum=12&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;에 설명 되어 있는데, 간단히 요약하면 아래 정도의 내용이 된다.&lt;br /&gt;생명주기가 짧거나 자주 사용되지 않는 객체에는 다이렉트 버퍼를 사용하지 않아야 한다. 왜냐하면, 다이렉트 버퍼는 OS 종속적인 네이티브 코드를 사용하기 때문에 힙기반 버퍼보다 생성과 메모리 반환 비용이 높고 가비지 컬렉터의 영역 밖이라 메모리 누수가 있을 수 있다. 용량이 큰 다이렉트 버퍼를 빈번하게 할당하면 OutofMemorryError가 생길 수 있다. &lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;/h4&gt;그리고, FileChannel 에서 non-direct Buffer와 direct Buffer 속도비교 (&lt;a href=&quot;http://blog.csdn.net/bestone0213/article/details/49093409&quot; target=&quot;_blank&quot;&gt;FileChannel and non-direct buffer vs. FileChannel and direct buffer&lt;/a&gt;,&amp;nbsp;중국어! 코드와 그림만 보자)&lt;br /&gt;버퍼가 256KB보다 작을땐 non-direct Buffer가 훨씬 빠르고, 256KB보다 클땐 direct Buffer가 약간 빠르다 &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s1600/130859399051483.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s400/130859399051483.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;&lt;br /&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html&quot; target=&quot;_blank&quot;&gt;ReentrantLock&lt;/a&gt;과 &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html&quot; target=&quot;_blank&quot;&gt;Condition&lt;/a&gt;&lt;/h4&gt;&lt;br /&gt;Condition에는 await 메소드가 있다. 조건이 만족스럽지 못할 때 현재 쓰레드를 멈추고 기다릴 때 사용한다. 지정된 시간 후 스스로 깨어날 수는 있지만 다른 쓰레드에서 signal이라는 메소드를 호출해 주어도 await 이후 로직을 수행 할 수 있다. 자바 Condition 문서에도 예제가 포함되어있지만,, 다른 예제를 만들어 보았다. &amp;nbsp;두개의 쓰레드가 아래(↓) 위(↑)&amp;nbsp; 화살표쌍을 출력하는 코드다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;42&lt;br /&gt;43&lt;br /&gt;44&lt;br /&gt;45&lt;br /&gt;46&lt;br /&gt;47&lt;br /&gt;48&lt;br /&gt;49&lt;br /&gt;50&lt;br /&gt;51&lt;br /&gt;52&lt;br /&gt;53&lt;br /&gt;54&lt;br /&gt;55&lt;br /&gt;56&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;ShareBasic&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    Lock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    Condition condition&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; interCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// volatile: https://twitter.com/_freestrings/status/688963217784082432&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; isUp&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;ShareBasic&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;iterCount&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;doUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;isUp&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            isUp &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;↑&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;doDown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;interCount&lt;span style=&quot;color: #333333;&quot;&gt;++&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;InterruptedException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;isUp&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                    e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            isUp &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;↓&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;동작방식은 아래와 같다.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;9L: isUp은 기본 false&lt;/li&gt;&lt;li&gt;19L: 방향이 up이 아닐동안 condition.await 한다. 즉, 현재 쓰레드를 블럭 시킨다.&lt;/li&gt;&lt;li&gt;48L: 방향을 up으로 바꾸고 &#39;↓&#39;를 출력한뒤, condition.signal()을 호출해 현재 조건(condition) 이 만족 할 때까지 await중인 다른 쓰레드를 깨운다.&lt;/li&gt;&lt;li&gt;26L: await가 풀리고, 방향을 바꾼뒤 &#39;↑&#39;을 출력한다.&lt;/li&gt;&lt;li&gt;36L: 반복하다가 지정된 카운트에 도달하면 예외를 던진다&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;실행을 하려면 두개의 쓰레드가 각각 doUp()과 doDown()을 호출 하도록 만들어 주면 되는데,&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; iterCount &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;20&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;ShareBasic share &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ShareBasic&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;iterCount&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;ExecutorService executorService &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Executors&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;((&lt;/span&gt;Runnable&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br /&gt;        IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; iterCount&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;doUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;((&lt;/span&gt;Runnable&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;doDown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        executorService&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;iterCount에 따라 다르겠지만 위아래 화살표 쌍이 한라인씩 보이게 된다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-jfVS7NznGPg/V1o1FD-kVtI/AAAAAAAAArs/X5nt0jPlUJg2hvr6W4BCrvRZsjhQwGuXACLcB/s1600/Screen%2BShot%2B2016-06-10%2Bat%2B12.31.06%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-jfVS7NznGPg/V1o1FD-kVtI/AAAAAAAAArs/X5nt0jPlUJg2hvr6W4BCrvRZsjhQwGuXACLcB/s640/Screen%2BShot%2B2016-06-10%2Bat%2B12.31.06%2BPM.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;아래는 카프카 프로듀서에서 사용하는 BufferPool이 ReentrantLock과 Condition을 어떻게 사용하고 있는지 그리고 여러개의 요청 쓰레드간 상태 흐름이 어떻게 되는지 살펴 보는 코드이다. 위 ShareBasic 예제와 비슷하지만 쓰레드별로 Condition을 보관하는 데크(Deque)가 추가 되어있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;42&lt;br /&gt;43&lt;br /&gt;44&lt;br /&gt;45&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;Share&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ReentrantLock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;Condition&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; waiters &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;    AtomicInteger counter &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; AtomicInteger&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;awaitTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;String name&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String prefix&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; counter&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;incrementAndGet&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            Condition condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;prefix &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; name &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;###&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getMessage&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;prefix &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;\t&quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; name &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition condition1 &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;removeFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; condition1&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Thread&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;currentThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: Wooops&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;signalTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            Condition condition &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;condition &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                condition&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;코드 내용을 살펴 보면,&lt;br /&gt;&lt;ol&gt;&lt;li&gt;9L: awaitTest가 호출 될때마다 새로운 Condition을 생성하고 큐에 넣는다.&lt;/li&gt;&lt;li&gt;16L: 호출한 쓰레드가 기다릴 시간을 1초로 저정한다. (1초가 지나면 자동으로 블럭된 쓰레드가 블럭이 풀리면서 이후 로직을 수행하게 된다. 실제 BufferPool에선 자동으로 블럭이 풀리면 타임아웃 에러를 발생시키기 때문에 해당 쓰레드는 지정된 시간동안 ByteBuffer를 할당받지 못했다는 의미가 된다)&lt;/li&gt;&lt;li&gt;23L: 큐헤더에 있는 Condition을 하나 꺼낸다. 그리고 9L에서 생성된 Condition인지 비교하고 다르면 예외를 던진다. 블럭된 시간동안(await 동안) 다른 쓰레드에서 큐헤더의 Condition을 풀어주지 않으면 해당 조건이 성립된다.&lt;/li&gt;&lt;li&gt;36L: 큐헤더에 있는 Condition을 꺼내지는 않고 대기중인 쓰레드가 깨어날 수 있게 호출만 해준다.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;위 코드는 여러 개의 요청 쓰레드가 블럭된 후 어떻게 깨어나며 쓰레드별로 타임아웃을 어떻게 만드는지가 포인트다. 그래서 두 개의 쓰레드로 awaitTest()를 호출하고 또 하나의 쓰레드는 siginalTest()를 호출해 블럭된 쓰레드를 깨워주는 방식으로 테스트할 수 있다. ShareBasic에서 처럼 쓰레드별 Condition으로 전달한 이름이 연속 출력되면 의도했던 결과가 된다.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;Share share &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Share&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;AwaitTestThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;start&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;AwaitTestThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; share&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;\t\t\t\t&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;).&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;start&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Timer timer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Timer&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;schedule&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; TimerTask&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        share&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signalTest&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;},&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;100&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;결과&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-mvQY02Rjoh8/V1plciQnHXI/AAAAAAAAAsE/wf4qvPBmppoeKaD33cwglQRe8p1YykDVQCLcB/s1600/Screen%2BShot%2B2016-06-10%2Bat%2B3.51.25%2BPM.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-mvQY02Rjoh8/V1plciQnHXI/AAAAAAAAAsE/wf4qvPBmppoeKaD33cwglQRe8p1YykDVQCLcB/s400/Screen%2BShot%2B2016-06-10%2Bat%2B3.51.25%2BPM.png&quot; width=&quot;295&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;SimpleBufferPool&lt;/h4&gt;&lt;br /&gt;자, 이제 SimpleBufferPool 을 살펴보자.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;  1&lt;br /&gt;  2&lt;br /&gt;  3&lt;br /&gt;  4&lt;br /&gt;  5&lt;br /&gt;  6&lt;br /&gt;  7&lt;br /&gt;  8&lt;br /&gt;  9&lt;br /&gt; 10&lt;br /&gt; 11&lt;br /&gt; 12&lt;br /&gt; 13&lt;br /&gt; 14&lt;br /&gt; 15&lt;br /&gt; 16&lt;br /&gt; 17&lt;br /&gt; 18&lt;br /&gt; 19&lt;br /&gt; 20&lt;br /&gt; 21&lt;br /&gt; 22&lt;br /&gt; 23&lt;br /&gt; 24&lt;br /&gt; 25&lt;br /&gt; 26&lt;br /&gt; 27&lt;br /&gt; 28&lt;br /&gt; 29&lt;br /&gt; 30&lt;br /&gt; 31&lt;br /&gt; 32&lt;br /&gt; 33&lt;br /&gt; 34&lt;br /&gt; 35&lt;br /&gt; 36&lt;br /&gt; 37&lt;br /&gt; 38&lt;br /&gt; 39&lt;br /&gt; 40&lt;br /&gt; 41&lt;br /&gt; 42&lt;br /&gt; 43&lt;br /&gt; 44&lt;br /&gt; 45&lt;br /&gt; 46&lt;br /&gt; 47&lt;br /&gt; 48&lt;br /&gt; 49&lt;br /&gt; 50&lt;br /&gt; 51&lt;br /&gt; 52&lt;br /&gt; 53&lt;br /&gt; 54&lt;br /&gt; 55&lt;br /&gt; 56&lt;br /&gt; 57&lt;br /&gt; 58&lt;br /&gt; 59&lt;br /&gt; 60&lt;br /&gt; 61&lt;br /&gt; 62&lt;br /&gt; 63&lt;br /&gt; 64&lt;br /&gt; 65&lt;br /&gt; 66&lt;br /&gt; 67&lt;br /&gt; 68&lt;br /&gt; 69&lt;br /&gt; 70&lt;br /&gt; 71&lt;br /&gt; 72&lt;br /&gt; 73&lt;br /&gt; 74&lt;br /&gt; 75&lt;br /&gt; 76&lt;br /&gt; 77&lt;br /&gt; 78&lt;br /&gt; 79&lt;br /&gt; 80&lt;br /&gt; 81&lt;br /&gt; 82&lt;br /&gt; 83&lt;br /&gt; 84&lt;br /&gt; 85&lt;br /&gt; 86&lt;br /&gt; 87&lt;br /&gt; 88&lt;br /&gt; 89&lt;br /&gt; 90&lt;br /&gt; 91&lt;br /&gt; 92&lt;br /&gt; 93&lt;br /&gt; 94&lt;br /&gt; 95&lt;br /&gt; 96&lt;br /&gt; 97&lt;br /&gt; 98&lt;br /&gt; 99&lt;br /&gt;100&lt;br /&gt;101&lt;br /&gt;102&lt;br /&gt;103&lt;br /&gt;104&lt;br /&gt;105&lt;br /&gt;106&lt;br /&gt;107&lt;br /&gt;108&lt;br /&gt;109&lt;br /&gt;110&lt;br /&gt;111&lt;br /&gt;112&lt;br /&gt;113&lt;br /&gt;114&lt;br /&gt;115&lt;br /&gt;116&lt;br /&gt;117&lt;br /&gt;118&lt;br /&gt;119&lt;br /&gt;120&lt;br /&gt;121&lt;br /&gt;122&lt;br /&gt;123&lt;br /&gt;124&lt;br /&gt;125&lt;br /&gt;126&lt;br /&gt;127&lt;br /&gt;128&lt;br /&gt;129&lt;br /&gt;130&lt;br /&gt;131&lt;br /&gt;132&lt;br /&gt;133&lt;br /&gt;134&lt;br /&gt;135&lt;br /&gt;136&lt;br /&gt;137&lt;br /&gt;138&lt;br /&gt;139&lt;br /&gt;140&lt;br /&gt;141&lt;br /&gt;142&lt;br /&gt;143&lt;br /&gt;144&lt;br /&gt;145&lt;br /&gt;146&lt;br /&gt;147&lt;br /&gt;148&lt;br /&gt;149&lt;br /&gt;150&lt;br /&gt;151&lt;br /&gt;152&lt;br /&gt;153&lt;br /&gt;154&lt;br /&gt;155&lt;br /&gt;156&lt;br /&gt;157&lt;br /&gt;158&lt;br /&gt;159&lt;br /&gt;160&lt;br /&gt;161&lt;br /&gt;162&lt;br /&gt;163&lt;br /&gt;164&lt;br /&gt;165&lt;br /&gt;166&lt;br /&gt;167&lt;br /&gt;168&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;BufferPool&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 풀링된 메모리를 제외하고 사용할 수 있는 메모리&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 기본 Buffer 크기&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    ReentrantLock lock &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ReentrantLock&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// deallocate 될 때 ByteBuffer를 쌓아둔다.&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; free &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;// 메모리를 할당받으려고 대기중인 쓰레드를 깨우기 위한 Condition을 모아둔다.&lt;/span&gt;&lt;br /&gt;    Deque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;Condition&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; waiters &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayDeque&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    ByteBuffer &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; maxTimeToBlock&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt;&lt;br /&gt;            TimeoutException&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            InterruptedException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 1. 풀링된 버퍼가 있으면 꺼내 쓴다&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 2. 메모리를 할당 할 수 있으면&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 풀링된 버퍼는 꺼내썼기 때문에 새로 ByteBuffer를 생성한다.&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;canBeNewlyAllocated&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                freeUp&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// !&lt;/span&gt;&lt;br /&gt;                lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newCondition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            waiters&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 3. 가용한 메모리가 없기 때문에 풀에 버퍼가 반납되거나&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 이전 쓰레드에서 메모리를 확보해 주기를 기다린다.&lt;/span&gt;&lt;br /&gt;            ByteBuffer buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; blockAwaitUntilAvailable&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                                  moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                                  maxTimeToBlock&lt;br /&gt;                                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            Condition removed &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;removeFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; removed&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                  &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;블럭시간 - moreMemory.awaite(..) 동안 deallocate 되지 않은 경우&quot;&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// deallocate 시점이 아니더라도 가용메모리가 확보 되었거나&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #888888;&quot;&gt;// 그 사이 풀에 반납된 버퍼가 있을 수 있으니 바로 다음 쓰레드를 깨워준다.&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt;&lt;br /&gt;                    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffer &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isHeldByCurrentThread&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;deallocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ByteBuffer buffer&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;lock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;capacity&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                buffer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;clear&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Waiters: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;            Condition moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;waiters&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;peekFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;moreMemory &lt;span style=&quot;color: #333333;&quot;&gt;!=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;                moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;signal&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            lock&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;unlock&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 가용한 메모리와 풀링된 버퍼를 모두 합해도 poolableSize 만큼 되지 않는 경우.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 현재 쓰레드를 블럭한뒤 deallocate 로 풀에 버퍼가 반납 되는 시점이나,&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 이전 쓰레드가 버퍼 할당을 마치는 시점에 poolableSize가 확보 되었는지 체크한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; ByteBuffer &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;blockAwaitUntilAvailable&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        Condition moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;        &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; maxTimeToBlock&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throws&lt;/span&gt; InterruptedException&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; accumulated &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        ByteBuffer buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;accumulated &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Start block..&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;moreMemory&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;await&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    maxTimeToBlock&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                    TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;TimeoutException&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                  &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;지정된 시간동안 메모리를 할당하지 못함&quot;&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;accumulated &lt;span style=&quot;color: #333333;&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// 그 사이 deallocate 되면서 버퍼가 풀에 반납되었을 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                buffer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollFirst&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;                accumulated &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #888888;&quot;&gt;// 가용한 메모리 확보&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                freeUp&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;-&lt;/span&gt; accumulated&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; got &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; Math&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;min&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                    poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;-&lt;/span&gt; accumulated&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;br /&gt;                    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt;&lt;br /&gt;                &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;-=&lt;/span&gt; got&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;                accumulated &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; got&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; buffer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 사용하고 있는 메모리와 풀에 있는 버퍼크기의 총합이 기본 버퍼크기보다 크다면 &lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 새로 버퍼를 생성 할 수 있다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;canBeNewlyAllocated&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;size&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poolableSize&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #888888;&quot;&gt;/**&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     * 할당하려는 크기보다 작으면 pooling된 버퍼를 해제해서 가용한 메모리를 확보한다.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #888888;&quot;&gt;     */&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;freeUp&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; size&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(!&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;isEmpty&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; size&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;availableMemory&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;free&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;pollLast&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;capacity&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;짧게 만든다고 만들었는데,, 원래 코드와 차이도 적고 길다. 그래서 자세한? 주석을 넣었다. -:)&lt;br /&gt;&lt;br /&gt;Condition.signal()을 호출하는 부분과 Condition.await(..) 부분을 중심으로 코드를 살펴보면 쓰레드 블러킹은 위에서 보여준 예제 흐름과 동일하다. 메모리 관리부분을 중심으로 살펴 보자.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;156L: Deque&amp;lt;ByteBuffer&amp;gt; free.size() * poolableSize + availableMemory가 사용중인 메모리가 된다&lt;/li&gt;&lt;li&gt;162L: 할당해야 하는 즉, 할당하려는 메모리가 부족하면 풀링된(deallocate면 풀에 반납됨) ByteBuffer를 제거해 availableMemory를 재계산하는 로직이다. 이 freeUp 호출시점은 allocate 중에, 풀에 반납된 버퍼가 없거나, 더이상 할당 받을 메모리가 없어서 쓰레드가 가용한 메모리가 생길 때 까지 기다린 후 다시 availableMomory 재계산때가 호출시점이 된다.&lt;/li&gt;&lt;li&gt;4L: 사용할 수 있는 메모리&lt;/li&gt;&lt;li&gt;5L: 기본 할당 크기로 실제는 프로듀서의 batch.size 설정이다&lt;/li&gt;&lt;li&gt;56L: 쓰레드가 블럭된 동안 다른 쓰레드에서 블럭을 풀어주는게 아니라 타임아웃으로 블럭이 풀리면 해당 조건이 만족되는데, 타임아웃으로 블럭이 풀리면 예외가 발생하기 때문에 실제로는 발생하지 않아야 정상이다.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;끝으로 BufferPool을 사용하는 코드를 살펴보자.&lt;br /&gt;실제 BufferPool은 메시지 전송을 요청하는 쓰레드에서 BufferPool.allocate()하고 응답을 처리하는 쓰레드에서 BufferPool.deallocate() 한다. &lt;br /&gt;1. 가용메모리가 10MB이고 10개 쓰레드가 1MB씩 할당 했으므로 정상.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;2. 가용메모리가 10MB이고 11개 쓰레드가 1MB씩 할당 했으므로 에러발생.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;3. 가용메모리가 10MB이고 11개 쓰레드가 1MB씩 할당 했지만, 타임아웃 전에 ByteBuffer를 하나 반납했기 때문에 정상.&lt;br /&gt;&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;long&lt;/span&gt; availableMemory &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; poolableSize &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;BufferPool bufferPool &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; BufferPool&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;availableMemory&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; poolableSize&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; buffers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayList&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Timer timer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Timer&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;schedule&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; TimerTask&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;Start deallocate&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;        bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deallocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;buffers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;        timer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;cancel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;},&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;2990&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;IntStream&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;range&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;11&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;parallel&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i &lt;span style=&quot;color: #333333;&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                buffers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;bufferPool&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;allocate&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;3000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;TimeoutException &lt;span style=&quot;color: #333333;&quot;&gt;|&lt;/span&gt; InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;            &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;실제 &lt;a href=&quot;https://github.com/apache/kafka/blob/0.9.0/clients/src/test/java/org/apache/kafka/clients/producer/internals/BufferPoolTest.java&quot; target=&quot;_blank&quot;&gt;BufferPoolTest.java&lt;/a&gt;&lt;span id=&quot;goog_754478517&quot;&gt;&lt;/span&gt;&lt;span id=&quot;goog_754478518&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;/a&gt; 코드와는 SimpleBufferPool과 차이가 있지만 살펴 보고자 했던 부분이 쓰레드 처리와 메모리 제한에 관한 로직이라 테스트 코드로 적합하다고 봄..&lt;br /&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;결론&lt;/h4&gt;&lt;br /&gt;&amp;nbsp;카프카는 설정이 많아 설정이 실제 어떻게 적용되는지 궁금했었다. &amp;nbsp;쓰레드 동기화 처리가 일반적인 Object Pool과 어떻게 다른지, 메모리 사용량을 제한 한다는 것이 어떤 특별함이 있는지 궁금했었는데, 마침 관련 코드가 간단해서 쓰레드가 메모리를 할당을 기다릴 수 있고, 제한된 용량 만큼 사용할 수 있는지 파악하는 데 많은 도움이 되었다.&lt;br /&gt;&lt;br /&gt;부가적으로 Locking과 ByteBuffer.allocate 관련 코드에 이해되지 않는 부분이 있어 테스트한 코드가 있다. &amp;nbsp;ByteBuffer.allocate() 전에 lock을 푸는 것과 이후에 푸는 것에 대한 차이점에 관한 것이다. #아몰랑~&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockcondition-java&quot; target=&quot;_blank&quot;&gt;LockingOfByteBufferAllocation.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;전체 코드는 아래&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/c50e9cf481f570a2b784025b3b143036&quot; target=&quot;_blank&quot;&gt;SimpleKafkaBufferPool.java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockconditionbasic-java&quot; target=&quot;_blank&quot;&gt;ReentrantLockConditionBasic.java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gist.github.com/freestrings/f252af60cb7a992ee2df0dfd7c39cfa0#file-reentrantlockcondition-java&quot; target=&quot;_blank&quot;&gt;ReentrantLockCondition.java&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='https://free-strings.blogspot.com/feeds/3583323039308797756/comments/default' title='댓글'/><link rel='replies' type='text/html' href='https://free-strings.blogspot.com/2016/06/producer-bufferpool.html#comment-form' title='0개의 덧글'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3583323039308797756'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/578282567400059547/posts/default/3583323039308797756'/><link rel='alternate' type='text/html' href='https://free-strings.blogspot.com/2016/06/producer-bufferpool.html' title='[코드로 보는 카프카] Producer: BufferPool'/><author><name>freestrings</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://4.bp.blogspot.com/-OBGUlNvDjrw/Vb9qHmHkMHI/AAAAAAAAAbo/zAuxk5c9uFA/s220/freestrings.png'/></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-Idb3tUFF2OE/WNfWQcpV1eI/AAAAAAAAAzY/vAe_PUyaeMg4ii59YqnT4isF__R7Lcs2QCLcB/s72-c/130859399051483.png" height="72" width="72"/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-578282567400059547.post-1342073844766517629</id><published>2016-05-11T19:20:00.001+09:00</published><updated>2017-02-20T15:28:04.302+09:00</updated><category scheme="http://www.blogger.com/atom/ns#" term="kafka"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-0.9"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-consumer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka-consumer-client"/><category scheme="http://www.blogger.com/atom/ns#" term="kafka0.9"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConsumer"/><category scheme="http://www.blogger.com/atom/ns#" term="kafkaConsumerClient"/><title type='text'>[번역] 카프카 컨슈머 소개: 새 아파치 카프카 0.9 컨슈머 클라이언트 시작하기</title><content type='html'>&amp;nbsp;카프카 컨슈머 클라이언트 0.9.0 에 대한 글이 있어서 학습차 요약정리 해두기로 했음. 발번역이고 의역과 생략된 내용 있으니,,, ((((( &#39; &#39;)&lt;br /&gt;&lt;br /&gt;원문: &lt;a href=&quot;http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client&quot;&gt;http://www.confluent.io/blog/tutorial-getting-started-with-the-new-apache-kafka-0.9-consumer-client&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;원작자: Jason Gustafson&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;애초에 카프카는 스칼라로 만들어진 프로듀서와 컨슈머 클라이언트를 제공했다. 시간이 지나면서 이 API에 많은 제약이 있음을 깨닫게 되었다. 예를 들어, 컨슈머 그룹을 지원하고 Failover 처리하는  ‘high-level’ 컨슈머 API가 있지만 더 복잡한 시나리오를 지원하지 못했다. 그리고 풀 컨트롤을 제공하는 “simple” 컨슈머 클라이언트가 있지만 사용자가 Failover와 에러 처리를 직접해야 했다. 그래서 다양한 사례를 처리하기 위해 클라이언트를 다시 디자인하기 시작했다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;첫 단계로 0.8.1에 Producer API를 다시 작성하고, 두 번째 단계로 새(&lt;i&gt;new&lt;/i&gt;) 컨슈머 API 소개하는 0.9 배포가 최근에 완료되었다. 카프카에서 제공하는 새(&lt;i&gt;new&lt;/i&gt;) 그룹 코디네이션 프로토콜 기반으로 새 컨슈머를 개발하면 아래와 같은 이점을 가질 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;깔끔하게 통합된 API: 새 컨슈머는 예전의 “심플” 하고 “고수준&quot; 컨슈머 클라이언트의 두가지 능력을 결함하고, &amp;nbsp;자신만의 소비 전략을 만들기 위해&amp;nbsp;그룹 코디네이션과 &amp;nbsp;저수준의 접근성 두가지를 결합한다.&lt;/li&gt;&lt;li&gt;의존성 감소: &lt;u&gt;새 컨슈머는 순수 자바로 작성&lt;/u&gt;되었다. &lt;u&gt;스칼라 런타임이나 주키퍼에 의존성이 없어&lt;/u&gt;서 프로젝트에 포함 시킬 수 있는 더 가벼운 라이브러리를 만들 수 있다.&lt;/li&gt;&lt;li&gt;향상된 보안: 카프카 0.9에 구현된 &lt;a href=&quot;https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=51809888&quot;&gt;보안확장&lt;/a&gt;은 새 컨슈머에만 지원된다.&lt;/li&gt;&lt;li&gt;또한, &lt;u&gt;새 컨슈머는 컨슈머 프로세스 그룹의 Fault-Tolerant를 관리하기 위해 프로토콜 세트(&lt;i&gt;set&lt;/i&gt;)를 제공&lt;/u&gt;한다. 이전에 이 기능은 주키퍼와 통신하는 무거운 구현었다. 로직이 복잡해 다른 언어에서 전체 기능구현이 어려웠으나, 새 프로토콜의 소개로 현재는 구현이 쉬워졌다. 사실, 이미 &lt;a href=&quot;https://github.com/edenhill/librdkafka&quot;&gt;C 클라이언트&lt;/a&gt;는 이 프로토콜로 (구현을) 옮겼다.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;새 컨슈머는 새로 디자인된 API를 사용하고 새 코디네이션 프로토콜을 사용하지만, 콘셉트는 기본적으로 다르지 않아서 이전(0.9 이전) 컨슈머에 익숙한 사용자가 이해하는데 문제가 없다. 그러나 그룹 관리와 스레딩 모델에 미묘한 디테일이 있어 주의가 필요하다. 이 튜토리얼의 목적은 새 컨슈머의 기본 사용법을 다루고 이 사용법들의 세부적인 내용을 설명하고자 함이다.&lt;br /&gt;&lt;br /&gt;유의할 점: 글을 쓰는 시점에 새 컨슈머는 안전성이란 용어에서 여전히 “베타”이고 몇 가지 중요한 버그가 0.9.0 브랜치에서 수정 되었다. 0.9.0 브랜치에서 테스트할 것을 권고하고 여전히 문제가 있으면 메일 리스트나 지라로 리포트를..&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Getting Started&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;코드를 보기 전에 기본 콘셉트를 살펴보면, 카프카에서 각 &lt;u&gt;토픽은 파티션으로 나누어진다&lt;/u&gt;. 그리고 &lt;u&gt;파티션은 로그(log)의 집합&lt;/u&gt;이다. &lt;u&gt;프로듀서는 이 로그들 끝에 쓰고 컨슈머는 자기 페이스에 따라 로그를 읽는다&lt;/u&gt;. 카프카는 컨슈머 그룹 간에 &lt;u&gt;파티션을 분산해서 토픽 소비(&lt;i&gt;consumption&lt;/i&gt;)를 스케일(&lt;i&gt;scale&lt;/i&gt;)&lt;/u&gt;한다. &lt;u&gt;컨슈머 그룹은 공통 그룹 식별자(&lt;i&gt;identifier&lt;/i&gt;)를 공유하는 세트&lt;/u&gt;이다. 아래 그림은 세 개의 파티션을 가진 단일 토픽과 두 멤버를 가진 컨슈머 그룹을 보여준다. &lt;u&gt;토픽의 각 파티션은 정확히 그룹 내의 한 멤버에게 할당&lt;/u&gt;된다.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-LFPTS_XmjFs/VzLiNUr4hBI/AAAAAAAAAk0/3yk1VcwGxvEJq_w0B7kPOeTtPs-rEMCdwCLcB/s1600/New_Consumer_figure_1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;192&quot; src=&quot;https://3.bp.blogspot.com/-LFPTS_XmjFs/VzLiNUr4hBI/AAAAAAAAAk0/3yk1VcwGxvEJq_w0B7kPOeTtPs-rEMCdwCLcB/s400/New_Consumer_figure_1.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;옛날 컨슈머는 그룹 관리를 위해 주키퍼에 의존하는 반면, 새 컨슈머는 카프카 자체로 만든 그룹 코디네이션 프로토콜을 사용&lt;/u&gt;한다. 각 그룹의 브로커들 중에 하나가 코디네이터로 선택된다. 코디네이터는 그룹의 상태를 관리할 책임이 있고, 코디네이터의 주된 일은 새 멤버가 오고 갈 때, 그리고 토픽 메타데이터가 변할 때 파티션 할당을 중재 하는것이다. 파티션 재할당 동작은 그룹 재균형(&lt;i&gt;rebalance&lt;/i&gt;)으로 알려져 있다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;그룹이 처음 초기화될 때, 컨슈머는 보통 각 파티션의 가장 처음 또는 가장 마지막 오프셋 둘 중 하나에서 읽기 시작한다. 그런 후 각 파티션 로그에서 메시지가 순차적으로 읽힌다. &lt;u&gt;컨슈머는 성공적으로 처리된 메시지의 오프셋을 커밋(&lt;i&gt;commit&lt;/i&gt;)&lt;/u&gt; 하는데, 예를 들어, 아래 그림에서 컨슈머의 위치는 오프셋이 6이고 마지막 커밋된 오프셋은 1이된다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-eNhbFBaMWNk/VzLi9O48_MI/AAAAAAAAAk8/j1jWY1_Xo90oBlxOUfkBQGncNlGhllbBgCLcB/s1600/New_Consumer_Figure_2.png&quot; imageanchor=&quot;1&quot; style=&quot;text-align: center;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;125&quot; src=&quot;https://3.bp.blogspot.com/-eNhbFBaMWNk/VzLi9O48_MI/AAAAAAAAAk8/j1jWY1_Xo90oBlxOUfkBQGncNlGhllbBgCLcB/s400/New_Consumer_Figure_2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;파티션이 그룹의 다른 컨슈머에 재할당 될 때, 초기 위치는 마지막에 커밋된 오프셋으로 세팅된다. 위 예제에서 컨슈머가 갑자기 크래시(crash) 나면, 파티션을 인수한 그룹 멤버는 오프셋 1부터 소모를 시작한다. 이 경우, 크래시가 생긴 컨슈머의 위치인 6까지 메시지를 재처리 해야한다.&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;또한, 이 다이어 그램은 로그에서 두가지 다른 의미 있는 위치를 보여준다. &lt;u&gt;&quot;Log End Offset&quot;은 로그에 마지막으로 쓰인 오프셋&lt;/u&gt;이고, &lt;u&gt;&quot;High Watermark&quot;는 모든 복제 로그에 성공적으로 카피된 최종 메시지의 오프셋&lt;/u&gt;이다. 컨슈머의 관점에서 알아야 할것은 단지 &quot;High Watermark&quot;까지만 읽어 올라갈 수 있다는 것이다. 이것은 컨슈머가 복제되지 않은 메시지가 읽히는 것을 방지한다. 복제되지 않은 메시지는 소실될 수 있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Configuration and Initialization&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;컨슈머를 시작하려면, kafka-client 의존성을 프로젝트에 추가해야한다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.kafka&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;artifactId&amp;gt;&lt;/span&gt;kafka-clients&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt; &amp;lt;version&amp;gt;&lt;/span&gt;0.9.0.0-cp1&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #007700;&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;컨슈머는 다른 카프카 클라이언트와 마찬가지로 프로퍼티를 사용해서 생성된다. 아래 예에서는 컨슈머 그룹을 사용하기 위해 필요한 최소 설정을 제공하고 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;Properties props &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Properties&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;group.id&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;key.deserializer&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;value.deserializer&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이전 컨슈머와 프로듀서처럼, 컨슈머가 나머지 클러스터를 찾을 수 있게 &lt;u&gt;초기 브로커 리스트를 설정&lt;/u&gt;할 필요가 있지만, 클러스터 내 모든 서버를 필요로 하지 않는다. – 클라이언트는 이 리스트에서 살아있는 전체 브로커 세트를 결정한다. 여기에서는 브로커가 로컬(localhost)에서 동작하는 것으로 가정했고, 컨슈머가 어떻게 메시지 키와 값을 역직렬화 하는지 이야기할 필요가 있다. 마지막으로, 컨슈머 그룹에 가입하려면 그룹 ID를 설정해야 한다. 이 튜토리얼을 진행하면서 더 많은 설정을 소개 할 것이다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Topic Subscription&lt;/h3&gt;&lt;br /&gt;&lt;u&gt;소비를 시작하려면, 처음에 어플리케이션이 읽으려고 하는 토픽을 구독&lt;/u&gt;해야한다. 아래 예에서는  “foo”와 “bar” 토픽을 구독하고 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Arrays&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;));&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;구독 후에, 컨슈머는 파티션을 할당하기 위해 나머지 그룹을 조정 할 수 있다. 이 과정은 데이터를 소모하기 시작할 때 모두 자동으로 된다. 뒷부분에서 어떻게 assign API를 사용해서 수동으로 파티션을 할 수 있는지 보여 주겠지만, 자동과 수동 할당을 섞어 사용하는 것은 불가능함을 염두해야 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;구독 방법은 증분(&lt;i&gt;incremental&lt;/i&gt;)이 아니다 (치환이 되지 누적되어 쌓이지 않는다): 반드시 소비하려는 전체 토픽 리스트를 포함해야 한다. &lt;u&gt;언제든 구독했던 토픽 세트를 변경할 수 있다&lt;/u&gt;. – 이전에 구독했던 토픽은 subscribe를 호출할 때 새 리스트로 치환된다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Basic Poll Loop&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;&lt;u&gt;컨슈머는&lt;/u&gt; 잠재적으로 여러 브로커에 걸쳐 흩어진 여러 토픽의 파티션에서 &lt;u&gt;데이터를 병렬로 패치할 필요가 있어서, 유닉스의 select나 poll과 유사한 API 스타일을 사용한다&lt;/u&gt;: 일단 토픽이 등록되면, 모든 future 코디네이션, 재균형, 그리고 데이터 패치가 이벤트 루프에서 호출한 단일 poll 호출을 통해 떨어진다. 이 스타일은 싱글 스레드에서 IO를 처리할 수 있는 간단하고 효과적인 구현이 되게 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;토픽 구독을 시작한 후, 파티션을 할당 받고 데이터 패치를 하려면 이벤트 루프를 실행해야 한다. 복잡하게 들리지만, 필요한 것은 &lt;u&gt;루프로 poll을 호출&lt;/u&gt; 하고 컨슈머는 나머지를 처리하게 된다. 각 poll 호출은 파티션에 할당된 메시지 세트를 리턴한다. 예를 들어, 아래는 메세지가 오는 대로 오프셋과 패치된 레코드값을 출력하는 기본 poll 루프다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;running&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;1000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;poll API는 현재 포지션에 기반해 패치한 레코드를 반환&lt;/u&gt;한다. 그룹이 처음 생성될 때, reset 정책에 따라 포지션이 세팅된다 (보통 각 파티션의 최초 또는 마지막의 오프셋임). 한번 컨슈머가 오프셋을 커밋하기 시작하면, 포지션은 나중에 재균형 작업으로 인해 마지막 커밋된 오프셋으로 리셋된다. &lt;u&gt;Poll 할 때 전달된 파라메터는 (&lt;i&gt;컨슈머가 현재 포지션에 있는&lt;/i&gt;) 레코드를 기다릴 때 사용하는 최대 블럭 시간&lt;/u&gt;이다. 컨슈머는 레코드가 가용하다면 즉각 리턴을 하지만, 가용한 레코드가 없다면 리턴전에 정해진 타임아웃 동안 기다린다.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&amp;nbsp;컨슈머는 컨슈머 자신의 스레드에서 동작하도록 디자인되었고, 스레드 세이프(&lt;i&gt;thread safe&lt;/i&gt;) 하지 않다&lt;/u&gt;. 이 예제에서는, 사용되는 플래그는 애플리케이션이 셧다운 되어 이벤트 루프를 빠져나올 때 사용된다. 플래그가 다른 스레드에서 false로 바뀌면, 루프는 poll 리턴을 하자마자 끝날것이고 애플리케이션은 모든 레코드가 반환되면 처리를 마친다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&lt;u&gt;컨슈머는 작업이 끝나면 항상 close 돼야 한다&lt;/u&gt;. 사용한 소켓을 정리하는 것뿐만 아니라, 컨슈머가 코디네이터에게 그룹에서 떠난다는 것을 알린다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 예제는 컨슈머가 셧다운 할 때 너무 오래 지연되지 않게 상대적으로 짧은 타임아웃을 사용했다. 대안으로, 긴 타임아웃을 사용하고 &lt;u&gt;wakeup API를 사용해 루프를 탈출할 수도 있다&lt;/u&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Long&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt;&lt;br /&gt;   System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;br /&gt;    record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;WakeupException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #888888;&quot;&gt;// ignore for shutdown&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;타임아웃을 Long.MAX_VALUE로 변경했다. 기본적으로 컨슈머는 다음 레코드가 반환 될 때 까지 무기한 블록(block) 됨을 의미한다. 이전 예제같이 플래그를 세팅하는 대신, 스레드 셧다운 트리거가 동작 중인 poll을 인트럽트 하는 consumer.wakeup() 호출해서 WakeupException을 발생시킬 수 있다. &lt;u&gt;이 wakeup API는 다른 스레드에서 사용하기 안전하다 (스레드 세이프 하다)&lt;/u&gt;. 주의할 것은 동작 중인 poll이 없다면, 다음 호출에서 exception이 발생한다. 이 예제에서는, 예외가 전파되는 것을 방지하기 위해 catch 하고 있다.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Putting it all Together&lt;/h3&gt;&lt;br /&gt;&amp;nbsp;다음 예제는, 컨슈머를 초기화, 토픽 리스트를 구독, 그리고 외부에서 셧다운 까지 poll 루프로 무한 실행하는 간단한 Runnable 태스크다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #bb0066; font-weight: bold;&quot;&gt;ConsumerLoop&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;implements&lt;/span&gt; Runnable &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;ConsumerLoop&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                     String groupId&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                     List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; id&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;topics&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  Properties props &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Properties&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;bootstrap.servers&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;localhost:9092&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;group&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; groupId&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;key&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deserializer&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;  props&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;“&lt;/span&gt;value&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;deserializer&lt;/span&gt;&lt;span style=&quot;background-color: #ffaaaa; color: red;&quot;&gt;”&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; StringDeserializer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getName&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;consumer&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;subscribe&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;topics&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    ConsumerRecords&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; records &lt;br /&gt;     &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;poll&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;Long&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; records&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     Map&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; Object&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; data &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; HashMap&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;partition&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     data&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; record&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;());&lt;/span&gt;&lt;br /&gt;     System&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;id&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;+&lt;/span&gt; data&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;WakeupException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #888888;&quot;&gt;// ignore for shutdown&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;close&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;  &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;wakeup&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예제를 테스트 하려면, 카프카 브로커0.9.0.0 릴리즈와 소비할 수 있는 문자열 데이터가 있는 토픽이 필요하다. 문자열 데이터를 만드는 가장 쉬운 방법은 kafka-verifiable-producer.sh 스크립트를 사용하면 된다. 로컬 호스트에서 동작하는 싱글 카프카 브로커와 주키퍼를 두고, 배포된 카프카 루트에서 아래를 실행하면 된다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;bin/kafka-topics.sh --create --topic consumer-tutorial --replication-factor 1 --partitions 3 --zookeeper localhost:2181&lt;br /&gt;&lt;br /&gt;bin/kafka-verifiable-producer.sh --topic consumer-tutorial --max-messages 200000 --broker-list localhost:9092&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;그런 후, 세 멤버로 컨슈머 그룹을 셋업하는 작은 드라이버를 생성하고, 모두 금방 생성한 같은 토픽을 구독하게 한다.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;[]&lt;/span&gt; args&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt; &lt;br /&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; numConsumers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt; String groupId &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial-group&quot;&lt;/span&gt;&lt;br /&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; topics &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Arrays&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;asList&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0;&quot;&gt;&quot;consumer-tutorial&quot;&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; ExecutorService executor &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; Executors&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;newFixedThreadPool&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;numConsumers&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;final&lt;/span&gt; List&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt;ConsumerLoop&lt;span style=&quot;color: #333333;&quot;&gt;&amp;gt;&lt;/span&gt; consumers &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ArrayList&lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;int&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt; i &lt;span style=&quot;color: #333333;&quot;&gt;&amp;lt;&lt;/span&gt; numConsumers&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt; i&lt;span style=&quot;color: #333333;&quot;&gt;++)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ConsumerLoop consumer &lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; ConsumerLoop&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;i&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; groupId&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; topics&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  consumers&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;add&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;  executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;submit&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;consumer&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt; Runtime&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;getRuntime&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;addShutdownHook&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;new&lt;/span&gt; Thread&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #555555; font-weight: bold;&quot;&gt;@Override&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066bb; font-weight: bold;&quot;&gt;run&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;ConsumerLoop consumer &lt;span style=&quot;color: #333333;&quot;&gt;:&lt;/span&gt; consumers&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     consumer&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;br /&gt;    executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;shutdown&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;();&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     executor&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;awaitTermination&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000dd; font-weight: bold;&quot;&gt;5000&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;);&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;(&lt;/span&gt;InterruptedException e&lt;span style=&quot;color: #333333;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     e&lt;span style=&quot;color: #333333;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000cc;&quot;&gt;printStackTrace&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;   &lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt; &lt;span style=&quot;color: #333333;&quot;&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;이 예는 executor에 세 개의 runnable 컨슈머를 submit 한다. 각 스레드에는 데이터를 받는 것을 (구분해서) 볼 수 있게 독립된 아이디가 주어진다. 셧다운 훅은 프로세스가 멈출 때 호출되며, wakeup을 사용하는 세 개의 스레드를 멈추고 스레드가 셧다운 될 때까지 기다린다. 실행해 보면, 모든 스레드에서 데이터를 볼 수 있다.&lt;br /&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style=&quot;background: #ffffff; border-width: 0.1em 0.1em 0.1em 0.8em; border: solid gray; overflow: auto; padding: 0.2em 0.6em; width: auto;&quot;&gt;&lt;pre style=&quot;line-height: 125%; margin: 0;&quot;&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;928, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2786&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;929, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2789&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;297, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;891&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;930, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2792&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;298, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;894&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;931, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2795&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;0: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;1, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;278, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;835&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;2: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;0, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;932, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2798&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;0: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;1, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;279, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;838&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;299, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;897&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;2, &lt;span style=&quot;color: #996633;&quot;&gt;offset&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;300, &lt;span style=&quot;color: #996633;&quot;&gt;value&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/span&gt;900&lt;span style=&quot;color: #333333;&quot;&gt;}&lt;/span&gt;&lt;br /&gt;1: &lt;span style=&quot;color: #333333;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #996633;&quot;&gt;partition&lt;/span&gt;&lt;span style=&quot;color: #333333;&quot;&gt;=&lt;/spa