<?xml version="1.0" encoding="UTF-8" ?>








<rss version="2.0"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/"
	xmlns:activity="http://activitystrea.ms/spec/1.0/" >
<channel>
	
		
			<title><![CDATA[코딩과 디버깅 사이]]></title>
			<link>https://blog.naver.com/occidere</link>
			
				<image>
					<url><![CDATA[https://blogpfthumb-phinf.pstatic.net/20160813_28/occidere_1471036153183W7iLo_JPEG/profileimage.jpg?type=m2]]></url>
					<title><![CDATA[코딩과 디버깅 사이]]></title>
					<link>https://blog.naver.com/occidere</link>
				</image>
			
			<description><![CDATA[(현) NAVER SW Developer
(전) 국민대학교 소프트웨어공학부
Algorithm / IT / OpenSource / Programming]]></description>
			<language>ko</language>
			<generator>Naver Blog</generator>
			<pubDate>Tue, 14 May 2019 20:23:48 +0900</pubDate>

			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 2229 - 조 짜기]]></title>
					<link>https://blog.naver.com/occidere/221535723529</link>
					<guid>https://blog.naver.com/occidere/221535723529</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/2229문제 풀이정말 오랫만에 알고리즘을 푸느랴 꽤나 헤맸었다.심지어 문제의 요구사항 조차 이해가 잘 안갔는데 결국 구하고자 하는 것은 아래와 같다.주어진 배열을 1개 이상의 연속된 순서의 순열의 그룹으로 묶었을 때, 각 그룹 내의 최대값 - 최소값의 총 합이 최대로 되는 경우를 찾는 것이다.즉 주어진 배열이 2 5 7 1 3 라면 앞에서 부터 순서대로 (2 5) (7 1) 3 처럼 순서대로 묶고, 각 그룹의 최대값 - 최소값 의 총 합 (3 + 6 + 0) 이 최대가 되게 해야 되는 것이다.접근 방식은 아래와 같다.- 각 점수를 입력받을 때 마다 맨 처음 ~ 현재 입력받은 점수 구간을 묶었을 때의.......]]></description>
					<pubDate>Sun, 12 May 2019 19:33:29 +0900</pubDate>
					<tag><![CDATA[알고리즘,Algorithm,백준,DP,동적계획법,DynamicProgramming,다이나믹프로그래밍,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[그래프&#160;이론]]></category>
					<title><![CDATA[[백준] 5719 - 거의 최단 경로]]></title>
					<link>https://blog.naver.com/occidere/221426880947</link>
					<guid>https://blog.naver.com/occidere/221426880947</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/5719갈수록 퇴화하는 뇌를 살려내기 위해 도전했으나 푸는데 하루 2시간씩 4일, 꼬박 8시간이 걸린 문제이다.접근 방식다익스트라 + BFS 를 이용한 경로 역추적 의 복합 그래프 문제이다.순서는 아래와 같다.1. 처음 한번 다익스트라를 돌려 모든 최단경로를 찾는다.2. 최단경로에 속한 경로들을 모두 지운다.3. 다시 한번 다익스트라를 돌려 거의 최단 경로를 찾는다.다음과 같은 예시를 활용하여 풀어보도록 하겠다.1. 다익스트라를 돌려 모든 최단경로를 찾는다.여기서 핵심 부분은 모든 최단 경로를 찾아야 하므로 if 문의 부호가 &lt;&#x3D; 라는 점과, trace 리스트 배열에 next.......]]></description>
					<pubDate>Tue, 25 Dec 2018 17:40:19 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,최단경로,다익스트라,BFS,Dijkstra,Java,그래프탐색]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[수학]]></category>
					<title><![CDATA[[백준] 1193 - 분수찾기]]></title>
					<link>https://blog.naver.com/occidere/221415122429</link>
					<guid>https://blog.naver.com/occidere/221415122429</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1193사실 포스팅 할 만한 문제는 아니지만 그냥 코틀린 손에 익힐 겸 올려본다. 역시 간단한 알고리즘 문제 푸는게 문법 익히기에 좋은 것 같다. 접근 방식: 1. 반복문으로 i = 1부터 시작해 1씩 증가하며 sum 에 더해간다 (1 + 2 + 3 ... ) 2. sum + i 가 n 을 초과하면 반복문을 벗어난다. 3. 이후 구해진 i 값은 대각선 줄 에서 제일 큰 숫자 값이 되고, 분자 + 분모 값은 i + 1 값이 된다. 4. 만약 i 값이 홀수라면 대각선 시작 점에서 분자 &lt; 분모 인 상태로 시작하고, 짝수라면 분자 &gt; 분모 인 상태로 시작한다. 예를들어 n 이 8인 경우를 살펴보자. i = 3 -&gt; sum = (1 + 2 + 3) &lt;.......]]></description>
					<pubDate>Sat, 08 Dec 2018 17:35:39 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,코틀린,수학,Baekjoon,Algorithm,Kotlin,Math]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 9184 - 신나는 함수 실행]]></title>
					<link>https://blog.naver.com/occidere/221405838341</link>
					<guid>https://blog.naver.com/occidere/221405838341</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/9184 이 문제는 기초적인 DP 컨셉을 익히기에 아주 좋은 문제이다. DP는 매우 다양한 유형의 문제들이 있으나 많은 문제들에 기본적으로 깔려있는 개념은 바로 메모이제이션이고, 이 문제는 메모이제이션을 실습(?) 해보기 좋은 문제다. (또는 본인처럼 너무 오랜만에 풀어서 감잡기 용으로 풀어보기에도 나쁘진 않다) 접근 방식 우선 문제를 읽어보면 메모이제이션이 필요하다고 대놓고 힌트를 주고 있다. 1. 재귀 호출 파티 2. 그대로 구현하면 오래 걸림 이런 단순한 계산 위주의 재귀는 배열 등으로 값을 저장(메모이제이션)하는 것 만으로도 크게 연산 횟수를 줄일 수 있다. 따라서 문제에서 설.......]]></description>
					<pubDate>Sun, 25 Nov 2018 17:32:18 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,DP,동적계획법,DynamicProgramming,재귀,다이나믹프로그래밍,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[네이버 D2 기고!]]></title>
					<link>https://blog.naver.com/occidere/221405325317</link>
					<guid>https://blog.naver.com/occidere/221405325317</guid>
					<description><![CDATA[네이버 정규직 전환 후기 글 이후 정말 오랜만의 일상(?) 포스팅입니다. 어느덧 일을 시작한지 약 8개월차가 되었고, 좋은 동료분들과 환경 덕분에 여태까지 배웠던 것 보다 더 많은 것들을 배울 수 있었던 것 같습니다. 그 동안 개발한 것들 중 Elastic Stack 을 사용하여 구축하는 프로젝트가 있었습니다. 이를 개발하며 겪었던 경험담을 사내에서 공유 했었는데, 어쩌다 보니 네이버의 기술 블로그인 D2 에 기고를 하는 영광스러운 기회까지 얻을 수 있었습니다. https://d2.naver.com/helloworld/9878588 아직 한참 부족하고 모르는 것도 많지만, 좋은 동료분들의 아낌없는 도움 덕분에 D2 기고 라는 값진 경험을 해볼 수 있었던 기회였습니.......]]></description>
					<pubDate>Sat, 24 Nov 2018 17:18:18 +0900</pubDate>
					<tag><![CDATA[D2,네이버D2,naver,네이버,ElasticStack,Lambda]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Kafka]]></category>
					<title><![CDATA[Kafka-manager 설치 및 연동하기]]></title>
					<link>https://blog.naver.com/occidere/221395731049</link>
					<guid>https://blog.naver.com/occidere/221395731049</guid>
					<description><![CDATA[지난 포스팅에서는 docker를 이용하여 zookeeper 와 kafka를 구축해 보았다. 이번엔 예고한 대로 kafka-manager를 설치하여 연동해보도록 하겠다. kafka-manager 는 yahoo 에서 제작한 GUI 기반 카프카 관리 도구로, 웹 환경에서 클러스터, 토픽 등의 생성 및 변경, consumer group 확인 등의 작업을 웹 환경에서 확인하고 진행할 수 있다. 사실 cli 환경에서도 할 수는 있으나, 편의적인 측면에서 많은 기업들이 kafka-manager 를 도입하여 운용중이다. 목차1. 환경 세팅 2. Kafka-manager 빌드 및 실행 3. Kafka 연동 및 테스트 4. 마무리 5. 참고 1. 환경 세팅실습 환경은 아래와 같다. [Local] OS: macOS Mojave 10.14.1 JDK: 1.8.0_172 - Ja.......]]></description>
					<pubDate>Sat, 10 Nov 2018 16:50:59 +0900</pubDate>
					<tag><![CDATA[kafkamanager,카프카매니저,카프카매니져,카프카,kafka]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Kafka]]></category>
					<title><![CDATA[Docker 로 Zookeeper와 Kafka 구축하기]]></title>
					<link>https://blog.naver.com/occidere/221390946271</link>
					<guid>https://blog.naver.com/occidere/221390946271</guid>
					<description><![CDATA[이번 포스팅에선 Docker 로 Zookeeper와 Kafka 구축하는 방법에 대해서 살펴보겠다. 만약 직접 Zookeeper와 Kafka를 docker가 아닌 Native로 설치하고자 한다면 여기를 참고하도록 한다. 목차1. 환경 구성 2. Docker 환경 구축 3. Zookeeper 별도 설치 (선택) 4. Kafka 설치 및 테스트 5. 정리 6. 참고 1. 환경 구성실습 환경은 아래와 같다. [Server 1] OS: CentOS 7.3 JDK: 1.8.0_172 [Local] OS: macOS Mojave 10.14.1 JDK: 1.8.0_172 서버에는 Zookeeper를 올리고 Local에는 Kafka 를 설치하도록 하겠다. 본인은 편의를 위해 별도의 서버를 사용하였으나, 실습이므로 전부 Local에서 해도 무관하다. 2. Docker 환경 구축2.1. CentOS 7 에서 D.......]]></description>
					<pubDate>Sat, 03 Nov 2018 18:31:33 +0900</pubDate>
					<tag><![CDATA[docker,zookeeper,kafka,도커,주키퍼,카프카]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[배열]]></category>
					<title><![CDATA[[백준] 1773 - 폭죽쇼]]></title>
					<link>https://blog.naver.com/occidere/221365699423</link>
					<guid>https://blog.naver.com/occidere/221365699423</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1773 한줄 요약 그냥 배열 만들어서 폭죽 터진 시간을 1로 설정하고 나중에 다 더하면 됨 문제 해설 아래 해설은 순전히 푸념 글이므로 바쁜 사람은 바로 코드로 점프해도 무관하다. 순전히 제목보고 선택한 워밍업 문제라 딱히 설명할게 없다. 제목과 연관성이 높은 노래 한 곡 들으면서 풀면 딱이다. 그런데 이 문제 데이터셋이 좀 치사하다. 문제 조건을 보면 학생 수는 최대 100명, 폭죽쇼 최대 시간은 200만으로, 폭죽 주기가 1인 학생이 100명 있다면 시간복잡도가 2억 정도 나올 것이라 막 풀면 시간이 좀 애매할 것이라 생각은 했었다. 그러나 생각하기 싫어서 Set을 사용해서 막 풀었더니 시.......]]></description>
					<pubDate>Wed, 26 Sep 2018 14:21:04 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,배열,구현,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[이분 탐색]]></category>
					<title><![CDATA[[백준] 2512 - 예산]]></title>
					<link>https://blog.naver.com/occidere/221364545507</link>
					<guid>https://blog.naver.com/occidere/221364545507</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/2512 한줄 요약 전형적인 UpperBound / LowerBound 문제 (참고: https://blog.naver.com/occidere/221045300639) 문제 해설 이진탐색을 활용한 상계 / 하계 문제이다. 작성해야 하는 부분은 아래와 같다. 1. 배열의 합을 계산 2. 이진탐색을 활용하여 최대값을 계산 코드와 예제를 중심으로 살펴보자 1. 예산 배열의 합을 계산위 메서드는 예산 배열의 합을 구하는데, 상한선을 넘으면 상한 값을 적용하여 합계를 구한다. 2. 이진탐색을 활용해 최대 상한선을 계산위 코드를 문제의 샘플 인풋을 가지고 살펴보면 아래와 같다 위 그림을 표로 나타내면 아래와 같이 표현할 수 있다. 3. 상한값이 배열.......]]></description>
					<pubDate>Sun, 23 Sep 2018 18:27:06 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,Java,Python,이진탐색,이분탐색,BinarySearch,UpperBound,LowerBound]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[BFS]]></category>
					<title><![CDATA[[백준] 1963 - 소수 경로]]></title>
					<link>https://blog.naver.com/occidere/221360129672</link>
					<guid>https://blog.naver.com/occidere/221360129672</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1963 한줄 요약 전형적인 BFS 문제이다. 딱히 할 말이 없다. 문제 해설 접근 방식은 아래와 같다. 1. 에라토스테네스의 체를 이용하여 소수 배열을 구해놓는다. 2. 큐에서 뽑은 현재 수에서 시작하여 1개씩 숫자를 바꿨을 때 만들 수 있는 소수를 구해서 큐에 넣는다. - ex) 1033 -&gt; 1031, 1039 ... 단, 만들 수 있는 소수는 4자리 수(&gt;=1000) 이며, 현재 수에서 해당 수 까지 가는 비용이 더 작을 때만 가능하다. 예를들어 1033에서 시작하여 1031을 만든다고 가정했을 때, 만들 수 있는 경우의 수는 아래와 같다. - 1033 에서 1의 자리를 1로 바꾼다. (1번) - 1033 에서 1의 자리를 9로 바꾼.......]]></description>
					<pubDate>Sun, 16 Sep 2018 19:06:39 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,소수,BFS,Java,Python]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[파싱]]></category>
					<title><![CDATA[[백준] 4828 - XML]]></title>
					<link>https://blog.naver.com/occidere/221355611607</link>
					<guid>https://blog.naver.com/occidere/221355611607</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/4828 한줄 요약 역시 이런 파싱 문제에는 지름길이 없다. 오로지 정공법만이 있을 뿐 문제 해설 단순 파싱 &amp; 검증 문제이므로 하나씩 차근차근 구현해 나가는 수 밖에 없다. 처리 순서는 아래와 같다. 1. escape 문자 제거 (&amp;lt; &amp;gt; &amp;amp;) 2. 16진수 검증 &amp; 제거 3. xml 태그 검증 &amp; 제거 4. 위 3가지가 제거된 plain text의 검증 그나마 꼼수를 부린다면, 매 검증 단계에서 boolean으로 정상 비정상을 판단하지 말고, 비정상이면 Exception을 던져서 처리하는 것이 훨씬 쉽다. 위 과정을 각 단계별로 자세히 살펴보자 1. escape 문자 제거 별거 없다. 어차피 삭제되도 다.......]]></description>
					<pubDate>Sun, 09 Sep 2018 21:15:49 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,파싱,XML,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[브루트포스]]></category>
					<title><![CDATA[[백준] 1107 - 리모컨]]></title>
					<link>https://blog.naver.com/occidere/221354997206</link>
					<guid>https://blog.naver.com/occidere/221354997206</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1107 한줄 요약 애매하게 머리 굴리는 것 보다 가끔씩은 막 지르는게 좋을 때도 있다는 걸 느끼게 해준 문제 문제 해설 이 문제는 고려해야 할 사항들이 꽤 많은 문제이다. 고려해야 할 부분을 살펴보면 아래와 같다. 1. 시작값(100)에서 +-를 하는 횟수 vs 직접 버튼을 누르고 +-를 하는 횟수 2. 고장난 버튼이 없을 때, 입력을 받지 않음 3. 차이의 최소값을 구하는 게 최선이 아닐 수 있음 어차피 말로 해봤자 이해하기 힘들기 때문에, 예시를 통해 접근해본다. 1. 시작값(100)에서 +-를 하는 횟수 vs 직접 버튼을 누르고 +-를 하는 횟수 당연한 소리지만 N = 100인 경우는 직접 버튼을 누르지 않.......]]></description>
					<pubDate>Sat, 08 Sep 2018 16:58:02 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,Java,Cpp,Python3,브루트포스,수학]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[파싱]]></category>
					<title><![CDATA[[백준] 2733 - Brainf*ck]]></title>
					<link>https://blog.naver.com/occidere/221351019810</link>
					<guid>https://blog.naver.com/occidere/221351019810</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/2733정말 오래간만의 문제풀이다. 너무 오랜만이라 그런지 확실히 감이 좀 많이 떨어진 것 같다. 문제 설명이 문제는 단순한 구현문제로 주어진 조건 그대로 구현만 하면 된다. 다만 brainfuck 이란 언어의 존재는 알고있었으나, 자세한 구현은 몰라 좀 헤맸기 때문에 이 부분만 조금 짚고 넘어가도록 하겠다. 기본적으로 bf는 길이가 32768인 바이트 배열과, 그 배열을 가리키는 포인터 1개를 지닌다. 그냥 배열 1개와, 그 배열 접근용 인덱스 변수 1개가 있다고 생각하면 편하다. 이 문제에서 사용되는 bf의 명령어는 7개이다. [ 와 ]는 그냥 while 문의 { 와 } 로 생각하면 편하다. 수도코드로는.......]]></description>
					<pubDate>Sun, 02 Sep 2018 19:26:37 +0900</pubDate>
					<tag><![CDATA[Algorighm,백준,파싱,Java,Python,NodeJS,Kotlin,Brainfuck,알고리즘]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[JAVA]]></category>
					<title><![CDATA[[로깅] logback을 이용한 로깅 처리]]></title>
					<link>https://blog.naver.com/occidere/221341280123</link>
					<guid>https://blog.naver.com/occidere/221341280123</guid>
					<description><![CDATA[이 포스팅은 자기성찰의 색이 짙은 포스팅이다. 대학생활을 끝내고 현업자의 생활로 접어든 지금까지도 아직 로그 처리를 있는거 가져다 쓰는 정도로 밖에 모르고 있었다. System.out.println() 밖에 할 줄 모르던 얼마 전 까지의 나를 일깨우는 차원에서, logback의 역사와 기원 보다는, 사용법 측면에 집중하여 포스팅 해 보도록 하겠다. [라이브러리 설정]logback을 사용하기 위해선 logback-classic 라이브러리가 필요하다. 이 라이브러리를 maven에 추가해준다. [logback 설정파일 작성]logback 을 사용하기 위해서는 classpath 내부에 logback 설정파일이 필요하다. 설정파일은 3가지 방식을 사용할 수 있으며, 번호 순서대로 우선순위를 갖.......]]></description>
					<pubDate>Sat, 18 Aug 2018 16:45:07 +0900</pubDate>
					<tag><![CDATA[logback,slf4j,로그백,logger,로거,java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Linux]]></category>
					<title><![CDATA[12. Linux에서 oracle java 다운받기]]></title>
					<link>https://blog.naver.com/occidere/221310370591</link>
					<guid>https://blog.naver.com/occidere/221310370591</guid>
					<description><![CDATA[맨날 까먹어서 이참에 적어 놓는다. 다들 알다시피 터미널에서 wget으로 oracle java를 받으려면 매우 귀찮다. 명령어는 아래와 같다. 마지막 다운로드주소 부분에는 다운받고자 하는 자바 버전의 다운로드 링크를 넣으면 된다. 그런데 이걸 다 외워서 치는것은 매우 번거롭고 기억하기도 힘들다. 따라서 스크립트 파일로 만들어 놓으면 비교적 편리하다. [덤으로 JAVA_HOME 설정 및 환경변수로 추가하기] 다운받은 압축파일을 적당한 위치에 풀어놓는다. 이후 /etc/profile 파일을 열어서 아래 내용을 맨 아래에 추가해준다. (개별 호스트에만 적용을 하려면 ~/.profile 을 열어 추가하면 됨) 제대로 적용됬는지 확인해본다.]]></description>
					<pubDate>Sun, 01 Jul 2018 16:06:48 +0900</pubDate>
					<tag><![CDATA[Linux,Java,Oracle,리눅스,자바,오라클자바,wget]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Maven]]></category>
					<title><![CDATA[Github으로 개인 Maven Repository 만들기]]></title>
					<link>https://blog.naver.com/occidere/221285584339</link>
					<guid>https://blog.naver.com/occidere/221285584339</guid>
					<description><![CDATA[이번 포스팅에서는 Github을 가지고 개인용 Maven Repository를 만들어 보겠다. 목차는 아래와 같다. 목차1. 개요 2. Maven 용 Github 생성 3. 프로젝트 Deploy 4. pom.xml 테스트 5. 마치며1. 개요전체적인 개요는 아래의 그림과 같다. 예를 들어 Project 1에서 제작한 라이브러리를 jar파일 형태로 mvn deploy 를 하여 Maven Repo 전용 Github에 업로드하면, 다른 Project 4에서는 이 파일을 Maven Repository Github에서 가져와 사용하는 방식이다. 2. Maven용 Github 생성우선 github에 maven repository로 사용될 프로젝트를 생성한다. 본인의 경우 occidere-maven-repo 라는 프로젝트를 생성하였다. 그 다음으로는 Deploy key를 등록해야 한.......]]></description>
					<pubDate>Mon, 28 May 2018 00:33:32 +0900</pubDate>
					<tag><![CDATA[maven,github,메이븐,repository,저장소,mavenrepository,mvn,깃허브]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[네이버&#160;API]]></category>
					<title><![CDATA[[단축URL] 3. short 명령어 작성 (2018-04-24 내용 추가)]]></title>
					<link>https://blog.naver.com/occidere/221241840384</link>
					<guid>https://blog.naver.com/occidere/221241840384</guid>
					<description><![CDATA[네이버 단축 URL api 관련 마지막 포스팅이다. 이번 시간에는 저번에 생성한 short.jar 파일을 이용하여 short 라는 리눅스 명령어를 새로 만들어 호출해 사용할 수 있도록 하겠다. 작업할 리눅스의 스펙은 아래와 같다. Ubuntu 16.04 LTS Bash shell java 1.8 설치 우선 홈 디렉토리에 short 라는 폴더를 생성하고, 저번에 만든 jar 파일을 그 곳으로 옮긴다. 이후 이 jar 파일을 호출하는 코드를 ~/.profile 의 맨 아래에 추가한다. (모든 계정에서 사용하려면 /etc/profile 맨 아래에 추가하면 된다) 이후 이 내용을 적용시킨다. 여기까지 하면 모든 작업이 끝난 것이다. 이후 short 명령어를 호출하면 아래와 같이 사용이 가능하다. 단, 주소.......]]></description>
					<pubDate>Sat, 31 Mar 2018 18:23:32 +0900</pubDate>
					<tag><![CDATA[네이버,네이버단축url,단축url,네이버개발자센터,Java,Linux,Ubuntu,명령어]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[네이버&#160;API]]></category>
					<title><![CDATA[[단축URL] 2. Java로 API 호출 모듈 작성 - 2. JSON 파싱하기 (2018-04-19 내용 추가)]]></title>
					<link>https://blog.naver.com/occidere/221241830628</link>
					<guid>https://blog.naver.com/occidere/221241830628</guid>
					<description><![CDATA[이번 시간에는 저번 포스팅에서 호출하여 응답받은 JSON 결과에서 꼭 필요한 "url" 필드만 파싱하는 방법에 대해 알아보겠다. json 파싱 라이브러리에는 다양한 것들이 있으나, 그 중에서도 제일 많이 사용되는 Jackson 을 이용하도록 하겠다. 아래의 maven dependency 값을 pom.xml 에 등록하도록 한다. 그러면 자동으로 jackson 라이브러리를 다운받아서 dependency 에 추가해준다. 이제 잠시 저번에 살펴본 응답 결과를 살펴보자 JSON은 Key: Value 형식으로 구성되어 있다. 간단히 위 응답을 분석해보면 아래와 같이 나타낼 수 있다. 우리가 원하는 url 필드는 LinkedHashMap 형태의 result 필드에 담겨 있으므로, 한번 더 파싱을 해야 하고.......]]></description>
					<pubDate>Sat, 31 Mar 2018 18:02:22 +0900</pubDate>
					<tag><![CDATA[네이버,네이버단축url,단축url,네이버개발자센터,Jackson,Maven,IntelliJ,인텔리제이,JSON]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[네이버&#160;API]]></category>
					<title><![CDATA[[단축URL] 2. Java로 API 호출 모듈 작성 - 1. API 호출하기 (2018-04-19 내용 추가)]]></title>
					<link>https://blog.naver.com/occidere/221241789173</link>
					<guid>https://blog.naver.com/occidere/221241789173</guid>
					<description><![CDATA[이번 시간에는 저번에 발급받은 Client ID, Client Secret을 활용하여 네이버 단축 URL api를 호출하는 방법을 살펴보고 Java 코드를 작성해 보도록 하겠다. 본격적으로 들어가기 앞서 사용법에 대한 분석을 해 보도록 한다. 네이버 개발자센터에서 제공하는 가이드: https://developers.naver.com/docs/utils/shortenurl/가이드에 명시된 기본 명세는 아래와 같다. 우선 요청을 보낼 URL은 https://openapi.naver.com/v1/util/shorturl 이다. 이후 단축된 URL의 응답은 JSON이나 XML로 받을 수 있는데, 본 튜토리얼에선 JSON을 사용하도록 하겠다. 요청을 보낼 땐 POST 형식으로 단축시킬 주소를 담아 보낸다. 요청 변수명이 url 이므로, url=단.......]]></description>
					<pubDate>Sat, 31 Mar 2018 16:41:03 +0900</pubDate>
					<tag><![CDATA[네이버,네이버단축url,단축url,네이버개발자센터,url단축,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[네이버&#160;API]]></category>
					<title><![CDATA[[단축URL] 1. 네이버 단축 URL api 발급받기]]></title>
					<link>https://blog.naver.com/occidere/221241772975</link>
					<guid>https://blog.naver.com/occidere/221241772975</guid>
					<description><![CDATA[우선 네이버 개발자센터의 어플리케이션 신청 페이지로 이동한다. 링크: https://developers.naver.com/apps/#/register이후 아래와 같이 신청을 한다. 등록이 완료되면 아래와 같은 페이지가 나온다. 어플리케이션 정보 중 Client ID와 Client Secret은 추후 사용해야 하므로 적당히 복사해 놓는다. &lt;참고&gt; 1일 최대 2만 5천번까지 주소 변환을 요청할 수 있다. (변환된 주소 접근은 당연히 무제한 가능) 여기까지 하여 단축 URL api 신청이 완료되었다. 다음 포스팅에서는 발급받은 Client ID, Secret을 활용하여 Java로 api를 호출하는 방법에 대해서 알아보겠다.]]></description>
					<pubDate>Sat, 31 Mar 2018 16:09:54 +0900</pubDate>
					<tag><![CDATA[네이버,네이버단축url,단축url,네이버개발자센터,url단축]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[네이버&#160;API]]></category>
					<title><![CDATA[[단축URL] 0. 네이버 단축 URL api를 이용한 단축 명령어 만들기 개요]]></title>
					<link>https://blog.naver.com/occidere/221241766331</link>
					<guid>https://blog.naver.com/occidere/221241766331</guid>
					<description><![CDATA[이번엔 네이버 개발자 센터의 API 키를 활용하여 단축 URL 변환 명령어를 제작해보도록 한다. 전체적인 개요는 아래와 같다. 포스팅 순서는 아래와 같이 진행하겠다. 1. 네이버 단축 URL api 발급 2. Java로 API 호출 모듈 작성 2.1. API 호출 부분 작성 2.2. JSON 파싱 부분 작성 3. short 명령어 작성 다음 포스팅에서는 단축 URL api를 발급받는 방법을 소개하도록 하겠다.]]></description>
					<pubDate>Sat, 31 Mar 2018 15:57:01 +0900</pubDate>
					<tag><![CDATA[네이버,네이버단축url,단축url,네이버개발자센터,url단축]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Linux]]></category>
					<title><![CDATA[11. 디렉토리 이동(cd) 후 목록 확인(ls)]]></title>
					<link>https://blog.naver.com/occidere/221221466546</link>
					<guid>https://blog.naver.com/occidere/221221466546</guid>
					<description><![CDATA[쉘로 작업하면서 종종 디렉토리를 이동하고 파일 목록을 확인하는 시퀸스를 거친다. 일반적으로는 와 같이 cd 후 ls 명령어를 순서대로 사용한다. 그러나 디렉토리 이동이 많은 경우 이를 일일히 입력하는 것이 귀찮아진다. 이 귀찮음을 줄이기 위하여 cd 후 자동으로 ls를 할 수 있도록 코드를 추가해보자. 1. /etc/profile을 vim으로 연다. (혼자만 사용할 것이라면 ~/.profile을 열면 된다.) 2. 아래의 내용을 profile 내부에 입력한다. 간단히 코드를 분석해보면 아래와 같다. 3. profile의 내용을 적용한다. 4. 이후 cdl을 입력하면 원하는 디렉토리로 이동 후 바로 파일 목록을 출력하여 확인할 수 있다. Tip. clear 후 ls를 하고 싶으면 아.......]]></description>
					<pubDate>Sun, 04 Mar 2018 16:21:41 +0900</pubDate>
					<tag><![CDATA[Linux,리눅스,cd,ls,명령어,bash,cdl,cl]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[네이버 인턴십 종료... 그리고 새로운 시작!]]></title>
					<link>https://blog.naver.com/occidere/221219542347</link>
					<guid>https://blog.naver.com/occidere/221219542347</guid>
					<description><![CDATA[미루고 미루다가 약간 늦어버린 감이 있지만, 더 늦기 전에 지금이라도 글을 남겨볼까 합니다.작년 12월 26일부터 시작했던 7주간의 네이버 동계 인턴이 18년 2월 9일에 종료되었습니다.짧고도 길었던 7주간의 시간 동안 컴퓨터공학부 학생의 내가 아닌, 개발자 자신으로서 많은 것을 배울 수 있었고, 학교에서는 절대 경험해 볼 수 없는 것들을 체험할 수 있는 값진 시간이었습니다.혹시나 하는 마음에 지원했던 Hackday부터 시작해서, 절대 잊을 수 없는 생애 첫 면접을 거치고, 하루하루 시간가는줄도 몰랐던 7주간의 인턴십까지, 이제와서 돌아보니 아직도 실감이 잘 나지 않는군요 ㅎㅎ..이렇게 7주간 미숙했던 저를 너그러이 봐.......]]></description>
					<pubDate>Thu, 01 Mar 2018 18:26:20 +0900</pubDate>
					<tag><![CDATA[네이버,네이버인턴,정규직전환,네이버동계인턴,NAVER,네이버취업,네이버취직,네이버개발자,인턴십,동계인턴십]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[구현]]></category>
					<title><![CDATA[[백준] 1722 - 순열의 순서]]></title>
					<link>https://blog.naver.com/occidere/221213492382</link>
					<guid>https://blog.naver.com/occidere/221213492382</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1722 다시 돌아온 블로그 소생용 포스팅이다. 그동안 개발에만 몰두하고 알고리즘 공부를 조금 소홀히 했더니 푸는데 시간이 꽤 걸렸다. 접근 방식: 당연히 범위가 최대 20! 까지이기 때문에 브루트 포스 식의 무차별 대입은 불가능하다. 따라서 2개의 소문제에 대해서 각각 규칙을 찾아서 접근한다. 또한 K 값 역시 20! 까지 될 수 있으므로 long 자료형 (또는 long long)을 사용해야 함을 명심하자. 본격적으로 들어가기 앞서 순열의 순서가 1번이 아닌 0번부터 시작한다고 설정한다. N = 3인 경우 순열은 아래와 같이 생성된다. &lt;소문제 1&gt; k번째 순열을 찾아 출력해야 한다 예를들어 N = 3.......]]></description>
					<pubDate>Wed, 21 Feb 2018 19:19:15 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,구현,순열,Permutation,Java,Implementation,수학,Math]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[문자열 처리]]></category>
					<title><![CDATA[[백준] 2892 - 심심한 준규]]></title>
					<link>https://blog.naver.com/occidere/221200900985</link>
					<guid>https://blog.naver.com/occidere/221200900985</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/2892 그리 어려운 문제는 아니나, 블로그를 너무 방치하는 것 같아 일단 풀이를 써본다. 접근 방식: 키도 없이 암호문에서 원문을 복원하는 것은 거의 불가능에 가깝기에, 이런 문제는 대체로 규칙이 숨어있다. 가장 간단하게 생각할 수 있는 것은 { 알파벳 소문자 xor 숫자 키값 } 의 결과 범위와, { 공백 또는 . ^ 숫자 키값 } 의 결과 범위가 서로 다를 것이라는 가정이다. 그리고 이미 인풋 예시에서 증명이 되고 있다. 만약을 위해 확실하게 계산해보자. 우선 알파벳 소문자 a ~ z와 숫자 0 ~ 9까지의 xor 결과를 계산해보면 다음과 같다. 다음으로 공백과 .을 0~9와 xor 한 결과를 계산해보면.......]]></description>
					<pubDate>Sun, 04 Feb 2018 17:06:11 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,문자열처리,문자열,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 1254 - 팰린드롬 만들기]]></title>
					<link>https://blog.naver.com/occidere/221190032874</link>
					<guid>https://blog.naver.com/occidere/221190032874</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1254 이 문제는 DP로 분류되어 있으나, 본인에겐 잔머리 최적화의 결정체인 문제이다. 역시 회사생활 하면서 실력보다 빠르게 느는 것은 잔꾀인듯 하다. 접근 방식: 문제를 다시 한번 잘 살펴보면 이렇다. 문자열 맨 뒤에 길이 0 이상의 문자열을 붙였을 때, 팰린드롬이 되야 한다. 이 점을 명심하고 아래와 같은 순서로 접근해보자. 1. 어떤 경우가 최악의 경우인가? 2. 어떤 경우가 최선의 경우인가? 3. 팰린드롬 검사를 어떻게 하면 빠르게 할 수 있는가? 우선 최악의 경우에 대해 알아보면 아래와 같다. 그렇다면 최선의 경우에 대해 알아보면 아래와 같다. 즉, 문자열의 맨 앞글자부터 차례대로.......]]></description>
					<pubDate>Sun, 21 Jan 2018 16:51:24 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,DP,DynamicProgramming,동적계획법,팰린드롬,Palindrome,회문,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[KMP]]></category>
					<title><![CDATA[[백준] 1701 - Cubeditor]]></title>
					<link>https://blog.naver.com/occidere/221184825080</link>
					<guid>https://blog.naver.com/occidere/221184825080</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1701 정말 오랜만의 알고리즘 풀이이다. 분명 입사 전에는 퇴근 후 알고리즘 공부니 개인 공부니 여러가지를 하겠다고 마음 먹었으나, 나약한 의지력 덕분에 뜻대로 잘 되지 않아서 어떻게든 시간을 내서 포스팅을 한다. 문제 자체는 그리 어렵지 않은 KMP의 응용이다. 문제를 읽고 KMP를 어떻게 적용시켜야 되는지 부분이 어려웠을 수도 있다. 접근 방식: KMP의 로직과 문제의 조건이 어떻게 매칭될 수 있는지 생각해본다. 1. 어떤 문자열에서 두번 이상 나오는 부분 문자열을 찾아야 된다. = KMP의 Fail 함수를 만들 때, Longest Prefix Match 조건과 동일하다. 2. 그 부분 문자열들 중에서도 제일.......]]></description>
					<pubDate>Sun, 14 Jan 2018 15:31:22 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,KMP,접두사,접미사,문자열처리,Java,Prefix,Postfix]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[문자열 처리]]></category>
					<title><![CDATA[[백준] 9627 - 문장]]></title>
					<link>https://blog.naver.com/occidere/221169093453</link>
					<guid>https://blog.naver.com/occidere/221169093453</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/9627 백만년만의 문제풀이인듯 하다. 그동안 기말고사 + 온갖 과제 + 취업준비 3연타로 인해 한달 정도 쉬었더니 감이 완전히 다 죽어버려서 쉬운 문제부터 다시 풀기 시작하려 한다. 접근 방식: $ 문자 위치에 어떤 숫자를 영어로 발음한 문자열을 넣었을 때, 공백을 제외한 전체 문자의 개수가 해당 숫자와 동일한 경우를 찾는 문제이다. 단어의 개수 N이 20 이하이고, 답은 언제나 존재하며, 1000을 넘지 않는다고 주어졌다. 즉, 그냥 1부터 999까지 전부 만들어보면 된다. 코드를 어떻게 깔끔하게 줄이느냐가 관건인데 지금의 멘탈로서는 아래의 코드가 한계인 듯 하다. 추후 더 깔끔히 줄일 수.......]]></description>
					<pubDate>Fri, 22 Dec 2017 17:40:38 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,문자열처리,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 2017 찾아라 프로그래밍 마에스터 본선 후기]]></title>
					<link>https://blog.naver.com/occidere/221165066737</link>
					<guid>https://blog.naver.com/occidere/221165066737</guid>
					<description><![CDATA[11/25 (토)에 진행한 예선에 이은 본선 대회 후기입니다. 예선 후기: http://blog.naver.com/occidere/221148363315 시험 일자는 12/16 (토) 14시 ~ 17시였습니다. 사실 좀 늦어서 사진을 거의 못 찍었습니다. 제 서피스에 붙여놓은 스티커를 여기서 다시한번 보게 되네요 ㅎㅎ (공개SW 개발자 Lab) 100명 정도가 모여서 한번에 진행되었습니다. 공간은 약간 멀미나는 분위기이긴 한데 나름 쾌적하게 잘 진행하였습니다. 문제는 예선과 동일한 5문제(알고리즘 3문제 + SQL 2문제)가 출제되었고 시간은 3시간이었습니다. 인터넷으로 API나 검색 등을 허용했습니다. 시작 전 난이도는 예선과 비슷하고, 예선문제를 본인이 직접 풀었다는 것을 증명.......]]></description>
					<pubDate>Sun, 17 Dec 2017 16:28:05 +0900</pubDate>
					<tag><![CDATA[프로그래밍마에스터,마에스터,찾아라프로그래밍마에스터,프로그래밍마에스터본선,알고리즘대회,코딩시험,찾아라프로그래밍마에스터본선,2017찾아라프로그래밍마에스터,프로그래밍시험,알고리즘시험]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] NAVER Campus HackDay Winter 면접 합격 후기]]></title>
					<link>https://blog.naver.com/occidere/221165057437</link>
					<guid>https://blog.naver.com/occidere/221165057437</guid>
					<description><![CDATA[이 후기 역시 본래 게시글이 너무 길어져서 따로 분리하였습니다.Naver Campus Hackday 후기: https://blog.naver.com/occidere/22114132735511/30 (목) 우수참가자 합격 메일을 받은지 약 1주일 뒤인 12/7 (목)에 면접 일자를 통보받았습니다.라인보다 복장 제한이 더 없습니다. 무려 비즈니스 캐주얼도 아닌 캐주얼입니다. 그냥 캐주얼.그러나 안전함을 위해 라인과 동일한 비즈니스 캐주얼로 갔습니다. (다른 분들도 비캐로 오셨던 것 같습니다)라인때 방문한 분당을 다시 찾아오게 되었습니다. 이제 어느정도 길이 익어서 딱히 헤메진 않았습니다만 엄청 추웠던 기억이 납니다. 덕분에 그린팩토리 외관을 못찍었습니다...역시나 안.......]]></description>
					<pubDate>Sun, 17 Dec 2017 16:10:49 +0900</pubDate>
					<tag><![CDATA[네이버,네이버인턴,캠퍼스핵데이,캠퍼스핵데이인턴,CampusHackday,네이버핵데이,네이버핵데이인턴,핵데이인턴,인턴,NaverCampusHackday]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 라인플러스 2017 SW 개발 동계인턴(정규직 채용 연계형) 면접 합격후기]]></title>
					<link>https://blog.naver.com/occidere/221165027511</link>
					<guid>https://blog.naver.com/occidere/221165027511</guid>
					<description><![CDATA[원래 하나의 포스팅에 이어서 쓸 예정이었으나, 너무 길어지는 것 같아서 별도로 포스팅합니다. 라인플러스 2017 SW 개발 동계인턴 서류 후기: https://blog.naver.com/occidere/221141220427 11/30 (목) 에 필기전형 합격 통보를 받고 12/6 (수) 에 1차면접 날짜 및 장소를 공지받았습니다. 면접이 있는 주가 기말고사 기간이라서 많이 불안했는데, 다행히도 시험 시간들과 충돌나지는 않았습니다. 복장이 제일 걱정됬는데 정장 입고가긴 너무 그런 것 같아서, 학교에서 발표할 때 입는 무난한 복장으로 갔습니다. (다른 분들도 살펴보니 정장핏은 없던 것 같습니다) 면접 날짜에 조금 일찍 출발을 해서 약 1시간 반 전에 도착을 했습니다. 다행.......]]></description>
					<pubDate>Sun, 17 Dec 2017 15:12:00 +0900</pubDate>
					<tag><![CDATA[라인플러스,라인,라인인턴,라인플러스인턴,면접,면접후기,라인면접후기,라인플러스면접후기,라인동계인턴,라인플러스동계인턴]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 2017 찾아라 프로그래밍 마에스터 (중소/중견기업 채용 연계 프로그래밍 대회) 후기]]></title>
					<link>https://blog.naver.com/occidere/221148363315</link>
					<guid>https://blog.naver.com/occidere/221148363315</guid>
					<description><![CDATA[엄청나게 많은 기업들이 참가하는 알고리즘 대회에 참여하였습니다. 이 시험이 14시 ~ 18시 사이에 3시간 동안 진행되었는데, 이 직전에 라인 동계인턴 시험을 바로 봤어서 너무 피곤하여 안 보려고 했습니다만, 그냥 어떤 느낌인가 살펴보려고 가벼운 마음으로 풀어봤습니다. 문제는 총 5문제가 출제되었습니다. 알고리즘 3개 + SQL 2문제였습니다. SQL이 나올줄은 상상도 못했습니다. 총점: 300 / 400 알고리즘 1번 [기초, HashSet] 중복된 숫자를 포함하는 길이 N의 배열에서 N/2 개를 선택 할 때, 서로 다른 숫자를 최대 몇개까지 고를 수 있나를 묻는 문제였습니다. 해시셋이 담아놓고 크기가 n/2를 안 넘으면 해시셋 사이즈를, 넘으면 n/2를.......]]></description>
					<pubDate>Sat, 25 Nov 2017 18:16:03 +0900</pubDate>
					<tag><![CDATA[프로그래밍마에스터,알고리즘,Algorithm,코딩테스트,알고리즘테스트,알고리즘대회,프로그래머스,Programmers,채용연계대회,SQL]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] DEVLAB - 타이젠을 이용해 IoT 쉽게 만들기]]></title>
					<link>https://blog.naver.com/occidere/221145452621</link>
					<guid>https://blog.naver.com/occidere/221145452621</guid>
					<description><![CDATA[2017.11.21 화요일 18:30 ~ 21:30 간 진행된 진행된 삼성 DEVLAB 에 다녀왔습니다. 주제는 타이젠을 활용해 IoT 체험을 해보는 것으로, 라즈베리파이3(타이젠 OS 탑재) + 적외선 모션인식 센서를 이용해서 데이터를 수집한 뒤, AWS에 전송하는 것을 목표로 진행되었습니다. 원래 IoT 쪽에 관심이 많았는데 상황 상 학교에서 배울 수 있는 환경이 안되어서 관심을 잠시 접고있던 찰나, 데브랩 메일이 와서 바로 참가신청을 하였습니다. 심지어 말로만 듣던 타이젠을 바탕으로 진행한다고 하여 궁금해서 참가한 점도 꽤 있습니다 ㅎㅎ 장소는 양재에 있는 삼성 R&amp;D 센터에서 진행되었습니다. 수업끝나자마자 밥도 못먹고 출발했습니다. 지각해.......]]></description>
					<pubDate>Wed, 22 Nov 2017 00:26:11 +0900</pubDate>
					<tag><![CDATA[삼성,DEVLAB,데브랩,타이젠,Tizen,IoT,Samsung,사물인터넷]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[다익스트라]]></category>
					<title><![CDATA[[백준] 1719 - 택배]]></title>
					<link>https://blog.naver.com/occidere/221144965647</link>
					<guid>https://blog.naver.com/occidere/221144965647</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1719오랜만의 알고리즘 포스팅이다. 지금도 충분히 바빠서 시간이 없으나 앞으로는 더 시간이 없을 예정이기에 조금이라도 틈을 내서 글을 올려본다. 접근 방식: 기본적으로 시작점을 하나 잡은 뒤 다익스트라를 돌려서 각 정점으로의 최소값을 계산한다. 단, 다익스트라를 돌리는 과정에서 매 순간마다의 경로를 추적할 수 있게 기록해야 한다. 사실상 추적기법이 이 문제의 전부이다. 추적 기법은 아래와 같이 배열을 이용해 쉽게 해결할 수 있다. 위 내용을 바탕으로 코드를 구성하면 된다. 단, 모든 정점에 대해 다익스트라 탐색 &amp; 경로 추적을 하여 출력해야 됨을 잊지 말자. 코드 구성: &l.......]]></description>
					<pubDate>Tue, 21 Nov 2017 13:42:40 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,다익스트라,Dijkstra,최단경로,Java,PriorityQueue,경로추적]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] NAVER Campus HackDay Winter 후기]]></title>
					<link>https://blog.naver.com/occidere/221141327355</link>
					<guid>https://blog.naver.com/occidere/221141327355</guid>
					<description><![CDATA[하라는 공부는 안하고 이것저것 많이 찔러봤더니 후기글만 점점 늘어나는군요..!11월 둘째 주 경, 학교에서 메일이 와서 읽어보니 네이버 해커톤이 있다고 참가할 사람 있으면 지원하라더군요.수업듣기가 너무 싫어서 어떤 해커톤인지 자세히 살펴봤더니, 네이버에서 진행하는 서비스들을 기반으로 현직 개발자들과 함께 개발하는 해커톤이었습니다.재밌을 것 같아서 5개 항목을 지원했더니 운이 좋게도 참가자로 선정되었습니다!다행히도(?) 선정된 주제가 도전해볼 만한 분야라서 더욱 기대가 됩니다!남은 시간동안, 시작하기 전 미리 준비를 해놔야 겠네요 ㅎㅎ..어제를 마지막으로 하여 핵데이를 잘 마쳤습니다.일반 해커톤과 달리, 네이버.......]]></description>
					<pubDate>Thu, 16 Nov 2017 13:52:34 +0900</pubDate>
					<tag><![CDATA[네이버,네이버해커톤,네이버캠퍼스,네이버캠퍼스핵데이,Naver,NaverCampus,NaverCampusHackDay,NaverHacakthon,CamputHackDay,캠퍼스핵데이,핵데이,네이버핵데이,커넥트원]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 라인플러스 2017 SW 개발 동계인턴(정규직 채용 연계형) 지원 후기]]></title>
					<link>https://blog.naver.com/occidere/221141220427</link>
					<guid>https://blog.naver.com/occidere/221141220427</guid>
					<description><![CDATA[여느때와 다름없이 잡플래닛을 뒤져보다 보니 라인플러스 인턴 채용 공고를 보게 되서 혹시나 하는 마음에 지원을 하게 되었습니다. 밤새가며 자소서를 쓴 기억이 나는군요... (심지어 첫 자소서라 더 어려웠던 기억이...)이후 학교 일정이 바빠서 완전이 잊고 있었는데 15일에 메일이 왔습니다.결과는...서류전형 합격이었습니다!별 기대도 안하고 있었는데 서류가 붙어버려서 놀랐었습니다 ㅋㅋ.. (왠지 서류는 어지간하면 다 붙여주는 듯 합니다)아무것도 준비해 놓은게 없는데 일단은 당장 눈앞에 있는 필기시험 및 알고리즘 테스트를 준비해야겠네요.여러 해프닝이 있었지만, 다행히 필기전형을 무사히 마칠 수 있었습니다.자세한 내용.......]]></description>
					<pubDate>Thu, 16 Nov 2017 11:35:40 +0900</pubDate>
					<tag><![CDATA[라인,라인플러스,인턴,라인인턴,라인동계인턴,라인플러스인턴,line,lineplus]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] (주)그렙 채용 알고리즘 테스트 후기]]></title>
					<link>https://blog.naver.com/occidere/221137027036</link>
					<guid>https://blog.naver.com/occidere/221137027036</guid>
					<description><![CDATA[17년 11월 03일 15:01 ~ 11월 15일 00:00 동안 진행되는 (주) 그렙 알고리즘 테스트에 응시하였습니다. 사실 그동안 많은 시험에 응시하였으나 결과가 그리 좋지 않아서 포스팅을 하지 않았습니다만... 이번 시험엔 최초로 만점(300 / 300점)을 받아서 기념삼아 포스팅을 하게 되었습니다! 그냥 문제풀며 경험이나 쌓자는 생각으로 도전했는데 예상보다 괜찮은 결과를 얻은 것 같습니다. 아마 예선전이어서 쉬운거라 예상합니다만, 예선 본선을 떠나 순수하게 all solve 에 의미를 두려고 합니다. 안타깝게도 아직 진행중인 대회인지라 문제 리뷰 및 풀이가 불가능하군요 ㅠ 대회가 종료되는대로 간단하게 리뷰 추가하도록 하겠습니다. 아직 응시.......]]></description>
					<pubDate>Fri, 10 Nov 2017 16:34:49 +0900</pubDate>
					<tag><![CDATA[그렙,Grepp,알고리즘,Algorithm,코딩테스트,알고리즘테스트,그렙채용,알고리즘시험]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 한국정보처리학회 추계학술발표회 - 한이음 학술대회 논문 포스터 발표 참가 후기]]></title>
					<link>https://blog.naver.com/occidere/221134498049</link>
					<guid>https://blog.naver.com/occidere/221134498049</guid>
					<description><![CDATA[11월 3일 금요일에 한국과학기술대학교 미래관에서 진행된 2017 한국정보처리학회(KIPS) 추계 학술발표회의 일환인 한이음 학술대회 논문 포스터 발표에 참가하였습니다. 연초에 시작한 한이음 공모전 프로젝트로 진행했던 실시간 성능 모니터링 시스템 개발과 관련한 과정을 논문으로 편찬하여 제출하였는데, 운이 좋게 발표작에 선정이 되어 게시를 하였습니다. 다양한 작품들의 연구과정을 살펴볼 수 있는 유익한 시간이었던 것 같습니다. 아래는 사진인데 날씨가 너무 좋아서 이것저것 찍다 보니 풍경 사진이 꽤 많군요 ㅋㅋ...]]></description>
					<pubDate>Tue, 07 Nov 2017 13:56:02 +0900</pubDate>
					<tag><![CDATA[한국정보처리학회,KIPS,추계학술발표회,한이음,한이음포스터,한이음공모전,서울과학기술대학교]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[재귀 호출]]></category>
					<title><![CDATA[[백준] 1539 - 이진 검색 트리]]></title>
					<link>https://blog.naver.com/occidere/221133866451</link>
					<guid>https://blog.naver.com/occidere/221133866451</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1539 BST 시뮬레이션의 탈을 쓴 lower bound 문제이다. 2초의 넉넉한 시간과 코드를 보고 진짜 구현해서 시뮬레이션 돌리면 시간초과가 뜬다. (BST는 최악의 경우 O(N)의 선형이 되고, 선형 BST의 노드 N개를 삽입하므로 O(N^2)이 되어 TLE) 접근 방식: 다음과 같은 예시를 생각해 보자 N = 6이고, P 배열이 1, 4, 0, 2, 3, 5 인 경우를 나타내면 아래와 같다.이 때 트리를 만드는 사고 방식을 조금 바꿔서 BST가 어떻게 add가 이뤄지는지에 집중해보도록 한다. 다음과 같은 상황을 고려해 보자 이미 알겠지만 굳이 그려보자면 다음과 같다. 그런데 이 트리의 모양을 변형하면 재밌는 일이 벌어진다.......]]></description>
					<pubDate>Mon, 06 Nov 2017 17:55:28 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,재귀호출,로어바운드,lowerbound,하한선,이진검색트리,BinarySearchTree,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[Linux]]></category>
					<title><![CDATA[10. ssh와 xhost를 통해 원격으로 GUI를 사용해 보자.]]></title>
					<link>https://blog.naver.com/occidere/221133121595</link>
					<guid>https://blog.naver.com/occidere/221133121595</guid>
					<description><![CDATA[일반적으로 원격으로 작업하는 경우, 주로 터미널을 통한 TUI 작업을 하였다. 그러나, 그래프 확인 등의 GUI 작업이 필요한 경우도 종종 있는데, 본 포스팅에서는 그 방법에 대해 소개하고자 한다. 하고자 하는 작업 상황은 아래와 같다. 1. Local 에서 Remote로 SSH를 통해 접속하여 작업을 한다. 2. 작업 결과로 나온 그래픽 화면을 내 컴퓨터(Local)에 띄워서 보고자 한다. 필요한 작업을 먼저 간단히 요약하면 다음과 같다. 이를 바탕으로 진행하도록 하겠다. 내용이 조금 길 수도 있으나, 전혀 어렵지 않고 단지 귀찮은게 많은 것 뿐이라 차분히 따라하면 쉽게 할 수 있을 것이다. 1. Localhost에서 DISPLAY 환경변수 및 xhost 설정DISPLAY .......]]></description>
					<pubDate>Sun, 05 Nov 2017 19:12:51 +0900</pubDate>
					<tag><![CDATA[Linux,Ubuntu,DISPLAY,xhost,Xmanager,Xming,원격디스플레이,ssh,원격DISPLAY,우분투]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 1562 - 계단 수 (2017-11-02 수정완료)]]></title>
					<link>https://blog.naver.com/occidere/221130521559</link>
					<guid>https://blog.naver.com/occidere/221130521559</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/1562 많이 어려웠다. 왜 정답률이 46%나 되는지 이해가 가지 않는 문제. 접근 방식: 쉬운 계단 수 문제와 알고리즘 자체는 동일하다. 단, 0 ~ 9를 모두 포함하는 계단 수만 세야 한다. 0~9를 사용했는지 boolean 배열을 이용해서 하나하나 세는 것은 너무 복잡하다. 따라서 비트마스킹을 이용하여 수를 썼는지 안썼는지를 판단한다. 비트마스킹에 대한 예를 들어보면 아래와 같다. 이 내용을 바탕으로 점화식을 세우면 아래와 같다. 이제 이를 적용하여 코드를 구성하면 된다. 단, 수가 매우 커지므로 1,000,000,000으로 나눈 나머지를 다뤄야 함을 잊지 말도록 한다. 코드 구성: &lt;Java 1.8&gt;]]></description>
					<pubDate>Wed, 01 Nov 2017 22:07:35 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,DP,동적계획법,DynamicProgramming,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DFS]]></category>
					<title><![CDATA[[백준] 14502 - 연구소]]></title>
					<link>https://blog.naver.com/occidere/221129630831</link>
					<guid>https://blog.naver.com/occidere/221129630831</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/14502이번에도 삼성 기출문제이다. 처음 접하고 이번엔 제대로 된 문제를 냈구나 싶어서 벽을 세우는 알고리즘을 열심히 생각해 봤으나, 이는 함정이였다. 그냥 완전탐색으로 풀면 됨. 접근 방식: 벽을 반드시 3개를 세워야 한다는 점이 포인트이다. 즉, 3단계 까지 완전탐색을 진행하면 된다. 1. 3단계까지 빈칸(0)에 벽(1)을 세워가며 완전탐색을 한다. 2. 3단계에 도달했다면 2-1. 2중 for문을 이용해 바이러스(2)인 부분을 찾아서 dfs를 돌려서 바이러스를 전파한다 2-2. 바이러스 전파 후 2중 for문을 이용해 남아있는 안전영역(0)의 개수를 세서 반환한다. 3. 반환되는 안전영역의 값들 중 최.......]]></description>
					<pubDate>Tue, 31 Oct 2017 20:13:21 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,완전탐색,DFS,Java,Kotlin,삼성기출,삼성SW기출,삼성SW역량테스트]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[후기] 글로벌 해커톤 in 제주 후기]]></title>
					<link>https://blog.naver.com/occidere/221129018372</link>
					<guid>https://blog.naver.com/occidere/221129018372</guid>
					<description><![CDATA[며칠 전 참가자 선정 포스팅으로 짧게 소개드렸던 Global hackathon in Jeju 의 후기입니다! 제주 창조경제혁신센터 J-Space (3F) 에서 무박 3일동안 진행되었습니다. &lt;1일차 (17.10.27.Fri)&gt; 제주 국제공항에서 택시를 타고 제주 벤처마루에 도착했습니다. 근방에서 제일 높은 건물이었습니다. 날씨도 맑고 화창해서 한창 들떠있었던 것 같네요.본의아니게 살짝 늦게 도착해서 로비에서 부랴부랴 참가자 확인을 하고 증정품(에코백, 텀블러, 수건 등)들을 지급받았습니다. 자리가 없어서 다른분들 테이블에 끼어앉았습니다. 얘기 나누시는걸 들어보고 대단한 실력자 분들인 듯 한 느낌이 들었는데, 아니나 다를까 진정한 능력자분 들이셨.......]]></description>
					<pubDate>Tue, 31 Oct 2017 02:01:08 +0900</pubDate>
					<tag><![CDATA[제주글로벌해커톤,글로벌해커톤in제주,JCCEI,GlobalHackathonInJeju,GlobalHackathon,제주창조경제혁신센터,국민대학교,해커톤,Hackathon,제주]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DFS]]></category>
					<title><![CDATA[[백준] 14889 - 스타트와 링크]]></title>
					<link>https://blog.naver.com/occidere/221125786932</link>
					<guid>https://blog.naver.com/occidere/221125786932</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/14889 역시나 이번에도 삼성 SW 기출 문제이다(10/22) 이 문제 역시 완전탐색으로 풀 수 있다. 아직 삼성문제를 다 안풀어봤지만 원래 이렇게 완전탐색 문제가 많은건지, 그냥 내가 이상하게 푼 건지 슬슬 의심되기 시작하고 있다. 접근 방식: 그림으로 나타내면 아래와 같다. 그런데 위의 경우의 수에서 뭔가 이상한 점을 발견할 수 있다. 바로 일정 단계를 기준으로 대칭을 이루며 중복이 발생한다는 점이다. 이제 여기서 대칭을 제거하고 나면 완전탐색을 돌릴 범위를 한정할 수 있다. 즉, Team 1을 고를 때, 첫번째 사람은 무조건 선택하고, 나머지 사람들에 대해서만 완전탐색을 하면 되는 것이.......]]></description>
					<pubDate>Thu, 26 Oct 2017 15:02:57 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,삼성기출,삼성SW역량테스트,삼성SW기출,완전탐색,DFS,Java]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DFS]]></category>
					<title><![CDATA[[백준] 14888 - 연산자 끼워넣기]]></title>
					<link>https://blog.naver.com/occidere/221125292558</link>
					<guid>https://blog.naver.com/occidere/221125292558</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/14888 또 다른 삼성 문제. 무려 3일 전(10/22)에 치뤄진 따끈따끈한 문제이다. 접근 방식: 결과값이 -10억보다 작지도 않고, 10억보다 크지도 않다 -&gt; int 범위로 처리가능 연산자의 개수 N-1의 최대값 = 10, 시간제한 2초 -&gt; 완전탐색 즉, 그냥 단순하게 완전탐색으로 구현하면 된다. 코드 구성: &lt;Java 1.8&gt;&lt;Kotlin 1.1&gt;]]></description>
					<pubDate>Wed, 25 Oct 2017 22:01:57 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,완전탐색,DFS,삼성기출,삼성SW역량테스트,Java,Kotlin,삼성SW역량,Algorithm]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[[일상] 백준 800문제 달성!]]></title>
					<link>https://blog.naver.com/occidere/221123083267</link>
					<guid>https://blog.naver.com/occidere/221123083267</guid>
					<description><![CDATA[시간이 얼마 남진 않았으나, 졸업 전 까지 1000문제 달성을 목표로...]]></description>
					<pubDate>Mon, 23 Oct 2017 10:04:50 +0900</pubDate>
					<tag><![CDATA[백준,일상]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 14501 - 퇴사]]></title>
					<link>https://blog.naver.com/occidere/221122137392</link>
					<guid>https://blog.naver.com/occidere/221122137392</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/14501 또 다른 삼성 SW 기출 문제라고 한다. 범위 N이 15까지밖에 안되면서 시간제한이 2초나 되는것으로 보아 DP로 하던 완전탐색으로 하던 일단 풀어보라는 의도같다. 접근 방식: 별다른건 없다. 1일 ~ N일까지 하나씩 잡고 시작해서 상담이 끝나는 시간을 고려하며 cost를 더해가면 된다. 이 때, 완전탐색의 경우 단순히 더해나가면서 전역변수로 maxCost를 둬서 계산하면 되고, DP의 경우 동일한 로직에 int dp[N]을 두어 중복연산을 방지하면 된다. 이 때, 1 ~ N일 부터 하나씩 잡고 시작하는 이유는 4 5 1000 1 1 1 1 1 1 처럼 첫번째 날 부터 시작하는 것이 반드시 최선이 아닌 경우가 존재하.......]]></description>
					<pubDate>Sat, 21 Oct 2017 17:58:27 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,DP,동적계획법,완전탐색,Java,Kotlin,삼성SW기출,삼성기출]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[DP]]></category>
					<title><![CDATA[[백준] 2666 - 벽장문의 이동]]></title>
					<link>https://blog.naver.com/occidere/221120907901</link>
					<guid>https://blog.naver.com/occidere/221120907901</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/2666 오랜만의 DP 풀이. 그동안 정말로 죽을만큼 바빠서 못 풀다가 잠깐 소강기에 접어들어 풀어봤는데, 확실히 알고리즘은 몇일만 쉬어도 실력이 몇달씩 퇴보하는 것 같다. 뇌가 석화되서 사고가 굳어버린 덕분에 정답률이 45%나 되는데도 불구하고 한참 헤멨음. 접근 방식: 기본적으로 완전탐색 + 최적화 방식으로 진행한다. 우선 코드 작성의 용이성을 위해 표현 방식을 미리 살펴보면 아래와 같다. 열려있는 방이라고 표현한 이유는, "문을 미는 것" 보다 "열려있는 방과 문이 있는 방을 swap"하는 것이 훨씬 이해하기 쉽기 때문이다. 예를들면 아래와 같다. 이를 확장해서 살펴보면 아래와 같이.......]]></description>
					<pubDate>Thu, 19 Oct 2017 22:50:26 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,DP,DynamicProgramming,동적계획법,Java,Kotlin,다이나믹프로그래밍]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[일상]]></category>
					<title><![CDATA[2017년 글로벌 해커톤 in 제주 참가자 선정!]]></title>
					<link>https://blog.naver.com/occidere/221116491880</link>
					<guid>https://blog.naver.com/occidere/221116491880</guid>
					<description><![CDATA[시험기간은 참 신기한 시간인 듯 합니다. 평소엔 귀찮아서 자기 차례가 절대 오지 않는 스레드마냥 미뤄두었던 포스팅을 한번에 몰아서 하게 되네요. 10/27 ~ 10/29의 2박 3일동안 진행되는 2017년 제주 글로벌 해커톤에 지원을 해서 참가자로 선정되었습니다! (제출한 포트폴리오가 좀 부족한 것 같아서 걱정을 많이 했었는데 운이 좋았던 것 같습니다.) 제주 글로벌 해커톤은 매년 제주 창조경제 혁신센터에서 진행하는 해커톤으로 학생, 개발자, 연구원 등의 다양한 계층, 다양한 국가의 참가자들이 모이는 행사입니다. 이번엔 "Save the Earth for the future generations - Keep the Earth Beautiful" 라는 주제를 바탕으로 환경보호에 관련.......]]></description>
					<pubDate>Fri, 13 Oct 2017 19:45:44 +0900</pubDate>
					<tag><![CDATA[글로벌해커톤in제주,제주글로벌해커톤,제주창조경제혁신센터,해커톤,글로벌해커톤,국민대학교SW중심대학사업단,GlobalHackathonInJeju,GlobalHackathon,Hackathon]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
				<item>
					<author>occidere</author>
					<category><![CDATA[시뮬레이션]]></category>
					<title><![CDATA[[백준] 3190 - 뱀]]></title>
					<link>https://blog.naver.com/occidere/221116476970</link>
					<guid>https://blog.naver.com/occidere/221116476970</guid>
					<description><![CDATA[문제 링크: https://www.acmicpc.net/problem/3190 정말 오랜만에 올리는 알고리즘 풀이이다. 사실 그동안 조금씩 풀기는 했었는데 정말로 너무 바빠서 도저히 글을 쓸 시간이 없었으나, 시험기간 돌입 기념으로 공부하기 싫어서 딴짓할 겸 올린다. 삼성 SW 역량 테스트 기출문제라고 한다. 접근 방법: 주어진 순서대로 구현을 한다. map은 뱀이 있으면 SNAKE(-1)로, 사과가 있으면 APPLE(1)로, 아무것도 없으면 0인 상태이다. 또한 꼬리 부분을 쉽게 제거하기 위해 뱀의 궤적를 queue에 담아 관리한다. 예를들어 뱀이 (0, 0)에서 시작해서 계속 사과를 먹으며 우측으로 이동해 (0, 3)까지 간 상태라면 queue = (앞=꼬리) { (0,0), (0,1), (0,2),.......]]></description>
					<pubDate>Fri, 13 Oct 2017 19:18:15 +0900</pubDate>
					<tag><![CDATA[백준,알고리즘,Algorithm,시뮬레이션,Simulation,삼성기출,삼성SW역량평가,Cpp]]></tag>
					<activity:verb>http://activitystrea.ms/schema/1.0/post</activity:verb>
					<activity:object-type>http://activitystrea.ms/schema/1.0/blog-entry</activity:object-type>
				</item>
			
		
		
	
</channel>
</rss>
